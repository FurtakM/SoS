// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41382 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3650 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3650 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3650 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3650 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3650 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3650 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3650 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3650 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3650 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3650 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3650 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 41354 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3704
// begin unit := CreateCharacter ( prefix & ident ) ;
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
// if unit then
3681: LD_VAR 0 5
3685: IFFALSE 3702
// DeleteCharacters ( prefix & ident ) ;
3687: LD_VAR 0 3
3691: PUSH
3692: LD_VAR 0 1
3696: STR
3697: PPUSH
3698: CALL_OW 40
// end else
3702: GO 3719
// unit := NewCharacter ( ident ) ;
3704: LD_ADDR_VAR 0 5
3708: PUSH
3709: LD_VAR 0 1
3713: PPUSH
3714: CALL_OW 25
3718: ST_TO_ADDR
// result := unit ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_VAR 0 5
3728: ST_TO_ADDR
// end ;
3729: LD_VAR 0 4
3733: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3734: LD_INT 0
3736: PPUSH
3737: PPUSH
// if not side or not nation then
3738: LD_VAR 0 1
3742: NOT
3743: PUSH
3744: LD_VAR 0 2
3748: NOT
3749: OR
3750: IFFALSE 3754
// exit ;
3752: GO 4522
// case nation of nation_american :
3754: LD_VAR 0 2
3758: PUSH
3759: LD_INT 1
3761: DOUBLE
3762: EQUAL
3763: IFTRUE 3767
3765: GO 3981
3767: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3768: LD_ADDR_VAR 0 4
3772: PUSH
3773: LD_INT 35
3775: PUSH
3776: LD_INT 45
3778: PUSH
3779: LD_INT 46
3781: PUSH
3782: LD_INT 47
3784: PUSH
3785: LD_INT 82
3787: PUSH
3788: LD_INT 83
3790: PUSH
3791: LD_INT 84
3793: PUSH
3794: LD_INT 85
3796: PUSH
3797: LD_INT 86
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: LD_INT 15
3811: PUSH
3812: LD_INT 16
3814: PUSH
3815: LD_INT 7
3817: PUSH
3818: LD_INT 12
3820: PUSH
3821: LD_INT 13
3823: PUSH
3824: LD_INT 10
3826: PUSH
3827: LD_INT 14
3829: PUSH
3830: LD_INT 20
3832: PUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 25
3841: PUSH
3842: LD_INT 32
3844: PUSH
3845: LD_INT 27
3847: PUSH
3848: LD_INT 36
3850: PUSH
3851: LD_INT 69
3853: PUSH
3854: LD_INT 39
3856: PUSH
3857: LD_INT 34
3859: PUSH
3860: LD_INT 40
3862: PUSH
3863: LD_INT 48
3865: PUSH
3866: LD_INT 49
3868: PUSH
3869: LD_INT 50
3871: PUSH
3872: LD_INT 51
3874: PUSH
3875: LD_INT 52
3877: PUSH
3878: LD_INT 53
3880: PUSH
3881: LD_INT 54
3883: PUSH
3884: LD_INT 55
3886: PUSH
3887: LD_INT 56
3889: PUSH
3890: LD_INT 57
3892: PUSH
3893: LD_INT 58
3895: PUSH
3896: LD_INT 59
3898: PUSH
3899: LD_INT 60
3901: PUSH
3902: LD_INT 61
3904: PUSH
3905: LD_INT 62
3907: PUSH
3908: LD_INT 80
3910: PUSH
3911: LD_INT 82
3913: PUSH
3914: LD_INT 83
3916: PUSH
3917: LD_INT 84
3919: PUSH
3920: LD_INT 85
3922: PUSH
3923: LD_INT 86
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: ST_TO_ADDR
3979: GO 4446
3981: LD_INT 2
3983: DOUBLE
3984: EQUAL
3985: IFTRUE 3989
3987: GO 4215
3989: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_INT 35
3997: PUSH
3998: LD_INT 45
4000: PUSH
4001: LD_INT 46
4003: PUSH
4004: LD_INT 47
4006: PUSH
4007: LD_INT 82
4009: PUSH
4010: LD_INT 83
4012: PUSH
4013: LD_INT 84
4015: PUSH
4016: LD_INT 85
4018: PUSH
4019: LD_INT 87
4021: PUSH
4022: LD_INT 70
4024: PUSH
4025: LD_INT 1
4027: PUSH
4028: LD_INT 11
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: LD_INT 4
4036: PUSH
4037: LD_INT 5
4039: PUSH
4040: LD_INT 6
4042: PUSH
4043: LD_INT 15
4045: PUSH
4046: LD_INT 18
4048: PUSH
4049: LD_INT 7
4051: PUSH
4052: LD_INT 17
4054: PUSH
4055: LD_INT 8
4057: PUSH
4058: LD_INT 20
4060: PUSH
4061: LD_INT 21
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 72
4069: PUSH
4070: LD_INT 26
4072: PUSH
4073: LD_INT 69
4075: PUSH
4076: LD_INT 39
4078: PUSH
4079: LD_INT 40
4081: PUSH
4082: LD_INT 41
4084: PUSH
4085: LD_INT 42
4087: PUSH
4088: LD_INT 43
4090: PUSH
4091: LD_INT 48
4093: PUSH
4094: LD_INT 49
4096: PUSH
4097: LD_INT 50
4099: PUSH
4100: LD_INT 51
4102: PUSH
4103: LD_INT 52
4105: PUSH
4106: LD_INT 53
4108: PUSH
4109: LD_INT 54
4111: PUSH
4112: LD_INT 55
4114: PUSH
4115: LD_INT 56
4117: PUSH
4118: LD_INT 60
4120: PUSH
4121: LD_INT 61
4123: PUSH
4124: LD_INT 62
4126: PUSH
4127: LD_INT 66
4129: PUSH
4130: LD_INT 67
4132: PUSH
4133: LD_INT 68
4135: PUSH
4136: LD_INT 81
4138: PUSH
4139: LD_INT 82
4141: PUSH
4142: LD_INT 83
4144: PUSH
4145: LD_INT 84
4147: PUSH
4148: LD_INT 85
4150: PUSH
4151: LD_INT 87
4153: PUSH
4154: LD_INT 88
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: ST_TO_ADDR
4213: GO 4446
4215: LD_INT 3
4217: DOUBLE
4218: EQUAL
4219: IFTRUE 4223
4221: GO 4445
4223: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4224: LD_ADDR_VAR 0 4
4228: PUSH
4229: LD_INT 46
4231: PUSH
4232: LD_INT 47
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 82
4243: PUSH
4244: LD_INT 83
4246: PUSH
4247: LD_INT 84
4249: PUSH
4250: LD_INT 85
4252: PUSH
4253: LD_INT 86
4255: PUSH
4256: LD_INT 11
4258: PUSH
4259: LD_INT 9
4261: PUSH
4262: LD_INT 20
4264: PUSH
4265: LD_INT 19
4267: PUSH
4268: LD_INT 21
4270: PUSH
4271: LD_INT 24
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 25
4279: PUSH
4280: LD_INT 28
4282: PUSH
4283: LD_INT 29
4285: PUSH
4286: LD_INT 30
4288: PUSH
4289: LD_INT 31
4291: PUSH
4292: LD_INT 37
4294: PUSH
4295: LD_INT 38
4297: PUSH
4298: LD_INT 32
4300: PUSH
4301: LD_INT 27
4303: PUSH
4304: LD_INT 33
4306: PUSH
4307: LD_INT 69
4309: PUSH
4310: LD_INT 39
4312: PUSH
4313: LD_INT 34
4315: PUSH
4316: LD_INT 40
4318: PUSH
4319: LD_INT 71
4321: PUSH
4322: LD_INT 23
4324: PUSH
4325: LD_INT 44
4327: PUSH
4328: LD_INT 48
4330: PUSH
4331: LD_INT 49
4333: PUSH
4334: LD_INT 50
4336: PUSH
4337: LD_INT 51
4339: PUSH
4340: LD_INT 52
4342: PUSH
4343: LD_INT 53
4345: PUSH
4346: LD_INT 54
4348: PUSH
4349: LD_INT 55
4351: PUSH
4352: LD_INT 56
4354: PUSH
4355: LD_INT 57
4357: PUSH
4358: LD_INT 58
4360: PUSH
4361: LD_INT 59
4363: PUSH
4364: LD_INT 63
4366: PUSH
4367: LD_INT 64
4369: PUSH
4370: LD_INT 65
4372: PUSH
4373: LD_INT 82
4375: PUSH
4376: LD_INT 83
4378: PUSH
4379: LD_INT 84
4381: PUSH
4382: LD_INT 85
4384: PUSH
4385: LD_INT 86
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: ST_TO_ADDR
4443: GO 4446
4445: POP
// if state > - 1 and state < 3 then
4446: LD_VAR 0 3
4450: PUSH
4451: LD_INT 1
4453: NEG
4454: GREATER
4455: PUSH
4456: LD_VAR 0 3
4460: PUSH
4461: LD_INT 3
4463: LESS
4464: AND
4465: IFFALSE 4522
// for i in result do
4467: LD_ADDR_VAR 0 5
4471: PUSH
4472: LD_VAR 0 4
4476: PUSH
4477: FOR_IN
4478: IFFALSE 4520
// if GetTech ( i , side ) <> state then
4480: LD_VAR 0 5
4484: PPUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: CALL_OW 321
4494: PUSH
4495: LD_VAR 0 3
4499: NONEQUAL
4500: IFFALSE 4518
// result := result diff i ;
4502: LD_ADDR_VAR 0 4
4506: PUSH
4507: LD_VAR 0 4
4511: PUSH
4512: LD_VAR 0 5
4516: DIFF
4517: ST_TO_ADDR
4518: GO 4477
4520: POP
4521: POP
// end ;
4522: LD_VAR 0 4
4526: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4527: LD_INT 0
4529: PPUSH
4530: PPUSH
4531: PPUSH
// result := true ;
4532: LD_ADDR_VAR 0 3
4536: PUSH
4537: LD_INT 1
4539: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4540: LD_ADDR_VAR 0 5
4544: PUSH
4545: LD_VAR 0 2
4549: PPUSH
4550: CALL_OW 480
4554: ST_TO_ADDR
// if not tmp then
4555: LD_VAR 0 5
4559: NOT
4560: IFFALSE 4564
// exit ;
4562: GO 4613
// for i in tmp do
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: LD_VAR 0 5
4573: PUSH
4574: FOR_IN
4575: IFFALSE 4611
// if GetTech ( i , side ) <> state_researched then
4577: LD_VAR 0 4
4581: PPUSH
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 321
4591: PUSH
4592: LD_INT 2
4594: NONEQUAL
4595: IFFALSE 4609
// begin result := false ;
4597: LD_ADDR_VAR 0 3
4601: PUSH
4602: LD_INT 0
4604: ST_TO_ADDR
// exit ;
4605: POP
4606: POP
4607: GO 4613
// end ;
4609: GO 4574
4611: POP
4612: POP
// end ;
4613: LD_VAR 0 3
4617: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4618: LD_INT 0
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4633: LD_VAR 0 1
4637: NOT
4638: PUSH
4639: LD_VAR 0 1
4643: PPUSH
4644: CALL_OW 257
4648: PUSH
4649: LD_INT 9
4651: NONEQUAL
4652: OR
4653: IFFALSE 4657
// exit ;
4655: GO 5230
// side := GetSide ( unit ) ;
4657: LD_ADDR_VAR 0 9
4661: PUSH
4662: LD_VAR 0 1
4666: PPUSH
4667: CALL_OW 255
4671: ST_TO_ADDR
// tech_space := tech_spacanom ;
4672: LD_ADDR_VAR 0 12
4676: PUSH
4677: LD_INT 29
4679: ST_TO_ADDR
// tech_time := tech_taurad ;
4680: LD_ADDR_VAR 0 13
4684: PUSH
4685: LD_INT 28
4687: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4688: LD_ADDR_VAR 0 11
4692: PUSH
4693: LD_VAR 0 1
4697: PPUSH
4698: CALL_OW 310
4702: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4703: LD_VAR 0 11
4707: PPUSH
4708: CALL_OW 247
4712: PUSH
4713: LD_INT 2
4715: EQUAL
4716: IFFALSE 4720
// exit ;
4718: GO 5230
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_INT 81
4727: PUSH
4728: LD_VAR 0 9
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: LD_INT 21
4742: PUSH
4743: LD_INT 3
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// if not tmp then
4763: LD_VAR 0 8
4767: NOT
4768: IFFALSE 4772
// exit ;
4770: GO 5230
// if in_unit then
4772: LD_VAR 0 11
4776: IFFALSE 4800
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4778: LD_ADDR_VAR 0 10
4782: PUSH
4783: LD_VAR 0 8
4787: PPUSH
4788: LD_VAR 0 11
4792: PPUSH
4793: CALL_OW 74
4797: ST_TO_ADDR
4798: GO 4820
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4800: LD_ADDR_VAR 0 10
4804: PUSH
4805: LD_VAR 0 8
4809: PPUSH
4810: LD_VAR 0 1
4814: PPUSH
4815: CALL_OW 74
4819: ST_TO_ADDR
// if not enemy then
4820: LD_VAR 0 10
4824: NOT
4825: IFFALSE 4829
// exit ;
4827: GO 5230
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4829: LD_VAR 0 11
4833: PUSH
4834: LD_VAR 0 11
4838: PPUSH
4839: LD_VAR 0 10
4843: PPUSH
4844: CALL_OW 296
4848: PUSH
4849: LD_INT 13
4851: GREATER
4852: AND
4853: PUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_VAR 0 10
4863: PPUSH
4864: CALL_OW 296
4868: PUSH
4869: LD_INT 12
4871: GREATER
4872: OR
4873: IFFALSE 4877
// exit ;
4875: GO 5230
// missile := [ 1 ] ;
4877: LD_ADDR_VAR 0 14
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4888: LD_VAR 0 9
4892: PPUSH
4893: LD_VAR 0 12
4897: PPUSH
4898: CALL_OW 325
4902: IFFALSE 4931
// missile := Replace ( missile , missile + 1 , 2 ) ;
4904: LD_ADDR_VAR 0 14
4908: PUSH
4909: LD_VAR 0 14
4913: PPUSH
4914: LD_VAR 0 14
4918: PUSH
4919: LD_INT 1
4921: PLUS
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: CALL_OW 1
4930: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4931: LD_VAR 0 9
4935: PPUSH
4936: LD_VAR 0 13
4940: PPUSH
4941: CALL_OW 325
4945: PUSH
4946: LD_VAR 0 10
4950: PPUSH
4951: CALL_OW 255
4955: PPUSH
4956: LD_VAR 0 13
4960: PPUSH
4961: CALL_OW 325
4965: NOT
4966: AND
4967: IFFALSE 4996
// missile := Replace ( missile , missile + 1 , 3 ) ;
4969: LD_ADDR_VAR 0 14
4973: PUSH
4974: LD_VAR 0 14
4978: PPUSH
4979: LD_VAR 0 14
4983: PUSH
4984: LD_INT 1
4986: PLUS
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 1
4995: ST_TO_ADDR
// if missile < 2 then
4996: LD_VAR 0 14
5000: PUSH
5001: LD_INT 2
5003: LESS
5004: IFFALSE 5008
// exit ;
5006: GO 5230
// x := GetX ( enemy ) ;
5008: LD_ADDR_VAR 0 4
5012: PUSH
5013: LD_VAR 0 10
5017: PPUSH
5018: CALL_OW 250
5022: ST_TO_ADDR
// y := GetY ( enemy ) ;
5023: LD_ADDR_VAR 0 5
5027: PUSH
5028: LD_VAR 0 10
5032: PPUSH
5033: CALL_OW 251
5037: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5038: LD_ADDR_VAR 0 6
5042: PUSH
5043: LD_VAR 0 4
5047: PUSH
5048: LD_INT 1
5050: NEG
5051: PPUSH
5052: LD_INT 1
5054: PPUSH
5055: CALL_OW 12
5059: PLUS
5060: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5061: LD_ADDR_VAR 0 7
5065: PUSH
5066: LD_VAR 0 5
5070: PUSH
5071: LD_INT 1
5073: NEG
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 12
5082: PLUS
5083: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5084: LD_VAR 0 6
5088: PPUSH
5089: LD_VAR 0 7
5093: PPUSH
5094: CALL_OW 488
5098: NOT
5099: IFFALSE 5121
// begin _x := x ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_VAR 0 4
5110: ST_TO_ADDR
// _y := y ;
5111: LD_ADDR_VAR 0 7
5115: PUSH
5116: LD_VAR 0 5
5120: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5121: LD_ADDR_VAR 0 3
5125: PUSH
5126: LD_INT 1
5128: PPUSH
5129: LD_VAR 0 14
5133: PPUSH
5134: CALL_OW 12
5138: ST_TO_ADDR
// case i of 1 :
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 1
5146: DOUBLE
5147: EQUAL
5148: IFTRUE 5152
5150: GO 5169
5152: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_VAR 0 10
5162: PPUSH
5163: CALL_OW 115
5167: GO 5230
5169: LD_INT 2
5171: DOUBLE
5172: EQUAL
5173: IFTRUE 5177
5175: GO 5199
5177: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5178: LD_VAR 0 1
5182: PPUSH
5183: LD_VAR 0 6
5187: PPUSH
5188: LD_VAR 0 7
5192: PPUSH
5193: CALL_OW 153
5197: GO 5230
5199: LD_INT 3
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5229
5207: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5208: LD_VAR 0 1
5212: PPUSH
5213: LD_VAR 0 6
5217: PPUSH
5218: LD_VAR 0 7
5222: PPUSH
5223: CALL_OW 154
5227: GO 5230
5229: POP
// end ;
5230: LD_VAR 0 2
5234: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5235: LD_INT 0
5237: PPUSH
5238: PPUSH
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
// if not unit or not building then
5243: LD_VAR 0 1
5247: NOT
5248: PUSH
5249: LD_VAR 0 2
5253: NOT
5254: OR
5255: IFFALSE 5259
// exit ;
5257: GO 5417
// x := GetX ( building ) ;
5259: LD_ADDR_VAR 0 5
5263: PUSH
5264: LD_VAR 0 2
5268: PPUSH
5269: CALL_OW 250
5273: ST_TO_ADDR
// y := GetY ( building ) ;
5274: LD_ADDR_VAR 0 6
5278: PUSH
5279: LD_VAR 0 2
5283: PPUSH
5284: CALL_OW 251
5288: ST_TO_ADDR
// for i = 0 to 5 do
5289: LD_ADDR_VAR 0 4
5293: PUSH
5294: DOUBLE
5295: LD_INT 0
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 5
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5415
// begin _x := ShiftX ( x , i , 3 ) ;
5305: LD_ADDR_VAR 0 7
5309: PUSH
5310: LD_VAR 0 5
5314: PPUSH
5315: LD_VAR 0 4
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: CALL_OW 272
5327: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5328: LD_ADDR_VAR 0 8
5332: PUSH
5333: LD_VAR 0 6
5337: PPUSH
5338: LD_VAR 0 4
5342: PPUSH
5343: LD_INT 3
5345: PPUSH
5346: CALL_OW 273
5350: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5351: LD_VAR 0 7
5355: PPUSH
5356: LD_VAR 0 8
5360: PPUSH
5361: CALL_OW 488
5365: NOT
5366: IFFALSE 5370
// continue ;
5368: GO 5302
// if HexInfo ( _x , _y ) = 0 then
5370: LD_VAR 0 7
5374: PPUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 428
5384: PUSH
5385: LD_INT 0
5387: EQUAL
5388: IFFALSE 5413
// begin ComMoveXY ( unit , _x , _y ) ;
5390: LD_VAR 0 1
5394: PPUSH
5395: LD_VAR 0 7
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 111
// exit ;
5409: POP
5410: POP
5411: GO 5417
// end ; end ;
5413: GO 5302
5415: POP
5416: POP
// end ;
5417: LD_VAR 0 3
5421: RET
// export function ScanBase ( side , base_area ) ; begin
5422: LD_INT 0
5424: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5425: LD_ADDR_VAR 0 3
5429: PUSH
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_INT 81
5437: PUSH
5438: LD_VAR 0 1
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: PPUSH
5447: CALL_OW 70
5451: ST_TO_ADDR
// end ;
5452: LD_VAR 0 3
5456: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5457: LD_INT 0
5459: PPUSH
5460: PPUSH
5461: PPUSH
5462: PPUSH
// result := false ;
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: LD_INT 0
5470: ST_TO_ADDR
// side := GetSide ( unit ) ;
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: LD_VAR 0 1
5480: PPUSH
5481: CALL_OW 255
5485: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5486: LD_ADDR_VAR 0 4
5490: PUSH
5491: LD_VAR 0 1
5495: PPUSH
5496: CALL_OW 248
5500: ST_TO_ADDR
// case nat of 1 :
5501: LD_VAR 0 4
5505: PUSH
5506: LD_INT 1
5508: DOUBLE
5509: EQUAL
5510: IFTRUE 5514
5512: GO 5525
5514: POP
// tech := tech_lassight ; 2 :
5515: LD_ADDR_VAR 0 5
5519: PUSH
5520: LD_INT 12
5522: ST_TO_ADDR
5523: GO 5564
5525: LD_INT 2
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 5544
5533: POP
// tech := tech_mortar ; 3 :
5534: LD_ADDR_VAR 0 5
5538: PUSH
5539: LD_INT 41
5541: ST_TO_ADDR
5542: GO 5564
5544: LD_INT 3
5546: DOUBLE
5547: EQUAL
5548: IFTRUE 5552
5550: GO 5563
5552: POP
// tech := tech_bazooka ; end ;
5553: LD_ADDR_VAR 0 5
5557: PUSH
5558: LD_INT 44
5560: ST_TO_ADDR
5561: GO 5564
5563: POP
// if Researched ( side , tech ) then
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_VAR 0 5
5573: PPUSH
5574: CALL_OW 325
5578: IFFALSE 5605
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5580: LD_ADDR_VAR 0 2
5584: PUSH
5585: LD_INT 5
5587: PUSH
5588: LD_INT 8
5590: PUSH
5591: LD_INT 9
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: PUSH
5599: LD_VAR 0 4
5603: ARRAY
5604: ST_TO_ADDR
// end ;
5605: LD_VAR 0 2
5609: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5610: LD_INT 0
5612: PPUSH
5613: PPUSH
5614: PPUSH
// if not mines then
5615: LD_VAR 0 2
5619: NOT
5620: IFFALSE 5624
// exit ;
5622: GO 5768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_INT 81
5631: PUSH
5632: LD_VAR 0 1
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 3
5643: PUSH
5644: LD_INT 21
5646: PUSH
5647: LD_INT 3
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 69
5666: ST_TO_ADDR
// for i in mines do
5667: LD_ADDR_VAR 0 4
5671: PUSH
5672: LD_VAR 0 2
5676: PUSH
5677: FOR_IN
5678: IFFALSE 5766
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5680: LD_VAR 0 4
5684: PUSH
5685: LD_INT 1
5687: ARRAY
5688: PPUSH
5689: LD_VAR 0 4
5693: PUSH
5694: LD_INT 2
5696: ARRAY
5697: PPUSH
5698: CALL_OW 458
5702: NOT
5703: IFFALSE 5707
// continue ;
5705: GO 5677
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5707: LD_VAR 0 4
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 2
5723: ARRAY
5724: PPUSH
5725: CALL_OW 428
5729: PUSH
5730: LD_VAR 0 5
5734: IN
5735: IFFALSE 5764
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5737: LD_VAR 0 4
5741: PUSH
5742: LD_INT 1
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 4
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PPUSH
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 456
// end ;
5764: GO 5677
5766: POP
5767: POP
// end ;
5768: LD_VAR 0 3
5772: RET
// export function Count ( array ) ; begin
5773: LD_INT 0
5775: PPUSH
// result := array + 0 ;
5776: LD_ADDR_VAR 0 2
5780: PUSH
5781: LD_VAR 0 1
5785: PUSH
5786: LD_INT 0
5788: PLUS
5789: ST_TO_ADDR
// end ;
5790: LD_VAR 0 2
5794: RET
// export function IsEmpty ( building ) ; begin
5795: LD_INT 0
5797: PPUSH
// if not building then
5798: LD_VAR 0 1
5802: NOT
5803: IFFALSE 5807
// exit ;
5805: GO 5850
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5807: LD_ADDR_VAR 0 2
5811: PUSH
5812: LD_VAR 0 1
5816: PUSH
5817: LD_INT 22
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 255
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 58
5836: PUSH
5837: EMPTY
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: IN
5849: ST_TO_ADDR
// end ;
5850: LD_VAR 0 2
5854: RET
// export function IsNotFull ( building ) ; var places ; begin
5855: LD_INT 0
5857: PPUSH
5858: PPUSH
// if not building then
5859: LD_VAR 0 1
5863: NOT
5864: IFFALSE 5868
// exit ;
5866: GO 5896
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5868: LD_ADDR_VAR 0 2
5872: PUSH
5873: LD_VAR 0 1
5877: PPUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 62
5883: PUSH
5884: EMPTY
5885: LIST
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 72
5895: ST_TO_ADDR
// end ;
5896: LD_VAR 0 2
5900: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5901: LD_INT 0
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
// tmp := [ ] ;
5907: LD_ADDR_VAR 0 3
5911: PUSH
5912: EMPTY
5913: ST_TO_ADDR
// list := [ ] ;
5914: LD_ADDR_VAR 0 5
5918: PUSH
5919: EMPTY
5920: ST_TO_ADDR
// for i = 16 to 25 do
5921: LD_ADDR_VAR 0 4
5925: PUSH
5926: DOUBLE
5927: LD_INT 16
5929: DEC
5930: ST_TO_ADDR
5931: LD_INT 25
5933: PUSH
5934: FOR_TO
5935: IFFALSE 6008
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: LD_VAR 0 3
5946: PUSH
5947: LD_INT 22
5949: PUSH
5950: LD_VAR 0 1
5954: PPUSH
5955: CALL_OW 255
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 91
5966: PUSH
5967: LD_VAR 0 1
5971: PUSH
5972: LD_INT 6
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: PUSH
5980: LD_INT 30
5982: PUSH
5983: LD_VAR 0 4
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: PPUSH
6000: CALL_OW 69
6004: ADD
6005: ST_TO_ADDR
6006: GO 5934
6008: POP
6009: POP
// for i = 1 to tmp do
6010: LD_ADDR_VAR 0 4
6014: PUSH
6015: DOUBLE
6016: LD_INT 1
6018: DEC
6019: ST_TO_ADDR
6020: LD_VAR 0 3
6024: PUSH
6025: FOR_TO
6026: IFFALSE 6114
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_VAR 0 5
6037: PUSH
6038: LD_VAR 0 3
6042: PUSH
6043: LD_VAR 0 4
6047: ARRAY
6048: PPUSH
6049: CALL_OW 266
6053: PUSH
6054: LD_VAR 0 3
6058: PUSH
6059: LD_VAR 0 4
6063: ARRAY
6064: PPUSH
6065: CALL_OW 250
6069: PUSH
6070: LD_VAR 0 3
6074: PUSH
6075: LD_VAR 0 4
6079: ARRAY
6080: PPUSH
6081: CALL_OW 251
6085: PUSH
6086: LD_VAR 0 3
6090: PUSH
6091: LD_VAR 0 4
6095: ARRAY
6096: PPUSH
6097: CALL_OW 254
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: ADD
6111: ST_TO_ADDR
6112: GO 6025
6114: POP
6115: POP
// result := list ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_VAR 0 5
6125: ST_TO_ADDR
// end ;
6126: LD_VAR 0 2
6130: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
6139: PPUSH
// if not factory then
6140: LD_VAR 0 1
6144: NOT
6145: IFFALSE 6149
// exit ;
6147: GO 6742
// if control = control_apeman then
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 5
6156: EQUAL
6157: IFFALSE 6266
// begin tmp := UnitsInside ( factory ) ;
6159: LD_ADDR_VAR 0 8
6163: PUSH
6164: LD_VAR 0 1
6168: PPUSH
6169: CALL_OW 313
6173: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6174: LD_VAR 0 8
6178: PPUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 12
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PPUSH
6189: CALL_OW 72
6193: NOT
6194: IFFALSE 6204
// control := control_manual ;
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6204: LD_ADDR_VAR 0 8
6208: PUSH
6209: LD_VAR 0 1
6213: PPUSH
6214: CALL 5901 0 1
6218: ST_TO_ADDR
// if tmp then
6219: LD_VAR 0 8
6223: IFFALSE 6266
// begin for i in tmp do
6225: LD_ADDR_VAR 0 7
6229: PUSH
6230: LD_VAR 0 8
6234: PUSH
6235: FOR_IN
6236: IFFALSE 6264
// if i [ 1 ] = b_ext_radio then
6238: LD_VAR 0 7
6242: PUSH
6243: LD_INT 1
6245: ARRAY
6246: PUSH
6247: LD_INT 22
6249: EQUAL
6250: IFFALSE 6262
// begin control := control_remote ;
6252: LD_ADDR_VAR 0 4
6256: PUSH
6257: LD_INT 2
6259: ST_TO_ADDR
// break ;
6260: GO 6264
// end ;
6262: GO 6235
6264: POP
6265: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6266: LD_VAR 0 1
6270: PPUSH
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_VAR 0 3
6280: PPUSH
6281: LD_VAR 0 4
6285: PPUSH
6286: LD_VAR 0 5
6290: PPUSH
6291: CALL_OW 448
6295: IFFALSE 6330
// begin result := [ chassis , engine , control , weapon ] ;
6297: LD_ADDR_VAR 0 6
6301: PUSH
6302: LD_VAR 0 2
6306: PUSH
6307: LD_VAR 0 3
6311: PUSH
6312: LD_VAR 0 4
6316: PUSH
6317: LD_VAR 0 5
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: ST_TO_ADDR
// exit ;
6328: GO 6742
// end ; _chassis := AvailableChassisList ( factory ) ;
6330: LD_ADDR_VAR 0 9
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: CALL_OW 475
6344: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 476
6359: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6360: LD_ADDR_VAR 0 12
6364: PUSH
6365: LD_VAR 0 1
6369: PPUSH
6370: CALL_OW 477
6374: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6375: LD_ADDR_VAR 0 10
6379: PUSH
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 478
6389: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6390: LD_VAR 0 9
6394: NOT
6395: PUSH
6396: LD_VAR 0 11
6400: NOT
6401: OR
6402: PUSH
6403: LD_VAR 0 12
6407: NOT
6408: OR
6409: PUSH
6410: LD_VAR 0 10
6414: NOT
6415: OR
6416: IFFALSE 6451
// begin result := [ chassis , engine , control , weapon ] ;
6418: LD_ADDR_VAR 0 6
6422: PUSH
6423: LD_VAR 0 2
6427: PUSH
6428: LD_VAR 0 3
6432: PUSH
6433: LD_VAR 0 4
6437: PUSH
6438: LD_VAR 0 5
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// exit ;
6449: GO 6742
// end ; if not chassis in _chassis then
6451: LD_VAR 0 2
6455: PUSH
6456: LD_VAR 0 9
6460: IN
6461: NOT
6462: IFFALSE 6488
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_VAR 0 9
6473: PUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_VAR 0 9
6481: PPUSH
6482: CALL_OW 12
6486: ARRAY
6487: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6488: LD_VAR 0 2
6492: PPUSH
6493: LD_VAR 0 3
6497: PPUSH
6498: CALL 6747 0 2
6502: NOT
6503: IFFALSE 6562
// repeat engine := _engine [ 1 ] ;
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_VAR 0 11
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6519: LD_ADDR_VAR 0 11
6523: PUSH
6524: LD_VAR 0 11
6528: PPUSH
6529: LD_INT 1
6531: PPUSH
6532: CALL_OW 3
6536: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6537: LD_VAR 0 2
6541: PPUSH
6542: LD_VAR 0 3
6546: PPUSH
6547: CALL 6747 0 2
6551: PUSH
6552: LD_VAR 0 11
6556: PUSH
6557: EMPTY
6558: EQUAL
6559: OR
6560: IFFALSE 6505
// if not control in _control then
6562: LD_VAR 0 4
6566: PUSH
6567: LD_VAR 0 12
6571: IN
6572: NOT
6573: IFFALSE 6599
// control := _control [ rand ( 1 , _control ) ] ;
6575: LD_ADDR_VAR 0 4
6579: PUSH
6580: LD_VAR 0 12
6584: PUSH
6585: LD_INT 1
6587: PPUSH
6588: LD_VAR 0 12
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6599: LD_VAR 0 2
6603: PPUSH
6604: LD_VAR 0 5
6608: PPUSH
6609: CALL 6967 0 2
6613: NOT
6614: IFFALSE 6673
// repeat weapon := _weapon [ 1 ] ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_VAR 0 10
6625: PUSH
6626: LD_INT 1
6628: ARRAY
6629: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6630: LD_ADDR_VAR 0 10
6634: PUSH
6635: LD_VAR 0 10
6639: PPUSH
6640: LD_INT 1
6642: PPUSH
6643: CALL_OW 3
6647: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6648: LD_VAR 0 2
6652: PPUSH
6653: LD_VAR 0 5
6657: PPUSH
6658: CALL 6967 0 2
6662: PUSH
6663: LD_VAR 0 10
6667: PUSH
6668: EMPTY
6669: EQUAL
6670: OR
6671: IFFALSE 6616
// result := [ ] ;
6673: LD_ADDR_VAR 0 6
6677: PUSH
6678: EMPTY
6679: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6680: LD_VAR 0 1
6684: PPUSH
6685: LD_VAR 0 2
6689: PPUSH
6690: LD_VAR 0 3
6694: PPUSH
6695: LD_VAR 0 4
6699: PPUSH
6700: LD_VAR 0 5
6704: PPUSH
6705: CALL_OW 448
6709: IFFALSE 6742
// result := [ chassis , engine , control , weapon ] ;
6711: LD_ADDR_VAR 0 6
6715: PUSH
6716: LD_VAR 0 2
6720: PUSH
6721: LD_VAR 0 3
6725: PUSH
6726: LD_VAR 0 4
6730: PUSH
6731: LD_VAR 0 5
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
// end ;
6742: LD_VAR 0 6
6746: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6747: LD_INT 0
6749: PPUSH
// if not chassis or not engine then
6750: LD_VAR 0 1
6754: NOT
6755: PUSH
6756: LD_VAR 0 2
6760: NOT
6761: OR
6762: IFFALSE 6766
// exit ;
6764: GO 6962
// case engine of engine_solar :
6766: LD_VAR 0 2
6770: PUSH
6771: LD_INT 2
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6817
6779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6780: LD_ADDR_VAR 0 3
6784: PUSH
6785: LD_INT 11
6787: PUSH
6788: LD_INT 12
6790: PUSH
6791: LD_INT 13
6793: PUSH
6794: LD_INT 14
6796: PUSH
6797: LD_INT 1
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: ST_TO_ADDR
6815: GO 6946
6817: LD_INT 1
6819: DOUBLE
6820: EQUAL
6821: IFTRUE 6825
6823: GO 6887
6825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6826: LD_ADDR_VAR 0 3
6830: PUSH
6831: LD_INT 11
6833: PUSH
6834: LD_INT 12
6836: PUSH
6837: LD_INT 13
6839: PUSH
6840: LD_INT 14
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: LD_INT 2
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_INT 4
6854: PUSH
6855: LD_INT 5
6857: PUSH
6858: LD_INT 21
6860: PUSH
6861: LD_INT 23
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 24
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: ST_TO_ADDR
6885: GO 6946
6887: LD_INT 3
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6945
6895: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 13
6903: PUSH
6904: LD_INT 14
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: LD_INT 4
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: LD_INT 21
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 23
6927: PUSH
6928: LD_INT 24
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: ST_TO_ADDR
6943: GO 6946
6945: POP
// result := ( chassis in result ) ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: LD_VAR 0 1
6955: PUSH
6956: LD_VAR 0 3
6960: IN
6961: ST_TO_ADDR
// end ;
6962: LD_VAR 0 3
6966: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6967: LD_INT 0
6969: PPUSH
// if not chassis or not weapon then
6970: LD_VAR 0 1
6974: NOT
6975: PUSH
6976: LD_VAR 0 2
6980: NOT
6981: OR
6982: IFFALSE 6986
// exit ;
6984: GO 8046
// case weapon of us_machine_gun :
6986: LD_VAR 0 2
6990: PUSH
6991: LD_INT 2
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7029
6999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7000: LD_ADDR_VAR 0 3
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: LD_INT 2
7010: PUSH
7011: LD_INT 3
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: LD_INT 5
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: ST_TO_ADDR
7027: GO 8030
7029: LD_INT 3
7031: DOUBLE
7032: EQUAL
7033: IFTRUE 7037
7035: GO 7067
7037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7038: LD_ADDR_VAR 0 3
7042: PUSH
7043: LD_INT 1
7045: PUSH
7046: LD_INT 2
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 4
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: ST_TO_ADDR
7065: GO 8030
7067: LD_INT 11
7069: DOUBLE
7070: EQUAL
7071: IFTRUE 7075
7073: GO 7105
7075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 1
7083: PUSH
7084: LD_INT 2
7086: PUSH
7087: LD_INT 3
7089: PUSH
7090: LD_INT 4
7092: PUSH
7093: LD_INT 5
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: ST_TO_ADDR
7103: GO 8030
7105: LD_INT 4
7107: DOUBLE
7108: EQUAL
7109: IFTRUE 7113
7111: GO 7139
7113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7114: LD_ADDR_VAR 0 3
7118: PUSH
7119: LD_INT 2
7121: PUSH
7122: LD_INT 3
7124: PUSH
7125: LD_INT 4
7127: PUSH
7128: LD_INT 5
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: ST_TO_ADDR
7137: GO 8030
7139: LD_INT 5
7141: DOUBLE
7142: EQUAL
7143: IFTRUE 7147
7145: GO 7173
7147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7148: LD_ADDR_VAR 0 3
7152: PUSH
7153: LD_INT 2
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: LD_INT 4
7161: PUSH
7162: LD_INT 5
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
7171: GO 8030
7173: LD_INT 9
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7207
7181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7182: LD_ADDR_VAR 0 3
7186: PUSH
7187: LD_INT 2
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: LD_INT 5
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: ST_TO_ADDR
7205: GO 8030
7207: LD_INT 7
7209: DOUBLE
7210: EQUAL
7211: IFTRUE 7215
7213: GO 7241
7215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 4
7229: PUSH
7230: LD_INT 5
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: ST_TO_ADDR
7239: GO 8030
7241: LD_INT 12
7243: DOUBLE
7244: EQUAL
7245: IFTRUE 7249
7247: GO 7275
7249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7250: LD_ADDR_VAR 0 3
7254: PUSH
7255: LD_INT 2
7257: PUSH
7258: LD_INT 3
7260: PUSH
7261: LD_INT 4
7263: PUSH
7264: LD_INT 5
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: ST_TO_ADDR
7273: GO 8030
7275: LD_INT 13
7277: DOUBLE
7278: EQUAL
7279: IFTRUE 7283
7281: GO 7309
7283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7284: LD_ADDR_VAR 0 3
7288: PUSH
7289: LD_INT 2
7291: PUSH
7292: LD_INT 3
7294: PUSH
7295: LD_INT 4
7297: PUSH
7298: LD_INT 5
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: ST_TO_ADDR
7307: GO 8030
7309: LD_INT 14
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7335
7317: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 5
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: ST_TO_ADDR
7333: GO 8030
7335: LD_INT 6
7337: DOUBLE
7338: EQUAL
7339: IFTRUE 7343
7341: GO 7361
7343: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7344: LD_ADDR_VAR 0 3
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: ST_TO_ADDR
7359: GO 8030
7361: LD_INT 10
7363: DOUBLE
7364: EQUAL
7365: IFTRUE 7369
7367: GO 7387
7369: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7370: LD_ADDR_VAR 0 3
7374: PUSH
7375: LD_INT 4
7377: PUSH
7378: LD_INT 5
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: ST_TO_ADDR
7385: GO 8030
7387: LD_INT 22
7389: DOUBLE
7390: EQUAL
7391: IFTRUE 7395
7393: GO 7421
7395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: LD_INT 11
7403: PUSH
7404: LD_INT 12
7406: PUSH
7407: LD_INT 13
7409: PUSH
7410: LD_INT 14
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: ST_TO_ADDR
7419: GO 8030
7421: LD_INT 23
7423: DOUBLE
7424: EQUAL
7425: IFTRUE 7429
7427: GO 7455
7429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7430: LD_ADDR_VAR 0 3
7434: PUSH
7435: LD_INT 11
7437: PUSH
7438: LD_INT 12
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: ST_TO_ADDR
7453: GO 8030
7455: LD_INT 24
7457: DOUBLE
7458: EQUAL
7459: IFTRUE 7463
7461: GO 7489
7463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_INT 11
7471: PUSH
7472: LD_INT 12
7474: PUSH
7475: LD_INT 13
7477: PUSH
7478: LD_INT 14
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
7487: GO 8030
7489: LD_INT 30
7491: DOUBLE
7492: EQUAL
7493: IFTRUE 7497
7495: GO 7523
7497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7498: LD_ADDR_VAR 0 3
7502: PUSH
7503: LD_INT 11
7505: PUSH
7506: LD_INT 12
7508: PUSH
7509: LD_INT 13
7511: PUSH
7512: LD_INT 14
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
7521: GO 8030
7523: LD_INT 25
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 7549
7531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_INT 13
7539: PUSH
7540: LD_INT 14
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: ST_TO_ADDR
7547: GO 8030
7549: LD_INT 27
7551: DOUBLE
7552: EQUAL
7553: IFTRUE 7557
7555: GO 7575
7557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7558: LD_ADDR_VAR 0 3
7562: PUSH
7563: LD_INT 13
7565: PUSH
7566: LD_INT 14
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: ST_TO_ADDR
7573: GO 8030
7575: LD_INT 92
7577: DOUBLE
7578: EQUAL
7579: IFTRUE 7583
7581: GO 7609
7583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7584: LD_ADDR_VAR 0 3
7588: PUSH
7589: LD_INT 11
7591: PUSH
7592: LD_INT 12
7594: PUSH
7595: LD_INT 13
7597: PUSH
7598: LD_INT 14
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: ST_TO_ADDR
7607: GO 8030
7609: LD_INT 28
7611: DOUBLE
7612: EQUAL
7613: IFTRUE 7617
7615: GO 7635
7617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7618: LD_ADDR_VAR 0 3
7622: PUSH
7623: LD_INT 13
7625: PUSH
7626: LD_INT 14
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: ST_TO_ADDR
7633: GO 8030
7635: LD_INT 29
7637: DOUBLE
7638: EQUAL
7639: IFTRUE 7643
7641: GO 7661
7643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7644: LD_ADDR_VAR 0 3
7648: PUSH
7649: LD_INT 13
7651: PUSH
7652: LD_INT 14
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: ST_TO_ADDR
7659: GO 8030
7661: LD_INT 31
7663: DOUBLE
7664: EQUAL
7665: IFTRUE 7669
7667: GO 7687
7669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7670: LD_ADDR_VAR 0 3
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: LD_INT 14
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: ST_TO_ADDR
7685: GO 8030
7687: LD_INT 26
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7713
7695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 13
7703: PUSH
7704: LD_INT 14
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: ST_TO_ADDR
7711: GO 8030
7713: LD_INT 42
7715: DOUBLE
7716: EQUAL
7717: IFTRUE 7721
7719: GO 7747
7721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7722: LD_ADDR_VAR 0 3
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_INT 23
7735: PUSH
7736: LD_INT 24
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
7745: GO 8030
7747: LD_INT 43
7749: DOUBLE
7750: EQUAL
7751: IFTRUE 7755
7753: GO 7781
7755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7756: LD_ADDR_VAR 0 3
7760: PUSH
7761: LD_INT 21
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 23
7769: PUSH
7770: LD_INT 24
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: ST_TO_ADDR
7779: GO 8030
7781: LD_INT 44
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7789
7787: GO 7815
7789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7790: LD_ADDR_VAR 0 3
7794: PUSH
7795: LD_INT 21
7797: PUSH
7798: LD_INT 22
7800: PUSH
7801: LD_INT 23
7803: PUSH
7804: LD_INT 24
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: ST_TO_ADDR
7813: GO 8030
7815: LD_INT 45
7817: DOUBLE
7818: EQUAL
7819: IFTRUE 7823
7821: GO 7849
7823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7824: LD_ADDR_VAR 0 3
7828: PUSH
7829: LD_INT 21
7831: PUSH
7832: LD_INT 22
7834: PUSH
7835: LD_INT 23
7837: PUSH
7838: LD_INT 24
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: ST_TO_ADDR
7847: GO 8030
7849: LD_INT 49
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7883
7857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: LD_INT 21
7865: PUSH
7866: LD_INT 22
7868: PUSH
7869: LD_INT 23
7871: PUSH
7872: LD_INT 24
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: ST_TO_ADDR
7881: GO 8030
7883: LD_INT 51
7885: DOUBLE
7886: EQUAL
7887: IFTRUE 7891
7889: GO 7917
7891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7892: LD_ADDR_VAR 0 3
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_INT 23
7905: PUSH
7906: LD_INT 24
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: ST_TO_ADDR
7915: GO 8030
7917: LD_INT 52
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7951
7925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7926: LD_ADDR_VAR 0 3
7930: PUSH
7931: LD_INT 21
7933: PUSH
7934: LD_INT 22
7936: PUSH
7937: LD_INT 23
7939: PUSH
7940: LD_INT 24
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: ST_TO_ADDR
7949: GO 8030
7951: LD_INT 53
7953: DOUBLE
7954: EQUAL
7955: IFTRUE 7959
7957: GO 7977
7959: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7960: LD_ADDR_VAR 0 3
7964: PUSH
7965: LD_INT 23
7967: PUSH
7968: LD_INT 24
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: ST_TO_ADDR
7975: GO 8030
7977: LD_INT 46
7979: DOUBLE
7980: EQUAL
7981: IFTRUE 7985
7983: GO 8003
7985: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7986: LD_ADDR_VAR 0 3
7990: PUSH
7991: LD_INT 23
7993: PUSH
7994: LD_INT 24
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
8001: GO 8030
8003: LD_INT 47
8005: DOUBLE
8006: EQUAL
8007: IFTRUE 8011
8009: GO 8029
8011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8012: LD_ADDR_VAR 0 3
8016: PUSH
8017: LD_INT 23
8019: PUSH
8020: LD_INT 24
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8030
8029: POP
// result := ( chassis in result ) ;
8030: LD_ADDR_VAR 0 3
8034: PUSH
8035: LD_VAR 0 1
8039: PUSH
8040: LD_VAR 0 3
8044: IN
8045: ST_TO_ADDR
// end ;
8046: LD_VAR 0 3
8050: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8051: LD_INT 0
8053: PPUSH
8054: PPUSH
8055: PPUSH
8056: PPUSH
8057: PPUSH
8058: PPUSH
8059: PPUSH
// result := array ;
8060: LD_ADDR_VAR 0 5
8064: PUSH
8065: LD_VAR 0 1
8069: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8070: LD_VAR 0 1
8074: NOT
8075: PUSH
8076: LD_VAR 0 2
8080: NOT
8081: OR
8082: PUSH
8083: LD_VAR 0 3
8087: NOT
8088: OR
8089: PUSH
8090: LD_VAR 0 2
8094: PUSH
8095: LD_VAR 0 1
8099: GREATER
8100: OR
8101: PUSH
8102: LD_VAR 0 3
8106: PUSH
8107: LD_VAR 0 1
8111: GREATER
8112: OR
8113: IFFALSE 8117
// exit ;
8115: GO 8413
// if direction then
8117: LD_VAR 0 4
8121: IFFALSE 8185
// begin d := 1 ;
8123: LD_ADDR_VAR 0 9
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if i_from > i_to then
8131: LD_VAR 0 2
8135: PUSH
8136: LD_VAR 0 3
8140: GREATER
8141: IFFALSE 8167
// length := ( array - i_from ) + i_to else
8143: LD_ADDR_VAR 0 11
8147: PUSH
8148: LD_VAR 0 1
8152: PUSH
8153: LD_VAR 0 2
8157: MINUS
8158: PUSH
8159: LD_VAR 0 3
8163: PLUS
8164: ST_TO_ADDR
8165: GO 8183
// length := i_to - i_from ;
8167: LD_ADDR_VAR 0 11
8171: PUSH
8172: LD_VAR 0 3
8176: PUSH
8177: LD_VAR 0 2
8181: MINUS
8182: ST_TO_ADDR
// end else
8183: GO 8246
// begin d := - 1 ;
8185: LD_ADDR_VAR 0 9
8189: PUSH
8190: LD_INT 1
8192: NEG
8193: ST_TO_ADDR
// if i_from > i_to then
8194: LD_VAR 0 2
8198: PUSH
8199: LD_VAR 0 3
8203: GREATER
8204: IFFALSE 8224
// length := i_from - i_to else
8206: LD_ADDR_VAR 0 11
8210: PUSH
8211: LD_VAR 0 2
8215: PUSH
8216: LD_VAR 0 3
8220: MINUS
8221: ST_TO_ADDR
8222: GO 8246
// length := ( array - i_to ) + i_from ;
8224: LD_ADDR_VAR 0 11
8228: PUSH
8229: LD_VAR 0 1
8233: PUSH
8234: LD_VAR 0 3
8238: MINUS
8239: PUSH
8240: LD_VAR 0 2
8244: PLUS
8245: ST_TO_ADDR
// end ; if not length then
8246: LD_VAR 0 11
8250: NOT
8251: IFFALSE 8255
// exit ;
8253: GO 8413
// tmp := array ;
8255: LD_ADDR_VAR 0 10
8259: PUSH
8260: LD_VAR 0 1
8264: ST_TO_ADDR
// for i = 1 to length do
8265: LD_ADDR_VAR 0 6
8269: PUSH
8270: DOUBLE
8271: LD_INT 1
8273: DEC
8274: ST_TO_ADDR
8275: LD_VAR 0 11
8279: PUSH
8280: FOR_TO
8281: IFFALSE 8401
// begin for j = 1 to array do
8283: LD_ADDR_VAR 0 7
8287: PUSH
8288: DOUBLE
8289: LD_INT 1
8291: DEC
8292: ST_TO_ADDR
8293: LD_VAR 0 1
8297: PUSH
8298: FOR_TO
8299: IFFALSE 8387
// begin k := j + d ;
8301: LD_ADDR_VAR 0 8
8305: PUSH
8306: LD_VAR 0 7
8310: PUSH
8311: LD_VAR 0 9
8315: PLUS
8316: ST_TO_ADDR
// if k > array then
8317: LD_VAR 0 8
8321: PUSH
8322: LD_VAR 0 1
8326: GREATER
8327: IFFALSE 8337
// k := 1 ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// if not k then
8337: LD_VAR 0 8
8341: NOT
8342: IFFALSE 8354
// k := array ;
8344: LD_ADDR_VAR 0 8
8348: PUSH
8349: LD_VAR 0 1
8353: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8354: LD_ADDR_VAR 0 10
8358: PUSH
8359: LD_VAR 0 10
8363: PPUSH
8364: LD_VAR 0 8
8368: PPUSH
8369: LD_VAR 0 1
8373: PUSH
8374: LD_VAR 0 7
8378: ARRAY
8379: PPUSH
8380: CALL_OW 1
8384: ST_TO_ADDR
// end ;
8385: GO 8298
8387: POP
8388: POP
// array := tmp ;
8389: LD_ADDR_VAR 0 1
8393: PUSH
8394: LD_VAR 0 10
8398: ST_TO_ADDR
// end ;
8399: GO 8280
8401: POP
8402: POP
// result := array ;
8403: LD_ADDR_VAR 0 5
8407: PUSH
8408: LD_VAR 0 1
8412: ST_TO_ADDR
// end ;
8413: LD_VAR 0 5
8417: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8418: LD_INT 0
8420: PPUSH
8421: PPUSH
// result := 0 ;
8422: LD_ADDR_VAR 0 3
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// if not array or not value in array then
8430: LD_VAR 0 1
8434: NOT
8435: PUSH
8436: LD_VAR 0 2
8440: PUSH
8441: LD_VAR 0 1
8445: IN
8446: NOT
8447: OR
8448: IFFALSE 8452
// exit ;
8450: GO 8506
// for i = 1 to array do
8452: LD_ADDR_VAR 0 4
8456: PUSH
8457: DOUBLE
8458: LD_INT 1
8460: DEC
8461: ST_TO_ADDR
8462: LD_VAR 0 1
8466: PUSH
8467: FOR_TO
8468: IFFALSE 8504
// if value = array [ i ] then
8470: LD_VAR 0 2
8474: PUSH
8475: LD_VAR 0 1
8479: PUSH
8480: LD_VAR 0 4
8484: ARRAY
8485: EQUAL
8486: IFFALSE 8502
// begin result := i ;
8488: LD_ADDR_VAR 0 3
8492: PUSH
8493: LD_VAR 0 4
8497: ST_TO_ADDR
// exit ;
8498: POP
8499: POP
8500: GO 8506
// end ;
8502: GO 8467
8504: POP
8505: POP
// end ;
8506: LD_VAR 0 3
8510: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8511: LD_INT 0
8513: PPUSH
// vc_chassis := chassis ;
8514: LD_ADDR_OWVAR 37
8518: PUSH
8519: LD_VAR 0 1
8523: ST_TO_ADDR
// vc_engine := engine ;
8524: LD_ADDR_OWVAR 39
8528: PUSH
8529: LD_VAR 0 2
8533: ST_TO_ADDR
// vc_control := control ;
8534: LD_ADDR_OWVAR 38
8538: PUSH
8539: LD_VAR 0 3
8543: ST_TO_ADDR
// vc_weapon := weapon ;
8544: LD_ADDR_OWVAR 40
8548: PUSH
8549: LD_VAR 0 4
8553: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8554: LD_ADDR_OWVAR 41
8558: PUSH
8559: LD_VAR 0 5
8563: ST_TO_ADDR
// end ;
8564: LD_VAR 0 6
8568: RET
// export function WantPlant ( unit ) ; var task ; begin
8569: LD_INT 0
8571: PPUSH
8572: PPUSH
// result := false ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_INT 0
8580: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 437
8595: ST_TO_ADDR
// if task then
8596: LD_VAR 0 3
8600: IFFALSE 8628
// if task [ 1 ] [ 1 ] = p then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 1
8609: ARRAY
8610: PUSH
8611: LD_INT 1
8613: ARRAY
8614: PUSH
8615: LD_STRING p
8617: EQUAL
8618: IFFALSE 8628
// result := true ;
8620: LD_ADDR_VAR 0 2
8624: PUSH
8625: LD_INT 1
8627: ST_TO_ADDR
// end ;
8628: LD_VAR 0 2
8632: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8633: LD_INT 0
8635: PPUSH
8636: PPUSH
8637: PPUSH
8638: PPUSH
// if pos < 1 then
8639: LD_VAR 0 2
8643: PUSH
8644: LD_INT 1
8646: LESS
8647: IFFALSE 8651
// exit ;
8649: GO 8954
// if pos = 1 then
8651: LD_VAR 0 2
8655: PUSH
8656: LD_INT 1
8658: EQUAL
8659: IFFALSE 8692
// result := Replace ( arr , pos [ 1 ] , value ) else
8661: LD_ADDR_VAR 0 4
8665: PUSH
8666: LD_VAR 0 1
8670: PPUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: LD_VAR 0 3
8684: PPUSH
8685: CALL_OW 1
8689: ST_TO_ADDR
8690: GO 8954
// begin tmp := arr ;
8692: LD_ADDR_VAR 0 6
8696: PUSH
8697: LD_VAR 0 1
8701: ST_TO_ADDR
// s_arr := [ tmp ] ;
8702: LD_ADDR_VAR 0 7
8706: PUSH
8707: LD_VAR 0 6
8711: PUSH
8712: EMPTY
8713: LIST
8714: ST_TO_ADDR
// for i = 1 to pos - 1 do
8715: LD_ADDR_VAR 0 5
8719: PUSH
8720: DOUBLE
8721: LD_INT 1
8723: DEC
8724: ST_TO_ADDR
8725: LD_VAR 0 2
8729: PUSH
8730: LD_INT 1
8732: MINUS
8733: PUSH
8734: FOR_TO
8735: IFFALSE 8780
// begin tmp := tmp [ pos [ i ] ] ;
8737: LD_ADDR_VAR 0 6
8741: PUSH
8742: LD_VAR 0 6
8746: PUSH
8747: LD_VAR 0 2
8751: PUSH
8752: LD_VAR 0 5
8756: ARRAY
8757: ARRAY
8758: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8759: LD_ADDR_VAR 0 7
8763: PUSH
8764: LD_VAR 0 7
8768: PUSH
8769: LD_VAR 0 6
8773: PUSH
8774: EMPTY
8775: LIST
8776: ADD
8777: ST_TO_ADDR
// end ;
8778: GO 8734
8780: POP
8781: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8782: LD_ADDR_VAR 0 6
8786: PUSH
8787: LD_VAR 0 6
8791: PPUSH
8792: LD_VAR 0 2
8796: PUSH
8797: LD_VAR 0 2
8801: ARRAY
8802: PPUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: CALL_OW 1
8812: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8813: LD_ADDR_VAR 0 7
8817: PUSH
8818: LD_VAR 0 7
8822: PPUSH
8823: LD_VAR 0 7
8827: PPUSH
8828: LD_VAR 0 6
8832: PPUSH
8833: CALL_OW 1
8837: ST_TO_ADDR
// for i = s_arr downto 2 do
8838: LD_ADDR_VAR 0 5
8842: PUSH
8843: DOUBLE
8844: LD_VAR 0 7
8848: INC
8849: ST_TO_ADDR
8850: LD_INT 2
8852: PUSH
8853: FOR_DOWNTO
8854: IFFALSE 8938
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8856: LD_ADDR_VAR 0 6
8860: PUSH
8861: LD_VAR 0 7
8865: PUSH
8866: LD_VAR 0 5
8870: PUSH
8871: LD_INT 1
8873: MINUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 2
8880: PUSH
8881: LD_VAR 0 5
8885: PUSH
8886: LD_INT 1
8888: MINUS
8889: ARRAY
8890: PPUSH
8891: LD_VAR 0 7
8895: PUSH
8896: LD_VAR 0 5
8900: ARRAY
8901: PPUSH
8902: CALL_OW 1
8906: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8907: LD_ADDR_VAR 0 7
8911: PUSH
8912: LD_VAR 0 7
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: MINUS
8925: PPUSH
8926: LD_VAR 0 6
8930: PPUSH
8931: CALL_OW 1
8935: ST_TO_ADDR
// end ;
8936: GO 8853
8938: POP
8939: POP
// result := s_arr [ 1 ] ;
8940: LD_ADDR_VAR 0 4
8944: PUSH
8945: LD_VAR 0 7
8949: PUSH
8950: LD_INT 1
8952: ARRAY
8953: ST_TO_ADDR
// end ; end ;
8954: LD_VAR 0 4
8958: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8959: LD_INT 0
8961: PPUSH
8962: PPUSH
// if not list then
8963: LD_VAR 0 1
8967: NOT
8968: IFFALSE 8972
// exit ;
8970: GO 9063
// i := list [ pos1 ] ;
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: LD_VAR 0 1
8981: PUSH
8982: LD_VAR 0 2
8986: ARRAY
8987: ST_TO_ADDR
// if not i then
8988: LD_VAR 0 5
8992: NOT
8993: IFFALSE 8997
// exit ;
8995: GO 9063
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8997: LD_ADDR_VAR 0 1
9001: PUSH
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_VAR 0 2
9011: PPUSH
9012: LD_VAR 0 1
9016: PUSH
9017: LD_VAR 0 3
9021: ARRAY
9022: PPUSH
9023: CALL_OW 1
9027: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: LD_VAR 0 1
9037: PPUSH
9038: LD_VAR 0 3
9042: PPUSH
9043: LD_VAR 0 5
9047: PPUSH
9048: CALL_OW 1
9052: ST_TO_ADDR
// result := list ;
9053: LD_ADDR_VAR 0 4
9057: PUSH
9058: LD_VAR 0 1
9062: ST_TO_ADDR
// end ;
9063: LD_VAR 0 4
9067: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9068: LD_INT 0
9070: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9071: LD_ADDR_VAR 0 5
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 250
9085: PPUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 251
9095: PPUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_VAR 0 4
9110: PPUSH
9111: CALL 9489 0 5
9115: ST_TO_ADDR
// end ;
9116: LD_VAR 0 5
9120: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
9125: PPUSH
9126: PPUSH
// if not list or not unit then
9127: LD_VAR 0 2
9131: NOT
9132: PUSH
9133: LD_VAR 0 1
9137: NOT
9138: OR
9139: IFFALSE 9143
// exit ;
9141: GO 9484
// result := [ ] ;
9143: LD_ADDR_VAR 0 5
9147: PUSH
9148: EMPTY
9149: ST_TO_ADDR
// for i in list do
9150: LD_ADDR_VAR 0 6
9154: PUSH
9155: LD_VAR 0 2
9159: PUSH
9160: FOR_IN
9161: IFFALSE 9379
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9163: LD_ADDR_VAR 0 8
9167: PUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: LD_VAR 0 6
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 6
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 297
9195: ST_TO_ADDR
// if not Count ( result ) then
9196: LD_VAR 0 5
9200: PPUSH
9201: CALL 5773 0 1
9205: NOT
9206: IFFALSE 9239
// begin result := Join ( result , [ i , tmp ] ) ;
9208: LD_ADDR_VAR 0 5
9212: PUSH
9213: LD_VAR 0 5
9217: PPUSH
9218: LD_VAR 0 6
9222: PUSH
9223: LD_VAR 0 8
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PPUSH
9232: CALL 41382 0 2
9236: ST_TO_ADDR
// continue ;
9237: GO 9160
// end ; if result [ result ] [ 2 ] <= tmp then
9239: LD_VAR 0 5
9243: PUSH
9244: LD_VAR 0 5
9248: ARRAY
9249: PUSH
9250: LD_INT 2
9252: ARRAY
9253: PUSH
9254: LD_VAR 0 8
9258: LESSEQUAL
9259: IFFALSE 9292
// result := Join ( result , [ i , tmp ] ) else
9261: LD_ADDR_VAR 0 5
9265: PUSH
9266: LD_VAR 0 5
9270: PPUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 8
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PPUSH
9285: CALL 41382 0 2
9289: ST_TO_ADDR
9290: GO 9377
// begin for j := 1 to Count ( result ) do
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: DOUBLE
9298: LD_INT 1
9300: DEC
9301: ST_TO_ADDR
9302: LD_VAR 0 5
9306: PPUSH
9307: CALL 5773 0 1
9311: PUSH
9312: FOR_TO
9313: IFFALSE 9375
// begin if tmp < result [ j ] [ 2 ] then
9315: LD_VAR 0 8
9319: PUSH
9320: LD_VAR 0 5
9324: PUSH
9325: LD_VAR 0 7
9329: ARRAY
9330: PUSH
9331: LD_INT 2
9333: ARRAY
9334: LESS
9335: IFFALSE 9373
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9337: LD_ADDR_VAR 0 5
9341: PUSH
9342: LD_VAR 0 5
9346: PPUSH
9347: LD_VAR 0 7
9351: PPUSH
9352: LD_VAR 0 6
9356: PUSH
9357: LD_VAR 0 8
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 2
9370: ST_TO_ADDR
// break ;
9371: GO 9375
// end ; end ;
9373: GO 9312
9375: POP
9376: POP
// end ; end ;
9377: GO 9160
9379: POP
9380: POP
// if result and not asc then
9381: LD_VAR 0 5
9385: PUSH
9386: LD_VAR 0 3
9390: NOT
9391: AND
9392: IFFALSE 9409
// result := ReverseArray ( result ) ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_VAR 0 5
9403: PPUSH
9404: CALL 36649 0 1
9408: ST_TO_ADDR
// tmp := [ ] ;
9409: LD_ADDR_VAR 0 8
9413: PUSH
9414: EMPTY
9415: ST_TO_ADDR
// if mode then
9416: LD_VAR 0 4
9420: IFFALSE 9484
// begin for i := 1 to result do
9422: LD_ADDR_VAR 0 6
9426: PUSH
9427: DOUBLE
9428: LD_INT 1
9430: DEC
9431: ST_TO_ADDR
9432: LD_VAR 0 5
9436: PUSH
9437: FOR_TO
9438: IFFALSE 9472
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9440: LD_ADDR_VAR 0 8
9444: PUSH
9445: LD_VAR 0 8
9449: PPUSH
9450: LD_VAR 0 5
9454: PUSH
9455: LD_VAR 0 6
9459: ARRAY
9460: PUSH
9461: LD_INT 1
9463: ARRAY
9464: PPUSH
9465: CALL 41382 0 2
9469: ST_TO_ADDR
9470: GO 9437
9472: POP
9473: POP
// result := tmp ;
9474: LD_ADDR_VAR 0 5
9478: PUSH
9479: LD_VAR 0 8
9483: ST_TO_ADDR
// end ; end ;
9484: LD_VAR 0 5
9488: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9489: LD_INT 0
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
// if not list then
9495: LD_VAR 0 3
9499: NOT
9500: IFFALSE 9504
// exit ;
9502: GO 9892
// result := [ ] ;
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: EMPTY
9510: ST_TO_ADDR
// for i in list do
9511: LD_ADDR_VAR 0 7
9515: PUSH
9516: LD_VAR 0 3
9520: PUSH
9521: FOR_IN
9522: IFFALSE 9724
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9524: LD_ADDR_VAR 0 9
9528: PUSH
9529: LD_VAR 0 7
9533: PPUSH
9534: LD_VAR 0 1
9538: PPUSH
9539: LD_VAR 0 2
9543: PPUSH
9544: CALL_OW 297
9548: ST_TO_ADDR
// if not result then
9549: LD_VAR 0 6
9553: NOT
9554: IFFALSE 9580
// result := [ [ i , tmp ] ] else
9556: LD_ADDR_VAR 0 6
9560: PUSH
9561: LD_VAR 0 7
9565: PUSH
9566: LD_VAR 0 9
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: ST_TO_ADDR
9578: GO 9722
// begin if result [ result ] [ 2 ] <= tmp then
9580: LD_VAR 0 6
9584: PUSH
9585: LD_VAR 0 6
9589: ARRAY
9590: PUSH
9591: LD_INT 2
9593: ARRAY
9594: PUSH
9595: LD_VAR 0 9
9599: LESSEQUAL
9600: IFFALSE 9642
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9602: LD_ADDR_VAR 0 6
9606: PUSH
9607: LD_VAR 0 6
9611: PPUSH
9612: LD_VAR 0 6
9616: PUSH
9617: LD_INT 1
9619: PLUS
9620: PPUSH
9621: LD_VAR 0 7
9625: PUSH
9626: LD_VAR 0 9
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PPUSH
9635: CALL_OW 2
9639: ST_TO_ADDR
9640: GO 9722
// for j := 1 to result do
9642: LD_ADDR_VAR 0 8
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_VAR 0 6
9656: PUSH
9657: FOR_TO
9658: IFFALSE 9720
// begin if tmp < result [ j ] [ 2 ] then
9660: LD_VAR 0 9
9664: PUSH
9665: LD_VAR 0 6
9669: PUSH
9670: LD_VAR 0 8
9674: ARRAY
9675: PUSH
9676: LD_INT 2
9678: ARRAY
9679: LESS
9680: IFFALSE 9718
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9682: LD_ADDR_VAR 0 6
9686: PUSH
9687: LD_VAR 0 6
9691: PPUSH
9692: LD_VAR 0 8
9696: PPUSH
9697: LD_VAR 0 7
9701: PUSH
9702: LD_VAR 0 9
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 2
9715: ST_TO_ADDR
// break ;
9716: GO 9720
// end ; end ;
9718: GO 9657
9720: POP
9721: POP
// end ; end ;
9722: GO 9521
9724: POP
9725: POP
// if result and not asc then
9726: LD_VAR 0 6
9730: PUSH
9731: LD_VAR 0 4
9735: NOT
9736: AND
9737: IFFALSE 9812
// begin tmp := result ;
9739: LD_ADDR_VAR 0 9
9743: PUSH
9744: LD_VAR 0 6
9748: ST_TO_ADDR
// for i = tmp downto 1 do
9749: LD_ADDR_VAR 0 7
9753: PUSH
9754: DOUBLE
9755: LD_VAR 0 9
9759: INC
9760: ST_TO_ADDR
9761: LD_INT 1
9763: PUSH
9764: FOR_DOWNTO
9765: IFFALSE 9810
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9767: LD_ADDR_VAR 0 6
9771: PUSH
9772: LD_VAR 0 6
9776: PPUSH
9777: LD_VAR 0 9
9781: PUSH
9782: LD_VAR 0 7
9786: MINUS
9787: PUSH
9788: LD_INT 1
9790: PLUS
9791: PPUSH
9792: LD_VAR 0 9
9796: PUSH
9797: LD_VAR 0 7
9801: ARRAY
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
9808: GO 9764
9810: POP
9811: POP
// end ; tmp := [ ] ;
9812: LD_ADDR_VAR 0 9
9816: PUSH
9817: EMPTY
9818: ST_TO_ADDR
// if mode then
9819: LD_VAR 0 5
9823: IFFALSE 9892
// begin for i = 1 to result do
9825: LD_ADDR_VAR 0 7
9829: PUSH
9830: DOUBLE
9831: LD_INT 1
9833: DEC
9834: ST_TO_ADDR
9835: LD_VAR 0 6
9839: PUSH
9840: FOR_TO
9841: IFFALSE 9880
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_VAR 0 9
9852: PPUSH
9853: LD_VAR 0 7
9857: PPUSH
9858: LD_VAR 0 6
9862: PUSH
9863: LD_VAR 0 7
9867: ARRAY
9868: PUSH
9869: LD_INT 1
9871: ARRAY
9872: PPUSH
9873: CALL_OW 1
9877: ST_TO_ADDR
9878: GO 9840
9880: POP
9881: POP
// result := tmp ;
9882: LD_ADDR_VAR 0 6
9886: PUSH
9887: LD_VAR 0 9
9891: ST_TO_ADDR
// end ; end ;
9892: LD_VAR 0 6
9896: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
9903: PPUSH
9904: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9905: LD_ADDR_VAR 0 5
9909: PUSH
9910: LD_INT 0
9912: PUSH
9913: LD_INT 0
9915: PUSH
9916: LD_INT 0
9918: PUSH
9919: EMPTY
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if not x or not y then
9927: LD_VAR 0 2
9931: NOT
9932: PUSH
9933: LD_VAR 0 3
9937: NOT
9938: OR
9939: IFFALSE 9943
// exit ;
9941: GO 11593
// if not range then
9943: LD_VAR 0 4
9947: NOT
9948: IFFALSE 9958
// range := 10 ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_INT 10
9957: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_INT 81
9965: PUSH
9966: LD_VAR 0 1
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 92
9977: PUSH
9978: LD_VAR 0 2
9982: PUSH
9983: LD_VAR 0 3
9987: PUSH
9988: LD_VAR 0 4
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 3
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 69
10025: ST_TO_ADDR
// if not tmp then
10026: LD_VAR 0 8
10030: NOT
10031: IFFALSE 10035
// exit ;
10033: GO 11593
// for i in tmp do
10035: LD_ADDR_VAR 0 6
10039: PUSH
10040: LD_VAR 0 8
10044: PUSH
10045: FOR_IN
10046: IFFALSE 11568
// begin points := [ 0 , 0 , 0 ] ;
10048: LD_ADDR_VAR 0 9
10052: PUSH
10053: LD_INT 0
10055: PUSH
10056: LD_INT 0
10058: PUSH
10059: LD_INT 0
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// bpoints := 1 ;
10067: LD_ADDR_VAR 0 10
10071: PUSH
10072: LD_INT 1
10074: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10075: LD_VAR 0 6
10079: PPUSH
10080: CALL_OW 247
10084: PUSH
10085: LD_INT 1
10087: DOUBLE
10088: EQUAL
10089: IFTRUE 10093
10091: GO 10671
10093: POP
// begin if GetClass ( i ) = 1 then
10094: LD_VAR 0 6
10098: PPUSH
10099: CALL_OW 257
10103: PUSH
10104: LD_INT 1
10106: EQUAL
10107: IFFALSE 10128
// points := [ 10 , 5 , 3 ] ;
10109: LD_ADDR_VAR 0 9
10113: PUSH
10114: LD_INT 10
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: LIST
10127: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10128: LD_VAR 0 6
10132: PPUSH
10133: CALL_OW 257
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: LD_INT 3
10143: PUSH
10144: LD_INT 4
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: IN
10152: IFFALSE 10173
// points := [ 3 , 2 , 1 ] ;
10154: LD_ADDR_VAR 0 9
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: LD_INT 1
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10173: LD_VAR 0 6
10177: PPUSH
10178: CALL_OW 257
10182: PUSH
10183: LD_INT 5
10185: EQUAL
10186: IFFALSE 10207
// points := [ 130 , 5 , 2 ] ;
10188: LD_ADDR_VAR 0 9
10192: PUSH
10193: LD_INT 130
10195: PUSH
10196: LD_INT 5
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10207: LD_VAR 0 6
10211: PPUSH
10212: CALL_OW 257
10216: PUSH
10217: LD_INT 8
10219: EQUAL
10220: IFFALSE 10241
// points := [ 35 , 35 , 30 ] ;
10222: LD_ADDR_VAR 0 9
10226: PUSH
10227: LD_INT 35
10229: PUSH
10230: LD_INT 35
10232: PUSH
10233: LD_INT 30
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10241: LD_VAR 0 6
10245: PPUSH
10246: CALL_OW 257
10250: PUSH
10251: LD_INT 9
10253: EQUAL
10254: IFFALSE 10275
// points := [ 20 , 55 , 40 ] ;
10256: LD_ADDR_VAR 0 9
10260: PUSH
10261: LD_INT 20
10263: PUSH
10264: LD_INT 55
10266: PUSH
10267: LD_INT 40
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10275: LD_VAR 0 6
10279: PPUSH
10280: CALL_OW 257
10284: PUSH
10285: LD_INT 12
10287: PUSH
10288: LD_INT 16
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: IN
10295: IFFALSE 10316
// points := [ 5 , 3 , 2 ] ;
10297: LD_ADDR_VAR 0 9
10301: PUSH
10302: LD_INT 5
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10316: LD_VAR 0 6
10320: PPUSH
10321: CALL_OW 257
10325: PUSH
10326: LD_INT 17
10328: EQUAL
10329: IFFALSE 10350
// points := [ 100 , 50 , 75 ] ;
10331: LD_ADDR_VAR 0 9
10335: PUSH
10336: LD_INT 100
10338: PUSH
10339: LD_INT 50
10341: PUSH
10342: LD_INT 75
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10350: LD_VAR 0 6
10354: PPUSH
10355: CALL_OW 257
10359: PUSH
10360: LD_INT 15
10362: EQUAL
10363: IFFALSE 10384
// points := [ 10 , 5 , 3 ] ;
10365: LD_ADDR_VAR 0 9
10369: PUSH
10370: LD_INT 10
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10384: LD_VAR 0 6
10388: PPUSH
10389: CALL_OW 257
10393: PUSH
10394: LD_INT 14
10396: EQUAL
10397: IFFALSE 10418
// points := [ 10 , 0 , 0 ] ;
10399: LD_ADDR_VAR 0 9
10403: PUSH
10404: LD_INT 10
10406: PUSH
10407: LD_INT 0
10409: PUSH
10410: LD_INT 0
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10418: LD_VAR 0 6
10422: PPUSH
10423: CALL_OW 257
10427: PUSH
10428: LD_INT 11
10430: EQUAL
10431: IFFALSE 10452
// points := [ 30 , 10 , 5 ] ;
10433: LD_ADDR_VAR 0 9
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: LD_INT 10
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 5
10459: PPUSH
10460: CALL_OW 321
10464: PUSH
10465: LD_INT 2
10467: EQUAL
10468: IFFALSE 10485
// bpoints := bpoints * 1.8 ;
10470: LD_ADDR_VAR 0 10
10474: PUSH
10475: LD_VAR 0 10
10479: PUSH
10480: LD_REAL  1.80000000000000E+0000
10483: MUL
10484: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10485: LD_VAR 0 6
10489: PPUSH
10490: CALL_OW 257
10494: PUSH
10495: LD_INT 1
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 3
10503: PUSH
10504: LD_INT 4
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: IN
10513: PUSH
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 51
10521: PPUSH
10522: CALL_OW 321
10526: PUSH
10527: LD_INT 2
10529: EQUAL
10530: AND
10531: IFFALSE 10548
// bpoints := bpoints * 1.2 ;
10533: LD_ADDR_VAR 0 10
10537: PUSH
10538: LD_VAR 0 10
10542: PUSH
10543: LD_REAL  1.20000000000000E+0000
10546: MUL
10547: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10548: LD_VAR 0 6
10552: PPUSH
10553: CALL_OW 257
10557: PUSH
10558: LD_INT 5
10560: PUSH
10561: LD_INT 7
10563: PUSH
10564: LD_INT 9
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: IN
10572: PUSH
10573: LD_VAR 0 1
10577: PPUSH
10578: LD_INT 52
10580: PPUSH
10581: CALL_OW 321
10585: PUSH
10586: LD_INT 2
10588: EQUAL
10589: AND
10590: IFFALSE 10607
// bpoints := bpoints * 1.5 ;
10592: LD_ADDR_VAR 0 10
10596: PUSH
10597: LD_VAR 0 10
10601: PUSH
10602: LD_REAL  1.50000000000000E+0000
10605: MUL
10606: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10607: LD_VAR 0 1
10611: PPUSH
10612: LD_INT 66
10614: PPUSH
10615: CALL_OW 321
10619: PUSH
10620: LD_INT 2
10622: EQUAL
10623: IFFALSE 10640
// bpoints := bpoints * 1.1 ;
10625: LD_ADDR_VAR 0 10
10629: PUSH
10630: LD_VAR 0 10
10634: PUSH
10635: LD_REAL  1.10000000000000E+0000
10638: MUL
10639: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10640: LD_ADDR_VAR 0 10
10644: PUSH
10645: LD_VAR 0 10
10649: PUSH
10650: LD_VAR 0 6
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: CALL_OW 259
10662: PUSH
10663: LD_REAL  1.15000000000000E+0000
10666: MUL
10667: MUL
10668: ST_TO_ADDR
// end ; unit_vehicle :
10669: GO 11497
10671: LD_INT 2
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 11485
10679: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10680: LD_VAR 0 6
10684: PPUSH
10685: CALL_OW 264
10689: PUSH
10690: LD_INT 2
10692: PUSH
10693: LD_INT 42
10695: PUSH
10696: LD_INT 24
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: IN
10704: IFFALSE 10725
// points := [ 25 , 5 , 3 ] ;
10706: LD_ADDR_VAR 0 9
10710: PUSH
10711: LD_INT 25
10713: PUSH
10714: LD_INT 5
10716: PUSH
10717: LD_INT 3
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10725: LD_VAR 0 6
10729: PPUSH
10730: CALL_OW 264
10734: PUSH
10735: LD_INT 4
10737: PUSH
10738: LD_INT 43
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: IN
10749: IFFALSE 10770
// points := [ 40 , 15 , 5 ] ;
10751: LD_ADDR_VAR 0 9
10755: PUSH
10756: LD_INT 40
10758: PUSH
10759: LD_INT 15
10761: PUSH
10762: LD_INT 5
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10770: LD_VAR 0 6
10774: PPUSH
10775: CALL_OW 264
10779: PUSH
10780: LD_INT 3
10782: PUSH
10783: LD_INT 23
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: IN
10790: IFFALSE 10811
// points := [ 7 , 25 , 8 ] ;
10792: LD_ADDR_VAR 0 9
10796: PUSH
10797: LD_INT 7
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 8
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10811: LD_VAR 0 6
10815: PPUSH
10816: CALL_OW 264
10820: PUSH
10821: LD_INT 5
10823: PUSH
10824: LD_INT 27
10826: PUSH
10827: LD_INT 44
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: IN
10835: IFFALSE 10856
// points := [ 14 , 50 , 16 ] ;
10837: LD_ADDR_VAR 0 9
10841: PUSH
10842: LD_INT 14
10844: PUSH
10845: LD_INT 50
10847: PUSH
10848: LD_INT 16
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10856: LD_VAR 0 6
10860: PPUSH
10861: CALL_OW 264
10865: PUSH
10866: LD_INT 6
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: IN
10876: IFFALSE 10897
// points := [ 32 , 120 , 70 ] ;
10878: LD_ADDR_VAR 0 9
10882: PUSH
10883: LD_INT 32
10885: PUSH
10886: LD_INT 120
10888: PUSH
10889: LD_INT 70
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10897: LD_VAR 0 6
10901: PPUSH
10902: CALL_OW 264
10906: PUSH
10907: LD_INT 7
10909: PUSH
10910: LD_INT 28
10912: PUSH
10913: LD_INT 45
10915: PUSH
10916: LD_INT 92
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: IFFALSE 10946
// points := [ 35 , 20 , 45 ] ;
10927: LD_ADDR_VAR 0 9
10931: PUSH
10932: LD_INT 35
10934: PUSH
10935: LD_INT 20
10937: PUSH
10938: LD_INT 45
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10946: LD_VAR 0 6
10950: PPUSH
10951: CALL_OW 264
10955: PUSH
10956: LD_INT 47
10958: PUSH
10959: EMPTY
10960: LIST
10961: IN
10962: IFFALSE 10983
// points := [ 67 , 45 , 75 ] ;
10964: LD_ADDR_VAR 0 9
10968: PUSH
10969: LD_INT 67
10971: PUSH
10972: LD_INT 45
10974: PUSH
10975: LD_INT 75
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10983: LD_VAR 0 6
10987: PPUSH
10988: CALL_OW 264
10992: PUSH
10993: LD_INT 26
10995: PUSH
10996: EMPTY
10997: LIST
10998: IN
10999: IFFALSE 11020
// points := [ 120 , 30 , 80 ] ;
11001: LD_ADDR_VAR 0 9
11005: PUSH
11006: LD_INT 120
11008: PUSH
11009: LD_INT 30
11011: PUSH
11012: LD_INT 80
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11020: LD_VAR 0 6
11024: PPUSH
11025: CALL_OW 264
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: EMPTY
11034: LIST
11035: IN
11036: IFFALSE 11057
// points := [ 40 , 1 , 1 ] ;
11038: LD_ADDR_VAR 0 9
11042: PUSH
11043: LD_INT 40
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: LD_INT 1
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11057: LD_VAR 0 6
11061: PPUSH
11062: CALL_OW 264
11066: PUSH
11067: LD_INT 29
11069: PUSH
11070: EMPTY
11071: LIST
11072: IN
11073: IFFALSE 11094
// points := [ 70 , 200 , 400 ] ;
11075: LD_ADDR_VAR 0 9
11079: PUSH
11080: LD_INT 70
11082: PUSH
11083: LD_INT 200
11085: PUSH
11086: LD_INT 400
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11094: LD_VAR 0 6
11098: PPUSH
11099: CALL_OW 264
11103: PUSH
11104: LD_INT 14
11106: PUSH
11107: LD_INT 53
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: IN
11114: IFFALSE 11135
// points := [ 40 , 10 , 20 ] ;
11116: LD_ADDR_VAR 0 9
11120: PUSH
11121: LD_INT 40
11123: PUSH
11124: LD_INT 10
11126: PUSH
11127: LD_INT 20
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11135: LD_VAR 0 6
11139: PPUSH
11140: CALL_OW 264
11144: PUSH
11145: LD_INT 9
11147: PUSH
11148: EMPTY
11149: LIST
11150: IN
11151: IFFALSE 11172
// points := [ 5 , 70 , 20 ] ;
11153: LD_ADDR_VAR 0 9
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 70
11163: PUSH
11164: LD_INT 20
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11172: LD_VAR 0 6
11176: PPUSH
11177: CALL_OW 264
11181: PUSH
11182: LD_INT 10
11184: PUSH
11185: EMPTY
11186: LIST
11187: IN
11188: IFFALSE 11209
// points := [ 35 , 110 , 70 ] ;
11190: LD_ADDR_VAR 0 9
11194: PUSH
11195: LD_INT 35
11197: PUSH
11198: LD_INT 110
11200: PUSH
11201: LD_INT 70
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11209: LD_VAR 0 6
11213: PPUSH
11214: CALL_OW 265
11218: PUSH
11219: LD_INT 25
11221: EQUAL
11222: IFFALSE 11243
// points := [ 80 , 65 , 100 ] ;
11224: LD_ADDR_VAR 0 9
11228: PUSH
11229: LD_INT 80
11231: PUSH
11232: LD_INT 65
11234: PUSH
11235: LD_INT 100
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11243: LD_VAR 0 6
11247: PPUSH
11248: CALL_OW 263
11252: PUSH
11253: LD_INT 1
11255: EQUAL
11256: IFFALSE 11291
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11258: LD_ADDR_VAR 0 10
11262: PUSH
11263: LD_VAR 0 10
11267: PUSH
11268: LD_VAR 0 6
11272: PPUSH
11273: CALL_OW 311
11277: PPUSH
11278: LD_INT 3
11280: PPUSH
11281: CALL_OW 259
11285: PUSH
11286: LD_INT 4
11288: MUL
11289: MUL
11290: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11291: LD_VAR 0 6
11295: PPUSH
11296: CALL_OW 263
11300: PUSH
11301: LD_INT 2
11303: EQUAL
11304: IFFALSE 11355
// begin j := IsControledBy ( i ) ;
11306: LD_ADDR_VAR 0 7
11310: PUSH
11311: LD_VAR 0 6
11315: PPUSH
11316: CALL_OW 312
11320: ST_TO_ADDR
// if j then
11321: LD_VAR 0 7
11325: IFFALSE 11355
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11327: LD_ADDR_VAR 0 10
11331: PUSH
11332: LD_VAR 0 10
11336: PUSH
11337: LD_VAR 0 7
11341: PPUSH
11342: LD_INT 3
11344: PPUSH
11345: CALL_OW 259
11349: PUSH
11350: LD_INT 3
11352: MUL
11353: MUL
11354: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11355: LD_VAR 0 6
11359: PPUSH
11360: CALL_OW 264
11364: PUSH
11365: LD_INT 5
11367: PUSH
11368: LD_INT 6
11370: PUSH
11371: LD_INT 46
11373: PUSH
11374: LD_INT 44
11376: PUSH
11377: LD_INT 47
11379: PUSH
11380: LD_INT 45
11382: PUSH
11383: LD_INT 28
11385: PUSH
11386: LD_INT 7
11388: PUSH
11389: LD_INT 27
11391: PUSH
11392: LD_INT 29
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: IN
11407: PUSH
11408: LD_VAR 0 1
11412: PPUSH
11413: LD_INT 52
11415: PPUSH
11416: CALL_OW 321
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: AND
11425: IFFALSE 11442
// bpoints := bpoints * 1.2 ;
11427: LD_ADDR_VAR 0 10
11431: PUSH
11432: LD_VAR 0 10
11436: PUSH
11437: LD_REAL  1.20000000000000E+0000
11440: MUL
11441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11442: LD_VAR 0 6
11446: PPUSH
11447: CALL_OW 264
11451: PUSH
11452: LD_INT 6
11454: PUSH
11455: LD_INT 46
11457: PUSH
11458: LD_INT 47
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: IN
11466: IFFALSE 11483
// bpoints := bpoints * 1.2 ;
11468: LD_ADDR_VAR 0 10
11472: PUSH
11473: LD_VAR 0 10
11477: PUSH
11478: LD_REAL  1.20000000000000E+0000
11481: MUL
11482: ST_TO_ADDR
// end ; unit_building :
11483: GO 11497
11485: LD_INT 3
11487: DOUBLE
11488: EQUAL
11489: IFTRUE 11493
11491: GO 11496
11493: POP
// ; end ;
11494: GO 11497
11496: POP
// for j = 1 to 3 do
11497: LD_ADDR_VAR 0 7
11501: PUSH
11502: DOUBLE
11503: LD_INT 1
11505: DEC
11506: ST_TO_ADDR
11507: LD_INT 3
11509: PUSH
11510: FOR_TO
11511: IFFALSE 11564
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11513: LD_ADDR_VAR 0 5
11517: PUSH
11518: LD_VAR 0 5
11522: PPUSH
11523: LD_VAR 0 7
11527: PPUSH
11528: LD_VAR 0 5
11532: PUSH
11533: LD_VAR 0 7
11537: ARRAY
11538: PUSH
11539: LD_VAR 0 9
11543: PUSH
11544: LD_VAR 0 7
11548: ARRAY
11549: PUSH
11550: LD_VAR 0 10
11554: MUL
11555: PLUS
11556: PPUSH
11557: CALL_OW 1
11561: ST_TO_ADDR
11562: GO 11510
11564: POP
11565: POP
// end ;
11566: GO 10045
11568: POP
11569: POP
// result := Replace ( result , 4 , tmp ) ;
11570: LD_ADDR_VAR 0 5
11574: PUSH
11575: LD_VAR 0 5
11579: PPUSH
11580: LD_INT 4
11582: PPUSH
11583: LD_VAR 0 8
11587: PPUSH
11588: CALL_OW 1
11592: ST_TO_ADDR
// end ;
11593: LD_VAR 0 5
11597: RET
// export function DangerAtRange ( unit , range ) ; begin
11598: LD_INT 0
11600: PPUSH
// if not unit then
11601: LD_VAR 0 1
11605: NOT
11606: IFFALSE 11610
// exit ;
11608: GO 11655
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11610: LD_ADDR_VAR 0 3
11614: PUSH
11615: LD_VAR 0 1
11619: PPUSH
11620: CALL_OW 255
11624: PPUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 250
11634: PPUSH
11635: LD_VAR 0 1
11639: PPUSH
11640: CALL_OW 251
11644: PPUSH
11645: LD_VAR 0 2
11649: PPUSH
11650: CALL 9897 0 4
11654: ST_TO_ADDR
// end ;
11655: LD_VAR 0 3
11659: RET
// export function DangerInArea ( side , area ) ; begin
11660: LD_INT 0
11662: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_VAR 0 2
11672: PPUSH
11673: LD_INT 81
11675: PUSH
11676: LD_VAR 0 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: ST_TO_ADDR
// end ;
11690: LD_VAR 0 3
11694: RET
// export function IsExtension ( b ) ; begin
11695: LD_INT 0
11697: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_VAR 0 1
11707: PUSH
11708: LD_INT 23
11710: PUSH
11711: LD_INT 20
11713: PUSH
11714: LD_INT 22
11716: PUSH
11717: LD_INT 17
11719: PUSH
11720: LD_INT 24
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 19
11728: PUSH
11729: LD_INT 16
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 18
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: IN
11750: ST_TO_ADDR
// end ;
11751: LD_VAR 0 2
11755: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11756: LD_INT 0
11758: PPUSH
11759: PPUSH
11760: PPUSH
// result := [ ] ;
11761: LD_ADDR_VAR 0 4
11765: PUSH
11766: EMPTY
11767: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11768: LD_ADDR_VAR 0 5
11772: PUSH
11773: LD_VAR 0 2
11777: PPUSH
11778: LD_INT 21
11780: PUSH
11781: LD_INT 3
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 70
11792: ST_TO_ADDR
// if not tmp then
11793: LD_VAR 0 5
11797: NOT
11798: IFFALSE 11802
// exit ;
11800: GO 11866
// if checkLink then
11802: LD_VAR 0 3
11806: IFFALSE 11856
// begin for i in tmp do
11808: LD_ADDR_VAR 0 6
11812: PUSH
11813: LD_VAR 0 5
11817: PUSH
11818: FOR_IN
11819: IFFALSE 11854
// if GetBase ( i ) <> base then
11821: LD_VAR 0 6
11825: PPUSH
11826: CALL_OW 274
11830: PUSH
11831: LD_VAR 0 1
11835: NONEQUAL
11836: IFFALSE 11852
// ComLinkToBase ( base , i ) ;
11838: LD_VAR 0 1
11842: PPUSH
11843: LD_VAR 0 6
11847: PPUSH
11848: CALL_OW 169
11852: GO 11818
11854: POP
11855: POP
// end ; result := tmp ;
11856: LD_ADDR_VAR 0 4
11860: PUSH
11861: LD_VAR 0 5
11865: ST_TO_ADDR
// end ;
11866: LD_VAR 0 4
11870: RET
// export function ComComplete ( units , b ) ; var i ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
// if not units then
11875: LD_VAR 0 1
11879: NOT
11880: IFFALSE 11884
// exit ;
11882: GO 11974
// for i in units do
11884: LD_ADDR_VAR 0 4
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: FOR_IN
11895: IFFALSE 11972
// if BuildingStatus ( b ) = bs_build then
11897: LD_VAR 0 2
11901: PPUSH
11902: CALL_OW 461
11906: PUSH
11907: LD_INT 1
11909: EQUAL
11910: IFFALSE 11970
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11912: LD_VAR 0 4
11916: PPUSH
11917: LD_STRING h
11919: PUSH
11920: LD_VAR 0 2
11924: PPUSH
11925: CALL_OW 250
11929: PUSH
11930: LD_VAR 0 2
11934: PPUSH
11935: CALL_OW 251
11939: PUSH
11940: LD_VAR 0 2
11944: PUSH
11945: LD_INT 0
11947: PUSH
11948: LD_INT 0
11950: PUSH
11951: LD_INT 0
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: PPUSH
11966: CALL_OW 446
11970: GO 11894
11972: POP
11973: POP
// end ;
11974: LD_VAR 0 3
11978: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11979: LD_INT 0
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
11985: PPUSH
11986: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11987: LD_VAR 0 1
11991: NOT
11992: PUSH
11993: LD_VAR 0 1
11997: PPUSH
11998: CALL_OW 263
12002: PUSH
12003: LD_INT 2
12005: NONEQUAL
12006: OR
12007: IFFALSE 12011
// exit ;
12009: GO 12327
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12011: LD_ADDR_VAR 0 6
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: LD_VAR 0 1
12023: PPUSH
12024: CALL_OW 255
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 36
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 34
12048: PUSH
12049: LD_INT 31
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: ST_TO_ADDR
// if not tmp then
12070: LD_VAR 0 6
12074: NOT
12075: IFFALSE 12079
// exit ;
12077: GO 12327
// result := [ ] ;
12079: LD_ADDR_VAR 0 2
12083: PUSH
12084: EMPTY
12085: ST_TO_ADDR
// for i in tmp do
12086: LD_ADDR_VAR 0 3
12090: PUSH
12091: LD_VAR 0 6
12095: PUSH
12096: FOR_IN
12097: IFFALSE 12168
// begin t := UnitsInside ( i ) ;
12099: LD_ADDR_VAR 0 4
12103: PUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: CALL_OW 313
12113: ST_TO_ADDR
// if t then
12114: LD_VAR 0 4
12118: IFFALSE 12166
// for j in t do
12120: LD_ADDR_VAR 0 7
12124: PUSH
12125: LD_VAR 0 4
12129: PUSH
12130: FOR_IN
12131: IFFALSE 12164
// result := Replace ( result , result + 1 , j ) ;
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_VAR 0 2
12142: PPUSH
12143: LD_VAR 0 2
12147: PUSH
12148: LD_INT 1
12150: PLUS
12151: PPUSH
12152: LD_VAR 0 7
12156: PPUSH
12157: CALL_OW 1
12161: ST_TO_ADDR
12162: GO 12130
12164: POP
12165: POP
// end ;
12166: GO 12096
12168: POP
12169: POP
// if not result then
12170: LD_VAR 0 2
12174: NOT
12175: IFFALSE 12179
// exit ;
12177: GO 12327
// mech := result [ 1 ] ;
12179: LD_ADDR_VAR 0 5
12183: PUSH
12184: LD_VAR 0 2
12188: PUSH
12189: LD_INT 1
12191: ARRAY
12192: ST_TO_ADDR
// if result > 1 then
12193: LD_VAR 0 2
12197: PUSH
12198: LD_INT 1
12200: GREATER
12201: IFFALSE 12313
// begin for i = 2 to result do
12203: LD_ADDR_VAR 0 3
12207: PUSH
12208: DOUBLE
12209: LD_INT 2
12211: DEC
12212: ST_TO_ADDR
12213: LD_VAR 0 2
12217: PUSH
12218: FOR_TO
12219: IFFALSE 12311
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12221: LD_ADDR_VAR 0 4
12225: PUSH
12226: LD_VAR 0 2
12230: PUSH
12231: LD_VAR 0 3
12235: ARRAY
12236: PPUSH
12237: LD_INT 3
12239: PPUSH
12240: CALL_OW 259
12244: PUSH
12245: LD_VAR 0 2
12249: PUSH
12250: LD_VAR 0 3
12254: ARRAY
12255: PPUSH
12256: CALL_OW 432
12260: MINUS
12261: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12262: LD_VAR 0 4
12266: PUSH
12267: LD_VAR 0 5
12271: PPUSH
12272: LD_INT 3
12274: PPUSH
12275: CALL_OW 259
12279: PUSH
12280: LD_VAR 0 5
12284: PPUSH
12285: CALL_OW 432
12289: MINUS
12290: GREATEREQUAL
12291: IFFALSE 12309
// mech := result [ i ] ;
12293: LD_ADDR_VAR 0 5
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: LD_VAR 0 3
12307: ARRAY
12308: ST_TO_ADDR
// end ;
12309: GO 12218
12311: POP
12312: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12313: LD_VAR 0 1
12317: PPUSH
12318: LD_VAR 0 5
12322: PPUSH
12323: CALL_OW 135
// end ;
12327: LD_VAR 0 2
12331: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
// result := [ ] ;
12347: LD_ADDR_VAR 0 7
12351: PUSH
12352: EMPTY
12353: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 266
12363: PUSH
12364: LD_INT 0
12366: PUSH
12367: LD_INT 1
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: IN
12374: NOT
12375: IFFALSE 12379
// exit ;
12377: GO 14013
// if name then
12379: LD_VAR 0 3
12383: IFFALSE 12399
// SetBName ( base_dep , name ) ;
12385: LD_VAR 0 1
12389: PPUSH
12390: LD_VAR 0 3
12394: PPUSH
12395: CALL_OW 500
// base := GetBase ( base_dep ) ;
12399: LD_ADDR_VAR 0 15
12403: PUSH
12404: LD_VAR 0 1
12408: PPUSH
12409: CALL_OW 274
12413: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12414: LD_ADDR_VAR 0 16
12418: PUSH
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 255
12428: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12429: LD_ADDR_VAR 0 17
12433: PUSH
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 248
12443: ST_TO_ADDR
// if sources then
12444: LD_VAR 0 5
12448: IFFALSE 12495
// for i = 1 to 3 do
12450: LD_ADDR_VAR 0 8
12454: PUSH
12455: DOUBLE
12456: LD_INT 1
12458: DEC
12459: ST_TO_ADDR
12460: LD_INT 3
12462: PUSH
12463: FOR_TO
12464: IFFALSE 12493
// AddResourceType ( base , i , sources [ i ] ) ;
12466: LD_VAR 0 15
12470: PPUSH
12471: LD_VAR 0 8
12475: PPUSH
12476: LD_VAR 0 5
12480: PUSH
12481: LD_VAR 0 8
12485: ARRAY
12486: PPUSH
12487: CALL_OW 276
12491: GO 12463
12493: POP
12494: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12495: LD_ADDR_VAR 0 18
12499: PUSH
12500: LD_VAR 0 15
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL 11756 0 3
12517: ST_TO_ADDR
// InitHc ;
12518: CALL_OW 19
// InitUc ;
12522: CALL_OW 18
// uc_side := side ;
12526: LD_ADDR_OWVAR 20
12530: PUSH
12531: LD_VAR 0 16
12535: ST_TO_ADDR
// uc_nation := nation ;
12536: LD_ADDR_OWVAR 21
12540: PUSH
12541: LD_VAR 0 17
12545: ST_TO_ADDR
// if buildings then
12546: LD_VAR 0 18
12550: IFFALSE 13872
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12552: LD_ADDR_VAR 0 19
12556: PUSH
12557: LD_VAR 0 18
12561: PPUSH
12562: LD_INT 2
12564: PUSH
12565: LD_INT 30
12567: PUSH
12568: LD_INT 29
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 30
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 72
12594: ST_TO_ADDR
// if tmp then
12595: LD_VAR 0 19
12599: IFFALSE 12647
// for i in tmp do
12601: LD_ADDR_VAR 0 8
12605: PUSH
12606: LD_VAR 0 19
12610: PUSH
12611: FOR_IN
12612: IFFALSE 12645
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12614: LD_VAR 0 8
12618: PPUSH
12619: CALL_OW 250
12623: PPUSH
12624: LD_VAR 0 8
12628: PPUSH
12629: CALL_OW 251
12633: PPUSH
12634: LD_VAR 0 16
12638: PPUSH
12639: CALL_OW 441
12643: GO 12611
12645: POP
12646: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12647: LD_VAR 0 18
12651: PPUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 30
12657: PUSH
12658: LD_INT 32
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 30
12667: PUSH
12668: LD_INT 33
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 72
12684: IFFALSE 12772
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12686: LD_ADDR_VAR 0 8
12690: PUSH
12691: LD_VAR 0 18
12695: PPUSH
12696: LD_INT 2
12698: PUSH
12699: LD_INT 30
12701: PUSH
12702: LD_INT 32
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 30
12711: PUSH
12712: LD_INT 33
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 72
12728: PUSH
12729: FOR_IN
12730: IFFALSE 12770
// begin if not GetBWeapon ( i ) then
12732: LD_VAR 0 8
12736: PPUSH
12737: CALL_OW 269
12741: NOT
12742: IFFALSE 12768
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12744: LD_VAR 0 8
12748: PPUSH
12749: LD_VAR 0 8
12753: PPUSH
12754: LD_VAR 0 2
12758: PPUSH
12759: CALL 14018 0 2
12763: PPUSH
12764: CALL_OW 431
// end ;
12768: GO 12729
12770: POP
12771: POP
// end ; for i = 1 to personel do
12772: LD_ADDR_VAR 0 8
12776: PUSH
12777: DOUBLE
12778: LD_INT 1
12780: DEC
12781: ST_TO_ADDR
12782: LD_VAR 0 6
12786: PUSH
12787: FOR_TO
12788: IFFALSE 13852
// begin if i > 4 then
12790: LD_VAR 0 8
12794: PUSH
12795: LD_INT 4
12797: GREATER
12798: IFFALSE 12802
// break ;
12800: GO 13852
// case i of 1 :
12802: LD_VAR 0 8
12806: PUSH
12807: LD_INT 1
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12815
12813: GO 12895
12815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12816: LD_ADDR_VAR 0 12
12820: PUSH
12821: LD_VAR 0 18
12825: PPUSH
12826: LD_INT 22
12828: PUSH
12829: LD_VAR 0 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 58
12840: PUSH
12841: EMPTY
12842: LIST
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: LD_INT 30
12849: PUSH
12850: LD_INT 32
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 30
12859: PUSH
12860: LD_INT 4
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 30
12869: PUSH
12870: LD_INT 5
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 72
12892: ST_TO_ADDR
12893: GO 13117
12895: LD_INT 2
12897: DOUBLE
12898: EQUAL
12899: IFTRUE 12903
12901: GO 12965
12903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12904: LD_ADDR_VAR 0 12
12908: PUSH
12909: LD_VAR 0 18
12913: PPUSH
12914: LD_INT 22
12916: PUSH
12917: LD_VAR 0 16
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: LD_INT 30
12931: PUSH
12932: LD_INT 0
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 30
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 72
12962: ST_TO_ADDR
12963: GO 13117
12965: LD_INT 3
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 13035
12973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12974: LD_ADDR_VAR 0 12
12978: PUSH
12979: LD_VAR 0 18
12983: PPUSH
12984: LD_INT 22
12986: PUSH
12987: LD_VAR 0 16
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 2
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 30
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PPUSH
13028: CALL_OW 72
13032: ST_TO_ADDR
13033: GO 13117
13035: LD_INT 4
13037: DOUBLE
13038: EQUAL
13039: IFTRUE 13043
13041: GO 13116
13043: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13044: LD_ADDR_VAR 0 12
13048: PUSH
13049: LD_VAR 0 18
13053: PPUSH
13054: LD_INT 22
13056: PUSH
13057: LD_VAR 0 16
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 2
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 6
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 30
13081: PUSH
13082: LD_INT 7
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 8
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: ST_TO_ADDR
13114: GO 13117
13116: POP
// if i = 1 then
13117: LD_VAR 0 8
13121: PUSH
13122: LD_INT 1
13124: EQUAL
13125: IFFALSE 13236
// begin tmp := [ ] ;
13127: LD_ADDR_VAR 0 19
13131: PUSH
13132: EMPTY
13133: ST_TO_ADDR
// for j in f do
13134: LD_ADDR_VAR 0 9
13138: PUSH
13139: LD_VAR 0 12
13143: PUSH
13144: FOR_IN
13145: IFFALSE 13218
// if GetBType ( j ) = b_bunker then
13147: LD_VAR 0 9
13151: PPUSH
13152: CALL_OW 266
13156: PUSH
13157: LD_INT 32
13159: EQUAL
13160: IFFALSE 13187
// tmp := Insert ( tmp , 1 , j ) else
13162: LD_ADDR_VAR 0 19
13166: PUSH
13167: LD_VAR 0 19
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: LD_VAR 0 9
13179: PPUSH
13180: CALL_OW 2
13184: ST_TO_ADDR
13185: GO 13216
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13187: LD_ADDR_VAR 0 19
13191: PUSH
13192: LD_VAR 0 19
13196: PPUSH
13197: LD_VAR 0 19
13201: PUSH
13202: LD_INT 1
13204: PLUS
13205: PPUSH
13206: LD_VAR 0 9
13210: PPUSH
13211: CALL_OW 2
13215: ST_TO_ADDR
13216: GO 13144
13218: POP
13219: POP
// if tmp then
13220: LD_VAR 0 19
13224: IFFALSE 13236
// f := tmp ;
13226: LD_ADDR_VAR 0 12
13230: PUSH
13231: LD_VAR 0 19
13235: ST_TO_ADDR
// end ; x := personel [ i ] ;
13236: LD_ADDR_VAR 0 13
13240: PUSH
13241: LD_VAR 0 6
13245: PUSH
13246: LD_VAR 0 8
13250: ARRAY
13251: ST_TO_ADDR
// if x = - 1 then
13252: LD_VAR 0 13
13256: PUSH
13257: LD_INT 1
13259: NEG
13260: EQUAL
13261: IFFALSE 13470
// begin for j in f do
13263: LD_ADDR_VAR 0 9
13267: PUSH
13268: LD_VAR 0 12
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13466
// repeat InitHc ;
13276: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13280: LD_VAR 0 9
13284: PPUSH
13285: CALL_OW 266
13289: PUSH
13290: LD_INT 5
13292: EQUAL
13293: IFFALSE 13363
// begin if UnitsInside ( j ) < 3 then
13295: LD_VAR 0 9
13299: PPUSH
13300: CALL_OW 313
13304: PUSH
13305: LD_INT 3
13307: LESS
13308: IFFALSE 13344
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13310: LD_INT 0
13312: PPUSH
13313: LD_INT 5
13315: PUSH
13316: LD_INT 8
13318: PUSH
13319: LD_INT 9
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: LD_VAR 0 17
13331: ARRAY
13332: PPUSH
13333: LD_VAR 0 4
13337: PPUSH
13338: CALL_OW 380
13342: GO 13361
// PrepareHuman ( false , i , skill ) ;
13344: LD_INT 0
13346: PPUSH
13347: LD_VAR 0 8
13351: PPUSH
13352: LD_VAR 0 4
13356: PPUSH
13357: CALL_OW 380
// end else
13361: GO 13380
// PrepareHuman ( false , i , skill ) ;
13363: LD_INT 0
13365: PPUSH
13366: LD_VAR 0 8
13370: PPUSH
13371: LD_VAR 0 4
13375: PPUSH
13376: CALL_OW 380
// un := CreateHuman ;
13380: LD_ADDR_VAR 0 14
13384: PUSH
13385: CALL_OW 44
13389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13390: LD_ADDR_VAR 0 7
13394: PUSH
13395: LD_VAR 0 7
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: LD_VAR 0 14
13407: PPUSH
13408: CALL_OW 2
13412: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13413: LD_VAR 0 14
13417: PPUSH
13418: LD_VAR 0 9
13422: PPUSH
13423: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13427: LD_VAR 0 9
13431: PPUSH
13432: CALL_OW 313
13436: PUSH
13437: LD_INT 6
13439: EQUAL
13440: PUSH
13441: LD_VAR 0 9
13445: PPUSH
13446: CALL_OW 266
13450: PUSH
13451: LD_INT 32
13453: PUSH
13454: LD_INT 31
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: IN
13461: OR
13462: IFFALSE 13276
13464: GO 13273
13466: POP
13467: POP
// end else
13468: GO 13850
// for j = 1 to x do
13470: LD_ADDR_VAR 0 9
13474: PUSH
13475: DOUBLE
13476: LD_INT 1
13478: DEC
13479: ST_TO_ADDR
13480: LD_VAR 0 13
13484: PUSH
13485: FOR_TO
13486: IFFALSE 13848
// begin InitHc ;
13488: CALL_OW 19
// if not f then
13492: LD_VAR 0 12
13496: NOT
13497: IFFALSE 13586
// begin PrepareHuman ( false , i , skill ) ;
13499: LD_INT 0
13501: PPUSH
13502: LD_VAR 0 8
13506: PPUSH
13507: LD_VAR 0 4
13511: PPUSH
13512: CALL_OW 380
// un := CreateHuman ;
13516: LD_ADDR_VAR 0 14
13520: PUSH
13521: CALL_OW 44
13525: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13526: LD_ADDR_VAR 0 7
13530: PUSH
13531: LD_VAR 0 7
13535: PPUSH
13536: LD_INT 1
13538: PPUSH
13539: LD_VAR 0 14
13543: PPUSH
13544: CALL_OW 2
13548: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13549: LD_VAR 0 14
13553: PPUSH
13554: LD_VAR 0 1
13558: PPUSH
13559: CALL_OW 250
13563: PPUSH
13564: LD_VAR 0 1
13568: PPUSH
13569: CALL_OW 251
13573: PPUSH
13574: LD_INT 10
13576: PPUSH
13577: LD_INT 0
13579: PPUSH
13580: CALL_OW 50
// continue ;
13584: GO 13485
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13586: LD_VAR 0 12
13590: PUSH
13591: LD_INT 1
13593: ARRAY
13594: PPUSH
13595: CALL_OW 313
13599: PUSH
13600: LD_VAR 0 12
13604: PUSH
13605: LD_INT 1
13607: ARRAY
13608: PPUSH
13609: CALL_OW 266
13613: PUSH
13614: LD_INT 32
13616: PUSH
13617: LD_INT 31
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: IN
13624: AND
13625: PUSH
13626: LD_VAR 0 12
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 313
13639: PUSH
13640: LD_INT 6
13642: EQUAL
13643: OR
13644: IFFALSE 13664
// f := Delete ( f , 1 ) ;
13646: LD_ADDR_VAR 0 12
13650: PUSH
13651: LD_VAR 0 12
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: CALL_OW 3
13663: ST_TO_ADDR
// if not f then
13664: LD_VAR 0 12
13668: NOT
13669: IFFALSE 13687
// begin x := x + 2 ;
13671: LD_ADDR_VAR 0 13
13675: PUSH
13676: LD_VAR 0 13
13680: PUSH
13681: LD_INT 2
13683: PLUS
13684: ST_TO_ADDR
// continue ;
13685: GO 13485
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13687: LD_VAR 0 12
13691: PUSH
13692: LD_INT 1
13694: ARRAY
13695: PPUSH
13696: CALL_OW 266
13700: PUSH
13701: LD_INT 5
13703: EQUAL
13704: IFFALSE 13778
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13706: LD_VAR 0 12
13710: PUSH
13711: LD_INT 1
13713: ARRAY
13714: PPUSH
13715: CALL_OW 313
13719: PUSH
13720: LD_INT 3
13722: LESS
13723: IFFALSE 13759
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13725: LD_INT 0
13727: PPUSH
13728: LD_INT 5
13730: PUSH
13731: LD_INT 8
13733: PUSH
13734: LD_INT 9
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_VAR 0 17
13746: ARRAY
13747: PPUSH
13748: LD_VAR 0 4
13752: PPUSH
13753: CALL_OW 380
13757: GO 13776
// PrepareHuman ( false , i , skill ) ;
13759: LD_INT 0
13761: PPUSH
13762: LD_VAR 0 8
13766: PPUSH
13767: LD_VAR 0 4
13771: PPUSH
13772: CALL_OW 380
// end else
13776: GO 13795
// PrepareHuman ( false , i , skill ) ;
13778: LD_INT 0
13780: PPUSH
13781: LD_VAR 0 8
13785: PPUSH
13786: LD_VAR 0 4
13790: PPUSH
13791: CALL_OW 380
// un := CreateHuman ;
13795: LD_ADDR_VAR 0 14
13799: PUSH
13800: CALL_OW 44
13804: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13805: LD_ADDR_VAR 0 7
13809: PUSH
13810: LD_VAR 0 7
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: LD_VAR 0 14
13822: PPUSH
13823: CALL_OW 2
13827: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 12
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PPUSH
13842: CALL_OW 52
// end ;
13846: GO 13485
13848: POP
13849: POP
// end ;
13850: GO 12787
13852: POP
13853: POP
// result := result ^ buildings ;
13854: LD_ADDR_VAR 0 7
13858: PUSH
13859: LD_VAR 0 7
13863: PUSH
13864: LD_VAR 0 18
13868: ADD
13869: ST_TO_ADDR
// end else
13870: GO 14013
// begin for i = 1 to personel do
13872: LD_ADDR_VAR 0 8
13876: PUSH
13877: DOUBLE
13878: LD_INT 1
13880: DEC
13881: ST_TO_ADDR
13882: LD_VAR 0 6
13886: PUSH
13887: FOR_TO
13888: IFFALSE 14011
// begin if i > 4 then
13890: LD_VAR 0 8
13894: PUSH
13895: LD_INT 4
13897: GREATER
13898: IFFALSE 13902
// break ;
13900: GO 14011
// x := personel [ i ] ;
13902: LD_ADDR_VAR 0 13
13906: PUSH
13907: LD_VAR 0 6
13911: PUSH
13912: LD_VAR 0 8
13916: ARRAY
13917: ST_TO_ADDR
// if x = - 1 then
13918: LD_VAR 0 13
13922: PUSH
13923: LD_INT 1
13925: NEG
13926: EQUAL
13927: IFFALSE 13931
// continue ;
13929: GO 13887
// PrepareHuman ( false , i , skill ) ;
13931: LD_INT 0
13933: PPUSH
13934: LD_VAR 0 8
13938: PPUSH
13939: LD_VAR 0 4
13943: PPUSH
13944: CALL_OW 380
// un := CreateHuman ;
13948: LD_ADDR_VAR 0 14
13952: PUSH
13953: CALL_OW 44
13957: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13958: LD_VAR 0 14
13962: PPUSH
13963: LD_VAR 0 1
13967: PPUSH
13968: CALL_OW 250
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 251
13982: PPUSH
13983: LD_INT 10
13985: PPUSH
13986: LD_INT 0
13988: PPUSH
13989: CALL_OW 50
// result := result ^ un ;
13993: LD_ADDR_VAR 0 7
13997: PUSH
13998: LD_VAR 0 7
14002: PUSH
14003: LD_VAR 0 14
14007: ADD
14008: ST_TO_ADDR
// end ;
14009: GO 13887
14011: POP
14012: POP
// end ; end ;
14013: LD_VAR 0 7
14017: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14018: LD_INT 0
14020: PPUSH
14021: PPUSH
14022: PPUSH
14023: PPUSH
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
// result := false ;
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: LD_INT 0
14043: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14044: LD_VAR 0 1
14048: NOT
14049: PUSH
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 266
14059: PUSH
14060: LD_INT 32
14062: PUSH
14063: LD_INT 33
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: IN
14070: NOT
14071: OR
14072: IFFALSE 14076
// exit ;
14074: GO 15185
// nat := GetNation ( tower ) ;
14076: LD_ADDR_VAR 0 12
14080: PUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 248
14090: ST_TO_ADDR
// side := GetSide ( tower ) ;
14091: LD_ADDR_VAR 0 16
14095: PUSH
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 255
14105: ST_TO_ADDR
// x := GetX ( tower ) ;
14106: LD_ADDR_VAR 0 10
14110: PUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 250
14120: ST_TO_ADDR
// y := GetY ( tower ) ;
14121: LD_ADDR_VAR 0 11
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 251
14135: ST_TO_ADDR
// if not x or not y then
14136: LD_VAR 0 10
14140: NOT
14141: PUSH
14142: LD_VAR 0 11
14146: NOT
14147: OR
14148: IFFALSE 14152
// exit ;
14150: GO 15185
// weapon := 0 ;
14152: LD_ADDR_VAR 0 18
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// fac_list := [ ] ;
14160: LD_ADDR_VAR 0 17
14164: PUSH
14165: EMPTY
14166: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14167: LD_ADDR_VAR 0 6
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 274
14181: PPUSH
14182: LD_VAR 0 2
14186: PPUSH
14187: LD_INT 0
14189: PPUSH
14190: CALL 11756 0 3
14194: PPUSH
14195: LD_INT 30
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 72
14209: ST_TO_ADDR
// if not factories then
14210: LD_VAR 0 6
14214: NOT
14215: IFFALSE 14219
// exit ;
14217: GO 15185
// for i in factories do
14219: LD_ADDR_VAR 0 8
14223: PUSH
14224: LD_VAR 0 6
14228: PUSH
14229: FOR_IN
14230: IFFALSE 14255
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14232: LD_ADDR_VAR 0 17
14236: PUSH
14237: LD_VAR 0 17
14241: PUSH
14242: LD_VAR 0 8
14246: PPUSH
14247: CALL_OW 478
14251: UNION
14252: ST_TO_ADDR
14253: GO 14229
14255: POP
14256: POP
// if not fac_list then
14257: LD_VAR 0 17
14261: NOT
14262: IFFALSE 14266
// exit ;
14264: GO 15185
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14266: LD_ADDR_VAR 0 5
14270: PUSH
14271: LD_INT 4
14273: PUSH
14274: LD_INT 5
14276: PUSH
14277: LD_INT 9
14279: PUSH
14280: LD_INT 10
14282: PUSH
14283: LD_INT 6
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: LD_INT 11
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 27
14303: PUSH
14304: LD_INT 28
14306: PUSH
14307: LD_INT 26
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 43
14321: PUSH
14322: LD_INT 44
14324: PUSH
14325: LD_INT 46
14327: PUSH
14328: LD_INT 45
14330: PUSH
14331: LD_INT 47
14333: PUSH
14334: LD_INT 49
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: LD_VAR 0 12
14354: ARRAY
14355: ST_TO_ADDR
// list := list isect fac_list ;
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: LD_VAR 0 5
14365: PUSH
14366: LD_VAR 0 17
14370: ISECT
14371: ST_TO_ADDR
// if not list then
14372: LD_VAR 0 5
14376: NOT
14377: IFFALSE 14381
// exit ;
14379: GO 15185
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14381: LD_VAR 0 12
14385: PUSH
14386: LD_INT 3
14388: EQUAL
14389: PUSH
14390: LD_INT 49
14392: PUSH
14393: LD_VAR 0 5
14397: IN
14398: AND
14399: PUSH
14400: LD_INT 31
14402: PPUSH
14403: LD_VAR 0 16
14407: PPUSH
14408: CALL_OW 321
14412: PUSH
14413: LD_INT 2
14415: EQUAL
14416: AND
14417: IFFALSE 14477
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14419: LD_INT 22
14421: PUSH
14422: LD_VAR 0 16
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 35
14433: PUSH
14434: LD_INT 49
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 91
14443: PUSH
14444: LD_VAR 0 1
14448: PUSH
14449: LD_INT 10
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: PPUSH
14462: CALL_OW 69
14466: NOT
14467: IFFALSE 14477
// weapon := ru_time_lapser ;
14469: LD_ADDR_VAR 0 18
14473: PUSH
14474: LD_INT 49
14476: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14477: LD_VAR 0 12
14481: PUSH
14482: LD_INT 1
14484: PUSH
14485: LD_INT 2
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: IN
14492: PUSH
14493: LD_INT 11
14495: PUSH
14496: LD_VAR 0 5
14500: IN
14501: PUSH
14502: LD_INT 30
14504: PUSH
14505: LD_VAR 0 5
14509: IN
14510: OR
14511: AND
14512: PUSH
14513: LD_INT 6
14515: PPUSH
14516: LD_VAR 0 16
14520: PPUSH
14521: CALL_OW 321
14525: PUSH
14526: LD_INT 2
14528: EQUAL
14529: AND
14530: IFFALSE 14695
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14532: LD_INT 22
14534: PUSH
14535: LD_VAR 0 16
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: LD_INT 35
14549: PUSH
14550: LD_INT 11
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 35
14559: PUSH
14560: LD_INT 30
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 91
14574: PUSH
14575: LD_VAR 0 1
14579: PUSH
14580: LD_INT 18
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PPUSH
14593: CALL_OW 69
14597: NOT
14598: PUSH
14599: LD_INT 22
14601: PUSH
14602: LD_VAR 0 16
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 32
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 30
14626: PUSH
14627: LD_INT 33
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 91
14641: PUSH
14642: LD_VAR 0 1
14646: PUSH
14647: LD_INT 12
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: PPUSH
14663: CALL_OW 69
14667: PUSH
14668: LD_INT 2
14670: GREATER
14671: AND
14672: IFFALSE 14695
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14674: LD_ADDR_VAR 0 18
14678: PUSH
14679: LD_INT 11
14681: PUSH
14682: LD_INT 30
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_VAR 0 12
14693: ARRAY
14694: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14695: LD_VAR 0 18
14699: NOT
14700: PUSH
14701: LD_INT 40
14703: PPUSH
14704: LD_VAR 0 16
14708: PPUSH
14709: CALL_OW 321
14713: PUSH
14714: LD_INT 2
14716: EQUAL
14717: AND
14718: PUSH
14719: LD_INT 7
14721: PUSH
14722: LD_VAR 0 5
14726: IN
14727: PUSH
14728: LD_INT 28
14730: PUSH
14731: LD_VAR 0 5
14735: IN
14736: OR
14737: PUSH
14738: LD_INT 45
14740: PUSH
14741: LD_VAR 0 5
14745: IN
14746: OR
14747: AND
14748: IFFALSE 15002
// begin hex := GetHexInfo ( x , y ) ;
14750: LD_ADDR_VAR 0 4
14754: PUSH
14755: LD_VAR 0 10
14759: PPUSH
14760: LD_VAR 0 11
14764: PPUSH
14765: CALL_OW 546
14769: ST_TO_ADDR
// if hex [ 1 ] then
14770: LD_VAR 0 4
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: IFFALSE 14782
// exit ;
14780: GO 15185
// height := hex [ 2 ] ;
14782: LD_ADDR_VAR 0 15
14786: PUSH
14787: LD_VAR 0 4
14791: PUSH
14792: LD_INT 2
14794: ARRAY
14795: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14796: LD_ADDR_VAR 0 14
14800: PUSH
14801: LD_INT 0
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: LD_INT 5
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: ST_TO_ADDR
// for i in tmp do
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 14
14828: PUSH
14829: FOR_IN
14830: IFFALSE 15000
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14832: LD_ADDR_VAR 0 9
14836: PUSH
14837: LD_VAR 0 10
14841: PPUSH
14842: LD_VAR 0 8
14846: PPUSH
14847: LD_INT 5
14849: PPUSH
14850: CALL_OW 272
14854: PUSH
14855: LD_VAR 0 11
14859: PPUSH
14860: LD_VAR 0 8
14864: PPUSH
14865: LD_INT 5
14867: PPUSH
14868: CALL_OW 273
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14877: LD_VAR 0 9
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: LD_VAR 0 9
14890: PUSH
14891: LD_INT 2
14893: ARRAY
14894: PPUSH
14895: CALL_OW 488
14899: IFFALSE 14998
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14901: LD_ADDR_VAR 0 4
14905: PUSH
14906: LD_VAR 0 9
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 9
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PPUSH
14924: CALL_OW 546
14928: ST_TO_ADDR
// if hex [ 1 ] then
14929: LD_VAR 0 4
14933: PUSH
14934: LD_INT 1
14936: ARRAY
14937: IFFALSE 14941
// continue ;
14939: GO 14829
// h := hex [ 2 ] ;
14941: LD_ADDR_VAR 0 13
14945: PUSH
14946: LD_VAR 0 4
14950: PUSH
14951: LD_INT 2
14953: ARRAY
14954: ST_TO_ADDR
// if h + 7 < height then
14955: LD_VAR 0 13
14959: PUSH
14960: LD_INT 7
14962: PLUS
14963: PUSH
14964: LD_VAR 0 15
14968: LESS
14969: IFFALSE 14998
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14971: LD_ADDR_VAR 0 18
14975: PUSH
14976: LD_INT 7
14978: PUSH
14979: LD_INT 28
14981: PUSH
14982: LD_INT 45
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_VAR 0 12
14994: ARRAY
14995: ST_TO_ADDR
// break ;
14996: GO 15000
// end ; end ; end ;
14998: GO 14829
15000: POP
15001: POP
// end ; if not weapon then
15002: LD_VAR 0 18
15006: NOT
15007: IFFALSE 15067
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15009: LD_ADDR_VAR 0 5
15013: PUSH
15014: LD_VAR 0 5
15018: PUSH
15019: LD_INT 11
15021: PUSH
15022: LD_INT 30
15024: PUSH
15025: LD_INT 49
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: DIFF
15033: ST_TO_ADDR
// if not list then
15034: LD_VAR 0 5
15038: NOT
15039: IFFALSE 15043
// exit ;
15041: GO 15185
// weapon := list [ rand ( 1 , list ) ] ;
15043: LD_ADDR_VAR 0 18
15047: PUSH
15048: LD_VAR 0 5
15052: PUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_VAR 0 5
15060: PPUSH
15061: CALL_OW 12
15065: ARRAY
15066: ST_TO_ADDR
// end ; if weapon then
15067: LD_VAR 0 18
15071: IFFALSE 15185
// begin tmp := CostOfWeapon ( weapon ) ;
15073: LD_ADDR_VAR 0 14
15077: PUSH
15078: LD_VAR 0 18
15082: PPUSH
15083: CALL_OW 451
15087: ST_TO_ADDR
// j := GetBase ( tower ) ;
15088: LD_ADDR_VAR 0 9
15092: PUSH
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 274
15102: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15103: LD_VAR 0 9
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 275
15115: PUSH
15116: LD_VAR 0 14
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: GREATEREQUAL
15125: PUSH
15126: LD_VAR 0 9
15130: PPUSH
15131: LD_INT 2
15133: PPUSH
15134: CALL_OW 275
15138: PUSH
15139: LD_VAR 0 14
15143: PUSH
15144: LD_INT 2
15146: ARRAY
15147: GREATEREQUAL
15148: AND
15149: PUSH
15150: LD_VAR 0 9
15154: PPUSH
15155: LD_INT 3
15157: PPUSH
15158: CALL_OW 275
15162: PUSH
15163: LD_VAR 0 14
15167: PUSH
15168: LD_INT 3
15170: ARRAY
15171: GREATEREQUAL
15172: AND
15173: IFFALSE 15185
// result := weapon ;
15175: LD_ADDR_VAR 0 3
15179: PUSH
15180: LD_VAR 0 18
15184: ST_TO_ADDR
// end ; end ;
15185: LD_VAR 0 3
15189: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
// result := true ;
15194: LD_ADDR_VAR 0 3
15198: PUSH
15199: LD_INT 1
15201: ST_TO_ADDR
// if array1 = array2 then
15202: LD_VAR 0 1
15206: PUSH
15207: LD_VAR 0 2
15211: EQUAL
15212: IFFALSE 15272
// begin for i = 1 to array1 do
15214: LD_ADDR_VAR 0 4
15218: PUSH
15219: DOUBLE
15220: LD_INT 1
15222: DEC
15223: ST_TO_ADDR
15224: LD_VAR 0 1
15228: PUSH
15229: FOR_TO
15230: IFFALSE 15268
// if array1 [ i ] <> array2 [ i ] then
15232: LD_VAR 0 1
15236: PUSH
15237: LD_VAR 0 4
15241: ARRAY
15242: PUSH
15243: LD_VAR 0 2
15247: PUSH
15248: LD_VAR 0 4
15252: ARRAY
15253: NONEQUAL
15254: IFFALSE 15266
// begin result := false ;
15256: LD_ADDR_VAR 0 3
15260: PUSH
15261: LD_INT 0
15263: ST_TO_ADDR
// break ;
15264: GO 15268
// end ;
15266: GO 15229
15268: POP
15269: POP
// end else
15270: GO 15280
// result := false ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: LD_INT 0
15279: ST_TO_ADDR
// end ;
15280: LD_VAR 0 3
15284: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15285: LD_INT 0
15287: PPUSH
15288: PPUSH
// if not array1 or not array2 then
15289: LD_VAR 0 1
15293: NOT
15294: PUSH
15295: LD_VAR 0 2
15299: NOT
15300: OR
15301: IFFALSE 15305
// exit ;
15303: GO 15369
// result := true ;
15305: LD_ADDR_VAR 0 3
15309: PUSH
15310: LD_INT 1
15312: ST_TO_ADDR
// for i = 1 to array1 do
15313: LD_ADDR_VAR 0 4
15317: PUSH
15318: DOUBLE
15319: LD_INT 1
15321: DEC
15322: ST_TO_ADDR
15323: LD_VAR 0 1
15327: PUSH
15328: FOR_TO
15329: IFFALSE 15367
// if array1 [ i ] <> array2 [ i ] then
15331: LD_VAR 0 1
15335: PUSH
15336: LD_VAR 0 4
15340: ARRAY
15341: PUSH
15342: LD_VAR 0 2
15346: PUSH
15347: LD_VAR 0 4
15351: ARRAY
15352: NONEQUAL
15353: IFFALSE 15365
// begin result := false ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// break ;
15363: GO 15367
// end ;
15365: GO 15328
15367: POP
15368: POP
// end ;
15369: LD_VAR 0 3
15373: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15374: LD_INT 0
15376: PPUSH
15377: PPUSH
15378: PPUSH
// pom := GetBase ( fac ) ;
15379: LD_ADDR_VAR 0 5
15383: PUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 274
15393: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15394: LD_ADDR_VAR 0 4
15398: PUSH
15399: LD_VAR 0 2
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PPUSH
15408: LD_VAR 0 2
15412: PUSH
15413: LD_INT 2
15415: ARRAY
15416: PPUSH
15417: LD_VAR 0 2
15421: PUSH
15422: LD_INT 3
15424: ARRAY
15425: PPUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_INT 4
15433: ARRAY
15434: PPUSH
15435: CALL_OW 449
15439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15440: LD_ADDR_VAR 0 3
15444: PUSH
15445: LD_VAR 0 5
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: CALL_OW 275
15457: PUSH
15458: LD_VAR 0 4
15462: PUSH
15463: LD_INT 1
15465: ARRAY
15466: GREATEREQUAL
15467: PUSH
15468: LD_VAR 0 5
15472: PPUSH
15473: LD_INT 2
15475: PPUSH
15476: CALL_OW 275
15480: PUSH
15481: LD_VAR 0 4
15485: PUSH
15486: LD_INT 2
15488: ARRAY
15489: GREATEREQUAL
15490: AND
15491: PUSH
15492: LD_VAR 0 5
15496: PPUSH
15497: LD_INT 3
15499: PPUSH
15500: CALL_OW 275
15504: PUSH
15505: LD_VAR 0 4
15509: PUSH
15510: LD_INT 3
15512: ARRAY
15513: GREATEREQUAL
15514: AND
15515: ST_TO_ADDR
// end ;
15516: LD_VAR 0 3
15520: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15521: LD_INT 0
15523: PPUSH
15524: PPUSH
15525: PPUSH
15526: PPUSH
// pom := GetBase ( building ) ;
15527: LD_ADDR_VAR 0 3
15531: PUSH
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 274
15541: ST_TO_ADDR
// if not pom then
15542: LD_VAR 0 3
15546: NOT
15547: IFFALSE 15551
// exit ;
15549: GO 15721
// btype := GetBType ( building ) ;
15551: LD_ADDR_VAR 0 5
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 266
15565: ST_TO_ADDR
// if btype = b_armoury then
15566: LD_VAR 0 5
15570: PUSH
15571: LD_INT 4
15573: EQUAL
15574: IFFALSE 15584
// btype := b_barracks ;
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 5
15583: ST_TO_ADDR
// if btype = b_depot then
15584: LD_VAR 0 5
15588: PUSH
15589: LD_INT 0
15591: EQUAL
15592: IFFALSE 15602
// btype := b_warehouse ;
15594: LD_ADDR_VAR 0 5
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if btype = b_workshop then
15602: LD_VAR 0 5
15606: PUSH
15607: LD_INT 2
15609: EQUAL
15610: IFFALSE 15620
// btype := b_factory ;
15612: LD_ADDR_VAR 0 5
15616: PUSH
15617: LD_INT 3
15619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15620: LD_ADDR_VAR 0 4
15624: PUSH
15625: LD_VAR 0 5
15629: PPUSH
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 248
15639: PPUSH
15640: CALL_OW 450
15644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15645: LD_ADDR_VAR 0 2
15649: PUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: LD_INT 1
15657: PPUSH
15658: CALL_OW 275
15662: PUSH
15663: LD_VAR 0 4
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: GREATEREQUAL
15672: PUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 2
15680: PPUSH
15681: CALL_OW 275
15685: PUSH
15686: LD_VAR 0 4
15690: PUSH
15691: LD_INT 2
15693: ARRAY
15694: GREATEREQUAL
15695: AND
15696: PUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: LD_INT 3
15704: PPUSH
15705: CALL_OW 275
15709: PUSH
15710: LD_VAR 0 4
15714: PUSH
15715: LD_INT 3
15717: ARRAY
15718: GREATEREQUAL
15719: AND
15720: ST_TO_ADDR
// end ;
15721: LD_VAR 0 2
15725: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15726: LD_INT 0
15728: PPUSH
15729: PPUSH
15730: PPUSH
// pom := GetBase ( building ) ;
15731: LD_ADDR_VAR 0 4
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 274
15745: ST_TO_ADDR
// if not pom then
15746: LD_VAR 0 4
15750: NOT
15751: IFFALSE 15755
// exit ;
15753: GO 15856
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15755: LD_ADDR_VAR 0 5
15759: PUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: LD_VAR 0 1
15769: PPUSH
15770: CALL_OW 248
15774: PPUSH
15775: CALL_OW 450
15779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15780: LD_ADDR_VAR 0 3
15784: PUSH
15785: LD_VAR 0 4
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 275
15797: PUSH
15798: LD_VAR 0 5
15802: PUSH
15803: LD_INT 1
15805: ARRAY
15806: GREATEREQUAL
15807: PUSH
15808: LD_VAR 0 4
15812: PPUSH
15813: LD_INT 2
15815: PPUSH
15816: CALL_OW 275
15820: PUSH
15821: LD_VAR 0 5
15825: PUSH
15826: LD_INT 2
15828: ARRAY
15829: GREATEREQUAL
15830: AND
15831: PUSH
15832: LD_VAR 0 4
15836: PPUSH
15837: LD_INT 3
15839: PPUSH
15840: CALL_OW 275
15844: PUSH
15845: LD_VAR 0 5
15849: PUSH
15850: LD_INT 3
15852: ARRAY
15853: GREATEREQUAL
15854: AND
15855: ST_TO_ADDR
// end ;
15856: LD_VAR 0 3
15860: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15861: LD_INT 0
15863: PPUSH
15864: PPUSH
15865: PPUSH
15866: PPUSH
15867: PPUSH
15868: PPUSH
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// result := false ;
15874: LD_ADDR_VAR 0 8
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15882: LD_VAR 0 5
15886: NOT
15887: PUSH
15888: LD_VAR 0 1
15892: NOT
15893: OR
15894: PUSH
15895: LD_VAR 0 2
15899: NOT
15900: OR
15901: PUSH
15902: LD_VAR 0 3
15906: NOT
15907: OR
15908: IFFALSE 15912
// exit ;
15910: GO 16726
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15912: LD_ADDR_VAR 0 14
15916: PUSH
15917: LD_VAR 0 1
15921: PPUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_VAR 0 4
15936: PPUSH
15937: LD_VAR 0 5
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PPUSH
15946: CALL_OW 248
15950: PPUSH
15951: LD_INT 0
15953: PPUSH
15954: CALL 17979 0 6
15958: ST_TO_ADDR
// if not hexes then
15959: LD_VAR 0 14
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16726
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15968: LD_ADDR_VAR 0 17
15972: PUSH
15973: LD_VAR 0 5
15977: PPUSH
15978: LD_INT 22
15980: PUSH
15981: LD_VAR 0 13
15985: PPUSH
15986: CALL_OW 255
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: LD_INT 30
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 30
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 72
16031: ST_TO_ADDR
// for i = 1 to hexes do
16032: LD_ADDR_VAR 0 9
16036: PUSH
16037: DOUBLE
16038: LD_INT 1
16040: DEC
16041: ST_TO_ADDR
16042: LD_VAR 0 14
16046: PUSH
16047: FOR_TO
16048: IFFALSE 16724
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16050: LD_ADDR_VAR 0 13
16054: PUSH
16055: LD_VAR 0 14
16059: PUSH
16060: LD_VAR 0 9
16064: ARRAY
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: PPUSH
16070: LD_VAR 0 14
16074: PUSH
16075: LD_VAR 0 9
16079: ARRAY
16080: PUSH
16081: LD_INT 2
16083: ARRAY
16084: PPUSH
16085: CALL_OW 428
16089: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16090: LD_VAR 0 14
16094: PUSH
16095: LD_VAR 0 9
16099: ARRAY
16100: PUSH
16101: LD_INT 1
16103: ARRAY
16104: PPUSH
16105: LD_VAR 0 14
16109: PUSH
16110: LD_VAR 0 9
16114: ARRAY
16115: PUSH
16116: LD_INT 2
16118: ARRAY
16119: PPUSH
16120: CALL_OW 351
16124: PUSH
16125: LD_VAR 0 14
16129: PUSH
16130: LD_VAR 0 9
16134: ARRAY
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PPUSH
16140: LD_VAR 0 14
16144: PUSH
16145: LD_VAR 0 9
16149: ARRAY
16150: PUSH
16151: LD_INT 2
16153: ARRAY
16154: PPUSH
16155: CALL_OW 488
16159: NOT
16160: OR
16161: PUSH
16162: LD_VAR 0 13
16166: PPUSH
16167: CALL_OW 247
16171: PUSH
16172: LD_INT 3
16174: EQUAL
16175: OR
16176: IFFALSE 16182
// exit ;
16178: POP
16179: POP
16180: GO 16726
// if not tmp then
16182: LD_VAR 0 13
16186: NOT
16187: IFFALSE 16191
// continue ;
16189: GO 16047
// result := true ;
16191: LD_ADDR_VAR 0 8
16195: PUSH
16196: LD_INT 1
16198: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16199: LD_VAR 0 6
16203: PUSH
16204: LD_VAR 0 13
16208: PPUSH
16209: CALL_OW 247
16213: PUSH
16214: LD_INT 2
16216: EQUAL
16217: AND
16218: PUSH
16219: LD_VAR 0 13
16223: PPUSH
16224: CALL_OW 263
16228: PUSH
16229: LD_INT 1
16231: EQUAL
16232: AND
16233: IFFALSE 16397
// begin if IsDrivenBy ( tmp ) then
16235: LD_VAR 0 13
16239: PPUSH
16240: CALL_OW 311
16244: IFFALSE 16248
// continue ;
16246: GO 16047
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16248: LD_VAR 0 6
16252: PPUSH
16253: LD_INT 3
16255: PUSH
16256: LD_INT 60
16258: PUSH
16259: EMPTY
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: LD_INT 55
16271: PUSH
16272: EMPTY
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PPUSH
16283: CALL_OW 72
16287: IFFALSE 16395
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16289: LD_ADDR_VAR 0 18
16293: PUSH
16294: LD_VAR 0 6
16298: PPUSH
16299: LD_INT 3
16301: PUSH
16302: LD_INT 60
16304: PUSH
16305: EMPTY
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 3
16314: PUSH
16315: LD_INT 55
16317: PUSH
16318: EMPTY
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 72
16333: PUSH
16334: LD_INT 1
16336: ARRAY
16337: ST_TO_ADDR
// if IsInUnit ( driver ) then
16338: LD_VAR 0 18
16342: PPUSH
16343: CALL_OW 310
16347: IFFALSE 16358
// ComExit ( driver ) ;
16349: LD_VAR 0 18
16353: PPUSH
16354: CALL 41780 0 1
// AddComEnterUnit ( driver , tmp ) ;
16358: LD_VAR 0 18
16362: PPUSH
16363: LD_VAR 0 13
16367: PPUSH
16368: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16372: LD_VAR 0 18
16376: PPUSH
16377: LD_VAR 0 7
16381: PPUSH
16382: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16386: LD_VAR 0 18
16390: PPUSH
16391: CALL_OW 181
// end ; continue ;
16395: GO 16047
// end ; if not cleaners or not tmp in cleaners then
16397: LD_VAR 0 6
16401: NOT
16402: PUSH
16403: LD_VAR 0 13
16407: PUSH
16408: LD_VAR 0 6
16412: IN
16413: NOT
16414: OR
16415: IFFALSE 16722
// begin if dep then
16417: LD_VAR 0 17
16421: IFFALSE 16557
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16423: LD_ADDR_VAR 0 16
16427: PUSH
16428: LD_VAR 0 17
16432: PUSH
16433: LD_INT 1
16435: ARRAY
16436: PPUSH
16437: CALL_OW 250
16441: PPUSH
16442: LD_VAR 0 17
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: PPUSH
16451: CALL_OW 254
16455: PPUSH
16456: LD_INT 5
16458: PPUSH
16459: CALL_OW 272
16463: PUSH
16464: LD_VAR 0 17
16468: PUSH
16469: LD_INT 1
16471: ARRAY
16472: PPUSH
16473: CALL_OW 251
16477: PPUSH
16478: LD_VAR 0 17
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: CALL_OW 254
16491: PPUSH
16492: LD_INT 5
16494: PPUSH
16495: CALL_OW 273
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16504: LD_VAR 0 16
16508: PUSH
16509: LD_INT 1
16511: ARRAY
16512: PPUSH
16513: LD_VAR 0 16
16517: PUSH
16518: LD_INT 2
16520: ARRAY
16521: PPUSH
16522: CALL_OW 488
16526: IFFALSE 16557
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16528: LD_VAR 0 13
16532: PPUSH
16533: LD_VAR 0 16
16537: PUSH
16538: LD_INT 1
16540: ARRAY
16541: PPUSH
16542: LD_VAR 0 16
16546: PUSH
16547: LD_INT 2
16549: ARRAY
16550: PPUSH
16551: CALL_OW 111
// continue ;
16555: GO 16047
// end ; end ; r := GetDir ( tmp ) ;
16557: LD_ADDR_VAR 0 15
16561: PUSH
16562: LD_VAR 0 13
16566: PPUSH
16567: CALL_OW 254
16571: ST_TO_ADDR
// if r = 5 then
16572: LD_VAR 0 15
16576: PUSH
16577: LD_INT 5
16579: EQUAL
16580: IFFALSE 16590
// r := 0 ;
16582: LD_ADDR_VAR 0 15
16586: PUSH
16587: LD_INT 0
16589: ST_TO_ADDR
// for j = r to 5 do
16590: LD_ADDR_VAR 0 10
16594: PUSH
16595: DOUBLE
16596: LD_VAR 0 15
16600: DEC
16601: ST_TO_ADDR
16602: LD_INT 5
16604: PUSH
16605: FOR_TO
16606: IFFALSE 16720
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16608: LD_ADDR_VAR 0 11
16612: PUSH
16613: LD_VAR 0 13
16617: PPUSH
16618: CALL_OW 250
16622: PPUSH
16623: LD_VAR 0 10
16627: PPUSH
16628: LD_INT 2
16630: PPUSH
16631: CALL_OW 272
16635: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16636: LD_ADDR_VAR 0 12
16640: PUSH
16641: LD_VAR 0 13
16645: PPUSH
16646: CALL_OW 251
16650: PPUSH
16651: LD_VAR 0 10
16655: PPUSH
16656: LD_INT 2
16658: PPUSH
16659: CALL_OW 273
16663: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16664: LD_VAR 0 11
16668: PPUSH
16669: LD_VAR 0 12
16673: PPUSH
16674: CALL_OW 488
16678: PUSH
16679: LD_VAR 0 11
16683: PPUSH
16684: LD_VAR 0 12
16688: PPUSH
16689: CALL_OW 428
16693: NOT
16694: AND
16695: IFFALSE 16718
// begin ComMoveXY ( tmp , _x , _y ) ;
16697: LD_VAR 0 13
16701: PPUSH
16702: LD_VAR 0 11
16706: PPUSH
16707: LD_VAR 0 12
16711: PPUSH
16712: CALL_OW 111
// break ;
16716: GO 16720
// end ; end ;
16718: GO 16605
16720: POP
16721: POP
// end ; end ;
16722: GO 16047
16724: POP
16725: POP
// end ;
16726: LD_VAR 0 8
16730: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16731: LD_INT 0
16733: PPUSH
// result := true ;
16734: LD_ADDR_VAR 0 3
16738: PUSH
16739: LD_INT 1
16741: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16742: LD_VAR 0 2
16746: PUSH
16747: LD_INT 24
16749: DOUBLE
16750: EQUAL
16751: IFTRUE 16761
16753: LD_INT 33
16755: DOUBLE
16756: EQUAL
16757: IFTRUE 16761
16759: GO 16786
16761: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16762: LD_ADDR_VAR 0 3
16766: PUSH
16767: LD_INT 32
16769: PPUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 321
16779: PUSH
16780: LD_INT 2
16782: EQUAL
16783: ST_TO_ADDR
16784: GO 17102
16786: LD_INT 20
16788: DOUBLE
16789: EQUAL
16790: IFTRUE 16794
16792: GO 16819
16794: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16795: LD_ADDR_VAR 0 3
16799: PUSH
16800: LD_INT 6
16802: PPUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 321
16812: PUSH
16813: LD_INT 2
16815: EQUAL
16816: ST_TO_ADDR
16817: GO 17102
16819: LD_INT 22
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16833
16825: LD_INT 36
16827: DOUBLE
16828: EQUAL
16829: IFTRUE 16833
16831: GO 16858
16833: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16834: LD_ADDR_VAR 0 3
16838: PUSH
16839: LD_INT 15
16841: PPUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 321
16851: PUSH
16852: LD_INT 2
16854: EQUAL
16855: ST_TO_ADDR
16856: GO 17102
16858: LD_INT 30
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16891
16866: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: LD_INT 20
16874: PPUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 321
16884: PUSH
16885: LD_INT 2
16887: EQUAL
16888: ST_TO_ADDR
16889: GO 17102
16891: LD_INT 28
16893: DOUBLE
16894: EQUAL
16895: IFTRUE 16905
16897: LD_INT 21
16899: DOUBLE
16900: EQUAL
16901: IFTRUE 16905
16903: GO 16930
16905: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16906: LD_ADDR_VAR 0 3
16910: PUSH
16911: LD_INT 21
16913: PPUSH
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 321
16923: PUSH
16924: LD_INT 2
16926: EQUAL
16927: ST_TO_ADDR
16928: GO 17102
16930: LD_INT 16
16932: DOUBLE
16933: EQUAL
16934: IFTRUE 16938
16936: GO 16963
16938: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16939: LD_ADDR_VAR 0 3
16943: PUSH
16944: LD_INT 84
16946: PPUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 321
16956: PUSH
16957: LD_INT 2
16959: EQUAL
16960: ST_TO_ADDR
16961: GO 17102
16963: LD_INT 19
16965: DOUBLE
16966: EQUAL
16967: IFTRUE 16977
16969: LD_INT 23
16971: DOUBLE
16972: EQUAL
16973: IFTRUE 16977
16975: GO 17002
16977: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_INT 83
16985: PPUSH
16986: LD_VAR 0 1
16990: PPUSH
16991: CALL_OW 321
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: ST_TO_ADDR
17000: GO 17102
17002: LD_INT 17
17004: DOUBLE
17005: EQUAL
17006: IFTRUE 17010
17008: GO 17035
17010: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: LD_INT 39
17018: PPUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL_OW 321
17028: PUSH
17029: LD_INT 2
17031: EQUAL
17032: ST_TO_ADDR
17033: GO 17102
17035: LD_INT 18
17037: DOUBLE
17038: EQUAL
17039: IFTRUE 17043
17041: GO 17068
17043: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17044: LD_ADDR_VAR 0 3
17048: PUSH
17049: LD_INT 40
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 321
17061: PUSH
17062: LD_INT 2
17064: EQUAL
17065: ST_TO_ADDR
17066: GO 17102
17068: LD_INT 27
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17101
17076: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17077: LD_ADDR_VAR 0 3
17081: PUSH
17082: LD_INT 35
17084: PPUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 321
17094: PUSH
17095: LD_INT 2
17097: EQUAL
17098: ST_TO_ADDR
17099: GO 17102
17101: POP
// end ;
17102: LD_VAR 0 3
17106: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17107: LD_INT 0
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
// result := false ;
17120: LD_ADDR_VAR 0 6
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// if btype = b_depot then
17128: LD_VAR 0 2
17132: PUSH
17133: LD_INT 0
17135: EQUAL
17136: IFFALSE 17148
// begin result := true ;
17138: LD_ADDR_VAR 0 6
17142: PUSH
17143: LD_INT 1
17145: ST_TO_ADDR
// exit ;
17146: GO 17974
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17148: LD_VAR 0 1
17152: NOT
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 266
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: IN
17174: NOT
17175: OR
17176: PUSH
17177: LD_VAR 0 2
17181: NOT
17182: OR
17183: PUSH
17184: LD_VAR 0 5
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: LD_INT 3
17200: PUSH
17201: LD_INT 4
17203: PUSH
17204: LD_INT 5
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: IN
17215: NOT
17216: OR
17217: PUSH
17218: LD_VAR 0 3
17222: PPUSH
17223: LD_VAR 0 4
17227: PPUSH
17228: CALL_OW 488
17232: NOT
17233: OR
17234: IFFALSE 17238
// exit ;
17236: GO 17974
// side := GetSide ( depot ) ;
17238: LD_ADDR_VAR 0 9
17242: PUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: CALL_OW 255
17252: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17253: LD_VAR 0 9
17257: PPUSH
17258: LD_VAR 0 2
17262: PPUSH
17263: CALL 16731 0 2
17267: NOT
17268: IFFALSE 17272
// exit ;
17270: GO 17974
// pom := GetBase ( depot ) ;
17272: LD_ADDR_VAR 0 10
17276: PUSH
17277: LD_VAR 0 1
17281: PPUSH
17282: CALL_OW 274
17286: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17287: LD_ADDR_VAR 0 11
17291: PUSH
17292: LD_VAR 0 2
17296: PPUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 248
17306: PPUSH
17307: CALL_OW 450
17311: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17312: LD_VAR 0 10
17316: PPUSH
17317: LD_INT 1
17319: PPUSH
17320: CALL_OW 275
17324: PUSH
17325: LD_VAR 0 11
17329: PUSH
17330: LD_INT 1
17332: ARRAY
17333: GREATEREQUAL
17334: PUSH
17335: LD_VAR 0 10
17339: PPUSH
17340: LD_INT 2
17342: PPUSH
17343: CALL_OW 275
17347: PUSH
17348: LD_VAR 0 11
17352: PUSH
17353: LD_INT 2
17355: ARRAY
17356: GREATEREQUAL
17357: AND
17358: PUSH
17359: LD_VAR 0 10
17363: PPUSH
17364: LD_INT 3
17366: PPUSH
17367: CALL_OW 275
17371: PUSH
17372: LD_VAR 0 11
17376: PUSH
17377: LD_INT 3
17379: ARRAY
17380: GREATEREQUAL
17381: AND
17382: NOT
17383: IFFALSE 17387
// exit ;
17385: GO 17974
// if GetBType ( depot ) = b_depot then
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 266
17396: PUSH
17397: LD_INT 0
17399: EQUAL
17400: IFFALSE 17412
// dist := 28 else
17402: LD_ADDR_VAR 0 14
17406: PUSH
17407: LD_INT 28
17409: ST_TO_ADDR
17410: GO 17420
// dist := 36 ;
17412: LD_ADDR_VAR 0 14
17416: PUSH
17417: LD_INT 36
17419: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: LD_VAR 0 4
17434: PPUSH
17435: CALL_OW 297
17439: PUSH
17440: LD_VAR 0 14
17444: GREATER
17445: IFFALSE 17449
// exit ;
17447: GO 17974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17449: LD_ADDR_VAR 0 12
17453: PUSH
17454: LD_VAR 0 2
17458: PPUSH
17459: LD_VAR 0 3
17463: PPUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 5
17473: PPUSH
17474: LD_VAR 0 1
17478: PPUSH
17479: CALL_OW 248
17483: PPUSH
17484: LD_INT 0
17486: PPUSH
17487: CALL 17979 0 6
17491: ST_TO_ADDR
// if not hexes then
17492: LD_VAR 0 12
17496: NOT
17497: IFFALSE 17501
// exit ;
17499: GO 17974
// hex := GetHexInfo ( x , y ) ;
17501: LD_ADDR_VAR 0 15
17505: PUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_VAR 0 4
17515: PPUSH
17516: CALL_OW 546
17520: ST_TO_ADDR
// if hex [ 1 ] then
17521: LD_VAR 0 15
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: IFFALSE 17533
// exit ;
17531: GO 17974
// height := hex [ 2 ] ;
17533: LD_ADDR_VAR 0 13
17537: PUSH
17538: LD_VAR 0 15
17542: PUSH
17543: LD_INT 2
17545: ARRAY
17546: ST_TO_ADDR
// for i = 1 to hexes do
17547: LD_ADDR_VAR 0 7
17551: PUSH
17552: DOUBLE
17553: LD_INT 1
17555: DEC
17556: ST_TO_ADDR
17557: LD_VAR 0 12
17561: PUSH
17562: FOR_TO
17563: IFFALSE 17893
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17565: LD_VAR 0 12
17569: PUSH
17570: LD_VAR 0 7
17574: ARRAY
17575: PUSH
17576: LD_INT 1
17578: ARRAY
17579: PPUSH
17580: LD_VAR 0 12
17584: PUSH
17585: LD_VAR 0 7
17589: ARRAY
17590: PUSH
17591: LD_INT 2
17593: ARRAY
17594: PPUSH
17595: CALL_OW 488
17599: NOT
17600: PUSH
17601: LD_VAR 0 12
17605: PUSH
17606: LD_VAR 0 7
17610: ARRAY
17611: PUSH
17612: LD_INT 1
17614: ARRAY
17615: PPUSH
17616: LD_VAR 0 12
17620: PUSH
17621: LD_VAR 0 7
17625: ARRAY
17626: PUSH
17627: LD_INT 2
17629: ARRAY
17630: PPUSH
17631: CALL_OW 428
17635: PUSH
17636: LD_INT 0
17638: GREATER
17639: OR
17640: PUSH
17641: LD_VAR 0 12
17645: PUSH
17646: LD_VAR 0 7
17650: ARRAY
17651: PUSH
17652: LD_INT 1
17654: ARRAY
17655: PPUSH
17656: LD_VAR 0 12
17660: PUSH
17661: LD_VAR 0 7
17665: ARRAY
17666: PUSH
17667: LD_INT 2
17669: ARRAY
17670: PPUSH
17671: CALL_OW 351
17675: OR
17676: IFFALSE 17682
// exit ;
17678: POP
17679: POP
17680: GO 17974
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17682: LD_ADDR_VAR 0 8
17686: PUSH
17687: LD_VAR 0 12
17691: PUSH
17692: LD_VAR 0 7
17696: ARRAY
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 12
17706: PUSH
17707: LD_VAR 0 7
17711: ARRAY
17712: PUSH
17713: LD_INT 2
17715: ARRAY
17716: PPUSH
17717: CALL_OW 546
17721: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17722: LD_VAR 0 8
17726: PUSH
17727: LD_INT 1
17729: ARRAY
17730: PUSH
17731: LD_VAR 0 8
17735: PUSH
17736: LD_INT 2
17738: ARRAY
17739: PUSH
17740: LD_VAR 0 13
17744: PUSH
17745: LD_INT 2
17747: PLUS
17748: GREATER
17749: OR
17750: PUSH
17751: LD_VAR 0 8
17755: PUSH
17756: LD_INT 2
17758: ARRAY
17759: PUSH
17760: LD_VAR 0 13
17764: PUSH
17765: LD_INT 2
17767: MINUS
17768: LESS
17769: OR
17770: PUSH
17771: LD_VAR 0 8
17775: PUSH
17776: LD_INT 3
17778: ARRAY
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 8
17785: PUSH
17786: LD_INT 9
17788: PUSH
17789: LD_INT 10
17791: PUSH
17792: LD_INT 11
17794: PUSH
17795: LD_INT 12
17797: PUSH
17798: LD_INT 13
17800: PUSH
17801: LD_INT 16
17803: PUSH
17804: LD_INT 17
17806: PUSH
17807: LD_INT 18
17809: PUSH
17810: LD_INT 19
17812: PUSH
17813: LD_INT 20
17815: PUSH
17816: LD_INT 21
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: IN
17834: NOT
17835: OR
17836: PUSH
17837: LD_VAR 0 8
17841: PUSH
17842: LD_INT 5
17844: ARRAY
17845: NOT
17846: OR
17847: PUSH
17848: LD_VAR 0 8
17852: PUSH
17853: LD_INT 6
17855: ARRAY
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: LD_INT 2
17862: PUSH
17863: LD_INT 7
17865: PUSH
17866: LD_INT 9
17868: PUSH
17869: LD_INT 10
17871: PUSH
17872: LD_INT 11
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: IN
17883: NOT
17884: OR
17885: IFFALSE 17891
// exit ;
17887: POP
17888: POP
17889: GO 17974
// end ;
17891: GO 17562
17893: POP
17894: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17895: LD_VAR 0 9
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: LD_VAR 0 4
17909: PPUSH
17910: LD_INT 20
17912: PPUSH
17913: CALL 9897 0 4
17917: PUSH
17918: LD_INT 4
17920: ARRAY
17921: IFFALSE 17925
// exit ;
17923: GO 17974
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17925: LD_VAR 0 2
17929: PUSH
17930: LD_INT 29
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: IN
17940: PUSH
17941: LD_VAR 0 3
17945: PPUSH
17946: LD_VAR 0 4
17950: PPUSH
17951: LD_VAR 0 9
17955: PPUSH
17956: CALL_OW 440
17960: NOT
17961: AND
17962: IFFALSE 17966
// exit ;
17964: GO 17974
// result := true ;
17966: LD_ADDR_VAR 0 6
17970: PUSH
17971: LD_INT 1
17973: ST_TO_ADDR
// end ;
17974: LD_VAR 0 6
17978: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17979: LD_INT 0
17981: PPUSH
17982: PPUSH
17983: PPUSH
17984: PPUSH
17985: PPUSH
17986: PPUSH
17987: PPUSH
17988: PPUSH
17989: PPUSH
17990: PPUSH
17991: PPUSH
17992: PPUSH
17993: PPUSH
17994: PPUSH
17995: PPUSH
17996: PPUSH
17997: PPUSH
17998: PPUSH
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
18008: PPUSH
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
18013: PPUSH
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
18018: PPUSH
18019: PPUSH
18020: PPUSH
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
// result = [ ] ;
18039: LD_ADDR_VAR 0 7
18043: PUSH
18044: EMPTY
18045: ST_TO_ADDR
// temp_list = [ ] ;
18046: LD_ADDR_VAR 0 9
18050: PUSH
18051: EMPTY
18052: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18053: LD_VAR 0 4
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 2
18066: PUSH
18067: LD_INT 3
18069: PUSH
18070: LD_INT 4
18072: PUSH
18073: LD_INT 5
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: IN
18084: NOT
18085: PUSH
18086: LD_VAR 0 1
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: IN
18101: PUSH
18102: LD_VAR 0 5
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: IN
18121: NOT
18122: AND
18123: OR
18124: IFFALSE 18128
// exit ;
18126: GO 36519
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18128: LD_VAR 0 1
18132: PUSH
18133: LD_INT 6
18135: PUSH
18136: LD_INT 7
18138: PUSH
18139: LD_INT 8
18141: PUSH
18142: LD_INT 13
18144: PUSH
18145: LD_INT 12
18147: PUSH
18148: LD_INT 15
18150: PUSH
18151: LD_INT 11
18153: PUSH
18154: LD_INT 14
18156: PUSH
18157: LD_INT 10
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: IN
18171: IFFALSE 18181
// btype = b_lab ;
18173: LD_ADDR_VAR 0 1
18177: PUSH
18178: LD_INT 6
18180: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18181: LD_VAR 0 6
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: IN
18200: NOT
18201: PUSH
18202: LD_VAR 0 1
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 2
18215: PUSH
18216: LD_INT 3
18218: PUSH
18219: LD_INT 6
18221: PUSH
18222: LD_INT 36
18224: PUSH
18225: LD_INT 4
18227: PUSH
18228: LD_INT 5
18230: PUSH
18231: LD_INT 31
18233: PUSH
18234: LD_INT 32
18236: PUSH
18237: LD_INT 33
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: IN
18253: NOT
18254: PUSH
18255: LD_VAR 0 6
18259: PUSH
18260: LD_INT 1
18262: EQUAL
18263: AND
18264: OR
18265: PUSH
18266: LD_VAR 0 1
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: LD_INT 3
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: IN
18281: NOT
18282: PUSH
18283: LD_VAR 0 6
18287: PUSH
18288: LD_INT 2
18290: EQUAL
18291: AND
18292: OR
18293: IFFALSE 18303
// mode = 0 ;
18295: LD_ADDR_VAR 0 6
18299: PUSH
18300: LD_INT 0
18302: ST_TO_ADDR
// case mode of 0 :
18303: LD_VAR 0 6
18307: PUSH
18308: LD_INT 0
18310: DOUBLE
18311: EQUAL
18312: IFTRUE 18316
18314: GO 29769
18316: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18317: LD_ADDR_VAR 0 11
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: LD_INT 1
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 1
18386: NEG
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: LD_INT 2
18402: NEG
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 2
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: LD_INT 3
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18510: LD_ADDR_VAR 0 12
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: NEG
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 1
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: NEG
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: NEG
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 3
18667: NEG
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 3
18678: NEG
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18706: LD_ADDR_VAR 0 13
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 1
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: LD_INT 2
18845: NEG
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 2
18853: NEG
18854: PUSH
18855: LD_INT 3
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 3
18865: NEG
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 3
18877: NEG
18878: PUSH
18879: LD_INT 3
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18905: LD_ADDR_VAR 0 14
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 2
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: LD_INT 2
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: LD_INT 3
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: LD_INT 3
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19101: LD_ADDR_VAR 0 15
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: NEG
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: NEG
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 3
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19294: LD_ADDR_VAR 0 16
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: LD_INT 1
19314: NEG
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: LD_INT 2
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: LD_INT 2
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: NEG
19430: PUSH
19431: LD_INT 2
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 3
19441: PUSH
19442: LD_INT 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 3
19451: PUSH
19452: LD_INT 3
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19487: LD_ADDR_VAR 0 17
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 1
19568: NEG
19569: PUSH
19570: LD_INT 2
19572: NEG
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 2
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: LD_INT 1
19678: NEG
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: NEG
19687: PUSH
19688: LD_INT 2
19690: NEG
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19717: LD_ADDR_VAR 0 18
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 2
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 2
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 0
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19947: LD_ADDR_VAR 0 19
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 0
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 2
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: NEG
20135: PUSH
20136: LD_INT 1
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 2
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20177: LD_ADDR_VAR 0 20
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: LD_INT 0
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: LD_INT 2
20262: NEG
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 2
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: LD_INT 0
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20407: LD_ADDR_VAR 0 21
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 0
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: LD_INT 2
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: LD_INT 1
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: LD_INT 2
20610: NEG
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20637: LD_ADDR_VAR 0 22
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 2
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20867: LD_ADDR_VAR 0 23
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 2
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 2
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: LD_INT 3
21082: NEG
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PUSH
21092: LD_INT 3
21094: NEG
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 2
21113: PUSH
21114: LD_INT 1
21116: NEG
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21147: LD_ADDR_VAR 0 24
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: NEG
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21423: LD_ADDR_VAR 0 25
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 2
21610: NEG
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 2
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21697: LD_ADDR_VAR 0 26
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 2
21782: NEG
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: LD_INT 2
21900: NEG
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 2
21939: NEG
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21973: LD_ADDR_VAR 0 27
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: NEG
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 2
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 1
22080: NEG
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: NEG
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 2
22195: NEG
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 3
22206: NEG
22207: PUSH
22208: LD_INT 1
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: LD_INT 2
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22253: LD_ADDR_VAR 0 28
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 2
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: NEG
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: NEG
22453: PUSH
22454: LD_INT 2
22456: NEG
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 2
22464: NEG
22465: PUSH
22466: LD_INT 3
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: LD_INT 3
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 3
22488: NEG
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 3
22500: NEG
22501: PUSH
22502: LD_INT 2
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22535: LD_ADDR_VAR 0 29
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 2
22620: NEG
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 0
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 2
22725: NEG
22726: PUSH
22727: LD_INT 3
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 3
22779: NEG
22780: PUSH
22781: LD_INT 2
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22814: LD_ADDR_VAR 0 30
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: LD_INT 1
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: NEG
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 2
22980: NEG
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 2
22991: NEG
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: LD_INT 3
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 2
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23092: LD_ADDR_VAR 0 31
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: NEG
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 2
23177: NEG
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 1
23246: NEG
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 2
23257: NEG
23258: PUSH
23259: LD_INT 1
23261: NEG
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: LD_INT 3
23285: NEG
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: LD_INT 3
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 3
23335: NEG
23336: PUSH
23337: LD_INT 2
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23370: LD_ADDR_VAR 0 32
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 0
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 2
23547: NEG
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: LD_INT 3
23563: NEG
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 3
23613: NEG
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23648: LD_ADDR_VAR 0 33
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 2
23826: NEG
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: NEG
23839: PUSH
23840: LD_INT 3
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: LD_INT 3
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 3
23892: NEG
23893: PUSH
23894: LD_INT 2
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23927: LD_ADDR_VAR 0 34
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: LD_INT 2
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: LD_INT 1
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: LD_INT 3
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: NEG
24162: PUSH
24163: LD_INT 1
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 3
24172: NEG
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24207: LD_ADDR_VAR 0 35
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: NEG
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24319: LD_ADDR_VAR 0 36
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: LD_INT 2
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24431: LD_ADDR_VAR 0 37
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24543: LD_ADDR_VAR 0 38
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24655: LD_ADDR_VAR 0 39
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 2
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24767: LD_ADDR_VAR 0 40
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24879: LD_ADDR_VAR 0 41
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: NEG
25058: PUSH
25059: LD_INT 2
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: NEG
25070: PUSH
25071: LD_INT 3
25073: NEG
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 3
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 3
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 3
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 3
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 3
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 3
25153: NEG
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 3
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 3
25176: NEG
25177: PUSH
25178: LD_INT 2
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 3
25188: NEG
25189: PUSH
25190: LD_INT 3
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25229: LD_ADDR_VAR 0 42
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: LD_INT 2
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: NEG
25432: PUSH
25433: LD_INT 3
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 3
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: LD_INT 2
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 3
25475: PUSH
25476: LD_INT 3
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 3
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 3
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 3
25526: NEG
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 3
25538: NEG
25539: PUSH
25540: LD_INT 3
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25579: LD_ADDR_VAR 0 43
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 1
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: LD_INT 3
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: LD_INT 3
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 3
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 3
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: NEG
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 3
25875: NEG
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 3
25886: NEG
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25927: LD_ADDR_VAR 0 44
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: LD_INT 3
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 2
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 3
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 3
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 3
26201: NEG
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 3
26212: NEG
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 3
26224: NEG
26225: PUSH
26226: LD_INT 2
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 3
26236: NEG
26237: PUSH
26238: LD_INT 3
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26277: LD_ADDR_VAR 0 45
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 2
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 3
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 3
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: LD_INT 2
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 3
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 3
26574: NEG
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 3
26586: NEG
26587: PUSH
26588: LD_INT 3
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26627: LD_ADDR_VAR 0 46
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: LD_INT 3
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 3
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 3
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 3
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 3
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 3
26923: NEG
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 3
26934: NEG
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26975: LD_ADDR_VAR 0 47
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 2
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: LD_INT 2
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27126: LD_ADDR_VAR 0 48
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 1
27207: NEG
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 2
27222: NEG
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 2
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27273: LD_ADDR_VAR 0 49
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27417: LD_ADDR_VAR 0 50
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27561: LD_ADDR_VAR 0 51
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27708: LD_ADDR_VAR 0 52
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 2
27812: NEG
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27859: LD_ADDR_VAR 0 53
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: NEG
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28089: LD_ADDR_VAR 0 54
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: LD_INT 2
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 2
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: NEG
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28319: LD_ADDR_VAR 0 55
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 2
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 2
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28549: LD_ADDR_VAR 0 56
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 2
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28779: LD_ADDR_VAR 0 57
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: NEG
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 2
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29009: LD_ADDR_VAR 0 58
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29239: LD_ADDR_VAR 0 59
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29327: LD_ADDR_VAR 0 60
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29415: LD_ADDR_VAR 0 61
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29503: LD_ADDR_VAR 0 62
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29591: LD_ADDR_VAR 0 63
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29679: LD_ADDR_VAR 0 64
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// end ; 1 :
29767: GO 35664
29769: LD_INT 1
29771: DOUBLE
29772: EQUAL
29773: IFTRUE 29777
29775: GO 32400
29777: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29778: LD_ADDR_VAR 0 11
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 3
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29822: LD_ADDR_VAR 0 12
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29863: LD_ADDR_VAR 0 13
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29903: LD_ADDR_VAR 0 14
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29944: LD_ADDR_VAR 0 15
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 3
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29988: LD_ADDR_VAR 0 16
29992: PUSH
29993: LD_INT 2
29995: NEG
29996: PUSH
29997: LD_INT 3
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: LD_INT 2
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30034: LD_ADDR_VAR 0 17
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: LD_INT 3
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: LD_INT 3
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 2
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30078: LD_ADDR_VAR 0 18
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30119: LD_ADDR_VAR 0 19
30123: PUSH
30124: LD_INT 3
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30159: LD_ADDR_VAR 0 20
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30200: LD_ADDR_VAR 0 21
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30244: LD_ADDR_VAR 0 22
30248: PUSH
30249: LD_INT 2
30251: NEG
30252: PUSH
30253: LD_INT 3
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 3
30263: NEG
30264: PUSH
30265: LD_INT 2
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: LD_INT 3
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30290: LD_ADDR_VAR 0 23
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 3
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 4
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: LD_INT 3
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30334: LD_ADDR_VAR 0 24
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: LD_INT 0
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 4
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30375: LD_ADDR_VAR 0 25
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: LD_INT 3
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: LD_INT 4
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: LIST
30414: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30415: LD_ADDR_VAR 0 26
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: LD_INT 4
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30456: LD_ADDR_VAR 0 27
30460: PUSH
30461: LD_INT 3
30463: NEG
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 4
30485: NEG
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30500: LD_ADDR_VAR 0 28
30504: PUSH
30505: LD_INT 3
30507: NEG
30508: PUSH
30509: LD_INT 3
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 3
30519: NEG
30520: PUSH
30521: LD_INT 4
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 4
30531: NEG
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30546: LD_ADDR_VAR 0 29
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 3
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 4
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 4
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 3
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: LD_INT 5
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 5
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: LD_INT 6
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 6
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: LD_INT 5
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30701: LD_ADDR_VAR 0 30
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 4
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 4
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 6
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 6
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30844: LD_ADDR_VAR 0 31
30848: PUSH
30849: LD_INT 3
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 3
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 4
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 4
30891: PUSH
30892: LD_INT 4
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 4
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 5
30911: PUSH
30912: LD_INT 4
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 5
30921: PUSH
30922: LD_INT 5
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 4
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 6
30941: PUSH
30942: LD_INT 5
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 6
30951: PUSH
30952: LD_INT 6
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 5
30961: PUSH
30962: LD_INT 6
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30983: LD_ADDR_VAR 0 32
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 3
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: LD_INT 4
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 5
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 5
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: LD_INT 4
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 6
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 6
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: LD_INT 5
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31126: LD_ADDR_VAR 0 33
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 3
31144: NEG
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 3
31155: NEG
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 4
31178: NEG
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 4
31189: NEG
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 4
31201: NEG
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 5
31212: NEG
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 5
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 5
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 6
31246: NEG
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 6
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31281: LD_ADDR_VAR 0 34
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: NEG
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 3
31312: NEG
31313: PUSH
31314: LD_INT 3
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 3
31324: NEG
31325: PUSH
31326: LD_INT 4
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 4
31336: NEG
31337: PUSH
31338: LD_INT 3
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 4
31348: NEG
31349: PUSH
31350: LD_INT 4
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 4
31360: NEG
31361: PUSH
31362: LD_INT 5
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 5
31372: NEG
31373: PUSH
31374: LD_INT 4
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 5
31384: NEG
31385: PUSH
31386: LD_INT 5
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 5
31396: NEG
31397: PUSH
31398: LD_INT 6
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 6
31408: NEG
31409: PUSH
31410: LD_INT 5
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 6
31420: NEG
31421: PUSH
31422: LD_INT 6
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31444: LD_ADDR_VAR 0 41
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31488: LD_ADDR_VAR 0 42
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31529: LD_ADDR_VAR 0 43
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31569: LD_ADDR_VAR 0 44
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31610: LD_ADDR_VAR 0 45
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 2
31628: NEG
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31654: LD_ADDR_VAR 0 46
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31700: LD_ADDR_VAR 0 47
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31733: LD_ADDR_VAR 0 48
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31764: LD_ADDR_VAR 0 49
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31793: LD_ADDR_VAR 0 50
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31822: LD_ADDR_VAR 0 51
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31853: LD_ADDR_VAR 0 52
31857: PUSH
31858: LD_INT 3
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 3
31872: NEG
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31886: LD_ADDR_VAR 0 53
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31930: LD_ADDR_VAR 0 54
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31971: LD_ADDR_VAR 0 55
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32011: LD_ADDR_VAR 0 56
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32052: LD_ADDR_VAR 0 57
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 3
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32096: LD_ADDR_VAR 0 58
32100: PUSH
32101: LD_INT 2
32103: NEG
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 3
32115: NEG
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: NEG
32128: PUSH
32129: LD_INT 3
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32142: LD_ADDR_VAR 0 59
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32186: LD_ADDR_VAR 0 60
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32227: LD_ADDR_VAR 0 61
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32267: LD_ADDR_VAR 0 62
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32308: LD_ADDR_VAR 0 63
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32352: LD_ADDR_VAR 0 64
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 2
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: ST_TO_ADDR
// end ; 2 :
32398: GO 35664
32400: LD_INT 2
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32408
32406: GO 35663
32408: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32409: LD_ADDR_VAR 0 29
32413: PUSH
32414: LD_INT 4
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 4
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 5
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 5
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 4
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 4
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 4
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 3
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 4
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 5
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 4
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: LD_INT 5
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: NEG
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: NEG
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 3
32703: NEG
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 4
32748: NEG
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 4
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 4
32771: NEG
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 4
32794: NEG
32795: PUSH
32796: LD_INT 4
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 4
32806: NEG
32807: PUSH
32808: LD_INT 5
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 3
32818: NEG
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: NEG
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 4
32842: NEG
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 5
32854: NEG
32855: PUSH
32856: LD_INT 4
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 5
32866: NEG
32867: PUSH
32868: LD_INT 5
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 3
32878: NEG
32879: PUSH
32880: LD_INT 5
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 5
32890: NEG
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32947: LD_ADDR_VAR 0 30
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 4
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 5
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: LD_INT 5
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 4
32994: PUSH
32995: LD_INT 5
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: LD_INT 4
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: LD_INT 3
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 5
33024: PUSH
33025: LD_INT 3
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 3
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 3
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 4
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 4
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 4
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 4
33137: NEG
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 4
33148: NEG
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 3
33160: NEG
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: NEG
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 4
33182: NEG
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 5
33193: NEG
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 5
33204: NEG
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 5
33216: NEG
33217: PUSH
33218: LD_INT 2
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 3
33239: NEG
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: LD_INT 4
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: NEG
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: NEG
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 4
33299: NEG
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 4
33311: NEG
33312: PUSH
33313: LD_INT 4
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: NEG
33324: PUSH
33325: LD_INT 4
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: LD_INT 2
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 4
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 5
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 4
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 3
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 3
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: LD_INT 4
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 5
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 5
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33494: LD_ADDR_VAR 0 31
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 4
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: LD_INT 5
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 5
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 3
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 5
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: LD_INT 3
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: NEG
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: NEG
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 3
33639: NEG
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 4
33650: NEG
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 4
33661: NEG
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 4
33673: NEG
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 4
33696: NEG
33697: PUSH
33698: LD_INT 4
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 5
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 3
33720: NEG
33721: PUSH
33722: LD_INT 4
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 3
33732: NEG
33733: PUSH
33734: LD_INT 3
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 4
33744: NEG
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 5
33756: NEG
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 5
33768: NEG
33769: PUSH
33770: LD_INT 5
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: NEG
33781: PUSH
33782: LD_INT 5
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 5
33792: NEG
33793: PUSH
33794: LD_INT 3
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 3
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 4
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 4
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 4
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 5
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 5
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 4
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 3
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 5
33989: PUSH
33990: LD_INT 2
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34044: LD_ADDR_VAR 0 32
34048: PUSH
34049: LD_INT 4
34051: NEG
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 4
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 3
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 5
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 5
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 5
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 3
34142: NEG
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: LD_INT 3
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: LD_INT 4
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 4
34213: NEG
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 4
34225: NEG
34226: PUSH
34227: LD_INT 4
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 2
34237: NEG
34238: PUSH
34239: LD_INT 4
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 4
34249: NEG
34250: PUSH
34251: LD_INT 2
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 4
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 5
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 4
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 3
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 3
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: LD_INT 4
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 5
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: LD_INT 3
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: LD_INT 5
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 3
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 4
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 4
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 4
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 5
34476: PUSH
34477: LD_INT 4
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 5
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 5
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 5
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34591: LD_ADDR_VAR 0 33
34595: PUSH
34596: LD_INT 4
34598: NEG
34599: PUSH
34600: LD_INT 4
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 4
34610: NEG
34611: PUSH
34612: LD_INT 5
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: LD_INT 4
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 3
34634: NEG
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 4
34646: NEG
34647: PUSH
34648: LD_INT 3
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 5
34658: NEG
34659: PUSH
34660: LD_INT 4
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 5
34670: NEG
34671: PUSH
34672: LD_INT 5
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 3
34682: NEG
34683: PUSH
34684: LD_INT 5
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 5
34694: NEG
34695: PUSH
34696: LD_INT 3
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: LD_INT 3
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 4
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 3
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 2
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: LD_INT 2
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: LD_INT 4
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 4
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 5
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 3
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 5
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: LD_INT 4
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: LD_INT 4
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 4
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 4
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 5
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 4
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 5
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35129: LD_ADDR_VAR 0 34
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 4
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 5
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 4
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: LD_INT 3
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 3
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: LD_INT 4
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 5
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 2
35226: NEG
35227: PUSH
35228: LD_INT 5
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 3
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 4
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 4
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 3
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 4
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 4
35331: PUSH
35332: LD_INT 4
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 4
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 5
35351: PUSH
35352: LD_INT 4
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 5
35361: PUSH
35362: LD_INT 5
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 4
35371: PUSH
35372: LD_INT 5
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 3
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 3
35391: PUSH
35392: LD_INT 3
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 5
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 3
35411: PUSH
35412: LD_INT 5
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 3
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 4
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 4
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 4
35514: NEG
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 4
35525: NEG
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 3
35537: NEG
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 3
35548: NEG
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 4
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 5
35570: NEG
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 5
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 5
35593: NEG
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 3
35605: NEG
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: ST_TO_ADDR
// end ; end ;
35661: GO 35664
35663: POP
// case btype of b_depot , b_warehouse :
35664: LD_VAR 0 1
35668: PUSH
35669: LD_INT 0
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35683
35675: LD_INT 1
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35683
35681: GO 35884
35683: POP
// case nation of nation_american :
35684: LD_VAR 0 5
35688: PUSH
35689: LD_INT 1
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35697
35695: GO 35753
35697: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35698: LD_ADDR_VAR 0 9
35702: PUSH
35703: LD_VAR 0 11
35707: PUSH
35708: LD_VAR 0 12
35712: PUSH
35713: LD_VAR 0 13
35717: PUSH
35718: LD_VAR 0 14
35722: PUSH
35723: LD_VAR 0 15
35727: PUSH
35728: LD_VAR 0 16
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: PUSH
35741: LD_VAR 0 4
35745: PUSH
35746: LD_INT 1
35748: PLUS
35749: ARRAY
35750: ST_TO_ADDR
35751: GO 35882
35753: LD_INT 2
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35761
35759: GO 35817
35761: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35762: LD_ADDR_VAR 0 9
35766: PUSH
35767: LD_VAR 0 17
35771: PUSH
35772: LD_VAR 0 18
35776: PUSH
35777: LD_VAR 0 19
35781: PUSH
35782: LD_VAR 0 20
35786: PUSH
35787: LD_VAR 0 21
35791: PUSH
35792: LD_VAR 0 22
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: PUSH
35805: LD_VAR 0 4
35809: PUSH
35810: LD_INT 1
35812: PLUS
35813: ARRAY
35814: ST_TO_ADDR
35815: GO 35882
35817: LD_INT 3
35819: DOUBLE
35820: EQUAL
35821: IFTRUE 35825
35823: GO 35881
35825: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35826: LD_ADDR_VAR 0 9
35830: PUSH
35831: LD_VAR 0 23
35835: PUSH
35836: LD_VAR 0 24
35840: PUSH
35841: LD_VAR 0 25
35845: PUSH
35846: LD_VAR 0 26
35850: PUSH
35851: LD_VAR 0 27
35855: PUSH
35856: LD_VAR 0 28
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: PUSH
35869: LD_VAR 0 4
35873: PUSH
35874: LD_INT 1
35876: PLUS
35877: ARRAY
35878: ST_TO_ADDR
35879: GO 35882
35881: POP
35882: GO 36437
35884: LD_INT 2
35886: DOUBLE
35887: EQUAL
35888: IFTRUE 35898
35890: LD_INT 3
35892: DOUBLE
35893: EQUAL
35894: IFTRUE 35898
35896: GO 35954
35898: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35899: LD_ADDR_VAR 0 9
35903: PUSH
35904: LD_VAR 0 29
35908: PUSH
35909: LD_VAR 0 30
35913: PUSH
35914: LD_VAR 0 31
35918: PUSH
35919: LD_VAR 0 32
35923: PUSH
35924: LD_VAR 0 33
35928: PUSH
35929: LD_VAR 0 34
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: PUSH
35942: LD_VAR 0 4
35946: PUSH
35947: LD_INT 1
35949: PLUS
35950: ARRAY
35951: ST_TO_ADDR
35952: GO 36437
35954: LD_INT 16
35956: DOUBLE
35957: EQUAL
35958: IFTRUE 36016
35960: LD_INT 17
35962: DOUBLE
35963: EQUAL
35964: IFTRUE 36016
35966: LD_INT 18
35968: DOUBLE
35969: EQUAL
35970: IFTRUE 36016
35972: LD_INT 19
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 36016
35978: LD_INT 22
35980: DOUBLE
35981: EQUAL
35982: IFTRUE 36016
35984: LD_INT 20
35986: DOUBLE
35987: EQUAL
35988: IFTRUE 36016
35990: LD_INT 21
35992: DOUBLE
35993: EQUAL
35994: IFTRUE 36016
35996: LD_INT 23
35998: DOUBLE
35999: EQUAL
36000: IFTRUE 36016
36002: LD_INT 24
36004: DOUBLE
36005: EQUAL
36006: IFTRUE 36016
36008: LD_INT 25
36010: DOUBLE
36011: EQUAL
36012: IFTRUE 36016
36014: GO 36072
36016: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36017: LD_ADDR_VAR 0 9
36021: PUSH
36022: LD_VAR 0 35
36026: PUSH
36027: LD_VAR 0 36
36031: PUSH
36032: LD_VAR 0 37
36036: PUSH
36037: LD_VAR 0 38
36041: PUSH
36042: LD_VAR 0 39
36046: PUSH
36047: LD_VAR 0 40
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: LD_VAR 0 4
36064: PUSH
36065: LD_INT 1
36067: PLUS
36068: ARRAY
36069: ST_TO_ADDR
36070: GO 36437
36072: LD_INT 6
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36128
36078: LD_INT 7
36080: DOUBLE
36081: EQUAL
36082: IFTRUE 36128
36084: LD_INT 8
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36128
36090: LD_INT 13
36092: DOUBLE
36093: EQUAL
36094: IFTRUE 36128
36096: LD_INT 12
36098: DOUBLE
36099: EQUAL
36100: IFTRUE 36128
36102: LD_INT 15
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36128
36108: LD_INT 11
36110: DOUBLE
36111: EQUAL
36112: IFTRUE 36128
36114: LD_INT 14
36116: DOUBLE
36117: EQUAL
36118: IFTRUE 36128
36120: LD_INT 10
36122: DOUBLE
36123: EQUAL
36124: IFTRUE 36128
36126: GO 36184
36128: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36129: LD_ADDR_VAR 0 9
36133: PUSH
36134: LD_VAR 0 41
36138: PUSH
36139: LD_VAR 0 42
36143: PUSH
36144: LD_VAR 0 43
36148: PUSH
36149: LD_VAR 0 44
36153: PUSH
36154: LD_VAR 0 45
36158: PUSH
36159: LD_VAR 0 46
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: LD_VAR 0 4
36176: PUSH
36177: LD_INT 1
36179: PLUS
36180: ARRAY
36181: ST_TO_ADDR
36182: GO 36437
36184: LD_INT 36
36186: DOUBLE
36187: EQUAL
36188: IFTRUE 36192
36190: GO 36248
36192: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36193: LD_ADDR_VAR 0 9
36197: PUSH
36198: LD_VAR 0 47
36202: PUSH
36203: LD_VAR 0 48
36207: PUSH
36208: LD_VAR 0 49
36212: PUSH
36213: LD_VAR 0 50
36217: PUSH
36218: LD_VAR 0 51
36222: PUSH
36223: LD_VAR 0 52
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: PUSH
36236: LD_VAR 0 4
36240: PUSH
36241: LD_INT 1
36243: PLUS
36244: ARRAY
36245: ST_TO_ADDR
36246: GO 36437
36248: LD_INT 4
36250: DOUBLE
36251: EQUAL
36252: IFTRUE 36274
36254: LD_INT 5
36256: DOUBLE
36257: EQUAL
36258: IFTRUE 36274
36260: LD_INT 34
36262: DOUBLE
36263: EQUAL
36264: IFTRUE 36274
36266: LD_INT 37
36268: DOUBLE
36269: EQUAL
36270: IFTRUE 36274
36272: GO 36330
36274: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36275: LD_ADDR_VAR 0 9
36279: PUSH
36280: LD_VAR 0 53
36284: PUSH
36285: LD_VAR 0 54
36289: PUSH
36290: LD_VAR 0 55
36294: PUSH
36295: LD_VAR 0 56
36299: PUSH
36300: LD_VAR 0 57
36304: PUSH
36305: LD_VAR 0 58
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: PUSH
36318: LD_VAR 0 4
36322: PUSH
36323: LD_INT 1
36325: PLUS
36326: ARRAY
36327: ST_TO_ADDR
36328: GO 36437
36330: LD_INT 31
36332: DOUBLE
36333: EQUAL
36334: IFTRUE 36380
36336: LD_INT 32
36338: DOUBLE
36339: EQUAL
36340: IFTRUE 36380
36342: LD_INT 33
36344: DOUBLE
36345: EQUAL
36346: IFTRUE 36380
36348: LD_INT 27
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36380
36354: LD_INT 26
36356: DOUBLE
36357: EQUAL
36358: IFTRUE 36380
36360: LD_INT 28
36362: DOUBLE
36363: EQUAL
36364: IFTRUE 36380
36366: LD_INT 29
36368: DOUBLE
36369: EQUAL
36370: IFTRUE 36380
36372: LD_INT 30
36374: DOUBLE
36375: EQUAL
36376: IFTRUE 36380
36378: GO 36436
36380: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36381: LD_ADDR_VAR 0 9
36385: PUSH
36386: LD_VAR 0 59
36390: PUSH
36391: LD_VAR 0 60
36395: PUSH
36396: LD_VAR 0 61
36400: PUSH
36401: LD_VAR 0 62
36405: PUSH
36406: LD_VAR 0 63
36410: PUSH
36411: LD_VAR 0 64
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: PUSH
36424: LD_VAR 0 4
36428: PUSH
36429: LD_INT 1
36431: PLUS
36432: ARRAY
36433: ST_TO_ADDR
36434: GO 36437
36436: POP
// temp_list2 = [ ] ;
36437: LD_ADDR_VAR 0 10
36441: PUSH
36442: EMPTY
36443: ST_TO_ADDR
// for i in temp_list do
36444: LD_ADDR_VAR 0 8
36448: PUSH
36449: LD_VAR 0 9
36453: PUSH
36454: FOR_IN
36455: IFFALSE 36507
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36457: LD_ADDR_VAR 0 10
36461: PUSH
36462: LD_VAR 0 10
36466: PUSH
36467: LD_VAR 0 8
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: PUSH
36476: LD_VAR 0 2
36480: PLUS
36481: PUSH
36482: LD_VAR 0 8
36486: PUSH
36487: LD_INT 2
36489: ARRAY
36490: PUSH
36491: LD_VAR 0 3
36495: PLUS
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: EMPTY
36502: LIST
36503: ADD
36504: ST_TO_ADDR
36505: GO 36454
36507: POP
36508: POP
// result = temp_list2 ;
36509: LD_ADDR_VAR 0 7
36513: PUSH
36514: LD_VAR 0 10
36518: ST_TO_ADDR
// end ;
36519: LD_VAR 0 7
36523: RET
// export function EnemyInRange ( unit , dist ) ; begin
36524: LD_INT 0
36526: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36527: LD_ADDR_VAR 0 3
36531: PUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 255
36541: PPUSH
36542: LD_VAR 0 1
36546: PPUSH
36547: CALL_OW 250
36551: PPUSH
36552: LD_VAR 0 1
36556: PPUSH
36557: CALL_OW 251
36561: PPUSH
36562: LD_VAR 0 2
36566: PPUSH
36567: CALL 9897 0 4
36571: PUSH
36572: LD_INT 4
36574: ARRAY
36575: ST_TO_ADDR
// end ;
36576: LD_VAR 0 3
36580: RET
// export function PlayerSeeMe ( unit ) ; begin
36581: LD_INT 0
36583: PPUSH
// result := See ( your_side , unit ) ;
36584: LD_ADDR_VAR 0 2
36588: PUSH
36589: LD_OWVAR 2
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 292
36603: ST_TO_ADDR
// end ;
36604: LD_VAR 0 2
36608: RET
// export function ReverseDir ( unit ) ; begin
36609: LD_INT 0
36611: PPUSH
// if not unit then
36612: LD_VAR 0 1
36616: NOT
36617: IFFALSE 36621
// exit ;
36619: GO 36644
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36621: LD_ADDR_VAR 0 2
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 254
36635: PUSH
36636: LD_INT 3
36638: PLUS
36639: PUSH
36640: LD_INT 6
36642: MOD
36643: ST_TO_ADDR
// end ;
36644: LD_VAR 0 2
36648: RET
// export function ReverseArray ( array ) ; var i ; begin
36649: LD_INT 0
36651: PPUSH
36652: PPUSH
// if not array then
36653: LD_VAR 0 1
36657: NOT
36658: IFFALSE 36662
// exit ;
36660: GO 36717
// result := [ ] ;
36662: LD_ADDR_VAR 0 2
36666: PUSH
36667: EMPTY
36668: ST_TO_ADDR
// for i := array downto 1 do
36669: LD_ADDR_VAR 0 3
36673: PUSH
36674: DOUBLE
36675: LD_VAR 0 1
36679: INC
36680: ST_TO_ADDR
36681: LD_INT 1
36683: PUSH
36684: FOR_DOWNTO
36685: IFFALSE 36715
// result := Join ( result , array [ i ] ) ;
36687: LD_ADDR_VAR 0 2
36691: PUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: LD_VAR 0 1
36701: PUSH
36702: LD_VAR 0 3
36706: ARRAY
36707: PPUSH
36708: CALL 41382 0 2
36712: ST_TO_ADDR
36713: GO 36684
36715: POP
36716: POP
// end ;
36717: LD_VAR 0 2
36721: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36722: LD_INT 0
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
// if not unit or not hexes then
36730: LD_VAR 0 1
36734: NOT
36735: PUSH
36736: LD_VAR 0 2
36740: NOT
36741: OR
36742: IFFALSE 36746
// exit ;
36744: GO 36869
// dist := 9999 ;
36746: LD_ADDR_VAR 0 5
36750: PUSH
36751: LD_INT 9999
36753: ST_TO_ADDR
// for i = 1 to hexes do
36754: LD_ADDR_VAR 0 4
36758: PUSH
36759: DOUBLE
36760: LD_INT 1
36762: DEC
36763: ST_TO_ADDR
36764: LD_VAR 0 2
36768: PUSH
36769: FOR_TO
36770: IFFALSE 36857
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36772: LD_ADDR_VAR 0 6
36776: PUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: LD_VAR 0 2
36786: PUSH
36787: LD_VAR 0 4
36791: ARRAY
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 2
36801: PUSH
36802: LD_VAR 0 4
36806: ARRAY
36807: PUSH
36808: LD_INT 2
36810: ARRAY
36811: PPUSH
36812: CALL_OW 297
36816: ST_TO_ADDR
// if tdist < dist then
36817: LD_VAR 0 6
36821: PUSH
36822: LD_VAR 0 5
36826: LESS
36827: IFFALSE 36855
// begin hex := hexes [ i ] ;
36829: LD_ADDR_VAR 0 8
36833: PUSH
36834: LD_VAR 0 2
36838: PUSH
36839: LD_VAR 0 4
36843: ARRAY
36844: ST_TO_ADDR
// dist := tdist ;
36845: LD_ADDR_VAR 0 5
36849: PUSH
36850: LD_VAR 0 6
36854: ST_TO_ADDR
// end ; end ;
36855: GO 36769
36857: POP
36858: POP
// result := hex ;
36859: LD_ADDR_VAR 0 3
36863: PUSH
36864: LD_VAR 0 8
36868: ST_TO_ADDR
// end ;
36869: LD_VAR 0 3
36873: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36874: LD_INT 0
36876: PPUSH
36877: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36878: LD_VAR 0 1
36882: NOT
36883: PUSH
36884: LD_VAR 0 1
36888: PUSH
36889: LD_INT 21
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 23
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PPUSH
36913: CALL_OW 69
36917: IN
36918: NOT
36919: OR
36920: IFFALSE 36924
// exit ;
36922: GO 36971
// for i = 1 to 3 do
36924: LD_ADDR_VAR 0 3
36928: PUSH
36929: DOUBLE
36930: LD_INT 1
36932: DEC
36933: ST_TO_ADDR
36934: LD_INT 3
36936: PUSH
36937: FOR_TO
36938: IFFALSE 36969
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 250
36949: PPUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 251
36959: PPUSH
36960: LD_INT 1
36962: PPUSH
36963: CALL_OW 453
36967: GO 36937
36969: POP
36970: POP
// end ;
36971: LD_VAR 0 2
36975: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36976: LD_INT 0
36978: PPUSH
36979: PPUSH
36980: PPUSH
36981: PPUSH
36982: PPUSH
36983: PPUSH
// if not unit or not enemy_unit then
36984: LD_VAR 0 1
36988: NOT
36989: PUSH
36990: LD_VAR 0 2
36994: NOT
36995: OR
36996: IFFALSE 37000
// exit ;
36998: GO 37467
// if GetLives ( i ) < 250 then
37000: LD_VAR 0 4
37004: PPUSH
37005: CALL_OW 256
37009: PUSH
37010: LD_INT 250
37012: LESS
37013: IFFALSE 37026
// begin ComAutodestruct ( i ) ;
37015: LD_VAR 0 4
37019: PPUSH
37020: CALL 36874 0 1
// exit ;
37024: GO 37467
// end ; x := GetX ( enemy_unit ) ;
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: LD_VAR 0 2
37035: PPUSH
37036: CALL_OW 250
37040: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37041: LD_ADDR_VAR 0 8
37045: PUSH
37046: LD_VAR 0 2
37050: PPUSH
37051: CALL_OW 251
37055: ST_TO_ADDR
// if not x or not y then
37056: LD_VAR 0 7
37060: NOT
37061: PUSH
37062: LD_VAR 0 8
37066: NOT
37067: OR
37068: IFFALSE 37072
// exit ;
37070: GO 37467
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37072: LD_ADDR_VAR 0 6
37076: PUSH
37077: LD_VAR 0 7
37081: PPUSH
37082: LD_INT 0
37084: PPUSH
37085: LD_INT 4
37087: PPUSH
37088: CALL_OW 272
37092: PUSH
37093: LD_VAR 0 8
37097: PPUSH
37098: LD_INT 0
37100: PPUSH
37101: LD_INT 4
37103: PPUSH
37104: CALL_OW 273
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_VAR 0 7
37117: PPUSH
37118: LD_INT 1
37120: PPUSH
37121: LD_INT 4
37123: PPUSH
37124: CALL_OW 272
37128: PUSH
37129: LD_VAR 0 8
37133: PPUSH
37134: LD_INT 1
37136: PPUSH
37137: LD_INT 4
37139: PPUSH
37140: CALL_OW 273
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_VAR 0 7
37153: PPUSH
37154: LD_INT 2
37156: PPUSH
37157: LD_INT 4
37159: PPUSH
37160: CALL_OW 272
37164: PUSH
37165: LD_VAR 0 8
37169: PPUSH
37170: LD_INT 2
37172: PPUSH
37173: LD_INT 4
37175: PPUSH
37176: CALL_OW 273
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_VAR 0 7
37189: PPUSH
37190: LD_INT 3
37192: PPUSH
37193: LD_INT 4
37195: PPUSH
37196: CALL_OW 272
37200: PUSH
37201: LD_VAR 0 8
37205: PPUSH
37206: LD_INT 3
37208: PPUSH
37209: LD_INT 4
37211: PPUSH
37212: CALL_OW 273
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_VAR 0 7
37225: PPUSH
37226: LD_INT 4
37228: PPUSH
37229: LD_INT 4
37231: PPUSH
37232: CALL_OW 272
37236: PUSH
37237: LD_VAR 0 8
37241: PPUSH
37242: LD_INT 4
37244: PPUSH
37245: LD_INT 4
37247: PPUSH
37248: CALL_OW 273
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_VAR 0 7
37261: PPUSH
37262: LD_INT 5
37264: PPUSH
37265: LD_INT 4
37267: PPUSH
37268: CALL_OW 272
37272: PUSH
37273: LD_VAR 0 8
37277: PPUSH
37278: LD_INT 5
37280: PPUSH
37281: LD_INT 4
37283: PPUSH
37284: CALL_OW 273
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// for i = tmp downto 1 do
37301: LD_ADDR_VAR 0 4
37305: PUSH
37306: DOUBLE
37307: LD_VAR 0 6
37311: INC
37312: ST_TO_ADDR
37313: LD_INT 1
37315: PUSH
37316: FOR_DOWNTO
37317: IFFALSE 37418
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37319: LD_VAR 0 6
37323: PUSH
37324: LD_VAR 0 4
37328: ARRAY
37329: PUSH
37330: LD_INT 1
37332: ARRAY
37333: PPUSH
37334: LD_VAR 0 6
37338: PUSH
37339: LD_VAR 0 4
37343: ARRAY
37344: PUSH
37345: LD_INT 2
37347: ARRAY
37348: PPUSH
37349: CALL_OW 488
37353: NOT
37354: PUSH
37355: LD_VAR 0 6
37359: PUSH
37360: LD_VAR 0 4
37364: ARRAY
37365: PUSH
37366: LD_INT 1
37368: ARRAY
37369: PPUSH
37370: LD_VAR 0 6
37374: PUSH
37375: LD_VAR 0 4
37379: ARRAY
37380: PUSH
37381: LD_INT 2
37383: ARRAY
37384: PPUSH
37385: CALL_OW 428
37389: PUSH
37390: LD_INT 0
37392: NONEQUAL
37393: OR
37394: IFFALSE 37416
// tmp := Delete ( tmp , i ) ;
37396: LD_ADDR_VAR 0 6
37400: PUSH
37401: LD_VAR 0 6
37405: PPUSH
37406: LD_VAR 0 4
37410: PPUSH
37411: CALL_OW 3
37415: ST_TO_ADDR
37416: GO 37316
37418: POP
37419: POP
// j := GetClosestHex ( unit , tmp ) ;
37420: LD_ADDR_VAR 0 5
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: LD_VAR 0 6
37434: PPUSH
37435: CALL 36722 0 2
37439: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37440: LD_VAR 0 1
37444: PPUSH
37445: LD_VAR 0 5
37449: PUSH
37450: LD_INT 1
37452: ARRAY
37453: PPUSH
37454: LD_VAR 0 5
37458: PUSH
37459: LD_INT 2
37461: ARRAY
37462: PPUSH
37463: CALL_OW 111
// end ;
37467: LD_VAR 0 3
37471: RET
// export function PrepareApemanSoldier ( ) ; begin
37472: LD_INT 0
37474: PPUSH
// uc_nation := 0 ;
37475: LD_ADDR_OWVAR 21
37479: PUSH
37480: LD_INT 0
37482: ST_TO_ADDR
// hc_sex := sex_male ;
37483: LD_ADDR_OWVAR 27
37487: PUSH
37488: LD_INT 1
37490: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37491: LD_ADDR_OWVAR 28
37495: PUSH
37496: LD_INT 15
37498: ST_TO_ADDR
// hc_gallery :=  ;
37499: LD_ADDR_OWVAR 33
37503: PUSH
37504: LD_STRING 
37506: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37507: LD_ADDR_OWVAR 31
37511: PUSH
37512: LD_INT 0
37514: PPUSH
37515: LD_INT 3
37517: PPUSH
37518: CALL_OW 12
37522: PUSH
37523: LD_INT 0
37525: PPUSH
37526: LD_INT 3
37528: PPUSH
37529: CALL_OW 12
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: ST_TO_ADDR
// end ;
37546: LD_VAR 0 1
37550: RET
// export function PrepareApemanEngineer ( ) ; begin
37551: LD_INT 0
37553: PPUSH
// uc_nation := 0 ;
37554: LD_ADDR_OWVAR 21
37558: PUSH
37559: LD_INT 0
37561: ST_TO_ADDR
// hc_sex := sex_male ;
37562: LD_ADDR_OWVAR 27
37566: PUSH
37567: LD_INT 1
37569: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37570: LD_ADDR_OWVAR 28
37574: PUSH
37575: LD_INT 16
37577: ST_TO_ADDR
// hc_gallery :=  ;
37578: LD_ADDR_OWVAR 33
37582: PUSH
37583: LD_STRING 
37585: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37586: LD_ADDR_OWVAR 31
37590: PUSH
37591: LD_INT 0
37593: PPUSH
37594: LD_INT 3
37596: PPUSH
37597: CALL_OW 12
37601: PUSH
37602: LD_INT 0
37604: PPUSH
37605: LD_INT 3
37607: PPUSH
37608: CALL_OW 12
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// end ;
37625: LD_VAR 0 1
37629: RET
// export function PrepareApeman ( agressivity ) ; begin
37630: LD_INT 0
37632: PPUSH
// uc_side := 0 ;
37633: LD_ADDR_OWVAR 20
37637: PUSH
37638: LD_INT 0
37640: ST_TO_ADDR
// uc_nation := 0 ;
37641: LD_ADDR_OWVAR 21
37645: PUSH
37646: LD_INT 0
37648: ST_TO_ADDR
// hc_sex := sex_male ;
37649: LD_ADDR_OWVAR 27
37653: PUSH
37654: LD_INT 1
37656: ST_TO_ADDR
// hc_class := class_apeman ;
37657: LD_ADDR_OWVAR 28
37661: PUSH
37662: LD_INT 12
37664: ST_TO_ADDR
// hc_gallery :=  ;
37665: LD_ADDR_OWVAR 33
37669: PUSH
37670: LD_STRING 
37672: ST_TO_ADDR
// if agressivity = 0 then
37673: LD_VAR 0 1
37677: PUSH
37678: LD_INT 0
37680: EQUAL
37681: IFFALSE 37693
// hc_agressivity := 0 else
37683: LD_ADDR_OWVAR 35
37687: PUSH
37688: LD_INT 0
37690: ST_TO_ADDR
37691: GO 37714
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37693: LD_ADDR_OWVAR 35
37697: PUSH
37698: LD_VAR 0 1
37702: NEG
37703: PPUSH
37704: LD_VAR 0 1
37708: PPUSH
37709: CALL_OW 12
37713: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37714: LD_ADDR_OWVAR 31
37718: PUSH
37719: LD_INT 0
37721: PPUSH
37722: LD_INT 3
37724: PPUSH
37725: CALL_OW 12
37729: PUSH
37730: LD_INT 0
37732: PPUSH
37733: LD_INT 3
37735: PPUSH
37736: CALL_OW 12
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// end ;
37753: LD_VAR 0 2
37757: RET
// export function PrepareTiger ( agressivity ) ; begin
37758: LD_INT 0
37760: PPUSH
// uc_side := 0 ;
37761: LD_ADDR_OWVAR 20
37765: PUSH
37766: LD_INT 0
37768: ST_TO_ADDR
// uc_nation := 0 ;
37769: LD_ADDR_OWVAR 21
37773: PUSH
37774: LD_INT 0
37776: ST_TO_ADDR
// hc_class := class_tiger ;
37777: LD_ADDR_OWVAR 28
37781: PUSH
37782: LD_INT 14
37784: ST_TO_ADDR
// hc_gallery :=  ;
37785: LD_ADDR_OWVAR 33
37789: PUSH
37790: LD_STRING 
37792: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37793: LD_ADDR_OWVAR 35
37797: PUSH
37798: LD_VAR 0 1
37802: NEG
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 12
37813: ST_TO_ADDR
// end ;
37814: LD_VAR 0 2
37818: RET
// export function PrepareEnchidna ( ) ; begin
37819: LD_INT 0
37821: PPUSH
// uc_side := 0 ;
37822: LD_ADDR_OWVAR 20
37826: PUSH
37827: LD_INT 0
37829: ST_TO_ADDR
// uc_nation := 0 ;
37830: LD_ADDR_OWVAR 21
37834: PUSH
37835: LD_INT 0
37837: ST_TO_ADDR
// hc_class := class_baggie ;
37838: LD_ADDR_OWVAR 28
37842: PUSH
37843: LD_INT 13
37845: ST_TO_ADDR
// hc_gallery :=  ;
37846: LD_ADDR_OWVAR 33
37850: PUSH
37851: LD_STRING 
37853: ST_TO_ADDR
// end ;
37854: LD_VAR 0 1
37858: RET
// export function PrepareFrog ( ) ; begin
37859: LD_INT 0
37861: PPUSH
// uc_side := 0 ;
37862: LD_ADDR_OWVAR 20
37866: PUSH
37867: LD_INT 0
37869: ST_TO_ADDR
// uc_nation := 0 ;
37870: LD_ADDR_OWVAR 21
37874: PUSH
37875: LD_INT 0
37877: ST_TO_ADDR
// hc_class := class_frog ;
37878: LD_ADDR_OWVAR 28
37882: PUSH
37883: LD_INT 19
37885: ST_TO_ADDR
// hc_gallery :=  ;
37886: LD_ADDR_OWVAR 33
37890: PUSH
37891: LD_STRING 
37893: ST_TO_ADDR
// end ;
37894: LD_VAR 0 1
37898: RET
// export function PrepareFish ( ) ; begin
37899: LD_INT 0
37901: PPUSH
// uc_side := 0 ;
37902: LD_ADDR_OWVAR 20
37906: PUSH
37907: LD_INT 0
37909: ST_TO_ADDR
// uc_nation := 0 ;
37910: LD_ADDR_OWVAR 21
37914: PUSH
37915: LD_INT 0
37917: ST_TO_ADDR
// hc_class := class_fish ;
37918: LD_ADDR_OWVAR 28
37922: PUSH
37923: LD_INT 20
37925: ST_TO_ADDR
// hc_gallery :=  ;
37926: LD_ADDR_OWVAR 33
37930: PUSH
37931: LD_STRING 
37933: ST_TO_ADDR
// end ;
37934: LD_VAR 0 1
37938: RET
// export function PrepareBird ( ) ; begin
37939: LD_INT 0
37941: PPUSH
// uc_side := 0 ;
37942: LD_ADDR_OWVAR 20
37946: PUSH
37947: LD_INT 0
37949: ST_TO_ADDR
// uc_nation := 0 ;
37950: LD_ADDR_OWVAR 21
37954: PUSH
37955: LD_INT 0
37957: ST_TO_ADDR
// hc_class := class_phororhacos ;
37958: LD_ADDR_OWVAR 28
37962: PUSH
37963: LD_INT 18
37965: ST_TO_ADDR
// hc_gallery :=  ;
37966: LD_ADDR_OWVAR 33
37970: PUSH
37971: LD_STRING 
37973: ST_TO_ADDR
// end ;
37974: LD_VAR 0 1
37978: RET
// export function PrepareHorse ( ) ; begin
37979: LD_INT 0
37981: PPUSH
// uc_side := 0 ;
37982: LD_ADDR_OWVAR 20
37986: PUSH
37987: LD_INT 0
37989: ST_TO_ADDR
// uc_nation := 0 ;
37990: LD_ADDR_OWVAR 21
37994: PUSH
37995: LD_INT 0
37997: ST_TO_ADDR
// hc_class := class_horse ;
37998: LD_ADDR_OWVAR 28
38002: PUSH
38003: LD_INT 21
38005: ST_TO_ADDR
// hc_gallery :=  ;
38006: LD_ADDR_OWVAR 33
38010: PUSH
38011: LD_STRING 
38013: ST_TO_ADDR
// end ;
38014: LD_VAR 0 1
38018: RET
// export function PrepareMastodont ( ) ; begin
38019: LD_INT 0
38021: PPUSH
// uc_side := 0 ;
38022: LD_ADDR_OWVAR 20
38026: PUSH
38027: LD_INT 0
38029: ST_TO_ADDR
// uc_nation := 0 ;
38030: LD_ADDR_OWVAR 21
38034: PUSH
38035: LD_INT 0
38037: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38038: LD_ADDR_OWVAR 37
38042: PUSH
38043: LD_INT 31
38045: ST_TO_ADDR
// vc_control := control_rider ;
38046: LD_ADDR_OWVAR 38
38050: PUSH
38051: LD_INT 4
38053: ST_TO_ADDR
// end ;
38054: LD_VAR 0 1
38058: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38059: LD_INT 0
38061: PPUSH
38062: PPUSH
38063: PPUSH
// uc_side = 0 ;
38064: LD_ADDR_OWVAR 20
38068: PUSH
38069: LD_INT 0
38071: ST_TO_ADDR
// uc_nation = 0 ;
38072: LD_ADDR_OWVAR 21
38076: PUSH
38077: LD_INT 0
38079: ST_TO_ADDR
// InitHc_All ( ) ;
38080: CALL_OW 584
// InitVc ;
38084: CALL_OW 20
// if mastodonts then
38088: LD_VAR 0 6
38092: IFFALSE 38159
// for i = 1 to mastodonts do
38094: LD_ADDR_VAR 0 11
38098: PUSH
38099: DOUBLE
38100: LD_INT 1
38102: DEC
38103: ST_TO_ADDR
38104: LD_VAR 0 6
38108: PUSH
38109: FOR_TO
38110: IFFALSE 38157
// begin vc_chassis := 31 ;
38112: LD_ADDR_OWVAR 37
38116: PUSH
38117: LD_INT 31
38119: ST_TO_ADDR
// vc_control := control_rider ;
38120: LD_ADDR_OWVAR 38
38124: PUSH
38125: LD_INT 4
38127: ST_TO_ADDR
// animal := CreateVehicle ;
38128: LD_ADDR_VAR 0 12
38132: PUSH
38133: CALL_OW 45
38137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38138: LD_VAR 0 12
38142: PPUSH
38143: LD_VAR 0 8
38147: PPUSH
38148: LD_INT 0
38150: PPUSH
38151: CALL 40287 0 3
// end ;
38155: GO 38109
38157: POP
38158: POP
// if horses then
38159: LD_VAR 0 5
38163: IFFALSE 38230
// for i = 1 to horses do
38165: LD_ADDR_VAR 0 11
38169: PUSH
38170: DOUBLE
38171: LD_INT 1
38173: DEC
38174: ST_TO_ADDR
38175: LD_VAR 0 5
38179: PUSH
38180: FOR_TO
38181: IFFALSE 38228
// begin hc_class := 21 ;
38183: LD_ADDR_OWVAR 28
38187: PUSH
38188: LD_INT 21
38190: ST_TO_ADDR
// hc_gallery :=  ;
38191: LD_ADDR_OWVAR 33
38195: PUSH
38196: LD_STRING 
38198: ST_TO_ADDR
// animal := CreateHuman ;
38199: LD_ADDR_VAR 0 12
38203: PUSH
38204: CALL_OW 44
38208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38209: LD_VAR 0 12
38213: PPUSH
38214: LD_VAR 0 8
38218: PPUSH
38219: LD_INT 0
38221: PPUSH
38222: CALL 40287 0 3
// end ;
38226: GO 38180
38228: POP
38229: POP
// if birds then
38230: LD_VAR 0 1
38234: IFFALSE 38301
// for i = 1 to birds do
38236: LD_ADDR_VAR 0 11
38240: PUSH
38241: DOUBLE
38242: LD_INT 1
38244: DEC
38245: ST_TO_ADDR
38246: LD_VAR 0 1
38250: PUSH
38251: FOR_TO
38252: IFFALSE 38299
// begin hc_class := 18 ;
38254: LD_ADDR_OWVAR 28
38258: PUSH
38259: LD_INT 18
38261: ST_TO_ADDR
// hc_gallery =  ;
38262: LD_ADDR_OWVAR 33
38266: PUSH
38267: LD_STRING 
38269: ST_TO_ADDR
// animal := CreateHuman ;
38270: LD_ADDR_VAR 0 12
38274: PUSH
38275: CALL_OW 44
38279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38280: LD_VAR 0 12
38284: PPUSH
38285: LD_VAR 0 8
38289: PPUSH
38290: LD_INT 0
38292: PPUSH
38293: CALL 40287 0 3
// end ;
38297: GO 38251
38299: POP
38300: POP
// if tigers then
38301: LD_VAR 0 2
38305: IFFALSE 38389
// for i = 1 to tigers do
38307: LD_ADDR_VAR 0 11
38311: PUSH
38312: DOUBLE
38313: LD_INT 1
38315: DEC
38316: ST_TO_ADDR
38317: LD_VAR 0 2
38321: PUSH
38322: FOR_TO
38323: IFFALSE 38387
// begin hc_class = class_tiger ;
38325: LD_ADDR_OWVAR 28
38329: PUSH
38330: LD_INT 14
38332: ST_TO_ADDR
// hc_gallery =  ;
38333: LD_ADDR_OWVAR 33
38337: PUSH
38338: LD_STRING 
38340: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38341: LD_ADDR_OWVAR 35
38345: PUSH
38346: LD_INT 7
38348: NEG
38349: PPUSH
38350: LD_INT 7
38352: PPUSH
38353: CALL_OW 12
38357: ST_TO_ADDR
// animal := CreateHuman ;
38358: LD_ADDR_VAR 0 12
38362: PUSH
38363: CALL_OW 44
38367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38368: LD_VAR 0 12
38372: PPUSH
38373: LD_VAR 0 8
38377: PPUSH
38378: LD_INT 0
38380: PPUSH
38381: CALL 40287 0 3
// end ;
38385: GO 38322
38387: POP
38388: POP
// if apemans then
38389: LD_VAR 0 3
38393: IFFALSE 38516
// for i = 1 to apemans do
38395: LD_ADDR_VAR 0 11
38399: PUSH
38400: DOUBLE
38401: LD_INT 1
38403: DEC
38404: ST_TO_ADDR
38405: LD_VAR 0 3
38409: PUSH
38410: FOR_TO
38411: IFFALSE 38514
// begin hc_class = class_apeman ;
38413: LD_ADDR_OWVAR 28
38417: PUSH
38418: LD_INT 12
38420: ST_TO_ADDR
// hc_gallery =  ;
38421: LD_ADDR_OWVAR 33
38425: PUSH
38426: LD_STRING 
38428: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38429: LD_ADDR_OWVAR 35
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PPUSH
38438: LD_INT 2
38440: PPUSH
38441: CALL_OW 12
38445: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38446: LD_ADDR_OWVAR 31
38450: PUSH
38451: LD_INT 1
38453: PPUSH
38454: LD_INT 3
38456: PPUSH
38457: CALL_OW 12
38461: PUSH
38462: LD_INT 1
38464: PPUSH
38465: LD_INT 3
38467: PPUSH
38468: CALL_OW 12
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: ST_TO_ADDR
// animal := CreateHuman ;
38485: LD_ADDR_VAR 0 12
38489: PUSH
38490: CALL_OW 44
38494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38495: LD_VAR 0 12
38499: PPUSH
38500: LD_VAR 0 8
38504: PPUSH
38505: LD_INT 0
38507: PPUSH
38508: CALL 40287 0 3
// end ;
38512: GO 38410
38514: POP
38515: POP
// if enchidnas then
38516: LD_VAR 0 4
38520: IFFALSE 38587
// for i = 1 to enchidnas do
38522: LD_ADDR_VAR 0 11
38526: PUSH
38527: DOUBLE
38528: LD_INT 1
38530: DEC
38531: ST_TO_ADDR
38532: LD_VAR 0 4
38536: PUSH
38537: FOR_TO
38538: IFFALSE 38585
// begin hc_class = 13 ;
38540: LD_ADDR_OWVAR 28
38544: PUSH
38545: LD_INT 13
38547: ST_TO_ADDR
// hc_gallery =  ;
38548: LD_ADDR_OWVAR 33
38552: PUSH
38553: LD_STRING 
38555: ST_TO_ADDR
// animal := CreateHuman ;
38556: LD_ADDR_VAR 0 12
38560: PUSH
38561: CALL_OW 44
38565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38566: LD_VAR 0 12
38570: PPUSH
38571: LD_VAR 0 8
38575: PPUSH
38576: LD_INT 0
38578: PPUSH
38579: CALL 40287 0 3
// end ;
38583: GO 38537
38585: POP
38586: POP
// if fishes then
38587: LD_VAR 0 7
38591: IFFALSE 38658
// for i = 1 to fishes do
38593: LD_ADDR_VAR 0 11
38597: PUSH
38598: DOUBLE
38599: LD_INT 1
38601: DEC
38602: ST_TO_ADDR
38603: LD_VAR 0 7
38607: PUSH
38608: FOR_TO
38609: IFFALSE 38656
// begin hc_class = 20 ;
38611: LD_ADDR_OWVAR 28
38615: PUSH
38616: LD_INT 20
38618: ST_TO_ADDR
// hc_gallery =  ;
38619: LD_ADDR_OWVAR 33
38623: PUSH
38624: LD_STRING 
38626: ST_TO_ADDR
// animal := CreateHuman ;
38627: LD_ADDR_VAR 0 12
38631: PUSH
38632: CALL_OW 44
38636: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38637: LD_VAR 0 12
38641: PPUSH
38642: LD_VAR 0 9
38646: PPUSH
38647: LD_INT 0
38649: PPUSH
38650: CALL 40287 0 3
// end ;
38654: GO 38608
38656: POP
38657: POP
// end ;
38658: LD_VAR 0 10
38662: RET
// export function WantHeal ( sci , unit ) ; begin
38663: LD_INT 0
38665: PPUSH
// if GetTaskList ( sci ) > 0 then
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 437
38675: PUSH
38676: LD_INT 0
38678: GREATER
38679: IFFALSE 38749
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38681: LD_VAR 0 1
38685: PPUSH
38686: CALL_OW 437
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PUSH
38699: LD_STRING l
38701: EQUAL
38702: PUSH
38703: LD_VAR 0 1
38707: PPUSH
38708: CALL_OW 437
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: PUSH
38717: LD_INT 4
38719: ARRAY
38720: PUSH
38721: LD_VAR 0 2
38725: EQUAL
38726: AND
38727: IFFALSE 38739
// result := true else
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 1
38736: ST_TO_ADDR
38737: GO 38747
// result := false ;
38739: LD_ADDR_VAR 0 3
38743: PUSH
38744: LD_INT 0
38746: ST_TO_ADDR
// end else
38747: GO 38757
// result := false ;
38749: LD_ADDR_VAR 0 3
38753: PUSH
38754: LD_INT 0
38756: ST_TO_ADDR
// end ;
38757: LD_VAR 0 3
38761: RET
// export function HealTarget ( sci ) ; begin
38762: LD_INT 0
38764: PPUSH
// if not sci then
38765: LD_VAR 0 1
38769: NOT
38770: IFFALSE 38774
// exit ;
38772: GO 38839
// result := 0 ;
38774: LD_ADDR_VAR 0 2
38778: PUSH
38779: LD_INT 0
38781: ST_TO_ADDR
// if GetTaskList ( sci ) then
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 437
38791: IFFALSE 38839
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 437
38802: PUSH
38803: LD_INT 1
38805: ARRAY
38806: PUSH
38807: LD_INT 1
38809: ARRAY
38810: PUSH
38811: LD_STRING l
38813: EQUAL
38814: IFFALSE 38839
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38816: LD_ADDR_VAR 0 2
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 437
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PUSH
38835: LD_INT 4
38837: ARRAY
38838: ST_TO_ADDR
// end ;
38839: LD_VAR 0 2
38843: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38844: LD_INT 0
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
// if not base_units then
38850: LD_VAR 0 1
38854: NOT
38855: IFFALSE 38859
// exit ;
38857: GO 38946
// result := false ;
38859: LD_ADDR_VAR 0 2
38863: PUSH
38864: LD_INT 0
38866: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: LD_INT 21
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PPUSH
38887: CALL_OW 72
38891: ST_TO_ADDR
// if not tmp then
38892: LD_VAR 0 5
38896: NOT
38897: IFFALSE 38901
// exit ;
38899: GO 38946
// for i in tmp do
38901: LD_ADDR_VAR 0 3
38905: PUSH
38906: LD_VAR 0 5
38910: PUSH
38911: FOR_IN
38912: IFFALSE 38944
// begin result := EnemyInRange ( i , 22 ) ;
38914: LD_ADDR_VAR 0 2
38918: PUSH
38919: LD_VAR 0 3
38923: PPUSH
38924: LD_INT 22
38926: PPUSH
38927: CALL 36524 0 2
38931: ST_TO_ADDR
// if result then
38932: LD_VAR 0 2
38936: IFFALSE 38942
// exit ;
38938: POP
38939: POP
38940: GO 38946
// end ;
38942: GO 38911
38944: POP
38945: POP
// end ;
38946: LD_VAR 0 2
38950: RET
// export function FilterByTag ( units , tag ) ; begin
38951: LD_INT 0
38953: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38954: LD_ADDR_VAR 0 3
38958: PUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_INT 120
38966: PUSH
38967: LD_VAR 0 2
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PPUSH
38976: CALL_OW 72
38980: ST_TO_ADDR
// end ;
38981: LD_VAR 0 3
38985: RET
// export function IsDriver ( un ) ; begin
38986: LD_INT 0
38988: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38989: LD_ADDR_VAR 0 2
38993: PUSH
38994: LD_VAR 0 1
38998: PUSH
38999: LD_INT 55
39001: PUSH
39002: EMPTY
39003: LIST
39004: PPUSH
39005: CALL_OW 69
39009: IN
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 2
39015: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
// list := [ ] ;
39020: LD_ADDR_VAR 0 5
39024: PUSH
39025: EMPTY
39026: ST_TO_ADDR
// case d of 0 :
39027: LD_VAR 0 3
39031: PUSH
39032: LD_INT 0
39034: DOUBLE
39035: EQUAL
39036: IFTRUE 39040
39038: GO 39173
39040: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39041: LD_ADDR_VAR 0 5
39045: PUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_INT 4
39053: MINUS
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 4
39062: MINUS
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: LD_VAR 0 1
39076: PUSH
39077: LD_INT 3
39079: MINUS
39080: PUSH
39081: LD_VAR 0 2
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: PUSH
39094: LD_VAR 0 1
39098: PUSH
39099: LD_INT 4
39101: PLUS
39102: PUSH
39103: LD_VAR 0 2
39107: PUSH
39108: LD_INT 4
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: PUSH
39116: LD_VAR 0 1
39120: PUSH
39121: LD_INT 3
39123: PLUS
39124: PUSH
39125: LD_VAR 0 2
39129: PUSH
39130: LD_INT 3
39132: PLUS
39133: PUSH
39134: LD_INT 5
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: PUSH
39142: LD_VAR 0 1
39146: PUSH
39147: LD_VAR 0 2
39151: PUSH
39152: LD_INT 4
39154: PLUS
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// end ; 1 :
39171: GO 39871
39173: LD_INT 1
39175: DOUBLE
39176: EQUAL
39177: IFTRUE 39181
39179: GO 39314
39181: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_INT 4
39199: MINUS
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: LD_INT 3
39216: MINUS
39217: PUSH
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 3
39225: MINUS
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PUSH
39235: LD_VAR 0 1
39239: PUSH
39240: LD_INT 4
39242: MINUS
39243: PUSH
39244: LD_VAR 0 2
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: PUSH
39257: LD_VAR 0 1
39261: PUSH
39262: LD_VAR 0 2
39266: PUSH
39267: LD_INT 3
39269: PLUS
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: PUSH
39279: LD_VAR 0 1
39283: PUSH
39284: LD_INT 4
39286: PLUS
39287: PUSH
39288: LD_VAR 0 2
39292: PUSH
39293: LD_INT 4
39295: PLUS
39296: PUSH
39297: LD_INT 5
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: ST_TO_ADDR
// end ; 2 :
39312: GO 39871
39314: LD_INT 2
39316: DOUBLE
39317: EQUAL
39318: IFTRUE 39322
39320: GO 39451
39322: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39323: LD_ADDR_VAR 0 5
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_INT 3
39340: MINUS
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 4
39357: PLUS
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 4
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: PUSH
39372: LD_VAR 0 1
39376: PUSH
39377: LD_VAR 0 2
39381: PUSH
39382: LD_INT 4
39384: PLUS
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: PUSH
39394: LD_VAR 0 1
39398: PUSH
39399: LD_INT 3
39401: MINUS
39402: PUSH
39403: LD_VAR 0 2
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: PUSH
39416: LD_VAR 0 1
39420: PUSH
39421: LD_INT 4
39423: MINUS
39424: PUSH
39425: LD_VAR 0 2
39429: PUSH
39430: LD_INT 4
39432: MINUS
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
// end ; 3 :
39449: GO 39871
39451: LD_INT 3
39453: DOUBLE
39454: EQUAL
39455: IFTRUE 39459
39457: GO 39592
39459: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39460: LD_ADDR_VAR 0 5
39464: PUSH
39465: LD_VAR 0 1
39469: PUSH
39470: LD_INT 3
39472: PLUS
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_INT 4
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: PUSH
39487: LD_VAR 0 1
39491: PUSH
39492: LD_INT 4
39494: PLUS
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 4
39503: PLUS
39504: PUSH
39505: LD_INT 5
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: PUSH
39513: LD_VAR 0 1
39517: PUSH
39518: LD_INT 4
39520: MINUS
39521: PUSH
39522: LD_VAR 0 2
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: PUSH
39535: LD_VAR 0 1
39539: PUSH
39540: LD_VAR 0 2
39544: PUSH
39545: LD_INT 4
39547: MINUS
39548: PUSH
39549: LD_INT 3
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: PUSH
39557: LD_VAR 0 1
39561: PUSH
39562: LD_INT 3
39564: MINUS
39565: PUSH
39566: LD_VAR 0 2
39570: PUSH
39571: LD_INT 3
39573: MINUS
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: ST_TO_ADDR
// end ; 4 :
39590: GO 39871
39592: LD_INT 4
39594: DOUBLE
39595: EQUAL
39596: IFTRUE 39600
39598: GO 39733
39600: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39601: LD_ADDR_VAR 0 5
39605: PUSH
39606: LD_VAR 0 1
39610: PUSH
39611: LD_VAR 0 2
39615: PUSH
39616: LD_INT 4
39618: PLUS
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: PUSH
39628: LD_VAR 0 1
39632: PUSH
39633: LD_INT 3
39635: PLUS
39636: PUSH
39637: LD_VAR 0 2
39641: PUSH
39642: LD_INT 3
39644: PLUS
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PUSH
39654: LD_VAR 0 1
39658: PUSH
39659: LD_INT 4
39661: PLUS
39662: PUSH
39663: LD_VAR 0 2
39667: PUSH
39668: LD_INT 4
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: PUSH
39676: LD_VAR 0 1
39680: PUSH
39681: LD_VAR 0 2
39685: PUSH
39686: LD_INT 3
39688: MINUS
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: PUSH
39698: LD_VAR 0 1
39702: PUSH
39703: LD_INT 4
39705: MINUS
39706: PUSH
39707: LD_VAR 0 2
39711: PUSH
39712: LD_INT 4
39714: MINUS
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// end ; 5 :
39731: GO 39871
39733: LD_INT 5
39735: DOUBLE
39736: EQUAL
39737: IFTRUE 39741
39739: GO 39870
39741: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39742: LD_ADDR_VAR 0 5
39746: PUSH
39747: LD_VAR 0 1
39751: PUSH
39752: LD_INT 4
39754: MINUS
39755: PUSH
39756: LD_VAR 0 2
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PUSH
39769: LD_VAR 0 1
39773: PUSH
39774: LD_VAR 0 2
39778: PUSH
39779: LD_INT 4
39781: MINUS
39782: PUSH
39783: LD_INT 3
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: PUSH
39791: LD_VAR 0 1
39795: PUSH
39796: LD_INT 4
39798: PLUS
39799: PUSH
39800: LD_VAR 0 2
39804: PUSH
39805: LD_INT 4
39807: PLUS
39808: PUSH
39809: LD_INT 5
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: PUSH
39817: LD_VAR 0 1
39821: PUSH
39822: LD_INT 3
39824: PLUS
39825: PUSH
39826: LD_VAR 0 2
39830: PUSH
39831: LD_INT 4
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: LD_VAR 0 1
39843: PUSH
39844: LD_VAR 0 2
39848: PUSH
39849: LD_INT 3
39851: PLUS
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: ST_TO_ADDR
// end ; end ;
39868: GO 39871
39870: POP
// result := list ;
39871: LD_ADDR_VAR 0 4
39875: PUSH
39876: LD_VAR 0 5
39880: ST_TO_ADDR
// end ;
39881: LD_VAR 0 4
39885: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39886: LD_INT 0
39888: PPUSH
39889: PPUSH
39890: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39891: LD_VAR 0 1
39895: NOT
39896: PUSH
39897: LD_VAR 0 2
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: LD_INT 4
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: IN
39920: NOT
39921: OR
39922: IFFALSE 39926
// exit ;
39924: GO 40009
// tmp := [ ] ;
39926: LD_ADDR_VAR 0 5
39930: PUSH
39931: EMPTY
39932: ST_TO_ADDR
// for i in units do
39933: LD_ADDR_VAR 0 4
39937: PUSH
39938: LD_VAR 0 1
39942: PUSH
39943: FOR_IN
39944: IFFALSE 39978
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39946: LD_ADDR_VAR 0 5
39950: PUSH
39951: LD_VAR 0 5
39955: PPUSH
39956: LD_VAR 0 4
39960: PPUSH
39961: LD_VAR 0 2
39965: PPUSH
39966: CALL_OW 259
39970: PPUSH
39971: CALL 41382 0 2
39975: ST_TO_ADDR
39976: GO 39943
39978: POP
39979: POP
// if not tmp then
39980: LD_VAR 0 5
39984: NOT
39985: IFFALSE 39989
// exit ;
39987: GO 40009
// result := SortListByListDesc ( units , tmp ) ;
39989: LD_ADDR_VAR 0 3
39993: PUSH
39994: LD_VAR 0 1
39998: PPUSH
39999: LD_VAR 0 5
40003: PPUSH
40004: CALL_OW 77
40008: ST_TO_ADDR
// end ;
40009: LD_VAR 0 3
40013: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40014: LD_INT 0
40016: PPUSH
40017: PPUSH
40018: PPUSH
// result := false ;
40019: LD_ADDR_VAR 0 3
40023: PUSH
40024: LD_INT 0
40026: ST_TO_ADDR
// if not building then
40027: LD_VAR 0 2
40031: NOT
40032: IFFALSE 40036
// exit ;
40034: GO 40174
// x := GetX ( building ) ;
40036: LD_ADDR_VAR 0 4
40040: PUSH
40041: LD_VAR 0 2
40045: PPUSH
40046: CALL_OW 250
40050: ST_TO_ADDR
// y := GetY ( building ) ;
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: LD_VAR 0 2
40060: PPUSH
40061: CALL_OW 251
40065: ST_TO_ADDR
// if not x or not y then
40066: LD_VAR 0 4
40070: NOT
40071: PUSH
40072: LD_VAR 0 5
40076: NOT
40077: OR
40078: IFFALSE 40082
// exit ;
40080: GO 40174
// if GetTaskList ( unit ) then
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 437
40091: IFFALSE 40174
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40093: LD_STRING e
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 437
40105: PUSH
40106: LD_INT 1
40108: ARRAY
40109: PUSH
40110: LD_INT 1
40112: ARRAY
40113: EQUAL
40114: PUSH
40115: LD_VAR 0 4
40119: PUSH
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL_OW 437
40129: PUSH
40130: LD_INT 1
40132: ARRAY
40133: PUSH
40134: LD_INT 2
40136: ARRAY
40137: EQUAL
40138: AND
40139: PUSH
40140: LD_VAR 0 5
40144: PUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 437
40154: PUSH
40155: LD_INT 1
40157: ARRAY
40158: PUSH
40159: LD_INT 3
40161: ARRAY
40162: EQUAL
40163: AND
40164: IFFALSE 40174
// result := true end ;
40166: LD_ADDR_VAR 0 3
40170: PUSH
40171: LD_INT 1
40173: ST_TO_ADDR
// end ;
40174: LD_VAR 0 3
40178: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40179: LD_INT 0
40181: PPUSH
// result := false ;
40182: LD_ADDR_VAR 0 4
40186: PUSH
40187: LD_INT 0
40189: ST_TO_ADDR
// if GetTaskList ( unit ) then
40190: LD_VAR 0 1
40194: PPUSH
40195: CALL_OW 437
40199: IFFALSE 40282
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40201: LD_STRING M
40203: PUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 437
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: PUSH
40218: LD_INT 1
40220: ARRAY
40221: EQUAL
40222: PUSH
40223: LD_VAR 0 2
40227: PUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: CALL_OW 437
40237: PUSH
40238: LD_INT 1
40240: ARRAY
40241: PUSH
40242: LD_INT 2
40244: ARRAY
40245: EQUAL
40246: AND
40247: PUSH
40248: LD_VAR 0 3
40252: PUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 437
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PUSH
40267: LD_INT 3
40269: ARRAY
40270: EQUAL
40271: AND
40272: IFFALSE 40282
// result := true ;
40274: LD_ADDR_VAR 0 4
40278: PUSH
40279: LD_INT 1
40281: ST_TO_ADDR
// end ; end ;
40282: LD_VAR 0 4
40286: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40287: LD_INT 0
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
// if not unit or not area then
40293: LD_VAR 0 1
40297: NOT
40298: PUSH
40299: LD_VAR 0 2
40303: NOT
40304: OR
40305: IFFALSE 40309
// exit ;
40307: GO 40485
// tmp := AreaToList ( area , i ) ;
40309: LD_ADDR_VAR 0 6
40313: PUSH
40314: LD_VAR 0 2
40318: PPUSH
40319: LD_VAR 0 5
40323: PPUSH
40324: CALL_OW 517
40328: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40329: LD_ADDR_VAR 0 5
40333: PUSH
40334: DOUBLE
40335: LD_INT 1
40337: DEC
40338: ST_TO_ADDR
40339: LD_VAR 0 6
40343: PUSH
40344: LD_INT 1
40346: ARRAY
40347: PUSH
40348: FOR_TO
40349: IFFALSE 40483
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40351: LD_ADDR_VAR 0 7
40355: PUSH
40356: LD_VAR 0 6
40360: PUSH
40361: LD_INT 1
40363: ARRAY
40364: PUSH
40365: LD_VAR 0 5
40369: ARRAY
40370: PUSH
40371: LD_VAR 0 6
40375: PUSH
40376: LD_INT 2
40378: ARRAY
40379: PUSH
40380: LD_VAR 0 5
40384: ARRAY
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40390: LD_INT 92
40392: PUSH
40393: LD_VAR 0 7
40397: PUSH
40398: LD_INT 1
40400: ARRAY
40401: PUSH
40402: LD_VAR 0 7
40406: PUSH
40407: LD_INT 2
40409: ARRAY
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: PPUSH
40420: CALL_OW 69
40424: PUSH
40425: LD_INT 0
40427: EQUAL
40428: IFFALSE 40481
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40430: LD_VAR 0 1
40434: PPUSH
40435: LD_VAR 0 7
40439: PUSH
40440: LD_INT 1
40442: ARRAY
40443: PPUSH
40444: LD_VAR 0 7
40448: PUSH
40449: LD_INT 2
40451: ARRAY
40452: PPUSH
40453: LD_VAR 0 3
40457: PPUSH
40458: CALL_OW 48
// result := IsPlaced ( unit ) ;
40462: LD_ADDR_VAR 0 4
40466: PUSH
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 305
40476: ST_TO_ADDR
// exit ;
40477: POP
40478: POP
40479: GO 40485
// end ; end ;
40481: GO 40348
40483: POP
40484: POP
// end ;
40485: LD_VAR 0 4
40489: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40490: LD_INT 0
40492: PPUSH
40493: PPUSH
40494: PPUSH
// if not side or side > 8 then
40495: LD_VAR 0 1
40499: NOT
40500: PUSH
40501: LD_VAR 0 1
40505: PUSH
40506: LD_INT 8
40508: GREATER
40509: OR
40510: IFFALSE 40514
// exit ;
40512: GO 40701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40514: LD_ADDR_VAR 0 4
40518: PUSH
40519: LD_INT 22
40521: PUSH
40522: LD_VAR 0 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 21
40533: PUSH
40534: LD_INT 3
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PPUSH
40545: CALL_OW 69
40549: ST_TO_ADDR
// if not tmp then
40550: LD_VAR 0 4
40554: NOT
40555: IFFALSE 40559
// exit ;
40557: GO 40701
// enable_addtolog := true ;
40559: LD_ADDR_OWVAR 81
40563: PUSH
40564: LD_INT 1
40566: ST_TO_ADDR
// AddToLog ( [ ) ;
40567: LD_STRING [
40569: PPUSH
40570: CALL_OW 561
// for i in tmp do
40574: LD_ADDR_VAR 0 3
40578: PUSH
40579: LD_VAR 0 4
40583: PUSH
40584: FOR_IN
40585: IFFALSE 40692
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40587: LD_STRING [
40589: PUSH
40590: LD_VAR 0 3
40594: PPUSH
40595: CALL_OW 266
40599: STR
40600: PUSH
40601: LD_STRING , 
40603: STR
40604: PUSH
40605: LD_VAR 0 3
40609: PPUSH
40610: CALL_OW 250
40614: STR
40615: PUSH
40616: LD_STRING , 
40618: STR
40619: PUSH
40620: LD_VAR 0 3
40624: PPUSH
40625: CALL_OW 251
40629: STR
40630: PUSH
40631: LD_STRING , 
40633: STR
40634: PUSH
40635: LD_VAR 0 3
40639: PPUSH
40640: CALL_OW 254
40644: STR
40645: PUSH
40646: LD_STRING , 
40648: STR
40649: PUSH
40650: LD_VAR 0 3
40654: PPUSH
40655: LD_INT 1
40657: PPUSH
40658: CALL_OW 268
40662: STR
40663: PUSH
40664: LD_STRING , 
40666: STR
40667: PUSH
40668: LD_VAR 0 3
40672: PPUSH
40673: LD_INT 2
40675: PPUSH
40676: CALL_OW 268
40680: STR
40681: PUSH
40682: LD_STRING ],
40684: STR
40685: PPUSH
40686: CALL_OW 561
// end ;
40690: GO 40584
40692: POP
40693: POP
// AddToLog ( ]; ) ;
40694: LD_STRING ];
40696: PPUSH
40697: CALL_OW 561
// end ;
40701: LD_VAR 0 2
40705: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40706: LD_INT 0
40708: PPUSH
40709: PPUSH
40710: PPUSH
40711: PPUSH
40712: PPUSH
// if not area or not rate or not max then
40713: LD_VAR 0 1
40717: NOT
40718: PUSH
40719: LD_VAR 0 2
40723: NOT
40724: OR
40725: PUSH
40726: LD_VAR 0 4
40730: NOT
40731: OR
40732: IFFALSE 40736
// exit ;
40734: GO 40925
// while 1 do
40736: LD_INT 1
40738: IFFALSE 40925
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40740: LD_ADDR_VAR 0 9
40744: PUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: LD_INT 1
40752: PPUSH
40753: CALL_OW 287
40757: PUSH
40758: LD_INT 10
40760: MUL
40761: ST_TO_ADDR
// r := rate / 10 ;
40762: LD_ADDR_VAR 0 7
40766: PUSH
40767: LD_VAR 0 2
40771: PUSH
40772: LD_INT 10
40774: DIVREAL
40775: ST_TO_ADDR
// time := 1 1$00 ;
40776: LD_ADDR_VAR 0 8
40780: PUSH
40781: LD_INT 2100
40783: ST_TO_ADDR
// if amount < min then
40784: LD_VAR 0 9
40788: PUSH
40789: LD_VAR 0 3
40793: LESS
40794: IFFALSE 40812
// r := r * 2 else
40796: LD_ADDR_VAR 0 7
40800: PUSH
40801: LD_VAR 0 7
40805: PUSH
40806: LD_INT 2
40808: MUL
40809: ST_TO_ADDR
40810: GO 40838
// if amount > max then
40812: LD_VAR 0 9
40816: PUSH
40817: LD_VAR 0 4
40821: GREATER
40822: IFFALSE 40838
// r := r / 2 ;
40824: LD_ADDR_VAR 0 7
40828: PUSH
40829: LD_VAR 0 7
40833: PUSH
40834: LD_INT 2
40836: DIVREAL
40837: ST_TO_ADDR
// time := time / r ;
40838: LD_ADDR_VAR 0 8
40842: PUSH
40843: LD_VAR 0 8
40847: PUSH
40848: LD_VAR 0 7
40852: DIVREAL
40853: ST_TO_ADDR
// if time < 0 then
40854: LD_VAR 0 8
40858: PUSH
40859: LD_INT 0
40861: LESS
40862: IFFALSE 40879
// time := time * - 1 ;
40864: LD_ADDR_VAR 0 8
40868: PUSH
40869: LD_VAR 0 8
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: MUL
40878: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40879: LD_VAR 0 8
40883: PUSH
40884: LD_INT 35
40886: PPUSH
40887: LD_INT 875
40889: PPUSH
40890: CALL_OW 12
40894: PLUS
40895: PPUSH
40896: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40900: LD_INT 1
40902: PPUSH
40903: LD_INT 5
40905: PPUSH
40906: CALL_OW 12
40910: PPUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_INT 1
40918: PPUSH
40919: CALL_OW 55
// end ;
40923: GO 40736
// end ;
40925: LD_VAR 0 5
40929: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40930: LD_INT 0
40932: PPUSH
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
// if not turrets or not factories then
40940: LD_VAR 0 1
40944: NOT
40945: PUSH
40946: LD_VAR 0 2
40950: NOT
40951: OR
40952: IFFALSE 40956
// exit ;
40954: GO 41263
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40956: LD_ADDR_VAR 0 10
40960: PUSH
40961: LD_INT 5
40963: PUSH
40964: LD_INT 6
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 4
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: LD_INT 5
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 24
40998: PUSH
40999: LD_INT 25
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 23
41008: PUSH
41009: LD_INT 27
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 42
41022: PUSH
41023: LD_INT 43
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 44
41032: PUSH
41033: LD_INT 46
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 45
41042: PUSH
41043: LD_INT 47
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// result := [ ] ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: EMPTY
41066: ST_TO_ADDR
// for i in turrets do
41067: LD_ADDR_VAR 0 4
41071: PUSH
41072: LD_VAR 0 1
41076: PUSH
41077: FOR_IN
41078: IFFALSE 41261
// begin nat := GetNation ( i ) ;
41080: LD_ADDR_VAR 0 7
41084: PUSH
41085: LD_VAR 0 4
41089: PPUSH
41090: CALL_OW 248
41094: ST_TO_ADDR
// weapon := 0 ;
41095: LD_ADDR_VAR 0 8
41099: PUSH
41100: LD_INT 0
41102: ST_TO_ADDR
// if not nat then
41103: LD_VAR 0 7
41107: NOT
41108: IFFALSE 41112
// continue ;
41110: GO 41077
// for j in list [ nat ] do
41112: LD_ADDR_VAR 0 5
41116: PUSH
41117: LD_VAR 0 10
41121: PUSH
41122: LD_VAR 0 7
41126: ARRAY
41127: PUSH
41128: FOR_IN
41129: IFFALSE 41170
// if GetBWeapon ( i ) = j [ 1 ] then
41131: LD_VAR 0 4
41135: PPUSH
41136: CALL_OW 269
41140: PUSH
41141: LD_VAR 0 5
41145: PUSH
41146: LD_INT 1
41148: ARRAY
41149: EQUAL
41150: IFFALSE 41168
// begin weapon := j [ 2 ] ;
41152: LD_ADDR_VAR 0 8
41156: PUSH
41157: LD_VAR 0 5
41161: PUSH
41162: LD_INT 2
41164: ARRAY
41165: ST_TO_ADDR
// break ;
41166: GO 41170
// end ;
41168: GO 41128
41170: POP
41171: POP
// if not weapon then
41172: LD_VAR 0 8
41176: NOT
41177: IFFALSE 41181
// continue ;
41179: GO 41077
// for k in factories do
41181: LD_ADDR_VAR 0 6
41185: PUSH
41186: LD_VAR 0 2
41190: PUSH
41191: FOR_IN
41192: IFFALSE 41257
// begin weapons := AvailableWeaponList ( k ) ;
41194: LD_ADDR_VAR 0 9
41198: PUSH
41199: LD_VAR 0 6
41203: PPUSH
41204: CALL_OW 478
41208: ST_TO_ADDR
// if not weapons then
41209: LD_VAR 0 9
41213: NOT
41214: IFFALSE 41218
// continue ;
41216: GO 41191
// if weapon in weapons then
41218: LD_VAR 0 8
41222: PUSH
41223: LD_VAR 0 9
41227: IN
41228: IFFALSE 41255
// begin result := [ i , weapon ] ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 4
41239: PUSH
41240: LD_VAR 0 8
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: ST_TO_ADDR
// exit ;
41249: POP
41250: POP
41251: POP
41252: POP
41253: GO 41263
// end ; end ;
41255: GO 41191
41257: POP
41258: POP
// end ;
41259: GO 41077
41261: POP
41262: POP
// end ;
41263: LD_VAR 0 3
41267: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41268: LD_INT 0
41270: PPUSH
// if not side or side > 8 then
41271: LD_VAR 0 3
41275: NOT
41276: PUSH
41277: LD_VAR 0 3
41281: PUSH
41282: LD_INT 8
41284: GREATER
41285: OR
41286: IFFALSE 41290
// exit ;
41288: GO 41349
// if not range then
41290: LD_VAR 0 4
41294: NOT
41295: IFFALSE 41306
// range := - 12 ;
41297: LD_ADDR_VAR 0 4
41301: PUSH
41302: LD_INT 12
41304: NEG
41305: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41306: LD_VAR 0 1
41310: PPUSH
41311: LD_VAR 0 2
41315: PPUSH
41316: LD_VAR 0 3
41320: PPUSH
41321: LD_VAR 0 4
41325: PPUSH
41326: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41330: LD_VAR 0 1
41334: PPUSH
41335: LD_VAR 0 2
41339: PPUSH
41340: LD_VAR 0 3
41344: PPUSH
41345: CALL_OW 331
// end ;
41349: LD_VAR 0 5
41353: RET
// export function Video ( mode ) ; begin
41354: LD_INT 0
41356: PPUSH
// ingame_video = mode ;
41357: LD_ADDR_OWVAR 52
41361: PUSH
41362: LD_VAR 0 1
41366: ST_TO_ADDR
// interface_hidden = mode ;
41367: LD_ADDR_OWVAR 54
41371: PUSH
41372: LD_VAR 0 1
41376: ST_TO_ADDR
// end ;
41377: LD_VAR 0 2
41381: RET
// export function Join ( array , element ) ; begin
41382: LD_INT 0
41384: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41385: LD_ADDR_VAR 0 3
41389: PUSH
41390: LD_VAR 0 1
41394: PPUSH
41395: LD_VAR 0 1
41399: PUSH
41400: LD_INT 1
41402: PLUS
41403: PPUSH
41404: LD_VAR 0 2
41408: PPUSH
41409: CALL_OW 1
41413: ST_TO_ADDR
// end ;
41414: LD_VAR 0 3
41418: RET
// export function JoinUnion ( array , element ) ; begin
41419: LD_INT 0
41421: PPUSH
// result := array union element ;
41422: LD_ADDR_VAR 0 3
41426: PUSH
41427: LD_VAR 0 1
41431: PUSH
41432: LD_VAR 0 2
41436: UNION
41437: ST_TO_ADDR
// end ;
41438: LD_VAR 0 3
41442: RET
// export function GetBehemoths ( side ) ; begin
41443: LD_INT 0
41445: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41446: LD_ADDR_VAR 0 2
41450: PUSH
41451: LD_INT 22
41453: PUSH
41454: LD_VAR 0 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 31
41465: PUSH
41466: LD_INT 25
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PPUSH
41477: CALL_OW 69
41481: ST_TO_ADDR
// end ;
41482: LD_VAR 0 2
41486: RET
// export function Shuffle ( array ) ; var i , index ; begin
41487: LD_INT 0
41489: PPUSH
41490: PPUSH
41491: PPUSH
// result := [ ] ;
41492: LD_ADDR_VAR 0 2
41496: PUSH
41497: EMPTY
41498: ST_TO_ADDR
// if not array then
41499: LD_VAR 0 1
41503: NOT
41504: IFFALSE 41508
// exit ;
41506: GO 41607
// Randomize ;
41508: CALL_OW 10
// for i = array downto 1 do
41512: LD_ADDR_VAR 0 3
41516: PUSH
41517: DOUBLE
41518: LD_VAR 0 1
41522: INC
41523: ST_TO_ADDR
41524: LD_INT 1
41526: PUSH
41527: FOR_DOWNTO
41528: IFFALSE 41605
// begin index := rand ( 1 , array ) ;
41530: LD_ADDR_VAR 0 4
41534: PUSH
41535: LD_INT 1
41537: PPUSH
41538: LD_VAR 0 1
41542: PPUSH
41543: CALL_OW 12
41547: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41548: LD_ADDR_VAR 0 2
41552: PUSH
41553: LD_VAR 0 2
41557: PPUSH
41558: LD_VAR 0 2
41562: PUSH
41563: LD_INT 1
41565: PLUS
41566: PPUSH
41567: LD_VAR 0 1
41571: PUSH
41572: LD_VAR 0 4
41576: ARRAY
41577: PPUSH
41578: CALL_OW 2
41582: ST_TO_ADDR
// array := Delete ( array , index ) ;
41583: LD_ADDR_VAR 0 1
41587: PUSH
41588: LD_VAR 0 1
41592: PPUSH
41593: LD_VAR 0 4
41597: PPUSH
41598: CALL_OW 3
41602: ST_TO_ADDR
// end ;
41603: GO 41527
41605: POP
41606: POP
// end ;
41607: LD_VAR 0 2
41611: RET
// export function GetBaseMaterials ( base ) ; begin
41612: LD_INT 0
41614: PPUSH
// result := [ 0 , 0 , 0 ] ;
41615: LD_ADDR_VAR 0 2
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: ST_TO_ADDR
// if not base then
41634: LD_VAR 0 1
41638: NOT
41639: IFFALSE 41643
// exit ;
41641: GO 41692
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41643: LD_ADDR_VAR 0 2
41647: PUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: LD_INT 1
41655: PPUSH
41656: CALL_OW 275
41660: PUSH
41661: LD_VAR 0 1
41665: PPUSH
41666: LD_INT 2
41668: PPUSH
41669: CALL_OW 275
41673: PUSH
41674: LD_VAR 0 1
41678: PPUSH
41679: LD_INT 3
41681: PPUSH
41682: CALL_OW 275
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: ST_TO_ADDR
// end ;
41692: LD_VAR 0 2
41696: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41697: LD_INT 0
41699: PPUSH
41700: PPUSH
// result := array ;
41701: LD_ADDR_VAR 0 3
41705: PUSH
41706: LD_VAR 0 1
41710: ST_TO_ADDR
// if size >= result then
41711: LD_VAR 0 2
41715: PUSH
41716: LD_VAR 0 3
41720: GREATEREQUAL
41721: IFFALSE 41725
// exit ;
41723: GO 41775
// if size then
41725: LD_VAR 0 2
41729: IFFALSE 41775
// for i := array downto size do
41731: LD_ADDR_VAR 0 4
41735: PUSH
41736: DOUBLE
41737: LD_VAR 0 1
41741: INC
41742: ST_TO_ADDR
41743: LD_VAR 0 2
41747: PUSH
41748: FOR_DOWNTO
41749: IFFALSE 41773
// result := Delete ( result , result ) ;
41751: LD_ADDR_VAR 0 3
41755: PUSH
41756: LD_VAR 0 3
41760: PPUSH
41761: LD_VAR 0 3
41765: PPUSH
41766: CALL_OW 3
41770: ST_TO_ADDR
41771: GO 41748
41773: POP
41774: POP
// end ;
41775: LD_VAR 0 3
41779: RET
// export function ComExit ( unit ) ; var tmp ; begin
41780: LD_INT 0
41782: PPUSH
41783: PPUSH
// if not IsInUnit ( unit ) then
41784: LD_VAR 0 1
41788: PPUSH
41789: CALL_OW 310
41793: NOT
41794: IFFALSE 41798
// exit ;
41796: GO 41858
// tmp := IsInUnit ( unit ) ;
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 310
41812: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41813: LD_VAR 0 3
41817: PPUSH
41818: CALL_OW 247
41822: PUSH
41823: LD_INT 2
41825: EQUAL
41826: IFFALSE 41839
// ComExitVehicle ( unit ) else
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 121
41837: GO 41848
// ComExitBuilding ( unit ) ;
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 122
// result := tmp ;
41848: LD_ADDR_VAR 0 2
41852: PUSH
41853: LD_VAR 0 3
41857: ST_TO_ADDR
// end ;
41858: LD_VAR 0 2
41862: RET
// export function ComExitAll ( units ) ; var i ; begin
41863: LD_INT 0
41865: PPUSH
41866: PPUSH
// if not units then
41867: LD_VAR 0 1
41871: NOT
41872: IFFALSE 41876
// exit ;
41874: GO 41902
// for i in units do
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_VAR 0 1
41885: PUSH
41886: FOR_IN
41887: IFFALSE 41900
// ComExit ( i ) ;
41889: LD_VAR 0 3
41893: PPUSH
41894: CALL 41780 0 1
41898: GO 41886
41900: POP
41901: POP
// end ;
41902: LD_VAR 0 2
41906: RET
// export function ResetHc ; begin
41907: LD_INT 0
41909: PPUSH
// InitHc ;
41910: CALL_OW 19
// hc_importance := 0 ;
41914: LD_ADDR_OWVAR 32
41918: PUSH
41919: LD_INT 0
41921: ST_TO_ADDR
// end ;
41922: LD_VAR 0 1
41926: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41927: LD_INT 0
41929: PPUSH
41930: PPUSH
41931: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41932: LD_ADDR_VAR 0 6
41936: PUSH
41937: LD_VAR 0 1
41941: PUSH
41942: LD_VAR 0 3
41946: PLUS
41947: PUSH
41948: LD_INT 2
41950: DIV
41951: ST_TO_ADDR
// if _x < 0 then
41952: LD_VAR 0 6
41956: PUSH
41957: LD_INT 0
41959: LESS
41960: IFFALSE 41977
// _x := _x * - 1 ;
41962: LD_ADDR_VAR 0 6
41966: PUSH
41967: LD_VAR 0 6
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: MUL
41976: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41977: LD_ADDR_VAR 0 7
41981: PUSH
41982: LD_VAR 0 2
41986: PUSH
41987: LD_VAR 0 4
41991: PLUS
41992: PUSH
41993: LD_INT 2
41995: DIV
41996: ST_TO_ADDR
// if _y < 0 then
41997: LD_VAR 0 7
42001: PUSH
42002: LD_INT 0
42004: LESS
42005: IFFALSE 42022
// _y := _y * - 1 ;
42007: LD_ADDR_VAR 0 7
42011: PUSH
42012: LD_VAR 0 7
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: MUL
42021: ST_TO_ADDR
// result := [ _x , _y ] ;
42022: LD_ADDR_VAR 0 5
42026: PUSH
42027: LD_VAR 0 6
42031: PUSH
42032: LD_VAR 0 7
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// end ;
42041: LD_VAR 0 5
42045: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42046: LD_INT 0
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
// task := GetTaskList ( unit ) ;
42052: LD_ADDR_VAR 0 7
42056: PUSH
42057: LD_VAR 0 1
42061: PPUSH
42062: CALL_OW 437
42066: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42067: LD_VAR 0 7
42071: NOT
42072: PUSH
42073: LD_VAR 0 1
42077: PPUSH
42078: LD_VAR 0 2
42082: PPUSH
42083: CALL_OW 308
42087: NOT
42088: AND
42089: IFFALSE 42093
// exit ;
42091: GO 42211
// if IsInArea ( unit , area ) then
42093: LD_VAR 0 1
42097: PPUSH
42098: LD_VAR 0 2
42102: PPUSH
42103: CALL_OW 308
42107: IFFALSE 42125
// begin ComMoveToArea ( unit , goAway ) ;
42109: LD_VAR 0 1
42113: PPUSH
42114: LD_VAR 0 3
42118: PPUSH
42119: CALL_OW 113
// exit ;
42123: GO 42211
// end ; if task [ 1 ] [ 1 ] <> M then
42125: LD_VAR 0 7
42129: PUSH
42130: LD_INT 1
42132: ARRAY
42133: PUSH
42134: LD_INT 1
42136: ARRAY
42137: PUSH
42138: LD_STRING M
42140: NONEQUAL
42141: IFFALSE 42145
// exit ;
42143: GO 42211
// x := task [ 1 ] [ 2 ] ;
42145: LD_ADDR_VAR 0 5
42149: PUSH
42150: LD_VAR 0 7
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PUSH
42159: LD_INT 2
42161: ARRAY
42162: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42163: LD_ADDR_VAR 0 6
42167: PUSH
42168: LD_VAR 0 7
42172: PUSH
42173: LD_INT 1
42175: ARRAY
42176: PUSH
42177: LD_INT 3
42179: ARRAY
42180: ST_TO_ADDR
// if InArea ( x , y , area ) then
42181: LD_VAR 0 5
42185: PPUSH
42186: LD_VAR 0 6
42190: PPUSH
42191: LD_VAR 0 2
42195: PPUSH
42196: CALL_OW 309
42200: IFFALSE 42211
// ComStop ( unit ) ;
42202: LD_VAR 0 1
42206: PPUSH
42207: CALL_OW 141
// end ;
42211: LD_VAR 0 4
42215: RET
// export function Abs ( value ) ; begin
42216: LD_INT 0
42218: PPUSH
// result := value ;
42219: LD_ADDR_VAR 0 2
42223: PUSH
42224: LD_VAR 0 1
42228: ST_TO_ADDR
// if value < 0 then
42229: LD_VAR 0 1
42233: PUSH
42234: LD_INT 0
42236: LESS
42237: IFFALSE 42254
// result := value * - 1 ;
42239: LD_ADDR_VAR 0 2
42243: PUSH
42244: LD_VAR 0 1
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: MUL
42253: ST_TO_ADDR
// end ;
42254: LD_VAR 0 2
42258: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42259: LD_INT 0
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
// if not unit or not building then
42269: LD_VAR 0 1
42273: NOT
42274: PUSH
42275: LD_VAR 0 2
42279: NOT
42280: OR
42281: IFFALSE 42285
// exit ;
42283: GO 42511
// x := GetX ( building ) ;
42285: LD_ADDR_VAR 0 4
42289: PUSH
42290: LD_VAR 0 2
42294: PPUSH
42295: CALL_OW 250
42299: ST_TO_ADDR
// y := GetY ( building ) ;
42300: LD_ADDR_VAR 0 6
42304: PUSH
42305: LD_VAR 0 2
42309: PPUSH
42310: CALL_OW 251
42314: ST_TO_ADDR
// d := GetDir ( building ) ;
42315: LD_ADDR_VAR 0 8
42319: PUSH
42320: LD_VAR 0 2
42324: PPUSH
42325: CALL_OW 254
42329: ST_TO_ADDR
// r := 4 ;
42330: LD_ADDR_VAR 0 9
42334: PUSH
42335: LD_INT 4
42337: ST_TO_ADDR
// for i := 1 to 5 do
42338: LD_ADDR_VAR 0 10
42342: PUSH
42343: DOUBLE
42344: LD_INT 1
42346: DEC
42347: ST_TO_ADDR
42348: LD_INT 5
42350: PUSH
42351: FOR_TO
42352: IFFALSE 42509
// begin _x := ShiftX ( x , d , r + i ) ;
42354: LD_ADDR_VAR 0 5
42358: PUSH
42359: LD_VAR 0 4
42363: PPUSH
42364: LD_VAR 0 8
42368: PPUSH
42369: LD_VAR 0 9
42373: PUSH
42374: LD_VAR 0 10
42378: PLUS
42379: PPUSH
42380: CALL_OW 272
42384: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42385: LD_ADDR_VAR 0 7
42389: PUSH
42390: LD_VAR 0 6
42394: PPUSH
42395: LD_VAR 0 8
42399: PPUSH
42400: LD_VAR 0 9
42404: PUSH
42405: LD_VAR 0 10
42409: PLUS
42410: PPUSH
42411: CALL_OW 273
42415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42416: LD_VAR 0 5
42420: PPUSH
42421: LD_VAR 0 7
42425: PPUSH
42426: CALL_OW 488
42430: PUSH
42431: LD_VAR 0 5
42435: PPUSH
42436: LD_VAR 0 7
42440: PPUSH
42441: CALL_OW 428
42445: PPUSH
42446: CALL_OW 247
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: IN
42461: NOT
42462: AND
42463: IFFALSE 42507
// begin ComMoveXY ( unit , _x , _y ) ;
42465: LD_VAR 0 1
42469: PPUSH
42470: LD_VAR 0 5
42474: PPUSH
42475: LD_VAR 0 7
42479: PPUSH
42480: CALL_OW 111
// result := [ _x , _y ] ;
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: LD_VAR 0 5
42493: PUSH
42494: LD_VAR 0 7
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: ST_TO_ADDR
// exit ;
42503: POP
42504: POP
42505: GO 42511
// end ; end ;
42507: GO 42351
42509: POP
42510: POP
// end ;
42511: LD_VAR 0 3
42515: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42516: LD_INT 0
42518: PPUSH
42519: PPUSH
42520: PPUSH
// result := 0 ;
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_INT 0
42528: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42529: LD_VAR 0 1
42533: PUSH
42534: LD_INT 0
42536: LESS
42537: PUSH
42538: LD_VAR 0 1
42542: PUSH
42543: LD_INT 8
42545: GREATER
42546: OR
42547: PUSH
42548: LD_VAR 0 2
42552: PUSH
42553: LD_INT 0
42555: LESS
42556: OR
42557: PUSH
42558: LD_VAR 0 2
42562: PUSH
42563: LD_INT 8
42565: GREATER
42566: OR
42567: IFFALSE 42571
// exit ;
42569: GO 42646
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42571: LD_ADDR_VAR 0 4
42575: PUSH
42576: LD_INT 22
42578: PUSH
42579: LD_VAR 0 2
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PPUSH
42588: CALL_OW 69
42592: PUSH
42593: FOR_IN
42594: IFFALSE 42644
// begin un := UnitShoot ( i ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: CALL_OW 504
42610: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42611: LD_VAR 0 5
42615: PPUSH
42616: CALL_OW 255
42620: PUSH
42621: LD_VAR 0 1
42625: EQUAL
42626: IFFALSE 42642
// begin result := un ;
42628: LD_ADDR_VAR 0 3
42632: PUSH
42633: LD_VAR 0 5
42637: ST_TO_ADDR
// exit ;
42638: POP
42639: POP
42640: GO 42646
// end ; end ;
42642: GO 42593
42644: POP
42645: POP
// end ;
42646: LD_VAR 0 3
42650: RET
// export function GetCargoBay ( units ) ; begin
42651: LD_INT 0
42653: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42654: LD_ADDR_VAR 0 2
42658: PUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 34
42669: PUSH
42670: LD_INT 12
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 34
42679: PUSH
42680: LD_INT 51
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 34
42689: PUSH
42690: LD_INT 32
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 34
42699: PUSH
42700: LD_INT 89
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: PPUSH
42714: CALL_OW 72
42718: ST_TO_ADDR
// end ;
42719: LD_VAR 0 2
42723: RET
// export function Negate ( value ) ; begin
42724: LD_INT 0
42726: PPUSH
// result := not value ;
42727: LD_ADDR_VAR 0 2
42731: PUSH
42732: LD_VAR 0 1
42736: NOT
42737: ST_TO_ADDR
// end ;
42738: LD_VAR 0 2
42742: RET
// export function Inc ( value ) ; begin
42743: LD_INT 0
42745: PPUSH
// result := value + 1 ;
42746: LD_ADDR_VAR 0 2
42750: PUSH
42751: LD_VAR 0 1
42755: PUSH
42756: LD_INT 1
42758: PLUS
42759: ST_TO_ADDR
// end ;
42760: LD_VAR 0 2
42764: RET
// export function Dec ( value ) ; begin
42765: LD_INT 0
42767: PPUSH
// result := value - 1 ;
42768: LD_ADDR_VAR 0 2
42772: PUSH
42773: LD_VAR 0 1
42777: PUSH
42778: LD_INT 1
42780: MINUS
42781: ST_TO_ADDR
// end ;
42782: LD_VAR 0 2
42786: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42787: LD_INT 0
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_VAR 0 2
42806: PPUSH
42807: CALL_OW 488
42811: NOT
42812: PUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: LD_VAR 0 4
42822: PPUSH
42823: CALL_OW 488
42827: NOT
42828: OR
42829: IFFALSE 42842
// begin result := - 1 ;
42831: LD_ADDR_VAR 0 5
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: ST_TO_ADDR
// exit ;
42840: GO 43077
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42842: LD_ADDR_VAR 0 12
42846: PUSH
42847: LD_VAR 0 1
42851: PPUSH
42852: LD_VAR 0 2
42856: PPUSH
42857: LD_VAR 0 3
42861: PPUSH
42862: LD_VAR 0 4
42866: PPUSH
42867: CALL 41927 0 4
42871: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42872: LD_ADDR_VAR 0 11
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: LD_VAR 0 2
42886: PPUSH
42887: LD_VAR 0 12
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: LD_VAR 0 12
42900: PUSH
42901: LD_INT 2
42903: ARRAY
42904: PPUSH
42905: CALL_OW 298
42909: ST_TO_ADDR
// distance := 9999 ;
42910: LD_ADDR_VAR 0 10
42914: PUSH
42915: LD_INT 9999
42917: ST_TO_ADDR
// for i := 0 to 5 do
42918: LD_ADDR_VAR 0 6
42922: PUSH
42923: DOUBLE
42924: LD_INT 0
42926: DEC
42927: ST_TO_ADDR
42928: LD_INT 5
42930: PUSH
42931: FOR_TO
42932: IFFALSE 43075
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42934: LD_ADDR_VAR 0 7
42938: PUSH
42939: LD_VAR 0 1
42943: PPUSH
42944: LD_VAR 0 6
42948: PPUSH
42949: LD_VAR 0 11
42953: PPUSH
42954: CALL_OW 272
42958: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42959: LD_ADDR_VAR 0 8
42963: PUSH
42964: LD_VAR 0 2
42968: PPUSH
42969: LD_VAR 0 6
42973: PPUSH
42974: LD_VAR 0 11
42978: PPUSH
42979: CALL_OW 273
42983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42984: LD_VAR 0 7
42988: PPUSH
42989: LD_VAR 0 8
42993: PPUSH
42994: CALL_OW 488
42998: NOT
42999: IFFALSE 43003
// continue ;
43001: GO 42931
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43003: LD_ADDR_VAR 0 9
43007: PUSH
43008: LD_VAR 0 12
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PPUSH
43017: LD_VAR 0 12
43021: PUSH
43022: LD_INT 2
43024: ARRAY
43025: PPUSH
43026: LD_VAR 0 7
43030: PPUSH
43031: LD_VAR 0 8
43035: PPUSH
43036: CALL_OW 298
43040: ST_TO_ADDR
// if tmp < distance then
43041: LD_VAR 0 9
43045: PUSH
43046: LD_VAR 0 10
43050: LESS
43051: IFFALSE 43073
// begin result := i ;
43053: LD_ADDR_VAR 0 5
43057: PUSH
43058: LD_VAR 0 6
43062: ST_TO_ADDR
// distance := tmp ;
43063: LD_ADDR_VAR 0 10
43067: PUSH
43068: LD_VAR 0 9
43072: ST_TO_ADDR
// end ; end ;
43073: GO 42931
43075: POP
43076: POP
// end ;
43077: LD_VAR 0 5
43081: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43082: LD_INT 0
43084: PPUSH
43085: PPUSH
// if not driver or not IsInUnit ( driver ) then
43086: LD_VAR 0 1
43090: NOT
43091: PUSH
43092: LD_VAR 0 1
43096: PPUSH
43097: CALL_OW 310
43101: NOT
43102: OR
43103: IFFALSE 43107
// exit ;
43105: GO 43197
// vehicle := IsInUnit ( driver ) ;
43107: LD_ADDR_VAR 0 3
43111: PUSH
43112: LD_VAR 0 1
43116: PPUSH
43117: CALL_OW 310
43121: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43122: LD_VAR 0 1
43126: PPUSH
43127: LD_STRING \
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: PUSH
43157: LD_STRING E
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_VAR 0 3
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PPUSH
43193: CALL_OW 446
// end ;
43197: LD_VAR 0 2
43201: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43202: LD_INT 0
43204: PPUSH
43205: PPUSH
// if not driver or not IsInUnit ( driver ) then
43206: LD_VAR 0 1
43210: NOT
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 310
43221: NOT
43222: OR
43223: IFFALSE 43227
// exit ;
43225: GO 43317
// vehicle := IsInUnit ( driver ) ;
43227: LD_ADDR_VAR 0 3
43231: PUSH
43232: LD_VAR 0 1
43236: PPUSH
43237: CALL_OW 310
43241: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_STRING \
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: PUSH
43277: LD_STRING E
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_VAR 0 3
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PPUSH
43313: CALL_OW 447
// end ;
43317: LD_VAR 0 2
43321: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43322: LD_INT 0
43324: PPUSH
43325: PPUSH
43326: PPUSH
// tmp := [ ] ;
43327: LD_ADDR_VAR 0 5
43331: PUSH
43332: EMPTY
43333: ST_TO_ADDR
// for i in units do
43334: LD_ADDR_VAR 0 4
43338: PUSH
43339: LD_VAR 0 1
43343: PUSH
43344: FOR_IN
43345: IFFALSE 43383
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43347: LD_ADDR_VAR 0 5
43351: PUSH
43352: LD_VAR 0 5
43356: PPUSH
43357: LD_VAR 0 5
43361: PUSH
43362: LD_INT 1
43364: PLUS
43365: PPUSH
43366: LD_VAR 0 4
43370: PPUSH
43371: CALL_OW 256
43375: PPUSH
43376: CALL_OW 2
43380: ST_TO_ADDR
43381: GO 43344
43383: POP
43384: POP
// if not tmp then
43385: LD_VAR 0 5
43389: NOT
43390: IFFALSE 43394
// exit ;
43392: GO 43442
// if asc then
43394: LD_VAR 0 2
43398: IFFALSE 43422
// result := SortListByListAsc ( units , tmp ) else
43400: LD_ADDR_VAR 0 3
43404: PUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: LD_VAR 0 5
43414: PPUSH
43415: CALL_OW 76
43419: ST_TO_ADDR
43420: GO 43442
// result := SortListByListDesc ( units , tmp ) ;
43422: LD_ADDR_VAR 0 3
43426: PUSH
43427: LD_VAR 0 1
43431: PPUSH
43432: LD_VAR 0 5
43436: PPUSH
43437: CALL_OW 77
43441: ST_TO_ADDR
// end ;
43442: LD_VAR 0 3
43446: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43447: LD_INT 0
43449: PPUSH
43450: PPUSH
// task := GetTaskList ( mech ) ;
43451: LD_ADDR_VAR 0 4
43455: PUSH
43456: LD_VAR 0 1
43460: PPUSH
43461: CALL_OW 437
43465: ST_TO_ADDR
// if not task then
43466: LD_VAR 0 4
43470: NOT
43471: IFFALSE 43475
// exit ;
43473: GO 43517
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43475: LD_ADDR_VAR 0 3
43479: PUSH
43480: LD_VAR 0 4
43484: PUSH
43485: LD_INT 1
43487: ARRAY
43488: PUSH
43489: LD_INT 1
43491: ARRAY
43492: PUSH
43493: LD_STRING r
43495: EQUAL
43496: PUSH
43497: LD_VAR 0 4
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: PUSH
43506: LD_INT 4
43508: ARRAY
43509: PUSH
43510: LD_VAR 0 2
43514: EQUAL
43515: AND
43516: ST_TO_ADDR
// end ;
43517: LD_VAR 0 3
43521: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43522: LD_INT 0
43524: PPUSH
// SetDir ( unit , d ) ;
43525: LD_VAR 0 1
43529: PPUSH
43530: LD_VAR 0 4
43534: PPUSH
43535: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43539: LD_VAR 0 1
43543: PPUSH
43544: LD_VAR 0 2
43548: PPUSH
43549: LD_VAR 0 3
43553: PPUSH
43554: LD_VAR 0 5
43558: PPUSH
43559: CALL_OW 48
// end ;
43563: LD_VAR 0 6
43567: RET
// export function ToNaturalNumber ( number ) ; begin
43568: LD_INT 0
43570: PPUSH
// result := number div 1 ;
43571: LD_ADDR_VAR 0 2
43575: PUSH
43576: LD_VAR 0 1
43580: PUSH
43581: LD_INT 1
43583: DIV
43584: ST_TO_ADDR
// if number < 0 then
43585: LD_VAR 0 1
43589: PUSH
43590: LD_INT 0
43592: LESS
43593: IFFALSE 43603
// result := 0 ;
43595: LD_ADDR_VAR 0 2
43599: PUSH
43600: LD_INT 0
43602: ST_TO_ADDR
// end ;
43603: LD_VAR 0 2
43607: RET
// export function SortByClass ( units , class ) ; var un ; begin
43608: LD_INT 0
43610: PPUSH
43611: PPUSH
// if not units or not class then
43612: LD_VAR 0 1
43616: NOT
43617: PUSH
43618: LD_VAR 0 2
43622: NOT
43623: OR
43624: IFFALSE 43628
// exit ;
43626: GO 43723
// result := [ ] ;
43628: LD_ADDR_VAR 0 3
43632: PUSH
43633: EMPTY
43634: ST_TO_ADDR
// for un in units do
43635: LD_ADDR_VAR 0 4
43639: PUSH
43640: LD_VAR 0 1
43644: PUSH
43645: FOR_IN
43646: IFFALSE 43721
// if GetClass ( un ) = class then
43648: LD_VAR 0 4
43652: PPUSH
43653: CALL_OW 257
43657: PUSH
43658: LD_VAR 0 2
43662: EQUAL
43663: IFFALSE 43690
// result := Insert ( result , 1 , un ) else
43665: LD_ADDR_VAR 0 3
43669: PUSH
43670: LD_VAR 0 3
43674: PPUSH
43675: LD_INT 1
43677: PPUSH
43678: LD_VAR 0 4
43682: PPUSH
43683: CALL_OW 2
43687: ST_TO_ADDR
43688: GO 43719
// result := Replace ( result , result + 1 , un ) ;
43690: LD_ADDR_VAR 0 3
43694: PUSH
43695: LD_VAR 0 3
43699: PPUSH
43700: LD_VAR 0 3
43704: PUSH
43705: LD_INT 1
43707: PLUS
43708: PPUSH
43709: LD_VAR 0 4
43713: PPUSH
43714: CALL_OW 1
43718: ST_TO_ADDR
43719: GO 43645
43721: POP
43722: POP
// end ;
43723: LD_VAR 0 3
43727: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43728: LD_INT 0
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
43734: PPUSH
43735: PPUSH
43736: PPUSH
// result := [ ] ;
43737: LD_ADDR_VAR 0 4
43741: PUSH
43742: EMPTY
43743: ST_TO_ADDR
// if x - r < 0 then
43744: LD_VAR 0 1
43748: PUSH
43749: LD_VAR 0 3
43753: MINUS
43754: PUSH
43755: LD_INT 0
43757: LESS
43758: IFFALSE 43770
// min_x := 0 else
43760: LD_ADDR_VAR 0 8
43764: PUSH
43765: LD_INT 0
43767: ST_TO_ADDR
43768: GO 43786
// min_x := x - r ;
43770: LD_ADDR_VAR 0 8
43774: PUSH
43775: LD_VAR 0 1
43779: PUSH
43780: LD_VAR 0 3
43784: MINUS
43785: ST_TO_ADDR
// if y - r < 0 then
43786: LD_VAR 0 2
43790: PUSH
43791: LD_VAR 0 3
43795: MINUS
43796: PUSH
43797: LD_INT 0
43799: LESS
43800: IFFALSE 43812
// min_y := 0 else
43802: LD_ADDR_VAR 0 7
43806: PUSH
43807: LD_INT 0
43809: ST_TO_ADDR
43810: GO 43828
// min_y := y - r ;
43812: LD_ADDR_VAR 0 7
43816: PUSH
43817: LD_VAR 0 2
43821: PUSH
43822: LD_VAR 0 3
43826: MINUS
43827: ST_TO_ADDR
// max_x := x + r ;
43828: LD_ADDR_VAR 0 9
43832: PUSH
43833: LD_VAR 0 1
43837: PUSH
43838: LD_VAR 0 3
43842: PLUS
43843: ST_TO_ADDR
// max_y := y + r ;
43844: LD_ADDR_VAR 0 10
43848: PUSH
43849: LD_VAR 0 2
43853: PUSH
43854: LD_VAR 0 3
43858: PLUS
43859: ST_TO_ADDR
// for _x = min_x to max_x do
43860: LD_ADDR_VAR 0 5
43864: PUSH
43865: DOUBLE
43866: LD_VAR 0 8
43870: DEC
43871: ST_TO_ADDR
43872: LD_VAR 0 9
43876: PUSH
43877: FOR_TO
43878: IFFALSE 43979
// for _y = min_y to max_y do
43880: LD_ADDR_VAR 0 6
43884: PUSH
43885: DOUBLE
43886: LD_VAR 0 7
43890: DEC
43891: ST_TO_ADDR
43892: LD_VAR 0 10
43896: PUSH
43897: FOR_TO
43898: IFFALSE 43975
// begin if not ValidHex ( _x , _y ) then
43900: LD_VAR 0 5
43904: PPUSH
43905: LD_VAR 0 6
43909: PPUSH
43910: CALL_OW 488
43914: NOT
43915: IFFALSE 43919
// continue ;
43917: GO 43897
// if GetResourceTypeXY ( _x , _y ) then
43919: LD_VAR 0 5
43923: PPUSH
43924: LD_VAR 0 6
43928: PPUSH
43929: CALL_OW 283
43933: IFFALSE 43973
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43935: LD_ADDR_VAR 0 4
43939: PUSH
43940: LD_VAR 0 4
43944: PPUSH
43945: LD_VAR 0 4
43949: PUSH
43950: LD_INT 1
43952: PLUS
43953: PPUSH
43954: LD_VAR 0 5
43958: PUSH
43959: LD_VAR 0 6
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PPUSH
43968: CALL_OW 1
43972: ST_TO_ADDR
// end ;
43973: GO 43897
43975: POP
43976: POP
43977: GO 43877
43979: POP
43980: POP
// end ;
43981: LD_VAR 0 4
43985: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43986: LD_INT 0
43988: PPUSH
43989: PPUSH
43990: PPUSH
43991: PPUSH
43992: PPUSH
43993: PPUSH
43994: PPUSH
43995: PPUSH
// if not units then
43996: LD_VAR 0 1
44000: NOT
44001: IFFALSE 44005
// exit ;
44003: GO 44533
// result := UnitFilter ( units , [ f_ok ] ) ;
44005: LD_ADDR_VAR 0 3
44009: PUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: LD_INT 50
44017: PUSH
44018: EMPTY
44019: LIST
44020: PPUSH
44021: CALL_OW 72
44025: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44026: LD_ADDR_VAR 0 8
44030: PUSH
44031: LD_VAR 0 1
44035: PUSH
44036: LD_INT 1
44038: ARRAY
44039: PPUSH
44040: CALL_OW 255
44044: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44045: LD_ADDR_VAR 0 10
44049: PUSH
44050: LD_INT 29
44052: PUSH
44053: LD_INT 91
44055: PUSH
44056: LD_INT 49
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: ST_TO_ADDR
// if not result then
44064: LD_VAR 0 3
44068: NOT
44069: IFFALSE 44073
// exit ;
44071: GO 44533
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44073: LD_ADDR_VAR 0 5
44077: PUSH
44078: LD_INT 81
44080: PUSH
44081: LD_VAR 0 8
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PPUSH
44090: CALL_OW 69
44094: ST_TO_ADDR
// for i in result do
44095: LD_ADDR_VAR 0 4
44099: PUSH
44100: LD_VAR 0 3
44104: PUSH
44105: FOR_IN
44106: IFFALSE 44531
// begin tag := GetTag ( i ) + 1 ;
44108: LD_ADDR_VAR 0 9
44112: PUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: CALL_OW 110
44122: PUSH
44123: LD_INT 1
44125: PLUS
44126: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44127: LD_ADDR_VAR 0 7
44131: PUSH
44132: LD_VAR 0 4
44136: PPUSH
44137: CALL_OW 250
44141: PPUSH
44142: LD_VAR 0 4
44146: PPUSH
44147: CALL_OW 251
44151: PPUSH
44152: LD_INT 4
44154: PPUSH
44155: CALL 43728 0 3
44159: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44160: LD_VAR 0 4
44164: PPUSH
44165: CALL_OW 247
44169: PUSH
44170: LD_INT 2
44172: EQUAL
44173: PUSH
44174: LD_VAR 0 7
44178: PUSH
44179: LD_INT 2
44181: GREATER
44182: AND
44183: PUSH
44184: LD_VAR 0 4
44188: PPUSH
44189: CALL_OW 264
44193: PUSH
44194: LD_VAR 0 10
44198: IN
44199: NOT
44200: AND
44201: IFFALSE 44240
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44203: LD_VAR 0 4
44207: PPUSH
44208: LD_VAR 0 7
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: PUSH
44217: LD_INT 1
44219: ARRAY
44220: PPUSH
44221: LD_VAR 0 7
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PUSH
44230: LD_INT 2
44232: ARRAY
44233: PPUSH
44234: CALL_OW 116
44238: GO 44529
// if path > tag then
44240: LD_VAR 0 2
44244: PUSH
44245: LD_VAR 0 9
44249: GREATER
44250: IFFALSE 44458
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44252: LD_ADDR_VAR 0 6
44256: PUSH
44257: LD_VAR 0 5
44261: PPUSH
44262: LD_INT 91
44264: PUSH
44265: LD_VAR 0 4
44269: PUSH
44270: LD_INT 8
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: PPUSH
44278: CALL_OW 72
44282: ST_TO_ADDR
// if nearEnemy then
44283: LD_VAR 0 6
44287: IFFALSE 44356
// begin if GetWeapon ( i ) = ru_time_lapser then
44289: LD_VAR 0 4
44293: PPUSH
44294: CALL_OW 264
44298: PUSH
44299: LD_INT 49
44301: EQUAL
44302: IFFALSE 44330
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44304: LD_VAR 0 4
44308: PPUSH
44309: LD_VAR 0 6
44313: PPUSH
44314: LD_VAR 0 4
44318: PPUSH
44319: CALL_OW 74
44323: PPUSH
44324: CALL_OW 112
44328: GO 44354
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44330: LD_VAR 0 4
44334: PPUSH
44335: LD_VAR 0 6
44339: PPUSH
44340: LD_VAR 0 4
44344: PPUSH
44345: CALL_OW 74
44349: PPUSH
44350: CALL 45604 0 2
// end else
44354: GO 44456
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44356: LD_VAR 0 4
44360: PPUSH
44361: LD_VAR 0 2
44365: PUSH
44366: LD_VAR 0 9
44370: ARRAY
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 2
44380: PUSH
44381: LD_VAR 0 9
44385: ARRAY
44386: PUSH
44387: LD_INT 2
44389: ARRAY
44390: PPUSH
44391: CALL_OW 297
44395: PUSH
44396: LD_INT 6
44398: GREATER
44399: IFFALSE 44442
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44401: LD_VAR 0 4
44405: PPUSH
44406: LD_VAR 0 2
44410: PUSH
44411: LD_VAR 0 9
44415: ARRAY
44416: PUSH
44417: LD_INT 1
44419: ARRAY
44420: PPUSH
44421: LD_VAR 0 2
44425: PUSH
44426: LD_VAR 0 9
44430: ARRAY
44431: PUSH
44432: LD_INT 2
44434: ARRAY
44435: PPUSH
44436: CALL_OW 114
44440: GO 44456
// SetTag ( i , tag ) ;
44442: LD_VAR 0 4
44446: PPUSH
44447: LD_VAR 0 9
44451: PPUSH
44452: CALL_OW 109
// end else
44456: GO 44529
// if enemy then
44458: LD_VAR 0 5
44462: IFFALSE 44529
// begin if GetWeapon ( i ) = ru_time_lapser then
44464: LD_VAR 0 4
44468: PPUSH
44469: CALL_OW 264
44473: PUSH
44474: LD_INT 49
44476: EQUAL
44477: IFFALSE 44505
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44479: LD_VAR 0 4
44483: PPUSH
44484: LD_VAR 0 5
44488: PPUSH
44489: LD_VAR 0 4
44493: PPUSH
44494: CALL_OW 74
44498: PPUSH
44499: CALL_OW 112
44503: GO 44529
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44505: LD_VAR 0 4
44509: PPUSH
44510: LD_VAR 0 5
44514: PPUSH
44515: LD_VAR 0 4
44519: PPUSH
44520: CALL_OW 74
44524: PPUSH
44525: CALL 45604 0 2
// end ; end ;
44529: GO 44105
44531: POP
44532: POP
// end ;
44533: LD_VAR 0 3
44537: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44538: LD_INT 0
44540: PPUSH
44541: PPUSH
44542: PPUSH
// if not unit or IsInUnit ( unit ) then
44543: LD_VAR 0 1
44547: NOT
44548: PUSH
44549: LD_VAR 0 1
44553: PPUSH
44554: CALL_OW 310
44558: OR
44559: IFFALSE 44563
// exit ;
44561: GO 44654
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44563: LD_ADDR_VAR 0 4
44567: PUSH
44568: LD_VAR 0 1
44572: PPUSH
44573: CALL_OW 250
44577: PPUSH
44578: LD_VAR 0 2
44582: PPUSH
44583: LD_INT 1
44585: PPUSH
44586: CALL_OW 272
44590: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44591: LD_ADDR_VAR 0 5
44595: PUSH
44596: LD_VAR 0 1
44600: PPUSH
44601: CALL_OW 251
44605: PPUSH
44606: LD_VAR 0 2
44610: PPUSH
44611: LD_INT 1
44613: PPUSH
44614: CALL_OW 273
44618: ST_TO_ADDR
// if ValidHex ( x , y ) then
44619: LD_VAR 0 4
44623: PPUSH
44624: LD_VAR 0 5
44628: PPUSH
44629: CALL_OW 488
44633: IFFALSE 44654
// ComTurnXY ( unit , x , y ) ;
44635: LD_VAR 0 1
44639: PPUSH
44640: LD_VAR 0 4
44644: PPUSH
44645: LD_VAR 0 5
44649: PPUSH
44650: CALL_OW 118
// end ;
44654: LD_VAR 0 3
44658: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44659: LD_INT 0
44661: PPUSH
44662: PPUSH
// result := false ;
44663: LD_ADDR_VAR 0 3
44667: PUSH
44668: LD_INT 0
44670: ST_TO_ADDR
// if not units then
44671: LD_VAR 0 2
44675: NOT
44676: IFFALSE 44680
// exit ;
44678: GO 44725
// for i in units do
44680: LD_ADDR_VAR 0 4
44684: PUSH
44685: LD_VAR 0 2
44689: PUSH
44690: FOR_IN
44691: IFFALSE 44723
// if See ( side , i ) then
44693: LD_VAR 0 1
44697: PPUSH
44698: LD_VAR 0 4
44702: PPUSH
44703: CALL_OW 292
44707: IFFALSE 44721
// begin result := true ;
44709: LD_ADDR_VAR 0 3
44713: PUSH
44714: LD_INT 1
44716: ST_TO_ADDR
// exit ;
44717: POP
44718: POP
44719: GO 44725
// end ;
44721: GO 44690
44723: POP
44724: POP
// end ;
44725: LD_VAR 0 3
44729: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44730: LD_INT 0
44732: PPUSH
44733: PPUSH
44734: PPUSH
44735: PPUSH
// if not unit or not points then
44736: LD_VAR 0 1
44740: NOT
44741: PUSH
44742: LD_VAR 0 2
44746: NOT
44747: OR
44748: IFFALSE 44752
// exit ;
44750: GO 44842
// dist := 99999 ;
44752: LD_ADDR_VAR 0 5
44756: PUSH
44757: LD_INT 99999
44759: ST_TO_ADDR
// for i in points do
44760: LD_ADDR_VAR 0 4
44764: PUSH
44765: LD_VAR 0 2
44769: PUSH
44770: FOR_IN
44771: IFFALSE 44840
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44773: LD_ADDR_VAR 0 6
44777: PUSH
44778: LD_VAR 0 1
44782: PPUSH
44783: LD_VAR 0 4
44787: PUSH
44788: LD_INT 1
44790: ARRAY
44791: PPUSH
44792: LD_VAR 0 4
44796: PUSH
44797: LD_INT 2
44799: ARRAY
44800: PPUSH
44801: CALL_OW 297
44805: ST_TO_ADDR
// if tmpDist < dist then
44806: LD_VAR 0 6
44810: PUSH
44811: LD_VAR 0 5
44815: LESS
44816: IFFALSE 44838
// begin result := i ;
44818: LD_ADDR_VAR 0 3
44822: PUSH
44823: LD_VAR 0 4
44827: ST_TO_ADDR
// dist := tmpDist ;
44828: LD_ADDR_VAR 0 5
44832: PUSH
44833: LD_VAR 0 6
44837: ST_TO_ADDR
// end ; end ;
44838: GO 44770
44840: POP
44841: POP
// end ;
44842: LD_VAR 0 3
44846: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44847: LD_INT 0
44849: PPUSH
// uc_side := side ;
44850: LD_ADDR_OWVAR 20
44854: PUSH
44855: LD_VAR 0 1
44859: ST_TO_ADDR
// uc_nation := 3 ;
44860: LD_ADDR_OWVAR 21
44864: PUSH
44865: LD_INT 3
44867: ST_TO_ADDR
// vc_chassis := 25 ;
44868: LD_ADDR_OWVAR 37
44872: PUSH
44873: LD_INT 25
44875: ST_TO_ADDR
// vc_engine := engine_siberite ;
44876: LD_ADDR_OWVAR 39
44880: PUSH
44881: LD_INT 3
44883: ST_TO_ADDR
// vc_control := control_computer ;
44884: LD_ADDR_OWVAR 38
44888: PUSH
44889: LD_INT 3
44891: ST_TO_ADDR
// vc_weapon := 59 ;
44892: LD_ADDR_OWVAR 40
44896: PUSH
44897: LD_INT 59
44899: ST_TO_ADDR
// result := CreateVehicle ;
44900: LD_ADDR_VAR 0 5
44904: PUSH
44905: CALL_OW 45
44909: ST_TO_ADDR
// SetDir ( result , d ) ;
44910: LD_VAR 0 5
44914: PPUSH
44915: LD_VAR 0 4
44919: PPUSH
44920: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44924: LD_VAR 0 5
44928: PPUSH
44929: LD_VAR 0 2
44933: PPUSH
44934: LD_VAR 0 3
44938: PPUSH
44939: LD_INT 0
44941: PPUSH
44942: CALL_OW 48
// end ;
44946: LD_VAR 0 5
44950: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44951: LD_INT 0
44953: PPUSH
44954: PPUSH
44955: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44956: LD_ADDR_VAR 0 2
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44979: LD_VAR 0 1
44983: NOT
44984: PUSH
44985: LD_VAR 0 1
44989: PPUSH
44990: CALL_OW 264
44994: PUSH
44995: LD_INT 12
44997: PUSH
44998: LD_INT 51
45000: PUSH
45001: LD_INT 32
45003: PUSH
45004: LD_INT 89
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: IN
45013: NOT
45014: OR
45015: IFFALSE 45019
// exit ;
45017: GO 45117
// for i := 1 to 3 do
45019: LD_ADDR_VAR 0 3
45023: PUSH
45024: DOUBLE
45025: LD_INT 1
45027: DEC
45028: ST_TO_ADDR
45029: LD_INT 3
45031: PUSH
45032: FOR_TO
45033: IFFALSE 45115
// begin tmp := GetCargo ( cargo , i ) ;
45035: LD_ADDR_VAR 0 4
45039: PUSH
45040: LD_VAR 0 1
45044: PPUSH
45045: LD_VAR 0 3
45049: PPUSH
45050: CALL_OW 289
45054: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45055: LD_ADDR_VAR 0 2
45059: PUSH
45060: LD_VAR 0 2
45064: PPUSH
45065: LD_VAR 0 3
45069: PPUSH
45070: LD_VAR 0 4
45074: PPUSH
45075: CALL_OW 1
45079: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45080: LD_ADDR_VAR 0 2
45084: PUSH
45085: LD_VAR 0 2
45089: PPUSH
45090: LD_INT 4
45092: PPUSH
45093: LD_VAR 0 2
45097: PUSH
45098: LD_INT 4
45100: ARRAY
45101: PUSH
45102: LD_VAR 0 4
45106: PLUS
45107: PPUSH
45108: CALL_OW 1
45112: ST_TO_ADDR
// end ;
45113: GO 45032
45115: POP
45116: POP
// end ;
45117: LD_VAR 0 2
45121: RET
// export function Length ( array ) ; begin
45122: LD_INT 0
45124: PPUSH
// result := array + 0 ;
45125: LD_ADDR_VAR 0 2
45129: PUSH
45130: LD_VAR 0 1
45134: PUSH
45135: LD_INT 0
45137: PLUS
45138: ST_TO_ADDR
// end ;
45139: LD_VAR 0 2
45143: RET
// export function PrepareArray ( array ) ; begin
45144: LD_INT 0
45146: PPUSH
// result := array diff 0 ;
45147: LD_ADDR_VAR 0 2
45151: PUSH
45152: LD_VAR 0 1
45156: PUSH
45157: LD_INT 0
45159: DIFF
45160: ST_TO_ADDR
// if not result [ 1 ] then
45161: LD_VAR 0 2
45165: PUSH
45166: LD_INT 1
45168: ARRAY
45169: NOT
45170: IFFALSE 45190
// result := Delete ( result , 1 ) ;
45172: LD_ADDR_VAR 0 2
45176: PUSH
45177: LD_VAR 0 2
45181: PPUSH
45182: LD_INT 1
45184: PPUSH
45185: CALL_OW 3
45189: ST_TO_ADDR
// end ;
45190: LD_VAR 0 2
45194: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45195: LD_INT 0
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
// sibRocketRange := 25 ;
45201: LD_ADDR_VAR 0 6
45205: PUSH
45206: LD_INT 25
45208: ST_TO_ADDR
// result := false ;
45209: LD_ADDR_VAR 0 4
45213: PUSH
45214: LD_INT 0
45216: ST_TO_ADDR
// for i := 0 to 5 do
45217: LD_ADDR_VAR 0 5
45221: PUSH
45222: DOUBLE
45223: LD_INT 0
45225: DEC
45226: ST_TO_ADDR
45227: LD_INT 5
45229: PUSH
45230: FOR_TO
45231: IFFALSE 45298
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45233: LD_VAR 0 1
45237: PPUSH
45238: LD_VAR 0 5
45242: PPUSH
45243: LD_VAR 0 6
45247: PPUSH
45248: CALL_OW 272
45252: PPUSH
45253: LD_VAR 0 2
45257: PPUSH
45258: LD_VAR 0 5
45262: PPUSH
45263: LD_VAR 0 6
45267: PPUSH
45268: CALL_OW 273
45272: PPUSH
45273: LD_VAR 0 3
45277: PPUSH
45278: CALL_OW 309
45282: IFFALSE 45296
// begin result := true ;
45284: LD_ADDR_VAR 0 4
45288: PUSH
45289: LD_INT 1
45291: ST_TO_ADDR
// exit ;
45292: POP
45293: POP
45294: GO 45300
// end ;
45296: GO 45230
45298: POP
45299: POP
// end ;
45300: LD_VAR 0 4
45304: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45305: LD_INT 0
45307: PPUSH
45308: PPUSH
45309: PPUSH
// if btype = b_depot then
45310: LD_VAR 0 2
45314: PUSH
45315: LD_INT 0
45317: EQUAL
45318: IFFALSE 45330
// begin result := true ;
45320: LD_ADDR_VAR 0 3
45324: PUSH
45325: LD_INT 1
45327: ST_TO_ADDR
// exit ;
45328: GO 45446
// end ; pom := GetBase ( depot ) ;
45330: LD_ADDR_VAR 0 4
45334: PUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: CALL_OW 274
45344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45345: LD_ADDR_VAR 0 5
45349: PUSH
45350: LD_VAR 0 2
45354: PPUSH
45355: LD_VAR 0 1
45359: PPUSH
45360: CALL_OW 248
45364: PPUSH
45365: CALL_OW 450
45369: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45370: LD_ADDR_VAR 0 3
45374: PUSH
45375: LD_VAR 0 4
45379: PPUSH
45380: LD_INT 1
45382: PPUSH
45383: CALL_OW 275
45387: PUSH
45388: LD_VAR 0 5
45392: PUSH
45393: LD_INT 1
45395: ARRAY
45396: GREATEREQUAL
45397: PUSH
45398: LD_VAR 0 4
45402: PPUSH
45403: LD_INT 2
45405: PPUSH
45406: CALL_OW 275
45410: PUSH
45411: LD_VAR 0 5
45415: PUSH
45416: LD_INT 2
45418: ARRAY
45419: GREATEREQUAL
45420: AND
45421: PUSH
45422: LD_VAR 0 4
45426: PPUSH
45427: LD_INT 3
45429: PPUSH
45430: CALL_OW 275
45434: PUSH
45435: LD_VAR 0 5
45439: PUSH
45440: LD_INT 3
45442: ARRAY
45443: GREATEREQUAL
45444: AND
45445: ST_TO_ADDR
// end ;
45446: LD_VAR 0 3
45450: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45451: LD_INT 0
45453: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45454: LD_VAR 0 1
45458: PPUSH
45459: LD_VAR 0 2
45463: PPUSH
45464: LD_INT 0
45466: PPUSH
45467: LD_INT 0
45469: PPUSH
45470: LD_INT 1
45472: PPUSH
45473: LD_INT 0
45475: PPUSH
45476: CALL_OW 587
// end ;
45480: LD_VAR 0 3
45484: RET
// export function CenterOnNow ( unit ) ; begin
45485: LD_INT 0
45487: PPUSH
// result := IsInUnit ( unit ) ;
45488: LD_ADDR_VAR 0 2
45492: PUSH
45493: LD_VAR 0 1
45497: PPUSH
45498: CALL_OW 310
45502: ST_TO_ADDR
// if not result then
45503: LD_VAR 0 2
45507: NOT
45508: IFFALSE 45520
// result := unit ;
45510: LD_ADDR_VAR 0 2
45514: PUSH
45515: LD_VAR 0 1
45519: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45520: LD_VAR 0 1
45524: PPUSH
45525: CALL_OW 87
// end ;
45529: LD_VAR 0 2
45533: RET
// export function ComMoveHex ( unit , hex ) ; begin
45534: LD_INT 0
45536: PPUSH
// if not hex then
45537: LD_VAR 0 2
45541: NOT
45542: IFFALSE 45546
// exit ;
45544: GO 45599
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45546: LD_VAR 0 2
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: PPUSH
45555: LD_VAR 0 2
45559: PUSH
45560: LD_INT 2
45562: ARRAY
45563: PPUSH
45564: CALL_OW 428
45568: IFFALSE 45572
// exit ;
45570: GO 45599
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45572: LD_VAR 0 1
45576: PPUSH
45577: LD_VAR 0 2
45581: PUSH
45582: LD_INT 1
45584: ARRAY
45585: PPUSH
45586: LD_VAR 0 2
45590: PUSH
45591: LD_INT 2
45593: ARRAY
45594: PPUSH
45595: CALL_OW 111
// end ;
45599: LD_VAR 0 3
45603: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45604: LD_INT 0
45606: PPUSH
45607: PPUSH
45608: PPUSH
// if not unit or not enemy then
45609: LD_VAR 0 1
45613: NOT
45614: PUSH
45615: LD_VAR 0 2
45619: NOT
45620: OR
45621: IFFALSE 45625
// exit ;
45623: GO 45749
// x := GetX ( enemy ) ;
45625: LD_ADDR_VAR 0 4
45629: PUSH
45630: LD_VAR 0 2
45634: PPUSH
45635: CALL_OW 250
45639: ST_TO_ADDR
// y := GetY ( enemy ) ;
45640: LD_ADDR_VAR 0 5
45644: PUSH
45645: LD_VAR 0 2
45649: PPUSH
45650: CALL_OW 251
45654: ST_TO_ADDR
// if ValidHex ( x , y ) then
45655: LD_VAR 0 4
45659: PPUSH
45660: LD_VAR 0 5
45664: PPUSH
45665: CALL_OW 488
45669: IFFALSE 45749
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45671: LD_VAR 0 2
45675: PPUSH
45676: CALL_OW 247
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: IN
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 255
45701: PPUSH
45702: LD_VAR 0 2
45706: PPUSH
45707: CALL_OW 292
45711: OR
45712: IFFALSE 45730
// ComAttackUnit ( unit , enemy ) else
45714: LD_VAR 0 1
45718: PPUSH
45719: LD_VAR 0 2
45723: PPUSH
45724: CALL_OW 115
45728: GO 45749
// ComAgressiveMove ( unit , x , y ) ;
45730: LD_VAR 0 1
45734: PPUSH
45735: LD_VAR 0 4
45739: PPUSH
45740: LD_VAR 0 5
45744: PPUSH
45745: CALL_OW 114
// end ;
45749: LD_VAR 0 3
45753: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45754: LD_INT 0
45756: PPUSH
45757: PPUSH
45758: PPUSH
// list := AreaToList ( area , 0 ) ;
45759: LD_ADDR_VAR 0 5
45763: PUSH
45764: LD_VAR 0 1
45768: PPUSH
45769: LD_INT 0
45771: PPUSH
45772: CALL_OW 517
45776: ST_TO_ADDR
// if not list then
45777: LD_VAR 0 5
45781: NOT
45782: IFFALSE 45786
// exit ;
45784: GO 45916
// if all then
45786: LD_VAR 0 2
45790: IFFALSE 45878
// begin for i := 1 to list [ 1 ] do
45792: LD_ADDR_VAR 0 4
45796: PUSH
45797: DOUBLE
45798: LD_INT 1
45800: DEC
45801: ST_TO_ADDR
45802: LD_VAR 0 5
45806: PUSH
45807: LD_INT 1
45809: ARRAY
45810: PUSH
45811: FOR_TO
45812: IFFALSE 45874
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45814: LD_ADDR_VAR 0 3
45818: PUSH
45819: LD_VAR 0 3
45823: PPUSH
45824: LD_VAR 0 3
45828: PUSH
45829: LD_INT 1
45831: PLUS
45832: PPUSH
45833: LD_VAR 0 5
45837: PUSH
45838: LD_INT 1
45840: ARRAY
45841: PUSH
45842: LD_VAR 0 4
45846: ARRAY
45847: PUSH
45848: LD_VAR 0 5
45852: PUSH
45853: LD_INT 2
45855: ARRAY
45856: PUSH
45857: LD_VAR 0 4
45861: ARRAY
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PPUSH
45867: CALL_OW 1
45871: ST_TO_ADDR
45872: GO 45811
45874: POP
45875: POP
// exit ;
45876: GO 45916
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45878: LD_ADDR_VAR 0 3
45882: PUSH
45883: LD_VAR 0 5
45887: PUSH
45888: LD_INT 1
45890: ARRAY
45891: PUSH
45892: LD_INT 1
45894: ARRAY
45895: PUSH
45896: LD_VAR 0 5
45900: PUSH
45901: LD_INT 2
45903: ARRAY
45904: PUSH
45905: LD_INT 1
45907: ARRAY
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: ST_TO_ADDR
// end ;
45916: LD_VAR 0 3
45920: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45921: LD_INT 0
45923: PPUSH
45924: PPUSH
// list := AreaToList ( area , 0 ) ;
45925: LD_ADDR_VAR 0 4
45929: PUSH
45930: LD_VAR 0 1
45934: PPUSH
45935: LD_INT 0
45937: PPUSH
45938: CALL_OW 517
45942: ST_TO_ADDR
// if not list then
45943: LD_VAR 0 4
45947: NOT
45948: IFFALSE 45952
// exit ;
45950: GO 45993
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45952: LD_ADDR_VAR 0 3
45956: PUSH
45957: LD_VAR 0 4
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PUSH
45966: LD_INT 1
45968: ARRAY
45969: PUSH
45970: LD_VAR 0 4
45974: PUSH
45975: LD_INT 2
45977: ARRAY
45978: PUSH
45979: LD_INT 1
45981: ARRAY
45982: PUSH
45983: LD_VAR 0 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// end ;
45993: LD_VAR 0 3
45997: RET
// export function First ( array ) ; begin
45998: LD_INT 0
46000: PPUSH
// if not array then
46001: LD_VAR 0 1
46005: NOT
46006: IFFALSE 46010
// exit ;
46008: GO 46024
// result := array [ 1 ] ;
46010: LD_ADDR_VAR 0 2
46014: PUSH
46015: LD_VAR 0 1
46019: PUSH
46020: LD_INT 1
46022: ARRAY
46023: ST_TO_ADDR
// end ;
46024: LD_VAR 0 2
46028: RET
// export function Last ( array ) ; begin
46029: LD_INT 0
46031: PPUSH
// if not array then
46032: LD_VAR 0 1
46036: NOT
46037: IFFALSE 46041
// exit ;
46039: GO 46057
// result := array [ array ] ;
46041: LD_ADDR_VAR 0 2
46045: PUSH
46046: LD_VAR 0 1
46050: PUSH
46051: LD_VAR 0 1
46055: ARRAY
46056: ST_TO_ADDR
// end ;
46057: LD_VAR 0 2
46061: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46062: LD_INT 0
46064: PPUSH
46065: PPUSH
// result := [ ] ;
46066: LD_ADDR_VAR 0 5
46070: PUSH
46071: EMPTY
46072: ST_TO_ADDR
// if not array then
46073: LD_VAR 0 1
46077: NOT
46078: IFFALSE 46082
// exit ;
46080: GO 46194
// for i := 1 to array do
46082: LD_ADDR_VAR 0 6
46086: PUSH
46087: DOUBLE
46088: LD_INT 1
46090: DEC
46091: ST_TO_ADDR
46092: LD_VAR 0 1
46096: PUSH
46097: FOR_TO
46098: IFFALSE 46192
// if array [ i ] [ index ] = value then
46100: LD_VAR 0 1
46104: PUSH
46105: LD_VAR 0 6
46109: ARRAY
46110: PUSH
46111: LD_VAR 0 2
46115: ARRAY
46116: PUSH
46117: LD_VAR 0 3
46121: EQUAL
46122: IFFALSE 46190
// begin if indexColumn then
46124: LD_VAR 0 4
46128: IFFALSE 46164
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46130: LD_ADDR_VAR 0 5
46134: PUSH
46135: LD_VAR 0 5
46139: PPUSH
46140: LD_VAR 0 1
46144: PUSH
46145: LD_VAR 0 6
46149: ARRAY
46150: PUSH
46151: LD_VAR 0 4
46155: ARRAY
46156: PPUSH
46157: CALL 41382 0 2
46161: ST_TO_ADDR
46162: GO 46190
// result := Join ( result , array [ i ] ) ;
46164: LD_ADDR_VAR 0 5
46168: PUSH
46169: LD_VAR 0 5
46173: PPUSH
46174: LD_VAR 0 1
46178: PUSH
46179: LD_VAR 0 6
46183: ARRAY
46184: PPUSH
46185: CALL 41382 0 2
46189: ST_TO_ADDR
// end ;
46190: GO 46097
46192: POP
46193: POP
// end ;
46194: LD_VAR 0 5
46198: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46199: LD_INT 0
46201: PPUSH
// if not vehicles or not parkingPoint then
46202: LD_VAR 0 1
46206: NOT
46207: PUSH
46208: LD_VAR 0 2
46212: NOT
46213: OR
46214: IFFALSE 46218
// exit ;
46216: GO 46316
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46218: LD_ADDR_VAR 0 1
46222: PUSH
46223: LD_VAR 0 1
46227: PPUSH
46228: LD_INT 50
46230: PUSH
46231: EMPTY
46232: LIST
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: LD_INT 92
46239: PUSH
46240: LD_VAR 0 2
46244: PUSH
46245: LD_INT 1
46247: ARRAY
46248: PUSH
46249: LD_VAR 0 2
46253: PUSH
46254: LD_INT 2
46256: ARRAY
46257: PUSH
46258: LD_INT 8
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PPUSH
46275: CALL_OW 72
46279: ST_TO_ADDR
// if not vehicles then
46280: LD_VAR 0 1
46284: NOT
46285: IFFALSE 46289
// exit ;
46287: GO 46316
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46289: LD_VAR 0 1
46293: PPUSH
46294: LD_VAR 0 2
46298: PUSH
46299: LD_INT 1
46301: ARRAY
46302: PPUSH
46303: LD_VAR 0 2
46307: PUSH
46308: LD_INT 2
46310: ARRAY
46311: PPUSH
46312: CALL_OW 111
// end ;
46316: LD_VAR 0 3
46320: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46321: LD_INT 0
46323: PPUSH
46324: PPUSH
46325: PPUSH
// if not side or not area then
46326: LD_VAR 0 1
46330: NOT
46331: PUSH
46332: LD_VAR 0 2
46336: NOT
46337: OR
46338: IFFALSE 46342
// exit ;
46340: GO 46461
// tmp := AreaToList ( area , 0 ) ;
46342: LD_ADDR_VAR 0 5
46346: PUSH
46347: LD_VAR 0 2
46351: PPUSH
46352: LD_INT 0
46354: PPUSH
46355: CALL_OW 517
46359: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46360: LD_ADDR_VAR 0 4
46364: PUSH
46365: DOUBLE
46366: LD_INT 1
46368: DEC
46369: ST_TO_ADDR
46370: LD_VAR 0 5
46374: PUSH
46375: LD_INT 1
46377: ARRAY
46378: PUSH
46379: FOR_TO
46380: IFFALSE 46459
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46382: LD_VAR 0 5
46386: PUSH
46387: LD_INT 1
46389: ARRAY
46390: PUSH
46391: LD_VAR 0 4
46395: ARRAY
46396: PPUSH
46397: LD_VAR 0 5
46401: PUSH
46402: LD_INT 2
46404: ARRAY
46405: PUSH
46406: LD_VAR 0 4
46410: ARRAY
46411: PPUSH
46412: CALL_OW 351
46416: IFFALSE 46457
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46418: LD_VAR 0 5
46422: PUSH
46423: LD_INT 1
46425: ARRAY
46426: PUSH
46427: LD_VAR 0 4
46431: ARRAY
46432: PPUSH
46433: LD_VAR 0 5
46437: PUSH
46438: LD_INT 2
46440: ARRAY
46441: PUSH
46442: LD_VAR 0 4
46446: ARRAY
46447: PPUSH
46448: LD_VAR 0 1
46452: PPUSH
46453: CALL_OW 244
// end ;
46457: GO 46379
46459: POP
46460: POP
// end ;
46461: LD_VAR 0 3
46465: RET
