// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1516 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2700 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41856 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3740 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnitForce ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3740 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnitForce ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3740 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnitForce ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3740 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3740 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnitForce ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3740 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnitForce ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3740 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnitForce ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3740 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnitForce ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3740 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnitForce ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3740 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnitForce ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3740 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1446
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: IFFALSE 1378
1352: PUSH
1353: LD_INT 22
1355: PUSH
1356: LD_INT 2
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 58
1365: PUSH
1366: EMPTY
1367: LIST
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: AND
1378: IFFALSE 1420
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 22
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PUSH
1395: LD_INT 58
1397: PUSH
1398: EMPTY
1399: LIST
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PUSH
1410: LD_INT 1
1412: ARRAY
1413: PPUSH
1414: CALL_OW 52
1418: GO 1435
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1420: LD_VAR 0 2
1424: PPUSH
1425: LD_INT 6
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// ComHold ( i ) ;
1435: LD_VAR 0 2
1439: PPUSH
1440: CALL_OW 140
// end ;
1444: GO 1323
1446: POP
1447: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1448: LD_EXP 5
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1463: LD_EXP 5
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: CALL_OW 119
// if Givi then
1475: LD_EXP 6
1479: IFFALSE 1511
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1481: LD_EXP 6
1485: PPUSH
1486: LD_INT 129
1488: PPUSH
1489: LD_INT 158
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1499: LD_EXP 6
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: CALL_OW 119
// end ; end ; end_of_file
1511: LD_VAR 0 1
1515: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1516: LD_INT 0
1518: PPUSH
1519: PPUSH
1520: PPUSH
// uc_side := 3 ;
1521: LD_ADDR_OWVAR 20
1525: PUSH
1526: LD_INT 3
1528: ST_TO_ADDR
// uc_nation := 3 ;
1529: LD_ADDR_OWVAR 21
1533: PUSH
1534: LD_INT 3
1536: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1537: LD_ADDR_EXP 20
1541: PUSH
1542: LD_STRING Burlak
1544: PPUSH
1545: CALL_OW 25
1549: ST_TO_ADDR
// kabulAttackers := [ ] ;
1550: LD_ADDR_EXP 18
1554: PUSH
1555: EMPTY
1556: ST_TO_ADDR
// heikeAttackers := [ ] ;
1557: LD_ADDR_EXP 19
1561: PUSH
1562: EMPTY
1563: ST_TO_ADDR
// for i := 1 to 9 do
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 9
1576: PUSH
1577: FOR_TO
1578: IFFALSE 1670
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1580: LD_INT 0
1582: PPUSH
1583: LD_INT 1
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 380
// un := CreateHuman ;
1593: LD_ADDR_VAR 0 3
1597: PUSH
1598: CALL_OW 44
1602: ST_TO_ADDR
// if Prob ( 40 ) then
1603: LD_INT 40
1605: PPUSH
1606: CALL_OW 13
1610: IFFALSE 1624
// SetClass ( un , class_bazooker ) ;
1612: LD_VAR 0 3
1616: PPUSH
1617: LD_INT 9
1619: PPUSH
1620: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1624: LD_VAR 0 3
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_INT 5
1634: PPUSH
1635: CALL_OW 12
1639: PPUSH
1640: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1644: LD_VAR 0 3
1648: PPUSH
1649: LD_INT 10
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 49
// KillUnit ( un ) ;
1659: LD_VAR 0 3
1663: PPUSH
1664: CALL_OW 66
// end ;
1668: GO 1577
1670: POP
1671: POP
// for i := 1 to 9 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 9
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1907
// begin if rand ( 0 , 1 ) then
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: CALL_OW 12
1698: IFFALSE 1761
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 1
1705: PPUSH
1706: LD_INT 7
1708: PPUSH
1709: CALL_OW 380
// un := CreateHuman ;
1713: LD_ADDR_VAR 0 3
1717: PUSH
1718: CALL_OW 44
1722: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1735: LD_VAR 0 3
1739: PPUSH
1740: LD_INT 3
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 49
// ComHold ( un ) ;
1750: LD_VAR 0 3
1754: PPUSH
1755: CALL_OW 140
// end else
1759: GO 1876
// begin vc_chassis := ru_medium_tracked ;
1761: LD_ADDR_OWVAR 37
1765: PUSH
1766: LD_INT 22
1768: ST_TO_ADDR
// vc_engine := engine_combustion ;
1769: LD_ADDR_OWVAR 39
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// vc_control := control_manual ;
1777: LD_ADDR_OWVAR 38
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1785: LD_ADDR_OWVAR 40
1789: PUSH
1790: LD_INT 44
1792: PUSH
1793: LD_INT 43
1795: PUSH
1796: LD_INT 45
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 1
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: CALL_OW 12
1814: ARRAY
1815: ST_TO_ADDR
// un := CreateVehicle ;
1816: LD_ADDR_VAR 0 3
1820: PUSH
1821: CALL_OW 45
1825: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1826: LD_VAR 0 3
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1838: LD_VAR 0 3
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 0
1848: PPUSH
1849: CALL_OW 49
// ComHold ( un ) ;
1853: LD_VAR 0 3
1857: PPUSH
1858: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1862: CALL_OW 44
1866: PPUSH
1867: LD_VAR 0 3
1871: PPUSH
1872: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1876: LD_ADDR_EXP 18
1880: PUSH
1881: LD_EXP 18
1885: PPUSH
1886: LD_EXP 18
1890: PUSH
1891: LD_INT 1
1893: PLUS
1894: PPUSH
1895: LD_VAR 0 3
1899: PPUSH
1900: CALL_OW 1
1904: ST_TO_ADDR
// end ;
1905: GO 1685
1907: POP
1908: POP
// for i := 1 to 5 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 5
1921: PUSH
1922: FOR_TO
1923: IFFALSE 2156
// begin if rand ( 0 , 1 ) then
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 12
1935: IFFALSE 2010
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_INT 7
1945: PPUSH
1946: CALL_OW 380
// un := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1972: LD_VAR 0 3
1976: PPUSH
1977: LD_INT 9
1979: PPUSH
1980: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_INT 8
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 49
// ComHold ( un ) ;
1999: LD_VAR 0 3
2003: PPUSH
2004: CALL_OW 140
// end else
2008: GO 2125
// begin vc_chassis := ru_heavy_wheeled ;
2010: LD_ADDR_OWVAR 37
2014: PUSH
2015: LD_INT 23
2017: ST_TO_ADDR
// vc_engine := engine_combustion ;
2018: LD_ADDR_OWVAR 39
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// vc_control := control_manual ;
2026: LD_ADDR_OWVAR 38
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2034: LD_ADDR_OWVAR 40
2038: PUSH
2039: LD_INT 44
2041: PUSH
2042: LD_INT 43
2044: PUSH
2045: LD_INT 45
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 1
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 12
2063: ARRAY
2064: ST_TO_ADDR
// un := CreateVehicle ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: CALL_OW 45
2074: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2075: LD_VAR 0 3
2079: PPUSH
2080: LD_INT 4
2082: PPUSH
2083: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 8
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 49
// ComHold ( un ) ;
2102: LD_VAR 0 3
2106: PPUSH
2107: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2111: CALL_OW 44
2115: PPUSH
2116: LD_VAR 0 3
2120: PPUSH
2121: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2125: LD_ADDR_EXP 18
2129: PUSH
2130: LD_EXP 18
2134: PPUSH
2135: LD_EXP 18
2139: PUSH
2140: LD_INT 1
2142: PLUS
2143: PPUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 1
2153: ST_TO_ADDR
// end ;
2154: GO 1922
2156: POP
2157: POP
// for i := 1 to 5 do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_INT 5
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2276
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 7
2182: PPUSH
2183: CALL_OW 380
// un := CreateHuman ;
2187: LD_ADDR_VAR 0 3
2191: PUSH
2192: CALL_OW 44
2196: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2197: LD_VAR 0 3
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2209: LD_VAR 0 3
2213: PPUSH
2214: LD_INT 9
2216: PPUSH
2217: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2221: LD_VAR 0 3
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: LD_INT 0
2231: PPUSH
2232: CALL_OW 49
// ComHold ( un ) ;
2236: LD_VAR 0 3
2240: PPUSH
2241: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2245: LD_ADDR_EXP 18
2249: PUSH
2250: LD_EXP 18
2254: PPUSH
2255: LD_EXP 18
2259: PUSH
2260: LD_INT 1
2262: PLUS
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: CALL_OW 1
2273: ST_TO_ADDR
// end ;
2274: GO 2171
2276: POP
2277: POP
// for i := 1 to 12 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 12
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2543
// begin if Prob ( 22 ) then
2294: LD_INT 22
2296: PPUSH
2297: CALL_OW 13
2301: IFFALSE 2364
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2303: LD_INT 0
2305: PPUSH
2306: LD_INT 1
2308: PPUSH
2309: LD_INT 10
2311: PPUSH
2312: CALL_OW 380
// un := CreateHuman ;
2316: LD_ADDR_VAR 0 3
2320: PUSH
2321: CALL_OW 44
2325: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2326: LD_VAR 0 3
2330: PPUSH
2331: LD_INT 3
2333: PPUSH
2334: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2338: LD_VAR 0 3
2342: PPUSH
2343: LD_INT 4
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 49
// ComHold ( un ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: CALL_OW 140
// end else
2362: GO 2512
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2364: LD_ADDR_OWVAR 37
2368: PUSH
2369: LD_INT 22
2371: PUSH
2372: LD_INT 24
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 1
2381: PPUSH
2382: LD_INT 2
2384: PPUSH
2385: CALL_OW 12
2389: ARRAY
2390: ST_TO_ADDR
// vc_engine := engine_combustion ;
2391: LD_ADDR_OWVAR 39
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// vc_control := control_manual ;
2399: LD_ADDR_OWVAR 38
2403: PUSH
2404: LD_INT 1
2406: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2407: LD_ADDR_OWVAR 40
2411: PUSH
2412: LD_INT 44
2414: PUSH
2415: LD_INT 43
2417: PUSH
2418: LD_INT 43
2420: PUSH
2421: LD_INT 45
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 1
2432: PPUSH
2433: LD_INT 4
2435: PPUSH
2436: CALL_OW 12
2440: ARRAY
2441: ST_TO_ADDR
// un := CreateVehicle ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 45
2451: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2464: LD_VAR 0 3
2468: PPUSH
2469: LD_INT 4
2471: PPUSH
2472: LD_INT 0
2474: PPUSH
2475: CALL_OW 49
// ComHold ( un ) ;
2479: LD_VAR 0 3
2483: PPUSH
2484: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2488: LD_INT 0
2490: PPUSH
2491: LD_INT 10
2493: PPUSH
2494: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2498: CALL_OW 44
2502: PPUSH
2503: LD_VAR 0 3
2507: PPUSH
2508: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2512: LD_ADDR_EXP 19
2516: PUSH
2517: LD_EXP 19
2521: PPUSH
2522: LD_EXP 19
2526: PUSH
2527: LD_INT 1
2529: PLUS
2530: PPUSH
2531: LD_VAR 0 3
2535: PPUSH
2536: CALL_OW 1
2540: ST_TO_ADDR
// end ;
2541: GO 2291
2543: POP
2544: POP
// end ;
2545: LD_VAR 0 1
2549: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2550: LD_EXP 3
2554: IFFALSE 2562
2556: PUSH
2557: LD_EXP 18
2561: AND
2562: IFFALSE 2622
2564: GO 2566
2566: DISABLE
2567: LD_INT 0
2569: PPUSH
// begin enable ;
2570: ENABLE
// for i in kabulAttackers do
2571: LD_ADDR_VAR 0 1
2575: PUSH
2576: LD_EXP 18
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2620
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2584: LD_VAR 0 1
2588: PPUSH
2589: LD_INT 22
2591: PUSH
2592: LD_INT 5
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PPUSH
2599: CALL_OW 69
2603: PPUSH
2604: LD_VAR 0 1
2608: PPUSH
2609: CALL_OW 74
2613: PPUSH
2614: CALL_OW 115
2618: GO 2581
2620: POP
2621: POP
// end ;
2622: PPOPN 1
2624: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2625: LD_EXP 4
2629: IFFALSE 2637
2631: PUSH
2632: LD_EXP 19
2636: AND
2637: IFFALSE 2697
2639: GO 2641
2641: DISABLE
2642: LD_INT 0
2644: PPUSH
// begin enable ;
2645: ENABLE
// for i in heikeAttackers do
2646: LD_ADDR_VAR 0 1
2650: PUSH
2651: LD_EXP 19
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2695
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: PPUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 74
2688: PPUSH
2689: CALL_OW 115
2693: GO 2656
2695: POP
2696: POP
// end ; end_of_file
2697: PPOPN 1
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// Video ( true ) ;
2704: LD_INT 1
2706: PPUSH
2707: CALL 41828 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2711: LD_INT 111
2713: PPUSH
2714: LD_INT 168
2716: PPUSH
2717: LD_INT 2
2719: PPUSH
2720: LD_INT 25
2722: NEG
2723: PPUSH
2724: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2728: LD_INT 102
2730: PPUSH
2731: LD_INT 47
2733: PPUSH
2734: LD_INT 2
2736: PPUSH
2737: LD_INT 40
2739: NEG
2740: PPUSH
2741: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2745: LD_EXP 5
2749: PPUSH
2750: CALL_OW 87
// startAttackOnKabul := true ;
2754: LD_ADDR_EXP 3
2758: PUSH
2759: LD_INT 1
2761: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2762: LD_INT 70
2764: PPUSH
2765: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2769: LD_INT 102
2771: PPUSH
2772: LD_INT 47
2774: PPUSH
2775: CALL_OW 84
// if Givi then
2779: LD_EXP 6
2783: IFFALSE 2974
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2785: LD_EXP 6
2789: PPUSH
2790: LD_INT 113
2792: PPUSH
2793: LD_INT 162
2795: PPUSH
2796: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2800: LD_EXP 6
2804: PPUSH
2805: LD_EXP 5
2809: PPUSH
2810: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2814: LD_EXP 6
2818: PPUSH
2819: LD_STRING DG-Intro-1
2821: PPUSH
2822: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2826: LD_EXP 6
2830: PPUSH
2831: LD_STRING DG-Intro-2
2833: PPUSH
2834: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2838: LD_EXP 5
2842: PPUSH
2843: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2847: LD_INT 102
2849: PPUSH
2850: LD_INT 47
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2860: LD_INT 10
2862: PPUSH
2863: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2867: LD_EXP 5
2871: PPUSH
2872: LD_STRING DH-Intro-3
2874: PPUSH
2875: CALL_OW 88
// if Mike then
2879: LD_EXP 7
2883: IFFALSE 2972
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2885: LD_INT 92
2887: PPUSH
2888: LD_INT 129
2890: PPUSH
2891: LD_INT 2
2893: PPUSH
2894: LD_INT 18
2896: NEG
2897: PPUSH
2898: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2902: LD_INT 92
2904: PPUSH
2905: LD_INT 129
2907: PPUSH
2908: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2912: LD_EXP 7
2916: PUSH
2917: LD_EXP 10
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PPUSH
2926: LD_EXP 5
2930: PPUSH
2931: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2935: LD_EXP 7
2939: PPUSH
2940: LD_STRING DM-Intro-4
2942: PPUSH
2943: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2947: LD_EXP 10
2951: PPUSH
2952: LD_STRING DK-Intro-5
2954: PPUSH
2955: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2959: LD_INT 92
2961: PPUSH
2962: LD_INT 129
2964: PPUSH
2965: LD_INT 2
2967: PPUSH
2968: CALL_OW 331
// end ; end else
2972: GO 3227
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2974: LD_EXP 16
2978: PPUSH
2979: LD_INT 26
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 72
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PPUSH
2998: LD_STRING DArm-Intro-b-1
3000: PPUSH
3001: CALL_OW 88
3005: NOT
3006: IFFALSE 3039
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3008: LD_EXP 16
3012: PPUSH
3013: LD_INT 26
3015: PUSH
3016: LD_INT 2
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 72
3027: PUSH
3028: LD_INT 1
3030: ARRAY
3031: PPUSH
3032: LD_STRING DArf-Intro-b-1
3034: PPUSH
3035: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3039: LD_EXP 16
3043: PPUSH
3044: LD_INT 26
3046: PUSH
3047: LD_INT 1
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 72
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_STRING DArm-Intro-b-2
3065: PPUSH
3066: CALL_OW 88
3070: NOT
3071: IFFALSE 3104
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3073: LD_EXP 16
3077: PPUSH
3078: LD_INT 26
3080: PUSH
3081: LD_INT 2
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PPUSH
3088: CALL_OW 72
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PPUSH
3097: LD_STRING DArf-Intro-b-2
3099: PPUSH
3100: CALL_OW 88
// if Kaia then
3104: LD_EXP 10
3108: IFFALSE 3122
// Say ( Kaia , DK-Intro-5 ) ;
3110: LD_EXP 10
3114: PPUSH
3115: LD_STRING DK-Intro-5
3117: PPUSH
3118: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3122: LD_INT 92
3124: PPUSH
3125: LD_INT 129
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: LD_INT 18
3133: NEG
3134: PPUSH
3135: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3139: LD_INT 92
3141: PPUSH
3142: LD_INT 129
3144: PPUSH
3145: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3149: LD_EXP 16
3153: PPUSH
3154: LD_INT 26
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 72
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PPUSH
3173: LD_STRING DArm-Intro-b-4
3175: PPUSH
3176: CALL_OW 88
3180: NOT
3181: IFFALSE 3214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3183: LD_EXP 16
3187: PPUSH
3188: LD_INT 26
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PPUSH
3198: CALL_OW 72
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PPUSH
3207: LD_STRING DArf-Intro-b-4
3209: PPUSH
3210: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3214: LD_INT 92
3216: PPUSH
3217: LD_INT 129
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3227: LD_EXP 5
3231: PPUSH
3232: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3236: LD_EXP 20
3240: PPUSH
3241: LD_STRING DB-Intro-6
3243: PPUSH
3244: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3248: LD_EXP 5
3252: PPUSH
3253: LD_STRING DH-Intro-7
3255: PPUSH
3256: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3260: LD_EXP 20
3264: PPUSH
3265: LD_STRING DB-Intro-8
3267: PPUSH
3268: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3272: LD_EXP 20
3276: PPUSH
3277: LD_STRING DB-Intro-9
3279: PPUSH
3280: CALL_OW 94
// if Givi then
3284: LD_EXP 6
3288: IFFALSE 3316
// begin Say ( Givi , DG-Intro-10 ) ;
3290: LD_EXP 6
3294: PPUSH
3295: LD_STRING DG-Intro-10
3297: PPUSH
3298: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3302: LD_EXP 10
3306: PPUSH
3307: LD_STRING DK-Intro-11
3309: PPUSH
3310: CALL_OW 88
// end else
3314: GO 3381
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3316: LD_EXP 16
3320: PPUSH
3321: LD_INT 26
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PPUSH
3331: CALL_OW 72
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_STRING DArm-Intro-b-10
3342: PPUSH
3343: CALL_OW 88
3347: NOT
3348: IFFALSE 3381
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3350: LD_EXP 16
3354: PPUSH
3355: LD_INT 26
3357: PUSH
3358: LD_INT 2
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 1
3372: ARRAY
3373: PPUSH
3374: LD_STRING DArf-Intro-b-10
3376: PPUSH
3377: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3381: LD_EXP 7
3385: PPUSH
3386: LD_STRING DM-Intro-12
3388: PPUSH
3389: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3393: LD_EXP 14
3397: PPUSH
3398: LD_STRING DKs-Intro-13
3400: PPUSH
3401: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3405: LD_EXP 9
3409: PPUSH
3410: LD_STRING DKam-Intro-14
3412: PPUSH
3413: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3417: LD_STRING QSurrender
3419: PPUSH
3420: CALL_OW 97
3424: PUSH
3425: LD_INT 1
3427: DOUBLE
3428: EQUAL
3429: IFTRUE 3433
3431: GO 3452
3433: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3434: LD_EXP 5
3438: PPUSH
3439: LD_STRING DH-Intro-16
3441: PPUSH
3442: CALL_OW 88
// missionEnd ;
3446: CALL 3638 0 0
// end ; 2 :
3450: GO 3496
3452: LD_INT 2
3454: DOUBLE
3455: EQUAL
3456: IFTRUE 3460
3458: GO 3495
3460: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3461: LD_EXP 5
3465: PPUSH
3466: LD_STRING DH-Intro-a-16
3468: PPUSH
3469: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3473: LD_EXP 20
3477: PPUSH
3478: LD_STRING DB-Intro-a-17
3480: PPUSH
3481: CALL_OW 94
// startAttackOnHeike := true ;
3485: LD_ADDR_EXP 4
3489: PUSH
3490: LD_INT 1
3492: ST_TO_ADDR
// end ; end ;
3493: GO 3496
3495: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: LD_INT 2
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3536
// ComAgressiveMove ( i , 98 , 143 ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 98
3526: PPUSH
3527: LD_INT 143
3529: PPUSH
3530: CALL_OW 114
3534: GO 3516
3536: POP
3537: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3538: LD_EXP 5
3542: PPUSH
3543: LD_INT 84
3545: PPUSH
3546: LD_INT 116
3548: PPUSH
3549: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3553: LD_INT 98
3555: PPUSH
3556: LD_INT 143
3558: PPUSH
3559: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3563: LD_INT 35
3565: PPUSH
3566: CALL_OW 67
// until IsDead ( Heike ) ;
3570: LD_EXP 5
3574: PPUSH
3575: CALL_OW 301
3579: IFFALSE 3563
// wait ( 0 0$3 ) ;
3581: LD_INT 105
3583: PPUSH
3584: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3588: LD_STRING HeikeNoSurrender
3590: PPUSH
3591: CALL_OW 104
// end ;
3595: LD_VAR 0 1
3599: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3600: LD_EXP 5
3604: PPUSH
3605: CALL_OW 256
3609: PUSH
3610: LD_INT 900
3612: LESS
3613: IFFALSE 3637
3615: GO 3617
3617: DISABLE
// begin wait ( 0 0$3 ) ;
3618: LD_INT 105
3620: PPUSH
3621: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3625: LD_EXP 5
3629: PPUSH
3630: LD_INT 100
3632: PPUSH
3633: CALL_OW 234
// end ;
3637: END
// function MissionEnd ( ) ; begin
3638: LD_INT 0
3640: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3641: LD_INT 1
3643: PPUSH
3644: LD_STRING %_cont
3646: PPUSH
3647: CALL_OW 340
// end ; end_of_file
3651: LD_VAR 0 1
3655: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3656: LD_INT 0
3658: PPUSH
3659: PPUSH
// if exist_mode then
3660: LD_VAR 0 2
3664: IFFALSE 3710
// begin unit := CreateCharacter ( prefix & ident ) ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: LD_VAR 0 3
3675: PUSH
3676: LD_VAR 0 1
3680: STR
3681: PPUSH
3682: CALL_OW 34
3686: ST_TO_ADDR
// if unit then
3687: LD_VAR 0 5
3691: IFFALSE 3708
// DeleteCharacters ( prefix & ident ) ;
3693: LD_VAR 0 3
3697: PUSH
3698: LD_VAR 0 1
3702: STR
3703: PPUSH
3704: CALL_OW 40
// end else
3708: GO 3725
// unit := NewCharacter ( ident ) ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 25
3724: ST_TO_ADDR
// result := unit ;
3725: LD_ADDR_VAR 0 4
3729: PUSH
3730: LD_VAR 0 5
3734: ST_TO_ADDR
// end ;
3735: LD_VAR 0 4
3739: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3740: LD_INT 0
3742: PPUSH
3743: PPUSH
// if exist_mode then
3744: LD_VAR 0 2
3748: IFFALSE 3773
// unit := CreateCharacter ( prefix & ident ) else
3750: LD_ADDR_VAR 0 5
3754: PUSH
3755: LD_VAR 0 3
3759: PUSH
3760: LD_VAR 0 1
3764: STR
3765: PPUSH
3766: CALL_OW 34
3770: ST_TO_ADDR
3771: GO 3788
// unit := NewCharacter ( ident ) ;
3773: LD_ADDR_VAR 0 5
3777: PUSH
3778: LD_VAR 0 1
3782: PPUSH
3783: CALL_OW 25
3787: ST_TO_ADDR
// result := unit ;
3788: LD_ADDR_VAR 0 4
3792: PUSH
3793: LD_VAR 0 5
3797: ST_TO_ADDR
// end ;
3798: LD_VAR 0 4
3802: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3803: LD_INT 0
3805: PPUSH
3806: PPUSH
// if not side or not nation then
3807: LD_VAR 0 1
3811: NOT
3812: IFTRUE 3821
3814: PUSH
3815: LD_VAR 0 2
3819: NOT
3820: OR
3821: IFFALSE 3825
// exit ;
3823: GO 4619
// case nation of nation_american :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3838
3836: GO 4060
3838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3839: LD_ADDR_VAR 0 4
3843: PUSH
3844: LD_INT 35
3846: PUSH
3847: LD_INT 45
3849: PUSH
3850: LD_INT 46
3852: PUSH
3853: LD_INT 47
3855: PUSH
3856: LD_INT 82
3858: PUSH
3859: LD_INT 83
3861: PUSH
3862: LD_INT 84
3864: PUSH
3865: LD_INT 85
3867: PUSH
3868: LD_INT 86
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_INT 2
3876: PUSH
3877: LD_INT 6
3879: PUSH
3880: LD_INT 15
3882: PUSH
3883: LD_INT 16
3885: PUSH
3886: LD_INT 7
3888: PUSH
3889: LD_INT 12
3891: PUSH
3892: LD_INT 13
3894: PUSH
3895: LD_INT 10
3897: PUSH
3898: LD_INT 14
3900: PUSH
3901: LD_INT 20
3903: PUSH
3904: LD_INT 21
3906: PUSH
3907: LD_INT 22
3909: PUSH
3910: LD_INT 25
3912: PUSH
3913: LD_INT 32
3915: PUSH
3916: LD_INT 27
3918: PUSH
3919: LD_INT 36
3921: PUSH
3922: LD_INT 69
3924: PUSH
3925: LD_INT 39
3927: PUSH
3928: LD_INT 34
3930: PUSH
3931: LD_INT 40
3933: PUSH
3934: LD_INT 48
3936: PUSH
3937: LD_INT 49
3939: PUSH
3940: LD_INT 50
3942: PUSH
3943: LD_INT 51
3945: PUSH
3946: LD_INT 52
3948: PUSH
3949: LD_INT 53
3951: PUSH
3952: LD_INT 54
3954: PUSH
3955: LD_INT 55
3957: PUSH
3958: LD_INT 56
3960: PUSH
3961: LD_INT 57
3963: PUSH
3964: LD_INT 58
3966: PUSH
3967: LD_INT 59
3969: PUSH
3970: LD_INT 60
3972: PUSH
3973: LD_INT 61
3975: PUSH
3976: LD_INT 62
3978: PUSH
3979: LD_INT 80
3981: PUSH
3982: LD_INT 82
3984: PUSH
3985: LD_INT 83
3987: PUSH
3988: LD_INT 84
3990: PUSH
3991: LD_INT 85
3993: PUSH
3994: LD_INT 86
3996: PUSH
3997: LD_INT 90
3999: PUSH
4000: LD_INT 93
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: ST_TO_ADDR
4058: GO 4541
4060: LD_INT 2
4062: DOUBLE
4063: EQUAL
4064: IFTRUE 4068
4066: GO 4302
4068: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
4069: LD_ADDR_VAR 0 4
4073: PUSH
4074: LD_INT 35
4076: PUSH
4077: LD_INT 45
4079: PUSH
4080: LD_INT 46
4082: PUSH
4083: LD_INT 47
4085: PUSH
4086: LD_INT 82
4088: PUSH
4089: LD_INT 83
4091: PUSH
4092: LD_INT 84
4094: PUSH
4095: LD_INT 85
4097: PUSH
4098: LD_INT 87
4100: PUSH
4101: LD_INT 70
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 11
4109: PUSH
4110: LD_INT 3
4112: PUSH
4113: LD_INT 4
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: LD_INT 15
4124: PUSH
4125: LD_INT 18
4127: PUSH
4128: LD_INT 7
4130: PUSH
4131: LD_INT 17
4133: PUSH
4134: LD_INT 8
4136: PUSH
4137: LD_INT 20
4139: PUSH
4140: LD_INT 21
4142: PUSH
4143: LD_INT 22
4145: PUSH
4146: LD_INT 72
4148: PUSH
4149: LD_INT 26
4151: PUSH
4152: LD_INT 69
4154: PUSH
4155: LD_INT 39
4157: PUSH
4158: LD_INT 40
4160: PUSH
4161: LD_INT 41
4163: PUSH
4164: LD_INT 42
4166: PUSH
4167: LD_INT 43
4169: PUSH
4170: LD_INT 48
4172: PUSH
4173: LD_INT 49
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: LD_INT 51
4181: PUSH
4182: LD_INT 52
4184: PUSH
4185: LD_INT 53
4187: PUSH
4188: LD_INT 54
4190: PUSH
4191: LD_INT 55
4193: PUSH
4194: LD_INT 56
4196: PUSH
4197: LD_INT 60
4199: PUSH
4200: LD_INT 61
4202: PUSH
4203: LD_INT 62
4205: PUSH
4206: LD_INT 66
4208: PUSH
4209: LD_INT 67
4211: PUSH
4212: LD_INT 68
4214: PUSH
4215: LD_INT 81
4217: PUSH
4218: LD_INT 82
4220: PUSH
4221: LD_INT 83
4223: PUSH
4224: LD_INT 84
4226: PUSH
4227: LD_INT 85
4229: PUSH
4230: LD_INT 87
4232: PUSH
4233: LD_INT 88
4235: PUSH
4236: LD_INT 92
4238: PUSH
4239: LD_INT 94
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
4300: GO 4541
4302: LD_INT 3
4304: DOUBLE
4305: EQUAL
4306: IFTRUE 4310
4308: GO 4540
4310: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
4311: LD_ADDR_VAR 0 4
4315: PUSH
4316: LD_INT 46
4318: PUSH
4319: LD_INT 47
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: LD_INT 2
4327: PUSH
4328: LD_INT 82
4330: PUSH
4331: LD_INT 83
4333: PUSH
4334: LD_INT 84
4336: PUSH
4337: LD_INT 85
4339: PUSH
4340: LD_INT 86
4342: PUSH
4343: LD_INT 11
4345: PUSH
4346: LD_INT 9
4348: PUSH
4349: LD_INT 20
4351: PUSH
4352: LD_INT 19
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 24
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_INT 25
4366: PUSH
4367: LD_INT 28
4369: PUSH
4370: LD_INT 29
4372: PUSH
4373: LD_INT 30
4375: PUSH
4376: LD_INT 31
4378: PUSH
4379: LD_INT 37
4381: PUSH
4382: LD_INT 38
4384: PUSH
4385: LD_INT 32
4387: PUSH
4388: LD_INT 27
4390: PUSH
4391: LD_INT 33
4393: PUSH
4394: LD_INT 69
4396: PUSH
4397: LD_INT 39
4399: PUSH
4400: LD_INT 34
4402: PUSH
4403: LD_INT 40
4405: PUSH
4406: LD_INT 71
4408: PUSH
4409: LD_INT 23
4411: PUSH
4412: LD_INT 44
4414: PUSH
4415: LD_INT 48
4417: PUSH
4418: LD_INT 49
4420: PUSH
4421: LD_INT 50
4423: PUSH
4424: LD_INT 51
4426: PUSH
4427: LD_INT 52
4429: PUSH
4430: LD_INT 53
4432: PUSH
4433: LD_INT 54
4435: PUSH
4436: LD_INT 55
4438: PUSH
4439: LD_INT 56
4441: PUSH
4442: LD_INT 57
4444: PUSH
4445: LD_INT 58
4447: PUSH
4448: LD_INT 59
4450: PUSH
4451: LD_INT 63
4453: PUSH
4454: LD_INT 64
4456: PUSH
4457: LD_INT 65
4459: PUSH
4460: LD_INT 82
4462: PUSH
4463: LD_INT 83
4465: PUSH
4466: LD_INT 84
4468: PUSH
4469: LD_INT 85
4471: PUSH
4472: LD_INT 86
4474: PUSH
4475: LD_INT 89
4477: PUSH
4478: LD_INT 91
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: ST_TO_ADDR
4538: GO 4541
4540: POP
// if state > - 1 and state < 3 then
4541: LD_VAR 0 3
4545: PUSH
4546: LD_INT 1
4548: NEG
4549: GREATER
4550: IFFALSE 4562
4552: PUSH
4553: LD_VAR 0 3
4557: PUSH
4558: LD_INT 3
4560: LESS
4561: AND
4562: IFFALSE 4619
// for i in result do
4564: LD_ADDR_VAR 0 5
4568: PUSH
4569: LD_VAR 0 4
4573: PUSH
4574: FOR_IN
4575: IFFALSE 4617
// if GetTech ( i , side ) <> state then
4577: LD_VAR 0 5
4581: PPUSH
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 321
4591: PUSH
4592: LD_VAR 0 3
4596: NONEQUAL
4597: IFFALSE 4615
// result := result diff i ;
4599: LD_ADDR_VAR 0 4
4603: PUSH
4604: LD_VAR 0 4
4608: PUSH
4609: LD_VAR 0 5
4613: DIFF
4614: ST_TO_ADDR
4615: GO 4574
4617: POP
4618: POP
// end ;
4619: LD_VAR 0 4
4623: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4624: LD_INT 0
4626: PPUSH
4627: PPUSH
4628: PPUSH
// result := true ;
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4637: LD_ADDR_VAR 0 5
4641: PUSH
4642: LD_VAR 0 2
4646: PPUSH
4647: CALL_OW 480
4651: ST_TO_ADDR
// if not tmp then
4652: LD_VAR 0 5
4656: NOT
4657: IFFALSE 4661
// exit ;
4659: GO 4710
// for i in tmp do
4661: LD_ADDR_VAR 0 4
4665: PUSH
4666: LD_VAR 0 5
4670: PUSH
4671: FOR_IN
4672: IFFALSE 4708
// if GetTech ( i , side ) <> state_researched then
4674: LD_VAR 0 4
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: CALL_OW 321
4688: PUSH
4689: LD_INT 2
4691: NONEQUAL
4692: IFFALSE 4706
// begin result := false ;
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_INT 0
4701: ST_TO_ADDR
// exit ;
4702: POP
4703: POP
4704: GO 4710
// end ;
4706: GO 4671
4708: POP
4709: POP
// end ;
4710: LD_VAR 0 3
4714: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4715: LD_INT 0
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
4722: PPUSH
4723: PPUSH
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
4728: PPUSH
4729: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4730: LD_VAR 0 1
4734: NOT
4735: IFTRUE 4752
4737: PUSH
4738: LD_VAR 0 1
4742: PPUSH
4743: CALL_OW 257
4747: PUSH
4748: LD_INT 9
4750: NONEQUAL
4751: OR
4752: IFFALSE 4756
// exit ;
4754: GO 5335
// side := GetSide ( unit ) ;
4756: LD_ADDR_VAR 0 9
4760: PUSH
4761: LD_VAR 0 1
4765: PPUSH
4766: CALL_OW 255
4770: ST_TO_ADDR
// tech_space := tech_spacanom ;
4771: LD_ADDR_VAR 0 12
4775: PUSH
4776: LD_INT 29
4778: ST_TO_ADDR
// tech_time := tech_taurad ;
4779: LD_ADDR_VAR 0 13
4783: PUSH
4784: LD_INT 28
4786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4787: LD_ADDR_VAR 0 11
4791: PUSH
4792: LD_VAR 0 1
4796: PPUSH
4797: CALL_OW 310
4801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4802: LD_VAR 0 11
4806: PPUSH
4807: CALL_OW 247
4811: PUSH
4812: LD_INT 2
4814: EQUAL
4815: IFFALSE 4819
// exit ;
4817: GO 5335
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4819: LD_ADDR_VAR 0 8
4823: PUSH
4824: LD_INT 81
4826: PUSH
4827: LD_VAR 0 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 3
4838: PUSH
4839: LD_INT 21
4841: PUSH
4842: LD_INT 3
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: ST_TO_ADDR
// if not tmp then
4862: LD_VAR 0 8
4866: NOT
4867: IFFALSE 4871
// exit ;
4869: GO 5335
// if in_unit then
4871: LD_VAR 0 11
4875: IFFALSE 4899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4877: LD_ADDR_VAR 0 10
4881: PUSH
4882: LD_VAR 0 8
4886: PPUSH
4887: LD_VAR 0 11
4891: PPUSH
4892: CALL_OW 74
4896: ST_TO_ADDR
4897: GO 4919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4899: LD_ADDR_VAR 0 10
4903: PUSH
4904: LD_VAR 0 8
4908: PPUSH
4909: LD_VAR 0 1
4913: PPUSH
4914: CALL_OW 74
4918: ST_TO_ADDR
// if not enemy then
4919: LD_VAR 0 10
4923: NOT
4924: IFFALSE 4928
// exit ;
4926: GO 5335
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4928: LD_VAR 0 11
4932: IFFALSE 4954
4934: PUSH
4935: LD_VAR 0 11
4939: PPUSH
4940: LD_VAR 0 10
4944: PPUSH
4945: CALL_OW 296
4949: PUSH
4950: LD_INT 13
4952: GREATER
4953: AND
4954: IFTRUE 4976
4956: PUSH
4957: LD_VAR 0 1
4961: PPUSH
4962: LD_VAR 0 10
4966: PPUSH
4967: CALL_OW 296
4971: PUSH
4972: LD_INT 12
4974: GREATER
4975: OR
4976: IFFALSE 4980
// exit ;
4978: GO 5335
// missile := [ 1 ] ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: EMPTY
4989: LIST
4990: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4991: LD_VAR 0 9
4995: PPUSH
4996: LD_VAR 0 12
5000: PPUSH
5001: CALL_OW 325
5005: IFFALSE 5034
// missile := Replace ( missile , missile + 1 , 2 ) ;
5007: LD_ADDR_VAR 0 14
5011: PUSH
5012: LD_VAR 0 14
5016: PPUSH
5017: LD_VAR 0 14
5021: PUSH
5022: LD_INT 1
5024: PLUS
5025: PPUSH
5026: LD_INT 2
5028: PPUSH
5029: CALL_OW 1
5033: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5034: LD_VAR 0 9
5038: PPUSH
5039: LD_VAR 0 13
5043: PPUSH
5044: CALL_OW 325
5048: IFFALSE 5072
5050: PUSH
5051: LD_VAR 0 10
5055: PPUSH
5056: CALL_OW 255
5060: PPUSH
5061: LD_VAR 0 13
5065: PPUSH
5066: CALL_OW 325
5070: NOT
5071: AND
5072: IFFALSE 5101
// missile := Replace ( missile , missile + 1 , 3 ) ;
5074: LD_ADDR_VAR 0 14
5078: PUSH
5079: LD_VAR 0 14
5083: PPUSH
5084: LD_VAR 0 14
5088: PUSH
5089: LD_INT 1
5091: PLUS
5092: PPUSH
5093: LD_INT 3
5095: PPUSH
5096: CALL_OW 1
5100: ST_TO_ADDR
// if missile < 2 then
5101: LD_VAR 0 14
5105: PUSH
5106: LD_INT 2
5108: LESS
5109: IFFALSE 5113
// exit ;
5111: GO 5335
// x := GetX ( enemy ) ;
5113: LD_ADDR_VAR 0 4
5117: PUSH
5118: LD_VAR 0 10
5122: PPUSH
5123: CALL_OW 250
5127: ST_TO_ADDR
// y := GetY ( enemy ) ;
5128: LD_ADDR_VAR 0 5
5132: PUSH
5133: LD_VAR 0 10
5137: PPUSH
5138: CALL_OW 251
5142: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5143: LD_ADDR_VAR 0 6
5147: PUSH
5148: LD_VAR 0 4
5152: PUSH
5153: LD_INT 1
5155: NEG
5156: PPUSH
5157: LD_INT 1
5159: PPUSH
5160: CALL_OW 12
5164: PLUS
5165: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5166: LD_ADDR_VAR 0 7
5170: PUSH
5171: LD_VAR 0 5
5175: PUSH
5176: LD_INT 1
5178: NEG
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 12
5187: PLUS
5188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5189: LD_VAR 0 6
5193: PPUSH
5194: LD_VAR 0 7
5198: PPUSH
5199: CALL_OW 488
5203: NOT
5204: IFFALSE 5226
// begin _x := x ;
5206: LD_ADDR_VAR 0 6
5210: PUSH
5211: LD_VAR 0 4
5215: ST_TO_ADDR
// _y := y ;
5216: LD_ADDR_VAR 0 7
5220: PUSH
5221: LD_VAR 0 5
5225: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5226: LD_ADDR_VAR 0 3
5230: PUSH
5231: LD_INT 1
5233: PPUSH
5234: LD_VAR 0 14
5238: PPUSH
5239: CALL_OW 12
5243: ST_TO_ADDR
// case i of 1 :
5244: LD_VAR 0 3
5248: PUSH
5249: LD_INT 1
5251: DOUBLE
5252: EQUAL
5253: IFTRUE 5257
5255: GO 5274
5257: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5258: LD_VAR 0 1
5262: PPUSH
5263: LD_VAR 0 10
5267: PPUSH
5268: CALL_OW 115
5272: GO 5335
5274: LD_INT 2
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5282
5280: GO 5304
5282: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5283: LD_VAR 0 1
5287: PPUSH
5288: LD_VAR 0 6
5292: PPUSH
5293: LD_VAR 0 7
5297: PPUSH
5298: CALL_OW 153
5302: GO 5335
5304: LD_INT 3
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5334
5312: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5313: LD_VAR 0 1
5317: PPUSH
5318: LD_VAR 0 6
5322: PPUSH
5323: LD_VAR 0 7
5327: PPUSH
5328: CALL_OW 154
5332: GO 5335
5334: POP
// end ;
5335: LD_VAR 0 2
5339: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5340: LD_INT 0
5342: PPUSH
5343: PPUSH
5344: PPUSH
5345: PPUSH
5346: PPUSH
5347: PPUSH
// if not unit or not building then
5348: LD_VAR 0 1
5352: NOT
5353: IFTRUE 5362
5355: PUSH
5356: LD_VAR 0 2
5360: NOT
5361: OR
5362: IFFALSE 5366
// exit ;
5364: GO 5524
// x := GetX ( building ) ;
5366: LD_ADDR_VAR 0 5
5370: PUSH
5371: LD_VAR 0 2
5375: PPUSH
5376: CALL_OW 250
5380: ST_TO_ADDR
// y := GetY ( building ) ;
5381: LD_ADDR_VAR 0 6
5385: PUSH
5386: LD_VAR 0 2
5390: PPUSH
5391: CALL_OW 251
5395: ST_TO_ADDR
// for i := 0 to 5 do
5396: LD_ADDR_VAR 0 4
5400: PUSH
5401: DOUBLE
5402: LD_INT 0
5404: DEC
5405: ST_TO_ADDR
5406: LD_INT 5
5408: PUSH
5409: FOR_TO
5410: IFFALSE 5522
// begin _x := ShiftX ( x , i , 3 ) ;
5412: LD_ADDR_VAR 0 7
5416: PUSH
5417: LD_VAR 0 5
5421: PPUSH
5422: LD_VAR 0 4
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 272
5434: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5435: LD_ADDR_VAR 0 8
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 4
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 273
5457: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5458: LD_VAR 0 7
5462: PPUSH
5463: LD_VAR 0 8
5467: PPUSH
5468: CALL_OW 488
5472: NOT
5473: IFFALSE 5477
// continue ;
5475: GO 5409
// if HexInfo ( _x , _y ) = 0 then
5477: LD_VAR 0 7
5481: PPUSH
5482: LD_VAR 0 8
5486: PPUSH
5487: CALL_OW 428
5491: PUSH
5492: LD_INT 0
5494: EQUAL
5495: IFFALSE 5520
// begin ComMoveXY ( unit , _x , _y ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: LD_VAR 0 7
5506: PPUSH
5507: LD_VAR 0 8
5511: PPUSH
5512: CALL_OW 111
// exit ;
5516: POP
5517: POP
5518: GO 5524
// end ; end ;
5520: GO 5409
5522: POP
5523: POP
// end ;
5524: LD_VAR 0 3
5528: RET
// export function ScanBase ( side , base_area ) ; begin
5529: LD_INT 0
5531: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: LD_INT 81
5544: PUSH
5545: LD_VAR 0 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 70
5558: ST_TO_ADDR
// end ;
5559: LD_VAR 0 3
5563: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5564: LD_INT 0
5566: PPUSH
5567: PPUSH
5568: PPUSH
5569: PPUSH
// result := false ;
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_INT 0
5577: ST_TO_ADDR
// side := GetSide ( unit ) ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_VAR 0 1
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5593: LD_ADDR_VAR 0 4
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// case nat of 1 :
5608: LD_VAR 0 4
5612: PUSH
5613: LD_INT 1
5615: DOUBLE
5616: EQUAL
5617: IFTRUE 5621
5619: GO 5632
5621: POP
// tech := tech_lassight ; 2 :
5622: LD_ADDR_VAR 0 5
5626: PUSH
5627: LD_INT 12
5629: ST_TO_ADDR
5630: GO 5671
5632: LD_INT 2
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5651
5640: POP
// tech := tech_mortar ; 3 :
5641: LD_ADDR_VAR 0 5
5645: PUSH
5646: LD_INT 41
5648: ST_TO_ADDR
5649: GO 5671
5651: LD_INT 3
5653: DOUBLE
5654: EQUAL
5655: IFTRUE 5659
5657: GO 5670
5659: POP
// tech := tech_bazooka ; end ;
5660: LD_ADDR_VAR 0 5
5664: PUSH
5665: LD_INT 44
5667: ST_TO_ADDR
5668: GO 5671
5670: POP
// if Researched ( side , tech ) then
5671: LD_VAR 0 3
5675: PPUSH
5676: LD_VAR 0 5
5680: PPUSH
5681: CALL_OW 325
5685: IFFALSE 5712
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: LD_INT 8
5697: PUSH
5698: LD_INT 9
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_VAR 0 4
5710: ARRAY
5711: ST_TO_ADDR
// end ;
5712: LD_VAR 0 2
5716: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5717: LD_INT 0
5719: PPUSH
5720: PPUSH
5721: PPUSH
// if not mines then
5722: LD_VAR 0 2
5726: NOT
5727: IFFALSE 5731
// exit ;
5729: GO 5875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: LD_INT 81
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PPUSH
5769: CALL_OW 69
5773: ST_TO_ADDR
// for i in mines do
5774: LD_ADDR_VAR 0 4
5778: PUSH
5779: LD_VAR 0 2
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5873
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5787: LD_VAR 0 4
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: LD_VAR 0 4
5800: PUSH
5801: LD_INT 2
5803: ARRAY
5804: PPUSH
5805: CALL_OW 458
5809: NOT
5810: IFFALSE 5814
// continue ;
5812: GO 5784
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5814: LD_VAR 0 4
5818: PUSH
5819: LD_INT 1
5821: ARRAY
5822: PPUSH
5823: LD_VAR 0 4
5827: PUSH
5828: LD_INT 2
5830: ARRAY
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_VAR 0 5
5841: IN
5842: IFFALSE 5871
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5844: LD_VAR 0 4
5848: PUSH
5849: LD_INT 1
5851: ARRAY
5852: PPUSH
5853: LD_VAR 0 4
5857: PUSH
5858: LD_INT 2
5860: ARRAY
5861: PPUSH
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 456
// end ;
5871: GO 5784
5873: POP
5874: POP
// end ;
5875: LD_VAR 0 3
5879: RET
// export function Count ( array ) ; begin
5880: LD_INT 0
5882: PPUSH
// result := array + 0 ;
5883: LD_ADDR_VAR 0 2
5887: PUSH
5888: LD_VAR 0 1
5892: PUSH
5893: LD_INT 0
5895: PLUS
5896: ST_TO_ADDR
// end ;
5897: LD_VAR 0 2
5901: RET
// export function IsEmpty ( building ) ; begin
5902: LD_INT 0
5904: PPUSH
// if not building then
5905: LD_VAR 0 1
5909: NOT
5910: IFFALSE 5914
// exit ;
5912: GO 5957
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 1
5923: PUSH
5924: LD_INT 22
5926: PUSH
5927: LD_VAR 0 1
5931: PPUSH
5932: CALL_OW 255
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 58
5943: PUSH
5944: EMPTY
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: IN
5956: ST_TO_ADDR
// end ;
5957: LD_VAR 0 2
5961: RET
// export function IsNotFull ( building ) ; var places ; begin
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
// if not building then
5966: LD_VAR 0 1
5970: NOT
5971: IFFALSE 5975
// exit ;
5973: GO 6003
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: LD_VAR 0 1
5984: PPUSH
5985: LD_INT 3
5987: PUSH
5988: LD_INT 62
5990: PUSH
5991: EMPTY
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// end ;
6003: LD_VAR 0 2
6007: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// tmp := [ ] ;
6014: LD_ADDR_VAR 0 3
6018: PUSH
6019: EMPTY
6020: ST_TO_ADDR
// list := [ ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: EMPTY
6027: ST_TO_ADDR
// for i = 16 to 25 do
6028: LD_ADDR_VAR 0 4
6032: PUSH
6033: DOUBLE
6034: LD_INT 16
6036: DEC
6037: ST_TO_ADDR
6038: LD_INT 25
6040: PUSH
6041: FOR_TO
6042: IFFALSE 6115
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PPUSH
6062: CALL_OW 255
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 91
6073: PUSH
6074: LD_VAR 0 1
6078: PUSH
6079: LD_INT 6
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 30
6089: PUSH
6090: LD_VAR 0 4
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: EMPTY
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: ADD
6112: ST_TO_ADDR
6113: GO 6041
6115: POP
6116: POP
// for i = 1 to tmp do
6117: LD_ADDR_VAR 0 4
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_VAR 0 3
6131: PUSH
6132: FOR_TO
6133: IFFALSE 6221
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: LD_VAR 0 5
6144: PUSH
6145: LD_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: ARRAY
6155: PPUSH
6156: CALL_OW 266
6160: PUSH
6161: LD_VAR 0 3
6165: PUSH
6166: LD_VAR 0 4
6170: ARRAY
6171: PPUSH
6172: CALL_OW 250
6176: PUSH
6177: LD_VAR 0 3
6181: PUSH
6182: LD_VAR 0 4
6186: ARRAY
6187: PPUSH
6188: CALL_OW 251
6192: PUSH
6193: LD_VAR 0 3
6197: PUSH
6198: LD_VAR 0 4
6202: ARRAY
6203: PPUSH
6204: CALL_OW 254
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: ADD
6218: ST_TO_ADDR
6219: GO 6132
6221: POP
6222: POP
// result := list ;
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: LD_VAR 0 5
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 2
6237: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
6245: PPUSH
6246: PPUSH
// if not factory then
6247: LD_VAR 0 1
6251: NOT
6252: IFFALSE 6256
// exit ;
6254: GO 6859
// if control = control_apeman then
6256: LD_VAR 0 4
6260: PUSH
6261: LD_INT 5
6263: EQUAL
6264: IFFALSE 6373
// begin tmp := UnitsInside ( factory ) ;
6266: LD_ADDR_VAR 0 8
6270: PUSH
6271: LD_VAR 0 1
6275: PPUSH
6276: CALL_OW 313
6280: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_INT 25
6288: PUSH
6289: LD_INT 12
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 72
6300: NOT
6301: IFFALSE 6311
// control := control_manual ;
6303: LD_ADDR_VAR 0 4
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6311: LD_ADDR_VAR 0 8
6315: PUSH
6316: LD_VAR 0 1
6320: PPUSH
6321: CALL 6008 0 1
6325: ST_TO_ADDR
// if tmp then
6326: LD_VAR 0 8
6330: IFFALSE 6373
// begin for i in tmp do
6332: LD_ADDR_VAR 0 7
6336: PUSH
6337: LD_VAR 0 8
6341: PUSH
6342: FOR_IN
6343: IFFALSE 6371
// if i [ 1 ] = b_ext_radio then
6345: LD_VAR 0 7
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PUSH
6354: LD_INT 22
6356: EQUAL
6357: IFFALSE 6369
// begin control := control_remote ;
6359: LD_ADDR_VAR 0 4
6363: PUSH
6364: LD_INT 2
6366: ST_TO_ADDR
// break ;
6367: GO 6371
// end ;
6369: GO 6342
6371: POP
6372: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6373: LD_VAR 0 1
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: LD_VAR 0 3
6387: PPUSH
6388: LD_VAR 0 4
6392: PPUSH
6393: LD_VAR 0 5
6397: PPUSH
6398: CALL_OW 448
6402: IFFALSE 6437
// begin result := [ chassis , engine , control , weapon ] ;
6404: LD_ADDR_VAR 0 6
6408: PUSH
6409: LD_VAR 0 2
6413: PUSH
6414: LD_VAR 0 3
6418: PUSH
6419: LD_VAR 0 4
6423: PUSH
6424: LD_VAR 0 5
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ST_TO_ADDR
// exit ;
6435: GO 6859
// end ; _chassis := AvailableChassisList ( factory ) ;
6437: LD_ADDR_VAR 0 9
6441: PUSH
6442: LD_VAR 0 1
6446: PPUSH
6447: CALL_OW 475
6451: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6452: LD_ADDR_VAR 0 11
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 476
6466: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6467: LD_ADDR_VAR 0 12
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 477
6481: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6482: LD_ADDR_VAR 0 10
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 478
6496: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6497: LD_VAR 0 9
6501: NOT
6502: IFTRUE 6511
6504: PUSH
6505: LD_VAR 0 11
6509: NOT
6510: OR
6511: IFTRUE 6520
6513: PUSH
6514: LD_VAR 0 12
6518: NOT
6519: OR
6520: IFTRUE 6529
6522: PUSH
6523: LD_VAR 0 10
6527: NOT
6528: OR
6529: IFFALSE 6564
// begin result := [ chassis , engine , control , weapon ] ;
6531: LD_ADDR_VAR 0 6
6535: PUSH
6536: LD_VAR 0 2
6540: PUSH
6541: LD_VAR 0 3
6545: PUSH
6546: LD_VAR 0 4
6550: PUSH
6551: LD_VAR 0 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: ST_TO_ADDR
// exit ;
6562: GO 6859
// end ; if not chassis in _chassis then
6564: LD_VAR 0 2
6568: PUSH
6569: LD_VAR 0 9
6573: IN
6574: NOT
6575: IFFALSE 6601
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: LD_VAR 0 9
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_VAR 0 9
6594: PPUSH
6595: CALL_OW 12
6599: ARRAY
6600: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6601: LD_VAR 0 2
6605: PPUSH
6606: LD_VAR 0 3
6610: PPUSH
6611: CALL 6864 0 2
6615: NOT
6616: IFFALSE 6677
// repeat engine := _engine [ 1 ] ;
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_VAR 0 11
6627: PUSH
6628: LD_INT 1
6630: ARRAY
6631: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6632: LD_ADDR_VAR 0 11
6636: PUSH
6637: LD_VAR 0 11
6641: PPUSH
6642: LD_INT 1
6644: PPUSH
6645: CALL_OW 3
6649: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6650: LD_VAR 0 2
6654: PPUSH
6655: LD_VAR 0 3
6659: PPUSH
6660: CALL 6864 0 2
6664: IFTRUE 6675
6666: PUSH
6667: LD_VAR 0 11
6671: PUSH
6672: EMPTY
6673: EQUAL
6674: OR
6675: IFFALSE 6618
// if not control in _control then
6677: LD_VAR 0 4
6681: PUSH
6682: LD_VAR 0 12
6686: IN
6687: NOT
6688: IFFALSE 6714
// control := _control [ rand ( 1 , _control ) ] ;
6690: LD_ADDR_VAR 0 4
6694: PUSH
6695: LD_VAR 0 12
6699: PUSH
6700: LD_INT 1
6702: PPUSH
6703: LD_VAR 0 12
6707: PPUSH
6708: CALL_OW 12
6712: ARRAY
6713: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_VAR 0 5
6723: PPUSH
6724: CALL 7086 0 2
6728: NOT
6729: IFFALSE 6790
// repeat weapon := _weapon [ 1 ] ;
6731: LD_ADDR_VAR 0 5
6735: PUSH
6736: LD_VAR 0 10
6740: PUSH
6741: LD_INT 1
6743: ARRAY
6744: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6745: LD_ADDR_VAR 0 10
6749: PUSH
6750: LD_VAR 0 10
6754: PPUSH
6755: LD_INT 1
6757: PPUSH
6758: CALL_OW 3
6762: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6763: LD_VAR 0 2
6767: PPUSH
6768: LD_VAR 0 5
6772: PPUSH
6773: CALL 7086 0 2
6777: IFTRUE 6788
6779: PUSH
6780: LD_VAR 0 10
6784: PUSH
6785: EMPTY
6786: EQUAL
6787: OR
6788: IFFALSE 6731
// result := [ ] ;
6790: LD_ADDR_VAR 0 6
6794: PUSH
6795: EMPTY
6796: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_VAR 0 2
6806: PPUSH
6807: LD_VAR 0 3
6811: PPUSH
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 448
6826: IFFALSE 6859
// result := [ chassis , engine , control , weapon ] ;
6828: LD_ADDR_VAR 0 6
6832: PUSH
6833: LD_VAR 0 2
6837: PUSH
6838: LD_VAR 0 3
6842: PUSH
6843: LD_VAR 0 4
6847: PUSH
6848: LD_VAR 0 5
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: ST_TO_ADDR
// end ;
6859: LD_VAR 0 6
6863: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6864: LD_INT 0
6866: PPUSH
// if not chassis or not engine then
6867: LD_VAR 0 1
6871: NOT
6872: IFTRUE 6881
6874: PUSH
6875: LD_VAR 0 2
6879: NOT
6880: OR
6881: IFFALSE 6885
// exit ;
6883: GO 7081
// case engine of engine_solar :
6885: LD_VAR 0 2
6889: PUSH
6890: LD_INT 2
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6936
6898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 13
6912: PUSH
6913: LD_INT 14
6915: PUSH
6916: LD_INT 1
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 3
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 7065
6936: LD_INT 1
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 7006
6944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_INT 11
6952: PUSH
6953: LD_INT 12
6955: PUSH
6956: LD_INT 13
6958: PUSH
6959: LD_INT 14
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: LD_INT 2
6967: PUSH
6968: LD_INT 3
6970: PUSH
6971: LD_INT 4
6973: PUSH
6974: LD_INT 5
6976: PUSH
6977: LD_INT 21
6979: PUSH
6980: LD_INT 23
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 24
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: ST_TO_ADDR
7004: GO 7065
7006: LD_INT 3
7008: DOUBLE
7009: EQUAL
7010: IFTRUE 7014
7012: GO 7064
7014: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7015: LD_ADDR_VAR 0 3
7019: PUSH
7020: LD_INT 13
7022: PUSH
7023: LD_INT 14
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 3
7031: PUSH
7032: LD_INT 4
7034: PUSH
7035: LD_INT 5
7037: PUSH
7038: LD_INT 21
7040: PUSH
7041: LD_INT 22
7043: PUSH
7044: LD_INT 23
7046: PUSH
7047: LD_INT 24
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: ST_TO_ADDR
7062: GO 7065
7064: POP
// result := ( chassis in result ) ;
7065: LD_ADDR_VAR 0 3
7069: PUSH
7070: LD_VAR 0 1
7074: PUSH
7075: LD_VAR 0 3
7079: IN
7080: ST_TO_ADDR
// end ;
7081: LD_VAR 0 3
7085: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7086: LD_INT 0
7088: PPUSH
// if not chassis or not weapon then
7089: LD_VAR 0 1
7093: NOT
7094: IFTRUE 7103
7096: PUSH
7097: LD_VAR 0 2
7101: NOT
7102: OR
7103: IFFALSE 7107
// exit ;
7105: GO 8201
// case weapon of us_machine_gun :
7107: LD_VAR 0 2
7111: PUSH
7112: LD_INT 2
7114: DOUBLE
7115: EQUAL
7116: IFTRUE 7120
7118: GO 7150
7120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: ST_TO_ADDR
7148: GO 8185
7150: LD_INT 3
7152: DOUBLE
7153: EQUAL
7154: IFTRUE 7158
7156: GO 7188
7158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_INT 1
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: LD_INT 4
7175: PUSH
7176: LD_INT 5
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 8185
7188: LD_INT 11
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7226
7196: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 1
7204: PUSH
7205: LD_INT 2
7207: PUSH
7208: LD_INT 3
7210: PUSH
7211: LD_INT 4
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: ST_TO_ADDR
7224: GO 8185
7226: LD_INT 4
7228: DOUBLE
7229: EQUAL
7230: IFTRUE 7234
7232: GO 7260
7234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7235: LD_ADDR_VAR 0 3
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 4
7248: PUSH
7249: LD_INT 5
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: ST_TO_ADDR
7258: GO 8185
7260: LD_INT 5
7262: DOUBLE
7263: EQUAL
7264: IFTRUE 7268
7266: GO 7294
7268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7269: LD_ADDR_VAR 0 3
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: LD_INT 5
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 8185
7294: LD_INT 9
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7328
7302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: LD_INT 4
7316: PUSH
7317: LD_INT 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: ST_TO_ADDR
7326: GO 8185
7328: LD_INT 7
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7362
7336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7337: LD_ADDR_VAR 0 3
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: LD_INT 4
7350: PUSH
7351: LD_INT 5
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: ST_TO_ADDR
7360: GO 8185
7362: LD_INT 12
7364: DOUBLE
7365: EQUAL
7366: IFTRUE 7370
7368: GO 7396
7370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7371: LD_ADDR_VAR 0 3
7375: PUSH
7376: LD_INT 2
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: LD_INT 5
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 8185
7396: LD_INT 13
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7430
7404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: LD_INT 5
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: ST_TO_ADDR
7428: GO 8185
7430: LD_INT 14
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7456
7438: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: LD_INT 4
7446: PUSH
7447: LD_INT 5
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: ST_TO_ADDR
7454: GO 8185
7456: LD_INT 6
7458: DOUBLE
7459: EQUAL
7460: IFTRUE 7464
7462: GO 7482
7464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7465: LD_ADDR_VAR 0 3
7469: PUSH
7470: LD_INT 4
7472: PUSH
7473: LD_INT 5
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 8185
7482: LD_INT 10
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7508
7490: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7491: LD_ADDR_VAR 0 3
7495: PUSH
7496: LD_INT 4
7498: PUSH
7499: LD_INT 5
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
7506: GO 8185
7508: LD_INT 22
7510: DOUBLE
7511: EQUAL
7512: IFTRUE 7516
7514: GO 7542
7516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7517: LD_ADDR_VAR 0 3
7521: PUSH
7522: LD_INT 11
7524: PUSH
7525: LD_INT 12
7527: PUSH
7528: LD_INT 13
7530: PUSH
7531: LD_INT 14
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: ST_TO_ADDR
7540: GO 8185
7542: LD_INT 23
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7576
7550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7551: LD_ADDR_VAR 0 3
7555: PUSH
7556: LD_INT 11
7558: PUSH
7559: LD_INT 12
7561: PUSH
7562: LD_INT 13
7564: PUSH
7565: LD_INT 14
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: ST_TO_ADDR
7574: GO 8185
7576: LD_INT 24
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7610
7584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7585: LD_ADDR_VAR 0 3
7589: PUSH
7590: LD_INT 11
7592: PUSH
7593: LD_INT 12
7595: PUSH
7596: LD_INT 13
7598: PUSH
7599: LD_INT 14
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: ST_TO_ADDR
7608: GO 8185
7610: LD_INT 30
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7644
7618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_INT 11
7626: PUSH
7627: LD_INT 12
7629: PUSH
7630: LD_INT 13
7632: PUSH
7633: LD_INT 14
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: ST_TO_ADDR
7642: GO 8185
7644: LD_INT 25
7646: DOUBLE
7647: EQUAL
7648: IFTRUE 7652
7650: GO 7670
7652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 13
7660: PUSH
7661: LD_INT 14
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: ST_TO_ADDR
7668: GO 8185
7670: LD_INT 27
7672: DOUBLE
7673: EQUAL
7674: IFTRUE 7678
7676: GO 7696
7678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: LD_INT 13
7686: PUSH
7687: LD_INT 14
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: ST_TO_ADDR
7694: GO 8185
7696: LD_INT 92
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7730
7704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7705: LD_ADDR_VAR 0 3
7709: PUSH
7710: LD_INT 11
7712: PUSH
7713: LD_INT 12
7715: PUSH
7716: LD_INT 13
7718: PUSH
7719: LD_INT 14
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
7728: GO 8185
7730: LD_INT 28
7732: DOUBLE
7733: EQUAL
7734: IFTRUE 7738
7736: GO 7756
7738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7739: LD_ADDR_VAR 0 3
7743: PUSH
7744: LD_INT 13
7746: PUSH
7747: LD_INT 14
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: ST_TO_ADDR
7754: GO 8185
7756: LD_INT 29
7758: DOUBLE
7759: EQUAL
7760: IFTRUE 7764
7762: GO 7782
7764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: LD_INT 13
7772: PUSH
7773: LD_INT 14
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: ST_TO_ADDR
7780: GO 8185
7782: LD_INT 31
7784: DOUBLE
7785: EQUAL
7786: IFTRUE 7790
7788: GO 7808
7790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_INT 13
7798: PUSH
7799: LD_INT 14
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 8185
7808: LD_INT 26
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7834
7816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7817: LD_ADDR_VAR 0 3
7821: PUSH
7822: LD_INT 13
7824: PUSH
7825: LD_INT 14
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: ST_TO_ADDR
7832: GO 8185
7834: LD_INT 42
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7868
7842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7843: LD_ADDR_VAR 0 3
7847: PUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 22
7853: PUSH
7854: LD_INT 23
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: ST_TO_ADDR
7866: GO 8185
7868: LD_INT 43
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 7902
7876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7877: LD_ADDR_VAR 0 3
7881: PUSH
7882: LD_INT 21
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_INT 23
7890: PUSH
7891: LD_INT 24
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: ST_TO_ADDR
7900: GO 8185
7902: LD_INT 44
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7936
7910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7911: LD_ADDR_VAR 0 3
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 23
7924: PUSH
7925: LD_INT 24
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 8185
7936: LD_INT 45
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 7970
7944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7945: LD_ADDR_VAR 0 3
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 22
7955: PUSH
7956: LD_INT 23
7958: PUSH
7959: LD_INT 24
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
7968: GO 8185
7970: LD_INT 49
7972: DOUBLE
7973: EQUAL
7974: IFTRUE 7978
7976: GO 8004
7978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7979: LD_ADDR_VAR 0 3
7983: PUSH
7984: LD_INT 21
7986: PUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 23
7992: PUSH
7993: LD_INT 24
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
8002: GO 8185
8004: LD_INT 51
8006: DOUBLE
8007: EQUAL
8008: IFTRUE 8012
8010: GO 8038
8012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 21
8020: PUSH
8021: LD_INT 22
8023: PUSH
8024: LD_INT 23
8026: PUSH
8027: LD_INT 24
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
8036: GO 8185
8038: LD_INT 52
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8072
8046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8047: LD_ADDR_VAR 0 3
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 22
8057: PUSH
8058: LD_INT 23
8060: PUSH
8061: LD_INT 24
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
8070: GO 8185
8072: LD_INT 53
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8098
8080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_INT 23
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: ST_TO_ADDR
8096: GO 8185
8098: LD_INT 46
8100: DOUBLE
8101: EQUAL
8102: IFTRUE 8106
8104: GO 8124
8106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: LD_INT 23
8114: PUSH
8115: LD_INT 24
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: ST_TO_ADDR
8122: GO 8185
8124: LD_INT 47
8126: DOUBLE
8127: EQUAL
8128: IFTRUE 8132
8130: GO 8150
8132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
8133: LD_ADDR_VAR 0 3
8137: PUSH
8138: LD_INT 23
8140: PUSH
8141: LD_INT 24
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: ST_TO_ADDR
8148: GO 8185
8150: LD_INT 98
8152: DOUBLE
8153: EQUAL
8154: IFTRUE 8158
8156: GO 8184
8158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8159: LD_ADDR_VAR 0 3
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 22
8169: PUSH
8170: LD_INT 23
8172: PUSH
8173: LD_INT 24
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 8185
8184: POP
// result := ( chassis in result ) ;
8185: LD_ADDR_VAR 0 3
8189: PUSH
8190: LD_VAR 0 1
8194: PUSH
8195: LD_VAR 0 3
8199: IN
8200: ST_TO_ADDR
// end ;
8201: LD_VAR 0 3
8205: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8206: LD_INT 0
8208: PPUSH
8209: PPUSH
8210: PPUSH
8211: PPUSH
8212: PPUSH
8213: PPUSH
8214: PPUSH
// result := array ;
8215: LD_ADDR_VAR 0 5
8219: PUSH
8220: LD_VAR 0 1
8224: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8225: LD_VAR 0 1
8229: NOT
8230: IFTRUE 8239
8232: PUSH
8233: LD_VAR 0 2
8237: NOT
8238: OR
8239: IFTRUE 8248
8241: PUSH
8242: LD_VAR 0 3
8246: NOT
8247: OR
8248: IFTRUE 8262
8250: PUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_VAR 0 1
8260: GREATER
8261: OR
8262: IFTRUE 8276
8264: PUSH
8265: LD_VAR 0 3
8269: PUSH
8270: LD_VAR 0 1
8274: GREATER
8275: OR
8276: IFFALSE 8280
// exit ;
8278: GO 8576
// if direction then
8280: LD_VAR 0 4
8284: IFFALSE 8348
// begin d := 1 ;
8286: LD_ADDR_VAR 0 9
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// if i_from > i_to then
8294: LD_VAR 0 2
8298: PUSH
8299: LD_VAR 0 3
8303: GREATER
8304: IFFALSE 8330
// length := ( array - i_from ) + i_to else
8306: LD_ADDR_VAR 0 11
8310: PUSH
8311: LD_VAR 0 1
8315: PUSH
8316: LD_VAR 0 2
8320: MINUS
8321: PUSH
8322: LD_VAR 0 3
8326: PLUS
8327: ST_TO_ADDR
8328: GO 8346
// length := i_to - i_from ;
8330: LD_ADDR_VAR 0 11
8334: PUSH
8335: LD_VAR 0 3
8339: PUSH
8340: LD_VAR 0 2
8344: MINUS
8345: ST_TO_ADDR
// end else
8346: GO 8409
// begin d := - 1 ;
8348: LD_ADDR_VAR 0 9
8352: PUSH
8353: LD_INT 1
8355: NEG
8356: ST_TO_ADDR
// if i_from > i_to then
8357: LD_VAR 0 2
8361: PUSH
8362: LD_VAR 0 3
8366: GREATER
8367: IFFALSE 8387
// length := i_from - i_to else
8369: LD_ADDR_VAR 0 11
8373: PUSH
8374: LD_VAR 0 2
8378: PUSH
8379: LD_VAR 0 3
8383: MINUS
8384: ST_TO_ADDR
8385: GO 8409
// length := ( array - i_to ) + i_from ;
8387: LD_ADDR_VAR 0 11
8391: PUSH
8392: LD_VAR 0 1
8396: PUSH
8397: LD_VAR 0 3
8401: MINUS
8402: PUSH
8403: LD_VAR 0 2
8407: PLUS
8408: ST_TO_ADDR
// end ; if not length then
8409: LD_VAR 0 11
8413: NOT
8414: IFFALSE 8418
// exit ;
8416: GO 8576
// tmp := array ;
8418: LD_ADDR_VAR 0 10
8422: PUSH
8423: LD_VAR 0 1
8427: ST_TO_ADDR
// for i = 1 to length do
8428: LD_ADDR_VAR 0 6
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_VAR 0 11
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8564
// begin for j = 1 to array do
8446: LD_ADDR_VAR 0 7
8450: PUSH
8451: DOUBLE
8452: LD_INT 1
8454: DEC
8455: ST_TO_ADDR
8456: LD_VAR 0 1
8460: PUSH
8461: FOR_TO
8462: IFFALSE 8550
// begin k := j + d ;
8464: LD_ADDR_VAR 0 8
8468: PUSH
8469: LD_VAR 0 7
8473: PUSH
8474: LD_VAR 0 9
8478: PLUS
8479: ST_TO_ADDR
// if k > array then
8480: LD_VAR 0 8
8484: PUSH
8485: LD_VAR 0 1
8489: GREATER
8490: IFFALSE 8500
// k := 1 ;
8492: LD_ADDR_VAR 0 8
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if not k then
8500: LD_VAR 0 8
8504: NOT
8505: IFFALSE 8517
// k := array ;
8507: LD_ADDR_VAR 0 8
8511: PUSH
8512: LD_VAR 0 1
8516: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: LD_VAR 0 10
8526: PPUSH
8527: LD_VAR 0 8
8531: PPUSH
8532: LD_VAR 0 1
8536: PUSH
8537: LD_VAR 0 7
8541: ARRAY
8542: PPUSH
8543: CALL_OW 1
8547: ST_TO_ADDR
// end ;
8548: GO 8461
8550: POP
8551: POP
// array := tmp ;
8552: LD_ADDR_VAR 0 1
8556: PUSH
8557: LD_VAR 0 10
8561: ST_TO_ADDR
// end ;
8562: GO 8443
8564: POP
8565: POP
// result := array ;
8566: LD_ADDR_VAR 0 5
8570: PUSH
8571: LD_VAR 0 1
8575: ST_TO_ADDR
// end ;
8576: LD_VAR 0 5
8580: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8581: LD_INT 0
8583: PPUSH
8584: PPUSH
// result := 0 ;
8585: LD_ADDR_VAR 0 3
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// if not array or not value in array then
8593: LD_VAR 0 1
8597: NOT
8598: IFTRUE 8613
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_VAR 0 1
8610: IN
8611: NOT
8612: OR
8613: IFFALSE 8617
// exit ;
8615: GO 8671
// for i = 1 to array do
8617: LD_ADDR_VAR 0 4
8621: PUSH
8622: DOUBLE
8623: LD_INT 1
8625: DEC
8626: ST_TO_ADDR
8627: LD_VAR 0 1
8631: PUSH
8632: FOR_TO
8633: IFFALSE 8669
// if value = array [ i ] then
8635: LD_VAR 0 2
8639: PUSH
8640: LD_VAR 0 1
8644: PUSH
8645: LD_VAR 0 4
8649: ARRAY
8650: EQUAL
8651: IFFALSE 8667
// begin result := i ;
8653: LD_ADDR_VAR 0 3
8657: PUSH
8658: LD_VAR 0 4
8662: ST_TO_ADDR
// exit ;
8663: POP
8664: POP
8665: GO 8671
// end ;
8667: GO 8632
8669: POP
8670: POP
// end ;
8671: LD_VAR 0 3
8675: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8676: LD_INT 0
8678: PPUSH
// vc_chassis := chassis ;
8679: LD_ADDR_OWVAR 37
8683: PUSH
8684: LD_VAR 0 1
8688: ST_TO_ADDR
// vc_engine := engine ;
8689: LD_ADDR_OWVAR 39
8693: PUSH
8694: LD_VAR 0 2
8698: ST_TO_ADDR
// vc_control := control ;
8699: LD_ADDR_OWVAR 38
8703: PUSH
8704: LD_VAR 0 3
8708: ST_TO_ADDR
// vc_weapon := weapon ;
8709: LD_ADDR_OWVAR 40
8713: PUSH
8714: LD_VAR 0 4
8718: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8719: LD_ADDR_OWVAR 41
8723: PUSH
8724: LD_VAR 0 5
8728: ST_TO_ADDR
// end ;
8729: LD_VAR 0 6
8733: RET
// export function WantPlant ( unit ) ; var task ; begin
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
// result := false ;
8738: LD_ADDR_VAR 0 2
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8746: LD_ADDR_VAR 0 3
8750: PUSH
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 437
8760: ST_TO_ADDR
// if task then
8761: LD_VAR 0 3
8765: IFFALSE 8793
// if task [ 1 ] [ 1 ] = p then
8767: LD_VAR 0 3
8771: PUSH
8772: LD_INT 1
8774: ARRAY
8775: PUSH
8776: LD_INT 1
8778: ARRAY
8779: PUSH
8780: LD_STRING p
8782: EQUAL
8783: IFFALSE 8793
// result := true ;
8785: LD_ADDR_VAR 0 2
8789: PUSH
8790: LD_INT 1
8792: ST_TO_ADDR
// end ;
8793: LD_VAR 0 2
8797: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8798: LD_INT 0
8800: PPUSH
8801: PPUSH
8802: PPUSH
8803: PPUSH
// if pos < 1 then
8804: LD_VAR 0 2
8808: PUSH
8809: LD_INT 1
8811: LESS
8812: IFFALSE 8816
// exit ;
8814: GO 9119
// if pos = 1 then
8816: LD_VAR 0 2
8820: PUSH
8821: LD_INT 1
8823: EQUAL
8824: IFFALSE 8857
// result := Replace ( arr , pos [ 1 ] , value ) else
8826: LD_ADDR_VAR 0 4
8830: PUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: LD_VAR 0 3
8849: PPUSH
8850: CALL_OW 1
8854: ST_TO_ADDR
8855: GO 9119
// begin tmp := arr ;
8857: LD_ADDR_VAR 0 6
8861: PUSH
8862: LD_VAR 0 1
8866: ST_TO_ADDR
// s_arr := [ tmp ] ;
8867: LD_ADDR_VAR 0 7
8871: PUSH
8872: LD_VAR 0 6
8876: PUSH
8877: EMPTY
8878: LIST
8879: ST_TO_ADDR
// for i = 1 to pos - 1 do
8880: LD_ADDR_VAR 0 5
8884: PUSH
8885: DOUBLE
8886: LD_INT 1
8888: DEC
8889: ST_TO_ADDR
8890: LD_VAR 0 2
8894: PUSH
8895: LD_INT 1
8897: MINUS
8898: PUSH
8899: FOR_TO
8900: IFFALSE 8945
// begin tmp := tmp [ pos [ i ] ] ;
8902: LD_ADDR_VAR 0 6
8906: PUSH
8907: LD_VAR 0 6
8911: PUSH
8912: LD_VAR 0 2
8916: PUSH
8917: LD_VAR 0 5
8921: ARRAY
8922: ARRAY
8923: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8924: LD_ADDR_VAR 0 7
8928: PUSH
8929: LD_VAR 0 7
8933: PUSH
8934: LD_VAR 0 6
8938: PUSH
8939: EMPTY
8940: LIST
8941: ADD
8942: ST_TO_ADDR
// end ;
8943: GO 8899
8945: POP
8946: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8947: LD_ADDR_VAR 0 6
8951: PUSH
8952: LD_VAR 0 6
8956: PPUSH
8957: LD_VAR 0 2
8961: PUSH
8962: LD_VAR 0 2
8966: ARRAY
8967: PPUSH
8968: LD_VAR 0 3
8972: PPUSH
8973: CALL_OW 1
8977: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8978: LD_ADDR_VAR 0 7
8982: PUSH
8983: LD_VAR 0 7
8987: PPUSH
8988: LD_VAR 0 7
8992: PPUSH
8993: LD_VAR 0 6
8997: PPUSH
8998: CALL_OW 1
9002: ST_TO_ADDR
// for i = s_arr downto 2 do
9003: LD_ADDR_VAR 0 5
9007: PUSH
9008: DOUBLE
9009: LD_VAR 0 7
9013: INC
9014: ST_TO_ADDR
9015: LD_INT 2
9017: PUSH
9018: FOR_DOWNTO
9019: IFFALSE 9103
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9021: LD_ADDR_VAR 0 6
9025: PUSH
9026: LD_VAR 0 7
9030: PUSH
9031: LD_VAR 0 5
9035: PUSH
9036: LD_INT 1
9038: MINUS
9039: ARRAY
9040: PPUSH
9041: LD_VAR 0 2
9045: PUSH
9046: LD_VAR 0 5
9050: PUSH
9051: LD_INT 1
9053: MINUS
9054: ARRAY
9055: PPUSH
9056: LD_VAR 0 7
9060: PUSH
9061: LD_VAR 0 5
9065: ARRAY
9066: PPUSH
9067: CALL_OW 1
9071: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9072: LD_ADDR_VAR 0 7
9076: PUSH
9077: LD_VAR 0 7
9081: PPUSH
9082: LD_VAR 0 5
9086: PUSH
9087: LD_INT 1
9089: MINUS
9090: PPUSH
9091: LD_VAR 0 6
9095: PPUSH
9096: CALL_OW 1
9100: ST_TO_ADDR
// end ;
9101: GO 9018
9103: POP
9104: POP
// result := s_arr [ 1 ] ;
9105: LD_ADDR_VAR 0 4
9109: PUSH
9110: LD_VAR 0 7
9114: PUSH
9115: LD_INT 1
9117: ARRAY
9118: ST_TO_ADDR
// end ; end ;
9119: LD_VAR 0 4
9123: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9124: LD_INT 0
9126: PPUSH
9127: PPUSH
// if not list then
9128: LD_VAR 0 1
9132: NOT
9133: IFFALSE 9137
// exit ;
9135: GO 9228
// i := list [ pos1 ] ;
9137: LD_ADDR_VAR 0 5
9141: PUSH
9142: LD_VAR 0 1
9146: PUSH
9147: LD_VAR 0 2
9151: ARRAY
9152: ST_TO_ADDR
// if not i then
9153: LD_VAR 0 5
9157: NOT
9158: IFFALSE 9162
// exit ;
9160: GO 9228
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9162: LD_ADDR_VAR 0 1
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: LD_VAR 0 2
9176: PPUSH
9177: LD_VAR 0 1
9181: PUSH
9182: LD_VAR 0 3
9186: ARRAY
9187: PPUSH
9188: CALL_OW 1
9192: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: LD_VAR 0 1
9202: PPUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: LD_VAR 0 5
9212: PPUSH
9213: CALL_OW 1
9217: ST_TO_ADDR
// result := list ;
9218: LD_ADDR_VAR 0 4
9222: PUSH
9223: LD_VAR 0 1
9227: ST_TO_ADDR
// end ;
9228: LD_VAR 0 4
9232: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9233: LD_INT 0
9235: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9236: LD_ADDR_VAR 0 5
9240: PUSH
9241: LD_VAR 0 1
9245: PPUSH
9246: CALL_OW 250
9250: PPUSH
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 251
9260: PPUSH
9261: LD_VAR 0 2
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: LD_VAR 0 4
9275: PPUSH
9276: CALL 9658 0 5
9280: ST_TO_ADDR
// end ;
9281: LD_VAR 0 5
9285: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
// if not list or not unit then
9292: LD_VAR 0 2
9296: NOT
9297: IFTRUE 9306
9299: PUSH
9300: LD_VAR 0 1
9304: NOT
9305: OR
9306: IFFALSE 9310
// exit ;
9308: GO 9653
// result := [ ] ;
9310: LD_ADDR_VAR 0 5
9314: PUSH
9315: EMPTY
9316: ST_TO_ADDR
// for i in list do
9317: LD_ADDR_VAR 0 6
9321: PUSH
9322: LD_VAR 0 2
9326: PUSH
9327: FOR_IN
9328: IFFALSE 9546
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9330: LD_ADDR_VAR 0 8
9334: PUSH
9335: LD_VAR 0 1
9339: PPUSH
9340: LD_VAR 0 6
9344: PUSH
9345: LD_INT 1
9347: ARRAY
9348: PPUSH
9349: LD_VAR 0 6
9353: PUSH
9354: LD_INT 2
9356: ARRAY
9357: PPUSH
9358: CALL_OW 297
9362: ST_TO_ADDR
// if not Count ( result ) then
9363: LD_VAR 0 5
9367: PPUSH
9368: CALL 5880 0 1
9372: NOT
9373: IFFALSE 9406
// begin result := Join ( result , [ i , tmp ] ) ;
9375: LD_ADDR_VAR 0 5
9379: PUSH
9380: LD_VAR 0 5
9384: PPUSH
9385: LD_VAR 0 6
9389: PUSH
9390: LD_VAR 0 8
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL 41856 0 2
9403: ST_TO_ADDR
// continue ;
9404: GO 9327
// end ; if result [ result ] [ 2 ] <= tmp then
9406: LD_VAR 0 5
9410: PUSH
9411: LD_VAR 0 5
9415: ARRAY
9416: PUSH
9417: LD_INT 2
9419: ARRAY
9420: PUSH
9421: LD_VAR 0 8
9425: LESSEQUAL
9426: IFFALSE 9459
// result := Join ( result , [ i , tmp ] ) else
9428: LD_ADDR_VAR 0 5
9432: PUSH
9433: LD_VAR 0 5
9437: PPUSH
9438: LD_VAR 0 6
9442: PUSH
9443: LD_VAR 0 8
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL 41856 0 2
9456: ST_TO_ADDR
9457: GO 9544
// begin for j := 1 to Count ( result ) do
9459: LD_ADDR_VAR 0 7
9463: PUSH
9464: DOUBLE
9465: LD_INT 1
9467: DEC
9468: ST_TO_ADDR
9469: LD_VAR 0 5
9473: PPUSH
9474: CALL 5880 0 1
9478: PUSH
9479: FOR_TO
9480: IFFALSE 9542
// begin if tmp < result [ j ] [ 2 ] then
9482: LD_VAR 0 8
9486: PUSH
9487: LD_VAR 0 5
9491: PUSH
9492: LD_VAR 0 7
9496: ARRAY
9497: PUSH
9498: LD_INT 2
9500: ARRAY
9501: LESS
9502: IFFALSE 9540
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9504: LD_ADDR_VAR 0 5
9508: PUSH
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 7
9518: PPUSH
9519: LD_VAR 0 6
9523: PUSH
9524: LD_VAR 0 8
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PPUSH
9533: CALL_OW 2
9537: ST_TO_ADDR
// break ;
9538: GO 9542
// end ; end ;
9540: GO 9479
9542: POP
9543: POP
// end ; end ;
9544: GO 9327
9546: POP
9547: POP
// if result and not asc then
9548: LD_VAR 0 5
9552: IFFALSE 9561
9554: PUSH
9555: LD_VAR 0 3
9559: NOT
9560: AND
9561: IFFALSE 9578
// result := ReverseArray ( result ) ;
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: LD_VAR 0 5
9572: PPUSH
9573: CALL 36936 0 1
9577: ST_TO_ADDR
// tmp := [ ] ;
9578: LD_ADDR_VAR 0 8
9582: PUSH
9583: EMPTY
9584: ST_TO_ADDR
// if mode then
9585: LD_VAR 0 4
9589: IFFALSE 9653
// begin for i := 1 to result do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_VAR 0 5
9605: PUSH
9606: FOR_TO
9607: IFFALSE 9641
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9609: LD_ADDR_VAR 0 8
9613: PUSH
9614: LD_VAR 0 8
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_VAR 0 6
9628: ARRAY
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: CALL 41856 0 2
9638: ST_TO_ADDR
9639: GO 9606
9641: POP
9642: POP
// result := tmp ;
9643: LD_ADDR_VAR 0 5
9647: PUSH
9648: LD_VAR 0 8
9652: ST_TO_ADDR
// end ; end ;
9653: LD_VAR 0 5
9657: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9658: LD_INT 0
9660: PPUSH
9661: PPUSH
9662: PPUSH
9663: PPUSH
// if not list then
9664: LD_VAR 0 3
9668: NOT
9669: IFFALSE 9673
// exit ;
9671: GO 10063
// result := [ ] ;
9673: LD_ADDR_VAR 0 6
9677: PUSH
9678: EMPTY
9679: ST_TO_ADDR
// for i in list do
9680: LD_ADDR_VAR 0 7
9684: PUSH
9685: LD_VAR 0 3
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9893
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9693: LD_ADDR_VAR 0 9
9697: PUSH
9698: LD_VAR 0 7
9702: PPUSH
9703: LD_VAR 0 1
9707: PPUSH
9708: LD_VAR 0 2
9712: PPUSH
9713: CALL_OW 297
9717: ST_TO_ADDR
// if not result then
9718: LD_VAR 0 6
9722: NOT
9723: IFFALSE 9749
// result := [ [ i , tmp ] ] else
9725: LD_ADDR_VAR 0 6
9729: PUSH
9730: LD_VAR 0 7
9734: PUSH
9735: LD_VAR 0 9
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: ST_TO_ADDR
9747: GO 9891
// begin if result [ result ] [ 2 ] <= tmp then
9749: LD_VAR 0 6
9753: PUSH
9754: LD_VAR 0 6
9758: ARRAY
9759: PUSH
9760: LD_INT 2
9762: ARRAY
9763: PUSH
9764: LD_VAR 0 9
9768: LESSEQUAL
9769: IFFALSE 9811
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9771: LD_ADDR_VAR 0 6
9775: PUSH
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_VAR 0 6
9785: PUSH
9786: LD_INT 1
9788: PLUS
9789: PPUSH
9790: LD_VAR 0 7
9794: PUSH
9795: LD_VAR 0 9
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 2
9808: ST_TO_ADDR
9809: GO 9891
// for j := 1 to result do
9811: LD_ADDR_VAR 0 8
9815: PUSH
9816: DOUBLE
9817: LD_INT 1
9819: DEC
9820: ST_TO_ADDR
9821: LD_VAR 0 6
9825: PUSH
9826: FOR_TO
9827: IFFALSE 9889
// begin if tmp < result [ j ] [ 2 ] then
9829: LD_VAR 0 9
9833: PUSH
9834: LD_VAR 0 6
9838: PUSH
9839: LD_VAR 0 8
9843: ARRAY
9844: PUSH
9845: LD_INT 2
9847: ARRAY
9848: LESS
9849: IFFALSE 9887
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9851: LD_ADDR_VAR 0 6
9855: PUSH
9856: LD_VAR 0 6
9860: PPUSH
9861: LD_VAR 0 8
9865: PPUSH
9866: LD_VAR 0 7
9870: PUSH
9871: LD_VAR 0 9
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 2
9884: ST_TO_ADDR
// break ;
9885: GO 9889
// end ; end ;
9887: GO 9826
9889: POP
9890: POP
// end ; end ;
9891: GO 9690
9893: POP
9894: POP
// if result and not asc then
9895: LD_VAR 0 6
9899: IFFALSE 9908
9901: PUSH
9902: LD_VAR 0 4
9906: NOT
9907: AND
9908: IFFALSE 9983
// begin tmp := result ;
9910: LD_ADDR_VAR 0 9
9914: PUSH
9915: LD_VAR 0 6
9919: ST_TO_ADDR
// for i = tmp downto 1 do
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: DOUBLE
9926: LD_VAR 0 9
9930: INC
9931: ST_TO_ADDR
9932: LD_INT 1
9934: PUSH
9935: FOR_DOWNTO
9936: IFFALSE 9981
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9938: LD_ADDR_VAR 0 6
9942: PUSH
9943: LD_VAR 0 6
9947: PPUSH
9948: LD_VAR 0 9
9952: PUSH
9953: LD_VAR 0 7
9957: MINUS
9958: PUSH
9959: LD_INT 1
9961: PLUS
9962: PPUSH
9963: LD_VAR 0 9
9967: PUSH
9968: LD_VAR 0 7
9972: ARRAY
9973: PPUSH
9974: CALL_OW 1
9978: ST_TO_ADDR
9979: GO 9935
9981: POP
9982: POP
// end ; tmp := [ ] ;
9983: LD_ADDR_VAR 0 9
9987: PUSH
9988: EMPTY
9989: ST_TO_ADDR
// if mode then
9990: LD_VAR 0 5
9994: IFFALSE 10063
// begin for i = 1 to result do
9996: LD_ADDR_VAR 0 7
10000: PUSH
10001: DOUBLE
10002: LD_INT 1
10004: DEC
10005: ST_TO_ADDR
10006: LD_VAR 0 6
10010: PUSH
10011: FOR_TO
10012: IFFALSE 10051
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10014: LD_ADDR_VAR 0 9
10018: PUSH
10019: LD_VAR 0 9
10023: PPUSH
10024: LD_VAR 0 7
10028: PPUSH
10029: LD_VAR 0 6
10033: PUSH
10034: LD_VAR 0 7
10038: ARRAY
10039: PUSH
10040: LD_INT 1
10042: ARRAY
10043: PPUSH
10044: CALL_OW 1
10048: ST_TO_ADDR
10049: GO 10011
10051: POP
10052: POP
// result := tmp ;
10053: LD_ADDR_VAR 0 6
10057: PUSH
10058: LD_VAR 0 9
10062: ST_TO_ADDR
// end ; end ;
10063: LD_VAR 0 6
10067: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
10075: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10076: LD_ADDR_VAR 0 5
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: EMPTY
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: ST_TO_ADDR
// if not x or not y then
10098: LD_VAR 0 2
10102: NOT
10103: IFTRUE 10112
10105: PUSH
10106: LD_VAR 0 3
10110: NOT
10111: OR
10112: IFFALSE 10116
// exit ;
10114: GO 11772
// if not range then
10116: LD_VAR 0 4
10120: NOT
10121: IFFALSE 10131
// range := 10 ;
10123: LD_ADDR_VAR 0 4
10127: PUSH
10128: LD_INT 10
10130: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10131: LD_ADDR_VAR 0 8
10135: PUSH
10136: LD_INT 81
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 92
10150: PUSH
10151: LD_VAR 0 2
10155: PUSH
10156: LD_VAR 0 3
10160: PUSH
10161: LD_VAR 0 4
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: LD_INT 21
10177: PUSH
10178: LD_INT 3
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: ST_TO_ADDR
// if not tmp then
10199: LD_VAR 0 8
10203: NOT
10204: IFFALSE 10208
// exit ;
10206: GO 11772
// for i in tmp do
10208: LD_ADDR_VAR 0 6
10212: PUSH
10213: LD_VAR 0 8
10217: PUSH
10218: FOR_IN
10219: IFFALSE 11747
// begin points := [ 0 , 0 , 0 ] ;
10221: LD_ADDR_VAR 0 9
10225: PUSH
10226: LD_INT 0
10228: PUSH
10229: LD_INT 0
10231: PUSH
10232: LD_INT 0
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: ST_TO_ADDR
// bpoints := 1 ;
10240: LD_ADDR_VAR 0 10
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10248: LD_VAR 0 6
10252: PPUSH
10253: CALL_OW 247
10257: PUSH
10258: LD_INT 1
10260: DOUBLE
10261: EQUAL
10262: IFTRUE 10266
10264: GO 10848
10266: POP
// begin if GetClass ( i ) = 1 then
10267: LD_VAR 0 6
10271: PPUSH
10272: CALL_OW 257
10276: PUSH
10277: LD_INT 1
10279: EQUAL
10280: IFFALSE 10301
// points := [ 10 , 5 , 3 ] ;
10282: LD_ADDR_VAR 0 9
10286: PUSH
10287: LD_INT 10
10289: PUSH
10290: LD_INT 5
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10301: LD_VAR 0 6
10305: PPUSH
10306: CALL_OW 257
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 4
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: IN
10325: IFFALSE 10346
// points := [ 3 , 2 , 1 ] ;
10327: LD_ADDR_VAR 0 9
10331: PUSH
10332: LD_INT 3
10334: PUSH
10335: LD_INT 2
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10346: LD_VAR 0 6
10350: PPUSH
10351: CALL_OW 257
10355: PUSH
10356: LD_INT 5
10358: EQUAL
10359: IFFALSE 10380
// points := [ 130 , 5 , 2 ] ;
10361: LD_ADDR_VAR 0 9
10365: PUSH
10366: LD_INT 130
10368: PUSH
10369: LD_INT 5
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10380: LD_VAR 0 6
10384: PPUSH
10385: CALL_OW 257
10389: PUSH
10390: LD_INT 8
10392: EQUAL
10393: IFFALSE 10414
// points := [ 35 , 35 , 30 ] ;
10395: LD_ADDR_VAR 0 9
10399: PUSH
10400: LD_INT 35
10402: PUSH
10403: LD_INT 35
10405: PUSH
10406: LD_INT 30
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10414: LD_VAR 0 6
10418: PPUSH
10419: CALL_OW 257
10423: PUSH
10424: LD_INT 9
10426: EQUAL
10427: IFFALSE 10448
// points := [ 20 , 55 , 40 ] ;
10429: LD_ADDR_VAR 0 9
10433: PUSH
10434: LD_INT 20
10436: PUSH
10437: LD_INT 55
10439: PUSH
10440: LD_INT 40
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10448: LD_VAR 0 6
10452: PPUSH
10453: CALL_OW 257
10457: PUSH
10458: LD_INT 12
10460: PUSH
10461: LD_INT 16
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: IN
10468: IFFALSE 10489
// points := [ 5 , 3 , 2 ] ;
10470: LD_ADDR_VAR 0 9
10474: PUSH
10475: LD_INT 5
10477: PUSH
10478: LD_INT 3
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10489: LD_VAR 0 6
10493: PPUSH
10494: CALL_OW 257
10498: PUSH
10499: LD_INT 17
10501: EQUAL
10502: IFFALSE 10523
// points := [ 100 , 50 , 75 ] ;
10504: LD_ADDR_VAR 0 9
10508: PUSH
10509: LD_INT 100
10511: PUSH
10512: LD_INT 50
10514: PUSH
10515: LD_INT 75
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 257
10532: PUSH
10533: LD_INT 15
10535: EQUAL
10536: IFFALSE 10557
// points := [ 10 , 5 , 3 ] ;
10538: LD_ADDR_VAR 0 9
10542: PUSH
10543: LD_INT 10
10545: PUSH
10546: LD_INT 5
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10557: LD_VAR 0 6
10561: PPUSH
10562: CALL_OW 257
10566: PUSH
10567: LD_INT 14
10569: EQUAL
10570: IFFALSE 10591
// points := [ 10 , 0 , 0 ] ;
10572: LD_ADDR_VAR 0 9
10576: PUSH
10577: LD_INT 10
10579: PUSH
10580: LD_INT 0
10582: PUSH
10583: LD_INT 0
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10591: LD_VAR 0 6
10595: PPUSH
10596: CALL_OW 257
10600: PUSH
10601: LD_INT 11
10603: EQUAL
10604: IFFALSE 10625
// points := [ 30 , 10 , 5 ] ;
10606: LD_ADDR_VAR 0 9
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 10
10616: PUSH
10617: LD_INT 5
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10625: LD_VAR 0 1
10629: PPUSH
10630: LD_INT 5
10632: PPUSH
10633: CALL_OW 321
10637: PUSH
10638: LD_INT 2
10640: EQUAL
10641: IFFALSE 10658
// bpoints := bpoints * 1.8 ;
10643: LD_ADDR_VAR 0 10
10647: PUSH
10648: LD_VAR 0 10
10652: PUSH
10653: LD_REAL  1.80000000000000E+0000
10656: MUL
10657: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10658: LD_VAR 0 6
10662: PPUSH
10663: CALL_OW 257
10667: PUSH
10668: LD_INT 1
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 3
10676: PUSH
10677: LD_INT 4
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: IN
10686: IFFALSE 10706
10688: PUSH
10689: LD_VAR 0 1
10693: PPUSH
10694: LD_INT 51
10696: PPUSH
10697: CALL_OW 321
10701: PUSH
10702: LD_INT 2
10704: EQUAL
10705: AND
10706: IFFALSE 10723
// bpoints := bpoints * 1.2 ;
10708: LD_ADDR_VAR 0 10
10712: PUSH
10713: LD_VAR 0 10
10717: PUSH
10718: LD_REAL  1.20000000000000E+0000
10721: MUL
10722: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10723: LD_VAR 0 6
10727: PPUSH
10728: CALL_OW 257
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: LD_INT 7
10738: PUSH
10739: LD_INT 9
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: IN
10747: IFFALSE 10767
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: LD_INT 52
10757: PPUSH
10758: CALL_OW 321
10762: PUSH
10763: LD_INT 2
10765: EQUAL
10766: AND
10767: IFFALSE 10784
// bpoints := bpoints * 1.5 ;
10769: LD_ADDR_VAR 0 10
10773: PUSH
10774: LD_VAR 0 10
10778: PUSH
10779: LD_REAL  1.50000000000000E+0000
10782: MUL
10783: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10784: LD_VAR 0 1
10788: PPUSH
10789: LD_INT 66
10791: PPUSH
10792: CALL_OW 321
10796: PUSH
10797: LD_INT 2
10799: EQUAL
10800: IFFALSE 10817
// bpoints := bpoints * 1.1 ;
10802: LD_ADDR_VAR 0 10
10806: PUSH
10807: LD_VAR 0 10
10811: PUSH
10812: LD_REAL  1.10000000000000E+0000
10815: MUL
10816: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10817: LD_ADDR_VAR 0 10
10821: PUSH
10822: LD_VAR 0 10
10826: PUSH
10827: LD_VAR 0 6
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: CALL_OW 259
10839: PUSH
10840: LD_REAL  1.15000000000000E+0000
10843: MUL
10844: MUL
10845: ST_TO_ADDR
// end ; unit_vehicle :
10846: GO 11676
10848: LD_INT 2
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11664
10856: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10857: LD_VAR 0 6
10861: PPUSH
10862: CALL_OW 264
10866: PUSH
10867: LD_INT 2
10869: PUSH
10870: LD_INT 42
10872: PUSH
10873: LD_INT 24
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: IN
10881: IFFALSE 10902
// points := [ 25 , 5 , 3 ] ;
10883: LD_ADDR_VAR 0 9
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 5
10893: PUSH
10894: LD_INT 3
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10902: LD_VAR 0 6
10906: PPUSH
10907: CALL_OW 264
10911: PUSH
10912: LD_INT 4
10914: PUSH
10915: LD_INT 43
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: IN
10926: IFFALSE 10947
// points := [ 40 , 15 , 5 ] ;
10928: LD_ADDR_VAR 0 9
10932: PUSH
10933: LD_INT 40
10935: PUSH
10936: LD_INT 15
10938: PUSH
10939: LD_INT 5
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10947: LD_VAR 0 6
10951: PPUSH
10952: CALL_OW 264
10956: PUSH
10957: LD_INT 3
10959: PUSH
10960: LD_INT 23
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: IN
10967: IFFALSE 10988
// points := [ 7 , 25 , 8 ] ;
10969: LD_ADDR_VAR 0 9
10973: PUSH
10974: LD_INT 7
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 8
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10988: LD_VAR 0 6
10992: PPUSH
10993: CALL_OW 264
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: LD_INT 27
11003: PUSH
11004: LD_INT 44
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: IN
11012: IFFALSE 11033
// points := [ 14 , 50 , 16 ] ;
11014: LD_ADDR_VAR 0 9
11018: PUSH
11019: LD_INT 14
11021: PUSH
11022: LD_INT 50
11024: PUSH
11025: LD_INT 16
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11033: LD_VAR 0 6
11037: PPUSH
11038: CALL_OW 264
11042: PUSH
11043: LD_INT 6
11045: PUSH
11046: LD_INT 46
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: IN
11053: IFFALSE 11074
// points := [ 32 , 120 , 70 ] ;
11055: LD_ADDR_VAR 0 9
11059: PUSH
11060: LD_INT 32
11062: PUSH
11063: LD_INT 120
11065: PUSH
11066: LD_INT 70
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11074: LD_VAR 0 6
11078: PPUSH
11079: CALL_OW 264
11083: PUSH
11084: LD_INT 7
11086: PUSH
11087: LD_INT 28
11089: PUSH
11090: LD_INT 45
11092: PUSH
11093: LD_INT 92
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: IN
11102: IFFALSE 11123
// points := [ 35 , 20 , 45 ] ;
11104: LD_ADDR_VAR 0 9
11108: PUSH
11109: LD_INT 35
11111: PUSH
11112: LD_INT 20
11114: PUSH
11115: LD_INT 45
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11123: LD_VAR 0 6
11127: PPUSH
11128: CALL_OW 264
11132: PUSH
11133: LD_INT 47
11135: PUSH
11136: EMPTY
11137: LIST
11138: IN
11139: IFFALSE 11160
// points := [ 67 , 45 , 75 ] ;
11141: LD_ADDR_VAR 0 9
11145: PUSH
11146: LD_INT 67
11148: PUSH
11149: LD_INT 45
11151: PUSH
11152: LD_INT 75
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11160: LD_VAR 0 6
11164: PPUSH
11165: CALL_OW 264
11169: PUSH
11170: LD_INT 26
11172: PUSH
11173: EMPTY
11174: LIST
11175: IN
11176: IFFALSE 11197
// points := [ 120 , 30 , 80 ] ;
11178: LD_ADDR_VAR 0 9
11182: PUSH
11183: LD_INT 120
11185: PUSH
11186: LD_INT 30
11188: PUSH
11189: LD_INT 80
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11197: LD_VAR 0 6
11201: PPUSH
11202: CALL_OW 264
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: EMPTY
11211: LIST
11212: IN
11213: IFFALSE 11234
// points := [ 40 , 1 , 1 ] ;
11215: LD_ADDR_VAR 0 9
11219: PUSH
11220: LD_INT 40
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11234: LD_VAR 0 6
11238: PPUSH
11239: CALL_OW 264
11243: PUSH
11244: LD_INT 29
11246: PUSH
11247: EMPTY
11248: LIST
11249: IN
11250: IFFALSE 11271
// points := [ 70 , 200 , 400 ] ;
11252: LD_ADDR_VAR 0 9
11256: PUSH
11257: LD_INT 70
11259: PUSH
11260: LD_INT 200
11262: PUSH
11263: LD_INT 400
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11271: LD_VAR 0 6
11275: PPUSH
11276: CALL_OW 264
11280: PUSH
11281: LD_INT 14
11283: PUSH
11284: LD_INT 53
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: IN
11291: IFFALSE 11312
// points := [ 40 , 10 , 20 ] ;
11293: LD_ADDR_VAR 0 9
11297: PUSH
11298: LD_INT 40
11300: PUSH
11301: LD_INT 10
11303: PUSH
11304: LD_INT 20
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11312: LD_VAR 0 6
11316: PPUSH
11317: CALL_OW 264
11321: PUSH
11322: LD_INT 9
11324: PUSH
11325: EMPTY
11326: LIST
11327: IN
11328: IFFALSE 11349
// points := [ 5 , 70 , 20 ] ;
11330: LD_ADDR_VAR 0 9
11334: PUSH
11335: LD_INT 5
11337: PUSH
11338: LD_INT 70
11340: PUSH
11341: LD_INT 20
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11349: LD_VAR 0 6
11353: PPUSH
11354: CALL_OW 264
11358: PUSH
11359: LD_INT 10
11361: PUSH
11362: EMPTY
11363: LIST
11364: IN
11365: IFFALSE 11386
// points := [ 35 , 110 , 70 ] ;
11367: LD_ADDR_VAR 0 9
11371: PUSH
11372: LD_INT 35
11374: PUSH
11375: LD_INT 110
11377: PUSH
11378: LD_INT 70
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11386: LD_VAR 0 6
11390: PPUSH
11391: CALL_OW 265
11395: PUSH
11396: LD_INT 25
11398: EQUAL
11399: IFFALSE 11420
// points := [ 80 , 65 , 100 ] ;
11401: LD_ADDR_VAR 0 9
11405: PUSH
11406: LD_INT 80
11408: PUSH
11409: LD_INT 65
11411: PUSH
11412: LD_INT 100
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11420: LD_VAR 0 6
11424: PPUSH
11425: CALL_OW 263
11429: PUSH
11430: LD_INT 1
11432: EQUAL
11433: IFFALSE 11468
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11435: LD_ADDR_VAR 0 10
11439: PUSH
11440: LD_VAR 0 10
11444: PUSH
11445: LD_VAR 0 6
11449: PPUSH
11450: CALL_OW 311
11454: PPUSH
11455: LD_INT 3
11457: PPUSH
11458: CALL_OW 259
11462: PUSH
11463: LD_INT 4
11465: MUL
11466: MUL
11467: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11468: LD_VAR 0 6
11472: PPUSH
11473: CALL_OW 263
11477: PUSH
11478: LD_INT 2
11480: EQUAL
11481: IFFALSE 11532
// begin j := IsControledBy ( i ) ;
11483: LD_ADDR_VAR 0 7
11487: PUSH
11488: LD_VAR 0 6
11492: PPUSH
11493: CALL_OW 312
11497: ST_TO_ADDR
// if j then
11498: LD_VAR 0 7
11502: IFFALSE 11532
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11504: LD_ADDR_VAR 0 10
11508: PUSH
11509: LD_VAR 0 10
11513: PUSH
11514: LD_VAR 0 7
11518: PPUSH
11519: LD_INT 3
11521: PPUSH
11522: CALL_OW 259
11526: PUSH
11527: LD_INT 3
11529: MUL
11530: MUL
11531: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11532: LD_VAR 0 6
11536: PPUSH
11537: CALL_OW 264
11541: PUSH
11542: LD_INT 5
11544: PUSH
11545: LD_INT 6
11547: PUSH
11548: LD_INT 46
11550: PUSH
11551: LD_INT 44
11553: PUSH
11554: LD_INT 47
11556: PUSH
11557: LD_INT 45
11559: PUSH
11560: LD_INT 28
11562: PUSH
11563: LD_INT 7
11565: PUSH
11566: LD_INT 27
11568: PUSH
11569: LD_INT 29
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: IN
11584: IFFALSE 11604
11586: PUSH
11587: LD_VAR 0 1
11591: PPUSH
11592: LD_INT 52
11594: PPUSH
11595: CALL_OW 321
11599: PUSH
11600: LD_INT 2
11602: EQUAL
11603: AND
11604: IFFALSE 11621
// bpoints := bpoints * 1.2 ;
11606: LD_ADDR_VAR 0 10
11610: PUSH
11611: LD_VAR 0 10
11615: PUSH
11616: LD_REAL  1.20000000000000E+0000
11619: MUL
11620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11621: LD_VAR 0 6
11625: PPUSH
11626: CALL_OW 264
11630: PUSH
11631: LD_INT 6
11633: PUSH
11634: LD_INT 46
11636: PUSH
11637: LD_INT 47
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: IN
11645: IFFALSE 11662
// bpoints := bpoints * 1.2 ;
11647: LD_ADDR_VAR 0 10
11651: PUSH
11652: LD_VAR 0 10
11656: PUSH
11657: LD_REAL  1.20000000000000E+0000
11660: MUL
11661: ST_TO_ADDR
// end ; unit_building :
11662: GO 11676
11664: LD_INT 3
11666: DOUBLE
11667: EQUAL
11668: IFTRUE 11672
11670: GO 11675
11672: POP
// ; end ;
11673: GO 11676
11675: POP
// for j = 1 to 3 do
11676: LD_ADDR_VAR 0 7
11680: PUSH
11681: DOUBLE
11682: LD_INT 1
11684: DEC
11685: ST_TO_ADDR
11686: LD_INT 3
11688: PUSH
11689: FOR_TO
11690: IFFALSE 11743
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11692: LD_ADDR_VAR 0 5
11696: PUSH
11697: LD_VAR 0 5
11701: PPUSH
11702: LD_VAR 0 7
11706: PPUSH
11707: LD_VAR 0 5
11711: PUSH
11712: LD_VAR 0 7
11716: ARRAY
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_VAR 0 7
11727: ARRAY
11728: PUSH
11729: LD_VAR 0 10
11733: MUL
11734: PLUS
11735: PPUSH
11736: CALL_OW 1
11740: ST_TO_ADDR
11741: GO 11689
11743: POP
11744: POP
// end ;
11745: GO 10218
11747: POP
11748: POP
// result := Replace ( result , 4 , tmp ) ;
11749: LD_ADDR_VAR 0 5
11753: PUSH
11754: LD_VAR 0 5
11758: PPUSH
11759: LD_INT 4
11761: PPUSH
11762: LD_VAR 0 8
11766: PPUSH
11767: CALL_OW 1
11771: ST_TO_ADDR
// end ;
11772: LD_VAR 0 5
11776: RET
// export function DangerAtRange ( unit , range ) ; begin
11777: LD_INT 0
11779: PPUSH
// if not unit then
11780: LD_VAR 0 1
11784: NOT
11785: IFFALSE 11789
// exit ;
11787: GO 11834
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_VAR 0 1
11798: PPUSH
11799: CALL_OW 255
11803: PPUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 250
11813: PPUSH
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 251
11823: PPUSH
11824: LD_VAR 0 2
11828: PPUSH
11829: CALL 10068 0 4
11833: ST_TO_ADDR
// end ;
11834: LD_VAR 0 3
11838: RET
// export function DangerInArea ( side , area ) ; begin
11839: LD_INT 0
11841: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11842: LD_ADDR_VAR 0 3
11846: PUSH
11847: LD_VAR 0 2
11851: PPUSH
11852: LD_INT 81
11854: PUSH
11855: LD_VAR 0 1
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 70
11868: ST_TO_ADDR
// end ;
11869: LD_VAR 0 3
11873: RET
// export function IsExtension ( b ) ; begin
11874: LD_INT 0
11876: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11877: LD_ADDR_VAR 0 2
11881: PUSH
11882: LD_VAR 0 1
11886: PUSH
11887: LD_INT 23
11889: PUSH
11890: LD_INT 20
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: LD_INT 17
11898: PUSH
11899: LD_INT 24
11901: PUSH
11902: LD_INT 21
11904: PUSH
11905: LD_INT 19
11907: PUSH
11908: LD_INT 16
11910: PUSH
11911: LD_INT 25
11913: PUSH
11914: LD_INT 18
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: IN
11929: ST_TO_ADDR
// end ;
11930: LD_VAR 0 2
11934: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11935: LD_INT 0
11937: PPUSH
11938: PPUSH
11939: PPUSH
// result := [ ] ;
11940: LD_ADDR_VAR 0 4
11944: PUSH
11945: EMPTY
11946: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11947: LD_ADDR_VAR 0 5
11951: PUSH
11952: LD_VAR 0 2
11956: PPUSH
11957: LD_INT 21
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PPUSH
11967: CALL_OW 70
11971: ST_TO_ADDR
// if not tmp then
11972: LD_VAR 0 5
11976: NOT
11977: IFFALSE 11981
// exit ;
11979: GO 12045
// if checkLink then
11981: LD_VAR 0 3
11985: IFFALSE 12035
// begin for i in tmp do
11987: LD_ADDR_VAR 0 6
11991: PUSH
11992: LD_VAR 0 5
11996: PUSH
11997: FOR_IN
11998: IFFALSE 12033
// if GetBase ( i ) <> base then
12000: LD_VAR 0 6
12004: PPUSH
12005: CALL_OW 274
12009: PUSH
12010: LD_VAR 0 1
12014: NONEQUAL
12015: IFFALSE 12031
// ComLinkToBase ( base , i ) ;
12017: LD_VAR 0 1
12021: PPUSH
12022: LD_VAR 0 6
12026: PPUSH
12027: CALL_OW 169
12031: GO 11997
12033: POP
12034: POP
// end ; result := tmp ;
12035: LD_ADDR_VAR 0 4
12039: PUSH
12040: LD_VAR 0 5
12044: ST_TO_ADDR
// end ;
12045: LD_VAR 0 4
12049: RET
// export function ComComplete ( units , b ) ; var i ; begin
12050: LD_INT 0
12052: PPUSH
12053: PPUSH
// if not units then
12054: LD_VAR 0 1
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12153
// for i in units do
12063: LD_ADDR_VAR 0 4
12067: PUSH
12068: LD_VAR 0 1
12072: PUSH
12073: FOR_IN
12074: IFFALSE 12151
// if BuildingStatus ( b ) = bs_build then
12076: LD_VAR 0 2
12080: PPUSH
12081: CALL_OW 461
12085: PUSH
12086: LD_INT 1
12088: EQUAL
12089: IFFALSE 12149
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12091: LD_VAR 0 4
12095: PPUSH
12096: LD_STRING h
12098: PUSH
12099: LD_VAR 0 2
12103: PPUSH
12104: CALL_OW 250
12108: PUSH
12109: LD_VAR 0 2
12113: PPUSH
12114: CALL_OW 251
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: LD_INT 0
12126: PUSH
12127: LD_INT 0
12129: PUSH
12130: LD_INT 0
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: PPUSH
12145: CALL_OW 446
12149: GO 12073
12151: POP
12152: POP
// end ;
12153: LD_VAR 0 3
12157: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12158: LD_INT 0
12160: PPUSH
12161: PPUSH
12162: PPUSH
12163: PPUSH
12164: PPUSH
12165: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12166: LD_VAR 0 1
12170: NOT
12171: IFTRUE 12188
12173: PUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 263
12183: PUSH
12184: LD_INT 2
12186: NONEQUAL
12187: OR
12188: IFFALSE 12192
// exit ;
12190: GO 12508
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12192: LD_ADDR_VAR 0 6
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 255
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: LD_INT 30
12219: PUSH
12220: LD_INT 36
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 34
12229: PUSH
12230: LD_INT 31
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 69
12250: ST_TO_ADDR
// if not tmp then
12251: LD_VAR 0 6
12255: NOT
12256: IFFALSE 12260
// exit ;
12258: GO 12508
// result := [ ] ;
12260: LD_ADDR_VAR 0 2
12264: PUSH
12265: EMPTY
12266: ST_TO_ADDR
// for i in tmp do
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 6
12276: PUSH
12277: FOR_IN
12278: IFFALSE 12349
// begin t := UnitsInside ( i ) ;
12280: LD_ADDR_VAR 0 4
12284: PUSH
12285: LD_VAR 0 3
12289: PPUSH
12290: CALL_OW 313
12294: ST_TO_ADDR
// if t then
12295: LD_VAR 0 4
12299: IFFALSE 12347
// for j in t do
12301: LD_ADDR_VAR 0 7
12305: PUSH
12306: LD_VAR 0 4
12310: PUSH
12311: FOR_IN
12312: IFFALSE 12345
// result := Replace ( result , result + 1 , j ) ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_VAR 0 2
12323: PPUSH
12324: LD_VAR 0 2
12328: PUSH
12329: LD_INT 1
12331: PLUS
12332: PPUSH
12333: LD_VAR 0 7
12337: PPUSH
12338: CALL_OW 1
12342: ST_TO_ADDR
12343: GO 12311
12345: POP
12346: POP
// end ;
12347: GO 12277
12349: POP
12350: POP
// if not result then
12351: LD_VAR 0 2
12355: NOT
12356: IFFALSE 12360
// exit ;
12358: GO 12508
// mech := result [ 1 ] ;
12360: LD_ADDR_VAR 0 5
12364: PUSH
12365: LD_VAR 0 2
12369: PUSH
12370: LD_INT 1
12372: ARRAY
12373: ST_TO_ADDR
// if result > 1 then
12374: LD_VAR 0 2
12378: PUSH
12379: LD_INT 1
12381: GREATER
12382: IFFALSE 12494
// begin for i = 2 to result do
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: DOUBLE
12390: LD_INT 2
12392: DEC
12393: ST_TO_ADDR
12394: LD_VAR 0 2
12398: PUSH
12399: FOR_TO
12400: IFFALSE 12492
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12402: LD_ADDR_VAR 0 4
12406: PUSH
12407: LD_VAR 0 2
12411: PUSH
12412: LD_VAR 0 3
12416: ARRAY
12417: PPUSH
12418: LD_INT 3
12420: PPUSH
12421: CALL_OW 259
12425: PUSH
12426: LD_VAR 0 2
12430: PUSH
12431: LD_VAR 0 3
12435: ARRAY
12436: PPUSH
12437: CALL_OW 432
12441: MINUS
12442: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12443: LD_VAR 0 4
12447: PUSH
12448: LD_VAR 0 5
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: CALL_OW 259
12460: PUSH
12461: LD_VAR 0 5
12465: PPUSH
12466: CALL_OW 432
12470: MINUS
12471: GREATEREQUAL
12472: IFFALSE 12490
// mech := result [ i ] ;
12474: LD_ADDR_VAR 0 5
12478: PUSH
12479: LD_VAR 0 2
12483: PUSH
12484: LD_VAR 0 3
12488: ARRAY
12489: ST_TO_ADDR
// end ;
12490: GO 12399
12492: POP
12493: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_VAR 0 5
12503: PPUSH
12504: CALL_OW 135
// end ;
12508: LD_VAR 0 2
12512: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12513: LD_INT 0
12515: PPUSH
12516: PPUSH
12517: PPUSH
12518: PPUSH
12519: PPUSH
12520: PPUSH
12521: PPUSH
12522: PPUSH
12523: PPUSH
12524: PPUSH
12525: PPUSH
12526: PPUSH
12527: PPUSH
// result := [ ] ;
12528: LD_ADDR_VAR 0 7
12532: PUSH
12533: EMPTY
12534: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12535: LD_VAR 0 1
12539: PPUSH
12540: CALL_OW 266
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: IN
12555: NOT
12556: IFFALSE 12560
// exit ;
12558: GO 14200
// if name then
12560: LD_VAR 0 3
12564: IFFALSE 12580
// SetBName ( base_dep , name ) ;
12566: LD_VAR 0 1
12570: PPUSH
12571: LD_VAR 0 3
12575: PPUSH
12576: CALL_OW 500
// base := GetBase ( base_dep ) ;
12580: LD_ADDR_VAR 0 15
12584: PUSH
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL_OW 274
12594: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12595: LD_ADDR_VAR 0 16
12599: PUSH
12600: LD_VAR 0 1
12604: PPUSH
12605: CALL_OW 255
12609: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12610: LD_ADDR_VAR 0 17
12614: PUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 248
12624: ST_TO_ADDR
// if sources then
12625: LD_VAR 0 5
12629: IFFALSE 12676
// for i = 1 to 3 do
12631: LD_ADDR_VAR 0 8
12635: PUSH
12636: DOUBLE
12637: LD_INT 1
12639: DEC
12640: ST_TO_ADDR
12641: LD_INT 3
12643: PUSH
12644: FOR_TO
12645: IFFALSE 12674
// AddResourceType ( base , i , sources [ i ] ) ;
12647: LD_VAR 0 15
12651: PPUSH
12652: LD_VAR 0 8
12656: PPUSH
12657: LD_VAR 0 5
12661: PUSH
12662: LD_VAR 0 8
12666: ARRAY
12667: PPUSH
12668: CALL_OW 276
12672: GO 12644
12674: POP
12675: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12676: LD_ADDR_VAR 0 18
12680: PUSH
12681: LD_VAR 0 15
12685: PPUSH
12686: LD_VAR 0 2
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: CALL 11935 0 3
12698: ST_TO_ADDR
// InitHc ;
12699: CALL_OW 19
// InitUc ;
12703: CALL_OW 18
// uc_side := side ;
12707: LD_ADDR_OWVAR 20
12711: PUSH
12712: LD_VAR 0 16
12716: ST_TO_ADDR
// uc_nation := nation ;
12717: LD_ADDR_OWVAR 21
12721: PUSH
12722: LD_VAR 0 17
12726: ST_TO_ADDR
// if buildings then
12727: LD_VAR 0 18
12731: IFFALSE 14059
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12733: LD_ADDR_VAR 0 19
12737: PUSH
12738: LD_VAR 0 18
12742: PPUSH
12743: LD_INT 2
12745: PUSH
12746: LD_INT 30
12748: PUSH
12749: LD_INT 29
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: LD_INT 30
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 72
12775: ST_TO_ADDR
// if tmp then
12776: LD_VAR 0 19
12780: IFFALSE 12828
// for i in tmp do
12782: LD_ADDR_VAR 0 8
12786: PUSH
12787: LD_VAR 0 19
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12826
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12795: LD_VAR 0 8
12799: PPUSH
12800: CALL_OW 250
12804: PPUSH
12805: LD_VAR 0 8
12809: PPUSH
12810: CALL_OW 251
12814: PPUSH
12815: LD_VAR 0 16
12819: PPUSH
12820: CALL_OW 441
12824: GO 12792
12826: POP
12827: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12828: LD_VAR 0 18
12832: PPUSH
12833: LD_INT 2
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 32
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 33
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 72
12865: IFFALSE 12953
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12867: LD_ADDR_VAR 0 8
12871: PUSH
12872: LD_VAR 0 18
12876: PPUSH
12877: LD_INT 2
12879: PUSH
12880: LD_INT 30
12882: PUSH
12883: LD_INT 32
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 30
12892: PUSH
12893: LD_INT 33
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 72
12909: PUSH
12910: FOR_IN
12911: IFFALSE 12951
// begin if not GetBWeapon ( i ) then
12913: LD_VAR 0 8
12917: PPUSH
12918: CALL_OW 269
12922: NOT
12923: IFFALSE 12949
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12925: LD_VAR 0 8
12929: PPUSH
12930: LD_VAR 0 8
12934: PPUSH
12935: LD_VAR 0 2
12939: PPUSH
12940: CALL 14205 0 2
12944: PPUSH
12945: CALL_OW 431
// end ;
12949: GO 12910
12951: POP
12952: POP
// end ; for i = 1 to personel do
12953: LD_ADDR_VAR 0 8
12957: PUSH
12958: DOUBLE
12959: LD_INT 1
12961: DEC
12962: ST_TO_ADDR
12963: LD_VAR 0 6
12967: PUSH
12968: FOR_TO
12969: IFFALSE 14039
// begin if i > 4 then
12971: LD_VAR 0 8
12975: PUSH
12976: LD_INT 4
12978: GREATER
12979: IFFALSE 12983
// break ;
12981: GO 14039
// case i of 1 :
12983: LD_VAR 0 8
12987: PUSH
12988: LD_INT 1
12990: DOUBLE
12991: EQUAL
12992: IFTRUE 12996
12994: GO 13076
12996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12997: LD_ADDR_VAR 0 12
13001: PUSH
13002: LD_VAR 0 18
13006: PPUSH
13007: LD_INT 22
13009: PUSH
13010: LD_VAR 0 16
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 58
13021: PUSH
13022: EMPTY
13023: LIST
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: LD_INT 30
13030: PUSH
13031: LD_INT 32
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 30
13040: PUSH
13041: LD_INT 4
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 5
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: PPUSH
13069: CALL_OW 72
13073: ST_TO_ADDR
13074: GO 13298
13076: LD_INT 2
13078: DOUBLE
13079: EQUAL
13080: IFTRUE 13084
13082: GO 13146
13084: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13085: LD_ADDR_VAR 0 12
13089: PUSH
13090: LD_VAR 0 18
13094: PPUSH
13095: LD_INT 22
13097: PUSH
13098: LD_VAR 0 16
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 2
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: LD_INT 0
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 30
13122: PUSH
13123: LD_INT 1
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: ST_TO_ADDR
13144: GO 13298
13146: LD_INT 3
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13216
13154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13155: LD_ADDR_VAR 0 12
13159: PUSH
13160: LD_VAR 0 18
13164: PPUSH
13165: LD_INT 22
13167: PUSH
13168: LD_VAR 0 16
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 2
13179: PUSH
13180: LD_INT 30
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 30
13192: PUSH
13193: LD_INT 3
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 72
13213: ST_TO_ADDR
13214: GO 13298
13216: LD_INT 4
13218: DOUBLE
13219: EQUAL
13220: IFTRUE 13224
13222: GO 13297
13224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13225: LD_ADDR_VAR 0 12
13229: PUSH
13230: LD_VAR 0 18
13234: PPUSH
13235: LD_INT 22
13237: PUSH
13238: LD_VAR 0 16
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: LD_INT 30
13252: PUSH
13253: LD_INT 6
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 30
13262: PUSH
13263: LD_INT 7
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 30
13272: PUSH
13273: LD_INT 8
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 72
13294: ST_TO_ADDR
13295: GO 13298
13297: POP
// if i = 1 then
13298: LD_VAR 0 8
13302: PUSH
13303: LD_INT 1
13305: EQUAL
13306: IFFALSE 13417
// begin tmp := [ ] ;
13308: LD_ADDR_VAR 0 19
13312: PUSH
13313: EMPTY
13314: ST_TO_ADDR
// for j in f do
13315: LD_ADDR_VAR 0 9
13319: PUSH
13320: LD_VAR 0 12
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13399
// if GetBType ( j ) = b_bunker then
13328: LD_VAR 0 9
13332: PPUSH
13333: CALL_OW 266
13337: PUSH
13338: LD_INT 32
13340: EQUAL
13341: IFFALSE 13368
// tmp := Insert ( tmp , 1 , j ) else
13343: LD_ADDR_VAR 0 19
13347: PUSH
13348: LD_VAR 0 19
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_VAR 0 9
13360: PPUSH
13361: CALL_OW 2
13365: ST_TO_ADDR
13366: GO 13397
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13368: LD_ADDR_VAR 0 19
13372: PUSH
13373: LD_VAR 0 19
13377: PPUSH
13378: LD_VAR 0 19
13382: PUSH
13383: LD_INT 1
13385: PLUS
13386: PPUSH
13387: LD_VAR 0 9
13391: PPUSH
13392: CALL_OW 2
13396: ST_TO_ADDR
13397: GO 13325
13399: POP
13400: POP
// if tmp then
13401: LD_VAR 0 19
13405: IFFALSE 13417
// f := tmp ;
13407: LD_ADDR_VAR 0 12
13411: PUSH
13412: LD_VAR 0 19
13416: ST_TO_ADDR
// end ; x := personel [ i ] ;
13417: LD_ADDR_VAR 0 13
13421: PUSH
13422: LD_VAR 0 6
13426: PUSH
13427: LD_VAR 0 8
13431: ARRAY
13432: ST_TO_ADDR
// if x = - 1 then
13433: LD_VAR 0 13
13437: PUSH
13438: LD_INT 1
13440: NEG
13441: EQUAL
13442: IFFALSE 13653
// begin for j in f do
13444: LD_ADDR_VAR 0 9
13448: PUSH
13449: LD_VAR 0 12
13453: PUSH
13454: FOR_IN
13455: IFFALSE 13649
// repeat InitHc ;
13457: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13461: LD_VAR 0 9
13465: PPUSH
13466: CALL_OW 266
13470: PUSH
13471: LD_INT 5
13473: EQUAL
13474: IFFALSE 13544
// begin if UnitsInside ( j ) < 3 then
13476: LD_VAR 0 9
13480: PPUSH
13481: CALL_OW 313
13485: PUSH
13486: LD_INT 3
13488: LESS
13489: IFFALSE 13525
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13491: LD_INT 0
13493: PPUSH
13494: LD_INT 5
13496: PUSH
13497: LD_INT 8
13499: PUSH
13500: LD_INT 9
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_VAR 0 17
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 4
13518: PPUSH
13519: CALL_OW 380
13523: GO 13542
// PrepareHuman ( false , i , skill ) ;
13525: LD_INT 0
13527: PPUSH
13528: LD_VAR 0 8
13532: PPUSH
13533: LD_VAR 0 4
13537: PPUSH
13538: CALL_OW 380
// end else
13542: GO 13561
// PrepareHuman ( false , i , skill ) ;
13544: LD_INT 0
13546: PPUSH
13547: LD_VAR 0 8
13551: PPUSH
13552: LD_VAR 0 4
13556: PPUSH
13557: CALL_OW 380
// un := CreateHuman ;
13561: LD_ADDR_VAR 0 14
13565: PUSH
13566: CALL_OW 44
13570: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13571: LD_ADDR_VAR 0 7
13575: PUSH
13576: LD_VAR 0 7
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: LD_VAR 0 14
13588: PPUSH
13589: CALL_OW 2
13593: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13594: LD_VAR 0 14
13598: PPUSH
13599: LD_VAR 0 9
13603: PPUSH
13604: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13608: LD_VAR 0 9
13612: PPUSH
13613: CALL_OW 313
13617: PUSH
13618: LD_INT 6
13620: EQUAL
13621: IFTRUE 13645
13623: PUSH
13624: LD_VAR 0 9
13628: PPUSH
13629: CALL_OW 266
13633: PUSH
13634: LD_INT 32
13636: PUSH
13637: LD_INT 31
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: IN
13644: OR
13645: IFFALSE 13457
13647: GO 13454
13649: POP
13650: POP
// end else
13651: GO 14037
// for j = 1 to x do
13653: LD_ADDR_VAR 0 9
13657: PUSH
13658: DOUBLE
13659: LD_INT 1
13661: DEC
13662: ST_TO_ADDR
13663: LD_VAR 0 13
13667: PUSH
13668: FOR_TO
13669: IFFALSE 14035
// begin InitHc ;
13671: CALL_OW 19
// if not f then
13675: LD_VAR 0 12
13679: NOT
13680: IFFALSE 13769
// begin PrepareHuman ( false , i , skill ) ;
13682: LD_INT 0
13684: PPUSH
13685: LD_VAR 0 8
13689: PPUSH
13690: LD_VAR 0 4
13694: PPUSH
13695: CALL_OW 380
// un := CreateHuman ;
13699: LD_ADDR_VAR 0 14
13703: PUSH
13704: CALL_OW 44
13708: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13709: LD_ADDR_VAR 0 7
13713: PUSH
13714: LD_VAR 0 7
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: LD_VAR 0 14
13726: PPUSH
13727: CALL_OW 2
13731: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13732: LD_VAR 0 14
13736: PPUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 250
13746: PPUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 251
13756: PPUSH
13757: LD_INT 10
13759: PPUSH
13760: LD_INT 0
13762: PPUSH
13763: CALL_OW 50
// continue ;
13767: GO 13668
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13769: LD_VAR 0 12
13773: PUSH
13774: LD_INT 1
13776: ARRAY
13777: PPUSH
13778: CALL_OW 313
13782: IFFALSE 13810
13784: PUSH
13785: LD_VAR 0 12
13789: PUSH
13790: LD_INT 1
13792: ARRAY
13793: PPUSH
13794: CALL_OW 266
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 31
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: IN
13809: AND
13810: IFTRUE 13831
13812: PUSH
13813: LD_VAR 0 12
13817: PUSH
13818: LD_INT 1
13820: ARRAY
13821: PPUSH
13822: CALL_OW 313
13826: PUSH
13827: LD_INT 6
13829: EQUAL
13830: OR
13831: IFFALSE 13851
// f := Delete ( f , 1 ) ;
13833: LD_ADDR_VAR 0 12
13837: PUSH
13838: LD_VAR 0 12
13842: PPUSH
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 3
13850: ST_TO_ADDR
// if not f then
13851: LD_VAR 0 12
13855: NOT
13856: IFFALSE 13874
// begin x := x + 2 ;
13858: LD_ADDR_VAR 0 13
13862: PUSH
13863: LD_VAR 0 13
13867: PUSH
13868: LD_INT 2
13870: PLUS
13871: ST_TO_ADDR
// continue ;
13872: GO 13668
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13874: LD_VAR 0 12
13878: PUSH
13879: LD_INT 1
13881: ARRAY
13882: PPUSH
13883: CALL_OW 266
13887: PUSH
13888: LD_INT 5
13890: EQUAL
13891: IFFALSE 13965
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13893: LD_VAR 0 12
13897: PUSH
13898: LD_INT 1
13900: ARRAY
13901: PPUSH
13902: CALL_OW 313
13906: PUSH
13907: LD_INT 3
13909: LESS
13910: IFFALSE 13946
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13912: LD_INT 0
13914: PPUSH
13915: LD_INT 5
13917: PUSH
13918: LD_INT 8
13920: PUSH
13921: LD_INT 9
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: PUSH
13929: LD_VAR 0 17
13933: ARRAY
13934: PPUSH
13935: LD_VAR 0 4
13939: PPUSH
13940: CALL_OW 380
13944: GO 13963
// PrepareHuman ( false , i , skill ) ;
13946: LD_INT 0
13948: PPUSH
13949: LD_VAR 0 8
13953: PPUSH
13954: LD_VAR 0 4
13958: PPUSH
13959: CALL_OW 380
// end else
13963: GO 13982
// PrepareHuman ( false , i , skill ) ;
13965: LD_INT 0
13967: PPUSH
13968: LD_VAR 0 8
13972: PPUSH
13973: LD_VAR 0 4
13977: PPUSH
13978: CALL_OW 380
// un := CreateHuman ;
13982: LD_ADDR_VAR 0 14
13986: PUSH
13987: CALL_OW 44
13991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13992: LD_ADDR_VAR 0 7
13996: PUSH
13997: LD_VAR 0 7
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: LD_VAR 0 14
14009: PPUSH
14010: CALL_OW 2
14014: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14015: LD_VAR 0 14
14019: PPUSH
14020: LD_VAR 0 12
14024: PUSH
14025: LD_INT 1
14027: ARRAY
14028: PPUSH
14029: CALL_OW 52
// end ;
14033: GO 13668
14035: POP
14036: POP
// end ;
14037: GO 12968
14039: POP
14040: POP
// result := result ^ buildings ;
14041: LD_ADDR_VAR 0 7
14045: PUSH
14046: LD_VAR 0 7
14050: PUSH
14051: LD_VAR 0 18
14055: ADD
14056: ST_TO_ADDR
// end else
14057: GO 14200
// begin for i = 1 to personel do
14059: LD_ADDR_VAR 0 8
14063: PUSH
14064: DOUBLE
14065: LD_INT 1
14067: DEC
14068: ST_TO_ADDR
14069: LD_VAR 0 6
14073: PUSH
14074: FOR_TO
14075: IFFALSE 14198
// begin if i > 4 then
14077: LD_VAR 0 8
14081: PUSH
14082: LD_INT 4
14084: GREATER
14085: IFFALSE 14089
// break ;
14087: GO 14198
// x := personel [ i ] ;
14089: LD_ADDR_VAR 0 13
14093: PUSH
14094: LD_VAR 0 6
14098: PUSH
14099: LD_VAR 0 8
14103: ARRAY
14104: ST_TO_ADDR
// if x = - 1 then
14105: LD_VAR 0 13
14109: PUSH
14110: LD_INT 1
14112: NEG
14113: EQUAL
14114: IFFALSE 14118
// continue ;
14116: GO 14074
// PrepareHuman ( false , i , skill ) ;
14118: LD_INT 0
14120: PPUSH
14121: LD_VAR 0 8
14125: PPUSH
14126: LD_VAR 0 4
14130: PPUSH
14131: CALL_OW 380
// un := CreateHuman ;
14135: LD_ADDR_VAR 0 14
14139: PUSH
14140: CALL_OW 44
14144: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14145: LD_VAR 0 14
14149: PPUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 250
14159: PPUSH
14160: LD_VAR 0 1
14164: PPUSH
14165: CALL_OW 251
14169: PPUSH
14170: LD_INT 10
14172: PPUSH
14173: LD_INT 0
14175: PPUSH
14176: CALL_OW 50
// result := result ^ un ;
14180: LD_ADDR_VAR 0 7
14184: PUSH
14185: LD_VAR 0 7
14189: PUSH
14190: LD_VAR 0 14
14194: ADD
14195: ST_TO_ADDR
// end ;
14196: GO 14074
14198: POP
14199: POP
// end ; end ;
14200: LD_VAR 0 7
14204: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14205: LD_INT 0
14207: PPUSH
14208: PPUSH
14209: PPUSH
14210: PPUSH
14211: PPUSH
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
14222: PPUSH
// result := false ;
14223: LD_ADDR_VAR 0 3
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14231: LD_VAR 0 1
14235: NOT
14236: IFTRUE 14261
14238: PUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 266
14248: PUSH
14249: LD_INT 32
14251: PUSH
14252: LD_INT 33
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: IN
14259: NOT
14260: OR
14261: IFFALSE 14265
// exit ;
14263: GO 15400
// nat := GetNation ( tower ) ;
14265: LD_ADDR_VAR 0 12
14269: PUSH
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 248
14279: ST_TO_ADDR
// side := GetSide ( tower ) ;
14280: LD_ADDR_VAR 0 16
14284: PUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 255
14294: ST_TO_ADDR
// x := GetX ( tower ) ;
14295: LD_ADDR_VAR 0 10
14299: PUSH
14300: LD_VAR 0 1
14304: PPUSH
14305: CALL_OW 250
14309: ST_TO_ADDR
// y := GetY ( tower ) ;
14310: LD_ADDR_VAR 0 11
14314: PUSH
14315: LD_VAR 0 1
14319: PPUSH
14320: CALL_OW 251
14324: ST_TO_ADDR
// if not x or not y then
14325: LD_VAR 0 10
14329: NOT
14330: IFTRUE 14339
14332: PUSH
14333: LD_VAR 0 11
14337: NOT
14338: OR
14339: IFFALSE 14343
// exit ;
14341: GO 15400
// weapon := 0 ;
14343: LD_ADDR_VAR 0 18
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// fac_list := [ ] ;
14351: LD_ADDR_VAR 0 17
14355: PUSH
14356: EMPTY
14357: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14358: LD_ADDR_VAR 0 6
14362: PUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 274
14372: PPUSH
14373: LD_VAR 0 2
14377: PPUSH
14378: LD_INT 0
14380: PPUSH
14381: CALL 11935 0 3
14385: PPUSH
14386: LD_INT 30
14388: PUSH
14389: LD_INT 3
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 72
14400: ST_TO_ADDR
// if not factories then
14401: LD_VAR 0 6
14405: NOT
14406: IFFALSE 14410
// exit ;
14408: GO 15400
// for i in factories do
14410: LD_ADDR_VAR 0 8
14414: PUSH
14415: LD_VAR 0 6
14419: PUSH
14420: FOR_IN
14421: IFFALSE 14446
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14423: LD_ADDR_VAR 0 17
14427: PUSH
14428: LD_VAR 0 17
14432: PUSH
14433: LD_VAR 0 8
14437: PPUSH
14438: CALL_OW 478
14442: UNION
14443: ST_TO_ADDR
14444: GO 14420
14446: POP
14447: POP
// if not fac_list then
14448: LD_VAR 0 17
14452: NOT
14453: IFFALSE 14457
// exit ;
14455: GO 15400
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14457: LD_ADDR_VAR 0 5
14461: PUSH
14462: LD_INT 4
14464: PUSH
14465: LD_INT 5
14467: PUSH
14468: LD_INT 9
14470: PUSH
14471: LD_INT 10
14473: PUSH
14474: LD_INT 6
14476: PUSH
14477: LD_INT 7
14479: PUSH
14480: LD_INT 11
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 27
14494: PUSH
14495: LD_INT 28
14497: PUSH
14498: LD_INT 26
14500: PUSH
14501: LD_INT 30
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 43
14512: PUSH
14513: LD_INT 44
14515: PUSH
14516: LD_INT 46
14518: PUSH
14519: LD_INT 45
14521: PUSH
14522: LD_INT 47
14524: PUSH
14525: LD_INT 49
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: PUSH
14541: LD_VAR 0 12
14545: ARRAY
14546: ST_TO_ADDR
// list := list isect fac_list ;
14547: LD_ADDR_VAR 0 5
14551: PUSH
14552: LD_VAR 0 5
14556: PUSH
14557: LD_VAR 0 17
14561: ISECT
14562: ST_TO_ADDR
// if not list then
14563: LD_VAR 0 5
14567: NOT
14568: IFFALSE 14572
// exit ;
14570: GO 15400
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14572: LD_VAR 0 12
14576: PUSH
14577: LD_INT 3
14579: EQUAL
14580: IFFALSE 14592
14582: PUSH
14583: LD_INT 49
14585: PUSH
14586: LD_VAR 0 5
14590: IN
14591: AND
14592: IFFALSE 14612
14594: PUSH
14595: LD_INT 31
14597: PPUSH
14598: LD_VAR 0 16
14602: PPUSH
14603: CALL_OW 321
14607: PUSH
14608: LD_INT 2
14610: EQUAL
14611: AND
14612: IFFALSE 14672
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14614: LD_INT 22
14616: PUSH
14617: LD_VAR 0 16
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 35
14628: PUSH
14629: LD_INT 49
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 91
14638: PUSH
14639: LD_VAR 0 1
14643: PUSH
14644: LD_INT 10
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: PPUSH
14657: CALL_OW 69
14661: NOT
14662: IFFALSE 14672
// weapon := ru_time_lapser ;
14664: LD_ADDR_VAR 0 18
14668: PUSH
14669: LD_INT 49
14671: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14672: LD_VAR 0 12
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: LD_INT 2
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: IN
14687: IFFALSE 14711
14689: PUSH
14690: LD_INT 11
14692: PUSH
14693: LD_VAR 0 5
14697: IN
14698: IFTRUE 14710
14700: PUSH
14701: LD_INT 30
14703: PUSH
14704: LD_VAR 0 5
14708: IN
14709: OR
14710: AND
14711: IFFALSE 14731
14713: PUSH
14714: LD_INT 6
14716: PPUSH
14717: LD_VAR 0 16
14721: PPUSH
14722: CALL_OW 321
14726: PUSH
14727: LD_INT 2
14729: EQUAL
14730: AND
14731: IFFALSE 14898
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14733: LD_INT 22
14735: PUSH
14736: LD_VAR 0 16
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 35
14750: PUSH
14751: LD_INT 11
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 35
14760: PUSH
14761: LD_INT 30
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 91
14775: PUSH
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 18
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: NOT
14799: IFFALSE 14875
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_VAR 0 16
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: LD_INT 30
14819: PUSH
14820: LD_INT 32
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 30
14829: PUSH
14830: LD_INT 33
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 91
14844: PUSH
14845: LD_VAR 0 1
14849: PUSH
14850: LD_INT 12
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: PUSH
14871: LD_INT 2
14873: GREATER
14874: AND
14875: IFFALSE 14898
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14877: LD_ADDR_VAR 0 18
14881: PUSH
14882: LD_INT 11
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_VAR 0 12
14896: ARRAY
14897: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14898: LD_VAR 0 18
14902: NOT
14903: IFFALSE 14923
14905: PUSH
14906: LD_INT 40
14908: PPUSH
14909: LD_VAR 0 16
14913: PPUSH
14914: CALL_OW 321
14918: PUSH
14919: LD_INT 2
14921: EQUAL
14922: AND
14923: IFFALSE 14959
14925: PUSH
14926: LD_INT 7
14928: PUSH
14929: LD_VAR 0 5
14933: IN
14934: IFTRUE 14946
14936: PUSH
14937: LD_INT 28
14939: PUSH
14940: LD_VAR 0 5
14944: IN
14945: OR
14946: IFTRUE 14958
14948: PUSH
14949: LD_INT 45
14951: PUSH
14952: LD_VAR 0 5
14956: IN
14957: OR
14958: AND
14959: IFFALSE 15213
// begin hex := GetHexInfo ( x , y ) ;
14961: LD_ADDR_VAR 0 4
14965: PUSH
14966: LD_VAR 0 10
14970: PPUSH
14971: LD_VAR 0 11
14975: PPUSH
14976: CALL_OW 546
14980: ST_TO_ADDR
// if hex [ 1 ] then
14981: LD_VAR 0 4
14985: PUSH
14986: LD_INT 1
14988: ARRAY
14989: IFFALSE 14993
// exit ;
14991: GO 15400
// height := hex [ 2 ] ;
14993: LD_ADDR_VAR 0 15
14997: PUSH
14998: LD_VAR 0 4
15002: PUSH
15003: LD_INT 2
15005: ARRAY
15006: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15007: LD_ADDR_VAR 0 14
15011: PUSH
15012: LD_INT 0
15014: PUSH
15015: LD_INT 2
15017: PUSH
15018: LD_INT 3
15020: PUSH
15021: LD_INT 5
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: ST_TO_ADDR
// for i in tmp do
15030: LD_ADDR_VAR 0 8
15034: PUSH
15035: LD_VAR 0 14
15039: PUSH
15040: FOR_IN
15041: IFFALSE 15211
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15043: LD_ADDR_VAR 0 9
15047: PUSH
15048: LD_VAR 0 10
15052: PPUSH
15053: LD_VAR 0 8
15057: PPUSH
15058: LD_INT 5
15060: PPUSH
15061: CALL_OW 272
15065: PUSH
15066: LD_VAR 0 11
15070: PPUSH
15071: LD_VAR 0 8
15075: PPUSH
15076: LD_INT 5
15078: PPUSH
15079: CALL_OW 273
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15088: LD_VAR 0 9
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: PPUSH
15097: LD_VAR 0 9
15101: PUSH
15102: LD_INT 2
15104: ARRAY
15105: PPUSH
15106: CALL_OW 488
15110: IFFALSE 15209
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15112: LD_ADDR_VAR 0 4
15116: PUSH
15117: LD_VAR 0 9
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PPUSH
15126: LD_VAR 0 9
15130: PUSH
15131: LD_INT 2
15133: ARRAY
15134: PPUSH
15135: CALL_OW 546
15139: ST_TO_ADDR
// if hex [ 1 ] then
15140: LD_VAR 0 4
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: IFFALSE 15152
// continue ;
15150: GO 15040
// h := hex [ 2 ] ;
15152: LD_ADDR_VAR 0 13
15156: PUSH
15157: LD_VAR 0 4
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: ST_TO_ADDR
// if h + 7 < height then
15166: LD_VAR 0 13
15170: PUSH
15171: LD_INT 7
15173: PLUS
15174: PUSH
15175: LD_VAR 0 15
15179: LESS
15180: IFFALSE 15209
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15182: LD_ADDR_VAR 0 18
15186: PUSH
15187: LD_INT 7
15189: PUSH
15190: LD_INT 28
15192: PUSH
15193: LD_INT 45
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: PUSH
15201: LD_VAR 0 12
15205: ARRAY
15206: ST_TO_ADDR
// break ;
15207: GO 15211
// end ; end ; end ;
15209: GO 15040
15211: POP
15212: POP
// end ; if not weapon then
15213: LD_VAR 0 18
15217: NOT
15218: IFFALSE 15278
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15220: LD_ADDR_VAR 0 5
15224: PUSH
15225: LD_VAR 0 5
15229: PUSH
15230: LD_INT 11
15232: PUSH
15233: LD_INT 30
15235: PUSH
15236: LD_INT 49
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: DIFF
15244: ST_TO_ADDR
// if not list then
15245: LD_VAR 0 5
15249: NOT
15250: IFFALSE 15254
// exit ;
15252: GO 15400
// weapon := list [ rand ( 1 , list ) ] ;
15254: LD_ADDR_VAR 0 18
15258: PUSH
15259: LD_VAR 0 5
15263: PUSH
15264: LD_INT 1
15266: PPUSH
15267: LD_VAR 0 5
15271: PPUSH
15272: CALL_OW 12
15276: ARRAY
15277: ST_TO_ADDR
// end ; if weapon then
15278: LD_VAR 0 18
15282: IFFALSE 15400
// begin tmp := CostOfWeapon ( weapon ) ;
15284: LD_ADDR_VAR 0 14
15288: PUSH
15289: LD_VAR 0 18
15293: PPUSH
15294: CALL_OW 451
15298: ST_TO_ADDR
// j := GetBase ( tower ) ;
15299: LD_ADDR_VAR 0 9
15303: PUSH
15304: LD_VAR 0 1
15308: PPUSH
15309: CALL_OW 274
15313: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15314: LD_VAR 0 9
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: CALL_OW 275
15326: PUSH
15327: LD_VAR 0 14
15331: PUSH
15332: LD_INT 1
15334: ARRAY
15335: GREATEREQUAL
15336: IFFALSE 15362
15338: PUSH
15339: LD_VAR 0 9
15343: PPUSH
15344: LD_INT 2
15346: PPUSH
15347: CALL_OW 275
15351: PUSH
15352: LD_VAR 0 14
15356: PUSH
15357: LD_INT 2
15359: ARRAY
15360: GREATEREQUAL
15361: AND
15362: IFFALSE 15388
15364: PUSH
15365: LD_VAR 0 9
15369: PPUSH
15370: LD_INT 3
15372: PPUSH
15373: CALL_OW 275
15377: PUSH
15378: LD_VAR 0 14
15382: PUSH
15383: LD_INT 3
15385: ARRAY
15386: GREATEREQUAL
15387: AND
15388: IFFALSE 15400
// result := weapon ;
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_VAR 0 18
15399: ST_TO_ADDR
// end ; end ;
15400: LD_VAR 0 3
15404: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15405: LD_INT 0
15407: PPUSH
15408: PPUSH
// result := true ;
15409: LD_ADDR_VAR 0 3
15413: PUSH
15414: LD_INT 1
15416: ST_TO_ADDR
// if array1 = array2 then
15417: LD_VAR 0 1
15421: PUSH
15422: LD_VAR 0 2
15426: EQUAL
15427: IFFALSE 15487
// begin for i = 1 to array1 do
15429: LD_ADDR_VAR 0 4
15433: PUSH
15434: DOUBLE
15435: LD_INT 1
15437: DEC
15438: ST_TO_ADDR
15439: LD_VAR 0 1
15443: PUSH
15444: FOR_TO
15445: IFFALSE 15483
// if array1 [ i ] <> array2 [ i ] then
15447: LD_VAR 0 1
15451: PUSH
15452: LD_VAR 0 4
15456: ARRAY
15457: PUSH
15458: LD_VAR 0 2
15462: PUSH
15463: LD_VAR 0 4
15467: ARRAY
15468: NONEQUAL
15469: IFFALSE 15481
// begin result := false ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_INT 0
15478: ST_TO_ADDR
// break ;
15479: GO 15483
// end ;
15481: GO 15444
15483: POP
15484: POP
// end else
15485: GO 15495
// result := false ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// end ;
15495: LD_VAR 0 3
15499: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15500: LD_INT 0
15502: PPUSH
15503: PPUSH
// if not array1 or not array2 then
15504: LD_VAR 0 1
15508: NOT
15509: IFTRUE 15518
15511: PUSH
15512: LD_VAR 0 2
15516: NOT
15517: OR
15518: IFFALSE 15522
// exit ;
15520: GO 15586
// result := true ;
15522: LD_ADDR_VAR 0 3
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// for i = 1 to array1 do
15530: LD_ADDR_VAR 0 4
15534: PUSH
15535: DOUBLE
15536: LD_INT 1
15538: DEC
15539: ST_TO_ADDR
15540: LD_VAR 0 1
15544: PUSH
15545: FOR_TO
15546: IFFALSE 15584
// if array1 [ i ] <> array2 [ i ] then
15548: LD_VAR 0 1
15552: PUSH
15553: LD_VAR 0 4
15557: ARRAY
15558: PUSH
15559: LD_VAR 0 2
15563: PUSH
15564: LD_VAR 0 4
15568: ARRAY
15569: NONEQUAL
15570: IFFALSE 15582
// begin result := false ;
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_INT 0
15579: ST_TO_ADDR
// break ;
15580: GO 15584
// end ;
15582: GO 15545
15584: POP
15585: POP
// end ;
15586: LD_VAR 0 3
15590: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15591: LD_INT 0
15593: PPUSH
15594: PPUSH
15595: PPUSH
// pom := GetBase ( fac ) ;
15596: LD_ADDR_VAR 0 5
15600: PUSH
15601: LD_VAR 0 1
15605: PPUSH
15606: CALL_OW 274
15610: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15611: LD_ADDR_VAR 0 4
15615: PUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_INT 1
15623: ARRAY
15624: PPUSH
15625: LD_VAR 0 2
15629: PUSH
15630: LD_INT 2
15632: ARRAY
15633: PPUSH
15634: LD_VAR 0 2
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_VAR 0 2
15647: PUSH
15648: LD_INT 4
15650: ARRAY
15651: PPUSH
15652: CALL_OW 449
15656: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_VAR 0 5
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: CALL_OW 275
15674: PUSH
15675: LD_VAR 0 4
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: GREATEREQUAL
15684: IFFALSE 15710
15686: PUSH
15687: LD_VAR 0 5
15691: PPUSH
15692: LD_INT 2
15694: PPUSH
15695: CALL_OW 275
15699: PUSH
15700: LD_VAR 0 4
15704: PUSH
15705: LD_INT 2
15707: ARRAY
15708: GREATEREQUAL
15709: AND
15710: IFFALSE 15736
15712: PUSH
15713: LD_VAR 0 5
15717: PPUSH
15718: LD_INT 3
15720: PPUSH
15721: CALL_OW 275
15725: PUSH
15726: LD_VAR 0 4
15730: PUSH
15731: LD_INT 3
15733: ARRAY
15734: GREATEREQUAL
15735: AND
15736: ST_TO_ADDR
// end ;
15737: LD_VAR 0 3
15741: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
15746: PPUSH
15747: PPUSH
// pom := GetBase ( building ) ;
15748: LD_ADDR_VAR 0 3
15752: PUSH
15753: LD_VAR 0 1
15757: PPUSH
15758: CALL_OW 274
15762: ST_TO_ADDR
// if not pom then
15763: LD_VAR 0 3
15767: NOT
15768: IFFALSE 15772
// exit ;
15770: GO 15946
// btype := GetBType ( building ) ;
15772: LD_ADDR_VAR 0 5
15776: PUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL_OW 266
15786: ST_TO_ADDR
// if btype = b_armoury then
15787: LD_VAR 0 5
15791: PUSH
15792: LD_INT 4
15794: EQUAL
15795: IFFALSE 15805
// btype := b_barracks ;
15797: LD_ADDR_VAR 0 5
15801: PUSH
15802: LD_INT 5
15804: ST_TO_ADDR
// if btype = b_depot then
15805: LD_VAR 0 5
15809: PUSH
15810: LD_INT 0
15812: EQUAL
15813: IFFALSE 15823
// btype := b_warehouse ;
15815: LD_ADDR_VAR 0 5
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
// if btype = b_workshop then
15823: LD_VAR 0 5
15827: PUSH
15828: LD_INT 2
15830: EQUAL
15831: IFFALSE 15841
// btype := b_factory ;
15833: LD_ADDR_VAR 0 5
15837: PUSH
15838: LD_INT 3
15840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15841: LD_ADDR_VAR 0 4
15845: PUSH
15846: LD_VAR 0 5
15850: PPUSH
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 248
15860: PPUSH
15861: CALL_OW 450
15865: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15866: LD_ADDR_VAR 0 2
15870: PUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: LD_INT 1
15878: PPUSH
15879: CALL_OW 275
15883: PUSH
15884: LD_VAR 0 4
15888: PUSH
15889: LD_INT 1
15891: ARRAY
15892: GREATEREQUAL
15893: IFFALSE 15919
15895: PUSH
15896: LD_VAR 0 3
15900: PPUSH
15901: LD_INT 2
15903: PPUSH
15904: CALL_OW 275
15908: PUSH
15909: LD_VAR 0 4
15913: PUSH
15914: LD_INT 2
15916: ARRAY
15917: GREATEREQUAL
15918: AND
15919: IFFALSE 15945
15921: PUSH
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_INT 3
15929: PPUSH
15930: CALL_OW 275
15934: PUSH
15935: LD_VAR 0 4
15939: PUSH
15940: LD_INT 3
15942: ARRAY
15943: GREATEREQUAL
15944: AND
15945: ST_TO_ADDR
// end ;
15946: LD_VAR 0 2
15950: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
15955: PPUSH
// pom := GetBase ( building ) ;
15956: LD_ADDR_VAR 0 4
15960: PUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 274
15970: ST_TO_ADDR
// if not pom then
15971: LD_VAR 0 4
15975: NOT
15976: IFFALSE 15980
// exit ;
15978: GO 16085
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15980: LD_ADDR_VAR 0 5
15984: PUSH
15985: LD_VAR 0 2
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 248
15999: PPUSH
16000: CALL_OW 450
16004: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_VAR 0 4
16014: PPUSH
16015: LD_INT 1
16017: PPUSH
16018: CALL_OW 275
16022: PUSH
16023: LD_VAR 0 5
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: GREATEREQUAL
16032: IFFALSE 16058
16034: PUSH
16035: LD_VAR 0 4
16039: PPUSH
16040: LD_INT 2
16042: PPUSH
16043: CALL_OW 275
16047: PUSH
16048: LD_VAR 0 5
16052: PUSH
16053: LD_INT 2
16055: ARRAY
16056: GREATEREQUAL
16057: AND
16058: IFFALSE 16084
16060: PUSH
16061: LD_VAR 0 4
16065: PPUSH
16066: LD_INT 3
16068: PPUSH
16069: CALL_OW 275
16073: PUSH
16074: LD_VAR 0 5
16078: PUSH
16079: LD_INT 3
16081: ARRAY
16082: GREATEREQUAL
16083: AND
16084: ST_TO_ADDR
// end ;
16085: LD_VAR 0 3
16089: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
// result := false ;
16103: LD_ADDR_VAR 0 8
16107: PUSH
16108: LD_INT 0
16110: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16111: LD_VAR 0 5
16115: NOT
16116: IFTRUE 16125
16118: PUSH
16119: LD_VAR 0 1
16123: NOT
16124: OR
16125: IFTRUE 16134
16127: PUSH
16128: LD_VAR 0 2
16132: NOT
16133: OR
16134: IFTRUE 16143
16136: PUSH
16137: LD_VAR 0 3
16141: NOT
16142: OR
16143: IFFALSE 16147
// exit ;
16145: GO 16973
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16147: LD_ADDR_VAR 0 14
16151: PUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: LD_VAR 0 2
16161: PPUSH
16162: LD_VAR 0 3
16166: PPUSH
16167: LD_VAR 0 4
16171: PPUSH
16172: LD_VAR 0 5
16176: PUSH
16177: LD_INT 1
16179: ARRAY
16180: PPUSH
16181: CALL_OW 248
16185: PPUSH
16186: LD_INT 0
16188: PPUSH
16189: CALL 18254 0 6
16193: ST_TO_ADDR
// if not hexes then
16194: LD_VAR 0 14
16198: NOT
16199: IFFALSE 16203
// exit ;
16201: GO 16973
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16203: LD_ADDR_VAR 0 17
16207: PUSH
16208: LD_VAR 0 5
16212: PPUSH
16213: LD_INT 22
16215: PUSH
16216: LD_VAR 0 13
16220: PPUSH
16221: CALL_OW 255
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 30
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 30
16245: PUSH
16246: LD_INT 1
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 72
16266: ST_TO_ADDR
// for i = 1 to hexes do
16267: LD_ADDR_VAR 0 9
16271: PUSH
16272: DOUBLE
16273: LD_INT 1
16275: DEC
16276: ST_TO_ADDR
16277: LD_VAR 0 14
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16971
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16285: LD_ADDR_VAR 0 13
16289: PUSH
16290: LD_VAR 0 14
16294: PUSH
16295: LD_VAR 0 9
16299: ARRAY
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_VAR 0 14
16309: PUSH
16310: LD_VAR 0 9
16314: ARRAY
16315: PUSH
16316: LD_INT 2
16318: ARRAY
16319: PPUSH
16320: CALL_OW 428
16324: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16325: LD_VAR 0 14
16329: PUSH
16330: LD_VAR 0 9
16334: ARRAY
16335: PUSH
16336: LD_INT 1
16338: ARRAY
16339: PPUSH
16340: LD_VAR 0 14
16344: PUSH
16345: LD_VAR 0 9
16349: ARRAY
16350: PUSH
16351: LD_INT 2
16353: ARRAY
16354: PPUSH
16355: CALL_OW 351
16359: IFTRUE 16398
16361: PUSH
16362: LD_VAR 0 14
16366: PUSH
16367: LD_VAR 0 9
16371: ARRAY
16372: PUSH
16373: LD_INT 1
16375: ARRAY
16376: PPUSH
16377: LD_VAR 0 14
16381: PUSH
16382: LD_VAR 0 9
16386: ARRAY
16387: PUSH
16388: LD_INT 2
16390: ARRAY
16391: PPUSH
16392: CALL_OW 488
16396: NOT
16397: OR
16398: IFTRUE 16415
16400: PUSH
16401: LD_VAR 0 13
16405: PPUSH
16406: CALL_OW 247
16410: PUSH
16411: LD_INT 3
16413: EQUAL
16414: OR
16415: IFFALSE 16421
// exit ;
16417: POP
16418: POP
16419: GO 16973
// if not tmp then
16421: LD_VAR 0 13
16425: NOT
16426: IFFALSE 16430
// continue ;
16428: GO 16282
// result := true ;
16430: LD_ADDR_VAR 0 8
16434: PUSH
16435: LD_INT 1
16437: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16438: LD_VAR 0 6
16442: IFFALSE 16459
16444: PUSH
16445: LD_VAR 0 13
16449: PPUSH
16450: CALL_OW 247
16454: PUSH
16455: LD_INT 2
16457: EQUAL
16458: AND
16459: IFFALSE 16476
16461: PUSH
16462: LD_VAR 0 13
16466: PPUSH
16467: CALL_OW 263
16471: PUSH
16472: LD_INT 1
16474: EQUAL
16475: AND
16476: IFFALSE 16640
// begin if IsDrivenBy ( tmp ) then
16478: LD_VAR 0 13
16482: PPUSH
16483: CALL_OW 311
16487: IFFALSE 16491
// continue ;
16489: GO 16282
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16491: LD_VAR 0 6
16495: PPUSH
16496: LD_INT 3
16498: PUSH
16499: LD_INT 60
16501: PUSH
16502: EMPTY
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 3
16511: PUSH
16512: LD_INT 55
16514: PUSH
16515: EMPTY
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PPUSH
16526: CALL_OW 72
16530: IFFALSE 16638
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16532: LD_ADDR_VAR 0 18
16536: PUSH
16537: LD_VAR 0 6
16541: PPUSH
16542: LD_INT 3
16544: PUSH
16545: LD_INT 60
16547: PUSH
16548: EMPTY
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 3
16557: PUSH
16558: LD_INT 55
16560: PUSH
16561: EMPTY
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 72
16576: PUSH
16577: LD_INT 1
16579: ARRAY
16580: ST_TO_ADDR
// if IsInUnit ( driver ) then
16581: LD_VAR 0 18
16585: PPUSH
16586: CALL_OW 310
16590: IFFALSE 16601
// ComExit ( driver ) ;
16592: LD_VAR 0 18
16596: PPUSH
16597: CALL 42254 0 1
// AddComEnterUnit ( driver , tmp ) ;
16601: LD_VAR 0 18
16605: PPUSH
16606: LD_VAR 0 13
16610: PPUSH
16611: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16615: LD_VAR 0 18
16619: PPUSH
16620: LD_VAR 0 7
16624: PPUSH
16625: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16629: LD_VAR 0 18
16633: PPUSH
16634: CALL_OW 181
// end ; continue ;
16638: GO 16282
// end ; if not cleaners or not tmp in cleaners then
16640: LD_VAR 0 6
16644: NOT
16645: IFTRUE 16660
16647: PUSH
16648: LD_VAR 0 13
16652: PUSH
16653: LD_VAR 0 6
16657: IN
16658: NOT
16659: OR
16660: IFFALSE 16969
// begin if dep then
16662: LD_VAR 0 17
16666: IFFALSE 16802
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16668: LD_ADDR_VAR 0 16
16672: PUSH
16673: LD_VAR 0 17
16677: PUSH
16678: LD_INT 1
16680: ARRAY
16681: PPUSH
16682: CALL_OW 250
16686: PPUSH
16687: LD_VAR 0 17
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: CALL_OW 254
16700: PPUSH
16701: LD_INT 5
16703: PPUSH
16704: CALL_OW 272
16708: PUSH
16709: LD_VAR 0 17
16713: PUSH
16714: LD_INT 1
16716: ARRAY
16717: PPUSH
16718: CALL_OW 251
16722: PPUSH
16723: LD_VAR 0 17
16727: PUSH
16728: LD_INT 1
16730: ARRAY
16731: PPUSH
16732: CALL_OW 254
16736: PPUSH
16737: LD_INT 5
16739: PPUSH
16740: CALL_OW 273
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16749: LD_VAR 0 16
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: PPUSH
16758: LD_VAR 0 16
16762: PUSH
16763: LD_INT 2
16765: ARRAY
16766: PPUSH
16767: CALL_OW 488
16771: IFFALSE 16802
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16773: LD_VAR 0 13
16777: PPUSH
16778: LD_VAR 0 16
16782: PUSH
16783: LD_INT 1
16785: ARRAY
16786: PPUSH
16787: LD_VAR 0 16
16791: PUSH
16792: LD_INT 2
16794: ARRAY
16795: PPUSH
16796: CALL_OW 111
// continue ;
16800: GO 16282
// end ; end ; r := GetDir ( tmp ) ;
16802: LD_ADDR_VAR 0 15
16806: PUSH
16807: LD_VAR 0 13
16811: PPUSH
16812: CALL_OW 254
16816: ST_TO_ADDR
// if r = 5 then
16817: LD_VAR 0 15
16821: PUSH
16822: LD_INT 5
16824: EQUAL
16825: IFFALSE 16835
// r := 0 ;
16827: LD_ADDR_VAR 0 15
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// for j = r to 5 do
16835: LD_ADDR_VAR 0 10
16839: PUSH
16840: DOUBLE
16841: LD_VAR 0 15
16845: DEC
16846: ST_TO_ADDR
16847: LD_INT 5
16849: PUSH
16850: FOR_TO
16851: IFFALSE 16967
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16853: LD_ADDR_VAR 0 11
16857: PUSH
16858: LD_VAR 0 13
16862: PPUSH
16863: CALL_OW 250
16867: PPUSH
16868: LD_VAR 0 10
16872: PPUSH
16873: LD_INT 2
16875: PPUSH
16876: CALL_OW 272
16880: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16881: LD_ADDR_VAR 0 12
16885: PUSH
16886: LD_VAR 0 13
16890: PPUSH
16891: CALL_OW 251
16895: PPUSH
16896: LD_VAR 0 10
16900: PPUSH
16901: LD_INT 2
16903: PPUSH
16904: CALL_OW 273
16908: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16909: LD_VAR 0 11
16913: PPUSH
16914: LD_VAR 0 12
16918: PPUSH
16919: CALL_OW 488
16923: IFFALSE 16942
16925: PUSH
16926: LD_VAR 0 11
16930: PPUSH
16931: LD_VAR 0 12
16935: PPUSH
16936: CALL_OW 428
16940: NOT
16941: AND
16942: IFFALSE 16965
// begin ComMoveXY ( tmp , _x , _y ) ;
16944: LD_VAR 0 13
16948: PPUSH
16949: LD_VAR 0 11
16953: PPUSH
16954: LD_VAR 0 12
16958: PPUSH
16959: CALL_OW 111
// break ;
16963: GO 16967
// end ; end ;
16965: GO 16850
16967: POP
16968: POP
// end ; end ;
16969: GO 16282
16971: POP
16972: POP
// end ;
16973: LD_VAR 0 8
16977: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16978: LD_INT 0
16980: PPUSH
// result := true ;
16981: LD_ADDR_VAR 0 3
16985: PUSH
16986: LD_INT 1
16988: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16989: LD_VAR 0 2
16993: PUSH
16994: LD_INT 24
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17008
17000: LD_INT 33
17002: DOUBLE
17003: EQUAL
17004: IFTRUE 17008
17006: GO 17033
17008: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17009: LD_ADDR_VAR 0 3
17013: PUSH
17014: LD_INT 32
17016: PPUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 321
17026: PUSH
17027: LD_INT 2
17029: EQUAL
17030: ST_TO_ADDR
17031: GO 17349
17033: LD_INT 20
17035: DOUBLE
17036: EQUAL
17037: IFTRUE 17041
17039: GO 17066
17041: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17042: LD_ADDR_VAR 0 3
17046: PUSH
17047: LD_INT 6
17049: PPUSH
17050: LD_VAR 0 1
17054: PPUSH
17055: CALL_OW 321
17059: PUSH
17060: LD_INT 2
17062: EQUAL
17063: ST_TO_ADDR
17064: GO 17349
17066: LD_INT 22
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17080
17072: LD_INT 36
17074: DOUBLE
17075: EQUAL
17076: IFTRUE 17080
17078: GO 17105
17080: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17081: LD_ADDR_VAR 0 3
17085: PUSH
17086: LD_INT 15
17088: PPUSH
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 321
17098: PUSH
17099: LD_INT 2
17101: EQUAL
17102: ST_TO_ADDR
17103: GO 17349
17105: LD_INT 30
17107: DOUBLE
17108: EQUAL
17109: IFTRUE 17113
17111: GO 17138
17113: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17114: LD_ADDR_VAR 0 3
17118: PUSH
17119: LD_INT 20
17121: PPUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 321
17131: PUSH
17132: LD_INT 2
17134: EQUAL
17135: ST_TO_ADDR
17136: GO 17349
17138: LD_INT 28
17140: DOUBLE
17141: EQUAL
17142: IFTRUE 17152
17144: LD_INT 21
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17177
17152: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17153: LD_ADDR_VAR 0 3
17157: PUSH
17158: LD_INT 21
17160: PPUSH
17161: LD_VAR 0 1
17165: PPUSH
17166: CALL_OW 321
17170: PUSH
17171: LD_INT 2
17173: EQUAL
17174: ST_TO_ADDR
17175: GO 17349
17177: LD_INT 16
17179: DOUBLE
17180: EQUAL
17181: IFTRUE 17185
17183: GO 17210
17185: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17186: LD_ADDR_VAR 0 3
17190: PUSH
17191: LD_INT 84
17193: PPUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 321
17203: PUSH
17204: LD_INT 2
17206: EQUAL
17207: ST_TO_ADDR
17208: GO 17349
17210: LD_INT 19
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17224
17216: LD_INT 23
17218: DOUBLE
17219: EQUAL
17220: IFTRUE 17224
17222: GO 17249
17224: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17225: LD_ADDR_VAR 0 3
17229: PUSH
17230: LD_INT 83
17232: PPUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 321
17242: PUSH
17243: LD_INT 2
17245: EQUAL
17246: ST_TO_ADDR
17247: GO 17349
17249: LD_INT 17
17251: DOUBLE
17252: EQUAL
17253: IFTRUE 17257
17255: GO 17282
17257: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17258: LD_ADDR_VAR 0 3
17262: PUSH
17263: LD_INT 39
17265: PPUSH
17266: LD_VAR 0 1
17270: PPUSH
17271: CALL_OW 321
17275: PUSH
17276: LD_INT 2
17278: EQUAL
17279: ST_TO_ADDR
17280: GO 17349
17282: LD_INT 18
17284: DOUBLE
17285: EQUAL
17286: IFTRUE 17290
17288: GO 17315
17290: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_INT 40
17298: PPUSH
17299: LD_VAR 0 1
17303: PPUSH
17304: CALL_OW 321
17308: PUSH
17309: LD_INT 2
17311: EQUAL
17312: ST_TO_ADDR
17313: GO 17349
17315: LD_INT 27
17317: DOUBLE
17318: EQUAL
17319: IFTRUE 17323
17321: GO 17348
17323: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17324: LD_ADDR_VAR 0 3
17328: PUSH
17329: LD_INT 35
17331: PPUSH
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 321
17341: PUSH
17342: LD_INT 2
17344: EQUAL
17345: ST_TO_ADDR
17346: GO 17349
17348: POP
// end ;
17349: LD_VAR 0 3
17353: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17354: LD_INT 0
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
17366: PPUSH
// result := false ;
17367: LD_ADDR_VAR 0 6
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
// if btype = b_depot then
17375: LD_VAR 0 2
17379: PUSH
17380: LD_INT 0
17382: EQUAL
17383: IFFALSE 17395
// begin result := true ;
17385: LD_ADDR_VAR 0 6
17389: PUSH
17390: LD_INT 1
17392: ST_TO_ADDR
// exit ;
17393: GO 18249
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17395: LD_VAR 0 1
17399: NOT
17400: IFTRUE 17425
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 266
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: LD_INT 1
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: IN
17423: NOT
17424: OR
17425: IFTRUE 17434
17427: PUSH
17428: LD_VAR 0 2
17432: NOT
17433: OR
17434: IFTRUE 17470
17436: PUSH
17437: LD_VAR 0 5
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: LD_INT 3
17453: PUSH
17454: LD_INT 4
17456: PUSH
17457: LD_INT 5
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: IN
17468: NOT
17469: OR
17470: IFTRUE 17489
17472: PUSH
17473: LD_VAR 0 3
17477: PPUSH
17478: LD_VAR 0 4
17482: PPUSH
17483: CALL_OW 488
17487: NOT
17488: OR
17489: IFFALSE 17493
// exit ;
17491: GO 18249
// side := GetSide ( depot ) ;
17493: LD_ADDR_VAR 0 9
17497: PUSH
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 255
17507: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17508: LD_VAR 0 9
17512: PPUSH
17513: LD_VAR 0 2
17517: PPUSH
17518: CALL 16978 0 2
17522: NOT
17523: IFFALSE 17527
// exit ;
17525: GO 18249
// pom := GetBase ( depot ) ;
17527: LD_ADDR_VAR 0 10
17531: PUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 274
17541: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17542: LD_ADDR_VAR 0 11
17546: PUSH
17547: LD_VAR 0 2
17551: PPUSH
17552: LD_VAR 0 1
17556: PPUSH
17557: CALL_OW 248
17561: PPUSH
17562: CALL_OW 450
17566: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17567: LD_VAR 0 10
17571: PPUSH
17572: LD_INT 1
17574: PPUSH
17575: CALL_OW 275
17579: PUSH
17580: LD_VAR 0 11
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: GREATEREQUAL
17589: IFFALSE 17615
17591: PUSH
17592: LD_VAR 0 10
17596: PPUSH
17597: LD_INT 2
17599: PPUSH
17600: CALL_OW 275
17604: PUSH
17605: LD_VAR 0 11
17609: PUSH
17610: LD_INT 2
17612: ARRAY
17613: GREATEREQUAL
17614: AND
17615: IFFALSE 17641
17617: PUSH
17618: LD_VAR 0 10
17622: PPUSH
17623: LD_INT 3
17625: PPUSH
17626: CALL_OW 275
17630: PUSH
17631: LD_VAR 0 11
17635: PUSH
17636: LD_INT 3
17638: ARRAY
17639: GREATEREQUAL
17640: AND
17641: NOT
17642: IFFALSE 17646
// exit ;
17644: GO 18249
// if GetBType ( depot ) = b_depot then
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 266
17655: PUSH
17656: LD_INT 0
17658: EQUAL
17659: IFFALSE 17671
// dist := 28 else
17661: LD_ADDR_VAR 0 14
17665: PUSH
17666: LD_INT 28
17668: ST_TO_ADDR
17669: GO 17679
// dist := 36 ;
17671: LD_ADDR_VAR 0 14
17675: PUSH
17676: LD_INT 36
17678: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17679: LD_VAR 0 1
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: LD_VAR 0 4
17693: PPUSH
17694: CALL_OW 297
17698: PUSH
17699: LD_VAR 0 14
17703: GREATER
17704: IFFALSE 17708
// exit ;
17706: GO 18249
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17708: LD_ADDR_VAR 0 12
17712: PUSH
17713: LD_VAR 0 2
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: LD_VAR 0 4
17727: PPUSH
17728: LD_VAR 0 5
17732: PPUSH
17733: LD_VAR 0 1
17737: PPUSH
17738: CALL_OW 248
17742: PPUSH
17743: LD_INT 0
17745: PPUSH
17746: CALL 18254 0 6
17750: ST_TO_ADDR
// if not hexes then
17751: LD_VAR 0 12
17755: NOT
17756: IFFALSE 17760
// exit ;
17758: GO 18249
// hex := GetHexInfo ( x , y ) ;
17760: LD_ADDR_VAR 0 15
17764: PUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_VAR 0 4
17774: PPUSH
17775: CALL_OW 546
17779: ST_TO_ADDR
// if hex [ 1 ] then
17780: LD_VAR 0 15
17784: PUSH
17785: LD_INT 1
17787: ARRAY
17788: IFFALSE 17792
// exit ;
17790: GO 18249
// height := hex [ 2 ] ;
17792: LD_ADDR_VAR 0 13
17796: PUSH
17797: LD_VAR 0 15
17801: PUSH
17802: LD_INT 2
17804: ARRAY
17805: ST_TO_ADDR
// for i = 1 to hexes do
17806: LD_ADDR_VAR 0 7
17810: PUSH
17811: DOUBLE
17812: LD_INT 1
17814: DEC
17815: ST_TO_ADDR
17816: LD_VAR 0 12
17820: PUSH
17821: FOR_TO
17822: IFFALSE 18166
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17824: LD_VAR 0 12
17828: PUSH
17829: LD_VAR 0 7
17833: ARRAY
17834: PUSH
17835: LD_INT 1
17837: ARRAY
17838: PPUSH
17839: LD_VAR 0 12
17843: PUSH
17844: LD_VAR 0 7
17848: ARRAY
17849: PUSH
17850: LD_INT 2
17852: ARRAY
17853: PPUSH
17854: CALL_OW 488
17858: NOT
17859: IFTRUE 17901
17861: PUSH
17862: LD_VAR 0 12
17866: PUSH
17867: LD_VAR 0 7
17871: ARRAY
17872: PUSH
17873: LD_INT 1
17875: ARRAY
17876: PPUSH
17877: LD_VAR 0 12
17881: PUSH
17882: LD_VAR 0 7
17886: ARRAY
17887: PUSH
17888: LD_INT 2
17890: ARRAY
17891: PPUSH
17892: CALL_OW 428
17896: PUSH
17897: LD_INT 0
17899: GREATER
17900: OR
17901: IFTRUE 17939
17903: PUSH
17904: LD_VAR 0 12
17908: PUSH
17909: LD_VAR 0 7
17913: ARRAY
17914: PUSH
17915: LD_INT 1
17917: ARRAY
17918: PPUSH
17919: LD_VAR 0 12
17923: PUSH
17924: LD_VAR 0 7
17928: ARRAY
17929: PUSH
17930: LD_INT 2
17932: ARRAY
17933: PPUSH
17934: CALL_OW 351
17938: OR
17939: IFFALSE 17945
// exit ;
17941: POP
17942: POP
17943: GO 18249
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17945: LD_ADDR_VAR 0 8
17949: PUSH
17950: LD_VAR 0 12
17954: PUSH
17955: LD_VAR 0 7
17959: ARRAY
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: LD_VAR 0 12
17969: PUSH
17970: LD_VAR 0 7
17974: ARRAY
17975: PUSH
17976: LD_INT 2
17978: ARRAY
17979: PPUSH
17980: CALL_OW 546
17984: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17985: LD_VAR 0 8
17989: PUSH
17990: LD_INT 1
17992: ARRAY
17993: IFTRUE 18015
17995: PUSH
17996: LD_VAR 0 8
18000: PUSH
18001: LD_INT 2
18003: ARRAY
18004: PUSH
18005: LD_VAR 0 13
18009: PUSH
18010: LD_INT 2
18012: PLUS
18013: GREATER
18014: OR
18015: IFTRUE 18037
18017: PUSH
18018: LD_VAR 0 8
18022: PUSH
18023: LD_INT 2
18025: ARRAY
18026: PUSH
18027: LD_VAR 0 13
18031: PUSH
18032: LD_INT 2
18034: MINUS
18035: LESS
18036: OR
18037: IFTRUE 18105
18039: PUSH
18040: LD_VAR 0 8
18044: PUSH
18045: LD_INT 3
18047: ARRAY
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 8
18054: PUSH
18055: LD_INT 9
18057: PUSH
18058: LD_INT 10
18060: PUSH
18061: LD_INT 11
18063: PUSH
18064: LD_INT 12
18066: PUSH
18067: LD_INT 13
18069: PUSH
18070: LD_INT 16
18072: PUSH
18073: LD_INT 17
18075: PUSH
18076: LD_INT 18
18078: PUSH
18079: LD_INT 19
18081: PUSH
18082: LD_INT 20
18084: PUSH
18085: LD_INT 21
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: IN
18103: NOT
18104: OR
18105: IFTRUE 18118
18107: PUSH
18108: LD_VAR 0 8
18112: PUSH
18113: LD_INT 5
18115: ARRAY
18116: NOT
18117: OR
18118: IFTRUE 18158
18120: PUSH
18121: LD_VAR 0 8
18125: PUSH
18126: LD_INT 6
18128: ARRAY
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 7
18138: PUSH
18139: LD_INT 9
18141: PUSH
18142: LD_INT 10
18144: PUSH
18145: LD_INT 11
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: IN
18156: NOT
18157: OR
18158: IFFALSE 18164
// exit ;
18160: POP
18161: POP
18162: GO 18249
// end ;
18164: GO 17821
18166: POP
18167: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18168: LD_VAR 0 9
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_VAR 0 4
18182: PPUSH
18183: LD_INT 20
18185: PPUSH
18186: CALL 10068 0 4
18190: PUSH
18191: LD_INT 4
18193: ARRAY
18194: IFFALSE 18198
// exit ;
18196: GO 18249
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18198: LD_VAR 0 2
18202: PUSH
18203: LD_INT 29
18205: PUSH
18206: LD_INT 30
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: IN
18213: IFFALSE 18237
18215: PUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: LD_VAR 0 4
18225: PPUSH
18226: LD_VAR 0 9
18230: PPUSH
18231: CALL_OW 440
18235: NOT
18236: AND
18237: IFFALSE 18241
// exit ;
18239: GO 18249
// result := true ;
18241: LD_ADDR_VAR 0 6
18245: PUSH
18246: LD_INT 1
18248: ST_TO_ADDR
// end ;
18249: LD_VAR 0 6
18253: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18254: LD_INT 0
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
18273: PPUSH
18274: PPUSH
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
18280: PPUSH
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
18288: PPUSH
18289: PPUSH
18290: PPUSH
18291: PPUSH
18292: PPUSH
18293: PPUSH
18294: PPUSH
18295: PPUSH
18296: PPUSH
18297: PPUSH
18298: PPUSH
18299: PPUSH
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
18312: PPUSH
18313: PPUSH
// result = [ ] ;
18314: LD_ADDR_VAR 0 7
18318: PUSH
18319: EMPTY
18320: ST_TO_ADDR
// temp_list = [ ] ;
18321: LD_ADDR_VAR 0 9
18325: PUSH
18326: EMPTY
18327: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18328: LD_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: LD_INT 3
18344: PUSH
18345: LD_INT 4
18347: PUSH
18348: LD_INT 5
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: IN
18359: NOT
18360: IFTRUE 18403
18362: PUSH
18363: LD_VAR 0 1
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: IN
18378: IFFALSE 18402
18380: PUSH
18381: LD_VAR 0 5
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: LIST
18399: IN
18400: NOT
18401: AND
18402: OR
18403: IFFALSE 18407
// exit ;
18405: GO 36806
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18407: LD_VAR 0 1
18411: PUSH
18412: LD_INT 6
18414: PUSH
18415: LD_INT 7
18417: PUSH
18418: LD_INT 8
18420: PUSH
18421: LD_INT 13
18423: PUSH
18424: LD_INT 12
18426: PUSH
18427: LD_INT 15
18429: PUSH
18430: LD_INT 11
18432: PUSH
18433: LD_INT 14
18435: PUSH
18436: LD_INT 10
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: IN
18450: IFFALSE 18460
// btype = b_lab ;
18452: LD_ADDR_VAR 0 1
18456: PUSH
18457: LD_INT 6
18459: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18460: LD_VAR 0 6
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: IN
18479: NOT
18480: IFTRUE 18548
18482: PUSH
18483: LD_VAR 0 1
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 3
18499: PUSH
18500: LD_INT 6
18502: PUSH
18503: LD_INT 36
18505: PUSH
18506: LD_INT 4
18508: PUSH
18509: LD_INT 5
18511: PUSH
18512: LD_INT 31
18514: PUSH
18515: LD_INT 32
18517: PUSH
18518: LD_INT 33
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: IN
18534: NOT
18535: IFFALSE 18547
18537: PUSH
18538: LD_VAR 0 6
18542: PUSH
18543: LD_INT 1
18545: EQUAL
18546: AND
18547: OR
18548: IFTRUE 18580
18550: PUSH
18551: LD_VAR 0 1
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: IN
18566: NOT
18567: IFFALSE 18579
18569: PUSH
18570: LD_VAR 0 6
18574: PUSH
18575: LD_INT 2
18577: EQUAL
18578: AND
18579: OR
18580: IFFALSE 18590
// mode = 0 ;
18582: LD_ADDR_VAR 0 6
18586: PUSH
18587: LD_INT 0
18589: ST_TO_ADDR
// case mode of 0 :
18590: LD_VAR 0 6
18594: PUSH
18595: LD_INT 0
18597: DOUBLE
18598: EQUAL
18599: IFTRUE 18603
18601: GO 30056
18603: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18604: LD_ADDR_VAR 0 11
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: NEG
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 2
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 3
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: NEG
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18797: LD_ADDR_VAR 0 12
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: LD_INT 0
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 2
18920: NEG
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: NEG
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 2
18943: NEG
18944: PUSH
18945: LD_INT 1
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 3
18954: NEG
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 3
18965: NEG
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18993: LD_ADDR_VAR 0 13
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 2
19116: NEG
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 2
19128: NEG
19129: PUSH
19130: LD_INT 2
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: NEG
19141: PUSH
19142: LD_INT 3
19144: NEG
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 3
19152: NEG
19153: PUSH
19154: LD_INT 2
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 3
19164: NEG
19165: PUSH
19166: LD_INT 3
19168: NEG
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19192: LD_ADDR_VAR 0 14
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 1
19261: NEG
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: LD_INT 2
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 1
19338: NEG
19339: PUSH
19340: LD_INT 3
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 3
19353: NEG
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19388: LD_ADDR_VAR 0 15
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 2
19511: NEG
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19581: LD_ADDR_VAR 0 16
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: LD_INT 2
19666: NEG
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: NEG
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 2
19716: NEG
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 3
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 3
19738: PUSH
19739: LD_INT 3
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19774: LD_ADDR_VAR 0 17
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20004: LD_ADDR_VAR 0 18
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20234: LD_ADDR_VAR 0 19
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: LD_INT 1
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 2
20319: NEG
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 2
20330: NEG
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 1
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 2
20410: NEG
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: NEG
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20464: LD_ADDR_VAR 0 20
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: LD_INT 0
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: LD_INT 1
20484: NEG
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: LD_INT 1
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 1
20522: NEG
20523: PUSH
20524: LD_INT 0
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: NEG
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: LD_INT 2
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 2
20560: NEG
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 2
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: LD_INT 2
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: NEG
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: NEG
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: NEG
20664: PUSH
20665: LD_INT 2
20667: NEG
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20694: LD_ADDR_VAR 0 21
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: NEG
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: LD_INT 2
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20924: LD_ADDR_VAR 0 22
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: NEG
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 2
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 2
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 2
21100: NEG
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 2
21123: NEG
21124: PUSH
21125: LD_INT 2
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21154: LD_ADDR_VAR 0 23
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: LD_INT 2
21250: NEG
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 2
21365: NEG
21366: PUSH
21367: LD_INT 3
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 3
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 2
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21434: LD_ADDR_VAR 0 24
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: LD_INT 2
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: NEG
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 2
21610: NEG
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: NEG
21622: PUSH
21623: LD_INT 1
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: NEG
21634: PUSH
21635: LD_INT 2
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: LD_INT 2
21648: NEG
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 3
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21710: LD_ADDR_VAR 0 25
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 2
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: LD_INT 0
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 2
21897: NEG
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 2
21909: NEG
21910: PUSH
21911: LD_INT 2
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 2
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: LD_INT 3
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21984: LD_ADDR_VAR 0 26
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: NEG
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 2
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 2
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: LD_INT 2
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 2
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 2
22226: NEG
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22260: LD_ADDR_VAR 0 27
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 0
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: NEG
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: LD_INT 2
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 2
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 2
22436: NEG
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: NEG
22460: PUSH
22461: LD_INT 2
22463: NEG
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 3
22493: NEG
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 3
22505: NEG
22506: PUSH
22507: LD_INT 2
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22540: LD_ADDR_VAR 0 28
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 1
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: LD_INT 0
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 2
22665: PUSH
22666: LD_INT 1
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: LD_INT 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 2
22716: NEG
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: NEG
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: NEG
22752: PUSH
22753: LD_INT 3
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: LD_INT 3
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 3
22775: NEG
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 3
22787: NEG
22788: PUSH
22789: LD_INT 2
22791: NEG
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22822: LD_ADDR_VAR 0 29
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: LD_INT 1
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 1
22880: NEG
22881: PUSH
22882: LD_INT 0
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: NEG
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: LD_INT 2
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 2
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: NEG
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 2
23012: NEG
23013: PUSH
23014: LD_INT 3
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 1
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 3
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: LD_INT 3
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 3
23066: NEG
23067: PUSH
23068: LD_INT 2
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23101: LD_ADDR_VAR 0 30
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 2
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 2
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: NEG
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 2
23278: NEG
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 3
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: NEG
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23379: LD_ADDR_VAR 0 31
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: LD_INT 3
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: LD_INT 3
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 3
23622: NEG
23623: PUSH
23624: LD_INT 2
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23657: LD_ADDR_VAR 0 32
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: LD_INT 2
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 2
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 2
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 2
23823: NEG
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 2
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: LD_INT 3
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: LD_INT 2
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 3
23869: PUSH
23870: LD_INT 2
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 3
23900: NEG
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23935: LD_ADDR_VAR 0 33
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 2
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 2
24090: NEG
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 2
24113: NEG
24114: PUSH
24115: LD_INT 2
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: LD_INT 3
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 3
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 3
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 3
24179: NEG
24180: PUSH
24181: LD_INT 2
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24214: LD_ADDR_VAR 0 34
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: LD_INT 2
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 2
24370: NEG
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: LD_INT 3
24409: NEG
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: LD_INT 2
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: NEG
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 3
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24494: LD_ADDR_VAR 0 35
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 1
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24606: LD_ADDR_VAR 0 36
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24718: LD_ADDR_VAR 0 37
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24830: LD_ADDR_VAR 0 38
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: NEG
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24942: LD_ADDR_VAR 0 39
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25054: LD_ADDR_VAR 0 40
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25166: LD_ADDR_VAR 0 41
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: NEG
25248: PUSH
25249: LD_INT 2
25251: NEG
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 2
25321: NEG
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 3
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 3
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 3
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 3
25409: PUSH
25410: LD_INT 3
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: LD_INT 3
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: NEG
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 3
25440: NEG
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: NEG
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 3
25475: NEG
25476: PUSH
25477: LD_INT 3
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25516: LD_ADDR_VAR 0 42
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: NEG
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 2
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: NEG
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: NEG
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: LD_INT 3
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 3
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 2
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 3
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 3
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 3
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 3
25813: NEG
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 3
25825: NEG
25826: PUSH
25827: LD_INT 3
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25866: LD_ADDR_VAR 0 43
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 3
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 3
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 3
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 3
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 3
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: NEG
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 3
26162: NEG
26163: PUSH
26164: LD_INT 0
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 3
26173: NEG
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26214: LD_ADDR_VAR 0 44
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 2
26369: NEG
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: NEG
26393: PUSH
26394: LD_INT 2
26396: NEG
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: LD_INT 3
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 3
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 3
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 3
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 3
26488: NEG
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 3
26511: NEG
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 3
26523: NEG
26524: PUSH
26525: LD_INT 3
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26564: LD_ADDR_VAR 0 45
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: LD_INT 3
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 3
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: LD_INT 3
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 3
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: LD_INT 3
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: LD_INT 3
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: LD_INT 3
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 3
26861: NEG
26862: PUSH
26863: LD_INT 2
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 3
26873: NEG
26874: PUSH
26875: LD_INT 3
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26914: LD_ADDR_VAR 0 46
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 2
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 2
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: LD_INT 3
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 3
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 3
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 3
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 3
27210: NEG
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 3
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27262: LD_ADDR_VAR 0 47
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 2
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: NEG
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 2
27389: NEG
27390: PUSH
27391: LD_INT 2
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27413: LD_ADDR_VAR 0 48
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 2
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27560: LD_ADDR_VAR 0 49
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27704: LD_ADDR_VAR 0 50
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27848: LD_ADDR_VAR 0 51
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27995: LD_ADDR_VAR 0 52
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: NEG
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28146: LD_ADDR_VAR 0 53
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28376: LD_ADDR_VAR 0 54
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 2
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28606: LD_ADDR_VAR 0 55
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28836: LD_ADDR_VAR 0 56
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 2
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 2
29035: NEG
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29066: LD_ADDR_VAR 0 57
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 2
29151: NEG
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 2
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 2
29265: NEG
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29296: LD_ADDR_VAR 0 58
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: NEG
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 2
29495: NEG
29496: PUSH
29497: LD_INT 2
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29526: LD_ADDR_VAR 0 59
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29614: LD_ADDR_VAR 0 60
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: LD_INT 1
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: NEG
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29702: LD_ADDR_VAR 0 61
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29790: LD_ADDR_VAR 0 62
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29878: LD_ADDR_VAR 0 63
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 1
29951: NEG
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29966: LD_ADDR_VAR 0 64
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: ST_TO_ADDR
// end ; 1 :
30054: GO 35951
30056: LD_INT 1
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 32687
30064: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30065: LD_ADDR_VAR 0 11
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 3
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 3
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 2
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30109: LD_ADDR_VAR 0 12
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30150: LD_ADDR_VAR 0 13
30154: PUSH
30155: LD_INT 3
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: LD_INT 3
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30190: LD_ADDR_VAR 0 14
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: LD_INT 3
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30231: LD_ADDR_VAR 0 15
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30275: LD_ADDR_VAR 0 16
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 3
30294: NEG
30295: PUSH
30296: LD_INT 2
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 3
30306: NEG
30307: PUSH
30308: LD_INT 3
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30321: LD_ADDR_VAR 0 17
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30365: LD_ADDR_VAR 0 18
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30406: LD_ADDR_VAR 0 19
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30446: LD_ADDR_VAR 0 20
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30487: LD_ADDR_VAR 0 21
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30531: LD_ADDR_VAR 0 22
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: LD_INT 3
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30577: LD_ADDR_VAR 0 23
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 3
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: LD_INT 4
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30621: LD_ADDR_VAR 0 24
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 4
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30662: LD_ADDR_VAR 0 25
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 4
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30702: LD_ADDR_VAR 0 26
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: LD_INT 4
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30743: LD_ADDR_VAR 0 27
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 3
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 4
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30787: LD_ADDR_VAR 0 28
30791: PUSH
30792: LD_INT 3
30794: NEG
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: LD_INT 4
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30833: LD_ADDR_VAR 0 29
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 4
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 4
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: LD_INT 5
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 5
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 4
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: LD_INT 6
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 6
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 5
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30988: LD_ADDR_VAR 0 30
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 3
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 4
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 4
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 4
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 5
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 5
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 5
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 6
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 6
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31131: LD_ADDR_VAR 0 31
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 4
31178: PUSH
31179: LD_INT 4
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: LD_INT 4
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 5
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 5
31208: PUSH
31209: LD_INT 5
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 4
31218: PUSH
31219: LD_INT 5
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 6
31228: PUSH
31229: LD_INT 5
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 6
31238: PUSH
31239: LD_INT 6
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 5
31248: PUSH
31249: LD_INT 6
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31270: LD_ADDR_VAR 0 32
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 3
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 5
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: LD_INT 5
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: LD_INT 4
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 6
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 6
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: LD_INT 5
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31413: LD_ADDR_VAR 0 33
31417: PUSH
31418: LD_INT 2
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 4
31465: NEG
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 4
31476: NEG
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 5
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 5
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 5
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 6
31533: NEG
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 6
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31568: LD_ADDR_VAR 0 34
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 3
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: NEG
31600: PUSH
31601: LD_INT 3
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 4
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 4
31623: NEG
31624: PUSH
31625: LD_INT 3
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 4
31635: NEG
31636: PUSH
31637: LD_INT 4
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 4
31647: NEG
31648: PUSH
31649: LD_INT 5
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 5
31659: NEG
31660: PUSH
31661: LD_INT 4
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 5
31671: NEG
31672: PUSH
31673: LD_INT 5
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 5
31683: NEG
31684: PUSH
31685: LD_INT 6
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 6
31695: NEG
31696: PUSH
31697: LD_INT 5
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 6
31707: NEG
31708: PUSH
31709: LD_INT 6
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31731: LD_ADDR_VAR 0 41
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31775: LD_ADDR_VAR 0 42
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31816: LD_ADDR_VAR 0 43
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31856: LD_ADDR_VAR 0 44
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31897: LD_ADDR_VAR 0 45
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31941: LD_ADDR_VAR 0 46
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 3
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 3
31972: NEG
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31987: LD_ADDR_VAR 0 47
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 3
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 3
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32020: LD_ADDR_VAR 0 48
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32051: LD_ADDR_VAR 0 49
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32080: LD_ADDR_VAR 0 50
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 3
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32109: LD_ADDR_VAR 0 51
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32140: LD_ADDR_VAR 0 52
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32173: LD_ADDR_VAR 0 53
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32217: LD_ADDR_VAR 0 54
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32258: LD_ADDR_VAR 0 55
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32298: LD_ADDR_VAR 0 56
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32339: LD_ADDR_VAR 0 57
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 3
32368: NEG
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: LIST
32382: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32383: LD_ADDR_VAR 0 58
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: LD_INT 3
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32429: LD_ADDR_VAR 0 59
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: LIST
32472: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32473: LD_ADDR_VAR 0 60
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32514: LD_ADDR_VAR 0 61
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32554: LD_ADDR_VAR 0 62
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32595: LD_ADDR_VAR 0 63
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32639: LD_ADDR_VAR 0 64
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// end ; 2 :
32685: GO 35951
32687: LD_INT 2
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 35950
32695: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32696: LD_ADDR_VAR 0 29
32700: PUSH
32701: LD_INT 4
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 4
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 5
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 5
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 4
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 3
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 5
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 4
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: LD_INT 4
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 3
32836: PUSH
32837: LD_INT 4
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 4
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 4
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 3
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 4
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 5
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 5
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: LD_INT 4
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 5
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: NEG
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 4
33035: NEG
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 4
33058: NEG
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 4
33081: NEG
33082: PUSH
33083: LD_INT 4
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: LD_INT 5
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: LD_INT 4
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 4
33129: NEG
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PUSH
33143: LD_INT 4
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: LD_INT 5
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: LD_INT 5
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 5
33177: NEG
33178: PUSH
33179: LD_INT 3
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33234: LD_ADDR_VAR 0 30
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 4
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 4
33251: PUSH
33252: LD_INT 3
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 5
33261: PUSH
33262: LD_INT 4
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 5
33271: PUSH
33272: LD_INT 5
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 4
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 3
33291: PUSH
33292: LD_INT 4
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 3
33301: PUSH
33302: LD_INT 3
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 5
33311: PUSH
33312: LD_INT 3
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 3
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 3
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 4
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 4
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: PUSH
33404: LD_INT 4
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 3
33447: NEG
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 4
33469: NEG
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 5
33480: NEG
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 5
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 5
33503: NEG
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: LD_INT 3
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 4
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 3
33574: NEG
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 4
33586: NEG
33587: PUSH
33588: LD_INT 3
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: LD_INT 4
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: LD_INT 4
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 4
33622: NEG
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 4
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: LD_INT 5
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: LD_INT 4
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 3
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 5
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: LD_INT 5
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33781: LD_ADDR_VAR 0 31
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: LD_INT 4
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 5
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 5
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: LD_INT 3
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 5
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 3
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 4
33937: NEG
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 4
33948: NEG
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 4
33960: NEG
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 4
33983: NEG
33984: PUSH
33985: LD_INT 4
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 4
33995: NEG
33996: PUSH
33997: LD_INT 5
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 3
34019: NEG
34020: PUSH
34021: LD_INT 3
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 4
34031: NEG
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 5
34043: NEG
34044: PUSH
34045: LD_INT 4
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 5
34055: NEG
34056: PUSH
34057: LD_INT 5
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 3
34067: NEG
34068: PUSH
34069: LD_INT 5
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 5
34079: NEG
34080: PUSH
34081: LD_INT 3
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 4
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 3
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 3
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: LD_INT 4
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: LD_INT 4
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 4
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 4
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 4
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 5
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34331: LD_ADDR_VAR 0 32
34335: PUSH
34336: LD_INT 4
34338: NEG
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 4
34349: NEG
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 3
34372: NEG
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 4
34383: NEG
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 5
34394: NEG
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 5
34405: NEG
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 5
34417: NEG
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 3
34429: NEG
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 3
34440: NEG
34441: PUSH
34442: LD_INT 3
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: LD_INT 4
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 3
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 3
34488: NEG
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 4
34500: NEG
34501: PUSH
34502: LD_INT 3
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 4
34512: NEG
34513: PUSH
34514: LD_INT 4
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: LD_INT 4
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 4
34536: NEG
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 4
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 5
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 4
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 3
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 4
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 5
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 3
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 2
34638: NEG
34639: PUSH
34640: LD_INT 5
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 3
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 3
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 4
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 4
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 4
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 4
34743: PUSH
34744: LD_INT 4
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 4
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 5
34763: PUSH
34764: LD_INT 4
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 5
34773: PUSH
34774: LD_INT 5
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 3
34793: PUSH
34794: LD_INT 4
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 3
34823: PUSH
34824: LD_INT 5
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34878: LD_ADDR_VAR 0 33
34882: PUSH
34883: LD_INT 4
34885: NEG
34886: PUSH
34887: LD_INT 4
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 4
34897: NEG
34898: PUSH
34899: LD_INT 5
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 3
34909: NEG
34910: PUSH
34911: LD_INT 4
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: LD_INT 3
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 4
34933: NEG
34934: PUSH
34935: LD_INT 3
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 5
34945: NEG
34946: PUSH
34947: LD_INT 4
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 5
34957: NEG
34958: PUSH
34959: LD_INT 5
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 3
34969: NEG
34970: PUSH
34971: LD_INT 5
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 5
34981: NEG
34982: PUSH
34983: LD_INT 3
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 3
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 4
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: LD_INT 3
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: LD_INT 4
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: LD_INT 4
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 4
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 4
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 5
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 4
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 3
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: LD_INT 2
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 5
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 3
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 3
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 4
35208: PUSH
35209: LD_INT 3
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 4
35218: PUSH
35219: LD_INT 4
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: LD_INT 4
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: LD_INT 3
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 4
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: LD_INT 4
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 4
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 4
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 5
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 5
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: LD_INT 5
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 2
35360: NEG
35361: PUSH
35362: LD_INT 3
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35416: LD_ADDR_VAR 0 34
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 4
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 5
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 4
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: LD_INT 3
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 3
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 4
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: LD_INT 5
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 3
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: LD_INT 5
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 3
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 4
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 4
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 4
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 4
35618: PUSH
35619: LD_INT 4
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 4
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 5
35638: PUSH
35639: LD_INT 4
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 5
35648: PUSH
35649: LD_INT 5
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 4
35658: PUSH
35659: LD_INT 5
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: LD_INT 4
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 3
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 5
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 3
35698: PUSH
35699: LD_INT 5
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 3
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 4
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 4
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: LD_INT 3
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 4
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 4
35801: NEG
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 4
35812: NEG
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: NEG
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 3
35835: NEG
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 4
35846: NEG
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 5
35857: NEG
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 5
35868: NEG
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 5
35880: NEG
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 3
35892: NEG
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// end ; end ;
35948: GO 35951
35950: POP
// case btype of b_depot , b_warehouse :
35951: LD_VAR 0 1
35955: PUSH
35956: LD_INT 0
35958: DOUBLE
35959: EQUAL
35960: IFTRUE 35970
35962: LD_INT 1
35964: DOUBLE
35965: EQUAL
35966: IFTRUE 35970
35968: GO 36171
35970: POP
// case nation of nation_american :
35971: LD_VAR 0 5
35975: PUSH
35976: LD_INT 1
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 35984
35982: GO 36040
35984: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35985: LD_ADDR_VAR 0 9
35989: PUSH
35990: LD_VAR 0 11
35994: PUSH
35995: LD_VAR 0 12
35999: PUSH
36000: LD_VAR 0 13
36004: PUSH
36005: LD_VAR 0 14
36009: PUSH
36010: LD_VAR 0 15
36014: PUSH
36015: LD_VAR 0 16
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: PUSH
36028: LD_VAR 0 4
36032: PUSH
36033: LD_INT 1
36035: PLUS
36036: ARRAY
36037: ST_TO_ADDR
36038: GO 36169
36040: LD_INT 2
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36048
36046: GO 36104
36048: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36049: LD_ADDR_VAR 0 9
36053: PUSH
36054: LD_VAR 0 17
36058: PUSH
36059: LD_VAR 0 18
36063: PUSH
36064: LD_VAR 0 19
36068: PUSH
36069: LD_VAR 0 20
36073: PUSH
36074: LD_VAR 0 21
36078: PUSH
36079: LD_VAR 0 22
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: PUSH
36092: LD_VAR 0 4
36096: PUSH
36097: LD_INT 1
36099: PLUS
36100: ARRAY
36101: ST_TO_ADDR
36102: GO 36169
36104: LD_INT 3
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36168
36112: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36113: LD_ADDR_VAR 0 9
36117: PUSH
36118: LD_VAR 0 23
36122: PUSH
36123: LD_VAR 0 24
36127: PUSH
36128: LD_VAR 0 25
36132: PUSH
36133: LD_VAR 0 26
36137: PUSH
36138: LD_VAR 0 27
36142: PUSH
36143: LD_VAR 0 28
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: PUSH
36156: LD_VAR 0 4
36160: PUSH
36161: LD_INT 1
36163: PLUS
36164: ARRAY
36165: ST_TO_ADDR
36166: GO 36169
36168: POP
36169: GO 36724
36171: LD_INT 2
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36185
36177: LD_INT 3
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36185
36183: GO 36241
36185: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_VAR 0 29
36195: PUSH
36196: LD_VAR 0 30
36200: PUSH
36201: LD_VAR 0 31
36205: PUSH
36206: LD_VAR 0 32
36210: PUSH
36211: LD_VAR 0 33
36215: PUSH
36216: LD_VAR 0 34
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: PUSH
36229: LD_VAR 0 4
36233: PUSH
36234: LD_INT 1
36236: PLUS
36237: ARRAY
36238: ST_TO_ADDR
36239: GO 36724
36241: LD_INT 16
36243: DOUBLE
36244: EQUAL
36245: IFTRUE 36303
36247: LD_INT 17
36249: DOUBLE
36250: EQUAL
36251: IFTRUE 36303
36253: LD_INT 18
36255: DOUBLE
36256: EQUAL
36257: IFTRUE 36303
36259: LD_INT 19
36261: DOUBLE
36262: EQUAL
36263: IFTRUE 36303
36265: LD_INT 22
36267: DOUBLE
36268: EQUAL
36269: IFTRUE 36303
36271: LD_INT 20
36273: DOUBLE
36274: EQUAL
36275: IFTRUE 36303
36277: LD_INT 21
36279: DOUBLE
36280: EQUAL
36281: IFTRUE 36303
36283: LD_INT 23
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36303
36289: LD_INT 24
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36303
36295: LD_INT 25
36297: DOUBLE
36298: EQUAL
36299: IFTRUE 36303
36301: GO 36359
36303: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36304: LD_ADDR_VAR 0 9
36308: PUSH
36309: LD_VAR 0 35
36313: PUSH
36314: LD_VAR 0 36
36318: PUSH
36319: LD_VAR 0 37
36323: PUSH
36324: LD_VAR 0 38
36328: PUSH
36329: LD_VAR 0 39
36333: PUSH
36334: LD_VAR 0 40
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: PUSH
36347: LD_VAR 0 4
36351: PUSH
36352: LD_INT 1
36354: PLUS
36355: ARRAY
36356: ST_TO_ADDR
36357: GO 36724
36359: LD_INT 6
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36415
36365: LD_INT 7
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36415
36371: LD_INT 8
36373: DOUBLE
36374: EQUAL
36375: IFTRUE 36415
36377: LD_INT 13
36379: DOUBLE
36380: EQUAL
36381: IFTRUE 36415
36383: LD_INT 12
36385: DOUBLE
36386: EQUAL
36387: IFTRUE 36415
36389: LD_INT 15
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36415
36395: LD_INT 11
36397: DOUBLE
36398: EQUAL
36399: IFTRUE 36415
36401: LD_INT 14
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36415
36407: LD_INT 10
36409: DOUBLE
36410: EQUAL
36411: IFTRUE 36415
36413: GO 36471
36415: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36416: LD_ADDR_VAR 0 9
36420: PUSH
36421: LD_VAR 0 41
36425: PUSH
36426: LD_VAR 0 42
36430: PUSH
36431: LD_VAR 0 43
36435: PUSH
36436: LD_VAR 0 44
36440: PUSH
36441: LD_VAR 0 45
36445: PUSH
36446: LD_VAR 0 46
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: PUSH
36459: LD_VAR 0 4
36463: PUSH
36464: LD_INT 1
36466: PLUS
36467: ARRAY
36468: ST_TO_ADDR
36469: GO 36724
36471: LD_INT 36
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 36535
36479: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36480: LD_ADDR_VAR 0 9
36484: PUSH
36485: LD_VAR 0 47
36489: PUSH
36490: LD_VAR 0 48
36494: PUSH
36495: LD_VAR 0 49
36499: PUSH
36500: LD_VAR 0 50
36504: PUSH
36505: LD_VAR 0 51
36509: PUSH
36510: LD_VAR 0 52
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: PUSH
36523: LD_VAR 0 4
36527: PUSH
36528: LD_INT 1
36530: PLUS
36531: ARRAY
36532: ST_TO_ADDR
36533: GO 36724
36535: LD_INT 4
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36561
36541: LD_INT 5
36543: DOUBLE
36544: EQUAL
36545: IFTRUE 36561
36547: LD_INT 34
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36561
36553: LD_INT 37
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 36617
36561: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36562: LD_ADDR_VAR 0 9
36566: PUSH
36567: LD_VAR 0 53
36571: PUSH
36572: LD_VAR 0 54
36576: PUSH
36577: LD_VAR 0 55
36581: PUSH
36582: LD_VAR 0 56
36586: PUSH
36587: LD_VAR 0 57
36591: PUSH
36592: LD_VAR 0 58
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: PUSH
36605: LD_VAR 0 4
36609: PUSH
36610: LD_INT 1
36612: PLUS
36613: ARRAY
36614: ST_TO_ADDR
36615: GO 36724
36617: LD_INT 31
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36667
36623: LD_INT 32
36625: DOUBLE
36626: EQUAL
36627: IFTRUE 36667
36629: LD_INT 33
36631: DOUBLE
36632: EQUAL
36633: IFTRUE 36667
36635: LD_INT 27
36637: DOUBLE
36638: EQUAL
36639: IFTRUE 36667
36641: LD_INT 26
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36667
36647: LD_INT 28
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36667
36653: LD_INT 29
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36667
36659: LD_INT 30
36661: DOUBLE
36662: EQUAL
36663: IFTRUE 36667
36665: GO 36723
36667: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36668: LD_ADDR_VAR 0 9
36672: PUSH
36673: LD_VAR 0 59
36677: PUSH
36678: LD_VAR 0 60
36682: PUSH
36683: LD_VAR 0 61
36687: PUSH
36688: LD_VAR 0 62
36692: PUSH
36693: LD_VAR 0 63
36697: PUSH
36698: LD_VAR 0 64
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: PUSH
36711: LD_VAR 0 4
36715: PUSH
36716: LD_INT 1
36718: PLUS
36719: ARRAY
36720: ST_TO_ADDR
36721: GO 36724
36723: POP
// temp_list2 = [ ] ;
36724: LD_ADDR_VAR 0 10
36728: PUSH
36729: EMPTY
36730: ST_TO_ADDR
// for i in temp_list do
36731: LD_ADDR_VAR 0 8
36735: PUSH
36736: LD_VAR 0 9
36740: PUSH
36741: FOR_IN
36742: IFFALSE 36794
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36744: LD_ADDR_VAR 0 10
36748: PUSH
36749: LD_VAR 0 10
36753: PUSH
36754: LD_VAR 0 8
36758: PUSH
36759: LD_INT 1
36761: ARRAY
36762: PUSH
36763: LD_VAR 0 2
36767: PLUS
36768: PUSH
36769: LD_VAR 0 8
36773: PUSH
36774: LD_INT 2
36776: ARRAY
36777: PUSH
36778: LD_VAR 0 3
36782: PLUS
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: EMPTY
36789: LIST
36790: ADD
36791: ST_TO_ADDR
36792: GO 36741
36794: POP
36795: POP
// result = temp_list2 ;
36796: LD_ADDR_VAR 0 7
36800: PUSH
36801: LD_VAR 0 10
36805: ST_TO_ADDR
// end ;
36806: LD_VAR 0 7
36810: RET
// export function EnemyInRange ( unit , dist ) ; begin
36811: LD_INT 0
36813: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36814: LD_ADDR_VAR 0 3
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 255
36828: PPUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: CALL_OW 250
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 251
36848: PPUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: CALL 10068 0 4
36858: PUSH
36859: LD_INT 4
36861: ARRAY
36862: ST_TO_ADDR
// end ;
36863: LD_VAR 0 3
36867: RET
// export function PlayerSeeMe ( unit ) ; begin
36868: LD_INT 0
36870: PPUSH
// result := See ( your_side , unit ) ;
36871: LD_ADDR_VAR 0 2
36875: PUSH
36876: LD_OWVAR 2
36880: PPUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: CALL_OW 292
36890: ST_TO_ADDR
// end ;
36891: LD_VAR 0 2
36895: RET
// export function ReverseDir ( unit ) ; begin
36896: LD_INT 0
36898: PPUSH
// if not unit then
36899: LD_VAR 0 1
36903: NOT
36904: IFFALSE 36908
// exit ;
36906: GO 36931
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36908: LD_ADDR_VAR 0 2
36912: PUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 254
36922: PUSH
36923: LD_INT 3
36925: PLUS
36926: PUSH
36927: LD_INT 6
36929: MOD
36930: ST_TO_ADDR
// end ;
36931: LD_VAR 0 2
36935: RET
// export function ReverseArray ( array ) ; var i ; begin
36936: LD_INT 0
36938: PPUSH
36939: PPUSH
// if not array then
36940: LD_VAR 0 1
36944: NOT
36945: IFFALSE 36949
// exit ;
36947: GO 37004
// result := [ ] ;
36949: LD_ADDR_VAR 0 2
36953: PUSH
36954: EMPTY
36955: ST_TO_ADDR
// for i := array downto 1 do
36956: LD_ADDR_VAR 0 3
36960: PUSH
36961: DOUBLE
36962: LD_VAR 0 1
36966: INC
36967: ST_TO_ADDR
36968: LD_INT 1
36970: PUSH
36971: FOR_DOWNTO
36972: IFFALSE 37002
// result := Join ( result , array [ i ] ) ;
36974: LD_ADDR_VAR 0 2
36978: PUSH
36979: LD_VAR 0 2
36983: PPUSH
36984: LD_VAR 0 1
36988: PUSH
36989: LD_VAR 0 3
36993: ARRAY
36994: PPUSH
36995: CALL 41856 0 2
36999: ST_TO_ADDR
37000: GO 36971
37002: POP
37003: POP
// end ;
37004: LD_VAR 0 2
37008: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37009: LD_INT 0
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
37015: PPUSH
37016: PPUSH
// if not unit or not hexes then
37017: LD_VAR 0 1
37021: NOT
37022: IFTRUE 37031
37024: PUSH
37025: LD_VAR 0 2
37029: NOT
37030: OR
37031: IFFALSE 37035
// exit ;
37033: GO 37158
// dist := 9999 ;
37035: LD_ADDR_VAR 0 5
37039: PUSH
37040: LD_INT 9999
37042: ST_TO_ADDR
// for i = 1 to hexes do
37043: LD_ADDR_VAR 0 4
37047: PUSH
37048: DOUBLE
37049: LD_INT 1
37051: DEC
37052: ST_TO_ADDR
37053: LD_VAR 0 2
37057: PUSH
37058: FOR_TO
37059: IFFALSE 37146
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37061: LD_ADDR_VAR 0 6
37065: PUSH
37066: LD_VAR 0 1
37070: PPUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_VAR 0 4
37080: ARRAY
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: PPUSH
37086: LD_VAR 0 2
37090: PUSH
37091: LD_VAR 0 4
37095: ARRAY
37096: PUSH
37097: LD_INT 2
37099: ARRAY
37100: PPUSH
37101: CALL_OW 297
37105: ST_TO_ADDR
// if tdist < dist then
37106: LD_VAR 0 6
37110: PUSH
37111: LD_VAR 0 5
37115: LESS
37116: IFFALSE 37144
// begin hex := hexes [ i ] ;
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: LD_VAR 0 2
37127: PUSH
37128: LD_VAR 0 4
37132: ARRAY
37133: ST_TO_ADDR
// dist := tdist ;
37134: LD_ADDR_VAR 0 5
37138: PUSH
37139: LD_VAR 0 6
37143: ST_TO_ADDR
// end ; end ;
37144: GO 37058
37146: POP
37147: POP
// result := hex ;
37148: LD_ADDR_VAR 0 3
37152: PUSH
37153: LD_VAR 0 8
37157: ST_TO_ADDR
// end ;
37158: LD_VAR 0 3
37162: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37163: LD_INT 0
37165: PPUSH
37166: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37167: LD_VAR 0 1
37171: NOT
37172: IFTRUE 37211
37174: PUSH
37175: LD_VAR 0 1
37179: PUSH
37180: LD_INT 21
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 23
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PPUSH
37204: CALL_OW 69
37208: IN
37209: NOT
37210: OR
37211: IFFALSE 37215
// exit ;
37213: GO 37262
// for i = 1 to 3 do
37215: LD_ADDR_VAR 0 3
37219: PUSH
37220: DOUBLE
37221: LD_INT 1
37223: DEC
37224: ST_TO_ADDR
37225: LD_INT 3
37227: PUSH
37228: FOR_TO
37229: IFFALSE 37260
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 250
37240: PPUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 251
37250: PPUSH
37251: LD_INT 1
37253: PPUSH
37254: CALL_OW 453
37258: GO 37228
37260: POP
37261: POP
// end ;
37262: LD_VAR 0 2
37266: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37267: LD_INT 0
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
// if not unit or not enemy_unit then
37275: LD_VAR 0 1
37279: NOT
37280: IFTRUE 37289
37282: PUSH
37283: LD_VAR 0 2
37287: NOT
37288: OR
37289: IFFALSE 37293
// exit ;
37291: GO 37774
// if GetLives ( i ) < 250 then
37293: LD_VAR 0 4
37297: PPUSH
37298: CALL_OW 256
37302: PUSH
37303: LD_INT 250
37305: LESS
37306: IFFALSE 37319
// begin ComAutodestruct ( i ) ;
37308: LD_VAR 0 4
37312: PPUSH
37313: CALL 37163 0 1
// exit ;
37317: GO 37774
// end ; x := GetX ( enemy_unit ) ;
37319: LD_ADDR_VAR 0 7
37323: PUSH
37324: LD_VAR 0 2
37328: PPUSH
37329: CALL_OW 250
37333: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37334: LD_ADDR_VAR 0 8
37338: PUSH
37339: LD_VAR 0 2
37343: PPUSH
37344: CALL_OW 251
37348: ST_TO_ADDR
// if not x or not y then
37349: LD_VAR 0 7
37353: NOT
37354: IFTRUE 37363
37356: PUSH
37357: LD_VAR 0 8
37361: NOT
37362: OR
37363: IFFALSE 37367
// exit ;
37365: GO 37774
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37367: LD_ADDR_VAR 0 6
37371: PUSH
37372: LD_VAR 0 7
37376: PPUSH
37377: LD_INT 0
37379: PPUSH
37380: LD_INT 4
37382: PPUSH
37383: CALL_OW 272
37387: PUSH
37388: LD_VAR 0 8
37392: PPUSH
37393: LD_INT 0
37395: PPUSH
37396: LD_INT 4
37398: PPUSH
37399: CALL_OW 273
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_VAR 0 7
37412: PPUSH
37413: LD_INT 1
37415: PPUSH
37416: LD_INT 4
37418: PPUSH
37419: CALL_OW 272
37423: PUSH
37424: LD_VAR 0 8
37428: PPUSH
37429: LD_INT 1
37431: PPUSH
37432: LD_INT 4
37434: PPUSH
37435: CALL_OW 273
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_VAR 0 7
37448: PPUSH
37449: LD_INT 2
37451: PPUSH
37452: LD_INT 4
37454: PPUSH
37455: CALL_OW 272
37459: PUSH
37460: LD_VAR 0 8
37464: PPUSH
37465: LD_INT 2
37467: PPUSH
37468: LD_INT 4
37470: PPUSH
37471: CALL_OW 273
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_VAR 0 7
37484: PPUSH
37485: LD_INT 3
37487: PPUSH
37488: LD_INT 4
37490: PPUSH
37491: CALL_OW 272
37495: PUSH
37496: LD_VAR 0 8
37500: PPUSH
37501: LD_INT 3
37503: PPUSH
37504: LD_INT 4
37506: PPUSH
37507: CALL_OW 273
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_VAR 0 7
37520: PPUSH
37521: LD_INT 4
37523: PPUSH
37524: LD_INT 4
37526: PPUSH
37527: CALL_OW 272
37531: PUSH
37532: LD_VAR 0 8
37536: PPUSH
37537: LD_INT 4
37539: PPUSH
37540: LD_INT 4
37542: PPUSH
37543: CALL_OW 273
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_VAR 0 7
37556: PPUSH
37557: LD_INT 5
37559: PPUSH
37560: LD_INT 4
37562: PPUSH
37563: CALL_OW 272
37567: PUSH
37568: LD_VAR 0 8
37572: PPUSH
37573: LD_INT 5
37575: PPUSH
37576: LD_INT 4
37578: PPUSH
37579: CALL_OW 273
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
// for i = tmp downto 1 do
37596: LD_ADDR_VAR 0 4
37600: PUSH
37601: DOUBLE
37602: LD_VAR 0 6
37606: INC
37607: ST_TO_ADDR
37608: LD_INT 1
37610: PUSH
37611: FOR_DOWNTO
37612: IFFALSE 37715
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37614: LD_VAR 0 6
37618: PUSH
37619: LD_VAR 0 4
37623: ARRAY
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: PPUSH
37629: LD_VAR 0 6
37633: PUSH
37634: LD_VAR 0 4
37638: ARRAY
37639: PUSH
37640: LD_INT 2
37642: ARRAY
37643: PPUSH
37644: CALL_OW 488
37648: NOT
37649: IFTRUE 37691
37651: PUSH
37652: LD_VAR 0 6
37656: PUSH
37657: LD_VAR 0 4
37661: ARRAY
37662: PUSH
37663: LD_INT 1
37665: ARRAY
37666: PPUSH
37667: LD_VAR 0 6
37671: PUSH
37672: LD_VAR 0 4
37676: ARRAY
37677: PUSH
37678: LD_INT 2
37680: ARRAY
37681: PPUSH
37682: CALL_OW 428
37686: PUSH
37687: LD_INT 0
37689: NONEQUAL
37690: OR
37691: IFFALSE 37713
// tmp := Delete ( tmp , i ) ;
37693: LD_ADDR_VAR 0 6
37697: PUSH
37698: LD_VAR 0 6
37702: PPUSH
37703: LD_VAR 0 4
37707: PPUSH
37708: CALL_OW 3
37712: ST_TO_ADDR
37713: GO 37611
37715: POP
37716: POP
// j := GetClosestHex ( unit , tmp ) ;
37717: LD_ADDR_VAR 0 5
37721: PUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: LD_VAR 0 6
37731: PPUSH
37732: CALL 37009 0 2
37736: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37737: LD_VAR 0 1
37741: PPUSH
37742: LD_VAR 0 5
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PPUSH
37751: LD_VAR 0 5
37755: PUSH
37756: LD_INT 2
37758: ARRAY
37759: PPUSH
37760: CALL_OW 111
// result := j ;
37764: LD_ADDR_VAR 0 3
37768: PUSH
37769: LD_VAR 0 5
37773: ST_TO_ADDR
// end ;
37774: LD_VAR 0 3
37778: RET
// export function PrepareApemanSoldier ( ) ; begin
37779: LD_INT 0
37781: PPUSH
// uc_nation := 0 ;
37782: LD_ADDR_OWVAR 21
37786: PUSH
37787: LD_INT 0
37789: ST_TO_ADDR
// hc_sex := sex_male ;
37790: LD_ADDR_OWVAR 27
37794: PUSH
37795: LD_INT 1
37797: ST_TO_ADDR
// hc_name :=  ;
37798: LD_ADDR_OWVAR 26
37802: PUSH
37803: LD_STRING 
37805: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37806: LD_ADDR_OWVAR 28
37810: PUSH
37811: LD_INT 15
37813: ST_TO_ADDR
// hc_gallery :=  ;
37814: LD_ADDR_OWVAR 33
37818: PUSH
37819: LD_STRING 
37821: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37822: LD_ADDR_OWVAR 31
37826: PUSH
37827: LD_INT 0
37829: PPUSH
37830: LD_INT 3
37832: PPUSH
37833: CALL_OW 12
37837: PUSH
37838: LD_INT 0
37840: PPUSH
37841: LD_INT 3
37843: PPUSH
37844: CALL_OW 12
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37861: LD_ADDR_OWVAR 29
37865: PUSH
37866: LD_INT 10
37868: PUSH
37869: LD_INT 12
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// end ;
37876: LD_VAR 0 1
37880: RET
// export function PrepareApemanEngineer ( ) ; begin
37881: LD_INT 0
37883: PPUSH
// uc_nation := 0 ;
37884: LD_ADDR_OWVAR 21
37888: PUSH
37889: LD_INT 0
37891: ST_TO_ADDR
// hc_sex := sex_male ;
37892: LD_ADDR_OWVAR 27
37896: PUSH
37897: LD_INT 1
37899: ST_TO_ADDR
// hc_name :=  ;
37900: LD_ADDR_OWVAR 26
37904: PUSH
37905: LD_STRING 
37907: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37908: LD_ADDR_OWVAR 28
37912: PUSH
37913: LD_INT 16
37915: ST_TO_ADDR
// hc_gallery :=  ;
37916: LD_ADDR_OWVAR 33
37920: PUSH
37921: LD_STRING 
37923: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37924: LD_ADDR_OWVAR 31
37928: PUSH
37929: LD_INT 0
37931: PPUSH
37932: LD_INT 3
37934: PPUSH
37935: CALL_OW 12
37939: PUSH
37940: LD_INT 0
37942: PPUSH
37943: LD_INT 3
37945: PPUSH
37946: CALL_OW 12
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37963: LD_ADDR_OWVAR 29
37967: PUSH
37968: LD_INT 10
37970: PUSH
37971: LD_INT 12
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: ST_TO_ADDR
// end ;
37978: LD_VAR 0 1
37982: RET
// export function PrepareApeman ( agressivity ) ; begin
37983: LD_INT 0
37985: PPUSH
// uc_side := 0 ;
37986: LD_ADDR_OWVAR 20
37990: PUSH
37991: LD_INT 0
37993: ST_TO_ADDR
// uc_nation := 0 ;
37994: LD_ADDR_OWVAR 21
37998: PUSH
37999: LD_INT 0
38001: ST_TO_ADDR
// hc_sex := sex_male ;
38002: LD_ADDR_OWVAR 27
38006: PUSH
38007: LD_INT 1
38009: ST_TO_ADDR
// hc_class := class_apeman ;
38010: LD_ADDR_OWVAR 28
38014: PUSH
38015: LD_INT 12
38017: ST_TO_ADDR
// hc_gallery :=  ;
38018: LD_ADDR_OWVAR 33
38022: PUSH
38023: LD_STRING 
38025: ST_TO_ADDR
// hc_name :=  ;
38026: LD_ADDR_OWVAR 26
38030: PUSH
38031: LD_STRING 
38033: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
38034: LD_ADDR_OWVAR 29
38038: PUSH
38039: LD_INT 10
38041: PUSH
38042: LD_INT 12
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// if agressivity = 0 then
38049: LD_VAR 0 1
38053: PUSH
38054: LD_INT 0
38056: EQUAL
38057: IFFALSE 38069
// hc_agressivity := 0 else
38059: LD_ADDR_OWVAR 35
38063: PUSH
38064: LD_INT 0
38066: ST_TO_ADDR
38067: GO 38090
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38069: LD_ADDR_OWVAR 35
38073: PUSH
38074: LD_VAR 0 1
38078: NEG
38079: PPUSH
38080: LD_VAR 0 1
38084: PPUSH
38085: CALL_OW 12
38089: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38090: LD_ADDR_OWVAR 31
38094: PUSH
38095: LD_INT 0
38097: PPUSH
38098: LD_INT 3
38100: PPUSH
38101: CALL_OW 12
38105: PUSH
38106: LD_INT 0
38108: PPUSH
38109: LD_INT 3
38111: PPUSH
38112: CALL_OW 12
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// end ;
38129: LD_VAR 0 2
38133: RET
// export function PrepareTiger ( agressivity ) ; begin
38134: LD_INT 0
38136: PPUSH
// uc_side := 0 ;
38137: LD_ADDR_OWVAR 20
38141: PUSH
38142: LD_INT 0
38144: ST_TO_ADDR
// uc_nation := 0 ;
38145: LD_ADDR_OWVAR 21
38149: PUSH
38150: LD_INT 0
38152: ST_TO_ADDR
// InitHc ;
38153: CALL_OW 19
// hc_class := class_tiger ;
38157: LD_ADDR_OWVAR 28
38161: PUSH
38162: LD_INT 14
38164: ST_TO_ADDR
// hc_gallery :=  ;
38165: LD_ADDR_OWVAR 33
38169: PUSH
38170: LD_STRING 
38172: ST_TO_ADDR
// hc_name :=  ;
38173: LD_ADDR_OWVAR 26
38177: PUSH
38178: LD_STRING 
38180: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38181: LD_ADDR_OWVAR 35
38185: PUSH
38186: LD_VAR 0 1
38190: NEG
38191: PPUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 12
38201: ST_TO_ADDR
// end ;
38202: LD_VAR 0 2
38206: RET
// export function PrepareEnchidna ( ) ; begin
38207: LD_INT 0
38209: PPUSH
// uc_side := 0 ;
38210: LD_ADDR_OWVAR 20
38214: PUSH
38215: LD_INT 0
38217: ST_TO_ADDR
// uc_nation := 0 ;
38218: LD_ADDR_OWVAR 21
38222: PUSH
38223: LD_INT 0
38225: ST_TO_ADDR
// InitHc ;
38226: CALL_OW 19
// hc_class := class_baggie ;
38230: LD_ADDR_OWVAR 28
38234: PUSH
38235: LD_INT 13
38237: ST_TO_ADDR
// hc_gallery :=  ;
38238: LD_ADDR_OWVAR 33
38242: PUSH
38243: LD_STRING 
38245: ST_TO_ADDR
// hc_name :=  ;
38246: LD_ADDR_OWVAR 26
38250: PUSH
38251: LD_STRING 
38253: ST_TO_ADDR
// end ;
38254: LD_VAR 0 1
38258: RET
// export function PrepareFrog ( ) ; begin
38259: LD_INT 0
38261: PPUSH
// uc_side := 0 ;
38262: LD_ADDR_OWVAR 20
38266: PUSH
38267: LD_INT 0
38269: ST_TO_ADDR
// uc_nation := 0 ;
38270: LD_ADDR_OWVAR 21
38274: PUSH
38275: LD_INT 0
38277: ST_TO_ADDR
// InitHc ;
38278: CALL_OW 19
// hc_class := class_frog ;
38282: LD_ADDR_OWVAR 28
38286: PUSH
38287: LD_INT 19
38289: ST_TO_ADDR
// hc_gallery :=  ;
38290: LD_ADDR_OWVAR 33
38294: PUSH
38295: LD_STRING 
38297: ST_TO_ADDR
// hc_name :=  ;
38298: LD_ADDR_OWVAR 26
38302: PUSH
38303: LD_STRING 
38305: ST_TO_ADDR
// end ;
38306: LD_VAR 0 1
38310: RET
// export function PrepareFish ( ) ; begin
38311: LD_INT 0
38313: PPUSH
// uc_side := 0 ;
38314: LD_ADDR_OWVAR 20
38318: PUSH
38319: LD_INT 0
38321: ST_TO_ADDR
// uc_nation := 0 ;
38322: LD_ADDR_OWVAR 21
38326: PUSH
38327: LD_INT 0
38329: ST_TO_ADDR
// InitHc ;
38330: CALL_OW 19
// hc_class := class_fish ;
38334: LD_ADDR_OWVAR 28
38338: PUSH
38339: LD_INT 20
38341: ST_TO_ADDR
// hc_gallery :=  ;
38342: LD_ADDR_OWVAR 33
38346: PUSH
38347: LD_STRING 
38349: ST_TO_ADDR
// hc_name :=  ;
38350: LD_ADDR_OWVAR 26
38354: PUSH
38355: LD_STRING 
38357: ST_TO_ADDR
// end ;
38358: LD_VAR 0 1
38362: RET
// export function PrepareBird ( ) ; begin
38363: LD_INT 0
38365: PPUSH
// uc_side := 0 ;
38366: LD_ADDR_OWVAR 20
38370: PUSH
38371: LD_INT 0
38373: ST_TO_ADDR
// uc_nation := 0 ;
38374: LD_ADDR_OWVAR 21
38378: PUSH
38379: LD_INT 0
38381: ST_TO_ADDR
// InitHc ;
38382: CALL_OW 19
// hc_class := class_phororhacos ;
38386: LD_ADDR_OWVAR 28
38390: PUSH
38391: LD_INT 18
38393: ST_TO_ADDR
// hc_gallery :=  ;
38394: LD_ADDR_OWVAR 33
38398: PUSH
38399: LD_STRING 
38401: ST_TO_ADDR
// hc_name :=  ;
38402: LD_ADDR_OWVAR 26
38406: PUSH
38407: LD_STRING 
38409: ST_TO_ADDR
// end ;
38410: LD_VAR 0 1
38414: RET
// export function PrepareHorse ( ) ; begin
38415: LD_INT 0
38417: PPUSH
// uc_side := 0 ;
38418: LD_ADDR_OWVAR 20
38422: PUSH
38423: LD_INT 0
38425: ST_TO_ADDR
// uc_nation := 0 ;
38426: LD_ADDR_OWVAR 21
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// InitHc ;
38434: CALL_OW 19
// hc_class := class_horse ;
38438: LD_ADDR_OWVAR 28
38442: PUSH
38443: LD_INT 21
38445: ST_TO_ADDR
// hc_gallery :=  ;
38446: LD_ADDR_OWVAR 33
38450: PUSH
38451: LD_STRING 
38453: ST_TO_ADDR
// hc_name :=  ;
38454: LD_ADDR_OWVAR 26
38458: PUSH
38459: LD_STRING 
38461: ST_TO_ADDR
// end ;
38462: LD_VAR 0 1
38466: RET
// export function PrepareMastodont ( ) ; begin
38467: LD_INT 0
38469: PPUSH
// uc_side := 0 ;
38470: LD_ADDR_OWVAR 20
38474: PUSH
38475: LD_INT 0
38477: ST_TO_ADDR
// uc_nation := 0 ;
38478: LD_ADDR_OWVAR 21
38482: PUSH
38483: LD_INT 0
38485: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38486: LD_ADDR_OWVAR 37
38490: PUSH
38491: LD_INT 31
38493: ST_TO_ADDR
// vc_control := control_rider ;
38494: LD_ADDR_OWVAR 38
38498: PUSH
38499: LD_INT 4
38501: ST_TO_ADDR
// end ;
38502: LD_VAR 0 1
38506: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38507: LD_INT 0
38509: PPUSH
38510: PPUSH
38511: PPUSH
// uc_side = 0 ;
38512: LD_ADDR_OWVAR 20
38516: PUSH
38517: LD_INT 0
38519: ST_TO_ADDR
// uc_nation = 0 ;
38520: LD_ADDR_OWVAR 21
38524: PUSH
38525: LD_INT 0
38527: ST_TO_ADDR
// InitHc_All ( ) ;
38528: CALL_OW 584
// InitVc ;
38532: CALL_OW 20
// if mastodonts then
38536: LD_VAR 0 6
38540: IFFALSE 38607
// for i = 1 to mastodonts do
38542: LD_ADDR_VAR 0 11
38546: PUSH
38547: DOUBLE
38548: LD_INT 1
38550: DEC
38551: ST_TO_ADDR
38552: LD_VAR 0 6
38556: PUSH
38557: FOR_TO
38558: IFFALSE 38605
// begin vc_chassis := 31 ;
38560: LD_ADDR_OWVAR 37
38564: PUSH
38565: LD_INT 31
38567: ST_TO_ADDR
// vc_control := control_rider ;
38568: LD_ADDR_OWVAR 38
38572: PUSH
38573: LD_INT 4
38575: ST_TO_ADDR
// animal := CreateVehicle ;
38576: LD_ADDR_VAR 0 12
38580: PUSH
38581: CALL_OW 45
38585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38586: LD_VAR 0 12
38590: PPUSH
38591: LD_VAR 0 8
38595: PPUSH
38596: LD_INT 0
38598: PPUSH
38599: CALL 40749 0 3
// end ;
38603: GO 38557
38605: POP
38606: POP
// if horses then
38607: LD_VAR 0 5
38611: IFFALSE 38678
// for i = 1 to horses do
38613: LD_ADDR_VAR 0 11
38617: PUSH
38618: DOUBLE
38619: LD_INT 1
38621: DEC
38622: ST_TO_ADDR
38623: LD_VAR 0 5
38627: PUSH
38628: FOR_TO
38629: IFFALSE 38676
// begin hc_class := 21 ;
38631: LD_ADDR_OWVAR 28
38635: PUSH
38636: LD_INT 21
38638: ST_TO_ADDR
// hc_gallery :=  ;
38639: LD_ADDR_OWVAR 33
38643: PUSH
38644: LD_STRING 
38646: ST_TO_ADDR
// animal := CreateHuman ;
38647: LD_ADDR_VAR 0 12
38651: PUSH
38652: CALL_OW 44
38656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38657: LD_VAR 0 12
38661: PPUSH
38662: LD_VAR 0 8
38666: PPUSH
38667: LD_INT 0
38669: PPUSH
38670: CALL 40749 0 3
// end ;
38674: GO 38628
38676: POP
38677: POP
// if birds then
38678: LD_VAR 0 1
38682: IFFALSE 38749
// for i = 1 to birds do
38684: LD_ADDR_VAR 0 11
38688: PUSH
38689: DOUBLE
38690: LD_INT 1
38692: DEC
38693: ST_TO_ADDR
38694: LD_VAR 0 1
38698: PUSH
38699: FOR_TO
38700: IFFALSE 38747
// begin hc_class := 18 ;
38702: LD_ADDR_OWVAR 28
38706: PUSH
38707: LD_INT 18
38709: ST_TO_ADDR
// hc_gallery =  ;
38710: LD_ADDR_OWVAR 33
38714: PUSH
38715: LD_STRING 
38717: ST_TO_ADDR
// animal := CreateHuman ;
38718: LD_ADDR_VAR 0 12
38722: PUSH
38723: CALL_OW 44
38727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38728: LD_VAR 0 12
38732: PPUSH
38733: LD_VAR 0 8
38737: PPUSH
38738: LD_INT 0
38740: PPUSH
38741: CALL 40749 0 3
// end ;
38745: GO 38699
38747: POP
38748: POP
// if tigers then
38749: LD_VAR 0 2
38753: IFFALSE 38837
// for i = 1 to tigers do
38755: LD_ADDR_VAR 0 11
38759: PUSH
38760: DOUBLE
38761: LD_INT 1
38763: DEC
38764: ST_TO_ADDR
38765: LD_VAR 0 2
38769: PUSH
38770: FOR_TO
38771: IFFALSE 38835
// begin hc_class = class_tiger ;
38773: LD_ADDR_OWVAR 28
38777: PUSH
38778: LD_INT 14
38780: ST_TO_ADDR
// hc_gallery =  ;
38781: LD_ADDR_OWVAR 33
38785: PUSH
38786: LD_STRING 
38788: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38789: LD_ADDR_OWVAR 35
38793: PUSH
38794: LD_INT 7
38796: NEG
38797: PPUSH
38798: LD_INT 7
38800: PPUSH
38801: CALL_OW 12
38805: ST_TO_ADDR
// animal := CreateHuman ;
38806: LD_ADDR_VAR 0 12
38810: PUSH
38811: CALL_OW 44
38815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38816: LD_VAR 0 12
38820: PPUSH
38821: LD_VAR 0 8
38825: PPUSH
38826: LD_INT 0
38828: PPUSH
38829: CALL 40749 0 3
// end ;
38833: GO 38770
38835: POP
38836: POP
// if apemans then
38837: LD_VAR 0 3
38841: IFFALSE 38964
// for i = 1 to apemans do
38843: LD_ADDR_VAR 0 11
38847: PUSH
38848: DOUBLE
38849: LD_INT 1
38851: DEC
38852: ST_TO_ADDR
38853: LD_VAR 0 3
38857: PUSH
38858: FOR_TO
38859: IFFALSE 38962
// begin hc_class = class_apeman ;
38861: LD_ADDR_OWVAR 28
38865: PUSH
38866: LD_INT 12
38868: ST_TO_ADDR
// hc_gallery =  ;
38869: LD_ADDR_OWVAR 33
38873: PUSH
38874: LD_STRING 
38876: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38877: LD_ADDR_OWVAR 35
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PPUSH
38886: LD_INT 2
38888: PPUSH
38889: CALL_OW 12
38893: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38894: LD_ADDR_OWVAR 31
38898: PUSH
38899: LD_INT 1
38901: PPUSH
38902: LD_INT 3
38904: PPUSH
38905: CALL_OW 12
38909: PUSH
38910: LD_INT 1
38912: PPUSH
38913: LD_INT 3
38915: PPUSH
38916: CALL_OW 12
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: ST_TO_ADDR
// animal := CreateHuman ;
38933: LD_ADDR_VAR 0 12
38937: PUSH
38938: CALL_OW 44
38942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38943: LD_VAR 0 12
38947: PPUSH
38948: LD_VAR 0 8
38952: PPUSH
38953: LD_INT 0
38955: PPUSH
38956: CALL 40749 0 3
// end ;
38960: GO 38858
38962: POP
38963: POP
// if enchidnas then
38964: LD_VAR 0 4
38968: IFFALSE 39035
// for i = 1 to enchidnas do
38970: LD_ADDR_VAR 0 11
38974: PUSH
38975: DOUBLE
38976: LD_INT 1
38978: DEC
38979: ST_TO_ADDR
38980: LD_VAR 0 4
38984: PUSH
38985: FOR_TO
38986: IFFALSE 39033
// begin hc_class = 13 ;
38988: LD_ADDR_OWVAR 28
38992: PUSH
38993: LD_INT 13
38995: ST_TO_ADDR
// hc_gallery =  ;
38996: LD_ADDR_OWVAR 33
39000: PUSH
39001: LD_STRING 
39003: ST_TO_ADDR
// animal := CreateHuman ;
39004: LD_ADDR_VAR 0 12
39008: PUSH
39009: CALL_OW 44
39013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39014: LD_VAR 0 12
39018: PPUSH
39019: LD_VAR 0 8
39023: PPUSH
39024: LD_INT 0
39026: PPUSH
39027: CALL 40749 0 3
// end ;
39031: GO 38985
39033: POP
39034: POP
// if fishes then
39035: LD_VAR 0 7
39039: IFFALSE 39106
// for i = 1 to fishes do
39041: LD_ADDR_VAR 0 11
39045: PUSH
39046: DOUBLE
39047: LD_INT 1
39049: DEC
39050: ST_TO_ADDR
39051: LD_VAR 0 7
39055: PUSH
39056: FOR_TO
39057: IFFALSE 39104
// begin hc_class = 20 ;
39059: LD_ADDR_OWVAR 28
39063: PUSH
39064: LD_INT 20
39066: ST_TO_ADDR
// hc_gallery =  ;
39067: LD_ADDR_OWVAR 33
39071: PUSH
39072: LD_STRING 
39074: ST_TO_ADDR
// animal := CreateHuman ;
39075: LD_ADDR_VAR 0 12
39079: PUSH
39080: CALL_OW 44
39084: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39085: LD_VAR 0 12
39089: PPUSH
39090: LD_VAR 0 9
39094: PPUSH
39095: LD_INT 0
39097: PPUSH
39098: CALL 40749 0 3
// end ;
39102: GO 39056
39104: POP
39105: POP
// end ;
39106: LD_VAR 0 10
39110: RET
// export function WantHeal ( sci , unit ) ; begin
39111: LD_INT 0
39113: PPUSH
// if GetTaskList ( sci ) > 0 then
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 437
39123: PUSH
39124: LD_INT 0
39126: GREATER
39127: IFFALSE 39199
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 437
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PUSH
39143: LD_INT 1
39145: ARRAY
39146: PUSH
39147: LD_STRING l
39149: EQUAL
39150: IFFALSE 39177
39152: PUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 437
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: PUSH
39167: LD_INT 4
39169: ARRAY
39170: PUSH
39171: LD_VAR 0 2
39175: EQUAL
39176: AND
39177: IFFALSE 39189
// result := true else
39179: LD_ADDR_VAR 0 3
39183: PUSH
39184: LD_INT 1
39186: ST_TO_ADDR
39187: GO 39197
// result := false ;
39189: LD_ADDR_VAR 0 3
39193: PUSH
39194: LD_INT 0
39196: ST_TO_ADDR
// end else
39197: GO 39207
// result := false ;
39199: LD_ADDR_VAR 0 3
39203: PUSH
39204: LD_INT 0
39206: ST_TO_ADDR
// end ;
39207: LD_VAR 0 3
39211: RET
// export function HealTarget ( sci ) ; begin
39212: LD_INT 0
39214: PPUSH
// if not sci then
39215: LD_VAR 0 1
39219: NOT
39220: IFFALSE 39224
// exit ;
39222: GO 39289
// result := 0 ;
39224: LD_ADDR_VAR 0 2
39228: PUSH
39229: LD_INT 0
39231: ST_TO_ADDR
// if GetTaskList ( sci ) then
39232: LD_VAR 0 1
39236: PPUSH
39237: CALL_OW 437
39241: IFFALSE 39289
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL_OW 437
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: PUSH
39257: LD_INT 1
39259: ARRAY
39260: PUSH
39261: LD_STRING l
39263: EQUAL
39264: IFFALSE 39289
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39266: LD_ADDR_VAR 0 2
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL_OW 437
39280: PUSH
39281: LD_INT 1
39283: ARRAY
39284: PUSH
39285: LD_INT 4
39287: ARRAY
39288: ST_TO_ADDR
// end ;
39289: LD_VAR 0 2
39293: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39294: LD_INT 0
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
// if not base_units then
39300: LD_VAR 0 1
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 39396
// result := false ;
39309: LD_ADDR_VAR 0 2
39313: PUSH
39314: LD_INT 0
39316: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39317: LD_ADDR_VAR 0 5
39321: PUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: LD_INT 21
39329: PUSH
39330: LD_INT 3
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PPUSH
39337: CALL_OW 72
39341: ST_TO_ADDR
// if not tmp then
39342: LD_VAR 0 5
39346: NOT
39347: IFFALSE 39351
// exit ;
39349: GO 39396
// for i in tmp do
39351: LD_ADDR_VAR 0 3
39355: PUSH
39356: LD_VAR 0 5
39360: PUSH
39361: FOR_IN
39362: IFFALSE 39394
// begin result := EnemyInRange ( i , 22 ) ;
39364: LD_ADDR_VAR 0 2
39368: PUSH
39369: LD_VAR 0 3
39373: PPUSH
39374: LD_INT 22
39376: PPUSH
39377: CALL 36811 0 2
39381: ST_TO_ADDR
// if result then
39382: LD_VAR 0 2
39386: IFFALSE 39392
// exit ;
39388: POP
39389: POP
39390: GO 39396
// end ;
39392: GO 39361
39394: POP
39395: POP
// end ;
39396: LD_VAR 0 2
39400: RET
// export function FilterByTag ( units , tag ) ; begin
39401: LD_INT 0
39403: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39404: LD_ADDR_VAR 0 3
39408: PUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: LD_INT 120
39416: PUSH
39417: LD_VAR 0 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PPUSH
39426: CALL_OW 72
39430: ST_TO_ADDR
// end ;
39431: LD_VAR 0 3
39435: RET
// export function IsDriver ( un ) ; begin
39436: LD_INT 0
39438: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39439: LD_ADDR_VAR 0 2
39443: PUSH
39444: LD_VAR 0 1
39448: PUSH
39449: LD_INT 55
39451: PUSH
39452: EMPTY
39453: LIST
39454: PPUSH
39455: CALL_OW 69
39459: IN
39460: ST_TO_ADDR
// end ;
39461: LD_VAR 0 2
39465: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
// list := [ ] ;
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: EMPTY
39476: ST_TO_ADDR
// case d of 0 :
39477: LD_VAR 0 3
39481: PUSH
39482: LD_INT 0
39484: DOUBLE
39485: EQUAL
39486: IFTRUE 39490
39488: GO 39623
39490: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: LD_VAR 0 1
39500: PUSH
39501: LD_INT 4
39503: MINUS
39504: PUSH
39505: LD_VAR 0 2
39509: PUSH
39510: LD_INT 4
39512: MINUS
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: PUSH
39522: LD_VAR 0 1
39526: PUSH
39527: LD_INT 3
39529: MINUS
39530: PUSH
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: PUSH
39544: LD_VAR 0 1
39548: PUSH
39549: LD_INT 4
39551: PLUS
39552: PUSH
39553: LD_VAR 0 2
39557: PUSH
39558: LD_INT 4
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: PUSH
39566: LD_VAR 0 1
39570: PUSH
39571: LD_INT 3
39573: PLUS
39574: PUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_INT 3
39582: PLUS
39583: PUSH
39584: LD_INT 5
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: LD_VAR 0 2
39601: PUSH
39602: LD_INT 4
39604: PLUS
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// end ; 1 :
39621: GO 40321
39623: LD_INT 1
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39764
39631: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39632: LD_ADDR_VAR 0 5
39636: PUSH
39637: LD_VAR 0 1
39641: PUSH
39642: LD_VAR 0 2
39646: PUSH
39647: LD_INT 4
39649: MINUS
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: PUSH
39659: LD_VAR 0 1
39663: PUSH
39664: LD_INT 3
39666: MINUS
39667: PUSH
39668: LD_VAR 0 2
39672: PUSH
39673: LD_INT 3
39675: MINUS
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: LD_VAR 0 1
39689: PUSH
39690: LD_INT 4
39692: MINUS
39693: PUSH
39694: LD_VAR 0 2
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: PUSH
39707: LD_VAR 0 1
39711: PUSH
39712: LD_VAR 0 2
39716: PUSH
39717: LD_INT 3
39719: PLUS
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PUSH
39729: LD_VAR 0 1
39733: PUSH
39734: LD_INT 4
39736: PLUS
39737: PUSH
39738: LD_VAR 0 2
39742: PUSH
39743: LD_INT 4
39745: PLUS
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: ST_TO_ADDR
// end ; 2 :
39762: GO 40321
39764: LD_INT 2
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39901
39772: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39773: LD_ADDR_VAR 0 5
39777: PUSH
39778: LD_VAR 0 1
39782: PUSH
39783: LD_VAR 0 2
39787: PUSH
39788: LD_INT 3
39790: MINUS
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: PUSH
39800: LD_VAR 0 1
39804: PUSH
39805: LD_INT 4
39807: PLUS
39808: PUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_INT 4
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: PUSH
39822: LD_VAR 0 1
39826: PUSH
39827: LD_VAR 0 2
39831: PUSH
39832: LD_INT 4
39834: PLUS
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: LD_VAR 0 1
39848: PUSH
39849: LD_INT 3
39851: MINUS
39852: PUSH
39853: LD_VAR 0 2
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: PUSH
39866: LD_VAR 0 1
39870: PUSH
39871: LD_INT 4
39873: MINUS
39874: PUSH
39875: LD_VAR 0 2
39879: PUSH
39880: LD_INT 4
39882: MINUS
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
// end ; 3 :
39899: GO 40321
39901: LD_INT 3
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 40042
39909: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39910: LD_ADDR_VAR 0 5
39914: PUSH
39915: LD_VAR 0 1
39919: PUSH
39920: LD_INT 3
39922: PLUS
39923: PUSH
39924: LD_VAR 0 2
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PUSH
39937: LD_VAR 0 1
39941: PUSH
39942: LD_INT 4
39944: PLUS
39945: PUSH
39946: LD_VAR 0 2
39950: PUSH
39951: LD_INT 4
39953: PLUS
39954: PUSH
39955: LD_INT 5
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: PUSH
39963: LD_VAR 0 1
39967: PUSH
39968: LD_INT 4
39970: MINUS
39971: PUSH
39972: LD_VAR 0 2
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: PUSH
39985: LD_VAR 0 1
39989: PUSH
39990: LD_VAR 0 2
39994: PUSH
39995: LD_INT 4
39997: MINUS
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: LD_VAR 0 1
40011: PUSH
40012: LD_INT 3
40014: MINUS
40015: PUSH
40016: LD_VAR 0 2
40020: PUSH
40021: LD_INT 3
40023: MINUS
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: ST_TO_ADDR
// end ; 4 :
40040: GO 40321
40042: LD_INT 4
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40183
40050: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: LD_VAR 0 1
40060: PUSH
40061: LD_VAR 0 2
40065: PUSH
40066: LD_INT 4
40068: PLUS
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: PUSH
40078: LD_VAR 0 1
40082: PUSH
40083: LD_INT 3
40085: PLUS
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: LD_INT 3
40094: PLUS
40095: PUSH
40096: LD_INT 5
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: PUSH
40104: LD_VAR 0 1
40108: PUSH
40109: LD_INT 4
40111: PLUS
40112: PUSH
40113: LD_VAR 0 2
40117: PUSH
40118: LD_INT 4
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: LD_VAR 0 2
40135: PUSH
40136: LD_INT 3
40138: MINUS
40139: PUSH
40140: LD_INT 3
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: PUSH
40148: LD_VAR 0 1
40152: PUSH
40153: LD_INT 4
40155: MINUS
40156: PUSH
40157: LD_VAR 0 2
40161: PUSH
40162: LD_INT 4
40164: MINUS
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
// end ; 5 :
40181: GO 40321
40183: LD_INT 5
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40320
40191: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: LD_VAR 0 1
40201: PUSH
40202: LD_INT 4
40204: MINUS
40205: PUSH
40206: LD_VAR 0 2
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: PUSH
40219: LD_VAR 0 1
40223: PUSH
40224: LD_VAR 0 2
40228: PUSH
40229: LD_INT 4
40231: MINUS
40232: PUSH
40233: LD_INT 3
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: LD_VAR 0 1
40245: PUSH
40246: LD_INT 4
40248: PLUS
40249: PUSH
40250: LD_VAR 0 2
40254: PUSH
40255: LD_INT 4
40257: PLUS
40258: PUSH
40259: LD_INT 5
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: LD_VAR 0 1
40271: PUSH
40272: LD_INT 3
40274: PLUS
40275: PUSH
40276: LD_VAR 0 2
40280: PUSH
40281: LD_INT 4
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: PUSH
40289: LD_VAR 0 1
40293: PUSH
40294: LD_VAR 0 2
40298: PUSH
40299: LD_INT 3
40301: PLUS
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// end ; end ;
40318: GO 40321
40320: POP
// result := list ;
40321: LD_ADDR_VAR 0 4
40325: PUSH
40326: LD_VAR 0 5
40330: ST_TO_ADDR
// end ;
40331: LD_VAR 0 4
40335: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40336: LD_INT 0
40338: PPUSH
40339: PPUSH
40340: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40341: LD_VAR 0 1
40345: NOT
40346: IFTRUE 40374
40348: PUSH
40349: LD_VAR 0 2
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: LD_INT 4
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: IN
40372: NOT
40373: OR
40374: IFFALSE 40378
// exit ;
40376: GO 40461
// tmp := [ ] ;
40378: LD_ADDR_VAR 0 5
40382: PUSH
40383: EMPTY
40384: ST_TO_ADDR
// for i in units do
40385: LD_ADDR_VAR 0 4
40389: PUSH
40390: LD_VAR 0 1
40394: PUSH
40395: FOR_IN
40396: IFFALSE 40430
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40398: LD_ADDR_VAR 0 5
40402: PUSH
40403: LD_VAR 0 5
40407: PPUSH
40408: LD_VAR 0 4
40412: PPUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: CALL_OW 259
40422: PPUSH
40423: CALL 41856 0 2
40427: ST_TO_ADDR
40428: GO 40395
40430: POP
40431: POP
// if not tmp then
40432: LD_VAR 0 5
40436: NOT
40437: IFFALSE 40441
// exit ;
40439: GO 40461
// result := SortListByListDesc ( units , tmp ) ;
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: LD_VAR 0 5
40455: PPUSH
40456: CALL_OW 77
40460: ST_TO_ADDR
// end ;
40461: LD_VAR 0 3
40465: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40466: LD_INT 0
40468: PPUSH
40469: PPUSH
40470: PPUSH
// result := false ;
40471: LD_ADDR_VAR 0 3
40475: PUSH
40476: LD_INT 0
40478: ST_TO_ADDR
// if not building then
40479: LD_VAR 0 2
40483: NOT
40484: IFFALSE 40488
// exit ;
40486: GO 40632
// x := GetX ( building ) ;
40488: LD_ADDR_VAR 0 4
40492: PUSH
40493: LD_VAR 0 2
40497: PPUSH
40498: CALL_OW 250
40502: ST_TO_ADDR
// y := GetY ( building ) ;
40503: LD_ADDR_VAR 0 5
40507: PUSH
40508: LD_VAR 0 2
40512: PPUSH
40513: CALL_OW 251
40517: ST_TO_ADDR
// if not x or not y then
40518: LD_VAR 0 4
40522: NOT
40523: IFTRUE 40532
40525: PUSH
40526: LD_VAR 0 5
40530: NOT
40531: OR
40532: IFFALSE 40536
// exit ;
40534: GO 40632
// if GetTaskList ( unit ) then
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 437
40545: IFFALSE 40632
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40547: LD_STRING e
40549: PUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 437
40559: PUSH
40560: LD_INT 1
40562: ARRAY
40563: PUSH
40564: LD_INT 1
40566: ARRAY
40567: EQUAL
40568: IFFALSE 40595
40570: PUSH
40571: LD_VAR 0 4
40575: PUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 437
40585: PUSH
40586: LD_INT 1
40588: ARRAY
40589: PUSH
40590: LD_INT 2
40592: ARRAY
40593: EQUAL
40594: AND
40595: IFFALSE 40622
40597: PUSH
40598: LD_VAR 0 5
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 437
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: PUSH
40617: LD_INT 3
40619: ARRAY
40620: EQUAL
40621: AND
40622: IFFALSE 40632
// result := true end ;
40624: LD_ADDR_VAR 0 3
40628: PUSH
40629: LD_INT 1
40631: ST_TO_ADDR
// end ;
40632: LD_VAR 0 3
40636: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40637: LD_INT 0
40639: PPUSH
// result := false ;
40640: LD_ADDR_VAR 0 4
40644: PUSH
40645: LD_INT 0
40647: ST_TO_ADDR
// if GetTaskList ( unit ) then
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 437
40657: IFFALSE 40744
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40659: LD_STRING M
40661: PUSH
40662: LD_VAR 0 1
40666: PPUSH
40667: CALL_OW 437
40671: PUSH
40672: LD_INT 1
40674: ARRAY
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: EQUAL
40680: IFFALSE 40707
40682: PUSH
40683: LD_VAR 0 2
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 437
40697: PUSH
40698: LD_INT 1
40700: ARRAY
40701: PUSH
40702: LD_INT 2
40704: ARRAY
40705: EQUAL
40706: AND
40707: IFFALSE 40734
40709: PUSH
40710: LD_VAR 0 3
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 437
40724: PUSH
40725: LD_INT 1
40727: ARRAY
40728: PUSH
40729: LD_INT 3
40731: ARRAY
40732: EQUAL
40733: AND
40734: IFFALSE 40744
// result := true ;
40736: LD_ADDR_VAR 0 4
40740: PUSH
40741: LD_INT 1
40743: ST_TO_ADDR
// end ; end ;
40744: LD_VAR 0 4
40748: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40749: LD_INT 0
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
// if not unit or not area then
40755: LD_VAR 0 1
40759: NOT
40760: IFTRUE 40769
40762: PUSH
40763: LD_VAR 0 2
40767: NOT
40768: OR
40769: IFFALSE 40773
// exit ;
40771: GO 40949
// tmp := AreaToList ( area , i ) ;
40773: LD_ADDR_VAR 0 6
40777: PUSH
40778: LD_VAR 0 2
40782: PPUSH
40783: LD_VAR 0 5
40787: PPUSH
40788: CALL_OW 517
40792: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40793: LD_ADDR_VAR 0 5
40797: PUSH
40798: DOUBLE
40799: LD_INT 1
40801: DEC
40802: ST_TO_ADDR
40803: LD_VAR 0 6
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: PUSH
40812: FOR_TO
40813: IFFALSE 40947
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40815: LD_ADDR_VAR 0 7
40819: PUSH
40820: LD_VAR 0 6
40824: PUSH
40825: LD_INT 1
40827: ARRAY
40828: PUSH
40829: LD_VAR 0 5
40833: ARRAY
40834: PUSH
40835: LD_VAR 0 6
40839: PUSH
40840: LD_INT 2
40842: ARRAY
40843: PUSH
40844: LD_VAR 0 5
40848: ARRAY
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40854: LD_INT 92
40856: PUSH
40857: LD_VAR 0 7
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PUSH
40866: LD_VAR 0 7
40870: PUSH
40871: LD_INT 2
40873: ARRAY
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: PPUSH
40884: CALL_OW 69
40888: PUSH
40889: LD_INT 0
40891: EQUAL
40892: IFFALSE 40945
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40894: LD_VAR 0 1
40898: PPUSH
40899: LD_VAR 0 7
40903: PUSH
40904: LD_INT 1
40906: ARRAY
40907: PPUSH
40908: LD_VAR 0 7
40912: PUSH
40913: LD_INT 2
40915: ARRAY
40916: PPUSH
40917: LD_VAR 0 3
40921: PPUSH
40922: CALL_OW 48
// result := IsPlaced ( unit ) ;
40926: LD_ADDR_VAR 0 4
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: CALL_OW 305
40940: ST_TO_ADDR
// exit ;
40941: POP
40942: POP
40943: GO 40949
// end ; end ;
40945: GO 40812
40947: POP
40948: POP
// end ;
40949: LD_VAR 0 4
40953: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40954: LD_INT 0
40956: PPUSH
40957: PPUSH
40958: PPUSH
// if not side or side > 8 then
40959: LD_VAR 0 1
40963: NOT
40964: IFTRUE 40976
40966: PUSH
40967: LD_VAR 0 1
40971: PUSH
40972: LD_INT 8
40974: GREATER
40975: OR
40976: IFFALSE 40980
// exit ;
40978: GO 41167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40980: LD_ADDR_VAR 0 4
40984: PUSH
40985: LD_INT 22
40987: PUSH
40988: LD_VAR 0 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 21
40999: PUSH
41000: LD_INT 3
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PPUSH
41011: CALL_OW 69
41015: ST_TO_ADDR
// if not tmp then
41016: LD_VAR 0 4
41020: NOT
41021: IFFALSE 41025
// exit ;
41023: GO 41167
// enable_addtolog := true ;
41025: LD_ADDR_OWVAR 81
41029: PUSH
41030: LD_INT 1
41032: ST_TO_ADDR
// AddToLog ( [ ) ;
41033: LD_STRING [
41035: PPUSH
41036: CALL_OW 561
// for i in tmp do
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_VAR 0 4
41049: PUSH
41050: FOR_IN
41051: IFFALSE 41158
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41053: LD_STRING [
41055: PUSH
41056: LD_VAR 0 3
41060: PPUSH
41061: CALL_OW 266
41065: STR
41066: PUSH
41067: LD_STRING , 
41069: STR
41070: PUSH
41071: LD_VAR 0 3
41075: PPUSH
41076: CALL_OW 250
41080: STR
41081: PUSH
41082: LD_STRING , 
41084: STR
41085: PUSH
41086: LD_VAR 0 3
41090: PPUSH
41091: CALL_OW 251
41095: STR
41096: PUSH
41097: LD_STRING , 
41099: STR
41100: PUSH
41101: LD_VAR 0 3
41105: PPUSH
41106: CALL_OW 254
41110: STR
41111: PUSH
41112: LD_STRING , 
41114: STR
41115: PUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: LD_INT 1
41123: PPUSH
41124: CALL_OW 268
41128: STR
41129: PUSH
41130: LD_STRING , 
41132: STR
41133: PUSH
41134: LD_VAR 0 3
41138: PPUSH
41139: LD_INT 2
41141: PPUSH
41142: CALL_OW 268
41146: STR
41147: PUSH
41148: LD_STRING ],
41150: STR
41151: PPUSH
41152: CALL_OW 561
// end ;
41156: GO 41050
41158: POP
41159: POP
// AddToLog ( ]; ) ;
41160: LD_STRING ];
41162: PPUSH
41163: CALL_OW 561
// end ;
41167: LD_VAR 0 2
41171: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41172: LD_INT 0
41174: PPUSH
41175: PPUSH
41176: PPUSH
41177: PPUSH
41178: PPUSH
// if not area or not rate or not max then
41179: LD_VAR 0 1
41183: NOT
41184: IFTRUE 41193
41186: PUSH
41187: LD_VAR 0 2
41191: NOT
41192: OR
41193: IFTRUE 41202
41195: PUSH
41196: LD_VAR 0 4
41200: NOT
41201: OR
41202: IFFALSE 41206
// exit ;
41204: GO 41395
// while 1 do
41206: LD_INT 1
41208: IFFALSE 41395
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41210: LD_ADDR_VAR 0 9
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: LD_INT 1
41222: PPUSH
41223: CALL_OW 287
41227: PUSH
41228: LD_INT 10
41230: MUL
41231: ST_TO_ADDR
// r := rate / 10 ;
41232: LD_ADDR_VAR 0 7
41236: PUSH
41237: LD_VAR 0 2
41241: PUSH
41242: LD_INT 10
41244: DIVREAL
41245: ST_TO_ADDR
// time := 1 1$00 ;
41246: LD_ADDR_VAR 0 8
41250: PUSH
41251: LD_INT 2100
41253: ST_TO_ADDR
// if amount < min then
41254: LD_VAR 0 9
41258: PUSH
41259: LD_VAR 0 3
41263: LESS
41264: IFFALSE 41282
// r := r * 2 else
41266: LD_ADDR_VAR 0 7
41270: PUSH
41271: LD_VAR 0 7
41275: PUSH
41276: LD_INT 2
41278: MUL
41279: ST_TO_ADDR
41280: GO 41308
// if amount > max then
41282: LD_VAR 0 9
41286: PUSH
41287: LD_VAR 0 4
41291: GREATER
41292: IFFALSE 41308
// r := r / 2 ;
41294: LD_ADDR_VAR 0 7
41298: PUSH
41299: LD_VAR 0 7
41303: PUSH
41304: LD_INT 2
41306: DIVREAL
41307: ST_TO_ADDR
// time := time / r ;
41308: LD_ADDR_VAR 0 8
41312: PUSH
41313: LD_VAR 0 8
41317: PUSH
41318: LD_VAR 0 7
41322: DIVREAL
41323: ST_TO_ADDR
// if time < 0 then
41324: LD_VAR 0 8
41328: PUSH
41329: LD_INT 0
41331: LESS
41332: IFFALSE 41349
// time := time * - 1 ;
41334: LD_ADDR_VAR 0 8
41338: PUSH
41339: LD_VAR 0 8
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: MUL
41348: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41349: LD_VAR 0 8
41353: PUSH
41354: LD_INT 35
41356: PPUSH
41357: LD_INT 875
41359: PPUSH
41360: CALL_OW 12
41364: PLUS
41365: PPUSH
41366: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41370: LD_INT 1
41372: PPUSH
41373: LD_INT 5
41375: PPUSH
41376: CALL_OW 12
41380: PPUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_INT 1
41388: PPUSH
41389: CALL_OW 55
// end ;
41393: GO 41206
// end ;
41395: LD_VAR 0 5
41399: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41400: LD_INT 0
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
// if not turrets or not factories then
41410: LD_VAR 0 1
41414: NOT
41415: IFTRUE 41424
41417: PUSH
41418: LD_VAR 0 2
41422: NOT
41423: OR
41424: IFFALSE 41428
// exit ;
41426: GO 41735
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41428: LD_ADDR_VAR 0 10
41432: PUSH
41433: LD_INT 5
41435: PUSH
41436: LD_INT 6
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 4
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 3
41455: PUSH
41456: LD_INT 5
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 24
41470: PUSH
41471: LD_INT 25
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 23
41480: PUSH
41481: LD_INT 27
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 42
41494: PUSH
41495: LD_INT 43
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 44
41504: PUSH
41505: LD_INT 46
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 45
41514: PUSH
41515: LD_INT 47
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: ST_TO_ADDR
// result := [ ] ;
41532: LD_ADDR_VAR 0 3
41536: PUSH
41537: EMPTY
41538: ST_TO_ADDR
// for i in turrets do
41539: LD_ADDR_VAR 0 4
41543: PUSH
41544: LD_VAR 0 1
41548: PUSH
41549: FOR_IN
41550: IFFALSE 41733
// begin nat := GetNation ( i ) ;
41552: LD_ADDR_VAR 0 7
41556: PUSH
41557: LD_VAR 0 4
41561: PPUSH
41562: CALL_OW 248
41566: ST_TO_ADDR
// weapon := 0 ;
41567: LD_ADDR_VAR 0 8
41571: PUSH
41572: LD_INT 0
41574: ST_TO_ADDR
// if not nat then
41575: LD_VAR 0 7
41579: NOT
41580: IFFALSE 41584
// continue ;
41582: GO 41549
// for j in list [ nat ] do
41584: LD_ADDR_VAR 0 5
41588: PUSH
41589: LD_VAR 0 10
41593: PUSH
41594: LD_VAR 0 7
41598: ARRAY
41599: PUSH
41600: FOR_IN
41601: IFFALSE 41642
// if GetBWeapon ( i ) = j [ 1 ] then
41603: LD_VAR 0 4
41607: PPUSH
41608: CALL_OW 269
41612: PUSH
41613: LD_VAR 0 5
41617: PUSH
41618: LD_INT 1
41620: ARRAY
41621: EQUAL
41622: IFFALSE 41640
// begin weapon := j [ 2 ] ;
41624: LD_ADDR_VAR 0 8
41628: PUSH
41629: LD_VAR 0 5
41633: PUSH
41634: LD_INT 2
41636: ARRAY
41637: ST_TO_ADDR
// break ;
41638: GO 41642
// end ;
41640: GO 41600
41642: POP
41643: POP
// if not weapon then
41644: LD_VAR 0 8
41648: NOT
41649: IFFALSE 41653
// continue ;
41651: GO 41549
// for k in factories do
41653: LD_ADDR_VAR 0 6
41657: PUSH
41658: LD_VAR 0 2
41662: PUSH
41663: FOR_IN
41664: IFFALSE 41729
// begin weapons := AvailableWeaponList ( k ) ;
41666: LD_ADDR_VAR 0 9
41670: PUSH
41671: LD_VAR 0 6
41675: PPUSH
41676: CALL_OW 478
41680: ST_TO_ADDR
// if not weapons then
41681: LD_VAR 0 9
41685: NOT
41686: IFFALSE 41690
// continue ;
41688: GO 41663
// if weapon in weapons then
41690: LD_VAR 0 8
41694: PUSH
41695: LD_VAR 0 9
41699: IN
41700: IFFALSE 41727
// begin result := [ i , weapon ] ;
41702: LD_ADDR_VAR 0 3
41706: PUSH
41707: LD_VAR 0 4
41711: PUSH
41712: LD_VAR 0 8
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: ST_TO_ADDR
// exit ;
41721: POP
41722: POP
41723: POP
41724: POP
41725: GO 41735
// end ; end ;
41727: GO 41663
41729: POP
41730: POP
// end ;
41731: GO 41549
41733: POP
41734: POP
// end ;
41735: LD_VAR 0 3
41739: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41740: LD_INT 0
41742: PPUSH
// if not side or side > 8 then
41743: LD_VAR 0 3
41747: NOT
41748: IFTRUE 41760
41750: PUSH
41751: LD_VAR 0 3
41755: PUSH
41756: LD_INT 8
41758: GREATER
41759: OR
41760: IFFALSE 41764
// exit ;
41762: GO 41823
// if not range then
41764: LD_VAR 0 4
41768: NOT
41769: IFFALSE 41780
// range := - 12 ;
41771: LD_ADDR_VAR 0 4
41775: PUSH
41776: LD_INT 12
41778: NEG
41779: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41780: LD_VAR 0 1
41784: PPUSH
41785: LD_VAR 0 2
41789: PPUSH
41790: LD_VAR 0 3
41794: PPUSH
41795: LD_VAR 0 4
41799: PPUSH
41800: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41804: LD_VAR 0 1
41808: PPUSH
41809: LD_VAR 0 2
41813: PPUSH
41814: LD_VAR 0 3
41818: PPUSH
41819: CALL_OW 331
// end ;
41823: LD_VAR 0 5
41827: RET
// export function Video ( mode ) ; begin
41828: LD_INT 0
41830: PPUSH
// ingame_video = mode ;
41831: LD_ADDR_OWVAR 52
41835: PUSH
41836: LD_VAR 0 1
41840: ST_TO_ADDR
// interface_hidden = mode ;
41841: LD_ADDR_OWVAR 54
41845: PUSH
41846: LD_VAR 0 1
41850: ST_TO_ADDR
// end ;
41851: LD_VAR 0 2
41855: RET
// export function Join ( array , element ) ; begin
41856: LD_INT 0
41858: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41859: LD_ADDR_VAR 0 3
41863: PUSH
41864: LD_VAR 0 1
41868: PPUSH
41869: LD_VAR 0 1
41873: PUSH
41874: LD_INT 1
41876: PLUS
41877: PPUSH
41878: LD_VAR 0 2
41882: PPUSH
41883: CALL_OW 1
41887: ST_TO_ADDR
// end ;
41888: LD_VAR 0 3
41892: RET
// export function JoinUnion ( array , element ) ; begin
41893: LD_INT 0
41895: PPUSH
// result := array union element ;
41896: LD_ADDR_VAR 0 3
41900: PUSH
41901: LD_VAR 0 1
41905: PUSH
41906: LD_VAR 0 2
41910: UNION
41911: ST_TO_ADDR
// end ;
41912: LD_VAR 0 3
41916: RET
// export function GetBehemoths ( side ) ; begin
41917: LD_INT 0
41919: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41920: LD_ADDR_VAR 0 2
41924: PUSH
41925: LD_INT 22
41927: PUSH
41928: LD_VAR 0 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 31
41939: PUSH
41940: LD_INT 25
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PPUSH
41951: CALL_OW 69
41955: ST_TO_ADDR
// end ;
41956: LD_VAR 0 2
41960: RET
// export function Shuffle ( array ) ; var i , index ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
41965: PPUSH
// result := [ ] ;
41966: LD_ADDR_VAR 0 2
41970: PUSH
41971: EMPTY
41972: ST_TO_ADDR
// if not array then
41973: LD_VAR 0 1
41977: NOT
41978: IFFALSE 41982
// exit ;
41980: GO 42081
// Randomize ;
41982: CALL_OW 10
// for i = array downto 1 do
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: DOUBLE
41992: LD_VAR 0 1
41996: INC
41997: ST_TO_ADDR
41998: LD_INT 1
42000: PUSH
42001: FOR_DOWNTO
42002: IFFALSE 42079
// begin index := rand ( 1 , array ) ;
42004: LD_ADDR_VAR 0 4
42008: PUSH
42009: LD_INT 1
42011: PPUSH
42012: LD_VAR 0 1
42016: PPUSH
42017: CALL_OW 12
42021: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42022: LD_ADDR_VAR 0 2
42026: PUSH
42027: LD_VAR 0 2
42031: PPUSH
42032: LD_VAR 0 2
42036: PUSH
42037: LD_INT 1
42039: PLUS
42040: PPUSH
42041: LD_VAR 0 1
42045: PUSH
42046: LD_VAR 0 4
42050: ARRAY
42051: PPUSH
42052: CALL_OW 2
42056: ST_TO_ADDR
// array := Delete ( array , index ) ;
42057: LD_ADDR_VAR 0 1
42061: PUSH
42062: LD_VAR 0 1
42066: PPUSH
42067: LD_VAR 0 4
42071: PPUSH
42072: CALL_OW 3
42076: ST_TO_ADDR
// end ;
42077: GO 42001
42079: POP
42080: POP
// end ;
42081: LD_VAR 0 2
42085: RET
// export function GetBaseMaterials ( base ) ; begin
42086: LD_INT 0
42088: PPUSH
// result := [ 0 , 0 , 0 ] ;
42089: LD_ADDR_VAR 0 2
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: ST_TO_ADDR
// if not base then
42108: LD_VAR 0 1
42112: NOT
42113: IFFALSE 42117
// exit ;
42115: GO 42166
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42117: LD_ADDR_VAR 0 2
42121: PUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: LD_INT 1
42129: PPUSH
42130: CALL_OW 275
42134: PUSH
42135: LD_VAR 0 1
42139: PPUSH
42140: LD_INT 2
42142: PPUSH
42143: CALL_OW 275
42147: PUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_INT 3
42155: PPUSH
42156: CALL_OW 275
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// end ;
42166: LD_VAR 0 2
42170: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42171: LD_INT 0
42173: PPUSH
42174: PPUSH
// result := array ;
42175: LD_ADDR_VAR 0 3
42179: PUSH
42180: LD_VAR 0 1
42184: ST_TO_ADDR
// if size >= result then
42185: LD_VAR 0 2
42189: PUSH
42190: LD_VAR 0 3
42194: GREATEREQUAL
42195: IFFALSE 42199
// exit ;
42197: GO 42249
// if size then
42199: LD_VAR 0 2
42203: IFFALSE 42249
// for i := array downto size do
42205: LD_ADDR_VAR 0 4
42209: PUSH
42210: DOUBLE
42211: LD_VAR 0 1
42215: INC
42216: ST_TO_ADDR
42217: LD_VAR 0 2
42221: PUSH
42222: FOR_DOWNTO
42223: IFFALSE 42247
// result := Delete ( result , result ) ;
42225: LD_ADDR_VAR 0 3
42229: PUSH
42230: LD_VAR 0 3
42234: PPUSH
42235: LD_VAR 0 3
42239: PPUSH
42240: CALL_OW 3
42244: ST_TO_ADDR
42245: GO 42222
42247: POP
42248: POP
// end ;
42249: LD_VAR 0 3
42253: RET
// export function ComExit ( unit ) ; var tmp ; begin
42254: LD_INT 0
42256: PPUSH
42257: PPUSH
// if not IsInUnit ( unit ) then
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 310
42267: NOT
42268: IFFALSE 42272
// exit ;
42270: GO 42332
// tmp := IsInUnit ( unit ) ;
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 310
42286: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42287: LD_VAR 0 3
42291: PPUSH
42292: CALL_OW 247
42296: PUSH
42297: LD_INT 2
42299: EQUAL
42300: IFFALSE 42313
// ComExitVehicle ( unit ) else
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 121
42311: GO 42322
// ComExitBuilding ( unit ) ;
42313: LD_VAR 0 1
42317: PPUSH
42318: CALL_OW 122
// result := tmp ;
42322: LD_ADDR_VAR 0 2
42326: PUSH
42327: LD_VAR 0 3
42331: ST_TO_ADDR
// end ;
42332: LD_VAR 0 2
42336: RET
// export function ComExitAll ( units ) ; var i ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
// if not units then
42341: LD_VAR 0 1
42345: NOT
42346: IFFALSE 42350
// exit ;
42348: GO 42376
// for i in units do
42350: LD_ADDR_VAR 0 3
42354: PUSH
42355: LD_VAR 0 1
42359: PUSH
42360: FOR_IN
42361: IFFALSE 42374
// ComExit ( i ) ;
42363: LD_VAR 0 3
42367: PPUSH
42368: CALL 42254 0 1
42372: GO 42360
42374: POP
42375: POP
// end ;
42376: LD_VAR 0 2
42380: RET
// export function ResetHc ; begin
42381: LD_INT 0
42383: PPUSH
// InitHc ;
42384: CALL_OW 19
// hc_importance := 0 ;
42388: LD_ADDR_OWVAR 32
42392: PUSH
42393: LD_INT 0
42395: ST_TO_ADDR
// end ;
42396: LD_VAR 0 1
42400: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42401: LD_INT 0
42403: PPUSH
42404: PPUSH
42405: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42406: LD_ADDR_VAR 0 6
42410: PUSH
42411: LD_VAR 0 1
42415: PUSH
42416: LD_VAR 0 3
42420: PLUS
42421: PUSH
42422: LD_INT 2
42424: DIV
42425: ST_TO_ADDR
// if _x < 0 then
42426: LD_VAR 0 6
42430: PUSH
42431: LD_INT 0
42433: LESS
42434: IFFALSE 42451
// _x := _x * - 1 ;
42436: LD_ADDR_VAR 0 6
42440: PUSH
42441: LD_VAR 0 6
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: MUL
42450: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: LD_VAR 0 2
42460: PUSH
42461: LD_VAR 0 4
42465: PLUS
42466: PUSH
42467: LD_INT 2
42469: DIV
42470: ST_TO_ADDR
// if _y < 0 then
42471: LD_VAR 0 7
42475: PUSH
42476: LD_INT 0
42478: LESS
42479: IFFALSE 42496
// _y := _y * - 1 ;
42481: LD_ADDR_VAR 0 7
42485: PUSH
42486: LD_VAR 0 7
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: MUL
42495: ST_TO_ADDR
// result := [ _x , _y ] ;
42496: LD_ADDR_VAR 0 5
42500: PUSH
42501: LD_VAR 0 6
42505: PUSH
42506: LD_VAR 0 7
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: ST_TO_ADDR
// end ;
42515: LD_VAR 0 5
42519: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42520: LD_INT 0
42522: PPUSH
42523: PPUSH
42524: PPUSH
42525: PPUSH
// task := GetTaskList ( unit ) ;
42526: LD_ADDR_VAR 0 7
42530: PUSH
42531: LD_VAR 0 1
42535: PPUSH
42536: CALL_OW 437
42540: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42541: LD_VAR 0 7
42545: NOT
42546: IFFALSE 42565
42548: PUSH
42549: LD_VAR 0 1
42553: PPUSH
42554: LD_VAR 0 2
42558: PPUSH
42559: CALL_OW 308
42563: NOT
42564: AND
42565: IFFALSE 42569
// exit ;
42567: GO 42687
// if IsInArea ( unit , area ) then
42569: LD_VAR 0 1
42573: PPUSH
42574: LD_VAR 0 2
42578: PPUSH
42579: CALL_OW 308
42583: IFFALSE 42601
// begin ComMoveToArea ( unit , goAway ) ;
42585: LD_VAR 0 1
42589: PPUSH
42590: LD_VAR 0 3
42594: PPUSH
42595: CALL_OW 113
// exit ;
42599: GO 42687
// end ; if task [ 1 ] [ 1 ] <> M then
42601: LD_VAR 0 7
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: PUSH
42610: LD_INT 1
42612: ARRAY
42613: PUSH
42614: LD_STRING M
42616: NONEQUAL
42617: IFFALSE 42621
// exit ;
42619: GO 42687
// x := task [ 1 ] [ 2 ] ;
42621: LD_ADDR_VAR 0 5
42625: PUSH
42626: LD_VAR 0 7
42630: PUSH
42631: LD_INT 1
42633: ARRAY
42634: PUSH
42635: LD_INT 2
42637: ARRAY
42638: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42639: LD_ADDR_VAR 0 6
42643: PUSH
42644: LD_VAR 0 7
42648: PUSH
42649: LD_INT 1
42651: ARRAY
42652: PUSH
42653: LD_INT 3
42655: ARRAY
42656: ST_TO_ADDR
// if InArea ( x , y , area ) then
42657: LD_VAR 0 5
42661: PPUSH
42662: LD_VAR 0 6
42666: PPUSH
42667: LD_VAR 0 2
42671: PPUSH
42672: CALL_OW 309
42676: IFFALSE 42687
// ComStop ( unit ) ;
42678: LD_VAR 0 1
42682: PPUSH
42683: CALL_OW 141
// end ;
42687: LD_VAR 0 4
42691: RET
// export function Abs ( value ) ; begin
42692: LD_INT 0
42694: PPUSH
// result := value ;
42695: LD_ADDR_VAR 0 2
42699: PUSH
42700: LD_VAR 0 1
42704: ST_TO_ADDR
// if value < 0 then
42705: LD_VAR 0 1
42709: PUSH
42710: LD_INT 0
42712: LESS
42713: IFFALSE 42730
// result := value * - 1 ;
42715: LD_ADDR_VAR 0 2
42719: PUSH
42720: LD_VAR 0 1
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: MUL
42729: ST_TO_ADDR
// end ;
42730: LD_VAR 0 2
42734: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42735: LD_INT 0
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
// if not unit or not building then
42745: LD_VAR 0 1
42749: NOT
42750: IFTRUE 42759
42752: PUSH
42753: LD_VAR 0 2
42757: NOT
42758: OR
42759: IFFALSE 42763
// exit ;
42761: GO 42991
// x := GetX ( building ) ;
42763: LD_ADDR_VAR 0 4
42767: PUSH
42768: LD_VAR 0 2
42772: PPUSH
42773: CALL_OW 250
42777: ST_TO_ADDR
// y := GetY ( building ) ;
42778: LD_ADDR_VAR 0 6
42782: PUSH
42783: LD_VAR 0 2
42787: PPUSH
42788: CALL_OW 251
42792: ST_TO_ADDR
// d := GetDir ( building ) ;
42793: LD_ADDR_VAR 0 8
42797: PUSH
42798: LD_VAR 0 2
42802: PPUSH
42803: CALL_OW 254
42807: ST_TO_ADDR
// r := 4 ;
42808: LD_ADDR_VAR 0 9
42812: PUSH
42813: LD_INT 4
42815: ST_TO_ADDR
// for i := 1 to 5 do
42816: LD_ADDR_VAR 0 10
42820: PUSH
42821: DOUBLE
42822: LD_INT 1
42824: DEC
42825: ST_TO_ADDR
42826: LD_INT 5
42828: PUSH
42829: FOR_TO
42830: IFFALSE 42989
// begin _x := ShiftX ( x , d , r + i ) ;
42832: LD_ADDR_VAR 0 5
42836: PUSH
42837: LD_VAR 0 4
42841: PPUSH
42842: LD_VAR 0 8
42846: PPUSH
42847: LD_VAR 0 9
42851: PUSH
42852: LD_VAR 0 10
42856: PLUS
42857: PPUSH
42858: CALL_OW 272
42862: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42863: LD_ADDR_VAR 0 7
42867: PUSH
42868: LD_VAR 0 6
42872: PPUSH
42873: LD_VAR 0 8
42877: PPUSH
42878: LD_VAR 0 9
42882: PUSH
42883: LD_VAR 0 10
42887: PLUS
42888: PPUSH
42889: CALL_OW 273
42893: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42894: LD_VAR 0 5
42898: PPUSH
42899: LD_VAR 0 7
42903: PPUSH
42904: CALL_OW 488
42908: IFFALSE 42943
42910: PUSH
42911: LD_VAR 0 5
42915: PPUSH
42916: LD_VAR 0 7
42920: PPUSH
42921: CALL_OW 428
42925: PPUSH
42926: CALL_OW 247
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: IN
42941: NOT
42942: AND
42943: IFFALSE 42987
// begin ComMoveXY ( unit , _x , _y ) ;
42945: LD_VAR 0 1
42949: PPUSH
42950: LD_VAR 0 5
42954: PPUSH
42955: LD_VAR 0 7
42959: PPUSH
42960: CALL_OW 111
// result := [ _x , _y ] ;
42964: LD_ADDR_VAR 0 3
42968: PUSH
42969: LD_VAR 0 5
42973: PUSH
42974: LD_VAR 0 7
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: ST_TO_ADDR
// exit ;
42983: POP
42984: POP
42985: GO 42991
// end ; end ;
42987: GO 42829
42989: POP
42990: POP
// end ;
42991: LD_VAR 0 3
42995: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42996: LD_INT 0
42998: PPUSH
42999: PPUSH
43000: PPUSH
// result := 0 ;
43001: LD_ADDR_VAR 0 3
43005: PUSH
43006: LD_INT 0
43008: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43009: LD_VAR 0 1
43013: PUSH
43014: LD_INT 0
43016: LESS
43017: IFTRUE 43029
43019: PUSH
43020: LD_VAR 0 1
43024: PUSH
43025: LD_INT 8
43027: GREATER
43028: OR
43029: IFTRUE 43041
43031: PUSH
43032: LD_VAR 0 2
43036: PUSH
43037: LD_INT 0
43039: LESS
43040: OR
43041: IFTRUE 43053
43043: PUSH
43044: LD_VAR 0 2
43048: PUSH
43049: LD_INT 8
43051: GREATER
43052: OR
43053: IFFALSE 43057
// exit ;
43055: GO 43132
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43057: LD_ADDR_VAR 0 4
43061: PUSH
43062: LD_INT 22
43064: PUSH
43065: LD_VAR 0 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PPUSH
43074: CALL_OW 69
43078: PUSH
43079: FOR_IN
43080: IFFALSE 43130
// begin un := UnitShoot ( i ) ;
43082: LD_ADDR_VAR 0 5
43086: PUSH
43087: LD_VAR 0 4
43091: PPUSH
43092: CALL_OW 504
43096: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43097: LD_VAR 0 5
43101: PPUSH
43102: CALL_OW 255
43106: PUSH
43107: LD_VAR 0 1
43111: EQUAL
43112: IFFALSE 43128
// begin result := un ;
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_VAR 0 5
43123: ST_TO_ADDR
// exit ;
43124: POP
43125: POP
43126: GO 43132
// end ; end ;
43128: GO 43079
43130: POP
43131: POP
// end ;
43132: LD_VAR 0 3
43136: RET
// export function GetCargoBay ( units ) ; begin
43137: LD_INT 0
43139: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43140: LD_ADDR_VAR 0 2
43144: PUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 34
43155: PUSH
43156: LD_INT 12
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 34
43165: PUSH
43166: LD_INT 51
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 34
43175: PUSH
43176: LD_INT 32
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 34
43185: PUSH
43186: LD_INT 89
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: PPUSH
43200: CALL_OW 72
43204: ST_TO_ADDR
// end ;
43205: LD_VAR 0 2
43209: RET
// export function Negate ( value ) ; begin
43210: LD_INT 0
43212: PPUSH
// result := not value ;
43213: LD_ADDR_VAR 0 2
43217: PUSH
43218: LD_VAR 0 1
43222: NOT
43223: ST_TO_ADDR
// end ;
43224: LD_VAR 0 2
43228: RET
// export function Inc ( value ) ; begin
43229: LD_INT 0
43231: PPUSH
// result := value + 1 ;
43232: LD_ADDR_VAR 0 2
43236: PUSH
43237: LD_VAR 0 1
43241: PUSH
43242: LD_INT 1
43244: PLUS
43245: ST_TO_ADDR
// end ;
43246: LD_VAR 0 2
43250: RET
// export function Dec ( value ) ; begin
43251: LD_INT 0
43253: PPUSH
// result := value - 1 ;
43254: LD_ADDR_VAR 0 2
43258: PUSH
43259: LD_VAR 0 1
43263: PUSH
43264: LD_INT 1
43266: MINUS
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43273: LD_INT 0
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43283: LD_VAR 0 1
43287: PPUSH
43288: LD_VAR 0 2
43292: PPUSH
43293: CALL_OW 488
43297: NOT
43298: IFTRUE 43317
43300: PUSH
43301: LD_VAR 0 3
43305: PPUSH
43306: LD_VAR 0 4
43310: PPUSH
43311: CALL_OW 488
43315: NOT
43316: OR
43317: IFFALSE 43330
// begin result := - 1 ;
43319: LD_ADDR_VAR 0 5
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: ST_TO_ADDR
// exit ;
43328: GO 43565
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43330: LD_ADDR_VAR 0 12
43334: PUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: LD_VAR 0 2
43344: PPUSH
43345: LD_VAR 0 3
43349: PPUSH
43350: LD_VAR 0 4
43354: PPUSH
43355: CALL 42401 0 4
43359: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43360: LD_ADDR_VAR 0 11
43364: PUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: LD_VAR 0 2
43374: PPUSH
43375: LD_VAR 0 12
43379: PUSH
43380: LD_INT 1
43382: ARRAY
43383: PPUSH
43384: LD_VAR 0 12
43388: PUSH
43389: LD_INT 2
43391: ARRAY
43392: PPUSH
43393: CALL_OW 298
43397: ST_TO_ADDR
// distance := 9999 ;
43398: LD_ADDR_VAR 0 10
43402: PUSH
43403: LD_INT 9999
43405: ST_TO_ADDR
// for i := 0 to 5 do
43406: LD_ADDR_VAR 0 6
43410: PUSH
43411: DOUBLE
43412: LD_INT 0
43414: DEC
43415: ST_TO_ADDR
43416: LD_INT 5
43418: PUSH
43419: FOR_TO
43420: IFFALSE 43563
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43422: LD_ADDR_VAR 0 7
43426: PUSH
43427: LD_VAR 0 1
43431: PPUSH
43432: LD_VAR 0 6
43436: PPUSH
43437: LD_VAR 0 11
43441: PPUSH
43442: CALL_OW 272
43446: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43447: LD_ADDR_VAR 0 8
43451: PUSH
43452: LD_VAR 0 2
43456: PPUSH
43457: LD_VAR 0 6
43461: PPUSH
43462: LD_VAR 0 11
43466: PPUSH
43467: CALL_OW 273
43471: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43472: LD_VAR 0 7
43476: PPUSH
43477: LD_VAR 0 8
43481: PPUSH
43482: CALL_OW 488
43486: NOT
43487: IFFALSE 43491
// continue ;
43489: GO 43419
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43491: LD_ADDR_VAR 0 9
43495: PUSH
43496: LD_VAR 0 12
43500: PUSH
43501: LD_INT 1
43503: ARRAY
43504: PPUSH
43505: LD_VAR 0 12
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PPUSH
43514: LD_VAR 0 7
43518: PPUSH
43519: LD_VAR 0 8
43523: PPUSH
43524: CALL_OW 298
43528: ST_TO_ADDR
// if tmp < distance then
43529: LD_VAR 0 9
43533: PUSH
43534: LD_VAR 0 10
43538: LESS
43539: IFFALSE 43561
// begin result := i ;
43541: LD_ADDR_VAR 0 5
43545: PUSH
43546: LD_VAR 0 6
43550: ST_TO_ADDR
// distance := tmp ;
43551: LD_ADDR_VAR 0 10
43555: PUSH
43556: LD_VAR 0 9
43560: ST_TO_ADDR
// end ; end ;
43561: GO 43419
43563: POP
43564: POP
// end ;
43565: LD_VAR 0 5
43569: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43570: LD_INT 0
43572: PPUSH
43573: PPUSH
// if not driver or not IsInUnit ( driver ) then
43574: LD_VAR 0 1
43578: NOT
43579: IFTRUE 43593
43581: PUSH
43582: LD_VAR 0 1
43586: PPUSH
43587: CALL_OW 310
43591: NOT
43592: OR
43593: IFFALSE 43597
// exit ;
43595: GO 43687
// vehicle := IsInUnit ( driver ) ;
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL_OW 310
43611: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43612: LD_VAR 0 1
43616: PPUSH
43617: LD_STRING \
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: PUSH
43647: LD_STRING E
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_VAR 0 3
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PPUSH
43683: CALL_OW 446
// end ;
43687: LD_VAR 0 2
43691: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43692: LD_INT 0
43694: PPUSH
43695: PPUSH
// if not driver or not IsInUnit ( driver ) then
43696: LD_VAR 0 1
43700: NOT
43701: IFTRUE 43715
43703: PUSH
43704: LD_VAR 0 1
43708: PPUSH
43709: CALL_OW 310
43713: NOT
43714: OR
43715: IFFALSE 43719
// exit ;
43717: GO 43809
// vehicle := IsInUnit ( driver ) ;
43719: LD_ADDR_VAR 0 3
43723: PUSH
43724: LD_VAR 0 1
43728: PPUSH
43729: CALL_OW 310
43733: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43734: LD_VAR 0 1
43738: PPUSH
43739: LD_STRING \
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: PUSH
43769: LD_STRING E
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_VAR 0 3
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PPUSH
43805: CALL_OW 447
// end ;
43809: LD_VAR 0 2
43813: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43814: LD_INT 0
43816: PPUSH
43817: PPUSH
43818: PPUSH
// tmp := [ ] ;
43819: LD_ADDR_VAR 0 5
43823: PUSH
43824: EMPTY
43825: ST_TO_ADDR
// for i in units do
43826: LD_ADDR_VAR 0 4
43830: PUSH
43831: LD_VAR 0 1
43835: PUSH
43836: FOR_IN
43837: IFFALSE 43875
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43839: LD_ADDR_VAR 0 5
43843: PUSH
43844: LD_VAR 0 5
43848: PPUSH
43849: LD_VAR 0 5
43853: PUSH
43854: LD_INT 1
43856: PLUS
43857: PPUSH
43858: LD_VAR 0 4
43862: PPUSH
43863: CALL_OW 256
43867: PPUSH
43868: CALL_OW 2
43872: ST_TO_ADDR
43873: GO 43836
43875: POP
43876: POP
// if not tmp then
43877: LD_VAR 0 5
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 43934
// if asc then
43886: LD_VAR 0 2
43890: IFFALSE 43914
// result := SortListByListAsc ( units , tmp ) else
43892: LD_ADDR_VAR 0 3
43896: PUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: LD_VAR 0 5
43906: PPUSH
43907: CALL_OW 76
43911: ST_TO_ADDR
43912: GO 43934
// result := SortListByListDesc ( units , tmp ) ;
43914: LD_ADDR_VAR 0 3
43918: PUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_VAR 0 5
43928: PPUSH
43929: CALL_OW 77
43933: ST_TO_ADDR
// end ;
43934: LD_VAR 0 3
43938: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43939: LD_INT 0
43941: PPUSH
43942: PPUSH
// task := GetTaskList ( mech ) ;
43943: LD_ADDR_VAR 0 4
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: CALL_OW 437
43957: ST_TO_ADDR
// if not task then
43958: LD_VAR 0 4
43962: NOT
43963: IFFALSE 43967
// exit ;
43965: GO 44011
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43967: LD_ADDR_VAR 0 3
43971: PUSH
43972: LD_VAR 0 4
43976: PUSH
43977: LD_INT 1
43979: ARRAY
43980: PUSH
43981: LD_INT 1
43983: ARRAY
43984: PUSH
43985: LD_STRING r
43987: EQUAL
43988: IFFALSE 44010
43990: PUSH
43991: LD_VAR 0 4
43995: PUSH
43996: LD_INT 1
43998: ARRAY
43999: PUSH
44000: LD_INT 4
44002: ARRAY
44003: PUSH
44004: LD_VAR 0 2
44008: EQUAL
44009: AND
44010: ST_TO_ADDR
// end ;
44011: LD_VAR 0 3
44015: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44016: LD_INT 0
44018: PPUSH
// SetDir ( unit , d ) ;
44019: LD_VAR 0 1
44023: PPUSH
44024: LD_VAR 0 4
44028: PPUSH
44029: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
44033: LD_ADDR_VAR 0 6
44037: PUSH
44038: LD_VAR 0 1
44042: PPUSH
44043: LD_VAR 0 2
44047: PPUSH
44048: LD_VAR 0 3
44052: PPUSH
44053: LD_VAR 0 5
44057: PPUSH
44058: CALL_OW 48
44062: ST_TO_ADDR
// end ;
44063: LD_VAR 0 6
44067: RET
// export function ToNaturalNumber ( number ) ; begin
44068: LD_INT 0
44070: PPUSH
// result := number div 1 ;
44071: LD_ADDR_VAR 0 2
44075: PUSH
44076: LD_VAR 0 1
44080: PUSH
44081: LD_INT 1
44083: DIV
44084: ST_TO_ADDR
// if number < 0 then
44085: LD_VAR 0 1
44089: PUSH
44090: LD_INT 0
44092: LESS
44093: IFFALSE 44103
// result := 0 ;
44095: LD_ADDR_VAR 0 2
44099: PUSH
44100: LD_INT 0
44102: ST_TO_ADDR
// end ;
44103: LD_VAR 0 2
44107: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
44108: LD_INT 0
44110: PPUSH
44111: PPUSH
44112: PPUSH
// if not buildings then
44113: LD_VAR 0 1
44117: NOT
44118: IFFALSE 44122
// exit ;
44120: GO 44237
// tmp := [ ] ;
44122: LD_ADDR_VAR 0 5
44126: PUSH
44127: EMPTY
44128: ST_TO_ADDR
// for b in buildings do
44129: LD_ADDR_VAR 0 4
44133: PUSH
44134: LD_VAR 0 1
44138: PUSH
44139: FOR_IN
44140: IFFALSE 44178
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
44142: LD_ADDR_VAR 0 5
44146: PUSH
44147: LD_VAR 0 5
44151: PPUSH
44152: LD_VAR 0 5
44156: PUSH
44157: LD_INT 1
44159: PLUS
44160: PPUSH
44161: LD_VAR 0 4
44165: PPUSH
44166: CALL_OW 266
44170: PPUSH
44171: CALL_OW 1
44175: ST_TO_ADDR
44176: GO 44139
44178: POP
44179: POP
// if not tmp then
44180: LD_VAR 0 5
44184: NOT
44185: IFFALSE 44189
// exit ;
44187: GO 44237
// if asc then
44189: LD_VAR 0 2
44193: IFFALSE 44217
// result := SortListByListAsc ( buildings , tmp ) else
44195: LD_ADDR_VAR 0 3
44199: PUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: LD_VAR 0 5
44209: PPUSH
44210: CALL_OW 76
44214: ST_TO_ADDR
44215: GO 44237
// result := SortListByListDesc ( buildings , tmp ) ;
44217: LD_ADDR_VAR 0 3
44221: PUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: LD_VAR 0 5
44231: PPUSH
44232: CALL_OW 77
44236: ST_TO_ADDR
// end ;
44237: LD_VAR 0 3
44241: RET
// export function SortByClass ( units , class ) ; var un ; begin
44242: LD_INT 0
44244: PPUSH
44245: PPUSH
// if not units or not class then
44246: LD_VAR 0 1
44250: NOT
44251: IFTRUE 44260
44253: PUSH
44254: LD_VAR 0 2
44258: NOT
44259: OR
44260: IFFALSE 44264
// exit ;
44262: GO 44359
// result := [ ] ;
44264: LD_ADDR_VAR 0 3
44268: PUSH
44269: EMPTY
44270: ST_TO_ADDR
// for un in units do
44271: LD_ADDR_VAR 0 4
44275: PUSH
44276: LD_VAR 0 1
44280: PUSH
44281: FOR_IN
44282: IFFALSE 44357
// if GetClass ( un ) = class then
44284: LD_VAR 0 4
44288: PPUSH
44289: CALL_OW 257
44293: PUSH
44294: LD_VAR 0 2
44298: EQUAL
44299: IFFALSE 44326
// result := Insert ( result , 1 , un ) else
44301: LD_ADDR_VAR 0 3
44305: PUSH
44306: LD_VAR 0 3
44310: PPUSH
44311: LD_INT 1
44313: PPUSH
44314: LD_VAR 0 4
44318: PPUSH
44319: CALL_OW 2
44323: ST_TO_ADDR
44324: GO 44355
// result := Replace ( result , result + 1 , un ) ;
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_VAR 0 3
44335: PPUSH
44336: LD_VAR 0 3
44340: PUSH
44341: LD_INT 1
44343: PLUS
44344: PPUSH
44345: LD_VAR 0 4
44349: PPUSH
44350: CALL_OW 1
44354: ST_TO_ADDR
44355: GO 44281
44357: POP
44358: POP
// end ;
44359: LD_VAR 0 3
44363: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44364: LD_INT 0
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
// result := [ ] ;
44373: LD_ADDR_VAR 0 4
44377: PUSH
44378: EMPTY
44379: ST_TO_ADDR
// if x - r < 0 then
44380: LD_VAR 0 1
44384: PUSH
44385: LD_VAR 0 3
44389: MINUS
44390: PUSH
44391: LD_INT 0
44393: LESS
44394: IFFALSE 44406
// min_x := 0 else
44396: LD_ADDR_VAR 0 8
44400: PUSH
44401: LD_INT 0
44403: ST_TO_ADDR
44404: GO 44422
// min_x := x - r ;
44406: LD_ADDR_VAR 0 8
44410: PUSH
44411: LD_VAR 0 1
44415: PUSH
44416: LD_VAR 0 3
44420: MINUS
44421: ST_TO_ADDR
// if y - r < 0 then
44422: LD_VAR 0 2
44426: PUSH
44427: LD_VAR 0 3
44431: MINUS
44432: PUSH
44433: LD_INT 0
44435: LESS
44436: IFFALSE 44448
// min_y := 0 else
44438: LD_ADDR_VAR 0 7
44442: PUSH
44443: LD_INT 0
44445: ST_TO_ADDR
44446: GO 44464
// min_y := y - r ;
44448: LD_ADDR_VAR 0 7
44452: PUSH
44453: LD_VAR 0 2
44457: PUSH
44458: LD_VAR 0 3
44462: MINUS
44463: ST_TO_ADDR
// max_x := x + r ;
44464: LD_ADDR_VAR 0 9
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_VAR 0 3
44478: PLUS
44479: ST_TO_ADDR
// max_y := y + r ;
44480: LD_ADDR_VAR 0 10
44484: PUSH
44485: LD_VAR 0 2
44489: PUSH
44490: LD_VAR 0 3
44494: PLUS
44495: ST_TO_ADDR
// for _x = min_x to max_x do
44496: LD_ADDR_VAR 0 5
44500: PUSH
44501: DOUBLE
44502: LD_VAR 0 8
44506: DEC
44507: ST_TO_ADDR
44508: LD_VAR 0 9
44512: PUSH
44513: FOR_TO
44514: IFFALSE 44615
// for _y = min_y to max_y do
44516: LD_ADDR_VAR 0 6
44520: PUSH
44521: DOUBLE
44522: LD_VAR 0 7
44526: DEC
44527: ST_TO_ADDR
44528: LD_VAR 0 10
44532: PUSH
44533: FOR_TO
44534: IFFALSE 44611
// begin if not ValidHex ( _x , _y ) then
44536: LD_VAR 0 5
44540: PPUSH
44541: LD_VAR 0 6
44545: PPUSH
44546: CALL_OW 488
44550: NOT
44551: IFFALSE 44555
// continue ;
44553: GO 44533
// if GetResourceTypeXY ( _x , _y ) then
44555: LD_VAR 0 5
44559: PPUSH
44560: LD_VAR 0 6
44564: PPUSH
44565: CALL_OW 283
44569: IFFALSE 44609
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44571: LD_ADDR_VAR 0 4
44575: PUSH
44576: LD_VAR 0 4
44580: PPUSH
44581: LD_VAR 0 4
44585: PUSH
44586: LD_INT 1
44588: PLUS
44589: PPUSH
44590: LD_VAR 0 5
44594: PUSH
44595: LD_VAR 0 6
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PPUSH
44604: CALL_OW 1
44608: ST_TO_ADDR
// end ;
44609: GO 44533
44611: POP
44612: POP
44613: GO 44513
44615: POP
44616: POP
// end ;
44617: LD_VAR 0 4
44621: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44622: LD_INT 0
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
// if not units then
44632: LD_VAR 0 1
44636: NOT
44637: IFFALSE 44641
// exit ;
44639: GO 45173
// result := UnitFilter ( units , [ f_ok ] ) ;
44641: LD_ADDR_VAR 0 3
44645: PUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: LD_INT 50
44653: PUSH
44654: EMPTY
44655: LIST
44656: PPUSH
44657: CALL_OW 72
44661: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44662: LD_ADDR_VAR 0 8
44666: PUSH
44667: LD_VAR 0 1
44671: PUSH
44672: LD_INT 1
44674: ARRAY
44675: PPUSH
44676: CALL_OW 255
44680: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44681: LD_ADDR_VAR 0 10
44685: PUSH
44686: LD_INT 29
44688: PUSH
44689: LD_INT 91
44691: PUSH
44692: LD_INT 49
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// if not result then
44700: LD_VAR 0 3
44704: NOT
44705: IFFALSE 44709
// exit ;
44707: GO 45173
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44709: LD_ADDR_VAR 0 5
44713: PUSH
44714: LD_INT 81
44716: PUSH
44717: LD_VAR 0 8
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PPUSH
44726: CALL_OW 69
44730: ST_TO_ADDR
// for i in result do
44731: LD_ADDR_VAR 0 4
44735: PUSH
44736: LD_VAR 0 3
44740: PUSH
44741: FOR_IN
44742: IFFALSE 45171
// begin tag := GetTag ( i ) + 1 ;
44744: LD_ADDR_VAR 0 9
44748: PUSH
44749: LD_VAR 0 4
44753: PPUSH
44754: CALL_OW 110
44758: PUSH
44759: LD_INT 1
44761: PLUS
44762: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44763: LD_ADDR_VAR 0 7
44767: PUSH
44768: LD_VAR 0 4
44772: PPUSH
44773: CALL_OW 250
44777: PPUSH
44778: LD_VAR 0 4
44782: PPUSH
44783: CALL_OW 251
44787: PPUSH
44788: LD_INT 4
44790: PPUSH
44791: CALL 44364 0 3
44795: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44796: LD_VAR 0 4
44800: PPUSH
44801: CALL_OW 247
44805: PUSH
44806: LD_INT 2
44808: EQUAL
44809: IFFALSE 44821
44811: PUSH
44812: LD_VAR 0 7
44816: PUSH
44817: LD_INT 2
44819: GREATER
44820: AND
44821: IFFALSE 44841
44823: PUSH
44824: LD_VAR 0 4
44828: PPUSH
44829: CALL_OW 264
44833: PUSH
44834: LD_VAR 0 10
44838: IN
44839: NOT
44840: AND
44841: IFFALSE 44880
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44843: LD_VAR 0 4
44847: PPUSH
44848: LD_VAR 0 7
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 7
44865: PUSH
44866: LD_INT 1
44868: ARRAY
44869: PUSH
44870: LD_INT 2
44872: ARRAY
44873: PPUSH
44874: CALL_OW 116
44878: GO 45169
// if path > tag then
44880: LD_VAR 0 2
44884: PUSH
44885: LD_VAR 0 9
44889: GREATER
44890: IFFALSE 45098
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44892: LD_ADDR_VAR 0 6
44896: PUSH
44897: LD_VAR 0 5
44901: PPUSH
44902: LD_INT 91
44904: PUSH
44905: LD_VAR 0 4
44909: PUSH
44910: LD_INT 8
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: PPUSH
44918: CALL_OW 72
44922: ST_TO_ADDR
// if nearEnemy then
44923: LD_VAR 0 6
44927: IFFALSE 44996
// begin if GetWeapon ( i ) = ru_time_lapser then
44929: LD_VAR 0 4
44933: PPUSH
44934: CALL_OW 264
44938: PUSH
44939: LD_INT 49
44941: EQUAL
44942: IFFALSE 44970
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44944: LD_VAR 0 4
44948: PPUSH
44949: LD_VAR 0 6
44953: PPUSH
44954: LD_VAR 0 4
44958: PPUSH
44959: CALL_OW 74
44963: PPUSH
44964: CALL_OW 112
44968: GO 44994
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44970: LD_VAR 0 4
44974: PPUSH
44975: LD_VAR 0 6
44979: PPUSH
44980: LD_VAR 0 4
44984: PPUSH
44985: CALL_OW 74
44989: PPUSH
44990: CALL 46254 0 2
// end else
44994: GO 45096
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44996: LD_VAR 0 4
45000: PPUSH
45001: LD_VAR 0 2
45005: PUSH
45006: LD_VAR 0 9
45010: ARRAY
45011: PUSH
45012: LD_INT 1
45014: ARRAY
45015: PPUSH
45016: LD_VAR 0 2
45020: PUSH
45021: LD_VAR 0 9
45025: ARRAY
45026: PUSH
45027: LD_INT 2
45029: ARRAY
45030: PPUSH
45031: CALL_OW 297
45035: PUSH
45036: LD_INT 6
45038: GREATER
45039: IFFALSE 45082
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45041: LD_VAR 0 4
45045: PPUSH
45046: LD_VAR 0 2
45050: PUSH
45051: LD_VAR 0 9
45055: ARRAY
45056: PUSH
45057: LD_INT 1
45059: ARRAY
45060: PPUSH
45061: LD_VAR 0 2
45065: PUSH
45066: LD_VAR 0 9
45070: ARRAY
45071: PUSH
45072: LD_INT 2
45074: ARRAY
45075: PPUSH
45076: CALL_OW 114
45080: GO 45096
// SetTag ( i , tag ) ;
45082: LD_VAR 0 4
45086: PPUSH
45087: LD_VAR 0 9
45091: PPUSH
45092: CALL_OW 109
// end else
45096: GO 45169
// if enemy then
45098: LD_VAR 0 5
45102: IFFALSE 45169
// begin if GetWeapon ( i ) = ru_time_lapser then
45104: LD_VAR 0 4
45108: PPUSH
45109: CALL_OW 264
45113: PUSH
45114: LD_INT 49
45116: EQUAL
45117: IFFALSE 45145
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45119: LD_VAR 0 4
45123: PPUSH
45124: LD_VAR 0 5
45128: PPUSH
45129: LD_VAR 0 4
45133: PPUSH
45134: CALL_OW 74
45138: PPUSH
45139: CALL_OW 112
45143: GO 45169
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45145: LD_VAR 0 4
45149: PPUSH
45150: LD_VAR 0 5
45154: PPUSH
45155: LD_VAR 0 4
45159: PPUSH
45160: CALL_OW 74
45164: PPUSH
45165: CALL 46254 0 2
// end ; end ;
45169: GO 44741
45171: POP
45172: POP
// end ;
45173: LD_VAR 0 3
45177: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45178: LD_INT 0
45180: PPUSH
45181: PPUSH
45182: PPUSH
// if not unit or IsInUnit ( unit ) then
45183: LD_VAR 0 1
45187: NOT
45188: IFTRUE 45201
45190: PUSH
45191: LD_VAR 0 1
45195: PPUSH
45196: CALL_OW 310
45200: OR
45201: IFFALSE 45205
// exit ;
45203: GO 45296
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45205: LD_ADDR_VAR 0 4
45209: PUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 250
45219: PPUSH
45220: LD_VAR 0 2
45224: PPUSH
45225: LD_INT 1
45227: PPUSH
45228: CALL_OW 272
45232: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45233: LD_ADDR_VAR 0 5
45237: PUSH
45238: LD_VAR 0 1
45242: PPUSH
45243: CALL_OW 251
45247: PPUSH
45248: LD_VAR 0 2
45252: PPUSH
45253: LD_INT 1
45255: PPUSH
45256: CALL_OW 273
45260: ST_TO_ADDR
// if ValidHex ( x , y ) then
45261: LD_VAR 0 4
45265: PPUSH
45266: LD_VAR 0 5
45270: PPUSH
45271: CALL_OW 488
45275: IFFALSE 45296
// ComTurnXY ( unit , x , y ) ;
45277: LD_VAR 0 1
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: LD_VAR 0 5
45291: PPUSH
45292: CALL_OW 118
// end ;
45296: LD_VAR 0 3
45300: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45301: LD_INT 0
45303: PPUSH
45304: PPUSH
// result := false ;
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_INT 0
45312: ST_TO_ADDR
// if not units then
45313: LD_VAR 0 2
45317: NOT
45318: IFFALSE 45322
// exit ;
45320: GO 45367
// for i in units do
45322: LD_ADDR_VAR 0 4
45326: PUSH
45327: LD_VAR 0 2
45331: PUSH
45332: FOR_IN
45333: IFFALSE 45365
// if See ( side , i ) then
45335: LD_VAR 0 1
45339: PPUSH
45340: LD_VAR 0 4
45344: PPUSH
45345: CALL_OW 292
45349: IFFALSE 45363
// begin result := true ;
45351: LD_ADDR_VAR 0 3
45355: PUSH
45356: LD_INT 1
45358: ST_TO_ADDR
// exit ;
45359: POP
45360: POP
45361: GO 45367
// end ;
45363: GO 45332
45365: POP
45366: POP
// end ;
45367: LD_VAR 0 3
45371: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45372: LD_INT 0
45374: PPUSH
45375: PPUSH
45376: PPUSH
45377: PPUSH
// if not unit or not points then
45378: LD_VAR 0 1
45382: NOT
45383: IFTRUE 45392
45385: PUSH
45386: LD_VAR 0 2
45390: NOT
45391: OR
45392: IFFALSE 45396
// exit ;
45394: GO 45486
// dist := 99999 ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_INT 99999
45403: ST_TO_ADDR
// for i in points do
45404: LD_ADDR_VAR 0 4
45408: PUSH
45409: LD_VAR 0 2
45413: PUSH
45414: FOR_IN
45415: IFFALSE 45484
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45417: LD_ADDR_VAR 0 6
45421: PUSH
45422: LD_VAR 0 1
45426: PPUSH
45427: LD_VAR 0 4
45431: PUSH
45432: LD_INT 1
45434: ARRAY
45435: PPUSH
45436: LD_VAR 0 4
45440: PUSH
45441: LD_INT 2
45443: ARRAY
45444: PPUSH
45445: CALL_OW 297
45449: ST_TO_ADDR
// if tmpDist < dist then
45450: LD_VAR 0 6
45454: PUSH
45455: LD_VAR 0 5
45459: LESS
45460: IFFALSE 45482
// begin result := i ;
45462: LD_ADDR_VAR 0 3
45466: PUSH
45467: LD_VAR 0 4
45471: ST_TO_ADDR
// dist := tmpDist ;
45472: LD_ADDR_VAR 0 5
45476: PUSH
45477: LD_VAR 0 6
45481: ST_TO_ADDR
// end ; end ;
45482: GO 45414
45484: POP
45485: POP
// end ;
45486: LD_VAR 0 3
45490: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45491: LD_INT 0
45493: PPUSH
// uc_side := side ;
45494: LD_ADDR_OWVAR 20
45498: PUSH
45499: LD_VAR 0 1
45503: ST_TO_ADDR
// uc_nation := 3 ;
45504: LD_ADDR_OWVAR 21
45508: PUSH
45509: LD_INT 3
45511: ST_TO_ADDR
// vc_chassis := 25 ;
45512: LD_ADDR_OWVAR 37
45516: PUSH
45517: LD_INT 25
45519: ST_TO_ADDR
// vc_engine := engine_siberite ;
45520: LD_ADDR_OWVAR 39
45524: PUSH
45525: LD_INT 3
45527: ST_TO_ADDR
// vc_control := control_computer ;
45528: LD_ADDR_OWVAR 38
45532: PUSH
45533: LD_INT 3
45535: ST_TO_ADDR
// vc_weapon := 59 ;
45536: LD_ADDR_OWVAR 40
45540: PUSH
45541: LD_INT 59
45543: ST_TO_ADDR
// result := CreateVehicle ;
45544: LD_ADDR_VAR 0 5
45548: PUSH
45549: CALL_OW 45
45553: ST_TO_ADDR
// SetDir ( result , d ) ;
45554: LD_VAR 0 5
45558: PPUSH
45559: LD_VAR 0 4
45563: PPUSH
45564: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45568: LD_VAR 0 5
45572: PPUSH
45573: LD_VAR 0 2
45577: PPUSH
45578: LD_VAR 0 3
45582: PPUSH
45583: LD_INT 0
45585: PPUSH
45586: CALL_OW 48
// end ;
45590: LD_VAR 0 5
45594: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45595: LD_INT 0
45597: PPUSH
45598: PPUSH
45599: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45600: LD_ADDR_VAR 0 2
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45623: LD_VAR 0 1
45627: NOT
45628: IFTRUE 45661
45630: PUSH
45631: LD_VAR 0 1
45635: PPUSH
45636: CALL_OW 264
45640: PUSH
45641: LD_INT 12
45643: PUSH
45644: LD_INT 51
45646: PUSH
45647: LD_INT 32
45649: PUSH
45650: LD_INT 89
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: IN
45659: NOT
45660: OR
45661: IFFALSE 45665
// exit ;
45663: GO 45763
// for i := 1 to 3 do
45665: LD_ADDR_VAR 0 3
45669: PUSH
45670: DOUBLE
45671: LD_INT 1
45673: DEC
45674: ST_TO_ADDR
45675: LD_INT 3
45677: PUSH
45678: FOR_TO
45679: IFFALSE 45761
// begin tmp := GetCargo ( cargo , i ) ;
45681: LD_ADDR_VAR 0 4
45685: PUSH
45686: LD_VAR 0 1
45690: PPUSH
45691: LD_VAR 0 3
45695: PPUSH
45696: CALL_OW 289
45700: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45701: LD_ADDR_VAR 0 2
45705: PUSH
45706: LD_VAR 0 2
45710: PPUSH
45711: LD_VAR 0 3
45715: PPUSH
45716: LD_VAR 0 4
45720: PPUSH
45721: CALL_OW 1
45725: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45726: LD_ADDR_VAR 0 2
45730: PUSH
45731: LD_VAR 0 2
45735: PPUSH
45736: LD_INT 4
45738: PPUSH
45739: LD_VAR 0 2
45743: PUSH
45744: LD_INT 4
45746: ARRAY
45747: PUSH
45748: LD_VAR 0 4
45752: PLUS
45753: PPUSH
45754: CALL_OW 1
45758: ST_TO_ADDR
// end ;
45759: GO 45678
45761: POP
45762: POP
// end ;
45763: LD_VAR 0 2
45767: RET
// export function Length ( array ) ; begin
45768: LD_INT 0
45770: PPUSH
// result := array + 0 ;
45771: LD_ADDR_VAR 0 2
45775: PUSH
45776: LD_VAR 0 1
45780: PUSH
45781: LD_INT 0
45783: PLUS
45784: ST_TO_ADDR
// end ;
45785: LD_VAR 0 2
45789: RET
// export function PrepareArray ( array ) ; begin
45790: LD_INT 0
45792: PPUSH
// result := array diff 0 ;
45793: LD_ADDR_VAR 0 2
45797: PUSH
45798: LD_VAR 0 1
45802: PUSH
45803: LD_INT 0
45805: DIFF
45806: ST_TO_ADDR
// if not result [ 1 ] then
45807: LD_VAR 0 2
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: NOT
45816: IFFALSE 45836
// result := Delete ( result , 1 ) ;
45818: LD_ADDR_VAR 0 2
45822: PUSH
45823: LD_VAR 0 2
45827: PPUSH
45828: LD_INT 1
45830: PPUSH
45831: CALL_OW 3
45835: ST_TO_ADDR
// end ;
45836: LD_VAR 0 2
45840: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45841: LD_INT 0
45843: PPUSH
45844: PPUSH
45845: PPUSH
45846: PPUSH
// sibRocketRange := 25 ;
45847: LD_ADDR_VAR 0 6
45851: PUSH
45852: LD_INT 25
45854: ST_TO_ADDR
// result := false ;
45855: LD_ADDR_VAR 0 4
45859: PUSH
45860: LD_INT 0
45862: ST_TO_ADDR
// for i := 0 to 5 do
45863: LD_ADDR_VAR 0 5
45867: PUSH
45868: DOUBLE
45869: LD_INT 0
45871: DEC
45872: ST_TO_ADDR
45873: LD_INT 5
45875: PUSH
45876: FOR_TO
45877: IFFALSE 45944
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45879: LD_VAR 0 1
45883: PPUSH
45884: LD_VAR 0 5
45888: PPUSH
45889: LD_VAR 0 6
45893: PPUSH
45894: CALL_OW 272
45898: PPUSH
45899: LD_VAR 0 2
45903: PPUSH
45904: LD_VAR 0 5
45908: PPUSH
45909: LD_VAR 0 6
45913: PPUSH
45914: CALL_OW 273
45918: PPUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: CALL_OW 309
45928: IFFALSE 45942
// begin result := true ;
45930: LD_ADDR_VAR 0 4
45934: PUSH
45935: LD_INT 1
45937: ST_TO_ADDR
// exit ;
45938: POP
45939: POP
45940: GO 45946
// end ;
45942: GO 45876
45944: POP
45945: POP
// end ;
45946: LD_VAR 0 4
45950: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45951: LD_INT 0
45953: PPUSH
45954: PPUSH
45955: PPUSH
// if btype = b_depot then
45956: LD_VAR 0 2
45960: PUSH
45961: LD_INT 0
45963: EQUAL
45964: IFFALSE 45976
// begin result := true ;
45966: LD_ADDR_VAR 0 3
45970: PUSH
45971: LD_INT 1
45973: ST_TO_ADDR
// exit ;
45974: GO 46096
// end ; pom := GetBase ( depot ) ;
45976: LD_ADDR_VAR 0 4
45980: PUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 274
45990: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45991: LD_ADDR_VAR 0 5
45995: PUSH
45996: LD_VAR 0 2
46000: PPUSH
46001: LD_VAR 0 1
46005: PPUSH
46006: CALL_OW 248
46010: PPUSH
46011: CALL_OW 450
46015: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
46016: LD_ADDR_VAR 0 3
46020: PUSH
46021: LD_VAR 0 4
46025: PPUSH
46026: LD_INT 1
46028: PPUSH
46029: CALL_OW 275
46033: PUSH
46034: LD_VAR 0 5
46038: PUSH
46039: LD_INT 1
46041: ARRAY
46042: GREATEREQUAL
46043: IFFALSE 46069
46045: PUSH
46046: LD_VAR 0 4
46050: PPUSH
46051: LD_INT 2
46053: PPUSH
46054: CALL_OW 275
46058: PUSH
46059: LD_VAR 0 5
46063: PUSH
46064: LD_INT 2
46066: ARRAY
46067: GREATEREQUAL
46068: AND
46069: IFFALSE 46095
46071: PUSH
46072: LD_VAR 0 4
46076: PPUSH
46077: LD_INT 3
46079: PPUSH
46080: CALL_OW 275
46084: PUSH
46085: LD_VAR 0 5
46089: PUSH
46090: LD_INT 3
46092: ARRAY
46093: GREATEREQUAL
46094: AND
46095: ST_TO_ADDR
// end ;
46096: LD_VAR 0 3
46100: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46101: LD_INT 0
46103: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46104: LD_VAR 0 1
46108: PPUSH
46109: LD_VAR 0 2
46113: PPUSH
46114: LD_INT 0
46116: PPUSH
46117: LD_INT 0
46119: PPUSH
46120: LD_INT 1
46122: PPUSH
46123: LD_INT 0
46125: PPUSH
46126: CALL_OW 587
// end ;
46130: LD_VAR 0 3
46134: RET
// export function CenterOnNow ( unit ) ; begin
46135: LD_INT 0
46137: PPUSH
// result := IsInUnit ( unit ) ;
46138: LD_ADDR_VAR 0 2
46142: PUSH
46143: LD_VAR 0 1
46147: PPUSH
46148: CALL_OW 310
46152: ST_TO_ADDR
// if not result then
46153: LD_VAR 0 2
46157: NOT
46158: IFFALSE 46170
// result := unit ;
46160: LD_ADDR_VAR 0 2
46164: PUSH
46165: LD_VAR 0 1
46169: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46170: LD_VAR 0 1
46174: PPUSH
46175: CALL_OW 87
// end ;
46179: LD_VAR 0 2
46183: RET
// export function ComMoveHex ( unit , hex ) ; begin
46184: LD_INT 0
46186: PPUSH
// if not hex then
46187: LD_VAR 0 2
46191: NOT
46192: IFFALSE 46196
// exit ;
46194: GO 46249
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46196: LD_VAR 0 2
46200: PUSH
46201: LD_INT 1
46203: ARRAY
46204: PPUSH
46205: LD_VAR 0 2
46209: PUSH
46210: LD_INT 2
46212: ARRAY
46213: PPUSH
46214: CALL_OW 428
46218: IFFALSE 46222
// exit ;
46220: GO 46249
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46222: LD_VAR 0 1
46226: PPUSH
46227: LD_VAR 0 2
46231: PUSH
46232: LD_INT 1
46234: ARRAY
46235: PPUSH
46236: LD_VAR 0 2
46240: PUSH
46241: LD_INT 2
46243: ARRAY
46244: PPUSH
46245: CALL_OW 111
// end ;
46249: LD_VAR 0 3
46253: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46254: LD_INT 0
46256: PPUSH
46257: PPUSH
46258: PPUSH
// if not unit or not enemy then
46259: LD_VAR 0 1
46263: NOT
46264: IFTRUE 46273
46266: PUSH
46267: LD_VAR 0 2
46271: NOT
46272: OR
46273: IFFALSE 46277
// exit ;
46275: GO 46403
// x := GetX ( enemy ) ;
46277: LD_ADDR_VAR 0 4
46281: PUSH
46282: LD_VAR 0 2
46286: PPUSH
46287: CALL_OW 250
46291: ST_TO_ADDR
// y := GetY ( enemy ) ;
46292: LD_ADDR_VAR 0 5
46296: PUSH
46297: LD_VAR 0 2
46301: PPUSH
46302: CALL_OW 251
46306: ST_TO_ADDR
// if ValidHex ( x , y ) then
46307: LD_VAR 0 4
46311: PPUSH
46312: LD_VAR 0 5
46316: PPUSH
46317: CALL_OW 488
46321: IFFALSE 46403
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46323: LD_VAR 0 2
46327: PPUSH
46328: CALL_OW 247
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: IN
46343: IFTRUE 46366
46345: PUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: CALL_OW 255
46355: PPUSH
46356: LD_VAR 0 2
46360: PPUSH
46361: CALL_OW 292
46365: OR
46366: IFFALSE 46384
// ComAttackUnit ( unit , enemy ) else
46368: LD_VAR 0 1
46372: PPUSH
46373: LD_VAR 0 2
46377: PPUSH
46378: CALL_OW 115
46382: GO 46403
// ComAgressiveMove ( unit , x , y ) ;
46384: LD_VAR 0 1
46388: PPUSH
46389: LD_VAR 0 4
46393: PPUSH
46394: LD_VAR 0 5
46398: PPUSH
46399: CALL_OW 114
// end ;
46403: LD_VAR 0 3
46407: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46408: LD_INT 0
46410: PPUSH
46411: PPUSH
46412: PPUSH
// list := AreaToList ( area , 0 ) ;
46413: LD_ADDR_VAR 0 5
46417: PUSH
46418: LD_VAR 0 1
46422: PPUSH
46423: LD_INT 0
46425: PPUSH
46426: CALL_OW 517
46430: ST_TO_ADDR
// if not list then
46431: LD_VAR 0 5
46435: NOT
46436: IFFALSE 46440
// exit ;
46438: GO 46570
// if all then
46440: LD_VAR 0 2
46444: IFFALSE 46532
// begin for i := 1 to list [ 1 ] do
46446: LD_ADDR_VAR 0 4
46450: PUSH
46451: DOUBLE
46452: LD_INT 1
46454: DEC
46455: ST_TO_ADDR
46456: LD_VAR 0 5
46460: PUSH
46461: LD_INT 1
46463: ARRAY
46464: PUSH
46465: FOR_TO
46466: IFFALSE 46528
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46468: LD_ADDR_VAR 0 3
46472: PUSH
46473: LD_VAR 0 3
46477: PPUSH
46478: LD_VAR 0 3
46482: PUSH
46483: LD_INT 1
46485: PLUS
46486: PPUSH
46487: LD_VAR 0 5
46491: PUSH
46492: LD_INT 1
46494: ARRAY
46495: PUSH
46496: LD_VAR 0 4
46500: ARRAY
46501: PUSH
46502: LD_VAR 0 5
46506: PUSH
46507: LD_INT 2
46509: ARRAY
46510: PUSH
46511: LD_VAR 0 4
46515: ARRAY
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PPUSH
46521: CALL_OW 1
46525: ST_TO_ADDR
46526: GO 46465
46528: POP
46529: POP
// exit ;
46530: GO 46570
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46532: LD_ADDR_VAR 0 3
46536: PUSH
46537: LD_VAR 0 5
46541: PUSH
46542: LD_INT 1
46544: ARRAY
46545: PUSH
46546: LD_INT 1
46548: ARRAY
46549: PUSH
46550: LD_VAR 0 5
46554: PUSH
46555: LD_INT 2
46557: ARRAY
46558: PUSH
46559: LD_INT 1
46561: ARRAY
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: ST_TO_ADDR
// end ;
46570: LD_VAR 0 3
46574: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46575: LD_INT 0
46577: PPUSH
46578: PPUSH
// list := AreaToList ( area , 0 ) ;
46579: LD_ADDR_VAR 0 4
46583: PUSH
46584: LD_VAR 0 1
46588: PPUSH
46589: LD_INT 0
46591: PPUSH
46592: CALL_OW 517
46596: ST_TO_ADDR
// if not list then
46597: LD_VAR 0 4
46601: NOT
46602: IFFALSE 46606
// exit ;
46604: GO 46647
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46606: LD_ADDR_VAR 0 3
46610: PUSH
46611: LD_VAR 0 4
46615: PUSH
46616: LD_INT 1
46618: ARRAY
46619: PUSH
46620: LD_INT 1
46622: ARRAY
46623: PUSH
46624: LD_VAR 0 4
46628: PUSH
46629: LD_INT 2
46631: ARRAY
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: PUSH
46637: LD_VAR 0 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// end ;
46647: LD_VAR 0 3
46651: RET
// export function First ( array ) ; begin
46652: LD_INT 0
46654: PPUSH
// if not array then
46655: LD_VAR 0 1
46659: NOT
46660: IFFALSE 46664
// exit ;
46662: GO 46678
// result := array [ 1 ] ;
46664: LD_ADDR_VAR 0 2
46668: PUSH
46669: LD_VAR 0 1
46673: PUSH
46674: LD_INT 1
46676: ARRAY
46677: ST_TO_ADDR
// end ;
46678: LD_VAR 0 2
46682: RET
// export function Last ( array ) ; begin
46683: LD_INT 0
46685: PPUSH
// if not array then
46686: LD_VAR 0 1
46690: NOT
46691: IFFALSE 46695
// exit ;
46693: GO 46711
// result := array [ array ] ;
46695: LD_ADDR_VAR 0 2
46699: PUSH
46700: LD_VAR 0 1
46704: PUSH
46705: LD_VAR 0 1
46709: ARRAY
46710: ST_TO_ADDR
// end ;
46711: LD_VAR 0 2
46715: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46716: LD_INT 0
46718: PPUSH
46719: PPUSH
// result := [ ] ;
46720: LD_ADDR_VAR 0 5
46724: PUSH
46725: EMPTY
46726: ST_TO_ADDR
// if not array then
46727: LD_VAR 0 1
46731: NOT
46732: IFFALSE 46736
// exit ;
46734: GO 46848
// for i := 1 to array do
46736: LD_ADDR_VAR 0 6
46740: PUSH
46741: DOUBLE
46742: LD_INT 1
46744: DEC
46745: ST_TO_ADDR
46746: LD_VAR 0 1
46750: PUSH
46751: FOR_TO
46752: IFFALSE 46846
// if array [ i ] [ index ] = value then
46754: LD_VAR 0 1
46758: PUSH
46759: LD_VAR 0 6
46763: ARRAY
46764: PUSH
46765: LD_VAR 0 2
46769: ARRAY
46770: PUSH
46771: LD_VAR 0 3
46775: EQUAL
46776: IFFALSE 46844
// begin if indexColumn then
46778: LD_VAR 0 4
46782: IFFALSE 46818
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46784: LD_ADDR_VAR 0 5
46788: PUSH
46789: LD_VAR 0 5
46793: PPUSH
46794: LD_VAR 0 1
46798: PUSH
46799: LD_VAR 0 6
46803: ARRAY
46804: PUSH
46805: LD_VAR 0 4
46809: ARRAY
46810: PPUSH
46811: CALL 41856 0 2
46815: ST_TO_ADDR
46816: GO 46844
// result := Join ( result , array [ i ] ) ;
46818: LD_ADDR_VAR 0 5
46822: PUSH
46823: LD_VAR 0 5
46827: PPUSH
46828: LD_VAR 0 1
46832: PUSH
46833: LD_VAR 0 6
46837: ARRAY
46838: PPUSH
46839: CALL 41856 0 2
46843: ST_TO_ADDR
// end ;
46844: GO 46751
46846: POP
46847: POP
// end ;
46848: LD_VAR 0 5
46852: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46853: LD_INT 0
46855: PPUSH
// if not vehicles or not parkingPoint then
46856: LD_VAR 0 1
46860: NOT
46861: IFTRUE 46870
46863: PUSH
46864: LD_VAR 0 2
46868: NOT
46869: OR
46870: IFFALSE 46874
// exit ;
46872: GO 46972
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46874: LD_ADDR_VAR 0 1
46878: PUSH
46879: LD_VAR 0 1
46883: PPUSH
46884: LD_INT 50
46886: PUSH
46887: EMPTY
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: PUSH
46893: LD_INT 92
46895: PUSH
46896: LD_VAR 0 2
46900: PUSH
46901: LD_INT 1
46903: ARRAY
46904: PUSH
46905: LD_VAR 0 2
46909: PUSH
46910: LD_INT 2
46912: ARRAY
46913: PUSH
46914: LD_INT 8
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PPUSH
46931: CALL_OW 72
46935: ST_TO_ADDR
// if not vehicles then
46936: LD_VAR 0 1
46940: NOT
46941: IFFALSE 46945
// exit ;
46943: GO 46972
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46945: LD_VAR 0 1
46949: PPUSH
46950: LD_VAR 0 2
46954: PUSH
46955: LD_INT 1
46957: ARRAY
46958: PPUSH
46959: LD_VAR 0 2
46963: PUSH
46964: LD_INT 2
46966: ARRAY
46967: PPUSH
46968: CALL_OW 111
// end ;
46972: LD_VAR 0 3
46976: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46977: LD_INT 0
46979: PPUSH
46980: PPUSH
46981: PPUSH
// if not side or not area then
46982: LD_VAR 0 1
46986: NOT
46987: IFTRUE 46996
46989: PUSH
46990: LD_VAR 0 2
46994: NOT
46995: OR
46996: IFFALSE 47000
// exit ;
46998: GO 47119
// tmp := AreaToList ( area , 0 ) ;
47000: LD_ADDR_VAR 0 5
47004: PUSH
47005: LD_VAR 0 2
47009: PPUSH
47010: LD_INT 0
47012: PPUSH
47013: CALL_OW 517
47017: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
47018: LD_ADDR_VAR 0 4
47022: PUSH
47023: DOUBLE
47024: LD_INT 1
47026: DEC
47027: ST_TO_ADDR
47028: LD_VAR 0 5
47032: PUSH
47033: LD_INT 1
47035: ARRAY
47036: PUSH
47037: FOR_TO
47038: IFFALSE 47117
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
47040: LD_VAR 0 5
47044: PUSH
47045: LD_INT 1
47047: ARRAY
47048: PUSH
47049: LD_VAR 0 4
47053: ARRAY
47054: PPUSH
47055: LD_VAR 0 5
47059: PUSH
47060: LD_INT 2
47062: ARRAY
47063: PUSH
47064: LD_VAR 0 4
47068: ARRAY
47069: PPUSH
47070: CALL_OW 351
47074: IFFALSE 47115
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47076: LD_VAR 0 5
47080: PUSH
47081: LD_INT 1
47083: ARRAY
47084: PUSH
47085: LD_VAR 0 4
47089: ARRAY
47090: PPUSH
47091: LD_VAR 0 5
47095: PUSH
47096: LD_INT 2
47098: ARRAY
47099: PUSH
47100: LD_VAR 0 4
47104: ARRAY
47105: PPUSH
47106: LD_VAR 0 1
47110: PPUSH
47111: CALL_OW 244
// end ;
47115: GO 47037
47117: POP
47118: POP
// end ;
47119: LD_VAR 0 3
47123: RET
// export function UniqueArray ( array ) ; var i ; begin
47124: LD_INT 0
47126: PPUSH
47127: PPUSH
// result := [ ] ;
47128: LD_ADDR_VAR 0 2
47132: PUSH
47133: EMPTY
47134: ST_TO_ADDR
// if not array then
47135: LD_VAR 0 1
47139: NOT
47140: IFFALSE 47144
// exit ;
47142: GO 47205
// for i := 1 to array do
47144: LD_ADDR_VAR 0 3
47148: PUSH
47149: DOUBLE
47150: LD_INT 1
47152: DEC
47153: ST_TO_ADDR
47154: LD_VAR 0 1
47158: PUSH
47159: FOR_TO
47160: IFFALSE 47203
// if not array [ i ] in result then
47162: LD_VAR 0 1
47166: PUSH
47167: LD_VAR 0 3
47171: ARRAY
47172: PUSH
47173: LD_VAR 0 2
47177: IN
47178: NOT
47179: IFFALSE 47201
// result := Join ( result , i ) ;
47181: LD_ADDR_VAR 0 2
47185: PUSH
47186: LD_VAR 0 2
47190: PPUSH
47191: LD_VAR 0 3
47195: PPUSH
47196: CALL 41856 0 2
47200: ST_TO_ADDR
47201: GO 47159
47203: POP
47204: POP
// end ;
47205: LD_VAR 0 2
47209: RET
