// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41341 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3650 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3650 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3650 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3650 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3650 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3650 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3650 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3650 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3650 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3650 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3650 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 41313 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3683
// unit := CreateCharacter ( prefix & ident ) else
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
3681: GO 3698
// unit := NewCharacter ( ident ) ;
3683: LD_ADDR_VAR 0 5
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 25
3697: ST_TO_ADDR
// result := unit ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_VAR 0 5
3707: ST_TO_ADDR
// end ;
3708: LD_VAR 0 4
3712: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
// if not side or not nation then
3717: LD_VAR 0 1
3721: NOT
3722: PUSH
3723: LD_VAR 0 2
3727: NOT
3728: OR
3729: IFFALSE 3733
// exit ;
3731: GO 4501
// case nation of nation_american :
3733: LD_VAR 0 2
3737: PUSH
3738: LD_INT 1
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3960
3746: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_INT 35
3754: PUSH
3755: LD_INT 45
3757: PUSH
3758: LD_INT 46
3760: PUSH
3761: LD_INT 47
3763: PUSH
3764: LD_INT 82
3766: PUSH
3767: LD_INT 83
3769: PUSH
3770: LD_INT 84
3772: PUSH
3773: LD_INT 85
3775: PUSH
3776: LD_INT 86
3778: PUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 6
3787: PUSH
3788: LD_INT 15
3790: PUSH
3791: LD_INT 16
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: LD_INT 13
3802: PUSH
3803: LD_INT 10
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: LD_INT 20
3811: PUSH
3812: LD_INT 21
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 25
3820: PUSH
3821: LD_INT 32
3823: PUSH
3824: LD_INT 27
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: LD_INT 69
3832: PUSH
3833: LD_INT 39
3835: PUSH
3836: LD_INT 34
3838: PUSH
3839: LD_INT 40
3841: PUSH
3842: LD_INT 48
3844: PUSH
3845: LD_INT 49
3847: PUSH
3848: LD_INT 50
3850: PUSH
3851: LD_INT 51
3853: PUSH
3854: LD_INT 52
3856: PUSH
3857: LD_INT 53
3859: PUSH
3860: LD_INT 54
3862: PUSH
3863: LD_INT 55
3865: PUSH
3866: LD_INT 56
3868: PUSH
3869: LD_INT 57
3871: PUSH
3872: LD_INT 58
3874: PUSH
3875: LD_INT 59
3877: PUSH
3878: LD_INT 60
3880: PUSH
3881: LD_INT 61
3883: PUSH
3884: LD_INT 62
3886: PUSH
3887: LD_INT 80
3889: PUSH
3890: LD_INT 82
3892: PUSH
3893: LD_INT 83
3895: PUSH
3896: LD_INT 84
3898: PUSH
3899: LD_INT 85
3901: PUSH
3902: LD_INT 86
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
3958: GO 4425
3960: LD_INT 2
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 4194
3968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 35
3976: PUSH
3977: LD_INT 45
3979: PUSH
3980: LD_INT 46
3982: PUSH
3983: LD_INT 47
3985: PUSH
3986: LD_INT 82
3988: PUSH
3989: LD_INT 83
3991: PUSH
3992: LD_INT 84
3994: PUSH
3995: LD_INT 85
3997: PUSH
3998: LD_INT 87
4000: PUSH
4001: LD_INT 70
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 11
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: LD_INT 6
4021: PUSH
4022: LD_INT 15
4024: PUSH
4025: LD_INT 18
4027: PUSH
4028: LD_INT 7
4030: PUSH
4031: LD_INT 17
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: LD_INT 20
4039: PUSH
4040: LD_INT 21
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_INT 72
4048: PUSH
4049: LD_INT 26
4051: PUSH
4052: LD_INT 69
4054: PUSH
4055: LD_INT 39
4057: PUSH
4058: LD_INT 40
4060: PUSH
4061: LD_INT 41
4063: PUSH
4064: LD_INT 42
4066: PUSH
4067: LD_INT 43
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: LD_INT 51
4081: PUSH
4082: LD_INT 52
4084: PUSH
4085: LD_INT 53
4087: PUSH
4088: LD_INT 54
4090: PUSH
4091: LD_INT 55
4093: PUSH
4094: LD_INT 56
4096: PUSH
4097: LD_INT 60
4099: PUSH
4100: LD_INT 61
4102: PUSH
4103: LD_INT 62
4105: PUSH
4106: LD_INT 66
4108: PUSH
4109: LD_INT 67
4111: PUSH
4112: LD_INT 68
4114: PUSH
4115: LD_INT 81
4117: PUSH
4118: LD_INT 82
4120: PUSH
4121: LD_INT 83
4123: PUSH
4124: LD_INT 84
4126: PUSH
4127: LD_INT 85
4129: PUSH
4130: LD_INT 87
4132: PUSH
4133: LD_INT 88
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
4192: GO 4425
4194: LD_INT 3
4196: DOUBLE
4197: EQUAL
4198: IFTRUE 4202
4200: GO 4424
4202: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_INT 46
4210: PUSH
4211: LD_INT 47
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: LD_INT 82
4222: PUSH
4223: LD_INT 83
4225: PUSH
4226: LD_INT 84
4228: PUSH
4229: LD_INT 85
4231: PUSH
4232: LD_INT 86
4234: PUSH
4235: LD_INT 11
4237: PUSH
4238: LD_INT 9
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 19
4246: PUSH
4247: LD_INT 21
4249: PUSH
4250: LD_INT 24
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 28
4261: PUSH
4262: LD_INT 29
4264: PUSH
4265: LD_INT 30
4267: PUSH
4268: LD_INT 31
4270: PUSH
4271: LD_INT 37
4273: PUSH
4274: LD_INT 38
4276: PUSH
4277: LD_INT 32
4279: PUSH
4280: LD_INT 27
4282: PUSH
4283: LD_INT 33
4285: PUSH
4286: LD_INT 69
4288: PUSH
4289: LD_INT 39
4291: PUSH
4292: LD_INT 34
4294: PUSH
4295: LD_INT 40
4297: PUSH
4298: LD_INT 71
4300: PUSH
4301: LD_INT 23
4303: PUSH
4304: LD_INT 44
4306: PUSH
4307: LD_INT 48
4309: PUSH
4310: LD_INT 49
4312: PUSH
4313: LD_INT 50
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 52
4321: PUSH
4322: LD_INT 53
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: LD_INT 55
4330: PUSH
4331: LD_INT 56
4333: PUSH
4334: LD_INT 57
4336: PUSH
4337: LD_INT 58
4339: PUSH
4340: LD_INT 59
4342: PUSH
4343: LD_INT 63
4345: PUSH
4346: LD_INT 64
4348: PUSH
4349: LD_INT 65
4351: PUSH
4352: LD_INT 82
4354: PUSH
4355: LD_INT 83
4357: PUSH
4358: LD_INT 84
4360: PUSH
4361: LD_INT 85
4363: PUSH
4364: LD_INT 86
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: ST_TO_ADDR
4422: GO 4425
4424: POP
// if state > - 1 and state < 3 then
4425: LD_VAR 0 3
4429: PUSH
4430: LD_INT 1
4432: NEG
4433: GREATER
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4501
// for i in result do
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 4
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4499
// if GetTech ( i , side ) <> state then
4459: LD_VAR 0 5
4463: PPUSH
4464: LD_VAR 0 1
4468: PPUSH
4469: CALL_OW 321
4473: PUSH
4474: LD_VAR 0 3
4478: NONEQUAL
4479: IFFALSE 4497
// result := result diff i ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_VAR 0 4
4490: PUSH
4491: LD_VAR 0 5
4495: DIFF
4496: ST_TO_ADDR
4497: GO 4456
4499: POP
4500: POP
// end ;
4501: LD_VAR 0 4
4505: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// result := true ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 2
4528: PPUSH
4529: CALL_OW 480
4533: ST_TO_ADDR
// if not tmp then
4534: LD_VAR 0 5
4538: NOT
4539: IFFALSE 4543
// exit ;
4541: GO 4592
// for i in tmp do
4543: LD_ADDR_VAR 0 4
4547: PUSH
4548: LD_VAR 0 5
4552: PUSH
4553: FOR_IN
4554: IFFALSE 4590
// if GetTech ( i , side ) <> state_researched then
4556: LD_VAR 0 4
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 321
4570: PUSH
4571: LD_INT 2
4573: NONEQUAL
4574: IFFALSE 4588
// begin result := false ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 0
4583: ST_TO_ADDR
// exit ;
4584: POP
4585: POP
4586: GO 4592
// end ;
4588: GO 4553
4590: POP
4591: POP
// end ;
4592: LD_VAR 0 3
4596: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4612: LD_VAR 0 1
4616: NOT
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 257
4627: PUSH
4628: LD_INT 9
4630: NONEQUAL
4631: OR
4632: IFFALSE 4636
// exit ;
4634: GO 5209
// side := GetSide ( unit ) ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_VAR 0 1
4645: PPUSH
4646: CALL_OW 255
4650: ST_TO_ADDR
// tech_space := tech_spacanom ;
4651: LD_ADDR_VAR 0 12
4655: PUSH
4656: LD_INT 29
4658: ST_TO_ADDR
// tech_time := tech_taurad ;
4659: LD_ADDR_VAR 0 13
4663: PUSH
4664: LD_INT 28
4666: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4667: LD_ADDR_VAR 0 11
4671: PUSH
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 310
4681: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4682: LD_VAR 0 11
4686: PPUSH
4687: CALL_OW 247
4691: PUSH
4692: LD_INT 2
4694: EQUAL
4695: IFFALSE 4699
// exit ;
4697: GO 5209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4699: LD_ADDR_VAR 0 8
4703: PUSH
4704: LD_INT 81
4706: PUSH
4707: LD_VAR 0 9
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 21
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// if not tmp then
4742: LD_VAR 0 8
4746: NOT
4747: IFFALSE 4751
// exit ;
4749: GO 5209
// if in_unit then
4751: LD_VAR 0 11
4755: IFFALSE 4779
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 8
4766: PPUSH
4767: LD_VAR 0 11
4771: PPUSH
4772: CALL_OW 74
4776: ST_TO_ADDR
4777: GO 4799
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4779: LD_ADDR_VAR 0 10
4783: PUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: LD_VAR 0 1
4793: PPUSH
4794: CALL_OW 74
4798: ST_TO_ADDR
// if not enemy then
4799: LD_VAR 0 10
4803: NOT
4804: IFFALSE 4808
// exit ;
4806: GO 5209
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4808: LD_VAR 0 11
4812: PUSH
4813: LD_VAR 0 11
4817: PPUSH
4818: LD_VAR 0 10
4822: PPUSH
4823: CALL_OW 296
4827: PUSH
4828: LD_INT 13
4830: GREATER
4831: AND
4832: PUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_VAR 0 10
4842: PPUSH
4843: CALL_OW 296
4847: PUSH
4848: LD_INT 12
4850: GREATER
4851: OR
4852: IFFALSE 4856
// exit ;
4854: GO 5209
// missile := [ 1 ] ;
4856: LD_ADDR_VAR 0 14
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4867: LD_VAR 0 9
4871: PPUSH
4872: LD_VAR 0 12
4876: PPUSH
4877: CALL_OW 325
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 2 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 2
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4910: LD_VAR 0 9
4914: PPUSH
4915: LD_VAR 0 13
4919: PPUSH
4920: CALL_OW 325
4924: PUSH
4925: LD_VAR 0 10
4929: PPUSH
4930: CALL_OW 255
4934: PPUSH
4935: LD_VAR 0 13
4939: PPUSH
4940: CALL_OW 325
4944: NOT
4945: AND
4946: IFFALSE 4975
// missile := Replace ( missile , missile + 1 , 3 ) ;
4948: LD_ADDR_VAR 0 14
4952: PUSH
4953: LD_VAR 0 14
4957: PPUSH
4958: LD_VAR 0 14
4962: PUSH
4963: LD_INT 1
4965: PLUS
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 1
4974: ST_TO_ADDR
// if missile < 2 then
4975: LD_VAR 0 14
4979: PUSH
4980: LD_INT 2
4982: LESS
4983: IFFALSE 4987
// exit ;
4985: GO 5209
// x := GetX ( enemy ) ;
4987: LD_ADDR_VAR 0 4
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: CALL_OW 250
5001: ST_TO_ADDR
// y := GetY ( enemy ) ;
5002: LD_ADDR_VAR 0 5
5006: PUSH
5007: LD_VAR 0 10
5011: PPUSH
5012: CALL_OW 251
5016: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 4
5026: PUSH
5027: LD_INT 1
5029: NEG
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 12
5038: PLUS
5039: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5040: LD_ADDR_VAR 0 7
5044: PUSH
5045: LD_VAR 0 5
5049: PUSH
5050: LD_INT 1
5052: NEG
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 12
5061: PLUS
5062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: CALL_OW 488
5077: NOT
5078: IFFALSE 5100
// begin _x := x ;
5080: LD_ADDR_VAR 0 6
5084: PUSH
5085: LD_VAR 0 4
5089: ST_TO_ADDR
// _y := y ;
5090: LD_ADDR_VAR 0 7
5094: PUSH
5095: LD_VAR 0 5
5099: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_VAR 0 14
5112: PPUSH
5113: CALL_OW 12
5117: ST_TO_ADDR
// case i of 1 :
5118: LD_VAR 0 3
5122: PUSH
5123: LD_INT 1
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5148
5131: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_VAR 0 10
5141: PPUSH
5142: CALL_OW 115
5146: GO 5209
5148: LD_INT 2
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5178
5156: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_VAR 0 6
5166: PPUSH
5167: LD_VAR 0 7
5171: PPUSH
5172: CALL_OW 153
5176: GO 5209
5178: LD_INT 3
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5208
5186: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5187: LD_VAR 0 1
5191: PPUSH
5192: LD_VAR 0 6
5196: PPUSH
5197: LD_VAR 0 7
5201: PPUSH
5202: CALL_OW 154
5206: GO 5209
5208: POP
// end ;
5209: LD_VAR 0 2
5213: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5214: LD_INT 0
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
// if not unit or not building then
5222: LD_VAR 0 1
5226: NOT
5227: PUSH
5228: LD_VAR 0 2
5232: NOT
5233: OR
5234: IFFALSE 5238
// exit ;
5236: GO 5396
// x := GetX ( building ) ;
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: CALL_OW 250
5252: ST_TO_ADDR
// y := GetY ( building ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: CALL_OW 251
5267: ST_TO_ADDR
// for i = 0 to 5 do
5268: LD_ADDR_VAR 0 4
5272: PUSH
5273: DOUBLE
5274: LD_INT 0
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 5
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5394
// begin _x := ShiftX ( x , i , 3 ) ;
5284: LD_ADDR_VAR 0 7
5288: PUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: CALL_OW 272
5306: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5307: LD_ADDR_VAR 0 8
5311: PUSH
5312: LD_VAR 0 6
5316: PPUSH
5317: LD_VAR 0 4
5321: PPUSH
5322: LD_INT 3
5324: PPUSH
5325: CALL_OW 273
5329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5330: LD_VAR 0 7
5334: PPUSH
5335: LD_VAR 0 8
5339: PPUSH
5340: CALL_OW 488
5344: NOT
5345: IFFALSE 5349
// continue ;
5347: GO 5281
// if HexInfo ( _x , _y ) = 0 then
5349: LD_VAR 0 7
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: CALL_OW 428
5363: PUSH
5364: LD_INT 0
5366: EQUAL
5367: IFFALSE 5392
// begin ComMoveXY ( unit , _x , _y ) ;
5369: LD_VAR 0 1
5373: PPUSH
5374: LD_VAR 0 7
5378: PPUSH
5379: LD_VAR 0 8
5383: PPUSH
5384: CALL_OW 111
// exit ;
5388: POP
5389: POP
5390: GO 5396
// end ; end ;
5392: GO 5281
5394: POP
5395: POP
// end ;
5396: LD_VAR 0 3
5400: RET
// export function ScanBase ( side , base_area ) ; begin
5401: LD_INT 0
5403: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 81
5416: PUSH
5417: LD_VAR 0 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: ST_TO_ADDR
// end ;
5431: LD_VAR 0 3
5435: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
// result := false ;
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 0
5449: ST_TO_ADDR
// side := GetSide ( unit ) ;
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_VAR 0 1
5459: PPUSH
5460: CALL_OW 255
5464: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PPUSH
5475: CALL_OW 248
5479: ST_TO_ADDR
// case nat of 1 :
5480: LD_VAR 0 4
5484: PUSH
5485: LD_INT 1
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5504
5493: POP
// tech := tech_lassight ; 2 :
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_INT 12
5501: ST_TO_ADDR
5502: GO 5543
5504: LD_INT 2
5506: DOUBLE
5507: EQUAL
5508: IFTRUE 5512
5510: GO 5523
5512: POP
// tech := tech_mortar ; 3 :
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: LD_INT 41
5520: ST_TO_ADDR
5521: GO 5543
5523: LD_INT 3
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5542
5531: POP
// tech := tech_bazooka ; end ;
5532: LD_ADDR_VAR 0 5
5536: PUSH
5537: LD_INT 44
5539: ST_TO_ADDR
5540: GO 5543
5542: POP
// if Researched ( side , tech ) then
5543: LD_VAR 0 3
5547: PPUSH
5548: LD_VAR 0 5
5552: PPUSH
5553: CALL_OW 325
5557: IFFALSE 5584
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_VAR 0 4
5582: ARRAY
5583: ST_TO_ADDR
// end ;
5584: LD_VAR 0 2
5588: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
// if not mines then
5594: LD_VAR 0 2
5598: NOT
5599: IFFALSE 5603
// exit ;
5601: GO 5747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: LD_INT 81
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 3
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 69
5645: ST_TO_ADDR
// for i in mines do
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_VAR 0 2
5655: PUSH
5656: FOR_IN
5657: IFFALSE 5745
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5659: LD_VAR 0 4
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_VAR 0 4
5672: PUSH
5673: LD_INT 2
5675: ARRAY
5676: PPUSH
5677: CALL_OW 458
5681: NOT
5682: IFFALSE 5686
// continue ;
5684: GO 5656
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5686: LD_VAR 0 4
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 4
5699: PUSH
5700: LD_INT 2
5702: ARRAY
5703: PPUSH
5704: CALL_OW 428
5708: PUSH
5709: LD_VAR 0 5
5713: IN
5714: IFFALSE 5743
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PPUSH
5725: LD_VAR 0 4
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PPUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 456
// end ;
5743: GO 5656
5745: POP
5746: POP
// end ;
5747: LD_VAR 0 3
5751: RET
// export function Count ( array ) ; begin
5752: LD_INT 0
5754: PPUSH
// result := array + 0 ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 0
5767: PLUS
5768: ST_TO_ADDR
// end ;
5769: LD_VAR 0 2
5773: RET
// export function IsEmpty ( building ) ; begin
5774: LD_INT 0
5776: PPUSH
// if not building then
5777: LD_VAR 0 1
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 5829
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_VAR 0 1
5795: PUSH
5796: LD_INT 22
5798: PUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 255
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 58
5815: PUSH
5816: EMPTY
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: IN
5828: ST_TO_ADDR
// end ;
5829: LD_VAR 0 2
5833: RET
// export function IsNotFull ( building ) ; var places ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
// if not building then
5838: LD_VAR 0 1
5842: NOT
5843: IFFALSE 5847
// exit ;
5845: GO 5875
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 62
5862: PUSH
5863: EMPTY
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// end ;
5875: LD_VAR 0 2
5879: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// tmp := [ ] ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: EMPTY
5892: ST_TO_ADDR
// list := [ ] ;
5893: LD_ADDR_VAR 0 5
5897: PUSH
5898: EMPTY
5899: ST_TO_ADDR
// for i = 16 to 25 do
5900: LD_ADDR_VAR 0 4
5904: PUSH
5905: DOUBLE
5906: LD_INT 16
5908: DEC
5909: ST_TO_ADDR
5910: LD_INT 25
5912: PUSH
5913: FOR_TO
5914: IFFALSE 5987
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_VAR 0 1
5933: PPUSH
5934: CALL_OW 255
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 91
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_INT 6
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 30
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: PUSH
5976: EMPTY
5977: LIST
5978: PPUSH
5979: CALL_OW 69
5983: ADD
5984: ST_TO_ADDR
5985: GO 5913
5987: POP
5988: POP
// for i = 1 to tmp do
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_VAR 0 3
6003: PUSH
6004: FOR_TO
6005: IFFALSE 6093
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 5
6016: PUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_VAR 0 4
6026: ARRAY
6027: PPUSH
6028: CALL_OW 266
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: LD_VAR 0 4
6042: ARRAY
6043: PPUSH
6044: CALL_OW 250
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_VAR 0 4
6058: ARRAY
6059: PPUSH
6060: CALL_OW 251
6064: PUSH
6065: LD_VAR 0 3
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: PPUSH
6076: CALL_OW 254
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: ADD
6090: ST_TO_ADDR
6091: GO 6004
6093: POP
6094: POP
// result := list ;
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_VAR 0 5
6104: ST_TO_ADDR
// end ;
6105: LD_VAR 0 2
6109: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
// if not factory then
6119: LD_VAR 0 1
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6721
// if control = control_apeman then
6128: LD_VAR 0 4
6132: PUSH
6133: LD_INT 5
6135: EQUAL
6136: IFFALSE 6245
// begin tmp := UnitsInside ( factory ) ;
6138: LD_ADDR_VAR 0 8
6142: PUSH
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 313
6152: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6153: LD_VAR 0 8
6157: PPUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 12
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL_OW 72
6172: NOT
6173: IFFALSE 6183
// control := control_manual ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6183: LD_ADDR_VAR 0 8
6187: PUSH
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL 5880 0 1
6197: ST_TO_ADDR
// if tmp then
6198: LD_VAR 0 8
6202: IFFALSE 6245
// begin for i in tmp do
6204: LD_ADDR_VAR 0 7
6208: PUSH
6209: LD_VAR 0 8
6213: PUSH
6214: FOR_IN
6215: IFFALSE 6243
// if i [ 1 ] = b_ext_radio then
6217: LD_VAR 0 7
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PUSH
6226: LD_INT 22
6228: EQUAL
6229: IFFALSE 6241
// begin control := control_remote ;
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_INT 2
6238: ST_TO_ADDR
// break ;
6239: GO 6243
// end ;
6241: GO 6214
6243: POP
6244: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_VAR 0 2
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: LD_VAR 0 4
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: CALL_OW 448
6274: IFFALSE 6309
// begin result := [ chassis , engine , control , weapon ] ;
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_VAR 0 3
6290: PUSH
6291: LD_VAR 0 4
6295: PUSH
6296: LD_VAR 0 5
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: ST_TO_ADDR
// exit ;
6307: GO 6721
// end ; _chassis := AvailableChassisList ( factory ) ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 475
6323: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6324: LD_ADDR_VAR 0 11
6328: PUSH
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 476
6338: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6339: LD_ADDR_VAR 0 12
6343: PUSH
6344: LD_VAR 0 1
6348: PPUSH
6349: CALL_OW 477
6353: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6354: LD_ADDR_VAR 0 10
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 478
6368: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6369: LD_VAR 0 9
6373: NOT
6374: PUSH
6375: LD_VAR 0 11
6379: NOT
6380: OR
6381: PUSH
6382: LD_VAR 0 12
6386: NOT
6387: OR
6388: PUSH
6389: LD_VAR 0 10
6393: NOT
6394: OR
6395: IFFALSE 6430
// begin result := [ chassis , engine , control , weapon ] ;
6397: LD_ADDR_VAR 0 6
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_VAR 0 3
6411: PUSH
6412: LD_VAR 0 4
6416: PUSH
6417: LD_VAR 0 5
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: ST_TO_ADDR
// exit ;
6428: GO 6721
// end ; if not chassis in _chassis then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_VAR 0 9
6439: IN
6440: NOT
6441: IFFALSE 6467
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 9
6452: PUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_VAR 0 9
6460: PPUSH
6461: CALL_OW 12
6465: ARRAY
6466: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: CALL 6726 0 2
6481: NOT
6482: IFFALSE 6541
// repeat engine := _engine [ 1 ] ;
6484: LD_ADDR_VAR 0 3
6488: PUSH
6489: LD_VAR 0 11
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6498: LD_ADDR_VAR 0 11
6502: PUSH
6503: LD_VAR 0 11
6507: PPUSH
6508: LD_INT 1
6510: PPUSH
6511: CALL_OW 3
6515: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: CALL 6726 0 2
6530: PUSH
6531: LD_VAR 0 11
6535: PUSH
6536: EMPTY
6537: EQUAL
6538: OR
6539: IFFALSE 6484
// if not control in _control then
6541: LD_VAR 0 4
6545: PUSH
6546: LD_VAR 0 12
6550: IN
6551: NOT
6552: IFFALSE 6578
// control := _control [ rand ( 1 , _control ) ] ;
6554: LD_ADDR_VAR 0 4
6558: PUSH
6559: LD_VAR 0 12
6563: PUSH
6564: LD_INT 1
6566: PPUSH
6567: LD_VAR 0 12
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 5
6587: PPUSH
6588: CALL 6946 0 2
6592: NOT
6593: IFFALSE 6652
// repeat weapon := _weapon [ 1 ] ;
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: LD_VAR 0 10
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6609: LD_ADDR_VAR 0 10
6613: PUSH
6614: LD_VAR 0 10
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: CALL_OW 3
6626: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6627: LD_VAR 0 2
6631: PPUSH
6632: LD_VAR 0 5
6636: PPUSH
6637: CALL 6946 0 2
6641: PUSH
6642: LD_VAR 0 10
6646: PUSH
6647: EMPTY
6648: EQUAL
6649: OR
6650: IFFALSE 6595
// result := [ ] ;
6652: LD_ADDR_VAR 0 6
6656: PUSH
6657: EMPTY
6658: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6659: LD_VAR 0 1
6663: PPUSH
6664: LD_VAR 0 2
6668: PPUSH
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_VAR 0 4
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL_OW 448
6688: IFFALSE 6721
// result := [ chassis , engine , control , weapon ] ;
6690: LD_ADDR_VAR 0 6
6694: PUSH
6695: LD_VAR 0 2
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: LD_VAR 0 4
6709: PUSH
6710: LD_VAR 0 5
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// end ;
6721: LD_VAR 0 6
6725: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6726: LD_INT 0
6728: PPUSH
// if not chassis or not engine then
6729: LD_VAR 0 1
6733: NOT
6734: PUSH
6735: LD_VAR 0 2
6739: NOT
6740: OR
6741: IFFALSE 6745
// exit ;
6743: GO 6941
// case engine of engine_solar :
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6796
6758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 11
6766: PUSH
6767: LD_INT 12
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: LD_INT 1
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: ST_TO_ADDR
6794: GO 6925
6796: LD_INT 1
6798: DOUBLE
6799: EQUAL
6800: IFTRUE 6804
6802: GO 6866
6804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6805: LD_ADDR_VAR 0 3
6809: PUSH
6810: LD_INT 11
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 13
6818: PUSH
6819: LD_INT 14
6821: PUSH
6822: LD_INT 1
6824: PUSH
6825: LD_INT 2
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 4
6833: PUSH
6834: LD_INT 5
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 24
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 6925
6866: LD_INT 3
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6924
6874: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 13
6882: PUSH
6883: LD_INT 14
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 24
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 6925
6924: POP
// result := ( chassis in result ) ;
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_VAR 0 3
6939: IN
6940: ST_TO_ADDR
// end ;
6941: LD_VAR 0 3
6945: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6946: LD_INT 0
6948: PPUSH
// if not chassis or not weapon then
6949: LD_VAR 0 1
6953: NOT
6954: PUSH
6955: LD_VAR 0 2
6959: NOT
6960: OR
6961: IFFALSE 6965
// exit ;
6963: GO 8025
// case weapon of us_machine_gun :
6965: LD_VAR 0 2
6969: PUSH
6970: LD_INT 2
6972: DOUBLE
6973: EQUAL
6974: IFTRUE 6978
6976: GO 7008
6978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6979: LD_ADDR_VAR 0 3
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 8009
7008: LD_INT 3
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7046
7016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
7044: GO 8009
7046: LD_INT 11
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7084
7054: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
7082: GO 8009
7084: LD_INT 4
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7118
7092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 8009
7118: LD_INT 5
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7152
7126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 3
7137: PUSH
7138: LD_INT 4
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
7150: GO 8009
7152: LD_INT 9
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7186
7160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 3
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 8009
7186: LD_INT 7
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7220
7194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: LD_INT 5
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 8009
7220: LD_INT 12
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7254
7228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
7252: GO 8009
7254: LD_INT 13
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7288
7262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: ST_TO_ADDR
7286: GO 8009
7288: LD_INT 14
7290: DOUBLE
7291: EQUAL
7292: IFTRUE 7296
7294: GO 7314
7296: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: ST_TO_ADDR
7312: GO 8009
7314: LD_INT 6
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7340
7322: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7323: LD_ADDR_VAR 0 3
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 8009
7340: LD_INT 10
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7366
7348: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 4
7356: PUSH
7357: LD_INT 5
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: ST_TO_ADDR
7364: GO 8009
7366: LD_INT 22
7368: DOUBLE
7369: EQUAL
7370: IFTRUE 7374
7372: GO 7400
7374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 11
7382: PUSH
7383: LD_INT 12
7385: PUSH
7386: LD_INT 13
7388: PUSH
7389: LD_INT 14
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 8009
7400: LD_INT 23
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7434
7408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 11
7416: PUSH
7417: LD_INT 12
7419: PUSH
7420: LD_INT 13
7422: PUSH
7423: LD_INT 14
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 8009
7434: LD_INT 24
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7468
7442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: LD_INT 13
7456: PUSH
7457: LD_INT 14
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
7466: GO 8009
7468: LD_INT 30
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7502
7476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
7500: GO 8009
7502: LD_INT 25
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7528
7510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: ST_TO_ADDR
7526: GO 8009
7528: LD_INT 27
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7554
7536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7537: LD_ADDR_VAR 0 3
7541: PUSH
7542: LD_INT 13
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
7552: GO 8009
7554: LD_INT 92
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7588
7562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_INT 11
7570: PUSH
7571: LD_INT 12
7573: PUSH
7574: LD_INT 13
7576: PUSH
7577: LD_INT 14
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: ST_TO_ADDR
7586: GO 8009
7588: LD_INT 28
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7614
7596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_INT 13
7604: PUSH
7605: LD_INT 14
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 8009
7614: LD_INT 29
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7640
7622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 13
7630: PUSH
7631: LD_INT 14
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: ST_TO_ADDR
7638: GO 8009
7640: LD_INT 31
7642: DOUBLE
7643: EQUAL
7644: IFTRUE 7648
7646: GO 7666
7648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: LD_INT 13
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
7664: GO 8009
7666: LD_INT 26
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7692
7674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 13
7682: PUSH
7683: LD_INT 14
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: ST_TO_ADDR
7690: GO 8009
7692: LD_INT 42
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7726
7700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7701: LD_ADDR_VAR 0 3
7705: PUSH
7706: LD_INT 21
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 23
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
7724: GO 8009
7726: LD_INT 43
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7760
7734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 21
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_INT 23
7748: PUSH
7749: LD_INT 24
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: ST_TO_ADDR
7758: GO 8009
7760: LD_INT 44
7762: DOUBLE
7763: EQUAL
7764: IFTRUE 7768
7766: GO 7794
7768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 21
7776: PUSH
7777: LD_INT 22
7779: PUSH
7780: LD_INT 23
7782: PUSH
7783: LD_INT 24
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
7792: GO 8009
7794: LD_INT 45
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7828
7802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 23
7816: PUSH
7817: LD_INT 24
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
7826: GO 8009
7828: LD_INT 49
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 7862
7836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 21
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_INT 23
7850: PUSH
7851: LD_INT 24
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 8009
7862: LD_INT 51
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7896
7870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 8009
7896: LD_INT 52
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 7930
7904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7905: LD_ADDR_VAR 0 3
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: ST_TO_ADDR
7928: GO 8009
7930: LD_INT 53
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7956
7938: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 23
7946: PUSH
7947: LD_INT 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: ST_TO_ADDR
7954: GO 8009
7956: LD_INT 46
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7982
7964: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_INT 23
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 8009
7982: LD_INT 47
7984: DOUBLE
7985: EQUAL
7986: IFTRUE 7990
7988: GO 8008
7990: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: ST_TO_ADDR
8006: GO 8009
8008: POP
// result := ( chassis in result ) ;
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_VAR 0 1
8018: PUSH
8019: LD_VAR 0 3
8023: IN
8024: ST_TO_ADDR
// end ;
8025: LD_VAR 0 3
8029: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8030: LD_INT 0
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
8037: PPUSH
8038: PPUSH
// result := array ;
8039: LD_ADDR_VAR 0 5
8043: PUSH
8044: LD_VAR 0 1
8048: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8049: LD_VAR 0 1
8053: NOT
8054: PUSH
8055: LD_VAR 0 2
8059: NOT
8060: OR
8061: PUSH
8062: LD_VAR 0 3
8066: NOT
8067: OR
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 1
8078: GREATER
8079: OR
8080: PUSH
8081: LD_VAR 0 3
8085: PUSH
8086: LD_VAR 0 1
8090: GREATER
8091: OR
8092: IFFALSE 8096
// exit ;
8094: GO 8392
// if direction then
8096: LD_VAR 0 4
8100: IFFALSE 8164
// begin d := 1 ;
8102: LD_ADDR_VAR 0 9
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// if i_from > i_to then
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 3
8119: GREATER
8120: IFFALSE 8146
// length := ( array - i_from ) + i_to else
8122: LD_ADDR_VAR 0 11
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: LD_VAR 0 2
8136: MINUS
8137: PUSH
8138: LD_VAR 0 3
8142: PLUS
8143: ST_TO_ADDR
8144: GO 8162
// length := i_to - i_from ;
8146: LD_ADDR_VAR 0 11
8150: PUSH
8151: LD_VAR 0 3
8155: PUSH
8156: LD_VAR 0 2
8160: MINUS
8161: ST_TO_ADDR
// end else
8162: GO 8225
// begin d := - 1 ;
8164: LD_ADDR_VAR 0 9
8168: PUSH
8169: LD_INT 1
8171: NEG
8172: ST_TO_ADDR
// if i_from > i_to then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_VAR 0 3
8182: GREATER
8183: IFFALSE 8203
// length := i_from - i_to else
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: LD_VAR 0 3
8199: MINUS
8200: ST_TO_ADDR
8201: GO 8225
// length := ( array - i_to ) + i_from ;
8203: LD_ADDR_VAR 0 11
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: LD_VAR 0 3
8217: MINUS
8218: PUSH
8219: LD_VAR 0 2
8223: PLUS
8224: ST_TO_ADDR
// end ; if not length then
8225: LD_VAR 0 11
8229: NOT
8230: IFFALSE 8234
// exit ;
8232: GO 8392
// tmp := array ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: LD_VAR 0 1
8243: ST_TO_ADDR
// for i = 1 to length do
8244: LD_ADDR_VAR 0 6
8248: PUSH
8249: DOUBLE
8250: LD_INT 1
8252: DEC
8253: ST_TO_ADDR
8254: LD_VAR 0 11
8258: PUSH
8259: FOR_TO
8260: IFFALSE 8380
// begin for j = 1 to array do
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 1
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8366
// begin k := j + d ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_VAR 0 7
8289: PUSH
8290: LD_VAR 0 9
8294: PLUS
8295: ST_TO_ADDR
// if k > array then
8296: LD_VAR 0 8
8300: PUSH
8301: LD_VAR 0 1
8305: GREATER
8306: IFFALSE 8316
// k := 1 ;
8308: LD_ADDR_VAR 0 8
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if not k then
8316: LD_VAR 0 8
8320: NOT
8321: IFFALSE 8333
// k := array ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_VAR 0 1
8332: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8333: LD_ADDR_VAR 0 10
8337: PUSH
8338: LD_VAR 0 10
8342: PPUSH
8343: LD_VAR 0 8
8347: PPUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_VAR 0 7
8357: ARRAY
8358: PPUSH
8359: CALL_OW 1
8363: ST_TO_ADDR
// end ;
8364: GO 8277
8366: POP
8367: POP
// array := tmp ;
8368: LD_ADDR_VAR 0 1
8372: PUSH
8373: LD_VAR 0 10
8377: ST_TO_ADDR
// end ;
8378: GO 8259
8380: POP
8381: POP
// result := array ;
8382: LD_ADDR_VAR 0 5
8386: PUSH
8387: LD_VAR 0 1
8391: ST_TO_ADDR
// end ;
8392: LD_VAR 0 5
8396: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
// result := 0 ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// if not array or not value in array then
8409: LD_VAR 0 1
8413: NOT
8414: PUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_VAR 0 1
8424: IN
8425: NOT
8426: OR
8427: IFFALSE 8431
// exit ;
8429: GO 8485
// for i = 1 to array do
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: DOUBLE
8437: LD_INT 1
8439: DEC
8440: ST_TO_ADDR
8441: LD_VAR 0 1
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8483
// if value = array [ i ] then
8449: LD_VAR 0 2
8453: PUSH
8454: LD_VAR 0 1
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: EQUAL
8465: IFFALSE 8481
// begin result := i ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_VAR 0 4
8476: ST_TO_ADDR
// exit ;
8477: POP
8478: POP
8479: GO 8485
// end ;
8481: GO 8446
8483: POP
8484: POP
// end ;
8485: LD_VAR 0 3
8489: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8490: LD_INT 0
8492: PPUSH
// vc_chassis := chassis ;
8493: LD_ADDR_OWVAR 37
8497: PUSH
8498: LD_VAR 0 1
8502: ST_TO_ADDR
// vc_engine := engine ;
8503: LD_ADDR_OWVAR 39
8507: PUSH
8508: LD_VAR 0 2
8512: ST_TO_ADDR
// vc_control := control ;
8513: LD_ADDR_OWVAR 38
8517: PUSH
8518: LD_VAR 0 3
8522: ST_TO_ADDR
// vc_weapon := weapon ;
8523: LD_ADDR_OWVAR 40
8527: PUSH
8528: LD_VAR 0 4
8532: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8533: LD_ADDR_OWVAR 41
8537: PUSH
8538: LD_VAR 0 5
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 6
8547: RET
// export function WantPlant ( unit ) ; var task ; begin
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
// result := false ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 437
8574: ST_TO_ADDR
// if task then
8575: LD_VAR 0 3
8579: IFFALSE 8607
// if task [ 1 ] [ 1 ] = p then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PUSH
8594: LD_STRING p
8596: EQUAL
8597: IFFALSE 8607
// result := true ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// end ;
8607: LD_VAR 0 2
8611: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// if pos < 1 then
8618: LD_VAR 0 2
8622: PUSH
8623: LD_INT 1
8625: LESS
8626: IFFALSE 8630
// exit ;
8628: GO 8933
// if pos = 1 then
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: EQUAL
8638: IFFALSE 8671
// result := Replace ( arr , pos [ 1 ] , value ) else
8640: LD_ADDR_VAR 0 4
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 2
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PPUSH
8659: LD_VAR 0 3
8663: PPUSH
8664: CALL_OW 1
8668: ST_TO_ADDR
8669: GO 8933
// begin tmp := arr ;
8671: LD_ADDR_VAR 0 6
8675: PUSH
8676: LD_VAR 0 1
8680: ST_TO_ADDR
// s_arr := [ tmp ] ;
8681: LD_ADDR_VAR 0 7
8685: PUSH
8686: LD_VAR 0 6
8690: PUSH
8691: EMPTY
8692: LIST
8693: ST_TO_ADDR
// for i = 1 to pos - 1 do
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: DOUBLE
8700: LD_INT 1
8702: DEC
8703: ST_TO_ADDR
8704: LD_VAR 0 2
8708: PUSH
8709: LD_INT 1
8711: MINUS
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8759
// begin tmp := tmp [ pos [ i ] ] ;
8716: LD_ADDR_VAR 0 6
8720: PUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_VAR 0 2
8730: PUSH
8731: LD_VAR 0 5
8735: ARRAY
8736: ARRAY
8737: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8738: LD_ADDR_VAR 0 7
8742: PUSH
8743: LD_VAR 0 7
8747: PUSH
8748: LD_VAR 0 6
8752: PUSH
8753: EMPTY
8754: LIST
8755: ADD
8756: ST_TO_ADDR
// end ;
8757: GO 8713
8759: POP
8760: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 6
8770: PPUSH
8771: LD_VAR 0 2
8775: PUSH
8776: LD_VAR 0 2
8780: ARRAY
8781: PPUSH
8782: LD_VAR 0 3
8786: PPUSH
8787: CALL_OW 1
8791: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: LD_VAR 0 7
8801: PPUSH
8802: LD_VAR 0 7
8806: PPUSH
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 1
8816: ST_TO_ADDR
// for i = s_arr downto 2 do
8817: LD_ADDR_VAR 0 5
8821: PUSH
8822: DOUBLE
8823: LD_VAR 0 7
8827: INC
8828: ST_TO_ADDR
8829: LD_INT 2
8831: PUSH
8832: FOR_DOWNTO
8833: IFFALSE 8917
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8835: LD_ADDR_VAR 0 6
8839: PUSH
8840: LD_VAR 0 7
8844: PUSH
8845: LD_VAR 0 5
8849: PUSH
8850: LD_INT 1
8852: MINUS
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_INT 1
8867: MINUS
8868: ARRAY
8869: PPUSH
8870: LD_VAR 0 7
8874: PUSH
8875: LD_VAR 0 5
8879: ARRAY
8880: PPUSH
8881: CALL_OW 1
8885: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: LD_VAR 0 7
8895: PPUSH
8896: LD_VAR 0 5
8900: PUSH
8901: LD_INT 1
8903: MINUS
8904: PPUSH
8905: LD_VAR 0 6
8909: PPUSH
8910: CALL_OW 1
8914: ST_TO_ADDR
// end ;
8915: GO 8832
8917: POP
8918: POP
// result := s_arr [ 1 ] ;
8919: LD_ADDR_VAR 0 4
8923: PUSH
8924: LD_VAR 0 7
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: ST_TO_ADDR
// end ; end ;
8933: LD_VAR 0 4
8937: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// if not list then
8942: LD_VAR 0 1
8946: NOT
8947: IFFALSE 8951
// exit ;
8949: GO 9042
// i := list [ pos1 ] ;
8951: LD_ADDR_VAR 0 5
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: LD_VAR 0 2
8965: ARRAY
8966: ST_TO_ADDR
// if not i then
8967: LD_VAR 0 5
8971: NOT
8972: IFFALSE 8976
// exit ;
8974: GO 9042
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: LD_VAR 0 1
8985: PPUSH
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_VAR 0 1
8995: PUSH
8996: LD_VAR 0 3
9000: ARRAY
9001: PPUSH
9002: CALL_OW 1
9006: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9007: LD_ADDR_VAR 0 1
9011: PUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_VAR 0 3
9021: PPUSH
9022: LD_VAR 0 5
9026: PPUSH
9027: CALL_OW 1
9031: ST_TO_ADDR
// result := list ;
9032: LD_ADDR_VAR 0 4
9036: PUSH
9037: LD_VAR 0 1
9041: ST_TO_ADDR
// end ;
9042: LD_VAR 0 4
9046: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9047: LD_INT 0
9049: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9050: LD_ADDR_VAR 0 5
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 250
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 251
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL 9468 0 5
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 5
9099: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9100: LD_INT 0
9102: PPUSH
9103: PPUSH
9104: PPUSH
9105: PPUSH
// if not list or not unit then
9106: LD_VAR 0 2
9110: NOT
9111: PUSH
9112: LD_VAR 0 1
9116: NOT
9117: OR
9118: IFFALSE 9122
// exit ;
9120: GO 9463
// result := [ ] ;
9122: LD_ADDR_VAR 0 5
9126: PUSH
9127: EMPTY
9128: ST_TO_ADDR
// for i in list do
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 2
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9358
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9142: LD_ADDR_VAR 0 8
9146: PUSH
9147: LD_VAR 0 1
9151: PPUSH
9152: LD_VAR 0 6
9156: PUSH
9157: LD_INT 1
9159: ARRAY
9160: PPUSH
9161: LD_VAR 0 6
9165: PUSH
9166: LD_INT 2
9168: ARRAY
9169: PPUSH
9170: CALL_OW 297
9174: ST_TO_ADDR
// if not Count ( result ) then
9175: LD_VAR 0 5
9179: PPUSH
9180: CALL 5752 0 1
9184: NOT
9185: IFFALSE 9218
// begin result := Join ( result , [ i , tmp ] ) ;
9187: LD_ADDR_VAR 0 5
9191: PUSH
9192: LD_VAR 0 5
9196: PPUSH
9197: LD_VAR 0 6
9201: PUSH
9202: LD_VAR 0 8
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL 41341 0 2
9215: ST_TO_ADDR
// continue ;
9216: GO 9139
// end ; if result [ result ] [ 2 ] <= tmp then
9218: LD_VAR 0 5
9222: PUSH
9223: LD_VAR 0 5
9227: ARRAY
9228: PUSH
9229: LD_INT 2
9231: ARRAY
9232: PUSH
9233: LD_VAR 0 8
9237: LESSEQUAL
9238: IFFALSE 9271
// result := Join ( result , [ i , tmp ] ) else
9240: LD_ADDR_VAR 0 5
9244: PUSH
9245: LD_VAR 0 5
9249: PPUSH
9250: LD_VAR 0 6
9254: PUSH
9255: LD_VAR 0 8
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL 41341 0 2
9268: ST_TO_ADDR
9269: GO 9356
// begin for j := 1 to Count ( result ) do
9271: LD_ADDR_VAR 0 7
9275: PUSH
9276: DOUBLE
9277: LD_INT 1
9279: DEC
9280: ST_TO_ADDR
9281: LD_VAR 0 5
9285: PPUSH
9286: CALL 5752 0 1
9290: PUSH
9291: FOR_TO
9292: IFFALSE 9354
// begin if tmp < result [ j ] [ 2 ] then
9294: LD_VAR 0 8
9298: PUSH
9299: LD_VAR 0 5
9303: PUSH
9304: LD_VAR 0 7
9308: ARRAY
9309: PUSH
9310: LD_INT 2
9312: ARRAY
9313: LESS
9314: IFFALSE 9352
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9316: LD_ADDR_VAR 0 5
9320: PUSH
9321: LD_VAR 0 5
9325: PPUSH
9326: LD_VAR 0 7
9330: PPUSH
9331: LD_VAR 0 6
9335: PUSH
9336: LD_VAR 0 8
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 2
9349: ST_TO_ADDR
// break ;
9350: GO 9354
// end ; end ;
9352: GO 9291
9354: POP
9355: POP
// end ; end ;
9356: GO 9139
9358: POP
9359: POP
// if result and not asc then
9360: LD_VAR 0 5
9364: PUSH
9365: LD_VAR 0 3
9369: NOT
9370: AND
9371: IFFALSE 9388
// result := ReverseArray ( result ) ;
9373: LD_ADDR_VAR 0 5
9377: PUSH
9378: LD_VAR 0 5
9382: PPUSH
9383: CALL 36628 0 1
9387: ST_TO_ADDR
// tmp := [ ] ;
9388: LD_ADDR_VAR 0 8
9392: PUSH
9393: EMPTY
9394: ST_TO_ADDR
// if mode then
9395: LD_VAR 0 4
9399: IFFALSE 9463
// begin for i := 1 to result do
9401: LD_ADDR_VAR 0 6
9405: PUSH
9406: DOUBLE
9407: LD_INT 1
9409: DEC
9410: ST_TO_ADDR
9411: LD_VAR 0 5
9415: PUSH
9416: FOR_TO
9417: IFFALSE 9451
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9419: LD_ADDR_VAR 0 8
9423: PUSH
9424: LD_VAR 0 8
9428: PPUSH
9429: LD_VAR 0 5
9433: PUSH
9434: LD_VAR 0 6
9438: ARRAY
9439: PUSH
9440: LD_INT 1
9442: ARRAY
9443: PPUSH
9444: CALL 41341 0 2
9448: ST_TO_ADDR
9449: GO 9416
9451: POP
9452: POP
// result := tmp ;
9453: LD_ADDR_VAR 0 5
9457: PUSH
9458: LD_VAR 0 8
9462: ST_TO_ADDR
// end ; end ;
9463: LD_VAR 0 5
9467: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
9472: PPUSH
9473: PPUSH
// if not list then
9474: LD_VAR 0 3
9478: NOT
9479: IFFALSE 9483
// exit ;
9481: GO 9871
// result := [ ] ;
9483: LD_ADDR_VAR 0 6
9487: PUSH
9488: EMPTY
9489: ST_TO_ADDR
// for i in list do
9490: LD_ADDR_VAR 0 7
9494: PUSH
9495: LD_VAR 0 3
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9703
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9503: LD_ADDR_VAR 0 9
9507: PUSH
9508: LD_VAR 0 7
9512: PPUSH
9513: LD_VAR 0 1
9517: PPUSH
9518: LD_VAR 0 2
9522: PPUSH
9523: CALL_OW 297
9527: ST_TO_ADDR
// if not result then
9528: LD_VAR 0 6
9532: NOT
9533: IFFALSE 9559
// result := [ [ i , tmp ] ] else
9535: LD_ADDR_VAR 0 6
9539: PUSH
9540: LD_VAR 0 7
9544: PUSH
9545: LD_VAR 0 9
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: EMPTY
9555: LIST
9556: ST_TO_ADDR
9557: GO 9701
// begin if result [ result ] [ 2 ] < tmp then
9559: LD_VAR 0 6
9563: PUSH
9564: LD_VAR 0 6
9568: ARRAY
9569: PUSH
9570: LD_INT 2
9572: ARRAY
9573: PUSH
9574: LD_VAR 0 9
9578: LESS
9579: IFFALSE 9621
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9581: LD_ADDR_VAR 0 6
9585: PUSH
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_VAR 0 6
9595: PUSH
9596: LD_INT 1
9598: PLUS
9599: PPUSH
9600: LD_VAR 0 7
9604: PUSH
9605: LD_VAR 0 9
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 2
9618: ST_TO_ADDR
9619: GO 9701
// for j = 1 to result do
9621: LD_ADDR_VAR 0 8
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_VAR 0 6
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9699
// begin if tmp < result [ j ] [ 2 ] then
9639: LD_VAR 0 9
9643: PUSH
9644: LD_VAR 0 6
9648: PUSH
9649: LD_VAR 0 8
9653: ARRAY
9654: PUSH
9655: LD_INT 2
9657: ARRAY
9658: LESS
9659: IFFALSE 9697
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9661: LD_ADDR_VAR 0 6
9665: PUSH
9666: LD_VAR 0 6
9670: PPUSH
9671: LD_VAR 0 8
9675: PPUSH
9676: LD_VAR 0 7
9680: PUSH
9681: LD_VAR 0 9
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 2
9694: ST_TO_ADDR
// break ;
9695: GO 9699
// end ; end ;
9697: GO 9636
9699: POP
9700: POP
// end ; end ;
9701: GO 9500
9703: POP
9704: POP
// if result and not asc then
9705: LD_VAR 0 6
9709: PUSH
9710: LD_VAR 0 4
9714: NOT
9715: AND
9716: IFFALSE 9791
// begin tmp := result ;
9718: LD_ADDR_VAR 0 9
9722: PUSH
9723: LD_VAR 0 6
9727: ST_TO_ADDR
// for i = tmp downto 1 do
9728: LD_ADDR_VAR 0 7
9732: PUSH
9733: DOUBLE
9734: LD_VAR 0 9
9738: INC
9739: ST_TO_ADDR
9740: LD_INT 1
9742: PUSH
9743: FOR_DOWNTO
9744: IFFALSE 9789
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9746: LD_ADDR_VAR 0 6
9750: PUSH
9751: LD_VAR 0 6
9755: PPUSH
9756: LD_VAR 0 9
9760: PUSH
9761: LD_VAR 0 7
9765: MINUS
9766: PUSH
9767: LD_INT 1
9769: PLUS
9770: PPUSH
9771: LD_VAR 0 9
9775: PUSH
9776: LD_VAR 0 7
9780: ARRAY
9781: PPUSH
9782: CALL_OW 1
9786: ST_TO_ADDR
9787: GO 9743
9789: POP
9790: POP
// end ; tmp := [ ] ;
9791: LD_ADDR_VAR 0 9
9795: PUSH
9796: EMPTY
9797: ST_TO_ADDR
// if mode then
9798: LD_VAR 0 5
9802: IFFALSE 9871
// begin for i = 1 to result do
9804: LD_ADDR_VAR 0 7
9808: PUSH
9809: DOUBLE
9810: LD_INT 1
9812: DEC
9813: ST_TO_ADDR
9814: LD_VAR 0 6
9818: PUSH
9819: FOR_TO
9820: IFFALSE 9859
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9822: LD_ADDR_VAR 0 9
9826: PUSH
9827: LD_VAR 0 9
9831: PPUSH
9832: LD_VAR 0 7
9836: PPUSH
9837: LD_VAR 0 6
9841: PUSH
9842: LD_VAR 0 7
9846: ARRAY
9847: PUSH
9848: LD_INT 1
9850: ARRAY
9851: PPUSH
9852: CALL_OW 1
9856: ST_TO_ADDR
9857: GO 9819
9859: POP
9860: POP
// result := tmp ;
9861: LD_ADDR_VAR 0 6
9865: PUSH
9866: LD_VAR 0 9
9870: ST_TO_ADDR
// end ; end ;
9871: LD_VAR 0 6
9875: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9876: LD_INT 0
9878: PPUSH
9879: PPUSH
9880: PPUSH
9881: PPUSH
9882: PPUSH
9883: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9884: LD_ADDR_VAR 0 5
9888: PUSH
9889: LD_INT 0
9891: PUSH
9892: LD_INT 0
9894: PUSH
9895: LD_INT 0
9897: PUSH
9898: EMPTY
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: ST_TO_ADDR
// if not x or not y then
9906: LD_VAR 0 2
9910: NOT
9911: PUSH
9912: LD_VAR 0 3
9916: NOT
9917: OR
9918: IFFALSE 9922
// exit ;
9920: GO 11572
// if not range then
9922: LD_VAR 0 4
9926: NOT
9927: IFFALSE 9937
// range := 10 ;
9929: LD_ADDR_VAR 0 4
9933: PUSH
9934: LD_INT 10
9936: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9937: LD_ADDR_VAR 0 8
9941: PUSH
9942: LD_INT 81
9944: PUSH
9945: LD_VAR 0 1
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 92
9956: PUSH
9957: LD_VAR 0 2
9961: PUSH
9962: LD_VAR 0 3
9966: PUSH
9967: LD_VAR 0 4
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 21
9983: PUSH
9984: LD_INT 3
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 69
10004: ST_TO_ADDR
// if not tmp then
10005: LD_VAR 0 8
10009: NOT
10010: IFFALSE 10014
// exit ;
10012: GO 11572
// for i in tmp do
10014: LD_ADDR_VAR 0 6
10018: PUSH
10019: LD_VAR 0 8
10023: PUSH
10024: FOR_IN
10025: IFFALSE 11547
// begin points := [ 0 , 0 , 0 ] ;
10027: LD_ADDR_VAR 0 9
10031: PUSH
10032: LD_INT 0
10034: PUSH
10035: LD_INT 0
10037: PUSH
10038: LD_INT 0
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: ST_TO_ADDR
// bpoints := 1 ;
10046: LD_ADDR_VAR 0 10
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10054: LD_VAR 0 6
10058: PPUSH
10059: CALL_OW 247
10063: PUSH
10064: LD_INT 1
10066: DOUBLE
10067: EQUAL
10068: IFTRUE 10072
10070: GO 10650
10072: POP
// begin if GetClass ( i ) = 1 then
10073: LD_VAR 0 6
10077: PPUSH
10078: CALL_OW 257
10082: PUSH
10083: LD_INT 1
10085: EQUAL
10086: IFFALSE 10107
// points := [ 10 , 5 , 3 ] ;
10088: LD_ADDR_VAR 0 9
10092: PUSH
10093: LD_INT 10
10095: PUSH
10096: LD_INT 5
10098: PUSH
10099: LD_INT 3
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10107: LD_VAR 0 6
10111: PPUSH
10112: CALL_OW 257
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 4
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: IN
10131: IFFALSE 10152
// points := [ 3 , 2 , 1 ] ;
10133: LD_ADDR_VAR 0 9
10137: PUSH
10138: LD_INT 3
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10152: LD_VAR 0 6
10156: PPUSH
10157: CALL_OW 257
10161: PUSH
10162: LD_INT 5
10164: EQUAL
10165: IFFALSE 10186
// points := [ 130 , 5 , 2 ] ;
10167: LD_ADDR_VAR 0 9
10171: PUSH
10172: LD_INT 130
10174: PUSH
10175: LD_INT 5
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 257
10195: PUSH
10196: LD_INT 8
10198: EQUAL
10199: IFFALSE 10220
// points := [ 35 , 35 , 30 ] ;
10201: LD_ADDR_VAR 0 9
10205: PUSH
10206: LD_INT 35
10208: PUSH
10209: LD_INT 35
10211: PUSH
10212: LD_INT 30
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 257
10229: PUSH
10230: LD_INT 9
10232: EQUAL
10233: IFFALSE 10254
// points := [ 20 , 55 , 40 ] ;
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_INT 20
10242: PUSH
10243: LD_INT 55
10245: PUSH
10246: LD_INT 40
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10254: LD_VAR 0 6
10258: PPUSH
10259: CALL_OW 257
10263: PUSH
10264: LD_INT 12
10266: PUSH
10267: LD_INT 16
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: IN
10274: IFFALSE 10295
// points := [ 5 , 3 , 2 ] ;
10276: LD_ADDR_VAR 0 9
10280: PUSH
10281: LD_INT 5
10283: PUSH
10284: LD_INT 3
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10295: LD_VAR 0 6
10299: PPUSH
10300: CALL_OW 257
10304: PUSH
10305: LD_INT 17
10307: EQUAL
10308: IFFALSE 10329
// points := [ 100 , 50 , 75 ] ;
10310: LD_ADDR_VAR 0 9
10314: PUSH
10315: LD_INT 100
10317: PUSH
10318: LD_INT 50
10320: PUSH
10321: LD_INT 75
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10329: LD_VAR 0 6
10333: PPUSH
10334: CALL_OW 257
10338: PUSH
10339: LD_INT 15
10341: EQUAL
10342: IFFALSE 10363
// points := [ 10 , 5 , 3 ] ;
10344: LD_ADDR_VAR 0 9
10348: PUSH
10349: LD_INT 10
10351: PUSH
10352: LD_INT 5
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10363: LD_VAR 0 6
10367: PPUSH
10368: CALL_OW 257
10372: PUSH
10373: LD_INT 14
10375: EQUAL
10376: IFFALSE 10397
// points := [ 10 , 0 , 0 ] ;
10378: LD_ADDR_VAR 0 9
10382: PUSH
10383: LD_INT 10
10385: PUSH
10386: LD_INT 0
10388: PUSH
10389: LD_INT 0
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10397: LD_VAR 0 6
10401: PPUSH
10402: CALL_OW 257
10406: PUSH
10407: LD_INT 11
10409: EQUAL
10410: IFFALSE 10431
// points := [ 30 , 10 , 5 ] ;
10412: LD_ADDR_VAR 0 9
10416: PUSH
10417: LD_INT 30
10419: PUSH
10420: LD_INT 10
10422: PUSH
10423: LD_INT 5
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10431: LD_VAR 0 1
10435: PPUSH
10436: LD_INT 5
10438: PPUSH
10439: CALL_OW 321
10443: PUSH
10444: LD_INT 2
10446: EQUAL
10447: IFFALSE 10464
// bpoints := bpoints * 1.8 ;
10449: LD_ADDR_VAR 0 10
10453: PUSH
10454: LD_VAR 0 10
10458: PUSH
10459: LD_REAL  1.80000000000000E+0000
10462: MUL
10463: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL_OW 257
10473: PUSH
10474: LD_INT 1
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: LD_INT 3
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: IN
10492: PUSH
10493: LD_VAR 0 1
10497: PPUSH
10498: LD_INT 51
10500: PPUSH
10501: CALL_OW 321
10505: PUSH
10506: LD_INT 2
10508: EQUAL
10509: AND
10510: IFFALSE 10527
// bpoints := bpoints * 1.2 ;
10512: LD_ADDR_VAR 0 10
10516: PUSH
10517: LD_VAR 0 10
10521: PUSH
10522: LD_REAL  1.20000000000000E+0000
10525: MUL
10526: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10527: LD_VAR 0 6
10531: PPUSH
10532: CALL_OW 257
10536: PUSH
10537: LD_INT 5
10539: PUSH
10540: LD_INT 7
10542: PUSH
10543: LD_INT 9
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: IN
10551: PUSH
10552: LD_VAR 0 1
10556: PPUSH
10557: LD_INT 52
10559: PPUSH
10560: CALL_OW 321
10564: PUSH
10565: LD_INT 2
10567: EQUAL
10568: AND
10569: IFFALSE 10586
// bpoints := bpoints * 1.5 ;
10571: LD_ADDR_VAR 0 10
10575: PUSH
10576: LD_VAR 0 10
10580: PUSH
10581: LD_REAL  1.50000000000000E+0000
10584: MUL
10585: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10586: LD_VAR 0 1
10590: PPUSH
10591: LD_INT 66
10593: PPUSH
10594: CALL_OW 321
10598: PUSH
10599: LD_INT 2
10601: EQUAL
10602: IFFALSE 10619
// bpoints := bpoints * 1.1 ;
10604: LD_ADDR_VAR 0 10
10608: PUSH
10609: LD_VAR 0 10
10613: PUSH
10614: LD_REAL  1.10000000000000E+0000
10617: MUL
10618: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10619: LD_ADDR_VAR 0 10
10623: PUSH
10624: LD_VAR 0 10
10628: PUSH
10629: LD_VAR 0 6
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 259
10641: PUSH
10642: LD_REAL  1.15000000000000E+0000
10645: MUL
10646: MUL
10647: ST_TO_ADDR
// end ; unit_vehicle :
10648: GO 11476
10650: LD_INT 2
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 11464
10658: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10659: LD_VAR 0 6
10663: PPUSH
10664: CALL_OW 264
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: LD_INT 42
10674: PUSH
10675: LD_INT 24
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: IN
10683: IFFALSE 10704
// points := [ 25 , 5 , 3 ] ;
10685: LD_ADDR_VAR 0 9
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 5
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10704: LD_VAR 0 6
10708: PPUSH
10709: CALL_OW 264
10713: PUSH
10714: LD_INT 4
10716: PUSH
10717: LD_INT 43
10719: PUSH
10720: LD_INT 25
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: IN
10728: IFFALSE 10749
// points := [ 40 , 15 , 5 ] ;
10730: LD_ADDR_VAR 0 9
10734: PUSH
10735: LD_INT 40
10737: PUSH
10738: LD_INT 15
10740: PUSH
10741: LD_INT 5
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10749: LD_VAR 0 6
10753: PPUSH
10754: CALL_OW 264
10758: PUSH
10759: LD_INT 3
10761: PUSH
10762: LD_INT 23
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: IN
10769: IFFALSE 10790
// points := [ 7 , 25 , 8 ] ;
10771: LD_ADDR_VAR 0 9
10775: PUSH
10776: LD_INT 7
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 8
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10790: LD_VAR 0 6
10794: PPUSH
10795: CALL_OW 264
10799: PUSH
10800: LD_INT 5
10802: PUSH
10803: LD_INT 27
10805: PUSH
10806: LD_INT 44
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: IN
10814: IFFALSE 10835
// points := [ 14 , 50 , 16 ] ;
10816: LD_ADDR_VAR 0 9
10820: PUSH
10821: LD_INT 14
10823: PUSH
10824: LD_INT 50
10826: PUSH
10827: LD_INT 16
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10835: LD_VAR 0 6
10839: PPUSH
10840: CALL_OW 264
10844: PUSH
10845: LD_INT 6
10847: PUSH
10848: LD_INT 46
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: IN
10855: IFFALSE 10876
// points := [ 32 , 120 , 70 ] ;
10857: LD_ADDR_VAR 0 9
10861: PUSH
10862: LD_INT 32
10864: PUSH
10865: LD_INT 120
10867: PUSH
10868: LD_INT 70
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10876: LD_VAR 0 6
10880: PPUSH
10881: CALL_OW 264
10885: PUSH
10886: LD_INT 7
10888: PUSH
10889: LD_INT 28
10891: PUSH
10892: LD_INT 45
10894: PUSH
10895: LD_INT 92
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: IN
10904: IFFALSE 10925
// points := [ 35 , 20 , 45 ] ;
10906: LD_ADDR_VAR 0 9
10910: PUSH
10911: LD_INT 35
10913: PUSH
10914: LD_INT 20
10916: PUSH
10917: LD_INT 45
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10925: LD_VAR 0 6
10929: PPUSH
10930: CALL_OW 264
10934: PUSH
10935: LD_INT 47
10937: PUSH
10938: EMPTY
10939: LIST
10940: IN
10941: IFFALSE 10962
// points := [ 67 , 45 , 75 ] ;
10943: LD_ADDR_VAR 0 9
10947: PUSH
10948: LD_INT 67
10950: PUSH
10951: LD_INT 45
10953: PUSH
10954: LD_INT 75
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10962: LD_VAR 0 6
10966: PPUSH
10967: CALL_OW 264
10971: PUSH
10972: LD_INT 26
10974: PUSH
10975: EMPTY
10976: LIST
10977: IN
10978: IFFALSE 10999
// points := [ 120 , 30 , 80 ] ;
10980: LD_ADDR_VAR 0 9
10984: PUSH
10985: LD_INT 120
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: LD_INT 80
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10999: LD_VAR 0 6
11003: PPUSH
11004: CALL_OW 264
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: EMPTY
11013: LIST
11014: IN
11015: IFFALSE 11036
// points := [ 40 , 1 , 1 ] ;
11017: LD_ADDR_VAR 0 9
11021: PUSH
11022: LD_INT 40
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11036: LD_VAR 0 6
11040: PPUSH
11041: CALL_OW 264
11045: PUSH
11046: LD_INT 29
11048: PUSH
11049: EMPTY
11050: LIST
11051: IN
11052: IFFALSE 11073
// points := [ 70 , 200 , 400 ] ;
11054: LD_ADDR_VAR 0 9
11058: PUSH
11059: LD_INT 70
11061: PUSH
11062: LD_INT 200
11064: PUSH
11065: LD_INT 400
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11073: LD_VAR 0 6
11077: PPUSH
11078: CALL_OW 264
11082: PUSH
11083: LD_INT 14
11085: PUSH
11086: LD_INT 53
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: IN
11093: IFFALSE 11114
// points := [ 40 , 10 , 20 ] ;
11095: LD_ADDR_VAR 0 9
11099: PUSH
11100: LD_INT 40
11102: PUSH
11103: LD_INT 10
11105: PUSH
11106: LD_INT 20
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11114: LD_VAR 0 6
11118: PPUSH
11119: CALL_OW 264
11123: PUSH
11124: LD_INT 9
11126: PUSH
11127: EMPTY
11128: LIST
11129: IN
11130: IFFALSE 11151
// points := [ 5 , 70 , 20 ] ;
11132: LD_ADDR_VAR 0 9
11136: PUSH
11137: LD_INT 5
11139: PUSH
11140: LD_INT 70
11142: PUSH
11143: LD_INT 20
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11151: LD_VAR 0 6
11155: PPUSH
11156: CALL_OW 264
11160: PUSH
11161: LD_INT 10
11163: PUSH
11164: EMPTY
11165: LIST
11166: IN
11167: IFFALSE 11188
// points := [ 35 , 110 , 70 ] ;
11169: LD_ADDR_VAR 0 9
11173: PUSH
11174: LD_INT 35
11176: PUSH
11177: LD_INT 110
11179: PUSH
11180: LD_INT 70
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11188: LD_VAR 0 6
11192: PPUSH
11193: CALL_OW 265
11197: PUSH
11198: LD_INT 25
11200: EQUAL
11201: IFFALSE 11222
// points := [ 80 , 65 , 100 ] ;
11203: LD_ADDR_VAR 0 9
11207: PUSH
11208: LD_INT 80
11210: PUSH
11211: LD_INT 65
11213: PUSH
11214: LD_INT 100
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11222: LD_VAR 0 6
11226: PPUSH
11227: CALL_OW 263
11231: PUSH
11232: LD_INT 1
11234: EQUAL
11235: IFFALSE 11270
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11237: LD_ADDR_VAR 0 10
11241: PUSH
11242: LD_VAR 0 10
11246: PUSH
11247: LD_VAR 0 6
11251: PPUSH
11252: CALL_OW 311
11256: PPUSH
11257: LD_INT 3
11259: PPUSH
11260: CALL_OW 259
11264: PUSH
11265: LD_INT 4
11267: MUL
11268: MUL
11269: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11270: LD_VAR 0 6
11274: PPUSH
11275: CALL_OW 263
11279: PUSH
11280: LD_INT 2
11282: EQUAL
11283: IFFALSE 11334
// begin j := IsControledBy ( i ) ;
11285: LD_ADDR_VAR 0 7
11289: PUSH
11290: LD_VAR 0 6
11294: PPUSH
11295: CALL_OW 312
11299: ST_TO_ADDR
// if j then
11300: LD_VAR 0 7
11304: IFFALSE 11334
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11306: LD_ADDR_VAR 0 10
11310: PUSH
11311: LD_VAR 0 10
11315: PUSH
11316: LD_VAR 0 7
11320: PPUSH
11321: LD_INT 3
11323: PPUSH
11324: CALL_OW 259
11328: PUSH
11329: LD_INT 3
11331: MUL
11332: MUL
11333: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11334: LD_VAR 0 6
11338: PPUSH
11339: CALL_OW 264
11343: PUSH
11344: LD_INT 5
11346: PUSH
11347: LD_INT 6
11349: PUSH
11350: LD_INT 46
11352: PUSH
11353: LD_INT 44
11355: PUSH
11356: LD_INT 47
11358: PUSH
11359: LD_INT 45
11361: PUSH
11362: LD_INT 28
11364: PUSH
11365: LD_INT 7
11367: PUSH
11368: LD_INT 27
11370: PUSH
11371: LD_INT 29
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: IN
11386: PUSH
11387: LD_VAR 0 1
11391: PPUSH
11392: LD_INT 52
11394: PPUSH
11395: CALL_OW 321
11399: PUSH
11400: LD_INT 2
11402: EQUAL
11403: AND
11404: IFFALSE 11421
// bpoints := bpoints * 1.2 ;
11406: LD_ADDR_VAR 0 10
11410: PUSH
11411: LD_VAR 0 10
11415: PUSH
11416: LD_REAL  1.20000000000000E+0000
11419: MUL
11420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11421: LD_VAR 0 6
11425: PPUSH
11426: CALL_OW 264
11430: PUSH
11431: LD_INT 6
11433: PUSH
11434: LD_INT 46
11436: PUSH
11437: LD_INT 47
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: LIST
11444: IN
11445: IFFALSE 11462
// bpoints := bpoints * 1.2 ;
11447: LD_ADDR_VAR 0 10
11451: PUSH
11452: LD_VAR 0 10
11456: PUSH
11457: LD_REAL  1.20000000000000E+0000
11460: MUL
11461: ST_TO_ADDR
// end ; unit_building :
11462: GO 11476
11464: LD_INT 3
11466: DOUBLE
11467: EQUAL
11468: IFTRUE 11472
11470: GO 11475
11472: POP
// ; end ;
11473: GO 11476
11475: POP
// for j = 1 to 3 do
11476: LD_ADDR_VAR 0 7
11480: PUSH
11481: DOUBLE
11482: LD_INT 1
11484: DEC
11485: ST_TO_ADDR
11486: LD_INT 3
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11543
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11492: LD_ADDR_VAR 0 5
11496: PUSH
11497: LD_VAR 0 5
11501: PPUSH
11502: LD_VAR 0 7
11506: PPUSH
11507: LD_VAR 0 5
11511: PUSH
11512: LD_VAR 0 7
11516: ARRAY
11517: PUSH
11518: LD_VAR 0 9
11522: PUSH
11523: LD_VAR 0 7
11527: ARRAY
11528: PUSH
11529: LD_VAR 0 10
11533: MUL
11534: PLUS
11535: PPUSH
11536: CALL_OW 1
11540: ST_TO_ADDR
11541: GO 11489
11543: POP
11544: POP
// end ;
11545: GO 10024
11547: POP
11548: POP
// result := Replace ( result , 4 , tmp ) ;
11549: LD_ADDR_VAR 0 5
11553: PUSH
11554: LD_VAR 0 5
11558: PPUSH
11559: LD_INT 4
11561: PPUSH
11562: LD_VAR 0 8
11566: PPUSH
11567: CALL_OW 1
11571: ST_TO_ADDR
// end ;
11572: LD_VAR 0 5
11576: RET
// export function DangerAtRange ( unit , range ) ; begin
11577: LD_INT 0
11579: PPUSH
// if not unit then
11580: LD_VAR 0 1
11584: NOT
11585: IFFALSE 11589
// exit ;
11587: GO 11634
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11589: LD_ADDR_VAR 0 3
11593: PUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: CALL_OW 255
11603: PPUSH
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 250
11613: PPUSH
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 251
11623: PPUSH
11624: LD_VAR 0 2
11628: PPUSH
11629: CALL 9876 0 4
11633: ST_TO_ADDR
// end ;
11634: LD_VAR 0 3
11638: RET
// export function DangerInArea ( side , area ) ; begin
11639: LD_INT 0
11641: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_VAR 0 2
11651: PPUSH
11652: LD_INT 81
11654: PUSH
11655: LD_VAR 0 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: ST_TO_ADDR
// end ;
11669: LD_VAR 0 3
11673: RET
// export function IsExtension ( b ) ; begin
11674: LD_INT 0
11676: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11677: LD_ADDR_VAR 0 2
11681: PUSH
11682: LD_VAR 0 1
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 20
11692: PUSH
11693: LD_INT 22
11695: PUSH
11696: LD_INT 17
11698: PUSH
11699: LD_INT 24
11701: PUSH
11702: LD_INT 21
11704: PUSH
11705: LD_INT 19
11707: PUSH
11708: LD_INT 16
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 18
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: IN
11729: ST_TO_ADDR
// end ;
11730: LD_VAR 0 2
11734: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11735: LD_INT 0
11737: PPUSH
11738: PPUSH
11739: PPUSH
// result := [ ] ;
11740: LD_ADDR_VAR 0 4
11744: PUSH
11745: EMPTY
11746: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11747: LD_ADDR_VAR 0 5
11751: PUSH
11752: LD_VAR 0 2
11756: PPUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 3
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 70
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 5
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11845
// if checkLink then
11781: LD_VAR 0 3
11785: IFFALSE 11835
// begin for i in tmp do
11787: LD_ADDR_VAR 0 6
11791: PUSH
11792: LD_VAR 0 5
11796: PUSH
11797: FOR_IN
11798: IFFALSE 11833
// if GetBase ( i ) <> base then
11800: LD_VAR 0 6
11804: PPUSH
11805: CALL_OW 274
11809: PUSH
11810: LD_VAR 0 1
11814: NONEQUAL
11815: IFFALSE 11831
// ComLinkToBase ( base , i ) ;
11817: LD_VAR 0 1
11821: PPUSH
11822: LD_VAR 0 6
11826: PPUSH
11827: CALL_OW 169
11831: GO 11797
11833: POP
11834: POP
// end ; result := tmp ;
11835: LD_ADDR_VAR 0 4
11839: PUSH
11840: LD_VAR 0 5
11844: ST_TO_ADDR
// end ;
11845: LD_VAR 0 4
11849: RET
// export function ComComplete ( units , b ) ; var i ; begin
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
// if not units then
11854: LD_VAR 0 1
11858: NOT
11859: IFFALSE 11863
// exit ;
11861: GO 11953
// for i in units do
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_VAR 0 1
11872: PUSH
11873: FOR_IN
11874: IFFALSE 11951
// if BuildingStatus ( b ) = bs_build then
11876: LD_VAR 0 2
11880: PPUSH
11881: CALL_OW 461
11885: PUSH
11886: LD_INT 1
11888: EQUAL
11889: IFFALSE 11949
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11891: LD_VAR 0 4
11895: PPUSH
11896: LD_STRING h
11898: PUSH
11899: LD_VAR 0 2
11903: PPUSH
11904: CALL_OW 250
11908: PUSH
11909: LD_VAR 0 2
11913: PPUSH
11914: CALL_OW 251
11918: PUSH
11919: LD_VAR 0 2
11923: PUSH
11924: LD_INT 0
11926: PUSH
11927: LD_INT 0
11929: PUSH
11930: LD_INT 0
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: PPUSH
11945: CALL_OW 446
11949: GO 11873
11951: POP
11952: POP
// end ;
11953: LD_VAR 0 3
11957: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11958: LD_INT 0
11960: PPUSH
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
11965: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11966: LD_VAR 0 1
11970: NOT
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 263
11981: PUSH
11982: LD_INT 2
11984: NONEQUAL
11985: OR
11986: IFFALSE 11990
// exit ;
11988: GO 12306
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11990: LD_ADDR_VAR 0 6
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 255
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: LD_INT 30
12017: PUSH
12018: LD_INT 36
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 34
12027: PUSH
12028: LD_INT 31
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PPUSH
12044: CALL_OW 69
12048: ST_TO_ADDR
// if not tmp then
12049: LD_VAR 0 6
12053: NOT
12054: IFFALSE 12058
// exit ;
12056: GO 12306
// result := [ ] ;
12058: LD_ADDR_VAR 0 2
12062: PUSH
12063: EMPTY
12064: ST_TO_ADDR
// for i in tmp do
12065: LD_ADDR_VAR 0 3
12069: PUSH
12070: LD_VAR 0 6
12074: PUSH
12075: FOR_IN
12076: IFFALSE 12147
// begin t := UnitsInside ( i ) ;
12078: LD_ADDR_VAR 0 4
12082: PUSH
12083: LD_VAR 0 3
12087: PPUSH
12088: CALL_OW 313
12092: ST_TO_ADDR
// if t then
12093: LD_VAR 0 4
12097: IFFALSE 12145
// for j in t do
12099: LD_ADDR_VAR 0 7
12103: PUSH
12104: LD_VAR 0 4
12108: PUSH
12109: FOR_IN
12110: IFFALSE 12143
// result := Replace ( result , result + 1 , j ) ;
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_VAR 0 2
12121: PPUSH
12122: LD_VAR 0 2
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_VAR 0 7
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
12141: GO 12109
12143: POP
12144: POP
// end ;
12145: GO 12075
12147: POP
12148: POP
// if not result then
12149: LD_VAR 0 2
12153: NOT
12154: IFFALSE 12158
// exit ;
12156: GO 12306
// mech := result [ 1 ] ;
12158: LD_ADDR_VAR 0 5
12162: PUSH
12163: LD_VAR 0 2
12167: PUSH
12168: LD_INT 1
12170: ARRAY
12171: ST_TO_ADDR
// if result > 1 then
12172: LD_VAR 0 2
12176: PUSH
12177: LD_INT 1
12179: GREATER
12180: IFFALSE 12292
// begin for i = 2 to result do
12182: LD_ADDR_VAR 0 3
12186: PUSH
12187: DOUBLE
12188: LD_INT 2
12190: DEC
12191: ST_TO_ADDR
12192: LD_VAR 0 2
12196: PUSH
12197: FOR_TO
12198: IFFALSE 12290
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12200: LD_ADDR_VAR 0 4
12204: PUSH
12205: LD_VAR 0 2
12209: PUSH
12210: LD_VAR 0 3
12214: ARRAY
12215: PPUSH
12216: LD_INT 3
12218: PPUSH
12219: CALL_OW 259
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_VAR 0 3
12233: ARRAY
12234: PPUSH
12235: CALL_OW 432
12239: MINUS
12240: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12241: LD_VAR 0 4
12245: PUSH
12246: LD_VAR 0 5
12250: PPUSH
12251: LD_INT 3
12253: PPUSH
12254: CALL_OW 259
12258: PUSH
12259: LD_VAR 0 5
12263: PPUSH
12264: CALL_OW 432
12268: MINUS
12269: GREATEREQUAL
12270: IFFALSE 12288
// mech := result [ i ] ;
12272: LD_ADDR_VAR 0 5
12276: PUSH
12277: LD_VAR 0 2
12281: PUSH
12282: LD_VAR 0 3
12286: ARRAY
12287: ST_TO_ADDR
// end ;
12288: GO 12197
12290: POP
12291: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12292: LD_VAR 0 1
12296: PPUSH
12297: LD_VAR 0 5
12301: PPUSH
12302: CALL_OW 135
// end ;
12306: LD_VAR 0 2
12310: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12311: LD_INT 0
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
// result := [ ] ;
12326: LD_ADDR_VAR 0 7
12330: PUSH
12331: EMPTY
12332: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12333: LD_VAR 0 1
12337: PPUSH
12338: CALL_OW 266
12342: PUSH
12343: LD_INT 0
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: IN
12353: NOT
12354: IFFALSE 12358
// exit ;
12356: GO 13992
// if name then
12358: LD_VAR 0 3
12362: IFFALSE 12378
// SetBName ( base_dep , name ) ;
12364: LD_VAR 0 1
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: CALL_OW 500
// base := GetBase ( base_dep ) ;
12378: LD_ADDR_VAR 0 15
12382: PUSH
12383: LD_VAR 0 1
12387: PPUSH
12388: CALL_OW 274
12392: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12393: LD_ADDR_VAR 0 16
12397: PUSH
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 255
12407: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12408: LD_ADDR_VAR 0 17
12412: PUSH
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 248
12422: ST_TO_ADDR
// if sources then
12423: LD_VAR 0 5
12427: IFFALSE 12474
// for i = 1 to 3 do
12429: LD_ADDR_VAR 0 8
12433: PUSH
12434: DOUBLE
12435: LD_INT 1
12437: DEC
12438: ST_TO_ADDR
12439: LD_INT 3
12441: PUSH
12442: FOR_TO
12443: IFFALSE 12472
// AddResourceType ( base , i , sources [ i ] ) ;
12445: LD_VAR 0 15
12449: PPUSH
12450: LD_VAR 0 8
12454: PPUSH
12455: LD_VAR 0 5
12459: PUSH
12460: LD_VAR 0 8
12464: ARRAY
12465: PPUSH
12466: CALL_OW 276
12470: GO 12442
12472: POP
12473: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12474: LD_ADDR_VAR 0 18
12478: PUSH
12479: LD_VAR 0 15
12483: PPUSH
12484: LD_VAR 0 2
12488: PPUSH
12489: LD_INT 1
12491: PPUSH
12492: CALL 11735 0 3
12496: ST_TO_ADDR
// InitHc ;
12497: CALL_OW 19
// InitUc ;
12501: CALL_OW 18
// uc_side := side ;
12505: LD_ADDR_OWVAR 20
12509: PUSH
12510: LD_VAR 0 16
12514: ST_TO_ADDR
// uc_nation := nation ;
12515: LD_ADDR_OWVAR 21
12519: PUSH
12520: LD_VAR 0 17
12524: ST_TO_ADDR
// if buildings then
12525: LD_VAR 0 18
12529: IFFALSE 13851
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12531: LD_ADDR_VAR 0 19
12535: PUSH
12536: LD_VAR 0 18
12540: PPUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 30
12546: PUSH
12547: LD_INT 29
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 30
12556: PUSH
12557: LD_INT 30
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: ST_TO_ADDR
// if tmp then
12574: LD_VAR 0 19
12578: IFFALSE 12626
// for i in tmp do
12580: LD_ADDR_VAR 0 8
12584: PUSH
12585: LD_VAR 0 19
12589: PUSH
12590: FOR_IN
12591: IFFALSE 12624
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12593: LD_VAR 0 8
12597: PPUSH
12598: CALL_OW 250
12602: PPUSH
12603: LD_VAR 0 8
12607: PPUSH
12608: CALL_OW 251
12612: PPUSH
12613: LD_VAR 0 16
12617: PPUSH
12618: CALL_OW 441
12622: GO 12590
12624: POP
12625: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12626: LD_VAR 0 18
12630: PPUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 30
12636: PUSH
12637: LD_INT 32
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 30
12646: PUSH
12647: LD_INT 33
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: PPUSH
12659: CALL_OW 72
12663: IFFALSE 12751
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12665: LD_ADDR_VAR 0 8
12669: PUSH
12670: LD_VAR 0 18
12674: PPUSH
12675: LD_INT 2
12677: PUSH
12678: LD_INT 30
12680: PUSH
12681: LD_INT 32
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 33
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 72
12707: PUSH
12708: FOR_IN
12709: IFFALSE 12749
// begin if not GetBWeapon ( i ) then
12711: LD_VAR 0 8
12715: PPUSH
12716: CALL_OW 269
12720: NOT
12721: IFFALSE 12747
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12723: LD_VAR 0 8
12727: PPUSH
12728: LD_VAR 0 8
12732: PPUSH
12733: LD_VAR 0 2
12737: PPUSH
12738: CALL 13997 0 2
12742: PPUSH
12743: CALL_OW 431
// end ;
12747: GO 12708
12749: POP
12750: POP
// end ; for i = 1 to personel do
12751: LD_ADDR_VAR 0 8
12755: PUSH
12756: DOUBLE
12757: LD_INT 1
12759: DEC
12760: ST_TO_ADDR
12761: LD_VAR 0 6
12765: PUSH
12766: FOR_TO
12767: IFFALSE 13831
// begin if i > 4 then
12769: LD_VAR 0 8
12773: PUSH
12774: LD_INT 4
12776: GREATER
12777: IFFALSE 12781
// break ;
12779: GO 13831
// case i of 1 :
12781: LD_VAR 0 8
12785: PUSH
12786: LD_INT 1
12788: DOUBLE
12789: EQUAL
12790: IFTRUE 12794
12792: GO 12874
12794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12795: LD_ADDR_VAR 0 12
12799: PUSH
12800: LD_VAR 0 18
12804: PPUSH
12805: LD_INT 22
12807: PUSH
12808: LD_VAR 0 16
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 58
12819: PUSH
12820: EMPTY
12821: LIST
12822: PUSH
12823: LD_INT 2
12825: PUSH
12826: LD_INT 30
12828: PUSH
12829: LD_INT 32
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 4
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 5
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 72
12871: ST_TO_ADDR
12872: GO 13096
12874: LD_INT 2
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12944
12882: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12883: LD_ADDR_VAR 0 12
12887: PUSH
12888: LD_VAR 0 18
12892: PPUSH
12893: LD_INT 22
12895: PUSH
12896: LD_VAR 0 16
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 30
12910: PUSH
12911: LD_INT 0
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL_OW 72
12941: ST_TO_ADDR
12942: GO 13096
12944: LD_INT 3
12946: DOUBLE
12947: EQUAL
12948: IFTRUE 12952
12950: GO 13014
12952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12953: LD_ADDR_VAR 0 12
12957: PUSH
12958: LD_VAR 0 18
12962: PPUSH
12963: LD_INT 22
12965: PUSH
12966: LD_VAR 0 16
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: LD_INT 30
12980: PUSH
12981: LD_INT 2
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 30
12990: PUSH
12991: LD_INT 3
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 72
13011: ST_TO_ADDR
13012: GO 13096
13014: LD_INT 4
13016: DOUBLE
13017: EQUAL
13018: IFTRUE 13022
13020: GO 13095
13022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13023: LD_ADDR_VAR 0 12
13027: PUSH
13028: LD_VAR 0 18
13032: PPUSH
13033: LD_INT 22
13035: PUSH
13036: LD_VAR 0 16
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 6
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 7
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 8
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: ST_TO_ADDR
13093: GO 13096
13095: POP
// if i = 1 then
13096: LD_VAR 0 8
13100: PUSH
13101: LD_INT 1
13103: EQUAL
13104: IFFALSE 13215
// begin tmp := [ ] ;
13106: LD_ADDR_VAR 0 19
13110: PUSH
13111: EMPTY
13112: ST_TO_ADDR
// for j in f do
13113: LD_ADDR_VAR 0 9
13117: PUSH
13118: LD_VAR 0 12
13122: PUSH
13123: FOR_IN
13124: IFFALSE 13197
// if GetBType ( j ) = b_bunker then
13126: LD_VAR 0 9
13130: PPUSH
13131: CALL_OW 266
13135: PUSH
13136: LD_INT 32
13138: EQUAL
13139: IFFALSE 13166
// tmp := Insert ( tmp , 1 , j ) else
13141: LD_ADDR_VAR 0 19
13145: PUSH
13146: LD_VAR 0 19
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: LD_VAR 0 9
13158: PPUSH
13159: CALL_OW 2
13163: ST_TO_ADDR
13164: GO 13195
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13166: LD_ADDR_VAR 0 19
13170: PUSH
13171: LD_VAR 0 19
13175: PPUSH
13176: LD_VAR 0 19
13180: PUSH
13181: LD_INT 1
13183: PLUS
13184: PPUSH
13185: LD_VAR 0 9
13189: PPUSH
13190: CALL_OW 2
13194: ST_TO_ADDR
13195: GO 13123
13197: POP
13198: POP
// if tmp then
13199: LD_VAR 0 19
13203: IFFALSE 13215
// f := tmp ;
13205: LD_ADDR_VAR 0 12
13209: PUSH
13210: LD_VAR 0 19
13214: ST_TO_ADDR
// end ; x := personel [ i ] ;
13215: LD_ADDR_VAR 0 13
13219: PUSH
13220: LD_VAR 0 6
13224: PUSH
13225: LD_VAR 0 8
13229: ARRAY
13230: ST_TO_ADDR
// if x = - 1 then
13231: LD_VAR 0 13
13235: PUSH
13236: LD_INT 1
13238: NEG
13239: EQUAL
13240: IFFALSE 13449
// begin for j in f do
13242: LD_ADDR_VAR 0 9
13246: PUSH
13247: LD_VAR 0 12
13251: PUSH
13252: FOR_IN
13253: IFFALSE 13445
// repeat InitHc ;
13255: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13259: LD_VAR 0 9
13263: PPUSH
13264: CALL_OW 266
13268: PUSH
13269: LD_INT 5
13271: EQUAL
13272: IFFALSE 13342
// begin if UnitsInside ( j ) < 3 then
13274: LD_VAR 0 9
13278: PPUSH
13279: CALL_OW 313
13283: PUSH
13284: LD_INT 3
13286: LESS
13287: IFFALSE 13323
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13289: LD_INT 0
13291: PPUSH
13292: LD_INT 5
13294: PUSH
13295: LD_INT 8
13297: PUSH
13298: LD_INT 9
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: LD_VAR 0 17
13310: ARRAY
13311: PPUSH
13312: LD_VAR 0 4
13316: PPUSH
13317: CALL_OW 380
13321: GO 13340
// PrepareHuman ( false , i , skill ) ;
13323: LD_INT 0
13325: PPUSH
13326: LD_VAR 0 8
13330: PPUSH
13331: LD_VAR 0 4
13335: PPUSH
13336: CALL_OW 380
// end else
13340: GO 13359
// PrepareHuman ( false , i , skill ) ;
13342: LD_INT 0
13344: PPUSH
13345: LD_VAR 0 8
13349: PPUSH
13350: LD_VAR 0 4
13354: PPUSH
13355: CALL_OW 380
// un := CreateHuman ;
13359: LD_ADDR_VAR 0 14
13363: PUSH
13364: CALL_OW 44
13368: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13369: LD_ADDR_VAR 0 7
13373: PUSH
13374: LD_VAR 0 7
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: LD_VAR 0 14
13386: PPUSH
13387: CALL_OW 2
13391: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13392: LD_VAR 0 14
13396: PPUSH
13397: LD_VAR 0 9
13401: PPUSH
13402: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13406: LD_VAR 0 9
13410: PPUSH
13411: CALL_OW 313
13415: PUSH
13416: LD_INT 6
13418: EQUAL
13419: PUSH
13420: LD_VAR 0 9
13424: PPUSH
13425: CALL_OW 266
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 31
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: IN
13440: OR
13441: IFFALSE 13255
13443: GO 13252
13445: POP
13446: POP
// end else
13447: GO 13829
// for j = 1 to x do
13449: LD_ADDR_VAR 0 9
13453: PUSH
13454: DOUBLE
13455: LD_INT 1
13457: DEC
13458: ST_TO_ADDR
13459: LD_VAR 0 13
13463: PUSH
13464: FOR_TO
13465: IFFALSE 13827
// begin InitHc ;
13467: CALL_OW 19
// if not f then
13471: LD_VAR 0 12
13475: NOT
13476: IFFALSE 13565
// begin PrepareHuman ( false , i , skill ) ;
13478: LD_INT 0
13480: PPUSH
13481: LD_VAR 0 8
13485: PPUSH
13486: LD_VAR 0 4
13490: PPUSH
13491: CALL_OW 380
// un := CreateHuman ;
13495: LD_ADDR_VAR 0 14
13499: PUSH
13500: CALL_OW 44
13504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13505: LD_ADDR_VAR 0 7
13509: PUSH
13510: LD_VAR 0 7
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: LD_VAR 0 14
13522: PPUSH
13523: CALL_OW 2
13527: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13528: LD_VAR 0 14
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 250
13542: PPUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 251
13552: PPUSH
13553: LD_INT 10
13555: PPUSH
13556: LD_INT 0
13558: PPUSH
13559: CALL_OW 50
// continue ;
13563: GO 13464
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13565: LD_VAR 0 12
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: CALL_OW 313
13578: PUSH
13579: LD_VAR 0 12
13583: PUSH
13584: LD_INT 1
13586: ARRAY
13587: PPUSH
13588: CALL_OW 266
13592: PUSH
13593: LD_INT 32
13595: PUSH
13596: LD_INT 31
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: IN
13603: AND
13604: PUSH
13605: LD_VAR 0 12
13609: PUSH
13610: LD_INT 1
13612: ARRAY
13613: PPUSH
13614: CALL_OW 313
13618: PUSH
13619: LD_INT 6
13621: EQUAL
13622: OR
13623: IFFALSE 13643
// f := Delete ( f , 1 ) ;
13625: LD_ADDR_VAR 0 12
13629: PUSH
13630: LD_VAR 0 12
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 3
13642: ST_TO_ADDR
// if not f then
13643: LD_VAR 0 12
13647: NOT
13648: IFFALSE 13666
// begin x := x + 2 ;
13650: LD_ADDR_VAR 0 13
13654: PUSH
13655: LD_VAR 0 13
13659: PUSH
13660: LD_INT 2
13662: PLUS
13663: ST_TO_ADDR
// continue ;
13664: GO 13464
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13666: LD_VAR 0 12
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: PPUSH
13675: CALL_OW 266
13679: PUSH
13680: LD_INT 5
13682: EQUAL
13683: IFFALSE 13757
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13685: LD_VAR 0 12
13689: PUSH
13690: LD_INT 1
13692: ARRAY
13693: PPUSH
13694: CALL_OW 313
13698: PUSH
13699: LD_INT 3
13701: LESS
13702: IFFALSE 13738
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13704: LD_INT 0
13706: PPUSH
13707: LD_INT 5
13709: PUSH
13710: LD_INT 8
13712: PUSH
13713: LD_INT 9
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_VAR 0 17
13725: ARRAY
13726: PPUSH
13727: LD_VAR 0 4
13731: PPUSH
13732: CALL_OW 380
13736: GO 13755
// PrepareHuman ( false , i , skill ) ;
13738: LD_INT 0
13740: PPUSH
13741: LD_VAR 0 8
13745: PPUSH
13746: LD_VAR 0 4
13750: PPUSH
13751: CALL_OW 380
// end else
13755: GO 13774
// PrepareHuman ( false , i , skill ) ;
13757: LD_INT 0
13759: PPUSH
13760: LD_VAR 0 8
13764: PPUSH
13765: LD_VAR 0 4
13769: PPUSH
13770: CALL_OW 380
// un := CreateHuman ;
13774: LD_ADDR_VAR 0 14
13778: PUSH
13779: CALL_OW 44
13783: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13784: LD_ADDR_VAR 0 7
13788: PUSH
13789: LD_VAR 0 7
13793: PPUSH
13794: LD_INT 1
13796: PPUSH
13797: LD_VAR 0 14
13801: PPUSH
13802: CALL_OW 2
13806: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13807: LD_VAR 0 14
13811: PPUSH
13812: LD_VAR 0 12
13816: PUSH
13817: LD_INT 1
13819: ARRAY
13820: PPUSH
13821: CALL_OW 52
// end ;
13825: GO 13464
13827: POP
13828: POP
// end ;
13829: GO 12766
13831: POP
13832: POP
// result := result ^ buildings ;
13833: LD_ADDR_VAR 0 7
13837: PUSH
13838: LD_VAR 0 7
13842: PUSH
13843: LD_VAR 0 18
13847: ADD
13848: ST_TO_ADDR
// end else
13849: GO 13992
// begin for i = 1 to personel do
13851: LD_ADDR_VAR 0 8
13855: PUSH
13856: DOUBLE
13857: LD_INT 1
13859: DEC
13860: ST_TO_ADDR
13861: LD_VAR 0 6
13865: PUSH
13866: FOR_TO
13867: IFFALSE 13990
// begin if i > 4 then
13869: LD_VAR 0 8
13873: PUSH
13874: LD_INT 4
13876: GREATER
13877: IFFALSE 13881
// break ;
13879: GO 13990
// x := personel [ i ] ;
13881: LD_ADDR_VAR 0 13
13885: PUSH
13886: LD_VAR 0 6
13890: PUSH
13891: LD_VAR 0 8
13895: ARRAY
13896: ST_TO_ADDR
// if x = - 1 then
13897: LD_VAR 0 13
13901: PUSH
13902: LD_INT 1
13904: NEG
13905: EQUAL
13906: IFFALSE 13910
// continue ;
13908: GO 13866
// PrepareHuman ( false , i , skill ) ;
13910: LD_INT 0
13912: PPUSH
13913: LD_VAR 0 8
13917: PPUSH
13918: LD_VAR 0 4
13922: PPUSH
13923: CALL_OW 380
// un := CreateHuman ;
13927: LD_ADDR_VAR 0 14
13931: PUSH
13932: CALL_OW 44
13936: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13937: LD_VAR 0 14
13941: PPUSH
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 250
13951: PPUSH
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 251
13961: PPUSH
13962: LD_INT 10
13964: PPUSH
13965: LD_INT 0
13967: PPUSH
13968: CALL_OW 50
// result := result ^ un ;
13972: LD_ADDR_VAR 0 7
13976: PUSH
13977: LD_VAR 0 7
13981: PUSH
13982: LD_VAR 0 14
13986: ADD
13987: ST_TO_ADDR
// end ;
13988: GO 13866
13990: POP
13991: POP
// end ; end ;
13992: LD_VAR 0 7
13996: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13997: LD_INT 0
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
14007: PPUSH
14008: PPUSH
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
14014: PPUSH
// result := false ;
14015: LD_ADDR_VAR 0 3
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14023: LD_VAR 0 1
14027: NOT
14028: PUSH
14029: LD_VAR 0 1
14033: PPUSH
14034: CALL_OW 266
14038: PUSH
14039: LD_INT 32
14041: PUSH
14042: LD_INT 33
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: IN
14049: NOT
14050: OR
14051: IFFALSE 14055
// exit ;
14053: GO 15164
// nat := GetNation ( tower ) ;
14055: LD_ADDR_VAR 0 12
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 248
14069: ST_TO_ADDR
// side := GetSide ( tower ) ;
14070: LD_ADDR_VAR 0 16
14074: PUSH
14075: LD_VAR 0 1
14079: PPUSH
14080: CALL_OW 255
14084: ST_TO_ADDR
// x := GetX ( tower ) ;
14085: LD_ADDR_VAR 0 10
14089: PUSH
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL_OW 250
14099: ST_TO_ADDR
// y := GetY ( tower ) ;
14100: LD_ADDR_VAR 0 11
14104: PUSH
14105: LD_VAR 0 1
14109: PPUSH
14110: CALL_OW 251
14114: ST_TO_ADDR
// if not x or not y then
14115: LD_VAR 0 10
14119: NOT
14120: PUSH
14121: LD_VAR 0 11
14125: NOT
14126: OR
14127: IFFALSE 14131
// exit ;
14129: GO 15164
// weapon := 0 ;
14131: LD_ADDR_VAR 0 18
14135: PUSH
14136: LD_INT 0
14138: ST_TO_ADDR
// fac_list := [ ] ;
14139: LD_ADDR_VAR 0 17
14143: PUSH
14144: EMPTY
14145: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14146: LD_ADDR_VAR 0 6
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 274
14160: PPUSH
14161: LD_VAR 0 2
14165: PPUSH
14166: LD_INT 0
14168: PPUSH
14169: CALL 11735 0 3
14173: PPUSH
14174: LD_INT 30
14176: PUSH
14177: LD_INT 3
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PPUSH
14184: CALL_OW 72
14188: ST_TO_ADDR
// if not factories then
14189: LD_VAR 0 6
14193: NOT
14194: IFFALSE 14198
// exit ;
14196: GO 15164
// for i in factories do
14198: LD_ADDR_VAR 0 8
14202: PUSH
14203: LD_VAR 0 6
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14234
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14211: LD_ADDR_VAR 0 17
14215: PUSH
14216: LD_VAR 0 17
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: CALL_OW 478
14230: UNION
14231: ST_TO_ADDR
14232: GO 14208
14234: POP
14235: POP
// if not fac_list then
14236: LD_VAR 0 17
14240: NOT
14241: IFFALSE 14245
// exit ;
14243: GO 15164
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14245: LD_ADDR_VAR 0 5
14249: PUSH
14250: LD_INT 4
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: LD_INT 9
14258: PUSH
14259: LD_INT 10
14261: PUSH
14262: LD_INT 6
14264: PUSH
14265: LD_INT 7
14267: PUSH
14268: LD_INT 11
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 27
14282: PUSH
14283: LD_INT 28
14285: PUSH
14286: LD_INT 26
14288: PUSH
14289: LD_INT 30
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 43
14300: PUSH
14301: LD_INT 44
14303: PUSH
14304: LD_INT 46
14306: PUSH
14307: LD_INT 45
14309: PUSH
14310: LD_INT 47
14312: PUSH
14313: LD_INT 49
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_VAR 0 12
14333: ARRAY
14334: ST_TO_ADDR
// list := list isect fac_list ;
14335: LD_ADDR_VAR 0 5
14339: PUSH
14340: LD_VAR 0 5
14344: PUSH
14345: LD_VAR 0 17
14349: ISECT
14350: ST_TO_ADDR
// if not list then
14351: LD_VAR 0 5
14355: NOT
14356: IFFALSE 14360
// exit ;
14358: GO 15164
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14360: LD_VAR 0 12
14364: PUSH
14365: LD_INT 3
14367: EQUAL
14368: PUSH
14369: LD_INT 49
14371: PUSH
14372: LD_VAR 0 5
14376: IN
14377: AND
14378: PUSH
14379: LD_INT 31
14381: PPUSH
14382: LD_VAR 0 16
14386: PPUSH
14387: CALL_OW 321
14391: PUSH
14392: LD_INT 2
14394: EQUAL
14395: AND
14396: IFFALSE 14456
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14398: LD_INT 22
14400: PUSH
14401: LD_VAR 0 16
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 35
14412: PUSH
14413: LD_INT 49
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 91
14422: PUSH
14423: LD_VAR 0 1
14427: PUSH
14428: LD_INT 10
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: NOT
14446: IFFALSE 14456
// weapon := ru_time_lapser ;
14448: LD_ADDR_VAR 0 18
14452: PUSH
14453: LD_INT 49
14455: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14456: LD_VAR 0 12
14460: PUSH
14461: LD_INT 1
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: IN
14471: PUSH
14472: LD_INT 11
14474: PUSH
14475: LD_VAR 0 5
14479: IN
14480: PUSH
14481: LD_INT 30
14483: PUSH
14484: LD_VAR 0 5
14488: IN
14489: OR
14490: AND
14491: PUSH
14492: LD_INT 6
14494: PPUSH
14495: LD_VAR 0 16
14499: PPUSH
14500: CALL_OW 321
14504: PUSH
14505: LD_INT 2
14507: EQUAL
14508: AND
14509: IFFALSE 14674
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14511: LD_INT 22
14513: PUSH
14514: LD_VAR 0 16
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 2
14525: PUSH
14526: LD_INT 35
14528: PUSH
14529: LD_INT 11
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 35
14538: PUSH
14539: LD_INT 30
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 91
14553: PUSH
14554: LD_VAR 0 1
14558: PUSH
14559: LD_INT 18
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: NOT
14577: PUSH
14578: LD_INT 22
14580: PUSH
14581: LD_VAR 0 16
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 30
14595: PUSH
14596: LD_INT 32
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 30
14605: PUSH
14606: LD_INT 33
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 91
14620: PUSH
14621: LD_VAR 0 1
14625: PUSH
14626: LD_INT 12
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: PPUSH
14642: CALL_OW 69
14646: PUSH
14647: LD_INT 2
14649: GREATER
14650: AND
14651: IFFALSE 14674
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14653: LD_ADDR_VAR 0 18
14657: PUSH
14658: LD_INT 11
14660: PUSH
14661: LD_INT 30
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_VAR 0 12
14672: ARRAY
14673: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14674: LD_VAR 0 18
14678: NOT
14679: PUSH
14680: LD_INT 40
14682: PPUSH
14683: LD_VAR 0 16
14687: PPUSH
14688: CALL_OW 321
14692: PUSH
14693: LD_INT 2
14695: EQUAL
14696: AND
14697: PUSH
14698: LD_INT 7
14700: PUSH
14701: LD_VAR 0 5
14705: IN
14706: PUSH
14707: LD_INT 28
14709: PUSH
14710: LD_VAR 0 5
14714: IN
14715: OR
14716: PUSH
14717: LD_INT 45
14719: PUSH
14720: LD_VAR 0 5
14724: IN
14725: OR
14726: AND
14727: IFFALSE 14981
// begin hex := GetHexInfo ( x , y ) ;
14729: LD_ADDR_VAR 0 4
14733: PUSH
14734: LD_VAR 0 10
14738: PPUSH
14739: LD_VAR 0 11
14743: PPUSH
14744: CALL_OW 546
14748: ST_TO_ADDR
// if hex [ 1 ] then
14749: LD_VAR 0 4
14753: PUSH
14754: LD_INT 1
14756: ARRAY
14757: IFFALSE 14761
// exit ;
14759: GO 15164
// height := hex [ 2 ] ;
14761: LD_ADDR_VAR 0 15
14765: PUSH
14766: LD_VAR 0 4
14770: PUSH
14771: LD_INT 2
14773: ARRAY
14774: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14775: LD_ADDR_VAR 0 14
14779: PUSH
14780: LD_INT 0
14782: PUSH
14783: LD_INT 2
14785: PUSH
14786: LD_INT 3
14788: PUSH
14789: LD_INT 5
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: ST_TO_ADDR
// for i in tmp do
14798: LD_ADDR_VAR 0 8
14802: PUSH
14803: LD_VAR 0 14
14807: PUSH
14808: FOR_IN
14809: IFFALSE 14979
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14811: LD_ADDR_VAR 0 9
14815: PUSH
14816: LD_VAR 0 10
14820: PPUSH
14821: LD_VAR 0 8
14825: PPUSH
14826: LD_INT 5
14828: PPUSH
14829: CALL_OW 272
14833: PUSH
14834: LD_VAR 0 11
14838: PPUSH
14839: LD_VAR 0 8
14843: PPUSH
14844: LD_INT 5
14846: PPUSH
14847: CALL_OW 273
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14856: LD_VAR 0 9
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: LD_VAR 0 9
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 488
14878: IFFALSE 14977
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14880: LD_ADDR_VAR 0 4
14884: PUSH
14885: LD_VAR 0 9
14889: PUSH
14890: LD_INT 1
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 9
14898: PUSH
14899: LD_INT 2
14901: ARRAY
14902: PPUSH
14903: CALL_OW 546
14907: ST_TO_ADDR
// if hex [ 1 ] then
14908: LD_VAR 0 4
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: IFFALSE 14920
// continue ;
14918: GO 14808
// h := hex [ 2 ] ;
14920: LD_ADDR_VAR 0 13
14924: PUSH
14925: LD_VAR 0 4
14929: PUSH
14930: LD_INT 2
14932: ARRAY
14933: ST_TO_ADDR
// if h + 7 < height then
14934: LD_VAR 0 13
14938: PUSH
14939: LD_INT 7
14941: PLUS
14942: PUSH
14943: LD_VAR 0 15
14947: LESS
14948: IFFALSE 14977
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14950: LD_ADDR_VAR 0 18
14954: PUSH
14955: LD_INT 7
14957: PUSH
14958: LD_INT 28
14960: PUSH
14961: LD_INT 45
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: PUSH
14969: LD_VAR 0 12
14973: ARRAY
14974: ST_TO_ADDR
// break ;
14975: GO 14979
// end ; end ; end ;
14977: GO 14808
14979: POP
14980: POP
// end ; if not weapon then
14981: LD_VAR 0 18
14985: NOT
14986: IFFALSE 15046
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14988: LD_ADDR_VAR 0 5
14992: PUSH
14993: LD_VAR 0 5
14997: PUSH
14998: LD_INT 11
15000: PUSH
15001: LD_INT 30
15003: PUSH
15004: LD_INT 49
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: DIFF
15012: ST_TO_ADDR
// if not list then
15013: LD_VAR 0 5
15017: NOT
15018: IFFALSE 15022
// exit ;
15020: GO 15164
// weapon := list [ rand ( 1 , list ) ] ;
15022: LD_ADDR_VAR 0 18
15026: PUSH
15027: LD_VAR 0 5
15031: PUSH
15032: LD_INT 1
15034: PPUSH
15035: LD_VAR 0 5
15039: PPUSH
15040: CALL_OW 12
15044: ARRAY
15045: ST_TO_ADDR
// end ; if weapon then
15046: LD_VAR 0 18
15050: IFFALSE 15164
// begin tmp := CostOfWeapon ( weapon ) ;
15052: LD_ADDR_VAR 0 14
15056: PUSH
15057: LD_VAR 0 18
15061: PPUSH
15062: CALL_OW 451
15066: ST_TO_ADDR
// j := GetBase ( tower ) ;
15067: LD_ADDR_VAR 0 9
15071: PUSH
15072: LD_VAR 0 1
15076: PPUSH
15077: CALL_OW 274
15081: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15082: LD_VAR 0 9
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 275
15094: PUSH
15095: LD_VAR 0 14
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: GREATEREQUAL
15104: PUSH
15105: LD_VAR 0 9
15109: PPUSH
15110: LD_INT 2
15112: PPUSH
15113: CALL_OW 275
15117: PUSH
15118: LD_VAR 0 14
15122: PUSH
15123: LD_INT 2
15125: ARRAY
15126: GREATEREQUAL
15127: AND
15128: PUSH
15129: LD_VAR 0 9
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: CALL_OW 275
15141: PUSH
15142: LD_VAR 0 14
15146: PUSH
15147: LD_INT 3
15149: ARRAY
15150: GREATEREQUAL
15151: AND
15152: IFFALSE 15164
// result := weapon ;
15154: LD_ADDR_VAR 0 3
15158: PUSH
15159: LD_VAR 0 18
15163: ST_TO_ADDR
// end ; end ;
15164: LD_VAR 0 3
15168: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15169: LD_INT 0
15171: PPUSH
15172: PPUSH
// result := true ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
// if array1 = array2 then
15181: LD_VAR 0 1
15185: PUSH
15186: LD_VAR 0 2
15190: EQUAL
15191: IFFALSE 15251
// begin for i = 1 to array1 do
15193: LD_ADDR_VAR 0 4
15197: PUSH
15198: DOUBLE
15199: LD_INT 1
15201: DEC
15202: ST_TO_ADDR
15203: LD_VAR 0 1
15207: PUSH
15208: FOR_TO
15209: IFFALSE 15247
// if array1 [ i ] <> array2 [ i ] then
15211: LD_VAR 0 1
15215: PUSH
15216: LD_VAR 0 4
15220: ARRAY
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_VAR 0 4
15231: ARRAY
15232: NONEQUAL
15233: IFFALSE 15245
// begin result := false ;
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: LD_INT 0
15242: ST_TO_ADDR
// break ;
15243: GO 15247
// end ;
15245: GO 15208
15247: POP
15248: POP
// end else
15249: GO 15259
// result := false ;
15251: LD_ADDR_VAR 0 3
15255: PUSH
15256: LD_INT 0
15258: ST_TO_ADDR
// end ;
15259: LD_VAR 0 3
15263: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15264: LD_INT 0
15266: PPUSH
15267: PPUSH
// if not array1 or not array2 then
15268: LD_VAR 0 1
15272: NOT
15273: PUSH
15274: LD_VAR 0 2
15278: NOT
15279: OR
15280: IFFALSE 15284
// exit ;
15282: GO 15348
// result := true ;
15284: LD_ADDR_VAR 0 3
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// for i = 1 to array1 do
15292: LD_ADDR_VAR 0 4
15296: PUSH
15297: DOUBLE
15298: LD_INT 1
15300: DEC
15301: ST_TO_ADDR
15302: LD_VAR 0 1
15306: PUSH
15307: FOR_TO
15308: IFFALSE 15346
// if array1 [ i ] <> array2 [ i ] then
15310: LD_VAR 0 1
15314: PUSH
15315: LD_VAR 0 4
15319: ARRAY
15320: PUSH
15321: LD_VAR 0 2
15325: PUSH
15326: LD_VAR 0 4
15330: ARRAY
15331: NONEQUAL
15332: IFFALSE 15344
// begin result := false ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_INT 0
15341: ST_TO_ADDR
// break ;
15342: GO 15346
// end ;
15344: GO 15307
15346: POP
15347: POP
// end ;
15348: LD_VAR 0 3
15352: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15353: LD_INT 0
15355: PPUSH
15356: PPUSH
15357: PPUSH
// pom := GetBase ( fac ) ;
15358: LD_ADDR_VAR 0 5
15362: PUSH
15363: LD_VAR 0 1
15367: PPUSH
15368: CALL_OW 274
15372: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15373: LD_ADDR_VAR 0 4
15377: PUSH
15378: LD_VAR 0 2
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PPUSH
15387: LD_VAR 0 2
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: PPUSH
15396: LD_VAR 0 2
15400: PUSH
15401: LD_INT 3
15403: ARRAY
15404: PPUSH
15405: LD_VAR 0 2
15409: PUSH
15410: LD_INT 4
15412: ARRAY
15413: PPUSH
15414: CALL_OW 449
15418: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15419: LD_ADDR_VAR 0 3
15423: PUSH
15424: LD_VAR 0 5
15428: PPUSH
15429: LD_INT 1
15431: PPUSH
15432: CALL_OW 275
15436: PUSH
15437: LD_VAR 0 4
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: GREATEREQUAL
15446: PUSH
15447: LD_VAR 0 5
15451: PPUSH
15452: LD_INT 2
15454: PPUSH
15455: CALL_OW 275
15459: PUSH
15460: LD_VAR 0 4
15464: PUSH
15465: LD_INT 2
15467: ARRAY
15468: GREATEREQUAL
15469: AND
15470: PUSH
15471: LD_VAR 0 5
15475: PPUSH
15476: LD_INT 3
15478: PPUSH
15479: CALL_OW 275
15483: PUSH
15484: LD_VAR 0 4
15488: PUSH
15489: LD_INT 3
15491: ARRAY
15492: GREATEREQUAL
15493: AND
15494: ST_TO_ADDR
// end ;
15495: LD_VAR 0 3
15499: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15500: LD_INT 0
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
// pom := GetBase ( building ) ;
15506: LD_ADDR_VAR 0 3
15510: PUSH
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 274
15520: ST_TO_ADDR
// if not pom then
15521: LD_VAR 0 3
15525: NOT
15526: IFFALSE 15530
// exit ;
15528: GO 15700
// btype := GetBType ( building ) ;
15530: LD_ADDR_VAR 0 5
15534: PUSH
15535: LD_VAR 0 1
15539: PPUSH
15540: CALL_OW 266
15544: ST_TO_ADDR
// if btype = b_armoury then
15545: LD_VAR 0 5
15549: PUSH
15550: LD_INT 4
15552: EQUAL
15553: IFFALSE 15563
// btype := b_barracks ;
15555: LD_ADDR_VAR 0 5
15559: PUSH
15560: LD_INT 5
15562: ST_TO_ADDR
// if btype = b_depot then
15563: LD_VAR 0 5
15567: PUSH
15568: LD_INT 0
15570: EQUAL
15571: IFFALSE 15581
// btype := b_warehouse ;
15573: LD_ADDR_VAR 0 5
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// if btype = b_workshop then
15581: LD_VAR 0 5
15585: PUSH
15586: LD_INT 2
15588: EQUAL
15589: IFFALSE 15599
// btype := b_factory ;
15591: LD_ADDR_VAR 0 5
15595: PUSH
15596: LD_INT 3
15598: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15599: LD_ADDR_VAR 0 4
15603: PUSH
15604: LD_VAR 0 5
15608: PPUSH
15609: LD_VAR 0 1
15613: PPUSH
15614: CALL_OW 248
15618: PPUSH
15619: CALL_OW 450
15623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15624: LD_ADDR_VAR 0 2
15628: PUSH
15629: LD_VAR 0 3
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: CALL_OW 275
15641: PUSH
15642: LD_VAR 0 4
15646: PUSH
15647: LD_INT 1
15649: ARRAY
15650: GREATEREQUAL
15651: PUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_INT 2
15659: PPUSH
15660: CALL_OW 275
15664: PUSH
15665: LD_VAR 0 4
15669: PUSH
15670: LD_INT 2
15672: ARRAY
15673: GREATEREQUAL
15674: AND
15675: PUSH
15676: LD_VAR 0 3
15680: PPUSH
15681: LD_INT 3
15683: PPUSH
15684: CALL_OW 275
15688: PUSH
15689: LD_VAR 0 4
15693: PUSH
15694: LD_INT 3
15696: ARRAY
15697: GREATEREQUAL
15698: AND
15699: ST_TO_ADDR
// end ;
15700: LD_VAR 0 2
15704: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
15709: PPUSH
// pom := GetBase ( building ) ;
15710: LD_ADDR_VAR 0 4
15714: PUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 274
15724: ST_TO_ADDR
// if not pom then
15725: LD_VAR 0 4
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15835
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: LD_VAR 0 2
15743: PPUSH
15744: LD_VAR 0 1
15748: PPUSH
15749: CALL_OW 248
15753: PPUSH
15754: CALL_OW 450
15758: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15759: LD_ADDR_VAR 0 3
15763: PUSH
15764: LD_VAR 0 4
15768: PPUSH
15769: LD_INT 1
15771: PPUSH
15772: CALL_OW 275
15776: PUSH
15777: LD_VAR 0 5
15781: PUSH
15782: LD_INT 1
15784: ARRAY
15785: GREATEREQUAL
15786: PUSH
15787: LD_VAR 0 4
15791: PPUSH
15792: LD_INT 2
15794: PPUSH
15795: CALL_OW 275
15799: PUSH
15800: LD_VAR 0 5
15804: PUSH
15805: LD_INT 2
15807: ARRAY
15808: GREATEREQUAL
15809: AND
15810: PUSH
15811: LD_VAR 0 4
15815: PPUSH
15816: LD_INT 3
15818: PPUSH
15819: CALL_OW 275
15823: PUSH
15824: LD_VAR 0 5
15828: PUSH
15829: LD_INT 3
15831: ARRAY
15832: GREATEREQUAL
15833: AND
15834: ST_TO_ADDR
// end ;
15835: LD_VAR 0 3
15839: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15840: LD_INT 0
15842: PPUSH
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
15852: PPUSH
// result := false ;
15853: LD_ADDR_VAR 0 8
15857: PUSH
15858: LD_INT 0
15860: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15861: LD_VAR 0 5
15865: NOT
15866: PUSH
15867: LD_VAR 0 1
15871: NOT
15872: OR
15873: PUSH
15874: LD_VAR 0 2
15878: NOT
15879: OR
15880: PUSH
15881: LD_VAR 0 3
15885: NOT
15886: OR
15887: IFFALSE 15891
// exit ;
15889: GO 16705
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15891: LD_ADDR_VAR 0 14
15895: PUSH
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_VAR 0 2
15905: PPUSH
15906: LD_VAR 0 3
15910: PPUSH
15911: LD_VAR 0 4
15915: PPUSH
15916: LD_VAR 0 5
15920: PUSH
15921: LD_INT 1
15923: ARRAY
15924: PPUSH
15925: CALL_OW 248
15929: PPUSH
15930: LD_INT 0
15932: PPUSH
15933: CALL 17958 0 6
15937: ST_TO_ADDR
// if not hexes then
15938: LD_VAR 0 14
15942: NOT
15943: IFFALSE 15947
// exit ;
15945: GO 16705
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15947: LD_ADDR_VAR 0 17
15951: PUSH
15952: LD_VAR 0 5
15956: PPUSH
15957: LD_INT 22
15959: PUSH
15960: LD_VAR 0 13
15964: PPUSH
15965: CALL_OW 255
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 30
15979: PUSH
15980: LD_INT 0
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 30
15989: PUSH
15990: LD_INT 1
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 72
16010: ST_TO_ADDR
// for i = 1 to hexes do
16011: LD_ADDR_VAR 0 9
16015: PUSH
16016: DOUBLE
16017: LD_INT 1
16019: DEC
16020: ST_TO_ADDR
16021: LD_VAR 0 14
16025: PUSH
16026: FOR_TO
16027: IFFALSE 16703
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16029: LD_ADDR_VAR 0 13
16033: PUSH
16034: LD_VAR 0 14
16038: PUSH
16039: LD_VAR 0 9
16043: ARRAY
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: PPUSH
16049: LD_VAR 0 14
16053: PUSH
16054: LD_VAR 0 9
16058: ARRAY
16059: PUSH
16060: LD_INT 2
16062: ARRAY
16063: PPUSH
16064: CALL_OW 428
16068: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16069: LD_VAR 0 14
16073: PUSH
16074: LD_VAR 0 9
16078: ARRAY
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: LD_VAR 0 14
16088: PUSH
16089: LD_VAR 0 9
16093: ARRAY
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PPUSH
16099: CALL_OW 351
16103: PUSH
16104: LD_VAR 0 14
16108: PUSH
16109: LD_VAR 0 9
16113: ARRAY
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PPUSH
16119: LD_VAR 0 14
16123: PUSH
16124: LD_VAR 0 9
16128: ARRAY
16129: PUSH
16130: LD_INT 2
16132: ARRAY
16133: PPUSH
16134: CALL_OW 488
16138: NOT
16139: OR
16140: PUSH
16141: LD_VAR 0 13
16145: PPUSH
16146: CALL_OW 247
16150: PUSH
16151: LD_INT 3
16153: EQUAL
16154: OR
16155: IFFALSE 16161
// exit ;
16157: POP
16158: POP
16159: GO 16705
// if not tmp then
16161: LD_VAR 0 13
16165: NOT
16166: IFFALSE 16170
// continue ;
16168: GO 16026
// result := true ;
16170: LD_ADDR_VAR 0 8
16174: PUSH
16175: LD_INT 1
16177: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16178: LD_VAR 0 6
16182: PUSH
16183: LD_VAR 0 13
16187: PPUSH
16188: CALL_OW 247
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: AND
16197: PUSH
16198: LD_VAR 0 13
16202: PPUSH
16203: CALL_OW 263
16207: PUSH
16208: LD_INT 1
16210: EQUAL
16211: AND
16212: IFFALSE 16376
// begin if IsDrivenBy ( tmp ) then
16214: LD_VAR 0 13
16218: PPUSH
16219: CALL_OW 311
16223: IFFALSE 16227
// continue ;
16225: GO 16026
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16227: LD_VAR 0 6
16231: PPUSH
16232: LD_INT 3
16234: PUSH
16235: LD_INT 60
16237: PUSH
16238: EMPTY
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: LD_INT 55
16250: PUSH
16251: EMPTY
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 72
16266: IFFALSE 16374
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16268: LD_ADDR_VAR 0 18
16272: PUSH
16273: LD_VAR 0 6
16277: PPUSH
16278: LD_INT 3
16280: PUSH
16281: LD_INT 60
16283: PUSH
16284: EMPTY
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: LD_INT 55
16296: PUSH
16297: EMPTY
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PPUSH
16308: CALL_OW 72
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: ST_TO_ADDR
// if IsInUnit ( driver ) then
16317: LD_VAR 0 18
16321: PPUSH
16322: CALL_OW 310
16326: IFFALSE 16337
// ComExit ( driver ) ;
16328: LD_VAR 0 18
16332: PPUSH
16333: CALL 41739 0 1
// AddComEnterUnit ( driver , tmp ) ;
16337: LD_VAR 0 18
16341: PPUSH
16342: LD_VAR 0 13
16346: PPUSH
16347: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16351: LD_VAR 0 18
16355: PPUSH
16356: LD_VAR 0 7
16360: PPUSH
16361: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16365: LD_VAR 0 18
16369: PPUSH
16370: CALL_OW 181
// end ; continue ;
16374: GO 16026
// end ; if not cleaners or not tmp in cleaners then
16376: LD_VAR 0 6
16380: NOT
16381: PUSH
16382: LD_VAR 0 13
16386: PUSH
16387: LD_VAR 0 6
16391: IN
16392: NOT
16393: OR
16394: IFFALSE 16701
// begin if dep then
16396: LD_VAR 0 17
16400: IFFALSE 16536
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16402: LD_ADDR_VAR 0 16
16406: PUSH
16407: LD_VAR 0 17
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: CALL_OW 250
16420: PPUSH
16421: LD_VAR 0 17
16425: PUSH
16426: LD_INT 1
16428: ARRAY
16429: PPUSH
16430: CALL_OW 254
16434: PPUSH
16435: LD_INT 5
16437: PPUSH
16438: CALL_OW 272
16442: PUSH
16443: LD_VAR 0 17
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: CALL_OW 251
16456: PPUSH
16457: LD_VAR 0 17
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PPUSH
16466: CALL_OW 254
16470: PPUSH
16471: LD_INT 5
16473: PPUSH
16474: CALL_OW 273
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16483: LD_VAR 0 16
16487: PUSH
16488: LD_INT 1
16490: ARRAY
16491: PPUSH
16492: LD_VAR 0 16
16496: PUSH
16497: LD_INT 2
16499: ARRAY
16500: PPUSH
16501: CALL_OW 488
16505: IFFALSE 16536
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16507: LD_VAR 0 13
16511: PPUSH
16512: LD_VAR 0 16
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: PPUSH
16521: LD_VAR 0 16
16525: PUSH
16526: LD_INT 2
16528: ARRAY
16529: PPUSH
16530: CALL_OW 111
// continue ;
16534: GO 16026
// end ; end ; r := GetDir ( tmp ) ;
16536: LD_ADDR_VAR 0 15
16540: PUSH
16541: LD_VAR 0 13
16545: PPUSH
16546: CALL_OW 254
16550: ST_TO_ADDR
// if r = 5 then
16551: LD_VAR 0 15
16555: PUSH
16556: LD_INT 5
16558: EQUAL
16559: IFFALSE 16569
// r := 0 ;
16561: LD_ADDR_VAR 0 15
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// for j = r to 5 do
16569: LD_ADDR_VAR 0 10
16573: PUSH
16574: DOUBLE
16575: LD_VAR 0 15
16579: DEC
16580: ST_TO_ADDR
16581: LD_INT 5
16583: PUSH
16584: FOR_TO
16585: IFFALSE 16699
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16587: LD_ADDR_VAR 0 11
16591: PUSH
16592: LD_VAR 0 13
16596: PPUSH
16597: CALL_OW 250
16601: PPUSH
16602: LD_VAR 0 10
16606: PPUSH
16607: LD_INT 2
16609: PPUSH
16610: CALL_OW 272
16614: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16615: LD_ADDR_VAR 0 12
16619: PUSH
16620: LD_VAR 0 13
16624: PPUSH
16625: CALL_OW 251
16629: PPUSH
16630: LD_VAR 0 10
16634: PPUSH
16635: LD_INT 2
16637: PPUSH
16638: CALL_OW 273
16642: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16643: LD_VAR 0 11
16647: PPUSH
16648: LD_VAR 0 12
16652: PPUSH
16653: CALL_OW 488
16657: PUSH
16658: LD_VAR 0 11
16662: PPUSH
16663: LD_VAR 0 12
16667: PPUSH
16668: CALL_OW 428
16672: NOT
16673: AND
16674: IFFALSE 16697
// begin ComMoveXY ( tmp , _x , _y ) ;
16676: LD_VAR 0 13
16680: PPUSH
16681: LD_VAR 0 11
16685: PPUSH
16686: LD_VAR 0 12
16690: PPUSH
16691: CALL_OW 111
// break ;
16695: GO 16699
// end ; end ;
16697: GO 16584
16699: POP
16700: POP
// end ; end ;
16701: GO 16026
16703: POP
16704: POP
// end ;
16705: LD_VAR 0 8
16709: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16710: LD_INT 0
16712: PPUSH
// result := true ;
16713: LD_ADDR_VAR 0 3
16717: PUSH
16718: LD_INT 1
16720: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16721: LD_VAR 0 2
16725: PUSH
16726: LD_INT 24
16728: DOUBLE
16729: EQUAL
16730: IFTRUE 16740
16732: LD_INT 33
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16765
16740: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16741: LD_ADDR_VAR 0 3
16745: PUSH
16746: LD_INT 32
16748: PPUSH
16749: LD_VAR 0 1
16753: PPUSH
16754: CALL_OW 321
16758: PUSH
16759: LD_INT 2
16761: EQUAL
16762: ST_TO_ADDR
16763: GO 17081
16765: LD_INT 20
16767: DOUBLE
16768: EQUAL
16769: IFTRUE 16773
16771: GO 16798
16773: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16774: LD_ADDR_VAR 0 3
16778: PUSH
16779: LD_INT 6
16781: PPUSH
16782: LD_VAR 0 1
16786: PPUSH
16787: CALL_OW 321
16791: PUSH
16792: LD_INT 2
16794: EQUAL
16795: ST_TO_ADDR
16796: GO 17081
16798: LD_INT 22
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16812
16804: LD_INT 36
16806: DOUBLE
16807: EQUAL
16808: IFTRUE 16812
16810: GO 16837
16812: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_INT 15
16820: PPUSH
16821: LD_VAR 0 1
16825: PPUSH
16826: CALL_OW 321
16830: PUSH
16831: LD_INT 2
16833: EQUAL
16834: ST_TO_ADDR
16835: GO 17081
16837: LD_INT 30
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 16870
16845: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16846: LD_ADDR_VAR 0 3
16850: PUSH
16851: LD_INT 20
16853: PPUSH
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 321
16863: PUSH
16864: LD_INT 2
16866: EQUAL
16867: ST_TO_ADDR
16868: GO 17081
16870: LD_INT 28
16872: DOUBLE
16873: EQUAL
16874: IFTRUE 16884
16876: LD_INT 21
16878: DOUBLE
16879: EQUAL
16880: IFTRUE 16884
16882: GO 16909
16884: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16885: LD_ADDR_VAR 0 3
16889: PUSH
16890: LD_INT 21
16892: PPUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 321
16902: PUSH
16903: LD_INT 2
16905: EQUAL
16906: ST_TO_ADDR
16907: GO 17081
16909: LD_INT 16
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16942
16917: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16918: LD_ADDR_VAR 0 3
16922: PUSH
16923: LD_INT 84
16925: PPUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 321
16935: PUSH
16936: LD_INT 2
16938: EQUAL
16939: ST_TO_ADDR
16940: GO 17081
16942: LD_INT 19
16944: DOUBLE
16945: EQUAL
16946: IFTRUE 16956
16948: LD_INT 23
16950: DOUBLE
16951: EQUAL
16952: IFTRUE 16956
16954: GO 16981
16956: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16957: LD_ADDR_VAR 0 3
16961: PUSH
16962: LD_INT 83
16964: PPUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 321
16974: PUSH
16975: LD_INT 2
16977: EQUAL
16978: ST_TO_ADDR
16979: GO 17081
16981: LD_INT 17
16983: DOUBLE
16984: EQUAL
16985: IFTRUE 16989
16987: GO 17014
16989: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16990: LD_ADDR_VAR 0 3
16994: PUSH
16995: LD_INT 39
16997: PPUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 321
17007: PUSH
17008: LD_INT 2
17010: EQUAL
17011: ST_TO_ADDR
17012: GO 17081
17014: LD_INT 18
17016: DOUBLE
17017: EQUAL
17018: IFTRUE 17022
17020: GO 17047
17022: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17023: LD_ADDR_VAR 0 3
17027: PUSH
17028: LD_INT 40
17030: PPUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL_OW 321
17040: PUSH
17041: LD_INT 2
17043: EQUAL
17044: ST_TO_ADDR
17045: GO 17081
17047: LD_INT 27
17049: DOUBLE
17050: EQUAL
17051: IFTRUE 17055
17053: GO 17080
17055: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17056: LD_ADDR_VAR 0 3
17060: PUSH
17061: LD_INT 35
17063: PPUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: CALL_OW 321
17073: PUSH
17074: LD_INT 2
17076: EQUAL
17077: ST_TO_ADDR
17078: GO 17081
17080: POP
// end ;
17081: LD_VAR 0 3
17085: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
// result := false ;
17099: LD_ADDR_VAR 0 6
17103: PUSH
17104: LD_INT 0
17106: ST_TO_ADDR
// if btype = b_depot then
17107: LD_VAR 0 2
17111: PUSH
17112: LD_INT 0
17114: EQUAL
17115: IFFALSE 17127
// begin result := true ;
17117: LD_ADDR_VAR 0 6
17121: PUSH
17122: LD_INT 1
17124: ST_TO_ADDR
// exit ;
17125: GO 17953
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17127: LD_VAR 0 1
17131: NOT
17132: PUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 266
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: IN
17153: NOT
17154: OR
17155: PUSH
17156: LD_VAR 0 2
17160: NOT
17161: OR
17162: PUSH
17163: LD_VAR 0 5
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: LD_INT 3
17179: PUSH
17180: LD_INT 4
17182: PUSH
17183: LD_INT 5
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: IN
17194: NOT
17195: OR
17196: PUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_VAR 0 4
17206: PPUSH
17207: CALL_OW 488
17211: NOT
17212: OR
17213: IFFALSE 17217
// exit ;
17215: GO 17953
// side := GetSide ( depot ) ;
17217: LD_ADDR_VAR 0 9
17221: PUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 255
17231: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17232: LD_VAR 0 9
17236: PPUSH
17237: LD_VAR 0 2
17241: PPUSH
17242: CALL 16710 0 2
17246: NOT
17247: IFFALSE 17251
// exit ;
17249: GO 17953
// pom := GetBase ( depot ) ;
17251: LD_ADDR_VAR 0 10
17255: PUSH
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 274
17265: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17266: LD_ADDR_VAR 0 11
17270: PUSH
17271: LD_VAR 0 2
17275: PPUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 248
17285: PPUSH
17286: CALL_OW 450
17290: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17291: LD_VAR 0 10
17295: PPUSH
17296: LD_INT 1
17298: PPUSH
17299: CALL_OW 275
17303: PUSH
17304: LD_VAR 0 11
17308: PUSH
17309: LD_INT 1
17311: ARRAY
17312: GREATEREQUAL
17313: PUSH
17314: LD_VAR 0 10
17318: PPUSH
17319: LD_INT 2
17321: PPUSH
17322: CALL_OW 275
17326: PUSH
17327: LD_VAR 0 11
17331: PUSH
17332: LD_INT 2
17334: ARRAY
17335: GREATEREQUAL
17336: AND
17337: PUSH
17338: LD_VAR 0 10
17342: PPUSH
17343: LD_INT 3
17345: PPUSH
17346: CALL_OW 275
17350: PUSH
17351: LD_VAR 0 11
17355: PUSH
17356: LD_INT 3
17358: ARRAY
17359: GREATEREQUAL
17360: AND
17361: NOT
17362: IFFALSE 17366
// exit ;
17364: GO 17953
// if GetBType ( depot ) = b_depot then
17366: LD_VAR 0 1
17370: PPUSH
17371: CALL_OW 266
17375: PUSH
17376: LD_INT 0
17378: EQUAL
17379: IFFALSE 17391
// dist := 28 else
17381: LD_ADDR_VAR 0 14
17385: PUSH
17386: LD_INT 28
17388: ST_TO_ADDR
17389: GO 17399
// dist := 36 ;
17391: LD_ADDR_VAR 0 14
17395: PUSH
17396: LD_INT 36
17398: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17399: LD_VAR 0 1
17403: PPUSH
17404: LD_VAR 0 3
17408: PPUSH
17409: LD_VAR 0 4
17413: PPUSH
17414: CALL_OW 297
17418: PUSH
17419: LD_VAR 0 14
17423: GREATER
17424: IFFALSE 17428
// exit ;
17426: GO 17953
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17428: LD_ADDR_VAR 0 12
17432: PUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 248
17462: PPUSH
17463: LD_INT 0
17465: PPUSH
17466: CALL 17958 0 6
17470: ST_TO_ADDR
// if not hexes then
17471: LD_VAR 0 12
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17953
// hex := GetHexInfo ( x , y ) ;
17480: LD_ADDR_VAR 0 15
17484: PUSH
17485: LD_VAR 0 3
17489: PPUSH
17490: LD_VAR 0 4
17494: PPUSH
17495: CALL_OW 546
17499: ST_TO_ADDR
// if hex [ 1 ] then
17500: LD_VAR 0 15
17504: PUSH
17505: LD_INT 1
17507: ARRAY
17508: IFFALSE 17512
// exit ;
17510: GO 17953
// height := hex [ 2 ] ;
17512: LD_ADDR_VAR 0 13
17516: PUSH
17517: LD_VAR 0 15
17521: PUSH
17522: LD_INT 2
17524: ARRAY
17525: ST_TO_ADDR
// for i = 1 to hexes do
17526: LD_ADDR_VAR 0 7
17530: PUSH
17531: DOUBLE
17532: LD_INT 1
17534: DEC
17535: ST_TO_ADDR
17536: LD_VAR 0 12
17540: PUSH
17541: FOR_TO
17542: IFFALSE 17872
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17544: LD_VAR 0 12
17548: PUSH
17549: LD_VAR 0 7
17553: ARRAY
17554: PUSH
17555: LD_INT 1
17557: ARRAY
17558: PPUSH
17559: LD_VAR 0 12
17563: PUSH
17564: LD_VAR 0 7
17568: ARRAY
17569: PUSH
17570: LD_INT 2
17572: ARRAY
17573: PPUSH
17574: CALL_OW 488
17578: NOT
17579: PUSH
17580: LD_VAR 0 12
17584: PUSH
17585: LD_VAR 0 7
17589: ARRAY
17590: PUSH
17591: LD_INT 1
17593: ARRAY
17594: PPUSH
17595: LD_VAR 0 12
17599: PUSH
17600: LD_VAR 0 7
17604: ARRAY
17605: PUSH
17606: LD_INT 2
17608: ARRAY
17609: PPUSH
17610: CALL_OW 428
17614: PUSH
17615: LD_INT 0
17617: GREATER
17618: OR
17619: PUSH
17620: LD_VAR 0 12
17624: PUSH
17625: LD_VAR 0 7
17629: ARRAY
17630: PUSH
17631: LD_INT 1
17633: ARRAY
17634: PPUSH
17635: LD_VAR 0 12
17639: PUSH
17640: LD_VAR 0 7
17644: ARRAY
17645: PUSH
17646: LD_INT 2
17648: ARRAY
17649: PPUSH
17650: CALL_OW 351
17654: OR
17655: IFFALSE 17661
// exit ;
17657: POP
17658: POP
17659: GO 17953
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17661: LD_ADDR_VAR 0 8
17665: PUSH
17666: LD_VAR 0 12
17670: PUSH
17671: LD_VAR 0 7
17675: ARRAY
17676: PUSH
17677: LD_INT 1
17679: ARRAY
17680: PPUSH
17681: LD_VAR 0 12
17685: PUSH
17686: LD_VAR 0 7
17690: ARRAY
17691: PUSH
17692: LD_INT 2
17694: ARRAY
17695: PPUSH
17696: CALL_OW 546
17700: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17701: LD_VAR 0 8
17705: PUSH
17706: LD_INT 1
17708: ARRAY
17709: PUSH
17710: LD_VAR 0 8
17714: PUSH
17715: LD_INT 2
17717: ARRAY
17718: PUSH
17719: LD_VAR 0 13
17723: PUSH
17724: LD_INT 2
17726: PLUS
17727: GREATER
17728: OR
17729: PUSH
17730: LD_VAR 0 8
17734: PUSH
17735: LD_INT 2
17737: ARRAY
17738: PUSH
17739: LD_VAR 0 13
17743: PUSH
17744: LD_INT 2
17746: MINUS
17747: LESS
17748: OR
17749: PUSH
17750: LD_VAR 0 8
17754: PUSH
17755: LD_INT 3
17757: ARRAY
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 8
17764: PUSH
17765: LD_INT 9
17767: PUSH
17768: LD_INT 10
17770: PUSH
17771: LD_INT 11
17773: PUSH
17774: LD_INT 12
17776: PUSH
17777: LD_INT 13
17779: PUSH
17780: LD_INT 16
17782: PUSH
17783: LD_INT 17
17785: PUSH
17786: LD_INT 18
17788: PUSH
17789: LD_INT 19
17791: PUSH
17792: LD_INT 20
17794: PUSH
17795: LD_INT 21
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: IN
17813: NOT
17814: OR
17815: PUSH
17816: LD_VAR 0 8
17820: PUSH
17821: LD_INT 5
17823: ARRAY
17824: NOT
17825: OR
17826: PUSH
17827: LD_VAR 0 8
17831: PUSH
17832: LD_INT 6
17834: ARRAY
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 7
17844: PUSH
17845: LD_INT 9
17847: PUSH
17848: LD_INT 10
17850: PUSH
17851: LD_INT 11
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: IN
17862: NOT
17863: OR
17864: IFFALSE 17870
// exit ;
17866: POP
17867: POP
17868: GO 17953
// end ;
17870: GO 17541
17872: POP
17873: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17874: LD_VAR 0 9
17878: PPUSH
17879: LD_VAR 0 3
17883: PPUSH
17884: LD_VAR 0 4
17888: PPUSH
17889: LD_INT 20
17891: PPUSH
17892: CALL 9876 0 4
17896: PUSH
17897: LD_INT 4
17899: ARRAY
17900: IFFALSE 17904
// exit ;
17902: GO 17953
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17904: LD_VAR 0 2
17908: PUSH
17909: LD_INT 29
17911: PUSH
17912: LD_INT 30
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: IN
17919: PUSH
17920: LD_VAR 0 3
17924: PPUSH
17925: LD_VAR 0 4
17929: PPUSH
17930: LD_VAR 0 9
17934: PPUSH
17935: CALL_OW 440
17939: NOT
17940: AND
17941: IFFALSE 17945
// exit ;
17943: GO 17953
// result := true ;
17945: LD_ADDR_VAR 0 6
17949: PUSH
17950: LD_INT 1
17952: ST_TO_ADDR
// end ;
17953: LD_VAR 0 6
17957: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17958: LD_INT 0
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
17964: PPUSH
17965: PPUSH
17966: PPUSH
17967: PPUSH
17968: PPUSH
17969: PPUSH
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
17978: PPUSH
17979: PPUSH
17980: PPUSH
17981: PPUSH
17982: PPUSH
17983: PPUSH
17984: PPUSH
17985: PPUSH
17986: PPUSH
17987: PPUSH
17988: PPUSH
17989: PPUSH
17990: PPUSH
17991: PPUSH
17992: PPUSH
17993: PPUSH
17994: PPUSH
17995: PPUSH
17996: PPUSH
17997: PPUSH
17998: PPUSH
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
18008: PPUSH
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
18013: PPUSH
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
// result = [ ] ;
18018: LD_ADDR_VAR 0 7
18022: PUSH
18023: EMPTY
18024: ST_TO_ADDR
// temp_list = [ ] ;
18025: LD_ADDR_VAR 0 9
18029: PUSH
18030: EMPTY
18031: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18032: LD_VAR 0 4
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: LD_INT 4
18051: PUSH
18052: LD_INT 5
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: IN
18063: NOT
18064: PUSH
18065: LD_VAR 0 1
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: IN
18080: PUSH
18081: LD_VAR 0 5
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: LD_INT 3
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: IN
18100: NOT
18101: AND
18102: OR
18103: IFFALSE 18107
// exit ;
18105: GO 36498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18107: LD_VAR 0 1
18111: PUSH
18112: LD_INT 6
18114: PUSH
18115: LD_INT 7
18117: PUSH
18118: LD_INT 8
18120: PUSH
18121: LD_INT 13
18123: PUSH
18124: LD_INT 12
18126: PUSH
18127: LD_INT 15
18129: PUSH
18130: LD_INT 11
18132: PUSH
18133: LD_INT 14
18135: PUSH
18136: LD_INT 10
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: IN
18150: IFFALSE 18160
// btype = b_lab ;
18152: LD_ADDR_VAR 0 1
18156: PUSH
18157: LD_INT 6
18159: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18160: LD_VAR 0 6
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: IN
18179: NOT
18180: PUSH
18181: LD_VAR 0 1
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: LD_INT 6
18200: PUSH
18201: LD_INT 36
18203: PUSH
18204: LD_INT 4
18206: PUSH
18207: LD_INT 5
18209: PUSH
18210: LD_INT 31
18212: PUSH
18213: LD_INT 32
18215: PUSH
18216: LD_INT 33
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: IN
18232: NOT
18233: PUSH
18234: LD_VAR 0 6
18238: PUSH
18239: LD_INT 1
18241: EQUAL
18242: AND
18243: OR
18244: PUSH
18245: LD_VAR 0 1
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: IN
18260: NOT
18261: PUSH
18262: LD_VAR 0 6
18266: PUSH
18267: LD_INT 2
18269: EQUAL
18270: AND
18271: OR
18272: IFFALSE 18282
// mode = 0 ;
18274: LD_ADDR_VAR 0 6
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// case mode of 0 :
18282: LD_VAR 0 6
18286: PUSH
18287: LD_INT 0
18289: DOUBLE
18290: EQUAL
18291: IFTRUE 18295
18293: GO 29748
18295: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18296: LD_ADDR_VAR 0 11
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 1
18316: NEG
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 0
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 1
18354: NEG
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 2
18381: NEG
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: LD_INT 3
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18489: LD_ADDR_VAR 0 12
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 0
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 1
18547: NEG
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: LD_INT 1
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: NEG
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: LD_INT 1
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: NEG
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 3
18646: NEG
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 3
18657: NEG
18658: PUSH
18659: LD_INT 1
18661: NEG
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18685: LD_ADDR_VAR 0 13
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: LD_INT 1
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 2
18808: NEG
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: NEG
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 2
18832: NEG
18833: PUSH
18834: LD_INT 3
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 3
18844: NEG
18845: PUSH
18846: LD_INT 2
18848: NEG
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 3
18856: NEG
18857: PUSH
18858: LD_INT 3
18860: NEG
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18884: LD_ADDR_VAR 0 14
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 1
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: NEG
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: LD_INT 2
18969: NEG
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 3
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: LD_INT 3
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: LD_INT 2
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19080: LD_ADDR_VAR 0 15
19084: PUSH
19085: LD_INT 0
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: LD_INT 0
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 3
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 3
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19273: LD_ADDR_VAR 0 16
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: LD_INT 2
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: LD_INT 2
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 3
19430: PUSH
19431: LD_INT 3
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19466: LD_ADDR_VAR 0 17
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: NEG
19548: PUSH
19549: LD_INT 2
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 0
19559: PUSH
19560: LD_INT 2
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 2
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 2
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: NEG
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 2
19653: NEG
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: LD_INT 2
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19696: LD_ADDR_VAR 0 18
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 1
19716: NEG
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 1
19777: NEG
19778: PUSH
19779: LD_INT 2
19781: NEG
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 2
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: NEG
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 2
19883: NEG
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19926: LD_ADDR_VAR 0 19
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: LD_INT 0
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: NEG
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 0
20019: PUSH
20020: LD_INT 2
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 2
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: NEG
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 2
20113: NEG
20114: PUSH
20115: LD_INT 1
20117: NEG
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20156: LD_ADDR_VAR 0 20
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: LD_INT 0
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 1
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: NEG
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: LD_INT 2
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: LD_INT 1
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: NEG
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20386: LD_ADDR_VAR 0 21
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: NEG
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 0
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: NEG
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: NEG
20574: PUSH
20575: LD_INT 1
20577: NEG
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 2
20585: NEG
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20616: LD_ADDR_VAR 0 22
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 0
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: NEG
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: LD_INT 2
20712: NEG
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 2
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 2
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 2
20792: NEG
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 2
20815: NEG
20816: PUSH
20817: LD_INT 2
20819: NEG
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20846: LD_ADDR_VAR 0 23
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 0
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 1
20904: NEG
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: LD_INT 2
20931: NEG
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: LD_INT 2
20942: NEG
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 2
21022: NEG
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: NEG
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: NEG
21058: PUSH
21059: LD_INT 3
21061: NEG
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: NEG
21070: PUSH
21071: LD_INT 3
21073: NEG
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21126: LD_ADDR_VAR 0 24
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 2
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 2
21302: NEG
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 2
21325: NEG
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 2
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21402: LD_ADDR_VAR 0 25
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: NEG
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: LD_INT 0
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 2
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 2
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 3
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: LD_INT 3
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21676: LD_ADDR_VAR 0 26
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: LD_INT 2
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: PUSH
21888: LD_INT 3
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 2
21918: NEG
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21952: LD_ADDR_VAR 0 27
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: LD_INT 0
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: LD_INT 2
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: LD_INT 2
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 2
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 2
22139: NEG
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: NEG
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: NEG
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 3
22185: NEG
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 3
22197: NEG
22198: PUSH
22199: LD_INT 2
22201: NEG
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22232: LD_ADDR_VAR 0 28
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 0
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 2
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 0
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: LD_INT 2
22435: NEG
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 2
22443: NEG
22444: PUSH
22445: LD_INT 3
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 3
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 3
22467: NEG
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 3
22479: NEG
22480: PUSH
22481: LD_INT 2
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22514: LD_ADDR_VAR 0 29
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 2
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: LD_INT 2
22696: NEG
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: NEG
22705: PUSH
22706: LD_INT 3
22708: NEG
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 3
22758: NEG
22759: PUSH
22760: LD_INT 2
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22793: LD_ADDR_VAR 0 30
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: NEG
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: NEG
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: LD_INT 3
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: NEG
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 3
23036: NEG
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23071: LD_ADDR_VAR 0 31
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 1
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 2
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 2
23236: NEG
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 1
23293: PUSH
23294: LD_INT 3
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 3
23314: NEG
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23349: LD_ADDR_VAR 0 32
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 0
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: PUSH
23432: LD_INT 2
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 2
23515: NEG
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: LD_INT 3
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: LD_INT 3
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 2
23581: NEG
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 3
23592: NEG
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23627: LD_ADDR_VAR 0 33
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 2
23782: NEG
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: NEG
23806: PUSH
23807: LD_INT 2
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 2
23817: NEG
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 3
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 3
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 3
23871: NEG
23872: PUSH
23873: LD_INT 2
23875: NEG
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23906: LD_ADDR_VAR 0 34
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 2
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 2
24062: NEG
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: NEG
24086: PUSH
24087: LD_INT 2
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 3
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 3
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 3
24151: NEG
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24186: LD_ADDR_VAR 0 35
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 2
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24298: LD_ADDR_VAR 0 36
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24410: LD_ADDR_VAR 0 37
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24522: LD_ADDR_VAR 0 38
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24634: LD_ADDR_VAR 0 39
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: LD_INT 0
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24746: LD_ADDR_VAR 0 40
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24858: LD_ADDR_VAR 0 41
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: NEG
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 2
25048: NEG
25049: PUSH
25050: LD_INT 3
25052: NEG
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 3
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 3
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: LD_INT 3
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: LD_INT 3
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 3
25132: NEG
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 3
25143: NEG
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 3
25155: NEG
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 3
25167: NEG
25168: PUSH
25169: LD_INT 3
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25208: LD_ADDR_VAR 0 42
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: NEG
25387: PUSH
25388: LD_INT 2
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: NEG
25399: PUSH
25400: LD_INT 3
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: LD_INT 3
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: LD_INT 3
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 3
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 3
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 3
25505: NEG
25506: PUSH
25507: LD_INT 2
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 3
25517: NEG
25518: PUSH
25519: LD_INT 3
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25558: LD_ADDR_VAR 0 43
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: NEG
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 3
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 3
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 3
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: NEG
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 3
25854: NEG
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25906: LD_ADDR_VAR 0 44
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: NEG
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: NEG
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 2
26096: NEG
26097: PUSH
26098: LD_INT 3
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 3
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: LD_INT 1
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 3
26180: NEG
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 3
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 3
26203: NEG
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 3
26215: NEG
26216: PUSH
26217: LD_INT 3
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26256: LD_ADDR_VAR 0 45
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 2
26446: NEG
26447: PUSH
26448: LD_INT 3
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: LD_INT 3
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 3
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 3
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 3
26553: NEG
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 3
26565: NEG
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26606: LD_ADDR_VAR 0 46
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 0
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: LD_INT 3
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 3
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 3
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 3
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: NEG
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 3
26902: NEG
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 3
26913: NEG
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26954: LD_ADDR_VAR 0 47
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 1
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27105: LD_ADDR_VAR 0 48
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27252: LD_ADDR_VAR 0 49
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27396: LD_ADDR_VAR 0 50
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27540: LD_ADDR_VAR 0 51
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27687: LD_ADDR_VAR 0 52
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 2
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27838: LD_ADDR_VAR 0 53
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28068: LD_ADDR_VAR 0 54
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28298: LD_ADDR_VAR 0 55
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 2
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: NEG
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28528: LD_ADDR_VAR 0 56
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: NEG
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 2
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: NEG
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28758: LD_ADDR_VAR 0 57
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 2
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28988: LD_ADDR_VAR 0 58
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: NEG
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29218: LD_ADDR_VAR 0 59
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29306: LD_ADDR_VAR 0 60
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29394: LD_ADDR_VAR 0 61
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29482: LD_ADDR_VAR 0 62
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29570: LD_ADDR_VAR 0 63
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29658: LD_ADDR_VAR 0 64
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
// end ; 1 :
29746: GO 35643
29748: LD_INT 1
29750: DOUBLE
29751: EQUAL
29752: IFTRUE 29756
29754: GO 32379
29756: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29757: LD_ADDR_VAR 0 11
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 3
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: LD_INT 3
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29801: LD_ADDR_VAR 0 12
29805: PUSH
29806: LD_INT 2
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29842: LD_ADDR_VAR 0 13
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: LD_INT 3
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29882: LD_ADDR_VAR 0 14
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29923: LD_ADDR_VAR 0 15
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: NEG
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 3
29952: NEG
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29967: LD_ADDR_VAR 0 16
29971: PUSH
29972: LD_INT 2
29974: NEG
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 2
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30013: LD_ADDR_VAR 0 17
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 3
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30057: LD_ADDR_VAR 0 18
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30098: LD_ADDR_VAR 0 19
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30138: LD_ADDR_VAR 0 20
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 3
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30179: LD_ADDR_VAR 0 21
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30223: LD_ADDR_VAR 0 22
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: LD_INT 2
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 3
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30269: LD_ADDR_VAR 0 23
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 3
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 4
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 3
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30313: LD_ADDR_VAR 0 24
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 3
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 4
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30354: LD_ADDR_VAR 0 25
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 4
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30394: LD_ADDR_VAR 0 26
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 4
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30435: LD_ADDR_VAR 0 27
30439: PUSH
30440: LD_INT 3
30442: NEG
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 3
30453: NEG
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 4
30464: NEG
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30479: LD_ADDR_VAR 0 28
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: LD_INT 4
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 4
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30525: LD_ADDR_VAR 0 29
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: LD_INT 3
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: LD_INT 4
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 4
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 3
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: LD_INT 5
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 5
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 4
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: LD_INT 6
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 6
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 5
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30680: LD_ADDR_VAR 0 30
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 3
30718: PUSH
30719: LD_INT 1
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 4
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 4
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 5
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 5
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 5
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 6
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 6
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30823: LD_ADDR_VAR 0 31
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 4
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 4
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 4
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 5
30890: PUSH
30891: LD_INT 4
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 5
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 4
30910: PUSH
30911: LD_INT 5
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 6
30920: PUSH
30921: LD_INT 5
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 6
30930: PUSH
30931: LD_INT 6
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 5
30940: PUSH
30941: LD_INT 6
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30962: LD_ADDR_VAR 0 32
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: LD_INT 4
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 4
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 5
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 4
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 6
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: LD_INT 6
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 5
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31105: LD_ADDR_VAR 0 33
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 3
31134: NEG
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: NEG
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 4
31157: NEG
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 4
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 5
31191: NEG
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 5
31202: NEG
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 5
31214: NEG
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 6
31225: NEG
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 6
31236: NEG
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31260: LD_ADDR_VAR 0 34
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: LD_INT 3
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: NEG
31280: PUSH
31281: LD_INT 2
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 3
31291: NEG
31292: PUSH
31293: LD_INT 3
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: NEG
31304: PUSH
31305: LD_INT 4
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 4
31315: NEG
31316: PUSH
31317: LD_INT 3
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 4
31327: NEG
31328: PUSH
31329: LD_INT 4
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 4
31339: NEG
31340: PUSH
31341: LD_INT 5
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 5
31351: NEG
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 5
31363: NEG
31364: PUSH
31365: LD_INT 5
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 5
31375: NEG
31376: PUSH
31377: LD_INT 6
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 6
31387: NEG
31388: PUSH
31389: LD_INT 5
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 6
31399: NEG
31400: PUSH
31401: LD_INT 6
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31423: LD_ADDR_VAR 0 41
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: LD_INT 3
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: LD_INT 2
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31467: LD_ADDR_VAR 0 42
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31508: LD_ADDR_VAR 0 43
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31548: LD_ADDR_VAR 0 44
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 3
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31589: LD_ADDR_VAR 0 45
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 3
31618: NEG
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31633: LD_ADDR_VAR 0 46
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: LD_INT 2
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 3
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 3
31664: NEG
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31679: LD_ADDR_VAR 0 47
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31712: LD_ADDR_VAR 0 48
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31743: LD_ADDR_VAR 0 49
31747: PUSH
31748: LD_INT 3
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31772: LD_ADDR_VAR 0 50
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: LD_INT 3
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31801: LD_ADDR_VAR 0 51
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31832: LD_ADDR_VAR 0 52
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: NEG
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31865: LD_ADDR_VAR 0 53
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 3
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31909: LD_ADDR_VAR 0 54
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31950: LD_ADDR_VAR 0 55
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: LD_INT 3
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 3
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31990: LD_ADDR_VAR 0 56
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32031: LD_ADDR_VAR 0 57
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 3
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32075: LD_ADDR_VAR 0 58
32079: PUSH
32080: LD_INT 2
32082: NEG
32083: PUSH
32084: LD_INT 3
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: NEG
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32121: LD_ADDR_VAR 0 59
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32165: LD_ADDR_VAR 0 60
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32206: LD_ADDR_VAR 0 61
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32246: LD_ADDR_VAR 0 62
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32287: LD_ADDR_VAR 0 63
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32331: LD_ADDR_VAR 0 64
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// end ; 2 :
32377: GO 35643
32379: LD_INT 2
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 35642
32387: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32388: LD_ADDR_VAR 0 29
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 4
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 5
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 4
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 5
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 3
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 4
32508: PUSH
32509: LD_INT 3
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 4
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 4
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 4
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 3
32671: NEG
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: NEG
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 4
32727: NEG
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 4
32738: NEG
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 4
32750: NEG
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: LD_INT 4
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 4
32785: NEG
32786: PUSH
32787: LD_INT 5
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 3
32797: NEG
32798: PUSH
32799: LD_INT 4
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: LD_INT 3
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 4
32821: NEG
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 5
32833: NEG
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 5
32845: NEG
32846: PUSH
32847: LD_INT 5
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 5
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 5
32869: NEG
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32926: LD_ADDR_VAR 0 30
32930: PUSH
32931: LD_INT 4
32933: PUSH
32934: LD_INT 4
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 5
32953: PUSH
32954: LD_INT 4
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: LD_INT 5
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 4
32973: PUSH
32974: LD_INT 5
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: LD_INT 4
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 5
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 5
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 4
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: LD_INT 4
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: LD_INT 4
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 4
33116: NEG
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: NEG
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 3
33150: NEG
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 4
33161: NEG
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 5
33172: NEG
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 5
33183: NEG
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 5
33195: NEG
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 4
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: NEG
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 3
33266: NEG
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 4
33278: NEG
33279: PUSH
33280: LD_INT 3
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 4
33290: NEG
33291: PUSH
33292: LD_INT 4
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 4
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 4
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 5
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 4
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 3
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 3
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: LD_INT 4
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 5
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 3
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 5
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33473: LD_ADDR_VAR 0 31
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 4
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: LD_INT 4
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 5
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 5
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 4
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: NEG
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: LD_INT 5
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 3
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 3
33573: NEG
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 4
33629: NEG
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 4
33640: NEG
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 4
33652: NEG
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 4
33675: NEG
33676: PUSH
33677: LD_INT 4
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 4
33687: NEG
33688: PUSH
33689: LD_INT 5
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: NEG
33700: PUSH
33701: LD_INT 4
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 3
33711: NEG
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 4
33723: NEG
33724: PUSH
33725: LD_INT 3
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 5
33735: NEG
33736: PUSH
33737: LD_INT 4
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: NEG
33748: PUSH
33749: LD_INT 5
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: LD_INT 5
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 5
33771: NEG
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 3
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: LD_INT 4
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 3
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 4
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 2
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 4
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 4
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 5
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 4
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 5
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34023: LD_ADDR_VAR 0 32
34027: PUSH
34028: LD_INT 4
34030: NEG
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 4
34041: NEG
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: NEG
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 4
34075: NEG
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 5
34086: NEG
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 5
34097: NEG
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 5
34109: NEG
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: LD_INT 3
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 3
34144: NEG
34145: PUSH
34146: LD_INT 4
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: LD_INT 3
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 4
34192: NEG
34193: PUSH
34194: LD_INT 3
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 4
34204: NEG
34205: PUSH
34206: LD_INT 4
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: LD_INT 4
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 4
34228: NEG
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: LD_INT 4
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 5
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 4
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 3
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 3
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: LD_INT 4
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 5
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 2
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: LD_INT 5
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 4
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 4
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 3
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 4
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 4
34435: PUSH
34436: LD_INT 4
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 4
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 5
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 5
34465: PUSH
34466: LD_INT 5
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 4
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: PUSH
34486: LD_INT 4
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 5
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: LD_INT 5
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34570: LD_ADDR_VAR 0 33
34574: PUSH
34575: LD_INT 4
34577: NEG
34578: PUSH
34579: LD_INT 4
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 4
34589: NEG
34590: PUSH
34591: LD_INT 5
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 3
34601: NEG
34602: PUSH
34603: LD_INT 4
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 3
34613: NEG
34614: PUSH
34615: LD_INT 3
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 4
34625: NEG
34626: PUSH
34627: LD_INT 3
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 5
34637: NEG
34638: PUSH
34639: LD_INT 4
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 5
34649: NEG
34650: PUSH
34651: LD_INT 5
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 3
34661: NEG
34662: PUSH
34663: LD_INT 5
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 5
34673: NEG
34674: PUSH
34675: LD_INT 3
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 3
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 4
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 3
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 3
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 4
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 4
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 4
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 5
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 5
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 4
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 4
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 4
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: LD_INT 5
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35108: LD_ADDR_VAR 0 34
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 4
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 5
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 4
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 3
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 4
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 5
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 3
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: LD_INT 5
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 3
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 3
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 4
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 4
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 3
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 4
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 4
35310: PUSH
35311: LD_INT 4
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 4
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 5
35330: PUSH
35331: LD_INT 4
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 5
35340: PUSH
35341: LD_INT 5
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 4
35350: PUSH
35351: LD_INT 5
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 5
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 3
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 4
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 4
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 3
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 4
35493: NEG
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 4
35504: NEG
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 3
35516: NEG
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 3
35527: NEG
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 4
35538: NEG
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 5
35549: NEG
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 5
35560: NEG
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 5
35572: NEG
35573: PUSH
35574: LD_INT 2
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// end ; end ;
35640: GO 35643
35642: POP
// case btype of b_depot , b_warehouse :
35643: LD_VAR 0 1
35647: PUSH
35648: LD_INT 0
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35662
35654: LD_INT 1
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35662
35660: GO 35863
35662: POP
// case nation of nation_american :
35663: LD_VAR 0 5
35667: PUSH
35668: LD_INT 1
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35676
35674: GO 35732
35676: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35677: LD_ADDR_VAR 0 9
35681: PUSH
35682: LD_VAR 0 11
35686: PUSH
35687: LD_VAR 0 12
35691: PUSH
35692: LD_VAR 0 13
35696: PUSH
35697: LD_VAR 0 14
35701: PUSH
35702: LD_VAR 0 15
35706: PUSH
35707: LD_VAR 0 16
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: PUSH
35720: LD_VAR 0 4
35724: PUSH
35725: LD_INT 1
35727: PLUS
35728: ARRAY
35729: ST_TO_ADDR
35730: GO 35861
35732: LD_INT 2
35734: DOUBLE
35735: EQUAL
35736: IFTRUE 35740
35738: GO 35796
35740: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_VAR 0 17
35750: PUSH
35751: LD_VAR 0 18
35755: PUSH
35756: LD_VAR 0 19
35760: PUSH
35761: LD_VAR 0 20
35765: PUSH
35766: LD_VAR 0 21
35770: PUSH
35771: LD_VAR 0 22
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: LD_VAR 0 4
35788: PUSH
35789: LD_INT 1
35791: PLUS
35792: ARRAY
35793: ST_TO_ADDR
35794: GO 35861
35796: LD_INT 3
35798: DOUBLE
35799: EQUAL
35800: IFTRUE 35804
35802: GO 35860
35804: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35805: LD_ADDR_VAR 0 9
35809: PUSH
35810: LD_VAR 0 23
35814: PUSH
35815: LD_VAR 0 24
35819: PUSH
35820: LD_VAR 0 25
35824: PUSH
35825: LD_VAR 0 26
35829: PUSH
35830: LD_VAR 0 27
35834: PUSH
35835: LD_VAR 0 28
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: PUSH
35848: LD_VAR 0 4
35852: PUSH
35853: LD_INT 1
35855: PLUS
35856: ARRAY
35857: ST_TO_ADDR
35858: GO 35861
35860: POP
35861: GO 36416
35863: LD_INT 2
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35877
35869: LD_INT 3
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35877
35875: GO 35933
35877: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_VAR 0 29
35887: PUSH
35888: LD_VAR 0 30
35892: PUSH
35893: LD_VAR 0 31
35897: PUSH
35898: LD_VAR 0 32
35902: PUSH
35903: LD_VAR 0 33
35907: PUSH
35908: LD_VAR 0 34
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: PUSH
35921: LD_VAR 0 4
35925: PUSH
35926: LD_INT 1
35928: PLUS
35929: ARRAY
35930: ST_TO_ADDR
35931: GO 36416
35933: LD_INT 16
35935: DOUBLE
35936: EQUAL
35937: IFTRUE 35995
35939: LD_INT 17
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35995
35945: LD_INT 18
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35995
35951: LD_INT 19
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35995
35957: LD_INT 22
35959: DOUBLE
35960: EQUAL
35961: IFTRUE 35995
35963: LD_INT 20
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35995
35969: LD_INT 21
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35995
35975: LD_INT 23
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35995
35981: LD_INT 24
35983: DOUBLE
35984: EQUAL
35985: IFTRUE 35995
35987: LD_INT 25
35989: DOUBLE
35990: EQUAL
35991: IFTRUE 35995
35993: GO 36051
35995: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35996: LD_ADDR_VAR 0 9
36000: PUSH
36001: LD_VAR 0 35
36005: PUSH
36006: LD_VAR 0 36
36010: PUSH
36011: LD_VAR 0 37
36015: PUSH
36016: LD_VAR 0 38
36020: PUSH
36021: LD_VAR 0 39
36025: PUSH
36026: LD_VAR 0 40
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: PUSH
36039: LD_VAR 0 4
36043: PUSH
36044: LD_INT 1
36046: PLUS
36047: ARRAY
36048: ST_TO_ADDR
36049: GO 36416
36051: LD_INT 6
36053: DOUBLE
36054: EQUAL
36055: IFTRUE 36107
36057: LD_INT 7
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36107
36063: LD_INT 8
36065: DOUBLE
36066: EQUAL
36067: IFTRUE 36107
36069: LD_INT 13
36071: DOUBLE
36072: EQUAL
36073: IFTRUE 36107
36075: LD_INT 12
36077: DOUBLE
36078: EQUAL
36079: IFTRUE 36107
36081: LD_INT 15
36083: DOUBLE
36084: EQUAL
36085: IFTRUE 36107
36087: LD_INT 11
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36107
36093: LD_INT 14
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36107
36099: LD_INT 10
36101: DOUBLE
36102: EQUAL
36103: IFTRUE 36107
36105: GO 36163
36107: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: LD_VAR 0 41
36117: PUSH
36118: LD_VAR 0 42
36122: PUSH
36123: LD_VAR 0 43
36127: PUSH
36128: LD_VAR 0 44
36132: PUSH
36133: LD_VAR 0 45
36137: PUSH
36138: LD_VAR 0 46
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: PUSH
36151: LD_VAR 0 4
36155: PUSH
36156: LD_INT 1
36158: PLUS
36159: ARRAY
36160: ST_TO_ADDR
36161: GO 36416
36163: LD_INT 36
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36227
36171: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36172: LD_ADDR_VAR 0 9
36176: PUSH
36177: LD_VAR 0 47
36181: PUSH
36182: LD_VAR 0 48
36186: PUSH
36187: LD_VAR 0 49
36191: PUSH
36192: LD_VAR 0 50
36196: PUSH
36197: LD_VAR 0 51
36201: PUSH
36202: LD_VAR 0 52
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: PUSH
36215: LD_VAR 0 4
36219: PUSH
36220: LD_INT 1
36222: PLUS
36223: ARRAY
36224: ST_TO_ADDR
36225: GO 36416
36227: LD_INT 4
36229: DOUBLE
36230: EQUAL
36231: IFTRUE 36253
36233: LD_INT 5
36235: DOUBLE
36236: EQUAL
36237: IFTRUE 36253
36239: LD_INT 34
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36253
36245: LD_INT 37
36247: DOUBLE
36248: EQUAL
36249: IFTRUE 36253
36251: GO 36309
36253: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36254: LD_ADDR_VAR 0 9
36258: PUSH
36259: LD_VAR 0 53
36263: PUSH
36264: LD_VAR 0 54
36268: PUSH
36269: LD_VAR 0 55
36273: PUSH
36274: LD_VAR 0 56
36278: PUSH
36279: LD_VAR 0 57
36283: PUSH
36284: LD_VAR 0 58
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: PUSH
36297: LD_VAR 0 4
36301: PUSH
36302: LD_INT 1
36304: PLUS
36305: ARRAY
36306: ST_TO_ADDR
36307: GO 36416
36309: LD_INT 31
36311: DOUBLE
36312: EQUAL
36313: IFTRUE 36359
36315: LD_INT 32
36317: DOUBLE
36318: EQUAL
36319: IFTRUE 36359
36321: LD_INT 33
36323: DOUBLE
36324: EQUAL
36325: IFTRUE 36359
36327: LD_INT 27
36329: DOUBLE
36330: EQUAL
36331: IFTRUE 36359
36333: LD_INT 26
36335: DOUBLE
36336: EQUAL
36337: IFTRUE 36359
36339: LD_INT 28
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36359
36345: LD_INT 29
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36359
36351: LD_INT 30
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36415
36359: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36360: LD_ADDR_VAR 0 9
36364: PUSH
36365: LD_VAR 0 59
36369: PUSH
36370: LD_VAR 0 60
36374: PUSH
36375: LD_VAR 0 61
36379: PUSH
36380: LD_VAR 0 62
36384: PUSH
36385: LD_VAR 0 63
36389: PUSH
36390: LD_VAR 0 64
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 4
36407: PUSH
36408: LD_INT 1
36410: PLUS
36411: ARRAY
36412: ST_TO_ADDR
36413: GO 36416
36415: POP
// temp_list2 = [ ] ;
36416: LD_ADDR_VAR 0 10
36420: PUSH
36421: EMPTY
36422: ST_TO_ADDR
// for i in temp_list do
36423: LD_ADDR_VAR 0 8
36427: PUSH
36428: LD_VAR 0 9
36432: PUSH
36433: FOR_IN
36434: IFFALSE 36486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36436: LD_ADDR_VAR 0 10
36440: PUSH
36441: LD_VAR 0 10
36445: PUSH
36446: LD_VAR 0 8
36450: PUSH
36451: LD_INT 1
36453: ARRAY
36454: PUSH
36455: LD_VAR 0 2
36459: PLUS
36460: PUSH
36461: LD_VAR 0 8
36465: PUSH
36466: LD_INT 2
36468: ARRAY
36469: PUSH
36470: LD_VAR 0 3
36474: PLUS
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: ADD
36483: ST_TO_ADDR
36484: GO 36433
36486: POP
36487: POP
// result = temp_list2 ;
36488: LD_ADDR_VAR 0 7
36492: PUSH
36493: LD_VAR 0 10
36497: ST_TO_ADDR
// end ;
36498: LD_VAR 0 7
36502: RET
// export function EnemyInRange ( unit , dist ) ; begin
36503: LD_INT 0
36505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 255
36520: PPUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 250
36530: PPUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 251
36540: PPUSH
36541: LD_VAR 0 2
36545: PPUSH
36546: CALL 9876 0 4
36550: PUSH
36551: LD_INT 4
36553: ARRAY
36554: ST_TO_ADDR
// end ;
36555: LD_VAR 0 3
36559: RET
// export function PlayerSeeMe ( unit ) ; begin
36560: LD_INT 0
36562: PPUSH
// result := See ( your_side , unit ) ;
36563: LD_ADDR_VAR 0 2
36567: PUSH
36568: LD_OWVAR 2
36572: PPUSH
36573: LD_VAR 0 1
36577: PPUSH
36578: CALL_OW 292
36582: ST_TO_ADDR
// end ;
36583: LD_VAR 0 2
36587: RET
// export function ReverseDir ( unit ) ; begin
36588: LD_INT 0
36590: PPUSH
// if not unit then
36591: LD_VAR 0 1
36595: NOT
36596: IFFALSE 36600
// exit ;
36598: GO 36623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36600: LD_ADDR_VAR 0 2
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 254
36614: PUSH
36615: LD_INT 3
36617: PLUS
36618: PUSH
36619: LD_INT 6
36621: MOD
36622: ST_TO_ADDR
// end ;
36623: LD_VAR 0 2
36627: RET
// export function ReverseArray ( array ) ; var i ; begin
36628: LD_INT 0
36630: PPUSH
36631: PPUSH
// if not array then
36632: LD_VAR 0 1
36636: NOT
36637: IFFALSE 36641
// exit ;
36639: GO 36696
// result := [ ] ;
36641: LD_ADDR_VAR 0 2
36645: PUSH
36646: EMPTY
36647: ST_TO_ADDR
// for i := array downto 1 do
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: DOUBLE
36654: LD_VAR 0 1
36658: INC
36659: ST_TO_ADDR
36660: LD_INT 1
36662: PUSH
36663: FOR_DOWNTO
36664: IFFALSE 36694
// result := Join ( result , array [ i ] ) ;
36666: LD_ADDR_VAR 0 2
36670: PUSH
36671: LD_VAR 0 2
36675: PPUSH
36676: LD_VAR 0 1
36680: PUSH
36681: LD_VAR 0 3
36685: ARRAY
36686: PPUSH
36687: CALL 41341 0 2
36691: ST_TO_ADDR
36692: GO 36663
36694: POP
36695: POP
// end ;
36696: LD_VAR 0 2
36700: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
// if not unit or not hexes then
36709: LD_VAR 0 1
36713: NOT
36714: PUSH
36715: LD_VAR 0 2
36719: NOT
36720: OR
36721: IFFALSE 36725
// exit ;
36723: GO 36848
// dist := 9999 ;
36725: LD_ADDR_VAR 0 5
36729: PUSH
36730: LD_INT 9999
36732: ST_TO_ADDR
// for i = 1 to hexes do
36733: LD_ADDR_VAR 0 4
36737: PUSH
36738: DOUBLE
36739: LD_INT 1
36741: DEC
36742: ST_TO_ADDR
36743: LD_VAR 0 2
36747: PUSH
36748: FOR_TO
36749: IFFALSE 36836
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: LD_VAR 0 1
36760: PPUSH
36761: LD_VAR 0 2
36765: PUSH
36766: LD_VAR 0 4
36770: ARRAY
36771: PUSH
36772: LD_INT 1
36774: ARRAY
36775: PPUSH
36776: LD_VAR 0 2
36780: PUSH
36781: LD_VAR 0 4
36785: ARRAY
36786: PUSH
36787: LD_INT 2
36789: ARRAY
36790: PPUSH
36791: CALL_OW 297
36795: ST_TO_ADDR
// if tdist < dist then
36796: LD_VAR 0 6
36800: PUSH
36801: LD_VAR 0 5
36805: LESS
36806: IFFALSE 36834
// begin hex := hexes [ i ] ;
36808: LD_ADDR_VAR 0 8
36812: PUSH
36813: LD_VAR 0 2
36817: PUSH
36818: LD_VAR 0 4
36822: ARRAY
36823: ST_TO_ADDR
// dist := tdist ;
36824: LD_ADDR_VAR 0 5
36828: PUSH
36829: LD_VAR 0 6
36833: ST_TO_ADDR
// end ; end ;
36834: GO 36748
36836: POP
36837: POP
// result := hex ;
36838: LD_ADDR_VAR 0 3
36842: PUSH
36843: LD_VAR 0 8
36847: ST_TO_ADDR
// end ;
36848: LD_VAR 0 3
36852: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36853: LD_INT 0
36855: PPUSH
36856: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36857: LD_VAR 0 1
36861: NOT
36862: PUSH
36863: LD_VAR 0 1
36867: PUSH
36868: LD_INT 21
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 23
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PPUSH
36892: CALL_OW 69
36896: IN
36897: NOT
36898: OR
36899: IFFALSE 36903
// exit ;
36901: GO 36950
// for i = 1 to 3 do
36903: LD_ADDR_VAR 0 3
36907: PUSH
36908: DOUBLE
36909: LD_INT 1
36911: DEC
36912: ST_TO_ADDR
36913: LD_INT 3
36915: PUSH
36916: FOR_TO
36917: IFFALSE 36948
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 250
36928: PPUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: CALL_OW 251
36938: PPUSH
36939: LD_INT 1
36941: PPUSH
36942: CALL_OW 453
36946: GO 36916
36948: POP
36949: POP
// end ;
36950: LD_VAR 0 2
36954: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
// if not unit or not enemy_unit then
36963: LD_VAR 0 1
36967: NOT
36968: PUSH
36969: LD_VAR 0 2
36973: NOT
36974: OR
36975: IFFALSE 36979
// exit ;
36977: GO 37446
// if GetLives ( i ) < 250 then
36979: LD_VAR 0 4
36983: PPUSH
36984: CALL_OW 256
36988: PUSH
36989: LD_INT 250
36991: LESS
36992: IFFALSE 37005
// begin ComAutodestruct ( i ) ;
36994: LD_VAR 0 4
36998: PPUSH
36999: CALL 36853 0 1
// exit ;
37003: GO 37446
// end ; x := GetX ( enemy_unit ) ;
37005: LD_ADDR_VAR 0 7
37009: PUSH
37010: LD_VAR 0 2
37014: PPUSH
37015: CALL_OW 250
37019: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37020: LD_ADDR_VAR 0 8
37024: PUSH
37025: LD_VAR 0 2
37029: PPUSH
37030: CALL_OW 251
37034: ST_TO_ADDR
// if not x or not y then
37035: LD_VAR 0 7
37039: NOT
37040: PUSH
37041: LD_VAR 0 8
37045: NOT
37046: OR
37047: IFFALSE 37051
// exit ;
37049: GO 37446
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37051: LD_ADDR_VAR 0 6
37055: PUSH
37056: LD_VAR 0 7
37060: PPUSH
37061: LD_INT 0
37063: PPUSH
37064: LD_INT 4
37066: PPUSH
37067: CALL_OW 272
37071: PUSH
37072: LD_VAR 0 8
37076: PPUSH
37077: LD_INT 0
37079: PPUSH
37080: LD_INT 4
37082: PPUSH
37083: CALL_OW 273
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_VAR 0 7
37096: PPUSH
37097: LD_INT 1
37099: PPUSH
37100: LD_INT 4
37102: PPUSH
37103: CALL_OW 272
37107: PUSH
37108: LD_VAR 0 8
37112: PPUSH
37113: LD_INT 1
37115: PPUSH
37116: LD_INT 4
37118: PPUSH
37119: CALL_OW 273
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_VAR 0 7
37132: PPUSH
37133: LD_INT 2
37135: PPUSH
37136: LD_INT 4
37138: PPUSH
37139: CALL_OW 272
37143: PUSH
37144: LD_VAR 0 8
37148: PPUSH
37149: LD_INT 2
37151: PPUSH
37152: LD_INT 4
37154: PPUSH
37155: CALL_OW 273
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_VAR 0 7
37168: PPUSH
37169: LD_INT 3
37171: PPUSH
37172: LD_INT 4
37174: PPUSH
37175: CALL_OW 272
37179: PUSH
37180: LD_VAR 0 8
37184: PPUSH
37185: LD_INT 3
37187: PPUSH
37188: LD_INT 4
37190: PPUSH
37191: CALL_OW 273
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_VAR 0 7
37204: PPUSH
37205: LD_INT 4
37207: PPUSH
37208: LD_INT 4
37210: PPUSH
37211: CALL_OW 272
37215: PUSH
37216: LD_VAR 0 8
37220: PPUSH
37221: LD_INT 4
37223: PPUSH
37224: LD_INT 4
37226: PPUSH
37227: CALL_OW 273
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_VAR 0 7
37240: PPUSH
37241: LD_INT 5
37243: PPUSH
37244: LD_INT 4
37246: PPUSH
37247: CALL_OW 272
37251: PUSH
37252: LD_VAR 0 8
37256: PPUSH
37257: LD_INT 5
37259: PPUSH
37260: LD_INT 4
37262: PPUSH
37263: CALL_OW 273
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// for i = tmp downto 1 do
37280: LD_ADDR_VAR 0 4
37284: PUSH
37285: DOUBLE
37286: LD_VAR 0 6
37290: INC
37291: ST_TO_ADDR
37292: LD_INT 1
37294: PUSH
37295: FOR_DOWNTO
37296: IFFALSE 37397
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37298: LD_VAR 0 6
37302: PUSH
37303: LD_VAR 0 4
37307: ARRAY
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: PPUSH
37313: LD_VAR 0 6
37317: PUSH
37318: LD_VAR 0 4
37322: ARRAY
37323: PUSH
37324: LD_INT 2
37326: ARRAY
37327: PPUSH
37328: CALL_OW 488
37332: NOT
37333: PUSH
37334: LD_VAR 0 6
37338: PUSH
37339: LD_VAR 0 4
37343: ARRAY
37344: PUSH
37345: LD_INT 1
37347: ARRAY
37348: PPUSH
37349: LD_VAR 0 6
37353: PUSH
37354: LD_VAR 0 4
37358: ARRAY
37359: PUSH
37360: LD_INT 2
37362: ARRAY
37363: PPUSH
37364: CALL_OW 428
37368: PUSH
37369: LD_INT 0
37371: NONEQUAL
37372: OR
37373: IFFALSE 37395
// tmp := Delete ( tmp , i ) ;
37375: LD_ADDR_VAR 0 6
37379: PUSH
37380: LD_VAR 0 6
37384: PPUSH
37385: LD_VAR 0 4
37389: PPUSH
37390: CALL_OW 3
37394: ST_TO_ADDR
37395: GO 37295
37397: POP
37398: POP
// j := GetClosestHex ( unit , tmp ) ;
37399: LD_ADDR_VAR 0 5
37403: PUSH
37404: LD_VAR 0 1
37408: PPUSH
37409: LD_VAR 0 6
37413: PPUSH
37414: CALL 36701 0 2
37418: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37419: LD_VAR 0 1
37423: PPUSH
37424: LD_VAR 0 5
37428: PUSH
37429: LD_INT 1
37431: ARRAY
37432: PPUSH
37433: LD_VAR 0 5
37437: PUSH
37438: LD_INT 2
37440: ARRAY
37441: PPUSH
37442: CALL_OW 111
// end ;
37446: LD_VAR 0 3
37450: RET
// export function PrepareApemanSoldier ( ) ; begin
37451: LD_INT 0
37453: PPUSH
// uc_nation := 0 ;
37454: LD_ADDR_OWVAR 21
37458: PUSH
37459: LD_INT 0
37461: ST_TO_ADDR
// hc_sex := sex_male ;
37462: LD_ADDR_OWVAR 27
37466: PUSH
37467: LD_INT 1
37469: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37470: LD_ADDR_OWVAR 28
37474: PUSH
37475: LD_INT 15
37477: ST_TO_ADDR
// hc_gallery :=  ;
37478: LD_ADDR_OWVAR 33
37482: PUSH
37483: LD_STRING 
37485: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37486: LD_ADDR_OWVAR 31
37490: PUSH
37491: LD_INT 0
37493: PPUSH
37494: LD_INT 3
37496: PPUSH
37497: CALL_OW 12
37501: PUSH
37502: LD_INT 0
37504: PPUSH
37505: LD_INT 3
37507: PPUSH
37508: CALL_OW 12
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: ST_TO_ADDR
// end ;
37525: LD_VAR 0 1
37529: RET
// export function PrepareApemanEngineer ( ) ; begin
37530: LD_INT 0
37532: PPUSH
// uc_nation := 0 ;
37533: LD_ADDR_OWVAR 21
37537: PUSH
37538: LD_INT 0
37540: ST_TO_ADDR
// hc_sex := sex_male ;
37541: LD_ADDR_OWVAR 27
37545: PUSH
37546: LD_INT 1
37548: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37549: LD_ADDR_OWVAR 28
37553: PUSH
37554: LD_INT 16
37556: ST_TO_ADDR
// hc_gallery :=  ;
37557: LD_ADDR_OWVAR 33
37561: PUSH
37562: LD_STRING 
37564: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37565: LD_ADDR_OWVAR 31
37569: PUSH
37570: LD_INT 0
37572: PPUSH
37573: LD_INT 3
37575: PPUSH
37576: CALL_OW 12
37580: PUSH
37581: LD_INT 0
37583: PPUSH
37584: LD_INT 3
37586: PPUSH
37587: CALL_OW 12
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: ST_TO_ADDR
// end ;
37604: LD_VAR 0 1
37608: RET
// export function PrepareApeman ( agressivity ) ; begin
37609: LD_INT 0
37611: PPUSH
// uc_side := 0 ;
37612: LD_ADDR_OWVAR 20
37616: PUSH
37617: LD_INT 0
37619: ST_TO_ADDR
// uc_nation := 0 ;
37620: LD_ADDR_OWVAR 21
37624: PUSH
37625: LD_INT 0
37627: ST_TO_ADDR
// hc_sex := sex_male ;
37628: LD_ADDR_OWVAR 27
37632: PUSH
37633: LD_INT 1
37635: ST_TO_ADDR
// hc_class := class_apeman ;
37636: LD_ADDR_OWVAR 28
37640: PUSH
37641: LD_INT 12
37643: ST_TO_ADDR
// hc_gallery :=  ;
37644: LD_ADDR_OWVAR 33
37648: PUSH
37649: LD_STRING 
37651: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37652: LD_ADDR_OWVAR 35
37656: PUSH
37657: LD_VAR 0 1
37661: NEG
37662: PPUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 12
37672: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37673: LD_ADDR_OWVAR 31
37677: PUSH
37678: LD_INT 0
37680: PPUSH
37681: LD_INT 3
37683: PPUSH
37684: CALL_OW 12
37688: PUSH
37689: LD_INT 0
37691: PPUSH
37692: LD_INT 3
37694: PPUSH
37695: CALL_OW 12
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// end ;
37712: LD_VAR 0 2
37716: RET
// export function PrepareTiger ( agressivity ) ; begin
37717: LD_INT 0
37719: PPUSH
// uc_side := 0 ;
37720: LD_ADDR_OWVAR 20
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
// uc_nation := 0 ;
37728: LD_ADDR_OWVAR 21
37732: PUSH
37733: LD_INT 0
37735: ST_TO_ADDR
// hc_class := class_tiger ;
37736: LD_ADDR_OWVAR 28
37740: PUSH
37741: LD_INT 14
37743: ST_TO_ADDR
// hc_gallery :=  ;
37744: LD_ADDR_OWVAR 33
37748: PUSH
37749: LD_STRING 
37751: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37752: LD_ADDR_OWVAR 35
37756: PUSH
37757: LD_VAR 0 1
37761: NEG
37762: PPUSH
37763: LD_VAR 0 1
37767: PPUSH
37768: CALL_OW 12
37772: ST_TO_ADDR
// end ;
37773: LD_VAR 0 2
37777: RET
// export function PrepareEnchidna ( ) ; begin
37778: LD_INT 0
37780: PPUSH
// uc_side := 0 ;
37781: LD_ADDR_OWVAR 20
37785: PUSH
37786: LD_INT 0
37788: ST_TO_ADDR
// uc_nation := 0 ;
37789: LD_ADDR_OWVAR 21
37793: PUSH
37794: LD_INT 0
37796: ST_TO_ADDR
// hc_class := class_baggie ;
37797: LD_ADDR_OWVAR 28
37801: PUSH
37802: LD_INT 13
37804: ST_TO_ADDR
// hc_gallery :=  ;
37805: LD_ADDR_OWVAR 33
37809: PUSH
37810: LD_STRING 
37812: ST_TO_ADDR
// end ;
37813: LD_VAR 0 1
37817: RET
// export function PrepareFrog ( ) ; begin
37818: LD_INT 0
37820: PPUSH
// uc_side := 0 ;
37821: LD_ADDR_OWVAR 20
37825: PUSH
37826: LD_INT 0
37828: ST_TO_ADDR
// uc_nation := 0 ;
37829: LD_ADDR_OWVAR 21
37833: PUSH
37834: LD_INT 0
37836: ST_TO_ADDR
// hc_class := class_frog ;
37837: LD_ADDR_OWVAR 28
37841: PUSH
37842: LD_INT 19
37844: ST_TO_ADDR
// hc_gallery :=  ;
37845: LD_ADDR_OWVAR 33
37849: PUSH
37850: LD_STRING 
37852: ST_TO_ADDR
// end ;
37853: LD_VAR 0 1
37857: RET
// export function PrepareFish ( ) ; begin
37858: LD_INT 0
37860: PPUSH
// uc_side := 0 ;
37861: LD_ADDR_OWVAR 20
37865: PUSH
37866: LD_INT 0
37868: ST_TO_ADDR
// uc_nation := 0 ;
37869: LD_ADDR_OWVAR 21
37873: PUSH
37874: LD_INT 0
37876: ST_TO_ADDR
// hc_class := class_fish ;
37877: LD_ADDR_OWVAR 28
37881: PUSH
37882: LD_INT 20
37884: ST_TO_ADDR
// hc_gallery :=  ;
37885: LD_ADDR_OWVAR 33
37889: PUSH
37890: LD_STRING 
37892: ST_TO_ADDR
// end ;
37893: LD_VAR 0 1
37897: RET
// export function PrepareBird ( ) ; begin
37898: LD_INT 0
37900: PPUSH
// uc_side := 0 ;
37901: LD_ADDR_OWVAR 20
37905: PUSH
37906: LD_INT 0
37908: ST_TO_ADDR
// uc_nation := 0 ;
37909: LD_ADDR_OWVAR 21
37913: PUSH
37914: LD_INT 0
37916: ST_TO_ADDR
// hc_class := class_phororhacos ;
37917: LD_ADDR_OWVAR 28
37921: PUSH
37922: LD_INT 18
37924: ST_TO_ADDR
// hc_gallery :=  ;
37925: LD_ADDR_OWVAR 33
37929: PUSH
37930: LD_STRING 
37932: ST_TO_ADDR
// end ;
37933: LD_VAR 0 1
37937: RET
// export function PrepareHorse ( ) ; begin
37938: LD_INT 0
37940: PPUSH
// uc_side := 0 ;
37941: LD_ADDR_OWVAR 20
37945: PUSH
37946: LD_INT 0
37948: ST_TO_ADDR
// uc_nation := 0 ;
37949: LD_ADDR_OWVAR 21
37953: PUSH
37954: LD_INT 0
37956: ST_TO_ADDR
// hc_class := class_horse ;
37957: LD_ADDR_OWVAR 28
37961: PUSH
37962: LD_INT 21
37964: ST_TO_ADDR
// hc_gallery :=  ;
37965: LD_ADDR_OWVAR 33
37969: PUSH
37970: LD_STRING 
37972: ST_TO_ADDR
// end ;
37973: LD_VAR 0 1
37977: RET
// export function PrepareMastodont ( ) ; begin
37978: LD_INT 0
37980: PPUSH
// uc_side := 0 ;
37981: LD_ADDR_OWVAR 20
37985: PUSH
37986: LD_INT 0
37988: ST_TO_ADDR
// uc_nation := 0 ;
37989: LD_ADDR_OWVAR 21
37993: PUSH
37994: LD_INT 0
37996: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37997: LD_ADDR_OWVAR 37
38001: PUSH
38002: LD_INT 31
38004: ST_TO_ADDR
// vc_control := control_rider ;
38005: LD_ADDR_OWVAR 38
38009: PUSH
38010: LD_INT 4
38012: ST_TO_ADDR
// end ;
38013: LD_VAR 0 1
38017: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38018: LD_INT 0
38020: PPUSH
38021: PPUSH
38022: PPUSH
// uc_side = 0 ;
38023: LD_ADDR_OWVAR 20
38027: PUSH
38028: LD_INT 0
38030: ST_TO_ADDR
// uc_nation = 0 ;
38031: LD_ADDR_OWVAR 21
38035: PUSH
38036: LD_INT 0
38038: ST_TO_ADDR
// InitHc_All ( ) ;
38039: CALL_OW 584
// InitVc ;
38043: CALL_OW 20
// if mastodonts then
38047: LD_VAR 0 6
38051: IFFALSE 38118
// for i = 1 to mastodonts do
38053: LD_ADDR_VAR 0 11
38057: PUSH
38058: DOUBLE
38059: LD_INT 1
38061: DEC
38062: ST_TO_ADDR
38063: LD_VAR 0 6
38067: PUSH
38068: FOR_TO
38069: IFFALSE 38116
// begin vc_chassis := 31 ;
38071: LD_ADDR_OWVAR 37
38075: PUSH
38076: LD_INT 31
38078: ST_TO_ADDR
// vc_control := control_rider ;
38079: LD_ADDR_OWVAR 38
38083: PUSH
38084: LD_INT 4
38086: ST_TO_ADDR
// animal := CreateVehicle ;
38087: LD_ADDR_VAR 0 12
38091: PUSH
38092: CALL_OW 45
38096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38097: LD_VAR 0 12
38101: PPUSH
38102: LD_VAR 0 8
38106: PPUSH
38107: LD_INT 0
38109: PPUSH
38110: CALL 40246 0 3
// end ;
38114: GO 38068
38116: POP
38117: POP
// if horses then
38118: LD_VAR 0 5
38122: IFFALSE 38189
// for i = 1 to horses do
38124: LD_ADDR_VAR 0 11
38128: PUSH
38129: DOUBLE
38130: LD_INT 1
38132: DEC
38133: ST_TO_ADDR
38134: LD_VAR 0 5
38138: PUSH
38139: FOR_TO
38140: IFFALSE 38187
// begin hc_class := 21 ;
38142: LD_ADDR_OWVAR 28
38146: PUSH
38147: LD_INT 21
38149: ST_TO_ADDR
// hc_gallery :=  ;
38150: LD_ADDR_OWVAR 33
38154: PUSH
38155: LD_STRING 
38157: ST_TO_ADDR
// animal := CreateHuman ;
38158: LD_ADDR_VAR 0 12
38162: PUSH
38163: CALL_OW 44
38167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38168: LD_VAR 0 12
38172: PPUSH
38173: LD_VAR 0 8
38177: PPUSH
38178: LD_INT 0
38180: PPUSH
38181: CALL 40246 0 3
// end ;
38185: GO 38139
38187: POP
38188: POP
// if birds then
38189: LD_VAR 0 1
38193: IFFALSE 38260
// for i = 1 to birds do
38195: LD_ADDR_VAR 0 11
38199: PUSH
38200: DOUBLE
38201: LD_INT 1
38203: DEC
38204: ST_TO_ADDR
38205: LD_VAR 0 1
38209: PUSH
38210: FOR_TO
38211: IFFALSE 38258
// begin hc_class := 18 ;
38213: LD_ADDR_OWVAR 28
38217: PUSH
38218: LD_INT 18
38220: ST_TO_ADDR
// hc_gallery =  ;
38221: LD_ADDR_OWVAR 33
38225: PUSH
38226: LD_STRING 
38228: ST_TO_ADDR
// animal := CreateHuman ;
38229: LD_ADDR_VAR 0 12
38233: PUSH
38234: CALL_OW 44
38238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38239: LD_VAR 0 12
38243: PPUSH
38244: LD_VAR 0 8
38248: PPUSH
38249: LD_INT 0
38251: PPUSH
38252: CALL 40246 0 3
// end ;
38256: GO 38210
38258: POP
38259: POP
// if tigers then
38260: LD_VAR 0 2
38264: IFFALSE 38348
// for i = 1 to tigers do
38266: LD_ADDR_VAR 0 11
38270: PUSH
38271: DOUBLE
38272: LD_INT 1
38274: DEC
38275: ST_TO_ADDR
38276: LD_VAR 0 2
38280: PUSH
38281: FOR_TO
38282: IFFALSE 38346
// begin hc_class = class_tiger ;
38284: LD_ADDR_OWVAR 28
38288: PUSH
38289: LD_INT 14
38291: ST_TO_ADDR
// hc_gallery =  ;
38292: LD_ADDR_OWVAR 33
38296: PUSH
38297: LD_STRING 
38299: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38300: LD_ADDR_OWVAR 35
38304: PUSH
38305: LD_INT 7
38307: NEG
38308: PPUSH
38309: LD_INT 7
38311: PPUSH
38312: CALL_OW 12
38316: ST_TO_ADDR
// animal := CreateHuman ;
38317: LD_ADDR_VAR 0 12
38321: PUSH
38322: CALL_OW 44
38326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38327: LD_VAR 0 12
38331: PPUSH
38332: LD_VAR 0 8
38336: PPUSH
38337: LD_INT 0
38339: PPUSH
38340: CALL 40246 0 3
// end ;
38344: GO 38281
38346: POP
38347: POP
// if apemans then
38348: LD_VAR 0 3
38352: IFFALSE 38475
// for i = 1 to apemans do
38354: LD_ADDR_VAR 0 11
38358: PUSH
38359: DOUBLE
38360: LD_INT 1
38362: DEC
38363: ST_TO_ADDR
38364: LD_VAR 0 3
38368: PUSH
38369: FOR_TO
38370: IFFALSE 38473
// begin hc_class = class_apeman ;
38372: LD_ADDR_OWVAR 28
38376: PUSH
38377: LD_INT 12
38379: ST_TO_ADDR
// hc_gallery =  ;
38380: LD_ADDR_OWVAR 33
38384: PUSH
38385: LD_STRING 
38387: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38388: LD_ADDR_OWVAR 35
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PPUSH
38397: LD_INT 2
38399: PPUSH
38400: CALL_OW 12
38404: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38405: LD_ADDR_OWVAR 31
38409: PUSH
38410: LD_INT 1
38412: PPUSH
38413: LD_INT 3
38415: PPUSH
38416: CALL_OW 12
38420: PUSH
38421: LD_INT 1
38423: PPUSH
38424: LD_INT 3
38426: PPUSH
38427: CALL_OW 12
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// animal := CreateHuman ;
38444: LD_ADDR_VAR 0 12
38448: PUSH
38449: CALL_OW 44
38453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38454: LD_VAR 0 12
38458: PPUSH
38459: LD_VAR 0 8
38463: PPUSH
38464: LD_INT 0
38466: PPUSH
38467: CALL 40246 0 3
// end ;
38471: GO 38369
38473: POP
38474: POP
// if enchidnas then
38475: LD_VAR 0 4
38479: IFFALSE 38546
// for i = 1 to enchidnas do
38481: LD_ADDR_VAR 0 11
38485: PUSH
38486: DOUBLE
38487: LD_INT 1
38489: DEC
38490: ST_TO_ADDR
38491: LD_VAR 0 4
38495: PUSH
38496: FOR_TO
38497: IFFALSE 38544
// begin hc_class = 13 ;
38499: LD_ADDR_OWVAR 28
38503: PUSH
38504: LD_INT 13
38506: ST_TO_ADDR
// hc_gallery =  ;
38507: LD_ADDR_OWVAR 33
38511: PUSH
38512: LD_STRING 
38514: ST_TO_ADDR
// animal := CreateHuman ;
38515: LD_ADDR_VAR 0 12
38519: PUSH
38520: CALL_OW 44
38524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38525: LD_VAR 0 12
38529: PPUSH
38530: LD_VAR 0 8
38534: PPUSH
38535: LD_INT 0
38537: PPUSH
38538: CALL 40246 0 3
// end ;
38542: GO 38496
38544: POP
38545: POP
// if fishes then
38546: LD_VAR 0 7
38550: IFFALSE 38617
// for i = 1 to fishes do
38552: LD_ADDR_VAR 0 11
38556: PUSH
38557: DOUBLE
38558: LD_INT 1
38560: DEC
38561: ST_TO_ADDR
38562: LD_VAR 0 7
38566: PUSH
38567: FOR_TO
38568: IFFALSE 38615
// begin hc_class = 20 ;
38570: LD_ADDR_OWVAR 28
38574: PUSH
38575: LD_INT 20
38577: ST_TO_ADDR
// hc_gallery =  ;
38578: LD_ADDR_OWVAR 33
38582: PUSH
38583: LD_STRING 
38585: ST_TO_ADDR
// animal := CreateHuman ;
38586: LD_ADDR_VAR 0 12
38590: PUSH
38591: CALL_OW 44
38595: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38596: LD_VAR 0 12
38600: PPUSH
38601: LD_VAR 0 9
38605: PPUSH
38606: LD_INT 0
38608: PPUSH
38609: CALL 40246 0 3
// end ;
38613: GO 38567
38615: POP
38616: POP
// end ;
38617: LD_VAR 0 10
38621: RET
// export function WantHeal ( sci , unit ) ; begin
38622: LD_INT 0
38624: PPUSH
// if GetTaskList ( sci ) > 0 then
38625: LD_VAR 0 1
38629: PPUSH
38630: CALL_OW 437
38634: PUSH
38635: LD_INT 0
38637: GREATER
38638: IFFALSE 38708
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 437
38649: PUSH
38650: LD_INT 1
38652: ARRAY
38653: PUSH
38654: LD_INT 1
38656: ARRAY
38657: PUSH
38658: LD_STRING l
38660: EQUAL
38661: PUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 437
38671: PUSH
38672: LD_INT 1
38674: ARRAY
38675: PUSH
38676: LD_INT 4
38678: ARRAY
38679: PUSH
38680: LD_VAR 0 2
38684: EQUAL
38685: AND
38686: IFFALSE 38698
// result := true else
38688: LD_ADDR_VAR 0 3
38692: PUSH
38693: LD_INT 1
38695: ST_TO_ADDR
38696: GO 38706
// result := false ;
38698: LD_ADDR_VAR 0 3
38702: PUSH
38703: LD_INT 0
38705: ST_TO_ADDR
// end else
38706: GO 38716
// result := false ;
38708: LD_ADDR_VAR 0 3
38712: PUSH
38713: LD_INT 0
38715: ST_TO_ADDR
// end ;
38716: LD_VAR 0 3
38720: RET
// export function HealTarget ( sci ) ; begin
38721: LD_INT 0
38723: PPUSH
// if not sci then
38724: LD_VAR 0 1
38728: NOT
38729: IFFALSE 38733
// exit ;
38731: GO 38798
// result := 0 ;
38733: LD_ADDR_VAR 0 2
38737: PUSH
38738: LD_INT 0
38740: ST_TO_ADDR
// if GetTaskList ( sci ) then
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 437
38750: IFFALSE 38798
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 437
38761: PUSH
38762: LD_INT 1
38764: ARRAY
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: PUSH
38770: LD_STRING l
38772: EQUAL
38773: IFFALSE 38798
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38775: LD_ADDR_VAR 0 2
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 437
38789: PUSH
38790: LD_INT 1
38792: ARRAY
38793: PUSH
38794: LD_INT 4
38796: ARRAY
38797: ST_TO_ADDR
// end ;
38798: LD_VAR 0 2
38802: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38803: LD_INT 0
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
// if not base_units then
38809: LD_VAR 0 1
38813: NOT
38814: IFFALSE 38818
// exit ;
38816: GO 38905
// result := false ;
38818: LD_ADDR_VAR 0 2
38822: PUSH
38823: LD_INT 0
38825: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38826: LD_ADDR_VAR 0 5
38830: PUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: LD_INT 21
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PPUSH
38846: CALL_OW 72
38850: ST_TO_ADDR
// if not tmp then
38851: LD_VAR 0 5
38855: NOT
38856: IFFALSE 38860
// exit ;
38858: GO 38905
// for i in tmp do
38860: LD_ADDR_VAR 0 3
38864: PUSH
38865: LD_VAR 0 5
38869: PUSH
38870: FOR_IN
38871: IFFALSE 38903
// begin result := EnemyInRange ( i , 22 ) ;
38873: LD_ADDR_VAR 0 2
38877: PUSH
38878: LD_VAR 0 3
38882: PPUSH
38883: LD_INT 22
38885: PPUSH
38886: CALL 36503 0 2
38890: ST_TO_ADDR
// if result then
38891: LD_VAR 0 2
38895: IFFALSE 38901
// exit ;
38897: POP
38898: POP
38899: GO 38905
// end ;
38901: GO 38870
38903: POP
38904: POP
// end ;
38905: LD_VAR 0 2
38909: RET
// export function FilterByTag ( units , tag ) ; begin
38910: LD_INT 0
38912: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_INT 120
38925: PUSH
38926: LD_VAR 0 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PPUSH
38935: CALL_OW 72
38939: ST_TO_ADDR
// end ;
38940: LD_VAR 0 3
38944: RET
// export function IsDriver ( un ) ; begin
38945: LD_INT 0
38947: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38948: LD_ADDR_VAR 0 2
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_INT 55
38960: PUSH
38961: EMPTY
38962: LIST
38963: PPUSH
38964: CALL_OW 69
38968: IN
38969: ST_TO_ADDR
// end ;
38970: LD_VAR 0 2
38974: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38975: LD_INT 0
38977: PPUSH
38978: PPUSH
// list := [ ] ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: EMPTY
38985: ST_TO_ADDR
// case d of 0 :
38986: LD_VAR 0 3
38990: PUSH
38991: LD_INT 0
38993: DOUBLE
38994: EQUAL
38995: IFTRUE 38999
38997: GO 39132
38999: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39000: LD_ADDR_VAR 0 5
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_INT 4
39012: MINUS
39013: PUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_INT 4
39021: MINUS
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_INT 3
39038: MINUS
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 4
39060: PLUS
39061: PUSH
39062: LD_VAR 0 2
39066: PUSH
39067: LD_INT 4
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_INT 3
39082: PLUS
39083: PUSH
39084: LD_VAR 0 2
39088: PUSH
39089: LD_INT 3
39091: PLUS
39092: PUSH
39093: LD_INT 5
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PUSH
39101: LD_VAR 0 1
39105: PUSH
39106: LD_VAR 0 2
39110: PUSH
39111: LD_INT 4
39113: PLUS
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// end ; 1 :
39130: GO 39830
39132: LD_INT 1
39134: DOUBLE
39135: EQUAL
39136: IFTRUE 39140
39138: GO 39273
39140: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39141: LD_ADDR_VAR 0 5
39145: PUSH
39146: LD_VAR 0 1
39150: PUSH
39151: LD_VAR 0 2
39155: PUSH
39156: LD_INT 4
39158: MINUS
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: PUSH
39168: LD_VAR 0 1
39172: PUSH
39173: LD_INT 3
39175: MINUS
39176: PUSH
39177: LD_VAR 0 2
39181: PUSH
39182: LD_INT 3
39184: MINUS
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: LD_INT 4
39201: MINUS
39202: PUSH
39203: LD_VAR 0 2
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PUSH
39216: LD_VAR 0 1
39220: PUSH
39221: LD_VAR 0 2
39225: PUSH
39226: LD_INT 3
39228: PLUS
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: PUSH
39238: LD_VAR 0 1
39242: PUSH
39243: LD_INT 4
39245: PLUS
39246: PUSH
39247: LD_VAR 0 2
39251: PUSH
39252: LD_INT 4
39254: PLUS
39255: PUSH
39256: LD_INT 5
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: ST_TO_ADDR
// end ; 2 :
39271: GO 39830
39273: LD_INT 2
39275: DOUBLE
39276: EQUAL
39277: IFTRUE 39281
39279: GO 39410
39281: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39282: LD_ADDR_VAR 0 5
39286: PUSH
39287: LD_VAR 0 1
39291: PUSH
39292: LD_VAR 0 2
39296: PUSH
39297: LD_INT 3
39299: MINUS
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PUSH
39309: LD_VAR 0 1
39313: PUSH
39314: LD_INT 4
39316: PLUS
39317: PUSH
39318: LD_VAR 0 2
39322: PUSH
39323: LD_INT 4
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PUSH
39331: LD_VAR 0 1
39335: PUSH
39336: LD_VAR 0 2
39340: PUSH
39341: LD_INT 4
39343: PLUS
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_VAR 0 1
39357: PUSH
39358: LD_INT 3
39360: MINUS
39361: PUSH
39362: LD_VAR 0 2
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: PUSH
39375: LD_VAR 0 1
39379: PUSH
39380: LD_INT 4
39382: MINUS
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_INT 4
39391: MINUS
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// end ; 3 :
39408: GO 39830
39410: LD_INT 3
39412: DOUBLE
39413: EQUAL
39414: IFTRUE 39418
39416: GO 39551
39418: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39419: LD_ADDR_VAR 0 5
39423: PUSH
39424: LD_VAR 0 1
39428: PUSH
39429: LD_INT 3
39431: PLUS
39432: PUSH
39433: LD_VAR 0 2
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: LIST
39445: PUSH
39446: LD_VAR 0 1
39450: PUSH
39451: LD_INT 4
39453: PLUS
39454: PUSH
39455: LD_VAR 0 2
39459: PUSH
39460: LD_INT 4
39462: PLUS
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: PUSH
39472: LD_VAR 0 1
39476: PUSH
39477: LD_INT 4
39479: MINUS
39480: PUSH
39481: LD_VAR 0 2
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 4
39506: MINUS
39507: PUSH
39508: LD_INT 3
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: PUSH
39516: LD_VAR 0 1
39520: PUSH
39521: LD_INT 3
39523: MINUS
39524: PUSH
39525: LD_VAR 0 2
39529: PUSH
39530: LD_INT 3
39532: MINUS
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// end ; 4 :
39549: GO 39830
39551: LD_INT 4
39553: DOUBLE
39554: EQUAL
39555: IFTRUE 39559
39557: GO 39692
39559: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39560: LD_ADDR_VAR 0 5
39564: PUSH
39565: LD_VAR 0 1
39569: PUSH
39570: LD_VAR 0 2
39574: PUSH
39575: LD_INT 4
39577: PLUS
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: PUSH
39587: LD_VAR 0 1
39591: PUSH
39592: LD_INT 3
39594: PLUS
39595: PUSH
39596: LD_VAR 0 2
39600: PUSH
39601: LD_INT 3
39603: PLUS
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: PUSH
39613: LD_VAR 0 1
39617: PUSH
39618: LD_INT 4
39620: PLUS
39621: PUSH
39622: LD_VAR 0 2
39626: PUSH
39627: LD_INT 4
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: PUSH
39635: LD_VAR 0 1
39639: PUSH
39640: LD_VAR 0 2
39644: PUSH
39645: LD_INT 3
39647: MINUS
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: PUSH
39657: LD_VAR 0 1
39661: PUSH
39662: LD_INT 4
39664: MINUS
39665: PUSH
39666: LD_VAR 0 2
39670: PUSH
39671: LD_INT 4
39673: MINUS
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// end ; 5 :
39690: GO 39830
39692: LD_INT 5
39694: DOUBLE
39695: EQUAL
39696: IFTRUE 39700
39698: GO 39829
39700: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39701: LD_ADDR_VAR 0 5
39705: PUSH
39706: LD_VAR 0 1
39710: PUSH
39711: LD_INT 4
39713: MINUS
39714: PUSH
39715: LD_VAR 0 2
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: PUSH
39728: LD_VAR 0 1
39732: PUSH
39733: LD_VAR 0 2
39737: PUSH
39738: LD_INT 4
39740: MINUS
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: PUSH
39750: LD_VAR 0 1
39754: PUSH
39755: LD_INT 4
39757: PLUS
39758: PUSH
39759: LD_VAR 0 2
39763: PUSH
39764: LD_INT 4
39766: PLUS
39767: PUSH
39768: LD_INT 5
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: PUSH
39776: LD_VAR 0 1
39780: PUSH
39781: LD_INT 3
39783: PLUS
39784: PUSH
39785: LD_VAR 0 2
39789: PUSH
39790: LD_INT 4
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: PUSH
39798: LD_VAR 0 1
39802: PUSH
39803: LD_VAR 0 2
39807: PUSH
39808: LD_INT 3
39810: PLUS
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: LIST
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: ST_TO_ADDR
// end ; end ;
39827: GO 39830
39829: POP
// result := list ;
39830: LD_ADDR_VAR 0 4
39834: PUSH
39835: LD_VAR 0 5
39839: ST_TO_ADDR
// end ;
39840: LD_VAR 0 4
39844: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39845: LD_INT 0
39847: PPUSH
39848: PPUSH
39849: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39850: LD_VAR 0 1
39854: NOT
39855: PUSH
39856: LD_VAR 0 2
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: LD_INT 4
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: IN
39879: NOT
39880: OR
39881: IFFALSE 39885
// exit ;
39883: GO 39968
// tmp := [ ] ;
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: EMPTY
39891: ST_TO_ADDR
// for i in units do
39892: LD_ADDR_VAR 0 4
39896: PUSH
39897: LD_VAR 0 1
39901: PUSH
39902: FOR_IN
39903: IFFALSE 39937
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_VAR 0 5
39914: PPUSH
39915: LD_VAR 0 4
39919: PPUSH
39920: LD_VAR 0 2
39924: PPUSH
39925: CALL_OW 259
39929: PPUSH
39930: CALL 41341 0 2
39934: ST_TO_ADDR
39935: GO 39902
39937: POP
39938: POP
// if not tmp then
39939: LD_VAR 0 5
39943: NOT
39944: IFFALSE 39948
// exit ;
39946: GO 39968
// result := SortListByListDesc ( units , tmp ) ;
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 77
39967: ST_TO_ADDR
// end ;
39968: LD_VAR 0 3
39972: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39973: LD_INT 0
39975: PPUSH
39976: PPUSH
39977: PPUSH
// result := false ;
39978: LD_ADDR_VAR 0 3
39982: PUSH
39983: LD_INT 0
39985: ST_TO_ADDR
// if not building then
39986: LD_VAR 0 2
39990: NOT
39991: IFFALSE 39995
// exit ;
39993: GO 40133
// x := GetX ( building ) ;
39995: LD_ADDR_VAR 0 4
39999: PUSH
40000: LD_VAR 0 2
40004: PPUSH
40005: CALL_OW 250
40009: ST_TO_ADDR
// y := GetY ( building ) ;
40010: LD_ADDR_VAR 0 5
40014: PUSH
40015: LD_VAR 0 2
40019: PPUSH
40020: CALL_OW 251
40024: ST_TO_ADDR
// if not x or not y then
40025: LD_VAR 0 4
40029: NOT
40030: PUSH
40031: LD_VAR 0 5
40035: NOT
40036: OR
40037: IFFALSE 40041
// exit ;
40039: GO 40133
// if GetTaskList ( unit ) then
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 437
40050: IFFALSE 40133
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40052: LD_STRING e
40054: PUSH
40055: LD_VAR 0 1
40059: PPUSH
40060: CALL_OW 437
40064: PUSH
40065: LD_INT 1
40067: ARRAY
40068: PUSH
40069: LD_INT 1
40071: ARRAY
40072: EQUAL
40073: PUSH
40074: LD_VAR 0 4
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: CALL_OW 437
40088: PUSH
40089: LD_INT 1
40091: ARRAY
40092: PUSH
40093: LD_INT 2
40095: ARRAY
40096: EQUAL
40097: AND
40098: PUSH
40099: LD_VAR 0 5
40103: PUSH
40104: LD_VAR 0 1
40108: PPUSH
40109: CALL_OW 437
40113: PUSH
40114: LD_INT 1
40116: ARRAY
40117: PUSH
40118: LD_INT 3
40120: ARRAY
40121: EQUAL
40122: AND
40123: IFFALSE 40133
// result := true end ;
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_INT 1
40132: ST_TO_ADDR
// end ;
40133: LD_VAR 0 3
40137: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40138: LD_INT 0
40140: PPUSH
// result := false ;
40141: LD_ADDR_VAR 0 4
40145: PUSH
40146: LD_INT 0
40148: ST_TO_ADDR
// if GetTaskList ( unit ) then
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 437
40158: IFFALSE 40241
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40160: LD_STRING M
40162: PUSH
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 437
40172: PUSH
40173: LD_INT 1
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: EQUAL
40181: PUSH
40182: LD_VAR 0 2
40186: PUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 437
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: PUSH
40201: LD_INT 2
40203: ARRAY
40204: EQUAL
40205: AND
40206: PUSH
40207: LD_VAR 0 3
40211: PUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 437
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PUSH
40226: LD_INT 3
40228: ARRAY
40229: EQUAL
40230: AND
40231: IFFALSE 40241
// result := true ;
40233: LD_ADDR_VAR 0 4
40237: PUSH
40238: LD_INT 1
40240: ST_TO_ADDR
// end ; end ;
40241: LD_VAR 0 4
40245: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40246: LD_INT 0
40248: PPUSH
40249: PPUSH
40250: PPUSH
40251: PPUSH
// if not unit or not area then
40252: LD_VAR 0 1
40256: NOT
40257: PUSH
40258: LD_VAR 0 2
40262: NOT
40263: OR
40264: IFFALSE 40268
// exit ;
40266: GO 40444
// tmp := AreaToList ( area , i ) ;
40268: LD_ADDR_VAR 0 6
40272: PUSH
40273: LD_VAR 0 2
40277: PPUSH
40278: LD_VAR 0 5
40282: PPUSH
40283: CALL_OW 517
40287: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40288: LD_ADDR_VAR 0 5
40292: PUSH
40293: DOUBLE
40294: LD_INT 1
40296: DEC
40297: ST_TO_ADDR
40298: LD_VAR 0 6
40302: PUSH
40303: LD_INT 1
40305: ARRAY
40306: PUSH
40307: FOR_TO
40308: IFFALSE 40442
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40310: LD_ADDR_VAR 0 7
40314: PUSH
40315: LD_VAR 0 6
40319: PUSH
40320: LD_INT 1
40322: ARRAY
40323: PUSH
40324: LD_VAR 0 5
40328: ARRAY
40329: PUSH
40330: LD_VAR 0 6
40334: PUSH
40335: LD_INT 2
40337: ARRAY
40338: PUSH
40339: LD_VAR 0 5
40343: ARRAY
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40349: LD_INT 92
40351: PUSH
40352: LD_VAR 0 7
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: PUSH
40361: LD_VAR 0 7
40365: PUSH
40366: LD_INT 2
40368: ARRAY
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: PPUSH
40379: CALL_OW 69
40383: PUSH
40384: LD_INT 0
40386: EQUAL
40387: IFFALSE 40440
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40389: LD_VAR 0 1
40393: PPUSH
40394: LD_VAR 0 7
40398: PUSH
40399: LD_INT 1
40401: ARRAY
40402: PPUSH
40403: LD_VAR 0 7
40407: PUSH
40408: LD_INT 2
40410: ARRAY
40411: PPUSH
40412: LD_VAR 0 3
40416: PPUSH
40417: CALL_OW 48
// result := IsPlaced ( unit ) ;
40421: LD_ADDR_VAR 0 4
40425: PUSH
40426: LD_VAR 0 1
40430: PPUSH
40431: CALL_OW 305
40435: ST_TO_ADDR
// exit ;
40436: POP
40437: POP
40438: GO 40444
// end ; end ;
40440: GO 40307
40442: POP
40443: POP
// end ;
40444: LD_VAR 0 4
40448: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40449: LD_INT 0
40451: PPUSH
40452: PPUSH
40453: PPUSH
// if not side or side > 8 then
40454: LD_VAR 0 1
40458: NOT
40459: PUSH
40460: LD_VAR 0 1
40464: PUSH
40465: LD_INT 8
40467: GREATER
40468: OR
40469: IFFALSE 40473
// exit ;
40471: GO 40660
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40473: LD_ADDR_VAR 0 4
40477: PUSH
40478: LD_INT 22
40480: PUSH
40481: LD_VAR 0 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 21
40492: PUSH
40493: LD_INT 3
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PPUSH
40504: CALL_OW 69
40508: ST_TO_ADDR
// if not tmp then
40509: LD_VAR 0 4
40513: NOT
40514: IFFALSE 40518
// exit ;
40516: GO 40660
// enable_addtolog := true ;
40518: LD_ADDR_OWVAR 81
40522: PUSH
40523: LD_INT 1
40525: ST_TO_ADDR
// AddToLog ( [ ) ;
40526: LD_STRING [
40528: PPUSH
40529: CALL_OW 561
// for i in tmp do
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_VAR 0 4
40542: PUSH
40543: FOR_IN
40544: IFFALSE 40651
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40546: LD_STRING [
40548: PUSH
40549: LD_VAR 0 3
40553: PPUSH
40554: CALL_OW 266
40558: STR
40559: PUSH
40560: LD_STRING , 
40562: STR
40563: PUSH
40564: LD_VAR 0 3
40568: PPUSH
40569: CALL_OW 250
40573: STR
40574: PUSH
40575: LD_STRING , 
40577: STR
40578: PUSH
40579: LD_VAR 0 3
40583: PPUSH
40584: CALL_OW 251
40588: STR
40589: PUSH
40590: LD_STRING , 
40592: STR
40593: PUSH
40594: LD_VAR 0 3
40598: PPUSH
40599: CALL_OW 254
40603: STR
40604: PUSH
40605: LD_STRING , 
40607: STR
40608: PUSH
40609: LD_VAR 0 3
40613: PPUSH
40614: LD_INT 1
40616: PPUSH
40617: CALL_OW 268
40621: STR
40622: PUSH
40623: LD_STRING , 
40625: STR
40626: PUSH
40627: LD_VAR 0 3
40631: PPUSH
40632: LD_INT 2
40634: PPUSH
40635: CALL_OW 268
40639: STR
40640: PUSH
40641: LD_STRING ],
40643: STR
40644: PPUSH
40645: CALL_OW 561
// end ;
40649: GO 40543
40651: POP
40652: POP
// AddToLog ( ]; ) ;
40653: LD_STRING ];
40655: PPUSH
40656: CALL_OW 561
// end ;
40660: LD_VAR 0 2
40664: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40665: LD_INT 0
40667: PPUSH
40668: PPUSH
40669: PPUSH
40670: PPUSH
40671: PPUSH
// if not area or not rate or not max then
40672: LD_VAR 0 1
40676: NOT
40677: PUSH
40678: LD_VAR 0 2
40682: NOT
40683: OR
40684: PUSH
40685: LD_VAR 0 4
40689: NOT
40690: OR
40691: IFFALSE 40695
// exit ;
40693: GO 40884
// while 1 do
40695: LD_INT 1
40697: IFFALSE 40884
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40699: LD_ADDR_VAR 0 9
40703: PUSH
40704: LD_VAR 0 1
40708: PPUSH
40709: LD_INT 1
40711: PPUSH
40712: CALL_OW 287
40716: PUSH
40717: LD_INT 10
40719: MUL
40720: ST_TO_ADDR
// r := rate / 10 ;
40721: LD_ADDR_VAR 0 7
40725: PUSH
40726: LD_VAR 0 2
40730: PUSH
40731: LD_INT 10
40733: DIVREAL
40734: ST_TO_ADDR
// time := 1 1$00 ;
40735: LD_ADDR_VAR 0 8
40739: PUSH
40740: LD_INT 2100
40742: ST_TO_ADDR
// if amount < min then
40743: LD_VAR 0 9
40747: PUSH
40748: LD_VAR 0 3
40752: LESS
40753: IFFALSE 40771
// r := r * 2 else
40755: LD_ADDR_VAR 0 7
40759: PUSH
40760: LD_VAR 0 7
40764: PUSH
40765: LD_INT 2
40767: MUL
40768: ST_TO_ADDR
40769: GO 40797
// if amount > max then
40771: LD_VAR 0 9
40775: PUSH
40776: LD_VAR 0 4
40780: GREATER
40781: IFFALSE 40797
// r := r / 2 ;
40783: LD_ADDR_VAR 0 7
40787: PUSH
40788: LD_VAR 0 7
40792: PUSH
40793: LD_INT 2
40795: DIVREAL
40796: ST_TO_ADDR
// time := time / r ;
40797: LD_ADDR_VAR 0 8
40801: PUSH
40802: LD_VAR 0 8
40806: PUSH
40807: LD_VAR 0 7
40811: DIVREAL
40812: ST_TO_ADDR
// if time < 0 then
40813: LD_VAR 0 8
40817: PUSH
40818: LD_INT 0
40820: LESS
40821: IFFALSE 40838
// time := time * - 1 ;
40823: LD_ADDR_VAR 0 8
40827: PUSH
40828: LD_VAR 0 8
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: MUL
40837: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40838: LD_VAR 0 8
40842: PUSH
40843: LD_INT 35
40845: PPUSH
40846: LD_INT 875
40848: PPUSH
40849: CALL_OW 12
40853: PLUS
40854: PPUSH
40855: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40859: LD_INT 1
40861: PPUSH
40862: LD_INT 5
40864: PPUSH
40865: CALL_OW 12
40869: PPUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: LD_INT 1
40877: PPUSH
40878: CALL_OW 55
// end ;
40882: GO 40695
// end ;
40884: LD_VAR 0 5
40888: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40889: LD_INT 0
40891: PPUSH
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
40896: PPUSH
40897: PPUSH
40898: PPUSH
// if not turrets or not factories then
40899: LD_VAR 0 1
40903: NOT
40904: PUSH
40905: LD_VAR 0 2
40909: NOT
40910: OR
40911: IFFALSE 40915
// exit ;
40913: GO 41222
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40915: LD_ADDR_VAR 0 10
40919: PUSH
40920: LD_INT 5
40922: PUSH
40923: LD_INT 6
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 4
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 3
40942: PUSH
40943: LD_INT 5
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 24
40957: PUSH
40958: LD_INT 25
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 23
40967: PUSH
40968: LD_INT 27
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 42
40981: PUSH
40982: LD_INT 43
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 44
40991: PUSH
40992: LD_INT 46
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 45
41001: PUSH
41002: LD_INT 47
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: ST_TO_ADDR
// result := [ ] ;
41019: LD_ADDR_VAR 0 3
41023: PUSH
41024: EMPTY
41025: ST_TO_ADDR
// for i in turrets do
41026: LD_ADDR_VAR 0 4
41030: PUSH
41031: LD_VAR 0 1
41035: PUSH
41036: FOR_IN
41037: IFFALSE 41220
// begin nat := GetNation ( i ) ;
41039: LD_ADDR_VAR 0 7
41043: PUSH
41044: LD_VAR 0 4
41048: PPUSH
41049: CALL_OW 248
41053: ST_TO_ADDR
// weapon := 0 ;
41054: LD_ADDR_VAR 0 8
41058: PUSH
41059: LD_INT 0
41061: ST_TO_ADDR
// if not nat then
41062: LD_VAR 0 7
41066: NOT
41067: IFFALSE 41071
// continue ;
41069: GO 41036
// for j in list [ nat ] do
41071: LD_ADDR_VAR 0 5
41075: PUSH
41076: LD_VAR 0 10
41080: PUSH
41081: LD_VAR 0 7
41085: ARRAY
41086: PUSH
41087: FOR_IN
41088: IFFALSE 41129
// if GetBWeapon ( i ) = j [ 1 ] then
41090: LD_VAR 0 4
41094: PPUSH
41095: CALL_OW 269
41099: PUSH
41100: LD_VAR 0 5
41104: PUSH
41105: LD_INT 1
41107: ARRAY
41108: EQUAL
41109: IFFALSE 41127
// begin weapon := j [ 2 ] ;
41111: LD_ADDR_VAR 0 8
41115: PUSH
41116: LD_VAR 0 5
41120: PUSH
41121: LD_INT 2
41123: ARRAY
41124: ST_TO_ADDR
// break ;
41125: GO 41129
// end ;
41127: GO 41087
41129: POP
41130: POP
// if not weapon then
41131: LD_VAR 0 8
41135: NOT
41136: IFFALSE 41140
// continue ;
41138: GO 41036
// for k in factories do
41140: LD_ADDR_VAR 0 6
41144: PUSH
41145: LD_VAR 0 2
41149: PUSH
41150: FOR_IN
41151: IFFALSE 41216
// begin weapons := AvailableWeaponList ( k ) ;
41153: LD_ADDR_VAR 0 9
41157: PUSH
41158: LD_VAR 0 6
41162: PPUSH
41163: CALL_OW 478
41167: ST_TO_ADDR
// if not weapons then
41168: LD_VAR 0 9
41172: NOT
41173: IFFALSE 41177
// continue ;
41175: GO 41150
// if weapon in weapons then
41177: LD_VAR 0 8
41181: PUSH
41182: LD_VAR 0 9
41186: IN
41187: IFFALSE 41214
// begin result := [ i , weapon ] ;
41189: LD_ADDR_VAR 0 3
41193: PUSH
41194: LD_VAR 0 4
41198: PUSH
41199: LD_VAR 0 8
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// exit ;
41208: POP
41209: POP
41210: POP
41211: POP
41212: GO 41222
// end ; end ;
41214: GO 41150
41216: POP
41217: POP
// end ;
41218: GO 41036
41220: POP
41221: POP
// end ;
41222: LD_VAR 0 3
41226: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41227: LD_INT 0
41229: PPUSH
// if not side or side > 8 then
41230: LD_VAR 0 3
41234: NOT
41235: PUSH
41236: LD_VAR 0 3
41240: PUSH
41241: LD_INT 8
41243: GREATER
41244: OR
41245: IFFALSE 41249
// exit ;
41247: GO 41308
// if not range then
41249: LD_VAR 0 4
41253: NOT
41254: IFFALSE 41265
// range := - 12 ;
41256: LD_ADDR_VAR 0 4
41260: PUSH
41261: LD_INT 12
41263: NEG
41264: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41265: LD_VAR 0 1
41269: PPUSH
41270: LD_VAR 0 2
41274: PPUSH
41275: LD_VAR 0 3
41279: PPUSH
41280: LD_VAR 0 4
41284: PPUSH
41285: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_VAR 0 2
41298: PPUSH
41299: LD_VAR 0 3
41303: PPUSH
41304: CALL_OW 331
// end ;
41308: LD_VAR 0 5
41312: RET
// export function Video ( mode ) ; begin
41313: LD_INT 0
41315: PPUSH
// ingame_video = mode ;
41316: LD_ADDR_OWVAR 52
41320: PUSH
41321: LD_VAR 0 1
41325: ST_TO_ADDR
// interface_hidden = mode ;
41326: LD_ADDR_OWVAR 54
41330: PUSH
41331: LD_VAR 0 1
41335: ST_TO_ADDR
// end ;
41336: LD_VAR 0 2
41340: RET
// export function Join ( array , element ) ; begin
41341: LD_INT 0
41343: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41344: LD_ADDR_VAR 0 3
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: LD_VAR 0 1
41358: PUSH
41359: LD_INT 1
41361: PLUS
41362: PPUSH
41363: LD_VAR 0 2
41367: PPUSH
41368: CALL_OW 1
41372: ST_TO_ADDR
// end ;
41373: LD_VAR 0 3
41377: RET
// export function JoinUnion ( array , element ) ; begin
41378: LD_INT 0
41380: PPUSH
// result := array union element ;
41381: LD_ADDR_VAR 0 3
41385: PUSH
41386: LD_VAR 0 1
41390: PUSH
41391: LD_VAR 0 2
41395: UNION
41396: ST_TO_ADDR
// end ;
41397: LD_VAR 0 3
41401: RET
// export function GetBehemoths ( side ) ; begin
41402: LD_INT 0
41404: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41405: LD_ADDR_VAR 0 2
41409: PUSH
41410: LD_INT 22
41412: PUSH
41413: LD_VAR 0 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 31
41424: PUSH
41425: LD_INT 25
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PPUSH
41436: CALL_OW 69
41440: ST_TO_ADDR
// end ;
41441: LD_VAR 0 2
41445: RET
// export function Shuffle ( array ) ; var i , index ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// result := [ ] ;
41451: LD_ADDR_VAR 0 2
41455: PUSH
41456: EMPTY
41457: ST_TO_ADDR
// if not array then
41458: LD_VAR 0 1
41462: NOT
41463: IFFALSE 41467
// exit ;
41465: GO 41566
// Randomize ;
41467: CALL_OW 10
// for i = array downto 1 do
41471: LD_ADDR_VAR 0 3
41475: PUSH
41476: DOUBLE
41477: LD_VAR 0 1
41481: INC
41482: ST_TO_ADDR
41483: LD_INT 1
41485: PUSH
41486: FOR_DOWNTO
41487: IFFALSE 41564
// begin index := rand ( 1 , array ) ;
41489: LD_ADDR_VAR 0 4
41493: PUSH
41494: LD_INT 1
41496: PPUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL_OW 12
41506: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41507: LD_ADDR_VAR 0 2
41511: PUSH
41512: LD_VAR 0 2
41516: PPUSH
41517: LD_VAR 0 2
41521: PUSH
41522: LD_INT 1
41524: PLUS
41525: PPUSH
41526: LD_VAR 0 1
41530: PUSH
41531: LD_VAR 0 4
41535: ARRAY
41536: PPUSH
41537: CALL_OW 2
41541: ST_TO_ADDR
// array := Delete ( array , index ) ;
41542: LD_ADDR_VAR 0 1
41546: PUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: LD_VAR 0 4
41556: PPUSH
41557: CALL_OW 3
41561: ST_TO_ADDR
// end ;
41562: GO 41486
41564: POP
41565: POP
// end ;
41566: LD_VAR 0 2
41570: RET
// export function GetBaseMaterials ( base ) ; begin
41571: LD_INT 0
41573: PPUSH
// result := [ 0 , 0 , 0 ] ;
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// if not base then
41593: LD_VAR 0 1
41597: NOT
41598: IFFALSE 41602
// exit ;
41600: GO 41651
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41602: LD_ADDR_VAR 0 2
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: LD_INT 1
41614: PPUSH
41615: CALL_OW 275
41619: PUSH
41620: LD_VAR 0 1
41624: PPUSH
41625: LD_INT 2
41627: PPUSH
41628: CALL_OW 275
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: LD_INT 3
41640: PPUSH
41641: CALL_OW 275
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// end ;
41651: LD_VAR 0 2
41655: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41656: LD_INT 0
41658: PPUSH
41659: PPUSH
// result := array ;
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_VAR 0 1
41669: ST_TO_ADDR
// if size >= result then
41670: LD_VAR 0 2
41674: PUSH
41675: LD_VAR 0 3
41679: GREATEREQUAL
41680: IFFALSE 41684
// exit ;
41682: GO 41734
// if size then
41684: LD_VAR 0 2
41688: IFFALSE 41734
// for i := array downto size do
41690: LD_ADDR_VAR 0 4
41694: PUSH
41695: DOUBLE
41696: LD_VAR 0 1
41700: INC
41701: ST_TO_ADDR
41702: LD_VAR 0 2
41706: PUSH
41707: FOR_DOWNTO
41708: IFFALSE 41732
// result := Delete ( result , result ) ;
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_VAR 0 3
41719: PPUSH
41720: LD_VAR 0 3
41724: PPUSH
41725: CALL_OW 3
41729: ST_TO_ADDR
41730: GO 41707
41732: POP
41733: POP
// end ;
41734: LD_VAR 0 3
41738: RET
// export function ComExit ( unit ) ; var tmp ; begin
41739: LD_INT 0
41741: PPUSH
41742: PPUSH
// if not IsInUnit ( unit ) then
41743: LD_VAR 0 1
41747: PPUSH
41748: CALL_OW 310
41752: NOT
41753: IFFALSE 41757
// exit ;
41755: GO 41817
// tmp := IsInUnit ( unit ) ;
41757: LD_ADDR_VAR 0 3
41761: PUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 310
41771: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41772: LD_VAR 0 3
41776: PPUSH
41777: CALL_OW 247
41781: PUSH
41782: LD_INT 2
41784: EQUAL
41785: IFFALSE 41798
// ComExitVehicle ( unit ) else
41787: LD_VAR 0 1
41791: PPUSH
41792: CALL_OW 121
41796: GO 41807
// ComExitBuilding ( unit ) ;
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL_OW 122
// result := tmp ;
41807: LD_ADDR_VAR 0 2
41811: PUSH
41812: LD_VAR 0 3
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 2
41821: RET
// export function ComExitAll ( units ) ; var i ; begin
41822: LD_INT 0
41824: PPUSH
41825: PPUSH
// if not units then
41826: LD_VAR 0 1
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 41861
// for i in units do
41835: LD_ADDR_VAR 0 3
41839: PUSH
41840: LD_VAR 0 1
41844: PUSH
41845: FOR_IN
41846: IFFALSE 41859
// ComExit ( i ) ;
41848: LD_VAR 0 3
41852: PPUSH
41853: CALL 41739 0 1
41857: GO 41845
41859: POP
41860: POP
// end ;
41861: LD_VAR 0 2
41865: RET
// export function ResetHc ; begin
41866: LD_INT 0
41868: PPUSH
// InitHc ;
41869: CALL_OW 19
// hc_importance := 0 ;
41873: LD_ADDR_OWVAR 32
41877: PUSH
41878: LD_INT 0
41880: ST_TO_ADDR
// end ;
41881: LD_VAR 0 1
41885: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41886: LD_INT 0
41888: PPUSH
41889: PPUSH
41890: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41891: LD_ADDR_VAR 0 6
41895: PUSH
41896: LD_VAR 0 1
41900: PUSH
41901: LD_VAR 0 3
41905: PLUS
41906: PUSH
41907: LD_INT 2
41909: DIV
41910: ST_TO_ADDR
// if _x < 0 then
41911: LD_VAR 0 6
41915: PUSH
41916: LD_INT 0
41918: LESS
41919: IFFALSE 41936
// _x := _x * - 1 ;
41921: LD_ADDR_VAR 0 6
41925: PUSH
41926: LD_VAR 0 6
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: MUL
41935: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41936: LD_ADDR_VAR 0 7
41940: PUSH
41941: LD_VAR 0 2
41945: PUSH
41946: LD_VAR 0 4
41950: PLUS
41951: PUSH
41952: LD_INT 2
41954: DIV
41955: ST_TO_ADDR
// if _y < 0 then
41956: LD_VAR 0 7
41960: PUSH
41961: LD_INT 0
41963: LESS
41964: IFFALSE 41981
// _y := _y * - 1 ;
41966: LD_ADDR_VAR 0 7
41970: PUSH
41971: LD_VAR 0 7
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: MUL
41980: ST_TO_ADDR
// result := [ _x , _y ] ;
41981: LD_ADDR_VAR 0 5
41985: PUSH
41986: LD_VAR 0 6
41990: PUSH
41991: LD_VAR 0 7
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// end ;
42000: LD_VAR 0 5
42004: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42005: LD_INT 0
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
// task := GetTaskList ( unit ) ;
42011: LD_ADDR_VAR 0 7
42015: PUSH
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 437
42025: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42026: LD_VAR 0 7
42030: NOT
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: LD_VAR 0 2
42041: PPUSH
42042: CALL_OW 308
42046: NOT
42047: AND
42048: IFFALSE 42052
// exit ;
42050: GO 42170
// if IsInArea ( unit , area ) then
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_VAR 0 2
42061: PPUSH
42062: CALL_OW 308
42066: IFFALSE 42084
// begin ComMoveToArea ( unit , goAway ) ;
42068: LD_VAR 0 1
42072: PPUSH
42073: LD_VAR 0 3
42077: PPUSH
42078: CALL_OW 113
// exit ;
42082: GO 42170
// end ; if task [ 1 ] [ 1 ] <> M then
42084: LD_VAR 0 7
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: PUSH
42093: LD_INT 1
42095: ARRAY
42096: PUSH
42097: LD_STRING M
42099: NONEQUAL
42100: IFFALSE 42104
// exit ;
42102: GO 42170
// x := task [ 1 ] [ 2 ] ;
42104: LD_ADDR_VAR 0 5
42108: PUSH
42109: LD_VAR 0 7
42113: PUSH
42114: LD_INT 1
42116: ARRAY
42117: PUSH
42118: LD_INT 2
42120: ARRAY
42121: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42122: LD_ADDR_VAR 0 6
42126: PUSH
42127: LD_VAR 0 7
42131: PUSH
42132: LD_INT 1
42134: ARRAY
42135: PUSH
42136: LD_INT 3
42138: ARRAY
42139: ST_TO_ADDR
// if InArea ( x , y , area ) then
42140: LD_VAR 0 5
42144: PPUSH
42145: LD_VAR 0 6
42149: PPUSH
42150: LD_VAR 0 2
42154: PPUSH
42155: CALL_OW 309
42159: IFFALSE 42170
// ComStop ( unit ) ;
42161: LD_VAR 0 1
42165: PPUSH
42166: CALL_OW 141
// end ;
42170: LD_VAR 0 4
42174: RET
// export function Abs ( value ) ; begin
42175: LD_INT 0
42177: PPUSH
// result := value ;
42178: LD_ADDR_VAR 0 2
42182: PUSH
42183: LD_VAR 0 1
42187: ST_TO_ADDR
// if value < 0 then
42188: LD_VAR 0 1
42192: PUSH
42193: LD_INT 0
42195: LESS
42196: IFFALSE 42213
// result := value * - 1 ;
42198: LD_ADDR_VAR 0 2
42202: PUSH
42203: LD_VAR 0 1
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: MUL
42212: ST_TO_ADDR
// end ;
42213: LD_VAR 0 2
42217: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42218: LD_INT 0
42220: PPUSH
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
// if not unit or not building then
42228: LD_VAR 0 1
42232: NOT
42233: PUSH
42234: LD_VAR 0 2
42238: NOT
42239: OR
42240: IFFALSE 42244
// exit ;
42242: GO 42470
// x := GetX ( building ) ;
42244: LD_ADDR_VAR 0 4
42248: PUSH
42249: LD_VAR 0 2
42253: PPUSH
42254: CALL_OW 250
42258: ST_TO_ADDR
// y := GetY ( building ) ;
42259: LD_ADDR_VAR 0 6
42263: PUSH
42264: LD_VAR 0 2
42268: PPUSH
42269: CALL_OW 251
42273: ST_TO_ADDR
// d := GetDir ( building ) ;
42274: LD_ADDR_VAR 0 8
42278: PUSH
42279: LD_VAR 0 2
42283: PPUSH
42284: CALL_OW 254
42288: ST_TO_ADDR
// r := 4 ;
42289: LD_ADDR_VAR 0 9
42293: PUSH
42294: LD_INT 4
42296: ST_TO_ADDR
// for i := 1 to 5 do
42297: LD_ADDR_VAR 0 10
42301: PUSH
42302: DOUBLE
42303: LD_INT 1
42305: DEC
42306: ST_TO_ADDR
42307: LD_INT 5
42309: PUSH
42310: FOR_TO
42311: IFFALSE 42468
// begin _x := ShiftX ( x , d , r + i ) ;
42313: LD_ADDR_VAR 0 5
42317: PUSH
42318: LD_VAR 0 4
42322: PPUSH
42323: LD_VAR 0 8
42327: PPUSH
42328: LD_VAR 0 9
42332: PUSH
42333: LD_VAR 0 10
42337: PLUS
42338: PPUSH
42339: CALL_OW 272
42343: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42344: LD_ADDR_VAR 0 7
42348: PUSH
42349: LD_VAR 0 6
42353: PPUSH
42354: LD_VAR 0 8
42358: PPUSH
42359: LD_VAR 0 9
42363: PUSH
42364: LD_VAR 0 10
42368: PLUS
42369: PPUSH
42370: CALL_OW 273
42374: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42375: LD_VAR 0 5
42379: PPUSH
42380: LD_VAR 0 7
42384: PPUSH
42385: CALL_OW 488
42389: PUSH
42390: LD_VAR 0 5
42394: PPUSH
42395: LD_VAR 0 7
42399: PPUSH
42400: CALL_OW 428
42404: PPUSH
42405: CALL_OW 247
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: IN
42420: NOT
42421: AND
42422: IFFALSE 42466
// begin ComMoveXY ( unit , _x , _y ) ;
42424: LD_VAR 0 1
42428: PPUSH
42429: LD_VAR 0 5
42433: PPUSH
42434: LD_VAR 0 7
42438: PPUSH
42439: CALL_OW 111
// result := [ _x , _y ] ;
42443: LD_ADDR_VAR 0 3
42447: PUSH
42448: LD_VAR 0 5
42452: PUSH
42453: LD_VAR 0 7
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// exit ;
42462: POP
42463: POP
42464: GO 42470
// end ; end ;
42466: GO 42310
42468: POP
42469: POP
// end ;
42470: LD_VAR 0 3
42474: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42475: LD_INT 0
42477: PPUSH
42478: PPUSH
42479: PPUSH
// result := 0 ;
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 0
42487: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 0
42495: LESS
42496: PUSH
42497: LD_VAR 0 1
42501: PUSH
42502: LD_INT 8
42504: GREATER
42505: OR
42506: PUSH
42507: LD_VAR 0 2
42511: PUSH
42512: LD_INT 0
42514: LESS
42515: OR
42516: PUSH
42517: LD_VAR 0 2
42521: PUSH
42522: LD_INT 8
42524: GREATER
42525: OR
42526: IFFALSE 42530
// exit ;
42528: GO 42605
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42530: LD_ADDR_VAR 0 4
42534: PUSH
42535: LD_INT 22
42537: PUSH
42538: LD_VAR 0 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PPUSH
42547: CALL_OW 69
42551: PUSH
42552: FOR_IN
42553: IFFALSE 42603
// begin un := UnitShoot ( i ) ;
42555: LD_ADDR_VAR 0 5
42559: PUSH
42560: LD_VAR 0 4
42564: PPUSH
42565: CALL_OW 504
42569: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42570: LD_VAR 0 5
42574: PPUSH
42575: CALL_OW 255
42579: PUSH
42580: LD_VAR 0 1
42584: EQUAL
42585: IFFALSE 42601
// begin result := un ;
42587: LD_ADDR_VAR 0 3
42591: PUSH
42592: LD_VAR 0 5
42596: ST_TO_ADDR
// exit ;
42597: POP
42598: POP
42599: GO 42605
// end ; end ;
42601: GO 42552
42603: POP
42604: POP
// end ;
42605: LD_VAR 0 3
42609: RET
// export function GetCargoBay ( units ) ; begin
42610: LD_INT 0
42612: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42613: LD_ADDR_VAR 0 2
42617: PUSH
42618: LD_VAR 0 1
42622: PPUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 34
42628: PUSH
42629: LD_INT 12
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 34
42638: PUSH
42639: LD_INT 51
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 34
42648: PUSH
42649: LD_INT 32
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 34
42658: PUSH
42659: LD_INT 89
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: PPUSH
42673: CALL_OW 72
42677: ST_TO_ADDR
// end ;
42678: LD_VAR 0 2
42682: RET
// export function Negate ( value ) ; begin
42683: LD_INT 0
42685: PPUSH
// result := not value ;
42686: LD_ADDR_VAR 0 2
42690: PUSH
42691: LD_VAR 0 1
42695: NOT
42696: ST_TO_ADDR
// end ;
42697: LD_VAR 0 2
42701: RET
// export function Inc ( value ) ; begin
42702: LD_INT 0
42704: PPUSH
// result := value + 1 ;
42705: LD_ADDR_VAR 0 2
42709: PUSH
42710: LD_VAR 0 1
42714: PUSH
42715: LD_INT 1
42717: PLUS
42718: ST_TO_ADDR
// end ;
42719: LD_VAR 0 2
42723: RET
// export function Dec ( value ) ; begin
42724: LD_INT 0
42726: PPUSH
// result := value - 1 ;
42727: LD_ADDR_VAR 0 2
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_INT 1
42739: MINUS
42740: ST_TO_ADDR
// end ;
42741: LD_VAR 0 2
42745: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42746: LD_INT 0
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42756: LD_VAR 0 1
42760: PPUSH
42761: LD_VAR 0 2
42765: PPUSH
42766: CALL_OW 488
42770: NOT
42771: PUSH
42772: LD_VAR 0 3
42776: PPUSH
42777: LD_VAR 0 4
42781: PPUSH
42782: CALL_OW 488
42786: NOT
42787: OR
42788: IFFALSE 42801
// begin result := - 1 ;
42790: LD_ADDR_VAR 0 5
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: ST_TO_ADDR
// exit ;
42799: GO 43036
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42801: LD_ADDR_VAR 0 12
42805: PUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: LD_VAR 0 2
42815: PPUSH
42816: LD_VAR 0 3
42820: PPUSH
42821: LD_VAR 0 4
42825: PPUSH
42826: CALL 41886 0 4
42830: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42831: LD_ADDR_VAR 0 11
42835: PUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: LD_VAR 0 2
42845: PPUSH
42846: LD_VAR 0 12
42850: PUSH
42851: LD_INT 1
42853: ARRAY
42854: PPUSH
42855: LD_VAR 0 12
42859: PUSH
42860: LD_INT 2
42862: ARRAY
42863: PPUSH
42864: CALL_OW 298
42868: ST_TO_ADDR
// distance := 9999 ;
42869: LD_ADDR_VAR 0 10
42873: PUSH
42874: LD_INT 9999
42876: ST_TO_ADDR
// for i := 0 to 5 do
42877: LD_ADDR_VAR 0 6
42881: PUSH
42882: DOUBLE
42883: LD_INT 0
42885: DEC
42886: ST_TO_ADDR
42887: LD_INT 5
42889: PUSH
42890: FOR_TO
42891: IFFALSE 43034
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42893: LD_ADDR_VAR 0 7
42897: PUSH
42898: LD_VAR 0 1
42902: PPUSH
42903: LD_VAR 0 6
42907: PPUSH
42908: LD_VAR 0 11
42912: PPUSH
42913: CALL_OW 272
42917: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42918: LD_ADDR_VAR 0 8
42922: PUSH
42923: LD_VAR 0 2
42927: PPUSH
42928: LD_VAR 0 6
42932: PPUSH
42933: LD_VAR 0 11
42937: PPUSH
42938: CALL_OW 273
42942: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42943: LD_VAR 0 7
42947: PPUSH
42948: LD_VAR 0 8
42952: PPUSH
42953: CALL_OW 488
42957: NOT
42958: IFFALSE 42962
// continue ;
42960: GO 42890
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42962: LD_ADDR_VAR 0 9
42966: PUSH
42967: LD_VAR 0 12
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PPUSH
42976: LD_VAR 0 12
42980: PUSH
42981: LD_INT 2
42983: ARRAY
42984: PPUSH
42985: LD_VAR 0 7
42989: PPUSH
42990: LD_VAR 0 8
42994: PPUSH
42995: CALL_OW 298
42999: ST_TO_ADDR
// if tmp < distance then
43000: LD_VAR 0 9
43004: PUSH
43005: LD_VAR 0 10
43009: LESS
43010: IFFALSE 43032
// begin result := i ;
43012: LD_ADDR_VAR 0 5
43016: PUSH
43017: LD_VAR 0 6
43021: ST_TO_ADDR
// distance := tmp ;
43022: LD_ADDR_VAR 0 10
43026: PUSH
43027: LD_VAR 0 9
43031: ST_TO_ADDR
// end ; end ;
43032: GO 42890
43034: POP
43035: POP
// end ;
43036: LD_VAR 0 5
43040: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43041: LD_INT 0
43043: PPUSH
43044: PPUSH
// if not driver or not IsInUnit ( driver ) then
43045: LD_VAR 0 1
43049: NOT
43050: PUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 310
43060: NOT
43061: OR
43062: IFFALSE 43066
// exit ;
43064: GO 43156
// vehicle := IsInUnit ( driver ) ;
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 310
43080: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43081: LD_VAR 0 1
43085: PPUSH
43086: LD_STRING \
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: PUSH
43116: LD_STRING E
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_VAR 0 3
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PPUSH
43152: CALL_OW 446
// end ;
43156: LD_VAR 0 2
43160: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43161: LD_INT 0
43163: PPUSH
43164: PPUSH
// if not driver or not IsInUnit ( driver ) then
43165: LD_VAR 0 1
43169: NOT
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 310
43180: NOT
43181: OR
43182: IFFALSE 43186
// exit ;
43184: GO 43276
// vehicle := IsInUnit ( driver ) ;
43186: LD_ADDR_VAR 0 3
43190: PUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: CALL_OW 310
43200: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43201: LD_VAR 0 1
43205: PPUSH
43206: LD_STRING \
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: PUSH
43236: LD_STRING E
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_VAR 0 3
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PPUSH
43272: CALL_OW 447
// end ;
43276: LD_VAR 0 2
43280: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43281: LD_INT 0
43283: PPUSH
43284: PPUSH
43285: PPUSH
// tmp := [ ] ;
43286: LD_ADDR_VAR 0 5
43290: PUSH
43291: EMPTY
43292: ST_TO_ADDR
// for i in units do
43293: LD_ADDR_VAR 0 4
43297: PUSH
43298: LD_VAR 0 1
43302: PUSH
43303: FOR_IN
43304: IFFALSE 43342
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43306: LD_ADDR_VAR 0 5
43310: PUSH
43311: LD_VAR 0 5
43315: PPUSH
43316: LD_VAR 0 5
43320: PUSH
43321: LD_INT 1
43323: PLUS
43324: PPUSH
43325: LD_VAR 0 4
43329: PPUSH
43330: CALL_OW 256
43334: PPUSH
43335: CALL_OW 2
43339: ST_TO_ADDR
43340: GO 43303
43342: POP
43343: POP
// if not tmp then
43344: LD_VAR 0 5
43348: NOT
43349: IFFALSE 43353
// exit ;
43351: GO 43401
// if asc then
43353: LD_VAR 0 2
43357: IFFALSE 43381
// result := SortListByListAsc ( units , tmp ) else
43359: LD_ADDR_VAR 0 3
43363: PUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: LD_VAR 0 5
43373: PPUSH
43374: CALL_OW 76
43378: ST_TO_ADDR
43379: GO 43401
// result := SortListByListDesc ( units , tmp ) ;
43381: LD_ADDR_VAR 0 3
43385: PUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: LD_VAR 0 5
43395: PPUSH
43396: CALL_OW 77
43400: ST_TO_ADDR
// end ;
43401: LD_VAR 0 3
43405: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
// task := GetTaskList ( mech ) ;
43410: LD_ADDR_VAR 0 4
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 437
43424: ST_TO_ADDR
// if not task then
43425: LD_VAR 0 4
43429: NOT
43430: IFFALSE 43434
// exit ;
43432: GO 43476
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43434: LD_ADDR_VAR 0 3
43438: PUSH
43439: LD_VAR 0 4
43443: PUSH
43444: LD_INT 1
43446: ARRAY
43447: PUSH
43448: LD_INT 1
43450: ARRAY
43451: PUSH
43452: LD_STRING r
43454: EQUAL
43455: PUSH
43456: LD_VAR 0 4
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PUSH
43465: LD_INT 4
43467: ARRAY
43468: PUSH
43469: LD_VAR 0 2
43473: EQUAL
43474: AND
43475: ST_TO_ADDR
// end ;
43476: LD_VAR 0 3
43480: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43481: LD_INT 0
43483: PPUSH
// SetDir ( unit , d ) ;
43484: LD_VAR 0 1
43488: PPUSH
43489: LD_VAR 0 4
43493: PPUSH
43494: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43498: LD_VAR 0 1
43502: PPUSH
43503: LD_VAR 0 2
43507: PPUSH
43508: LD_VAR 0 3
43512: PPUSH
43513: LD_VAR 0 5
43517: PPUSH
43518: CALL_OW 48
// end ;
43522: LD_VAR 0 6
43526: RET
// export function ToNaturalNumber ( number ) ; begin
43527: LD_INT 0
43529: PPUSH
// result := number div 1 ;
43530: LD_ADDR_VAR 0 2
43534: PUSH
43535: LD_VAR 0 1
43539: PUSH
43540: LD_INT 1
43542: DIV
43543: ST_TO_ADDR
// if number < 0 then
43544: LD_VAR 0 1
43548: PUSH
43549: LD_INT 0
43551: LESS
43552: IFFALSE 43562
// result := 0 ;
43554: LD_ADDR_VAR 0 2
43558: PUSH
43559: LD_INT 0
43561: ST_TO_ADDR
// end ;
43562: LD_VAR 0 2
43566: RET
// export function SortByClass ( units , class ) ; var un ; begin
43567: LD_INT 0
43569: PPUSH
43570: PPUSH
// if not units or not class then
43571: LD_VAR 0 1
43575: NOT
43576: PUSH
43577: LD_VAR 0 2
43581: NOT
43582: OR
43583: IFFALSE 43587
// exit ;
43585: GO 43682
// result := [ ] ;
43587: LD_ADDR_VAR 0 3
43591: PUSH
43592: EMPTY
43593: ST_TO_ADDR
// for un in units do
43594: LD_ADDR_VAR 0 4
43598: PUSH
43599: LD_VAR 0 1
43603: PUSH
43604: FOR_IN
43605: IFFALSE 43680
// if GetClass ( un ) = class then
43607: LD_VAR 0 4
43611: PPUSH
43612: CALL_OW 257
43616: PUSH
43617: LD_VAR 0 2
43621: EQUAL
43622: IFFALSE 43649
// result := Insert ( result , 1 , un ) else
43624: LD_ADDR_VAR 0 3
43628: PUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: LD_INT 1
43636: PPUSH
43637: LD_VAR 0 4
43641: PPUSH
43642: CALL_OW 2
43646: ST_TO_ADDR
43647: GO 43678
// result := Replace ( result , result + 1 , un ) ;
43649: LD_ADDR_VAR 0 3
43653: PUSH
43654: LD_VAR 0 3
43658: PPUSH
43659: LD_VAR 0 3
43663: PUSH
43664: LD_INT 1
43666: PLUS
43667: PPUSH
43668: LD_VAR 0 4
43672: PPUSH
43673: CALL_OW 1
43677: ST_TO_ADDR
43678: GO 43604
43680: POP
43681: POP
// end ;
43682: LD_VAR 0 3
43686: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43687: LD_INT 0
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
// result := [ ] ;
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: EMPTY
43702: ST_TO_ADDR
// if x - r < 0 then
43703: LD_VAR 0 1
43707: PUSH
43708: LD_VAR 0 3
43712: MINUS
43713: PUSH
43714: LD_INT 0
43716: LESS
43717: IFFALSE 43729
// min_x := 0 else
43719: LD_ADDR_VAR 0 8
43723: PUSH
43724: LD_INT 0
43726: ST_TO_ADDR
43727: GO 43745
// min_x := x - r ;
43729: LD_ADDR_VAR 0 8
43733: PUSH
43734: LD_VAR 0 1
43738: PUSH
43739: LD_VAR 0 3
43743: MINUS
43744: ST_TO_ADDR
// if y - r < 0 then
43745: LD_VAR 0 2
43749: PUSH
43750: LD_VAR 0 3
43754: MINUS
43755: PUSH
43756: LD_INT 0
43758: LESS
43759: IFFALSE 43771
// min_y := 0 else
43761: LD_ADDR_VAR 0 7
43765: PUSH
43766: LD_INT 0
43768: ST_TO_ADDR
43769: GO 43787
// min_y := y - r ;
43771: LD_ADDR_VAR 0 7
43775: PUSH
43776: LD_VAR 0 2
43780: PUSH
43781: LD_VAR 0 3
43785: MINUS
43786: ST_TO_ADDR
// max_x := x + r ;
43787: LD_ADDR_VAR 0 9
43791: PUSH
43792: LD_VAR 0 1
43796: PUSH
43797: LD_VAR 0 3
43801: PLUS
43802: ST_TO_ADDR
// max_y := y + r ;
43803: LD_ADDR_VAR 0 10
43807: PUSH
43808: LD_VAR 0 2
43812: PUSH
43813: LD_VAR 0 3
43817: PLUS
43818: ST_TO_ADDR
// for _x = min_x to max_x do
43819: LD_ADDR_VAR 0 5
43823: PUSH
43824: DOUBLE
43825: LD_VAR 0 8
43829: DEC
43830: ST_TO_ADDR
43831: LD_VAR 0 9
43835: PUSH
43836: FOR_TO
43837: IFFALSE 43938
// for _y = min_y to max_y do
43839: LD_ADDR_VAR 0 6
43843: PUSH
43844: DOUBLE
43845: LD_VAR 0 7
43849: DEC
43850: ST_TO_ADDR
43851: LD_VAR 0 10
43855: PUSH
43856: FOR_TO
43857: IFFALSE 43934
// begin if not ValidHex ( _x , _y ) then
43859: LD_VAR 0 5
43863: PPUSH
43864: LD_VAR 0 6
43868: PPUSH
43869: CALL_OW 488
43873: NOT
43874: IFFALSE 43878
// continue ;
43876: GO 43856
// if GetResourceTypeXY ( _x , _y ) then
43878: LD_VAR 0 5
43882: PPUSH
43883: LD_VAR 0 6
43887: PPUSH
43888: CALL_OW 283
43892: IFFALSE 43932
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43894: LD_ADDR_VAR 0 4
43898: PUSH
43899: LD_VAR 0 4
43903: PPUSH
43904: LD_VAR 0 4
43908: PUSH
43909: LD_INT 1
43911: PLUS
43912: PPUSH
43913: LD_VAR 0 5
43917: PUSH
43918: LD_VAR 0 6
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PPUSH
43927: CALL_OW 1
43931: ST_TO_ADDR
// end ;
43932: GO 43856
43934: POP
43935: POP
43936: GO 43836
43938: POP
43939: POP
// end ;
43940: LD_VAR 0 4
43944: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43945: LD_INT 0
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
// if not units then
43955: LD_VAR 0 1
43959: NOT
43960: IFFALSE 43964
// exit ;
43962: GO 44488
// result := UnitFilter ( units , [ f_ok ] ) ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_VAR 0 1
43973: PPUSH
43974: LD_INT 50
43976: PUSH
43977: EMPTY
43978: LIST
43979: PPUSH
43980: CALL_OW 72
43984: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43985: LD_ADDR_VAR 0 8
43989: PUSH
43990: LD_VAR 0 1
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: PPUSH
43999: CALL_OW 255
44003: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44004: LD_ADDR_VAR 0 10
44008: PUSH
44009: LD_INT 29
44011: PUSH
44012: LD_INT 91
44014: PUSH
44015: LD_INT 49
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: ST_TO_ADDR
// if not result then
44023: LD_VAR 0 3
44027: NOT
44028: IFFALSE 44032
// exit ;
44030: GO 44488
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44032: LD_ADDR_VAR 0 5
44036: PUSH
44037: LD_INT 81
44039: PUSH
44040: LD_VAR 0 8
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PPUSH
44049: CALL_OW 69
44053: ST_TO_ADDR
// for i in result do
44054: LD_ADDR_VAR 0 4
44058: PUSH
44059: LD_VAR 0 3
44063: PUSH
44064: FOR_IN
44065: IFFALSE 44486
// begin tag := GetTag ( i ) + 1 ;
44067: LD_ADDR_VAR 0 9
44071: PUSH
44072: LD_VAR 0 4
44076: PPUSH
44077: CALL_OW 110
44081: PUSH
44082: LD_INT 1
44084: PLUS
44085: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44086: LD_ADDR_VAR 0 7
44090: PUSH
44091: LD_VAR 0 4
44095: PPUSH
44096: CALL_OW 250
44100: PPUSH
44101: LD_VAR 0 4
44105: PPUSH
44106: CALL_OW 251
44110: PPUSH
44111: LD_INT 6
44113: PPUSH
44114: CALL 43687 0 3
44118: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44119: LD_VAR 0 4
44123: PPUSH
44124: CALL_OW 247
44128: PUSH
44129: LD_INT 2
44131: EQUAL
44132: PUSH
44133: LD_VAR 0 7
44137: AND
44138: PUSH
44139: LD_VAR 0 4
44143: PPUSH
44144: CALL_OW 264
44148: PUSH
44149: LD_VAR 0 10
44153: IN
44154: NOT
44155: AND
44156: IFFALSE 44195
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44158: LD_VAR 0 4
44162: PPUSH
44163: LD_VAR 0 7
44167: PUSH
44168: LD_INT 1
44170: ARRAY
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: PPUSH
44176: LD_VAR 0 7
44180: PUSH
44181: LD_INT 1
44183: ARRAY
44184: PUSH
44185: LD_INT 2
44187: ARRAY
44188: PPUSH
44189: CALL_OW 116
44193: GO 44484
// if path > tag then
44195: LD_VAR 0 2
44199: PUSH
44200: LD_VAR 0 9
44204: GREATER
44205: IFFALSE 44413
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44207: LD_ADDR_VAR 0 6
44211: PUSH
44212: LD_VAR 0 5
44216: PPUSH
44217: LD_INT 91
44219: PUSH
44220: LD_VAR 0 4
44224: PUSH
44225: LD_INT 8
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: PPUSH
44233: CALL_OW 72
44237: ST_TO_ADDR
// if nearEnemy then
44238: LD_VAR 0 6
44242: IFFALSE 44311
// begin if GetWeapon ( i ) = ru_time_lapser then
44244: LD_VAR 0 4
44248: PPUSH
44249: CALL_OW 264
44253: PUSH
44254: LD_INT 49
44256: EQUAL
44257: IFFALSE 44285
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44259: LD_VAR 0 4
44263: PPUSH
44264: LD_VAR 0 6
44268: PPUSH
44269: LD_VAR 0 4
44273: PPUSH
44274: CALL_OW 74
44278: PPUSH
44279: CALL_OW 112
44283: GO 44309
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44285: LD_VAR 0 4
44289: PPUSH
44290: LD_VAR 0 6
44294: PPUSH
44295: LD_VAR 0 4
44299: PPUSH
44300: CALL_OW 74
44304: PPUSH
44305: CALL 45413 0 2
// end else
44309: GO 44411
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44311: LD_VAR 0 4
44315: PPUSH
44316: LD_VAR 0 2
44320: PUSH
44321: LD_VAR 0 9
44325: ARRAY
44326: PUSH
44327: LD_INT 1
44329: ARRAY
44330: PPUSH
44331: LD_VAR 0 2
44335: PUSH
44336: LD_VAR 0 9
44340: ARRAY
44341: PUSH
44342: LD_INT 2
44344: ARRAY
44345: PPUSH
44346: CALL_OW 297
44350: PUSH
44351: LD_INT 6
44353: GREATER
44354: IFFALSE 44397
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44356: LD_VAR 0 4
44360: PPUSH
44361: LD_VAR 0 2
44365: PUSH
44366: LD_VAR 0 9
44370: ARRAY
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 2
44380: PUSH
44381: LD_VAR 0 9
44385: ARRAY
44386: PUSH
44387: LD_INT 2
44389: ARRAY
44390: PPUSH
44391: CALL_OW 114
44395: GO 44411
// SetTag ( i , tag ) ;
44397: LD_VAR 0 4
44401: PPUSH
44402: LD_VAR 0 9
44406: PPUSH
44407: CALL_OW 109
// end else
44411: GO 44484
// if enemy then
44413: LD_VAR 0 5
44417: IFFALSE 44484
// begin if GetWeapon ( i ) = ru_time_lapser then
44419: LD_VAR 0 4
44423: PPUSH
44424: CALL_OW 264
44428: PUSH
44429: LD_INT 49
44431: EQUAL
44432: IFFALSE 44460
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44434: LD_VAR 0 4
44438: PPUSH
44439: LD_VAR 0 5
44443: PPUSH
44444: LD_VAR 0 4
44448: PPUSH
44449: CALL_OW 74
44453: PPUSH
44454: CALL_OW 112
44458: GO 44484
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44460: LD_VAR 0 4
44464: PPUSH
44465: LD_VAR 0 5
44469: PPUSH
44470: LD_VAR 0 4
44474: PPUSH
44475: CALL_OW 74
44479: PPUSH
44480: CALL 45413 0 2
// end ; end ;
44484: GO 44064
44486: POP
44487: POP
// end ;
44488: LD_VAR 0 3
44492: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44493: LD_INT 0
44495: PPUSH
44496: PPUSH
44497: PPUSH
// if not unit or IsInUnit ( unit ) then
44498: LD_VAR 0 1
44502: NOT
44503: PUSH
44504: LD_VAR 0 1
44508: PPUSH
44509: CALL_OW 310
44513: OR
44514: IFFALSE 44518
// exit ;
44516: GO 44609
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44518: LD_ADDR_VAR 0 4
44522: PUSH
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 250
44532: PPUSH
44533: LD_VAR 0 2
44537: PPUSH
44538: LD_INT 1
44540: PPUSH
44541: CALL_OW 272
44545: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44546: LD_ADDR_VAR 0 5
44550: PUSH
44551: LD_VAR 0 1
44555: PPUSH
44556: CALL_OW 251
44560: PPUSH
44561: LD_VAR 0 2
44565: PPUSH
44566: LD_INT 1
44568: PPUSH
44569: CALL_OW 273
44573: ST_TO_ADDR
// if ValidHex ( x , y ) then
44574: LD_VAR 0 4
44578: PPUSH
44579: LD_VAR 0 5
44583: PPUSH
44584: CALL_OW 488
44588: IFFALSE 44609
// ComTurnXY ( unit , x , y ) ;
44590: LD_VAR 0 1
44594: PPUSH
44595: LD_VAR 0 4
44599: PPUSH
44600: LD_VAR 0 5
44604: PPUSH
44605: CALL_OW 118
// end ;
44609: LD_VAR 0 3
44613: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44614: LD_INT 0
44616: PPUSH
44617: PPUSH
// result := false ;
44618: LD_ADDR_VAR 0 3
44622: PUSH
44623: LD_INT 0
44625: ST_TO_ADDR
// if not units then
44626: LD_VAR 0 2
44630: NOT
44631: IFFALSE 44635
// exit ;
44633: GO 44680
// for i in units do
44635: LD_ADDR_VAR 0 4
44639: PUSH
44640: LD_VAR 0 2
44644: PUSH
44645: FOR_IN
44646: IFFALSE 44678
// if See ( side , i ) then
44648: LD_VAR 0 1
44652: PPUSH
44653: LD_VAR 0 4
44657: PPUSH
44658: CALL_OW 292
44662: IFFALSE 44676
// begin result := true ;
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_INT 1
44671: ST_TO_ADDR
// exit ;
44672: POP
44673: POP
44674: GO 44680
// end ;
44676: GO 44645
44678: POP
44679: POP
// end ;
44680: LD_VAR 0 3
44684: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44685: LD_INT 0
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
// if not unit or not points then
44691: LD_VAR 0 1
44695: NOT
44696: PUSH
44697: LD_VAR 0 2
44701: NOT
44702: OR
44703: IFFALSE 44707
// exit ;
44705: GO 44797
// dist := 99999 ;
44707: LD_ADDR_VAR 0 5
44711: PUSH
44712: LD_INT 99999
44714: ST_TO_ADDR
// for i in points do
44715: LD_ADDR_VAR 0 4
44719: PUSH
44720: LD_VAR 0 2
44724: PUSH
44725: FOR_IN
44726: IFFALSE 44795
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44728: LD_ADDR_VAR 0 6
44732: PUSH
44733: LD_VAR 0 1
44737: PPUSH
44738: LD_VAR 0 4
44742: PUSH
44743: LD_INT 1
44745: ARRAY
44746: PPUSH
44747: LD_VAR 0 4
44751: PUSH
44752: LD_INT 2
44754: ARRAY
44755: PPUSH
44756: CALL_OW 297
44760: ST_TO_ADDR
// if tmpDist < dist then
44761: LD_VAR 0 6
44765: PUSH
44766: LD_VAR 0 5
44770: LESS
44771: IFFALSE 44793
// begin result := i ;
44773: LD_ADDR_VAR 0 3
44777: PUSH
44778: LD_VAR 0 4
44782: ST_TO_ADDR
// dist := tmpDist ;
44783: LD_ADDR_VAR 0 5
44787: PUSH
44788: LD_VAR 0 6
44792: ST_TO_ADDR
// end ; end ;
44793: GO 44725
44795: POP
44796: POP
// end ;
44797: LD_VAR 0 3
44801: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44802: LD_INT 0
44804: PPUSH
// uc_side := side ;
44805: LD_ADDR_OWVAR 20
44809: PUSH
44810: LD_VAR 0 1
44814: ST_TO_ADDR
// uc_nation := 3 ;
44815: LD_ADDR_OWVAR 21
44819: PUSH
44820: LD_INT 3
44822: ST_TO_ADDR
// vc_chassis := 25 ;
44823: LD_ADDR_OWVAR 37
44827: PUSH
44828: LD_INT 25
44830: ST_TO_ADDR
// vc_engine := engine_siberite ;
44831: LD_ADDR_OWVAR 39
44835: PUSH
44836: LD_INT 3
44838: ST_TO_ADDR
// vc_control := control_computer ;
44839: LD_ADDR_OWVAR 38
44843: PUSH
44844: LD_INT 3
44846: ST_TO_ADDR
// vc_weapon := 59 ;
44847: LD_ADDR_OWVAR 40
44851: PUSH
44852: LD_INT 59
44854: ST_TO_ADDR
// result := CreateVehicle ;
44855: LD_ADDR_VAR 0 5
44859: PUSH
44860: CALL_OW 45
44864: ST_TO_ADDR
// SetDir ( result , d ) ;
44865: LD_VAR 0 5
44869: PPUSH
44870: LD_VAR 0 4
44874: PPUSH
44875: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44879: LD_VAR 0 5
44883: PPUSH
44884: LD_VAR 0 2
44888: PPUSH
44889: LD_VAR 0 3
44893: PPUSH
44894: LD_INT 0
44896: PPUSH
44897: CALL_OW 48
// end ;
44901: LD_VAR 0 5
44905: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44906: LD_INT 0
44908: PPUSH
44909: PPUSH
44910: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44911: LD_ADDR_VAR 0 2
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44934: LD_VAR 0 1
44938: NOT
44939: PUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 264
44949: PUSH
44950: LD_INT 12
44952: PUSH
44953: LD_INT 51
44955: PUSH
44956: LD_INT 32
44958: PUSH
44959: LD_INT 89
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: IN
44968: NOT
44969: OR
44970: IFFALSE 44974
// exit ;
44972: GO 45072
// for i := 1 to 3 do
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: DOUBLE
44980: LD_INT 1
44982: DEC
44983: ST_TO_ADDR
44984: LD_INT 3
44986: PUSH
44987: FOR_TO
44988: IFFALSE 45070
// begin tmp := GetCargo ( cargo , i ) ;
44990: LD_ADDR_VAR 0 4
44994: PUSH
44995: LD_VAR 0 1
44999: PPUSH
45000: LD_VAR 0 3
45004: PPUSH
45005: CALL_OW 289
45009: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45010: LD_ADDR_VAR 0 2
45014: PUSH
45015: LD_VAR 0 2
45019: PPUSH
45020: LD_VAR 0 3
45024: PPUSH
45025: LD_VAR 0 4
45029: PPUSH
45030: CALL_OW 1
45034: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45035: LD_ADDR_VAR 0 2
45039: PUSH
45040: LD_VAR 0 2
45044: PPUSH
45045: LD_INT 4
45047: PPUSH
45048: LD_VAR 0 2
45052: PUSH
45053: LD_INT 4
45055: ARRAY
45056: PUSH
45057: LD_VAR 0 4
45061: PLUS
45062: PPUSH
45063: CALL_OW 1
45067: ST_TO_ADDR
// end ;
45068: GO 44987
45070: POP
45071: POP
// end ;
45072: LD_VAR 0 2
45076: RET
// export function Length ( array ) ; begin
45077: LD_INT 0
45079: PPUSH
// result := array + 0 ;
45080: LD_ADDR_VAR 0 2
45084: PUSH
45085: LD_VAR 0 1
45089: PUSH
45090: LD_INT 0
45092: PLUS
45093: ST_TO_ADDR
// end ;
45094: LD_VAR 0 2
45098: RET
// export function PrepareArray ( array ) ; begin
45099: LD_INT 0
45101: PPUSH
// result := array diff 0 ;
45102: LD_ADDR_VAR 0 2
45106: PUSH
45107: LD_VAR 0 1
45111: PUSH
45112: LD_INT 0
45114: DIFF
45115: ST_TO_ADDR
// if not result [ 1 ] then
45116: LD_VAR 0 2
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: NOT
45125: IFFALSE 45145
// result := Delete ( result , 1 ) ;
45127: LD_ADDR_VAR 0 2
45131: PUSH
45132: LD_VAR 0 2
45136: PPUSH
45137: LD_INT 1
45139: PPUSH
45140: CALL_OW 3
45144: ST_TO_ADDR
// end ;
45145: LD_VAR 0 2
45149: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45150: LD_INT 0
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
// sibRocketRange := 25 ;
45156: LD_ADDR_VAR 0 6
45160: PUSH
45161: LD_INT 25
45163: ST_TO_ADDR
// result := false ;
45164: LD_ADDR_VAR 0 4
45168: PUSH
45169: LD_INT 0
45171: ST_TO_ADDR
// for i := 0 to 5 do
45172: LD_ADDR_VAR 0 5
45176: PUSH
45177: DOUBLE
45178: LD_INT 0
45180: DEC
45181: ST_TO_ADDR
45182: LD_INT 5
45184: PUSH
45185: FOR_TO
45186: IFFALSE 45253
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45188: LD_VAR 0 1
45192: PPUSH
45193: LD_VAR 0 5
45197: PPUSH
45198: LD_VAR 0 6
45202: PPUSH
45203: CALL_OW 272
45207: PPUSH
45208: LD_VAR 0 2
45212: PPUSH
45213: LD_VAR 0 5
45217: PPUSH
45218: LD_VAR 0 6
45222: PPUSH
45223: CALL_OW 273
45227: PPUSH
45228: LD_VAR 0 3
45232: PPUSH
45233: CALL_OW 309
45237: IFFALSE 45251
// begin result := true ;
45239: LD_ADDR_VAR 0 4
45243: PUSH
45244: LD_INT 1
45246: ST_TO_ADDR
// exit ;
45247: POP
45248: POP
45249: GO 45255
// end ;
45251: GO 45185
45253: POP
45254: POP
// end ;
45255: LD_VAR 0 4
45259: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45260: LD_INT 0
45262: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45263: LD_VAR 0 1
45267: PPUSH
45268: LD_VAR 0 2
45272: PPUSH
45273: LD_INT 0
45275: PPUSH
45276: LD_INT 0
45278: PPUSH
45279: LD_INT 1
45281: PPUSH
45282: LD_INT 0
45284: PPUSH
45285: CALL_OW 587
// end ;
45289: LD_VAR 0 3
45293: RET
// export function CenterOnNow ( unit ) ; begin
45294: LD_INT 0
45296: PPUSH
// result := IsInUnit ( unit ) ;
45297: LD_ADDR_VAR 0 2
45301: PUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: CALL_OW 310
45311: ST_TO_ADDR
// if not result then
45312: LD_VAR 0 2
45316: NOT
45317: IFFALSE 45329
// result := unit ;
45319: LD_ADDR_VAR 0 2
45323: PUSH
45324: LD_VAR 0 1
45328: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45329: LD_VAR 0 1
45333: PPUSH
45334: CALL_OW 87
// end ;
45338: LD_VAR 0 2
45342: RET
// export function ComMoveHex ( unit , hex ) ; begin
45343: LD_INT 0
45345: PPUSH
// if not hex then
45346: LD_VAR 0 2
45350: NOT
45351: IFFALSE 45355
// exit ;
45353: GO 45408
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45355: LD_VAR 0 2
45359: PUSH
45360: LD_INT 1
45362: ARRAY
45363: PPUSH
45364: LD_VAR 0 2
45368: PUSH
45369: LD_INT 2
45371: ARRAY
45372: PPUSH
45373: CALL_OW 428
45377: IFFALSE 45381
// exit ;
45379: GO 45408
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45381: LD_VAR 0 1
45385: PPUSH
45386: LD_VAR 0 2
45390: PUSH
45391: LD_INT 1
45393: ARRAY
45394: PPUSH
45395: LD_VAR 0 2
45399: PUSH
45400: LD_INT 2
45402: ARRAY
45403: PPUSH
45404: CALL_OW 111
// end ;
45408: LD_VAR 0 3
45412: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
// if not unit or not enemy then
45418: LD_VAR 0 1
45422: NOT
45423: PUSH
45424: LD_VAR 0 2
45428: NOT
45429: OR
45430: IFFALSE 45434
// exit ;
45432: GO 45558
// x := GetX ( enemy ) ;
45434: LD_ADDR_VAR 0 4
45438: PUSH
45439: LD_VAR 0 2
45443: PPUSH
45444: CALL_OW 250
45448: ST_TO_ADDR
// y := GetY ( enemy ) ;
45449: LD_ADDR_VAR 0 5
45453: PUSH
45454: LD_VAR 0 2
45458: PPUSH
45459: CALL_OW 251
45463: ST_TO_ADDR
// if ValidHex ( x , y ) then
45464: LD_VAR 0 4
45468: PPUSH
45469: LD_VAR 0 5
45473: PPUSH
45474: CALL_OW 488
45478: IFFALSE 45558
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45480: LD_VAR 0 2
45484: PPUSH
45485: CALL_OW 247
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: IN
45500: PUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: CALL_OW 255
45510: PPUSH
45511: LD_VAR 0 2
45515: PPUSH
45516: CALL_OW 292
45520: OR
45521: IFFALSE 45539
// ComAttackUnit ( unit , enemy ) else
45523: LD_VAR 0 1
45527: PPUSH
45528: LD_VAR 0 2
45532: PPUSH
45533: CALL_OW 115
45537: GO 45558
// ComAgressiveMove ( unit , x , y ) ;
45539: LD_VAR 0 1
45543: PPUSH
45544: LD_VAR 0 4
45548: PPUSH
45549: LD_VAR 0 5
45553: PPUSH
45554: CALL_OW 114
// end ;
45558: LD_VAR 0 3
45562: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45563: LD_INT 0
45565: PPUSH
45566: PPUSH
45567: PPUSH
// list := AreaToList ( area , 0 ) ;
45568: LD_ADDR_VAR 0 5
45572: PUSH
45573: LD_VAR 0 1
45577: PPUSH
45578: LD_INT 0
45580: PPUSH
45581: CALL_OW 517
45585: ST_TO_ADDR
// if not list then
45586: LD_VAR 0 5
45590: NOT
45591: IFFALSE 45595
// exit ;
45593: GO 45725
// if all then
45595: LD_VAR 0 2
45599: IFFALSE 45687
// begin for i := 1 to list [ 1 ] do
45601: LD_ADDR_VAR 0 4
45605: PUSH
45606: DOUBLE
45607: LD_INT 1
45609: DEC
45610: ST_TO_ADDR
45611: LD_VAR 0 5
45615: PUSH
45616: LD_INT 1
45618: ARRAY
45619: PUSH
45620: FOR_TO
45621: IFFALSE 45683
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45623: LD_ADDR_VAR 0 3
45627: PUSH
45628: LD_VAR 0 3
45632: PPUSH
45633: LD_VAR 0 3
45637: PUSH
45638: LD_INT 1
45640: PLUS
45641: PPUSH
45642: LD_VAR 0 5
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PUSH
45651: LD_VAR 0 4
45655: ARRAY
45656: PUSH
45657: LD_VAR 0 5
45661: PUSH
45662: LD_INT 2
45664: ARRAY
45665: PUSH
45666: LD_VAR 0 4
45670: ARRAY
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PPUSH
45676: CALL_OW 1
45680: ST_TO_ADDR
45681: GO 45620
45683: POP
45684: POP
// exit ;
45685: GO 45725
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: LD_VAR 0 5
45696: PUSH
45697: LD_INT 1
45699: ARRAY
45700: PUSH
45701: LD_INT 1
45703: ARRAY
45704: PUSH
45705: LD_VAR 0 5
45709: PUSH
45710: LD_INT 2
45712: ARRAY
45713: PUSH
45714: LD_INT 1
45716: ARRAY
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: ST_TO_ADDR
// end ;
45725: LD_VAR 0 3
45729: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45730: LD_INT 0
45732: PPUSH
45733: PPUSH
// list := AreaToList ( area , 0 ) ;
45734: LD_ADDR_VAR 0 4
45738: PUSH
45739: LD_VAR 0 1
45743: PPUSH
45744: LD_INT 0
45746: PPUSH
45747: CALL_OW 517
45751: ST_TO_ADDR
// if not list then
45752: LD_VAR 0 4
45756: NOT
45757: IFFALSE 45761
// exit ;
45759: GO 45802
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45761: LD_ADDR_VAR 0 3
45765: PUSH
45766: LD_VAR 0 4
45770: PUSH
45771: LD_INT 1
45773: ARRAY
45774: PUSH
45775: LD_INT 1
45777: ARRAY
45778: PUSH
45779: LD_VAR 0 4
45783: PUSH
45784: LD_INT 2
45786: ARRAY
45787: PUSH
45788: LD_INT 1
45790: ARRAY
45791: PUSH
45792: LD_VAR 0 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// end ;
45802: LD_VAR 0 3
45806: RET
// export function First ( array ) ; begin
45807: LD_INT 0
45809: PPUSH
// if not array then
45810: LD_VAR 0 1
45814: NOT
45815: IFFALSE 45819
// exit ;
45817: GO 45833
// result := array [ 1 ] ;
45819: LD_ADDR_VAR 0 2
45823: PUSH
45824: LD_VAR 0 1
45828: PUSH
45829: LD_INT 1
45831: ARRAY
45832: ST_TO_ADDR
// end ;
45833: LD_VAR 0 2
45837: RET
// export function Last ( array ) ; begin
45838: LD_INT 0
45840: PPUSH
// if not array then
45841: LD_VAR 0 1
45845: NOT
45846: IFFALSE 45850
// exit ;
45848: GO 45866
// result := array [ array ] ;
45850: LD_ADDR_VAR 0 2
45854: PUSH
45855: LD_VAR 0 1
45859: PUSH
45860: LD_VAR 0 1
45864: ARRAY
45865: ST_TO_ADDR
// end ;
45866: LD_VAR 0 2
45870: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45871: LD_INT 0
45873: PPUSH
45874: PPUSH
// result := [ ] ;
45875: LD_ADDR_VAR 0 5
45879: PUSH
45880: EMPTY
45881: ST_TO_ADDR
// if not array then
45882: LD_VAR 0 1
45886: NOT
45887: IFFALSE 45891
// exit ;
45889: GO 46003
// for i := 1 to array do
45891: LD_ADDR_VAR 0 6
45895: PUSH
45896: DOUBLE
45897: LD_INT 1
45899: DEC
45900: ST_TO_ADDR
45901: LD_VAR 0 1
45905: PUSH
45906: FOR_TO
45907: IFFALSE 46001
// if array [ i ] [ index ] = value then
45909: LD_VAR 0 1
45913: PUSH
45914: LD_VAR 0 6
45918: ARRAY
45919: PUSH
45920: LD_VAR 0 2
45924: ARRAY
45925: PUSH
45926: LD_VAR 0 3
45930: EQUAL
45931: IFFALSE 45999
// begin if indexColumn then
45933: LD_VAR 0 4
45937: IFFALSE 45973
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45939: LD_ADDR_VAR 0 5
45943: PUSH
45944: LD_VAR 0 5
45948: PPUSH
45949: LD_VAR 0 1
45953: PUSH
45954: LD_VAR 0 6
45958: ARRAY
45959: PUSH
45960: LD_VAR 0 4
45964: ARRAY
45965: PPUSH
45966: CALL 41341 0 2
45970: ST_TO_ADDR
45971: GO 45999
// result := Join ( result , array [ i ] ) ;
45973: LD_ADDR_VAR 0 5
45977: PUSH
45978: LD_VAR 0 5
45982: PPUSH
45983: LD_VAR 0 1
45987: PUSH
45988: LD_VAR 0 6
45992: ARRAY
45993: PPUSH
45994: CALL 41341 0 2
45998: ST_TO_ADDR
// end ;
45999: GO 45906
46001: POP
46002: POP
// end ;
46003: LD_VAR 0 5
46007: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
46008: LD_INT 0
46010: PPUSH
46011: PPUSH
46012: PPUSH
// if btype = b_depot then
46013: LD_VAR 0 2
46017: PUSH
46018: LD_INT 0
46020: EQUAL
46021: IFFALSE 46033
// begin result := true ;
46023: LD_ADDR_VAR 0 3
46027: PUSH
46028: LD_INT 1
46030: ST_TO_ADDR
// exit ;
46031: GO 46149
// end ; pom := GetBase ( depot ) ;
46033: LD_ADDR_VAR 0 4
46037: PUSH
46038: LD_VAR 0 1
46042: PPUSH
46043: CALL_OW 274
46047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46048: LD_ADDR_VAR 0 5
46052: PUSH
46053: LD_VAR 0 2
46057: PPUSH
46058: LD_VAR 0 1
46062: PPUSH
46063: CALL_OW 248
46067: PPUSH
46068: CALL_OW 450
46072: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
46073: LD_ADDR_VAR 0 3
46077: PUSH
46078: LD_VAR 0 4
46082: PPUSH
46083: LD_INT 1
46085: PPUSH
46086: CALL_OW 275
46090: PUSH
46091: LD_VAR 0 5
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: GREATEREQUAL
46100: PUSH
46101: LD_VAR 0 4
46105: PPUSH
46106: LD_INT 2
46108: PPUSH
46109: CALL_OW 275
46113: PUSH
46114: LD_VAR 0 5
46118: PUSH
46119: LD_INT 2
46121: ARRAY
46122: GREATEREQUAL
46123: AND
46124: PUSH
46125: LD_VAR 0 4
46129: PPUSH
46130: LD_INT 3
46132: PPUSH
46133: CALL_OW 275
46137: PUSH
46138: LD_VAR 0 5
46142: PUSH
46143: LD_INT 3
46145: ARRAY
46146: GREATEREQUAL
46147: AND
46148: ST_TO_ADDR
// end ;
46149: LD_VAR 0 3
46153: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46154: LD_INT 0
46156: PPUSH
// if not vehicles or not parkingPoint then
46157: LD_VAR 0 1
46161: NOT
46162: PUSH
46163: LD_VAR 0 2
46167: NOT
46168: OR
46169: IFFALSE 46173
// exit ;
46171: GO 46271
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46173: LD_ADDR_VAR 0 1
46177: PUSH
46178: LD_VAR 0 1
46182: PPUSH
46183: LD_INT 50
46185: PUSH
46186: EMPTY
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: PUSH
46192: LD_INT 92
46194: PUSH
46195: LD_VAR 0 2
46199: PUSH
46200: LD_INT 1
46202: ARRAY
46203: PUSH
46204: LD_VAR 0 2
46208: PUSH
46209: LD_INT 2
46211: ARRAY
46212: PUSH
46213: LD_INT 8
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PPUSH
46230: CALL_OW 72
46234: ST_TO_ADDR
// if not vehicles then
46235: LD_VAR 0 1
46239: NOT
46240: IFFALSE 46244
// exit ;
46242: GO 46271
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_VAR 0 2
46253: PUSH
46254: LD_INT 1
46256: ARRAY
46257: PPUSH
46258: LD_VAR 0 2
46262: PUSH
46263: LD_INT 2
46265: ARRAY
46266: PPUSH
46267: CALL_OW 111
// end ;
46271: LD_VAR 0 3
46275: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46276: LD_INT 0
46278: PPUSH
46279: PPUSH
46280: PPUSH
// if not side or not area then
46281: LD_VAR 0 1
46285: NOT
46286: PUSH
46287: LD_VAR 0 2
46291: NOT
46292: OR
46293: IFFALSE 46297
// exit ;
46295: GO 46416
// tmp := AreaToList ( area , 0 ) ;
46297: LD_ADDR_VAR 0 5
46301: PUSH
46302: LD_VAR 0 2
46306: PPUSH
46307: LD_INT 0
46309: PPUSH
46310: CALL_OW 517
46314: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46315: LD_ADDR_VAR 0 4
46319: PUSH
46320: DOUBLE
46321: LD_INT 1
46323: DEC
46324: ST_TO_ADDR
46325: LD_VAR 0 5
46329: PUSH
46330: LD_INT 1
46332: ARRAY
46333: PUSH
46334: FOR_TO
46335: IFFALSE 46414
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46337: LD_VAR 0 5
46341: PUSH
46342: LD_INT 1
46344: ARRAY
46345: PUSH
46346: LD_VAR 0 4
46350: ARRAY
46351: PPUSH
46352: LD_VAR 0 5
46356: PUSH
46357: LD_INT 2
46359: ARRAY
46360: PUSH
46361: LD_VAR 0 4
46365: ARRAY
46366: PPUSH
46367: CALL_OW 351
46371: IFFALSE 46412
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46373: LD_VAR 0 5
46377: PUSH
46378: LD_INT 1
46380: ARRAY
46381: PUSH
46382: LD_VAR 0 4
46386: ARRAY
46387: PPUSH
46388: LD_VAR 0 5
46392: PUSH
46393: LD_INT 2
46395: ARRAY
46396: PUSH
46397: LD_VAR 0 4
46401: ARRAY
46402: PPUSH
46403: LD_VAR 0 1
46407: PPUSH
46408: CALL_OW 244
// end ;
46412: GO 46334
46414: POP
46415: POP
// end ;
46416: LD_VAR 0 3
46420: RET
