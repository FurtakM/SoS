// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1515 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2681 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: LD_STRING 07_Americans
 644: PPUSH
 645: CALL_OW 31
 649: ST_TO_ADDR
// if not americanSquad then
 650: LD_EXP 17
 654: NOT
 655: IFFALSE 720
// begin for i := 1 to 4 do
 657: LD_ADDR_VAR 0 2
 661: PUSH
 662: DOUBLE
 663: LD_INT 1
 665: DEC
 666: ST_TO_ADDR
 667: LD_INT 4
 669: PUSH
 670: FOR_TO
 671: IFFALSE 716
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 673: LD_INT 0
 675: PPUSH
 676: LD_INT 2
 678: PPUSH
 679: LD_INT 4
 681: PPUSH
 682: CALL_OW 12
 686: PPUSH
 687: LD_INT 6
 689: PPUSH
 690: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 694: LD_ADDR_EXP 17
 698: PUSH
 699: LD_EXP 17
 703: PPUSH
 704: CALL_OW 44
 708: PPUSH
 709: CALL 40961 0 2
 713: ST_TO_ADDR
// end ;
 714: GO 670
 716: POP
 717: POP
// end else
 718: GO 771
// begin for i in americanSquad do
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: LD_EXP 17
 729: PUSH
 730: FOR_IN
 731: IFFALSE 769
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 733: LD_VAR 0 2
 737: PPUSH
 738: CALL_OW 257
 742: PUSH
 743: LD_INT 5
 745: PUSH
 746: LD_INT 1
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: IN
 753: IFFALSE 767
// SetClass ( i , class_engineer ) ;
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: CALL_OW 336
 767: GO 730
 769: POP
 770: POP
// end ; uc_side := 2 ;
 771: LD_ADDR_OWVAR 20
 775: PUSH
 776: LD_INT 2
 778: ST_TO_ADDR
// uc_nation := 2 ;
 779: LD_ADDR_OWVAR 21
 783: PUSH
 784: LD_INT 2
 786: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 787: LD_ADDR_EXP 5
 791: PUSH
 792: LD_STRING Heike
 794: PPUSH
 795: LD_EXP 1
 799: NOT
 800: PPUSH
 801: LD_EXP 2
 805: PPUSH
 806: CALL 3585 0 3
 810: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 811: LD_ADDR_EXP 8
 815: PUSH
 816: LD_STRING Ibrahim
 818: PPUSH
 819: LD_EXP 1
 823: NOT
 824: PPUSH
 825: LD_EXP 2
 829: PPUSH
 830: CALL 3585 0 3
 834: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 835: LD_ADDR_EXP 6
 839: PUSH
 840: LD_STRING Givi
 842: PPUSH
 843: LD_EXP 1
 847: NOT
 848: PPUSH
 849: LD_EXP 2
 853: PPUSH
 854: CALL 3585 0 3
 858: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 859: LD_ADDR_EXP 9
 863: PUSH
 864: LD_STRING Kamil
 866: PPUSH
 867: LD_EXP 1
 871: NOT
 872: PPUSH
 873: LD_EXP 2
 877: PPUSH
 878: CALL 3585 0 3
 882: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 883: LD_ADDR_EXP 10
 887: PUSH
 888: LD_STRING Kaia
 890: PPUSH
 891: LD_EXP 1
 895: NOT
 896: PPUSH
 897: LD_EXP 2
 901: PPUSH
 902: CALL 3585 0 3
 906: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 907: LD_ADDR_EXP 11
 911: PUSH
 912: LD_STRING Sophia
 914: PPUSH
 915: LD_EXP 1
 919: NOT
 920: PPUSH
 921: LD_EXP 2
 925: PPUSH
 926: CALL 3585 0 3
 930: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 931: LD_ADDR_EXP 12
 935: PUSH
 936: LD_STRING Markov
 938: PPUSH
 939: LD_EXP 1
 943: NOT
 944: PPUSH
 945: LD_EXP 2
 949: PPUSH
 950: CALL 3585 0 3
 954: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 955: LD_ADDR_EXP 15
 959: PUSH
 960: LD_STRING Aviradze
 962: PPUSH
 963: LD_EXP 1
 967: NOT
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL 3585 0 3
 978: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 979: LD_ADDR_EXP 14
 983: PUSH
 984: LD_STRING Kurt
 986: PPUSH
 987: LD_EXP 1
 991: NOT
 992: PPUSH
 993: LD_EXP 2
 997: PPUSH
 998: CALL 3585 0 3
1002: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1003: LD_ADDR_EXP 7
1007: PUSH
1008: LD_STRING Mike
1010: PPUSH
1011: LD_EXP 1
1015: NOT
1016: PPUSH
1017: LD_EXP 2
1021: PPUSH
1022: CALL 3585 0 3
1026: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1027: LD_ADDR_EXP 13
1031: PUSH
1032: LD_STRING Olaf
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_STRING 
1040: PPUSH
1041: CALL 3585 0 3
1045: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1046: LD_ADDR_EXP 16
1050: PUSH
1051: LD_STRING 07_others
1053: PPUSH
1054: CALL_OW 31
1058: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1059: LD_ADDR_VAR 0 5
1063: PUSH
1064: LD_INT 14
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 25
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 14
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 14
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: ST_TO_ADDR
// for i in veh do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_VAR 0 5
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1239
// begin vc_chassis := i [ 1 ] ;
1136: LD_ADDR_OWVAR 37
1140: PUSH
1141: LD_VAR 0 2
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1150: LD_ADDR_OWVAR 39
1154: PUSH
1155: LD_VAR 0 2
1159: PUSH
1160: LD_INT 2
1162: ARRAY
1163: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1164: LD_ADDR_OWVAR 38
1168: PUSH
1169: LD_VAR 0 2
1173: PUSH
1174: LD_INT 3
1176: ARRAY
1177: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1178: LD_ADDR_OWVAR 40
1182: PUSH
1183: LD_VAR 0 2
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1192: LD_ADDR_OWVAR 41
1196: PUSH
1197: LD_INT 25
1199: ST_TO_ADDR
// un := CreateVehicle ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: CALL_OW 45
1209: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1210: LD_VAR 0 4
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1222: LD_VAR 0 4
1226: PPUSH
1227: LD_INT 7
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: CALL_OW 49
// end ;
1237: GO 1133
1239: POP
1240: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: LD_EXP 7
1250: PUSH
1251: LD_EXP 8
1255: PUSH
1256: LD_EXP 9
1260: PUSH
1261: LD_EXP 10
1265: PUSH
1266: LD_EXP 11
1270: PUSH
1271: LD_EXP 12
1275: PUSH
1276: LD_EXP 13
1280: PUSH
1281: LD_EXP 14
1285: PUSH
1286: LD_EXP 15
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 16
1306: UNION
1307: PUSH
1308: LD_EXP 17
1312: UNION
1313: ST_TO_ADDR
// for i in tmp do
1314: LD_ADDR_VAR 0 2
1318: PUSH
1319: LD_VAR 0 3
1323: PUSH
1324: FOR_IN
1325: IFFALSE 1445
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1327: LD_VAR 0 2
1331: PPUSH
1332: CALL_OW 257
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 2
1342: PUSH
1343: LD_INT 4
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: IN
1351: PUSH
1352: LD_INT 22
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: AND
1377: IFFALSE 1419
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_INT 22
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PPUSH
1404: CALL_OW 69
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: CALL_OW 52
1417: GO 1434
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1419: LD_VAR 0 2
1423: PPUSH
1424: LD_INT 6
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// ComHold ( i ) ;
1434: LD_VAR 0 2
1438: PPUSH
1439: CALL_OW 140
// end ;
1443: GO 1324
1445: POP
1446: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1447: LD_EXP 5
1451: PPUSH
1452: LD_INT 5
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1462: LD_EXP 5
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: CALL_OW 119
// if Givi then
1474: LD_EXP 6
1478: IFFALSE 1510
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1480: LD_EXP 6
1484: PPUSH
1485: LD_INT 129
1487: PPUSH
1488: LD_INT 158
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1498: LD_EXP 6
1502: PPUSH
1503: LD_INT 2
1505: PPUSH
1506: CALL_OW 119
// end ; end ; end_of_file
1510: LD_VAR 0 1
1514: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1515: LD_INT 0
1517: PPUSH
1518: PPUSH
1519: PPUSH
// uc_side := 3 ;
1520: LD_ADDR_OWVAR 20
1524: PUSH
1525: LD_INT 3
1527: ST_TO_ADDR
// uc_nation := 3 ;
1528: LD_ADDR_OWVAR 21
1532: PUSH
1533: LD_INT 3
1535: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1536: LD_ADDR_EXP 20
1540: PUSH
1541: LD_STRING Burlak
1543: PPUSH
1544: CALL_OW 25
1548: ST_TO_ADDR
// kabulAttackers := [ ] ;
1549: LD_ADDR_EXP 18
1553: PUSH
1554: EMPTY
1555: ST_TO_ADDR
// heikeAttackers := [ ] ;
1556: LD_ADDR_EXP 19
1560: PUSH
1561: EMPTY
1562: ST_TO_ADDR
// for i := 1 to 9 do
1563: LD_ADDR_VAR 0 2
1567: PUSH
1568: DOUBLE
1569: LD_INT 1
1571: DEC
1572: ST_TO_ADDR
1573: LD_INT 9
1575: PUSH
1576: FOR_TO
1577: IFFALSE 1669
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1579: LD_INT 0
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 380
// un := CreateHuman ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: CALL_OW 44
1601: ST_TO_ADDR
// if Prob ( 40 ) then
1602: LD_INT 40
1604: PPUSH
1605: CALL_OW 13
1609: IFFALSE 1623
// SetClass ( un , class_bazooker ) ;
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_INT 9
1618: PPUSH
1619: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1623: LD_VAR 0 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: LD_INT 5
1633: PPUSH
1634: CALL_OW 12
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1643: LD_VAR 0 3
1647: PPUSH
1648: LD_INT 10
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// KillUnit ( un ) ;
1658: LD_VAR 0 3
1662: PPUSH
1663: CALL_OW 66
// end ;
1667: GO 1576
1669: POP
1670: POP
// for i := 1 to 9 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 9
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1906
// begin if rand ( 0 , 1 ) then
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 12
1697: IFFALSE 1760
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1699: LD_INT 0
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 7
1707: PPUSH
1708: CALL_OW 380
// un := CreateHuman ;
1712: LD_ADDR_VAR 0 3
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1722: LD_VAR 0 3
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1734: LD_VAR 0 3
1738: PPUSH
1739: LD_INT 3
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL_OW 49
// ComHold ( un ) ;
1749: LD_VAR 0 3
1753: PPUSH
1754: CALL_OW 140
// end else
1758: GO 1875
// begin vc_chassis := ru_medium_tracked ;
1760: LD_ADDR_OWVAR 37
1764: PUSH
1765: LD_INT 22
1767: ST_TO_ADDR
// vc_engine := engine_combustion ;
1768: LD_ADDR_OWVAR 39
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// vc_control := control_manual ;
1776: LD_ADDR_OWVAR 38
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1784: LD_ADDR_OWVAR 40
1788: PUSH
1789: LD_INT 44
1791: PUSH
1792: LD_INT 43
1794: PUSH
1795: LD_INT 45
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 1
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: CALL_OW 12
1813: ARRAY
1814: ST_TO_ADDR
// un := CreateVehicle ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: CALL_OW 45
1824: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1825: LD_VAR 0 3
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1837: LD_VAR 0 3
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// ComHold ( un ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1861: CALL_OW 44
1865: PPUSH
1866: LD_VAR 0 3
1870: PPUSH
1871: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1875: LD_ADDR_EXP 18
1879: PUSH
1880: LD_EXP 18
1884: PPUSH
1885: LD_EXP 18
1889: PUSH
1890: LD_INT 1
1892: PLUS
1893: PPUSH
1894: LD_VAR 0 3
1898: PPUSH
1899: CALL_OW 1
1903: ST_TO_ADDR
// end ;
1904: GO 1684
1906: POP
1907: POP
// for i := 1 to 5 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 5
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2155
// begin if rand ( 0 , 1 ) then
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 12
1934: IFFALSE 2009
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1936: LD_INT 0
1938: PPUSH
1939: LD_INT 1
1941: PPUSH
1942: LD_INT 7
1944: PPUSH
1945: CALL_OW 380
// un := CreateHuman ;
1949: LD_ADDR_VAR 0 3
1953: PUSH
1954: CALL_OW 44
1958: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1959: LD_VAR 0 3
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1971: LD_VAR 0 3
1975: PPUSH
1976: LD_INT 9
1978: PPUSH
1979: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 8
1990: PPUSH
1991: LD_INT 0
1993: PPUSH
1994: CALL_OW 49
// ComHold ( un ) ;
1998: LD_VAR 0 3
2002: PPUSH
2003: CALL_OW 140
// end else
2007: GO 2124
// begin vc_chassis := ru_heavy_wheeled ;
2009: LD_ADDR_OWVAR 37
2013: PUSH
2014: LD_INT 23
2016: ST_TO_ADDR
// vc_engine := engine_combustion ;
2017: LD_ADDR_OWVAR 39
2021: PUSH
2022: LD_INT 1
2024: ST_TO_ADDR
// vc_control := control_manual ;
2025: LD_ADDR_OWVAR 38
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2033: LD_ADDR_OWVAR 40
2037: PUSH
2038: LD_INT 44
2040: PUSH
2041: LD_INT 43
2043: PUSH
2044: LD_INT 45
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 3
2057: PPUSH
2058: CALL_OW 12
2062: ARRAY
2063: ST_TO_ADDR
// un := CreateVehicle ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2074: LD_VAR 0 3
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2086: LD_VAR 0 3
2090: PPUSH
2091: LD_INT 8
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// ComHold ( un ) ;
2101: LD_VAR 0 3
2105: PPUSH
2106: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2110: CALL_OW 44
2114: PPUSH
2115: LD_VAR 0 3
2119: PPUSH
2120: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2124: LD_ADDR_EXP 18
2128: PUSH
2129: LD_EXP 18
2133: PPUSH
2134: LD_EXP 18
2138: PUSH
2139: LD_INT 1
2141: PLUS
2142: PPUSH
2143: LD_VAR 0 3
2147: PPUSH
2148: CALL_OW 1
2152: ST_TO_ADDR
// end ;
2153: GO 1921
2155: POP
2156: POP
// for i := 1 to 5 do
2157: LD_ADDR_VAR 0 2
2161: PUSH
2162: DOUBLE
2163: LD_INT 1
2165: DEC
2166: ST_TO_ADDR
2167: LD_INT 5
2169: PUSH
2170: FOR_TO
2171: IFFALSE 2275
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2173: LD_INT 0
2175: PPUSH
2176: LD_INT 1
2178: PPUSH
2179: LD_INT 7
2181: PPUSH
2182: CALL_OW 380
// un := CreateHuman ;
2186: LD_ADDR_VAR 0 3
2190: PUSH
2191: CALL_OW 44
2195: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_INT 0
2203: PPUSH
2204: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2208: LD_VAR 0 3
2212: PPUSH
2213: LD_INT 9
2215: PPUSH
2216: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2220: LD_VAR 0 3
2224: PPUSH
2225: LD_INT 9
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
// ComHold ( un ) ;
2235: LD_VAR 0 3
2239: PPUSH
2240: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2244: LD_ADDR_EXP 18
2248: PUSH
2249: LD_EXP 18
2253: PPUSH
2254: LD_EXP 18
2258: PUSH
2259: LD_INT 1
2261: PLUS
2262: PPUSH
2263: LD_VAR 0 3
2267: PPUSH
2268: CALL_OW 1
2272: ST_TO_ADDR
// end ;
2273: GO 2170
2275: POP
2276: POP
// for i := 1 to 12 do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 12
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2528
// begin if Prob ( 22 ) then
2293: LD_INT 22
2295: PPUSH
2296: CALL_OW 13
2300: IFFALSE 2363
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2302: LD_INT 0
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: LD_INT 7
2310: PPUSH
2311: CALL_OW 380
// un := CreateHuman ;
2315: LD_ADDR_VAR 0 3
2319: PUSH
2320: CALL_OW 44
2324: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2325: LD_VAR 0 3
2329: PPUSH
2330: LD_INT 3
2332: PPUSH
2333: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2337: LD_VAR 0 3
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 49
// ComHold ( un ) ;
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 140
// end else
2361: GO 2497
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2363: LD_ADDR_OWVAR 37
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 24
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 1
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: CALL_OW 12
2388: ARRAY
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 44
2413: PUSH
2414: LD_INT 43
2416: PUSH
2417: LD_INT 45
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 1
2427: PPUSH
2428: LD_INT 3
2430: PPUSH
2431: CALL_OW 12
2435: ARRAY
2436: ST_TO_ADDR
// un := CreateVehicle ;
2437: LD_ADDR_VAR 0 3
2441: PUSH
2442: CALL_OW 45
2446: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2447: LD_VAR 0 3
2451: PPUSH
2452: LD_INT 3
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2459: LD_VAR 0 3
2463: PPUSH
2464: LD_INT 4
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComHold ( un ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2483: CALL_OW 44
2487: PPUSH
2488: LD_VAR 0 3
2492: PPUSH
2493: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2497: LD_ADDR_EXP 19
2501: PUSH
2502: LD_EXP 19
2506: PPUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 1
2514: PLUS
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL_OW 1
2525: ST_TO_ADDR
// end ;
2526: GO 2290
2528: POP
2529: POP
// end ;
2530: LD_VAR 0 1
2534: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2535: LD_EXP 3
2539: PUSH
2540: LD_EXP 18
2544: AND
2545: IFFALSE 2605
2547: GO 2549
2549: DISABLE
2550: LD_INT 0
2552: PPUSH
// begin enable ;
2553: ENABLE
// for i in kabulAttackers do
2554: LD_ADDR_VAR 0 1
2558: PUSH
2559: LD_EXP 18
2563: PUSH
2564: FOR_IN
2565: IFFALSE 2603
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2567: LD_VAR 0 1
2571: PPUSH
2572: LD_INT 22
2574: PUSH
2575: LD_INT 5
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
2601: GO 2564
2603: POP
2604: POP
// end ;
2605: PPOPN 1
2607: END
// every 0 0$2 trigger startAttackOnHeike and heikeAttackers do var i ;
2608: LD_EXP 4
2612: PUSH
2613: LD_EXP 19
2617: AND
2618: IFFALSE 2678
2620: GO 2622
2622: DISABLE
2623: LD_INT 0
2625: PPUSH
// begin enable ;
2626: ENABLE
// for i in heikeAttackers do
2627: LD_ADDR_VAR 0 1
2631: PUSH
2632: LD_EXP 19
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2676
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: PPUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: CALL_OW 74
2669: PPUSH
2670: CALL_OW 115
2674: GO 2637
2676: POP
2677: POP
// end ; end_of_file
2678: PPOPN 1
2680: END
// export function Action ; var i ; begin
2681: LD_INT 0
2683: PPUSH
2684: PPUSH
// music_nat := nation_russian ;
2685: LD_ADDR_OWVAR 71
2689: PUSH
2690: LD_INT 3
2692: ST_TO_ADDR
// Video ( true ) ;
2693: LD_INT 1
2695: PPUSH
2696: CALL 40933 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2700: LD_INT 111
2702: PPUSH
2703: LD_INT 168
2705: PPUSH
2706: LD_INT 2
2708: PPUSH
2709: LD_INT 25
2711: NEG
2712: PPUSH
2713: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2717: LD_INT 102
2719: PPUSH
2720: LD_INT 47
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_INT 40
2728: NEG
2729: PPUSH
2730: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2734: LD_EXP 5
2738: PPUSH
2739: CALL_OW 87
// startAttackOnKabul := true ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 1
2750: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2751: LD_INT 70
2753: PPUSH
2754: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2758: LD_INT 102
2760: PPUSH
2761: LD_INT 47
2763: PPUSH
2764: CALL_OW 84
// if Givi then
2768: LD_EXP 6
2772: IFFALSE 2963
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2774: LD_EXP 6
2778: PPUSH
2779: LD_INT 113
2781: PPUSH
2782: LD_INT 162
2784: PPUSH
2785: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2789: LD_EXP 6
2793: PPUSH
2794: LD_EXP 5
2798: PPUSH
2799: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2803: LD_EXP 6
2807: PPUSH
2808: LD_STRING DG-Intro-1
2810: PPUSH
2811: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2815: LD_EXP 6
2819: PPUSH
2820: LD_STRING DG-Intro-2
2822: PPUSH
2823: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2827: LD_EXP 5
2831: PPUSH
2832: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2836: LD_INT 102
2838: PPUSH
2839: LD_INT 47
2841: PPUSH
2842: LD_INT 2
2844: PPUSH
2845: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2849: LD_INT 10
2851: PPUSH
2852: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2856: LD_EXP 5
2860: PPUSH
2861: LD_STRING DH-Intro-3
2863: PPUSH
2864: CALL_OW 88
// if Mike then
2868: LD_EXP 7
2872: IFFALSE 2961
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2874: LD_INT 92
2876: PPUSH
2877: LD_INT 129
2879: PPUSH
2880: LD_INT 2
2882: PPUSH
2883: LD_INT 18
2885: NEG
2886: PPUSH
2887: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2891: LD_INT 92
2893: PPUSH
2894: LD_INT 129
2896: PPUSH
2897: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2901: LD_EXP 7
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: LD_EXP 5
2919: PPUSH
2920: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2924: LD_EXP 7
2928: PPUSH
2929: LD_STRING DM-Intro-4
2931: PPUSH
2932: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2936: LD_EXP 10
2940: PPUSH
2941: LD_STRING DK-Intro-5
2943: PPUSH
2944: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2948: LD_INT 92
2950: PPUSH
2951: LD_INT 129
2953: PPUSH
2954: LD_INT 2
2956: PPUSH
2957: CALL_OW 331
// end ; end else
2961: GO 3216
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2963: LD_EXP 16
2967: PPUSH
2968: LD_INT 26
2970: PUSH
2971: LD_INT 1
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PPUSH
2978: CALL_OW 72
2982: PUSH
2983: LD_INT 1
2985: ARRAY
2986: PPUSH
2987: LD_STRING DArm-Intro-b-1
2989: PPUSH
2990: CALL_OW 88
2994: NOT
2995: IFFALSE 3028
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
2997: LD_EXP 16
3001: PPUSH
3002: LD_INT 26
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: LD_INT 1
3019: ARRAY
3020: PPUSH
3021: LD_STRING DArf-Intro-b-1
3023: PPUSH
3024: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 26
3035: PUSH
3036: LD_INT 1
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PPUSH
3043: CALL_OW 72
3047: PUSH
3048: LD_INT 1
3050: ARRAY
3051: PPUSH
3052: LD_STRING DArm-Intro-b-2
3054: PPUSH
3055: CALL_OW 88
3059: NOT
3060: IFFALSE 3093
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_INT 26
3069: PUSH
3070: LD_INT 2
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 72
3081: PUSH
3082: LD_INT 1
3084: ARRAY
3085: PPUSH
3086: LD_STRING DArf-Intro-b-2
3088: PPUSH
3089: CALL_OW 88
// if Kaia then
3093: LD_EXP 10
3097: IFFALSE 3111
// Say ( Kaia , DK-Intro-5 ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_STRING DK-Intro-5
3106: PPUSH
3107: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3111: LD_INT 92
3113: PPUSH
3114: LD_INT 129
3116: PPUSH
3117: LD_INT 2
3119: PPUSH
3120: LD_INT 18
3122: NEG
3123: PPUSH
3124: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3128: LD_INT 92
3130: PPUSH
3131: LD_INT 129
3133: PPUSH
3134: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3138: LD_EXP 16
3142: PPUSH
3143: LD_INT 26
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: CALL_OW 72
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_STRING DArm-Intro-b-4
3164: PPUSH
3165: CALL_OW 88
3169: NOT
3170: IFFALSE 3203
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3172: LD_EXP 16
3176: PPUSH
3177: LD_INT 26
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PPUSH
3187: CALL_OW 72
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: PPUSH
3196: LD_STRING DArf-Intro-b-4
3198: PPUSH
3199: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3203: LD_INT 92
3205: PPUSH
3206: LD_INT 129
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3216: LD_EXP 5
3220: PPUSH
3221: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3225: LD_EXP 20
3229: PPUSH
3230: LD_STRING DB-Intro-6
3232: PPUSH
3233: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3237: LD_EXP 5
3241: PPUSH
3242: LD_STRING DH-Intro-7
3244: PPUSH
3245: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3249: LD_EXP 20
3253: PPUSH
3254: LD_STRING DB-Intro-8
3256: PPUSH
3257: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3261: LD_EXP 20
3265: PPUSH
3266: LD_STRING DB-Intro-9
3268: PPUSH
3269: CALL_OW 94
// if Givi then
3273: LD_EXP 6
3277: IFFALSE 3305
// begin Say ( Givi , DG-Intro-10 ) ;
3279: LD_EXP 6
3283: PPUSH
3284: LD_STRING DG-Intro-10
3286: PPUSH
3287: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3291: LD_EXP 10
3295: PPUSH
3296: LD_STRING DK-Intro-11
3298: PPUSH
3299: CALL_OW 88
// end else
3303: GO 3370
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3305: LD_EXP 16
3309: PPUSH
3310: LD_INT 26
3312: PUSH
3313: LD_INT 1
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 72
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_STRING DArm-Intro-b-10
3331: PPUSH
3332: CALL_OW 88
3336: NOT
3337: IFFALSE 3370
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3339: LD_EXP 16
3343: PPUSH
3344: LD_INT 26
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PPUSH
3354: CALL_OW 72
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_STRING DArf-Intro-b-10
3365: PPUSH
3366: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3370: LD_EXP 7
3374: PPUSH
3375: LD_STRING DM-Intro-12
3377: PPUSH
3378: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3382: LD_EXP 14
3386: PPUSH
3387: LD_STRING DKs-Intro-13
3389: PPUSH
3390: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3394: LD_EXP 9
3398: PPUSH
3399: LD_STRING DKam-Intro-14
3401: PPUSH
3402: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3406: LD_STRING QSurrender
3408: PPUSH
3409: CALL_OW 97
3413: PUSH
3414: LD_INT 1
3416: DOUBLE
3417: EQUAL
3418: IFTRUE 3422
3420: GO 3441
3422: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3423: LD_EXP 5
3427: PPUSH
3428: LD_STRING DH-Intro-16
3430: PPUSH
3431: CALL_OW 88
// missionEnd ;
3435: CALL 3567 0 0
// end ; 2 :
3439: GO 3485
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3484
3449: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3450: LD_EXP 5
3454: PPUSH
3455: LD_STRING DH-Intro-a-16
3457: PPUSH
3458: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3462: LD_EXP 20
3466: PPUSH
3467: LD_STRING DB-Intro-a-17
3469: PPUSH
3470: CALL_OW 94
// startAttackOnHeike := true ;
3474: LD_ADDR_EXP 4
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// end ; end ;
3482: GO 3485
3484: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3525
// ComAgressiveMove ( i , 98 , 143 ) ;
3508: LD_VAR 0 2
3512: PPUSH
3513: LD_INT 98
3515: PPUSH
3516: LD_INT 143
3518: PPUSH
3519: CALL_OW 114
3523: GO 3505
3525: POP
3526: POP
// CenterOnXY ( 98 , 143 ) ;
3527: LD_INT 98
3529: PPUSH
3530: LD_INT 143
3532: PPUSH
3533: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3537: LD_INT 35
3539: PPUSH
3540: CALL_OW 67
// until IsDead ( Heike ) ;
3544: LD_EXP 5
3548: PPUSH
3549: CALL_OW 301
3553: IFFALSE 3537
// YouLost ( HeikeNoSurrender ) ;
3555: LD_STRING HeikeNoSurrender
3557: PPUSH
3558: CALL_OW 104
// end ;
3562: LD_VAR 0 1
3566: RET
// function MissionEnd ( ) ; begin
3567: LD_INT 0
3569: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3570: LD_INT 1
3572: PPUSH
3573: LD_STRING %_cont
3575: PPUSH
3576: CALL_OW 340
// end ; end_of_file
3580: LD_VAR 0 1
3584: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3585: LD_INT 0
3587: PPUSH
3588: PPUSH
// if exist_mode then
3589: LD_VAR 0 2
3593: IFFALSE 3618
// unit := CreateCharacter ( prefix & ident ) else
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_VAR 0 3
3604: PUSH
3605: LD_VAR 0 1
3609: STR
3610: PPUSH
3611: CALL_OW 34
3615: ST_TO_ADDR
3616: GO 3633
// unit := NewCharacter ( ident ) ;
3618: LD_ADDR_VAR 0 5
3622: PUSH
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 25
3632: ST_TO_ADDR
// result := unit ;
3633: LD_ADDR_VAR 0 4
3637: PUSH
3638: LD_VAR 0 5
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 4
3647: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3648: LD_INT 0
3650: PPUSH
3651: PPUSH
// if not side or not nation then
3652: LD_VAR 0 1
3656: NOT
3657: PUSH
3658: LD_VAR 0 2
3662: NOT
3663: OR
3664: IFFALSE 3668
// exit ;
3666: GO 4436
// case nation of nation_american :
3668: LD_VAR 0 2
3672: PUSH
3673: LD_INT 1
3675: DOUBLE
3676: EQUAL
3677: IFTRUE 3681
3679: GO 3895
3681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: LD_INT 35
3689: PUSH
3690: LD_INT 45
3692: PUSH
3693: LD_INT 46
3695: PUSH
3696: LD_INT 47
3698: PUSH
3699: LD_INT 82
3701: PUSH
3702: LD_INT 83
3704: PUSH
3705: LD_INT 84
3707: PUSH
3708: LD_INT 85
3710: PUSH
3711: LD_INT 86
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 6
3722: PUSH
3723: LD_INT 15
3725: PUSH
3726: LD_INT 16
3728: PUSH
3729: LD_INT 7
3731: PUSH
3732: LD_INT 12
3734: PUSH
3735: LD_INT 13
3737: PUSH
3738: LD_INT 10
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: LD_INT 21
3749: PUSH
3750: LD_INT 22
3752: PUSH
3753: LD_INT 25
3755: PUSH
3756: LD_INT 32
3758: PUSH
3759: LD_INT 27
3761: PUSH
3762: LD_INT 36
3764: PUSH
3765: LD_INT 69
3767: PUSH
3768: LD_INT 39
3770: PUSH
3771: LD_INT 34
3773: PUSH
3774: LD_INT 40
3776: PUSH
3777: LD_INT 48
3779: PUSH
3780: LD_INT 49
3782: PUSH
3783: LD_INT 50
3785: PUSH
3786: LD_INT 51
3788: PUSH
3789: LD_INT 52
3791: PUSH
3792: LD_INT 53
3794: PUSH
3795: LD_INT 54
3797: PUSH
3798: LD_INT 55
3800: PUSH
3801: LD_INT 56
3803: PUSH
3804: LD_INT 57
3806: PUSH
3807: LD_INT 58
3809: PUSH
3810: LD_INT 59
3812: PUSH
3813: LD_INT 60
3815: PUSH
3816: LD_INT 61
3818: PUSH
3819: LD_INT 62
3821: PUSH
3822: LD_INT 80
3824: PUSH
3825: LD_INT 82
3827: PUSH
3828: LD_INT 83
3830: PUSH
3831: LD_INT 84
3833: PUSH
3834: LD_INT 85
3836: PUSH
3837: LD_INT 86
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 4360
3895: LD_INT 2
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4129
3903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_INT 35
3911: PUSH
3912: LD_INT 45
3914: PUSH
3915: LD_INT 46
3917: PUSH
3918: LD_INT 47
3920: PUSH
3921: LD_INT 82
3923: PUSH
3924: LD_INT 83
3926: PUSH
3927: LD_INT 84
3929: PUSH
3930: LD_INT 85
3932: PUSH
3933: LD_INT 87
3935: PUSH
3936: LD_INT 70
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_INT 11
3944: PUSH
3945: LD_INT 3
3947: PUSH
3948: LD_INT 4
3950: PUSH
3951: LD_INT 5
3953: PUSH
3954: LD_INT 6
3956: PUSH
3957: LD_INT 15
3959: PUSH
3960: LD_INT 18
3962: PUSH
3963: LD_INT 7
3965: PUSH
3966: LD_INT 17
3968: PUSH
3969: LD_INT 8
3971: PUSH
3972: LD_INT 20
3974: PUSH
3975: LD_INT 21
3977: PUSH
3978: LD_INT 22
3980: PUSH
3981: LD_INT 72
3983: PUSH
3984: LD_INT 26
3986: PUSH
3987: LD_INT 69
3989: PUSH
3990: LD_INT 39
3992: PUSH
3993: LD_INT 40
3995: PUSH
3996: LD_INT 41
3998: PUSH
3999: LD_INT 42
4001: PUSH
4002: LD_INT 43
4004: PUSH
4005: LD_INT 48
4007: PUSH
4008: LD_INT 49
4010: PUSH
4011: LD_INT 50
4013: PUSH
4014: LD_INT 51
4016: PUSH
4017: LD_INT 52
4019: PUSH
4020: LD_INT 53
4022: PUSH
4023: LD_INT 54
4025: PUSH
4026: LD_INT 55
4028: PUSH
4029: LD_INT 56
4031: PUSH
4032: LD_INT 60
4034: PUSH
4035: LD_INT 61
4037: PUSH
4038: LD_INT 62
4040: PUSH
4041: LD_INT 66
4043: PUSH
4044: LD_INT 67
4046: PUSH
4047: LD_INT 68
4049: PUSH
4050: LD_INT 81
4052: PUSH
4053: LD_INT 82
4055: PUSH
4056: LD_INT 83
4058: PUSH
4059: LD_INT 84
4061: PUSH
4062: LD_INT 85
4064: PUSH
4065: LD_INT 87
4067: PUSH
4068: LD_INT 88
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: ST_TO_ADDR
4127: GO 4360
4129: LD_INT 3
4131: DOUBLE
4132: EQUAL
4133: IFTRUE 4137
4135: GO 4359
4137: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4138: LD_ADDR_VAR 0 4
4142: PUSH
4143: LD_INT 46
4145: PUSH
4146: LD_INT 47
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 82
4157: PUSH
4158: LD_INT 83
4160: PUSH
4161: LD_INT 84
4163: PUSH
4164: LD_INT 85
4166: PUSH
4167: LD_INT 86
4169: PUSH
4170: LD_INT 11
4172: PUSH
4173: LD_INT 9
4175: PUSH
4176: LD_INT 20
4178: PUSH
4179: LD_INT 19
4181: PUSH
4182: LD_INT 21
4184: PUSH
4185: LD_INT 24
4187: PUSH
4188: LD_INT 22
4190: PUSH
4191: LD_INT 25
4193: PUSH
4194: LD_INT 28
4196: PUSH
4197: LD_INT 29
4199: PUSH
4200: LD_INT 30
4202: PUSH
4203: LD_INT 31
4205: PUSH
4206: LD_INT 37
4208: PUSH
4209: LD_INT 38
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 27
4217: PUSH
4218: LD_INT 33
4220: PUSH
4221: LD_INT 69
4223: PUSH
4224: LD_INT 39
4226: PUSH
4227: LD_INT 34
4229: PUSH
4230: LD_INT 40
4232: PUSH
4233: LD_INT 71
4235: PUSH
4236: LD_INT 23
4238: PUSH
4239: LD_INT 44
4241: PUSH
4242: LD_INT 48
4244: PUSH
4245: LD_INT 49
4247: PUSH
4248: LD_INT 50
4250: PUSH
4251: LD_INT 51
4253: PUSH
4254: LD_INT 52
4256: PUSH
4257: LD_INT 53
4259: PUSH
4260: LD_INT 54
4262: PUSH
4263: LD_INT 55
4265: PUSH
4266: LD_INT 56
4268: PUSH
4269: LD_INT 57
4271: PUSH
4272: LD_INT 58
4274: PUSH
4275: LD_INT 59
4277: PUSH
4278: LD_INT 63
4280: PUSH
4281: LD_INT 64
4283: PUSH
4284: LD_INT 65
4286: PUSH
4287: LD_INT 82
4289: PUSH
4290: LD_INT 83
4292: PUSH
4293: LD_INT 84
4295: PUSH
4296: LD_INT 85
4298: PUSH
4299: LD_INT 86
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: ST_TO_ADDR
4357: GO 4360
4359: POP
// if state > - 1 and state < 3 then
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 1
4367: NEG
4368: GREATER
4369: PUSH
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 3
4377: LESS
4378: AND
4379: IFFALSE 4436
// for i in result do
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_VAR 0 4
4390: PUSH
4391: FOR_IN
4392: IFFALSE 4434
// if GetTech ( i , side ) <> state then
4394: LD_VAR 0 5
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 321
4408: PUSH
4409: LD_VAR 0 3
4413: NONEQUAL
4414: IFFALSE 4432
// result := result diff i ;
4416: LD_ADDR_VAR 0 4
4420: PUSH
4421: LD_VAR 0 4
4425: PUSH
4426: LD_VAR 0 5
4430: DIFF
4431: ST_TO_ADDR
4432: GO 4391
4434: POP
4435: POP
// end ;
4436: LD_VAR 0 4
4440: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4441: LD_INT 0
4443: PPUSH
4444: PPUSH
4445: PPUSH
// result := true ;
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4454: LD_ADDR_VAR 0 5
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 480
4468: ST_TO_ADDR
// if not tmp then
4469: LD_VAR 0 5
4473: NOT
4474: IFFALSE 4478
// exit ;
4476: GO 4527
// for i in tmp do
4478: LD_ADDR_VAR 0 4
4482: PUSH
4483: LD_VAR 0 5
4487: PUSH
4488: FOR_IN
4489: IFFALSE 4525
// if GetTech ( i , side ) <> state_researched then
4491: LD_VAR 0 4
4495: PPUSH
4496: LD_VAR 0 1
4500: PPUSH
4501: CALL_OW 321
4505: PUSH
4506: LD_INT 2
4508: NONEQUAL
4509: IFFALSE 4523
// begin result := false ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 0
4518: ST_TO_ADDR
// exit ;
4519: POP
4520: POP
4521: GO 4527
// end ;
4523: GO 4488
4525: POP
4526: POP
// end ;
4527: LD_VAR 0 3
4531: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4547: LD_VAR 0 1
4551: NOT
4552: PUSH
4553: LD_VAR 0 1
4557: PPUSH
4558: CALL_OW 257
4562: PUSH
4563: LD_INT 9
4565: NONEQUAL
4566: OR
4567: IFFALSE 4571
// exit ;
4569: GO 5144
// side := GetSide ( unit ) ;
4571: LD_ADDR_VAR 0 9
4575: PUSH
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 255
4585: ST_TO_ADDR
// tech_space := tech_spacanom ;
4586: LD_ADDR_VAR 0 12
4590: PUSH
4591: LD_INT 29
4593: ST_TO_ADDR
// tech_time := tech_taurad ;
4594: LD_ADDR_VAR 0 13
4598: PUSH
4599: LD_INT 28
4601: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4602: LD_ADDR_VAR 0 11
4606: PUSH
4607: LD_VAR 0 1
4611: PPUSH
4612: CALL_OW 310
4616: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4617: LD_VAR 0 11
4621: PPUSH
4622: CALL_OW 247
4626: PUSH
4627: LD_INT 2
4629: EQUAL
4630: IFFALSE 4634
// exit ;
4632: GO 5144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4634: LD_ADDR_VAR 0 8
4638: PUSH
4639: LD_INT 81
4641: PUSH
4642: LD_VAR 0 9
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 21
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 69
4676: ST_TO_ADDR
// if not tmp then
4677: LD_VAR 0 8
4681: NOT
4682: IFFALSE 4686
// exit ;
4684: GO 5144
// if in_unit then
4686: LD_VAR 0 11
4690: IFFALSE 4714
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4692: LD_ADDR_VAR 0 10
4696: PUSH
4697: LD_VAR 0 8
4701: PPUSH
4702: LD_VAR 0 11
4706: PPUSH
4707: CALL_OW 74
4711: ST_TO_ADDR
4712: GO 4734
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4714: LD_ADDR_VAR 0 10
4718: PUSH
4719: LD_VAR 0 8
4723: PPUSH
4724: LD_VAR 0 1
4728: PPUSH
4729: CALL_OW 74
4733: ST_TO_ADDR
// if not enemy then
4734: LD_VAR 0 10
4738: NOT
4739: IFFALSE 4743
// exit ;
4741: GO 5144
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4743: LD_VAR 0 11
4747: PUSH
4748: LD_VAR 0 11
4752: PPUSH
4753: LD_VAR 0 10
4757: PPUSH
4758: CALL_OW 296
4762: PUSH
4763: LD_INT 13
4765: GREATER
4766: AND
4767: PUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: LD_VAR 0 10
4777: PPUSH
4778: CALL_OW 296
4782: PUSH
4783: LD_INT 12
4785: GREATER
4786: OR
4787: IFFALSE 4791
// exit ;
4789: GO 5144
// missile := [ 1 ] ;
4791: LD_ADDR_VAR 0 14
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: EMPTY
4800: LIST
4801: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4802: LD_VAR 0 9
4806: PPUSH
4807: LD_VAR 0 12
4811: PPUSH
4812: CALL_OW 325
4816: IFFALSE 4845
// missile := Replace ( missile , missile + 1 , 2 ) ;
4818: LD_ADDR_VAR 0 14
4822: PUSH
4823: LD_VAR 0 14
4827: PPUSH
4828: LD_VAR 0 14
4832: PUSH
4833: LD_INT 1
4835: PLUS
4836: PPUSH
4837: LD_INT 2
4839: PPUSH
4840: CALL_OW 1
4844: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4845: LD_VAR 0 9
4849: PPUSH
4850: LD_VAR 0 13
4854: PPUSH
4855: CALL_OW 325
4859: PUSH
4860: LD_VAR 0 10
4864: PPUSH
4865: CALL_OW 255
4869: PPUSH
4870: LD_VAR 0 13
4874: PPUSH
4875: CALL_OW 325
4879: NOT
4880: AND
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 3 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if missile < 2 then
4910: LD_VAR 0 14
4914: PUSH
4915: LD_INT 2
4917: LESS
4918: IFFALSE 4922
// exit ;
4920: GO 5144
// x := GetX ( enemy ) ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_VAR 0 10
4931: PPUSH
4932: CALL_OW 250
4936: ST_TO_ADDR
// y := GetY ( enemy ) ;
4937: LD_ADDR_VAR 0 5
4941: PUSH
4942: LD_VAR 0 10
4946: PPUSH
4947: CALL_OW 251
4951: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4952: LD_ADDR_VAR 0 6
4956: PUSH
4957: LD_VAR 0 4
4961: PUSH
4962: LD_INT 1
4964: NEG
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 12
4973: PLUS
4974: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4975: LD_ADDR_VAR 0 7
4979: PUSH
4980: LD_VAR 0 5
4984: PUSH
4985: LD_INT 1
4987: NEG
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 12
4996: PLUS
4997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4998: LD_VAR 0 6
5002: PPUSH
5003: LD_VAR 0 7
5007: PPUSH
5008: CALL_OW 488
5012: NOT
5013: IFFALSE 5035
// begin _x := x ;
5015: LD_ADDR_VAR 0 6
5019: PUSH
5020: LD_VAR 0 4
5024: ST_TO_ADDR
// _y := y ;
5025: LD_ADDR_VAR 0 7
5029: PUSH
5030: LD_VAR 0 5
5034: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_INT 1
5042: PPUSH
5043: LD_VAR 0 14
5047: PPUSH
5048: CALL_OW 12
5052: ST_TO_ADDR
// case i of 1 :
5053: LD_VAR 0 3
5057: PUSH
5058: LD_INT 1
5060: DOUBLE
5061: EQUAL
5062: IFTRUE 5066
5064: GO 5083
5066: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 10
5076: PPUSH
5077: CALL_OW 115
5081: GO 5144
5083: LD_INT 2
5085: DOUBLE
5086: EQUAL
5087: IFTRUE 5091
5089: GO 5113
5091: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5092: LD_VAR 0 1
5096: PPUSH
5097: LD_VAR 0 6
5101: PPUSH
5102: LD_VAR 0 7
5106: PPUSH
5107: CALL_OW 153
5111: GO 5144
5113: LD_INT 3
5115: DOUBLE
5116: EQUAL
5117: IFTRUE 5121
5119: GO 5143
5121: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_VAR 0 7
5136: PPUSH
5137: CALL_OW 154
5141: GO 5144
5143: POP
// end ;
5144: LD_VAR 0 2
5148: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5149: LD_INT 0
5151: PPUSH
5152: PPUSH
5153: PPUSH
5154: PPUSH
5155: PPUSH
5156: PPUSH
// if not unit or not building then
5157: LD_VAR 0 1
5161: NOT
5162: PUSH
5163: LD_VAR 0 2
5167: NOT
5168: OR
5169: IFFALSE 5173
// exit ;
5171: GO 5331
// x := GetX ( building ) ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: CALL_OW 250
5187: ST_TO_ADDR
// y := GetY ( building ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 2
5197: PPUSH
5198: CALL_OW 251
5202: ST_TO_ADDR
// for i = 0 to 5 do
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: DOUBLE
5209: LD_INT 0
5211: DEC
5212: ST_TO_ADDR
5213: LD_INT 5
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5329
// begin _x := ShiftX ( x , i , 3 ) ;
5219: LD_ADDR_VAR 0 7
5223: PUSH
5224: LD_VAR 0 5
5228: PPUSH
5229: LD_VAR 0 4
5233: PPUSH
5234: LD_INT 3
5236: PPUSH
5237: CALL_OW 272
5241: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5242: LD_ADDR_VAR 0 8
5246: PUSH
5247: LD_VAR 0 6
5251: PPUSH
5252: LD_VAR 0 4
5256: PPUSH
5257: LD_INT 3
5259: PPUSH
5260: CALL_OW 273
5264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5265: LD_VAR 0 7
5269: PPUSH
5270: LD_VAR 0 8
5274: PPUSH
5275: CALL_OW 488
5279: NOT
5280: IFFALSE 5284
// continue ;
5282: GO 5216
// if HexInfo ( _x , _y ) = 0 then
5284: LD_VAR 0 7
5288: PPUSH
5289: LD_VAR 0 8
5293: PPUSH
5294: CALL_OW 428
5298: PUSH
5299: LD_INT 0
5301: EQUAL
5302: IFFALSE 5327
// begin ComMoveXY ( unit , _x , _y ) ;
5304: LD_VAR 0 1
5308: PPUSH
5309: LD_VAR 0 7
5313: PPUSH
5314: LD_VAR 0 8
5318: PPUSH
5319: CALL_OW 111
// exit ;
5323: POP
5324: POP
5325: GO 5331
// end ; end ;
5327: GO 5216
5329: POP
5330: POP
// end ;
5331: LD_VAR 0 3
5335: RET
// export function ScanBase ( side , base_area ) ; begin
5336: LD_INT 0
5338: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_INT 81
5351: PUSH
5352: LD_VAR 0 1
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PPUSH
5361: CALL_OW 70
5365: ST_TO_ADDR
// end ;
5366: LD_VAR 0 3
5370: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5371: LD_INT 0
5373: PPUSH
5374: PPUSH
5375: PPUSH
5376: PPUSH
// result := false ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// side := GetSide ( unit ) ;
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 255
5399: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5400: LD_ADDR_VAR 0 4
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL_OW 248
5414: ST_TO_ADDR
// case nat of 1 :
5415: LD_VAR 0 4
5419: PUSH
5420: LD_INT 1
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5439
5428: POP
// tech := tech_lassight ; 2 :
5429: LD_ADDR_VAR 0 5
5433: PUSH
5434: LD_INT 12
5436: ST_TO_ADDR
5437: GO 5478
5439: LD_INT 2
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5458
5447: POP
// tech := tech_mortar ; 3 :
5448: LD_ADDR_VAR 0 5
5452: PUSH
5453: LD_INT 41
5455: ST_TO_ADDR
5456: GO 5478
5458: LD_INT 3
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5477
5466: POP
// tech := tech_bazooka ; end ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_INT 44
5474: ST_TO_ADDR
5475: GO 5478
5477: POP
// if Researched ( side , tech ) then
5478: LD_VAR 0 3
5482: PPUSH
5483: LD_VAR 0 5
5487: PPUSH
5488: CALL_OW 325
5492: IFFALSE 5519
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_INT 5
5501: PUSH
5502: LD_INT 8
5504: PUSH
5505: LD_INT 9
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_VAR 0 4
5517: ARRAY
5518: ST_TO_ADDR
// end ;
5519: LD_VAR 0 2
5523: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
// if not mines then
5529: LD_VAR 0 2
5533: NOT
5534: IFFALSE 5538
// exit ;
5536: GO 5682
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5538: LD_ADDR_VAR 0 5
5542: PUSH
5543: LD_INT 81
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: LD_INT 21
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PPUSH
5576: CALL_OW 69
5580: ST_TO_ADDR
// for i in mines do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: LD_VAR 0 2
5590: PUSH
5591: FOR_IN
5592: IFFALSE 5680
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5594: LD_VAR 0 4
5598: PUSH
5599: LD_INT 1
5601: ARRAY
5602: PPUSH
5603: LD_VAR 0 4
5607: PUSH
5608: LD_INT 2
5610: ARRAY
5611: PPUSH
5612: CALL_OW 458
5616: NOT
5617: IFFALSE 5621
// continue ;
5619: GO 5591
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5621: LD_VAR 0 4
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 4
5634: PUSH
5635: LD_INT 2
5637: ARRAY
5638: PPUSH
5639: CALL_OW 428
5643: PUSH
5644: LD_VAR 0 5
5648: IN
5649: IFFALSE 5678
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5651: LD_VAR 0 4
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: LD_VAR 0 4
5664: PUSH
5665: LD_INT 2
5667: ARRAY
5668: PPUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 456
// end ;
5678: GO 5591
5680: POP
5681: POP
// end ;
5682: LD_VAR 0 3
5686: RET
// export function Count ( array ) ; var i ; begin
5687: LD_INT 0
5689: PPUSH
5690: PPUSH
// result := 0 ;
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// for i in array do
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5734
// if i then
5712: LD_VAR 0 3
5716: IFFALSE 5732
// result := result + 1 ;
5718: LD_ADDR_VAR 0 2
5722: PUSH
5723: LD_VAR 0 2
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: ST_TO_ADDR
5732: GO 5709
5734: POP
5735: POP
// end ;
5736: LD_VAR 0 2
5740: RET
// export function IsEmpty ( building ) ; begin
5741: LD_INT 0
5743: PPUSH
// if not building then
5744: LD_VAR 0 1
5748: NOT
5749: IFFALSE 5753
// exit ;
5751: GO 5796
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 255
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 58
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PPUSH
5790: CALL_OW 69
5794: IN
5795: ST_TO_ADDR
// end ;
5796: LD_VAR 0 2
5800: RET
// export function IsNotFull ( building ) ; var places ; begin
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
// if not building then
5805: LD_VAR 0 1
5809: NOT
5810: IFFALSE 5814
// exit ;
5812: GO 5985
// result := false ;
5814: LD_ADDR_VAR 0 2
5818: PUSH
5819: LD_INT 0
5821: ST_TO_ADDR
// places := 0 ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 0
5829: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5830: LD_VAR 0 1
5834: PPUSH
5835: CALL_OW 266
5839: PUSH
5840: LD_INT 0
5842: DOUBLE
5843: EQUAL
5844: IFTRUE 5902
5846: LD_INT 1
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5902
5852: LD_INT 6
5854: DOUBLE
5855: EQUAL
5856: IFTRUE 5902
5858: LD_INT 7
5860: DOUBLE
5861: EQUAL
5862: IFTRUE 5902
5864: LD_INT 8
5866: DOUBLE
5867: EQUAL
5868: IFTRUE 5902
5870: LD_INT 4
5872: DOUBLE
5873: EQUAL
5874: IFTRUE 5902
5876: LD_INT 5
5878: DOUBLE
5879: EQUAL
5880: IFTRUE 5902
5882: LD_INT 2
5884: DOUBLE
5885: EQUAL
5886: IFTRUE 5902
5888: LD_INT 3
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5902
5894: LD_INT 35
5896: DOUBLE
5897: EQUAL
5898: IFTRUE 5902
5900: GO 5913
5902: POP
// places := 6 ; b_bunker , b_breastwork :
5903: LD_ADDR_VAR 0 3
5907: PUSH
5908: LD_INT 6
5910: ST_TO_ADDR
5911: GO 5958
5913: LD_INT 32
5915: DOUBLE
5916: EQUAL
5917: IFTRUE 5927
5919: LD_INT 31
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5938
5927: POP
// places := 1 ; b_control_tower :
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
5936: GO 5958
5938: LD_INT 36
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5957
5946: POP
// places := 3 ; end ;
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: LD_INT 3
5954: ST_TO_ADDR
5955: GO 5958
5957: POP
// if places then
5958: LD_VAR 0 3
5962: IFFALSE 5985
// result := UnitsInside ( building ) < places ;
5964: LD_ADDR_VAR 0 2
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 313
5978: PUSH
5979: LD_VAR 0 3
5983: LESS
5984: ST_TO_ADDR
// end ;
5985: LD_VAR 0 2
5989: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5990: LD_INT 0
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
// tmp := [ ] ;
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: EMPTY
6002: ST_TO_ADDR
// list := [ ] ;
6003: LD_ADDR_VAR 0 5
6007: PUSH
6008: EMPTY
6009: ST_TO_ADDR
// for i = 16 to 25 do
6010: LD_ADDR_VAR 0 4
6014: PUSH
6015: DOUBLE
6016: LD_INT 16
6018: DEC
6019: ST_TO_ADDR
6020: LD_INT 25
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6097
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: LD_VAR 0 3
6035: PUSH
6036: LD_INT 22
6038: PUSH
6039: LD_VAR 0 1
6043: PPUSH
6044: CALL_OW 255
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 91
6055: PUSH
6056: LD_VAR 0 1
6060: PUSH
6061: LD_INT 6
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 30
6071: PUSH
6072: LD_VAR 0 4
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: PPUSH
6089: CALL_OW 69
6093: ADD
6094: ST_TO_ADDR
6095: GO 6023
6097: POP
6098: POP
// for i = 1 to tmp do
6099: LD_ADDR_VAR 0 4
6103: PUSH
6104: DOUBLE
6105: LD_INT 1
6107: DEC
6108: ST_TO_ADDR
6109: LD_VAR 0 3
6113: PUSH
6114: FOR_TO
6115: IFFALSE 6203
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_VAR 0 5
6126: PUSH
6127: LD_VAR 0 3
6131: PUSH
6132: LD_VAR 0 4
6136: ARRAY
6137: PPUSH
6138: CALL_OW 266
6142: PUSH
6143: LD_VAR 0 3
6147: PUSH
6148: LD_VAR 0 4
6152: ARRAY
6153: PPUSH
6154: CALL_OW 250
6158: PUSH
6159: LD_VAR 0 3
6163: PUSH
6164: LD_VAR 0 4
6168: ARRAY
6169: PPUSH
6170: CALL_OW 251
6174: PUSH
6175: LD_VAR 0 3
6179: PUSH
6180: LD_VAR 0 4
6184: ARRAY
6185: PPUSH
6186: CALL_OW 254
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: ADD
6200: ST_TO_ADDR
6201: GO 6114
6203: POP
6204: POP
// result := list ;
6205: LD_ADDR_VAR 0 2
6209: PUSH
6210: LD_VAR 0 5
6214: ST_TO_ADDR
// end ;
6215: LD_VAR 0 2
6219: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6220: LD_INT 0
6222: PPUSH
6223: PPUSH
6224: PPUSH
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
// if not factory then
6229: LD_VAR 0 1
6233: NOT
6234: IFFALSE 6238
// exit ;
6236: GO 6831
// if control = control_apeman then
6238: LD_VAR 0 4
6242: PUSH
6243: LD_INT 5
6245: EQUAL
6246: IFFALSE 6355
// begin tmp := UnitsInside ( factory ) ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 313
6262: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6263: LD_VAR 0 8
6267: PPUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 12
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 72
6282: NOT
6283: IFFALSE 6293
// control := control_manual ;
6285: LD_ADDR_VAR 0 4
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6293: LD_ADDR_VAR 0 8
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL 5990 0 1
6307: ST_TO_ADDR
// if tmp then
6308: LD_VAR 0 8
6312: IFFALSE 6355
// begin for i in tmp do
6314: LD_ADDR_VAR 0 7
6318: PUSH
6319: LD_VAR 0 8
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6353
// if i [ 1 ] = b_ext_radio then
6327: LD_VAR 0 7
6331: PUSH
6332: LD_INT 1
6334: ARRAY
6335: PUSH
6336: LD_INT 22
6338: EQUAL
6339: IFFALSE 6351
// begin control := control_remote ;
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: LD_INT 2
6348: ST_TO_ADDR
// break ;
6349: GO 6353
// end ;
6351: GO 6324
6353: POP
6354: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_VAR 0 2
6364: PPUSH
6365: LD_VAR 0 3
6369: PPUSH
6370: LD_VAR 0 4
6374: PPUSH
6375: LD_VAR 0 5
6379: PPUSH
6380: CALL_OW 448
6384: IFFALSE 6419
// begin result := [ chassis , engine , control , weapon ] ;
6386: LD_ADDR_VAR 0 6
6390: PUSH
6391: LD_VAR 0 2
6395: PUSH
6396: LD_VAR 0 3
6400: PUSH
6401: LD_VAR 0 4
6405: PUSH
6406: LD_VAR 0 5
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: ST_TO_ADDR
// exit ;
6417: GO 6831
// end ; _chassis := AvailableChassisList ( factory ) ;
6419: LD_ADDR_VAR 0 9
6423: PUSH
6424: LD_VAR 0 1
6428: PPUSH
6429: CALL_OW 475
6433: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6434: LD_ADDR_VAR 0 11
6438: PUSH
6439: LD_VAR 0 1
6443: PPUSH
6444: CALL_OW 476
6448: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6449: LD_ADDR_VAR 0 12
6453: PUSH
6454: LD_VAR 0 1
6458: PPUSH
6459: CALL_OW 477
6463: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6464: LD_ADDR_VAR 0 10
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 478
6478: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6479: LD_VAR 0 9
6483: NOT
6484: PUSH
6485: LD_VAR 0 11
6489: NOT
6490: OR
6491: PUSH
6492: LD_VAR 0 12
6496: NOT
6497: OR
6498: PUSH
6499: LD_VAR 0 10
6503: NOT
6504: OR
6505: IFFALSE 6540
// begin result := [ chassis , engine , control , weapon ] ;
6507: LD_ADDR_VAR 0 6
6511: PUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_VAR 0 3
6521: PUSH
6522: LD_VAR 0 4
6526: PUSH
6527: LD_VAR 0 5
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: ST_TO_ADDR
// exit ;
6538: GO 6831
// end ; if not chassis in _chassis then
6540: LD_VAR 0 2
6544: PUSH
6545: LD_VAR 0 9
6549: IN
6550: NOT
6551: IFFALSE 6577
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6553: LD_ADDR_VAR 0 2
6557: PUSH
6558: LD_VAR 0 9
6562: PUSH
6563: LD_INT 1
6565: PPUSH
6566: LD_VAR 0 9
6570: PPUSH
6571: CALL_OW 12
6575: ARRAY
6576: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6577: LD_VAR 0 2
6581: PPUSH
6582: LD_VAR 0 3
6586: PPUSH
6587: CALL 6836 0 2
6591: NOT
6592: IFFALSE 6651
// repeat engine := _engine [ 1 ] ;
6594: LD_ADDR_VAR 0 3
6598: PUSH
6599: LD_VAR 0 11
6603: PUSH
6604: LD_INT 1
6606: ARRAY
6607: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6608: LD_ADDR_VAR 0 11
6612: PUSH
6613: LD_VAR 0 11
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: CALL_OW 3
6625: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6626: LD_VAR 0 2
6630: PPUSH
6631: LD_VAR 0 3
6635: PPUSH
6636: CALL 6836 0 2
6640: PUSH
6641: LD_VAR 0 11
6645: PUSH
6646: EMPTY
6647: EQUAL
6648: OR
6649: IFFALSE 6594
// if not control in _control then
6651: LD_VAR 0 4
6655: PUSH
6656: LD_VAR 0 12
6660: IN
6661: NOT
6662: IFFALSE 6688
// control := _control [ rand ( 1 , _control ) ] ;
6664: LD_ADDR_VAR 0 4
6668: PUSH
6669: LD_VAR 0 12
6673: PUSH
6674: LD_INT 1
6676: PPUSH
6677: LD_VAR 0 12
6681: PPUSH
6682: CALL_OW 12
6686: ARRAY
6687: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6688: LD_VAR 0 2
6692: PPUSH
6693: LD_VAR 0 5
6697: PPUSH
6698: CALL 7056 0 2
6702: NOT
6703: IFFALSE 6762
// repeat weapon := _weapon [ 1 ] ;
6705: LD_ADDR_VAR 0 5
6709: PUSH
6710: LD_VAR 0 10
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6719: LD_ADDR_VAR 0 10
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: LD_INT 1
6731: PPUSH
6732: CALL_OW 3
6736: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 5
6746: PPUSH
6747: CALL 7056 0 2
6751: PUSH
6752: LD_VAR 0 10
6756: PUSH
6757: EMPTY
6758: EQUAL
6759: OR
6760: IFFALSE 6705
// result := [ ] ;
6762: LD_ADDR_VAR 0 6
6766: PUSH
6767: EMPTY
6768: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6769: LD_VAR 0 1
6773: PPUSH
6774: LD_VAR 0 2
6778: PPUSH
6779: LD_VAR 0 3
6783: PPUSH
6784: LD_VAR 0 4
6788: PPUSH
6789: LD_VAR 0 5
6793: PPUSH
6794: CALL_OW 448
6798: IFFALSE 6831
// result := [ chassis , engine , control , weapon ] ;
6800: LD_ADDR_VAR 0 6
6804: PUSH
6805: LD_VAR 0 2
6809: PUSH
6810: LD_VAR 0 3
6814: PUSH
6815: LD_VAR 0 4
6819: PUSH
6820: LD_VAR 0 5
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: ST_TO_ADDR
// end ;
6831: LD_VAR 0 6
6835: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6836: LD_INT 0
6838: PPUSH
// if not chassis or not engine then
6839: LD_VAR 0 1
6843: NOT
6844: PUSH
6845: LD_VAR 0 2
6849: NOT
6850: OR
6851: IFFALSE 6855
// exit ;
6853: GO 7051
// case engine of engine_solar :
6855: LD_VAR 0 2
6859: PUSH
6860: LD_INT 2
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6906
6868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6869: LD_ADDR_VAR 0 3
6873: PUSH
6874: LD_INT 11
6876: PUSH
6877: LD_INT 12
6879: PUSH
6880: LD_INT 13
6882: PUSH
6883: LD_INT 14
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: ST_TO_ADDR
6904: GO 7035
6906: LD_INT 1
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 6976
6914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_INT 11
6922: PUSH
6923: LD_INT 12
6925: PUSH
6926: LD_INT 13
6928: PUSH
6929: LD_INT 14
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 4
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 23
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_INT 24
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: ST_TO_ADDR
6974: GO 7035
6976: LD_INT 3
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 7034
6984: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6985: LD_ADDR_VAR 0 3
6989: PUSH
6990: LD_INT 13
6992: PUSH
6993: LD_INT 14
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 4
7004: PUSH
7005: LD_INT 5
7007: PUSH
7008: LD_INT 21
7010: PUSH
7011: LD_INT 22
7013: PUSH
7014: LD_INT 23
7016: PUSH
7017: LD_INT 24
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: ST_TO_ADDR
7032: GO 7035
7034: POP
// result := ( chassis in result ) ;
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_VAR 0 1
7044: PUSH
7045: LD_VAR 0 3
7049: IN
7050: ST_TO_ADDR
// end ;
7051: LD_VAR 0 3
7055: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7056: LD_INT 0
7058: PPUSH
// if not chassis or not weapon then
7059: LD_VAR 0 1
7063: NOT
7064: PUSH
7065: LD_VAR 0 2
7069: NOT
7070: OR
7071: IFFALSE 7075
// exit ;
7073: GO 8135
// case weapon of us_machine_gun :
7075: LD_VAR 0 2
7079: PUSH
7080: LD_INT 2
7082: DOUBLE
7083: EQUAL
7084: IFTRUE 7088
7086: GO 7118
7088: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: LD_INT 4
7105: PUSH
7106: LD_INT 5
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 8119
7118: LD_INT 3
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7156
7126: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: LD_INT 2
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: LD_INT 4
7143: PUSH
7144: LD_INT 5
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: ST_TO_ADDR
7154: GO 8119
7156: LD_INT 11
7158: DOUBLE
7159: EQUAL
7160: IFTRUE 7164
7162: GO 7194
7164: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7165: LD_ADDR_VAR 0 3
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 4
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: ST_TO_ADDR
7192: GO 8119
7194: LD_INT 4
7196: DOUBLE
7197: EQUAL
7198: IFTRUE 7202
7200: GO 7228
7202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: ST_TO_ADDR
7226: GO 8119
7228: LD_INT 5
7230: DOUBLE
7231: EQUAL
7232: IFTRUE 7236
7234: GO 7262
7236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7237: LD_ADDR_VAR 0 3
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: LD_INT 4
7250: PUSH
7251: LD_INT 5
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: ST_TO_ADDR
7260: GO 8119
7262: LD_INT 9
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7296
7270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7271: LD_ADDR_VAR 0 3
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 3
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: LD_INT 5
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: ST_TO_ADDR
7294: GO 8119
7296: LD_INT 7
7298: DOUBLE
7299: EQUAL
7300: IFTRUE 7304
7302: GO 7330
7304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_INT 2
7312: PUSH
7313: LD_INT 3
7315: PUSH
7316: LD_INT 4
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: ST_TO_ADDR
7328: GO 8119
7330: LD_INT 12
7332: DOUBLE
7333: EQUAL
7334: IFTRUE 7338
7336: GO 7364
7338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7339: LD_ADDR_VAR 0 3
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: ST_TO_ADDR
7362: GO 8119
7364: LD_INT 13
7366: DOUBLE
7367: EQUAL
7368: IFTRUE 7372
7370: GO 7398
7372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7373: LD_ADDR_VAR 0 3
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: LD_INT 3
7383: PUSH
7384: LD_INT 4
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: ST_TO_ADDR
7396: GO 8119
7398: LD_INT 14
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7424
7406: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_INT 4
7414: PUSH
7415: LD_INT 5
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: ST_TO_ADDR
7422: GO 8119
7424: LD_INT 6
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7450
7432: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_INT 4
7440: PUSH
7441: LD_INT 5
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: ST_TO_ADDR
7448: GO 8119
7450: LD_INT 10
7452: DOUBLE
7453: EQUAL
7454: IFTRUE 7458
7456: GO 7476
7458: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_INT 4
7466: PUSH
7467: LD_INT 5
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: ST_TO_ADDR
7474: GO 8119
7476: LD_INT 22
7478: DOUBLE
7479: EQUAL
7480: IFTRUE 7484
7482: GO 7510
7484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7485: LD_ADDR_VAR 0 3
7489: PUSH
7490: LD_INT 11
7492: PUSH
7493: LD_INT 12
7495: PUSH
7496: LD_INT 13
7498: PUSH
7499: LD_INT 14
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: ST_TO_ADDR
7508: GO 8119
7510: LD_INT 23
7512: DOUBLE
7513: EQUAL
7514: IFTRUE 7518
7516: GO 7544
7518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7519: LD_ADDR_VAR 0 3
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: LD_INT 13
7532: PUSH
7533: LD_INT 14
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
7542: GO 8119
7544: LD_INT 24
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7578
7552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7553: LD_ADDR_VAR 0 3
7557: PUSH
7558: LD_INT 11
7560: PUSH
7561: LD_INT 12
7563: PUSH
7564: LD_INT 13
7566: PUSH
7567: LD_INT 14
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: ST_TO_ADDR
7576: GO 8119
7578: LD_INT 30
7580: DOUBLE
7581: EQUAL
7582: IFTRUE 7586
7584: GO 7612
7586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_INT 11
7594: PUSH
7595: LD_INT 12
7597: PUSH
7598: LD_INT 13
7600: PUSH
7601: LD_INT 14
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
7610: GO 8119
7612: LD_INT 25
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7638
7620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7621: LD_ADDR_VAR 0 3
7625: PUSH
7626: LD_INT 13
7628: PUSH
7629: LD_INT 14
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 8119
7638: LD_INT 27
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7664
7646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_INT 13
7654: PUSH
7655: LD_INT 14
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: ST_TO_ADDR
7662: GO 8119
7664: LD_INT 92
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7698
7672: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_INT 11
7680: PUSH
7681: LD_INT 12
7683: PUSH
7684: LD_INT 13
7686: PUSH
7687: LD_INT 14
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: ST_TO_ADDR
7696: GO 8119
7698: LD_INT 28
7700: DOUBLE
7701: EQUAL
7702: IFTRUE 7706
7704: GO 7724
7706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: PUSH
7715: LD_INT 14
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: ST_TO_ADDR
7722: GO 8119
7724: LD_INT 29
7726: DOUBLE
7727: EQUAL
7728: IFTRUE 7732
7730: GO 7750
7732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7733: LD_ADDR_VAR 0 3
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: ST_TO_ADDR
7748: GO 8119
7750: LD_INT 31
7752: DOUBLE
7753: EQUAL
7754: IFTRUE 7758
7756: GO 7776
7758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_INT 13
7766: PUSH
7767: LD_INT 14
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: ST_TO_ADDR
7774: GO 8119
7776: LD_INT 26
7778: DOUBLE
7779: EQUAL
7780: IFTRUE 7784
7782: GO 7802
7784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7785: LD_ADDR_VAR 0 3
7789: PUSH
7790: LD_INT 13
7792: PUSH
7793: LD_INT 14
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: ST_TO_ADDR
7800: GO 8119
7802: LD_INT 42
7804: DOUBLE
7805: EQUAL
7806: IFTRUE 7810
7808: GO 7836
7810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7811: LD_ADDR_VAR 0 3
7815: PUSH
7816: LD_INT 21
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 23
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: ST_TO_ADDR
7834: GO 8119
7836: LD_INT 43
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7870
7844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_INT 21
7852: PUSH
7853: LD_INT 22
7855: PUSH
7856: LD_INT 23
7858: PUSH
7859: LD_INT 24
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: ST_TO_ADDR
7868: GO 8119
7870: LD_INT 44
7872: DOUBLE
7873: EQUAL
7874: IFTRUE 7878
7876: GO 7904
7878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7879: LD_ADDR_VAR 0 3
7883: PUSH
7884: LD_INT 21
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_INT 23
7892: PUSH
7893: LD_INT 24
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: ST_TO_ADDR
7902: GO 8119
7904: LD_INT 45
7906: DOUBLE
7907: EQUAL
7908: IFTRUE 7912
7910: GO 7938
7912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7913: LD_ADDR_VAR 0 3
7917: PUSH
7918: LD_INT 21
7920: PUSH
7921: LD_INT 22
7923: PUSH
7924: LD_INT 23
7926: PUSH
7927: LD_INT 24
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: ST_TO_ADDR
7936: GO 8119
7938: LD_INT 49
7940: DOUBLE
7941: EQUAL
7942: IFTRUE 7946
7944: GO 7972
7946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7947: LD_ADDR_VAR 0 3
7951: PUSH
7952: LD_INT 21
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_INT 23
7960: PUSH
7961: LD_INT 24
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: ST_TO_ADDR
7970: GO 8119
7972: LD_INT 51
7974: DOUBLE
7975: EQUAL
7976: IFTRUE 7980
7978: GO 8006
7980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7981: LD_ADDR_VAR 0 3
7985: PUSH
7986: LD_INT 21
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_INT 23
7994: PUSH
7995: LD_INT 24
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: ST_TO_ADDR
8004: GO 8119
8006: LD_INT 52
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8040
8014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8015: LD_ADDR_VAR 0 3
8019: PUSH
8020: LD_INT 21
8022: PUSH
8023: LD_INT 22
8025: PUSH
8026: LD_INT 23
8028: PUSH
8029: LD_INT 24
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: ST_TO_ADDR
8038: GO 8119
8040: LD_INT 53
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8066
8048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8049: LD_ADDR_VAR 0 3
8053: PUSH
8054: LD_INT 23
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: ST_TO_ADDR
8064: GO 8119
8066: LD_INT 46
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8092
8074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8075: LD_ADDR_VAR 0 3
8079: PUSH
8080: LD_INT 23
8082: PUSH
8083: LD_INT 24
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: ST_TO_ADDR
8090: GO 8119
8092: LD_INT 47
8094: DOUBLE
8095: EQUAL
8096: IFTRUE 8100
8098: GO 8118
8100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8101: LD_ADDR_VAR 0 3
8105: PUSH
8106: LD_INT 23
8108: PUSH
8109: LD_INT 24
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: ST_TO_ADDR
8116: GO 8119
8118: POP
// result := ( chassis in result ) ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_VAR 0 3
8133: IN
8134: ST_TO_ADDR
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
8144: PPUSH
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
// result := array ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8159: LD_VAR 0 1
8163: NOT
8164: PUSH
8165: LD_VAR 0 2
8169: NOT
8170: OR
8171: PUSH
8172: LD_VAR 0 3
8176: NOT
8177: OR
8178: PUSH
8179: LD_VAR 0 2
8183: PUSH
8184: LD_VAR 0 1
8188: GREATER
8189: OR
8190: PUSH
8191: LD_VAR 0 3
8195: PUSH
8196: LD_VAR 0 1
8200: GREATER
8201: OR
8202: IFFALSE 8206
// exit ;
8204: GO 8502
// if direction then
8206: LD_VAR 0 4
8210: IFFALSE 8274
// begin d := 1 ;
8212: LD_ADDR_VAR 0 9
8216: PUSH
8217: LD_INT 1
8219: ST_TO_ADDR
// if i_from > i_to then
8220: LD_VAR 0 2
8224: PUSH
8225: LD_VAR 0 3
8229: GREATER
8230: IFFALSE 8256
// length := ( array - i_from ) + i_to else
8232: LD_ADDR_VAR 0 11
8236: PUSH
8237: LD_VAR 0 1
8241: PUSH
8242: LD_VAR 0 2
8246: MINUS
8247: PUSH
8248: LD_VAR 0 3
8252: PLUS
8253: ST_TO_ADDR
8254: GO 8272
// length := i_to - i_from ;
8256: LD_ADDR_VAR 0 11
8260: PUSH
8261: LD_VAR 0 3
8265: PUSH
8266: LD_VAR 0 2
8270: MINUS
8271: ST_TO_ADDR
// end else
8272: GO 8335
// begin d := - 1 ;
8274: LD_ADDR_VAR 0 9
8278: PUSH
8279: LD_INT 1
8281: NEG
8282: ST_TO_ADDR
// if i_from > i_to then
8283: LD_VAR 0 2
8287: PUSH
8288: LD_VAR 0 3
8292: GREATER
8293: IFFALSE 8313
// length := i_from - i_to else
8295: LD_ADDR_VAR 0 11
8299: PUSH
8300: LD_VAR 0 2
8304: PUSH
8305: LD_VAR 0 3
8309: MINUS
8310: ST_TO_ADDR
8311: GO 8335
// length := ( array - i_to ) + i_from ;
8313: LD_ADDR_VAR 0 11
8317: PUSH
8318: LD_VAR 0 1
8322: PUSH
8323: LD_VAR 0 3
8327: MINUS
8328: PUSH
8329: LD_VAR 0 2
8333: PLUS
8334: ST_TO_ADDR
// end ; if not length then
8335: LD_VAR 0 11
8339: NOT
8340: IFFALSE 8344
// exit ;
8342: GO 8502
// tmp := array ;
8344: LD_ADDR_VAR 0 10
8348: PUSH
8349: LD_VAR 0 1
8353: ST_TO_ADDR
// for i = 1 to length do
8354: LD_ADDR_VAR 0 6
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_VAR 0 11
8368: PUSH
8369: FOR_TO
8370: IFFALSE 8490
// begin for j = 1 to array do
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: DOUBLE
8378: LD_INT 1
8380: DEC
8381: ST_TO_ADDR
8382: LD_VAR 0 1
8386: PUSH
8387: FOR_TO
8388: IFFALSE 8476
// begin k := j + d ;
8390: LD_ADDR_VAR 0 8
8394: PUSH
8395: LD_VAR 0 7
8399: PUSH
8400: LD_VAR 0 9
8404: PLUS
8405: ST_TO_ADDR
// if k > array then
8406: LD_VAR 0 8
8410: PUSH
8411: LD_VAR 0 1
8415: GREATER
8416: IFFALSE 8426
// k := 1 ;
8418: LD_ADDR_VAR 0 8
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if not k then
8426: LD_VAR 0 8
8430: NOT
8431: IFFALSE 8443
// k := array ;
8433: LD_ADDR_VAR 0 8
8437: PUSH
8438: LD_VAR 0 1
8442: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8443: LD_ADDR_VAR 0 10
8447: PUSH
8448: LD_VAR 0 10
8452: PPUSH
8453: LD_VAR 0 8
8457: PPUSH
8458: LD_VAR 0 1
8462: PUSH
8463: LD_VAR 0 7
8467: ARRAY
8468: PPUSH
8469: CALL_OW 1
8473: ST_TO_ADDR
// end ;
8474: GO 8387
8476: POP
8477: POP
// array := tmp ;
8478: LD_ADDR_VAR 0 1
8482: PUSH
8483: LD_VAR 0 10
8487: ST_TO_ADDR
// end ;
8488: GO 8369
8490: POP
8491: POP
// result := array ;
8492: LD_ADDR_VAR 0 5
8496: PUSH
8497: LD_VAR 0 1
8501: ST_TO_ADDR
// end ;
8502: LD_VAR 0 5
8506: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8507: LD_INT 0
8509: PPUSH
8510: PPUSH
// result := 0 ;
8511: LD_ADDR_VAR 0 3
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// if not array or not value in array then
8519: LD_VAR 0 1
8523: NOT
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_VAR 0 1
8534: IN
8535: NOT
8536: OR
8537: IFFALSE 8541
// exit ;
8539: GO 8595
// for i = 1 to array do
8541: LD_ADDR_VAR 0 4
8545: PUSH
8546: DOUBLE
8547: LD_INT 1
8549: DEC
8550: ST_TO_ADDR
8551: LD_VAR 0 1
8555: PUSH
8556: FOR_TO
8557: IFFALSE 8593
// if value = array [ i ] then
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 1
8568: PUSH
8569: LD_VAR 0 4
8573: ARRAY
8574: EQUAL
8575: IFFALSE 8591
// begin result := i ;
8577: LD_ADDR_VAR 0 3
8581: PUSH
8582: LD_VAR 0 4
8586: ST_TO_ADDR
// exit ;
8587: POP
8588: POP
8589: GO 8595
// end ;
8591: GO 8556
8593: POP
8594: POP
// end ;
8595: LD_VAR 0 3
8599: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8600: LD_INT 0
8602: PPUSH
// vc_chassis := chassis ;
8603: LD_ADDR_OWVAR 37
8607: PUSH
8608: LD_VAR 0 1
8612: ST_TO_ADDR
// vc_engine := engine ;
8613: LD_ADDR_OWVAR 39
8617: PUSH
8618: LD_VAR 0 2
8622: ST_TO_ADDR
// vc_control := control ;
8623: LD_ADDR_OWVAR 38
8627: PUSH
8628: LD_VAR 0 3
8632: ST_TO_ADDR
// vc_weapon := weapon ;
8633: LD_ADDR_OWVAR 40
8637: PUSH
8638: LD_VAR 0 4
8642: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8643: LD_ADDR_OWVAR 41
8647: PUSH
8648: LD_VAR 0 5
8652: ST_TO_ADDR
// end ;
8653: LD_VAR 0 6
8657: RET
// export function WantPlant ( unit ) ; var task ; begin
8658: LD_INT 0
8660: PPUSH
8661: PPUSH
// result := false ;
8662: LD_ADDR_VAR 0 2
8666: PUSH
8667: LD_INT 0
8669: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8670: LD_ADDR_VAR 0 3
8674: PUSH
8675: LD_VAR 0 1
8679: PPUSH
8680: CALL_OW 437
8684: ST_TO_ADDR
// if task then
8685: LD_VAR 0 3
8689: IFFALSE 8717
// if task [ 1 ] [ 1 ] = p then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_INT 1
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: PUSH
8704: LD_STRING p
8706: EQUAL
8707: IFFALSE 8717
// result := true ;
8709: LD_ADDR_VAR 0 2
8713: PUSH
8714: LD_INT 1
8716: ST_TO_ADDR
// end ;
8717: LD_VAR 0 2
8721: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
8726: PPUSH
8727: PPUSH
// if pos < 1 then
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 1
8735: LESS
8736: IFFALSE 8740
// exit ;
8738: GO 9043
// if pos = 1 then
8740: LD_VAR 0 2
8744: PUSH
8745: LD_INT 1
8747: EQUAL
8748: IFFALSE 8781
// result := Replace ( arr , pos [ 1 ] , value ) else
8750: LD_ADDR_VAR 0 4
8754: PUSH
8755: LD_VAR 0 1
8759: PPUSH
8760: LD_VAR 0 2
8764: PUSH
8765: LD_INT 1
8767: ARRAY
8768: PPUSH
8769: LD_VAR 0 3
8773: PPUSH
8774: CALL_OW 1
8778: ST_TO_ADDR
8779: GO 9043
// begin tmp := arr ;
8781: LD_ADDR_VAR 0 6
8785: PUSH
8786: LD_VAR 0 1
8790: ST_TO_ADDR
// s_arr := [ tmp ] ;
8791: LD_ADDR_VAR 0 7
8795: PUSH
8796: LD_VAR 0 6
8800: PUSH
8801: EMPTY
8802: LIST
8803: ST_TO_ADDR
// for i = 1 to pos - 1 do
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: DOUBLE
8810: LD_INT 1
8812: DEC
8813: ST_TO_ADDR
8814: LD_VAR 0 2
8818: PUSH
8819: LD_INT 1
8821: MINUS
8822: PUSH
8823: FOR_TO
8824: IFFALSE 8869
// begin tmp := tmp [ pos [ i ] ] ;
8826: LD_ADDR_VAR 0 6
8830: PUSH
8831: LD_VAR 0 6
8835: PUSH
8836: LD_VAR 0 2
8840: PUSH
8841: LD_VAR 0 5
8845: ARRAY
8846: ARRAY
8847: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: LD_VAR 0 7
8857: PUSH
8858: LD_VAR 0 6
8862: PUSH
8863: EMPTY
8864: LIST
8865: ADD
8866: ST_TO_ADDR
// end ;
8867: GO 8823
8869: POP
8870: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8871: LD_ADDR_VAR 0 6
8875: PUSH
8876: LD_VAR 0 6
8880: PPUSH
8881: LD_VAR 0 2
8885: PUSH
8886: LD_VAR 0 2
8890: ARRAY
8891: PPUSH
8892: LD_VAR 0 3
8896: PPUSH
8897: CALL_OW 1
8901: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8902: LD_ADDR_VAR 0 7
8906: PUSH
8907: LD_VAR 0 7
8911: PPUSH
8912: LD_VAR 0 7
8916: PPUSH
8917: LD_VAR 0 6
8921: PPUSH
8922: CALL_OW 1
8926: ST_TO_ADDR
// for i = s_arr downto 2 do
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: DOUBLE
8933: LD_VAR 0 7
8937: INC
8938: ST_TO_ADDR
8939: LD_INT 2
8941: PUSH
8942: FOR_DOWNTO
8943: IFFALSE 9027
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8945: LD_ADDR_VAR 0 6
8949: PUSH
8950: LD_VAR 0 7
8954: PUSH
8955: LD_VAR 0 5
8959: PUSH
8960: LD_INT 1
8962: MINUS
8963: ARRAY
8964: PPUSH
8965: LD_VAR 0 2
8969: PUSH
8970: LD_VAR 0 5
8974: PUSH
8975: LD_INT 1
8977: MINUS
8978: ARRAY
8979: PPUSH
8980: LD_VAR 0 7
8984: PUSH
8985: LD_VAR 0 5
8989: ARRAY
8990: PPUSH
8991: CALL_OW 1
8995: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8996: LD_ADDR_VAR 0 7
9000: PUSH
9001: LD_VAR 0 7
9005: PPUSH
9006: LD_VAR 0 5
9010: PUSH
9011: LD_INT 1
9013: MINUS
9014: PPUSH
9015: LD_VAR 0 6
9019: PPUSH
9020: CALL_OW 1
9024: ST_TO_ADDR
// end ;
9025: GO 8942
9027: POP
9028: POP
// result := s_arr [ 1 ] ;
9029: LD_ADDR_VAR 0 4
9033: PUSH
9034: LD_VAR 0 7
9038: PUSH
9039: LD_INT 1
9041: ARRAY
9042: ST_TO_ADDR
// end ; end ;
9043: LD_VAR 0 4
9047: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
// if not list then
9052: LD_VAR 0 1
9056: NOT
9057: IFFALSE 9061
// exit ;
9059: GO 9152
// i := list [ pos1 ] ;
9061: LD_ADDR_VAR 0 5
9065: PUSH
9066: LD_VAR 0 1
9070: PUSH
9071: LD_VAR 0 2
9075: ARRAY
9076: ST_TO_ADDR
// if not i then
9077: LD_VAR 0 5
9081: NOT
9082: IFFALSE 9086
// exit ;
9084: GO 9152
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9086: LD_ADDR_VAR 0 1
9090: PUSH
9091: LD_VAR 0 1
9095: PPUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: LD_VAR 0 1
9105: PUSH
9106: LD_VAR 0 3
9110: ARRAY
9111: PPUSH
9112: CALL_OW 1
9116: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9117: LD_ADDR_VAR 0 1
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: LD_VAR 0 3
9131: PPUSH
9132: LD_VAR 0 5
9136: PPUSH
9137: CALL_OW 1
9141: ST_TO_ADDR
// result := list ;
9142: LD_ADDR_VAR 0 4
9146: PUSH
9147: LD_VAR 0 1
9151: ST_TO_ADDR
// end ;
9152: LD_VAR 0 4
9156: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9157: LD_INT 0
9159: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9160: LD_ADDR_VAR 0 5
9164: PUSH
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL_OW 250
9174: PPUSH
9175: LD_VAR 0 1
9179: PPUSH
9180: CALL_OW 251
9184: PPUSH
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_VAR 0 3
9194: PPUSH
9195: LD_VAR 0 4
9199: PPUSH
9200: CALL 9210 0 5
9204: ST_TO_ADDR
// end ;
9205: LD_VAR 0 5
9209: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9210: LD_INT 0
9212: PPUSH
9213: PPUSH
9214: PPUSH
9215: PPUSH
// if not list then
9216: LD_VAR 0 3
9220: NOT
9221: IFFALSE 9225
// exit ;
9223: GO 9613
// result := [ ] ;
9225: LD_ADDR_VAR 0 6
9229: PUSH
9230: EMPTY
9231: ST_TO_ADDR
// for i in list do
9232: LD_ADDR_VAR 0 7
9236: PUSH
9237: LD_VAR 0 3
9241: PUSH
9242: FOR_IN
9243: IFFALSE 9445
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9245: LD_ADDR_VAR 0 9
9249: PUSH
9250: LD_VAR 0 7
9254: PPUSH
9255: LD_VAR 0 1
9259: PPUSH
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 297
9269: ST_TO_ADDR
// if not result then
9270: LD_VAR 0 6
9274: NOT
9275: IFFALSE 9301
// result := [ [ i , tmp ] ] else
9277: LD_ADDR_VAR 0 6
9281: PUSH
9282: LD_VAR 0 7
9286: PUSH
9287: LD_VAR 0 9
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: ST_TO_ADDR
9299: GO 9443
// begin if result [ result ] [ 2 ] < tmp then
9301: LD_VAR 0 6
9305: PUSH
9306: LD_VAR 0 6
9310: ARRAY
9311: PUSH
9312: LD_INT 2
9314: ARRAY
9315: PUSH
9316: LD_VAR 0 9
9320: LESS
9321: IFFALSE 9363
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_VAR 0 6
9332: PPUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_INT 1
9340: PLUS
9341: PPUSH
9342: LD_VAR 0 7
9346: PUSH
9347: LD_VAR 0 9
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: CALL_OW 2
9360: ST_TO_ADDR
9361: GO 9443
// for j = 1 to result do
9363: LD_ADDR_VAR 0 8
9367: PUSH
9368: DOUBLE
9369: LD_INT 1
9371: DEC
9372: ST_TO_ADDR
9373: LD_VAR 0 6
9377: PUSH
9378: FOR_TO
9379: IFFALSE 9441
// begin if tmp < result [ j ] [ 2 ] then
9381: LD_VAR 0 9
9385: PUSH
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 8
9395: ARRAY
9396: PUSH
9397: LD_INT 2
9399: ARRAY
9400: LESS
9401: IFFALSE 9439
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9403: LD_ADDR_VAR 0 6
9407: PUSH
9408: LD_VAR 0 6
9412: PPUSH
9413: LD_VAR 0 8
9417: PPUSH
9418: LD_VAR 0 7
9422: PUSH
9423: LD_VAR 0 9
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 2
9436: ST_TO_ADDR
// break ;
9437: GO 9441
// end ; end ;
9439: GO 9378
9441: POP
9442: POP
// end ; end ;
9443: GO 9242
9445: POP
9446: POP
// if result and not asc then
9447: LD_VAR 0 6
9451: PUSH
9452: LD_VAR 0 4
9456: NOT
9457: AND
9458: IFFALSE 9533
// begin tmp := result ;
9460: LD_ADDR_VAR 0 9
9464: PUSH
9465: LD_VAR 0 6
9469: ST_TO_ADDR
// for i = tmp downto 1 do
9470: LD_ADDR_VAR 0 7
9474: PUSH
9475: DOUBLE
9476: LD_VAR 0 9
9480: INC
9481: ST_TO_ADDR
9482: LD_INT 1
9484: PUSH
9485: FOR_DOWNTO
9486: IFFALSE 9531
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9488: LD_ADDR_VAR 0 6
9492: PUSH
9493: LD_VAR 0 6
9497: PPUSH
9498: LD_VAR 0 9
9502: PUSH
9503: LD_VAR 0 7
9507: MINUS
9508: PUSH
9509: LD_INT 1
9511: PLUS
9512: PPUSH
9513: LD_VAR 0 9
9517: PUSH
9518: LD_VAR 0 7
9522: ARRAY
9523: PPUSH
9524: CALL_OW 1
9528: ST_TO_ADDR
9529: GO 9485
9531: POP
9532: POP
// end ; tmp := [ ] ;
9533: LD_ADDR_VAR 0 9
9537: PUSH
9538: EMPTY
9539: ST_TO_ADDR
// if mode then
9540: LD_VAR 0 5
9544: IFFALSE 9613
// begin for i = 1 to result do
9546: LD_ADDR_VAR 0 7
9550: PUSH
9551: DOUBLE
9552: LD_INT 1
9554: DEC
9555: ST_TO_ADDR
9556: LD_VAR 0 6
9560: PUSH
9561: FOR_TO
9562: IFFALSE 9601
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9564: LD_ADDR_VAR 0 9
9568: PUSH
9569: LD_VAR 0 9
9573: PPUSH
9574: LD_VAR 0 7
9578: PPUSH
9579: LD_VAR 0 6
9583: PUSH
9584: LD_VAR 0 7
9588: ARRAY
9589: PUSH
9590: LD_INT 1
9592: ARRAY
9593: PPUSH
9594: CALL_OW 1
9598: ST_TO_ADDR
9599: GO 9561
9601: POP
9602: POP
// result := tmp ;
9603: LD_ADDR_VAR 0 6
9607: PUSH
9608: LD_VAR 0 9
9612: ST_TO_ADDR
// end ; end ;
9613: LD_VAR 0 6
9617: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9618: LD_INT 0
9620: PPUSH
9621: PPUSH
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9626: LD_ADDR_VAR 0 5
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 0
9636: PUSH
9637: LD_INT 0
9639: PUSH
9640: EMPTY
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: ST_TO_ADDR
// if not x or not y then
9648: LD_VAR 0 2
9652: NOT
9653: PUSH
9654: LD_VAR 0 3
9658: NOT
9659: OR
9660: IFFALSE 9664
// exit ;
9662: GO 11314
// if not range then
9664: LD_VAR 0 4
9668: NOT
9669: IFFALSE 9679
// range := 10 ;
9671: LD_ADDR_VAR 0 4
9675: PUSH
9676: LD_INT 10
9678: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9679: LD_ADDR_VAR 0 8
9683: PUSH
9684: LD_INT 81
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 92
9698: PUSH
9699: LD_VAR 0 2
9703: PUSH
9704: LD_VAR 0 3
9708: PUSH
9709: LD_VAR 0 4
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 69
9746: ST_TO_ADDR
// if not tmp then
9747: LD_VAR 0 8
9751: NOT
9752: IFFALSE 9756
// exit ;
9754: GO 11314
// for i in tmp do
9756: LD_ADDR_VAR 0 6
9760: PUSH
9761: LD_VAR 0 8
9765: PUSH
9766: FOR_IN
9767: IFFALSE 11289
// begin points := [ 0 , 0 , 0 ] ;
9769: LD_ADDR_VAR 0 9
9773: PUSH
9774: LD_INT 0
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: LD_INT 0
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: ST_TO_ADDR
// bpoints := 1 ;
9788: LD_ADDR_VAR 0 10
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9796: LD_VAR 0 6
9800: PPUSH
9801: CALL_OW 247
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 10392
9814: POP
// begin if GetClass ( i ) = 1 then
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL_OW 257
9824: PUSH
9825: LD_INT 1
9827: EQUAL
9828: IFFALSE 9849
// points := [ 10 , 5 , 3 ] ;
9830: LD_ADDR_VAR 0 9
9834: PUSH
9835: LD_INT 10
9837: PUSH
9838: LD_INT 5
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9849: LD_VAR 0 6
9853: PPUSH
9854: CALL_OW 257
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 3
9864: PUSH
9865: LD_INT 4
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: IN
9873: IFFALSE 9894
// points := [ 3 , 2 , 1 ] ;
9875: LD_ADDR_VAR 0 9
9879: PUSH
9880: LD_INT 3
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 257
9903: PUSH
9904: LD_INT 5
9906: EQUAL
9907: IFFALSE 9928
// points := [ 130 , 5 , 2 ] ;
9909: LD_ADDR_VAR 0 9
9913: PUSH
9914: LD_INT 130
9916: PUSH
9917: LD_INT 5
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9928: LD_VAR 0 6
9932: PPUSH
9933: CALL_OW 257
9937: PUSH
9938: LD_INT 8
9940: EQUAL
9941: IFFALSE 9962
// points := [ 35 , 35 , 30 ] ;
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: LD_INT 35
9950: PUSH
9951: LD_INT 35
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9962: LD_VAR 0 6
9966: PPUSH
9967: CALL_OW 257
9971: PUSH
9972: LD_INT 9
9974: EQUAL
9975: IFFALSE 9996
// points := [ 20 , 55 , 40 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 20
9984: PUSH
9985: LD_INT 55
9987: PUSH
9988: LD_INT 40
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 257
10005: PUSH
10006: LD_INT 12
10008: PUSH
10009: LD_INT 16
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: IN
10016: IFFALSE 10037
// points := [ 5 , 3 , 2 ] ;
10018: LD_ADDR_VAR 0 9
10022: PUSH
10023: LD_INT 5
10025: PUSH
10026: LD_INT 3
10028: PUSH
10029: LD_INT 2
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10037: LD_VAR 0 6
10041: PPUSH
10042: CALL_OW 257
10046: PUSH
10047: LD_INT 17
10049: EQUAL
10050: IFFALSE 10071
// points := [ 100 , 50 , 75 ] ;
10052: LD_ADDR_VAR 0 9
10056: PUSH
10057: LD_INT 100
10059: PUSH
10060: LD_INT 50
10062: PUSH
10063: LD_INT 75
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10071: LD_VAR 0 6
10075: PPUSH
10076: CALL_OW 257
10080: PUSH
10081: LD_INT 15
10083: EQUAL
10084: IFFALSE 10105
// points := [ 10 , 5 , 3 ] ;
10086: LD_ADDR_VAR 0 9
10090: PUSH
10091: LD_INT 10
10093: PUSH
10094: LD_INT 5
10096: PUSH
10097: LD_INT 3
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10105: LD_VAR 0 6
10109: PPUSH
10110: CALL_OW 257
10114: PUSH
10115: LD_INT 14
10117: EQUAL
10118: IFFALSE 10139
// points := [ 10 , 0 , 0 ] ;
10120: LD_ADDR_VAR 0 9
10124: PUSH
10125: LD_INT 10
10127: PUSH
10128: LD_INT 0
10130: PUSH
10131: LD_INT 0
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10139: LD_VAR 0 6
10143: PPUSH
10144: CALL_OW 257
10148: PUSH
10149: LD_INT 11
10151: EQUAL
10152: IFFALSE 10173
// points := [ 30 , 10 , 5 ] ;
10154: LD_ADDR_VAR 0 9
10158: PUSH
10159: LD_INT 30
10161: PUSH
10162: LD_INT 10
10164: PUSH
10165: LD_INT 5
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 5
10180: PPUSH
10181: CALL_OW 321
10185: PUSH
10186: LD_INT 2
10188: EQUAL
10189: IFFALSE 10206
// bpoints := bpoints * 1.8 ;
10191: LD_ADDR_VAR 0 10
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_REAL  1.80000000000000E+0000
10204: MUL
10205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10206: LD_VAR 0 6
10210: PPUSH
10211: CALL_OW 257
10215: PUSH
10216: LD_INT 1
10218: PUSH
10219: LD_INT 2
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: LD_INT 4
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: IN
10234: PUSH
10235: LD_VAR 0 1
10239: PPUSH
10240: LD_INT 51
10242: PPUSH
10243: CALL_OW 321
10247: PUSH
10248: LD_INT 2
10250: EQUAL
10251: AND
10252: IFFALSE 10269
// bpoints := bpoints * 1.2 ;
10254: LD_ADDR_VAR 0 10
10258: PUSH
10259: LD_VAR 0 10
10263: PUSH
10264: LD_REAL  1.20000000000000E+0000
10267: MUL
10268: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10269: LD_VAR 0 6
10273: PPUSH
10274: CALL_OW 257
10278: PUSH
10279: LD_INT 5
10281: PUSH
10282: LD_INT 7
10284: PUSH
10285: LD_INT 9
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: IN
10293: PUSH
10294: LD_VAR 0 1
10298: PPUSH
10299: LD_INT 52
10301: PPUSH
10302: CALL_OW 321
10306: PUSH
10307: LD_INT 2
10309: EQUAL
10310: AND
10311: IFFALSE 10328
// bpoints := bpoints * 1.5 ;
10313: LD_ADDR_VAR 0 10
10317: PUSH
10318: LD_VAR 0 10
10322: PUSH
10323: LD_REAL  1.50000000000000E+0000
10326: MUL
10327: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10328: LD_VAR 0 1
10332: PPUSH
10333: LD_INT 66
10335: PPUSH
10336: CALL_OW 321
10340: PUSH
10341: LD_INT 2
10343: EQUAL
10344: IFFALSE 10361
// bpoints := bpoints * 1.1 ;
10346: LD_ADDR_VAR 0 10
10350: PUSH
10351: LD_VAR 0 10
10355: PUSH
10356: LD_REAL  1.10000000000000E+0000
10359: MUL
10360: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10361: LD_ADDR_VAR 0 10
10365: PUSH
10366: LD_VAR 0 10
10370: PUSH
10371: LD_VAR 0 6
10375: PPUSH
10376: LD_INT 1
10378: PPUSH
10379: CALL_OW 259
10383: PUSH
10384: LD_REAL  1.15000000000000E+0000
10387: MUL
10388: MUL
10389: ST_TO_ADDR
// end ; unit_vehicle :
10390: GO 11218
10392: LD_INT 2
10394: DOUBLE
10395: EQUAL
10396: IFTRUE 10400
10398: GO 11206
10400: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10401: LD_VAR 0 6
10405: PPUSH
10406: CALL_OW 264
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 42
10416: PUSH
10417: LD_INT 24
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10446
// points := [ 25 , 5 , 3 ] ;
10427: LD_ADDR_VAR 0 9
10431: PUSH
10432: LD_INT 25
10434: PUSH
10435: LD_INT 5
10437: PUSH
10438: LD_INT 3
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10446: LD_VAR 0 6
10450: PPUSH
10451: CALL_OW 264
10455: PUSH
10456: LD_INT 4
10458: PUSH
10459: LD_INT 43
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: IN
10470: IFFALSE 10491
// points := [ 40 , 15 , 5 ] ;
10472: LD_ADDR_VAR 0 9
10476: PUSH
10477: LD_INT 40
10479: PUSH
10480: LD_INT 15
10482: PUSH
10483: LD_INT 5
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10491: LD_VAR 0 6
10495: PPUSH
10496: CALL_OW 264
10500: PUSH
10501: LD_INT 3
10503: PUSH
10504: LD_INT 23
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: IN
10511: IFFALSE 10532
// points := [ 7 , 25 , 8 ] ;
10513: LD_ADDR_VAR 0 9
10517: PUSH
10518: LD_INT 7
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 8
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10532: LD_VAR 0 6
10536: PPUSH
10537: CALL_OW 264
10541: PUSH
10542: LD_INT 5
10544: PUSH
10545: LD_INT 27
10547: PUSH
10548: LD_INT 44
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: IN
10556: IFFALSE 10577
// points := [ 14 , 50 , 16 ] ;
10558: LD_ADDR_VAR 0 9
10562: PUSH
10563: LD_INT 14
10565: PUSH
10566: LD_INT 50
10568: PUSH
10569: LD_INT 16
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10577: LD_VAR 0 6
10581: PPUSH
10582: CALL_OW 264
10586: PUSH
10587: LD_INT 6
10589: PUSH
10590: LD_INT 46
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: IN
10597: IFFALSE 10618
// points := [ 32 , 120 , 70 ] ;
10599: LD_ADDR_VAR 0 9
10603: PUSH
10604: LD_INT 32
10606: PUSH
10607: LD_INT 120
10609: PUSH
10610: LD_INT 70
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10618: LD_VAR 0 6
10622: PPUSH
10623: CALL_OW 264
10627: PUSH
10628: LD_INT 7
10630: PUSH
10631: LD_INT 28
10633: PUSH
10634: LD_INT 45
10636: PUSH
10637: LD_INT 92
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: IN
10646: IFFALSE 10667
// points := [ 35 , 20 , 45 ] ;
10648: LD_ADDR_VAR 0 9
10652: PUSH
10653: LD_INT 35
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 45
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10667: LD_VAR 0 6
10671: PPUSH
10672: CALL_OW 264
10676: PUSH
10677: LD_INT 47
10679: PUSH
10680: EMPTY
10681: LIST
10682: IN
10683: IFFALSE 10704
// points := [ 67 , 45 , 75 ] ;
10685: LD_ADDR_VAR 0 9
10689: PUSH
10690: LD_INT 67
10692: PUSH
10693: LD_INT 45
10695: PUSH
10696: LD_INT 75
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10704: LD_VAR 0 6
10708: PPUSH
10709: CALL_OW 264
10713: PUSH
10714: LD_INT 26
10716: PUSH
10717: EMPTY
10718: LIST
10719: IN
10720: IFFALSE 10741
// points := [ 120 , 30 , 80 ] ;
10722: LD_ADDR_VAR 0 9
10726: PUSH
10727: LD_INT 120
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: LD_INT 80
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10741: LD_VAR 0 6
10745: PPUSH
10746: CALL_OW 264
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: EMPTY
10755: LIST
10756: IN
10757: IFFALSE 10778
// points := [ 40 , 1 , 1 ] ;
10759: LD_ADDR_VAR 0 9
10763: PUSH
10764: LD_INT 40
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10778: LD_VAR 0 6
10782: PPUSH
10783: CALL_OW 264
10787: PUSH
10788: LD_INT 29
10790: PUSH
10791: EMPTY
10792: LIST
10793: IN
10794: IFFALSE 10815
// points := [ 70 , 200 , 400 ] ;
10796: LD_ADDR_VAR 0 9
10800: PUSH
10801: LD_INT 70
10803: PUSH
10804: LD_INT 200
10806: PUSH
10807: LD_INT 400
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10815: LD_VAR 0 6
10819: PPUSH
10820: CALL_OW 264
10824: PUSH
10825: LD_INT 14
10827: PUSH
10828: LD_INT 53
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: IN
10835: IFFALSE 10856
// points := [ 40 , 10 , 20 ] ;
10837: LD_ADDR_VAR 0 9
10841: PUSH
10842: LD_INT 40
10844: PUSH
10845: LD_INT 10
10847: PUSH
10848: LD_INT 20
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10856: LD_VAR 0 6
10860: PPUSH
10861: CALL_OW 264
10865: PUSH
10866: LD_INT 9
10868: PUSH
10869: EMPTY
10870: LIST
10871: IN
10872: IFFALSE 10893
// points := [ 5 , 70 , 20 ] ;
10874: LD_ADDR_VAR 0 9
10878: PUSH
10879: LD_INT 5
10881: PUSH
10882: LD_INT 70
10884: PUSH
10885: LD_INT 20
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10893: LD_VAR 0 6
10897: PPUSH
10898: CALL_OW 264
10902: PUSH
10903: LD_INT 10
10905: PUSH
10906: EMPTY
10907: LIST
10908: IN
10909: IFFALSE 10930
// points := [ 35 , 110 , 70 ] ;
10911: LD_ADDR_VAR 0 9
10915: PUSH
10916: LD_INT 35
10918: PUSH
10919: LD_INT 110
10921: PUSH
10922: LD_INT 70
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10930: LD_VAR 0 6
10934: PPUSH
10935: CALL_OW 265
10939: PUSH
10940: LD_INT 25
10942: EQUAL
10943: IFFALSE 10964
// points := [ 80 , 65 , 100 ] ;
10945: LD_ADDR_VAR 0 9
10949: PUSH
10950: LD_INT 80
10952: PUSH
10953: LD_INT 65
10955: PUSH
10956: LD_INT 100
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10964: LD_VAR 0 6
10968: PPUSH
10969: CALL_OW 263
10973: PUSH
10974: LD_INT 1
10976: EQUAL
10977: IFFALSE 11012
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10979: LD_ADDR_VAR 0 10
10983: PUSH
10984: LD_VAR 0 10
10988: PUSH
10989: LD_VAR 0 6
10993: PPUSH
10994: CALL_OW 311
10998: PPUSH
10999: LD_INT 3
11001: PPUSH
11002: CALL_OW 259
11006: PUSH
11007: LD_INT 4
11009: MUL
11010: MUL
11011: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11012: LD_VAR 0 6
11016: PPUSH
11017: CALL_OW 263
11021: PUSH
11022: LD_INT 2
11024: EQUAL
11025: IFFALSE 11076
// begin j := IsControledBy ( i ) ;
11027: LD_ADDR_VAR 0 7
11031: PUSH
11032: LD_VAR 0 6
11036: PPUSH
11037: CALL_OW 312
11041: ST_TO_ADDR
// if j then
11042: LD_VAR 0 7
11046: IFFALSE 11076
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11048: LD_ADDR_VAR 0 10
11052: PUSH
11053: LD_VAR 0 10
11057: PUSH
11058: LD_VAR 0 7
11062: PPUSH
11063: LD_INT 3
11065: PPUSH
11066: CALL_OW 259
11070: PUSH
11071: LD_INT 3
11073: MUL
11074: MUL
11075: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11076: LD_VAR 0 6
11080: PPUSH
11081: CALL_OW 264
11085: PUSH
11086: LD_INT 5
11088: PUSH
11089: LD_INT 6
11091: PUSH
11092: LD_INT 46
11094: PUSH
11095: LD_INT 44
11097: PUSH
11098: LD_INT 47
11100: PUSH
11101: LD_INT 45
11103: PUSH
11104: LD_INT 28
11106: PUSH
11107: LD_INT 7
11109: PUSH
11110: LD_INT 27
11112: PUSH
11113: LD_INT 29
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: IN
11128: PUSH
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 52
11136: PPUSH
11137: CALL_OW 321
11141: PUSH
11142: LD_INT 2
11144: EQUAL
11145: AND
11146: IFFALSE 11163
// bpoints := bpoints * 1.2 ;
11148: LD_ADDR_VAR 0 10
11152: PUSH
11153: LD_VAR 0 10
11157: PUSH
11158: LD_REAL  1.20000000000000E+0000
11161: MUL
11162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11163: LD_VAR 0 6
11167: PPUSH
11168: CALL_OW 264
11172: PUSH
11173: LD_INT 6
11175: PUSH
11176: LD_INT 46
11178: PUSH
11179: LD_INT 47
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: IN
11187: IFFALSE 11204
// bpoints := bpoints * 1.2 ;
11189: LD_ADDR_VAR 0 10
11193: PUSH
11194: LD_VAR 0 10
11198: PUSH
11199: LD_REAL  1.20000000000000E+0000
11202: MUL
11203: ST_TO_ADDR
// end ; unit_building :
11204: GO 11218
11206: LD_INT 3
11208: DOUBLE
11209: EQUAL
11210: IFTRUE 11214
11212: GO 11217
11214: POP
// ; end ;
11215: GO 11218
11217: POP
// for j = 1 to 3 do
11218: LD_ADDR_VAR 0 7
11222: PUSH
11223: DOUBLE
11224: LD_INT 1
11226: DEC
11227: ST_TO_ADDR
11228: LD_INT 3
11230: PUSH
11231: FOR_TO
11232: IFFALSE 11285
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_VAR 0 5
11243: PPUSH
11244: LD_VAR 0 7
11248: PPUSH
11249: LD_VAR 0 5
11253: PUSH
11254: LD_VAR 0 7
11258: ARRAY
11259: PUSH
11260: LD_VAR 0 9
11264: PUSH
11265: LD_VAR 0 7
11269: ARRAY
11270: PUSH
11271: LD_VAR 0 10
11275: MUL
11276: PLUS
11277: PPUSH
11278: CALL_OW 1
11282: ST_TO_ADDR
11283: GO 11231
11285: POP
11286: POP
// end ;
11287: GO 9766
11289: POP
11290: POP
// result := Replace ( result , 4 , tmp ) ;
11291: LD_ADDR_VAR 0 5
11295: PUSH
11296: LD_VAR 0 5
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: LD_VAR 0 8
11308: PPUSH
11309: CALL_OW 1
11313: ST_TO_ADDR
// end ;
11314: LD_VAR 0 5
11318: RET
// export function DangerAtRange ( unit , range ) ; begin
11319: LD_INT 0
11321: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11322: LD_ADDR_VAR 0 3
11326: PUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 255
11336: PPUSH
11337: LD_VAR 0 1
11341: PPUSH
11342: CALL_OW 250
11346: PPUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 251
11356: PPUSH
11357: LD_VAR 0 2
11361: PPUSH
11362: CALL 9618 0 4
11366: ST_TO_ADDR
// end ;
11367: LD_VAR 0 3
11371: RET
// export function DangerInArea ( side , area ) ; begin
11372: LD_INT 0
11374: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11375: LD_ADDR_VAR 0 3
11379: PUSH
11380: LD_VAR 0 2
11384: PPUSH
11385: LD_INT 81
11387: PUSH
11388: LD_VAR 0 1
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PPUSH
11397: CALL_OW 70
11401: ST_TO_ADDR
// end ;
11402: LD_VAR 0 3
11406: RET
// export function IsExtension ( b ) ; begin
11407: LD_INT 0
11409: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11410: LD_ADDR_VAR 0 2
11414: PUSH
11415: LD_VAR 0 1
11419: PUSH
11420: LD_INT 23
11422: PUSH
11423: LD_INT 20
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 17
11431: PUSH
11432: LD_INT 24
11434: PUSH
11435: LD_INT 21
11437: PUSH
11438: LD_INT 19
11440: PUSH
11441: LD_INT 16
11443: PUSH
11444: LD_INT 25
11446: PUSH
11447: LD_INT 18
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: IN
11462: ST_TO_ADDR
// end ;
11463: LD_VAR 0 2
11467: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11468: LD_INT 0
11470: PPUSH
11471: PPUSH
11472: PPUSH
// result := [ ] ;
11473: LD_ADDR_VAR 0 4
11477: PUSH
11478: EMPTY
11479: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11480: LD_ADDR_VAR 0 5
11484: PUSH
11485: LD_VAR 0 2
11489: PPUSH
11490: LD_INT 21
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PPUSH
11500: CALL_OW 70
11504: ST_TO_ADDR
// if not tmp then
11505: LD_VAR 0 5
11509: NOT
11510: IFFALSE 11514
// exit ;
11512: GO 11578
// if checkLink then
11514: LD_VAR 0 3
11518: IFFALSE 11568
// begin for i in tmp do
11520: LD_ADDR_VAR 0 6
11524: PUSH
11525: LD_VAR 0 5
11529: PUSH
11530: FOR_IN
11531: IFFALSE 11566
// if GetBase ( i ) <> base then
11533: LD_VAR 0 6
11537: PPUSH
11538: CALL_OW 274
11542: PUSH
11543: LD_VAR 0 1
11547: NONEQUAL
11548: IFFALSE 11564
// ComLinkToBase ( base , i ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_VAR 0 6
11559: PPUSH
11560: CALL_OW 169
11564: GO 11530
11566: POP
11567: POP
// end ; result := tmp ;
11568: LD_ADDR_VAR 0 4
11572: PUSH
11573: LD_VAR 0 5
11577: ST_TO_ADDR
// end ;
11578: LD_VAR 0 4
11582: RET
// export function ComComplete ( units , b ) ; var i ; begin
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
// if not units then
11587: LD_VAR 0 1
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11686
// for i in units do
11596: LD_ADDR_VAR 0 4
11600: PUSH
11601: LD_VAR 0 1
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11684
// if BuildingStatus ( b ) = bs_build then
11609: LD_VAR 0 2
11613: PPUSH
11614: CALL_OW 461
11618: PUSH
11619: LD_INT 1
11621: EQUAL
11622: IFFALSE 11682
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11624: LD_VAR 0 4
11628: PPUSH
11629: LD_STRING h
11631: PUSH
11632: LD_VAR 0 2
11636: PPUSH
11637: CALL_OW 250
11641: PUSH
11642: LD_VAR 0 2
11646: PPUSH
11647: CALL_OW 251
11651: PUSH
11652: LD_VAR 0 2
11656: PUSH
11657: LD_INT 0
11659: PUSH
11660: LD_INT 0
11662: PUSH
11663: LD_INT 0
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: PPUSH
11678: CALL_OW 446
11682: GO 11606
11684: POP
11685: POP
// end ;
11686: LD_VAR 0 3
11690: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
11695: PPUSH
11696: PPUSH
11697: PPUSH
11698: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11699: LD_VAR 0 1
11703: NOT
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 263
11714: PUSH
11715: LD_INT 2
11717: NONEQUAL
11718: OR
11719: IFFALSE 11723
// exit ;
11721: GO 12039
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11723: LD_ADDR_VAR 0 6
11727: PUSH
11728: LD_INT 22
11730: PUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: CALL_OW 255
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 2
11747: PUSH
11748: LD_INT 30
11750: PUSH
11751: LD_INT 36
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 34
11760: PUSH
11761: LD_INT 31
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 69
11781: ST_TO_ADDR
// if not tmp then
11782: LD_VAR 0 6
11786: NOT
11787: IFFALSE 11791
// exit ;
11789: GO 12039
// result := [ ] ;
11791: LD_ADDR_VAR 0 2
11795: PUSH
11796: EMPTY
11797: ST_TO_ADDR
// for i in tmp do
11798: LD_ADDR_VAR 0 3
11802: PUSH
11803: LD_VAR 0 6
11807: PUSH
11808: FOR_IN
11809: IFFALSE 11880
// begin t := UnitsInside ( i ) ;
11811: LD_ADDR_VAR 0 4
11815: PUSH
11816: LD_VAR 0 3
11820: PPUSH
11821: CALL_OW 313
11825: ST_TO_ADDR
// if t then
11826: LD_VAR 0 4
11830: IFFALSE 11878
// for j in t do
11832: LD_ADDR_VAR 0 7
11836: PUSH
11837: LD_VAR 0 4
11841: PUSH
11842: FOR_IN
11843: IFFALSE 11876
// result := Replace ( result , result + 1 , j ) ;
11845: LD_ADDR_VAR 0 2
11849: PUSH
11850: LD_VAR 0 2
11854: PPUSH
11855: LD_VAR 0 2
11859: PUSH
11860: LD_INT 1
11862: PLUS
11863: PPUSH
11864: LD_VAR 0 7
11868: PPUSH
11869: CALL_OW 1
11873: ST_TO_ADDR
11874: GO 11842
11876: POP
11877: POP
// end ;
11878: GO 11808
11880: POP
11881: POP
// if not result then
11882: LD_VAR 0 2
11886: NOT
11887: IFFALSE 11891
// exit ;
11889: GO 12039
// mech := result [ 1 ] ;
11891: LD_ADDR_VAR 0 5
11895: PUSH
11896: LD_VAR 0 2
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: ST_TO_ADDR
// if result > 1 then
11905: LD_VAR 0 2
11909: PUSH
11910: LD_INT 1
11912: GREATER
11913: IFFALSE 12025
// begin for i = 2 to result do
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: DOUBLE
11921: LD_INT 2
11923: DEC
11924: ST_TO_ADDR
11925: LD_VAR 0 2
11929: PUSH
11930: FOR_TO
11931: IFFALSE 12023
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11933: LD_ADDR_VAR 0 4
11937: PUSH
11938: LD_VAR 0 2
11942: PUSH
11943: LD_VAR 0 3
11947: ARRAY
11948: PPUSH
11949: LD_INT 3
11951: PPUSH
11952: CALL_OW 259
11956: PUSH
11957: LD_VAR 0 2
11961: PUSH
11962: LD_VAR 0 3
11966: ARRAY
11967: PPUSH
11968: CALL_OW 432
11972: MINUS
11973: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11974: LD_VAR 0 4
11978: PUSH
11979: LD_VAR 0 5
11983: PPUSH
11984: LD_INT 3
11986: PPUSH
11987: CALL_OW 259
11991: PUSH
11992: LD_VAR 0 5
11996: PPUSH
11997: CALL_OW 432
12001: MINUS
12002: GREATEREQUAL
12003: IFFALSE 12021
// mech := result [ i ] ;
12005: LD_ADDR_VAR 0 5
12009: PUSH
12010: LD_VAR 0 2
12014: PUSH
12015: LD_VAR 0 3
12019: ARRAY
12020: ST_TO_ADDR
// end ;
12021: GO 11930
12023: POP
12024: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_VAR 0 5
12034: PPUSH
12035: CALL_OW 135
// end ;
12039: LD_VAR 0 2
12043: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12044: LD_INT 0
12046: PPUSH
12047: PPUSH
12048: PPUSH
12049: PPUSH
12050: PPUSH
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
12058: PPUSH
// result := [ ] ;
12059: LD_ADDR_VAR 0 7
12063: PUSH
12064: EMPTY
12065: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 266
12075: PUSH
12076: LD_INT 0
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: IN
12086: NOT
12087: IFFALSE 12091
// exit ;
12089: GO 13725
// if name then
12091: LD_VAR 0 3
12095: IFFALSE 12111
// SetBName ( base_dep , name ) ;
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: CALL_OW 500
// base := GetBase ( base_dep ) ;
12111: LD_ADDR_VAR 0 15
12115: PUSH
12116: LD_VAR 0 1
12120: PPUSH
12121: CALL_OW 274
12125: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12126: LD_ADDR_VAR 0 16
12130: PUSH
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 255
12140: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12141: LD_ADDR_VAR 0 17
12145: PUSH
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 248
12155: ST_TO_ADDR
// if sources then
12156: LD_VAR 0 5
12160: IFFALSE 12207
// for i = 1 to 3 do
12162: LD_ADDR_VAR 0 8
12166: PUSH
12167: DOUBLE
12168: LD_INT 1
12170: DEC
12171: ST_TO_ADDR
12172: LD_INT 3
12174: PUSH
12175: FOR_TO
12176: IFFALSE 12205
// AddResourceType ( base , i , sources [ i ] ) ;
12178: LD_VAR 0 15
12182: PPUSH
12183: LD_VAR 0 8
12187: PPUSH
12188: LD_VAR 0 5
12192: PUSH
12193: LD_VAR 0 8
12197: ARRAY
12198: PPUSH
12199: CALL_OW 276
12203: GO 12175
12205: POP
12206: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12207: LD_ADDR_VAR 0 18
12211: PUSH
12212: LD_VAR 0 15
12216: PPUSH
12217: LD_VAR 0 2
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL 11468 0 3
12229: ST_TO_ADDR
// InitHc ;
12230: CALL_OW 19
// InitUc ;
12234: CALL_OW 18
// uc_side := side ;
12238: LD_ADDR_OWVAR 20
12242: PUSH
12243: LD_VAR 0 16
12247: ST_TO_ADDR
// uc_nation := nation ;
12248: LD_ADDR_OWVAR 21
12252: PUSH
12253: LD_VAR 0 17
12257: ST_TO_ADDR
// if buildings then
12258: LD_VAR 0 18
12262: IFFALSE 13584
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12264: LD_ADDR_VAR 0 19
12268: PUSH
12269: LD_VAR 0 18
12273: PPUSH
12274: LD_INT 2
12276: PUSH
12277: LD_INT 30
12279: PUSH
12280: LD_INT 29
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 30
12289: PUSH
12290: LD_INT 30
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 72
12306: ST_TO_ADDR
// if tmp then
12307: LD_VAR 0 19
12311: IFFALSE 12359
// for i in tmp do
12313: LD_ADDR_VAR 0 8
12317: PUSH
12318: LD_VAR 0 19
12322: PUSH
12323: FOR_IN
12324: IFFALSE 12357
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12326: LD_VAR 0 8
12330: PPUSH
12331: CALL_OW 250
12335: PPUSH
12336: LD_VAR 0 8
12340: PPUSH
12341: CALL_OW 251
12345: PPUSH
12346: LD_VAR 0 16
12350: PPUSH
12351: CALL_OW 441
12355: GO 12323
12357: POP
12358: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12359: LD_VAR 0 18
12363: PPUSH
12364: LD_INT 2
12366: PUSH
12367: LD_INT 30
12369: PUSH
12370: LD_INT 32
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_INT 33
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: IFFALSE 12484
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12398: LD_ADDR_VAR 0 8
12402: PUSH
12403: LD_VAR 0 18
12407: PPUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 30
12413: PUSH
12414: LD_INT 32
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 30
12423: PUSH
12424: LD_INT 33
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 72
12440: PUSH
12441: FOR_IN
12442: IFFALSE 12482
// begin if not GetBWeapon ( i ) then
12444: LD_VAR 0 8
12448: PPUSH
12449: CALL_OW 269
12453: NOT
12454: IFFALSE 12480
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12456: LD_VAR 0 8
12460: PPUSH
12461: LD_VAR 0 8
12465: PPUSH
12466: LD_VAR 0 2
12470: PPUSH
12471: CALL 13730 0 2
12475: PPUSH
12476: CALL_OW 431
// end ;
12480: GO 12441
12482: POP
12483: POP
// end ; for i = 1 to personel do
12484: LD_ADDR_VAR 0 8
12488: PUSH
12489: DOUBLE
12490: LD_INT 1
12492: DEC
12493: ST_TO_ADDR
12494: LD_VAR 0 6
12498: PUSH
12499: FOR_TO
12500: IFFALSE 13564
// begin if i > 4 then
12502: LD_VAR 0 8
12506: PUSH
12507: LD_INT 4
12509: GREATER
12510: IFFALSE 12514
// break ;
12512: GO 13564
// case i of 1 :
12514: LD_VAR 0 8
12518: PUSH
12519: LD_INT 1
12521: DOUBLE
12522: EQUAL
12523: IFTRUE 12527
12525: GO 12607
12527: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12528: LD_ADDR_VAR 0 12
12532: PUSH
12533: LD_VAR 0 18
12537: PPUSH
12538: LD_INT 22
12540: PUSH
12541: LD_VAR 0 16
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 58
12552: PUSH
12553: EMPTY
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 30
12561: PUSH
12562: LD_INT 32
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 4
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 5
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 72
12604: ST_TO_ADDR
12605: GO 12829
12607: LD_INT 2
12609: DOUBLE
12610: EQUAL
12611: IFTRUE 12615
12613: GO 12677
12615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12616: LD_ADDR_VAR 0 12
12620: PUSH
12621: LD_VAR 0 18
12625: PPUSH
12626: LD_INT 22
12628: PUSH
12629: LD_VAR 0 16
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 2
12640: PUSH
12641: LD_INT 30
12643: PUSH
12644: LD_INT 0
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 30
12653: PUSH
12654: LD_INT 1
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PPUSH
12670: CALL_OW 72
12674: ST_TO_ADDR
12675: GO 12829
12677: LD_INT 3
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12747
12685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12686: LD_ADDR_VAR 0 12
12690: PUSH
12691: LD_VAR 0 18
12695: PPUSH
12696: LD_INT 22
12698: PUSH
12699: LD_VAR 0 16
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 2
12710: PUSH
12711: LD_INT 30
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 30
12723: PUSH
12724: LD_INT 3
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PPUSH
12740: CALL_OW 72
12744: ST_TO_ADDR
12745: GO 12829
12747: LD_INT 4
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12828
12755: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12756: LD_ADDR_VAR 0 12
12760: PUSH
12761: LD_VAR 0 18
12765: PPUSH
12766: LD_INT 22
12768: PUSH
12769: LD_VAR 0 16
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: LD_INT 30
12783: PUSH
12784: LD_INT 6
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 30
12793: PUSH
12794: LD_INT 7
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 30
12803: PUSH
12804: LD_INT 8
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PPUSH
12821: CALL_OW 72
12825: ST_TO_ADDR
12826: GO 12829
12828: POP
// if i = 1 then
12829: LD_VAR 0 8
12833: PUSH
12834: LD_INT 1
12836: EQUAL
12837: IFFALSE 12948
// begin tmp := [ ] ;
12839: LD_ADDR_VAR 0 19
12843: PUSH
12844: EMPTY
12845: ST_TO_ADDR
// for j in f do
12846: LD_ADDR_VAR 0 9
12850: PUSH
12851: LD_VAR 0 12
12855: PUSH
12856: FOR_IN
12857: IFFALSE 12930
// if GetBType ( j ) = b_bunker then
12859: LD_VAR 0 9
12863: PPUSH
12864: CALL_OW 266
12868: PUSH
12869: LD_INT 32
12871: EQUAL
12872: IFFALSE 12899
// tmp := Insert ( tmp , 1 , j ) else
12874: LD_ADDR_VAR 0 19
12878: PUSH
12879: LD_VAR 0 19
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: LD_VAR 0 9
12891: PPUSH
12892: CALL_OW 2
12896: ST_TO_ADDR
12897: GO 12928
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12899: LD_ADDR_VAR 0 19
12903: PUSH
12904: LD_VAR 0 19
12908: PPUSH
12909: LD_VAR 0 19
12913: PUSH
12914: LD_INT 1
12916: PLUS
12917: PPUSH
12918: LD_VAR 0 9
12922: PPUSH
12923: CALL_OW 2
12927: ST_TO_ADDR
12928: GO 12856
12930: POP
12931: POP
// if tmp then
12932: LD_VAR 0 19
12936: IFFALSE 12948
// f := tmp ;
12938: LD_ADDR_VAR 0 12
12942: PUSH
12943: LD_VAR 0 19
12947: ST_TO_ADDR
// end ; x := personel [ i ] ;
12948: LD_ADDR_VAR 0 13
12952: PUSH
12953: LD_VAR 0 6
12957: PUSH
12958: LD_VAR 0 8
12962: ARRAY
12963: ST_TO_ADDR
// if x = - 1 then
12964: LD_VAR 0 13
12968: PUSH
12969: LD_INT 1
12971: NEG
12972: EQUAL
12973: IFFALSE 13182
// begin for j in f do
12975: LD_ADDR_VAR 0 9
12979: PUSH
12980: LD_VAR 0 12
12984: PUSH
12985: FOR_IN
12986: IFFALSE 13178
// repeat InitHc ;
12988: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12992: LD_VAR 0 9
12996: PPUSH
12997: CALL_OW 266
13001: PUSH
13002: LD_INT 5
13004: EQUAL
13005: IFFALSE 13075
// begin if UnitsInside ( j ) < 3 then
13007: LD_VAR 0 9
13011: PPUSH
13012: CALL_OW 313
13016: PUSH
13017: LD_INT 3
13019: LESS
13020: IFFALSE 13056
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13022: LD_INT 0
13024: PPUSH
13025: LD_INT 5
13027: PUSH
13028: LD_INT 8
13030: PUSH
13031: LD_INT 9
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: LD_VAR 0 17
13043: ARRAY
13044: PPUSH
13045: LD_VAR 0 4
13049: PPUSH
13050: CALL_OW 380
13054: GO 13073
// PrepareHuman ( false , i , skill ) ;
13056: LD_INT 0
13058: PPUSH
13059: LD_VAR 0 8
13063: PPUSH
13064: LD_VAR 0 4
13068: PPUSH
13069: CALL_OW 380
// end else
13073: GO 13092
// PrepareHuman ( false , i , skill ) ;
13075: LD_INT 0
13077: PPUSH
13078: LD_VAR 0 8
13082: PPUSH
13083: LD_VAR 0 4
13087: PPUSH
13088: CALL_OW 380
// un := CreateHuman ;
13092: LD_ADDR_VAR 0 14
13096: PUSH
13097: CALL_OW 44
13101: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13102: LD_ADDR_VAR 0 7
13106: PUSH
13107: LD_VAR 0 7
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: LD_VAR 0 14
13119: PPUSH
13120: CALL_OW 2
13124: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13125: LD_VAR 0 14
13129: PPUSH
13130: LD_VAR 0 9
13134: PPUSH
13135: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13139: LD_VAR 0 9
13143: PPUSH
13144: CALL_OW 313
13148: PUSH
13149: LD_INT 6
13151: EQUAL
13152: PUSH
13153: LD_VAR 0 9
13157: PPUSH
13158: CALL_OW 266
13162: PUSH
13163: LD_INT 32
13165: PUSH
13166: LD_INT 31
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: IN
13173: OR
13174: IFFALSE 12988
13176: GO 12985
13178: POP
13179: POP
// end else
13180: GO 13562
// for j = 1 to x do
13182: LD_ADDR_VAR 0 9
13186: PUSH
13187: DOUBLE
13188: LD_INT 1
13190: DEC
13191: ST_TO_ADDR
13192: LD_VAR 0 13
13196: PUSH
13197: FOR_TO
13198: IFFALSE 13560
// begin InitHc ;
13200: CALL_OW 19
// if not f then
13204: LD_VAR 0 12
13208: NOT
13209: IFFALSE 13298
// begin PrepareHuman ( false , i , skill ) ;
13211: LD_INT 0
13213: PPUSH
13214: LD_VAR 0 8
13218: PPUSH
13219: LD_VAR 0 4
13223: PPUSH
13224: CALL_OW 380
// un := CreateHuman ;
13228: LD_ADDR_VAR 0 14
13232: PUSH
13233: CALL_OW 44
13237: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13238: LD_ADDR_VAR 0 7
13242: PUSH
13243: LD_VAR 0 7
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: LD_VAR 0 14
13255: PPUSH
13256: CALL_OW 2
13260: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13261: LD_VAR 0 14
13265: PPUSH
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 250
13275: PPUSH
13276: LD_VAR 0 1
13280: PPUSH
13281: CALL_OW 251
13285: PPUSH
13286: LD_INT 10
13288: PPUSH
13289: LD_INT 0
13291: PPUSH
13292: CALL_OW 50
// continue ;
13296: GO 13197
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13298: LD_VAR 0 12
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: CALL_OW 313
13311: PUSH
13312: LD_VAR 0 12
13316: PUSH
13317: LD_INT 1
13319: ARRAY
13320: PPUSH
13321: CALL_OW 266
13325: PUSH
13326: LD_INT 32
13328: PUSH
13329: LD_INT 31
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: IN
13336: AND
13337: PUSH
13338: LD_VAR 0 12
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: CALL_OW 313
13351: PUSH
13352: LD_INT 6
13354: EQUAL
13355: OR
13356: IFFALSE 13376
// f := Delete ( f , 1 ) ;
13358: LD_ADDR_VAR 0 12
13362: PUSH
13363: LD_VAR 0 12
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 3
13375: ST_TO_ADDR
// if not f then
13376: LD_VAR 0 12
13380: NOT
13381: IFFALSE 13399
// begin x := x + 2 ;
13383: LD_ADDR_VAR 0 13
13387: PUSH
13388: LD_VAR 0 13
13392: PUSH
13393: LD_INT 2
13395: PLUS
13396: ST_TO_ADDR
// continue ;
13397: GO 13197
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13399: LD_VAR 0 12
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PPUSH
13408: CALL_OW 266
13412: PUSH
13413: LD_INT 5
13415: EQUAL
13416: IFFALSE 13490
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13418: LD_VAR 0 12
13422: PUSH
13423: LD_INT 1
13425: ARRAY
13426: PPUSH
13427: CALL_OW 313
13431: PUSH
13432: LD_INT 3
13434: LESS
13435: IFFALSE 13471
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13437: LD_INT 0
13439: PPUSH
13440: LD_INT 5
13442: PUSH
13443: LD_INT 8
13445: PUSH
13446: LD_INT 9
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: LD_VAR 0 17
13458: ARRAY
13459: PPUSH
13460: LD_VAR 0 4
13464: PPUSH
13465: CALL_OW 380
13469: GO 13488
// PrepareHuman ( false , i , skill ) ;
13471: LD_INT 0
13473: PPUSH
13474: LD_VAR 0 8
13478: PPUSH
13479: LD_VAR 0 4
13483: PPUSH
13484: CALL_OW 380
// end else
13488: GO 13507
// PrepareHuman ( false , i , skill ) ;
13490: LD_INT 0
13492: PPUSH
13493: LD_VAR 0 8
13497: PPUSH
13498: LD_VAR 0 4
13502: PPUSH
13503: CALL_OW 380
// un := CreateHuman ;
13507: LD_ADDR_VAR 0 14
13511: PUSH
13512: CALL_OW 44
13516: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13517: LD_ADDR_VAR 0 7
13521: PUSH
13522: LD_VAR 0 7
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: LD_VAR 0 14
13534: PPUSH
13535: CALL_OW 2
13539: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13540: LD_VAR 0 14
13544: PPUSH
13545: LD_VAR 0 12
13549: PUSH
13550: LD_INT 1
13552: ARRAY
13553: PPUSH
13554: CALL_OW 52
// end ;
13558: GO 13197
13560: POP
13561: POP
// end ;
13562: GO 12499
13564: POP
13565: POP
// result := result ^ buildings ;
13566: LD_ADDR_VAR 0 7
13570: PUSH
13571: LD_VAR 0 7
13575: PUSH
13576: LD_VAR 0 18
13580: ADD
13581: ST_TO_ADDR
// end else
13582: GO 13725
// begin for i = 1 to personel do
13584: LD_ADDR_VAR 0 8
13588: PUSH
13589: DOUBLE
13590: LD_INT 1
13592: DEC
13593: ST_TO_ADDR
13594: LD_VAR 0 6
13598: PUSH
13599: FOR_TO
13600: IFFALSE 13723
// begin if i > 4 then
13602: LD_VAR 0 8
13606: PUSH
13607: LD_INT 4
13609: GREATER
13610: IFFALSE 13614
// break ;
13612: GO 13723
// x := personel [ i ] ;
13614: LD_ADDR_VAR 0 13
13618: PUSH
13619: LD_VAR 0 6
13623: PUSH
13624: LD_VAR 0 8
13628: ARRAY
13629: ST_TO_ADDR
// if x = - 1 then
13630: LD_VAR 0 13
13634: PUSH
13635: LD_INT 1
13637: NEG
13638: EQUAL
13639: IFFALSE 13643
// continue ;
13641: GO 13599
// PrepareHuman ( false , i , skill ) ;
13643: LD_INT 0
13645: PPUSH
13646: LD_VAR 0 8
13650: PPUSH
13651: LD_VAR 0 4
13655: PPUSH
13656: CALL_OW 380
// un := CreateHuman ;
13660: LD_ADDR_VAR 0 14
13664: PUSH
13665: CALL_OW 44
13669: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13670: LD_VAR 0 14
13674: PPUSH
13675: LD_VAR 0 1
13679: PPUSH
13680: CALL_OW 250
13684: PPUSH
13685: LD_VAR 0 1
13689: PPUSH
13690: CALL_OW 251
13694: PPUSH
13695: LD_INT 10
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 50
// result := result ^ un ;
13705: LD_ADDR_VAR 0 7
13709: PUSH
13710: LD_VAR 0 7
13714: PUSH
13715: LD_VAR 0 14
13719: ADD
13720: ST_TO_ADDR
// end ;
13721: GO 13599
13723: POP
13724: POP
// end ; end ;
13725: LD_VAR 0 7
13729: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13730: LD_INT 0
13732: PPUSH
13733: PPUSH
13734: PPUSH
13735: PPUSH
13736: PPUSH
13737: PPUSH
13738: PPUSH
13739: PPUSH
13740: PPUSH
13741: PPUSH
13742: PPUSH
13743: PPUSH
13744: PPUSH
13745: PPUSH
13746: PPUSH
13747: PPUSH
// result := false ;
13748: LD_ADDR_VAR 0 3
13752: PUSH
13753: LD_INT 0
13755: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13756: LD_VAR 0 1
13760: NOT
13761: PUSH
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL_OW 266
13771: PUSH
13772: LD_INT 32
13774: PUSH
13775: LD_INT 33
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: IN
13782: NOT
13783: OR
13784: IFFALSE 13788
// exit ;
13786: GO 14897
// nat := GetNation ( tower ) ;
13788: LD_ADDR_VAR 0 12
13792: PUSH
13793: LD_VAR 0 1
13797: PPUSH
13798: CALL_OW 248
13802: ST_TO_ADDR
// side := GetSide ( tower ) ;
13803: LD_ADDR_VAR 0 16
13807: PUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 255
13817: ST_TO_ADDR
// x := GetX ( tower ) ;
13818: LD_ADDR_VAR 0 10
13822: PUSH
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 250
13832: ST_TO_ADDR
// y := GetY ( tower ) ;
13833: LD_ADDR_VAR 0 11
13837: PUSH
13838: LD_VAR 0 1
13842: PPUSH
13843: CALL_OW 251
13847: ST_TO_ADDR
// if not x or not y then
13848: LD_VAR 0 10
13852: NOT
13853: PUSH
13854: LD_VAR 0 11
13858: NOT
13859: OR
13860: IFFALSE 13864
// exit ;
13862: GO 14897
// weapon := 0 ;
13864: LD_ADDR_VAR 0 18
13868: PUSH
13869: LD_INT 0
13871: ST_TO_ADDR
// fac_list := [ ] ;
13872: LD_ADDR_VAR 0 17
13876: PUSH
13877: EMPTY
13878: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13879: LD_ADDR_VAR 0 6
13883: PUSH
13884: LD_VAR 0 1
13888: PPUSH
13889: CALL_OW 274
13893: PPUSH
13894: LD_VAR 0 2
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL 11468 0 3
13906: PPUSH
13907: LD_INT 30
13909: PUSH
13910: LD_INT 3
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 72
13921: ST_TO_ADDR
// if not factories then
13922: LD_VAR 0 6
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 14897
// for i in factories do
13931: LD_ADDR_VAR 0 8
13935: PUSH
13936: LD_VAR 0 6
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13967
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13944: LD_ADDR_VAR 0 17
13948: PUSH
13949: LD_VAR 0 17
13953: PUSH
13954: LD_VAR 0 8
13958: PPUSH
13959: CALL_OW 478
13963: UNION
13964: ST_TO_ADDR
13965: GO 13941
13967: POP
13968: POP
// if not fac_list then
13969: LD_VAR 0 17
13973: NOT
13974: IFFALSE 13978
// exit ;
13976: GO 14897
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13978: LD_ADDR_VAR 0 5
13982: PUSH
13983: LD_INT 4
13985: PUSH
13986: LD_INT 5
13988: PUSH
13989: LD_INT 9
13991: PUSH
13992: LD_INT 10
13994: PUSH
13995: LD_INT 6
13997: PUSH
13998: LD_INT 7
14000: PUSH
14001: LD_INT 11
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 27
14015: PUSH
14016: LD_INT 28
14018: PUSH
14019: LD_INT 26
14021: PUSH
14022: LD_INT 30
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 43
14033: PUSH
14034: LD_INT 44
14036: PUSH
14037: LD_INT 46
14039: PUSH
14040: LD_INT 45
14042: PUSH
14043: LD_INT 47
14045: PUSH
14046: LD_INT 49
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: LD_VAR 0 12
14066: ARRAY
14067: ST_TO_ADDR
// list := list isect fac_list ;
14068: LD_ADDR_VAR 0 5
14072: PUSH
14073: LD_VAR 0 5
14077: PUSH
14078: LD_VAR 0 17
14082: ISECT
14083: ST_TO_ADDR
// if not list then
14084: LD_VAR 0 5
14088: NOT
14089: IFFALSE 14093
// exit ;
14091: GO 14897
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14093: LD_VAR 0 12
14097: PUSH
14098: LD_INT 3
14100: EQUAL
14101: PUSH
14102: LD_INT 49
14104: PUSH
14105: LD_VAR 0 5
14109: IN
14110: AND
14111: PUSH
14112: LD_INT 31
14114: PPUSH
14115: LD_VAR 0 16
14119: PPUSH
14120: CALL_OW 321
14124: PUSH
14125: LD_INT 2
14127: EQUAL
14128: AND
14129: IFFALSE 14189
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14131: LD_INT 22
14133: PUSH
14134: LD_VAR 0 16
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 35
14145: PUSH
14146: LD_INT 49
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 91
14155: PUSH
14156: LD_VAR 0 1
14160: PUSH
14161: LD_INT 10
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PPUSH
14174: CALL_OW 69
14178: NOT
14179: IFFALSE 14189
// weapon := ru_time_lapser ;
14181: LD_ADDR_VAR 0 18
14185: PUSH
14186: LD_INT 49
14188: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14189: LD_VAR 0 12
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: IN
14204: PUSH
14205: LD_INT 11
14207: PUSH
14208: LD_VAR 0 5
14212: IN
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: LD_VAR 0 5
14221: IN
14222: OR
14223: AND
14224: PUSH
14225: LD_INT 6
14227: PPUSH
14228: LD_VAR 0 16
14232: PPUSH
14233: CALL_OW 321
14237: PUSH
14238: LD_INT 2
14240: EQUAL
14241: AND
14242: IFFALSE 14407
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14244: LD_INT 22
14246: PUSH
14247: LD_VAR 0 16
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 2
14258: PUSH
14259: LD_INT 35
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 35
14271: PUSH
14272: LD_INT 30
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 91
14286: PUSH
14287: LD_VAR 0 1
14291: PUSH
14292: LD_INT 18
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 69
14309: NOT
14310: PUSH
14311: LD_INT 22
14313: PUSH
14314: LD_VAR 0 16
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 2
14325: PUSH
14326: LD_INT 30
14328: PUSH
14329: LD_INT 32
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 30
14338: PUSH
14339: LD_INT 33
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 91
14353: PUSH
14354: LD_VAR 0 1
14358: PUSH
14359: LD_INT 12
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: PPUSH
14375: CALL_OW 69
14379: PUSH
14380: LD_INT 2
14382: GREATER
14383: AND
14384: IFFALSE 14407
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14386: LD_ADDR_VAR 0 18
14390: PUSH
14391: LD_INT 11
14393: PUSH
14394: LD_INT 30
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_VAR 0 12
14405: ARRAY
14406: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14407: LD_VAR 0 18
14411: NOT
14412: PUSH
14413: LD_INT 40
14415: PPUSH
14416: LD_VAR 0 16
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: AND
14430: PUSH
14431: LD_INT 7
14433: PUSH
14434: LD_VAR 0 5
14438: IN
14439: PUSH
14440: LD_INT 28
14442: PUSH
14443: LD_VAR 0 5
14447: IN
14448: OR
14449: PUSH
14450: LD_INT 45
14452: PUSH
14453: LD_VAR 0 5
14457: IN
14458: OR
14459: AND
14460: IFFALSE 14714
// begin hex := GetHexInfo ( x , y ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 10
14471: PPUSH
14472: LD_VAR 0 11
14476: PPUSH
14477: CALL_OW 546
14481: ST_TO_ADDR
// if hex [ 1 ] then
14482: LD_VAR 0 4
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: IFFALSE 14494
// exit ;
14492: GO 14897
// height := hex [ 2 ] ;
14494: LD_ADDR_VAR 0 15
14498: PUSH
14499: LD_VAR 0 4
14503: PUSH
14504: LD_INT 2
14506: ARRAY
14507: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14508: LD_ADDR_VAR 0 14
14512: PUSH
14513: LD_INT 0
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 3
14521: PUSH
14522: LD_INT 5
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: ST_TO_ADDR
// for i in tmp do
14531: LD_ADDR_VAR 0 8
14535: PUSH
14536: LD_VAR 0 14
14540: PUSH
14541: FOR_IN
14542: IFFALSE 14712
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14544: LD_ADDR_VAR 0 9
14548: PUSH
14549: LD_VAR 0 10
14553: PPUSH
14554: LD_VAR 0 8
14558: PPUSH
14559: LD_INT 5
14561: PPUSH
14562: CALL_OW 272
14566: PUSH
14567: LD_VAR 0 11
14571: PPUSH
14572: LD_VAR 0 8
14576: PPUSH
14577: LD_INT 5
14579: PPUSH
14580: CALL_OW 273
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14589: LD_VAR 0 9
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PPUSH
14598: LD_VAR 0 9
14602: PUSH
14603: LD_INT 2
14605: ARRAY
14606: PPUSH
14607: CALL_OW 488
14611: IFFALSE 14710
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: LD_VAR 0 9
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: LD_VAR 0 9
14631: PUSH
14632: LD_INT 2
14634: ARRAY
14635: PPUSH
14636: CALL_OW 546
14640: ST_TO_ADDR
// if hex [ 1 ] then
14641: LD_VAR 0 4
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: IFFALSE 14653
// continue ;
14651: GO 14541
// h := hex [ 2 ] ;
14653: LD_ADDR_VAR 0 13
14657: PUSH
14658: LD_VAR 0 4
14662: PUSH
14663: LD_INT 2
14665: ARRAY
14666: ST_TO_ADDR
// if h + 7 < height then
14667: LD_VAR 0 13
14671: PUSH
14672: LD_INT 7
14674: PLUS
14675: PUSH
14676: LD_VAR 0 15
14680: LESS
14681: IFFALSE 14710
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14683: LD_ADDR_VAR 0 18
14687: PUSH
14688: LD_INT 7
14690: PUSH
14691: LD_INT 28
14693: PUSH
14694: LD_INT 45
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: LD_VAR 0 12
14706: ARRAY
14707: ST_TO_ADDR
// break ;
14708: GO 14712
// end ; end ; end ;
14710: GO 14541
14712: POP
14713: POP
// end ; if not weapon then
14714: LD_VAR 0 18
14718: NOT
14719: IFFALSE 14779
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14721: LD_ADDR_VAR 0 5
14725: PUSH
14726: LD_VAR 0 5
14730: PUSH
14731: LD_INT 11
14733: PUSH
14734: LD_INT 30
14736: PUSH
14737: LD_INT 49
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: DIFF
14745: ST_TO_ADDR
// if not list then
14746: LD_VAR 0 5
14750: NOT
14751: IFFALSE 14755
// exit ;
14753: GO 14897
// weapon := list [ rand ( 1 , list ) ] ;
14755: LD_ADDR_VAR 0 18
14759: PUSH
14760: LD_VAR 0 5
14764: PUSH
14765: LD_INT 1
14767: PPUSH
14768: LD_VAR 0 5
14772: PPUSH
14773: CALL_OW 12
14777: ARRAY
14778: ST_TO_ADDR
// end ; if weapon then
14779: LD_VAR 0 18
14783: IFFALSE 14897
// begin tmp := CostOfWeapon ( weapon ) ;
14785: LD_ADDR_VAR 0 14
14789: PUSH
14790: LD_VAR 0 18
14794: PPUSH
14795: CALL_OW 451
14799: ST_TO_ADDR
// j := GetBase ( tower ) ;
14800: LD_ADDR_VAR 0 9
14804: PUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: CALL_OW 274
14814: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14815: LD_VAR 0 9
14819: PPUSH
14820: LD_INT 1
14822: PPUSH
14823: CALL_OW 275
14827: PUSH
14828: LD_VAR 0 14
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: GREATEREQUAL
14837: PUSH
14838: LD_VAR 0 9
14842: PPUSH
14843: LD_INT 2
14845: PPUSH
14846: CALL_OW 275
14850: PUSH
14851: LD_VAR 0 14
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: GREATEREQUAL
14860: AND
14861: PUSH
14862: LD_VAR 0 9
14866: PPUSH
14867: LD_INT 3
14869: PPUSH
14870: CALL_OW 275
14874: PUSH
14875: LD_VAR 0 14
14879: PUSH
14880: LD_INT 3
14882: ARRAY
14883: GREATEREQUAL
14884: AND
14885: IFFALSE 14897
// result := weapon ;
14887: LD_ADDR_VAR 0 3
14891: PUSH
14892: LD_VAR 0 18
14896: ST_TO_ADDR
// end ; end ;
14897: LD_VAR 0 3
14901: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14902: LD_INT 0
14904: PPUSH
14905: PPUSH
// result := true ;
14906: LD_ADDR_VAR 0 3
14910: PUSH
14911: LD_INT 1
14913: ST_TO_ADDR
// if array1 = array2 then
14914: LD_VAR 0 1
14918: PUSH
14919: LD_VAR 0 2
14923: EQUAL
14924: IFFALSE 14984
// begin for i = 1 to array1 do
14926: LD_ADDR_VAR 0 4
14930: PUSH
14931: DOUBLE
14932: LD_INT 1
14934: DEC
14935: ST_TO_ADDR
14936: LD_VAR 0 1
14940: PUSH
14941: FOR_TO
14942: IFFALSE 14980
// if array1 [ i ] <> array2 [ i ] then
14944: LD_VAR 0 1
14948: PUSH
14949: LD_VAR 0 4
14953: ARRAY
14954: PUSH
14955: LD_VAR 0 2
14959: PUSH
14960: LD_VAR 0 4
14964: ARRAY
14965: NONEQUAL
14966: IFFALSE 14978
// begin result := false ;
14968: LD_ADDR_VAR 0 3
14972: PUSH
14973: LD_INT 0
14975: ST_TO_ADDR
// break ;
14976: GO 14980
// end ;
14978: GO 14941
14980: POP
14981: POP
// end else
14982: GO 14992
// result := false ;
14984: LD_ADDR_VAR 0 3
14988: PUSH
14989: LD_INT 0
14991: ST_TO_ADDR
// end ;
14992: LD_VAR 0 3
14996: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14997: LD_INT 0
14999: PPUSH
15000: PPUSH
// if not array1 or not array2 then
15001: LD_VAR 0 1
15005: NOT
15006: PUSH
15007: LD_VAR 0 2
15011: NOT
15012: OR
15013: IFFALSE 15017
// exit ;
15015: GO 15081
// result := true ;
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_INT 1
15024: ST_TO_ADDR
// for i = 1 to array1 do
15025: LD_ADDR_VAR 0 4
15029: PUSH
15030: DOUBLE
15031: LD_INT 1
15033: DEC
15034: ST_TO_ADDR
15035: LD_VAR 0 1
15039: PUSH
15040: FOR_TO
15041: IFFALSE 15079
// if array1 [ i ] <> array2 [ i ] then
15043: LD_VAR 0 1
15047: PUSH
15048: LD_VAR 0 4
15052: ARRAY
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: LD_VAR 0 4
15063: ARRAY
15064: NONEQUAL
15065: IFFALSE 15077
// begin result := false ;
15067: LD_ADDR_VAR 0 3
15071: PUSH
15072: LD_INT 0
15074: ST_TO_ADDR
// break ;
15075: GO 15079
// end ;
15077: GO 15040
15079: POP
15080: POP
// end ;
15081: LD_VAR 0 3
15085: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
15090: PPUSH
// pom := GetBase ( fac ) ;
15091: LD_ADDR_VAR 0 5
15095: PUSH
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 274
15105: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15106: LD_ADDR_VAR 0 4
15110: PUSH
15111: LD_VAR 0 2
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: PPUSH
15120: LD_VAR 0 2
15124: PUSH
15125: LD_INT 2
15127: ARRAY
15128: PPUSH
15129: LD_VAR 0 2
15133: PUSH
15134: LD_INT 3
15136: ARRAY
15137: PPUSH
15138: LD_VAR 0 2
15142: PUSH
15143: LD_INT 4
15145: ARRAY
15146: PPUSH
15147: CALL_OW 449
15151: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15152: LD_ADDR_VAR 0 3
15156: PUSH
15157: LD_VAR 0 5
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 275
15169: PUSH
15170: LD_VAR 0 4
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: GREATEREQUAL
15179: PUSH
15180: LD_VAR 0 5
15184: PPUSH
15185: LD_INT 2
15187: PPUSH
15188: CALL_OW 275
15192: PUSH
15193: LD_VAR 0 4
15197: PUSH
15198: LD_INT 2
15200: ARRAY
15201: GREATEREQUAL
15202: AND
15203: PUSH
15204: LD_VAR 0 5
15208: PPUSH
15209: LD_INT 3
15211: PPUSH
15212: CALL_OW 275
15216: PUSH
15217: LD_VAR 0 4
15221: PUSH
15222: LD_INT 3
15224: ARRAY
15225: GREATEREQUAL
15226: AND
15227: ST_TO_ADDR
// end ;
15228: LD_VAR 0 3
15232: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15233: LD_INT 0
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
// pom := GetBase ( building ) ;
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 274
15253: ST_TO_ADDR
// if not pom then
15254: LD_VAR 0 3
15258: NOT
15259: IFFALSE 15263
// exit ;
15261: GO 15433
// btype := GetBType ( building ) ;
15263: LD_ADDR_VAR 0 5
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 266
15277: ST_TO_ADDR
// if btype = b_armoury then
15278: LD_VAR 0 5
15282: PUSH
15283: LD_INT 4
15285: EQUAL
15286: IFFALSE 15296
// btype := b_barracks ;
15288: LD_ADDR_VAR 0 5
15292: PUSH
15293: LD_INT 5
15295: ST_TO_ADDR
// if btype = b_depot then
15296: LD_VAR 0 5
15300: PUSH
15301: LD_INT 0
15303: EQUAL
15304: IFFALSE 15314
// btype := b_warehouse ;
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if btype = b_workshop then
15314: LD_VAR 0 5
15318: PUSH
15319: LD_INT 2
15321: EQUAL
15322: IFFALSE 15332
// btype := b_factory ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 3
15331: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15332: LD_ADDR_VAR 0 4
15336: PUSH
15337: LD_VAR 0 5
15341: PPUSH
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 248
15351: PPUSH
15352: CALL_OW 450
15356: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15357: LD_ADDR_VAR 0 2
15361: PUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 275
15374: PUSH
15375: LD_VAR 0 4
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: GREATEREQUAL
15384: PUSH
15385: LD_VAR 0 3
15389: PPUSH
15390: LD_INT 2
15392: PPUSH
15393: CALL_OW 275
15397: PUSH
15398: LD_VAR 0 4
15402: PUSH
15403: LD_INT 2
15405: ARRAY
15406: GREATEREQUAL
15407: AND
15408: PUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: LD_INT 3
15416: PPUSH
15417: CALL_OW 275
15421: PUSH
15422: LD_VAR 0 4
15426: PUSH
15427: LD_INT 3
15429: ARRAY
15430: GREATEREQUAL
15431: AND
15432: ST_TO_ADDR
// end ;
15433: LD_VAR 0 2
15437: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15438: LD_INT 0
15440: PPUSH
15441: PPUSH
15442: PPUSH
// pom := GetBase ( building ) ;
15443: LD_ADDR_VAR 0 4
15447: PUSH
15448: LD_VAR 0 1
15452: PPUSH
15453: CALL_OW 274
15457: ST_TO_ADDR
// if not pom then
15458: LD_VAR 0 4
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15568
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15467: LD_ADDR_VAR 0 5
15471: PUSH
15472: LD_VAR 0 2
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 248
15486: PPUSH
15487: CALL_OW 450
15491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15492: LD_ADDR_VAR 0 3
15496: PUSH
15497: LD_VAR 0 4
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: CALL_OW 275
15509: PUSH
15510: LD_VAR 0 5
15514: PUSH
15515: LD_INT 1
15517: ARRAY
15518: GREATEREQUAL
15519: PUSH
15520: LD_VAR 0 4
15524: PPUSH
15525: LD_INT 2
15527: PPUSH
15528: CALL_OW 275
15532: PUSH
15533: LD_VAR 0 5
15537: PUSH
15538: LD_INT 2
15540: ARRAY
15541: GREATEREQUAL
15542: AND
15543: PUSH
15544: LD_VAR 0 4
15548: PPUSH
15549: LD_INT 3
15551: PPUSH
15552: CALL_OW 275
15556: PUSH
15557: LD_VAR 0 5
15561: PUSH
15562: LD_INT 3
15564: ARRAY
15565: GREATEREQUAL
15566: AND
15567: ST_TO_ADDR
// end ;
15568: LD_VAR 0 3
15572: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15573: LD_INT 0
15575: PPUSH
15576: PPUSH
15577: PPUSH
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
// result := false ;
15586: LD_ADDR_VAR 0 8
15590: PUSH
15591: LD_INT 0
15593: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15594: LD_VAR 0 5
15598: NOT
15599: PUSH
15600: LD_VAR 0 1
15604: NOT
15605: OR
15606: PUSH
15607: LD_VAR 0 2
15611: NOT
15612: OR
15613: PUSH
15614: LD_VAR 0 3
15618: NOT
15619: OR
15620: IFFALSE 15624
// exit ;
15622: GO 16438
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15624: LD_ADDR_VAR 0 14
15628: PUSH
15629: LD_VAR 0 1
15633: PPUSH
15634: LD_VAR 0 2
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: LD_VAR 0 4
15648: PPUSH
15649: LD_VAR 0 5
15653: PUSH
15654: LD_INT 1
15656: ARRAY
15657: PPUSH
15658: CALL_OW 248
15662: PPUSH
15663: LD_INT 0
15665: PPUSH
15666: CALL 17671 0 6
15670: ST_TO_ADDR
// if not hexes then
15671: LD_VAR 0 14
15675: NOT
15676: IFFALSE 15680
// exit ;
15678: GO 16438
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15680: LD_ADDR_VAR 0 17
15684: PUSH
15685: LD_VAR 0 5
15689: PPUSH
15690: LD_INT 22
15692: PUSH
15693: LD_VAR 0 13
15697: PPUSH
15698: CALL_OW 255
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 30
15712: PUSH
15713: LD_INT 0
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 30
15722: PUSH
15723: LD_INT 1
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PPUSH
15739: CALL_OW 72
15743: ST_TO_ADDR
// for i = 1 to hexes do
15744: LD_ADDR_VAR 0 9
15748: PUSH
15749: DOUBLE
15750: LD_INT 1
15752: DEC
15753: ST_TO_ADDR
15754: LD_VAR 0 14
15758: PUSH
15759: FOR_TO
15760: IFFALSE 16436
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15762: LD_ADDR_VAR 0 13
15766: PUSH
15767: LD_VAR 0 14
15771: PUSH
15772: LD_VAR 0 9
15776: ARRAY
15777: PUSH
15778: LD_INT 1
15780: ARRAY
15781: PPUSH
15782: LD_VAR 0 14
15786: PUSH
15787: LD_VAR 0 9
15791: ARRAY
15792: PUSH
15793: LD_INT 2
15795: ARRAY
15796: PPUSH
15797: CALL_OW 428
15801: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15802: LD_VAR 0 14
15806: PUSH
15807: LD_VAR 0 9
15811: ARRAY
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: PPUSH
15817: LD_VAR 0 14
15821: PUSH
15822: LD_VAR 0 9
15826: ARRAY
15827: PUSH
15828: LD_INT 2
15830: ARRAY
15831: PPUSH
15832: CALL_OW 351
15836: PUSH
15837: LD_VAR 0 14
15841: PUSH
15842: LD_VAR 0 9
15846: ARRAY
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 14
15856: PUSH
15857: LD_VAR 0 9
15861: ARRAY
15862: PUSH
15863: LD_INT 2
15865: ARRAY
15866: PPUSH
15867: CALL_OW 488
15871: NOT
15872: OR
15873: PUSH
15874: LD_VAR 0 13
15878: PPUSH
15879: CALL_OW 247
15883: PUSH
15884: LD_INT 3
15886: EQUAL
15887: OR
15888: IFFALSE 15894
// exit ;
15890: POP
15891: POP
15892: GO 16438
// if not tmp then
15894: LD_VAR 0 13
15898: NOT
15899: IFFALSE 15903
// continue ;
15901: GO 15759
// result := true ;
15903: LD_ADDR_VAR 0 8
15907: PUSH
15908: LD_INT 1
15910: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15911: LD_VAR 0 6
15915: PUSH
15916: LD_VAR 0 13
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: AND
15930: PUSH
15931: LD_VAR 0 13
15935: PPUSH
15936: CALL_OW 263
15940: PUSH
15941: LD_INT 1
15943: EQUAL
15944: AND
15945: IFFALSE 16109
// begin if IsDrivenBy ( tmp ) then
15947: LD_VAR 0 13
15951: PPUSH
15952: CALL_OW 311
15956: IFFALSE 15960
// continue ;
15958: GO 15759
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15960: LD_VAR 0 6
15964: PPUSH
15965: LD_INT 3
15967: PUSH
15968: LD_INT 60
15970: PUSH
15971: EMPTY
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 3
15980: PUSH
15981: LD_INT 55
15983: PUSH
15984: EMPTY
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 72
15999: IFFALSE 16107
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16001: LD_ADDR_VAR 0 18
16005: PUSH
16006: LD_VAR 0 6
16010: PPUSH
16011: LD_INT 3
16013: PUSH
16014: LD_INT 60
16016: PUSH
16017: EMPTY
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 3
16026: PUSH
16027: LD_INT 55
16029: PUSH
16030: EMPTY
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 72
16045: PUSH
16046: LD_INT 1
16048: ARRAY
16049: ST_TO_ADDR
// if IsInUnit ( driver ) then
16050: LD_VAR 0 18
16054: PPUSH
16055: CALL_OW 310
16059: IFFALSE 16070
// ComExit ( driver ) ;
16061: LD_VAR 0 18
16065: PPUSH
16066: CALL 41359 0 1
// AddComEnterUnit ( driver , tmp ) ;
16070: LD_VAR 0 18
16074: PPUSH
16075: LD_VAR 0 13
16079: PPUSH
16080: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16084: LD_VAR 0 18
16088: PPUSH
16089: LD_VAR 0 7
16093: PPUSH
16094: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16098: LD_VAR 0 18
16102: PPUSH
16103: CALL_OW 181
// end ; continue ;
16107: GO 15759
// end ; if not cleaners or not tmp in cleaners then
16109: LD_VAR 0 6
16113: NOT
16114: PUSH
16115: LD_VAR 0 13
16119: PUSH
16120: LD_VAR 0 6
16124: IN
16125: NOT
16126: OR
16127: IFFALSE 16434
// begin if dep then
16129: LD_VAR 0 17
16133: IFFALSE 16269
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16135: LD_ADDR_VAR 0 16
16139: PUSH
16140: LD_VAR 0 17
16144: PUSH
16145: LD_INT 1
16147: ARRAY
16148: PPUSH
16149: CALL_OW 250
16153: PPUSH
16154: LD_VAR 0 17
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: PPUSH
16163: CALL_OW 254
16167: PPUSH
16168: LD_INT 5
16170: PPUSH
16171: CALL_OW 272
16175: PUSH
16176: LD_VAR 0 17
16180: PUSH
16181: LD_INT 1
16183: ARRAY
16184: PPUSH
16185: CALL_OW 251
16189: PPUSH
16190: LD_VAR 0 17
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 254
16203: PPUSH
16204: LD_INT 5
16206: PPUSH
16207: CALL_OW 273
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16216: LD_VAR 0 16
16220: PUSH
16221: LD_INT 1
16223: ARRAY
16224: PPUSH
16225: LD_VAR 0 16
16229: PUSH
16230: LD_INT 2
16232: ARRAY
16233: PPUSH
16234: CALL_OW 488
16238: IFFALSE 16269
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16240: LD_VAR 0 13
16244: PPUSH
16245: LD_VAR 0 16
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: PPUSH
16254: LD_VAR 0 16
16258: PUSH
16259: LD_INT 2
16261: ARRAY
16262: PPUSH
16263: CALL_OW 111
// continue ;
16267: GO 15759
// end ; end ; r := GetDir ( tmp ) ;
16269: LD_ADDR_VAR 0 15
16273: PUSH
16274: LD_VAR 0 13
16278: PPUSH
16279: CALL_OW 254
16283: ST_TO_ADDR
// if r = 5 then
16284: LD_VAR 0 15
16288: PUSH
16289: LD_INT 5
16291: EQUAL
16292: IFFALSE 16302
// r := 0 ;
16294: LD_ADDR_VAR 0 15
16298: PUSH
16299: LD_INT 0
16301: ST_TO_ADDR
// for j = r to 5 do
16302: LD_ADDR_VAR 0 10
16306: PUSH
16307: DOUBLE
16308: LD_VAR 0 15
16312: DEC
16313: ST_TO_ADDR
16314: LD_INT 5
16316: PUSH
16317: FOR_TO
16318: IFFALSE 16432
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16320: LD_ADDR_VAR 0 11
16324: PUSH
16325: LD_VAR 0 13
16329: PPUSH
16330: CALL_OW 250
16334: PPUSH
16335: LD_VAR 0 10
16339: PPUSH
16340: LD_INT 2
16342: PPUSH
16343: CALL_OW 272
16347: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16348: LD_ADDR_VAR 0 12
16352: PUSH
16353: LD_VAR 0 13
16357: PPUSH
16358: CALL_OW 251
16362: PPUSH
16363: LD_VAR 0 10
16367: PPUSH
16368: LD_INT 2
16370: PPUSH
16371: CALL_OW 273
16375: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16376: LD_VAR 0 11
16380: PPUSH
16381: LD_VAR 0 12
16385: PPUSH
16386: CALL_OW 488
16390: PUSH
16391: LD_VAR 0 11
16395: PPUSH
16396: LD_VAR 0 12
16400: PPUSH
16401: CALL_OW 428
16405: NOT
16406: AND
16407: IFFALSE 16430
// begin ComMoveXY ( tmp , _x , _y ) ;
16409: LD_VAR 0 13
16413: PPUSH
16414: LD_VAR 0 11
16418: PPUSH
16419: LD_VAR 0 12
16423: PPUSH
16424: CALL_OW 111
// break ;
16428: GO 16432
// end ; end ;
16430: GO 16317
16432: POP
16433: POP
// end ; end ;
16434: GO 15759
16436: POP
16437: POP
// end ;
16438: LD_VAR 0 8
16442: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16443: LD_INT 0
16445: PPUSH
// result := true ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: LD_INT 1
16453: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 24
16461: DOUBLE
16462: EQUAL
16463: IFTRUE 16473
16465: LD_INT 33
16467: DOUBLE
16468: EQUAL
16469: IFTRUE 16473
16471: GO 16498
16473: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: LD_INT 32
16481: PPUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 321
16491: PUSH
16492: LD_INT 2
16494: EQUAL
16495: ST_TO_ADDR
16496: GO 16814
16498: LD_INT 20
16500: DOUBLE
16501: EQUAL
16502: IFTRUE 16506
16504: GO 16531
16506: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16507: LD_ADDR_VAR 0 3
16511: PUSH
16512: LD_INT 6
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 321
16524: PUSH
16525: LD_INT 2
16527: EQUAL
16528: ST_TO_ADDR
16529: GO 16814
16531: LD_INT 22
16533: DOUBLE
16534: EQUAL
16535: IFTRUE 16545
16537: LD_INT 36
16539: DOUBLE
16540: EQUAL
16541: IFTRUE 16545
16543: GO 16570
16545: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 15
16553: PPUSH
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 321
16563: PUSH
16564: LD_INT 2
16566: EQUAL
16567: ST_TO_ADDR
16568: GO 16814
16570: LD_INT 30
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16603
16578: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16579: LD_ADDR_VAR 0 3
16583: PUSH
16584: LD_INT 20
16586: PPUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 321
16596: PUSH
16597: LD_INT 2
16599: EQUAL
16600: ST_TO_ADDR
16601: GO 16814
16603: LD_INT 28
16605: DOUBLE
16606: EQUAL
16607: IFTRUE 16617
16609: LD_INT 21
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16642
16617: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16618: LD_ADDR_VAR 0 3
16622: PUSH
16623: LD_INT 21
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 321
16635: PUSH
16636: LD_INT 2
16638: EQUAL
16639: ST_TO_ADDR
16640: GO 16814
16642: LD_INT 16
16644: DOUBLE
16645: EQUAL
16646: IFTRUE 16650
16648: GO 16675
16650: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_INT 84
16658: PPUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 321
16668: PUSH
16669: LD_INT 2
16671: EQUAL
16672: ST_TO_ADDR
16673: GO 16814
16675: LD_INT 19
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16689
16681: LD_INT 23
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16689
16687: GO 16714
16689: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16690: LD_ADDR_VAR 0 3
16694: PUSH
16695: LD_INT 83
16697: PPUSH
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 321
16707: PUSH
16708: LD_INT 2
16710: EQUAL
16711: ST_TO_ADDR
16712: GO 16814
16714: LD_INT 17
16716: DOUBLE
16717: EQUAL
16718: IFTRUE 16722
16720: GO 16747
16722: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_INT 39
16730: PPUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 321
16740: PUSH
16741: LD_INT 2
16743: EQUAL
16744: ST_TO_ADDR
16745: GO 16814
16747: LD_INT 18
16749: DOUBLE
16750: EQUAL
16751: IFTRUE 16755
16753: GO 16780
16755: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16756: LD_ADDR_VAR 0 3
16760: PUSH
16761: LD_INT 40
16763: PPUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 321
16773: PUSH
16774: LD_INT 2
16776: EQUAL
16777: ST_TO_ADDR
16778: GO 16814
16780: LD_INT 27
16782: DOUBLE
16783: EQUAL
16784: IFTRUE 16788
16786: GO 16813
16788: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16789: LD_ADDR_VAR 0 3
16793: PUSH
16794: LD_INT 35
16796: PPUSH
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 321
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: ST_TO_ADDR
16811: GO 16814
16813: POP
// end ;
16814: LD_VAR 0 3
16818: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
// result := false ;
16832: LD_ADDR_VAR 0 6
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16840: LD_VAR 0 1
16844: NOT
16845: PUSH
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 266
16855: PUSH
16856: LD_INT 0
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: IN
16866: NOT
16867: OR
16868: PUSH
16869: LD_VAR 0 2
16873: NOT
16874: OR
16875: PUSH
16876: LD_VAR 0 5
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: LD_INT 2
16889: PUSH
16890: LD_INT 3
16892: PUSH
16893: LD_INT 4
16895: PUSH
16896: LD_INT 5
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: IN
16907: NOT
16908: OR
16909: PUSH
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_VAR 0 4
16919: PPUSH
16920: CALL_OW 488
16924: NOT
16925: OR
16926: IFFALSE 16930
// exit ;
16928: GO 17666
// side := GetSide ( depot ) ;
16930: LD_ADDR_VAR 0 9
16934: PUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 255
16944: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16945: LD_VAR 0 9
16949: PPUSH
16950: LD_VAR 0 2
16954: PPUSH
16955: CALL 16443 0 2
16959: NOT
16960: IFFALSE 16964
// exit ;
16962: GO 17666
// pom := GetBase ( depot ) ;
16964: LD_ADDR_VAR 0 10
16968: PUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 274
16978: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16979: LD_ADDR_VAR 0 11
16983: PUSH
16984: LD_VAR 0 2
16988: PPUSH
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 248
16998: PPUSH
16999: CALL_OW 450
17003: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17004: LD_VAR 0 10
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: CALL_OW 275
17016: PUSH
17017: LD_VAR 0 11
17021: PUSH
17022: LD_INT 1
17024: ARRAY
17025: GREATEREQUAL
17026: PUSH
17027: LD_VAR 0 10
17031: PPUSH
17032: LD_INT 2
17034: PPUSH
17035: CALL_OW 275
17039: PUSH
17040: LD_VAR 0 11
17044: PUSH
17045: LD_INT 2
17047: ARRAY
17048: GREATEREQUAL
17049: AND
17050: PUSH
17051: LD_VAR 0 10
17055: PPUSH
17056: LD_INT 3
17058: PPUSH
17059: CALL_OW 275
17063: PUSH
17064: LD_VAR 0 11
17068: PUSH
17069: LD_INT 3
17071: ARRAY
17072: GREATEREQUAL
17073: AND
17074: NOT
17075: IFFALSE 17079
// exit ;
17077: GO 17666
// if GetBType ( depot ) = b_depot then
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 266
17088: PUSH
17089: LD_INT 0
17091: EQUAL
17092: IFFALSE 17104
// dist := 28 else
17094: LD_ADDR_VAR 0 14
17098: PUSH
17099: LD_INT 28
17101: ST_TO_ADDR
17102: GO 17112
// dist := 36 ;
17104: LD_ADDR_VAR 0 14
17108: PUSH
17109: LD_INT 36
17111: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17112: LD_VAR 0 1
17116: PPUSH
17117: LD_VAR 0 3
17121: PPUSH
17122: LD_VAR 0 4
17126: PPUSH
17127: CALL_OW 297
17131: PUSH
17132: LD_VAR 0 14
17136: GREATER
17137: IFFALSE 17141
// exit ;
17139: GO 17666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17141: LD_ADDR_VAR 0 12
17145: PUSH
17146: LD_VAR 0 2
17150: PPUSH
17151: LD_VAR 0 3
17155: PPUSH
17156: LD_VAR 0 4
17160: PPUSH
17161: LD_VAR 0 5
17165: PPUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 248
17175: PPUSH
17176: LD_INT 0
17178: PPUSH
17179: CALL 17671 0 6
17183: ST_TO_ADDR
// if not hexes then
17184: LD_VAR 0 12
17188: NOT
17189: IFFALSE 17193
// exit ;
17191: GO 17666
// hex := GetHexInfo ( x , y ) ;
17193: LD_ADDR_VAR 0 15
17197: PUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: LD_VAR 0 4
17207: PPUSH
17208: CALL_OW 546
17212: ST_TO_ADDR
// if hex [ 1 ] then
17213: LD_VAR 0 15
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: IFFALSE 17225
// exit ;
17223: GO 17666
// height := hex [ 2 ] ;
17225: LD_ADDR_VAR 0 13
17229: PUSH
17230: LD_VAR 0 15
17234: PUSH
17235: LD_INT 2
17237: ARRAY
17238: ST_TO_ADDR
// for i = 1 to hexes do
17239: LD_ADDR_VAR 0 7
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_VAR 0 12
17253: PUSH
17254: FOR_TO
17255: IFFALSE 17585
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17257: LD_VAR 0 12
17261: PUSH
17262: LD_VAR 0 7
17266: ARRAY
17267: PUSH
17268: LD_INT 1
17270: ARRAY
17271: PPUSH
17272: LD_VAR 0 12
17276: PUSH
17277: LD_VAR 0 7
17281: ARRAY
17282: PUSH
17283: LD_INT 2
17285: ARRAY
17286: PPUSH
17287: CALL_OW 488
17291: NOT
17292: PUSH
17293: LD_VAR 0 12
17297: PUSH
17298: LD_VAR 0 7
17302: ARRAY
17303: PUSH
17304: LD_INT 1
17306: ARRAY
17307: PPUSH
17308: LD_VAR 0 12
17312: PUSH
17313: LD_VAR 0 7
17317: ARRAY
17318: PUSH
17319: LD_INT 2
17321: ARRAY
17322: PPUSH
17323: CALL_OW 428
17327: PUSH
17328: LD_INT 0
17330: GREATER
17331: OR
17332: PUSH
17333: LD_VAR 0 12
17337: PUSH
17338: LD_VAR 0 7
17342: ARRAY
17343: PUSH
17344: LD_INT 1
17346: ARRAY
17347: PPUSH
17348: LD_VAR 0 12
17352: PUSH
17353: LD_VAR 0 7
17357: ARRAY
17358: PUSH
17359: LD_INT 2
17361: ARRAY
17362: PPUSH
17363: CALL_OW 351
17367: OR
17368: IFFALSE 17374
// exit ;
17370: POP
17371: POP
17372: GO 17666
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17374: LD_ADDR_VAR 0 8
17378: PUSH
17379: LD_VAR 0 12
17383: PUSH
17384: LD_VAR 0 7
17388: ARRAY
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: LD_VAR 0 12
17398: PUSH
17399: LD_VAR 0 7
17403: ARRAY
17404: PUSH
17405: LD_INT 2
17407: ARRAY
17408: PPUSH
17409: CALL_OW 546
17413: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17414: LD_VAR 0 8
17418: PUSH
17419: LD_INT 1
17421: ARRAY
17422: PUSH
17423: LD_VAR 0 8
17427: PUSH
17428: LD_INT 2
17430: ARRAY
17431: PUSH
17432: LD_VAR 0 13
17436: PUSH
17437: LD_INT 2
17439: PLUS
17440: GREATER
17441: OR
17442: PUSH
17443: LD_VAR 0 8
17447: PUSH
17448: LD_INT 2
17450: ARRAY
17451: PUSH
17452: LD_VAR 0 13
17456: PUSH
17457: LD_INT 2
17459: MINUS
17460: LESS
17461: OR
17462: PUSH
17463: LD_VAR 0 8
17467: PUSH
17468: LD_INT 3
17470: ARRAY
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: LD_INT 8
17477: PUSH
17478: LD_INT 9
17480: PUSH
17481: LD_INT 10
17483: PUSH
17484: LD_INT 11
17486: PUSH
17487: LD_INT 12
17489: PUSH
17490: LD_INT 13
17492: PUSH
17493: LD_INT 16
17495: PUSH
17496: LD_INT 17
17498: PUSH
17499: LD_INT 18
17501: PUSH
17502: LD_INT 19
17504: PUSH
17505: LD_INT 20
17507: PUSH
17508: LD_INT 21
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: IN
17526: NOT
17527: OR
17528: PUSH
17529: LD_VAR 0 8
17533: PUSH
17534: LD_INT 5
17536: ARRAY
17537: NOT
17538: OR
17539: PUSH
17540: LD_VAR 0 8
17544: PUSH
17545: LD_INT 6
17547: ARRAY
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 7
17557: PUSH
17558: LD_INT 9
17560: PUSH
17561: LD_INT 10
17563: PUSH
17564: LD_INT 11
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: IN
17575: NOT
17576: OR
17577: IFFALSE 17583
// exit ;
17579: POP
17580: POP
17581: GO 17666
// end ;
17583: GO 17254
17585: POP
17586: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17587: LD_VAR 0 9
17591: PPUSH
17592: LD_VAR 0 3
17596: PPUSH
17597: LD_VAR 0 4
17601: PPUSH
17602: LD_INT 20
17604: PPUSH
17605: CALL 9618 0 4
17609: PUSH
17610: LD_INT 4
17612: ARRAY
17613: IFFALSE 17617
// exit ;
17615: GO 17666
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17617: LD_VAR 0 2
17621: PUSH
17622: LD_INT 29
17624: PUSH
17625: LD_INT 30
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: IN
17632: PUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_VAR 0 4
17642: PPUSH
17643: LD_VAR 0 9
17647: PPUSH
17648: CALL_OW 440
17652: NOT
17653: AND
17654: IFFALSE 17658
// exit ;
17656: GO 17666
// result := true ;
17658: LD_ADDR_VAR 0 6
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// end ;
17666: LD_VAR 0 6
17670: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17671: LD_INT 0
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
// result = [ ] ;
17731: LD_ADDR_VAR 0 7
17735: PUSH
17736: EMPTY
17737: ST_TO_ADDR
// temp_list = [ ] ;
17738: LD_ADDR_VAR 0 9
17742: PUSH
17743: EMPTY
17744: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17745: LD_VAR 0 4
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: LD_INT 3
17761: PUSH
17762: LD_INT 4
17764: PUSH
17765: LD_INT 5
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: IN
17776: NOT
17777: PUSH
17778: LD_VAR 0 1
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: IN
17793: PUSH
17794: LD_VAR 0 5
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: LD_INT 3
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: IN
17813: NOT
17814: AND
17815: OR
17816: IFFALSE 17820
// exit ;
17818: GO 36211
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17820: LD_VAR 0 1
17824: PUSH
17825: LD_INT 6
17827: PUSH
17828: LD_INT 7
17830: PUSH
17831: LD_INT 8
17833: PUSH
17834: LD_INT 13
17836: PUSH
17837: LD_INT 12
17839: PUSH
17840: LD_INT 15
17842: PUSH
17843: LD_INT 11
17845: PUSH
17846: LD_INT 14
17848: PUSH
17849: LD_INT 10
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: IN
17863: IFFALSE 17873
// btype = b_lab ;
17865: LD_ADDR_VAR 0 1
17869: PUSH
17870: LD_INT 6
17872: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17873: LD_VAR 0 6
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: IN
17892: NOT
17893: PUSH
17894: LD_VAR 0 1
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: LD_INT 2
17907: PUSH
17908: LD_INT 3
17910: PUSH
17911: LD_INT 6
17913: PUSH
17914: LD_INT 36
17916: PUSH
17917: LD_INT 4
17919: PUSH
17920: LD_INT 5
17922: PUSH
17923: LD_INT 31
17925: PUSH
17926: LD_INT 32
17928: PUSH
17929: LD_INT 33
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: IN
17945: NOT
17946: PUSH
17947: LD_VAR 0 6
17951: PUSH
17952: LD_INT 1
17954: EQUAL
17955: AND
17956: OR
17957: PUSH
17958: LD_VAR 0 1
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: LD_INT 3
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: IN
17973: NOT
17974: PUSH
17975: LD_VAR 0 6
17979: PUSH
17980: LD_INT 2
17982: EQUAL
17983: AND
17984: OR
17985: IFFALSE 17995
// mode = 0 ;
17987: LD_ADDR_VAR 0 6
17991: PUSH
17992: LD_INT 0
17994: ST_TO_ADDR
// case mode of 0 :
17995: LD_VAR 0 6
17999: PUSH
18000: LD_INT 0
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18008
18006: GO 29461
18008: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18009: LD_ADDR_VAR 0 11
18013: PUSH
18014: LD_INT 0
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: LD_INT 1
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: LD_INT 0
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: NEG
18091: PUSH
18092: LD_INT 2
18094: NEG
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: LD_INT 2
18105: NEG
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: LD_INT 2
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: LD_INT 3
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 0
18165: PUSH
18166: LD_INT 3
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: NEG
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18202: LD_ADDR_VAR 0 12
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 1
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 1
18260: NEG
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: LD_INT 1
18275: NEG
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: LD_INT 1
18286: NEG
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 2
18325: NEG
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 2
18336: NEG
18337: PUSH
18338: LD_INT 1
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 3
18359: NEG
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 3
18370: NEG
18371: PUSH
18372: LD_INT 1
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18398: LD_ADDR_VAR 0 13
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: LD_INT 2
18483: NEG
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: LD_INT 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 2
18521: NEG
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 2
18545: NEG
18546: PUSH
18547: LD_INT 3
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 3
18557: NEG
18558: PUSH
18559: LD_INT 2
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 3
18569: NEG
18570: PUSH
18571: LD_INT 3
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18597: LD_ADDR_VAR 0 14
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: NEG
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 1
18732: NEG
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 3
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 3
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: LD_INT 2
18769: NEG
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18793: LD_ADDR_VAR 0 15
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: LD_INT 1
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 1
18942: NEG
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 3
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 3
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18986: LD_ADDR_VAR 0 16
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 2
19109: NEG
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: NEG
19122: PUSH
19123: LD_INT 2
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 3
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 3
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 3
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19179: LD_ADDR_VAR 0 17
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: LD_INT 1
19286: NEG
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: NEG
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19409: LD_ADDR_VAR 0 18
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 2
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 2
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19639: LD_ADDR_VAR 0 19
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: LD_INT 2
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: NEG
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: NEG
19839: PUSH
19840: LD_INT 2
19842: NEG
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19869: LD_ADDR_VAR 0 20
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 2
20056: NEG
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 2
20068: NEG
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20099: LD_ADDR_VAR 0 21
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: LD_INT 0
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 0
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: LD_INT 1
20206: NEG
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20329: LD_ADDR_VAR 0 22
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: LD_INT 0
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: LD_INT 2
20414: NEG
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 0
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: LD_INT 1
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: NEG
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 2
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20559: LD_ADDR_VAR 0 23
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: LD_INT 2
20644: NEG
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: NEG
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: LD_INT 1
20750: NEG
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: LD_INT 3
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: LD_INT 3
20786: NEG
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: LD_INT 2
20797: NEG
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 1
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20839: LD_ADDR_VAR 0 24
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: NEG
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 3
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 3
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21115: LD_ADDR_VAR 0 25
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 1
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 2
21302: NEG
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 2
21314: NEG
21315: PUSH
21316: LD_INT 2
21318: NEG
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 3
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 3
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21389: LD_ADDR_VAR 0 26
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: LD_INT 1
21462: NEG
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 2
21474: NEG
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 2
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 0
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: LD_INT 0
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: LD_INT 2
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 3
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 1
21620: NEG
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21665: LD_ADDR_VAR 0 27
21669: PUSH
21670: LD_INT 0
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: LD_INT 2
21750: NEG
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 2
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: LD_INT 2
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 1
21830: NEG
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: LD_INT 2
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 3
21898: NEG
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 3
21910: NEG
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21945: LD_ADDR_VAR 0 28
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 1
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: LD_INT 1
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: LD_INT 2
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: LD_INT 2
22041: NEG
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: LD_INT 1
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: LD_INT 2
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: LD_INT 3
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: LD_INT 3
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 3
22180: NEG
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 3
22192: NEG
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22227: LD_ADDR_VAR 0 29
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: LD_INT 1
22247: NEG
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: NEG
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: LD_INT 2
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 2
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 2
22393: NEG
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 2
22405: NEG
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: LD_INT 3
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 3
22471: NEG
22472: PUSH
22473: LD_INT 2
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22506: LD_ADDR_VAR 0 30
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: LD_INT 2
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: NEG
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 2
22683: NEG
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: LD_INT 3
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: LD_INT 3
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 2
22738: NEG
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 3
22749: NEG
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22784: LD_ADDR_VAR 0 31
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 1
22804: NEG
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: NEG
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: LD_INT 2
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 1
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 2
22949: NEG
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: NEG
22974: PUSH
22975: LD_INT 3
22977: NEG
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 3
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: NEG
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 3
23027: NEG
23028: PUSH
23029: LD_INT 2
23031: NEG
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23062: LD_ADDR_VAR 0 32
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: LD_INT 3
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 3
23305: NEG
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23340: LD_ADDR_VAR 0 33
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: LD_INT 3
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 2
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 3
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 3
23584: NEG
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23619: LD_ADDR_VAR 0 34
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 2
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: NEG
23787: PUSH
23788: LD_INT 1
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: NEG
23799: PUSH
23800: LD_INT 2
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 3
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 3
23864: NEG
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23899: LD_ADDR_VAR 0 35
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: NEG
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24011: LD_ADDR_VAR 0 36
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: LD_INT 2
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24123: LD_ADDR_VAR 0 37
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24235: LD_ADDR_VAR 0 38
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24347: LD_ADDR_VAR 0 39
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: LD_INT 2
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24459: LD_ADDR_VAR 0 40
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24571: LD_ADDR_VAR 0 41
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: NEG
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 2
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 2
24737: NEG
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 2
24749: NEG
24750: PUSH
24751: LD_INT 2
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 2
24761: NEG
24762: PUSH
24763: LD_INT 3
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 3
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: PUSH
24805: LD_INT 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 3
24845: NEG
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 3
24856: NEG
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 3
24868: NEG
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 3
24880: NEG
24881: PUSH
24882: LD_INT 3
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24921: LD_ADDR_VAR 0 42
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 2
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 2
25087: NEG
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: NEG
25100: PUSH
25101: LD_INT 2
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 3
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: LD_INT 3
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 3
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: LD_INT 2
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 3
25167: PUSH
25168: LD_INT 3
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 2
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 3
25218: NEG
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 3
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25271: LD_ADDR_VAR 0 43
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: NEG
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: NEG
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: LD_INT 3
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 3
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 3
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 3
25567: NEG
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 3
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25619: LD_ADDR_VAR 0 44
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 2
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: NEG
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 2
25797: NEG
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: LD_INT 3
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 3
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 3
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 3
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 3
25928: NEG
25929: PUSH
25930: LD_INT 3
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25969: LD_ADDR_VAR 0 45
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: NEG
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 2
26147: NEG
26148: PUSH
26149: LD_INT 2
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: LD_INT 3
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 3
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 3
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 3
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 3
26215: PUSH
26216: LD_INT 3
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 3
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 3
26266: NEG
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 3
26278: NEG
26279: PUSH
26280: LD_INT 3
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26319: LD_ADDR_VAR 0 46
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: NEG
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: NEG
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 3
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: LD_INT 3
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 2
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 3
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 3
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: NEG
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 3
26626: NEG
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26667: LD_ADDR_VAR 0 47
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26818: LD_ADDR_VAR 0 48
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26965: LD_ADDR_VAR 0 49
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27109: LD_ADDR_VAR 0 50
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27253: LD_ADDR_VAR 0 51
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27400: LD_ADDR_VAR 0 52
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 2
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 2
27527: NEG
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27551: LD_ADDR_VAR 0 53
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: NEG
27751: PUSH
27752: LD_INT 2
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27781: LD_ADDR_VAR 0 54
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: NEG
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28011: LD_ADDR_VAR 0 55
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28241: LD_ADDR_VAR 0 56
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: NEG
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 2
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28471: LD_ADDR_VAR 0 57
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 2
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: NEG
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28701: LD_ADDR_VAR 0 58
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: LD_INT 2
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: NEG
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: NEG
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28931: LD_ADDR_VAR 0 59
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29019: LD_ADDR_VAR 0 60
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29107: LD_ADDR_VAR 0 61
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 1
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29195: LD_ADDR_VAR 0 62
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 1
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29283: LD_ADDR_VAR 0 63
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29371: LD_ADDR_VAR 0 64
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// end ; 1 :
29459: GO 35356
29461: LD_INT 1
29463: DOUBLE
29464: EQUAL
29465: IFTRUE 29469
29467: GO 32092
29469: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29470: LD_ADDR_VAR 0 11
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 3
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 3
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29514: LD_ADDR_VAR 0 12
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29555: LD_ADDR_VAR 0 13
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29595: LD_ADDR_VAR 0 14
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 0
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29636: LD_ADDR_VAR 0 15
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 3
29654: NEG
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 3
29665: NEG
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29680: LD_ADDR_VAR 0 16
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 3
29699: NEG
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 3
29711: NEG
29712: PUSH
29713: LD_INT 3
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29726: LD_ADDR_VAR 0 17
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: PUSH
29735: LD_INT 3
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 3
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29770: LD_ADDR_VAR 0 18
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29811: LD_ADDR_VAR 0 19
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 2
29838: PUSH
29839: LD_INT 3
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29851: LD_ADDR_VAR 0 20
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 3
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29892: LD_ADDR_VAR 0 21
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 3
29910: NEG
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 3
29921: NEG
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29936: LD_ADDR_VAR 0 22
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 3
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 3
29955: NEG
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: NEG
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29982: LD_ADDR_VAR 0 23
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: LD_INT 4
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: LD_INT 3
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30026: LD_ADDR_VAR 0 24
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 3
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 4
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30067: LD_ADDR_VAR 0 25
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: LD_INT 3
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 4
30084: PUSH
30085: LD_INT 3
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: LD_INT 4
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30107: LD_ADDR_VAR 0 26
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 3
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: LD_INT 4
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30148: LD_ADDR_VAR 0 27
30152: PUSH
30153: LD_INT 3
30155: NEG
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 3
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 4
30177: NEG
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30192: LD_ADDR_VAR 0 28
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 3
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 3
30211: NEG
30212: PUSH
30213: LD_INT 4
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 4
30223: NEG
30224: PUSH
30225: LD_INT 3
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30238: LD_ADDR_VAR 0 29
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 2
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: LD_INT 4
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 4
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: LD_INT 5
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 5
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 4
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: LD_INT 6
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: LD_INT 6
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: LD_INT 5
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30393: LD_ADDR_VAR 0 30
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 4
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 4
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 5
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 5
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 6
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 6
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30536: LD_ADDR_VAR 0 31
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 4
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 4
30583: PUSH
30584: LD_INT 4
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 5
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 4
30623: PUSH
30624: LD_INT 5
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 6
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 6
30643: PUSH
30644: LD_INT 6
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 5
30653: PUSH
30654: LD_INT 6
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30675: LD_ADDR_VAR 0 32
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 4
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 5
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 4
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: LD_INT 6
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 6
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 5
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30818: LD_ADDR_VAR 0 33
30822: PUSH
30823: LD_INT 2
30825: NEG
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 4
30870: NEG
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 4
30881: NEG
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 4
30893: NEG
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 5
30904: NEG
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 5
30915: NEG
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 5
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 6
30938: NEG
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 6
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30973: LD_ADDR_VAR 0 34
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 3
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: LD_INT 4
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 4
31028: NEG
31029: PUSH
31030: LD_INT 3
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 4
31040: NEG
31041: PUSH
31042: LD_INT 4
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 4
31052: NEG
31053: PUSH
31054: LD_INT 5
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 5
31064: NEG
31065: PUSH
31066: LD_INT 4
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 5
31076: NEG
31077: PUSH
31078: LD_INT 5
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 5
31088: NEG
31089: PUSH
31090: LD_INT 6
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 6
31100: NEG
31101: PUSH
31102: LD_INT 5
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 6
31112: NEG
31113: PUSH
31114: LD_INT 6
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31136: LD_ADDR_VAR 0 41
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 3
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31180: LD_ADDR_VAR 0 42
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31221: LD_ADDR_VAR 0 43
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31261: LD_ADDR_VAR 0 44
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31302: LD_ADDR_VAR 0 45
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: NEG
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31346: LD_ADDR_VAR 0 46
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31392: LD_ADDR_VAR 0 47
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 3
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31425: LD_ADDR_VAR 0 48
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31456: LD_ADDR_VAR 0 49
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31485: LD_ADDR_VAR 0 50
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31514: LD_ADDR_VAR 0 51
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 2
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31545: LD_ADDR_VAR 0 52
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 3
31564: NEG
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31578: LD_ADDR_VAR 0 53
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: LD_INT 3
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 2
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31622: LD_ADDR_VAR 0 54
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31663: LD_ADDR_VAR 0 55
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 3
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31703: LD_ADDR_VAR 0 56
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31744: LD_ADDR_VAR 0 57
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 3
31762: NEG
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 3
31773: NEG
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31788: LD_ADDR_VAR 0 58
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 3
31807: NEG
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: LD_INT 3
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31834: LD_ADDR_VAR 0 59
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31878: LD_ADDR_VAR 0 60
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31919: LD_ADDR_VAR 0 61
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31959: LD_ADDR_VAR 0 62
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32000: LD_ADDR_VAR 0 63
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32044: LD_ADDR_VAR 0 64
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 2
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// end ; 2 :
32090: GO 35356
32092: LD_INT 2
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 35355
32100: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32101: LD_ADDR_VAR 0 29
32105: PUSH
32106: LD_INT 4
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 4
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 5
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 3
32180: PUSH
32181: LD_INT 2
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 5
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 4
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: LD_INT 4
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 4
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 2
32261: PUSH
32262: LD_INT 2
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 4
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 4
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: LD_INT 4
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 5
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: LD_INT 4
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: LD_INT 3
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 3
32384: NEG
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 3
32429: NEG
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 4
32440: NEG
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 4
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 4
32463: NEG
32464: PUSH
32465: LD_INT 2
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 4
32486: NEG
32487: PUSH
32488: LD_INT 4
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 4
32498: NEG
32499: PUSH
32500: LD_INT 5
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 4
32534: NEG
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 5
32546: NEG
32547: PUSH
32548: LD_INT 4
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 5
32558: NEG
32559: PUSH
32560: LD_INT 5
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: NEG
32571: PUSH
32572: LD_INT 5
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 5
32582: NEG
32583: PUSH
32584: LD_INT 3
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32639: LD_ADDR_VAR 0 30
32643: PUSH
32644: LD_INT 4
32646: PUSH
32647: LD_INT 4
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 5
32666: PUSH
32667: LD_INT 4
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 5
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 4
32686: PUSH
32687: LD_INT 5
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: LD_INT 4
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 5
32716: PUSH
32717: LD_INT 3
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: LD_INT 5
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: LD_INT 4
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: NEG
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 4
32829: NEG
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 4
32840: NEG
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 3
32863: NEG
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 4
32874: NEG
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 5
32885: NEG
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 5
32896: NEG
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 5
32908: NEG
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: LD_INT 4
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: LD_INT 3
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: NEG
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 4
32991: NEG
32992: PUSH
32993: LD_INT 3
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 4
33003: NEG
33004: PUSH
33005: LD_INT 4
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: LD_INT 4
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 4
33027: NEG
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 4
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: LD_INT 5
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 4
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 3
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: LD_INT 4
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 5
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 5
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33186: LD_ADDR_VAR 0 31
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: LD_INT 4
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 4
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 5
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 5
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 4
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: LD_INT 5
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 3
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 4
33342: NEG
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 4
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 4
33365: NEG
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 4
33388: NEG
33389: PUSH
33390: LD_INT 4
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 4
33400: NEG
33401: PUSH
33402: LD_INT 5
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: LD_INT 4
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 4
33436: NEG
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 5
33448: NEG
33449: PUSH
33450: LD_INT 4
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 5
33460: NEG
33461: PUSH
33462: LD_INT 5
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: LD_INT 5
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 5
33484: NEG
33485: PUSH
33486: LD_INT 3
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: LD_INT 4
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 3
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: LD_INT 4
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 2
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: LD_INT 4
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 4
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 5
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 5
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 5
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33736: LD_ADDR_VAR 0 32
33740: PUSH
33741: LD_INT 4
33743: NEG
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 4
33754: NEG
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: NEG
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 4
33788: NEG
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 5
33799: NEG
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 5
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 5
33822: NEG
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: NEG
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: NEG
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: LD_INT 4
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: LD_INT 3
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 4
33905: NEG
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: NEG
33918: PUSH
33919: LD_INT 4
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: NEG
33930: PUSH
33931: LD_INT 4
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 4
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 4
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 5
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 4
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 3
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 3
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 4
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: LD_INT 5
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: LD_INT 5
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 3
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 2
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 4
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 4
34148: PUSH
34149: LD_INT 4
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 4
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 5
34168: PUSH
34169: LD_INT 4
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 5
34178: PUSH
34179: LD_INT 5
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 4
34188: PUSH
34189: LD_INT 5
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 4
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 5
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: LD_INT 5
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34283: LD_ADDR_VAR 0 33
34287: PUSH
34288: LD_INT 4
34290: NEG
34291: PUSH
34292: LD_INT 4
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: LD_INT 5
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: LD_INT 4
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 3
34326: NEG
34327: PUSH
34328: LD_INT 3
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 4
34338: NEG
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 5
34350: NEG
34351: PUSH
34352: LD_INT 4
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 5
34362: NEG
34363: PUSH
34364: LD_INT 5
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: NEG
34375: PUSH
34376: LD_INT 5
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 5
34386: NEG
34387: PUSH
34388: LD_INT 3
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 3
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 4
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: LD_INT 3
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 2
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: LD_INT 3
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 4
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: LD_INT 4
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 4
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 5
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 4
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 3
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 3
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 5
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 4
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 4
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 4
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 5
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 5
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 4
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: LD_INT 5
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34821: LD_ADDR_VAR 0 34
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 4
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 5
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 4
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: LD_INT 3
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 4
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 5
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: LD_INT 5
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 4
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 4
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 2
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 4
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 4
35023: PUSH
35024: LD_INT 4
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 4
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 5
35043: PUSH
35044: LD_INT 4
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: LD_INT 5
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 4
35063: PUSH
35064: LD_INT 5
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: LD_INT 4
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 5
35093: PUSH
35094: LD_INT 3
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: LD_INT 5
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 4
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 4
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: LD_INT 4
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 4
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 4
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 3
35229: NEG
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 3
35240: NEG
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 4
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 5
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 5
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 5
35285: NEG
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 3
35297: NEG
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
// end ; end ;
35353: GO 35356
35355: POP
// case btype of b_depot , b_warehouse :
35356: LD_VAR 0 1
35360: PUSH
35361: LD_INT 0
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35375
35367: LD_INT 1
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35576
35375: POP
// case nation of nation_american :
35376: LD_VAR 0 5
35380: PUSH
35381: LD_INT 1
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35389
35387: GO 35445
35389: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35390: LD_ADDR_VAR 0 9
35394: PUSH
35395: LD_VAR 0 11
35399: PUSH
35400: LD_VAR 0 12
35404: PUSH
35405: LD_VAR 0 13
35409: PUSH
35410: LD_VAR 0 14
35414: PUSH
35415: LD_VAR 0 15
35419: PUSH
35420: LD_VAR 0 16
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: PUSH
35433: LD_VAR 0 4
35437: PUSH
35438: LD_INT 1
35440: PLUS
35441: ARRAY
35442: ST_TO_ADDR
35443: GO 35574
35445: LD_INT 2
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35453
35451: GO 35509
35453: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35454: LD_ADDR_VAR 0 9
35458: PUSH
35459: LD_VAR 0 17
35463: PUSH
35464: LD_VAR 0 18
35468: PUSH
35469: LD_VAR 0 19
35473: PUSH
35474: LD_VAR 0 20
35478: PUSH
35479: LD_VAR 0 21
35483: PUSH
35484: LD_VAR 0 22
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: PUSH
35497: LD_VAR 0 4
35501: PUSH
35502: LD_INT 1
35504: PLUS
35505: ARRAY
35506: ST_TO_ADDR
35507: GO 35574
35509: LD_INT 3
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35517
35515: GO 35573
35517: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: LD_VAR 0 23
35527: PUSH
35528: LD_VAR 0 24
35532: PUSH
35533: LD_VAR 0 25
35537: PUSH
35538: LD_VAR 0 26
35542: PUSH
35543: LD_VAR 0 27
35547: PUSH
35548: LD_VAR 0 28
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: LD_VAR 0 4
35565: PUSH
35566: LD_INT 1
35568: PLUS
35569: ARRAY
35570: ST_TO_ADDR
35571: GO 35574
35573: POP
35574: GO 36129
35576: LD_INT 2
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35590
35582: LD_INT 3
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35590
35588: GO 35646
35590: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35591: LD_ADDR_VAR 0 9
35595: PUSH
35596: LD_VAR 0 29
35600: PUSH
35601: LD_VAR 0 30
35605: PUSH
35606: LD_VAR 0 31
35610: PUSH
35611: LD_VAR 0 32
35615: PUSH
35616: LD_VAR 0 33
35620: PUSH
35621: LD_VAR 0 34
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: PUSH
35634: LD_VAR 0 4
35638: PUSH
35639: LD_INT 1
35641: PLUS
35642: ARRAY
35643: ST_TO_ADDR
35644: GO 36129
35646: LD_INT 16
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35708
35652: LD_INT 17
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35708
35658: LD_INT 18
35660: DOUBLE
35661: EQUAL
35662: IFTRUE 35708
35664: LD_INT 19
35666: DOUBLE
35667: EQUAL
35668: IFTRUE 35708
35670: LD_INT 22
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35708
35676: LD_INT 20
35678: DOUBLE
35679: EQUAL
35680: IFTRUE 35708
35682: LD_INT 21
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35708
35688: LD_INT 23
35690: DOUBLE
35691: EQUAL
35692: IFTRUE 35708
35694: LD_INT 24
35696: DOUBLE
35697: EQUAL
35698: IFTRUE 35708
35700: LD_INT 25
35702: DOUBLE
35703: EQUAL
35704: IFTRUE 35708
35706: GO 35764
35708: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_VAR 0 35
35718: PUSH
35719: LD_VAR 0 36
35723: PUSH
35724: LD_VAR 0 37
35728: PUSH
35729: LD_VAR 0 38
35733: PUSH
35734: LD_VAR 0 39
35738: PUSH
35739: LD_VAR 0 40
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: PUSH
35752: LD_VAR 0 4
35756: PUSH
35757: LD_INT 1
35759: PLUS
35760: ARRAY
35761: ST_TO_ADDR
35762: GO 36129
35764: LD_INT 6
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35820
35770: LD_INT 7
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35820
35776: LD_INT 8
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35820
35782: LD_INT 13
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35820
35788: LD_INT 12
35790: DOUBLE
35791: EQUAL
35792: IFTRUE 35820
35794: LD_INT 15
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35820
35800: LD_INT 11
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35820
35806: LD_INT 14
35808: DOUBLE
35809: EQUAL
35810: IFTRUE 35820
35812: LD_INT 10
35814: DOUBLE
35815: EQUAL
35816: IFTRUE 35820
35818: GO 35876
35820: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35821: LD_ADDR_VAR 0 9
35825: PUSH
35826: LD_VAR 0 41
35830: PUSH
35831: LD_VAR 0 42
35835: PUSH
35836: LD_VAR 0 43
35840: PUSH
35841: LD_VAR 0 44
35845: PUSH
35846: LD_VAR 0 45
35850: PUSH
35851: LD_VAR 0 46
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: PUSH
35864: LD_VAR 0 4
35868: PUSH
35869: LD_INT 1
35871: PLUS
35872: ARRAY
35873: ST_TO_ADDR
35874: GO 36129
35876: LD_INT 36
35878: DOUBLE
35879: EQUAL
35880: IFTRUE 35884
35882: GO 35940
35884: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35885: LD_ADDR_VAR 0 9
35889: PUSH
35890: LD_VAR 0 47
35894: PUSH
35895: LD_VAR 0 48
35899: PUSH
35900: LD_VAR 0 49
35904: PUSH
35905: LD_VAR 0 50
35909: PUSH
35910: LD_VAR 0 51
35914: PUSH
35915: LD_VAR 0 52
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: LD_VAR 0 4
35932: PUSH
35933: LD_INT 1
35935: PLUS
35936: ARRAY
35937: ST_TO_ADDR
35938: GO 36129
35940: LD_INT 4
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35966
35946: LD_INT 5
35948: DOUBLE
35949: EQUAL
35950: IFTRUE 35966
35952: LD_INT 34
35954: DOUBLE
35955: EQUAL
35956: IFTRUE 35966
35958: LD_INT 37
35960: DOUBLE
35961: EQUAL
35962: IFTRUE 35966
35964: GO 36022
35966: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35967: LD_ADDR_VAR 0 9
35971: PUSH
35972: LD_VAR 0 53
35976: PUSH
35977: LD_VAR 0 54
35981: PUSH
35982: LD_VAR 0 55
35986: PUSH
35987: LD_VAR 0 56
35991: PUSH
35992: LD_VAR 0 57
35996: PUSH
35997: LD_VAR 0 58
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: PUSH
36010: LD_VAR 0 4
36014: PUSH
36015: LD_INT 1
36017: PLUS
36018: ARRAY
36019: ST_TO_ADDR
36020: GO 36129
36022: LD_INT 31
36024: DOUBLE
36025: EQUAL
36026: IFTRUE 36072
36028: LD_INT 32
36030: DOUBLE
36031: EQUAL
36032: IFTRUE 36072
36034: LD_INT 33
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36072
36040: LD_INT 27
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36072
36046: LD_INT 26
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36072
36052: LD_INT 28
36054: DOUBLE
36055: EQUAL
36056: IFTRUE 36072
36058: LD_INT 29
36060: DOUBLE
36061: EQUAL
36062: IFTRUE 36072
36064: LD_INT 30
36066: DOUBLE
36067: EQUAL
36068: IFTRUE 36072
36070: GO 36128
36072: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_VAR 0 59
36082: PUSH
36083: LD_VAR 0 60
36087: PUSH
36088: LD_VAR 0 61
36092: PUSH
36093: LD_VAR 0 62
36097: PUSH
36098: LD_VAR 0 63
36102: PUSH
36103: LD_VAR 0 64
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: PUSH
36116: LD_VAR 0 4
36120: PUSH
36121: LD_INT 1
36123: PLUS
36124: ARRAY
36125: ST_TO_ADDR
36126: GO 36129
36128: POP
// temp_list2 = [ ] ;
36129: LD_ADDR_VAR 0 10
36133: PUSH
36134: EMPTY
36135: ST_TO_ADDR
// for i in temp_list do
36136: LD_ADDR_VAR 0 8
36140: PUSH
36141: LD_VAR 0 9
36145: PUSH
36146: FOR_IN
36147: IFFALSE 36199
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36149: LD_ADDR_VAR 0 10
36153: PUSH
36154: LD_VAR 0 10
36158: PUSH
36159: LD_VAR 0 8
36163: PUSH
36164: LD_INT 1
36166: ARRAY
36167: PUSH
36168: LD_VAR 0 2
36172: PLUS
36173: PUSH
36174: LD_VAR 0 8
36178: PUSH
36179: LD_INT 2
36181: ARRAY
36182: PUSH
36183: LD_VAR 0 3
36187: PLUS
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: EMPTY
36194: LIST
36195: ADD
36196: ST_TO_ADDR
36197: GO 36146
36199: POP
36200: POP
// result = temp_list2 ;
36201: LD_ADDR_VAR 0 7
36205: PUSH
36206: LD_VAR 0 10
36210: ST_TO_ADDR
// end ;
36211: LD_VAR 0 7
36215: RET
// export function EnemyInRange ( unit , dist ) ; begin
36216: LD_INT 0
36218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36219: LD_ADDR_VAR 0 3
36223: PUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 255
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 250
36243: PPUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 251
36253: PPUSH
36254: LD_VAR 0 2
36258: PPUSH
36259: CALL 9618 0 4
36263: PUSH
36264: LD_INT 4
36266: ARRAY
36267: ST_TO_ADDR
// end ;
36268: LD_VAR 0 3
36272: RET
// export function PlayerSeeMe ( unit ) ; begin
36273: LD_INT 0
36275: PPUSH
// result := See ( your_side , unit ) ;
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: LD_OWVAR 2
36285: PPUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 292
36295: ST_TO_ADDR
// end ;
36296: LD_VAR 0 2
36300: RET
// export function ReverseDir ( unit ) ; begin
36301: LD_INT 0
36303: PPUSH
// if not unit then
36304: LD_VAR 0 1
36308: NOT
36309: IFFALSE 36313
// exit ;
36311: GO 36336
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36313: LD_ADDR_VAR 0 2
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 254
36327: PUSH
36328: LD_INT 3
36330: PLUS
36331: PUSH
36332: LD_INT 6
36334: MOD
36335: ST_TO_ADDR
// end ;
36336: LD_VAR 0 2
36340: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36341: LD_INT 0
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
// if not unit or not hexes then
36349: LD_VAR 0 1
36353: NOT
36354: PUSH
36355: LD_VAR 0 2
36359: NOT
36360: OR
36361: IFFALSE 36365
// exit ;
36363: GO 36488
// dist := 9999 ;
36365: LD_ADDR_VAR 0 5
36369: PUSH
36370: LD_INT 9999
36372: ST_TO_ADDR
// for i = 1 to hexes do
36373: LD_ADDR_VAR 0 4
36377: PUSH
36378: DOUBLE
36379: LD_INT 1
36381: DEC
36382: ST_TO_ADDR
36383: LD_VAR 0 2
36387: PUSH
36388: FOR_TO
36389: IFFALSE 36476
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36391: LD_ADDR_VAR 0 6
36395: PUSH
36396: LD_VAR 0 1
36400: PPUSH
36401: LD_VAR 0 2
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: PUSH
36412: LD_INT 1
36414: ARRAY
36415: PPUSH
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: PUSH
36427: LD_INT 2
36429: ARRAY
36430: PPUSH
36431: CALL_OW 297
36435: ST_TO_ADDR
// if tdist < dist then
36436: LD_VAR 0 6
36440: PUSH
36441: LD_VAR 0 5
36445: LESS
36446: IFFALSE 36474
// begin hex := hexes [ i ] ;
36448: LD_ADDR_VAR 0 8
36452: PUSH
36453: LD_VAR 0 2
36457: PUSH
36458: LD_VAR 0 4
36462: ARRAY
36463: ST_TO_ADDR
// dist := tdist ;
36464: LD_ADDR_VAR 0 5
36468: PUSH
36469: LD_VAR 0 6
36473: ST_TO_ADDR
// end ; end ;
36474: GO 36388
36476: POP
36477: POP
// result := hex ;
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: LD_VAR 0 8
36487: ST_TO_ADDR
// end ;
36488: LD_VAR 0 3
36492: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36493: LD_INT 0
36495: PPUSH
36496: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36497: LD_VAR 0 1
36501: NOT
36502: PUSH
36503: LD_VAR 0 1
36507: PUSH
36508: LD_INT 21
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 23
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PPUSH
36532: CALL_OW 69
36536: IN
36537: NOT
36538: OR
36539: IFFALSE 36543
// exit ;
36541: GO 36590
// for i = 1 to 3 do
36543: LD_ADDR_VAR 0 3
36547: PUSH
36548: DOUBLE
36549: LD_INT 1
36551: DEC
36552: ST_TO_ADDR
36553: LD_INT 3
36555: PUSH
36556: FOR_TO
36557: IFFALSE 36588
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36559: LD_VAR 0 1
36563: PPUSH
36564: CALL_OW 250
36568: PPUSH
36569: LD_VAR 0 1
36573: PPUSH
36574: CALL_OW 251
36578: PPUSH
36579: LD_INT 1
36581: PPUSH
36582: CALL_OW 453
36586: GO 36556
36588: POP
36589: POP
// end ;
36590: LD_VAR 0 2
36594: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36595: LD_INT 0
36597: PPUSH
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36603: LD_VAR 0 1
36607: NOT
36608: PUSH
36609: LD_VAR 0 2
36613: NOT
36614: OR
36615: PUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: CALL_OW 314
36625: OR
36626: IFFALSE 36630
// exit ;
36628: GO 37071
// x := GetX ( enemy_unit ) ;
36630: LD_ADDR_VAR 0 7
36634: PUSH
36635: LD_VAR 0 2
36639: PPUSH
36640: CALL_OW 250
36644: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36645: LD_ADDR_VAR 0 8
36649: PUSH
36650: LD_VAR 0 2
36654: PPUSH
36655: CALL_OW 251
36659: ST_TO_ADDR
// if not x or not y then
36660: LD_VAR 0 7
36664: NOT
36665: PUSH
36666: LD_VAR 0 8
36670: NOT
36671: OR
36672: IFFALSE 36676
// exit ;
36674: GO 37071
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36676: LD_ADDR_VAR 0 6
36680: PUSH
36681: LD_VAR 0 7
36685: PPUSH
36686: LD_INT 0
36688: PPUSH
36689: LD_INT 4
36691: PPUSH
36692: CALL_OW 272
36696: PUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_INT 0
36704: PPUSH
36705: LD_INT 4
36707: PPUSH
36708: CALL_OW 273
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_VAR 0 7
36721: PPUSH
36722: LD_INT 1
36724: PPUSH
36725: LD_INT 4
36727: PPUSH
36728: CALL_OW 272
36732: PUSH
36733: LD_VAR 0 8
36737: PPUSH
36738: LD_INT 1
36740: PPUSH
36741: LD_INT 4
36743: PPUSH
36744: CALL_OW 273
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_VAR 0 7
36757: PPUSH
36758: LD_INT 2
36760: PPUSH
36761: LD_INT 4
36763: PPUSH
36764: CALL_OW 272
36768: PUSH
36769: LD_VAR 0 8
36773: PPUSH
36774: LD_INT 2
36776: PPUSH
36777: LD_INT 4
36779: PPUSH
36780: CALL_OW 273
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_VAR 0 7
36793: PPUSH
36794: LD_INT 3
36796: PPUSH
36797: LD_INT 4
36799: PPUSH
36800: CALL_OW 272
36804: PUSH
36805: LD_VAR 0 8
36809: PPUSH
36810: LD_INT 3
36812: PPUSH
36813: LD_INT 4
36815: PPUSH
36816: CALL_OW 273
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_VAR 0 7
36829: PPUSH
36830: LD_INT 4
36832: PPUSH
36833: LD_INT 4
36835: PPUSH
36836: CALL_OW 272
36840: PUSH
36841: LD_VAR 0 8
36845: PPUSH
36846: LD_INT 4
36848: PPUSH
36849: LD_INT 4
36851: PPUSH
36852: CALL_OW 273
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 7
36865: PPUSH
36866: LD_INT 5
36868: PPUSH
36869: LD_INT 4
36871: PPUSH
36872: CALL_OW 272
36876: PUSH
36877: LD_VAR 0 8
36881: PPUSH
36882: LD_INT 5
36884: PPUSH
36885: LD_INT 4
36887: PPUSH
36888: CALL_OW 273
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// for i = tmp downto 1 do
36905: LD_ADDR_VAR 0 4
36909: PUSH
36910: DOUBLE
36911: LD_VAR 0 6
36915: INC
36916: ST_TO_ADDR
36917: LD_INT 1
36919: PUSH
36920: FOR_DOWNTO
36921: IFFALSE 37022
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36923: LD_VAR 0 6
36927: PUSH
36928: LD_VAR 0 4
36932: ARRAY
36933: PUSH
36934: LD_INT 1
36936: ARRAY
36937: PPUSH
36938: LD_VAR 0 6
36942: PUSH
36943: LD_VAR 0 4
36947: ARRAY
36948: PUSH
36949: LD_INT 2
36951: ARRAY
36952: PPUSH
36953: CALL_OW 488
36957: NOT
36958: PUSH
36959: LD_VAR 0 6
36963: PUSH
36964: LD_VAR 0 4
36968: ARRAY
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: PPUSH
36974: LD_VAR 0 6
36978: PUSH
36979: LD_VAR 0 4
36983: ARRAY
36984: PUSH
36985: LD_INT 2
36987: ARRAY
36988: PPUSH
36989: CALL_OW 428
36993: PUSH
36994: LD_INT 0
36996: NONEQUAL
36997: OR
36998: IFFALSE 37020
// tmp := Delete ( tmp , i ) ;
37000: LD_ADDR_VAR 0 6
37004: PUSH
37005: LD_VAR 0 6
37009: PPUSH
37010: LD_VAR 0 4
37014: PPUSH
37015: CALL_OW 3
37019: ST_TO_ADDR
37020: GO 36920
37022: POP
37023: POP
// j := GetClosestHex ( unit , tmp ) ;
37024: LD_ADDR_VAR 0 5
37028: PUSH
37029: LD_VAR 0 1
37033: PPUSH
37034: LD_VAR 0 6
37038: PPUSH
37039: CALL 36341 0 2
37043: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37044: LD_VAR 0 1
37048: PPUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_INT 1
37056: ARRAY
37057: PPUSH
37058: LD_VAR 0 5
37062: PUSH
37063: LD_INT 2
37065: ARRAY
37066: PPUSH
37067: CALL_OW 111
// end ;
37071: LD_VAR 0 3
37075: RET
// export function PrepareApemanSoldier ( ) ; begin
37076: LD_INT 0
37078: PPUSH
// uc_nation := 0 ;
37079: LD_ADDR_OWVAR 21
37083: PUSH
37084: LD_INT 0
37086: ST_TO_ADDR
// hc_sex := sex_male ;
37087: LD_ADDR_OWVAR 27
37091: PUSH
37092: LD_INT 1
37094: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37095: LD_ADDR_OWVAR 28
37099: PUSH
37100: LD_INT 15
37102: ST_TO_ADDR
// hc_gallery :=  ;
37103: LD_ADDR_OWVAR 33
37107: PUSH
37108: LD_STRING 
37110: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37111: LD_ADDR_OWVAR 31
37115: PUSH
37116: LD_INT 0
37118: PPUSH
37119: LD_INT 3
37121: PPUSH
37122: CALL_OW 12
37126: PUSH
37127: LD_INT 0
37129: PPUSH
37130: LD_INT 3
37132: PPUSH
37133: CALL_OW 12
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// end ;
37150: LD_VAR 0 1
37154: RET
// export function PrepareApemanEngineer ( ) ; begin
37155: LD_INT 0
37157: PPUSH
// uc_nation := 0 ;
37158: LD_ADDR_OWVAR 21
37162: PUSH
37163: LD_INT 0
37165: ST_TO_ADDR
// hc_sex := sex_male ;
37166: LD_ADDR_OWVAR 27
37170: PUSH
37171: LD_INT 1
37173: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37174: LD_ADDR_OWVAR 28
37178: PUSH
37179: LD_INT 16
37181: ST_TO_ADDR
// hc_gallery :=  ;
37182: LD_ADDR_OWVAR 33
37186: PUSH
37187: LD_STRING 
37189: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37190: LD_ADDR_OWVAR 31
37194: PUSH
37195: LD_INT 0
37197: PPUSH
37198: LD_INT 3
37200: PPUSH
37201: CALL_OW 12
37205: PUSH
37206: LD_INT 0
37208: PPUSH
37209: LD_INT 3
37211: PPUSH
37212: CALL_OW 12
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// end ;
37229: LD_VAR 0 1
37233: RET
// export function PrepareApeman ( agressivity ) ; begin
37234: LD_INT 0
37236: PPUSH
// uc_side := 0 ;
37237: LD_ADDR_OWVAR 20
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// uc_nation := 0 ;
37245: LD_ADDR_OWVAR 21
37249: PUSH
37250: LD_INT 0
37252: ST_TO_ADDR
// hc_sex := sex_male ;
37253: LD_ADDR_OWVAR 27
37257: PUSH
37258: LD_INT 1
37260: ST_TO_ADDR
// hc_class := class_apeman ;
37261: LD_ADDR_OWVAR 28
37265: PUSH
37266: LD_INT 12
37268: ST_TO_ADDR
// hc_gallery :=  ;
37269: LD_ADDR_OWVAR 33
37273: PUSH
37274: LD_STRING 
37276: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37277: LD_ADDR_OWVAR 35
37281: PUSH
37282: LD_VAR 0 1
37286: NEG
37287: PPUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 12
37297: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37298: LD_ADDR_OWVAR 31
37302: PUSH
37303: LD_INT 0
37305: PPUSH
37306: LD_INT 3
37308: PPUSH
37309: CALL_OW 12
37313: PUSH
37314: LD_INT 0
37316: PPUSH
37317: LD_INT 3
37319: PPUSH
37320: CALL_OW 12
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// end ;
37337: LD_VAR 0 2
37341: RET
// export function PrepareTiger ( agressivity ) ; begin
37342: LD_INT 0
37344: PPUSH
// uc_side := 0 ;
37345: LD_ADDR_OWVAR 20
37349: PUSH
37350: LD_INT 0
37352: ST_TO_ADDR
// uc_nation := 0 ;
37353: LD_ADDR_OWVAR 21
37357: PUSH
37358: LD_INT 0
37360: ST_TO_ADDR
// hc_class := class_tiger ;
37361: LD_ADDR_OWVAR 28
37365: PUSH
37366: LD_INT 14
37368: ST_TO_ADDR
// hc_gallery :=  ;
37369: LD_ADDR_OWVAR 33
37373: PUSH
37374: LD_STRING 
37376: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37377: LD_ADDR_OWVAR 35
37381: PUSH
37382: LD_VAR 0 1
37386: NEG
37387: PPUSH
37388: LD_VAR 0 1
37392: PPUSH
37393: CALL_OW 12
37397: ST_TO_ADDR
// end ;
37398: LD_VAR 0 2
37402: RET
// export function PrepareEnchidna ( ) ; begin
37403: LD_INT 0
37405: PPUSH
// uc_side := 0 ;
37406: LD_ADDR_OWVAR 20
37410: PUSH
37411: LD_INT 0
37413: ST_TO_ADDR
// uc_nation := 0 ;
37414: LD_ADDR_OWVAR 21
37418: PUSH
37419: LD_INT 0
37421: ST_TO_ADDR
// hc_class := class_baggie ;
37422: LD_ADDR_OWVAR 28
37426: PUSH
37427: LD_INT 13
37429: ST_TO_ADDR
// hc_gallery :=  ;
37430: LD_ADDR_OWVAR 33
37434: PUSH
37435: LD_STRING 
37437: ST_TO_ADDR
// end ;
37438: LD_VAR 0 1
37442: RET
// export function PrepareFrog ( ) ; begin
37443: LD_INT 0
37445: PPUSH
// uc_side := 0 ;
37446: LD_ADDR_OWVAR 20
37450: PUSH
37451: LD_INT 0
37453: ST_TO_ADDR
// uc_nation := 0 ;
37454: LD_ADDR_OWVAR 21
37458: PUSH
37459: LD_INT 0
37461: ST_TO_ADDR
// hc_class := class_frog ;
37462: LD_ADDR_OWVAR 28
37466: PUSH
37467: LD_INT 19
37469: ST_TO_ADDR
// hc_gallery :=  ;
37470: LD_ADDR_OWVAR 33
37474: PUSH
37475: LD_STRING 
37477: ST_TO_ADDR
// end ;
37478: LD_VAR 0 1
37482: RET
// export function PrepareFish ( ) ; begin
37483: LD_INT 0
37485: PPUSH
// uc_side := 0 ;
37486: LD_ADDR_OWVAR 20
37490: PUSH
37491: LD_INT 0
37493: ST_TO_ADDR
// uc_nation := 0 ;
37494: LD_ADDR_OWVAR 21
37498: PUSH
37499: LD_INT 0
37501: ST_TO_ADDR
// hc_class := class_fish ;
37502: LD_ADDR_OWVAR 28
37506: PUSH
37507: LD_INT 20
37509: ST_TO_ADDR
// hc_gallery :=  ;
37510: LD_ADDR_OWVAR 33
37514: PUSH
37515: LD_STRING 
37517: ST_TO_ADDR
// end ;
37518: LD_VAR 0 1
37522: RET
// export function PrepareBird ( ) ; begin
37523: LD_INT 0
37525: PPUSH
// uc_side := 0 ;
37526: LD_ADDR_OWVAR 20
37530: PUSH
37531: LD_INT 0
37533: ST_TO_ADDR
// uc_nation := 0 ;
37534: LD_ADDR_OWVAR 21
37538: PUSH
37539: LD_INT 0
37541: ST_TO_ADDR
// hc_class := class_phororhacos ;
37542: LD_ADDR_OWVAR 28
37546: PUSH
37547: LD_INT 18
37549: ST_TO_ADDR
// hc_gallery :=  ;
37550: LD_ADDR_OWVAR 33
37554: PUSH
37555: LD_STRING 
37557: ST_TO_ADDR
// end ;
37558: LD_VAR 0 1
37562: RET
// export function PrepareHorse ( ) ; begin
37563: LD_INT 0
37565: PPUSH
// uc_side := 0 ;
37566: LD_ADDR_OWVAR 20
37570: PUSH
37571: LD_INT 0
37573: ST_TO_ADDR
// uc_nation := 0 ;
37574: LD_ADDR_OWVAR 21
37578: PUSH
37579: LD_INT 0
37581: ST_TO_ADDR
// hc_class := class_horse ;
37582: LD_ADDR_OWVAR 28
37586: PUSH
37587: LD_INT 21
37589: ST_TO_ADDR
// hc_gallery :=  ;
37590: LD_ADDR_OWVAR 33
37594: PUSH
37595: LD_STRING 
37597: ST_TO_ADDR
// end ;
37598: LD_VAR 0 1
37602: RET
// export function PrepareMastodont ( ) ; begin
37603: LD_INT 0
37605: PPUSH
// uc_side := 0 ;
37606: LD_ADDR_OWVAR 20
37610: PUSH
37611: LD_INT 0
37613: ST_TO_ADDR
// uc_nation := 0 ;
37614: LD_ADDR_OWVAR 21
37618: PUSH
37619: LD_INT 0
37621: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37622: LD_ADDR_OWVAR 37
37626: PUSH
37627: LD_INT 31
37629: ST_TO_ADDR
// vc_control := control_rider ;
37630: LD_ADDR_OWVAR 38
37634: PUSH
37635: LD_INT 4
37637: ST_TO_ADDR
// end ;
37638: LD_VAR 0 1
37642: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37643: LD_INT 0
37645: PPUSH
37646: PPUSH
37647: PPUSH
// uc_side = 0 ;
37648: LD_ADDR_OWVAR 20
37652: PUSH
37653: LD_INT 0
37655: ST_TO_ADDR
// uc_nation = 0 ;
37656: LD_ADDR_OWVAR 21
37660: PUSH
37661: LD_INT 0
37663: ST_TO_ADDR
// InitHc_All ( ) ;
37664: CALL_OW 584
// InitVc ;
37668: CALL_OW 20
// if mastodonts then
37672: LD_VAR 0 6
37676: IFFALSE 37743
// for i = 1 to mastodonts do
37678: LD_ADDR_VAR 0 11
37682: PUSH
37683: DOUBLE
37684: LD_INT 1
37686: DEC
37687: ST_TO_ADDR
37688: LD_VAR 0 6
37692: PUSH
37693: FOR_TO
37694: IFFALSE 37741
// begin vc_chassis := 31 ;
37696: LD_ADDR_OWVAR 37
37700: PUSH
37701: LD_INT 31
37703: ST_TO_ADDR
// vc_control := control_rider ;
37704: LD_ADDR_OWVAR 38
37708: PUSH
37709: LD_INT 4
37711: ST_TO_ADDR
// animal := CreateVehicle ;
37712: LD_ADDR_VAR 0 12
37716: PUSH
37717: CALL_OW 45
37721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37722: LD_VAR 0 12
37726: PPUSH
37727: LD_VAR 0 8
37731: PPUSH
37732: LD_INT 0
37734: PPUSH
37735: CALL 39878 0 3
// end ;
37739: GO 37693
37741: POP
37742: POP
// if horses then
37743: LD_VAR 0 5
37747: IFFALSE 37814
// for i = 1 to horses do
37749: LD_ADDR_VAR 0 11
37753: PUSH
37754: DOUBLE
37755: LD_INT 1
37757: DEC
37758: ST_TO_ADDR
37759: LD_VAR 0 5
37763: PUSH
37764: FOR_TO
37765: IFFALSE 37812
// begin hc_class := 21 ;
37767: LD_ADDR_OWVAR 28
37771: PUSH
37772: LD_INT 21
37774: ST_TO_ADDR
// hc_gallery :=  ;
37775: LD_ADDR_OWVAR 33
37779: PUSH
37780: LD_STRING 
37782: ST_TO_ADDR
// animal := CreateHuman ;
37783: LD_ADDR_VAR 0 12
37787: PUSH
37788: CALL_OW 44
37792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37793: LD_VAR 0 12
37797: PPUSH
37798: LD_VAR 0 8
37802: PPUSH
37803: LD_INT 0
37805: PPUSH
37806: CALL 39878 0 3
// end ;
37810: GO 37764
37812: POP
37813: POP
// if birds then
37814: LD_VAR 0 1
37818: IFFALSE 37885
// for i = 1 to birds do
37820: LD_ADDR_VAR 0 11
37824: PUSH
37825: DOUBLE
37826: LD_INT 1
37828: DEC
37829: ST_TO_ADDR
37830: LD_VAR 0 1
37834: PUSH
37835: FOR_TO
37836: IFFALSE 37883
// begin hc_class = 18 ;
37838: LD_ADDR_OWVAR 28
37842: PUSH
37843: LD_INT 18
37845: ST_TO_ADDR
// hc_gallery =  ;
37846: LD_ADDR_OWVAR 33
37850: PUSH
37851: LD_STRING 
37853: ST_TO_ADDR
// animal := CreateHuman ;
37854: LD_ADDR_VAR 0 12
37858: PUSH
37859: CALL_OW 44
37863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37864: LD_VAR 0 12
37868: PPUSH
37869: LD_VAR 0 8
37873: PPUSH
37874: LD_INT 0
37876: PPUSH
37877: CALL 39878 0 3
// end ;
37881: GO 37835
37883: POP
37884: POP
// if tigers then
37885: LD_VAR 0 2
37889: IFFALSE 37973
// for i = 1 to tigers do
37891: LD_ADDR_VAR 0 11
37895: PUSH
37896: DOUBLE
37897: LD_INT 1
37899: DEC
37900: ST_TO_ADDR
37901: LD_VAR 0 2
37905: PUSH
37906: FOR_TO
37907: IFFALSE 37971
// begin hc_class = class_tiger ;
37909: LD_ADDR_OWVAR 28
37913: PUSH
37914: LD_INT 14
37916: ST_TO_ADDR
// hc_gallery =  ;
37917: LD_ADDR_OWVAR 33
37921: PUSH
37922: LD_STRING 
37924: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37925: LD_ADDR_OWVAR 35
37929: PUSH
37930: LD_INT 7
37932: NEG
37933: PPUSH
37934: LD_INT 7
37936: PPUSH
37937: CALL_OW 12
37941: ST_TO_ADDR
// animal := CreateHuman ;
37942: LD_ADDR_VAR 0 12
37946: PUSH
37947: CALL_OW 44
37951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37952: LD_VAR 0 12
37956: PPUSH
37957: LD_VAR 0 8
37961: PPUSH
37962: LD_INT 0
37964: PPUSH
37965: CALL 39878 0 3
// end ;
37969: GO 37906
37971: POP
37972: POP
// if apemans then
37973: LD_VAR 0 3
37977: IFFALSE 38100
// for i = 1 to apemans do
37979: LD_ADDR_VAR 0 11
37983: PUSH
37984: DOUBLE
37985: LD_INT 1
37987: DEC
37988: ST_TO_ADDR
37989: LD_VAR 0 3
37993: PUSH
37994: FOR_TO
37995: IFFALSE 38098
// begin hc_class = class_apeman ;
37997: LD_ADDR_OWVAR 28
38001: PUSH
38002: LD_INT 12
38004: ST_TO_ADDR
// hc_gallery =  ;
38005: LD_ADDR_OWVAR 33
38009: PUSH
38010: LD_STRING 
38012: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38013: LD_ADDR_OWVAR 35
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PPUSH
38022: LD_INT 2
38024: PPUSH
38025: CALL_OW 12
38029: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38030: LD_ADDR_OWVAR 31
38034: PUSH
38035: LD_INT 1
38037: PPUSH
38038: LD_INT 3
38040: PPUSH
38041: CALL_OW 12
38045: PUSH
38046: LD_INT 1
38048: PPUSH
38049: LD_INT 3
38051: PPUSH
38052: CALL_OW 12
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// animal := CreateHuman ;
38069: LD_ADDR_VAR 0 12
38073: PUSH
38074: CALL_OW 44
38078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38079: LD_VAR 0 12
38083: PPUSH
38084: LD_VAR 0 8
38088: PPUSH
38089: LD_INT 0
38091: PPUSH
38092: CALL 39878 0 3
// end ;
38096: GO 37994
38098: POP
38099: POP
// if enchidnas then
38100: LD_VAR 0 4
38104: IFFALSE 38171
// for i = 1 to enchidnas do
38106: LD_ADDR_VAR 0 11
38110: PUSH
38111: DOUBLE
38112: LD_INT 1
38114: DEC
38115: ST_TO_ADDR
38116: LD_VAR 0 4
38120: PUSH
38121: FOR_TO
38122: IFFALSE 38169
// begin hc_class = 13 ;
38124: LD_ADDR_OWVAR 28
38128: PUSH
38129: LD_INT 13
38131: ST_TO_ADDR
// hc_gallery =  ;
38132: LD_ADDR_OWVAR 33
38136: PUSH
38137: LD_STRING 
38139: ST_TO_ADDR
// animal := CreateHuman ;
38140: LD_ADDR_VAR 0 12
38144: PUSH
38145: CALL_OW 44
38149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38150: LD_VAR 0 12
38154: PPUSH
38155: LD_VAR 0 8
38159: PPUSH
38160: LD_INT 0
38162: PPUSH
38163: CALL 39878 0 3
// end ;
38167: GO 38121
38169: POP
38170: POP
// if fishes then
38171: LD_VAR 0 7
38175: IFFALSE 38242
// for i = 1 to fishes do
38177: LD_ADDR_VAR 0 11
38181: PUSH
38182: DOUBLE
38183: LD_INT 1
38185: DEC
38186: ST_TO_ADDR
38187: LD_VAR 0 7
38191: PUSH
38192: FOR_TO
38193: IFFALSE 38240
// begin hc_class = 20 ;
38195: LD_ADDR_OWVAR 28
38199: PUSH
38200: LD_INT 20
38202: ST_TO_ADDR
// hc_gallery =  ;
38203: LD_ADDR_OWVAR 33
38207: PUSH
38208: LD_STRING 
38210: ST_TO_ADDR
// animal := CreateHuman ;
38211: LD_ADDR_VAR 0 12
38215: PUSH
38216: CALL_OW 44
38220: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38221: LD_VAR 0 12
38225: PPUSH
38226: LD_VAR 0 9
38230: PPUSH
38231: LD_INT 0
38233: PPUSH
38234: CALL 39878 0 3
// end ;
38238: GO 38192
38240: POP
38241: POP
// end ;
38242: LD_VAR 0 10
38246: RET
// export function WantHeal ( sci , unit ) ; begin
38247: LD_INT 0
38249: PPUSH
// if GetTaskList ( sci ) > 0 then
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 437
38259: PUSH
38260: LD_INT 0
38262: GREATER
38263: IFFALSE 38333
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38265: LD_VAR 0 1
38269: PPUSH
38270: CALL_OW 437
38274: PUSH
38275: LD_INT 1
38277: ARRAY
38278: PUSH
38279: LD_INT 1
38281: ARRAY
38282: PUSH
38283: LD_STRING l
38285: EQUAL
38286: PUSH
38287: LD_VAR 0 1
38291: PPUSH
38292: CALL_OW 437
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PUSH
38301: LD_INT 4
38303: ARRAY
38304: PUSH
38305: LD_VAR 0 2
38309: EQUAL
38310: AND
38311: IFFALSE 38323
// result := true else
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_INT 1
38320: ST_TO_ADDR
38321: GO 38331
// result := false ;
38323: LD_ADDR_VAR 0 3
38327: PUSH
38328: LD_INT 0
38330: ST_TO_ADDR
// end else
38331: GO 38341
// result := false ;
38333: LD_ADDR_VAR 0 3
38337: PUSH
38338: LD_INT 0
38340: ST_TO_ADDR
// end ;
38341: LD_VAR 0 3
38345: RET
// export function HealTarget ( sci ) ; begin
38346: LD_INT 0
38348: PPUSH
// if not sci then
38349: LD_VAR 0 1
38353: NOT
38354: IFFALSE 38358
// exit ;
38356: GO 38423
// result := 0 ;
38358: LD_ADDR_VAR 0 2
38362: PUSH
38363: LD_INT 0
38365: ST_TO_ADDR
// if GetTaskList ( sci ) then
38366: LD_VAR 0 1
38370: PPUSH
38371: CALL_OW 437
38375: IFFALSE 38423
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38377: LD_VAR 0 1
38381: PPUSH
38382: CALL_OW 437
38386: PUSH
38387: LD_INT 1
38389: ARRAY
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: PUSH
38395: LD_STRING l
38397: EQUAL
38398: IFFALSE 38423
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38400: LD_ADDR_VAR 0 2
38404: PUSH
38405: LD_VAR 0 1
38409: PPUSH
38410: CALL_OW 437
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PUSH
38419: LD_INT 4
38421: ARRAY
38422: ST_TO_ADDR
// end ;
38423: LD_VAR 0 2
38427: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38428: LD_INT 0
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
// if not base_units then
38434: LD_VAR 0 1
38438: NOT
38439: IFFALSE 38443
// exit ;
38441: GO 38530
// result := false ;
38443: LD_ADDR_VAR 0 2
38447: PUSH
38448: LD_INT 0
38450: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38451: LD_ADDR_VAR 0 5
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: LD_INT 21
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PPUSH
38471: CALL_OW 72
38475: ST_TO_ADDR
// if not tmp then
38476: LD_VAR 0 5
38480: NOT
38481: IFFALSE 38485
// exit ;
38483: GO 38530
// for i in tmp do
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_VAR 0 5
38494: PUSH
38495: FOR_IN
38496: IFFALSE 38528
// begin result := EnemyInRange ( i , 22 ) ;
38498: LD_ADDR_VAR 0 2
38502: PUSH
38503: LD_VAR 0 3
38507: PPUSH
38508: LD_INT 22
38510: PPUSH
38511: CALL 36216 0 2
38515: ST_TO_ADDR
// if result then
38516: LD_VAR 0 2
38520: IFFALSE 38526
// exit ;
38522: POP
38523: POP
38524: GO 38530
// end ;
38526: GO 38495
38528: POP
38529: POP
// end ;
38530: LD_VAR 0 2
38534: RET
// export function FilterByTag ( units , tag ) ; begin
38535: LD_INT 0
38537: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38538: LD_ADDR_VAR 0 3
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: LD_INT 120
38550: PUSH
38551: LD_VAR 0 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PPUSH
38560: CALL_OW 72
38564: ST_TO_ADDR
// end ;
38565: LD_VAR 0 3
38569: RET
// export function IsDriver ( un ) ; begin
38570: LD_INT 0
38572: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38573: LD_ADDR_VAR 0 2
38577: PUSH
38578: LD_VAR 0 1
38582: PUSH
38583: LD_INT 55
38585: PUSH
38586: EMPTY
38587: LIST
38588: PPUSH
38589: CALL_OW 69
38593: IN
38594: ST_TO_ADDR
// end ;
38595: LD_VAR 0 2
38599: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38600: LD_INT 0
38602: PPUSH
38603: PPUSH
// list := [ ] ;
38604: LD_ADDR_VAR 0 5
38608: PUSH
38609: EMPTY
38610: ST_TO_ADDR
// case d of 0 :
38611: LD_VAR 0 3
38615: PUSH
38616: LD_INT 0
38618: DOUBLE
38619: EQUAL
38620: IFTRUE 38624
38622: GO 38757
38624: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38625: LD_ADDR_VAR 0 5
38629: PUSH
38630: LD_VAR 0 1
38634: PUSH
38635: LD_INT 4
38637: MINUS
38638: PUSH
38639: LD_VAR 0 2
38643: PUSH
38644: LD_INT 4
38646: MINUS
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: PUSH
38656: LD_VAR 0 1
38660: PUSH
38661: LD_INT 3
38663: MINUS
38664: PUSH
38665: LD_VAR 0 2
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: LD_VAR 0 1
38682: PUSH
38683: LD_INT 4
38685: PLUS
38686: PUSH
38687: LD_VAR 0 2
38691: PUSH
38692: LD_INT 4
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: PUSH
38700: LD_VAR 0 1
38704: PUSH
38705: LD_INT 3
38707: PLUS
38708: PUSH
38709: LD_VAR 0 2
38713: PUSH
38714: LD_INT 3
38716: PLUS
38717: PUSH
38718: LD_INT 5
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: PUSH
38726: LD_VAR 0 1
38730: PUSH
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 4
38738: PLUS
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// end ; 1 :
38755: GO 39455
38757: LD_INT 1
38759: DOUBLE
38760: EQUAL
38761: IFTRUE 38765
38763: GO 38898
38765: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: LD_VAR 0 1
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: LD_INT 4
38783: MINUS
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: PUSH
38793: LD_VAR 0 1
38797: PUSH
38798: LD_INT 3
38800: MINUS
38801: PUSH
38802: LD_VAR 0 2
38806: PUSH
38807: LD_INT 3
38809: MINUS
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: PUSH
38819: LD_VAR 0 1
38823: PUSH
38824: LD_INT 4
38826: MINUS
38827: PUSH
38828: LD_VAR 0 2
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_VAR 0 2
38850: PUSH
38851: LD_INT 3
38853: PLUS
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_VAR 0 1
38867: PUSH
38868: LD_INT 4
38870: PLUS
38871: PUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_INT 4
38879: PLUS
38880: PUSH
38881: LD_INT 5
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// end ; 2 :
38896: GO 39455
38898: LD_INT 2
38900: DOUBLE
38901: EQUAL
38902: IFTRUE 38906
38904: GO 39035
38906: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38907: LD_ADDR_VAR 0 5
38911: PUSH
38912: LD_VAR 0 1
38916: PUSH
38917: LD_VAR 0 2
38921: PUSH
38922: LD_INT 3
38924: MINUS
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: PUSH
38934: LD_VAR 0 1
38938: PUSH
38939: LD_INT 4
38941: PLUS
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_INT 4
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PUSH
38956: LD_VAR 0 1
38960: PUSH
38961: LD_VAR 0 2
38965: PUSH
38966: LD_INT 4
38968: PLUS
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: PUSH
38978: LD_VAR 0 1
38982: PUSH
38983: LD_INT 3
38985: MINUS
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: LD_VAR 0 1
39004: PUSH
39005: LD_INT 4
39007: MINUS
39008: PUSH
39009: LD_VAR 0 2
39013: PUSH
39014: LD_INT 4
39016: MINUS
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// end ; 3 :
39033: GO 39455
39035: LD_INT 3
39037: DOUBLE
39038: EQUAL
39039: IFTRUE 39043
39041: GO 39176
39043: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39044: LD_ADDR_VAR 0 5
39048: PUSH
39049: LD_VAR 0 1
39053: PUSH
39054: LD_INT 3
39056: PLUS
39057: PUSH
39058: LD_VAR 0 2
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: LIST
39070: PUSH
39071: LD_VAR 0 1
39075: PUSH
39076: LD_INT 4
39078: PLUS
39079: PUSH
39080: LD_VAR 0 2
39084: PUSH
39085: LD_INT 4
39087: PLUS
39088: PUSH
39089: LD_INT 5
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_VAR 0 1
39101: PUSH
39102: LD_INT 4
39104: MINUS
39105: PUSH
39106: LD_VAR 0 2
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: LD_VAR 0 1
39123: PUSH
39124: LD_VAR 0 2
39128: PUSH
39129: LD_INT 4
39131: MINUS
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: PUSH
39141: LD_VAR 0 1
39145: PUSH
39146: LD_INT 3
39148: MINUS
39149: PUSH
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 3
39157: MINUS
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
// end ; 4 :
39174: GO 39455
39176: LD_INT 4
39178: DOUBLE
39179: EQUAL
39180: IFTRUE 39184
39182: GO 39317
39184: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39185: LD_ADDR_VAR 0 5
39189: PUSH
39190: LD_VAR 0 1
39194: PUSH
39195: LD_VAR 0 2
39199: PUSH
39200: LD_INT 4
39202: PLUS
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: LD_VAR 0 1
39216: PUSH
39217: LD_INT 3
39219: PLUS
39220: PUSH
39221: LD_VAR 0 2
39225: PUSH
39226: LD_INT 3
39228: PLUS
39229: PUSH
39230: LD_INT 5
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: PUSH
39238: LD_VAR 0 1
39242: PUSH
39243: LD_INT 4
39245: PLUS
39246: PUSH
39247: LD_VAR 0 2
39251: PUSH
39252: LD_INT 4
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: PUSH
39260: LD_VAR 0 1
39264: PUSH
39265: LD_VAR 0 2
39269: PUSH
39270: LD_INT 3
39272: MINUS
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: LD_INT 4
39289: MINUS
39290: PUSH
39291: LD_VAR 0 2
39295: PUSH
39296: LD_INT 4
39298: MINUS
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: ST_TO_ADDR
// end ; 5 :
39315: GO 39455
39317: LD_INT 5
39319: DOUBLE
39320: EQUAL
39321: IFTRUE 39325
39323: GO 39454
39325: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39326: LD_ADDR_VAR 0 5
39330: PUSH
39331: LD_VAR 0 1
39335: PUSH
39336: LD_INT 4
39338: MINUS
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_VAR 0 1
39357: PUSH
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 4
39365: MINUS
39366: PUSH
39367: LD_INT 3
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: PUSH
39375: LD_VAR 0 1
39379: PUSH
39380: LD_INT 4
39382: PLUS
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_INT 4
39391: PLUS
39392: PUSH
39393: LD_INT 5
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_INT 3
39408: PLUS
39409: PUSH
39410: LD_VAR 0 2
39414: PUSH
39415: LD_INT 4
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: PUSH
39423: LD_VAR 0 1
39427: PUSH
39428: LD_VAR 0 2
39432: PUSH
39433: LD_INT 3
39435: PLUS
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: ST_TO_ADDR
// end ; end ;
39452: GO 39455
39454: POP
// result := list ;
39455: LD_ADDR_VAR 0 4
39459: PUSH
39460: LD_VAR 0 5
39464: ST_TO_ADDR
// end ;
39465: LD_VAR 0 4
39469: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
39474: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39475: LD_VAR 0 1
39479: NOT
39480: PUSH
39481: LD_VAR 0 2
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: LD_INT 4
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: IN
39504: NOT
39505: OR
39506: IFFALSE 39510
// exit ;
39508: GO 39602
// tmp := [ ] ;
39510: LD_ADDR_VAR 0 5
39514: PUSH
39515: EMPTY
39516: ST_TO_ADDR
// for i in units do
39517: LD_ADDR_VAR 0 4
39521: PUSH
39522: LD_VAR 0 1
39526: PUSH
39527: FOR_IN
39528: IFFALSE 39571
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39530: LD_ADDR_VAR 0 5
39534: PUSH
39535: LD_VAR 0 5
39539: PPUSH
39540: LD_VAR 0 5
39544: PUSH
39545: LD_INT 1
39547: PLUS
39548: PPUSH
39549: LD_VAR 0 4
39553: PPUSH
39554: LD_VAR 0 2
39558: PPUSH
39559: CALL_OW 259
39563: PPUSH
39564: CALL_OW 2
39568: ST_TO_ADDR
39569: GO 39527
39571: POP
39572: POP
// if not tmp then
39573: LD_VAR 0 5
39577: NOT
39578: IFFALSE 39582
// exit ;
39580: GO 39602
// result := SortListByListDesc ( units , tmp ) ;
39582: LD_ADDR_VAR 0 3
39586: PUSH
39587: LD_VAR 0 1
39591: PPUSH
39592: LD_VAR 0 5
39596: PPUSH
39597: CALL_OW 77
39601: ST_TO_ADDR
// end ;
39602: LD_VAR 0 3
39606: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39607: LD_INT 0
39609: PPUSH
39610: PPUSH
39611: PPUSH
// result := false ;
39612: LD_ADDR_VAR 0 3
39616: PUSH
39617: LD_INT 0
39619: ST_TO_ADDR
// x := GetX ( building ) ;
39620: LD_ADDR_VAR 0 4
39624: PUSH
39625: LD_VAR 0 2
39629: PPUSH
39630: CALL_OW 250
39634: ST_TO_ADDR
// y := GetY ( building ) ;
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_VAR 0 2
39644: PPUSH
39645: CALL_OW 251
39649: ST_TO_ADDR
// if not building or not x or not y then
39650: LD_VAR 0 2
39654: NOT
39655: PUSH
39656: LD_VAR 0 4
39660: NOT
39661: OR
39662: PUSH
39663: LD_VAR 0 5
39667: NOT
39668: OR
39669: IFFALSE 39673
// exit ;
39671: GO 39765
// if GetTaskList ( unit ) then
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 437
39682: IFFALSE 39765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39684: LD_STRING e
39686: PUSH
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 437
39696: PUSH
39697: LD_INT 1
39699: ARRAY
39700: PUSH
39701: LD_INT 1
39703: ARRAY
39704: EQUAL
39705: PUSH
39706: LD_VAR 0 4
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 437
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: PUSH
39725: LD_INT 2
39727: ARRAY
39728: EQUAL
39729: AND
39730: PUSH
39731: LD_VAR 0 5
39735: PUSH
39736: LD_VAR 0 1
39740: PPUSH
39741: CALL_OW 437
39745: PUSH
39746: LD_INT 1
39748: ARRAY
39749: PUSH
39750: LD_INT 3
39752: ARRAY
39753: EQUAL
39754: AND
39755: IFFALSE 39765
// result := true end ;
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 1
39764: ST_TO_ADDR
// end ;
39765: LD_VAR 0 3
39769: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39770: LD_INT 0
39772: PPUSH
// result := false ;
39773: LD_ADDR_VAR 0 4
39777: PUSH
39778: LD_INT 0
39780: ST_TO_ADDR
// if GetTaskList ( unit ) then
39781: LD_VAR 0 1
39785: PPUSH
39786: CALL_OW 437
39790: IFFALSE 39873
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39792: LD_STRING M
39794: PUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 437
39804: PUSH
39805: LD_INT 1
39807: ARRAY
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: EQUAL
39813: PUSH
39814: LD_VAR 0 2
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 437
39828: PUSH
39829: LD_INT 1
39831: ARRAY
39832: PUSH
39833: LD_INT 2
39835: ARRAY
39836: EQUAL
39837: AND
39838: PUSH
39839: LD_VAR 0 3
39843: PUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 437
39853: PUSH
39854: LD_INT 1
39856: ARRAY
39857: PUSH
39858: LD_INT 3
39860: ARRAY
39861: EQUAL
39862: AND
39863: IFFALSE 39873
// result := true ;
39865: LD_ADDR_VAR 0 4
39869: PUSH
39870: LD_INT 1
39872: ST_TO_ADDR
// end ; end ;
39873: LD_VAR 0 4
39877: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39878: LD_INT 0
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
// if not unit or not area then
39884: LD_VAR 0 1
39888: NOT
39889: PUSH
39890: LD_VAR 0 2
39894: NOT
39895: OR
39896: IFFALSE 39900
// exit ;
39898: GO 40064
// tmp := AreaToList ( area , i ) ;
39900: LD_ADDR_VAR 0 6
39904: PUSH
39905: LD_VAR 0 2
39909: PPUSH
39910: LD_VAR 0 5
39914: PPUSH
39915: CALL_OW 517
39919: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39920: LD_ADDR_VAR 0 5
39924: PUSH
39925: DOUBLE
39926: LD_INT 1
39928: DEC
39929: ST_TO_ADDR
39930: LD_VAR 0 6
39934: PUSH
39935: LD_INT 1
39937: ARRAY
39938: PUSH
39939: FOR_TO
39940: IFFALSE 40062
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39942: LD_ADDR_VAR 0 7
39946: PUSH
39947: LD_VAR 0 6
39951: PUSH
39952: LD_INT 1
39954: ARRAY
39955: PUSH
39956: LD_VAR 0 5
39960: ARRAY
39961: PUSH
39962: LD_VAR 0 6
39966: PUSH
39967: LD_INT 2
39969: ARRAY
39970: PUSH
39971: LD_VAR 0 5
39975: ARRAY
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39981: LD_VAR 0 7
39985: PUSH
39986: LD_INT 1
39988: ARRAY
39989: PPUSH
39990: LD_VAR 0 7
39994: PUSH
39995: LD_INT 2
39997: ARRAY
39998: PPUSH
39999: CALL_OW 428
40003: PUSH
40004: LD_INT 0
40006: EQUAL
40007: IFFALSE 40060
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40009: LD_VAR 0 1
40013: PPUSH
40014: LD_VAR 0 7
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: PPUSH
40023: LD_VAR 0 7
40027: PUSH
40028: LD_INT 2
40030: ARRAY
40031: PPUSH
40032: LD_VAR 0 3
40036: PPUSH
40037: CALL_OW 48
// result := IsPlaced ( unit ) ;
40041: LD_ADDR_VAR 0 4
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 305
40055: ST_TO_ADDR
// exit ;
40056: POP
40057: POP
40058: GO 40064
// end ; end ;
40060: GO 39939
40062: POP
40063: POP
// end ;
40064: LD_VAR 0 4
40068: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40069: LD_INT 0
40071: PPUSH
40072: PPUSH
40073: PPUSH
// if not side or side > 8 then
40074: LD_VAR 0 1
40078: NOT
40079: PUSH
40080: LD_VAR 0 1
40084: PUSH
40085: LD_INT 8
40087: GREATER
40088: OR
40089: IFFALSE 40093
// exit ;
40091: GO 40280
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40093: LD_ADDR_VAR 0 4
40097: PUSH
40098: LD_INT 22
40100: PUSH
40101: LD_VAR 0 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 21
40112: PUSH
40113: LD_INT 3
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 69
40128: ST_TO_ADDR
// if not tmp then
40129: LD_VAR 0 4
40133: NOT
40134: IFFALSE 40138
// exit ;
40136: GO 40280
// enable_addtolog := true ;
40138: LD_ADDR_OWVAR 81
40142: PUSH
40143: LD_INT 1
40145: ST_TO_ADDR
// AddToLog ( [ ) ;
40146: LD_STRING [
40148: PPUSH
40149: CALL_OW 561
// for i in tmp do
40153: LD_ADDR_VAR 0 3
40157: PUSH
40158: LD_VAR 0 4
40162: PUSH
40163: FOR_IN
40164: IFFALSE 40271
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40166: LD_STRING [
40168: PUSH
40169: LD_VAR 0 3
40173: PPUSH
40174: CALL_OW 266
40178: STR
40179: PUSH
40180: LD_STRING , 
40182: STR
40183: PUSH
40184: LD_VAR 0 3
40188: PPUSH
40189: CALL_OW 250
40193: STR
40194: PUSH
40195: LD_STRING , 
40197: STR
40198: PUSH
40199: LD_VAR 0 3
40203: PPUSH
40204: CALL_OW 251
40208: STR
40209: PUSH
40210: LD_STRING , 
40212: STR
40213: PUSH
40214: LD_VAR 0 3
40218: PPUSH
40219: CALL_OW 254
40223: STR
40224: PUSH
40225: LD_STRING , 
40227: STR
40228: PUSH
40229: LD_VAR 0 3
40233: PPUSH
40234: LD_INT 1
40236: PPUSH
40237: CALL_OW 268
40241: STR
40242: PUSH
40243: LD_STRING , 
40245: STR
40246: PUSH
40247: LD_VAR 0 3
40251: PPUSH
40252: LD_INT 2
40254: PPUSH
40255: CALL_OW 268
40259: STR
40260: PUSH
40261: LD_STRING ],
40263: STR
40264: PPUSH
40265: CALL_OW 561
// end ;
40269: GO 40163
40271: POP
40272: POP
// AddToLog ( ]; ) ;
40273: LD_STRING ];
40275: PPUSH
40276: CALL_OW 561
// end ;
40280: LD_VAR 0 2
40284: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40285: LD_INT 0
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
// if not area or not rate or not max then
40292: LD_VAR 0 1
40296: NOT
40297: PUSH
40298: LD_VAR 0 2
40302: NOT
40303: OR
40304: PUSH
40305: LD_VAR 0 4
40309: NOT
40310: OR
40311: IFFALSE 40315
// exit ;
40313: GO 40504
// while 1 do
40315: LD_INT 1
40317: IFFALSE 40504
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40319: LD_ADDR_VAR 0 9
40323: PUSH
40324: LD_VAR 0 1
40328: PPUSH
40329: LD_INT 1
40331: PPUSH
40332: CALL_OW 287
40336: PUSH
40337: LD_INT 10
40339: MUL
40340: ST_TO_ADDR
// r := rate / 10 ;
40341: LD_ADDR_VAR 0 7
40345: PUSH
40346: LD_VAR 0 2
40350: PUSH
40351: LD_INT 10
40353: DIVREAL
40354: ST_TO_ADDR
// time := 1 1$00 ;
40355: LD_ADDR_VAR 0 8
40359: PUSH
40360: LD_INT 2100
40362: ST_TO_ADDR
// if amount < min then
40363: LD_VAR 0 9
40367: PUSH
40368: LD_VAR 0 3
40372: LESS
40373: IFFALSE 40391
// r := r * 2 else
40375: LD_ADDR_VAR 0 7
40379: PUSH
40380: LD_VAR 0 7
40384: PUSH
40385: LD_INT 2
40387: MUL
40388: ST_TO_ADDR
40389: GO 40417
// if amount > max then
40391: LD_VAR 0 9
40395: PUSH
40396: LD_VAR 0 4
40400: GREATER
40401: IFFALSE 40417
// r := r / 2 ;
40403: LD_ADDR_VAR 0 7
40407: PUSH
40408: LD_VAR 0 7
40412: PUSH
40413: LD_INT 2
40415: DIVREAL
40416: ST_TO_ADDR
// time := time / r ;
40417: LD_ADDR_VAR 0 8
40421: PUSH
40422: LD_VAR 0 8
40426: PUSH
40427: LD_VAR 0 7
40431: DIVREAL
40432: ST_TO_ADDR
// if time < 0 then
40433: LD_VAR 0 8
40437: PUSH
40438: LD_INT 0
40440: LESS
40441: IFFALSE 40458
// time := time * - 1 ;
40443: LD_ADDR_VAR 0 8
40447: PUSH
40448: LD_VAR 0 8
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: MUL
40457: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40458: LD_VAR 0 8
40462: PUSH
40463: LD_INT 35
40465: PPUSH
40466: LD_INT 875
40468: PPUSH
40469: CALL_OW 12
40473: PLUS
40474: PPUSH
40475: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40479: LD_INT 1
40481: PPUSH
40482: LD_INT 5
40484: PPUSH
40485: CALL_OW 12
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: LD_INT 1
40497: PPUSH
40498: CALL_OW 55
// end ;
40502: GO 40315
// end ;
40504: LD_VAR 0 5
40508: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40509: LD_INT 0
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
// if not turrets or not factories then
40519: LD_VAR 0 1
40523: NOT
40524: PUSH
40525: LD_VAR 0 2
40529: NOT
40530: OR
40531: IFFALSE 40535
// exit ;
40533: GO 40842
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40535: LD_ADDR_VAR 0 10
40539: PUSH
40540: LD_INT 5
40542: PUSH
40543: LD_INT 6
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 4
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 5
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 24
40577: PUSH
40578: LD_INT 25
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 23
40587: PUSH
40588: LD_INT 27
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 42
40601: PUSH
40602: LD_INT 43
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 44
40611: PUSH
40612: LD_INT 46
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 45
40621: PUSH
40622: LD_INT 47
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: ST_TO_ADDR
// result := [ ] ;
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: EMPTY
40645: ST_TO_ADDR
// for i in turrets do
40646: LD_ADDR_VAR 0 4
40650: PUSH
40651: LD_VAR 0 1
40655: PUSH
40656: FOR_IN
40657: IFFALSE 40840
// begin nat := GetNation ( i ) ;
40659: LD_ADDR_VAR 0 7
40663: PUSH
40664: LD_VAR 0 4
40668: PPUSH
40669: CALL_OW 248
40673: ST_TO_ADDR
// weapon := 0 ;
40674: LD_ADDR_VAR 0 8
40678: PUSH
40679: LD_INT 0
40681: ST_TO_ADDR
// if not nat then
40682: LD_VAR 0 7
40686: NOT
40687: IFFALSE 40691
// continue ;
40689: GO 40656
// for j in list [ nat ] do
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_VAR 0 10
40700: PUSH
40701: LD_VAR 0 7
40705: ARRAY
40706: PUSH
40707: FOR_IN
40708: IFFALSE 40749
// if GetBWeapon ( i ) = j [ 1 ] then
40710: LD_VAR 0 4
40714: PPUSH
40715: CALL_OW 269
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: LD_INT 1
40727: ARRAY
40728: EQUAL
40729: IFFALSE 40747
// begin weapon := j [ 2 ] ;
40731: LD_ADDR_VAR 0 8
40735: PUSH
40736: LD_VAR 0 5
40740: PUSH
40741: LD_INT 2
40743: ARRAY
40744: ST_TO_ADDR
// break ;
40745: GO 40749
// end ;
40747: GO 40707
40749: POP
40750: POP
// if not weapon then
40751: LD_VAR 0 8
40755: NOT
40756: IFFALSE 40760
// continue ;
40758: GO 40656
// for k in factories do
40760: LD_ADDR_VAR 0 6
40764: PUSH
40765: LD_VAR 0 2
40769: PUSH
40770: FOR_IN
40771: IFFALSE 40836
// begin weapons := AvailableWeaponList ( k ) ;
40773: LD_ADDR_VAR 0 9
40777: PUSH
40778: LD_VAR 0 6
40782: PPUSH
40783: CALL_OW 478
40787: ST_TO_ADDR
// if not weapons then
40788: LD_VAR 0 9
40792: NOT
40793: IFFALSE 40797
// continue ;
40795: GO 40770
// if weapon in weapons then
40797: LD_VAR 0 8
40801: PUSH
40802: LD_VAR 0 9
40806: IN
40807: IFFALSE 40834
// begin result := [ i , weapon ] ;
40809: LD_ADDR_VAR 0 3
40813: PUSH
40814: LD_VAR 0 4
40818: PUSH
40819: LD_VAR 0 8
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: ST_TO_ADDR
// exit ;
40828: POP
40829: POP
40830: POP
40831: POP
40832: GO 40842
// end ; end ;
40834: GO 40770
40836: POP
40837: POP
// end ;
40838: GO 40656
40840: POP
40841: POP
// end ;
40842: LD_VAR 0 3
40846: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40847: LD_INT 0
40849: PPUSH
// if not side or side > 8 then
40850: LD_VAR 0 3
40854: NOT
40855: PUSH
40856: LD_VAR 0 3
40860: PUSH
40861: LD_INT 8
40863: GREATER
40864: OR
40865: IFFALSE 40869
// exit ;
40867: GO 40928
// if not range then
40869: LD_VAR 0 4
40873: NOT
40874: IFFALSE 40885
// range := - 12 ;
40876: LD_ADDR_VAR 0 4
40880: PUSH
40881: LD_INT 12
40883: NEG
40884: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40885: LD_VAR 0 1
40889: PPUSH
40890: LD_VAR 0 2
40894: PPUSH
40895: LD_VAR 0 3
40899: PPUSH
40900: LD_VAR 0 4
40904: PPUSH
40905: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40909: LD_VAR 0 1
40913: PPUSH
40914: LD_VAR 0 2
40918: PPUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: CALL_OW 331
// end ;
40928: LD_VAR 0 5
40932: RET
// export function Video ( mode ) ; begin
40933: LD_INT 0
40935: PPUSH
// ingame_video = mode ;
40936: LD_ADDR_OWVAR 52
40940: PUSH
40941: LD_VAR 0 1
40945: ST_TO_ADDR
// interface_hidden = mode ;
40946: LD_ADDR_OWVAR 54
40950: PUSH
40951: LD_VAR 0 1
40955: ST_TO_ADDR
// end ;
40956: LD_VAR 0 2
40960: RET
// export function Join ( array , element ) ; begin
40961: LD_INT 0
40963: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: LD_VAR 0 1
40978: PUSH
40979: LD_INT 1
40981: PLUS
40982: PPUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: CALL_OW 1
40992: ST_TO_ADDR
// end ;
40993: LD_VAR 0 3
40997: RET
// export function JoinUnion ( array , element ) ; begin
40998: LD_INT 0
41000: PPUSH
// result := array union element ;
41001: LD_ADDR_VAR 0 3
41005: PUSH
41006: LD_VAR 0 1
41010: PUSH
41011: LD_VAR 0 2
41015: UNION
41016: ST_TO_ADDR
// end ;
41017: LD_VAR 0 3
41021: RET
// export function GetBehemoths ( side ) ; begin
41022: LD_INT 0
41024: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41025: LD_ADDR_VAR 0 2
41029: PUSH
41030: LD_INT 22
41032: PUSH
41033: LD_VAR 0 1
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 31
41044: PUSH
41045: LD_INT 25
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PPUSH
41056: CALL_OW 69
41060: ST_TO_ADDR
// end ;
41061: LD_VAR 0 2
41065: RET
// export function Shuffle ( array ) ; var i , index ; begin
41066: LD_INT 0
41068: PPUSH
41069: PPUSH
41070: PPUSH
// result := [ ] ;
41071: LD_ADDR_VAR 0 2
41075: PUSH
41076: EMPTY
41077: ST_TO_ADDR
// if not array then
41078: LD_VAR 0 1
41082: NOT
41083: IFFALSE 41087
// exit ;
41085: GO 41186
// Randomize ;
41087: CALL_OW 10
// for i = array downto 1 do
41091: LD_ADDR_VAR 0 3
41095: PUSH
41096: DOUBLE
41097: LD_VAR 0 1
41101: INC
41102: ST_TO_ADDR
41103: LD_INT 1
41105: PUSH
41106: FOR_DOWNTO
41107: IFFALSE 41184
// begin index := rand ( 1 , array ) ;
41109: LD_ADDR_VAR 0 4
41113: PUSH
41114: LD_INT 1
41116: PPUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 12
41126: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41127: LD_ADDR_VAR 0 2
41131: PUSH
41132: LD_VAR 0 2
41136: PPUSH
41137: LD_VAR 0 2
41141: PUSH
41142: LD_INT 1
41144: PLUS
41145: PPUSH
41146: LD_VAR 0 1
41150: PUSH
41151: LD_VAR 0 4
41155: ARRAY
41156: PPUSH
41157: CALL_OW 2
41161: ST_TO_ADDR
// array := Delete ( array , index ) ;
41162: LD_ADDR_VAR 0 1
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: LD_VAR 0 4
41176: PPUSH
41177: CALL_OW 3
41181: ST_TO_ADDR
// end ;
41182: GO 41106
41184: POP
41185: POP
// end ;
41186: LD_VAR 0 2
41190: RET
// export function GetBaseMaterials ( base ) ; begin
41191: LD_INT 0
41193: PPUSH
// result := [ 0 , 0 , 0 ] ;
41194: LD_ADDR_VAR 0 2
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: ST_TO_ADDR
// if not base then
41213: LD_VAR 0 1
41217: NOT
41218: IFFALSE 41222
// exit ;
41220: GO 41271
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41222: LD_ADDR_VAR 0 2
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: LD_INT 1
41234: PPUSH
41235: CALL_OW 275
41239: PUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: LD_INT 2
41247: PPUSH
41248: CALL_OW 275
41252: PUSH
41253: LD_VAR 0 1
41257: PPUSH
41258: LD_INT 3
41260: PPUSH
41261: CALL_OW 275
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: ST_TO_ADDR
// end ;
41271: LD_VAR 0 2
41275: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41276: LD_INT 0
41278: PPUSH
41279: PPUSH
// result := array ;
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_VAR 0 1
41289: ST_TO_ADDR
// if size >= result then
41290: LD_VAR 0 2
41294: PUSH
41295: LD_VAR 0 3
41299: GREATEREQUAL
41300: IFFALSE 41304
// exit ;
41302: GO 41354
// if size then
41304: LD_VAR 0 2
41308: IFFALSE 41354
// for i := array downto size do
41310: LD_ADDR_VAR 0 4
41314: PUSH
41315: DOUBLE
41316: LD_VAR 0 1
41320: INC
41321: ST_TO_ADDR
41322: LD_VAR 0 2
41326: PUSH
41327: FOR_DOWNTO
41328: IFFALSE 41352
// result := Delete ( result , result ) ;
41330: LD_ADDR_VAR 0 3
41334: PUSH
41335: LD_VAR 0 3
41339: PPUSH
41340: LD_VAR 0 3
41344: PPUSH
41345: CALL_OW 3
41349: ST_TO_ADDR
41350: GO 41327
41352: POP
41353: POP
// end ;
41354: LD_VAR 0 3
41358: RET
// export function ComExit ( unit ) ; var tmp ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
// if not IsInUnit ( unit ) then
41363: LD_VAR 0 1
41367: PPUSH
41368: CALL_OW 310
41372: NOT
41373: IFFALSE 41377
// exit ;
41375: GO 41437
// tmp := IsInUnit ( unit ) ;
41377: LD_ADDR_VAR 0 3
41381: PUSH
41382: LD_VAR 0 1
41386: PPUSH
41387: CALL_OW 310
41391: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41392: LD_VAR 0 3
41396: PPUSH
41397: CALL_OW 247
41401: PUSH
41402: LD_INT 2
41404: EQUAL
41405: IFFALSE 41418
// ComExitVehicle ( unit ) else
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 121
41416: GO 41427
// ComExitBuilding ( unit ) ;
41418: LD_VAR 0 1
41422: PPUSH
41423: CALL_OW 122
// result := tmp ;
41427: LD_ADDR_VAR 0 2
41431: PUSH
41432: LD_VAR 0 3
41436: ST_TO_ADDR
// end ;
41437: LD_VAR 0 2
41441: RET
// export function ComExitAll ( units ) ; var i ; begin
41442: LD_INT 0
41444: PPUSH
41445: PPUSH
// if not units then
41446: LD_VAR 0 1
41450: NOT
41451: IFFALSE 41455
// exit ;
41453: GO 41481
// for i in units do
41455: LD_ADDR_VAR 0 3
41459: PUSH
41460: LD_VAR 0 1
41464: PUSH
41465: FOR_IN
41466: IFFALSE 41479
// ComExit ( i ) ;
41468: LD_VAR 0 3
41472: PPUSH
41473: CALL 41359 0 1
41477: GO 41465
41479: POP
41480: POP
// end ;
41481: LD_VAR 0 2
41485: RET
// export function ResetHc ; begin
41486: LD_INT 0
41488: PPUSH
// InitHc ;
41489: CALL_OW 19
// hc_importance := 0 ;
41493: LD_ADDR_OWVAR 32
41497: PUSH
41498: LD_INT 0
41500: ST_TO_ADDR
// end ;
41501: LD_VAR 0 1
41505: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41506: LD_INT 0
41508: PPUSH
41509: PPUSH
41510: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41511: LD_ADDR_VAR 0 6
41515: PUSH
41516: LD_VAR 0 1
41520: PUSH
41521: LD_VAR 0 3
41525: PLUS
41526: PUSH
41527: LD_INT 2
41529: DIV
41530: ST_TO_ADDR
// if _x < 0 then
41531: LD_VAR 0 6
41535: PUSH
41536: LD_INT 0
41538: LESS
41539: IFFALSE 41556
// _x := _x * - 1 ;
41541: LD_ADDR_VAR 0 6
41545: PUSH
41546: LD_VAR 0 6
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: MUL
41555: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41556: LD_ADDR_VAR 0 7
41560: PUSH
41561: LD_VAR 0 2
41565: PUSH
41566: LD_VAR 0 4
41570: PLUS
41571: PUSH
41572: LD_INT 2
41574: DIV
41575: ST_TO_ADDR
// if _y < 0 then
41576: LD_VAR 0 7
41580: PUSH
41581: LD_INT 0
41583: LESS
41584: IFFALSE 41601
// _y := _y * - 1 ;
41586: LD_ADDR_VAR 0 7
41590: PUSH
41591: LD_VAR 0 7
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: MUL
41600: ST_TO_ADDR
// result := [ _x , _y ] ;
41601: LD_ADDR_VAR 0 5
41605: PUSH
41606: LD_VAR 0 6
41610: PUSH
41611: LD_VAR 0 7
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: ST_TO_ADDR
// end ;
41620: LD_VAR 0 5
41624: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41625: LD_INT 0
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
// task := GetTaskList ( unit ) ;
41631: LD_ADDR_VAR 0 7
41635: PUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 437
41645: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41646: LD_VAR 0 7
41650: NOT
41651: PUSH
41652: LD_VAR 0 1
41656: PPUSH
41657: LD_VAR 0 2
41661: PPUSH
41662: CALL_OW 308
41666: NOT
41667: AND
41668: IFFALSE 41672
// exit ;
41670: GO 41790
// if IsInArea ( unit , area ) then
41672: LD_VAR 0 1
41676: PPUSH
41677: LD_VAR 0 2
41681: PPUSH
41682: CALL_OW 308
41686: IFFALSE 41704
// begin ComMoveToArea ( unit , goAway ) ;
41688: LD_VAR 0 1
41692: PPUSH
41693: LD_VAR 0 3
41697: PPUSH
41698: CALL_OW 113
// exit ;
41702: GO 41790
// end ; if task [ 1 ] [ 1 ] <> M then
41704: LD_VAR 0 7
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: PUSH
41713: LD_INT 1
41715: ARRAY
41716: PUSH
41717: LD_STRING M
41719: NONEQUAL
41720: IFFALSE 41724
// exit ;
41722: GO 41790
// x := task [ 1 ] [ 2 ] ;
41724: LD_ADDR_VAR 0 5
41728: PUSH
41729: LD_VAR 0 7
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PUSH
41738: LD_INT 2
41740: ARRAY
41741: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41742: LD_ADDR_VAR 0 6
41746: PUSH
41747: LD_VAR 0 7
41751: PUSH
41752: LD_INT 1
41754: ARRAY
41755: PUSH
41756: LD_INT 3
41758: ARRAY
41759: ST_TO_ADDR
// if InArea ( x , y , area ) then
41760: LD_VAR 0 5
41764: PPUSH
41765: LD_VAR 0 6
41769: PPUSH
41770: LD_VAR 0 2
41774: PPUSH
41775: CALL_OW 309
41779: IFFALSE 41790
// ComStop ( unit ) ;
41781: LD_VAR 0 1
41785: PPUSH
41786: CALL_OW 141
// end ;
41790: LD_VAR 0 4
41794: RET
// export function Abs ( value ) ; begin
41795: LD_INT 0
41797: PPUSH
// result := value ;
41798: LD_ADDR_VAR 0 2
41802: PUSH
41803: LD_VAR 0 1
41807: ST_TO_ADDR
// if value < 0 then
41808: LD_VAR 0 1
41812: PUSH
41813: LD_INT 0
41815: LESS
41816: IFFALSE 41833
// result := value * - 1 ;
41818: LD_ADDR_VAR 0 2
41822: PUSH
41823: LD_VAR 0 1
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: MUL
41832: ST_TO_ADDR
// end ;
41833: LD_VAR 0 2
41837: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
// if not unit or not building then
41848: LD_VAR 0 1
41852: NOT
41853: PUSH
41854: LD_VAR 0 2
41858: NOT
41859: OR
41860: IFFALSE 41864
// exit ;
41862: GO 42090
// x := GetX ( building ) ;
41864: LD_ADDR_VAR 0 4
41868: PUSH
41869: LD_VAR 0 2
41873: PPUSH
41874: CALL_OW 250
41878: ST_TO_ADDR
// y := GetY ( building ) ;
41879: LD_ADDR_VAR 0 6
41883: PUSH
41884: LD_VAR 0 2
41888: PPUSH
41889: CALL_OW 251
41893: ST_TO_ADDR
// d := GetDir ( building ) ;
41894: LD_ADDR_VAR 0 8
41898: PUSH
41899: LD_VAR 0 2
41903: PPUSH
41904: CALL_OW 254
41908: ST_TO_ADDR
// r := 4 ;
41909: LD_ADDR_VAR 0 9
41913: PUSH
41914: LD_INT 4
41916: ST_TO_ADDR
// for i := 1 to 5 do
41917: LD_ADDR_VAR 0 10
41921: PUSH
41922: DOUBLE
41923: LD_INT 1
41925: DEC
41926: ST_TO_ADDR
41927: LD_INT 5
41929: PUSH
41930: FOR_TO
41931: IFFALSE 42088
// begin _x := ShiftX ( x , d , r + i ) ;
41933: LD_ADDR_VAR 0 5
41937: PUSH
41938: LD_VAR 0 4
41942: PPUSH
41943: LD_VAR 0 8
41947: PPUSH
41948: LD_VAR 0 9
41952: PUSH
41953: LD_VAR 0 10
41957: PLUS
41958: PPUSH
41959: CALL_OW 272
41963: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41964: LD_ADDR_VAR 0 7
41968: PUSH
41969: LD_VAR 0 6
41973: PPUSH
41974: LD_VAR 0 8
41978: PPUSH
41979: LD_VAR 0 9
41983: PUSH
41984: LD_VAR 0 10
41988: PLUS
41989: PPUSH
41990: CALL_OW 273
41994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41995: LD_VAR 0 5
41999: PPUSH
42000: LD_VAR 0 7
42004: PPUSH
42005: CALL_OW 488
42009: PUSH
42010: LD_VAR 0 5
42014: PPUSH
42015: LD_VAR 0 7
42019: PPUSH
42020: CALL_OW 428
42024: PPUSH
42025: CALL_OW 247
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: IN
42040: NOT
42041: AND
42042: IFFALSE 42086
// begin ComMoveXY ( unit , _x , _y ) ;
42044: LD_VAR 0 1
42048: PPUSH
42049: LD_VAR 0 5
42053: PPUSH
42054: LD_VAR 0 7
42058: PPUSH
42059: CALL_OW 111
// result := [ _x , _y ] ;
42063: LD_ADDR_VAR 0 3
42067: PUSH
42068: LD_VAR 0 5
42072: PUSH
42073: LD_VAR 0 7
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: ST_TO_ADDR
// exit ;
42082: POP
42083: POP
42084: GO 42090
// end ; end ;
42086: GO 41930
42088: POP
42089: POP
// end ;
42090: LD_VAR 0 3
42094: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42095: LD_INT 0
42097: PPUSH
42098: PPUSH
42099: PPUSH
// result := 0 ;
42100: LD_ADDR_VAR 0 3
42104: PUSH
42105: LD_INT 0
42107: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42108: LD_VAR 0 1
42112: PUSH
42113: LD_INT 0
42115: LESS
42116: PUSH
42117: LD_VAR 0 1
42121: PUSH
42122: LD_INT 8
42124: GREATER
42125: OR
42126: PUSH
42127: LD_VAR 0 2
42131: PUSH
42132: LD_INT 0
42134: LESS
42135: OR
42136: PUSH
42137: LD_VAR 0 2
42141: PUSH
42142: LD_INT 8
42144: GREATER
42145: OR
42146: IFFALSE 42150
// exit ;
42148: GO 42225
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42150: LD_ADDR_VAR 0 4
42154: PUSH
42155: LD_INT 22
42157: PUSH
42158: LD_VAR 0 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PPUSH
42167: CALL_OW 69
42171: PUSH
42172: FOR_IN
42173: IFFALSE 42223
// begin un := UnitShoot ( i ) ;
42175: LD_ADDR_VAR 0 5
42179: PUSH
42180: LD_VAR 0 4
42184: PPUSH
42185: CALL_OW 504
42189: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42190: LD_VAR 0 5
42194: PPUSH
42195: CALL_OW 255
42199: PUSH
42200: LD_VAR 0 1
42204: EQUAL
42205: IFFALSE 42221
// begin result := un ;
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_VAR 0 5
42216: ST_TO_ADDR
// exit ;
42217: POP
42218: POP
42219: GO 42225
// end ; end ;
42221: GO 42172
42223: POP
42224: POP
// end ;
42225: LD_VAR 0 3
42229: RET
// export function GetCargoBay ( units ) ; begin
42230: LD_INT 0
42232: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42233: LD_ADDR_VAR 0 2
42237: PUSH
42238: LD_VAR 0 1
42242: PPUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 34
42248: PUSH
42249: LD_INT 12
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 34
42258: PUSH
42259: LD_INT 51
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 34
42268: PUSH
42269: LD_INT 32
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 34
42278: PUSH
42279: LD_INT 89
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: PPUSH
42293: CALL_OW 72
42297: ST_TO_ADDR
// end ;
42298: LD_VAR 0 2
42302: RET
// export function Negate ( value ) ; begin
42303: LD_INT 0
42305: PPUSH
// result := not value ;
42306: LD_ADDR_VAR 0 2
42310: PUSH
42311: LD_VAR 0 1
42315: NOT
42316: ST_TO_ADDR
// end ;
42317: LD_VAR 0 2
42321: RET
// export function Inc ( value ) ; begin
42322: LD_INT 0
42324: PPUSH
// result := value + 1 ;
42325: LD_ADDR_VAR 0 2
42329: PUSH
42330: LD_VAR 0 1
42334: PUSH
42335: LD_INT 1
42337: PLUS
42338: ST_TO_ADDR
// end ;
42339: LD_VAR 0 2
42343: RET
// export function Dec ( value ) ; begin
42344: LD_INT 0
42346: PPUSH
// result := value - 1 ;
42347: LD_ADDR_VAR 0 2
42351: PUSH
42352: LD_VAR 0 1
42356: PUSH
42357: LD_INT 1
42359: MINUS
42360: ST_TO_ADDR
// end ;
42361: LD_VAR 0 2
42365: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42366: LD_INT 0
42368: PPUSH
42369: PPUSH
42370: PPUSH
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
42375: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42376: LD_VAR 0 1
42380: PPUSH
42381: LD_VAR 0 2
42385: PPUSH
42386: CALL_OW 488
42390: NOT
42391: PUSH
42392: LD_VAR 0 3
42396: PPUSH
42397: LD_VAR 0 4
42401: PPUSH
42402: CALL_OW 488
42406: NOT
42407: OR
42408: IFFALSE 42421
// begin result := - 1 ;
42410: LD_ADDR_VAR 0 5
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: ST_TO_ADDR
// exit ;
42419: GO 42656
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42421: LD_ADDR_VAR 0 12
42425: PUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: LD_VAR 0 2
42435: PPUSH
42436: LD_VAR 0 3
42440: PPUSH
42441: LD_VAR 0 4
42445: PPUSH
42446: CALL 41506 0 4
42450: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42451: LD_ADDR_VAR 0 11
42455: PUSH
42456: LD_VAR 0 1
42460: PPUSH
42461: LD_VAR 0 2
42465: PPUSH
42466: LD_VAR 0 12
42470: PUSH
42471: LD_INT 1
42473: ARRAY
42474: PPUSH
42475: LD_VAR 0 12
42479: PUSH
42480: LD_INT 2
42482: ARRAY
42483: PPUSH
42484: CALL_OW 298
42488: ST_TO_ADDR
// distance := 9999 ;
42489: LD_ADDR_VAR 0 10
42493: PUSH
42494: LD_INT 9999
42496: ST_TO_ADDR
// for i := 0 to 5 do
42497: LD_ADDR_VAR 0 6
42501: PUSH
42502: DOUBLE
42503: LD_INT 0
42505: DEC
42506: ST_TO_ADDR
42507: LD_INT 5
42509: PUSH
42510: FOR_TO
42511: IFFALSE 42654
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42513: LD_ADDR_VAR 0 7
42517: PUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: LD_VAR 0 6
42527: PPUSH
42528: LD_VAR 0 11
42532: PPUSH
42533: CALL_OW 272
42537: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42538: LD_ADDR_VAR 0 8
42542: PUSH
42543: LD_VAR 0 2
42547: PPUSH
42548: LD_VAR 0 6
42552: PPUSH
42553: LD_VAR 0 11
42557: PPUSH
42558: CALL_OW 273
42562: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42563: LD_VAR 0 7
42567: PPUSH
42568: LD_VAR 0 8
42572: PPUSH
42573: CALL_OW 488
42577: NOT
42578: IFFALSE 42582
// continue ;
42580: GO 42510
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42582: LD_ADDR_VAR 0 9
42586: PUSH
42587: LD_VAR 0 12
42591: PUSH
42592: LD_INT 1
42594: ARRAY
42595: PPUSH
42596: LD_VAR 0 12
42600: PUSH
42601: LD_INT 2
42603: ARRAY
42604: PPUSH
42605: LD_VAR 0 7
42609: PPUSH
42610: LD_VAR 0 8
42614: PPUSH
42615: CALL_OW 298
42619: ST_TO_ADDR
// if tmp < distance then
42620: LD_VAR 0 9
42624: PUSH
42625: LD_VAR 0 10
42629: LESS
42630: IFFALSE 42652
// begin result := i ;
42632: LD_ADDR_VAR 0 5
42636: PUSH
42637: LD_VAR 0 6
42641: ST_TO_ADDR
// distance := tmp ;
42642: LD_ADDR_VAR 0 10
42646: PUSH
42647: LD_VAR 0 9
42651: ST_TO_ADDR
// end ; end ;
42652: GO 42510
42654: POP
42655: POP
// end ;
42656: LD_VAR 0 5
42660: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42661: LD_INT 0
42663: PPUSH
42664: PPUSH
// if not driver or not IsInUnit ( driver ) then
42665: LD_VAR 0 1
42669: NOT
42670: PUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: CALL_OW 310
42680: NOT
42681: OR
42682: IFFALSE 42686
// exit ;
42684: GO 42776
// vehicle := IsInUnit ( driver ) ;
42686: LD_ADDR_VAR 0 3
42690: PUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 310
42700: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42701: LD_VAR 0 1
42705: PPUSH
42706: LD_STRING \
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: PUSH
42736: LD_STRING E
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_VAR 0 3
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PPUSH
42772: CALL_OW 446
// end ;
42776: LD_VAR 0 2
42780: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42781: LD_INT 0
42783: PPUSH
42784: PPUSH
// if not driver or not IsInUnit ( driver ) then
42785: LD_VAR 0 1
42789: NOT
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 310
42800: NOT
42801: OR
42802: IFFALSE 42806
// exit ;
42804: GO 42896
// vehicle := IsInUnit ( driver ) ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 310
42820: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42821: LD_VAR 0 1
42825: PPUSH
42826: LD_STRING \
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: PUSH
42856: LD_STRING E
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_VAR 0 3
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PPUSH
42892: CALL_OW 447
// end ;
42896: LD_VAR 0 2
42900: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42901: LD_INT 0
42903: PPUSH
42904: PPUSH
42905: PPUSH
// tmp := [ ] ;
42906: LD_ADDR_VAR 0 5
42910: PUSH
42911: EMPTY
42912: ST_TO_ADDR
// for i in units do
42913: LD_ADDR_VAR 0 4
42917: PUSH
42918: LD_VAR 0 1
42922: PUSH
42923: FOR_IN
42924: IFFALSE 42962
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42926: LD_ADDR_VAR 0 5
42930: PUSH
42931: LD_VAR 0 5
42935: PPUSH
42936: LD_VAR 0 5
42940: PUSH
42941: LD_INT 1
42943: PLUS
42944: PPUSH
42945: LD_VAR 0 4
42949: PPUSH
42950: CALL_OW 256
42954: PPUSH
42955: CALL_OW 2
42959: ST_TO_ADDR
42960: GO 42923
42962: POP
42963: POP
// if not tmp then
42964: LD_VAR 0 5
42968: NOT
42969: IFFALSE 42973
// exit ;
42971: GO 43021
// if asc then
42973: LD_VAR 0 2
42977: IFFALSE 43001
// result := SortListByListAsc ( units , tmp ) else
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_VAR 0 1
42988: PPUSH
42989: LD_VAR 0 5
42993: PPUSH
42994: CALL_OW 76
42998: ST_TO_ADDR
42999: GO 43021
// result := SortListByListDesc ( units , tmp ) ;
43001: LD_ADDR_VAR 0 3
43005: PUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: LD_VAR 0 5
43015: PPUSH
43016: CALL_OW 77
43020: ST_TO_ADDR
// end ;
43021: LD_VAR 0 3
43025: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43026: LD_INT 0
43028: PPUSH
43029: PPUSH
// task := GetTaskList ( mech ) ;
43030: LD_ADDR_VAR 0 4
43034: PUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 437
43044: ST_TO_ADDR
// if not task then
43045: LD_VAR 0 4
43049: NOT
43050: IFFALSE 43054
// exit ;
43052: GO 43096
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_VAR 0 4
43063: PUSH
43064: LD_INT 1
43066: ARRAY
43067: PUSH
43068: LD_INT 1
43070: ARRAY
43071: PUSH
43072: LD_STRING r
43074: EQUAL
43075: PUSH
43076: LD_VAR 0 4
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: PUSH
43085: LD_INT 4
43087: ARRAY
43088: PUSH
43089: LD_VAR 0 2
43093: EQUAL
43094: AND
43095: ST_TO_ADDR
// end ;
43096: LD_VAR 0 3
43100: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43101: LD_INT 0
43103: PPUSH
// SetDir ( unit , d ) ;
43104: LD_VAR 0 1
43108: PPUSH
43109: LD_VAR 0 4
43113: PPUSH
43114: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43118: LD_VAR 0 1
43122: PPUSH
43123: LD_VAR 0 2
43127: PPUSH
43128: LD_VAR 0 3
43132: PPUSH
43133: LD_VAR 0 5
43137: PPUSH
43138: CALL_OW 48
// end ;
43142: LD_VAR 0 6
43146: RET
// export function ToNaturalNumber ( number ) ; begin
43147: LD_INT 0
43149: PPUSH
// result := number div 1 ;
43150: LD_ADDR_VAR 0 2
43154: PUSH
43155: LD_VAR 0 1
43159: PUSH
43160: LD_INT 1
43162: DIV
43163: ST_TO_ADDR
// if number < 0 then
43164: LD_VAR 0 1
43168: PUSH
43169: LD_INT 0
43171: LESS
43172: IFFALSE 43182
// result := 0 ;
43174: LD_ADDR_VAR 0 2
43178: PUSH
43179: LD_INT 0
43181: ST_TO_ADDR
// end ;
43182: LD_VAR 0 2
43186: RET
// export function SortByClass ( units , class ) ; var un ; begin
43187: LD_INT 0
43189: PPUSH
43190: PPUSH
// if not units or not class then
43191: LD_VAR 0 1
43195: NOT
43196: PUSH
43197: LD_VAR 0 2
43201: NOT
43202: OR
43203: IFFALSE 43207
// exit ;
43205: GO 43302
// result := [ ] ;
43207: LD_ADDR_VAR 0 3
43211: PUSH
43212: EMPTY
43213: ST_TO_ADDR
// for un in units do
43214: LD_ADDR_VAR 0 4
43218: PUSH
43219: LD_VAR 0 1
43223: PUSH
43224: FOR_IN
43225: IFFALSE 43300
// if GetClass ( un ) = class then
43227: LD_VAR 0 4
43231: PPUSH
43232: CALL_OW 257
43236: PUSH
43237: LD_VAR 0 2
43241: EQUAL
43242: IFFALSE 43269
// result := Insert ( result , 1 , un ) else
43244: LD_ADDR_VAR 0 3
43248: PUSH
43249: LD_VAR 0 3
43253: PPUSH
43254: LD_INT 1
43256: PPUSH
43257: LD_VAR 0 4
43261: PPUSH
43262: CALL_OW 2
43266: ST_TO_ADDR
43267: GO 43298
// result := Replace ( result , result + 1 , un ) ;
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_VAR 0 3
43278: PPUSH
43279: LD_VAR 0 3
43283: PUSH
43284: LD_INT 1
43286: PLUS
43287: PPUSH
43288: LD_VAR 0 4
43292: PPUSH
43293: CALL_OW 1
43297: ST_TO_ADDR
43298: GO 43224
43300: POP
43301: POP
// end ;
43302: LD_VAR 0 3
43306: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43307: LD_INT 0
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
// result := [ ] ;
43316: LD_ADDR_VAR 0 4
43320: PUSH
43321: EMPTY
43322: ST_TO_ADDR
// if x - r < 0 then
43323: LD_VAR 0 1
43327: PUSH
43328: LD_VAR 0 3
43332: MINUS
43333: PUSH
43334: LD_INT 0
43336: LESS
43337: IFFALSE 43349
// min_x := 0 else
43339: LD_ADDR_VAR 0 8
43343: PUSH
43344: LD_INT 0
43346: ST_TO_ADDR
43347: GO 43365
// min_x := x - r ;
43349: LD_ADDR_VAR 0 8
43353: PUSH
43354: LD_VAR 0 1
43358: PUSH
43359: LD_VAR 0 3
43363: MINUS
43364: ST_TO_ADDR
// if y - r < 0 then
43365: LD_VAR 0 2
43369: PUSH
43370: LD_VAR 0 3
43374: MINUS
43375: PUSH
43376: LD_INT 0
43378: LESS
43379: IFFALSE 43391
// min_y := 0 else
43381: LD_ADDR_VAR 0 7
43385: PUSH
43386: LD_INT 0
43388: ST_TO_ADDR
43389: GO 43407
// min_y := y - r ;
43391: LD_ADDR_VAR 0 7
43395: PUSH
43396: LD_VAR 0 2
43400: PUSH
43401: LD_VAR 0 3
43405: MINUS
43406: ST_TO_ADDR
// max_x := x + r ;
43407: LD_ADDR_VAR 0 9
43411: PUSH
43412: LD_VAR 0 1
43416: PUSH
43417: LD_VAR 0 3
43421: PLUS
43422: ST_TO_ADDR
// max_y := y + r ;
43423: LD_ADDR_VAR 0 10
43427: PUSH
43428: LD_VAR 0 2
43432: PUSH
43433: LD_VAR 0 3
43437: PLUS
43438: ST_TO_ADDR
// for _x = min_x to max_x do
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: DOUBLE
43445: LD_VAR 0 8
43449: DEC
43450: ST_TO_ADDR
43451: LD_VAR 0 9
43455: PUSH
43456: FOR_TO
43457: IFFALSE 43558
// for _y = min_y to max_y do
43459: LD_ADDR_VAR 0 6
43463: PUSH
43464: DOUBLE
43465: LD_VAR 0 7
43469: DEC
43470: ST_TO_ADDR
43471: LD_VAR 0 10
43475: PUSH
43476: FOR_TO
43477: IFFALSE 43554
// begin if not ValidHex ( _x , _y ) then
43479: LD_VAR 0 5
43483: PPUSH
43484: LD_VAR 0 6
43488: PPUSH
43489: CALL_OW 488
43493: NOT
43494: IFFALSE 43498
// continue ;
43496: GO 43476
// if GetResourceTypeXY ( _x , _y ) then
43498: LD_VAR 0 5
43502: PPUSH
43503: LD_VAR 0 6
43507: PPUSH
43508: CALL_OW 283
43512: IFFALSE 43552
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43514: LD_ADDR_VAR 0 4
43518: PUSH
43519: LD_VAR 0 4
43523: PPUSH
43524: LD_VAR 0 4
43528: PUSH
43529: LD_INT 1
43531: PLUS
43532: PPUSH
43533: LD_VAR 0 5
43537: PUSH
43538: LD_VAR 0 6
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PPUSH
43547: CALL_OW 1
43551: ST_TO_ADDR
// end ;
43552: GO 43476
43554: POP
43555: POP
43556: GO 43456
43558: POP
43559: POP
// end ;
43560: LD_VAR 0 4
43564: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43565: LD_INT 0
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// if not units then
43575: LD_VAR 0 1
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 44108
// result := UnitFilter ( units , [ f_ok ] ) ;
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_VAR 0 1
43593: PPUSH
43594: LD_INT 50
43596: PUSH
43597: EMPTY
43598: LIST
43599: PPUSH
43600: CALL_OW 72
43604: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43605: LD_ADDR_VAR 0 8
43609: PUSH
43610: LD_VAR 0 1
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: PPUSH
43619: CALL_OW 255
43623: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43624: LD_ADDR_VAR 0 10
43628: PUSH
43629: LD_INT 29
43631: PUSH
43632: LD_INT 91
43634: PUSH
43635: LD_INT 49
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// if not result then
43643: LD_VAR 0 3
43647: NOT
43648: IFFALSE 43652
// exit ;
43650: GO 44108
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43652: LD_ADDR_VAR 0 5
43656: PUSH
43657: LD_INT 81
43659: PUSH
43660: LD_VAR 0 8
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PPUSH
43669: CALL_OW 69
43673: ST_TO_ADDR
// for i in result do
43674: LD_ADDR_VAR 0 4
43678: PUSH
43679: LD_VAR 0 3
43683: PUSH
43684: FOR_IN
43685: IFFALSE 44106
// begin tag := GetTag ( i ) + 1 ;
43687: LD_ADDR_VAR 0 9
43691: PUSH
43692: LD_VAR 0 4
43696: PPUSH
43697: CALL_OW 110
43701: PUSH
43702: LD_INT 1
43704: PLUS
43705: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43706: LD_ADDR_VAR 0 7
43710: PUSH
43711: LD_VAR 0 4
43715: PPUSH
43716: CALL_OW 250
43720: PPUSH
43721: LD_VAR 0 4
43725: PPUSH
43726: CALL_OW 251
43730: PPUSH
43731: LD_INT 6
43733: PPUSH
43734: CALL 43307 0 3
43738: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43739: LD_VAR 0 4
43743: PPUSH
43744: CALL_OW 247
43748: PUSH
43749: LD_INT 2
43751: EQUAL
43752: PUSH
43753: LD_VAR 0 7
43757: AND
43758: PUSH
43759: LD_VAR 0 4
43763: PPUSH
43764: CALL_OW 264
43768: PUSH
43769: LD_VAR 0 10
43773: IN
43774: NOT
43775: AND
43776: IFFALSE 43815
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43778: LD_VAR 0 4
43782: PPUSH
43783: LD_VAR 0 7
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PPUSH
43796: LD_VAR 0 7
43800: PUSH
43801: LD_INT 1
43803: ARRAY
43804: PUSH
43805: LD_INT 2
43807: ARRAY
43808: PPUSH
43809: CALL_OW 116
43813: GO 44104
// if path > tag then
43815: LD_VAR 0 2
43819: PUSH
43820: LD_VAR 0 9
43824: GREATER
43825: IFFALSE 44033
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43827: LD_ADDR_VAR 0 6
43831: PUSH
43832: LD_VAR 0 5
43836: PPUSH
43837: LD_INT 91
43839: PUSH
43840: LD_VAR 0 4
43844: PUSH
43845: LD_INT 8
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: PPUSH
43853: CALL_OW 72
43857: ST_TO_ADDR
// if nearEnemy then
43858: LD_VAR 0 6
43862: IFFALSE 43931
// begin if GetWeapon ( i ) = ru_time_lapser then
43864: LD_VAR 0 4
43868: PPUSH
43869: CALL_OW 264
43873: PUSH
43874: LD_INT 49
43876: EQUAL
43877: IFFALSE 43905
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43879: LD_VAR 0 4
43883: PPUSH
43884: LD_VAR 0 6
43888: PPUSH
43889: LD_VAR 0 4
43893: PPUSH
43894: CALL_OW 74
43898: PPUSH
43899: CALL_OW 112
43903: GO 43929
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43905: LD_VAR 0 4
43909: PPUSH
43910: LD_VAR 0 6
43914: PPUSH
43915: LD_VAR 0 4
43919: PPUSH
43920: CALL_OW 74
43924: PPUSH
43925: CALL_OW 115
// end else
43929: GO 44031
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43931: LD_VAR 0 4
43935: PPUSH
43936: LD_VAR 0 2
43940: PUSH
43941: LD_VAR 0 9
43945: ARRAY
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: PPUSH
43951: LD_VAR 0 2
43955: PUSH
43956: LD_VAR 0 9
43960: ARRAY
43961: PUSH
43962: LD_INT 2
43964: ARRAY
43965: PPUSH
43966: CALL_OW 297
43970: PUSH
43971: LD_INT 6
43973: GREATER
43974: IFFALSE 44017
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43976: LD_VAR 0 4
43980: PPUSH
43981: LD_VAR 0 2
43985: PUSH
43986: LD_VAR 0 9
43990: ARRAY
43991: PUSH
43992: LD_INT 1
43994: ARRAY
43995: PPUSH
43996: LD_VAR 0 2
44000: PUSH
44001: LD_VAR 0 9
44005: ARRAY
44006: PUSH
44007: LD_INT 2
44009: ARRAY
44010: PPUSH
44011: CALL_OW 114
44015: GO 44031
// SetTag ( i , tag ) ;
44017: LD_VAR 0 4
44021: PPUSH
44022: LD_VAR 0 9
44026: PPUSH
44027: CALL_OW 109
// end else
44031: GO 44104
// if enemy then
44033: LD_VAR 0 5
44037: IFFALSE 44104
// begin if GetWeapon ( i ) = ru_time_lapser then
44039: LD_VAR 0 4
44043: PPUSH
44044: CALL_OW 264
44048: PUSH
44049: LD_INT 49
44051: EQUAL
44052: IFFALSE 44080
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44054: LD_VAR 0 4
44058: PPUSH
44059: LD_VAR 0 5
44063: PPUSH
44064: LD_VAR 0 4
44068: PPUSH
44069: CALL_OW 74
44073: PPUSH
44074: CALL_OW 112
44078: GO 44104
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44080: LD_VAR 0 4
44084: PPUSH
44085: LD_VAR 0 5
44089: PPUSH
44090: LD_VAR 0 4
44094: PPUSH
44095: CALL_OW 74
44099: PPUSH
44100: CALL_OW 115
// end ; end ;
44104: GO 43684
44106: POP
44107: POP
// end ;
44108: LD_VAR 0 3
44112: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44113: LD_INT 0
44115: PPUSH
44116: PPUSH
44117: PPUSH
// if not unit or IsInUnit ( unit ) then
44118: LD_VAR 0 1
44122: NOT
44123: PUSH
44124: LD_VAR 0 1
44128: PPUSH
44129: CALL_OW 310
44133: OR
44134: IFFALSE 44138
// exit ;
44136: GO 44229
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44138: LD_ADDR_VAR 0 4
44142: PUSH
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 250
44152: PPUSH
44153: LD_VAR 0 2
44157: PPUSH
44158: LD_INT 1
44160: PPUSH
44161: CALL_OW 272
44165: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44166: LD_ADDR_VAR 0 5
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 251
44180: PPUSH
44181: LD_VAR 0 2
44185: PPUSH
44186: LD_INT 1
44188: PPUSH
44189: CALL_OW 273
44193: ST_TO_ADDR
// if ValidHex ( x , y ) then
44194: LD_VAR 0 4
44198: PPUSH
44199: LD_VAR 0 5
44203: PPUSH
44204: CALL_OW 488
44208: IFFALSE 44229
// ComTurnXY ( unit , x , y ) ;
44210: LD_VAR 0 1
44214: PPUSH
44215: LD_VAR 0 4
44219: PPUSH
44220: LD_VAR 0 5
44224: PPUSH
44225: CALL_OW 118
// end ;
44229: LD_VAR 0 3
44233: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44234: LD_INT 0
44236: PPUSH
44237: PPUSH
// result := false ;
44238: LD_ADDR_VAR 0 3
44242: PUSH
44243: LD_INT 0
44245: ST_TO_ADDR
// if not units then
44246: LD_VAR 0 2
44250: NOT
44251: IFFALSE 44255
// exit ;
44253: GO 44300
// for i in units do
44255: LD_ADDR_VAR 0 4
44259: PUSH
44260: LD_VAR 0 2
44264: PUSH
44265: FOR_IN
44266: IFFALSE 44298
// if See ( side , i ) then
44268: LD_VAR 0 1
44272: PPUSH
44273: LD_VAR 0 4
44277: PPUSH
44278: CALL_OW 292
44282: IFFALSE 44296
// begin result := true ;
44284: LD_ADDR_VAR 0 3
44288: PUSH
44289: LD_INT 1
44291: ST_TO_ADDR
// exit ;
44292: POP
44293: POP
44294: GO 44300
// end ;
44296: GO 44265
44298: POP
44299: POP
// end ;
44300: LD_VAR 0 3
44304: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44305: LD_INT 0
44307: PPUSH
44308: PPUSH
44309: PPUSH
44310: PPUSH
// if not unit or not points then
44311: LD_VAR 0 1
44315: NOT
44316: PUSH
44317: LD_VAR 0 2
44321: NOT
44322: OR
44323: IFFALSE 44327
// exit ;
44325: GO 44417
// dist := 99999 ;
44327: LD_ADDR_VAR 0 5
44331: PUSH
44332: LD_INT 99999
44334: ST_TO_ADDR
// for i in points do
44335: LD_ADDR_VAR 0 4
44339: PUSH
44340: LD_VAR 0 2
44344: PUSH
44345: FOR_IN
44346: IFFALSE 44415
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44348: LD_ADDR_VAR 0 6
44352: PUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: LD_VAR 0 4
44362: PUSH
44363: LD_INT 1
44365: ARRAY
44366: PPUSH
44367: LD_VAR 0 4
44371: PUSH
44372: LD_INT 2
44374: ARRAY
44375: PPUSH
44376: CALL_OW 297
44380: ST_TO_ADDR
// if tmpDist < dist then
44381: LD_VAR 0 6
44385: PUSH
44386: LD_VAR 0 5
44390: LESS
44391: IFFALSE 44413
// begin result := i ;
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_VAR 0 4
44402: ST_TO_ADDR
// dist := tmpDist ;
44403: LD_ADDR_VAR 0 5
44407: PUSH
44408: LD_VAR 0 6
44412: ST_TO_ADDR
// end ; end ;
44413: GO 44345
44415: POP
44416: POP
// end ;
44417: LD_VAR 0 3
44421: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44422: LD_INT 0
44424: PPUSH
// uc_side := side ;
44425: LD_ADDR_OWVAR 20
44429: PUSH
44430: LD_VAR 0 1
44434: ST_TO_ADDR
// uc_nation := 3 ;
44435: LD_ADDR_OWVAR 21
44439: PUSH
44440: LD_INT 3
44442: ST_TO_ADDR
// vc_chassis := 25 ;
44443: LD_ADDR_OWVAR 37
44447: PUSH
44448: LD_INT 25
44450: ST_TO_ADDR
// vc_engine := engine_siberite ;
44451: LD_ADDR_OWVAR 39
44455: PUSH
44456: LD_INT 3
44458: ST_TO_ADDR
// vc_control := control_computer ;
44459: LD_ADDR_OWVAR 38
44463: PUSH
44464: LD_INT 3
44466: ST_TO_ADDR
// vc_weapon := 59 ;
44467: LD_ADDR_OWVAR 40
44471: PUSH
44472: LD_INT 59
44474: ST_TO_ADDR
// result := CreateVehicle ;
44475: LD_ADDR_VAR 0 5
44479: PUSH
44480: CALL_OW 45
44484: ST_TO_ADDR
// SetDir ( result , d ) ;
44485: LD_VAR 0 5
44489: PPUSH
44490: LD_VAR 0 4
44494: PPUSH
44495: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44499: LD_VAR 0 5
44503: PPUSH
44504: LD_VAR 0 2
44508: PPUSH
44509: LD_VAR 0 3
44513: PPUSH
44514: LD_INT 0
44516: PPUSH
44517: CALL_OW 48
// end ;
44521: LD_VAR 0 5
44525: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44526: LD_INT 0
44528: PPUSH
44529: PPUSH
44530: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44531: LD_ADDR_VAR 0 2
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44554: LD_VAR 0 1
44558: NOT
44559: PUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: CALL_OW 264
44569: PUSH
44570: LD_INT 12
44572: PUSH
44573: LD_INT 51
44575: PUSH
44576: LD_INT 32
44578: PUSH
44579: LD_INT 89
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: IN
44588: NOT
44589: OR
44590: IFFALSE 44594
// exit ;
44592: GO 44692
// for i := 1 to 3 do
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: DOUBLE
44600: LD_INT 1
44602: DEC
44603: ST_TO_ADDR
44604: LD_INT 3
44606: PUSH
44607: FOR_TO
44608: IFFALSE 44690
// begin tmp := GetCargo ( cargo , i ) ;
44610: LD_ADDR_VAR 0 4
44614: PUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: LD_VAR 0 3
44624: PPUSH
44625: CALL_OW 289
44629: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44630: LD_ADDR_VAR 0 2
44634: PUSH
44635: LD_VAR 0 2
44639: PPUSH
44640: LD_VAR 0 3
44644: PPUSH
44645: LD_VAR 0 4
44649: PPUSH
44650: CALL_OW 1
44654: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44655: LD_ADDR_VAR 0 2
44659: PUSH
44660: LD_VAR 0 2
44664: PPUSH
44665: LD_INT 4
44667: PPUSH
44668: LD_VAR 0 2
44672: PUSH
44673: LD_INT 4
44675: ARRAY
44676: PUSH
44677: LD_VAR 0 4
44681: PLUS
44682: PPUSH
44683: CALL_OW 1
44687: ST_TO_ADDR
// end ;
44688: GO 44607
44690: POP
44691: POP
// end ;
44692: LD_VAR 0 2
44696: RET
// export function Length ( array ) ; begin
44697: LD_INT 0
44699: PPUSH
// result := array + 0 ;
44700: LD_ADDR_VAR 0 2
44704: PUSH
44705: LD_VAR 0 1
44709: PUSH
44710: LD_INT 0
44712: PLUS
44713: ST_TO_ADDR
// end ;
44714: LD_VAR 0 2
44718: RET
// export function PrepareArray ( array ) ; begin
44719: LD_INT 0
44721: PPUSH
// result := array diff 0 ;
44722: LD_ADDR_VAR 0 2
44726: PUSH
44727: LD_VAR 0 1
44731: PUSH
44732: LD_INT 0
44734: DIFF
44735: ST_TO_ADDR
// if not result [ 1 ] then
44736: LD_VAR 0 2
44740: PUSH
44741: LD_INT 1
44743: ARRAY
44744: NOT
44745: IFFALSE 44765
// result := Delete ( result , 1 ) ;
44747: LD_ADDR_VAR 0 2
44751: PUSH
44752: LD_VAR 0 2
44756: PPUSH
44757: LD_INT 1
44759: PPUSH
44760: CALL_OW 3
44764: ST_TO_ADDR
// end ;
44765: LD_VAR 0 2
44769: RET
