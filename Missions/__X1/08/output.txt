// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1516 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2700 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41812 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3740 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnitForce ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3740 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnitForce ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3740 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnitForce ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3740 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3740 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnitForce ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3740 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnitForce ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3740 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnitForce ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3740 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnitForce ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3740 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnitForce ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3740 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnitForce ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3740 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1446
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: IFFALSE 1378
1352: PUSH
1353: LD_INT 22
1355: PUSH
1356: LD_INT 2
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 58
1365: PUSH
1366: EMPTY
1367: LIST
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: AND
1378: IFFALSE 1420
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 22
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PUSH
1395: LD_INT 58
1397: PUSH
1398: EMPTY
1399: LIST
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PUSH
1410: LD_INT 1
1412: ARRAY
1413: PPUSH
1414: CALL_OW 52
1418: GO 1435
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1420: LD_VAR 0 2
1424: PPUSH
1425: LD_INT 6
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// ComHold ( i ) ;
1435: LD_VAR 0 2
1439: PPUSH
1440: CALL_OW 140
// end ;
1444: GO 1323
1446: POP
1447: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1448: LD_EXP 5
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1463: LD_EXP 5
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: CALL_OW 119
// if Givi then
1475: LD_EXP 6
1479: IFFALSE 1511
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1481: LD_EXP 6
1485: PPUSH
1486: LD_INT 129
1488: PPUSH
1489: LD_INT 158
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1499: LD_EXP 6
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: CALL_OW 119
// end ; end ; end_of_file
1511: LD_VAR 0 1
1515: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1516: LD_INT 0
1518: PPUSH
1519: PPUSH
1520: PPUSH
// uc_side := 3 ;
1521: LD_ADDR_OWVAR 20
1525: PUSH
1526: LD_INT 3
1528: ST_TO_ADDR
// uc_nation := 3 ;
1529: LD_ADDR_OWVAR 21
1533: PUSH
1534: LD_INT 3
1536: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1537: LD_ADDR_EXP 20
1541: PUSH
1542: LD_STRING Burlak
1544: PPUSH
1545: CALL_OW 25
1549: ST_TO_ADDR
// kabulAttackers := [ ] ;
1550: LD_ADDR_EXP 18
1554: PUSH
1555: EMPTY
1556: ST_TO_ADDR
// heikeAttackers := [ ] ;
1557: LD_ADDR_EXP 19
1561: PUSH
1562: EMPTY
1563: ST_TO_ADDR
// for i := 1 to 9 do
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 9
1576: PUSH
1577: FOR_TO
1578: IFFALSE 1670
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1580: LD_INT 0
1582: PPUSH
1583: LD_INT 1
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 380
// un := CreateHuman ;
1593: LD_ADDR_VAR 0 3
1597: PUSH
1598: CALL_OW 44
1602: ST_TO_ADDR
// if Prob ( 40 ) then
1603: LD_INT 40
1605: PPUSH
1606: CALL_OW 13
1610: IFFALSE 1624
// SetClass ( un , class_bazooker ) ;
1612: LD_VAR 0 3
1616: PPUSH
1617: LD_INT 9
1619: PPUSH
1620: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1624: LD_VAR 0 3
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_INT 5
1634: PPUSH
1635: CALL_OW 12
1639: PPUSH
1640: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1644: LD_VAR 0 3
1648: PPUSH
1649: LD_INT 10
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 49
// KillUnit ( un ) ;
1659: LD_VAR 0 3
1663: PPUSH
1664: CALL_OW 66
// end ;
1668: GO 1577
1670: POP
1671: POP
// for i := 1 to 9 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 9
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1907
// begin if rand ( 0 , 1 ) then
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: CALL_OW 12
1698: IFFALSE 1761
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 1
1705: PPUSH
1706: LD_INT 7
1708: PPUSH
1709: CALL_OW 380
// un := CreateHuman ;
1713: LD_ADDR_VAR 0 3
1717: PUSH
1718: CALL_OW 44
1722: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1735: LD_VAR 0 3
1739: PPUSH
1740: LD_INT 3
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL_OW 49
// ComHold ( un ) ;
1750: LD_VAR 0 3
1754: PPUSH
1755: CALL_OW 140
// end else
1759: GO 1876
// begin vc_chassis := ru_medium_tracked ;
1761: LD_ADDR_OWVAR 37
1765: PUSH
1766: LD_INT 22
1768: ST_TO_ADDR
// vc_engine := engine_combustion ;
1769: LD_ADDR_OWVAR 39
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// vc_control := control_manual ;
1777: LD_ADDR_OWVAR 38
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1785: LD_ADDR_OWVAR 40
1789: PUSH
1790: LD_INT 44
1792: PUSH
1793: LD_INT 43
1795: PUSH
1796: LD_INT 45
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 1
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: CALL_OW 12
1814: ARRAY
1815: ST_TO_ADDR
// un := CreateVehicle ;
1816: LD_ADDR_VAR 0 3
1820: PUSH
1821: CALL_OW 45
1825: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1826: LD_VAR 0 3
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1838: LD_VAR 0 3
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 0
1848: PPUSH
1849: CALL_OW 49
// ComHold ( un ) ;
1853: LD_VAR 0 3
1857: PPUSH
1858: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1862: CALL_OW 44
1866: PPUSH
1867: LD_VAR 0 3
1871: PPUSH
1872: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1876: LD_ADDR_EXP 18
1880: PUSH
1881: LD_EXP 18
1885: PPUSH
1886: LD_EXP 18
1890: PUSH
1891: LD_INT 1
1893: PLUS
1894: PPUSH
1895: LD_VAR 0 3
1899: PPUSH
1900: CALL_OW 1
1904: ST_TO_ADDR
// end ;
1905: GO 1685
1907: POP
1908: POP
// for i := 1 to 5 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 5
1921: PUSH
1922: FOR_TO
1923: IFFALSE 2156
// begin if rand ( 0 , 1 ) then
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 12
1935: IFFALSE 2010
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_INT 7
1945: PPUSH
1946: CALL_OW 380
// un := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1972: LD_VAR 0 3
1976: PPUSH
1977: LD_INT 9
1979: PPUSH
1980: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_INT 8
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 49
// ComHold ( un ) ;
1999: LD_VAR 0 3
2003: PPUSH
2004: CALL_OW 140
// end else
2008: GO 2125
// begin vc_chassis := ru_heavy_wheeled ;
2010: LD_ADDR_OWVAR 37
2014: PUSH
2015: LD_INT 23
2017: ST_TO_ADDR
// vc_engine := engine_combustion ;
2018: LD_ADDR_OWVAR 39
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// vc_control := control_manual ;
2026: LD_ADDR_OWVAR 38
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2034: LD_ADDR_OWVAR 40
2038: PUSH
2039: LD_INT 44
2041: PUSH
2042: LD_INT 43
2044: PUSH
2045: LD_INT 45
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 1
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 12
2063: ARRAY
2064: ST_TO_ADDR
// un := CreateVehicle ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: CALL_OW 45
2074: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2075: LD_VAR 0 3
2079: PPUSH
2080: LD_INT 4
2082: PPUSH
2083: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 8
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 49
// ComHold ( un ) ;
2102: LD_VAR 0 3
2106: PPUSH
2107: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2111: CALL_OW 44
2115: PPUSH
2116: LD_VAR 0 3
2120: PPUSH
2121: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2125: LD_ADDR_EXP 18
2129: PUSH
2130: LD_EXP 18
2134: PPUSH
2135: LD_EXP 18
2139: PUSH
2140: LD_INT 1
2142: PLUS
2143: PPUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 1
2153: ST_TO_ADDR
// end ;
2154: GO 1922
2156: POP
2157: POP
// for i := 1 to 5 do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_INT 5
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2276
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 7
2182: PPUSH
2183: CALL_OW 380
// un := CreateHuman ;
2187: LD_ADDR_VAR 0 3
2191: PUSH
2192: CALL_OW 44
2196: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2197: LD_VAR 0 3
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2209: LD_VAR 0 3
2213: PPUSH
2214: LD_INT 9
2216: PPUSH
2217: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2221: LD_VAR 0 3
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: LD_INT 0
2231: PPUSH
2232: CALL_OW 49
// ComHold ( un ) ;
2236: LD_VAR 0 3
2240: PPUSH
2241: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2245: LD_ADDR_EXP 18
2249: PUSH
2250: LD_EXP 18
2254: PPUSH
2255: LD_EXP 18
2259: PUSH
2260: LD_INT 1
2262: PLUS
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: CALL_OW 1
2273: ST_TO_ADDR
// end ;
2274: GO 2171
2276: POP
2277: POP
// for i := 1 to 12 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 12
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2543
// begin if Prob ( 22 ) then
2294: LD_INT 22
2296: PPUSH
2297: CALL_OW 13
2301: IFFALSE 2364
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2303: LD_INT 0
2305: PPUSH
2306: LD_INT 1
2308: PPUSH
2309: LD_INT 10
2311: PPUSH
2312: CALL_OW 380
// un := CreateHuman ;
2316: LD_ADDR_VAR 0 3
2320: PUSH
2321: CALL_OW 44
2325: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2326: LD_VAR 0 3
2330: PPUSH
2331: LD_INT 3
2333: PPUSH
2334: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2338: LD_VAR 0 3
2342: PPUSH
2343: LD_INT 4
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 49
// ComHold ( un ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: CALL_OW 140
// end else
2362: GO 2512
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2364: LD_ADDR_OWVAR 37
2368: PUSH
2369: LD_INT 22
2371: PUSH
2372: LD_INT 24
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 1
2381: PPUSH
2382: LD_INT 2
2384: PPUSH
2385: CALL_OW 12
2389: ARRAY
2390: ST_TO_ADDR
// vc_engine := engine_combustion ;
2391: LD_ADDR_OWVAR 39
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// vc_control := control_manual ;
2399: LD_ADDR_OWVAR 38
2403: PUSH
2404: LD_INT 1
2406: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2407: LD_ADDR_OWVAR 40
2411: PUSH
2412: LD_INT 44
2414: PUSH
2415: LD_INT 43
2417: PUSH
2418: LD_INT 43
2420: PUSH
2421: LD_INT 45
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 1
2432: PPUSH
2433: LD_INT 4
2435: PPUSH
2436: CALL_OW 12
2440: ARRAY
2441: ST_TO_ADDR
// un := CreateVehicle ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 45
2451: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2464: LD_VAR 0 3
2468: PPUSH
2469: LD_INT 4
2471: PPUSH
2472: LD_INT 0
2474: PPUSH
2475: CALL_OW 49
// ComHold ( un ) ;
2479: LD_VAR 0 3
2483: PPUSH
2484: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2488: LD_INT 0
2490: PPUSH
2491: LD_INT 10
2493: PPUSH
2494: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2498: CALL_OW 44
2502: PPUSH
2503: LD_VAR 0 3
2507: PPUSH
2508: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2512: LD_ADDR_EXP 19
2516: PUSH
2517: LD_EXP 19
2521: PPUSH
2522: LD_EXP 19
2526: PUSH
2527: LD_INT 1
2529: PLUS
2530: PPUSH
2531: LD_VAR 0 3
2535: PPUSH
2536: CALL_OW 1
2540: ST_TO_ADDR
// end ;
2541: GO 2291
2543: POP
2544: POP
// end ;
2545: LD_VAR 0 1
2549: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2550: LD_EXP 3
2554: IFFALSE 2562
2556: PUSH
2557: LD_EXP 18
2561: AND
2562: IFFALSE 2622
2564: GO 2566
2566: DISABLE
2567: LD_INT 0
2569: PPUSH
// begin enable ;
2570: ENABLE
// for i in kabulAttackers do
2571: LD_ADDR_VAR 0 1
2575: PUSH
2576: LD_EXP 18
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2620
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2584: LD_VAR 0 1
2588: PPUSH
2589: LD_INT 22
2591: PUSH
2592: LD_INT 5
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PPUSH
2599: CALL_OW 69
2603: PPUSH
2604: LD_VAR 0 1
2608: PPUSH
2609: CALL_OW 74
2613: PPUSH
2614: CALL_OW 115
2618: GO 2581
2620: POP
2621: POP
// end ;
2622: PPOPN 1
2624: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2625: LD_EXP 4
2629: IFFALSE 2637
2631: PUSH
2632: LD_EXP 19
2636: AND
2637: IFFALSE 2697
2639: GO 2641
2641: DISABLE
2642: LD_INT 0
2644: PPUSH
// begin enable ;
2645: ENABLE
// for i in heikeAttackers do
2646: LD_ADDR_VAR 0 1
2650: PUSH
2651: LD_EXP 19
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2695
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: PPUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 74
2688: PPUSH
2689: CALL_OW 115
2693: GO 2656
2695: POP
2696: POP
// end ; end_of_file
2697: PPOPN 1
2699: END
// export function Action ; var i ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// Video ( true ) ;
2704: LD_INT 1
2706: PPUSH
2707: CALL 41784 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2711: LD_INT 111
2713: PPUSH
2714: LD_INT 168
2716: PPUSH
2717: LD_INT 2
2719: PPUSH
2720: LD_INT 25
2722: NEG
2723: PPUSH
2724: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2728: LD_INT 102
2730: PPUSH
2731: LD_INT 47
2733: PPUSH
2734: LD_INT 2
2736: PPUSH
2737: LD_INT 40
2739: NEG
2740: PPUSH
2741: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2745: LD_EXP 5
2749: PPUSH
2750: CALL_OW 87
// startAttackOnKabul := true ;
2754: LD_ADDR_EXP 3
2758: PUSH
2759: LD_INT 1
2761: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2762: LD_INT 70
2764: PPUSH
2765: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2769: LD_INT 102
2771: PPUSH
2772: LD_INT 47
2774: PPUSH
2775: CALL_OW 84
// if Givi then
2779: LD_EXP 6
2783: IFFALSE 2974
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2785: LD_EXP 6
2789: PPUSH
2790: LD_INT 113
2792: PPUSH
2793: LD_INT 162
2795: PPUSH
2796: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2800: LD_EXP 6
2804: PPUSH
2805: LD_EXP 5
2809: PPUSH
2810: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2814: LD_EXP 6
2818: PPUSH
2819: LD_STRING DG-Intro-1
2821: PPUSH
2822: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2826: LD_EXP 6
2830: PPUSH
2831: LD_STRING DG-Intro-2
2833: PPUSH
2834: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2838: LD_EXP 5
2842: PPUSH
2843: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2847: LD_INT 102
2849: PPUSH
2850: LD_INT 47
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2860: LD_INT 10
2862: PPUSH
2863: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2867: LD_EXP 5
2871: PPUSH
2872: LD_STRING DH-Intro-3
2874: PPUSH
2875: CALL_OW 88
// if Mike then
2879: LD_EXP 7
2883: IFFALSE 2972
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2885: LD_INT 92
2887: PPUSH
2888: LD_INT 129
2890: PPUSH
2891: LD_INT 2
2893: PPUSH
2894: LD_INT 18
2896: NEG
2897: PPUSH
2898: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2902: LD_INT 92
2904: PPUSH
2905: LD_INT 129
2907: PPUSH
2908: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2912: LD_EXP 7
2916: PUSH
2917: LD_EXP 10
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PPUSH
2926: LD_EXP 5
2930: PPUSH
2931: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2935: LD_EXP 7
2939: PPUSH
2940: LD_STRING DM-Intro-4
2942: PPUSH
2943: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2947: LD_EXP 10
2951: PPUSH
2952: LD_STRING DK-Intro-5
2954: PPUSH
2955: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2959: LD_INT 92
2961: PPUSH
2962: LD_INT 129
2964: PPUSH
2965: LD_INT 2
2967: PPUSH
2968: CALL_OW 331
// end ; end else
2972: GO 3227
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2974: LD_EXP 16
2978: PPUSH
2979: LD_INT 26
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 72
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PPUSH
2998: LD_STRING DArm-Intro-b-1
3000: PPUSH
3001: CALL_OW 88
3005: NOT
3006: IFFALSE 3039
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3008: LD_EXP 16
3012: PPUSH
3013: LD_INT 26
3015: PUSH
3016: LD_INT 2
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 72
3027: PUSH
3028: LD_INT 1
3030: ARRAY
3031: PPUSH
3032: LD_STRING DArf-Intro-b-1
3034: PPUSH
3035: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3039: LD_EXP 16
3043: PPUSH
3044: LD_INT 26
3046: PUSH
3047: LD_INT 1
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 72
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_STRING DArm-Intro-b-2
3065: PPUSH
3066: CALL_OW 88
3070: NOT
3071: IFFALSE 3104
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3073: LD_EXP 16
3077: PPUSH
3078: LD_INT 26
3080: PUSH
3081: LD_INT 2
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PPUSH
3088: CALL_OW 72
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PPUSH
3097: LD_STRING DArf-Intro-b-2
3099: PPUSH
3100: CALL_OW 88
// if Kaia then
3104: LD_EXP 10
3108: IFFALSE 3122
// Say ( Kaia , DK-Intro-5 ) ;
3110: LD_EXP 10
3114: PPUSH
3115: LD_STRING DK-Intro-5
3117: PPUSH
3118: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3122: LD_INT 92
3124: PPUSH
3125: LD_INT 129
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: LD_INT 18
3133: NEG
3134: PPUSH
3135: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3139: LD_INT 92
3141: PPUSH
3142: LD_INT 129
3144: PPUSH
3145: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3149: LD_EXP 16
3153: PPUSH
3154: LD_INT 26
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 72
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PPUSH
3173: LD_STRING DArm-Intro-b-4
3175: PPUSH
3176: CALL_OW 88
3180: NOT
3181: IFFALSE 3214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3183: LD_EXP 16
3187: PPUSH
3188: LD_INT 26
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PPUSH
3198: CALL_OW 72
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PPUSH
3207: LD_STRING DArf-Intro-b-4
3209: PPUSH
3210: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3214: LD_INT 92
3216: PPUSH
3217: LD_INT 129
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3227: LD_EXP 5
3231: PPUSH
3232: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3236: LD_EXP 20
3240: PPUSH
3241: LD_STRING DB-Intro-6
3243: PPUSH
3244: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3248: LD_EXP 5
3252: PPUSH
3253: LD_STRING DH-Intro-7
3255: PPUSH
3256: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3260: LD_EXP 20
3264: PPUSH
3265: LD_STRING DB-Intro-8
3267: PPUSH
3268: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3272: LD_EXP 20
3276: PPUSH
3277: LD_STRING DB-Intro-9
3279: PPUSH
3280: CALL_OW 94
// if Givi then
3284: LD_EXP 6
3288: IFFALSE 3316
// begin Say ( Givi , DG-Intro-10 ) ;
3290: LD_EXP 6
3294: PPUSH
3295: LD_STRING DG-Intro-10
3297: PPUSH
3298: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3302: LD_EXP 10
3306: PPUSH
3307: LD_STRING DK-Intro-11
3309: PPUSH
3310: CALL_OW 88
// end else
3314: GO 3381
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3316: LD_EXP 16
3320: PPUSH
3321: LD_INT 26
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PPUSH
3331: CALL_OW 72
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_STRING DArm-Intro-b-10
3342: PPUSH
3343: CALL_OW 88
3347: NOT
3348: IFFALSE 3381
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3350: LD_EXP 16
3354: PPUSH
3355: LD_INT 26
3357: PUSH
3358: LD_INT 2
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 1
3372: ARRAY
3373: PPUSH
3374: LD_STRING DArf-Intro-b-10
3376: PPUSH
3377: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3381: LD_EXP 7
3385: PPUSH
3386: LD_STRING DM-Intro-12
3388: PPUSH
3389: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3393: LD_EXP 14
3397: PPUSH
3398: LD_STRING DKs-Intro-13
3400: PPUSH
3401: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3405: LD_EXP 9
3409: PPUSH
3410: LD_STRING DKam-Intro-14
3412: PPUSH
3413: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3417: LD_STRING QSurrender
3419: PPUSH
3420: CALL_OW 97
3424: PUSH
3425: LD_INT 1
3427: DOUBLE
3428: EQUAL
3429: IFTRUE 3433
3431: GO 3452
3433: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3434: LD_EXP 5
3438: PPUSH
3439: LD_STRING DH-Intro-16
3441: PPUSH
3442: CALL_OW 88
// missionEnd ;
3446: CALL 3638 0 0
// end ; 2 :
3450: GO 3496
3452: LD_INT 2
3454: DOUBLE
3455: EQUAL
3456: IFTRUE 3460
3458: GO 3495
3460: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3461: LD_EXP 5
3465: PPUSH
3466: LD_STRING DH-Intro-a-16
3468: PPUSH
3469: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3473: LD_EXP 20
3477: PPUSH
3478: LD_STRING DB-Intro-a-17
3480: PPUSH
3481: CALL_OW 94
// startAttackOnHeike := true ;
3485: LD_ADDR_EXP 4
3489: PUSH
3490: LD_INT 1
3492: ST_TO_ADDR
// end ; end ;
3493: GO 3496
3495: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: LD_INT 2
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3536
// ComAgressiveMove ( i , 98 , 143 ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 98
3526: PPUSH
3527: LD_INT 143
3529: PPUSH
3530: CALL_OW 114
3534: GO 3516
3536: POP
3537: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3538: LD_EXP 5
3542: PPUSH
3543: LD_INT 84
3545: PPUSH
3546: LD_INT 116
3548: PPUSH
3549: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3553: LD_INT 98
3555: PPUSH
3556: LD_INT 143
3558: PPUSH
3559: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3563: LD_INT 35
3565: PPUSH
3566: CALL_OW 67
// until IsDead ( Heike ) ;
3570: LD_EXP 5
3574: PPUSH
3575: CALL_OW 301
3579: IFFALSE 3563
// wait ( 0 0$3 ) ;
3581: LD_INT 105
3583: PPUSH
3584: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3588: LD_STRING HeikeNoSurrender
3590: PPUSH
3591: CALL_OW 104
// end ;
3595: LD_VAR 0 1
3599: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3600: LD_EXP 5
3604: PPUSH
3605: CALL_OW 256
3609: PUSH
3610: LD_INT 900
3612: LESS
3613: IFFALSE 3637
3615: GO 3617
3617: DISABLE
// begin wait ( 0 0$3 ) ;
3618: LD_INT 105
3620: PPUSH
3621: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3625: LD_EXP 5
3629: PPUSH
3630: LD_INT 100
3632: PPUSH
3633: CALL_OW 234
// end ;
3637: END
// function MissionEnd ( ) ; begin
3638: LD_INT 0
3640: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3641: LD_INT 1
3643: PPUSH
3644: LD_STRING %_cont
3646: PPUSH
3647: CALL_OW 340
// end ; end_of_file
3651: LD_VAR 0 1
3655: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3656: LD_INT 0
3658: PPUSH
3659: PPUSH
// if exist_mode then
3660: LD_VAR 0 2
3664: IFFALSE 3710
// begin unit := CreateCharacter ( prefix & ident ) ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: LD_VAR 0 3
3675: PUSH
3676: LD_VAR 0 1
3680: STR
3681: PPUSH
3682: CALL_OW 34
3686: ST_TO_ADDR
// if unit then
3687: LD_VAR 0 5
3691: IFFALSE 3708
// DeleteCharacters ( prefix & ident ) ;
3693: LD_VAR 0 3
3697: PUSH
3698: LD_VAR 0 1
3702: STR
3703: PPUSH
3704: CALL_OW 40
// end else
3708: GO 3725
// unit := NewCharacter ( ident ) ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 25
3724: ST_TO_ADDR
// result := unit ;
3725: LD_ADDR_VAR 0 4
3729: PUSH
3730: LD_VAR 0 5
3734: ST_TO_ADDR
// end ;
3735: LD_VAR 0 4
3739: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3740: LD_INT 0
3742: PPUSH
3743: PPUSH
// if exist_mode then
3744: LD_VAR 0 2
3748: IFFALSE 3773
// unit := CreateCharacter ( prefix & ident ) else
3750: LD_ADDR_VAR 0 5
3754: PUSH
3755: LD_VAR 0 3
3759: PUSH
3760: LD_VAR 0 1
3764: STR
3765: PPUSH
3766: CALL_OW 34
3770: ST_TO_ADDR
3771: GO 3788
// unit := NewCharacter ( ident ) ;
3773: LD_ADDR_VAR 0 5
3777: PUSH
3778: LD_VAR 0 1
3782: PPUSH
3783: CALL_OW 25
3787: ST_TO_ADDR
// result := unit ;
3788: LD_ADDR_VAR 0 4
3792: PUSH
3793: LD_VAR 0 5
3797: ST_TO_ADDR
// end ;
3798: LD_VAR 0 4
3802: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3803: LD_INT 0
3805: PPUSH
3806: PPUSH
// if not side or not nation then
3807: LD_VAR 0 1
3811: NOT
3812: IFTRUE 3821
3814: PUSH
3815: LD_VAR 0 2
3819: NOT
3820: OR
3821: IFFALSE 3825
// exit ;
3823: GO 4619
// case nation of nation_american :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3838
3836: GO 4060
3838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3839: LD_ADDR_VAR 0 4
3843: PUSH
3844: LD_INT 35
3846: PUSH
3847: LD_INT 45
3849: PUSH
3850: LD_INT 46
3852: PUSH
3853: LD_INT 47
3855: PUSH
3856: LD_INT 82
3858: PUSH
3859: LD_INT 83
3861: PUSH
3862: LD_INT 84
3864: PUSH
3865: LD_INT 85
3867: PUSH
3868: LD_INT 86
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_INT 2
3876: PUSH
3877: LD_INT 6
3879: PUSH
3880: LD_INT 15
3882: PUSH
3883: LD_INT 16
3885: PUSH
3886: LD_INT 7
3888: PUSH
3889: LD_INT 12
3891: PUSH
3892: LD_INT 13
3894: PUSH
3895: LD_INT 10
3897: PUSH
3898: LD_INT 14
3900: PUSH
3901: LD_INT 20
3903: PUSH
3904: LD_INT 21
3906: PUSH
3907: LD_INT 22
3909: PUSH
3910: LD_INT 25
3912: PUSH
3913: LD_INT 32
3915: PUSH
3916: LD_INT 27
3918: PUSH
3919: LD_INT 36
3921: PUSH
3922: LD_INT 69
3924: PUSH
3925: LD_INT 39
3927: PUSH
3928: LD_INT 34
3930: PUSH
3931: LD_INT 40
3933: PUSH
3934: LD_INT 48
3936: PUSH
3937: LD_INT 49
3939: PUSH
3940: LD_INT 50
3942: PUSH
3943: LD_INT 51
3945: PUSH
3946: LD_INT 52
3948: PUSH
3949: LD_INT 53
3951: PUSH
3952: LD_INT 54
3954: PUSH
3955: LD_INT 55
3957: PUSH
3958: LD_INT 56
3960: PUSH
3961: LD_INT 57
3963: PUSH
3964: LD_INT 58
3966: PUSH
3967: LD_INT 59
3969: PUSH
3970: LD_INT 60
3972: PUSH
3973: LD_INT 61
3975: PUSH
3976: LD_INT 62
3978: PUSH
3979: LD_INT 80
3981: PUSH
3982: LD_INT 82
3984: PUSH
3985: LD_INT 83
3987: PUSH
3988: LD_INT 84
3990: PUSH
3991: LD_INT 85
3993: PUSH
3994: LD_INT 86
3996: PUSH
3997: LD_INT 90
3999: PUSH
4000: LD_INT 93
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: ST_TO_ADDR
4058: GO 4541
4060: LD_INT 2
4062: DOUBLE
4063: EQUAL
4064: IFTRUE 4068
4066: GO 4302
4068: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
4069: LD_ADDR_VAR 0 4
4073: PUSH
4074: LD_INT 35
4076: PUSH
4077: LD_INT 45
4079: PUSH
4080: LD_INT 46
4082: PUSH
4083: LD_INT 47
4085: PUSH
4086: LD_INT 82
4088: PUSH
4089: LD_INT 83
4091: PUSH
4092: LD_INT 84
4094: PUSH
4095: LD_INT 85
4097: PUSH
4098: LD_INT 87
4100: PUSH
4101: LD_INT 70
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 11
4109: PUSH
4110: LD_INT 3
4112: PUSH
4113: LD_INT 4
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: LD_INT 15
4124: PUSH
4125: LD_INT 18
4127: PUSH
4128: LD_INT 7
4130: PUSH
4131: LD_INT 17
4133: PUSH
4134: LD_INT 8
4136: PUSH
4137: LD_INT 20
4139: PUSH
4140: LD_INT 21
4142: PUSH
4143: LD_INT 22
4145: PUSH
4146: LD_INT 72
4148: PUSH
4149: LD_INT 26
4151: PUSH
4152: LD_INT 69
4154: PUSH
4155: LD_INT 39
4157: PUSH
4158: LD_INT 40
4160: PUSH
4161: LD_INT 41
4163: PUSH
4164: LD_INT 42
4166: PUSH
4167: LD_INT 43
4169: PUSH
4170: LD_INT 48
4172: PUSH
4173: LD_INT 49
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: LD_INT 51
4181: PUSH
4182: LD_INT 52
4184: PUSH
4185: LD_INT 53
4187: PUSH
4188: LD_INT 54
4190: PUSH
4191: LD_INT 55
4193: PUSH
4194: LD_INT 56
4196: PUSH
4197: LD_INT 60
4199: PUSH
4200: LD_INT 61
4202: PUSH
4203: LD_INT 62
4205: PUSH
4206: LD_INT 66
4208: PUSH
4209: LD_INT 67
4211: PUSH
4212: LD_INT 68
4214: PUSH
4215: LD_INT 81
4217: PUSH
4218: LD_INT 82
4220: PUSH
4221: LD_INT 83
4223: PUSH
4224: LD_INT 84
4226: PUSH
4227: LD_INT 85
4229: PUSH
4230: LD_INT 87
4232: PUSH
4233: LD_INT 88
4235: PUSH
4236: LD_INT 92
4238: PUSH
4239: LD_INT 94
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
4300: GO 4541
4302: LD_INT 3
4304: DOUBLE
4305: EQUAL
4306: IFTRUE 4310
4308: GO 4540
4310: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
4311: LD_ADDR_VAR 0 4
4315: PUSH
4316: LD_INT 46
4318: PUSH
4319: LD_INT 47
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: LD_INT 2
4327: PUSH
4328: LD_INT 82
4330: PUSH
4331: LD_INT 83
4333: PUSH
4334: LD_INT 84
4336: PUSH
4337: LD_INT 85
4339: PUSH
4340: LD_INT 86
4342: PUSH
4343: LD_INT 11
4345: PUSH
4346: LD_INT 9
4348: PUSH
4349: LD_INT 20
4351: PUSH
4352: LD_INT 19
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 24
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_INT 25
4366: PUSH
4367: LD_INT 28
4369: PUSH
4370: LD_INT 29
4372: PUSH
4373: LD_INT 30
4375: PUSH
4376: LD_INT 31
4378: PUSH
4379: LD_INT 37
4381: PUSH
4382: LD_INT 38
4384: PUSH
4385: LD_INT 32
4387: PUSH
4388: LD_INT 27
4390: PUSH
4391: LD_INT 33
4393: PUSH
4394: LD_INT 69
4396: PUSH
4397: LD_INT 39
4399: PUSH
4400: LD_INT 34
4402: PUSH
4403: LD_INT 40
4405: PUSH
4406: LD_INT 71
4408: PUSH
4409: LD_INT 23
4411: PUSH
4412: LD_INT 44
4414: PUSH
4415: LD_INT 48
4417: PUSH
4418: LD_INT 49
4420: PUSH
4421: LD_INT 50
4423: PUSH
4424: LD_INT 51
4426: PUSH
4427: LD_INT 52
4429: PUSH
4430: LD_INT 53
4432: PUSH
4433: LD_INT 54
4435: PUSH
4436: LD_INT 55
4438: PUSH
4439: LD_INT 56
4441: PUSH
4442: LD_INT 57
4444: PUSH
4445: LD_INT 58
4447: PUSH
4448: LD_INT 59
4450: PUSH
4451: LD_INT 63
4453: PUSH
4454: LD_INT 64
4456: PUSH
4457: LD_INT 65
4459: PUSH
4460: LD_INT 82
4462: PUSH
4463: LD_INT 83
4465: PUSH
4466: LD_INT 84
4468: PUSH
4469: LD_INT 85
4471: PUSH
4472: LD_INT 86
4474: PUSH
4475: LD_INT 89
4477: PUSH
4478: LD_INT 91
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: ST_TO_ADDR
4538: GO 4541
4540: POP
// if state > - 1 and state < 3 then
4541: LD_VAR 0 3
4545: PUSH
4546: LD_INT 1
4548: NEG
4549: GREATER
4550: IFFALSE 4562
4552: PUSH
4553: LD_VAR 0 3
4557: PUSH
4558: LD_INT 3
4560: LESS
4561: AND
4562: IFFALSE 4619
// for i in result do
4564: LD_ADDR_VAR 0 5
4568: PUSH
4569: LD_VAR 0 4
4573: PUSH
4574: FOR_IN
4575: IFFALSE 4617
// if GetTech ( i , side ) <> state then
4577: LD_VAR 0 5
4581: PPUSH
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 321
4591: PUSH
4592: LD_VAR 0 3
4596: NONEQUAL
4597: IFFALSE 4615
// result := result diff i ;
4599: LD_ADDR_VAR 0 4
4603: PUSH
4604: LD_VAR 0 4
4608: PUSH
4609: LD_VAR 0 5
4613: DIFF
4614: ST_TO_ADDR
4615: GO 4574
4617: POP
4618: POP
// end ;
4619: LD_VAR 0 4
4623: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4624: LD_INT 0
4626: PPUSH
4627: PPUSH
4628: PPUSH
// result := true ;
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4637: LD_ADDR_VAR 0 5
4641: PUSH
4642: LD_VAR 0 2
4646: PPUSH
4647: CALL_OW 480
4651: ST_TO_ADDR
// if not tmp then
4652: LD_VAR 0 5
4656: NOT
4657: IFFALSE 4661
// exit ;
4659: GO 4710
// for i in tmp do
4661: LD_ADDR_VAR 0 4
4665: PUSH
4666: LD_VAR 0 5
4670: PUSH
4671: FOR_IN
4672: IFFALSE 4708
// if GetTech ( i , side ) <> state_researched then
4674: LD_VAR 0 4
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: CALL_OW 321
4688: PUSH
4689: LD_INT 2
4691: NONEQUAL
4692: IFFALSE 4706
// begin result := false ;
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_INT 0
4701: ST_TO_ADDR
// exit ;
4702: POP
4703: POP
4704: GO 4710
// end ;
4706: GO 4671
4708: POP
4709: POP
// end ;
4710: LD_VAR 0 3
4714: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4715: LD_INT 0
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
4722: PPUSH
4723: PPUSH
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
4728: PPUSH
4729: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4730: LD_VAR 0 1
4734: NOT
4735: IFTRUE 4752
4737: PUSH
4738: LD_VAR 0 1
4742: PPUSH
4743: CALL_OW 257
4747: PUSH
4748: LD_INT 9
4750: NONEQUAL
4751: OR
4752: IFFALSE 4756
// exit ;
4754: GO 5335
// side := GetSide ( unit ) ;
4756: LD_ADDR_VAR 0 9
4760: PUSH
4761: LD_VAR 0 1
4765: PPUSH
4766: CALL_OW 255
4770: ST_TO_ADDR
// tech_space := tech_spacanom ;
4771: LD_ADDR_VAR 0 12
4775: PUSH
4776: LD_INT 29
4778: ST_TO_ADDR
// tech_time := tech_taurad ;
4779: LD_ADDR_VAR 0 13
4783: PUSH
4784: LD_INT 28
4786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4787: LD_ADDR_VAR 0 11
4791: PUSH
4792: LD_VAR 0 1
4796: PPUSH
4797: CALL_OW 310
4801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4802: LD_VAR 0 11
4806: PPUSH
4807: CALL_OW 247
4811: PUSH
4812: LD_INT 2
4814: EQUAL
4815: IFFALSE 4819
// exit ;
4817: GO 5335
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4819: LD_ADDR_VAR 0 8
4823: PUSH
4824: LD_INT 81
4826: PUSH
4827: LD_VAR 0 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 3
4838: PUSH
4839: LD_INT 21
4841: PUSH
4842: LD_INT 3
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: ST_TO_ADDR
// if not tmp then
4862: LD_VAR 0 8
4866: NOT
4867: IFFALSE 4871
// exit ;
4869: GO 5335
// if in_unit then
4871: LD_VAR 0 11
4875: IFFALSE 4899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4877: LD_ADDR_VAR 0 10
4881: PUSH
4882: LD_VAR 0 8
4886: PPUSH
4887: LD_VAR 0 11
4891: PPUSH
4892: CALL_OW 74
4896: ST_TO_ADDR
4897: GO 4919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4899: LD_ADDR_VAR 0 10
4903: PUSH
4904: LD_VAR 0 8
4908: PPUSH
4909: LD_VAR 0 1
4913: PPUSH
4914: CALL_OW 74
4918: ST_TO_ADDR
// if not enemy then
4919: LD_VAR 0 10
4923: NOT
4924: IFFALSE 4928
// exit ;
4926: GO 5335
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4928: LD_VAR 0 11
4932: IFFALSE 4954
4934: PUSH
4935: LD_VAR 0 11
4939: PPUSH
4940: LD_VAR 0 10
4944: PPUSH
4945: CALL_OW 296
4949: PUSH
4950: LD_INT 13
4952: GREATER
4953: AND
4954: IFTRUE 4976
4956: PUSH
4957: LD_VAR 0 1
4961: PPUSH
4962: LD_VAR 0 10
4966: PPUSH
4967: CALL_OW 296
4971: PUSH
4972: LD_INT 12
4974: GREATER
4975: OR
4976: IFFALSE 4980
// exit ;
4978: GO 5335
// missile := [ 1 ] ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: EMPTY
4989: LIST
4990: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4991: LD_VAR 0 9
4995: PPUSH
4996: LD_VAR 0 12
5000: PPUSH
5001: CALL_OW 325
5005: IFFALSE 5034
// missile := Replace ( missile , missile + 1 , 2 ) ;
5007: LD_ADDR_VAR 0 14
5011: PUSH
5012: LD_VAR 0 14
5016: PPUSH
5017: LD_VAR 0 14
5021: PUSH
5022: LD_INT 1
5024: PLUS
5025: PPUSH
5026: LD_INT 2
5028: PPUSH
5029: CALL_OW 1
5033: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5034: LD_VAR 0 9
5038: PPUSH
5039: LD_VAR 0 13
5043: PPUSH
5044: CALL_OW 325
5048: IFFALSE 5072
5050: PUSH
5051: LD_VAR 0 10
5055: PPUSH
5056: CALL_OW 255
5060: PPUSH
5061: LD_VAR 0 13
5065: PPUSH
5066: CALL_OW 325
5070: NOT
5071: AND
5072: IFFALSE 5101
// missile := Replace ( missile , missile + 1 , 3 ) ;
5074: LD_ADDR_VAR 0 14
5078: PUSH
5079: LD_VAR 0 14
5083: PPUSH
5084: LD_VAR 0 14
5088: PUSH
5089: LD_INT 1
5091: PLUS
5092: PPUSH
5093: LD_INT 3
5095: PPUSH
5096: CALL_OW 1
5100: ST_TO_ADDR
// if missile < 2 then
5101: LD_VAR 0 14
5105: PUSH
5106: LD_INT 2
5108: LESS
5109: IFFALSE 5113
// exit ;
5111: GO 5335
// x := GetX ( enemy ) ;
5113: LD_ADDR_VAR 0 4
5117: PUSH
5118: LD_VAR 0 10
5122: PPUSH
5123: CALL_OW 250
5127: ST_TO_ADDR
// y := GetY ( enemy ) ;
5128: LD_ADDR_VAR 0 5
5132: PUSH
5133: LD_VAR 0 10
5137: PPUSH
5138: CALL_OW 251
5142: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5143: LD_ADDR_VAR 0 6
5147: PUSH
5148: LD_VAR 0 4
5152: PUSH
5153: LD_INT 1
5155: NEG
5156: PPUSH
5157: LD_INT 1
5159: PPUSH
5160: CALL_OW 12
5164: PLUS
5165: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5166: LD_ADDR_VAR 0 7
5170: PUSH
5171: LD_VAR 0 5
5175: PUSH
5176: LD_INT 1
5178: NEG
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 12
5187: PLUS
5188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5189: LD_VAR 0 6
5193: PPUSH
5194: LD_VAR 0 7
5198: PPUSH
5199: CALL_OW 488
5203: NOT
5204: IFFALSE 5226
// begin _x := x ;
5206: LD_ADDR_VAR 0 6
5210: PUSH
5211: LD_VAR 0 4
5215: ST_TO_ADDR
// _y := y ;
5216: LD_ADDR_VAR 0 7
5220: PUSH
5221: LD_VAR 0 5
5225: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5226: LD_ADDR_VAR 0 3
5230: PUSH
5231: LD_INT 1
5233: PPUSH
5234: LD_VAR 0 14
5238: PPUSH
5239: CALL_OW 12
5243: ST_TO_ADDR
// case i of 1 :
5244: LD_VAR 0 3
5248: PUSH
5249: LD_INT 1
5251: DOUBLE
5252: EQUAL
5253: IFTRUE 5257
5255: GO 5274
5257: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5258: LD_VAR 0 1
5262: PPUSH
5263: LD_VAR 0 10
5267: PPUSH
5268: CALL_OW 115
5272: GO 5335
5274: LD_INT 2
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5282
5280: GO 5304
5282: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5283: LD_VAR 0 1
5287: PPUSH
5288: LD_VAR 0 6
5292: PPUSH
5293: LD_VAR 0 7
5297: PPUSH
5298: CALL_OW 153
5302: GO 5335
5304: LD_INT 3
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5334
5312: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5313: LD_VAR 0 1
5317: PPUSH
5318: LD_VAR 0 6
5322: PPUSH
5323: LD_VAR 0 7
5327: PPUSH
5328: CALL_OW 154
5332: GO 5335
5334: POP
// end ;
5335: LD_VAR 0 2
5339: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5340: LD_INT 0
5342: PPUSH
5343: PPUSH
5344: PPUSH
5345: PPUSH
5346: PPUSH
5347: PPUSH
// if not unit or not building then
5348: LD_VAR 0 1
5352: NOT
5353: IFTRUE 5362
5355: PUSH
5356: LD_VAR 0 2
5360: NOT
5361: OR
5362: IFFALSE 5366
// exit ;
5364: GO 5524
// x := GetX ( building ) ;
5366: LD_ADDR_VAR 0 5
5370: PUSH
5371: LD_VAR 0 2
5375: PPUSH
5376: CALL_OW 250
5380: ST_TO_ADDR
// y := GetY ( building ) ;
5381: LD_ADDR_VAR 0 6
5385: PUSH
5386: LD_VAR 0 2
5390: PPUSH
5391: CALL_OW 251
5395: ST_TO_ADDR
// for i := 0 to 5 do
5396: LD_ADDR_VAR 0 4
5400: PUSH
5401: DOUBLE
5402: LD_INT 0
5404: DEC
5405: ST_TO_ADDR
5406: LD_INT 5
5408: PUSH
5409: FOR_TO
5410: IFFALSE 5522
// begin _x := ShiftX ( x , i , 3 ) ;
5412: LD_ADDR_VAR 0 7
5416: PUSH
5417: LD_VAR 0 5
5421: PPUSH
5422: LD_VAR 0 4
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 272
5434: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5435: LD_ADDR_VAR 0 8
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 4
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 273
5457: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5458: LD_VAR 0 7
5462: PPUSH
5463: LD_VAR 0 8
5467: PPUSH
5468: CALL_OW 488
5472: NOT
5473: IFFALSE 5477
// continue ;
5475: GO 5409
// if HexInfo ( _x , _y ) = 0 then
5477: LD_VAR 0 7
5481: PPUSH
5482: LD_VAR 0 8
5486: PPUSH
5487: CALL_OW 428
5491: PUSH
5492: LD_INT 0
5494: EQUAL
5495: IFFALSE 5520
// begin ComMoveXY ( unit , _x , _y ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: LD_VAR 0 7
5506: PPUSH
5507: LD_VAR 0 8
5511: PPUSH
5512: CALL_OW 111
// exit ;
5516: POP
5517: POP
5518: GO 5524
// end ; end ;
5520: GO 5409
5522: POP
5523: POP
// end ;
5524: LD_VAR 0 3
5528: RET
// export function ScanBase ( side , base_area ) ; begin
5529: LD_INT 0
5531: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: LD_INT 81
5544: PUSH
5545: LD_VAR 0 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 70
5558: ST_TO_ADDR
// end ;
5559: LD_VAR 0 3
5563: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5564: LD_INT 0
5566: PPUSH
5567: PPUSH
5568: PPUSH
5569: PPUSH
// result := false ;
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_INT 0
5577: ST_TO_ADDR
// side := GetSide ( unit ) ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_VAR 0 1
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5593: LD_ADDR_VAR 0 4
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// case nat of 1 :
5608: LD_VAR 0 4
5612: PUSH
5613: LD_INT 1
5615: DOUBLE
5616: EQUAL
5617: IFTRUE 5621
5619: GO 5632
5621: POP
// tech := tech_lassight ; 2 :
5622: LD_ADDR_VAR 0 5
5626: PUSH
5627: LD_INT 12
5629: ST_TO_ADDR
5630: GO 5671
5632: LD_INT 2
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5651
5640: POP
// tech := tech_mortar ; 3 :
5641: LD_ADDR_VAR 0 5
5645: PUSH
5646: LD_INT 41
5648: ST_TO_ADDR
5649: GO 5671
5651: LD_INT 3
5653: DOUBLE
5654: EQUAL
5655: IFTRUE 5659
5657: GO 5670
5659: POP
// tech := tech_bazooka ; end ;
5660: LD_ADDR_VAR 0 5
5664: PUSH
5665: LD_INT 44
5667: ST_TO_ADDR
5668: GO 5671
5670: POP
// if Researched ( side , tech ) then
5671: LD_VAR 0 3
5675: PPUSH
5676: LD_VAR 0 5
5680: PPUSH
5681: CALL_OW 325
5685: IFFALSE 5712
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: LD_INT 8
5697: PUSH
5698: LD_INT 9
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_VAR 0 4
5710: ARRAY
5711: ST_TO_ADDR
// end ;
5712: LD_VAR 0 2
5716: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5717: LD_INT 0
5719: PPUSH
5720: PPUSH
5721: PPUSH
// if not mines then
5722: LD_VAR 0 2
5726: NOT
5727: IFFALSE 5731
// exit ;
5729: GO 5875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: LD_INT 81
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PPUSH
5769: CALL_OW 69
5773: ST_TO_ADDR
// for i in mines do
5774: LD_ADDR_VAR 0 4
5778: PUSH
5779: LD_VAR 0 2
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5873
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5787: LD_VAR 0 4
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: LD_VAR 0 4
5800: PUSH
5801: LD_INT 2
5803: ARRAY
5804: PPUSH
5805: CALL_OW 458
5809: NOT
5810: IFFALSE 5814
// continue ;
5812: GO 5784
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5814: LD_VAR 0 4
5818: PUSH
5819: LD_INT 1
5821: ARRAY
5822: PPUSH
5823: LD_VAR 0 4
5827: PUSH
5828: LD_INT 2
5830: ARRAY
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_VAR 0 5
5841: IN
5842: IFFALSE 5871
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5844: LD_VAR 0 4
5848: PUSH
5849: LD_INT 1
5851: ARRAY
5852: PPUSH
5853: LD_VAR 0 4
5857: PUSH
5858: LD_INT 2
5860: ARRAY
5861: PPUSH
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 456
// end ;
5871: GO 5784
5873: POP
5874: POP
// end ;
5875: LD_VAR 0 3
5879: RET
// export function Count ( array ) ; begin
5880: LD_INT 0
5882: PPUSH
// result := array + 0 ;
5883: LD_ADDR_VAR 0 2
5887: PUSH
5888: LD_VAR 0 1
5892: PUSH
5893: LD_INT 0
5895: PLUS
5896: ST_TO_ADDR
// end ;
5897: LD_VAR 0 2
5901: RET
// export function IsEmpty ( building ) ; begin
5902: LD_INT 0
5904: PPUSH
// if not building then
5905: LD_VAR 0 1
5909: NOT
5910: IFFALSE 5914
// exit ;
5912: GO 5957
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 1
5923: PUSH
5924: LD_INT 22
5926: PUSH
5927: LD_VAR 0 1
5931: PPUSH
5932: CALL_OW 255
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 58
5943: PUSH
5944: EMPTY
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: IN
5956: ST_TO_ADDR
// end ;
5957: LD_VAR 0 2
5961: RET
// export function IsNotFull ( building ) ; var places ; begin
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
// if not building then
5966: LD_VAR 0 1
5970: NOT
5971: IFFALSE 5975
// exit ;
5973: GO 6003
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: LD_VAR 0 1
5984: PPUSH
5985: LD_INT 3
5987: PUSH
5988: LD_INT 62
5990: PUSH
5991: EMPTY
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// end ;
6003: LD_VAR 0 2
6007: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// tmp := [ ] ;
6014: LD_ADDR_VAR 0 3
6018: PUSH
6019: EMPTY
6020: ST_TO_ADDR
// list := [ ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: EMPTY
6027: ST_TO_ADDR
// for i = 16 to 25 do
6028: LD_ADDR_VAR 0 4
6032: PUSH
6033: DOUBLE
6034: LD_INT 16
6036: DEC
6037: ST_TO_ADDR
6038: LD_INT 25
6040: PUSH
6041: FOR_TO
6042: IFFALSE 6115
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PPUSH
6062: CALL_OW 255
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 91
6073: PUSH
6074: LD_VAR 0 1
6078: PUSH
6079: LD_INT 6
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 30
6089: PUSH
6090: LD_VAR 0 4
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: EMPTY
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: ADD
6112: ST_TO_ADDR
6113: GO 6041
6115: POP
6116: POP
// for i = 1 to tmp do
6117: LD_ADDR_VAR 0 4
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_VAR 0 3
6131: PUSH
6132: FOR_TO
6133: IFFALSE 6221
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: LD_VAR 0 5
6144: PUSH
6145: LD_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: ARRAY
6155: PPUSH
6156: CALL_OW 266
6160: PUSH
6161: LD_VAR 0 3
6165: PUSH
6166: LD_VAR 0 4
6170: ARRAY
6171: PPUSH
6172: CALL_OW 250
6176: PUSH
6177: LD_VAR 0 3
6181: PUSH
6182: LD_VAR 0 4
6186: ARRAY
6187: PPUSH
6188: CALL_OW 251
6192: PUSH
6193: LD_VAR 0 3
6197: PUSH
6198: LD_VAR 0 4
6202: ARRAY
6203: PPUSH
6204: CALL_OW 254
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: ADD
6218: ST_TO_ADDR
6219: GO 6132
6221: POP
6222: POP
// result := list ;
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: LD_VAR 0 5
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 2
6237: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
6245: PPUSH
6246: PPUSH
// if not factory then
6247: LD_VAR 0 1
6251: NOT
6252: IFFALSE 6256
// exit ;
6254: GO 6859
// if control = control_apeman then
6256: LD_VAR 0 4
6260: PUSH
6261: LD_INT 5
6263: EQUAL
6264: IFFALSE 6373
// begin tmp := UnitsInside ( factory ) ;
6266: LD_ADDR_VAR 0 8
6270: PUSH
6271: LD_VAR 0 1
6275: PPUSH
6276: CALL_OW 313
6280: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_INT 25
6288: PUSH
6289: LD_INT 12
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 72
6300: NOT
6301: IFFALSE 6311
// control := control_manual ;
6303: LD_ADDR_VAR 0 4
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6311: LD_ADDR_VAR 0 8
6315: PUSH
6316: LD_VAR 0 1
6320: PPUSH
6321: CALL 6008 0 1
6325: ST_TO_ADDR
// if tmp then
6326: LD_VAR 0 8
6330: IFFALSE 6373
// begin for i in tmp do
6332: LD_ADDR_VAR 0 7
6336: PUSH
6337: LD_VAR 0 8
6341: PUSH
6342: FOR_IN
6343: IFFALSE 6371
// if i [ 1 ] = b_ext_radio then
6345: LD_VAR 0 7
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PUSH
6354: LD_INT 22
6356: EQUAL
6357: IFFALSE 6369
// begin control := control_remote ;
6359: LD_ADDR_VAR 0 4
6363: PUSH
6364: LD_INT 2
6366: ST_TO_ADDR
// break ;
6367: GO 6371
// end ;
6369: GO 6342
6371: POP
6372: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6373: LD_VAR 0 1
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: LD_VAR 0 3
6387: PPUSH
6388: LD_VAR 0 4
6392: PPUSH
6393: LD_VAR 0 5
6397: PPUSH
6398: CALL_OW 448
6402: IFFALSE 6437
// begin result := [ chassis , engine , control , weapon ] ;
6404: LD_ADDR_VAR 0 6
6408: PUSH
6409: LD_VAR 0 2
6413: PUSH
6414: LD_VAR 0 3
6418: PUSH
6419: LD_VAR 0 4
6423: PUSH
6424: LD_VAR 0 5
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ST_TO_ADDR
// exit ;
6435: GO 6859
// end ; _chassis := AvailableChassisList ( factory ) ;
6437: LD_ADDR_VAR 0 9
6441: PUSH
6442: LD_VAR 0 1
6446: PPUSH
6447: CALL_OW 475
6451: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6452: LD_ADDR_VAR 0 11
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 476
6466: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6467: LD_ADDR_VAR 0 12
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 477
6481: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6482: LD_ADDR_VAR 0 10
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 478
6496: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6497: LD_VAR 0 9
6501: NOT
6502: IFTRUE 6511
6504: PUSH
6505: LD_VAR 0 11
6509: NOT
6510: OR
6511: IFTRUE 6520
6513: PUSH
6514: LD_VAR 0 12
6518: NOT
6519: OR
6520: IFTRUE 6529
6522: PUSH
6523: LD_VAR 0 10
6527: NOT
6528: OR
6529: IFFALSE 6564
// begin result := [ chassis , engine , control , weapon ] ;
6531: LD_ADDR_VAR 0 6
6535: PUSH
6536: LD_VAR 0 2
6540: PUSH
6541: LD_VAR 0 3
6545: PUSH
6546: LD_VAR 0 4
6550: PUSH
6551: LD_VAR 0 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: ST_TO_ADDR
// exit ;
6562: GO 6859
// end ; if not chassis in _chassis then
6564: LD_VAR 0 2
6568: PUSH
6569: LD_VAR 0 9
6573: IN
6574: NOT
6575: IFFALSE 6601
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: LD_VAR 0 9
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_VAR 0 9
6594: PPUSH
6595: CALL_OW 12
6599: ARRAY
6600: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6601: LD_VAR 0 2
6605: PPUSH
6606: LD_VAR 0 3
6610: PPUSH
6611: CALL 6864 0 2
6615: NOT
6616: IFFALSE 6677
// repeat engine := _engine [ 1 ] ;
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_VAR 0 11
6627: PUSH
6628: LD_INT 1
6630: ARRAY
6631: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6632: LD_ADDR_VAR 0 11
6636: PUSH
6637: LD_VAR 0 11
6641: PPUSH
6642: LD_INT 1
6644: PPUSH
6645: CALL_OW 3
6649: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6650: LD_VAR 0 2
6654: PPUSH
6655: LD_VAR 0 3
6659: PPUSH
6660: CALL 6864 0 2
6664: IFTRUE 6675
6666: PUSH
6667: LD_VAR 0 11
6671: PUSH
6672: EMPTY
6673: EQUAL
6674: OR
6675: IFFALSE 6618
// if not control in _control then
6677: LD_VAR 0 4
6681: PUSH
6682: LD_VAR 0 12
6686: IN
6687: NOT
6688: IFFALSE 6714
// control := _control [ rand ( 1 , _control ) ] ;
6690: LD_ADDR_VAR 0 4
6694: PUSH
6695: LD_VAR 0 12
6699: PUSH
6700: LD_INT 1
6702: PPUSH
6703: LD_VAR 0 12
6707: PPUSH
6708: CALL_OW 12
6712: ARRAY
6713: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_VAR 0 5
6723: PPUSH
6724: CALL 7086 0 2
6728: NOT
6729: IFFALSE 6790
// repeat weapon := _weapon [ 1 ] ;
6731: LD_ADDR_VAR 0 5
6735: PUSH
6736: LD_VAR 0 10
6740: PUSH
6741: LD_INT 1
6743: ARRAY
6744: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6745: LD_ADDR_VAR 0 10
6749: PUSH
6750: LD_VAR 0 10
6754: PPUSH
6755: LD_INT 1
6757: PPUSH
6758: CALL_OW 3
6762: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6763: LD_VAR 0 2
6767: PPUSH
6768: LD_VAR 0 5
6772: PPUSH
6773: CALL 7086 0 2
6777: IFTRUE 6788
6779: PUSH
6780: LD_VAR 0 10
6784: PUSH
6785: EMPTY
6786: EQUAL
6787: OR
6788: IFFALSE 6731
// result := [ ] ;
6790: LD_ADDR_VAR 0 6
6794: PUSH
6795: EMPTY
6796: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_VAR 0 2
6806: PPUSH
6807: LD_VAR 0 3
6811: PPUSH
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 448
6826: IFFALSE 6859
// result := [ chassis , engine , control , weapon ] ;
6828: LD_ADDR_VAR 0 6
6832: PUSH
6833: LD_VAR 0 2
6837: PUSH
6838: LD_VAR 0 3
6842: PUSH
6843: LD_VAR 0 4
6847: PUSH
6848: LD_VAR 0 5
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: ST_TO_ADDR
// end ;
6859: LD_VAR 0 6
6863: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6864: LD_INT 0
6866: PPUSH
// if not chassis or not engine then
6867: LD_VAR 0 1
6871: NOT
6872: IFTRUE 6881
6874: PUSH
6875: LD_VAR 0 2
6879: NOT
6880: OR
6881: IFFALSE 6885
// exit ;
6883: GO 7081
// case engine of engine_solar :
6885: LD_VAR 0 2
6889: PUSH
6890: LD_INT 2
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6936
6898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 13
6912: PUSH
6913: LD_INT 14
6915: PUSH
6916: LD_INT 1
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 3
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 7065
6936: LD_INT 1
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 7006
6944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_INT 11
6952: PUSH
6953: LD_INT 12
6955: PUSH
6956: LD_INT 13
6958: PUSH
6959: LD_INT 14
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: LD_INT 2
6967: PUSH
6968: LD_INT 3
6970: PUSH
6971: LD_INT 4
6973: PUSH
6974: LD_INT 5
6976: PUSH
6977: LD_INT 21
6979: PUSH
6980: LD_INT 23
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 24
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: ST_TO_ADDR
7004: GO 7065
7006: LD_INT 3
7008: DOUBLE
7009: EQUAL
7010: IFTRUE 7014
7012: GO 7064
7014: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7015: LD_ADDR_VAR 0 3
7019: PUSH
7020: LD_INT 13
7022: PUSH
7023: LD_INT 14
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 3
7031: PUSH
7032: LD_INT 4
7034: PUSH
7035: LD_INT 5
7037: PUSH
7038: LD_INT 21
7040: PUSH
7041: LD_INT 22
7043: PUSH
7044: LD_INT 23
7046: PUSH
7047: LD_INT 24
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: ST_TO_ADDR
7062: GO 7065
7064: POP
// result := ( chassis in result ) ;
7065: LD_ADDR_VAR 0 3
7069: PUSH
7070: LD_VAR 0 1
7074: PUSH
7075: LD_VAR 0 3
7079: IN
7080: ST_TO_ADDR
// end ;
7081: LD_VAR 0 3
7085: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7086: LD_INT 0
7088: PPUSH
// if not chassis or not weapon then
7089: LD_VAR 0 1
7093: NOT
7094: IFTRUE 7103
7096: PUSH
7097: LD_VAR 0 2
7101: NOT
7102: OR
7103: IFFALSE 7107
// exit ;
7105: GO 8167
// case weapon of us_machine_gun :
7107: LD_VAR 0 2
7111: PUSH
7112: LD_INT 2
7114: DOUBLE
7115: EQUAL
7116: IFTRUE 7120
7118: GO 7150
7120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: ST_TO_ADDR
7148: GO 8151
7150: LD_INT 3
7152: DOUBLE
7153: EQUAL
7154: IFTRUE 7158
7156: GO 7188
7158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_INT 1
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: LD_INT 4
7175: PUSH
7176: LD_INT 5
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: ST_TO_ADDR
7186: GO 8151
7188: LD_INT 11
7190: DOUBLE
7191: EQUAL
7192: IFTRUE 7196
7194: GO 7226
7196: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_INT 1
7204: PUSH
7205: LD_INT 2
7207: PUSH
7208: LD_INT 3
7210: PUSH
7211: LD_INT 4
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: ST_TO_ADDR
7224: GO 8151
7226: LD_INT 4
7228: DOUBLE
7229: EQUAL
7230: IFTRUE 7234
7232: GO 7260
7234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7235: LD_ADDR_VAR 0 3
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 4
7248: PUSH
7249: LD_INT 5
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: ST_TO_ADDR
7258: GO 8151
7260: LD_INT 5
7262: DOUBLE
7263: EQUAL
7264: IFTRUE 7268
7266: GO 7294
7268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7269: LD_ADDR_VAR 0 3
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: LD_INT 5
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 8151
7294: LD_INT 9
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7328
7302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: LD_INT 4
7316: PUSH
7317: LD_INT 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: ST_TO_ADDR
7326: GO 8151
7328: LD_INT 7
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7362
7336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7337: LD_ADDR_VAR 0 3
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: LD_INT 4
7350: PUSH
7351: LD_INT 5
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: ST_TO_ADDR
7360: GO 8151
7362: LD_INT 12
7364: DOUBLE
7365: EQUAL
7366: IFTRUE 7370
7368: GO 7396
7370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7371: LD_ADDR_VAR 0 3
7375: PUSH
7376: LD_INT 2
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: LD_INT 5
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 8151
7396: LD_INT 13
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7430
7404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: LD_INT 5
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: ST_TO_ADDR
7428: GO 8151
7430: LD_INT 14
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7456
7438: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: LD_INT 4
7446: PUSH
7447: LD_INT 5
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: ST_TO_ADDR
7454: GO 8151
7456: LD_INT 6
7458: DOUBLE
7459: EQUAL
7460: IFTRUE 7464
7462: GO 7482
7464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7465: LD_ADDR_VAR 0 3
7469: PUSH
7470: LD_INT 4
7472: PUSH
7473: LD_INT 5
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 8151
7482: LD_INT 10
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7508
7490: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7491: LD_ADDR_VAR 0 3
7495: PUSH
7496: LD_INT 4
7498: PUSH
7499: LD_INT 5
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
7506: GO 8151
7508: LD_INT 22
7510: DOUBLE
7511: EQUAL
7512: IFTRUE 7516
7514: GO 7542
7516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7517: LD_ADDR_VAR 0 3
7521: PUSH
7522: LD_INT 11
7524: PUSH
7525: LD_INT 12
7527: PUSH
7528: LD_INT 13
7530: PUSH
7531: LD_INT 14
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: ST_TO_ADDR
7540: GO 8151
7542: LD_INT 23
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7576
7550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7551: LD_ADDR_VAR 0 3
7555: PUSH
7556: LD_INT 11
7558: PUSH
7559: LD_INT 12
7561: PUSH
7562: LD_INT 13
7564: PUSH
7565: LD_INT 14
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: ST_TO_ADDR
7574: GO 8151
7576: LD_INT 24
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7610
7584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7585: LD_ADDR_VAR 0 3
7589: PUSH
7590: LD_INT 11
7592: PUSH
7593: LD_INT 12
7595: PUSH
7596: LD_INT 13
7598: PUSH
7599: LD_INT 14
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: ST_TO_ADDR
7608: GO 8151
7610: LD_INT 30
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7644
7618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_INT 11
7626: PUSH
7627: LD_INT 12
7629: PUSH
7630: LD_INT 13
7632: PUSH
7633: LD_INT 14
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: ST_TO_ADDR
7642: GO 8151
7644: LD_INT 25
7646: DOUBLE
7647: EQUAL
7648: IFTRUE 7652
7650: GO 7670
7652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 13
7660: PUSH
7661: LD_INT 14
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: ST_TO_ADDR
7668: GO 8151
7670: LD_INT 27
7672: DOUBLE
7673: EQUAL
7674: IFTRUE 7678
7676: GO 7696
7678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: LD_INT 13
7686: PUSH
7687: LD_INT 14
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: ST_TO_ADDR
7694: GO 8151
7696: LD_INT 92
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7730
7704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7705: LD_ADDR_VAR 0 3
7709: PUSH
7710: LD_INT 11
7712: PUSH
7713: LD_INT 12
7715: PUSH
7716: LD_INT 13
7718: PUSH
7719: LD_INT 14
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
7728: GO 8151
7730: LD_INT 28
7732: DOUBLE
7733: EQUAL
7734: IFTRUE 7738
7736: GO 7756
7738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7739: LD_ADDR_VAR 0 3
7743: PUSH
7744: LD_INT 13
7746: PUSH
7747: LD_INT 14
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: ST_TO_ADDR
7754: GO 8151
7756: LD_INT 29
7758: DOUBLE
7759: EQUAL
7760: IFTRUE 7764
7762: GO 7782
7764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: LD_INT 13
7772: PUSH
7773: LD_INT 14
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: ST_TO_ADDR
7780: GO 8151
7782: LD_INT 31
7784: DOUBLE
7785: EQUAL
7786: IFTRUE 7790
7788: GO 7808
7790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_INT 13
7798: PUSH
7799: LD_INT 14
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 8151
7808: LD_INT 26
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7834
7816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7817: LD_ADDR_VAR 0 3
7821: PUSH
7822: LD_INT 13
7824: PUSH
7825: LD_INT 14
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: ST_TO_ADDR
7832: GO 8151
7834: LD_INT 42
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7868
7842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7843: LD_ADDR_VAR 0 3
7847: PUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 22
7853: PUSH
7854: LD_INT 23
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: ST_TO_ADDR
7866: GO 8151
7868: LD_INT 43
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 7902
7876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7877: LD_ADDR_VAR 0 3
7881: PUSH
7882: LD_INT 21
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_INT 23
7890: PUSH
7891: LD_INT 24
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: ST_TO_ADDR
7900: GO 8151
7902: LD_INT 44
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7936
7910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7911: LD_ADDR_VAR 0 3
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 23
7924: PUSH
7925: LD_INT 24
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 8151
7936: LD_INT 45
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 7970
7944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7945: LD_ADDR_VAR 0 3
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 22
7955: PUSH
7956: LD_INT 23
7958: PUSH
7959: LD_INT 24
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
7968: GO 8151
7970: LD_INT 49
7972: DOUBLE
7973: EQUAL
7974: IFTRUE 7978
7976: GO 8004
7978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7979: LD_ADDR_VAR 0 3
7983: PUSH
7984: LD_INT 21
7986: PUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 23
7992: PUSH
7993: LD_INT 24
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
8002: GO 8151
8004: LD_INT 51
8006: DOUBLE
8007: EQUAL
8008: IFTRUE 8012
8010: GO 8038
8012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 21
8020: PUSH
8021: LD_INT 22
8023: PUSH
8024: LD_INT 23
8026: PUSH
8027: LD_INT 24
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
8036: GO 8151
8038: LD_INT 52
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8072
8046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8047: LD_ADDR_VAR 0 3
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 22
8057: PUSH
8058: LD_INT 23
8060: PUSH
8061: LD_INT 24
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
8070: GO 8151
8072: LD_INT 53
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8098
8080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_INT 23
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: ST_TO_ADDR
8096: GO 8151
8098: LD_INT 46
8100: DOUBLE
8101: EQUAL
8102: IFTRUE 8106
8104: GO 8124
8106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: LD_INT 23
8114: PUSH
8115: LD_INT 24
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: ST_TO_ADDR
8122: GO 8151
8124: LD_INT 47
8126: DOUBLE
8127: EQUAL
8128: IFTRUE 8132
8130: GO 8150
8132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8133: LD_ADDR_VAR 0 3
8137: PUSH
8138: LD_INT 23
8140: PUSH
8141: LD_INT 24
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: ST_TO_ADDR
8148: GO 8151
8150: POP
// result := ( chassis in result ) ;
8151: LD_ADDR_VAR 0 3
8155: PUSH
8156: LD_VAR 0 1
8160: PUSH
8161: LD_VAR 0 3
8165: IN
8166: ST_TO_ADDR
// end ;
8167: LD_VAR 0 3
8171: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8172: LD_INT 0
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
8180: PPUSH
// result := array ;
8181: LD_ADDR_VAR 0 5
8185: PUSH
8186: LD_VAR 0 1
8190: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8191: LD_VAR 0 1
8195: NOT
8196: IFTRUE 8205
8198: PUSH
8199: LD_VAR 0 2
8203: NOT
8204: OR
8205: IFTRUE 8214
8207: PUSH
8208: LD_VAR 0 3
8212: NOT
8213: OR
8214: IFTRUE 8228
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_VAR 0 1
8226: GREATER
8227: OR
8228: IFTRUE 8242
8230: PUSH
8231: LD_VAR 0 3
8235: PUSH
8236: LD_VAR 0 1
8240: GREATER
8241: OR
8242: IFFALSE 8246
// exit ;
8244: GO 8542
// if direction then
8246: LD_VAR 0 4
8250: IFFALSE 8314
// begin d := 1 ;
8252: LD_ADDR_VAR 0 9
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if i_from > i_to then
8260: LD_VAR 0 2
8264: PUSH
8265: LD_VAR 0 3
8269: GREATER
8270: IFFALSE 8296
// length := ( array - i_from ) + i_to else
8272: LD_ADDR_VAR 0 11
8276: PUSH
8277: LD_VAR 0 1
8281: PUSH
8282: LD_VAR 0 2
8286: MINUS
8287: PUSH
8288: LD_VAR 0 3
8292: PLUS
8293: ST_TO_ADDR
8294: GO 8312
// length := i_to - i_from ;
8296: LD_ADDR_VAR 0 11
8300: PUSH
8301: LD_VAR 0 3
8305: PUSH
8306: LD_VAR 0 2
8310: MINUS
8311: ST_TO_ADDR
// end else
8312: GO 8375
// begin d := - 1 ;
8314: LD_ADDR_VAR 0 9
8318: PUSH
8319: LD_INT 1
8321: NEG
8322: ST_TO_ADDR
// if i_from > i_to then
8323: LD_VAR 0 2
8327: PUSH
8328: LD_VAR 0 3
8332: GREATER
8333: IFFALSE 8353
// length := i_from - i_to else
8335: LD_ADDR_VAR 0 11
8339: PUSH
8340: LD_VAR 0 2
8344: PUSH
8345: LD_VAR 0 3
8349: MINUS
8350: ST_TO_ADDR
8351: GO 8375
// length := ( array - i_to ) + i_from ;
8353: LD_ADDR_VAR 0 11
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: LD_VAR 0 3
8367: MINUS
8368: PUSH
8369: LD_VAR 0 2
8373: PLUS
8374: ST_TO_ADDR
// end ; if not length then
8375: LD_VAR 0 11
8379: NOT
8380: IFFALSE 8384
// exit ;
8382: GO 8542
// tmp := array ;
8384: LD_ADDR_VAR 0 10
8388: PUSH
8389: LD_VAR 0 1
8393: ST_TO_ADDR
// for i = 1 to length do
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: DOUBLE
8400: LD_INT 1
8402: DEC
8403: ST_TO_ADDR
8404: LD_VAR 0 11
8408: PUSH
8409: FOR_TO
8410: IFFALSE 8530
// begin for j = 1 to array do
8412: LD_ADDR_VAR 0 7
8416: PUSH
8417: DOUBLE
8418: LD_INT 1
8420: DEC
8421: ST_TO_ADDR
8422: LD_VAR 0 1
8426: PUSH
8427: FOR_TO
8428: IFFALSE 8516
// begin k := j + d ;
8430: LD_ADDR_VAR 0 8
8434: PUSH
8435: LD_VAR 0 7
8439: PUSH
8440: LD_VAR 0 9
8444: PLUS
8445: ST_TO_ADDR
// if k > array then
8446: LD_VAR 0 8
8450: PUSH
8451: LD_VAR 0 1
8455: GREATER
8456: IFFALSE 8466
// k := 1 ;
8458: LD_ADDR_VAR 0 8
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// if not k then
8466: LD_VAR 0 8
8470: NOT
8471: IFFALSE 8483
// k := array ;
8473: LD_ADDR_VAR 0 8
8477: PUSH
8478: LD_VAR 0 1
8482: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8483: LD_ADDR_VAR 0 10
8487: PUSH
8488: LD_VAR 0 10
8492: PPUSH
8493: LD_VAR 0 8
8497: PPUSH
8498: LD_VAR 0 1
8502: PUSH
8503: LD_VAR 0 7
8507: ARRAY
8508: PPUSH
8509: CALL_OW 1
8513: ST_TO_ADDR
// end ;
8514: GO 8427
8516: POP
8517: POP
// array := tmp ;
8518: LD_ADDR_VAR 0 1
8522: PUSH
8523: LD_VAR 0 10
8527: ST_TO_ADDR
// end ;
8528: GO 8409
8530: POP
8531: POP
// result := array ;
8532: LD_ADDR_VAR 0 5
8536: PUSH
8537: LD_VAR 0 1
8541: ST_TO_ADDR
// end ;
8542: LD_VAR 0 5
8546: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
// result := 0 ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// if not array or not value in array then
8559: LD_VAR 0 1
8563: NOT
8564: IFTRUE 8579
8566: PUSH
8567: LD_VAR 0 2
8571: PUSH
8572: LD_VAR 0 1
8576: IN
8577: NOT
8578: OR
8579: IFFALSE 8583
// exit ;
8581: GO 8637
// for i = 1 to array do
8583: LD_ADDR_VAR 0 4
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_VAR 0 1
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8635
// if value = array [ i ] then
8601: LD_VAR 0 2
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: ARRAY
8616: EQUAL
8617: IFFALSE 8633
// begin result := i ;
8619: LD_ADDR_VAR 0 3
8623: PUSH
8624: LD_VAR 0 4
8628: ST_TO_ADDR
// exit ;
8629: POP
8630: POP
8631: GO 8637
// end ;
8633: GO 8598
8635: POP
8636: POP
// end ;
8637: LD_VAR 0 3
8641: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8642: LD_INT 0
8644: PPUSH
// vc_chassis := chassis ;
8645: LD_ADDR_OWVAR 37
8649: PUSH
8650: LD_VAR 0 1
8654: ST_TO_ADDR
// vc_engine := engine ;
8655: LD_ADDR_OWVAR 39
8659: PUSH
8660: LD_VAR 0 2
8664: ST_TO_ADDR
// vc_control := control ;
8665: LD_ADDR_OWVAR 38
8669: PUSH
8670: LD_VAR 0 3
8674: ST_TO_ADDR
// vc_weapon := weapon ;
8675: LD_ADDR_OWVAR 40
8679: PUSH
8680: LD_VAR 0 4
8684: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8685: LD_ADDR_OWVAR 41
8689: PUSH
8690: LD_VAR 0 5
8694: ST_TO_ADDR
// end ;
8695: LD_VAR 0 6
8699: RET
// export function WantPlant ( unit ) ; var task ; begin
8700: LD_INT 0
8702: PPUSH
8703: PPUSH
// result := false ;
8704: LD_ADDR_VAR 0 2
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8712: LD_ADDR_VAR 0 3
8716: PUSH
8717: LD_VAR 0 1
8721: PPUSH
8722: CALL_OW 437
8726: ST_TO_ADDR
// if task then
8727: LD_VAR 0 3
8731: IFFALSE 8759
// if task [ 1 ] [ 1 ] = p then
8733: LD_VAR 0 3
8737: PUSH
8738: LD_INT 1
8740: ARRAY
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PUSH
8746: LD_STRING p
8748: EQUAL
8749: IFFALSE 8759
// result := true ;
8751: LD_ADDR_VAR 0 2
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// end ;
8759: LD_VAR 0 2
8763: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
8769: PPUSH
// if pos < 1 then
8770: LD_VAR 0 2
8774: PUSH
8775: LD_INT 1
8777: LESS
8778: IFFALSE 8782
// exit ;
8780: GO 9085
// if pos = 1 then
8782: LD_VAR 0 2
8786: PUSH
8787: LD_INT 1
8789: EQUAL
8790: IFFALSE 8823
// result := Replace ( arr , pos [ 1 ] , value ) else
8792: LD_ADDR_VAR 0 4
8796: PUSH
8797: LD_VAR 0 1
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_INT 1
8809: ARRAY
8810: PPUSH
8811: LD_VAR 0 3
8815: PPUSH
8816: CALL_OW 1
8820: ST_TO_ADDR
8821: GO 9085
// begin tmp := arr ;
8823: LD_ADDR_VAR 0 6
8827: PUSH
8828: LD_VAR 0 1
8832: ST_TO_ADDR
// s_arr := [ tmp ] ;
8833: LD_ADDR_VAR 0 7
8837: PUSH
8838: LD_VAR 0 6
8842: PUSH
8843: EMPTY
8844: LIST
8845: ST_TO_ADDR
// for i = 1 to pos - 1 do
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: DOUBLE
8852: LD_INT 1
8854: DEC
8855: ST_TO_ADDR
8856: LD_VAR 0 2
8860: PUSH
8861: LD_INT 1
8863: MINUS
8864: PUSH
8865: FOR_TO
8866: IFFALSE 8911
// begin tmp := tmp [ pos [ i ] ] ;
8868: LD_ADDR_VAR 0 6
8872: PUSH
8873: LD_VAR 0 6
8877: PUSH
8878: LD_VAR 0 2
8882: PUSH
8883: LD_VAR 0 5
8887: ARRAY
8888: ARRAY
8889: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8890: LD_ADDR_VAR 0 7
8894: PUSH
8895: LD_VAR 0 7
8899: PUSH
8900: LD_VAR 0 6
8904: PUSH
8905: EMPTY
8906: LIST
8907: ADD
8908: ST_TO_ADDR
// end ;
8909: GO 8865
8911: POP
8912: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8913: LD_ADDR_VAR 0 6
8917: PUSH
8918: LD_VAR 0 6
8922: PPUSH
8923: LD_VAR 0 2
8927: PUSH
8928: LD_VAR 0 2
8932: ARRAY
8933: PPUSH
8934: LD_VAR 0 3
8938: PPUSH
8939: CALL_OW 1
8943: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8944: LD_ADDR_VAR 0 7
8948: PUSH
8949: LD_VAR 0 7
8953: PPUSH
8954: LD_VAR 0 7
8958: PPUSH
8959: LD_VAR 0 6
8963: PPUSH
8964: CALL_OW 1
8968: ST_TO_ADDR
// for i = s_arr downto 2 do
8969: LD_ADDR_VAR 0 5
8973: PUSH
8974: DOUBLE
8975: LD_VAR 0 7
8979: INC
8980: ST_TO_ADDR
8981: LD_INT 2
8983: PUSH
8984: FOR_DOWNTO
8985: IFFALSE 9069
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8987: LD_ADDR_VAR 0 6
8991: PUSH
8992: LD_VAR 0 7
8996: PUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_INT 1
9004: MINUS
9005: ARRAY
9006: PPUSH
9007: LD_VAR 0 2
9011: PUSH
9012: LD_VAR 0 5
9016: PUSH
9017: LD_INT 1
9019: MINUS
9020: ARRAY
9021: PPUSH
9022: LD_VAR 0 7
9026: PUSH
9027: LD_VAR 0 5
9031: ARRAY
9032: PPUSH
9033: CALL_OW 1
9037: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9038: LD_ADDR_VAR 0 7
9042: PUSH
9043: LD_VAR 0 7
9047: PPUSH
9048: LD_VAR 0 5
9052: PUSH
9053: LD_INT 1
9055: MINUS
9056: PPUSH
9057: LD_VAR 0 6
9061: PPUSH
9062: CALL_OW 1
9066: ST_TO_ADDR
// end ;
9067: GO 8984
9069: POP
9070: POP
// result := s_arr [ 1 ] ;
9071: LD_ADDR_VAR 0 4
9075: PUSH
9076: LD_VAR 0 7
9080: PUSH
9081: LD_INT 1
9083: ARRAY
9084: ST_TO_ADDR
// end ; end ;
9085: LD_VAR 0 4
9089: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// if not list then
9094: LD_VAR 0 1
9098: NOT
9099: IFFALSE 9103
// exit ;
9101: GO 9194
// i := list [ pos1 ] ;
9103: LD_ADDR_VAR 0 5
9107: PUSH
9108: LD_VAR 0 1
9112: PUSH
9113: LD_VAR 0 2
9117: ARRAY
9118: ST_TO_ADDR
// if not i then
9119: LD_VAR 0 5
9123: NOT
9124: IFFALSE 9128
// exit ;
9126: GO 9194
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9128: LD_ADDR_VAR 0 1
9132: PUSH
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: LD_VAR 0 1
9147: PUSH
9148: LD_VAR 0 3
9152: ARRAY
9153: PPUSH
9154: CALL_OW 1
9158: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 1
9168: PPUSH
9169: LD_VAR 0 3
9173: PPUSH
9174: LD_VAR 0 5
9178: PPUSH
9179: CALL_OW 1
9183: ST_TO_ADDR
// result := list ;
9184: LD_ADDR_VAR 0 4
9188: PUSH
9189: LD_VAR 0 1
9193: ST_TO_ADDR
// end ;
9194: LD_VAR 0 4
9198: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9199: LD_INT 0
9201: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9202: LD_ADDR_VAR 0 5
9206: PUSH
9207: LD_VAR 0 1
9211: PPUSH
9212: CALL_OW 250
9216: PPUSH
9217: LD_VAR 0 1
9221: PPUSH
9222: CALL_OW 251
9226: PPUSH
9227: LD_VAR 0 2
9231: PPUSH
9232: LD_VAR 0 3
9236: PPUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: CALL 9624 0 5
9246: ST_TO_ADDR
// end ;
9247: LD_VAR 0 5
9251: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9252: LD_INT 0
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
// if not list or not unit then
9258: LD_VAR 0 2
9262: NOT
9263: IFTRUE 9272
9265: PUSH
9266: LD_VAR 0 1
9270: NOT
9271: OR
9272: IFFALSE 9276
// exit ;
9274: GO 9619
// result := [ ] ;
9276: LD_ADDR_VAR 0 5
9280: PUSH
9281: EMPTY
9282: ST_TO_ADDR
// for i in list do
9283: LD_ADDR_VAR 0 6
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: FOR_IN
9294: IFFALSE 9512
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9296: LD_ADDR_VAR 0 8
9300: PUSH
9301: LD_VAR 0 1
9305: PPUSH
9306: LD_VAR 0 6
9310: PUSH
9311: LD_INT 1
9313: ARRAY
9314: PPUSH
9315: LD_VAR 0 6
9319: PUSH
9320: LD_INT 2
9322: ARRAY
9323: PPUSH
9324: CALL_OW 297
9328: ST_TO_ADDR
// if not Count ( result ) then
9329: LD_VAR 0 5
9333: PPUSH
9334: CALL 5880 0 1
9338: NOT
9339: IFFALSE 9372
// begin result := Join ( result , [ i , tmp ] ) ;
9341: LD_ADDR_VAR 0 5
9345: PUSH
9346: LD_VAR 0 5
9350: PPUSH
9351: LD_VAR 0 6
9355: PUSH
9356: LD_VAR 0 8
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL 41812 0 2
9369: ST_TO_ADDR
// continue ;
9370: GO 9293
// end ; if result [ result ] [ 2 ] <= tmp then
9372: LD_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: ARRAY
9382: PUSH
9383: LD_INT 2
9385: ARRAY
9386: PUSH
9387: LD_VAR 0 8
9391: LESSEQUAL
9392: IFFALSE 9425
// result := Join ( result , [ i , tmp ] ) else
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_VAR 0 5
9403: PPUSH
9404: LD_VAR 0 6
9408: PUSH
9409: LD_VAR 0 8
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL 41812 0 2
9422: ST_TO_ADDR
9423: GO 9510
// begin for j := 1 to Count ( result ) do
9425: LD_ADDR_VAR 0 7
9429: PUSH
9430: DOUBLE
9431: LD_INT 1
9433: DEC
9434: ST_TO_ADDR
9435: LD_VAR 0 5
9439: PPUSH
9440: CALL 5880 0 1
9444: PUSH
9445: FOR_TO
9446: IFFALSE 9508
// begin if tmp < result [ j ] [ 2 ] then
9448: LD_VAR 0 8
9452: PUSH
9453: LD_VAR 0 5
9457: PUSH
9458: LD_VAR 0 7
9462: ARRAY
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: LESS
9468: IFFALSE 9506
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9470: LD_ADDR_VAR 0 5
9474: PUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 7
9484: PPUSH
9485: LD_VAR 0 6
9489: PUSH
9490: LD_VAR 0 8
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 2
9503: ST_TO_ADDR
// break ;
9504: GO 9508
// end ; end ;
9506: GO 9445
9508: POP
9509: POP
// end ; end ;
9510: GO 9293
9512: POP
9513: POP
// if result and not asc then
9514: LD_VAR 0 5
9518: IFFALSE 9527
9520: PUSH
9521: LD_VAR 0 3
9525: NOT
9526: AND
9527: IFFALSE 9544
// result := ReverseArray ( result ) ;
9529: LD_ADDR_VAR 0 5
9533: PUSH
9534: LD_VAR 0 5
9538: PPUSH
9539: CALL 36902 0 1
9543: ST_TO_ADDR
// tmp := [ ] ;
9544: LD_ADDR_VAR 0 8
9548: PUSH
9549: EMPTY
9550: ST_TO_ADDR
// if mode then
9551: LD_VAR 0 4
9555: IFFALSE 9619
// begin for i := 1 to result do
9557: LD_ADDR_VAR 0 6
9561: PUSH
9562: DOUBLE
9563: LD_INT 1
9565: DEC
9566: ST_TO_ADDR
9567: LD_VAR 0 5
9571: PUSH
9572: FOR_TO
9573: IFFALSE 9607
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9575: LD_ADDR_VAR 0 8
9579: PUSH
9580: LD_VAR 0 8
9584: PPUSH
9585: LD_VAR 0 5
9589: PUSH
9590: LD_VAR 0 6
9594: ARRAY
9595: PUSH
9596: LD_INT 1
9598: ARRAY
9599: PPUSH
9600: CALL 41812 0 2
9604: ST_TO_ADDR
9605: GO 9572
9607: POP
9608: POP
// result := tmp ;
9609: LD_ADDR_VAR 0 5
9613: PUSH
9614: LD_VAR 0 8
9618: ST_TO_ADDR
// end ; end ;
9619: LD_VAR 0 5
9623: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9624: LD_INT 0
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
// if not list then
9630: LD_VAR 0 3
9634: NOT
9635: IFFALSE 9639
// exit ;
9637: GO 10029
// result := [ ] ;
9639: LD_ADDR_VAR 0 6
9643: PUSH
9644: EMPTY
9645: ST_TO_ADDR
// for i in list do
9646: LD_ADDR_VAR 0 7
9650: PUSH
9651: LD_VAR 0 3
9655: PUSH
9656: FOR_IN
9657: IFFALSE 9859
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9659: LD_ADDR_VAR 0 9
9663: PUSH
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 1
9673: PPUSH
9674: LD_VAR 0 2
9678: PPUSH
9679: CALL_OW 297
9683: ST_TO_ADDR
// if not result then
9684: LD_VAR 0 6
9688: NOT
9689: IFFALSE 9715
// result := [ [ i , tmp ] ] else
9691: LD_ADDR_VAR 0 6
9695: PUSH
9696: LD_VAR 0 7
9700: PUSH
9701: LD_VAR 0 9
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: ST_TO_ADDR
9713: GO 9857
// begin if result [ result ] [ 2 ] <= tmp then
9715: LD_VAR 0 6
9719: PUSH
9720: LD_VAR 0 6
9724: ARRAY
9725: PUSH
9726: LD_INT 2
9728: ARRAY
9729: PUSH
9730: LD_VAR 0 9
9734: LESSEQUAL
9735: IFFALSE 9777
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9737: LD_ADDR_VAR 0 6
9741: PUSH
9742: LD_VAR 0 6
9746: PPUSH
9747: LD_VAR 0 6
9751: PUSH
9752: LD_INT 1
9754: PLUS
9755: PPUSH
9756: LD_VAR 0 7
9760: PUSH
9761: LD_VAR 0 9
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 2
9774: ST_TO_ADDR
9775: GO 9857
// for j := 1 to result do
9777: LD_ADDR_VAR 0 8
9781: PUSH
9782: DOUBLE
9783: LD_INT 1
9785: DEC
9786: ST_TO_ADDR
9787: LD_VAR 0 6
9791: PUSH
9792: FOR_TO
9793: IFFALSE 9855
// begin if tmp < result [ j ] [ 2 ] then
9795: LD_VAR 0 9
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: LD_VAR 0 8
9809: ARRAY
9810: PUSH
9811: LD_INT 2
9813: ARRAY
9814: LESS
9815: IFFALSE 9853
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9817: LD_ADDR_VAR 0 6
9821: PUSH
9822: LD_VAR 0 6
9826: PPUSH
9827: LD_VAR 0 8
9831: PPUSH
9832: LD_VAR 0 7
9836: PUSH
9837: LD_VAR 0 9
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PPUSH
9846: CALL_OW 2
9850: ST_TO_ADDR
// break ;
9851: GO 9855
// end ; end ;
9853: GO 9792
9855: POP
9856: POP
// end ; end ;
9857: GO 9656
9859: POP
9860: POP
// if result and not asc then
9861: LD_VAR 0 6
9865: IFFALSE 9874
9867: PUSH
9868: LD_VAR 0 4
9872: NOT
9873: AND
9874: IFFALSE 9949
// begin tmp := result ;
9876: LD_ADDR_VAR 0 9
9880: PUSH
9881: LD_VAR 0 6
9885: ST_TO_ADDR
// for i = tmp downto 1 do
9886: LD_ADDR_VAR 0 7
9890: PUSH
9891: DOUBLE
9892: LD_VAR 0 9
9896: INC
9897: ST_TO_ADDR
9898: LD_INT 1
9900: PUSH
9901: FOR_DOWNTO
9902: IFFALSE 9947
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9904: LD_ADDR_VAR 0 6
9908: PUSH
9909: LD_VAR 0 6
9913: PPUSH
9914: LD_VAR 0 9
9918: PUSH
9919: LD_VAR 0 7
9923: MINUS
9924: PUSH
9925: LD_INT 1
9927: PLUS
9928: PPUSH
9929: LD_VAR 0 9
9933: PUSH
9934: LD_VAR 0 7
9938: ARRAY
9939: PPUSH
9940: CALL_OW 1
9944: ST_TO_ADDR
9945: GO 9901
9947: POP
9948: POP
// end ; tmp := [ ] ;
9949: LD_ADDR_VAR 0 9
9953: PUSH
9954: EMPTY
9955: ST_TO_ADDR
// if mode then
9956: LD_VAR 0 5
9960: IFFALSE 10029
// begin for i = 1 to result do
9962: LD_ADDR_VAR 0 7
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_VAR 0 6
9976: PUSH
9977: FOR_TO
9978: IFFALSE 10017
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9980: LD_ADDR_VAR 0 9
9984: PUSH
9985: LD_VAR 0 9
9989: PPUSH
9990: LD_VAR 0 7
9994: PPUSH
9995: LD_VAR 0 6
9999: PUSH
10000: LD_VAR 0 7
10004: ARRAY
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: CALL_OW 1
10014: ST_TO_ADDR
10015: GO 9977
10017: POP
10018: POP
// result := tmp ;
10019: LD_ADDR_VAR 0 6
10023: PUSH
10024: LD_VAR 0 9
10028: ST_TO_ADDR
// end ; end ;
10029: LD_VAR 0 6
10033: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
10039: PPUSH
10040: PPUSH
10041: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10042: LD_ADDR_VAR 0 5
10046: PUSH
10047: LD_INT 0
10049: PUSH
10050: LD_INT 0
10052: PUSH
10053: LD_INT 0
10055: PUSH
10056: EMPTY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: ST_TO_ADDR
// if not x or not y then
10064: LD_VAR 0 2
10068: NOT
10069: IFTRUE 10078
10071: PUSH
10072: LD_VAR 0 3
10076: NOT
10077: OR
10078: IFFALSE 10082
// exit ;
10080: GO 11738
// if not range then
10082: LD_VAR 0 4
10086: NOT
10087: IFFALSE 10097
// range := 10 ;
10089: LD_ADDR_VAR 0 4
10093: PUSH
10094: LD_INT 10
10096: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10097: LD_ADDR_VAR 0 8
10101: PUSH
10102: LD_INT 81
10104: PUSH
10105: LD_VAR 0 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 92
10116: PUSH
10117: LD_VAR 0 2
10121: PUSH
10122: LD_VAR 0 3
10126: PUSH
10127: LD_VAR 0 4
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: LD_INT 3
10140: PUSH
10141: LD_INT 21
10143: PUSH
10144: LD_INT 3
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: ST_TO_ADDR
// if not tmp then
10165: LD_VAR 0 8
10169: NOT
10170: IFFALSE 10174
// exit ;
10172: GO 11738
// for i in tmp do
10174: LD_ADDR_VAR 0 6
10178: PUSH
10179: LD_VAR 0 8
10183: PUSH
10184: FOR_IN
10185: IFFALSE 11713
// begin points := [ 0 , 0 , 0 ] ;
10187: LD_ADDR_VAR 0 9
10191: PUSH
10192: LD_INT 0
10194: PUSH
10195: LD_INT 0
10197: PUSH
10198: LD_INT 0
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// bpoints := 1 ;
10206: LD_ADDR_VAR 0 10
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10214: LD_VAR 0 6
10218: PPUSH
10219: CALL_OW 247
10223: PUSH
10224: LD_INT 1
10226: DOUBLE
10227: EQUAL
10228: IFTRUE 10232
10230: GO 10814
10232: POP
// begin if GetClass ( i ) = 1 then
10233: LD_VAR 0 6
10237: PPUSH
10238: CALL_OW 257
10242: PUSH
10243: LD_INT 1
10245: EQUAL
10246: IFFALSE 10267
// points := [ 10 , 5 , 3 ] ;
10248: LD_ADDR_VAR 0 9
10252: PUSH
10253: LD_INT 10
10255: PUSH
10256: LD_INT 5
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10267: LD_VAR 0 6
10271: PPUSH
10272: CALL_OW 257
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: LD_INT 4
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: IN
10291: IFFALSE 10312
// points := [ 3 , 2 , 1 ] ;
10293: LD_ADDR_VAR 0 9
10297: PUSH
10298: LD_INT 3
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 257
10321: PUSH
10322: LD_INT 5
10324: EQUAL
10325: IFFALSE 10346
// points := [ 130 , 5 , 2 ] ;
10327: LD_ADDR_VAR 0 9
10331: PUSH
10332: LD_INT 130
10334: PUSH
10335: LD_INT 5
10337: PUSH
10338: LD_INT 2
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10346: LD_VAR 0 6
10350: PPUSH
10351: CALL_OW 257
10355: PUSH
10356: LD_INT 8
10358: EQUAL
10359: IFFALSE 10380
// points := [ 35 , 35 , 30 ] ;
10361: LD_ADDR_VAR 0 9
10365: PUSH
10366: LD_INT 35
10368: PUSH
10369: LD_INT 35
10371: PUSH
10372: LD_INT 30
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10380: LD_VAR 0 6
10384: PPUSH
10385: CALL_OW 257
10389: PUSH
10390: LD_INT 9
10392: EQUAL
10393: IFFALSE 10414
// points := [ 20 , 55 , 40 ] ;
10395: LD_ADDR_VAR 0 9
10399: PUSH
10400: LD_INT 20
10402: PUSH
10403: LD_INT 55
10405: PUSH
10406: LD_INT 40
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10414: LD_VAR 0 6
10418: PPUSH
10419: CALL_OW 257
10423: PUSH
10424: LD_INT 12
10426: PUSH
10427: LD_INT 16
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: IN
10434: IFFALSE 10455
// points := [ 5 , 3 , 2 ] ;
10436: LD_ADDR_VAR 0 9
10440: PUSH
10441: LD_INT 5
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: LD_INT 2
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 257
10464: PUSH
10465: LD_INT 17
10467: EQUAL
10468: IFFALSE 10489
// points := [ 100 , 50 , 75 ] ;
10470: LD_ADDR_VAR 0 9
10474: PUSH
10475: LD_INT 100
10477: PUSH
10478: LD_INT 50
10480: PUSH
10481: LD_INT 75
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10489: LD_VAR 0 6
10493: PPUSH
10494: CALL_OW 257
10498: PUSH
10499: LD_INT 15
10501: EQUAL
10502: IFFALSE 10523
// points := [ 10 , 5 , 3 ] ;
10504: LD_ADDR_VAR 0 9
10508: PUSH
10509: LD_INT 10
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 257
10532: PUSH
10533: LD_INT 14
10535: EQUAL
10536: IFFALSE 10557
// points := [ 10 , 0 , 0 ] ;
10538: LD_ADDR_VAR 0 9
10542: PUSH
10543: LD_INT 10
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: LD_INT 0
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10557: LD_VAR 0 6
10561: PPUSH
10562: CALL_OW 257
10566: PUSH
10567: LD_INT 11
10569: EQUAL
10570: IFFALSE 10591
// points := [ 30 , 10 , 5 ] ;
10572: LD_ADDR_VAR 0 9
10576: PUSH
10577: LD_INT 30
10579: PUSH
10580: LD_INT 10
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10591: LD_VAR 0 1
10595: PPUSH
10596: LD_INT 5
10598: PPUSH
10599: CALL_OW 321
10603: PUSH
10604: LD_INT 2
10606: EQUAL
10607: IFFALSE 10624
// bpoints := bpoints * 1.8 ;
10609: LD_ADDR_VAR 0 10
10613: PUSH
10614: LD_VAR 0 10
10618: PUSH
10619: LD_REAL  1.80000000000000E+0000
10622: MUL
10623: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10624: LD_VAR 0 6
10628: PPUSH
10629: CALL_OW 257
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 3
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: IN
10652: IFFALSE 10672
10654: PUSH
10655: LD_VAR 0 1
10659: PPUSH
10660: LD_INT 51
10662: PPUSH
10663: CALL_OW 321
10667: PUSH
10668: LD_INT 2
10670: EQUAL
10671: AND
10672: IFFALSE 10689
// bpoints := bpoints * 1.2 ;
10674: LD_ADDR_VAR 0 10
10678: PUSH
10679: LD_VAR 0 10
10683: PUSH
10684: LD_REAL  1.20000000000000E+0000
10687: MUL
10688: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10689: LD_VAR 0 6
10693: PPUSH
10694: CALL_OW 257
10698: PUSH
10699: LD_INT 5
10701: PUSH
10702: LD_INT 7
10704: PUSH
10705: LD_INT 9
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: IN
10713: IFFALSE 10733
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: LD_INT 52
10723: PPUSH
10724: CALL_OW 321
10728: PUSH
10729: LD_INT 2
10731: EQUAL
10732: AND
10733: IFFALSE 10750
// bpoints := bpoints * 1.5 ;
10735: LD_ADDR_VAR 0 10
10739: PUSH
10740: LD_VAR 0 10
10744: PUSH
10745: LD_REAL  1.50000000000000E+0000
10748: MUL
10749: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10750: LD_VAR 0 1
10754: PPUSH
10755: LD_INT 66
10757: PPUSH
10758: CALL_OW 321
10762: PUSH
10763: LD_INT 2
10765: EQUAL
10766: IFFALSE 10783
// bpoints := bpoints * 1.1 ;
10768: LD_ADDR_VAR 0 10
10772: PUSH
10773: LD_VAR 0 10
10777: PUSH
10778: LD_REAL  1.10000000000000E+0000
10781: MUL
10782: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10783: LD_ADDR_VAR 0 10
10787: PUSH
10788: LD_VAR 0 10
10792: PUSH
10793: LD_VAR 0 6
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 259
10805: PUSH
10806: LD_REAL  1.15000000000000E+0000
10809: MUL
10810: MUL
10811: ST_TO_ADDR
// end ; unit_vehicle :
10812: GO 11642
10814: LD_INT 2
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 11630
10822: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10823: LD_VAR 0 6
10827: PPUSH
10828: CALL_OW 264
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 42
10838: PUSH
10839: LD_INT 24
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: IN
10847: IFFALSE 10868
// points := [ 25 , 5 , 3 ] ;
10849: LD_ADDR_VAR 0 9
10853: PUSH
10854: LD_INT 25
10856: PUSH
10857: LD_INT 5
10859: PUSH
10860: LD_INT 3
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10868: LD_VAR 0 6
10872: PPUSH
10873: CALL_OW 264
10877: PUSH
10878: LD_INT 4
10880: PUSH
10881: LD_INT 43
10883: PUSH
10884: LD_INT 25
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: IN
10892: IFFALSE 10913
// points := [ 40 , 15 , 5 ] ;
10894: LD_ADDR_VAR 0 9
10898: PUSH
10899: LD_INT 40
10901: PUSH
10902: LD_INT 15
10904: PUSH
10905: LD_INT 5
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10913: LD_VAR 0 6
10917: PPUSH
10918: CALL_OW 264
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: LD_INT 23
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: IN
10933: IFFALSE 10954
// points := [ 7 , 25 , 8 ] ;
10935: LD_ADDR_VAR 0 9
10939: PUSH
10940: LD_INT 7
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 8
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10954: LD_VAR 0 6
10958: PPUSH
10959: CALL_OW 264
10963: PUSH
10964: LD_INT 5
10966: PUSH
10967: LD_INT 27
10969: PUSH
10970: LD_INT 44
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: IN
10978: IFFALSE 10999
// points := [ 14 , 50 , 16 ] ;
10980: LD_ADDR_VAR 0 9
10984: PUSH
10985: LD_INT 14
10987: PUSH
10988: LD_INT 50
10990: PUSH
10991: LD_INT 16
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10999: LD_VAR 0 6
11003: PPUSH
11004: CALL_OW 264
11008: PUSH
11009: LD_INT 6
11011: PUSH
11012: LD_INT 46
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: IN
11019: IFFALSE 11040
// points := [ 32 , 120 , 70 ] ;
11021: LD_ADDR_VAR 0 9
11025: PUSH
11026: LD_INT 32
11028: PUSH
11029: LD_INT 120
11031: PUSH
11032: LD_INT 70
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11040: LD_VAR 0 6
11044: PPUSH
11045: CALL_OW 264
11049: PUSH
11050: LD_INT 7
11052: PUSH
11053: LD_INT 28
11055: PUSH
11056: LD_INT 45
11058: PUSH
11059: LD_INT 92
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: IN
11068: IFFALSE 11089
// points := [ 35 , 20 , 45 ] ;
11070: LD_ADDR_VAR 0 9
11074: PUSH
11075: LD_INT 35
11077: PUSH
11078: LD_INT 20
11080: PUSH
11081: LD_INT 45
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11089: LD_VAR 0 6
11093: PPUSH
11094: CALL_OW 264
11098: PUSH
11099: LD_INT 47
11101: PUSH
11102: EMPTY
11103: LIST
11104: IN
11105: IFFALSE 11126
// points := [ 67 , 45 , 75 ] ;
11107: LD_ADDR_VAR 0 9
11111: PUSH
11112: LD_INT 67
11114: PUSH
11115: LD_INT 45
11117: PUSH
11118: LD_INT 75
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11126: LD_VAR 0 6
11130: PPUSH
11131: CALL_OW 264
11135: PUSH
11136: LD_INT 26
11138: PUSH
11139: EMPTY
11140: LIST
11141: IN
11142: IFFALSE 11163
// points := [ 120 , 30 , 80 ] ;
11144: LD_ADDR_VAR 0 9
11148: PUSH
11149: LD_INT 120
11151: PUSH
11152: LD_INT 30
11154: PUSH
11155: LD_INT 80
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11163: LD_VAR 0 6
11167: PPUSH
11168: CALL_OW 264
11172: PUSH
11173: LD_INT 22
11175: PUSH
11176: EMPTY
11177: LIST
11178: IN
11179: IFFALSE 11200
// points := [ 40 , 1 , 1 ] ;
11181: LD_ADDR_VAR 0 9
11185: PUSH
11186: LD_INT 40
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: LD_INT 1
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11200: LD_VAR 0 6
11204: PPUSH
11205: CALL_OW 264
11209: PUSH
11210: LD_INT 29
11212: PUSH
11213: EMPTY
11214: LIST
11215: IN
11216: IFFALSE 11237
// points := [ 70 , 200 , 400 ] ;
11218: LD_ADDR_VAR 0 9
11222: PUSH
11223: LD_INT 70
11225: PUSH
11226: LD_INT 200
11228: PUSH
11229: LD_INT 400
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11237: LD_VAR 0 6
11241: PPUSH
11242: CALL_OW 264
11246: PUSH
11247: LD_INT 14
11249: PUSH
11250: LD_INT 53
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: IN
11257: IFFALSE 11278
// points := [ 40 , 10 , 20 ] ;
11259: LD_ADDR_VAR 0 9
11263: PUSH
11264: LD_INT 40
11266: PUSH
11267: LD_INT 10
11269: PUSH
11270: LD_INT 20
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11278: LD_VAR 0 6
11282: PPUSH
11283: CALL_OW 264
11287: PUSH
11288: LD_INT 9
11290: PUSH
11291: EMPTY
11292: LIST
11293: IN
11294: IFFALSE 11315
// points := [ 5 , 70 , 20 ] ;
11296: LD_ADDR_VAR 0 9
11300: PUSH
11301: LD_INT 5
11303: PUSH
11304: LD_INT 70
11306: PUSH
11307: LD_INT 20
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11315: LD_VAR 0 6
11319: PPUSH
11320: CALL_OW 264
11324: PUSH
11325: LD_INT 10
11327: PUSH
11328: EMPTY
11329: LIST
11330: IN
11331: IFFALSE 11352
// points := [ 35 , 110 , 70 ] ;
11333: LD_ADDR_VAR 0 9
11337: PUSH
11338: LD_INT 35
11340: PUSH
11341: LD_INT 110
11343: PUSH
11344: LD_INT 70
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11352: LD_VAR 0 6
11356: PPUSH
11357: CALL_OW 265
11361: PUSH
11362: LD_INT 25
11364: EQUAL
11365: IFFALSE 11386
// points := [ 80 , 65 , 100 ] ;
11367: LD_ADDR_VAR 0 9
11371: PUSH
11372: LD_INT 80
11374: PUSH
11375: LD_INT 65
11377: PUSH
11378: LD_INT 100
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11386: LD_VAR 0 6
11390: PPUSH
11391: CALL_OW 263
11395: PUSH
11396: LD_INT 1
11398: EQUAL
11399: IFFALSE 11434
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11401: LD_ADDR_VAR 0 10
11405: PUSH
11406: LD_VAR 0 10
11410: PUSH
11411: LD_VAR 0 6
11415: PPUSH
11416: CALL_OW 311
11420: PPUSH
11421: LD_INT 3
11423: PPUSH
11424: CALL_OW 259
11428: PUSH
11429: LD_INT 4
11431: MUL
11432: MUL
11433: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11434: LD_VAR 0 6
11438: PPUSH
11439: CALL_OW 263
11443: PUSH
11444: LD_INT 2
11446: EQUAL
11447: IFFALSE 11498
// begin j := IsControledBy ( i ) ;
11449: LD_ADDR_VAR 0 7
11453: PUSH
11454: LD_VAR 0 6
11458: PPUSH
11459: CALL_OW 312
11463: ST_TO_ADDR
// if j then
11464: LD_VAR 0 7
11468: IFFALSE 11498
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11470: LD_ADDR_VAR 0 10
11474: PUSH
11475: LD_VAR 0 10
11479: PUSH
11480: LD_VAR 0 7
11484: PPUSH
11485: LD_INT 3
11487: PPUSH
11488: CALL_OW 259
11492: PUSH
11493: LD_INT 3
11495: MUL
11496: MUL
11497: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11498: LD_VAR 0 6
11502: PPUSH
11503: CALL_OW 264
11507: PUSH
11508: LD_INT 5
11510: PUSH
11511: LD_INT 6
11513: PUSH
11514: LD_INT 46
11516: PUSH
11517: LD_INT 44
11519: PUSH
11520: LD_INT 47
11522: PUSH
11523: LD_INT 45
11525: PUSH
11526: LD_INT 28
11528: PUSH
11529: LD_INT 7
11531: PUSH
11532: LD_INT 27
11534: PUSH
11535: LD_INT 29
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: IN
11550: IFFALSE 11570
11552: PUSH
11553: LD_VAR 0 1
11557: PPUSH
11558: LD_INT 52
11560: PPUSH
11561: CALL_OW 321
11565: PUSH
11566: LD_INT 2
11568: EQUAL
11569: AND
11570: IFFALSE 11587
// bpoints := bpoints * 1.2 ;
11572: LD_ADDR_VAR 0 10
11576: PUSH
11577: LD_VAR 0 10
11581: PUSH
11582: LD_REAL  1.20000000000000E+0000
11585: MUL
11586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11587: LD_VAR 0 6
11591: PPUSH
11592: CALL_OW 264
11596: PUSH
11597: LD_INT 6
11599: PUSH
11600: LD_INT 46
11602: PUSH
11603: LD_INT 47
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: IN
11611: IFFALSE 11628
// bpoints := bpoints * 1.2 ;
11613: LD_ADDR_VAR 0 10
11617: PUSH
11618: LD_VAR 0 10
11622: PUSH
11623: LD_REAL  1.20000000000000E+0000
11626: MUL
11627: ST_TO_ADDR
// end ; unit_building :
11628: GO 11642
11630: LD_INT 3
11632: DOUBLE
11633: EQUAL
11634: IFTRUE 11638
11636: GO 11641
11638: POP
// ; end ;
11639: GO 11642
11641: POP
// for j = 1 to 3 do
11642: LD_ADDR_VAR 0 7
11646: PUSH
11647: DOUBLE
11648: LD_INT 1
11650: DEC
11651: ST_TO_ADDR
11652: LD_INT 3
11654: PUSH
11655: FOR_TO
11656: IFFALSE 11709
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11658: LD_ADDR_VAR 0 5
11662: PUSH
11663: LD_VAR 0 5
11667: PPUSH
11668: LD_VAR 0 7
11672: PPUSH
11673: LD_VAR 0 5
11677: PUSH
11678: LD_VAR 0 7
11682: ARRAY
11683: PUSH
11684: LD_VAR 0 9
11688: PUSH
11689: LD_VAR 0 7
11693: ARRAY
11694: PUSH
11695: LD_VAR 0 10
11699: MUL
11700: PLUS
11701: PPUSH
11702: CALL_OW 1
11706: ST_TO_ADDR
11707: GO 11655
11709: POP
11710: POP
// end ;
11711: GO 10184
11713: POP
11714: POP
// result := Replace ( result , 4 , tmp ) ;
11715: LD_ADDR_VAR 0 5
11719: PUSH
11720: LD_VAR 0 5
11724: PPUSH
11725: LD_INT 4
11727: PPUSH
11728: LD_VAR 0 8
11732: PPUSH
11733: CALL_OW 1
11737: ST_TO_ADDR
// end ;
11738: LD_VAR 0 5
11742: RET
// export function DangerAtRange ( unit , range ) ; begin
11743: LD_INT 0
11745: PPUSH
// if not unit then
11746: LD_VAR 0 1
11750: NOT
11751: IFFALSE 11755
// exit ;
11753: GO 11800
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11755: LD_ADDR_VAR 0 3
11759: PUSH
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 255
11769: PPUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 250
11779: PPUSH
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 251
11789: PPUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: CALL 10034 0 4
11799: ST_TO_ADDR
// end ;
11800: LD_VAR 0 3
11804: RET
// export function DangerInArea ( side , area ) ; begin
11805: LD_INT 0
11807: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11808: LD_ADDR_VAR 0 3
11812: PUSH
11813: LD_VAR 0 2
11817: PPUSH
11818: LD_INT 81
11820: PUSH
11821: LD_VAR 0 1
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 70
11834: ST_TO_ADDR
// end ;
11835: LD_VAR 0 3
11839: RET
// export function IsExtension ( b ) ; begin
11840: LD_INT 0
11842: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11843: LD_ADDR_VAR 0 2
11847: PUSH
11848: LD_VAR 0 1
11852: PUSH
11853: LD_INT 23
11855: PUSH
11856: LD_INT 20
11858: PUSH
11859: LD_INT 22
11861: PUSH
11862: LD_INT 17
11864: PUSH
11865: LD_INT 24
11867: PUSH
11868: LD_INT 21
11870: PUSH
11871: LD_INT 19
11873: PUSH
11874: LD_INT 16
11876: PUSH
11877: LD_INT 25
11879: PUSH
11880: LD_INT 18
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: IN
11895: ST_TO_ADDR
// end ;
11896: LD_VAR 0 2
11900: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
11905: PPUSH
// result := [ ] ;
11906: LD_ADDR_VAR 0 4
11910: PUSH
11911: EMPTY
11912: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11913: LD_ADDR_VAR 0 5
11917: PUSH
11918: LD_VAR 0 2
11922: PPUSH
11923: LD_INT 21
11925: PUSH
11926: LD_INT 3
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 70
11937: ST_TO_ADDR
// if not tmp then
11938: LD_VAR 0 5
11942: NOT
11943: IFFALSE 11947
// exit ;
11945: GO 12011
// if checkLink then
11947: LD_VAR 0 3
11951: IFFALSE 12001
// begin for i in tmp do
11953: LD_ADDR_VAR 0 6
11957: PUSH
11958: LD_VAR 0 5
11962: PUSH
11963: FOR_IN
11964: IFFALSE 11999
// if GetBase ( i ) <> base then
11966: LD_VAR 0 6
11970: PPUSH
11971: CALL_OW 274
11975: PUSH
11976: LD_VAR 0 1
11980: NONEQUAL
11981: IFFALSE 11997
// ComLinkToBase ( base , i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_VAR 0 6
11992: PPUSH
11993: CALL_OW 169
11997: GO 11963
11999: POP
12000: POP
// end ; result := tmp ;
12001: LD_ADDR_VAR 0 4
12005: PUSH
12006: LD_VAR 0 5
12010: ST_TO_ADDR
// end ;
12011: LD_VAR 0 4
12015: RET
// export function ComComplete ( units , b ) ; var i ; begin
12016: LD_INT 0
12018: PPUSH
12019: PPUSH
// if not units then
12020: LD_VAR 0 1
12024: NOT
12025: IFFALSE 12029
// exit ;
12027: GO 12119
// for i in units do
12029: LD_ADDR_VAR 0 4
12033: PUSH
12034: LD_VAR 0 1
12038: PUSH
12039: FOR_IN
12040: IFFALSE 12117
// if BuildingStatus ( b ) = bs_build then
12042: LD_VAR 0 2
12046: PPUSH
12047: CALL_OW 461
12051: PUSH
12052: LD_INT 1
12054: EQUAL
12055: IFFALSE 12115
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12057: LD_VAR 0 4
12061: PPUSH
12062: LD_STRING h
12064: PUSH
12065: LD_VAR 0 2
12069: PPUSH
12070: CALL_OW 250
12074: PUSH
12075: LD_VAR 0 2
12079: PPUSH
12080: CALL_OW 251
12084: PUSH
12085: LD_VAR 0 2
12089: PUSH
12090: LD_INT 0
12092: PUSH
12093: LD_INT 0
12095: PUSH
12096: LD_INT 0
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: EMPTY
12109: LIST
12110: PPUSH
12111: CALL_OW 446
12115: GO 12039
12117: POP
12118: POP
// end ;
12119: LD_VAR 0 3
12123: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12124: LD_INT 0
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12132: LD_VAR 0 1
12136: NOT
12137: IFTRUE 12154
12139: PUSH
12140: LD_VAR 0 1
12144: PPUSH
12145: CALL_OW 263
12149: PUSH
12150: LD_INT 2
12152: NONEQUAL
12153: OR
12154: IFFALSE 12158
// exit ;
12156: GO 12474
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12158: LD_ADDR_VAR 0 6
12162: PUSH
12163: LD_INT 22
12165: PUSH
12166: LD_VAR 0 1
12170: PPUSH
12171: CALL_OW 255
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 36
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 34
12195: PUSH
12196: LD_INT 31
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PPUSH
12212: CALL_OW 69
12216: ST_TO_ADDR
// if not tmp then
12217: LD_VAR 0 6
12221: NOT
12222: IFFALSE 12226
// exit ;
12224: GO 12474
// result := [ ] ;
12226: LD_ADDR_VAR 0 2
12230: PUSH
12231: EMPTY
12232: ST_TO_ADDR
// for i in tmp do
12233: LD_ADDR_VAR 0 3
12237: PUSH
12238: LD_VAR 0 6
12242: PUSH
12243: FOR_IN
12244: IFFALSE 12315
// begin t := UnitsInside ( i ) ;
12246: LD_ADDR_VAR 0 4
12250: PUSH
12251: LD_VAR 0 3
12255: PPUSH
12256: CALL_OW 313
12260: ST_TO_ADDR
// if t then
12261: LD_VAR 0 4
12265: IFFALSE 12313
// for j in t do
12267: LD_ADDR_VAR 0 7
12271: PUSH
12272: LD_VAR 0 4
12276: PUSH
12277: FOR_IN
12278: IFFALSE 12311
// result := Replace ( result , result + 1 , j ) ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_VAR 0 2
12289: PPUSH
12290: LD_VAR 0 2
12294: PUSH
12295: LD_INT 1
12297: PLUS
12298: PPUSH
12299: LD_VAR 0 7
12303: PPUSH
12304: CALL_OW 1
12308: ST_TO_ADDR
12309: GO 12277
12311: POP
12312: POP
// end ;
12313: GO 12243
12315: POP
12316: POP
// if not result then
12317: LD_VAR 0 2
12321: NOT
12322: IFFALSE 12326
// exit ;
12324: GO 12474
// mech := result [ 1 ] ;
12326: LD_ADDR_VAR 0 5
12330: PUSH
12331: LD_VAR 0 2
12335: PUSH
12336: LD_INT 1
12338: ARRAY
12339: ST_TO_ADDR
// if result > 1 then
12340: LD_VAR 0 2
12344: PUSH
12345: LD_INT 1
12347: GREATER
12348: IFFALSE 12460
// begin for i = 2 to result do
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: DOUBLE
12356: LD_INT 2
12358: DEC
12359: ST_TO_ADDR
12360: LD_VAR 0 2
12364: PUSH
12365: FOR_TO
12366: IFFALSE 12458
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12368: LD_ADDR_VAR 0 4
12372: PUSH
12373: LD_VAR 0 2
12377: PUSH
12378: LD_VAR 0 3
12382: ARRAY
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: CALL_OW 259
12391: PUSH
12392: LD_VAR 0 2
12396: PUSH
12397: LD_VAR 0 3
12401: ARRAY
12402: PPUSH
12403: CALL_OW 432
12407: MINUS
12408: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12409: LD_VAR 0 4
12413: PUSH
12414: LD_VAR 0 5
12418: PPUSH
12419: LD_INT 3
12421: PPUSH
12422: CALL_OW 259
12426: PUSH
12427: LD_VAR 0 5
12431: PPUSH
12432: CALL_OW 432
12436: MINUS
12437: GREATEREQUAL
12438: IFFALSE 12456
// mech := result [ i ] ;
12440: LD_ADDR_VAR 0 5
12444: PUSH
12445: LD_VAR 0 2
12449: PUSH
12450: LD_VAR 0 3
12454: ARRAY
12455: ST_TO_ADDR
// end ;
12456: GO 12365
12458: POP
12459: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12460: LD_VAR 0 1
12464: PPUSH
12465: LD_VAR 0 5
12469: PPUSH
12470: CALL_OW 135
// end ;
12474: LD_VAR 0 2
12478: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12479: LD_INT 0
12481: PPUSH
12482: PPUSH
12483: PPUSH
12484: PPUSH
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
12489: PPUSH
12490: PPUSH
12491: PPUSH
12492: PPUSH
12493: PPUSH
// result := [ ] ;
12494: LD_ADDR_VAR 0 7
12498: PUSH
12499: EMPTY
12500: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 266
12510: PUSH
12511: LD_INT 0
12513: PUSH
12514: LD_INT 1
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: IN
12521: NOT
12522: IFFALSE 12526
// exit ;
12524: GO 14166
// if name then
12526: LD_VAR 0 3
12530: IFFALSE 12546
// SetBName ( base_dep , name ) ;
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: CALL_OW 500
// base := GetBase ( base_dep ) ;
12546: LD_ADDR_VAR 0 15
12550: PUSH
12551: LD_VAR 0 1
12555: PPUSH
12556: CALL_OW 274
12560: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12561: LD_ADDR_VAR 0 16
12565: PUSH
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 255
12575: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12576: LD_ADDR_VAR 0 17
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 248
12590: ST_TO_ADDR
// if sources then
12591: LD_VAR 0 5
12595: IFFALSE 12642
// for i = 1 to 3 do
12597: LD_ADDR_VAR 0 8
12601: PUSH
12602: DOUBLE
12603: LD_INT 1
12605: DEC
12606: ST_TO_ADDR
12607: LD_INT 3
12609: PUSH
12610: FOR_TO
12611: IFFALSE 12640
// AddResourceType ( base , i , sources [ i ] ) ;
12613: LD_VAR 0 15
12617: PPUSH
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_VAR 0 5
12627: PUSH
12628: LD_VAR 0 8
12632: ARRAY
12633: PPUSH
12634: CALL_OW 276
12638: GO 12610
12640: POP
12641: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12642: LD_ADDR_VAR 0 18
12646: PUSH
12647: LD_VAR 0 15
12651: PPUSH
12652: LD_VAR 0 2
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL 11901 0 3
12664: ST_TO_ADDR
// InitHc ;
12665: CALL_OW 19
// InitUc ;
12669: CALL_OW 18
// uc_side := side ;
12673: LD_ADDR_OWVAR 20
12677: PUSH
12678: LD_VAR 0 16
12682: ST_TO_ADDR
// uc_nation := nation ;
12683: LD_ADDR_OWVAR 21
12687: PUSH
12688: LD_VAR 0 17
12692: ST_TO_ADDR
// if buildings then
12693: LD_VAR 0 18
12697: IFFALSE 14025
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12699: LD_ADDR_VAR 0 19
12703: PUSH
12704: LD_VAR 0 18
12708: PPUSH
12709: LD_INT 2
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 29
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 30
12724: PUSH
12725: LD_INT 30
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 72
12741: ST_TO_ADDR
// if tmp then
12742: LD_VAR 0 19
12746: IFFALSE 12794
// for i in tmp do
12748: LD_ADDR_VAR 0 8
12752: PUSH
12753: LD_VAR 0 19
12757: PUSH
12758: FOR_IN
12759: IFFALSE 12792
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12761: LD_VAR 0 8
12765: PPUSH
12766: CALL_OW 250
12770: PPUSH
12771: LD_VAR 0 8
12775: PPUSH
12776: CALL_OW 251
12780: PPUSH
12781: LD_VAR 0 16
12785: PPUSH
12786: CALL_OW 441
12790: GO 12758
12792: POP
12793: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12794: LD_VAR 0 18
12798: PPUSH
12799: LD_INT 2
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 32
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 30
12814: PUSH
12815: LD_INT 33
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 72
12831: IFFALSE 12919
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12833: LD_ADDR_VAR 0 8
12837: PUSH
12838: LD_VAR 0 18
12842: PPUSH
12843: LD_INT 2
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 32
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 30
12858: PUSH
12859: LD_INT 33
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PPUSH
12871: CALL_OW 72
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12917
// begin if not GetBWeapon ( i ) then
12879: LD_VAR 0 8
12883: PPUSH
12884: CALL_OW 269
12888: NOT
12889: IFFALSE 12915
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12891: LD_VAR 0 8
12895: PPUSH
12896: LD_VAR 0 8
12900: PPUSH
12901: LD_VAR 0 2
12905: PPUSH
12906: CALL 14171 0 2
12910: PPUSH
12911: CALL_OW 431
// end ;
12915: GO 12876
12917: POP
12918: POP
// end ; for i = 1 to personel do
12919: LD_ADDR_VAR 0 8
12923: PUSH
12924: DOUBLE
12925: LD_INT 1
12927: DEC
12928: ST_TO_ADDR
12929: LD_VAR 0 6
12933: PUSH
12934: FOR_TO
12935: IFFALSE 14005
// begin if i > 4 then
12937: LD_VAR 0 8
12941: PUSH
12942: LD_INT 4
12944: GREATER
12945: IFFALSE 12949
// break ;
12947: GO 14005
// case i of 1 :
12949: LD_VAR 0 8
12953: PUSH
12954: LD_INT 1
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 13042
12962: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12963: LD_ADDR_VAR 0 12
12967: PUSH
12968: LD_VAR 0 18
12972: PPUSH
12973: LD_INT 22
12975: PUSH
12976: LD_VAR 0 16
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 58
12987: PUSH
12988: EMPTY
12989: LIST
12990: PUSH
12991: LD_INT 2
12993: PUSH
12994: LD_INT 30
12996: PUSH
12997: LD_INT 32
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 30
13006: PUSH
13007: LD_INT 4
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 30
13016: PUSH
13017: LD_INT 5
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 72
13039: ST_TO_ADDR
13040: GO 13264
13042: LD_INT 2
13044: DOUBLE
13045: EQUAL
13046: IFTRUE 13050
13048: GO 13112
13050: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13051: LD_ADDR_VAR 0 12
13055: PUSH
13056: LD_VAR 0 18
13060: PPUSH
13061: LD_INT 22
13063: PUSH
13064: LD_VAR 0 16
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: LD_INT 30
13078: PUSH
13079: LD_INT 0
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 30
13088: PUSH
13089: LD_INT 1
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 72
13109: ST_TO_ADDR
13110: GO 13264
13112: LD_INT 3
13114: DOUBLE
13115: EQUAL
13116: IFTRUE 13120
13118: GO 13182
13120: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13121: LD_ADDR_VAR 0 12
13125: PUSH
13126: LD_VAR 0 18
13130: PPUSH
13131: LD_INT 22
13133: PUSH
13134: LD_VAR 0 16
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: LD_INT 30
13148: PUSH
13149: LD_INT 2
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 3
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PPUSH
13175: CALL_OW 72
13179: ST_TO_ADDR
13180: GO 13264
13182: LD_INT 4
13184: DOUBLE
13185: EQUAL
13186: IFTRUE 13190
13188: GO 13263
13190: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13191: LD_ADDR_VAR 0 12
13195: PUSH
13196: LD_VAR 0 18
13200: PPUSH
13201: LD_INT 22
13203: PUSH
13204: LD_VAR 0 16
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: LD_INT 30
13218: PUSH
13219: LD_INT 6
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 30
13228: PUSH
13229: LD_INT 7
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 30
13238: PUSH
13239: LD_INT 8
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PPUSH
13256: CALL_OW 72
13260: ST_TO_ADDR
13261: GO 13264
13263: POP
// if i = 1 then
13264: LD_VAR 0 8
13268: PUSH
13269: LD_INT 1
13271: EQUAL
13272: IFFALSE 13383
// begin tmp := [ ] ;
13274: LD_ADDR_VAR 0 19
13278: PUSH
13279: EMPTY
13280: ST_TO_ADDR
// for j in f do
13281: LD_ADDR_VAR 0 9
13285: PUSH
13286: LD_VAR 0 12
13290: PUSH
13291: FOR_IN
13292: IFFALSE 13365
// if GetBType ( j ) = b_bunker then
13294: LD_VAR 0 9
13298: PPUSH
13299: CALL_OW 266
13303: PUSH
13304: LD_INT 32
13306: EQUAL
13307: IFFALSE 13334
// tmp := Insert ( tmp , 1 , j ) else
13309: LD_ADDR_VAR 0 19
13313: PUSH
13314: LD_VAR 0 19
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: LD_VAR 0 9
13326: PPUSH
13327: CALL_OW 2
13331: ST_TO_ADDR
13332: GO 13363
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13334: LD_ADDR_VAR 0 19
13338: PUSH
13339: LD_VAR 0 19
13343: PPUSH
13344: LD_VAR 0 19
13348: PUSH
13349: LD_INT 1
13351: PLUS
13352: PPUSH
13353: LD_VAR 0 9
13357: PPUSH
13358: CALL_OW 2
13362: ST_TO_ADDR
13363: GO 13291
13365: POP
13366: POP
// if tmp then
13367: LD_VAR 0 19
13371: IFFALSE 13383
// f := tmp ;
13373: LD_ADDR_VAR 0 12
13377: PUSH
13378: LD_VAR 0 19
13382: ST_TO_ADDR
// end ; x := personel [ i ] ;
13383: LD_ADDR_VAR 0 13
13387: PUSH
13388: LD_VAR 0 6
13392: PUSH
13393: LD_VAR 0 8
13397: ARRAY
13398: ST_TO_ADDR
// if x = - 1 then
13399: LD_VAR 0 13
13403: PUSH
13404: LD_INT 1
13406: NEG
13407: EQUAL
13408: IFFALSE 13619
// begin for j in f do
13410: LD_ADDR_VAR 0 9
13414: PUSH
13415: LD_VAR 0 12
13419: PUSH
13420: FOR_IN
13421: IFFALSE 13615
// repeat InitHc ;
13423: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13427: LD_VAR 0 9
13431: PPUSH
13432: CALL_OW 266
13436: PUSH
13437: LD_INT 5
13439: EQUAL
13440: IFFALSE 13510
// begin if UnitsInside ( j ) < 3 then
13442: LD_VAR 0 9
13446: PPUSH
13447: CALL_OW 313
13451: PUSH
13452: LD_INT 3
13454: LESS
13455: IFFALSE 13491
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13457: LD_INT 0
13459: PPUSH
13460: LD_INT 5
13462: PUSH
13463: LD_INT 8
13465: PUSH
13466: LD_INT 9
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: LD_VAR 0 17
13478: ARRAY
13479: PPUSH
13480: LD_VAR 0 4
13484: PPUSH
13485: CALL_OW 380
13489: GO 13508
// PrepareHuman ( false , i , skill ) ;
13491: LD_INT 0
13493: PPUSH
13494: LD_VAR 0 8
13498: PPUSH
13499: LD_VAR 0 4
13503: PPUSH
13504: CALL_OW 380
// end else
13508: GO 13527
// PrepareHuman ( false , i , skill ) ;
13510: LD_INT 0
13512: PPUSH
13513: LD_VAR 0 8
13517: PPUSH
13518: LD_VAR 0 4
13522: PPUSH
13523: CALL_OW 380
// un := CreateHuman ;
13527: LD_ADDR_VAR 0 14
13531: PUSH
13532: CALL_OW 44
13536: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13537: LD_ADDR_VAR 0 7
13541: PUSH
13542: LD_VAR 0 7
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: LD_VAR 0 14
13554: PPUSH
13555: CALL_OW 2
13559: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13560: LD_VAR 0 14
13564: PPUSH
13565: LD_VAR 0 9
13569: PPUSH
13570: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13574: LD_VAR 0 9
13578: PPUSH
13579: CALL_OW 313
13583: PUSH
13584: LD_INT 6
13586: EQUAL
13587: IFTRUE 13611
13589: PUSH
13590: LD_VAR 0 9
13594: PPUSH
13595: CALL_OW 266
13599: PUSH
13600: LD_INT 32
13602: PUSH
13603: LD_INT 31
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: IN
13610: OR
13611: IFFALSE 13423
13613: GO 13420
13615: POP
13616: POP
// end else
13617: GO 14003
// for j = 1 to x do
13619: LD_ADDR_VAR 0 9
13623: PUSH
13624: DOUBLE
13625: LD_INT 1
13627: DEC
13628: ST_TO_ADDR
13629: LD_VAR 0 13
13633: PUSH
13634: FOR_TO
13635: IFFALSE 14001
// begin InitHc ;
13637: CALL_OW 19
// if not f then
13641: LD_VAR 0 12
13645: NOT
13646: IFFALSE 13735
// begin PrepareHuman ( false , i , skill ) ;
13648: LD_INT 0
13650: PPUSH
13651: LD_VAR 0 8
13655: PPUSH
13656: LD_VAR 0 4
13660: PPUSH
13661: CALL_OW 380
// un := CreateHuman ;
13665: LD_ADDR_VAR 0 14
13669: PUSH
13670: CALL_OW 44
13674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13675: LD_ADDR_VAR 0 7
13679: PUSH
13680: LD_VAR 0 7
13684: PPUSH
13685: LD_INT 1
13687: PPUSH
13688: LD_VAR 0 14
13692: PPUSH
13693: CALL_OW 2
13697: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13698: LD_VAR 0 14
13702: PPUSH
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL_OW 250
13712: PPUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 251
13722: PPUSH
13723: LD_INT 10
13725: PPUSH
13726: LD_INT 0
13728: PPUSH
13729: CALL_OW 50
// continue ;
13733: GO 13634
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13735: LD_VAR 0 12
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 313
13748: IFFALSE 13776
13750: PUSH
13751: LD_VAR 0 12
13755: PUSH
13756: LD_INT 1
13758: ARRAY
13759: PPUSH
13760: CALL_OW 266
13764: PUSH
13765: LD_INT 32
13767: PUSH
13768: LD_INT 31
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: IN
13775: AND
13776: IFTRUE 13797
13778: PUSH
13779: LD_VAR 0 12
13783: PUSH
13784: LD_INT 1
13786: ARRAY
13787: PPUSH
13788: CALL_OW 313
13792: PUSH
13793: LD_INT 6
13795: EQUAL
13796: OR
13797: IFFALSE 13817
// f := Delete ( f , 1 ) ;
13799: LD_ADDR_VAR 0 12
13803: PUSH
13804: LD_VAR 0 12
13808: PPUSH
13809: LD_INT 1
13811: PPUSH
13812: CALL_OW 3
13816: ST_TO_ADDR
// if not f then
13817: LD_VAR 0 12
13821: NOT
13822: IFFALSE 13840
// begin x := x + 2 ;
13824: LD_ADDR_VAR 0 13
13828: PUSH
13829: LD_VAR 0 13
13833: PUSH
13834: LD_INT 2
13836: PLUS
13837: ST_TO_ADDR
// continue ;
13838: GO 13634
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13840: LD_VAR 0 12
13844: PUSH
13845: LD_INT 1
13847: ARRAY
13848: PPUSH
13849: CALL_OW 266
13853: PUSH
13854: LD_INT 5
13856: EQUAL
13857: IFFALSE 13931
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13859: LD_VAR 0 12
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL_OW 313
13872: PUSH
13873: LD_INT 3
13875: LESS
13876: IFFALSE 13912
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13878: LD_INT 0
13880: PPUSH
13881: LD_INT 5
13883: PUSH
13884: LD_INT 8
13886: PUSH
13887: LD_INT 9
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: PUSH
13895: LD_VAR 0 17
13899: ARRAY
13900: PPUSH
13901: LD_VAR 0 4
13905: PPUSH
13906: CALL_OW 380
13910: GO 13929
// PrepareHuman ( false , i , skill ) ;
13912: LD_INT 0
13914: PPUSH
13915: LD_VAR 0 8
13919: PPUSH
13920: LD_VAR 0 4
13924: PPUSH
13925: CALL_OW 380
// end else
13929: GO 13948
// PrepareHuman ( false , i , skill ) ;
13931: LD_INT 0
13933: PPUSH
13934: LD_VAR 0 8
13938: PPUSH
13939: LD_VAR 0 4
13943: PPUSH
13944: CALL_OW 380
// un := CreateHuman ;
13948: LD_ADDR_VAR 0 14
13952: PUSH
13953: CALL_OW 44
13957: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13958: LD_ADDR_VAR 0 7
13962: PUSH
13963: LD_VAR 0 7
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 14
13975: PPUSH
13976: CALL_OW 2
13980: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13981: LD_VAR 0 14
13985: PPUSH
13986: LD_VAR 0 12
13990: PUSH
13991: LD_INT 1
13993: ARRAY
13994: PPUSH
13995: CALL_OW 52
// end ;
13999: GO 13634
14001: POP
14002: POP
// end ;
14003: GO 12934
14005: POP
14006: POP
// result := result ^ buildings ;
14007: LD_ADDR_VAR 0 7
14011: PUSH
14012: LD_VAR 0 7
14016: PUSH
14017: LD_VAR 0 18
14021: ADD
14022: ST_TO_ADDR
// end else
14023: GO 14166
// begin for i = 1 to personel do
14025: LD_ADDR_VAR 0 8
14029: PUSH
14030: DOUBLE
14031: LD_INT 1
14033: DEC
14034: ST_TO_ADDR
14035: LD_VAR 0 6
14039: PUSH
14040: FOR_TO
14041: IFFALSE 14164
// begin if i > 4 then
14043: LD_VAR 0 8
14047: PUSH
14048: LD_INT 4
14050: GREATER
14051: IFFALSE 14055
// break ;
14053: GO 14164
// x := personel [ i ] ;
14055: LD_ADDR_VAR 0 13
14059: PUSH
14060: LD_VAR 0 6
14064: PUSH
14065: LD_VAR 0 8
14069: ARRAY
14070: ST_TO_ADDR
// if x = - 1 then
14071: LD_VAR 0 13
14075: PUSH
14076: LD_INT 1
14078: NEG
14079: EQUAL
14080: IFFALSE 14084
// continue ;
14082: GO 14040
// PrepareHuman ( false , i , skill ) ;
14084: LD_INT 0
14086: PPUSH
14087: LD_VAR 0 8
14091: PPUSH
14092: LD_VAR 0 4
14096: PPUSH
14097: CALL_OW 380
// un := CreateHuman ;
14101: LD_ADDR_VAR 0 14
14105: PUSH
14106: CALL_OW 44
14110: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14111: LD_VAR 0 14
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 250
14125: PPUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 251
14135: PPUSH
14136: LD_INT 10
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL_OW 50
// result := result ^ un ;
14146: LD_ADDR_VAR 0 7
14150: PUSH
14151: LD_VAR 0 7
14155: PUSH
14156: LD_VAR 0 14
14160: ADD
14161: ST_TO_ADDR
// end ;
14162: GO 14040
14164: POP
14165: POP
// end ; end ;
14166: LD_VAR 0 7
14170: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14171: LD_INT 0
14173: PPUSH
14174: PPUSH
14175: PPUSH
14176: PPUSH
14177: PPUSH
14178: PPUSH
14179: PPUSH
14180: PPUSH
14181: PPUSH
14182: PPUSH
14183: PPUSH
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
// result := false ;
14189: LD_ADDR_VAR 0 3
14193: PUSH
14194: LD_INT 0
14196: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14197: LD_VAR 0 1
14201: NOT
14202: IFTRUE 14227
14204: PUSH
14205: LD_VAR 0 1
14209: PPUSH
14210: CALL_OW 266
14214: PUSH
14215: LD_INT 32
14217: PUSH
14218: LD_INT 33
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: IN
14225: NOT
14226: OR
14227: IFFALSE 14231
// exit ;
14229: GO 15366
// nat := GetNation ( tower ) ;
14231: LD_ADDR_VAR 0 12
14235: PUSH
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 248
14245: ST_TO_ADDR
// side := GetSide ( tower ) ;
14246: LD_ADDR_VAR 0 16
14250: PUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 255
14260: ST_TO_ADDR
// x := GetX ( tower ) ;
14261: LD_ADDR_VAR 0 10
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 250
14275: ST_TO_ADDR
// y := GetY ( tower ) ;
14276: LD_ADDR_VAR 0 11
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 251
14290: ST_TO_ADDR
// if not x or not y then
14291: LD_VAR 0 10
14295: NOT
14296: IFTRUE 14305
14298: PUSH
14299: LD_VAR 0 11
14303: NOT
14304: OR
14305: IFFALSE 14309
// exit ;
14307: GO 15366
// weapon := 0 ;
14309: LD_ADDR_VAR 0 18
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// fac_list := [ ] ;
14317: LD_ADDR_VAR 0 17
14321: PUSH
14322: EMPTY
14323: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14324: LD_ADDR_VAR 0 6
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 274
14338: PPUSH
14339: LD_VAR 0 2
14343: PPUSH
14344: LD_INT 0
14346: PPUSH
14347: CALL 11901 0 3
14351: PPUSH
14352: LD_INT 30
14354: PUSH
14355: LD_INT 3
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 72
14366: ST_TO_ADDR
// if not factories then
14367: LD_VAR 0 6
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 15366
// for i in factories do
14376: LD_ADDR_VAR 0 8
14380: PUSH
14381: LD_VAR 0 6
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14412
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14389: LD_ADDR_VAR 0 17
14393: PUSH
14394: LD_VAR 0 17
14398: PUSH
14399: LD_VAR 0 8
14403: PPUSH
14404: CALL_OW 478
14408: UNION
14409: ST_TO_ADDR
14410: GO 14386
14412: POP
14413: POP
// if not fac_list then
14414: LD_VAR 0 17
14418: NOT
14419: IFFALSE 14423
// exit ;
14421: GO 15366
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14423: LD_ADDR_VAR 0 5
14427: PUSH
14428: LD_INT 4
14430: PUSH
14431: LD_INT 5
14433: PUSH
14434: LD_INT 9
14436: PUSH
14437: LD_INT 10
14439: PUSH
14440: LD_INT 6
14442: PUSH
14443: LD_INT 7
14445: PUSH
14446: LD_INT 11
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 27
14460: PUSH
14461: LD_INT 28
14463: PUSH
14464: LD_INT 26
14466: PUSH
14467: LD_INT 30
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 43
14478: PUSH
14479: LD_INT 44
14481: PUSH
14482: LD_INT 46
14484: PUSH
14485: LD_INT 45
14487: PUSH
14488: LD_INT 47
14490: PUSH
14491: LD_INT 49
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: LD_VAR 0 12
14511: ARRAY
14512: ST_TO_ADDR
// list := list isect fac_list ;
14513: LD_ADDR_VAR 0 5
14517: PUSH
14518: LD_VAR 0 5
14522: PUSH
14523: LD_VAR 0 17
14527: ISECT
14528: ST_TO_ADDR
// if not list then
14529: LD_VAR 0 5
14533: NOT
14534: IFFALSE 14538
// exit ;
14536: GO 15366
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14538: LD_VAR 0 12
14542: PUSH
14543: LD_INT 3
14545: EQUAL
14546: IFFALSE 14558
14548: PUSH
14549: LD_INT 49
14551: PUSH
14552: LD_VAR 0 5
14556: IN
14557: AND
14558: IFFALSE 14578
14560: PUSH
14561: LD_INT 31
14563: PPUSH
14564: LD_VAR 0 16
14568: PPUSH
14569: CALL_OW 321
14573: PUSH
14574: LD_INT 2
14576: EQUAL
14577: AND
14578: IFFALSE 14638
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14580: LD_INT 22
14582: PUSH
14583: LD_VAR 0 16
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 35
14594: PUSH
14595: LD_INT 49
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 91
14604: PUSH
14605: LD_VAR 0 1
14609: PUSH
14610: LD_INT 10
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: NOT
14628: IFFALSE 14638
// weapon := ru_time_lapser ;
14630: LD_ADDR_VAR 0 18
14634: PUSH
14635: LD_INT 49
14637: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14638: LD_VAR 0 12
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: LD_INT 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: IN
14653: IFFALSE 14677
14655: PUSH
14656: LD_INT 11
14658: PUSH
14659: LD_VAR 0 5
14663: IN
14664: IFTRUE 14676
14666: PUSH
14667: LD_INT 30
14669: PUSH
14670: LD_VAR 0 5
14674: IN
14675: OR
14676: AND
14677: IFFALSE 14697
14679: PUSH
14680: LD_INT 6
14682: PPUSH
14683: LD_VAR 0 16
14687: PPUSH
14688: CALL_OW 321
14692: PUSH
14693: LD_INT 2
14695: EQUAL
14696: AND
14697: IFFALSE 14864
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14699: LD_INT 22
14701: PUSH
14702: LD_VAR 0 16
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 35
14716: PUSH
14717: LD_INT 11
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 35
14726: PUSH
14727: LD_INT 30
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 91
14741: PUSH
14742: LD_VAR 0 1
14746: PUSH
14747: LD_INT 18
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: PPUSH
14760: CALL_OW 69
14764: NOT
14765: IFFALSE 14841
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_VAR 0 16
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_INT 32
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 30
14795: PUSH
14796: LD_INT 33
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 91
14810: PUSH
14811: LD_VAR 0 1
14815: PUSH
14816: LD_INT 12
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: PPUSH
14832: CALL_OW 69
14836: PUSH
14837: LD_INT 2
14839: GREATER
14840: AND
14841: IFFALSE 14864
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14843: LD_ADDR_VAR 0 18
14847: PUSH
14848: LD_INT 11
14850: PUSH
14851: LD_INT 30
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_VAR 0 12
14862: ARRAY
14863: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14864: LD_VAR 0 18
14868: NOT
14869: IFFALSE 14889
14871: PUSH
14872: LD_INT 40
14874: PPUSH
14875: LD_VAR 0 16
14879: PPUSH
14880: CALL_OW 321
14884: PUSH
14885: LD_INT 2
14887: EQUAL
14888: AND
14889: IFFALSE 14925
14891: PUSH
14892: LD_INT 7
14894: PUSH
14895: LD_VAR 0 5
14899: IN
14900: IFTRUE 14912
14902: PUSH
14903: LD_INT 28
14905: PUSH
14906: LD_VAR 0 5
14910: IN
14911: OR
14912: IFTRUE 14924
14914: PUSH
14915: LD_INT 45
14917: PUSH
14918: LD_VAR 0 5
14922: IN
14923: OR
14924: AND
14925: IFFALSE 15179
// begin hex := GetHexInfo ( x , y ) ;
14927: LD_ADDR_VAR 0 4
14931: PUSH
14932: LD_VAR 0 10
14936: PPUSH
14937: LD_VAR 0 11
14941: PPUSH
14942: CALL_OW 546
14946: ST_TO_ADDR
// if hex [ 1 ] then
14947: LD_VAR 0 4
14951: PUSH
14952: LD_INT 1
14954: ARRAY
14955: IFFALSE 14959
// exit ;
14957: GO 15366
// height := hex [ 2 ] ;
14959: LD_ADDR_VAR 0 15
14963: PUSH
14964: LD_VAR 0 4
14968: PUSH
14969: LD_INT 2
14971: ARRAY
14972: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14973: LD_ADDR_VAR 0 14
14977: PUSH
14978: LD_INT 0
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 3
14986: PUSH
14987: LD_INT 5
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: ST_TO_ADDR
// for i in tmp do
14996: LD_ADDR_VAR 0 8
15000: PUSH
15001: LD_VAR 0 14
15005: PUSH
15006: FOR_IN
15007: IFFALSE 15177
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15009: LD_ADDR_VAR 0 9
15013: PUSH
15014: LD_VAR 0 10
15018: PPUSH
15019: LD_VAR 0 8
15023: PPUSH
15024: LD_INT 5
15026: PPUSH
15027: CALL_OW 272
15031: PUSH
15032: LD_VAR 0 11
15036: PPUSH
15037: LD_VAR 0 8
15041: PPUSH
15042: LD_INT 5
15044: PPUSH
15045: CALL_OW 273
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15054: LD_VAR 0 9
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: LD_VAR 0 9
15067: PUSH
15068: LD_INT 2
15070: ARRAY
15071: PPUSH
15072: CALL_OW 488
15076: IFFALSE 15175
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15078: LD_ADDR_VAR 0 4
15082: PUSH
15083: LD_VAR 0 9
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: PPUSH
15092: LD_VAR 0 9
15096: PUSH
15097: LD_INT 2
15099: ARRAY
15100: PPUSH
15101: CALL_OW 546
15105: ST_TO_ADDR
// if hex [ 1 ] then
15106: LD_VAR 0 4
15110: PUSH
15111: LD_INT 1
15113: ARRAY
15114: IFFALSE 15118
// continue ;
15116: GO 15006
// h := hex [ 2 ] ;
15118: LD_ADDR_VAR 0 13
15122: PUSH
15123: LD_VAR 0 4
15127: PUSH
15128: LD_INT 2
15130: ARRAY
15131: ST_TO_ADDR
// if h + 7 < height then
15132: LD_VAR 0 13
15136: PUSH
15137: LD_INT 7
15139: PLUS
15140: PUSH
15141: LD_VAR 0 15
15145: LESS
15146: IFFALSE 15175
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15148: LD_ADDR_VAR 0 18
15152: PUSH
15153: LD_INT 7
15155: PUSH
15156: LD_INT 28
15158: PUSH
15159: LD_INT 45
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: LD_VAR 0 12
15171: ARRAY
15172: ST_TO_ADDR
// break ;
15173: GO 15177
// end ; end ; end ;
15175: GO 15006
15177: POP
15178: POP
// end ; if not weapon then
15179: LD_VAR 0 18
15183: NOT
15184: IFFALSE 15244
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15186: LD_ADDR_VAR 0 5
15190: PUSH
15191: LD_VAR 0 5
15195: PUSH
15196: LD_INT 11
15198: PUSH
15199: LD_INT 30
15201: PUSH
15202: LD_INT 49
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: DIFF
15210: ST_TO_ADDR
// if not list then
15211: LD_VAR 0 5
15215: NOT
15216: IFFALSE 15220
// exit ;
15218: GO 15366
// weapon := list [ rand ( 1 , list ) ] ;
15220: LD_ADDR_VAR 0 18
15224: PUSH
15225: LD_VAR 0 5
15229: PUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_VAR 0 5
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: ST_TO_ADDR
// end ; if weapon then
15244: LD_VAR 0 18
15248: IFFALSE 15366
// begin tmp := CostOfWeapon ( weapon ) ;
15250: LD_ADDR_VAR 0 14
15254: PUSH
15255: LD_VAR 0 18
15259: PPUSH
15260: CALL_OW 451
15264: ST_TO_ADDR
// j := GetBase ( tower ) ;
15265: LD_ADDR_VAR 0 9
15269: PUSH
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 274
15279: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15280: LD_VAR 0 9
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 275
15292: PUSH
15293: LD_VAR 0 14
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: GREATEREQUAL
15302: IFFALSE 15328
15304: PUSH
15305: LD_VAR 0 9
15309: PPUSH
15310: LD_INT 2
15312: PPUSH
15313: CALL_OW 275
15317: PUSH
15318: LD_VAR 0 14
15322: PUSH
15323: LD_INT 2
15325: ARRAY
15326: GREATEREQUAL
15327: AND
15328: IFFALSE 15354
15330: PUSH
15331: LD_VAR 0 9
15335: PPUSH
15336: LD_INT 3
15338: PPUSH
15339: CALL_OW 275
15343: PUSH
15344: LD_VAR 0 14
15348: PUSH
15349: LD_INT 3
15351: ARRAY
15352: GREATEREQUAL
15353: AND
15354: IFFALSE 15366
// result := weapon ;
15356: LD_ADDR_VAR 0 3
15360: PUSH
15361: LD_VAR 0 18
15365: ST_TO_ADDR
// end ; end ;
15366: LD_VAR 0 3
15370: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15371: LD_INT 0
15373: PPUSH
15374: PPUSH
// result := true ;
15375: LD_ADDR_VAR 0 3
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if array1 = array2 then
15383: LD_VAR 0 1
15387: PUSH
15388: LD_VAR 0 2
15392: EQUAL
15393: IFFALSE 15453
// begin for i = 1 to array1 do
15395: LD_ADDR_VAR 0 4
15399: PUSH
15400: DOUBLE
15401: LD_INT 1
15403: DEC
15404: ST_TO_ADDR
15405: LD_VAR 0 1
15409: PUSH
15410: FOR_TO
15411: IFFALSE 15449
// if array1 [ i ] <> array2 [ i ] then
15413: LD_VAR 0 1
15417: PUSH
15418: LD_VAR 0 4
15422: ARRAY
15423: PUSH
15424: LD_VAR 0 2
15428: PUSH
15429: LD_VAR 0 4
15433: ARRAY
15434: NONEQUAL
15435: IFFALSE 15447
// begin result := false ;
15437: LD_ADDR_VAR 0 3
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// break ;
15445: GO 15449
// end ;
15447: GO 15410
15449: POP
15450: POP
// end else
15451: GO 15461
// result := false ;
15453: LD_ADDR_VAR 0 3
15457: PUSH
15458: LD_INT 0
15460: ST_TO_ADDR
// end ;
15461: LD_VAR 0 3
15465: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
// if not array1 or not array2 then
15470: LD_VAR 0 1
15474: NOT
15475: IFTRUE 15484
15477: PUSH
15478: LD_VAR 0 2
15482: NOT
15483: OR
15484: IFFALSE 15488
// exit ;
15486: GO 15552
// result := true ;
15488: LD_ADDR_VAR 0 3
15492: PUSH
15493: LD_INT 1
15495: ST_TO_ADDR
// for i = 1 to array1 do
15496: LD_ADDR_VAR 0 4
15500: PUSH
15501: DOUBLE
15502: LD_INT 1
15504: DEC
15505: ST_TO_ADDR
15506: LD_VAR 0 1
15510: PUSH
15511: FOR_TO
15512: IFFALSE 15550
// if array1 [ i ] <> array2 [ i ] then
15514: LD_VAR 0 1
15518: PUSH
15519: LD_VAR 0 4
15523: ARRAY
15524: PUSH
15525: LD_VAR 0 2
15529: PUSH
15530: LD_VAR 0 4
15534: ARRAY
15535: NONEQUAL
15536: IFFALSE 15548
// begin result := false ;
15538: LD_ADDR_VAR 0 3
15542: PUSH
15543: LD_INT 0
15545: ST_TO_ADDR
// break ;
15546: GO 15550
// end ;
15548: GO 15511
15550: POP
15551: POP
// end ;
15552: LD_VAR 0 3
15556: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
15561: PPUSH
// pom := GetBase ( fac ) ;
15562: LD_ADDR_VAR 0 5
15566: PUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 274
15576: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15577: LD_ADDR_VAR 0 4
15581: PUSH
15582: LD_VAR 0 2
15586: PUSH
15587: LD_INT 1
15589: ARRAY
15590: PPUSH
15591: LD_VAR 0 2
15595: PUSH
15596: LD_INT 2
15598: ARRAY
15599: PPUSH
15600: LD_VAR 0 2
15604: PUSH
15605: LD_INT 3
15607: ARRAY
15608: PPUSH
15609: LD_VAR 0 2
15613: PUSH
15614: LD_INT 4
15616: ARRAY
15617: PPUSH
15618: CALL_OW 449
15622: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15623: LD_ADDR_VAR 0 3
15627: PUSH
15628: LD_VAR 0 5
15632: PPUSH
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 275
15640: PUSH
15641: LD_VAR 0 4
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: GREATEREQUAL
15650: IFFALSE 15676
15652: PUSH
15653: LD_VAR 0 5
15657: PPUSH
15658: LD_INT 2
15660: PPUSH
15661: CALL_OW 275
15665: PUSH
15666: LD_VAR 0 4
15670: PUSH
15671: LD_INT 2
15673: ARRAY
15674: GREATEREQUAL
15675: AND
15676: IFFALSE 15702
15678: PUSH
15679: LD_VAR 0 5
15683: PPUSH
15684: LD_INT 3
15686: PPUSH
15687: CALL_OW 275
15691: PUSH
15692: LD_VAR 0 4
15696: PUSH
15697: LD_INT 3
15699: ARRAY
15700: GREATEREQUAL
15701: AND
15702: ST_TO_ADDR
// end ;
15703: LD_VAR 0 3
15707: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15708: LD_INT 0
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
// pom := GetBase ( building ) ;
15714: LD_ADDR_VAR 0 3
15718: PUSH
15719: LD_VAR 0 1
15723: PPUSH
15724: CALL_OW 274
15728: ST_TO_ADDR
// if not pom then
15729: LD_VAR 0 3
15733: NOT
15734: IFFALSE 15738
// exit ;
15736: GO 15912
// btype := GetBType ( building ) ;
15738: LD_ADDR_VAR 0 5
15742: PUSH
15743: LD_VAR 0 1
15747: PPUSH
15748: CALL_OW 266
15752: ST_TO_ADDR
// if btype = b_armoury then
15753: LD_VAR 0 5
15757: PUSH
15758: LD_INT 4
15760: EQUAL
15761: IFFALSE 15771
// btype := b_barracks ;
15763: LD_ADDR_VAR 0 5
15767: PUSH
15768: LD_INT 5
15770: ST_TO_ADDR
// if btype = b_depot then
15771: LD_VAR 0 5
15775: PUSH
15776: LD_INT 0
15778: EQUAL
15779: IFFALSE 15789
// btype := b_warehouse ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: LD_INT 1
15788: ST_TO_ADDR
// if btype = b_workshop then
15789: LD_VAR 0 5
15793: PUSH
15794: LD_INT 2
15796: EQUAL
15797: IFFALSE 15807
// btype := b_factory ;
15799: LD_ADDR_VAR 0 5
15803: PUSH
15804: LD_INT 3
15806: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15807: LD_ADDR_VAR 0 4
15811: PUSH
15812: LD_VAR 0 5
15816: PPUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 248
15826: PPUSH
15827: CALL_OW 450
15831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15832: LD_ADDR_VAR 0 2
15836: PUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 275
15849: PUSH
15850: LD_VAR 0 4
15854: PUSH
15855: LD_INT 1
15857: ARRAY
15858: GREATEREQUAL
15859: IFFALSE 15885
15861: PUSH
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_INT 2
15869: PPUSH
15870: CALL_OW 275
15874: PUSH
15875: LD_VAR 0 4
15879: PUSH
15880: LD_INT 2
15882: ARRAY
15883: GREATEREQUAL
15884: AND
15885: IFFALSE 15911
15887: PUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: LD_INT 3
15895: PPUSH
15896: CALL_OW 275
15900: PUSH
15901: LD_VAR 0 4
15905: PUSH
15906: LD_INT 3
15908: ARRAY
15909: GREATEREQUAL
15910: AND
15911: ST_TO_ADDR
// end ;
15912: LD_VAR 0 2
15916: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// pom := GetBase ( building ) ;
15922: LD_ADDR_VAR 0 4
15926: PUSH
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 274
15936: ST_TO_ADDR
// if not pom then
15937: LD_VAR 0 4
15941: NOT
15942: IFFALSE 15946
// exit ;
15944: GO 16051
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15946: LD_ADDR_VAR 0 5
15950: PUSH
15951: LD_VAR 0 2
15955: PPUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 248
15965: PPUSH
15966: CALL_OW 450
15970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_VAR 0 4
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 275
15988: PUSH
15989: LD_VAR 0 5
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: GREATEREQUAL
15998: IFFALSE 16024
16000: PUSH
16001: LD_VAR 0 4
16005: PPUSH
16006: LD_INT 2
16008: PPUSH
16009: CALL_OW 275
16013: PUSH
16014: LD_VAR 0 5
16018: PUSH
16019: LD_INT 2
16021: ARRAY
16022: GREATEREQUAL
16023: AND
16024: IFFALSE 16050
16026: PUSH
16027: LD_VAR 0 4
16031: PPUSH
16032: LD_INT 3
16034: PPUSH
16035: CALL_OW 275
16039: PUSH
16040: LD_VAR 0 5
16044: PUSH
16045: LD_INT 3
16047: ARRAY
16048: GREATEREQUAL
16049: AND
16050: ST_TO_ADDR
// end ;
16051: LD_VAR 0 3
16055: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16056: LD_INT 0
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
// result := false ;
16069: LD_ADDR_VAR 0 8
16073: PUSH
16074: LD_INT 0
16076: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16077: LD_VAR 0 5
16081: NOT
16082: IFTRUE 16091
16084: PUSH
16085: LD_VAR 0 1
16089: NOT
16090: OR
16091: IFTRUE 16100
16093: PUSH
16094: LD_VAR 0 2
16098: NOT
16099: OR
16100: IFTRUE 16109
16102: PUSH
16103: LD_VAR 0 3
16107: NOT
16108: OR
16109: IFFALSE 16113
// exit ;
16111: GO 16939
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16113: LD_ADDR_VAR 0 14
16117: PUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: LD_VAR 0 2
16127: PPUSH
16128: LD_VAR 0 3
16132: PPUSH
16133: LD_VAR 0 4
16137: PPUSH
16138: LD_VAR 0 5
16142: PUSH
16143: LD_INT 1
16145: ARRAY
16146: PPUSH
16147: CALL_OW 248
16151: PPUSH
16152: LD_INT 0
16154: PPUSH
16155: CALL 18220 0 6
16159: ST_TO_ADDR
// if not hexes then
16160: LD_VAR 0 14
16164: NOT
16165: IFFALSE 16169
// exit ;
16167: GO 16939
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16169: LD_ADDR_VAR 0 17
16173: PUSH
16174: LD_VAR 0 5
16178: PPUSH
16179: LD_INT 22
16181: PUSH
16182: LD_VAR 0 13
16186: PPUSH
16187: CALL_OW 255
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: LD_INT 30
16201: PUSH
16202: LD_INT 0
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 30
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 72
16232: ST_TO_ADDR
// for i = 1 to hexes do
16233: LD_ADDR_VAR 0 9
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_VAR 0 14
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16937
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16251: LD_ADDR_VAR 0 13
16255: PUSH
16256: LD_VAR 0 14
16260: PUSH
16261: LD_VAR 0 9
16265: ARRAY
16266: PUSH
16267: LD_INT 1
16269: ARRAY
16270: PPUSH
16271: LD_VAR 0 14
16275: PUSH
16276: LD_VAR 0 9
16280: ARRAY
16281: PUSH
16282: LD_INT 2
16284: ARRAY
16285: PPUSH
16286: CALL_OW 428
16290: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16291: LD_VAR 0 14
16295: PUSH
16296: LD_VAR 0 9
16300: ARRAY
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PPUSH
16306: LD_VAR 0 14
16310: PUSH
16311: LD_VAR 0 9
16315: ARRAY
16316: PUSH
16317: LD_INT 2
16319: ARRAY
16320: PPUSH
16321: CALL_OW 351
16325: IFTRUE 16364
16327: PUSH
16328: LD_VAR 0 14
16332: PUSH
16333: LD_VAR 0 9
16337: ARRAY
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: LD_VAR 0 14
16347: PUSH
16348: LD_VAR 0 9
16352: ARRAY
16353: PUSH
16354: LD_INT 2
16356: ARRAY
16357: PPUSH
16358: CALL_OW 488
16362: NOT
16363: OR
16364: IFTRUE 16381
16366: PUSH
16367: LD_VAR 0 13
16371: PPUSH
16372: CALL_OW 247
16376: PUSH
16377: LD_INT 3
16379: EQUAL
16380: OR
16381: IFFALSE 16387
// exit ;
16383: POP
16384: POP
16385: GO 16939
// if not tmp then
16387: LD_VAR 0 13
16391: NOT
16392: IFFALSE 16396
// continue ;
16394: GO 16248
// result := true ;
16396: LD_ADDR_VAR 0 8
16400: PUSH
16401: LD_INT 1
16403: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16404: LD_VAR 0 6
16408: IFFALSE 16425
16410: PUSH
16411: LD_VAR 0 13
16415: PPUSH
16416: CALL_OW 247
16420: PUSH
16421: LD_INT 2
16423: EQUAL
16424: AND
16425: IFFALSE 16442
16427: PUSH
16428: LD_VAR 0 13
16432: PPUSH
16433: CALL_OW 263
16437: PUSH
16438: LD_INT 1
16440: EQUAL
16441: AND
16442: IFFALSE 16606
// begin if IsDrivenBy ( tmp ) then
16444: LD_VAR 0 13
16448: PPUSH
16449: CALL_OW 311
16453: IFFALSE 16457
// continue ;
16455: GO 16248
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16457: LD_VAR 0 6
16461: PPUSH
16462: LD_INT 3
16464: PUSH
16465: LD_INT 60
16467: PUSH
16468: EMPTY
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: LD_INT 55
16480: PUSH
16481: EMPTY
16482: LIST
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 72
16496: IFFALSE 16604
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16498: LD_ADDR_VAR 0 18
16502: PUSH
16503: LD_VAR 0 6
16507: PPUSH
16508: LD_INT 3
16510: PUSH
16511: LD_INT 60
16513: PUSH
16514: EMPTY
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: LD_INT 55
16526: PUSH
16527: EMPTY
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 72
16542: PUSH
16543: LD_INT 1
16545: ARRAY
16546: ST_TO_ADDR
// if IsInUnit ( driver ) then
16547: LD_VAR 0 18
16551: PPUSH
16552: CALL_OW 310
16556: IFFALSE 16567
// ComExit ( driver ) ;
16558: LD_VAR 0 18
16562: PPUSH
16563: CALL 42210 0 1
// AddComEnterUnit ( driver , tmp ) ;
16567: LD_VAR 0 18
16571: PPUSH
16572: LD_VAR 0 13
16576: PPUSH
16577: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16581: LD_VAR 0 18
16585: PPUSH
16586: LD_VAR 0 7
16590: PPUSH
16591: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16595: LD_VAR 0 18
16599: PPUSH
16600: CALL_OW 181
// end ; continue ;
16604: GO 16248
// end ; if not cleaners or not tmp in cleaners then
16606: LD_VAR 0 6
16610: NOT
16611: IFTRUE 16626
16613: PUSH
16614: LD_VAR 0 13
16618: PUSH
16619: LD_VAR 0 6
16623: IN
16624: NOT
16625: OR
16626: IFFALSE 16935
// begin if dep then
16628: LD_VAR 0 17
16632: IFFALSE 16768
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16634: LD_ADDR_VAR 0 16
16638: PUSH
16639: LD_VAR 0 17
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: CALL_OW 250
16652: PPUSH
16653: LD_VAR 0 17
16657: PUSH
16658: LD_INT 1
16660: ARRAY
16661: PPUSH
16662: CALL_OW 254
16666: PPUSH
16667: LD_INT 5
16669: PPUSH
16670: CALL_OW 272
16674: PUSH
16675: LD_VAR 0 17
16679: PUSH
16680: LD_INT 1
16682: ARRAY
16683: PPUSH
16684: CALL_OW 251
16688: PPUSH
16689: LD_VAR 0 17
16693: PUSH
16694: LD_INT 1
16696: ARRAY
16697: PPUSH
16698: CALL_OW 254
16702: PPUSH
16703: LD_INT 5
16705: PPUSH
16706: CALL_OW 273
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16715: LD_VAR 0 16
16719: PUSH
16720: LD_INT 1
16722: ARRAY
16723: PPUSH
16724: LD_VAR 0 16
16728: PUSH
16729: LD_INT 2
16731: ARRAY
16732: PPUSH
16733: CALL_OW 488
16737: IFFALSE 16768
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16739: LD_VAR 0 13
16743: PPUSH
16744: LD_VAR 0 16
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: PPUSH
16753: LD_VAR 0 16
16757: PUSH
16758: LD_INT 2
16760: ARRAY
16761: PPUSH
16762: CALL_OW 111
// continue ;
16766: GO 16248
// end ; end ; r := GetDir ( tmp ) ;
16768: LD_ADDR_VAR 0 15
16772: PUSH
16773: LD_VAR 0 13
16777: PPUSH
16778: CALL_OW 254
16782: ST_TO_ADDR
// if r = 5 then
16783: LD_VAR 0 15
16787: PUSH
16788: LD_INT 5
16790: EQUAL
16791: IFFALSE 16801
// r := 0 ;
16793: LD_ADDR_VAR 0 15
16797: PUSH
16798: LD_INT 0
16800: ST_TO_ADDR
// for j = r to 5 do
16801: LD_ADDR_VAR 0 10
16805: PUSH
16806: DOUBLE
16807: LD_VAR 0 15
16811: DEC
16812: ST_TO_ADDR
16813: LD_INT 5
16815: PUSH
16816: FOR_TO
16817: IFFALSE 16933
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16819: LD_ADDR_VAR 0 11
16823: PUSH
16824: LD_VAR 0 13
16828: PPUSH
16829: CALL_OW 250
16833: PPUSH
16834: LD_VAR 0 10
16838: PPUSH
16839: LD_INT 2
16841: PPUSH
16842: CALL_OW 272
16846: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16847: LD_ADDR_VAR 0 12
16851: PUSH
16852: LD_VAR 0 13
16856: PPUSH
16857: CALL_OW 251
16861: PPUSH
16862: LD_VAR 0 10
16866: PPUSH
16867: LD_INT 2
16869: PPUSH
16870: CALL_OW 273
16874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16875: LD_VAR 0 11
16879: PPUSH
16880: LD_VAR 0 12
16884: PPUSH
16885: CALL_OW 488
16889: IFFALSE 16908
16891: PUSH
16892: LD_VAR 0 11
16896: PPUSH
16897: LD_VAR 0 12
16901: PPUSH
16902: CALL_OW 428
16906: NOT
16907: AND
16908: IFFALSE 16931
// begin ComMoveXY ( tmp , _x , _y ) ;
16910: LD_VAR 0 13
16914: PPUSH
16915: LD_VAR 0 11
16919: PPUSH
16920: LD_VAR 0 12
16924: PPUSH
16925: CALL_OW 111
// break ;
16929: GO 16933
// end ; end ;
16931: GO 16816
16933: POP
16934: POP
// end ; end ;
16935: GO 16248
16937: POP
16938: POP
// end ;
16939: LD_VAR 0 8
16943: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16944: LD_INT 0
16946: PPUSH
// result := true ;
16947: LD_ADDR_VAR 0 3
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16955: LD_VAR 0 2
16959: PUSH
16960: LD_INT 24
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16974
16966: LD_INT 33
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 16999
16974: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16975: LD_ADDR_VAR 0 3
16979: PUSH
16980: LD_INT 32
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 321
16992: PUSH
16993: LD_INT 2
16995: EQUAL
16996: ST_TO_ADDR
16997: GO 17315
16999: LD_INT 20
17001: DOUBLE
17002: EQUAL
17003: IFTRUE 17007
17005: GO 17032
17007: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17008: LD_ADDR_VAR 0 3
17012: PUSH
17013: LD_INT 6
17015: PPUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 321
17025: PUSH
17026: LD_INT 2
17028: EQUAL
17029: ST_TO_ADDR
17030: GO 17315
17032: LD_INT 22
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17046
17038: LD_INT 36
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17071
17046: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17047: LD_ADDR_VAR 0 3
17051: PUSH
17052: LD_INT 15
17054: PPUSH
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 321
17064: PUSH
17065: LD_INT 2
17067: EQUAL
17068: ST_TO_ADDR
17069: GO 17315
17071: LD_INT 30
17073: DOUBLE
17074: EQUAL
17075: IFTRUE 17079
17077: GO 17104
17079: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17080: LD_ADDR_VAR 0 3
17084: PUSH
17085: LD_INT 20
17087: PPUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 321
17097: PUSH
17098: LD_INT 2
17100: EQUAL
17101: ST_TO_ADDR
17102: GO 17315
17104: LD_INT 28
17106: DOUBLE
17107: EQUAL
17108: IFTRUE 17118
17110: LD_INT 21
17112: DOUBLE
17113: EQUAL
17114: IFTRUE 17118
17116: GO 17143
17118: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17119: LD_ADDR_VAR 0 3
17123: PUSH
17124: LD_INT 21
17126: PPUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 321
17136: PUSH
17137: LD_INT 2
17139: EQUAL
17140: ST_TO_ADDR
17141: GO 17315
17143: LD_INT 16
17145: DOUBLE
17146: EQUAL
17147: IFTRUE 17151
17149: GO 17176
17151: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17152: LD_ADDR_VAR 0 3
17156: PUSH
17157: LD_INT 84
17159: PPUSH
17160: LD_VAR 0 1
17164: PPUSH
17165: CALL_OW 321
17169: PUSH
17170: LD_INT 2
17172: EQUAL
17173: ST_TO_ADDR
17174: GO 17315
17176: LD_INT 19
17178: DOUBLE
17179: EQUAL
17180: IFTRUE 17190
17182: LD_INT 23
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17215
17190: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17191: LD_ADDR_VAR 0 3
17195: PUSH
17196: LD_INT 83
17198: PPUSH
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 321
17208: PUSH
17209: LD_INT 2
17211: EQUAL
17212: ST_TO_ADDR
17213: GO 17315
17215: LD_INT 17
17217: DOUBLE
17218: EQUAL
17219: IFTRUE 17223
17221: GO 17248
17223: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17224: LD_ADDR_VAR 0 3
17228: PUSH
17229: LD_INT 39
17231: PPUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: CALL_OW 321
17241: PUSH
17242: LD_INT 2
17244: EQUAL
17245: ST_TO_ADDR
17246: GO 17315
17248: LD_INT 18
17250: DOUBLE
17251: EQUAL
17252: IFTRUE 17256
17254: GO 17281
17256: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_INT 40
17264: PPUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 321
17274: PUSH
17275: LD_INT 2
17277: EQUAL
17278: ST_TO_ADDR
17279: GO 17315
17281: LD_INT 27
17283: DOUBLE
17284: EQUAL
17285: IFTRUE 17289
17287: GO 17314
17289: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17290: LD_ADDR_VAR 0 3
17294: PUSH
17295: LD_INT 35
17297: PPUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 321
17307: PUSH
17308: LD_INT 2
17310: EQUAL
17311: ST_TO_ADDR
17312: GO 17315
17314: POP
// end ;
17315: LD_VAR 0 3
17319: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17320: LD_INT 0
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
// result := false ;
17333: LD_ADDR_VAR 0 6
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// if btype = b_depot then
17341: LD_VAR 0 2
17345: PUSH
17346: LD_INT 0
17348: EQUAL
17349: IFFALSE 17361
// begin result := true ;
17351: LD_ADDR_VAR 0 6
17355: PUSH
17356: LD_INT 1
17358: ST_TO_ADDR
// exit ;
17359: GO 18215
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17361: LD_VAR 0 1
17365: NOT
17366: IFTRUE 17391
17368: PUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 266
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: IN
17389: NOT
17390: OR
17391: IFTRUE 17400
17393: PUSH
17394: LD_VAR 0 2
17398: NOT
17399: OR
17400: IFTRUE 17436
17402: PUSH
17403: LD_VAR 0 5
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: LD_INT 3
17419: PUSH
17420: LD_INT 4
17422: PUSH
17423: LD_INT 5
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: IN
17434: NOT
17435: OR
17436: IFTRUE 17455
17438: PUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: LD_VAR 0 4
17448: PPUSH
17449: CALL_OW 488
17453: NOT
17454: OR
17455: IFFALSE 17459
// exit ;
17457: GO 18215
// side := GetSide ( depot ) ;
17459: LD_ADDR_VAR 0 9
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 255
17473: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17474: LD_VAR 0 9
17478: PPUSH
17479: LD_VAR 0 2
17483: PPUSH
17484: CALL 16944 0 2
17488: NOT
17489: IFFALSE 17493
// exit ;
17491: GO 18215
// pom := GetBase ( depot ) ;
17493: LD_ADDR_VAR 0 10
17497: PUSH
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 274
17507: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17508: LD_ADDR_VAR 0 11
17512: PUSH
17513: LD_VAR 0 2
17517: PPUSH
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 248
17527: PPUSH
17528: CALL_OW 450
17532: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17533: LD_VAR 0 10
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: CALL_OW 275
17545: PUSH
17546: LD_VAR 0 11
17550: PUSH
17551: LD_INT 1
17553: ARRAY
17554: GREATEREQUAL
17555: IFFALSE 17581
17557: PUSH
17558: LD_VAR 0 10
17562: PPUSH
17563: LD_INT 2
17565: PPUSH
17566: CALL_OW 275
17570: PUSH
17571: LD_VAR 0 11
17575: PUSH
17576: LD_INT 2
17578: ARRAY
17579: GREATEREQUAL
17580: AND
17581: IFFALSE 17607
17583: PUSH
17584: LD_VAR 0 10
17588: PPUSH
17589: LD_INT 3
17591: PPUSH
17592: CALL_OW 275
17596: PUSH
17597: LD_VAR 0 11
17601: PUSH
17602: LD_INT 3
17604: ARRAY
17605: GREATEREQUAL
17606: AND
17607: NOT
17608: IFFALSE 17612
// exit ;
17610: GO 18215
// if GetBType ( depot ) = b_depot then
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 266
17621: PUSH
17622: LD_INT 0
17624: EQUAL
17625: IFFALSE 17637
// dist := 28 else
17627: LD_ADDR_VAR 0 14
17631: PUSH
17632: LD_INT 28
17634: ST_TO_ADDR
17635: GO 17645
// dist := 36 ;
17637: LD_ADDR_VAR 0 14
17641: PUSH
17642: LD_INT 36
17644: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_VAR 0 3
17654: PPUSH
17655: LD_VAR 0 4
17659: PPUSH
17660: CALL_OW 297
17664: PUSH
17665: LD_VAR 0 14
17669: GREATER
17670: IFFALSE 17674
// exit ;
17672: GO 18215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17674: LD_ADDR_VAR 0 12
17678: PUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: LD_VAR 0 4
17693: PPUSH
17694: LD_VAR 0 5
17698: PPUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 248
17708: PPUSH
17709: LD_INT 0
17711: PPUSH
17712: CALL 18220 0 6
17716: ST_TO_ADDR
// if not hexes then
17717: LD_VAR 0 12
17721: NOT
17722: IFFALSE 17726
// exit ;
17724: GO 18215
// hex := GetHexInfo ( x , y ) ;
17726: LD_ADDR_VAR 0 15
17730: PUSH
17731: LD_VAR 0 3
17735: PPUSH
17736: LD_VAR 0 4
17740: PPUSH
17741: CALL_OW 546
17745: ST_TO_ADDR
// if hex [ 1 ] then
17746: LD_VAR 0 15
17750: PUSH
17751: LD_INT 1
17753: ARRAY
17754: IFFALSE 17758
// exit ;
17756: GO 18215
// height := hex [ 2 ] ;
17758: LD_ADDR_VAR 0 13
17762: PUSH
17763: LD_VAR 0 15
17767: PUSH
17768: LD_INT 2
17770: ARRAY
17771: ST_TO_ADDR
// for i = 1 to hexes do
17772: LD_ADDR_VAR 0 7
17776: PUSH
17777: DOUBLE
17778: LD_INT 1
17780: DEC
17781: ST_TO_ADDR
17782: LD_VAR 0 12
17786: PUSH
17787: FOR_TO
17788: IFFALSE 18132
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17790: LD_VAR 0 12
17794: PUSH
17795: LD_VAR 0 7
17799: ARRAY
17800: PUSH
17801: LD_INT 1
17803: ARRAY
17804: PPUSH
17805: LD_VAR 0 12
17809: PUSH
17810: LD_VAR 0 7
17814: ARRAY
17815: PUSH
17816: LD_INT 2
17818: ARRAY
17819: PPUSH
17820: CALL_OW 488
17824: NOT
17825: IFTRUE 17867
17827: PUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 7
17837: ARRAY
17838: PUSH
17839: LD_INT 1
17841: ARRAY
17842: PPUSH
17843: LD_VAR 0 12
17847: PUSH
17848: LD_VAR 0 7
17852: ARRAY
17853: PUSH
17854: LD_INT 2
17856: ARRAY
17857: PPUSH
17858: CALL_OW 428
17862: PUSH
17863: LD_INT 0
17865: GREATER
17866: OR
17867: IFTRUE 17905
17869: PUSH
17870: LD_VAR 0 12
17874: PUSH
17875: LD_VAR 0 7
17879: ARRAY
17880: PUSH
17881: LD_INT 1
17883: ARRAY
17884: PPUSH
17885: LD_VAR 0 12
17889: PUSH
17890: LD_VAR 0 7
17894: ARRAY
17895: PUSH
17896: LD_INT 2
17898: ARRAY
17899: PPUSH
17900: CALL_OW 351
17904: OR
17905: IFFALSE 17911
// exit ;
17907: POP
17908: POP
17909: GO 18215
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17911: LD_ADDR_VAR 0 8
17915: PUSH
17916: LD_VAR 0 12
17920: PUSH
17921: LD_VAR 0 7
17925: ARRAY
17926: PUSH
17927: LD_INT 1
17929: ARRAY
17930: PPUSH
17931: LD_VAR 0 12
17935: PUSH
17936: LD_VAR 0 7
17940: ARRAY
17941: PUSH
17942: LD_INT 2
17944: ARRAY
17945: PPUSH
17946: CALL_OW 546
17950: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17951: LD_VAR 0 8
17955: PUSH
17956: LD_INT 1
17958: ARRAY
17959: IFTRUE 17981
17961: PUSH
17962: LD_VAR 0 8
17966: PUSH
17967: LD_INT 2
17969: ARRAY
17970: PUSH
17971: LD_VAR 0 13
17975: PUSH
17976: LD_INT 2
17978: PLUS
17979: GREATER
17980: OR
17981: IFTRUE 18003
17983: PUSH
17984: LD_VAR 0 8
17988: PUSH
17989: LD_INT 2
17991: ARRAY
17992: PUSH
17993: LD_VAR 0 13
17997: PUSH
17998: LD_INT 2
18000: MINUS
18001: LESS
18002: OR
18003: IFTRUE 18071
18005: PUSH
18006: LD_VAR 0 8
18010: PUSH
18011: LD_INT 3
18013: ARRAY
18014: PUSH
18015: LD_INT 0
18017: PUSH
18018: LD_INT 8
18020: PUSH
18021: LD_INT 9
18023: PUSH
18024: LD_INT 10
18026: PUSH
18027: LD_INT 11
18029: PUSH
18030: LD_INT 12
18032: PUSH
18033: LD_INT 13
18035: PUSH
18036: LD_INT 16
18038: PUSH
18039: LD_INT 17
18041: PUSH
18042: LD_INT 18
18044: PUSH
18045: LD_INT 19
18047: PUSH
18048: LD_INT 20
18050: PUSH
18051: LD_INT 21
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: IN
18069: NOT
18070: OR
18071: IFTRUE 18084
18073: PUSH
18074: LD_VAR 0 8
18078: PUSH
18079: LD_INT 5
18081: ARRAY
18082: NOT
18083: OR
18084: IFTRUE 18124
18086: PUSH
18087: LD_VAR 0 8
18091: PUSH
18092: LD_INT 6
18094: ARRAY
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: LD_INT 7
18104: PUSH
18105: LD_INT 9
18107: PUSH
18108: LD_INT 10
18110: PUSH
18111: LD_INT 11
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: IN
18122: NOT
18123: OR
18124: IFFALSE 18130
// exit ;
18126: POP
18127: POP
18128: GO 18215
// end ;
18130: GO 17787
18132: POP
18133: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18134: LD_VAR 0 9
18138: PPUSH
18139: LD_VAR 0 3
18143: PPUSH
18144: LD_VAR 0 4
18148: PPUSH
18149: LD_INT 20
18151: PPUSH
18152: CALL 10034 0 4
18156: PUSH
18157: LD_INT 4
18159: ARRAY
18160: IFFALSE 18164
// exit ;
18162: GO 18215
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18164: LD_VAR 0 2
18168: PUSH
18169: LD_INT 29
18171: PUSH
18172: LD_INT 30
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: IN
18179: IFFALSE 18203
18181: PUSH
18182: LD_VAR 0 3
18186: PPUSH
18187: LD_VAR 0 4
18191: PPUSH
18192: LD_VAR 0 9
18196: PPUSH
18197: CALL_OW 440
18201: NOT
18202: AND
18203: IFFALSE 18207
// exit ;
18205: GO 18215
// result := true ;
18207: LD_ADDR_VAR 0 6
18211: PUSH
18212: LD_INT 1
18214: ST_TO_ADDR
// end ;
18215: LD_VAR 0 6
18219: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18220: LD_INT 0
18222: PPUSH
18223: PPUSH
18224: PPUSH
18225: PPUSH
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
18231: PPUSH
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
18273: PPUSH
18274: PPUSH
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
// result = [ ] ;
18280: LD_ADDR_VAR 0 7
18284: PUSH
18285: EMPTY
18286: ST_TO_ADDR
// temp_list = [ ] ;
18287: LD_ADDR_VAR 0 9
18291: PUSH
18292: EMPTY
18293: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18294: LD_VAR 0 4
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 3
18310: PUSH
18311: LD_INT 4
18313: PUSH
18314: LD_INT 5
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: IN
18325: NOT
18326: IFTRUE 18369
18328: PUSH
18329: LD_VAR 0 1
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: IN
18344: IFFALSE 18368
18346: PUSH
18347: LD_VAR 0 5
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: IN
18366: NOT
18367: AND
18368: OR
18369: IFFALSE 18373
// exit ;
18371: GO 36772
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18373: LD_VAR 0 1
18377: PUSH
18378: LD_INT 6
18380: PUSH
18381: LD_INT 7
18383: PUSH
18384: LD_INT 8
18386: PUSH
18387: LD_INT 13
18389: PUSH
18390: LD_INT 12
18392: PUSH
18393: LD_INT 15
18395: PUSH
18396: LD_INT 11
18398: PUSH
18399: LD_INT 14
18401: PUSH
18402: LD_INT 10
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: IN
18416: IFFALSE 18426
// btype = b_lab ;
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_INT 6
18425: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18426: LD_VAR 0 6
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: IN
18445: NOT
18446: IFTRUE 18514
18448: PUSH
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: LD_INT 3
18465: PUSH
18466: LD_INT 6
18468: PUSH
18469: LD_INT 36
18471: PUSH
18472: LD_INT 4
18474: PUSH
18475: LD_INT 5
18477: PUSH
18478: LD_INT 31
18480: PUSH
18481: LD_INT 32
18483: PUSH
18484: LD_INT 33
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: IN
18500: NOT
18501: IFFALSE 18513
18503: PUSH
18504: LD_VAR 0 6
18508: PUSH
18509: LD_INT 1
18511: EQUAL
18512: AND
18513: OR
18514: IFTRUE 18546
18516: PUSH
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: LD_INT 3
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: IN
18532: NOT
18533: IFFALSE 18545
18535: PUSH
18536: LD_VAR 0 6
18540: PUSH
18541: LD_INT 2
18543: EQUAL
18544: AND
18545: OR
18546: IFFALSE 18556
// mode = 0 ;
18548: LD_ADDR_VAR 0 6
18552: PUSH
18553: LD_INT 0
18555: ST_TO_ADDR
// case mode of 0 :
18556: LD_VAR 0 6
18560: PUSH
18561: LD_INT 0
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 30022
18569: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18570: LD_ADDR_VAR 0 11
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: LD_INT 2
18666: NEG
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18763: LD_ADDR_VAR 0 12
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: LD_INT 1
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: NEG
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: NEG
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 3
18920: NEG
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 3
18931: NEG
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18959: LD_ADDR_VAR 0 13
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: NEG
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: LD_INT 2
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 1
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 2
19106: NEG
19107: PUSH
19108: LD_INT 3
19110: NEG
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 3
19118: NEG
19119: PUSH
19120: LD_INT 2
19122: NEG
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 3
19130: NEG
19131: PUSH
19132: LD_INT 3
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19158: LD_ADDR_VAR 0 14
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 2
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: LD_INT 3
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: LD_INT 3
19319: NEG
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19354: LD_ADDR_VAR 0 15
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: NEG
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: NEG
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19547: LD_ADDR_VAR 0 16
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: LD_INT 2
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 2
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: LD_INT 3
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19740: LD_ADDR_VAR 0 17
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19970: LD_ADDR_VAR 0 18
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: LD_INT 1
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: LD_INT 2
20066: NEG
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20200: LD_ADDR_VAR 0 19
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: LD_INT 1
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 0
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: LD_INT 2
20285: NEG
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: LD_INT 2
20296: NEG
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: NEG
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: NEG
20400: PUSH
20401: LD_INT 2
20403: NEG
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20430: LD_ADDR_VAR 0 20
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: LD_INT 1
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 1
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: NEG
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: LD_INT 2
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 2
20629: NEG
20630: PUSH
20631: LD_INT 2
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20660: LD_ADDR_VAR 0 21
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: LD_INT 0
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 1
20680: NEG
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 1
20729: NEG
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 0
20753: PUSH
20754: LD_INT 2
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: LD_INT 1
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 2
20847: NEG
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 2
20859: NEG
20860: PUSH
20861: LD_INT 2
20863: NEG
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20890: LD_ADDR_VAR 0 22
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: LD_INT 2
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: LD_INT 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 2
21089: NEG
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21120: LD_ADDR_VAR 0 23
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: LD_INT 2
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 2
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: NEG
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: LD_INT 3
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 3
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21400: LD_ADDR_VAR 0 24
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 2
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 2
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: LD_INT 2
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 1
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 3
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 3
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21676: LD_ADDR_VAR 0 25
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: LD_INT 2
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 3
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 3
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: LD_INT 3
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21950: LD_ADDR_VAR 0 26
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 2
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22226: LD_ADDR_VAR 0 27
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: LD_INT 2
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 2
22322: NEG
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 0
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 2
22402: NEG
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 3
22459: NEG
22460: PUSH
22461: LD_INT 1
22463: NEG
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 3
22471: NEG
22472: PUSH
22473: LD_INT 2
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22506: LD_ADDR_VAR 0 28
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: LD_INT 2
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: NEG
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: LD_INT 3
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: NEG
22730: PUSH
22731: LD_INT 3
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 3
22741: NEG
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 3
22753: NEG
22754: PUSH
22755: LD_INT 2
22757: NEG
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22788: LD_ADDR_VAR 0 29
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: LD_INT 2
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 2
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 2
22978: NEG
22979: PUSH
22980: LD_INT 3
22982: NEG
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: LD_INT 1
22993: NEG
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 3
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 3
23032: NEG
23033: PUSH
23034: LD_INT 2
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23067: LD_ADDR_VAR 0 30
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: LD_INT 0
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 2
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 1
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 2
23233: NEG
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 3
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 3
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: NEG
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 3
23310: NEG
23311: PUSH
23312: LD_INT 1
23314: NEG
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23345: LD_ADDR_VAR 0 31
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: LD_INT 2
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 2
23534: NEG
23535: PUSH
23536: LD_INT 3
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: NEG
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 3
23588: NEG
23589: PUSH
23590: LD_INT 2
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23623: LD_ADDR_VAR 0 32
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 3
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 3
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 3
23866: NEG
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23901: LD_ADDR_VAR 0 33
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 2
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: NEG
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: NEG
24092: PUSH
24093: LD_INT 3
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 3
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 3
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 3
24145: NEG
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24180: LD_ADDR_VAR 0 34
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 2
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: LD_INT 2
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: NEG
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: NEG
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: LD_INT 3
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: LD_INT 2
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 3
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: LD_INT 3
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 3
24425: NEG
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24460: LD_ADDR_VAR 0 35
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24572: LD_ADDR_VAR 0 36
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24684: LD_ADDR_VAR 0 37
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24796: LD_ADDR_VAR 0 38
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: NEG
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24908: LD_ADDR_VAR 0 39
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: LD_INT 2
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25020: LD_ADDR_VAR 0 40
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25132: LD_ADDR_VAR 0 41
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: LD_INT 2
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 2
25298: NEG
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: NEG
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: LD_INT 3
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 3
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 3
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 3
25406: NEG
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 3
25417: NEG
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 3
25429: NEG
25430: PUSH
25431: LD_INT 2
25433: NEG
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 3
25441: NEG
25442: PUSH
25443: LD_INT 3
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25482: LD_ADDR_VAR 0 42
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: LD_INT 2
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 2
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 2
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 2
25648: NEG
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 2
25660: NEG
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: NEG
25673: PUSH
25674: LD_INT 3
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: LD_INT 3
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 3
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 3
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 3
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 3
25779: NEG
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 3
25791: NEG
25792: PUSH
25793: LD_INT 3
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25832: LD_ADDR_VAR 0 43
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: NEG
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 3
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 3
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 3
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: LD_INT 3
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 3
26128: NEG
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 3
26139: NEG
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26180: LD_ADDR_VAR 0 44
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: NEG
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 2
26370: NEG
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 3
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 3
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 3
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 3
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 3
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 3
26454: NEG
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 3
26465: NEG
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 3
26477: NEG
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 3
26489: NEG
26490: PUSH
26491: LD_INT 3
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26530: LD_ADDR_VAR 0 45
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 2
26626: NEG
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 2
26696: NEG
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: NEG
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: LD_INT 3
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 3
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 3
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 3
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 3
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 3
26827: NEG
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 3
26839: NEG
26840: PUSH
26841: LD_INT 3
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26880: LD_ADDR_VAR 0 46
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: LD_INT 0
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: LD_INT 2
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 3
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 3
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 3
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: LD_INT 3
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 3
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27228: LD_ADDR_VAR 0 47
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27379: LD_ADDR_VAR 0 48
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: LD_INT 2
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 2
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27526: LD_ADDR_VAR 0 49
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27670: LD_ADDR_VAR 0 50
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27814: LD_ADDR_VAR 0 51
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27961: LD_ADDR_VAR 0 52
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: LD_INT 1
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28112: LD_ADDR_VAR 0 53
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28342: LD_ADDR_VAR 0 54
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 2
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28572: LD_ADDR_VAR 0 55
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 2
28771: NEG
28772: PUSH
28773: LD_INT 2
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28802: LD_ADDR_VAR 0 56
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 2
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: LD_INT 2
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 2
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: NEG
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: NEG
29002: PUSH
29003: LD_INT 2
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29032: LD_ADDR_VAR 0 57
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: LD_INT 1
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 2
29219: NEG
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: NEG
29232: PUSH
29233: LD_INT 2
29235: NEG
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29262: LD_ADDR_VAR 0 58
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 2
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: NEG
29462: PUSH
29463: LD_INT 2
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29492: LD_ADDR_VAR 0 59
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29580: LD_ADDR_VAR 0 60
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29668: LD_ADDR_VAR 0 61
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29756: LD_ADDR_VAR 0 62
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29844: LD_ADDR_VAR 0 63
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29932: LD_ADDR_VAR 0 64
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: NEG
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// end ; 1 :
30020: GO 35917
30022: LD_INT 1
30024: DOUBLE
30025: EQUAL
30026: IFTRUE 30030
30028: GO 32653
30030: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30031: LD_ADDR_VAR 0 11
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: LD_INT 3
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 3
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: LD_INT 2
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: LIST
30074: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30075: LD_ADDR_VAR 0 12
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30116: LD_ADDR_VAR 0 13
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30156: LD_ADDR_VAR 0 14
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 3
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 3
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30197: LD_ADDR_VAR 0 15
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: NEG
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: NEG
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: LIST
30240: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30241: LD_ADDR_VAR 0 16
30245: PUSH
30246: LD_INT 2
30248: NEG
30249: PUSH
30250: LD_INT 3
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 3
30272: NEG
30273: PUSH
30274: LD_INT 3
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30287: LD_ADDR_VAR 0 17
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 3
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30331: LD_ADDR_VAR 0 18
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30372: LD_ADDR_VAR 0 19
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30412: LD_ADDR_VAR 0 20
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30453: LD_ADDR_VAR 0 21
30457: PUSH
30458: LD_INT 2
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: LIST
30496: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30497: LD_ADDR_VAR 0 22
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 3
30528: NEG
30529: PUSH
30530: LD_INT 3
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30543: LD_ADDR_VAR 0 23
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: LD_INT 4
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30587: LD_ADDR_VAR 0 24
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 3
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30628: LD_ADDR_VAR 0 25
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 4
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30668: LD_ADDR_VAR 0 26
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30709: LD_ADDR_VAR 0 27
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 4
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30753: LD_ADDR_VAR 0 28
30757: PUSH
30758: LD_INT 3
30760: NEG
30761: PUSH
30762: LD_INT 3
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 3
30772: NEG
30773: PUSH
30774: LD_INT 4
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 4
30784: NEG
30785: PUSH
30786: LD_INT 3
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30799: LD_ADDR_VAR 0 29
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 4
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 5
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 5
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 4
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: LD_INT 6
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 6
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 5
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30954: LD_ADDR_VAR 0 30
30958: PUSH
30959: LD_INT 2
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 0
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 4
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 4
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 4
31023: PUSH
31024: LD_INT 1
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 5
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 5
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 6
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 6
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31097: LD_ADDR_VAR 0 31
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: LD_INT 3
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: LD_INT 3
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: LD_INT 4
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: LD_INT 4
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: LD_INT 4
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: LD_INT 5
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 4
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 6
31194: PUSH
31195: LD_INT 5
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 6
31204: PUSH
31205: LD_INT 6
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 5
31214: PUSH
31215: LD_INT 6
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31236: LD_ADDR_VAR 0 32
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 4
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: LD_INT 3
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: LD_INT 5
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 5
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 4
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 6
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 6
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 5
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31379: LD_ADDR_VAR 0 33
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 3
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 4
31431: NEG
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 4
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 5
31465: NEG
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 5
31476: NEG
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 5
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 6
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 6
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31534: LD_ADDR_VAR 0 34
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: LD_INT 3
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: NEG
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: LD_INT 4
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 4
31589: NEG
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 4
31601: NEG
31602: PUSH
31603: LD_INT 4
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 4
31613: NEG
31614: PUSH
31615: LD_INT 5
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 5
31625: NEG
31626: PUSH
31627: LD_INT 4
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 5
31637: NEG
31638: PUSH
31639: LD_INT 5
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 5
31649: NEG
31650: PUSH
31651: LD_INT 6
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 6
31661: NEG
31662: PUSH
31663: LD_INT 5
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 6
31673: NEG
31674: PUSH
31675: LD_INT 6
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31697: LD_ADDR_VAR 0 41
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31741: LD_ADDR_VAR 0 42
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31782: LD_ADDR_VAR 0 43
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31822: LD_ADDR_VAR 0 44
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31863: LD_ADDR_VAR 0 45
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31907: LD_ADDR_VAR 0 46
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31953: LD_ADDR_VAR 0 47
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 3
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 3
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31986: LD_ADDR_VAR 0 48
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32017: LD_ADDR_VAR 0 49
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32046: LD_ADDR_VAR 0 50
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32075: LD_ADDR_VAR 0 51
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32106: LD_ADDR_VAR 0 52
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 3
32125: NEG
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32139: LD_ADDR_VAR 0 53
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: LD_INT 3
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 3
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32183: LD_ADDR_VAR 0 54
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32224: LD_ADDR_VAR 0 55
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32264: LD_ADDR_VAR 0 56
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32305: LD_ADDR_VAR 0 57
32309: PUSH
32310: LD_INT 2
32312: NEG
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 3
32323: NEG
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 3
32334: NEG
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32349: LD_ADDR_VAR 0 58
32353: PUSH
32354: LD_INT 2
32356: NEG
32357: PUSH
32358: LD_INT 3
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 3
32368: NEG
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: LD_INT 3
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32395: LD_ADDR_VAR 0 59
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32439: LD_ADDR_VAR 0 60
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32480: LD_ADDR_VAR 0 61
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32520: LD_ADDR_VAR 0 62
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: LIST
32560: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32561: LD_ADDR_VAR 0 63
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: NEG
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32605: LD_ADDR_VAR 0 64
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 2
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: ST_TO_ADDR
// end ; 2 :
32651: GO 35917
32653: LD_INT 2
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 35916
32661: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32662: LD_ADDR_VAR 0 29
32666: PUSH
32667: LD_INT 4
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 4
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 5
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 5
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 5
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 3
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 4
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 4
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: LD_INT 4
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 4
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: LD_INT 3
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 4
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 5
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 5
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 4
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 5
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 3
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 4
33001: NEG
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 4
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 4
33047: NEG
33048: PUSH
33049: LD_INT 4
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 4
33059: NEG
33060: PUSH
33061: LD_INT 5
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 3
33071: NEG
33072: PUSH
33073: LD_INT 4
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: NEG
33084: PUSH
33085: LD_INT 3
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 4
33095: NEG
33096: PUSH
33097: LD_INT 3
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 5
33107: NEG
33108: PUSH
33109: LD_INT 4
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 5
33119: NEG
33120: PUSH
33121: LD_INT 5
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 3
33131: NEG
33132: PUSH
33133: LD_INT 5
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 5
33143: NEG
33144: PUSH
33145: LD_INT 3
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33200: LD_ADDR_VAR 0 30
33204: PUSH
33205: LD_INT 4
33207: PUSH
33208: LD_INT 4
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 4
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 5
33227: PUSH
33228: LD_INT 4
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 5
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 4
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 4
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 5
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 3
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 4
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 4
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 2
33379: NEG
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 5
33457: NEG
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 5
33469: NEG
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: NEG
33505: PUSH
33506: LD_INT 4
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: LD_INT 3
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: NEG
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 4
33552: NEG
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 4
33564: NEG
33565: PUSH
33566: LD_INT 4
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: LD_INT 4
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 4
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 4
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 5
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 4
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 3
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 4
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 5
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 5
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33747: LD_ADDR_VAR 0 31
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 4
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: LD_INT 4
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: LD_INT 5
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 5
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 2
33836: NEG
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 3
33847: NEG
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 4
33903: NEG
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 4
33914: NEG
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 4
33926: NEG
33927: PUSH
33928: LD_INT 2
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 4
33949: NEG
33950: PUSH
33951: LD_INT 4
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: NEG
33962: PUSH
33963: LD_INT 5
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 3
33973: NEG
33974: PUSH
33975: LD_INT 4
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 3
33985: NEG
33986: PUSH
33987: LD_INT 3
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 4
33997: NEG
33998: PUSH
33999: LD_INT 3
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 5
34009: NEG
34010: PUSH
34011: LD_INT 4
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 5
34021: NEG
34022: PUSH
34023: LD_INT 5
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 3
34033: NEG
34034: PUSH
34035: LD_INT 5
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 5
34045: NEG
34046: PUSH
34047: LD_INT 3
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 3
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 4
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 3
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 2
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: LD_INT 3
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 4
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 2
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: LD_INT 4
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 4
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 4
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 5
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 5
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 4
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 3
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 5
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34297: LD_ADDR_VAR 0 32
34301: PUSH
34302: LD_INT 4
34304: NEG
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 4
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 3
34327: NEG
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 4
34349: NEG
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 5
34360: NEG
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 5
34371: NEG
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 5
34383: NEG
34384: PUSH
34385: LD_INT 2
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 3
34395: NEG
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 3
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 3
34418: NEG
34419: PUSH
34420: LD_INT 4
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: LD_INT 3
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 2
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 3
34454: NEG
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 4
34466: NEG
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 4
34478: NEG
34479: PUSH
34480: LD_INT 4
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 4
34502: NEG
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: LD_INT 4
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 5
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 4
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 3
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 4
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 5
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 3
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: LD_INT 5
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 4
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 4
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: LD_INT 4
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: LD_INT 3
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 5
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: LD_INT 4
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 5
34779: PUSH
34780: LD_INT 3
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: LD_INT 5
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34844: LD_ADDR_VAR 0 33
34848: PUSH
34849: LD_INT 4
34851: NEG
34852: PUSH
34853: LD_INT 4
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 4
34863: NEG
34864: PUSH
34865: LD_INT 5
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: LD_INT 4
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: LD_INT 3
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 4
34899: NEG
34900: PUSH
34901: LD_INT 3
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 5
34911: NEG
34912: PUSH
34913: LD_INT 4
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 5
34923: NEG
34924: PUSH
34925: LD_INT 5
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 3
34935: NEG
34936: PUSH
34937: LD_INT 5
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 5
34947: NEG
34948: PUSH
34949: LD_INT 3
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 3
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 4
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 3
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 3
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 4
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: LD_INT 4
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 4
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 4
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 5
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 4
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 3
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 5
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 4
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 4
35184: PUSH
35185: LD_INT 4
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 3
35194: PUSH
35195: LD_INT 4
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: LD_INT 3
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 4
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 4
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 4
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 3
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 4
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: LD_INT 5
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 5
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: LD_INT 4
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 5
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: LD_INT 3
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35382: LD_ADDR_VAR 0 34
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 4
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 5
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 4
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 3
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 3
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 4
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 5
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 3
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: LD_INT 5
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 3
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 3
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 4
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 4
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 4
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 4
35584: PUSH
35585: LD_INT 4
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 4
35594: PUSH
35595: LD_INT 3
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 5
35604: PUSH
35605: LD_INT 4
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 5
35614: PUSH
35615: LD_INT 5
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: LD_INT 5
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: LD_INT 4
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 5
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: LD_INT 5
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 4
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 4
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 3
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: LD_INT 4
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 4
35767: NEG
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 4
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 3
35790: NEG
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 3
35801: NEG
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 4
35812: NEG
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 5
35823: NEG
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 5
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 5
35846: NEG
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 3
35858: NEG
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
// end ; end ;
35914: GO 35917
35916: POP
// case btype of b_depot , b_warehouse :
35917: LD_VAR 0 1
35921: PUSH
35922: LD_INT 0
35924: DOUBLE
35925: EQUAL
35926: IFTRUE 35936
35928: LD_INT 1
35930: DOUBLE
35931: EQUAL
35932: IFTRUE 35936
35934: GO 36137
35936: POP
// case nation of nation_american :
35937: LD_VAR 0 5
35941: PUSH
35942: LD_INT 1
35944: DOUBLE
35945: EQUAL
35946: IFTRUE 35950
35948: GO 36006
35950: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35951: LD_ADDR_VAR 0 9
35955: PUSH
35956: LD_VAR 0 11
35960: PUSH
35961: LD_VAR 0 12
35965: PUSH
35966: LD_VAR 0 13
35970: PUSH
35971: LD_VAR 0 14
35975: PUSH
35976: LD_VAR 0 15
35980: PUSH
35981: LD_VAR 0 16
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: PUSH
35994: LD_VAR 0 4
35998: PUSH
35999: LD_INT 1
36001: PLUS
36002: ARRAY
36003: ST_TO_ADDR
36004: GO 36135
36006: LD_INT 2
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36014
36012: GO 36070
36014: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36015: LD_ADDR_VAR 0 9
36019: PUSH
36020: LD_VAR 0 17
36024: PUSH
36025: LD_VAR 0 18
36029: PUSH
36030: LD_VAR 0 19
36034: PUSH
36035: LD_VAR 0 20
36039: PUSH
36040: LD_VAR 0 21
36044: PUSH
36045: LD_VAR 0 22
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: PUSH
36058: LD_VAR 0 4
36062: PUSH
36063: LD_INT 1
36065: PLUS
36066: ARRAY
36067: ST_TO_ADDR
36068: GO 36135
36070: LD_INT 3
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36134
36078: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36079: LD_ADDR_VAR 0 9
36083: PUSH
36084: LD_VAR 0 23
36088: PUSH
36089: LD_VAR 0 24
36093: PUSH
36094: LD_VAR 0 25
36098: PUSH
36099: LD_VAR 0 26
36103: PUSH
36104: LD_VAR 0 27
36108: PUSH
36109: LD_VAR 0 28
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: PUSH
36122: LD_VAR 0 4
36126: PUSH
36127: LD_INT 1
36129: PLUS
36130: ARRAY
36131: ST_TO_ADDR
36132: GO 36135
36134: POP
36135: GO 36690
36137: LD_INT 2
36139: DOUBLE
36140: EQUAL
36141: IFTRUE 36151
36143: LD_INT 3
36145: DOUBLE
36146: EQUAL
36147: IFTRUE 36151
36149: GO 36207
36151: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36152: LD_ADDR_VAR 0 9
36156: PUSH
36157: LD_VAR 0 29
36161: PUSH
36162: LD_VAR 0 30
36166: PUSH
36167: LD_VAR 0 31
36171: PUSH
36172: LD_VAR 0 32
36176: PUSH
36177: LD_VAR 0 33
36181: PUSH
36182: LD_VAR 0 34
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: PUSH
36195: LD_VAR 0 4
36199: PUSH
36200: LD_INT 1
36202: PLUS
36203: ARRAY
36204: ST_TO_ADDR
36205: GO 36690
36207: LD_INT 16
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36269
36213: LD_INT 17
36215: DOUBLE
36216: EQUAL
36217: IFTRUE 36269
36219: LD_INT 18
36221: DOUBLE
36222: EQUAL
36223: IFTRUE 36269
36225: LD_INT 19
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36269
36231: LD_INT 22
36233: DOUBLE
36234: EQUAL
36235: IFTRUE 36269
36237: LD_INT 20
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36269
36243: LD_INT 21
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36269
36249: LD_INT 23
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36269
36255: LD_INT 24
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36269
36261: LD_INT 25
36263: DOUBLE
36264: EQUAL
36265: IFTRUE 36269
36267: GO 36325
36269: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36270: LD_ADDR_VAR 0 9
36274: PUSH
36275: LD_VAR 0 35
36279: PUSH
36280: LD_VAR 0 36
36284: PUSH
36285: LD_VAR 0 37
36289: PUSH
36290: LD_VAR 0 38
36294: PUSH
36295: LD_VAR 0 39
36299: PUSH
36300: LD_VAR 0 40
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: PUSH
36313: LD_VAR 0 4
36317: PUSH
36318: LD_INT 1
36320: PLUS
36321: ARRAY
36322: ST_TO_ADDR
36323: GO 36690
36325: LD_INT 6
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36381
36331: LD_INT 7
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36381
36337: LD_INT 8
36339: DOUBLE
36340: EQUAL
36341: IFTRUE 36381
36343: LD_INT 13
36345: DOUBLE
36346: EQUAL
36347: IFTRUE 36381
36349: LD_INT 12
36351: DOUBLE
36352: EQUAL
36353: IFTRUE 36381
36355: LD_INT 15
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36381
36361: LD_INT 11
36363: DOUBLE
36364: EQUAL
36365: IFTRUE 36381
36367: LD_INT 14
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36381
36373: LD_INT 10
36375: DOUBLE
36376: EQUAL
36377: IFTRUE 36381
36379: GO 36437
36381: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36382: LD_ADDR_VAR 0 9
36386: PUSH
36387: LD_VAR 0 41
36391: PUSH
36392: LD_VAR 0 42
36396: PUSH
36397: LD_VAR 0 43
36401: PUSH
36402: LD_VAR 0 44
36406: PUSH
36407: LD_VAR 0 45
36411: PUSH
36412: LD_VAR 0 46
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: PUSH
36425: LD_VAR 0 4
36429: PUSH
36430: LD_INT 1
36432: PLUS
36433: ARRAY
36434: ST_TO_ADDR
36435: GO 36690
36437: LD_INT 36
36439: DOUBLE
36440: EQUAL
36441: IFTRUE 36445
36443: GO 36501
36445: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36446: LD_ADDR_VAR 0 9
36450: PUSH
36451: LD_VAR 0 47
36455: PUSH
36456: LD_VAR 0 48
36460: PUSH
36461: LD_VAR 0 49
36465: PUSH
36466: LD_VAR 0 50
36470: PUSH
36471: LD_VAR 0 51
36475: PUSH
36476: LD_VAR 0 52
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: PUSH
36489: LD_VAR 0 4
36493: PUSH
36494: LD_INT 1
36496: PLUS
36497: ARRAY
36498: ST_TO_ADDR
36499: GO 36690
36501: LD_INT 4
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36527
36507: LD_INT 5
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36527
36513: LD_INT 34
36515: DOUBLE
36516: EQUAL
36517: IFTRUE 36527
36519: LD_INT 37
36521: DOUBLE
36522: EQUAL
36523: IFTRUE 36527
36525: GO 36583
36527: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: LD_VAR 0 53
36537: PUSH
36538: LD_VAR 0 54
36542: PUSH
36543: LD_VAR 0 55
36547: PUSH
36548: LD_VAR 0 56
36552: PUSH
36553: LD_VAR 0 57
36557: PUSH
36558: LD_VAR 0 58
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: PUSH
36571: LD_VAR 0 4
36575: PUSH
36576: LD_INT 1
36578: PLUS
36579: ARRAY
36580: ST_TO_ADDR
36581: GO 36690
36583: LD_INT 31
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36633
36589: LD_INT 32
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36633
36595: LD_INT 33
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36633
36601: LD_INT 27
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36633
36607: LD_INT 26
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36633
36613: LD_INT 28
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36633
36619: LD_INT 29
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36633
36625: LD_INT 30
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36633
36631: GO 36689
36633: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36634: LD_ADDR_VAR 0 9
36638: PUSH
36639: LD_VAR 0 59
36643: PUSH
36644: LD_VAR 0 60
36648: PUSH
36649: LD_VAR 0 61
36653: PUSH
36654: LD_VAR 0 62
36658: PUSH
36659: LD_VAR 0 63
36663: PUSH
36664: LD_VAR 0 64
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: PUSH
36677: LD_VAR 0 4
36681: PUSH
36682: LD_INT 1
36684: PLUS
36685: ARRAY
36686: ST_TO_ADDR
36687: GO 36690
36689: POP
// temp_list2 = [ ] ;
36690: LD_ADDR_VAR 0 10
36694: PUSH
36695: EMPTY
36696: ST_TO_ADDR
// for i in temp_list do
36697: LD_ADDR_VAR 0 8
36701: PUSH
36702: LD_VAR 0 9
36706: PUSH
36707: FOR_IN
36708: IFFALSE 36760
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36710: LD_ADDR_VAR 0 10
36714: PUSH
36715: LD_VAR 0 10
36719: PUSH
36720: LD_VAR 0 8
36724: PUSH
36725: LD_INT 1
36727: ARRAY
36728: PUSH
36729: LD_VAR 0 2
36733: PLUS
36734: PUSH
36735: LD_VAR 0 8
36739: PUSH
36740: LD_INT 2
36742: ARRAY
36743: PUSH
36744: LD_VAR 0 3
36748: PLUS
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: EMPTY
36755: LIST
36756: ADD
36757: ST_TO_ADDR
36758: GO 36707
36760: POP
36761: POP
// result = temp_list2 ;
36762: LD_ADDR_VAR 0 7
36766: PUSH
36767: LD_VAR 0 10
36771: ST_TO_ADDR
// end ;
36772: LD_VAR 0 7
36776: RET
// export function EnemyInRange ( unit , dist ) ; begin
36777: LD_INT 0
36779: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36780: LD_ADDR_VAR 0 3
36784: PUSH
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 255
36794: PPUSH
36795: LD_VAR 0 1
36799: PPUSH
36800: CALL_OW 250
36804: PPUSH
36805: LD_VAR 0 1
36809: PPUSH
36810: CALL_OW 251
36814: PPUSH
36815: LD_VAR 0 2
36819: PPUSH
36820: CALL 10034 0 4
36824: PUSH
36825: LD_INT 4
36827: ARRAY
36828: ST_TO_ADDR
// end ;
36829: LD_VAR 0 3
36833: RET
// export function PlayerSeeMe ( unit ) ; begin
36834: LD_INT 0
36836: PPUSH
// result := See ( your_side , unit ) ;
36837: LD_ADDR_VAR 0 2
36841: PUSH
36842: LD_OWVAR 2
36846: PPUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 292
36856: ST_TO_ADDR
// end ;
36857: LD_VAR 0 2
36861: RET
// export function ReverseDir ( unit ) ; begin
36862: LD_INT 0
36864: PPUSH
// if not unit then
36865: LD_VAR 0 1
36869: NOT
36870: IFFALSE 36874
// exit ;
36872: GO 36897
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36874: LD_ADDR_VAR 0 2
36878: PUSH
36879: LD_VAR 0 1
36883: PPUSH
36884: CALL_OW 254
36888: PUSH
36889: LD_INT 3
36891: PLUS
36892: PUSH
36893: LD_INT 6
36895: MOD
36896: ST_TO_ADDR
// end ;
36897: LD_VAR 0 2
36901: RET
// export function ReverseArray ( array ) ; var i ; begin
36902: LD_INT 0
36904: PPUSH
36905: PPUSH
// if not array then
36906: LD_VAR 0 1
36910: NOT
36911: IFFALSE 36915
// exit ;
36913: GO 36970
// result := [ ] ;
36915: LD_ADDR_VAR 0 2
36919: PUSH
36920: EMPTY
36921: ST_TO_ADDR
// for i := array downto 1 do
36922: LD_ADDR_VAR 0 3
36926: PUSH
36927: DOUBLE
36928: LD_VAR 0 1
36932: INC
36933: ST_TO_ADDR
36934: LD_INT 1
36936: PUSH
36937: FOR_DOWNTO
36938: IFFALSE 36968
// result := Join ( result , array [ i ] ) ;
36940: LD_ADDR_VAR 0 2
36944: PUSH
36945: LD_VAR 0 2
36949: PPUSH
36950: LD_VAR 0 1
36954: PUSH
36955: LD_VAR 0 3
36959: ARRAY
36960: PPUSH
36961: CALL 41812 0 2
36965: ST_TO_ADDR
36966: GO 36937
36968: POP
36969: POP
// end ;
36970: LD_VAR 0 2
36974: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36975: LD_INT 0
36977: PPUSH
36978: PPUSH
36979: PPUSH
36980: PPUSH
36981: PPUSH
36982: PPUSH
// if not unit or not hexes then
36983: LD_VAR 0 1
36987: NOT
36988: IFTRUE 36997
36990: PUSH
36991: LD_VAR 0 2
36995: NOT
36996: OR
36997: IFFALSE 37001
// exit ;
36999: GO 37124
// dist := 9999 ;
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: LD_INT 9999
37008: ST_TO_ADDR
// for i = 1 to hexes do
37009: LD_ADDR_VAR 0 4
37013: PUSH
37014: DOUBLE
37015: LD_INT 1
37017: DEC
37018: ST_TO_ADDR
37019: LD_VAR 0 2
37023: PUSH
37024: FOR_TO
37025: IFFALSE 37112
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37027: LD_ADDR_VAR 0 6
37031: PUSH
37032: LD_VAR 0 1
37036: PPUSH
37037: LD_VAR 0 2
37041: PUSH
37042: LD_VAR 0 4
37046: ARRAY
37047: PUSH
37048: LD_INT 1
37050: ARRAY
37051: PPUSH
37052: LD_VAR 0 2
37056: PUSH
37057: LD_VAR 0 4
37061: ARRAY
37062: PUSH
37063: LD_INT 2
37065: ARRAY
37066: PPUSH
37067: CALL_OW 297
37071: ST_TO_ADDR
// if tdist < dist then
37072: LD_VAR 0 6
37076: PUSH
37077: LD_VAR 0 5
37081: LESS
37082: IFFALSE 37110
// begin hex := hexes [ i ] ;
37084: LD_ADDR_VAR 0 8
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 4
37098: ARRAY
37099: ST_TO_ADDR
// dist := tdist ;
37100: LD_ADDR_VAR 0 5
37104: PUSH
37105: LD_VAR 0 6
37109: ST_TO_ADDR
// end ; end ;
37110: GO 37024
37112: POP
37113: POP
// result := hex ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_VAR 0 8
37123: ST_TO_ADDR
// end ;
37124: LD_VAR 0 3
37128: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37129: LD_INT 0
37131: PPUSH
37132: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37133: LD_VAR 0 1
37137: NOT
37138: IFTRUE 37177
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: LD_INT 21
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 23
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PPUSH
37170: CALL_OW 69
37174: IN
37175: NOT
37176: OR
37177: IFFALSE 37181
// exit ;
37179: GO 37228
// for i = 1 to 3 do
37181: LD_ADDR_VAR 0 3
37185: PUSH
37186: DOUBLE
37187: LD_INT 1
37189: DEC
37190: ST_TO_ADDR
37191: LD_INT 3
37193: PUSH
37194: FOR_TO
37195: IFFALSE 37226
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL_OW 250
37206: PPUSH
37207: LD_VAR 0 1
37211: PPUSH
37212: CALL_OW 251
37216: PPUSH
37217: LD_INT 1
37219: PPUSH
37220: CALL_OW 453
37224: GO 37194
37226: POP
37227: POP
// end ;
37228: LD_VAR 0 2
37232: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37233: LD_INT 0
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
// if not unit or not enemy_unit then
37241: LD_VAR 0 1
37245: NOT
37246: IFTRUE 37255
37248: PUSH
37249: LD_VAR 0 2
37253: NOT
37254: OR
37255: IFFALSE 37259
// exit ;
37257: GO 37730
// if GetLives ( i ) < 250 then
37259: LD_VAR 0 4
37263: PPUSH
37264: CALL_OW 256
37268: PUSH
37269: LD_INT 250
37271: LESS
37272: IFFALSE 37285
// begin ComAutodestruct ( i ) ;
37274: LD_VAR 0 4
37278: PPUSH
37279: CALL 37129 0 1
// exit ;
37283: GO 37730
// end ; x := GetX ( enemy_unit ) ;
37285: LD_ADDR_VAR 0 7
37289: PUSH
37290: LD_VAR 0 2
37294: PPUSH
37295: CALL_OW 250
37299: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37300: LD_ADDR_VAR 0 8
37304: PUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: CALL_OW 251
37314: ST_TO_ADDR
// if not x or not y then
37315: LD_VAR 0 7
37319: NOT
37320: IFTRUE 37329
37322: PUSH
37323: LD_VAR 0 8
37327: NOT
37328: OR
37329: IFFALSE 37333
// exit ;
37331: GO 37730
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37333: LD_ADDR_VAR 0 6
37337: PUSH
37338: LD_VAR 0 7
37342: PPUSH
37343: LD_INT 0
37345: PPUSH
37346: LD_INT 4
37348: PPUSH
37349: CALL_OW 272
37353: PUSH
37354: LD_VAR 0 8
37358: PPUSH
37359: LD_INT 0
37361: PPUSH
37362: LD_INT 4
37364: PPUSH
37365: CALL_OW 273
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_VAR 0 7
37378: PPUSH
37379: LD_INT 1
37381: PPUSH
37382: LD_INT 4
37384: PPUSH
37385: CALL_OW 272
37389: PUSH
37390: LD_VAR 0 8
37394: PPUSH
37395: LD_INT 1
37397: PPUSH
37398: LD_INT 4
37400: PPUSH
37401: CALL_OW 273
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_VAR 0 7
37414: PPUSH
37415: LD_INT 2
37417: PPUSH
37418: LD_INT 4
37420: PPUSH
37421: CALL_OW 272
37425: PUSH
37426: LD_VAR 0 8
37430: PPUSH
37431: LD_INT 2
37433: PPUSH
37434: LD_INT 4
37436: PPUSH
37437: CALL_OW 273
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_VAR 0 7
37450: PPUSH
37451: LD_INT 3
37453: PPUSH
37454: LD_INT 4
37456: PPUSH
37457: CALL_OW 272
37461: PUSH
37462: LD_VAR 0 8
37466: PPUSH
37467: LD_INT 3
37469: PPUSH
37470: LD_INT 4
37472: PPUSH
37473: CALL_OW 273
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_VAR 0 7
37486: PPUSH
37487: LD_INT 4
37489: PPUSH
37490: LD_INT 4
37492: PPUSH
37493: CALL_OW 272
37497: PUSH
37498: LD_VAR 0 8
37502: PPUSH
37503: LD_INT 4
37505: PPUSH
37506: LD_INT 4
37508: PPUSH
37509: CALL_OW 273
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_VAR 0 7
37522: PPUSH
37523: LD_INT 5
37525: PPUSH
37526: LD_INT 4
37528: PPUSH
37529: CALL_OW 272
37533: PUSH
37534: LD_VAR 0 8
37538: PPUSH
37539: LD_INT 5
37541: PPUSH
37542: LD_INT 4
37544: PPUSH
37545: CALL_OW 273
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// for i = tmp downto 1 do
37562: LD_ADDR_VAR 0 4
37566: PUSH
37567: DOUBLE
37568: LD_VAR 0 6
37572: INC
37573: ST_TO_ADDR
37574: LD_INT 1
37576: PUSH
37577: FOR_DOWNTO
37578: IFFALSE 37681
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37580: LD_VAR 0 6
37584: PUSH
37585: LD_VAR 0 4
37589: ARRAY
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: PPUSH
37595: LD_VAR 0 6
37599: PUSH
37600: LD_VAR 0 4
37604: ARRAY
37605: PUSH
37606: LD_INT 2
37608: ARRAY
37609: PPUSH
37610: CALL_OW 488
37614: NOT
37615: IFTRUE 37657
37617: PUSH
37618: LD_VAR 0 6
37622: PUSH
37623: LD_VAR 0 4
37627: ARRAY
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: PPUSH
37633: LD_VAR 0 6
37637: PUSH
37638: LD_VAR 0 4
37642: ARRAY
37643: PUSH
37644: LD_INT 2
37646: ARRAY
37647: PPUSH
37648: CALL_OW 428
37652: PUSH
37653: LD_INT 0
37655: NONEQUAL
37656: OR
37657: IFFALSE 37679
// tmp := Delete ( tmp , i ) ;
37659: LD_ADDR_VAR 0 6
37663: PUSH
37664: LD_VAR 0 6
37668: PPUSH
37669: LD_VAR 0 4
37673: PPUSH
37674: CALL_OW 3
37678: ST_TO_ADDR
37679: GO 37577
37681: POP
37682: POP
// j := GetClosestHex ( unit , tmp ) ;
37683: LD_ADDR_VAR 0 5
37687: PUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: LD_VAR 0 6
37697: PPUSH
37698: CALL 36975 0 2
37702: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37703: LD_VAR 0 1
37707: PPUSH
37708: LD_VAR 0 5
37712: PUSH
37713: LD_INT 1
37715: ARRAY
37716: PPUSH
37717: LD_VAR 0 5
37721: PUSH
37722: LD_INT 2
37724: ARRAY
37725: PPUSH
37726: CALL_OW 111
// end ;
37730: LD_VAR 0 3
37734: RET
// export function PrepareApemanSoldier ( ) ; begin
37735: LD_INT 0
37737: PPUSH
// uc_nation := 0 ;
37738: LD_ADDR_OWVAR 21
37742: PUSH
37743: LD_INT 0
37745: ST_TO_ADDR
// hc_sex := sex_male ;
37746: LD_ADDR_OWVAR 27
37750: PUSH
37751: LD_INT 1
37753: ST_TO_ADDR
// hc_name :=  ;
37754: LD_ADDR_OWVAR 26
37758: PUSH
37759: LD_STRING 
37761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37762: LD_ADDR_OWVAR 28
37766: PUSH
37767: LD_INT 15
37769: ST_TO_ADDR
// hc_gallery :=  ;
37770: LD_ADDR_OWVAR 33
37774: PUSH
37775: LD_STRING 
37777: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37778: LD_ADDR_OWVAR 31
37782: PUSH
37783: LD_INT 0
37785: PPUSH
37786: LD_INT 3
37788: PPUSH
37789: CALL_OW 12
37793: PUSH
37794: LD_INT 0
37796: PPUSH
37797: LD_INT 3
37799: PPUSH
37800: CALL_OW 12
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37817: LD_ADDR_OWVAR 29
37821: PUSH
37822: LD_INT 12
37824: PUSH
37825: LD_INT 12
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// end ;
37832: LD_VAR 0 1
37836: RET
// export function PrepareApemanEngineer ( ) ; begin
37837: LD_INT 0
37839: PPUSH
// uc_nation := 0 ;
37840: LD_ADDR_OWVAR 21
37844: PUSH
37845: LD_INT 0
37847: ST_TO_ADDR
// hc_sex := sex_male ;
37848: LD_ADDR_OWVAR 27
37852: PUSH
37853: LD_INT 1
37855: ST_TO_ADDR
// hc_name :=  ;
37856: LD_ADDR_OWVAR 26
37860: PUSH
37861: LD_STRING 
37863: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37864: LD_ADDR_OWVAR 28
37868: PUSH
37869: LD_INT 16
37871: ST_TO_ADDR
// hc_gallery :=  ;
37872: LD_ADDR_OWVAR 33
37876: PUSH
37877: LD_STRING 
37879: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37880: LD_ADDR_OWVAR 31
37884: PUSH
37885: LD_INT 0
37887: PPUSH
37888: LD_INT 3
37890: PPUSH
37891: CALL_OW 12
37895: PUSH
37896: LD_INT 0
37898: PPUSH
37899: LD_INT 3
37901: PPUSH
37902: CALL_OW 12
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37919: LD_ADDR_OWVAR 29
37923: PUSH
37924: LD_INT 12
37926: PUSH
37927: LD_INT 12
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: ST_TO_ADDR
// end ;
37934: LD_VAR 0 1
37938: RET
// export function PrepareApeman ( agressivity ) ; begin
37939: LD_INT 0
37941: PPUSH
// uc_side := 0 ;
37942: LD_ADDR_OWVAR 20
37946: PUSH
37947: LD_INT 0
37949: ST_TO_ADDR
// uc_nation := 0 ;
37950: LD_ADDR_OWVAR 21
37954: PUSH
37955: LD_INT 0
37957: ST_TO_ADDR
// hc_sex := sex_male ;
37958: LD_ADDR_OWVAR 27
37962: PUSH
37963: LD_INT 1
37965: ST_TO_ADDR
// hc_class := class_apeman ;
37966: LD_ADDR_OWVAR 28
37970: PUSH
37971: LD_INT 12
37973: ST_TO_ADDR
// hc_gallery :=  ;
37974: LD_ADDR_OWVAR 33
37978: PUSH
37979: LD_STRING 
37981: ST_TO_ADDR
// hc_name :=  ;
37982: LD_ADDR_OWVAR 26
37986: PUSH
37987: LD_STRING 
37989: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37990: LD_ADDR_OWVAR 29
37994: PUSH
37995: LD_INT 12
37997: PUSH
37998: LD_INT 12
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: ST_TO_ADDR
// if agressivity = 0 then
38005: LD_VAR 0 1
38009: PUSH
38010: LD_INT 0
38012: EQUAL
38013: IFFALSE 38025
// hc_agressivity := 0 else
38015: LD_ADDR_OWVAR 35
38019: PUSH
38020: LD_INT 0
38022: ST_TO_ADDR
38023: GO 38046
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38025: LD_ADDR_OWVAR 35
38029: PUSH
38030: LD_VAR 0 1
38034: NEG
38035: PPUSH
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL_OW 12
38045: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38046: LD_ADDR_OWVAR 31
38050: PUSH
38051: LD_INT 0
38053: PPUSH
38054: LD_INT 3
38056: PPUSH
38057: CALL_OW 12
38061: PUSH
38062: LD_INT 0
38064: PPUSH
38065: LD_INT 3
38067: PPUSH
38068: CALL_OW 12
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// end ;
38085: LD_VAR 0 2
38089: RET
// export function PrepareTiger ( agressivity ) ; begin
38090: LD_INT 0
38092: PPUSH
// uc_side := 0 ;
38093: LD_ADDR_OWVAR 20
38097: PUSH
38098: LD_INT 0
38100: ST_TO_ADDR
// uc_nation := 0 ;
38101: LD_ADDR_OWVAR 21
38105: PUSH
38106: LD_INT 0
38108: ST_TO_ADDR
// InitHc ;
38109: CALL_OW 19
// hc_class := class_tiger ;
38113: LD_ADDR_OWVAR 28
38117: PUSH
38118: LD_INT 14
38120: ST_TO_ADDR
// hc_gallery :=  ;
38121: LD_ADDR_OWVAR 33
38125: PUSH
38126: LD_STRING 
38128: ST_TO_ADDR
// hc_name :=  ;
38129: LD_ADDR_OWVAR 26
38133: PUSH
38134: LD_STRING 
38136: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38137: LD_ADDR_OWVAR 35
38141: PUSH
38142: LD_VAR 0 1
38146: NEG
38147: PPUSH
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 12
38157: ST_TO_ADDR
// end ;
38158: LD_VAR 0 2
38162: RET
// export function PrepareEnchidna ( ) ; begin
38163: LD_INT 0
38165: PPUSH
// uc_side := 0 ;
38166: LD_ADDR_OWVAR 20
38170: PUSH
38171: LD_INT 0
38173: ST_TO_ADDR
// uc_nation := 0 ;
38174: LD_ADDR_OWVAR 21
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// InitHc ;
38182: CALL_OW 19
// hc_class := class_baggie ;
38186: LD_ADDR_OWVAR 28
38190: PUSH
38191: LD_INT 13
38193: ST_TO_ADDR
// hc_gallery :=  ;
38194: LD_ADDR_OWVAR 33
38198: PUSH
38199: LD_STRING 
38201: ST_TO_ADDR
// hc_name :=  ;
38202: LD_ADDR_OWVAR 26
38206: PUSH
38207: LD_STRING 
38209: ST_TO_ADDR
// end ;
38210: LD_VAR 0 1
38214: RET
// export function PrepareFrog ( ) ; begin
38215: LD_INT 0
38217: PPUSH
// uc_side := 0 ;
38218: LD_ADDR_OWVAR 20
38222: PUSH
38223: LD_INT 0
38225: ST_TO_ADDR
// uc_nation := 0 ;
38226: LD_ADDR_OWVAR 21
38230: PUSH
38231: LD_INT 0
38233: ST_TO_ADDR
// InitHc ;
38234: CALL_OW 19
// hc_class := class_frog ;
38238: LD_ADDR_OWVAR 28
38242: PUSH
38243: LD_INT 19
38245: ST_TO_ADDR
// hc_gallery :=  ;
38246: LD_ADDR_OWVAR 33
38250: PUSH
38251: LD_STRING 
38253: ST_TO_ADDR
// hc_name :=  ;
38254: LD_ADDR_OWVAR 26
38258: PUSH
38259: LD_STRING 
38261: ST_TO_ADDR
// end ;
38262: LD_VAR 0 1
38266: RET
// export function PrepareFish ( ) ; begin
38267: LD_INT 0
38269: PPUSH
// uc_side := 0 ;
38270: LD_ADDR_OWVAR 20
38274: PUSH
38275: LD_INT 0
38277: ST_TO_ADDR
// uc_nation := 0 ;
38278: LD_ADDR_OWVAR 21
38282: PUSH
38283: LD_INT 0
38285: ST_TO_ADDR
// InitHc ;
38286: CALL_OW 19
// hc_class := class_fish ;
38290: LD_ADDR_OWVAR 28
38294: PUSH
38295: LD_INT 20
38297: ST_TO_ADDR
// hc_gallery :=  ;
38298: LD_ADDR_OWVAR 33
38302: PUSH
38303: LD_STRING 
38305: ST_TO_ADDR
// hc_name :=  ;
38306: LD_ADDR_OWVAR 26
38310: PUSH
38311: LD_STRING 
38313: ST_TO_ADDR
// end ;
38314: LD_VAR 0 1
38318: RET
// export function PrepareBird ( ) ; begin
38319: LD_INT 0
38321: PPUSH
// uc_side := 0 ;
38322: LD_ADDR_OWVAR 20
38326: PUSH
38327: LD_INT 0
38329: ST_TO_ADDR
// uc_nation := 0 ;
38330: LD_ADDR_OWVAR 21
38334: PUSH
38335: LD_INT 0
38337: ST_TO_ADDR
// InitHc ;
38338: CALL_OW 19
// hc_class := class_phororhacos ;
38342: LD_ADDR_OWVAR 28
38346: PUSH
38347: LD_INT 18
38349: ST_TO_ADDR
// hc_gallery :=  ;
38350: LD_ADDR_OWVAR 33
38354: PUSH
38355: LD_STRING 
38357: ST_TO_ADDR
// hc_name :=  ;
38358: LD_ADDR_OWVAR 26
38362: PUSH
38363: LD_STRING 
38365: ST_TO_ADDR
// end ;
38366: LD_VAR 0 1
38370: RET
// export function PrepareHorse ( ) ; begin
38371: LD_INT 0
38373: PPUSH
// uc_side := 0 ;
38374: LD_ADDR_OWVAR 20
38378: PUSH
38379: LD_INT 0
38381: ST_TO_ADDR
// uc_nation := 0 ;
38382: LD_ADDR_OWVAR 21
38386: PUSH
38387: LD_INT 0
38389: ST_TO_ADDR
// InitHc ;
38390: CALL_OW 19
// hc_class := class_horse ;
38394: LD_ADDR_OWVAR 28
38398: PUSH
38399: LD_INT 21
38401: ST_TO_ADDR
// hc_gallery :=  ;
38402: LD_ADDR_OWVAR 33
38406: PUSH
38407: LD_STRING 
38409: ST_TO_ADDR
// hc_name :=  ;
38410: LD_ADDR_OWVAR 26
38414: PUSH
38415: LD_STRING 
38417: ST_TO_ADDR
// end ;
38418: LD_VAR 0 1
38422: RET
// export function PrepareMastodont ( ) ; begin
38423: LD_INT 0
38425: PPUSH
// uc_side := 0 ;
38426: LD_ADDR_OWVAR 20
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// uc_nation := 0 ;
38434: LD_ADDR_OWVAR 21
38438: PUSH
38439: LD_INT 0
38441: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38442: LD_ADDR_OWVAR 37
38446: PUSH
38447: LD_INT 31
38449: ST_TO_ADDR
// vc_control := control_rider ;
38450: LD_ADDR_OWVAR 38
38454: PUSH
38455: LD_INT 4
38457: ST_TO_ADDR
// end ;
38458: LD_VAR 0 1
38462: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38463: LD_INT 0
38465: PPUSH
38466: PPUSH
38467: PPUSH
// uc_side = 0 ;
38468: LD_ADDR_OWVAR 20
38472: PUSH
38473: LD_INT 0
38475: ST_TO_ADDR
// uc_nation = 0 ;
38476: LD_ADDR_OWVAR 21
38480: PUSH
38481: LD_INT 0
38483: ST_TO_ADDR
// InitHc_All ( ) ;
38484: CALL_OW 584
// InitVc ;
38488: CALL_OW 20
// if mastodonts then
38492: LD_VAR 0 6
38496: IFFALSE 38563
// for i = 1 to mastodonts do
38498: LD_ADDR_VAR 0 11
38502: PUSH
38503: DOUBLE
38504: LD_INT 1
38506: DEC
38507: ST_TO_ADDR
38508: LD_VAR 0 6
38512: PUSH
38513: FOR_TO
38514: IFFALSE 38561
// begin vc_chassis := 31 ;
38516: LD_ADDR_OWVAR 37
38520: PUSH
38521: LD_INT 31
38523: ST_TO_ADDR
// vc_control := control_rider ;
38524: LD_ADDR_OWVAR 38
38528: PUSH
38529: LD_INT 4
38531: ST_TO_ADDR
// animal := CreateVehicle ;
38532: LD_ADDR_VAR 0 12
38536: PUSH
38537: CALL_OW 45
38541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38542: LD_VAR 0 12
38546: PPUSH
38547: LD_VAR 0 8
38551: PPUSH
38552: LD_INT 0
38554: PPUSH
38555: CALL 40705 0 3
// end ;
38559: GO 38513
38561: POP
38562: POP
// if horses then
38563: LD_VAR 0 5
38567: IFFALSE 38634
// for i = 1 to horses do
38569: LD_ADDR_VAR 0 11
38573: PUSH
38574: DOUBLE
38575: LD_INT 1
38577: DEC
38578: ST_TO_ADDR
38579: LD_VAR 0 5
38583: PUSH
38584: FOR_TO
38585: IFFALSE 38632
// begin hc_class := 21 ;
38587: LD_ADDR_OWVAR 28
38591: PUSH
38592: LD_INT 21
38594: ST_TO_ADDR
// hc_gallery :=  ;
38595: LD_ADDR_OWVAR 33
38599: PUSH
38600: LD_STRING 
38602: ST_TO_ADDR
// animal := CreateHuman ;
38603: LD_ADDR_VAR 0 12
38607: PUSH
38608: CALL_OW 44
38612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38613: LD_VAR 0 12
38617: PPUSH
38618: LD_VAR 0 8
38622: PPUSH
38623: LD_INT 0
38625: PPUSH
38626: CALL 40705 0 3
// end ;
38630: GO 38584
38632: POP
38633: POP
// if birds then
38634: LD_VAR 0 1
38638: IFFALSE 38705
// for i = 1 to birds do
38640: LD_ADDR_VAR 0 11
38644: PUSH
38645: DOUBLE
38646: LD_INT 1
38648: DEC
38649: ST_TO_ADDR
38650: LD_VAR 0 1
38654: PUSH
38655: FOR_TO
38656: IFFALSE 38703
// begin hc_class := 18 ;
38658: LD_ADDR_OWVAR 28
38662: PUSH
38663: LD_INT 18
38665: ST_TO_ADDR
// hc_gallery =  ;
38666: LD_ADDR_OWVAR 33
38670: PUSH
38671: LD_STRING 
38673: ST_TO_ADDR
// animal := CreateHuman ;
38674: LD_ADDR_VAR 0 12
38678: PUSH
38679: CALL_OW 44
38683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38684: LD_VAR 0 12
38688: PPUSH
38689: LD_VAR 0 8
38693: PPUSH
38694: LD_INT 0
38696: PPUSH
38697: CALL 40705 0 3
// end ;
38701: GO 38655
38703: POP
38704: POP
// if tigers then
38705: LD_VAR 0 2
38709: IFFALSE 38793
// for i = 1 to tigers do
38711: LD_ADDR_VAR 0 11
38715: PUSH
38716: DOUBLE
38717: LD_INT 1
38719: DEC
38720: ST_TO_ADDR
38721: LD_VAR 0 2
38725: PUSH
38726: FOR_TO
38727: IFFALSE 38791
// begin hc_class = class_tiger ;
38729: LD_ADDR_OWVAR 28
38733: PUSH
38734: LD_INT 14
38736: ST_TO_ADDR
// hc_gallery =  ;
38737: LD_ADDR_OWVAR 33
38741: PUSH
38742: LD_STRING 
38744: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38745: LD_ADDR_OWVAR 35
38749: PUSH
38750: LD_INT 7
38752: NEG
38753: PPUSH
38754: LD_INT 7
38756: PPUSH
38757: CALL_OW 12
38761: ST_TO_ADDR
// animal := CreateHuman ;
38762: LD_ADDR_VAR 0 12
38766: PUSH
38767: CALL_OW 44
38771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38772: LD_VAR 0 12
38776: PPUSH
38777: LD_VAR 0 8
38781: PPUSH
38782: LD_INT 0
38784: PPUSH
38785: CALL 40705 0 3
// end ;
38789: GO 38726
38791: POP
38792: POP
// if apemans then
38793: LD_VAR 0 3
38797: IFFALSE 38920
// for i = 1 to apemans do
38799: LD_ADDR_VAR 0 11
38803: PUSH
38804: DOUBLE
38805: LD_INT 1
38807: DEC
38808: ST_TO_ADDR
38809: LD_VAR 0 3
38813: PUSH
38814: FOR_TO
38815: IFFALSE 38918
// begin hc_class = class_apeman ;
38817: LD_ADDR_OWVAR 28
38821: PUSH
38822: LD_INT 12
38824: ST_TO_ADDR
// hc_gallery =  ;
38825: LD_ADDR_OWVAR 33
38829: PUSH
38830: LD_STRING 
38832: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38833: LD_ADDR_OWVAR 35
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PPUSH
38842: LD_INT 2
38844: PPUSH
38845: CALL_OW 12
38849: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38850: LD_ADDR_OWVAR 31
38854: PUSH
38855: LD_INT 1
38857: PPUSH
38858: LD_INT 3
38860: PPUSH
38861: CALL_OW 12
38865: PUSH
38866: LD_INT 1
38868: PPUSH
38869: LD_INT 3
38871: PPUSH
38872: CALL_OW 12
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// animal := CreateHuman ;
38889: LD_ADDR_VAR 0 12
38893: PUSH
38894: CALL_OW 44
38898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38899: LD_VAR 0 12
38903: PPUSH
38904: LD_VAR 0 8
38908: PPUSH
38909: LD_INT 0
38911: PPUSH
38912: CALL 40705 0 3
// end ;
38916: GO 38814
38918: POP
38919: POP
// if enchidnas then
38920: LD_VAR 0 4
38924: IFFALSE 38991
// for i = 1 to enchidnas do
38926: LD_ADDR_VAR 0 11
38930: PUSH
38931: DOUBLE
38932: LD_INT 1
38934: DEC
38935: ST_TO_ADDR
38936: LD_VAR 0 4
38940: PUSH
38941: FOR_TO
38942: IFFALSE 38989
// begin hc_class = 13 ;
38944: LD_ADDR_OWVAR 28
38948: PUSH
38949: LD_INT 13
38951: ST_TO_ADDR
// hc_gallery =  ;
38952: LD_ADDR_OWVAR 33
38956: PUSH
38957: LD_STRING 
38959: ST_TO_ADDR
// animal := CreateHuman ;
38960: LD_ADDR_VAR 0 12
38964: PUSH
38965: CALL_OW 44
38969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38970: LD_VAR 0 12
38974: PPUSH
38975: LD_VAR 0 8
38979: PPUSH
38980: LD_INT 0
38982: PPUSH
38983: CALL 40705 0 3
// end ;
38987: GO 38941
38989: POP
38990: POP
// if fishes then
38991: LD_VAR 0 7
38995: IFFALSE 39062
// for i = 1 to fishes do
38997: LD_ADDR_VAR 0 11
39001: PUSH
39002: DOUBLE
39003: LD_INT 1
39005: DEC
39006: ST_TO_ADDR
39007: LD_VAR 0 7
39011: PUSH
39012: FOR_TO
39013: IFFALSE 39060
// begin hc_class = 20 ;
39015: LD_ADDR_OWVAR 28
39019: PUSH
39020: LD_INT 20
39022: ST_TO_ADDR
// hc_gallery =  ;
39023: LD_ADDR_OWVAR 33
39027: PUSH
39028: LD_STRING 
39030: ST_TO_ADDR
// animal := CreateHuman ;
39031: LD_ADDR_VAR 0 12
39035: PUSH
39036: CALL_OW 44
39040: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39041: LD_VAR 0 12
39045: PPUSH
39046: LD_VAR 0 9
39050: PPUSH
39051: LD_INT 0
39053: PPUSH
39054: CALL 40705 0 3
// end ;
39058: GO 39012
39060: POP
39061: POP
// end ;
39062: LD_VAR 0 10
39066: RET
// export function WantHeal ( sci , unit ) ; begin
39067: LD_INT 0
39069: PPUSH
// if GetTaskList ( sci ) > 0 then
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL_OW 437
39079: PUSH
39080: LD_INT 0
39082: GREATER
39083: IFFALSE 39155
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 437
39094: PUSH
39095: LD_INT 1
39097: ARRAY
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: PUSH
39103: LD_STRING l
39105: EQUAL
39106: IFFALSE 39133
39108: PUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 437
39118: PUSH
39119: LD_INT 1
39121: ARRAY
39122: PUSH
39123: LD_INT 4
39125: ARRAY
39126: PUSH
39127: LD_VAR 0 2
39131: EQUAL
39132: AND
39133: IFFALSE 39145
// result := true else
39135: LD_ADDR_VAR 0 3
39139: PUSH
39140: LD_INT 1
39142: ST_TO_ADDR
39143: GO 39153
// result := false ;
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_INT 0
39152: ST_TO_ADDR
// end else
39153: GO 39163
// result := false ;
39155: LD_ADDR_VAR 0 3
39159: PUSH
39160: LD_INT 0
39162: ST_TO_ADDR
// end ;
39163: LD_VAR 0 3
39167: RET
// export function HealTarget ( sci ) ; begin
39168: LD_INT 0
39170: PPUSH
// if not sci then
39171: LD_VAR 0 1
39175: NOT
39176: IFFALSE 39180
// exit ;
39178: GO 39245
// result := 0 ;
39180: LD_ADDR_VAR 0 2
39184: PUSH
39185: LD_INT 0
39187: ST_TO_ADDR
// if GetTaskList ( sci ) then
39188: LD_VAR 0 1
39192: PPUSH
39193: CALL_OW 437
39197: IFFALSE 39245
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 437
39208: PUSH
39209: LD_INT 1
39211: ARRAY
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PUSH
39217: LD_STRING l
39219: EQUAL
39220: IFFALSE 39245
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39222: LD_ADDR_VAR 0 2
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 437
39236: PUSH
39237: LD_INT 1
39239: ARRAY
39240: PUSH
39241: LD_INT 4
39243: ARRAY
39244: ST_TO_ADDR
// end ;
39245: LD_VAR 0 2
39249: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39250: LD_INT 0
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
// if not base_units then
39256: LD_VAR 0 1
39260: NOT
39261: IFFALSE 39265
// exit ;
39263: GO 39352
// result := false ;
39265: LD_ADDR_VAR 0 2
39269: PUSH
39270: LD_INT 0
39272: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39273: LD_ADDR_VAR 0 5
39277: PUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: LD_INT 21
39285: PUSH
39286: LD_INT 3
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PPUSH
39293: CALL_OW 72
39297: ST_TO_ADDR
// if not tmp then
39298: LD_VAR 0 5
39302: NOT
39303: IFFALSE 39307
// exit ;
39305: GO 39352
// for i in tmp do
39307: LD_ADDR_VAR 0 3
39311: PUSH
39312: LD_VAR 0 5
39316: PUSH
39317: FOR_IN
39318: IFFALSE 39350
// begin result := EnemyInRange ( i , 22 ) ;
39320: LD_ADDR_VAR 0 2
39324: PUSH
39325: LD_VAR 0 3
39329: PPUSH
39330: LD_INT 22
39332: PPUSH
39333: CALL 36777 0 2
39337: ST_TO_ADDR
// if result then
39338: LD_VAR 0 2
39342: IFFALSE 39348
// exit ;
39344: POP
39345: POP
39346: GO 39352
// end ;
39348: GO 39317
39350: POP
39351: POP
// end ;
39352: LD_VAR 0 2
39356: RET
// export function FilterByTag ( units , tag ) ; begin
39357: LD_INT 0
39359: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39360: LD_ADDR_VAR 0 3
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: LD_INT 120
39372: PUSH
39373: LD_VAR 0 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PPUSH
39382: CALL_OW 72
39386: ST_TO_ADDR
// end ;
39387: LD_VAR 0 3
39391: RET
// export function IsDriver ( un ) ; begin
39392: LD_INT 0
39394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39395: LD_ADDR_VAR 0 2
39399: PUSH
39400: LD_VAR 0 1
39404: PUSH
39405: LD_INT 55
39407: PUSH
39408: EMPTY
39409: LIST
39410: PPUSH
39411: CALL_OW 69
39415: IN
39416: ST_TO_ADDR
// end ;
39417: LD_VAR 0 2
39421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39422: LD_INT 0
39424: PPUSH
39425: PPUSH
// list := [ ] ;
39426: LD_ADDR_VAR 0 5
39430: PUSH
39431: EMPTY
39432: ST_TO_ADDR
// case d of 0 :
39433: LD_VAR 0 3
39437: PUSH
39438: LD_INT 0
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39579
39446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39447: LD_ADDR_VAR 0 5
39451: PUSH
39452: LD_VAR 0 1
39456: PUSH
39457: LD_INT 4
39459: MINUS
39460: PUSH
39461: LD_VAR 0 2
39465: PUSH
39466: LD_INT 4
39468: MINUS
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: PUSH
39478: LD_VAR 0 1
39482: PUSH
39483: LD_INT 3
39485: MINUS
39486: PUSH
39487: LD_VAR 0 2
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: PUSH
39500: LD_VAR 0 1
39504: PUSH
39505: LD_INT 4
39507: PLUS
39508: PUSH
39509: LD_VAR 0 2
39513: PUSH
39514: LD_INT 4
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: PUSH
39522: LD_VAR 0 1
39526: PUSH
39527: LD_INT 3
39529: PLUS
39530: PUSH
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 3
39538: PLUS
39539: PUSH
39540: LD_INT 5
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: LD_VAR 0 1
39552: PUSH
39553: LD_VAR 0 2
39557: PUSH
39558: LD_INT 4
39560: PLUS
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// end ; 1 :
39577: GO 40277
39579: LD_INT 1
39581: DOUBLE
39582: EQUAL
39583: IFTRUE 39587
39585: GO 39720
39587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39588: LD_ADDR_VAR 0 5
39592: PUSH
39593: LD_VAR 0 1
39597: PUSH
39598: LD_VAR 0 2
39602: PUSH
39603: LD_INT 4
39605: MINUS
39606: PUSH
39607: LD_INT 3
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: PUSH
39615: LD_VAR 0 1
39619: PUSH
39620: LD_INT 3
39622: MINUS
39623: PUSH
39624: LD_VAR 0 2
39628: PUSH
39629: LD_INT 3
39631: MINUS
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: PUSH
39641: LD_VAR 0 1
39645: PUSH
39646: LD_INT 4
39648: MINUS
39649: PUSH
39650: LD_VAR 0 2
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: PUSH
39663: LD_VAR 0 1
39667: PUSH
39668: LD_VAR 0 2
39672: PUSH
39673: LD_INT 3
39675: PLUS
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: LD_VAR 0 1
39689: PUSH
39690: LD_INT 4
39692: PLUS
39693: PUSH
39694: LD_VAR 0 2
39698: PUSH
39699: LD_INT 4
39701: PLUS
39702: PUSH
39703: LD_INT 5
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: ST_TO_ADDR
// end ; 2 :
39718: GO 40277
39720: LD_INT 2
39722: DOUBLE
39723: EQUAL
39724: IFTRUE 39728
39726: GO 39857
39728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39729: LD_ADDR_VAR 0 5
39733: PUSH
39734: LD_VAR 0 1
39738: PUSH
39739: LD_VAR 0 2
39743: PUSH
39744: LD_INT 3
39746: MINUS
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: PUSH
39756: LD_VAR 0 1
39760: PUSH
39761: LD_INT 4
39763: PLUS
39764: PUSH
39765: LD_VAR 0 2
39769: PUSH
39770: LD_INT 4
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_VAR 0 1
39782: PUSH
39783: LD_VAR 0 2
39787: PUSH
39788: LD_INT 4
39790: PLUS
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: PUSH
39800: LD_VAR 0 1
39804: PUSH
39805: LD_INT 3
39807: MINUS
39808: PUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: PUSH
39822: LD_VAR 0 1
39826: PUSH
39827: LD_INT 4
39829: MINUS
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_INT 4
39838: MINUS
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// end ; 3 :
39855: GO 40277
39857: LD_INT 3
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 39998
39865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39866: LD_ADDR_VAR 0 5
39870: PUSH
39871: LD_VAR 0 1
39875: PUSH
39876: LD_INT 3
39878: PLUS
39879: PUSH
39880: LD_VAR 0 2
39884: PUSH
39885: LD_INT 4
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: PUSH
39893: LD_VAR 0 1
39897: PUSH
39898: LD_INT 4
39900: PLUS
39901: PUSH
39902: LD_VAR 0 2
39906: PUSH
39907: LD_INT 4
39909: PLUS
39910: PUSH
39911: LD_INT 5
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: LD_VAR 0 1
39923: PUSH
39924: LD_INT 4
39926: MINUS
39927: PUSH
39928: LD_VAR 0 2
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: PUSH
39941: LD_VAR 0 1
39945: PUSH
39946: LD_VAR 0 2
39950: PUSH
39951: LD_INT 4
39953: MINUS
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: PUSH
39963: LD_VAR 0 1
39967: PUSH
39968: LD_INT 3
39970: MINUS
39971: PUSH
39972: LD_VAR 0 2
39976: PUSH
39977: LD_INT 3
39979: MINUS
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: ST_TO_ADDR
// end ; 4 :
39996: GO 40277
39998: LD_INT 4
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40006
40004: GO 40139
40006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40007: LD_ADDR_VAR 0 5
40011: PUSH
40012: LD_VAR 0 1
40016: PUSH
40017: LD_VAR 0 2
40021: PUSH
40022: LD_INT 4
40024: PLUS
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: PUSH
40034: LD_VAR 0 1
40038: PUSH
40039: LD_INT 3
40041: PLUS
40042: PUSH
40043: LD_VAR 0 2
40047: PUSH
40048: LD_INT 3
40050: PLUS
40051: PUSH
40052: LD_INT 5
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: PUSH
40060: LD_VAR 0 1
40064: PUSH
40065: LD_INT 4
40067: PLUS
40068: PUSH
40069: LD_VAR 0 2
40073: PUSH
40074: LD_INT 4
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: PUSH
40082: LD_VAR 0 1
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: LD_INT 3
40094: MINUS
40095: PUSH
40096: LD_INT 3
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: PUSH
40104: LD_VAR 0 1
40108: PUSH
40109: LD_INT 4
40111: MINUS
40112: PUSH
40113: LD_VAR 0 2
40117: PUSH
40118: LD_INT 4
40120: MINUS
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: ST_TO_ADDR
// end ; 5 :
40137: GO 40277
40139: LD_INT 5
40141: DOUBLE
40142: EQUAL
40143: IFTRUE 40147
40145: GO 40276
40147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40148: LD_ADDR_VAR 0 5
40152: PUSH
40153: LD_VAR 0 1
40157: PUSH
40158: LD_INT 4
40160: MINUS
40161: PUSH
40162: LD_VAR 0 2
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: PUSH
40175: LD_VAR 0 1
40179: PUSH
40180: LD_VAR 0 2
40184: PUSH
40185: LD_INT 4
40187: MINUS
40188: PUSH
40189: LD_INT 3
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: PUSH
40197: LD_VAR 0 1
40201: PUSH
40202: LD_INT 4
40204: PLUS
40205: PUSH
40206: LD_VAR 0 2
40210: PUSH
40211: LD_INT 4
40213: PLUS
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: PUSH
40223: LD_VAR 0 1
40227: PUSH
40228: LD_INT 3
40230: PLUS
40231: PUSH
40232: LD_VAR 0 2
40236: PUSH
40237: LD_INT 4
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: PUSH
40245: LD_VAR 0 1
40249: PUSH
40250: LD_VAR 0 2
40254: PUSH
40255: LD_INT 3
40257: PLUS
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// end ; end ;
40274: GO 40277
40276: POP
// result := list ;
40277: LD_ADDR_VAR 0 4
40281: PUSH
40282: LD_VAR 0 5
40286: ST_TO_ADDR
// end ;
40287: LD_VAR 0 4
40291: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40292: LD_INT 0
40294: PPUSH
40295: PPUSH
40296: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40297: LD_VAR 0 1
40301: NOT
40302: IFTRUE 40330
40304: PUSH
40305: LD_VAR 0 2
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: LD_INT 4
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: IN
40328: NOT
40329: OR
40330: IFFALSE 40334
// exit ;
40332: GO 40417
// tmp := [ ] ;
40334: LD_ADDR_VAR 0 5
40338: PUSH
40339: EMPTY
40340: ST_TO_ADDR
// for i in units do
40341: LD_ADDR_VAR 0 4
40345: PUSH
40346: LD_VAR 0 1
40350: PUSH
40351: FOR_IN
40352: IFFALSE 40386
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_VAR 0 5
40363: PPUSH
40364: LD_VAR 0 4
40368: PPUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: CALL_OW 259
40378: PPUSH
40379: CALL 41812 0 2
40383: ST_TO_ADDR
40384: GO 40351
40386: POP
40387: POP
// if not tmp then
40388: LD_VAR 0 5
40392: NOT
40393: IFFALSE 40397
// exit ;
40395: GO 40417
// result := SortListByListDesc ( units , tmp ) ;
40397: LD_ADDR_VAR 0 3
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: LD_VAR 0 5
40411: PPUSH
40412: CALL_OW 77
40416: ST_TO_ADDR
// end ;
40417: LD_VAR 0 3
40421: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
// result := false ;
40427: LD_ADDR_VAR 0 3
40431: PUSH
40432: LD_INT 0
40434: ST_TO_ADDR
// if not building then
40435: LD_VAR 0 2
40439: NOT
40440: IFFALSE 40444
// exit ;
40442: GO 40588
// x := GetX ( building ) ;
40444: LD_ADDR_VAR 0 4
40448: PUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: CALL_OW 250
40458: ST_TO_ADDR
// y := GetY ( building ) ;
40459: LD_ADDR_VAR 0 5
40463: PUSH
40464: LD_VAR 0 2
40468: PPUSH
40469: CALL_OW 251
40473: ST_TO_ADDR
// if not x or not y then
40474: LD_VAR 0 4
40478: NOT
40479: IFTRUE 40488
40481: PUSH
40482: LD_VAR 0 5
40486: NOT
40487: OR
40488: IFFALSE 40492
// exit ;
40490: GO 40588
// if GetTaskList ( unit ) then
40492: LD_VAR 0 1
40496: PPUSH
40497: CALL_OW 437
40501: IFFALSE 40588
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40503: LD_STRING e
40505: PUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: CALL_OW 437
40515: PUSH
40516: LD_INT 1
40518: ARRAY
40519: PUSH
40520: LD_INT 1
40522: ARRAY
40523: EQUAL
40524: IFFALSE 40551
40526: PUSH
40527: LD_VAR 0 4
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 437
40541: PUSH
40542: LD_INT 1
40544: ARRAY
40545: PUSH
40546: LD_INT 2
40548: ARRAY
40549: EQUAL
40550: AND
40551: IFFALSE 40578
40553: PUSH
40554: LD_VAR 0 5
40558: PUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 437
40568: PUSH
40569: LD_INT 1
40571: ARRAY
40572: PUSH
40573: LD_INT 3
40575: ARRAY
40576: EQUAL
40577: AND
40578: IFFALSE 40588
// result := true end ;
40580: LD_ADDR_VAR 0 3
40584: PUSH
40585: LD_INT 1
40587: ST_TO_ADDR
// end ;
40588: LD_VAR 0 3
40592: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40593: LD_INT 0
40595: PPUSH
// result := false ;
40596: LD_ADDR_VAR 0 4
40600: PUSH
40601: LD_INT 0
40603: ST_TO_ADDR
// if GetTaskList ( unit ) then
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 437
40613: IFFALSE 40700
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40615: LD_STRING M
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 437
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: PUSH
40632: LD_INT 1
40634: ARRAY
40635: EQUAL
40636: IFFALSE 40663
40638: PUSH
40639: LD_VAR 0 2
40643: PUSH
40644: LD_VAR 0 1
40648: PPUSH
40649: CALL_OW 437
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PUSH
40658: LD_INT 2
40660: ARRAY
40661: EQUAL
40662: AND
40663: IFFALSE 40690
40665: PUSH
40666: LD_VAR 0 3
40670: PUSH
40671: LD_VAR 0 1
40675: PPUSH
40676: CALL_OW 437
40680: PUSH
40681: LD_INT 1
40683: ARRAY
40684: PUSH
40685: LD_INT 3
40687: ARRAY
40688: EQUAL
40689: AND
40690: IFFALSE 40700
// result := true ;
40692: LD_ADDR_VAR 0 4
40696: PUSH
40697: LD_INT 1
40699: ST_TO_ADDR
// end ; end ;
40700: LD_VAR 0 4
40704: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40705: LD_INT 0
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
// if not unit or not area then
40711: LD_VAR 0 1
40715: NOT
40716: IFTRUE 40725
40718: PUSH
40719: LD_VAR 0 2
40723: NOT
40724: OR
40725: IFFALSE 40729
// exit ;
40727: GO 40905
// tmp := AreaToList ( area , i ) ;
40729: LD_ADDR_VAR 0 6
40733: PUSH
40734: LD_VAR 0 2
40738: PPUSH
40739: LD_VAR 0 5
40743: PPUSH
40744: CALL_OW 517
40748: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40749: LD_ADDR_VAR 0 5
40753: PUSH
40754: DOUBLE
40755: LD_INT 1
40757: DEC
40758: ST_TO_ADDR
40759: LD_VAR 0 6
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: PUSH
40768: FOR_TO
40769: IFFALSE 40903
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40771: LD_ADDR_VAR 0 7
40775: PUSH
40776: LD_VAR 0 6
40780: PUSH
40781: LD_INT 1
40783: ARRAY
40784: PUSH
40785: LD_VAR 0 5
40789: ARRAY
40790: PUSH
40791: LD_VAR 0 6
40795: PUSH
40796: LD_INT 2
40798: ARRAY
40799: PUSH
40800: LD_VAR 0 5
40804: ARRAY
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40810: LD_INT 92
40812: PUSH
40813: LD_VAR 0 7
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PUSH
40822: LD_VAR 0 7
40826: PUSH
40827: LD_INT 2
40829: ARRAY
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: PPUSH
40840: CALL_OW 69
40844: PUSH
40845: LD_INT 0
40847: EQUAL
40848: IFFALSE 40901
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40850: LD_VAR 0 1
40854: PPUSH
40855: LD_VAR 0 7
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: PPUSH
40864: LD_VAR 0 7
40868: PUSH
40869: LD_INT 2
40871: ARRAY
40872: PPUSH
40873: LD_VAR 0 3
40877: PPUSH
40878: CALL_OW 48
// result := IsPlaced ( unit ) ;
40882: LD_ADDR_VAR 0 4
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 305
40896: ST_TO_ADDR
// exit ;
40897: POP
40898: POP
40899: GO 40905
// end ; end ;
40901: GO 40768
40903: POP
40904: POP
// end ;
40905: LD_VAR 0 4
40909: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40910: LD_INT 0
40912: PPUSH
40913: PPUSH
40914: PPUSH
// if not side or side > 8 then
40915: LD_VAR 0 1
40919: NOT
40920: IFTRUE 40932
40922: PUSH
40923: LD_VAR 0 1
40927: PUSH
40928: LD_INT 8
40930: GREATER
40931: OR
40932: IFFALSE 40936
// exit ;
40934: GO 41123
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40936: LD_ADDR_VAR 0 4
40940: PUSH
40941: LD_INT 22
40943: PUSH
40944: LD_VAR 0 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 21
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PPUSH
40967: CALL_OW 69
40971: ST_TO_ADDR
// if not tmp then
40972: LD_VAR 0 4
40976: NOT
40977: IFFALSE 40981
// exit ;
40979: GO 41123
// enable_addtolog := true ;
40981: LD_ADDR_OWVAR 81
40985: PUSH
40986: LD_INT 1
40988: ST_TO_ADDR
// AddToLog ( [ ) ;
40989: LD_STRING [
40991: PPUSH
40992: CALL_OW 561
// for i in tmp do
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 4
41005: PUSH
41006: FOR_IN
41007: IFFALSE 41114
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41009: LD_STRING [
41011: PUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: CALL_OW 266
41021: STR
41022: PUSH
41023: LD_STRING , 
41025: STR
41026: PUSH
41027: LD_VAR 0 3
41031: PPUSH
41032: CALL_OW 250
41036: STR
41037: PUSH
41038: LD_STRING , 
41040: STR
41041: PUSH
41042: LD_VAR 0 3
41046: PPUSH
41047: CALL_OW 251
41051: STR
41052: PUSH
41053: LD_STRING , 
41055: STR
41056: PUSH
41057: LD_VAR 0 3
41061: PPUSH
41062: CALL_OW 254
41066: STR
41067: PUSH
41068: LD_STRING , 
41070: STR
41071: PUSH
41072: LD_VAR 0 3
41076: PPUSH
41077: LD_INT 1
41079: PPUSH
41080: CALL_OW 268
41084: STR
41085: PUSH
41086: LD_STRING , 
41088: STR
41089: PUSH
41090: LD_VAR 0 3
41094: PPUSH
41095: LD_INT 2
41097: PPUSH
41098: CALL_OW 268
41102: STR
41103: PUSH
41104: LD_STRING ],
41106: STR
41107: PPUSH
41108: CALL_OW 561
// end ;
41112: GO 41006
41114: POP
41115: POP
// AddToLog ( ]; ) ;
41116: LD_STRING ];
41118: PPUSH
41119: CALL_OW 561
// end ;
41123: LD_VAR 0 2
41127: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41128: LD_INT 0
41130: PPUSH
41131: PPUSH
41132: PPUSH
41133: PPUSH
41134: PPUSH
// if not area or not rate or not max then
41135: LD_VAR 0 1
41139: NOT
41140: IFTRUE 41149
41142: PUSH
41143: LD_VAR 0 2
41147: NOT
41148: OR
41149: IFTRUE 41158
41151: PUSH
41152: LD_VAR 0 4
41156: NOT
41157: OR
41158: IFFALSE 41162
// exit ;
41160: GO 41351
// while 1 do
41162: LD_INT 1
41164: IFFALSE 41351
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41166: LD_ADDR_VAR 0 9
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: LD_INT 1
41178: PPUSH
41179: CALL_OW 287
41183: PUSH
41184: LD_INT 10
41186: MUL
41187: ST_TO_ADDR
// r := rate / 10 ;
41188: LD_ADDR_VAR 0 7
41192: PUSH
41193: LD_VAR 0 2
41197: PUSH
41198: LD_INT 10
41200: DIVREAL
41201: ST_TO_ADDR
// time := 1 1$00 ;
41202: LD_ADDR_VAR 0 8
41206: PUSH
41207: LD_INT 2100
41209: ST_TO_ADDR
// if amount < min then
41210: LD_VAR 0 9
41214: PUSH
41215: LD_VAR 0 3
41219: LESS
41220: IFFALSE 41238
// r := r * 2 else
41222: LD_ADDR_VAR 0 7
41226: PUSH
41227: LD_VAR 0 7
41231: PUSH
41232: LD_INT 2
41234: MUL
41235: ST_TO_ADDR
41236: GO 41264
// if amount > max then
41238: LD_VAR 0 9
41242: PUSH
41243: LD_VAR 0 4
41247: GREATER
41248: IFFALSE 41264
// r := r / 2 ;
41250: LD_ADDR_VAR 0 7
41254: PUSH
41255: LD_VAR 0 7
41259: PUSH
41260: LD_INT 2
41262: DIVREAL
41263: ST_TO_ADDR
// time := time / r ;
41264: LD_ADDR_VAR 0 8
41268: PUSH
41269: LD_VAR 0 8
41273: PUSH
41274: LD_VAR 0 7
41278: DIVREAL
41279: ST_TO_ADDR
// if time < 0 then
41280: LD_VAR 0 8
41284: PUSH
41285: LD_INT 0
41287: LESS
41288: IFFALSE 41305
// time := time * - 1 ;
41290: LD_ADDR_VAR 0 8
41294: PUSH
41295: LD_VAR 0 8
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: MUL
41304: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41305: LD_VAR 0 8
41309: PUSH
41310: LD_INT 35
41312: PPUSH
41313: LD_INT 875
41315: PPUSH
41316: CALL_OW 12
41320: PLUS
41321: PPUSH
41322: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41326: LD_INT 1
41328: PPUSH
41329: LD_INT 5
41331: PPUSH
41332: CALL_OW 12
41336: PPUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: LD_INT 1
41344: PPUSH
41345: CALL_OW 55
// end ;
41349: GO 41162
// end ;
41351: LD_VAR 0 5
41355: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41356: LD_INT 0
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
// if not turrets or not factories then
41366: LD_VAR 0 1
41370: NOT
41371: IFTRUE 41380
41373: PUSH
41374: LD_VAR 0 2
41378: NOT
41379: OR
41380: IFFALSE 41384
// exit ;
41382: GO 41691
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41384: LD_ADDR_VAR 0 10
41388: PUSH
41389: LD_INT 5
41391: PUSH
41392: LD_INT 6
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 4
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 5
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 24
41426: PUSH
41427: LD_INT 25
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 23
41436: PUSH
41437: LD_INT 27
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 42
41450: PUSH
41451: LD_INT 43
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 44
41460: PUSH
41461: LD_INT 46
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 45
41470: PUSH
41471: LD_INT 47
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: ST_TO_ADDR
// result := [ ] ;
41488: LD_ADDR_VAR 0 3
41492: PUSH
41493: EMPTY
41494: ST_TO_ADDR
// for i in turrets do
41495: LD_ADDR_VAR 0 4
41499: PUSH
41500: LD_VAR 0 1
41504: PUSH
41505: FOR_IN
41506: IFFALSE 41689
// begin nat := GetNation ( i ) ;
41508: LD_ADDR_VAR 0 7
41512: PUSH
41513: LD_VAR 0 4
41517: PPUSH
41518: CALL_OW 248
41522: ST_TO_ADDR
// weapon := 0 ;
41523: LD_ADDR_VAR 0 8
41527: PUSH
41528: LD_INT 0
41530: ST_TO_ADDR
// if not nat then
41531: LD_VAR 0 7
41535: NOT
41536: IFFALSE 41540
// continue ;
41538: GO 41505
// for j in list [ nat ] do
41540: LD_ADDR_VAR 0 5
41544: PUSH
41545: LD_VAR 0 10
41549: PUSH
41550: LD_VAR 0 7
41554: ARRAY
41555: PUSH
41556: FOR_IN
41557: IFFALSE 41598
// if GetBWeapon ( i ) = j [ 1 ] then
41559: LD_VAR 0 4
41563: PPUSH
41564: CALL_OW 269
41568: PUSH
41569: LD_VAR 0 5
41573: PUSH
41574: LD_INT 1
41576: ARRAY
41577: EQUAL
41578: IFFALSE 41596
// begin weapon := j [ 2 ] ;
41580: LD_ADDR_VAR 0 8
41584: PUSH
41585: LD_VAR 0 5
41589: PUSH
41590: LD_INT 2
41592: ARRAY
41593: ST_TO_ADDR
// break ;
41594: GO 41598
// end ;
41596: GO 41556
41598: POP
41599: POP
// if not weapon then
41600: LD_VAR 0 8
41604: NOT
41605: IFFALSE 41609
// continue ;
41607: GO 41505
// for k in factories do
41609: LD_ADDR_VAR 0 6
41613: PUSH
41614: LD_VAR 0 2
41618: PUSH
41619: FOR_IN
41620: IFFALSE 41685
// begin weapons := AvailableWeaponList ( k ) ;
41622: LD_ADDR_VAR 0 9
41626: PUSH
41627: LD_VAR 0 6
41631: PPUSH
41632: CALL_OW 478
41636: ST_TO_ADDR
// if not weapons then
41637: LD_VAR 0 9
41641: NOT
41642: IFFALSE 41646
// continue ;
41644: GO 41619
// if weapon in weapons then
41646: LD_VAR 0 8
41650: PUSH
41651: LD_VAR 0 9
41655: IN
41656: IFFALSE 41683
// begin result := [ i , weapon ] ;
41658: LD_ADDR_VAR 0 3
41662: PUSH
41663: LD_VAR 0 4
41667: PUSH
41668: LD_VAR 0 8
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: ST_TO_ADDR
// exit ;
41677: POP
41678: POP
41679: POP
41680: POP
41681: GO 41691
// end ; end ;
41683: GO 41619
41685: POP
41686: POP
// end ;
41687: GO 41505
41689: POP
41690: POP
// end ;
41691: LD_VAR 0 3
41695: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41696: LD_INT 0
41698: PPUSH
// if not side or side > 8 then
41699: LD_VAR 0 3
41703: NOT
41704: IFTRUE 41716
41706: PUSH
41707: LD_VAR 0 3
41711: PUSH
41712: LD_INT 8
41714: GREATER
41715: OR
41716: IFFALSE 41720
// exit ;
41718: GO 41779
// if not range then
41720: LD_VAR 0 4
41724: NOT
41725: IFFALSE 41736
// range := - 12 ;
41727: LD_ADDR_VAR 0 4
41731: PUSH
41732: LD_INT 12
41734: NEG
41735: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41736: LD_VAR 0 1
41740: PPUSH
41741: LD_VAR 0 2
41745: PPUSH
41746: LD_VAR 0 3
41750: PPUSH
41751: LD_VAR 0 4
41755: PPUSH
41756: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41760: LD_VAR 0 1
41764: PPUSH
41765: LD_VAR 0 2
41769: PPUSH
41770: LD_VAR 0 3
41774: PPUSH
41775: CALL_OW 331
// end ;
41779: LD_VAR 0 5
41783: RET
// export function Video ( mode ) ; begin
41784: LD_INT 0
41786: PPUSH
// ingame_video = mode ;
41787: LD_ADDR_OWVAR 52
41791: PUSH
41792: LD_VAR 0 1
41796: ST_TO_ADDR
// interface_hidden = mode ;
41797: LD_ADDR_OWVAR 54
41801: PUSH
41802: LD_VAR 0 1
41806: ST_TO_ADDR
// end ;
41807: LD_VAR 0 2
41811: RET
// export function Join ( array , element ) ; begin
41812: LD_INT 0
41814: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41815: LD_ADDR_VAR 0 3
41819: PUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: LD_VAR 0 1
41829: PUSH
41830: LD_INT 1
41832: PLUS
41833: PPUSH
41834: LD_VAR 0 2
41838: PPUSH
41839: CALL_OW 1
41843: ST_TO_ADDR
// end ;
41844: LD_VAR 0 3
41848: RET
// export function JoinUnion ( array , element ) ; begin
41849: LD_INT 0
41851: PPUSH
// result := array union element ;
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_VAR 0 1
41861: PUSH
41862: LD_VAR 0 2
41866: UNION
41867: ST_TO_ADDR
// end ;
41868: LD_VAR 0 3
41872: RET
// export function GetBehemoths ( side ) ; begin
41873: LD_INT 0
41875: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41876: LD_ADDR_VAR 0 2
41880: PUSH
41881: LD_INT 22
41883: PUSH
41884: LD_VAR 0 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 31
41895: PUSH
41896: LD_INT 25
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PPUSH
41907: CALL_OW 69
41911: ST_TO_ADDR
// end ;
41912: LD_VAR 0 2
41916: RET
// export function Shuffle ( array ) ; var i , index ; begin
41917: LD_INT 0
41919: PPUSH
41920: PPUSH
41921: PPUSH
// result := [ ] ;
41922: LD_ADDR_VAR 0 2
41926: PUSH
41927: EMPTY
41928: ST_TO_ADDR
// if not array then
41929: LD_VAR 0 1
41933: NOT
41934: IFFALSE 41938
// exit ;
41936: GO 42037
// Randomize ;
41938: CALL_OW 10
// for i = array downto 1 do
41942: LD_ADDR_VAR 0 3
41946: PUSH
41947: DOUBLE
41948: LD_VAR 0 1
41952: INC
41953: ST_TO_ADDR
41954: LD_INT 1
41956: PUSH
41957: FOR_DOWNTO
41958: IFFALSE 42035
// begin index := rand ( 1 , array ) ;
41960: LD_ADDR_VAR 0 4
41964: PUSH
41965: LD_INT 1
41967: PPUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 12
41977: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41978: LD_ADDR_VAR 0 2
41982: PUSH
41983: LD_VAR 0 2
41987: PPUSH
41988: LD_VAR 0 2
41992: PUSH
41993: LD_INT 1
41995: PLUS
41996: PPUSH
41997: LD_VAR 0 1
42001: PUSH
42002: LD_VAR 0 4
42006: ARRAY
42007: PPUSH
42008: CALL_OW 2
42012: ST_TO_ADDR
// array := Delete ( array , index ) ;
42013: LD_ADDR_VAR 0 1
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_VAR 0 4
42027: PPUSH
42028: CALL_OW 3
42032: ST_TO_ADDR
// end ;
42033: GO 41957
42035: POP
42036: POP
// end ;
42037: LD_VAR 0 2
42041: RET
// export function GetBaseMaterials ( base ) ; begin
42042: LD_INT 0
42044: PPUSH
// result := [ 0 , 0 , 0 ] ;
42045: LD_ADDR_VAR 0 2
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// if not base then
42064: LD_VAR 0 1
42068: NOT
42069: IFFALSE 42073
// exit ;
42071: GO 42122
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42073: LD_ADDR_VAR 0 2
42077: PUSH
42078: LD_VAR 0 1
42082: PPUSH
42083: LD_INT 1
42085: PPUSH
42086: CALL_OW 275
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: LD_INT 2
42098: PPUSH
42099: CALL_OW 275
42103: PUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: LD_INT 3
42111: PPUSH
42112: CALL_OW 275
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: ST_TO_ADDR
// end ;
42122: LD_VAR 0 2
42126: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42127: LD_INT 0
42129: PPUSH
42130: PPUSH
// result := array ;
42131: LD_ADDR_VAR 0 3
42135: PUSH
42136: LD_VAR 0 1
42140: ST_TO_ADDR
// if size >= result then
42141: LD_VAR 0 2
42145: PUSH
42146: LD_VAR 0 3
42150: GREATEREQUAL
42151: IFFALSE 42155
// exit ;
42153: GO 42205
// if size then
42155: LD_VAR 0 2
42159: IFFALSE 42205
// for i := array downto size do
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: DOUBLE
42167: LD_VAR 0 1
42171: INC
42172: ST_TO_ADDR
42173: LD_VAR 0 2
42177: PUSH
42178: FOR_DOWNTO
42179: IFFALSE 42203
// result := Delete ( result , result ) ;
42181: LD_ADDR_VAR 0 3
42185: PUSH
42186: LD_VAR 0 3
42190: PPUSH
42191: LD_VAR 0 3
42195: PPUSH
42196: CALL_OW 3
42200: ST_TO_ADDR
42201: GO 42178
42203: POP
42204: POP
// end ;
42205: LD_VAR 0 3
42209: RET
// export function ComExit ( unit ) ; var tmp ; begin
42210: LD_INT 0
42212: PPUSH
42213: PPUSH
// if not IsInUnit ( unit ) then
42214: LD_VAR 0 1
42218: PPUSH
42219: CALL_OW 310
42223: NOT
42224: IFFALSE 42228
// exit ;
42226: GO 42288
// tmp := IsInUnit ( unit ) ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_VAR 0 1
42237: PPUSH
42238: CALL_OW 310
42242: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42243: LD_VAR 0 3
42247: PPUSH
42248: CALL_OW 247
42252: PUSH
42253: LD_INT 2
42255: EQUAL
42256: IFFALSE 42269
// ComExitVehicle ( unit ) else
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 121
42267: GO 42278
// ComExitBuilding ( unit ) ;
42269: LD_VAR 0 1
42273: PPUSH
42274: CALL_OW 122
// result := tmp ;
42278: LD_ADDR_VAR 0 2
42282: PUSH
42283: LD_VAR 0 3
42287: ST_TO_ADDR
// end ;
42288: LD_VAR 0 2
42292: RET
// export function ComExitAll ( units ) ; var i ; begin
42293: LD_INT 0
42295: PPUSH
42296: PPUSH
// if not units then
42297: LD_VAR 0 1
42301: NOT
42302: IFFALSE 42306
// exit ;
42304: GO 42332
// for i in units do
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_VAR 0 1
42315: PUSH
42316: FOR_IN
42317: IFFALSE 42330
// ComExit ( i ) ;
42319: LD_VAR 0 3
42323: PPUSH
42324: CALL 42210 0 1
42328: GO 42316
42330: POP
42331: POP
// end ;
42332: LD_VAR 0 2
42336: RET
// export function ResetHc ; begin
42337: LD_INT 0
42339: PPUSH
// InitHc ;
42340: CALL_OW 19
// hc_importance := 0 ;
42344: LD_ADDR_OWVAR 32
42348: PUSH
42349: LD_INT 0
42351: ST_TO_ADDR
// end ;
42352: LD_VAR 0 1
42356: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42357: LD_INT 0
42359: PPUSH
42360: PPUSH
42361: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42362: LD_ADDR_VAR 0 6
42366: PUSH
42367: LD_VAR 0 1
42371: PUSH
42372: LD_VAR 0 3
42376: PLUS
42377: PUSH
42378: LD_INT 2
42380: DIV
42381: ST_TO_ADDR
// if _x < 0 then
42382: LD_VAR 0 6
42386: PUSH
42387: LD_INT 0
42389: LESS
42390: IFFALSE 42407
// _x := _x * - 1 ;
42392: LD_ADDR_VAR 0 6
42396: PUSH
42397: LD_VAR 0 6
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: MUL
42406: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42407: LD_ADDR_VAR 0 7
42411: PUSH
42412: LD_VAR 0 2
42416: PUSH
42417: LD_VAR 0 4
42421: PLUS
42422: PUSH
42423: LD_INT 2
42425: DIV
42426: ST_TO_ADDR
// if _y < 0 then
42427: LD_VAR 0 7
42431: PUSH
42432: LD_INT 0
42434: LESS
42435: IFFALSE 42452
// _y := _y * - 1 ;
42437: LD_ADDR_VAR 0 7
42441: PUSH
42442: LD_VAR 0 7
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: MUL
42451: ST_TO_ADDR
// result := [ _x , _y ] ;
42452: LD_ADDR_VAR 0 5
42456: PUSH
42457: LD_VAR 0 6
42461: PUSH
42462: LD_VAR 0 7
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: ST_TO_ADDR
// end ;
42471: LD_VAR 0 5
42475: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42476: LD_INT 0
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
// task := GetTaskList ( unit ) ;
42482: LD_ADDR_VAR 0 7
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 437
42496: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42497: LD_VAR 0 7
42501: NOT
42502: IFFALSE 42521
42504: PUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: LD_VAR 0 2
42514: PPUSH
42515: CALL_OW 308
42519: NOT
42520: AND
42521: IFFALSE 42525
// exit ;
42523: GO 42643
// if IsInArea ( unit , area ) then
42525: LD_VAR 0 1
42529: PPUSH
42530: LD_VAR 0 2
42534: PPUSH
42535: CALL_OW 308
42539: IFFALSE 42557
// begin ComMoveToArea ( unit , goAway ) ;
42541: LD_VAR 0 1
42545: PPUSH
42546: LD_VAR 0 3
42550: PPUSH
42551: CALL_OW 113
// exit ;
42555: GO 42643
// end ; if task [ 1 ] [ 1 ] <> M then
42557: LD_VAR 0 7
42561: PUSH
42562: LD_INT 1
42564: ARRAY
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PUSH
42570: LD_STRING M
42572: NONEQUAL
42573: IFFALSE 42577
// exit ;
42575: GO 42643
// x := task [ 1 ] [ 2 ] ;
42577: LD_ADDR_VAR 0 5
42581: PUSH
42582: LD_VAR 0 7
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: PUSH
42591: LD_INT 2
42593: ARRAY
42594: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42595: LD_ADDR_VAR 0 6
42599: PUSH
42600: LD_VAR 0 7
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PUSH
42609: LD_INT 3
42611: ARRAY
42612: ST_TO_ADDR
// if InArea ( x , y , area ) then
42613: LD_VAR 0 5
42617: PPUSH
42618: LD_VAR 0 6
42622: PPUSH
42623: LD_VAR 0 2
42627: PPUSH
42628: CALL_OW 309
42632: IFFALSE 42643
// ComStop ( unit ) ;
42634: LD_VAR 0 1
42638: PPUSH
42639: CALL_OW 141
// end ;
42643: LD_VAR 0 4
42647: RET
// export function Abs ( value ) ; begin
42648: LD_INT 0
42650: PPUSH
// result := value ;
42651: LD_ADDR_VAR 0 2
42655: PUSH
42656: LD_VAR 0 1
42660: ST_TO_ADDR
// if value < 0 then
42661: LD_VAR 0 1
42665: PUSH
42666: LD_INT 0
42668: LESS
42669: IFFALSE 42686
// result := value * - 1 ;
42671: LD_ADDR_VAR 0 2
42675: PUSH
42676: LD_VAR 0 1
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: MUL
42685: ST_TO_ADDR
// end ;
42686: LD_VAR 0 2
42690: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42691: LD_INT 0
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
// if not unit or not building then
42701: LD_VAR 0 1
42705: NOT
42706: IFTRUE 42715
42708: PUSH
42709: LD_VAR 0 2
42713: NOT
42714: OR
42715: IFFALSE 42719
// exit ;
42717: GO 42947
// x := GetX ( building ) ;
42719: LD_ADDR_VAR 0 4
42723: PUSH
42724: LD_VAR 0 2
42728: PPUSH
42729: CALL_OW 250
42733: ST_TO_ADDR
// y := GetY ( building ) ;
42734: LD_ADDR_VAR 0 6
42738: PUSH
42739: LD_VAR 0 2
42743: PPUSH
42744: CALL_OW 251
42748: ST_TO_ADDR
// d := GetDir ( building ) ;
42749: LD_ADDR_VAR 0 8
42753: PUSH
42754: LD_VAR 0 2
42758: PPUSH
42759: CALL_OW 254
42763: ST_TO_ADDR
// r := 4 ;
42764: LD_ADDR_VAR 0 9
42768: PUSH
42769: LD_INT 4
42771: ST_TO_ADDR
// for i := 1 to 5 do
42772: LD_ADDR_VAR 0 10
42776: PUSH
42777: DOUBLE
42778: LD_INT 1
42780: DEC
42781: ST_TO_ADDR
42782: LD_INT 5
42784: PUSH
42785: FOR_TO
42786: IFFALSE 42945
// begin _x := ShiftX ( x , d , r + i ) ;
42788: LD_ADDR_VAR 0 5
42792: PUSH
42793: LD_VAR 0 4
42797: PPUSH
42798: LD_VAR 0 8
42802: PPUSH
42803: LD_VAR 0 9
42807: PUSH
42808: LD_VAR 0 10
42812: PLUS
42813: PPUSH
42814: CALL_OW 272
42818: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42819: LD_ADDR_VAR 0 7
42823: PUSH
42824: LD_VAR 0 6
42828: PPUSH
42829: LD_VAR 0 8
42833: PPUSH
42834: LD_VAR 0 9
42838: PUSH
42839: LD_VAR 0 10
42843: PLUS
42844: PPUSH
42845: CALL_OW 273
42849: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42850: LD_VAR 0 5
42854: PPUSH
42855: LD_VAR 0 7
42859: PPUSH
42860: CALL_OW 488
42864: IFFALSE 42899
42866: PUSH
42867: LD_VAR 0 5
42871: PPUSH
42872: LD_VAR 0 7
42876: PPUSH
42877: CALL_OW 428
42881: PPUSH
42882: CALL_OW 247
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: IN
42897: NOT
42898: AND
42899: IFFALSE 42943
// begin ComMoveXY ( unit , _x , _y ) ;
42901: LD_VAR 0 1
42905: PPUSH
42906: LD_VAR 0 5
42910: PPUSH
42911: LD_VAR 0 7
42915: PPUSH
42916: CALL_OW 111
// result := [ _x , _y ] ;
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_VAR 0 5
42929: PUSH
42930: LD_VAR 0 7
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: ST_TO_ADDR
// exit ;
42939: POP
42940: POP
42941: GO 42947
// end ; end ;
42943: GO 42785
42945: POP
42946: POP
// end ;
42947: LD_VAR 0 3
42951: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42952: LD_INT 0
42954: PPUSH
42955: PPUSH
42956: PPUSH
// result := 0 ;
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 0
42964: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42965: LD_VAR 0 1
42969: PUSH
42970: LD_INT 0
42972: LESS
42973: IFTRUE 42985
42975: PUSH
42976: LD_VAR 0 1
42980: PUSH
42981: LD_INT 8
42983: GREATER
42984: OR
42985: IFTRUE 42997
42987: PUSH
42988: LD_VAR 0 2
42992: PUSH
42993: LD_INT 0
42995: LESS
42996: OR
42997: IFTRUE 43009
42999: PUSH
43000: LD_VAR 0 2
43004: PUSH
43005: LD_INT 8
43007: GREATER
43008: OR
43009: IFFALSE 43013
// exit ;
43011: GO 43088
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43013: LD_ADDR_VAR 0 4
43017: PUSH
43018: LD_INT 22
43020: PUSH
43021: LD_VAR 0 2
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PPUSH
43030: CALL_OW 69
43034: PUSH
43035: FOR_IN
43036: IFFALSE 43086
// begin un := UnitShoot ( i ) ;
43038: LD_ADDR_VAR 0 5
43042: PUSH
43043: LD_VAR 0 4
43047: PPUSH
43048: CALL_OW 504
43052: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43053: LD_VAR 0 5
43057: PPUSH
43058: CALL_OW 255
43062: PUSH
43063: LD_VAR 0 1
43067: EQUAL
43068: IFFALSE 43084
// begin result := un ;
43070: LD_ADDR_VAR 0 3
43074: PUSH
43075: LD_VAR 0 5
43079: ST_TO_ADDR
// exit ;
43080: POP
43081: POP
43082: GO 43088
// end ; end ;
43084: GO 43035
43086: POP
43087: POP
// end ;
43088: LD_VAR 0 3
43092: RET
// export function GetCargoBay ( units ) ; begin
43093: LD_INT 0
43095: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43096: LD_ADDR_VAR 0 2
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: LD_INT 2
43108: PUSH
43109: LD_INT 34
43111: PUSH
43112: LD_INT 12
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 34
43121: PUSH
43122: LD_INT 51
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 34
43131: PUSH
43132: LD_INT 32
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 34
43141: PUSH
43142: LD_INT 89
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: PPUSH
43156: CALL_OW 72
43160: ST_TO_ADDR
// end ;
43161: LD_VAR 0 2
43165: RET
// export function Negate ( value ) ; begin
43166: LD_INT 0
43168: PPUSH
// result := not value ;
43169: LD_ADDR_VAR 0 2
43173: PUSH
43174: LD_VAR 0 1
43178: NOT
43179: ST_TO_ADDR
// end ;
43180: LD_VAR 0 2
43184: RET
// export function Inc ( value ) ; begin
43185: LD_INT 0
43187: PPUSH
// result := value + 1 ;
43188: LD_ADDR_VAR 0 2
43192: PUSH
43193: LD_VAR 0 1
43197: PUSH
43198: LD_INT 1
43200: PLUS
43201: ST_TO_ADDR
// end ;
43202: LD_VAR 0 2
43206: RET
// export function Dec ( value ) ; begin
43207: LD_INT 0
43209: PPUSH
// result := value - 1 ;
43210: LD_ADDR_VAR 0 2
43214: PUSH
43215: LD_VAR 0 1
43219: PUSH
43220: LD_INT 1
43222: MINUS
43223: ST_TO_ADDR
// end ;
43224: LD_VAR 0 2
43228: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43229: LD_INT 0
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
43237: PPUSH
43238: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43239: LD_VAR 0 1
43243: PPUSH
43244: LD_VAR 0 2
43248: PPUSH
43249: CALL_OW 488
43253: NOT
43254: IFTRUE 43273
43256: PUSH
43257: LD_VAR 0 3
43261: PPUSH
43262: LD_VAR 0 4
43266: PPUSH
43267: CALL_OW 488
43271: NOT
43272: OR
43273: IFFALSE 43286
// begin result := - 1 ;
43275: LD_ADDR_VAR 0 5
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: ST_TO_ADDR
// exit ;
43284: GO 43521
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43286: LD_ADDR_VAR 0 12
43290: PUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: LD_VAR 0 2
43300: PPUSH
43301: LD_VAR 0 3
43305: PPUSH
43306: LD_VAR 0 4
43310: PPUSH
43311: CALL 42357 0 4
43315: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43316: LD_ADDR_VAR 0 11
43320: PUSH
43321: LD_VAR 0 1
43325: PPUSH
43326: LD_VAR 0 2
43330: PPUSH
43331: LD_VAR 0 12
43335: PUSH
43336: LD_INT 1
43338: ARRAY
43339: PPUSH
43340: LD_VAR 0 12
43344: PUSH
43345: LD_INT 2
43347: ARRAY
43348: PPUSH
43349: CALL_OW 298
43353: ST_TO_ADDR
// distance := 9999 ;
43354: LD_ADDR_VAR 0 10
43358: PUSH
43359: LD_INT 9999
43361: ST_TO_ADDR
// for i := 0 to 5 do
43362: LD_ADDR_VAR 0 6
43366: PUSH
43367: DOUBLE
43368: LD_INT 0
43370: DEC
43371: ST_TO_ADDR
43372: LD_INT 5
43374: PUSH
43375: FOR_TO
43376: IFFALSE 43519
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43378: LD_ADDR_VAR 0 7
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: LD_VAR 0 6
43392: PPUSH
43393: LD_VAR 0 11
43397: PPUSH
43398: CALL_OW 272
43402: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43403: LD_ADDR_VAR 0 8
43407: PUSH
43408: LD_VAR 0 2
43412: PPUSH
43413: LD_VAR 0 6
43417: PPUSH
43418: LD_VAR 0 11
43422: PPUSH
43423: CALL_OW 273
43427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43428: LD_VAR 0 7
43432: PPUSH
43433: LD_VAR 0 8
43437: PPUSH
43438: CALL_OW 488
43442: NOT
43443: IFFALSE 43447
// continue ;
43445: GO 43375
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43447: LD_ADDR_VAR 0 9
43451: PUSH
43452: LD_VAR 0 12
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: PPUSH
43461: LD_VAR 0 12
43465: PUSH
43466: LD_INT 2
43468: ARRAY
43469: PPUSH
43470: LD_VAR 0 7
43474: PPUSH
43475: LD_VAR 0 8
43479: PPUSH
43480: CALL_OW 298
43484: ST_TO_ADDR
// if tmp < distance then
43485: LD_VAR 0 9
43489: PUSH
43490: LD_VAR 0 10
43494: LESS
43495: IFFALSE 43517
// begin result := i ;
43497: LD_ADDR_VAR 0 5
43501: PUSH
43502: LD_VAR 0 6
43506: ST_TO_ADDR
// distance := tmp ;
43507: LD_ADDR_VAR 0 10
43511: PUSH
43512: LD_VAR 0 9
43516: ST_TO_ADDR
// end ; end ;
43517: GO 43375
43519: POP
43520: POP
// end ;
43521: LD_VAR 0 5
43525: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43526: LD_INT 0
43528: PPUSH
43529: PPUSH
// if not driver or not IsInUnit ( driver ) then
43530: LD_VAR 0 1
43534: NOT
43535: IFTRUE 43549
43537: PUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: CALL_OW 310
43547: NOT
43548: OR
43549: IFFALSE 43553
// exit ;
43551: GO 43643
// vehicle := IsInUnit ( driver ) ;
43553: LD_ADDR_VAR 0 3
43557: PUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: CALL_OW 310
43567: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43568: LD_VAR 0 1
43572: PPUSH
43573: LD_STRING \
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: PUSH
43603: LD_STRING E
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_VAR 0 3
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PPUSH
43639: CALL_OW 446
// end ;
43643: LD_VAR 0 2
43647: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43648: LD_INT 0
43650: PPUSH
43651: PPUSH
// if not driver or not IsInUnit ( driver ) then
43652: LD_VAR 0 1
43656: NOT
43657: IFTRUE 43671
43659: PUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: CALL_OW 310
43669: NOT
43670: OR
43671: IFFALSE 43675
// exit ;
43673: GO 43765
// vehicle := IsInUnit ( driver ) ;
43675: LD_ADDR_VAR 0 3
43679: PUSH
43680: LD_VAR 0 1
43684: PPUSH
43685: CALL_OW 310
43689: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43690: LD_VAR 0 1
43694: PPUSH
43695: LD_STRING \
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: PUSH
43725: LD_STRING E
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_VAR 0 3
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PPUSH
43761: CALL_OW 447
// end ;
43765: LD_VAR 0 2
43769: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43770: LD_INT 0
43772: PPUSH
43773: PPUSH
43774: PPUSH
// tmp := [ ] ;
43775: LD_ADDR_VAR 0 5
43779: PUSH
43780: EMPTY
43781: ST_TO_ADDR
// for i in units do
43782: LD_ADDR_VAR 0 4
43786: PUSH
43787: LD_VAR 0 1
43791: PUSH
43792: FOR_IN
43793: IFFALSE 43831
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43795: LD_ADDR_VAR 0 5
43799: PUSH
43800: LD_VAR 0 5
43804: PPUSH
43805: LD_VAR 0 5
43809: PUSH
43810: LD_INT 1
43812: PLUS
43813: PPUSH
43814: LD_VAR 0 4
43818: PPUSH
43819: CALL_OW 256
43823: PPUSH
43824: CALL_OW 2
43828: ST_TO_ADDR
43829: GO 43792
43831: POP
43832: POP
// if not tmp then
43833: LD_VAR 0 5
43837: NOT
43838: IFFALSE 43842
// exit ;
43840: GO 43890
// if asc then
43842: LD_VAR 0 2
43846: IFFALSE 43870
// result := SortListByListAsc ( units , tmp ) else
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_VAR 0 5
43862: PPUSH
43863: CALL_OW 76
43867: ST_TO_ADDR
43868: GO 43890
// result := SortListByListDesc ( units , tmp ) ;
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_VAR 0 1
43879: PPUSH
43880: LD_VAR 0 5
43884: PPUSH
43885: CALL_OW 77
43889: ST_TO_ADDR
// end ;
43890: LD_VAR 0 3
43894: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43895: LD_INT 0
43897: PPUSH
43898: PPUSH
// task := GetTaskList ( mech ) ;
43899: LD_ADDR_VAR 0 4
43903: PUSH
43904: LD_VAR 0 1
43908: PPUSH
43909: CALL_OW 437
43913: ST_TO_ADDR
// if not task then
43914: LD_VAR 0 4
43918: NOT
43919: IFFALSE 43923
// exit ;
43921: GO 43967
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_VAR 0 4
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PUSH
43941: LD_STRING r
43943: EQUAL
43944: IFFALSE 43966
43946: PUSH
43947: LD_VAR 0 4
43951: PUSH
43952: LD_INT 1
43954: ARRAY
43955: PUSH
43956: LD_INT 4
43958: ARRAY
43959: PUSH
43960: LD_VAR 0 2
43964: EQUAL
43965: AND
43966: ST_TO_ADDR
// end ;
43967: LD_VAR 0 3
43971: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43972: LD_INT 0
43974: PPUSH
// SetDir ( unit , d ) ;
43975: LD_VAR 0 1
43979: PPUSH
43980: LD_VAR 0 4
43984: PPUSH
43985: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43989: LD_ADDR_VAR 0 6
43993: PUSH
43994: LD_VAR 0 1
43998: PPUSH
43999: LD_VAR 0 2
44003: PPUSH
44004: LD_VAR 0 3
44008: PPUSH
44009: LD_VAR 0 5
44013: PPUSH
44014: CALL_OW 48
44018: ST_TO_ADDR
// end ;
44019: LD_VAR 0 6
44023: RET
// export function ToNaturalNumber ( number ) ; begin
44024: LD_INT 0
44026: PPUSH
// result := number div 1 ;
44027: LD_ADDR_VAR 0 2
44031: PUSH
44032: LD_VAR 0 1
44036: PUSH
44037: LD_INT 1
44039: DIV
44040: ST_TO_ADDR
// if number < 0 then
44041: LD_VAR 0 1
44045: PUSH
44046: LD_INT 0
44048: LESS
44049: IFFALSE 44059
// result := 0 ;
44051: LD_ADDR_VAR 0 2
44055: PUSH
44056: LD_INT 0
44058: ST_TO_ADDR
// end ;
44059: LD_VAR 0 2
44063: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
44064: LD_INT 0
44066: PPUSH
44067: PPUSH
44068: PPUSH
// if not buildings then
44069: LD_VAR 0 1
44073: NOT
44074: IFFALSE 44078
// exit ;
44076: GO 44193
// tmp := [ ] ;
44078: LD_ADDR_VAR 0 5
44082: PUSH
44083: EMPTY
44084: ST_TO_ADDR
// for b in buildings do
44085: LD_ADDR_VAR 0 4
44089: PUSH
44090: LD_VAR 0 1
44094: PUSH
44095: FOR_IN
44096: IFFALSE 44134
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
44098: LD_ADDR_VAR 0 5
44102: PUSH
44103: LD_VAR 0 5
44107: PPUSH
44108: LD_VAR 0 5
44112: PUSH
44113: LD_INT 1
44115: PLUS
44116: PPUSH
44117: LD_VAR 0 4
44121: PPUSH
44122: CALL_OW 266
44126: PPUSH
44127: CALL_OW 1
44131: ST_TO_ADDR
44132: GO 44095
44134: POP
44135: POP
// if not tmp then
44136: LD_VAR 0 5
44140: NOT
44141: IFFALSE 44145
// exit ;
44143: GO 44193
// if asc then
44145: LD_VAR 0 2
44149: IFFALSE 44173
// result := SortListByListAsc ( buildings , tmp ) else
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: LD_VAR 0 1
44160: PPUSH
44161: LD_VAR 0 5
44165: PPUSH
44166: CALL_OW 76
44170: ST_TO_ADDR
44171: GO 44193
// result := SortListByListDesc ( buildings , tmp ) ;
44173: LD_ADDR_VAR 0 3
44177: PUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: LD_VAR 0 5
44187: PPUSH
44188: CALL_OW 77
44192: ST_TO_ADDR
// end ;
44193: LD_VAR 0 3
44197: RET
// export function SortByClass ( units , class ) ; var un ; begin
44198: LD_INT 0
44200: PPUSH
44201: PPUSH
// if not units or not class then
44202: LD_VAR 0 1
44206: NOT
44207: IFTRUE 44216
44209: PUSH
44210: LD_VAR 0 2
44214: NOT
44215: OR
44216: IFFALSE 44220
// exit ;
44218: GO 44315
// result := [ ] ;
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: EMPTY
44226: ST_TO_ADDR
// for un in units do
44227: LD_ADDR_VAR 0 4
44231: PUSH
44232: LD_VAR 0 1
44236: PUSH
44237: FOR_IN
44238: IFFALSE 44313
// if GetClass ( un ) = class then
44240: LD_VAR 0 4
44244: PPUSH
44245: CALL_OW 257
44249: PUSH
44250: LD_VAR 0 2
44254: EQUAL
44255: IFFALSE 44282
// result := Insert ( result , 1 , un ) else
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_VAR 0 3
44266: PPUSH
44267: LD_INT 1
44269: PPUSH
44270: LD_VAR 0 4
44274: PPUSH
44275: CALL_OW 2
44279: ST_TO_ADDR
44280: GO 44311
// result := Replace ( result , result + 1 , un ) ;
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_VAR 0 3
44291: PPUSH
44292: LD_VAR 0 3
44296: PUSH
44297: LD_INT 1
44299: PLUS
44300: PPUSH
44301: LD_VAR 0 4
44305: PPUSH
44306: CALL_OW 1
44310: ST_TO_ADDR
44311: GO 44237
44313: POP
44314: POP
// end ;
44315: LD_VAR 0 3
44319: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44320: LD_INT 0
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
// result := [ ] ;
44329: LD_ADDR_VAR 0 4
44333: PUSH
44334: EMPTY
44335: ST_TO_ADDR
// if x - r < 0 then
44336: LD_VAR 0 1
44340: PUSH
44341: LD_VAR 0 3
44345: MINUS
44346: PUSH
44347: LD_INT 0
44349: LESS
44350: IFFALSE 44362
// min_x := 0 else
44352: LD_ADDR_VAR 0 8
44356: PUSH
44357: LD_INT 0
44359: ST_TO_ADDR
44360: GO 44378
// min_x := x - r ;
44362: LD_ADDR_VAR 0 8
44366: PUSH
44367: LD_VAR 0 1
44371: PUSH
44372: LD_VAR 0 3
44376: MINUS
44377: ST_TO_ADDR
// if y - r < 0 then
44378: LD_VAR 0 2
44382: PUSH
44383: LD_VAR 0 3
44387: MINUS
44388: PUSH
44389: LD_INT 0
44391: LESS
44392: IFFALSE 44404
// min_y := 0 else
44394: LD_ADDR_VAR 0 7
44398: PUSH
44399: LD_INT 0
44401: ST_TO_ADDR
44402: GO 44420
// min_y := y - r ;
44404: LD_ADDR_VAR 0 7
44408: PUSH
44409: LD_VAR 0 2
44413: PUSH
44414: LD_VAR 0 3
44418: MINUS
44419: ST_TO_ADDR
// max_x := x + r ;
44420: LD_ADDR_VAR 0 9
44424: PUSH
44425: LD_VAR 0 1
44429: PUSH
44430: LD_VAR 0 3
44434: PLUS
44435: ST_TO_ADDR
// max_y := y + r ;
44436: LD_ADDR_VAR 0 10
44440: PUSH
44441: LD_VAR 0 2
44445: PUSH
44446: LD_VAR 0 3
44450: PLUS
44451: ST_TO_ADDR
// for _x = min_x to max_x do
44452: LD_ADDR_VAR 0 5
44456: PUSH
44457: DOUBLE
44458: LD_VAR 0 8
44462: DEC
44463: ST_TO_ADDR
44464: LD_VAR 0 9
44468: PUSH
44469: FOR_TO
44470: IFFALSE 44571
// for _y = min_y to max_y do
44472: LD_ADDR_VAR 0 6
44476: PUSH
44477: DOUBLE
44478: LD_VAR 0 7
44482: DEC
44483: ST_TO_ADDR
44484: LD_VAR 0 10
44488: PUSH
44489: FOR_TO
44490: IFFALSE 44567
// begin if not ValidHex ( _x , _y ) then
44492: LD_VAR 0 5
44496: PPUSH
44497: LD_VAR 0 6
44501: PPUSH
44502: CALL_OW 488
44506: NOT
44507: IFFALSE 44511
// continue ;
44509: GO 44489
// if GetResourceTypeXY ( _x , _y ) then
44511: LD_VAR 0 5
44515: PPUSH
44516: LD_VAR 0 6
44520: PPUSH
44521: CALL_OW 283
44525: IFFALSE 44565
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44527: LD_ADDR_VAR 0 4
44531: PUSH
44532: LD_VAR 0 4
44536: PPUSH
44537: LD_VAR 0 4
44541: PUSH
44542: LD_INT 1
44544: PLUS
44545: PPUSH
44546: LD_VAR 0 5
44550: PUSH
44551: LD_VAR 0 6
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PPUSH
44560: CALL_OW 1
44564: ST_TO_ADDR
// end ;
44565: GO 44489
44567: POP
44568: POP
44569: GO 44469
44571: POP
44572: POP
// end ;
44573: LD_VAR 0 4
44577: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44578: LD_INT 0
44580: PPUSH
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
// if not units then
44588: LD_VAR 0 1
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 45129
// result := UnitFilter ( units , [ f_ok ] ) ;
44597: LD_ADDR_VAR 0 3
44601: PUSH
44602: LD_VAR 0 1
44606: PPUSH
44607: LD_INT 50
44609: PUSH
44610: EMPTY
44611: LIST
44612: PPUSH
44613: CALL_OW 72
44617: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44618: LD_ADDR_VAR 0 8
44622: PUSH
44623: LD_VAR 0 1
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PPUSH
44632: CALL_OW 255
44636: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44637: LD_ADDR_VAR 0 10
44641: PUSH
44642: LD_INT 29
44644: PUSH
44645: LD_INT 91
44647: PUSH
44648: LD_INT 49
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// if not result then
44656: LD_VAR 0 3
44660: NOT
44661: IFFALSE 44665
// exit ;
44663: GO 45129
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44665: LD_ADDR_VAR 0 5
44669: PUSH
44670: LD_INT 81
44672: PUSH
44673: LD_VAR 0 8
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PPUSH
44682: CALL_OW 69
44686: ST_TO_ADDR
// for i in result do
44687: LD_ADDR_VAR 0 4
44691: PUSH
44692: LD_VAR 0 3
44696: PUSH
44697: FOR_IN
44698: IFFALSE 45127
// begin tag := GetTag ( i ) + 1 ;
44700: LD_ADDR_VAR 0 9
44704: PUSH
44705: LD_VAR 0 4
44709: PPUSH
44710: CALL_OW 110
44714: PUSH
44715: LD_INT 1
44717: PLUS
44718: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44719: LD_ADDR_VAR 0 7
44723: PUSH
44724: LD_VAR 0 4
44728: PPUSH
44729: CALL_OW 250
44733: PPUSH
44734: LD_VAR 0 4
44738: PPUSH
44739: CALL_OW 251
44743: PPUSH
44744: LD_INT 4
44746: PPUSH
44747: CALL 44320 0 3
44751: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44752: LD_VAR 0 4
44756: PPUSH
44757: CALL_OW 247
44761: PUSH
44762: LD_INT 2
44764: EQUAL
44765: IFFALSE 44777
44767: PUSH
44768: LD_VAR 0 7
44772: PUSH
44773: LD_INT 2
44775: GREATER
44776: AND
44777: IFFALSE 44797
44779: PUSH
44780: LD_VAR 0 4
44784: PPUSH
44785: CALL_OW 264
44789: PUSH
44790: LD_VAR 0 10
44794: IN
44795: NOT
44796: AND
44797: IFFALSE 44836
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44799: LD_VAR 0 4
44803: PPUSH
44804: LD_VAR 0 7
44808: PUSH
44809: LD_INT 1
44811: ARRAY
44812: PUSH
44813: LD_INT 1
44815: ARRAY
44816: PPUSH
44817: LD_VAR 0 7
44821: PUSH
44822: LD_INT 1
44824: ARRAY
44825: PUSH
44826: LD_INT 2
44828: ARRAY
44829: PPUSH
44830: CALL_OW 116
44834: GO 45125
// if path > tag then
44836: LD_VAR 0 2
44840: PUSH
44841: LD_VAR 0 9
44845: GREATER
44846: IFFALSE 45054
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44848: LD_ADDR_VAR 0 6
44852: PUSH
44853: LD_VAR 0 5
44857: PPUSH
44858: LD_INT 91
44860: PUSH
44861: LD_VAR 0 4
44865: PUSH
44866: LD_INT 8
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: PPUSH
44874: CALL_OW 72
44878: ST_TO_ADDR
// if nearEnemy then
44879: LD_VAR 0 6
44883: IFFALSE 44952
// begin if GetWeapon ( i ) = ru_time_lapser then
44885: LD_VAR 0 4
44889: PPUSH
44890: CALL_OW 264
44894: PUSH
44895: LD_INT 49
44897: EQUAL
44898: IFFALSE 44926
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44900: LD_VAR 0 4
44904: PPUSH
44905: LD_VAR 0 6
44909: PPUSH
44910: LD_VAR 0 4
44914: PPUSH
44915: CALL_OW 74
44919: PPUSH
44920: CALL_OW 112
44924: GO 44950
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44926: LD_VAR 0 4
44930: PPUSH
44931: LD_VAR 0 6
44935: PPUSH
44936: LD_VAR 0 4
44940: PPUSH
44941: CALL_OW 74
44945: PPUSH
44946: CALL 46210 0 2
// end else
44950: GO 45052
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44952: LD_VAR 0 4
44956: PPUSH
44957: LD_VAR 0 2
44961: PUSH
44962: LD_VAR 0 9
44966: ARRAY
44967: PUSH
44968: LD_INT 1
44970: ARRAY
44971: PPUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_VAR 0 9
44981: ARRAY
44982: PUSH
44983: LD_INT 2
44985: ARRAY
44986: PPUSH
44987: CALL_OW 297
44991: PUSH
44992: LD_INT 6
44994: GREATER
44995: IFFALSE 45038
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44997: LD_VAR 0 4
45001: PPUSH
45002: LD_VAR 0 2
45006: PUSH
45007: LD_VAR 0 9
45011: ARRAY
45012: PUSH
45013: LD_INT 1
45015: ARRAY
45016: PPUSH
45017: LD_VAR 0 2
45021: PUSH
45022: LD_VAR 0 9
45026: ARRAY
45027: PUSH
45028: LD_INT 2
45030: ARRAY
45031: PPUSH
45032: CALL_OW 114
45036: GO 45052
// SetTag ( i , tag ) ;
45038: LD_VAR 0 4
45042: PPUSH
45043: LD_VAR 0 9
45047: PPUSH
45048: CALL_OW 109
// end else
45052: GO 45125
// if enemy then
45054: LD_VAR 0 5
45058: IFFALSE 45125
// begin if GetWeapon ( i ) = ru_time_lapser then
45060: LD_VAR 0 4
45064: PPUSH
45065: CALL_OW 264
45069: PUSH
45070: LD_INT 49
45072: EQUAL
45073: IFFALSE 45101
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45075: LD_VAR 0 4
45079: PPUSH
45080: LD_VAR 0 5
45084: PPUSH
45085: LD_VAR 0 4
45089: PPUSH
45090: CALL_OW 74
45094: PPUSH
45095: CALL_OW 112
45099: GO 45125
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45101: LD_VAR 0 4
45105: PPUSH
45106: LD_VAR 0 5
45110: PPUSH
45111: LD_VAR 0 4
45115: PPUSH
45116: CALL_OW 74
45120: PPUSH
45121: CALL 46210 0 2
// end ; end ;
45125: GO 44697
45127: POP
45128: POP
// end ;
45129: LD_VAR 0 3
45133: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45134: LD_INT 0
45136: PPUSH
45137: PPUSH
45138: PPUSH
// if not unit or IsInUnit ( unit ) then
45139: LD_VAR 0 1
45143: NOT
45144: IFTRUE 45157
45146: PUSH
45147: LD_VAR 0 1
45151: PPUSH
45152: CALL_OW 310
45156: OR
45157: IFFALSE 45161
// exit ;
45159: GO 45252
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45161: LD_ADDR_VAR 0 4
45165: PUSH
45166: LD_VAR 0 1
45170: PPUSH
45171: CALL_OW 250
45175: PPUSH
45176: LD_VAR 0 2
45180: PPUSH
45181: LD_INT 1
45183: PPUSH
45184: CALL_OW 272
45188: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: LD_VAR 0 1
45198: PPUSH
45199: CALL_OW 251
45203: PPUSH
45204: LD_VAR 0 2
45208: PPUSH
45209: LD_INT 1
45211: PPUSH
45212: CALL_OW 273
45216: ST_TO_ADDR
// if ValidHex ( x , y ) then
45217: LD_VAR 0 4
45221: PPUSH
45222: LD_VAR 0 5
45226: PPUSH
45227: CALL_OW 488
45231: IFFALSE 45252
// ComTurnXY ( unit , x , y ) ;
45233: LD_VAR 0 1
45237: PPUSH
45238: LD_VAR 0 4
45242: PPUSH
45243: LD_VAR 0 5
45247: PPUSH
45248: CALL_OW 118
// end ;
45252: LD_VAR 0 3
45256: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45257: LD_INT 0
45259: PPUSH
45260: PPUSH
// result := false ;
45261: LD_ADDR_VAR 0 3
45265: PUSH
45266: LD_INT 0
45268: ST_TO_ADDR
// if not units then
45269: LD_VAR 0 2
45273: NOT
45274: IFFALSE 45278
// exit ;
45276: GO 45323
// for i in units do
45278: LD_ADDR_VAR 0 4
45282: PUSH
45283: LD_VAR 0 2
45287: PUSH
45288: FOR_IN
45289: IFFALSE 45321
// if See ( side , i ) then
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_VAR 0 4
45300: PPUSH
45301: CALL_OW 292
45305: IFFALSE 45319
// begin result := true ;
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_INT 1
45314: ST_TO_ADDR
// exit ;
45315: POP
45316: POP
45317: GO 45323
// end ;
45319: GO 45288
45321: POP
45322: POP
// end ;
45323: LD_VAR 0 3
45327: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45328: LD_INT 0
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
// if not unit or not points then
45334: LD_VAR 0 1
45338: NOT
45339: IFTRUE 45348
45341: PUSH
45342: LD_VAR 0 2
45346: NOT
45347: OR
45348: IFFALSE 45352
// exit ;
45350: GO 45442
// dist := 99999 ;
45352: LD_ADDR_VAR 0 5
45356: PUSH
45357: LD_INT 99999
45359: ST_TO_ADDR
// for i in points do
45360: LD_ADDR_VAR 0 4
45364: PUSH
45365: LD_VAR 0 2
45369: PUSH
45370: FOR_IN
45371: IFFALSE 45440
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45373: LD_ADDR_VAR 0 6
45377: PUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: LD_VAR 0 4
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PPUSH
45392: LD_VAR 0 4
45396: PUSH
45397: LD_INT 2
45399: ARRAY
45400: PPUSH
45401: CALL_OW 297
45405: ST_TO_ADDR
// if tmpDist < dist then
45406: LD_VAR 0 6
45410: PUSH
45411: LD_VAR 0 5
45415: LESS
45416: IFFALSE 45438
// begin result := i ;
45418: LD_ADDR_VAR 0 3
45422: PUSH
45423: LD_VAR 0 4
45427: ST_TO_ADDR
// dist := tmpDist ;
45428: LD_ADDR_VAR 0 5
45432: PUSH
45433: LD_VAR 0 6
45437: ST_TO_ADDR
// end ; end ;
45438: GO 45370
45440: POP
45441: POP
// end ;
45442: LD_VAR 0 3
45446: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45447: LD_INT 0
45449: PPUSH
// uc_side := side ;
45450: LD_ADDR_OWVAR 20
45454: PUSH
45455: LD_VAR 0 1
45459: ST_TO_ADDR
// uc_nation := 3 ;
45460: LD_ADDR_OWVAR 21
45464: PUSH
45465: LD_INT 3
45467: ST_TO_ADDR
// vc_chassis := 25 ;
45468: LD_ADDR_OWVAR 37
45472: PUSH
45473: LD_INT 25
45475: ST_TO_ADDR
// vc_engine := engine_siberite ;
45476: LD_ADDR_OWVAR 39
45480: PUSH
45481: LD_INT 3
45483: ST_TO_ADDR
// vc_control := control_computer ;
45484: LD_ADDR_OWVAR 38
45488: PUSH
45489: LD_INT 3
45491: ST_TO_ADDR
// vc_weapon := 59 ;
45492: LD_ADDR_OWVAR 40
45496: PUSH
45497: LD_INT 59
45499: ST_TO_ADDR
// result := CreateVehicle ;
45500: LD_ADDR_VAR 0 5
45504: PUSH
45505: CALL_OW 45
45509: ST_TO_ADDR
// SetDir ( result , d ) ;
45510: LD_VAR 0 5
45514: PPUSH
45515: LD_VAR 0 4
45519: PPUSH
45520: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45524: LD_VAR 0 5
45528: PPUSH
45529: LD_VAR 0 2
45533: PPUSH
45534: LD_VAR 0 3
45538: PPUSH
45539: LD_INT 0
45541: PPUSH
45542: CALL_OW 48
// end ;
45546: LD_VAR 0 5
45550: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45551: LD_INT 0
45553: PPUSH
45554: PPUSH
45555: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45556: LD_ADDR_VAR 0 2
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45579: LD_VAR 0 1
45583: NOT
45584: IFTRUE 45617
45586: PUSH
45587: LD_VAR 0 1
45591: PPUSH
45592: CALL_OW 264
45596: PUSH
45597: LD_INT 12
45599: PUSH
45600: LD_INT 51
45602: PUSH
45603: LD_INT 32
45605: PUSH
45606: LD_INT 89
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: IN
45615: NOT
45616: OR
45617: IFFALSE 45621
// exit ;
45619: GO 45719
// for i := 1 to 3 do
45621: LD_ADDR_VAR 0 3
45625: PUSH
45626: DOUBLE
45627: LD_INT 1
45629: DEC
45630: ST_TO_ADDR
45631: LD_INT 3
45633: PUSH
45634: FOR_TO
45635: IFFALSE 45717
// begin tmp := GetCargo ( cargo , i ) ;
45637: LD_ADDR_VAR 0 4
45641: PUSH
45642: LD_VAR 0 1
45646: PPUSH
45647: LD_VAR 0 3
45651: PPUSH
45652: CALL_OW 289
45656: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45657: LD_ADDR_VAR 0 2
45661: PUSH
45662: LD_VAR 0 2
45666: PPUSH
45667: LD_VAR 0 3
45671: PPUSH
45672: LD_VAR 0 4
45676: PPUSH
45677: CALL_OW 1
45681: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45682: LD_ADDR_VAR 0 2
45686: PUSH
45687: LD_VAR 0 2
45691: PPUSH
45692: LD_INT 4
45694: PPUSH
45695: LD_VAR 0 2
45699: PUSH
45700: LD_INT 4
45702: ARRAY
45703: PUSH
45704: LD_VAR 0 4
45708: PLUS
45709: PPUSH
45710: CALL_OW 1
45714: ST_TO_ADDR
// end ;
45715: GO 45634
45717: POP
45718: POP
// end ;
45719: LD_VAR 0 2
45723: RET
// export function Length ( array ) ; begin
45724: LD_INT 0
45726: PPUSH
// result := array + 0 ;
45727: LD_ADDR_VAR 0 2
45731: PUSH
45732: LD_VAR 0 1
45736: PUSH
45737: LD_INT 0
45739: PLUS
45740: ST_TO_ADDR
// end ;
45741: LD_VAR 0 2
45745: RET
// export function PrepareArray ( array ) ; begin
45746: LD_INT 0
45748: PPUSH
// result := array diff 0 ;
45749: LD_ADDR_VAR 0 2
45753: PUSH
45754: LD_VAR 0 1
45758: PUSH
45759: LD_INT 0
45761: DIFF
45762: ST_TO_ADDR
// if not result [ 1 ] then
45763: LD_VAR 0 2
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: NOT
45772: IFFALSE 45792
// result := Delete ( result , 1 ) ;
45774: LD_ADDR_VAR 0 2
45778: PUSH
45779: LD_VAR 0 2
45783: PPUSH
45784: LD_INT 1
45786: PPUSH
45787: CALL_OW 3
45791: ST_TO_ADDR
// end ;
45792: LD_VAR 0 2
45796: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45797: LD_INT 0
45799: PPUSH
45800: PPUSH
45801: PPUSH
45802: PPUSH
// sibRocketRange := 25 ;
45803: LD_ADDR_VAR 0 6
45807: PUSH
45808: LD_INT 25
45810: ST_TO_ADDR
// result := false ;
45811: LD_ADDR_VAR 0 4
45815: PUSH
45816: LD_INT 0
45818: ST_TO_ADDR
// for i := 0 to 5 do
45819: LD_ADDR_VAR 0 5
45823: PUSH
45824: DOUBLE
45825: LD_INT 0
45827: DEC
45828: ST_TO_ADDR
45829: LD_INT 5
45831: PUSH
45832: FOR_TO
45833: IFFALSE 45900
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45835: LD_VAR 0 1
45839: PPUSH
45840: LD_VAR 0 5
45844: PPUSH
45845: LD_VAR 0 6
45849: PPUSH
45850: CALL_OW 272
45854: PPUSH
45855: LD_VAR 0 2
45859: PPUSH
45860: LD_VAR 0 5
45864: PPUSH
45865: LD_VAR 0 6
45869: PPUSH
45870: CALL_OW 273
45874: PPUSH
45875: LD_VAR 0 3
45879: PPUSH
45880: CALL_OW 309
45884: IFFALSE 45898
// begin result := true ;
45886: LD_ADDR_VAR 0 4
45890: PUSH
45891: LD_INT 1
45893: ST_TO_ADDR
// exit ;
45894: POP
45895: POP
45896: GO 45902
// end ;
45898: GO 45832
45900: POP
45901: POP
// end ;
45902: LD_VAR 0 4
45906: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45907: LD_INT 0
45909: PPUSH
45910: PPUSH
45911: PPUSH
// if btype = b_depot then
45912: LD_VAR 0 2
45916: PUSH
45917: LD_INT 0
45919: EQUAL
45920: IFFALSE 45932
// begin result := true ;
45922: LD_ADDR_VAR 0 3
45926: PUSH
45927: LD_INT 1
45929: ST_TO_ADDR
// exit ;
45930: GO 46052
// end ; pom := GetBase ( depot ) ;
45932: LD_ADDR_VAR 0 4
45936: PUSH
45937: LD_VAR 0 1
45941: PPUSH
45942: CALL_OW 274
45946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45947: LD_ADDR_VAR 0 5
45951: PUSH
45952: LD_VAR 0 2
45956: PPUSH
45957: LD_VAR 0 1
45961: PPUSH
45962: CALL_OW 248
45966: PPUSH
45967: CALL_OW 450
45971: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45972: LD_ADDR_VAR 0 3
45976: PUSH
45977: LD_VAR 0 4
45981: PPUSH
45982: LD_INT 1
45984: PPUSH
45985: CALL_OW 275
45989: PUSH
45990: LD_VAR 0 5
45994: PUSH
45995: LD_INT 1
45997: ARRAY
45998: GREATEREQUAL
45999: IFFALSE 46025
46001: PUSH
46002: LD_VAR 0 4
46006: PPUSH
46007: LD_INT 2
46009: PPUSH
46010: CALL_OW 275
46014: PUSH
46015: LD_VAR 0 5
46019: PUSH
46020: LD_INT 2
46022: ARRAY
46023: GREATEREQUAL
46024: AND
46025: IFFALSE 46051
46027: PUSH
46028: LD_VAR 0 4
46032: PPUSH
46033: LD_INT 3
46035: PPUSH
46036: CALL_OW 275
46040: PUSH
46041: LD_VAR 0 5
46045: PUSH
46046: LD_INT 3
46048: ARRAY
46049: GREATEREQUAL
46050: AND
46051: ST_TO_ADDR
// end ;
46052: LD_VAR 0 3
46056: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
46057: LD_INT 0
46059: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
46060: LD_VAR 0 1
46064: PPUSH
46065: LD_VAR 0 2
46069: PPUSH
46070: LD_INT 0
46072: PPUSH
46073: LD_INT 0
46075: PPUSH
46076: LD_INT 1
46078: PPUSH
46079: LD_INT 0
46081: PPUSH
46082: CALL_OW 587
// end ;
46086: LD_VAR 0 3
46090: RET
// export function CenterOnNow ( unit ) ; begin
46091: LD_INT 0
46093: PPUSH
// result := IsInUnit ( unit ) ;
46094: LD_ADDR_VAR 0 2
46098: PUSH
46099: LD_VAR 0 1
46103: PPUSH
46104: CALL_OW 310
46108: ST_TO_ADDR
// if not result then
46109: LD_VAR 0 2
46113: NOT
46114: IFFALSE 46126
// result := unit ;
46116: LD_ADDR_VAR 0 2
46120: PUSH
46121: LD_VAR 0 1
46125: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
46126: LD_VAR 0 1
46130: PPUSH
46131: CALL_OW 87
// end ;
46135: LD_VAR 0 2
46139: RET
// export function ComMoveHex ( unit , hex ) ; begin
46140: LD_INT 0
46142: PPUSH
// if not hex then
46143: LD_VAR 0 2
46147: NOT
46148: IFFALSE 46152
// exit ;
46150: GO 46205
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
46152: LD_VAR 0 2
46156: PUSH
46157: LD_INT 1
46159: ARRAY
46160: PPUSH
46161: LD_VAR 0 2
46165: PUSH
46166: LD_INT 2
46168: ARRAY
46169: PPUSH
46170: CALL_OW 428
46174: IFFALSE 46178
// exit ;
46176: GO 46205
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
46178: LD_VAR 0 1
46182: PPUSH
46183: LD_VAR 0 2
46187: PUSH
46188: LD_INT 1
46190: ARRAY
46191: PPUSH
46192: LD_VAR 0 2
46196: PUSH
46197: LD_INT 2
46199: ARRAY
46200: PPUSH
46201: CALL_OW 111
// end ;
46205: LD_VAR 0 3
46209: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
46210: LD_INT 0
46212: PPUSH
46213: PPUSH
46214: PPUSH
// if not unit or not enemy then
46215: LD_VAR 0 1
46219: NOT
46220: IFTRUE 46229
46222: PUSH
46223: LD_VAR 0 2
46227: NOT
46228: OR
46229: IFFALSE 46233
// exit ;
46231: GO 46359
// x := GetX ( enemy ) ;
46233: LD_ADDR_VAR 0 4
46237: PUSH
46238: LD_VAR 0 2
46242: PPUSH
46243: CALL_OW 250
46247: ST_TO_ADDR
// y := GetY ( enemy ) ;
46248: LD_ADDR_VAR 0 5
46252: PUSH
46253: LD_VAR 0 2
46257: PPUSH
46258: CALL_OW 251
46262: ST_TO_ADDR
// if ValidHex ( x , y ) then
46263: LD_VAR 0 4
46267: PPUSH
46268: LD_VAR 0 5
46272: PPUSH
46273: CALL_OW 488
46277: IFFALSE 46359
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
46279: LD_VAR 0 2
46283: PPUSH
46284: CALL_OW 247
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: IN
46299: IFTRUE 46322
46301: PUSH
46302: LD_VAR 0 1
46306: PPUSH
46307: CALL_OW 255
46311: PPUSH
46312: LD_VAR 0 2
46316: PPUSH
46317: CALL_OW 292
46321: OR
46322: IFFALSE 46340
// ComAttackUnit ( unit , enemy ) else
46324: LD_VAR 0 1
46328: PPUSH
46329: LD_VAR 0 2
46333: PPUSH
46334: CALL_OW 115
46338: GO 46359
// ComAgressiveMove ( unit , x , y ) ;
46340: LD_VAR 0 1
46344: PPUSH
46345: LD_VAR 0 4
46349: PPUSH
46350: LD_VAR 0 5
46354: PPUSH
46355: CALL_OW 114
// end ;
46359: LD_VAR 0 3
46363: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
46364: LD_INT 0
46366: PPUSH
46367: PPUSH
46368: PPUSH
// list := AreaToList ( area , 0 ) ;
46369: LD_ADDR_VAR 0 5
46373: PUSH
46374: LD_VAR 0 1
46378: PPUSH
46379: LD_INT 0
46381: PPUSH
46382: CALL_OW 517
46386: ST_TO_ADDR
// if not list then
46387: LD_VAR 0 5
46391: NOT
46392: IFFALSE 46396
// exit ;
46394: GO 46526
// if all then
46396: LD_VAR 0 2
46400: IFFALSE 46488
// begin for i := 1 to list [ 1 ] do
46402: LD_ADDR_VAR 0 4
46406: PUSH
46407: DOUBLE
46408: LD_INT 1
46410: DEC
46411: ST_TO_ADDR
46412: LD_VAR 0 5
46416: PUSH
46417: LD_INT 1
46419: ARRAY
46420: PUSH
46421: FOR_TO
46422: IFFALSE 46484
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
46424: LD_ADDR_VAR 0 3
46428: PUSH
46429: LD_VAR 0 3
46433: PPUSH
46434: LD_VAR 0 3
46438: PUSH
46439: LD_INT 1
46441: PLUS
46442: PPUSH
46443: LD_VAR 0 5
46447: PUSH
46448: LD_INT 1
46450: ARRAY
46451: PUSH
46452: LD_VAR 0 4
46456: ARRAY
46457: PUSH
46458: LD_VAR 0 5
46462: PUSH
46463: LD_INT 2
46465: ARRAY
46466: PUSH
46467: LD_VAR 0 4
46471: ARRAY
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PPUSH
46477: CALL_OW 1
46481: ST_TO_ADDR
46482: GO 46421
46484: POP
46485: POP
// exit ;
46486: GO 46526
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
46488: LD_ADDR_VAR 0 3
46492: PUSH
46493: LD_VAR 0 5
46497: PUSH
46498: LD_INT 1
46500: ARRAY
46501: PUSH
46502: LD_INT 1
46504: ARRAY
46505: PUSH
46506: LD_VAR 0 5
46510: PUSH
46511: LD_INT 2
46513: ARRAY
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: EMPTY
46524: LIST
46525: ST_TO_ADDR
// end ;
46526: LD_VAR 0 3
46530: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
46531: LD_INT 0
46533: PPUSH
46534: PPUSH
// list := AreaToList ( area , 0 ) ;
46535: LD_ADDR_VAR 0 4
46539: PUSH
46540: LD_VAR 0 1
46544: PPUSH
46545: LD_INT 0
46547: PPUSH
46548: CALL_OW 517
46552: ST_TO_ADDR
// if not list then
46553: LD_VAR 0 4
46557: NOT
46558: IFFALSE 46562
// exit ;
46560: GO 46603
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46562: LD_ADDR_VAR 0 3
46566: PUSH
46567: LD_VAR 0 4
46571: PUSH
46572: LD_INT 1
46574: ARRAY
46575: PUSH
46576: LD_INT 1
46578: ARRAY
46579: PUSH
46580: LD_VAR 0 4
46584: PUSH
46585: LD_INT 2
46587: ARRAY
46588: PUSH
46589: LD_INT 1
46591: ARRAY
46592: PUSH
46593: LD_VAR 0 2
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: ST_TO_ADDR
// end ;
46603: LD_VAR 0 3
46607: RET
// export function First ( array ) ; begin
46608: LD_INT 0
46610: PPUSH
// if not array then
46611: LD_VAR 0 1
46615: NOT
46616: IFFALSE 46620
// exit ;
46618: GO 46634
// result := array [ 1 ] ;
46620: LD_ADDR_VAR 0 2
46624: PUSH
46625: LD_VAR 0 1
46629: PUSH
46630: LD_INT 1
46632: ARRAY
46633: ST_TO_ADDR
// end ;
46634: LD_VAR 0 2
46638: RET
// export function Last ( array ) ; begin
46639: LD_INT 0
46641: PPUSH
// if not array then
46642: LD_VAR 0 1
46646: NOT
46647: IFFALSE 46651
// exit ;
46649: GO 46667
// result := array [ array ] ;
46651: LD_ADDR_VAR 0 2
46655: PUSH
46656: LD_VAR 0 1
46660: PUSH
46661: LD_VAR 0 1
46665: ARRAY
46666: ST_TO_ADDR
// end ;
46667: LD_VAR 0 2
46671: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46672: LD_INT 0
46674: PPUSH
46675: PPUSH
// result := [ ] ;
46676: LD_ADDR_VAR 0 5
46680: PUSH
46681: EMPTY
46682: ST_TO_ADDR
// if not array then
46683: LD_VAR 0 1
46687: NOT
46688: IFFALSE 46692
// exit ;
46690: GO 46804
// for i := 1 to array do
46692: LD_ADDR_VAR 0 6
46696: PUSH
46697: DOUBLE
46698: LD_INT 1
46700: DEC
46701: ST_TO_ADDR
46702: LD_VAR 0 1
46706: PUSH
46707: FOR_TO
46708: IFFALSE 46802
// if array [ i ] [ index ] = value then
46710: LD_VAR 0 1
46714: PUSH
46715: LD_VAR 0 6
46719: ARRAY
46720: PUSH
46721: LD_VAR 0 2
46725: ARRAY
46726: PUSH
46727: LD_VAR 0 3
46731: EQUAL
46732: IFFALSE 46800
// begin if indexColumn then
46734: LD_VAR 0 4
46738: IFFALSE 46774
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46740: LD_ADDR_VAR 0 5
46744: PUSH
46745: LD_VAR 0 5
46749: PPUSH
46750: LD_VAR 0 1
46754: PUSH
46755: LD_VAR 0 6
46759: ARRAY
46760: PUSH
46761: LD_VAR 0 4
46765: ARRAY
46766: PPUSH
46767: CALL 41812 0 2
46771: ST_TO_ADDR
46772: GO 46800
// result := Join ( result , array [ i ] ) ;
46774: LD_ADDR_VAR 0 5
46778: PUSH
46779: LD_VAR 0 5
46783: PPUSH
46784: LD_VAR 0 1
46788: PUSH
46789: LD_VAR 0 6
46793: ARRAY
46794: PPUSH
46795: CALL 41812 0 2
46799: ST_TO_ADDR
// end ;
46800: GO 46707
46802: POP
46803: POP
// end ;
46804: LD_VAR 0 5
46808: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46809: LD_INT 0
46811: PPUSH
// if not vehicles or not parkingPoint then
46812: LD_VAR 0 1
46816: NOT
46817: IFTRUE 46826
46819: PUSH
46820: LD_VAR 0 2
46824: NOT
46825: OR
46826: IFFALSE 46830
// exit ;
46828: GO 46928
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46830: LD_ADDR_VAR 0 1
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: LD_INT 50
46842: PUSH
46843: EMPTY
46844: LIST
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: LD_INT 92
46851: PUSH
46852: LD_VAR 0 2
46856: PUSH
46857: LD_INT 1
46859: ARRAY
46860: PUSH
46861: LD_VAR 0 2
46865: PUSH
46866: LD_INT 2
46868: ARRAY
46869: PUSH
46870: LD_INT 8
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PPUSH
46887: CALL_OW 72
46891: ST_TO_ADDR
// if not vehicles then
46892: LD_VAR 0 1
46896: NOT
46897: IFFALSE 46901
// exit ;
46899: GO 46928
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46901: LD_VAR 0 1
46905: PPUSH
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 1
46913: ARRAY
46914: PPUSH
46915: LD_VAR 0 2
46919: PUSH
46920: LD_INT 2
46922: ARRAY
46923: PPUSH
46924: CALL_OW 111
// end ;
46928: LD_VAR 0 3
46932: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46933: LD_INT 0
46935: PPUSH
46936: PPUSH
46937: PPUSH
// if not side or not area then
46938: LD_VAR 0 1
46942: NOT
46943: IFTRUE 46952
46945: PUSH
46946: LD_VAR 0 2
46950: NOT
46951: OR
46952: IFFALSE 46956
// exit ;
46954: GO 47075
// tmp := AreaToList ( area , 0 ) ;
46956: LD_ADDR_VAR 0 5
46960: PUSH
46961: LD_VAR 0 2
46965: PPUSH
46966: LD_INT 0
46968: PPUSH
46969: CALL_OW 517
46973: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46974: LD_ADDR_VAR 0 4
46978: PUSH
46979: DOUBLE
46980: LD_INT 1
46982: DEC
46983: ST_TO_ADDR
46984: LD_VAR 0 5
46988: PUSH
46989: LD_INT 1
46991: ARRAY
46992: PUSH
46993: FOR_TO
46994: IFFALSE 47073
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46996: LD_VAR 0 5
47000: PUSH
47001: LD_INT 1
47003: ARRAY
47004: PUSH
47005: LD_VAR 0 4
47009: ARRAY
47010: PPUSH
47011: LD_VAR 0 5
47015: PUSH
47016: LD_INT 2
47018: ARRAY
47019: PUSH
47020: LD_VAR 0 4
47024: ARRAY
47025: PPUSH
47026: CALL_OW 351
47030: IFFALSE 47071
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
47032: LD_VAR 0 5
47036: PUSH
47037: LD_INT 1
47039: ARRAY
47040: PUSH
47041: LD_VAR 0 4
47045: ARRAY
47046: PPUSH
47047: LD_VAR 0 5
47051: PUSH
47052: LD_INT 2
47054: ARRAY
47055: PUSH
47056: LD_VAR 0 4
47060: ARRAY
47061: PPUSH
47062: LD_VAR 0 1
47066: PPUSH
47067: CALL_OW 244
// end ;
47071: GO 46993
47073: POP
47074: POP
// end ;
47075: LD_VAR 0 3
47079: RET
// export function UniqueArray ( array ) ; var i ; begin
47080: LD_INT 0
47082: PPUSH
47083: PPUSH
// result := [ ] ;
47084: LD_ADDR_VAR 0 2
47088: PUSH
47089: EMPTY
47090: ST_TO_ADDR
// if not array then
47091: LD_VAR 0 1
47095: NOT
47096: IFFALSE 47100
// exit ;
47098: GO 47161
// for i := 1 to array do
47100: LD_ADDR_VAR 0 3
47104: PUSH
47105: DOUBLE
47106: LD_INT 1
47108: DEC
47109: ST_TO_ADDR
47110: LD_VAR 0 1
47114: PUSH
47115: FOR_TO
47116: IFFALSE 47159
// if not array [ i ] in result then
47118: LD_VAR 0 1
47122: PUSH
47123: LD_VAR 0 3
47127: ARRAY
47128: PUSH
47129: LD_VAR 0 2
47133: IN
47134: NOT
47135: IFFALSE 47157
// result := Join ( result , i ) ;
47137: LD_ADDR_VAR 0 2
47141: PUSH
47142: LD_VAR 0 2
47146: PPUSH
47147: LD_VAR 0 3
47151: PPUSH
47152: CALL 41812 0 2
47156: ST_TO_ADDR
47157: GO 47115
47159: POP
47160: POP
// end ;
47161: LD_VAR 0 2
47165: RET
