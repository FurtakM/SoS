// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1515 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2681 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: LD_STRING 07_Americans
 644: PPUSH
 645: CALL_OW 31
 649: ST_TO_ADDR
// if not americanSquad then
 650: LD_EXP 17
 654: NOT
 655: IFFALSE 720
// begin for i := 1 to 4 do
 657: LD_ADDR_VAR 0 2
 661: PUSH
 662: DOUBLE
 663: LD_INT 1
 665: DEC
 666: ST_TO_ADDR
 667: LD_INT 4
 669: PUSH
 670: FOR_TO
 671: IFFALSE 716
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 673: LD_INT 0
 675: PPUSH
 676: LD_INT 2
 678: PPUSH
 679: LD_INT 4
 681: PPUSH
 682: CALL_OW 12
 686: PPUSH
 687: LD_INT 6
 689: PPUSH
 690: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 694: LD_ADDR_EXP 17
 698: PUSH
 699: LD_EXP 17
 703: PPUSH
 704: CALL_OW 44
 708: PPUSH
 709: CALL 40266 0 2
 713: ST_TO_ADDR
// end ;
 714: GO 670
 716: POP
 717: POP
// end else
 718: GO 771
// begin for i in americanSquad do
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: LD_EXP 17
 729: PUSH
 730: FOR_IN
 731: IFFALSE 769
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 733: LD_VAR 0 2
 737: PPUSH
 738: CALL_OW 257
 742: PUSH
 743: LD_INT 5
 745: PUSH
 746: LD_INT 1
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: IN
 753: IFFALSE 767
// SetClass ( i , class_engineer ) ;
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: CALL_OW 336
 767: GO 730
 769: POP
 770: POP
// end ; uc_side := 2 ;
 771: LD_ADDR_OWVAR 20
 775: PUSH
 776: LD_INT 2
 778: ST_TO_ADDR
// uc_nation := 2 ;
 779: LD_ADDR_OWVAR 21
 783: PUSH
 784: LD_INT 2
 786: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 787: LD_ADDR_EXP 5
 791: PUSH
 792: LD_STRING Heike
 794: PPUSH
 795: LD_EXP 1
 799: NOT
 800: PPUSH
 801: LD_EXP 2
 805: PPUSH
 806: CALL 3585 0 3
 810: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 811: LD_ADDR_EXP 8
 815: PUSH
 816: LD_STRING Ibrahim
 818: PPUSH
 819: LD_EXP 1
 823: NOT
 824: PPUSH
 825: LD_EXP 2
 829: PPUSH
 830: CALL 3585 0 3
 834: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 835: LD_ADDR_EXP 6
 839: PUSH
 840: LD_STRING Givi
 842: PPUSH
 843: LD_EXP 1
 847: NOT
 848: PPUSH
 849: LD_EXP 2
 853: PPUSH
 854: CALL 3585 0 3
 858: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 859: LD_ADDR_EXP 9
 863: PUSH
 864: LD_STRING Kamil
 866: PPUSH
 867: LD_EXP 1
 871: NOT
 872: PPUSH
 873: LD_EXP 2
 877: PPUSH
 878: CALL 3585 0 3
 882: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 883: LD_ADDR_EXP 10
 887: PUSH
 888: LD_STRING Kaia
 890: PPUSH
 891: LD_EXP 1
 895: NOT
 896: PPUSH
 897: LD_EXP 2
 901: PPUSH
 902: CALL 3585 0 3
 906: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 907: LD_ADDR_EXP 11
 911: PUSH
 912: LD_STRING Sophia
 914: PPUSH
 915: LD_EXP 1
 919: NOT
 920: PPUSH
 921: LD_EXP 2
 925: PPUSH
 926: CALL 3585 0 3
 930: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 931: LD_ADDR_EXP 12
 935: PUSH
 936: LD_STRING Markov
 938: PPUSH
 939: LD_EXP 1
 943: NOT
 944: PPUSH
 945: LD_EXP 2
 949: PPUSH
 950: CALL 3585 0 3
 954: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 955: LD_ADDR_EXP 15
 959: PUSH
 960: LD_STRING Aviradze
 962: PPUSH
 963: LD_EXP 1
 967: NOT
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL 3585 0 3
 978: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 979: LD_ADDR_EXP 14
 983: PUSH
 984: LD_STRING Kurt
 986: PPUSH
 987: LD_EXP 1
 991: NOT
 992: PPUSH
 993: LD_EXP 2
 997: PPUSH
 998: CALL 3585 0 3
1002: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1003: LD_ADDR_EXP 7
1007: PUSH
1008: LD_STRING Mike
1010: PPUSH
1011: LD_EXP 1
1015: NOT
1016: PPUSH
1017: LD_EXP 2
1021: PPUSH
1022: CALL 3585 0 3
1026: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1027: LD_ADDR_EXP 13
1031: PUSH
1032: LD_STRING Olaf
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_STRING 
1040: PPUSH
1041: CALL 3585 0 3
1045: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1046: LD_ADDR_EXP 16
1050: PUSH
1051: LD_STRING 07_others
1053: PPUSH
1054: CALL_OW 31
1058: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1059: LD_ADDR_VAR 0 5
1063: PUSH
1064: LD_INT 14
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 25
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 14
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 14
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: ST_TO_ADDR
// for i in veh do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_VAR 0 5
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1239
// begin vc_chassis := i [ 1 ] ;
1136: LD_ADDR_OWVAR 37
1140: PUSH
1141: LD_VAR 0 2
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1150: LD_ADDR_OWVAR 39
1154: PUSH
1155: LD_VAR 0 2
1159: PUSH
1160: LD_INT 2
1162: ARRAY
1163: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1164: LD_ADDR_OWVAR 38
1168: PUSH
1169: LD_VAR 0 2
1173: PUSH
1174: LD_INT 3
1176: ARRAY
1177: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1178: LD_ADDR_OWVAR 40
1182: PUSH
1183: LD_VAR 0 2
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1192: LD_ADDR_OWVAR 41
1196: PUSH
1197: LD_INT 25
1199: ST_TO_ADDR
// un := CreateVehicle ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: CALL_OW 45
1209: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1210: LD_VAR 0 4
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1222: LD_VAR 0 4
1226: PPUSH
1227: LD_INT 7
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: CALL_OW 49
// end ;
1237: GO 1133
1239: POP
1240: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: LD_EXP 7
1250: PUSH
1251: LD_EXP 8
1255: PUSH
1256: LD_EXP 9
1260: PUSH
1261: LD_EXP 10
1265: PUSH
1266: LD_EXP 11
1270: PUSH
1271: LD_EXP 12
1275: PUSH
1276: LD_EXP 13
1280: PUSH
1281: LD_EXP 14
1285: PUSH
1286: LD_EXP 15
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 16
1306: UNION
1307: PUSH
1308: LD_EXP 17
1312: UNION
1313: ST_TO_ADDR
// for i in tmp do
1314: LD_ADDR_VAR 0 2
1318: PUSH
1319: LD_VAR 0 3
1323: PUSH
1324: FOR_IN
1325: IFFALSE 1445
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1327: LD_VAR 0 2
1331: PPUSH
1332: CALL_OW 257
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 2
1342: PUSH
1343: LD_INT 4
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: IN
1351: PUSH
1352: LD_INT 22
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: AND
1377: IFFALSE 1419
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_INT 22
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PPUSH
1404: CALL_OW 69
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: CALL_OW 52
1417: GO 1434
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1419: LD_VAR 0 2
1423: PPUSH
1424: LD_INT 6
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// ComHold ( i ) ;
1434: LD_VAR 0 2
1438: PPUSH
1439: CALL_OW 140
// end ;
1443: GO 1324
1445: POP
1446: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1447: LD_EXP 5
1451: PPUSH
1452: LD_INT 5
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1462: LD_EXP 5
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: CALL_OW 119
// if Givi then
1474: LD_EXP 6
1478: IFFALSE 1510
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1480: LD_EXP 6
1484: PPUSH
1485: LD_INT 129
1487: PPUSH
1488: LD_INT 158
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1498: LD_EXP 6
1502: PPUSH
1503: LD_INT 2
1505: PPUSH
1506: CALL_OW 119
// end ; end ; end_of_file
1510: LD_VAR 0 1
1514: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1515: LD_INT 0
1517: PPUSH
1518: PPUSH
1519: PPUSH
// uc_side := 3 ;
1520: LD_ADDR_OWVAR 20
1524: PUSH
1525: LD_INT 3
1527: ST_TO_ADDR
// uc_nation := 3 ;
1528: LD_ADDR_OWVAR 21
1532: PUSH
1533: LD_INT 3
1535: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1536: LD_ADDR_EXP 20
1540: PUSH
1541: LD_STRING Burlak
1543: PPUSH
1544: CALL_OW 25
1548: ST_TO_ADDR
// kabulAttackers := [ ] ;
1549: LD_ADDR_EXP 18
1553: PUSH
1554: EMPTY
1555: ST_TO_ADDR
// heikeAttackers := [ ] ;
1556: LD_ADDR_EXP 19
1560: PUSH
1561: EMPTY
1562: ST_TO_ADDR
// for i := 1 to 9 do
1563: LD_ADDR_VAR 0 2
1567: PUSH
1568: DOUBLE
1569: LD_INT 1
1571: DEC
1572: ST_TO_ADDR
1573: LD_INT 9
1575: PUSH
1576: FOR_TO
1577: IFFALSE 1669
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1579: LD_INT 0
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 380
// un := CreateHuman ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: CALL_OW 44
1601: ST_TO_ADDR
// if Prob ( 40 ) then
1602: LD_INT 40
1604: PPUSH
1605: CALL_OW 13
1609: IFFALSE 1623
// SetClass ( un , class_bazooker ) ;
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_INT 9
1618: PPUSH
1619: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1623: LD_VAR 0 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: LD_INT 5
1633: PPUSH
1634: CALL_OW 12
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1643: LD_VAR 0 3
1647: PPUSH
1648: LD_INT 10
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// KillUnit ( un ) ;
1658: LD_VAR 0 3
1662: PPUSH
1663: CALL_OW 66
// end ;
1667: GO 1576
1669: POP
1670: POP
// for i := 1 to 9 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 9
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1906
// begin if rand ( 0 , 1 ) then
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 12
1697: IFFALSE 1760
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1699: LD_INT 0
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 7
1707: PPUSH
1708: CALL_OW 380
// un := CreateHuman ;
1712: LD_ADDR_VAR 0 3
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1722: LD_VAR 0 3
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1734: LD_VAR 0 3
1738: PPUSH
1739: LD_INT 3
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL_OW 49
// ComHold ( un ) ;
1749: LD_VAR 0 3
1753: PPUSH
1754: CALL_OW 140
// end else
1758: GO 1875
// begin vc_chassis := ru_medium_tracked ;
1760: LD_ADDR_OWVAR 37
1764: PUSH
1765: LD_INT 22
1767: ST_TO_ADDR
// vc_engine := engine_combustion ;
1768: LD_ADDR_OWVAR 39
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// vc_control := control_manual ;
1776: LD_ADDR_OWVAR 38
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1784: LD_ADDR_OWVAR 40
1788: PUSH
1789: LD_INT 44
1791: PUSH
1792: LD_INT 43
1794: PUSH
1795: LD_INT 45
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 1
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: CALL_OW 12
1813: ARRAY
1814: ST_TO_ADDR
// un := CreateVehicle ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: CALL_OW 45
1824: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1825: LD_VAR 0 3
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1837: LD_VAR 0 3
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// ComHold ( un ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1861: CALL_OW 44
1865: PPUSH
1866: LD_VAR 0 3
1870: PPUSH
1871: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1875: LD_ADDR_EXP 18
1879: PUSH
1880: LD_EXP 18
1884: PPUSH
1885: LD_EXP 18
1889: PUSH
1890: LD_INT 1
1892: PLUS
1893: PPUSH
1894: LD_VAR 0 3
1898: PPUSH
1899: CALL_OW 1
1903: ST_TO_ADDR
// end ;
1904: GO 1684
1906: POP
1907: POP
// for i := 1 to 5 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 5
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2155
// begin if rand ( 0 , 1 ) then
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 12
1934: IFFALSE 2009
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1936: LD_INT 0
1938: PPUSH
1939: LD_INT 1
1941: PPUSH
1942: LD_INT 7
1944: PPUSH
1945: CALL_OW 380
// un := CreateHuman ;
1949: LD_ADDR_VAR 0 3
1953: PUSH
1954: CALL_OW 44
1958: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1959: LD_VAR 0 3
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1971: LD_VAR 0 3
1975: PPUSH
1976: LD_INT 9
1978: PPUSH
1979: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 8
1990: PPUSH
1991: LD_INT 0
1993: PPUSH
1994: CALL_OW 49
// ComHold ( un ) ;
1998: LD_VAR 0 3
2002: PPUSH
2003: CALL_OW 140
// end else
2007: GO 2124
// begin vc_chassis := ru_heavy_wheeled ;
2009: LD_ADDR_OWVAR 37
2013: PUSH
2014: LD_INT 23
2016: ST_TO_ADDR
// vc_engine := engine_combustion ;
2017: LD_ADDR_OWVAR 39
2021: PUSH
2022: LD_INT 1
2024: ST_TO_ADDR
// vc_control := control_manual ;
2025: LD_ADDR_OWVAR 38
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2033: LD_ADDR_OWVAR 40
2037: PUSH
2038: LD_INT 44
2040: PUSH
2041: LD_INT 43
2043: PUSH
2044: LD_INT 45
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 3
2057: PPUSH
2058: CALL_OW 12
2062: ARRAY
2063: ST_TO_ADDR
// un := CreateVehicle ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2074: LD_VAR 0 3
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2086: LD_VAR 0 3
2090: PPUSH
2091: LD_INT 8
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// ComHold ( un ) ;
2101: LD_VAR 0 3
2105: PPUSH
2106: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2110: CALL_OW 44
2114: PPUSH
2115: LD_VAR 0 3
2119: PPUSH
2120: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2124: LD_ADDR_EXP 18
2128: PUSH
2129: LD_EXP 18
2133: PPUSH
2134: LD_EXP 18
2138: PUSH
2139: LD_INT 1
2141: PLUS
2142: PPUSH
2143: LD_VAR 0 3
2147: PPUSH
2148: CALL_OW 1
2152: ST_TO_ADDR
// end ;
2153: GO 1921
2155: POP
2156: POP
// for i := 1 to 5 do
2157: LD_ADDR_VAR 0 2
2161: PUSH
2162: DOUBLE
2163: LD_INT 1
2165: DEC
2166: ST_TO_ADDR
2167: LD_INT 5
2169: PUSH
2170: FOR_TO
2171: IFFALSE 2275
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2173: LD_INT 0
2175: PPUSH
2176: LD_INT 1
2178: PPUSH
2179: LD_INT 7
2181: PPUSH
2182: CALL_OW 380
// un := CreateHuman ;
2186: LD_ADDR_VAR 0 3
2190: PUSH
2191: CALL_OW 44
2195: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_INT 0
2203: PPUSH
2204: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2208: LD_VAR 0 3
2212: PPUSH
2213: LD_INT 9
2215: PPUSH
2216: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2220: LD_VAR 0 3
2224: PPUSH
2225: LD_INT 9
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
// ComHold ( un ) ;
2235: LD_VAR 0 3
2239: PPUSH
2240: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2244: LD_ADDR_EXP 18
2248: PUSH
2249: LD_EXP 18
2253: PPUSH
2254: LD_EXP 18
2258: PUSH
2259: LD_INT 1
2261: PLUS
2262: PPUSH
2263: LD_VAR 0 3
2267: PPUSH
2268: CALL_OW 1
2272: ST_TO_ADDR
// end ;
2273: GO 2170
2275: POP
2276: POP
// for i := 1 to 12 do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 12
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2528
// begin if Prob ( 22 ) then
2293: LD_INT 22
2295: PPUSH
2296: CALL_OW 13
2300: IFFALSE 2363
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2302: LD_INT 0
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: LD_INT 7
2310: PPUSH
2311: CALL_OW 380
// un := CreateHuman ;
2315: LD_ADDR_VAR 0 3
2319: PUSH
2320: CALL_OW 44
2324: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2325: LD_VAR 0 3
2329: PPUSH
2330: LD_INT 3
2332: PPUSH
2333: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2337: LD_VAR 0 3
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 49
// ComHold ( un ) ;
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 140
// end else
2361: GO 2497
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2363: LD_ADDR_OWVAR 37
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 24
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 1
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: CALL_OW 12
2388: ARRAY
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 44
2413: PUSH
2414: LD_INT 43
2416: PUSH
2417: LD_INT 45
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 1
2427: PPUSH
2428: LD_INT 3
2430: PPUSH
2431: CALL_OW 12
2435: ARRAY
2436: ST_TO_ADDR
// un := CreateVehicle ;
2437: LD_ADDR_VAR 0 3
2441: PUSH
2442: CALL_OW 45
2446: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2447: LD_VAR 0 3
2451: PPUSH
2452: LD_INT 3
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2459: LD_VAR 0 3
2463: PPUSH
2464: LD_INT 4
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComHold ( un ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2483: CALL_OW 44
2487: PPUSH
2488: LD_VAR 0 3
2492: PPUSH
2493: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2497: LD_ADDR_EXP 19
2501: PUSH
2502: LD_EXP 19
2506: PPUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 1
2514: PLUS
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL_OW 1
2525: ST_TO_ADDR
// end ;
2526: GO 2290
2528: POP
2529: POP
// end ;
2530: LD_VAR 0 1
2534: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2535: LD_EXP 3
2539: PUSH
2540: LD_EXP 18
2544: AND
2545: IFFALSE 2605
2547: GO 2549
2549: DISABLE
2550: LD_INT 0
2552: PPUSH
// begin enable ;
2553: ENABLE
// for i in kabulAttackers do
2554: LD_ADDR_VAR 0 1
2558: PUSH
2559: LD_EXP 18
2563: PUSH
2564: FOR_IN
2565: IFFALSE 2603
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2567: LD_VAR 0 1
2571: PPUSH
2572: LD_INT 22
2574: PUSH
2575: LD_INT 5
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
2601: GO 2564
2603: POP
2604: POP
// end ;
2605: PPOPN 1
2607: END
// every 0 0$2 trigger startAttackOnHeike and heikeAttackers do var i ;
2608: LD_EXP 4
2612: PUSH
2613: LD_EXP 19
2617: AND
2618: IFFALSE 2678
2620: GO 2622
2622: DISABLE
2623: LD_INT 0
2625: PPUSH
// begin enable ;
2626: ENABLE
// for i in heikeAttackers do
2627: LD_ADDR_VAR 0 1
2631: PUSH
2632: LD_EXP 19
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2676
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: PPUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: CALL_OW 74
2669: PPUSH
2670: CALL_OW 115
2674: GO 2637
2676: POP
2677: POP
// end ; end_of_file
2678: PPOPN 1
2680: END
// export function Action ; var i ; begin
2681: LD_INT 0
2683: PPUSH
2684: PPUSH
// music_nat := nation_russian ;
2685: LD_ADDR_OWVAR 71
2689: PUSH
2690: LD_INT 3
2692: ST_TO_ADDR
// Video ( true ) ;
2693: LD_INT 1
2695: PPUSH
2696: CALL 40238 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2700: LD_INT 111
2702: PPUSH
2703: LD_INT 168
2705: PPUSH
2706: LD_INT 2
2708: PPUSH
2709: LD_INT 25
2711: NEG
2712: PPUSH
2713: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2717: LD_INT 102
2719: PPUSH
2720: LD_INT 47
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_INT 40
2728: NEG
2729: PPUSH
2730: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2734: LD_EXP 5
2738: PPUSH
2739: CALL_OW 87
// startAttackOnKabul := true ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 1
2750: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2751: LD_INT 70
2753: PPUSH
2754: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2758: LD_INT 102
2760: PPUSH
2761: LD_INT 47
2763: PPUSH
2764: CALL_OW 84
// if Givi then
2768: LD_EXP 6
2772: IFFALSE 2963
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2774: LD_EXP 6
2778: PPUSH
2779: LD_INT 113
2781: PPUSH
2782: LD_INT 162
2784: PPUSH
2785: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2789: LD_EXP 6
2793: PPUSH
2794: LD_EXP 5
2798: PPUSH
2799: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2803: LD_EXP 6
2807: PPUSH
2808: LD_STRING DG-Intro-1
2810: PPUSH
2811: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2815: LD_EXP 6
2819: PPUSH
2820: LD_STRING DG-Intro-2
2822: PPUSH
2823: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2827: LD_EXP 5
2831: PPUSH
2832: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2836: LD_INT 102
2838: PPUSH
2839: LD_INT 47
2841: PPUSH
2842: LD_INT 2
2844: PPUSH
2845: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2849: LD_INT 10
2851: PPUSH
2852: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2856: LD_EXP 5
2860: PPUSH
2861: LD_STRING DH-Intro-3
2863: PPUSH
2864: CALL_OW 88
// if Mike then
2868: LD_EXP 7
2872: IFFALSE 2961
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2874: LD_INT 92
2876: PPUSH
2877: LD_INT 129
2879: PPUSH
2880: LD_INT 2
2882: PPUSH
2883: LD_INT 18
2885: NEG
2886: PPUSH
2887: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2891: LD_INT 92
2893: PPUSH
2894: LD_INT 129
2896: PPUSH
2897: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2901: LD_EXP 7
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: LD_EXP 5
2919: PPUSH
2920: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2924: LD_EXP 7
2928: PPUSH
2929: LD_STRING DM-Intro-4
2931: PPUSH
2932: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2936: LD_EXP 10
2940: PPUSH
2941: LD_STRING DK-Intro-5
2943: PPUSH
2944: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2948: LD_INT 92
2950: PPUSH
2951: LD_INT 129
2953: PPUSH
2954: LD_INT 2
2956: PPUSH
2957: CALL_OW 331
// end ; end else
2961: GO 3216
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2963: LD_EXP 16
2967: PPUSH
2968: LD_INT 26
2970: PUSH
2971: LD_INT 1
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PPUSH
2978: CALL_OW 72
2982: PUSH
2983: LD_INT 1
2985: ARRAY
2986: PPUSH
2987: LD_STRING DArm-Intro-b-1
2989: PPUSH
2990: CALL_OW 88
2994: NOT
2995: IFFALSE 3028
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
2997: LD_EXP 16
3001: PPUSH
3002: LD_INT 26
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: LD_INT 1
3019: ARRAY
3020: PPUSH
3021: LD_STRING DArf-Intro-b-1
3023: PPUSH
3024: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 26
3035: PUSH
3036: LD_INT 1
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PPUSH
3043: CALL_OW 72
3047: PUSH
3048: LD_INT 1
3050: ARRAY
3051: PPUSH
3052: LD_STRING DArm-Intro-b-2
3054: PPUSH
3055: CALL_OW 88
3059: NOT
3060: IFFALSE 3093
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_INT 26
3069: PUSH
3070: LD_INT 2
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 72
3081: PUSH
3082: LD_INT 1
3084: ARRAY
3085: PPUSH
3086: LD_STRING DArf-Intro-b-2
3088: PPUSH
3089: CALL_OW 88
// if Kaia then
3093: LD_EXP 10
3097: IFFALSE 3111
// Say ( Kaia , DK-Intro-5 ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_STRING DK-Intro-5
3106: PPUSH
3107: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3111: LD_INT 92
3113: PPUSH
3114: LD_INT 129
3116: PPUSH
3117: LD_INT 2
3119: PPUSH
3120: LD_INT 18
3122: NEG
3123: PPUSH
3124: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3128: LD_INT 92
3130: PPUSH
3131: LD_INT 129
3133: PPUSH
3134: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3138: LD_EXP 16
3142: PPUSH
3143: LD_INT 26
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: CALL_OW 72
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_STRING DArm-Intro-b-4
3164: PPUSH
3165: CALL_OW 88
3169: NOT
3170: IFFALSE 3203
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3172: LD_EXP 16
3176: PPUSH
3177: LD_INT 26
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PPUSH
3187: CALL_OW 72
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: PPUSH
3196: LD_STRING DArf-Intro-b-4
3198: PPUSH
3199: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3203: LD_INT 92
3205: PPUSH
3206: LD_INT 129
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3216: LD_EXP 5
3220: PPUSH
3221: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3225: LD_EXP 20
3229: PPUSH
3230: LD_STRING DB-Intro-6
3232: PPUSH
3233: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3237: LD_EXP 5
3241: PPUSH
3242: LD_STRING DH-Intro-7
3244: PPUSH
3245: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3249: LD_EXP 20
3253: PPUSH
3254: LD_STRING DB-Intro-8
3256: PPUSH
3257: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3261: LD_EXP 20
3265: PPUSH
3266: LD_STRING DB-Intro-9
3268: PPUSH
3269: CALL_OW 94
// if Givi then
3273: LD_EXP 6
3277: IFFALSE 3305
// begin Say ( Givi , DG-Intro-10 ) ;
3279: LD_EXP 6
3283: PPUSH
3284: LD_STRING DG-Intro-10
3286: PPUSH
3287: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3291: LD_EXP 10
3295: PPUSH
3296: LD_STRING DK-Intro-11
3298: PPUSH
3299: CALL_OW 88
// end else
3303: GO 3370
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3305: LD_EXP 16
3309: PPUSH
3310: LD_INT 26
3312: PUSH
3313: LD_INT 1
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 72
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_STRING DArm-Intro-b-10
3331: PPUSH
3332: CALL_OW 88
3336: NOT
3337: IFFALSE 3370
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3339: LD_EXP 16
3343: PPUSH
3344: LD_INT 26
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PPUSH
3354: CALL_OW 72
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_STRING DArf-Intro-b-10
3365: PPUSH
3366: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3370: LD_EXP 7
3374: PPUSH
3375: LD_STRING DM-Intro-12
3377: PPUSH
3378: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3382: LD_EXP 14
3386: PPUSH
3387: LD_STRING DKs-Intro-13
3389: PPUSH
3390: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3394: LD_EXP 9
3398: PPUSH
3399: LD_STRING DKam-Intro-14
3401: PPUSH
3402: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3406: LD_STRING QSurrender
3408: PPUSH
3409: CALL_OW 97
3413: PUSH
3414: LD_INT 1
3416: DOUBLE
3417: EQUAL
3418: IFTRUE 3422
3420: GO 3441
3422: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3423: LD_EXP 5
3427: PPUSH
3428: LD_STRING DH-Intro-16
3430: PPUSH
3431: CALL_OW 88
// missionEnd ;
3435: CALL 3567 0 0
// end ; 2 :
3439: GO 3485
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3484
3449: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3450: LD_EXP 5
3454: PPUSH
3455: LD_STRING DH-Intro-a-16
3457: PPUSH
3458: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3462: LD_EXP 20
3466: PPUSH
3467: LD_STRING DB-Intro-a-17
3469: PPUSH
3470: CALL_OW 94
// startAttackOnHeike := true ;
3474: LD_ADDR_EXP 4
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// end ; end ;
3482: GO 3485
3484: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3525
// ComAgressiveMove ( i , 98 , 143 ) ;
3508: LD_VAR 0 2
3512: PPUSH
3513: LD_INT 98
3515: PPUSH
3516: LD_INT 143
3518: PPUSH
3519: CALL_OW 114
3523: GO 3505
3525: POP
3526: POP
// CenterOnXY ( 98 , 143 ) ;
3527: LD_INT 98
3529: PPUSH
3530: LD_INT 143
3532: PPUSH
3533: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3537: LD_INT 35
3539: PPUSH
3540: CALL_OW 67
// until IsDead ( Heike ) ;
3544: LD_EXP 5
3548: PPUSH
3549: CALL_OW 301
3553: IFFALSE 3537
// YouLost ( HeikeNoSurrender ) ;
3555: LD_STRING HeikeNoSurrender
3557: PPUSH
3558: CALL_OW 104
// end ;
3562: LD_VAR 0 1
3566: RET
// function MissionEnd ( ) ; begin
3567: LD_INT 0
3569: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3570: LD_INT 1
3572: PPUSH
3573: LD_STRING %_cont
3575: PPUSH
3576: CALL_OW 340
// end ; end_of_file
3580: LD_VAR 0 1
3584: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3585: LD_INT 0
3587: PPUSH
3588: PPUSH
// if exist_mode then
3589: LD_VAR 0 2
3593: IFFALSE 3618
// unit := CreateCharacter ( prefix & ident ) else
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_VAR 0 3
3604: PUSH
3605: LD_VAR 0 1
3609: STR
3610: PPUSH
3611: CALL_OW 34
3615: ST_TO_ADDR
3616: GO 3633
// unit := NewCharacter ( ident ) ;
3618: LD_ADDR_VAR 0 5
3622: PUSH
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 25
3632: ST_TO_ADDR
// result := unit ;
3633: LD_ADDR_VAR 0 4
3637: PUSH
3638: LD_VAR 0 5
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 4
3647: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3648: LD_INT 0
3650: PPUSH
3651: PPUSH
// if not side or not nation then
3652: LD_VAR 0 1
3656: NOT
3657: PUSH
3658: LD_VAR 0 2
3662: NOT
3663: OR
3664: IFFALSE 3668
// exit ;
3666: GO 4436
// case nation of nation_american :
3668: LD_VAR 0 2
3672: PUSH
3673: LD_INT 1
3675: DOUBLE
3676: EQUAL
3677: IFTRUE 3681
3679: GO 3895
3681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: LD_INT 35
3689: PUSH
3690: LD_INT 45
3692: PUSH
3693: LD_INT 46
3695: PUSH
3696: LD_INT 47
3698: PUSH
3699: LD_INT 82
3701: PUSH
3702: LD_INT 83
3704: PUSH
3705: LD_INT 84
3707: PUSH
3708: LD_INT 85
3710: PUSH
3711: LD_INT 86
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 6
3722: PUSH
3723: LD_INT 15
3725: PUSH
3726: LD_INT 16
3728: PUSH
3729: LD_INT 7
3731: PUSH
3732: LD_INT 12
3734: PUSH
3735: LD_INT 13
3737: PUSH
3738: LD_INT 10
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: LD_INT 21
3749: PUSH
3750: LD_INT 22
3752: PUSH
3753: LD_INT 25
3755: PUSH
3756: LD_INT 32
3758: PUSH
3759: LD_INT 27
3761: PUSH
3762: LD_INT 36
3764: PUSH
3765: LD_INT 69
3767: PUSH
3768: LD_INT 39
3770: PUSH
3771: LD_INT 34
3773: PUSH
3774: LD_INT 40
3776: PUSH
3777: LD_INT 48
3779: PUSH
3780: LD_INT 49
3782: PUSH
3783: LD_INT 50
3785: PUSH
3786: LD_INT 51
3788: PUSH
3789: LD_INT 52
3791: PUSH
3792: LD_INT 53
3794: PUSH
3795: LD_INT 54
3797: PUSH
3798: LD_INT 55
3800: PUSH
3801: LD_INT 56
3803: PUSH
3804: LD_INT 57
3806: PUSH
3807: LD_INT 58
3809: PUSH
3810: LD_INT 59
3812: PUSH
3813: LD_INT 60
3815: PUSH
3816: LD_INT 61
3818: PUSH
3819: LD_INT 62
3821: PUSH
3822: LD_INT 80
3824: PUSH
3825: LD_INT 82
3827: PUSH
3828: LD_INT 83
3830: PUSH
3831: LD_INT 84
3833: PUSH
3834: LD_INT 85
3836: PUSH
3837: LD_INT 86
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 4360
3895: LD_INT 2
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4129
3903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_INT 35
3911: PUSH
3912: LD_INT 45
3914: PUSH
3915: LD_INT 46
3917: PUSH
3918: LD_INT 47
3920: PUSH
3921: LD_INT 82
3923: PUSH
3924: LD_INT 83
3926: PUSH
3927: LD_INT 84
3929: PUSH
3930: LD_INT 85
3932: PUSH
3933: LD_INT 87
3935: PUSH
3936: LD_INT 70
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_INT 11
3944: PUSH
3945: LD_INT 3
3947: PUSH
3948: LD_INT 4
3950: PUSH
3951: LD_INT 5
3953: PUSH
3954: LD_INT 6
3956: PUSH
3957: LD_INT 15
3959: PUSH
3960: LD_INT 18
3962: PUSH
3963: LD_INT 7
3965: PUSH
3966: LD_INT 17
3968: PUSH
3969: LD_INT 8
3971: PUSH
3972: LD_INT 20
3974: PUSH
3975: LD_INT 21
3977: PUSH
3978: LD_INT 22
3980: PUSH
3981: LD_INT 72
3983: PUSH
3984: LD_INT 26
3986: PUSH
3987: LD_INT 69
3989: PUSH
3990: LD_INT 39
3992: PUSH
3993: LD_INT 40
3995: PUSH
3996: LD_INT 41
3998: PUSH
3999: LD_INT 42
4001: PUSH
4002: LD_INT 43
4004: PUSH
4005: LD_INT 48
4007: PUSH
4008: LD_INT 49
4010: PUSH
4011: LD_INT 50
4013: PUSH
4014: LD_INT 51
4016: PUSH
4017: LD_INT 52
4019: PUSH
4020: LD_INT 53
4022: PUSH
4023: LD_INT 54
4025: PUSH
4026: LD_INT 55
4028: PUSH
4029: LD_INT 56
4031: PUSH
4032: LD_INT 60
4034: PUSH
4035: LD_INT 61
4037: PUSH
4038: LD_INT 62
4040: PUSH
4041: LD_INT 66
4043: PUSH
4044: LD_INT 67
4046: PUSH
4047: LD_INT 68
4049: PUSH
4050: LD_INT 81
4052: PUSH
4053: LD_INT 82
4055: PUSH
4056: LD_INT 83
4058: PUSH
4059: LD_INT 84
4061: PUSH
4062: LD_INT 85
4064: PUSH
4065: LD_INT 87
4067: PUSH
4068: LD_INT 88
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: ST_TO_ADDR
4127: GO 4360
4129: LD_INT 3
4131: DOUBLE
4132: EQUAL
4133: IFTRUE 4137
4135: GO 4359
4137: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4138: LD_ADDR_VAR 0 4
4142: PUSH
4143: LD_INT 46
4145: PUSH
4146: LD_INT 47
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 82
4157: PUSH
4158: LD_INT 83
4160: PUSH
4161: LD_INT 84
4163: PUSH
4164: LD_INT 85
4166: PUSH
4167: LD_INT 86
4169: PUSH
4170: LD_INT 11
4172: PUSH
4173: LD_INT 9
4175: PUSH
4176: LD_INT 20
4178: PUSH
4179: LD_INT 19
4181: PUSH
4182: LD_INT 21
4184: PUSH
4185: LD_INT 24
4187: PUSH
4188: LD_INT 22
4190: PUSH
4191: LD_INT 25
4193: PUSH
4194: LD_INT 28
4196: PUSH
4197: LD_INT 29
4199: PUSH
4200: LD_INT 30
4202: PUSH
4203: LD_INT 31
4205: PUSH
4206: LD_INT 37
4208: PUSH
4209: LD_INT 38
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 27
4217: PUSH
4218: LD_INT 33
4220: PUSH
4221: LD_INT 69
4223: PUSH
4224: LD_INT 39
4226: PUSH
4227: LD_INT 34
4229: PUSH
4230: LD_INT 40
4232: PUSH
4233: LD_INT 71
4235: PUSH
4236: LD_INT 23
4238: PUSH
4239: LD_INT 44
4241: PUSH
4242: LD_INT 48
4244: PUSH
4245: LD_INT 49
4247: PUSH
4248: LD_INT 50
4250: PUSH
4251: LD_INT 51
4253: PUSH
4254: LD_INT 52
4256: PUSH
4257: LD_INT 53
4259: PUSH
4260: LD_INT 54
4262: PUSH
4263: LD_INT 55
4265: PUSH
4266: LD_INT 56
4268: PUSH
4269: LD_INT 57
4271: PUSH
4272: LD_INT 58
4274: PUSH
4275: LD_INT 59
4277: PUSH
4278: LD_INT 63
4280: PUSH
4281: LD_INT 64
4283: PUSH
4284: LD_INT 65
4286: PUSH
4287: LD_INT 82
4289: PUSH
4290: LD_INT 83
4292: PUSH
4293: LD_INT 84
4295: PUSH
4296: LD_INT 85
4298: PUSH
4299: LD_INT 86
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: ST_TO_ADDR
4357: GO 4360
4359: POP
// if state > - 1 and state < 3 then
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 1
4367: NEG
4368: GREATER
4369: PUSH
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 3
4377: LESS
4378: AND
4379: IFFALSE 4436
// for i in result do
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_VAR 0 4
4390: PUSH
4391: FOR_IN
4392: IFFALSE 4434
// if GetTech ( i , side ) <> state then
4394: LD_VAR 0 5
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 321
4408: PUSH
4409: LD_VAR 0 3
4413: NONEQUAL
4414: IFFALSE 4432
// result := result diff i ;
4416: LD_ADDR_VAR 0 4
4420: PUSH
4421: LD_VAR 0 4
4425: PUSH
4426: LD_VAR 0 5
4430: DIFF
4431: ST_TO_ADDR
4432: GO 4391
4434: POP
4435: POP
// end ;
4436: LD_VAR 0 4
4440: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4441: LD_INT 0
4443: PPUSH
4444: PPUSH
4445: PPUSH
// result := true ;
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4454: LD_ADDR_VAR 0 5
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 480
4468: ST_TO_ADDR
// if not tmp then
4469: LD_VAR 0 5
4473: NOT
4474: IFFALSE 4478
// exit ;
4476: GO 4527
// for i in tmp do
4478: LD_ADDR_VAR 0 4
4482: PUSH
4483: LD_VAR 0 5
4487: PUSH
4488: FOR_IN
4489: IFFALSE 4525
// if GetTech ( i , side ) <> state_researched then
4491: LD_VAR 0 4
4495: PPUSH
4496: LD_VAR 0 1
4500: PPUSH
4501: CALL_OW 321
4505: PUSH
4506: LD_INT 2
4508: NONEQUAL
4509: IFFALSE 4523
// begin result := false ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 0
4518: ST_TO_ADDR
// exit ;
4519: POP
4520: POP
4521: GO 4527
// end ;
4523: GO 4488
4525: POP
4526: POP
// end ;
4527: LD_VAR 0 3
4531: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4547: LD_VAR 0 1
4551: NOT
4552: PUSH
4553: LD_VAR 0 1
4557: PPUSH
4558: CALL_OW 257
4562: PUSH
4563: LD_INT 9
4565: NONEQUAL
4566: OR
4567: IFFALSE 4571
// exit ;
4569: GO 5144
// side := GetSide ( unit ) ;
4571: LD_ADDR_VAR 0 9
4575: PUSH
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 255
4585: ST_TO_ADDR
// tech_space := tech_spacanom ;
4586: LD_ADDR_VAR 0 12
4590: PUSH
4591: LD_INT 29
4593: ST_TO_ADDR
// tech_time := tech_taurad ;
4594: LD_ADDR_VAR 0 13
4598: PUSH
4599: LD_INT 28
4601: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4602: LD_ADDR_VAR 0 11
4606: PUSH
4607: LD_VAR 0 1
4611: PPUSH
4612: CALL_OW 310
4616: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4617: LD_VAR 0 11
4621: PPUSH
4622: CALL_OW 247
4626: PUSH
4627: LD_INT 2
4629: EQUAL
4630: IFFALSE 4634
// exit ;
4632: GO 5144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4634: LD_ADDR_VAR 0 8
4638: PUSH
4639: LD_INT 81
4641: PUSH
4642: LD_VAR 0 9
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 21
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 69
4676: ST_TO_ADDR
// if not tmp then
4677: LD_VAR 0 8
4681: NOT
4682: IFFALSE 4686
// exit ;
4684: GO 5144
// if in_unit then
4686: LD_VAR 0 11
4690: IFFALSE 4714
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4692: LD_ADDR_VAR 0 10
4696: PUSH
4697: LD_VAR 0 8
4701: PPUSH
4702: LD_VAR 0 11
4706: PPUSH
4707: CALL_OW 74
4711: ST_TO_ADDR
4712: GO 4734
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4714: LD_ADDR_VAR 0 10
4718: PUSH
4719: LD_VAR 0 8
4723: PPUSH
4724: LD_VAR 0 1
4728: PPUSH
4729: CALL_OW 74
4733: ST_TO_ADDR
// if not enemy then
4734: LD_VAR 0 10
4738: NOT
4739: IFFALSE 4743
// exit ;
4741: GO 5144
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4743: LD_VAR 0 11
4747: PUSH
4748: LD_VAR 0 11
4752: PPUSH
4753: LD_VAR 0 10
4757: PPUSH
4758: CALL_OW 296
4762: PUSH
4763: LD_INT 13
4765: GREATER
4766: AND
4767: PUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: LD_VAR 0 10
4777: PPUSH
4778: CALL_OW 296
4782: PUSH
4783: LD_INT 12
4785: GREATER
4786: OR
4787: IFFALSE 4791
// exit ;
4789: GO 5144
// missile := [ 1 ] ;
4791: LD_ADDR_VAR 0 14
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: EMPTY
4800: LIST
4801: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4802: LD_VAR 0 9
4806: PPUSH
4807: LD_VAR 0 12
4811: PPUSH
4812: CALL_OW 325
4816: IFFALSE 4845
// missile := Replace ( missile , missile + 1 , 2 ) ;
4818: LD_ADDR_VAR 0 14
4822: PUSH
4823: LD_VAR 0 14
4827: PPUSH
4828: LD_VAR 0 14
4832: PUSH
4833: LD_INT 1
4835: PLUS
4836: PPUSH
4837: LD_INT 2
4839: PPUSH
4840: CALL_OW 1
4844: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4845: LD_VAR 0 9
4849: PPUSH
4850: LD_VAR 0 13
4854: PPUSH
4855: CALL_OW 325
4859: PUSH
4860: LD_VAR 0 10
4864: PPUSH
4865: CALL_OW 255
4869: PPUSH
4870: LD_VAR 0 13
4874: PPUSH
4875: CALL_OW 325
4879: NOT
4880: AND
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 3 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if missile < 2 then
4910: LD_VAR 0 14
4914: PUSH
4915: LD_INT 2
4917: LESS
4918: IFFALSE 4922
// exit ;
4920: GO 5144
// x := GetX ( enemy ) ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_VAR 0 10
4931: PPUSH
4932: CALL_OW 250
4936: ST_TO_ADDR
// y := GetY ( enemy ) ;
4937: LD_ADDR_VAR 0 5
4941: PUSH
4942: LD_VAR 0 10
4946: PPUSH
4947: CALL_OW 251
4951: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4952: LD_ADDR_VAR 0 6
4956: PUSH
4957: LD_VAR 0 4
4961: PUSH
4962: LD_INT 1
4964: NEG
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 12
4973: PLUS
4974: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4975: LD_ADDR_VAR 0 7
4979: PUSH
4980: LD_VAR 0 5
4984: PUSH
4985: LD_INT 1
4987: NEG
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 12
4996: PLUS
4997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4998: LD_VAR 0 6
5002: PPUSH
5003: LD_VAR 0 7
5007: PPUSH
5008: CALL_OW 488
5012: NOT
5013: IFFALSE 5035
// begin _x := x ;
5015: LD_ADDR_VAR 0 6
5019: PUSH
5020: LD_VAR 0 4
5024: ST_TO_ADDR
// _y := y ;
5025: LD_ADDR_VAR 0 7
5029: PUSH
5030: LD_VAR 0 5
5034: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_INT 1
5042: PPUSH
5043: LD_VAR 0 14
5047: PPUSH
5048: CALL_OW 12
5052: ST_TO_ADDR
// case i of 1 :
5053: LD_VAR 0 3
5057: PUSH
5058: LD_INT 1
5060: DOUBLE
5061: EQUAL
5062: IFTRUE 5066
5064: GO 5083
5066: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 10
5076: PPUSH
5077: CALL_OW 115
5081: GO 5144
5083: LD_INT 2
5085: DOUBLE
5086: EQUAL
5087: IFTRUE 5091
5089: GO 5113
5091: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5092: LD_VAR 0 1
5096: PPUSH
5097: LD_VAR 0 6
5101: PPUSH
5102: LD_VAR 0 7
5106: PPUSH
5107: CALL_OW 153
5111: GO 5144
5113: LD_INT 3
5115: DOUBLE
5116: EQUAL
5117: IFTRUE 5121
5119: GO 5143
5121: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_VAR 0 7
5136: PPUSH
5137: CALL_OW 154
5141: GO 5144
5143: POP
// end ;
5144: LD_VAR 0 2
5148: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5149: LD_INT 0
5151: PPUSH
5152: PPUSH
5153: PPUSH
5154: PPUSH
5155: PPUSH
5156: PPUSH
// if not unit or not building then
5157: LD_VAR 0 1
5161: NOT
5162: PUSH
5163: LD_VAR 0 2
5167: NOT
5168: OR
5169: IFFALSE 5173
// exit ;
5171: GO 5331
// x := GetX ( building ) ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: CALL_OW 250
5187: ST_TO_ADDR
// y := GetY ( building ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 2
5197: PPUSH
5198: CALL_OW 251
5202: ST_TO_ADDR
// for i = 0 to 5 do
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: DOUBLE
5209: LD_INT 0
5211: DEC
5212: ST_TO_ADDR
5213: LD_INT 5
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5329
// begin _x := ShiftX ( x , i , 3 ) ;
5219: LD_ADDR_VAR 0 7
5223: PUSH
5224: LD_VAR 0 5
5228: PPUSH
5229: LD_VAR 0 4
5233: PPUSH
5234: LD_INT 3
5236: PPUSH
5237: CALL_OW 272
5241: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5242: LD_ADDR_VAR 0 8
5246: PUSH
5247: LD_VAR 0 6
5251: PPUSH
5252: LD_VAR 0 4
5256: PPUSH
5257: LD_INT 3
5259: PPUSH
5260: CALL_OW 273
5264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5265: LD_VAR 0 7
5269: PPUSH
5270: LD_VAR 0 8
5274: PPUSH
5275: CALL_OW 488
5279: NOT
5280: IFFALSE 5284
// continue ;
5282: GO 5216
// if HexInfo ( _x , _y ) = 0 then
5284: LD_VAR 0 7
5288: PPUSH
5289: LD_VAR 0 8
5293: PPUSH
5294: CALL_OW 428
5298: PUSH
5299: LD_INT 0
5301: EQUAL
5302: IFFALSE 5327
// begin ComMoveXY ( unit , _x , _y ) ;
5304: LD_VAR 0 1
5308: PPUSH
5309: LD_VAR 0 7
5313: PPUSH
5314: LD_VAR 0 8
5318: PPUSH
5319: CALL_OW 111
// exit ;
5323: POP
5324: POP
5325: GO 5331
// end ; end ;
5327: GO 5216
5329: POP
5330: POP
// end ;
5331: LD_VAR 0 3
5335: RET
// export function ScanBase ( side , base_area ) ; begin
5336: LD_INT 0
5338: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_INT 81
5351: PUSH
5352: LD_VAR 0 1
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PPUSH
5361: CALL_OW 70
5365: ST_TO_ADDR
// end ;
5366: LD_VAR 0 3
5370: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5371: LD_INT 0
5373: PPUSH
5374: PPUSH
5375: PPUSH
5376: PPUSH
// result := false ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// side := GetSide ( unit ) ;
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 255
5399: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5400: LD_ADDR_VAR 0 4
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL_OW 248
5414: ST_TO_ADDR
// case nat of 1 :
5415: LD_VAR 0 4
5419: PUSH
5420: LD_INT 1
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5439
5428: POP
// tech := tech_lassight ; 2 :
5429: LD_ADDR_VAR 0 5
5433: PUSH
5434: LD_INT 12
5436: ST_TO_ADDR
5437: GO 5478
5439: LD_INT 2
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5458
5447: POP
// tech := tech_mortar ; 3 :
5448: LD_ADDR_VAR 0 5
5452: PUSH
5453: LD_INT 41
5455: ST_TO_ADDR
5456: GO 5478
5458: LD_INT 3
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5477
5466: POP
// tech := tech_bazooka ; end ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_INT 44
5474: ST_TO_ADDR
5475: GO 5478
5477: POP
// if Researched ( side , tech ) then
5478: LD_VAR 0 3
5482: PPUSH
5483: LD_VAR 0 5
5487: PPUSH
5488: CALL_OW 325
5492: IFFALSE 5519
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_INT 5
5501: PUSH
5502: LD_INT 8
5504: PUSH
5505: LD_INT 9
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_VAR 0 4
5517: ARRAY
5518: ST_TO_ADDR
// end ;
5519: LD_VAR 0 2
5523: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
// if not mines then
5529: LD_VAR 0 2
5533: NOT
5534: IFFALSE 5538
// exit ;
5536: GO 5682
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5538: LD_ADDR_VAR 0 5
5542: PUSH
5543: LD_INT 81
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: LD_INT 21
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PPUSH
5576: CALL_OW 69
5580: ST_TO_ADDR
// for i in mines do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: LD_VAR 0 2
5590: PUSH
5591: FOR_IN
5592: IFFALSE 5680
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5594: LD_VAR 0 4
5598: PUSH
5599: LD_INT 1
5601: ARRAY
5602: PPUSH
5603: LD_VAR 0 4
5607: PUSH
5608: LD_INT 2
5610: ARRAY
5611: PPUSH
5612: CALL_OW 458
5616: NOT
5617: IFFALSE 5621
// continue ;
5619: GO 5591
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5621: LD_VAR 0 4
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 4
5634: PUSH
5635: LD_INT 2
5637: ARRAY
5638: PPUSH
5639: CALL_OW 428
5643: PUSH
5644: LD_VAR 0 5
5648: IN
5649: IFFALSE 5678
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5651: LD_VAR 0 4
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: LD_VAR 0 4
5664: PUSH
5665: LD_INT 2
5667: ARRAY
5668: PPUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 456
// end ;
5678: GO 5591
5680: POP
5681: POP
// end ;
5682: LD_VAR 0 3
5686: RET
// export function Count ( array ) ; var i ; begin
5687: LD_INT 0
5689: PPUSH
5690: PPUSH
// result := 0 ;
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// for i in array do
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5734
// if i then
5712: LD_VAR 0 3
5716: IFFALSE 5732
// result := result + 1 ;
5718: LD_ADDR_VAR 0 2
5722: PUSH
5723: LD_VAR 0 2
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: ST_TO_ADDR
5732: GO 5709
5734: POP
5735: POP
// end ;
5736: LD_VAR 0 2
5740: RET
// export function IsEmpty ( building ) ; begin
5741: LD_INT 0
5743: PPUSH
// if not building then
5744: LD_VAR 0 1
5748: NOT
5749: IFFALSE 5753
// exit ;
5751: GO 5796
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 255
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 58
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PPUSH
5790: CALL_OW 69
5794: IN
5795: ST_TO_ADDR
// end ;
5796: LD_VAR 0 2
5800: RET
// export function IsNotFull ( building ) ; begin
5801: LD_INT 0
5803: PPUSH
// if not building then
5804: LD_VAR 0 1
5808: NOT
5809: IFFALSE 5813
// exit ;
5811: GO 5832
// result := UnitsInside ( building ) < 6 ;
5813: LD_ADDR_VAR 0 2
5817: PUSH
5818: LD_VAR 0 1
5822: PPUSH
5823: CALL_OW 313
5827: PUSH
5828: LD_INT 6
5830: LESS
5831: ST_TO_ADDR
// end ;
5832: LD_VAR 0 2
5836: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
5842: PPUSH
// tmp := [ ] ;
5843: LD_ADDR_VAR 0 3
5847: PUSH
5848: EMPTY
5849: ST_TO_ADDR
// list := [ ] ;
5850: LD_ADDR_VAR 0 5
5854: PUSH
5855: EMPTY
5856: ST_TO_ADDR
// for i = 16 to 25 do
5857: LD_ADDR_VAR 0 4
5861: PUSH
5862: DOUBLE
5863: LD_INT 16
5865: DEC
5866: ST_TO_ADDR
5867: LD_INT 25
5869: PUSH
5870: FOR_TO
5871: IFFALSE 5944
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5873: LD_ADDR_VAR 0 3
5877: PUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_INT 22
5885: PUSH
5886: LD_VAR 0 1
5890: PPUSH
5891: CALL_OW 255
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 91
5902: PUSH
5903: LD_VAR 0 1
5907: PUSH
5908: LD_INT 6
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 30
5918: PUSH
5919: LD_VAR 0 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: PPUSH
5936: CALL_OW 69
5940: ADD
5941: ST_TO_ADDR
5942: GO 5870
5944: POP
5945: POP
// for i = 1 to tmp do
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_VAR 0 3
5960: PUSH
5961: FOR_TO
5962: IFFALSE 6050
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5964: LD_ADDR_VAR 0 5
5968: PUSH
5969: LD_VAR 0 5
5973: PUSH
5974: LD_VAR 0 3
5978: PUSH
5979: LD_VAR 0 4
5983: ARRAY
5984: PPUSH
5985: CALL_OW 266
5989: PUSH
5990: LD_VAR 0 3
5994: PUSH
5995: LD_VAR 0 4
5999: ARRAY
6000: PPUSH
6001: CALL_OW 250
6005: PUSH
6006: LD_VAR 0 3
6010: PUSH
6011: LD_VAR 0 4
6015: ARRAY
6016: PPUSH
6017: CALL_OW 251
6021: PUSH
6022: LD_VAR 0 3
6026: PUSH
6027: LD_VAR 0 4
6031: ARRAY
6032: PPUSH
6033: CALL_OW 254
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: ADD
6047: ST_TO_ADDR
6048: GO 5961
6050: POP
6051: POP
// result := list ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_VAR 0 5
6061: ST_TO_ADDR
// end ;
6062: LD_VAR 0 2
6066: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6067: LD_INT 0
6069: PPUSH
6070: PPUSH
6071: PPUSH
6072: PPUSH
6073: PPUSH
6074: PPUSH
6075: PPUSH
// if not factory then
6076: LD_VAR 0 1
6080: NOT
6081: IFFALSE 6085
// exit ;
6083: GO 6678
// if control = control_apeman then
6085: LD_VAR 0 4
6089: PUSH
6090: LD_INT 5
6092: EQUAL
6093: IFFALSE 6202
// begin tmp := UnitsInside ( factory ) ;
6095: LD_ADDR_VAR 0 8
6099: PUSH
6100: LD_VAR 0 1
6104: PPUSH
6105: CALL_OW 313
6109: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6110: LD_VAR 0 8
6114: PPUSH
6115: LD_INT 25
6117: PUSH
6118: LD_INT 12
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PPUSH
6125: CALL_OW 72
6129: NOT
6130: IFFALSE 6140
// control := control_manual ;
6132: LD_ADDR_VAR 0 4
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6140: LD_ADDR_VAR 0 8
6144: PUSH
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL 5837 0 1
6154: ST_TO_ADDR
// if tmp then
6155: LD_VAR 0 8
6159: IFFALSE 6202
// begin for i in tmp do
6161: LD_ADDR_VAR 0 7
6165: PUSH
6166: LD_VAR 0 8
6170: PUSH
6171: FOR_IN
6172: IFFALSE 6200
// if i [ 1 ] = b_ext_radio then
6174: LD_VAR 0 7
6178: PUSH
6179: LD_INT 1
6181: ARRAY
6182: PUSH
6183: LD_INT 22
6185: EQUAL
6186: IFFALSE 6198
// begin control := control_remote ;
6188: LD_ADDR_VAR 0 4
6192: PUSH
6193: LD_INT 2
6195: ST_TO_ADDR
// break ;
6196: GO 6200
// end ;
6198: GO 6171
6200: POP
6201: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6202: LD_VAR 0 1
6206: PPUSH
6207: LD_VAR 0 2
6211: PPUSH
6212: LD_VAR 0 3
6216: PPUSH
6217: LD_VAR 0 4
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: CALL_OW 448
6231: IFFALSE 6266
// begin result := [ chassis , engine , control , weapon ] ;
6233: LD_ADDR_VAR 0 6
6237: PUSH
6238: LD_VAR 0 2
6242: PUSH
6243: LD_VAR 0 3
6247: PUSH
6248: LD_VAR 0 4
6252: PUSH
6253: LD_VAR 0 5
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: ST_TO_ADDR
// exit ;
6264: GO 6678
// end ; _chassis := AvailableChassisList ( factory ) ;
6266: LD_ADDR_VAR 0 9
6270: PUSH
6271: LD_VAR 0 1
6275: PPUSH
6276: CALL_OW 475
6280: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6281: LD_ADDR_VAR 0 11
6285: PUSH
6286: LD_VAR 0 1
6290: PPUSH
6291: CALL_OW 476
6295: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6296: LD_ADDR_VAR 0 12
6300: PUSH
6301: LD_VAR 0 1
6305: PPUSH
6306: CALL_OW 477
6310: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6311: LD_ADDR_VAR 0 10
6315: PUSH
6316: LD_VAR 0 1
6320: PPUSH
6321: CALL_OW 478
6325: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6326: LD_VAR 0 9
6330: NOT
6331: PUSH
6332: LD_VAR 0 11
6336: NOT
6337: OR
6338: PUSH
6339: LD_VAR 0 12
6343: NOT
6344: OR
6345: PUSH
6346: LD_VAR 0 10
6350: NOT
6351: OR
6352: IFFALSE 6387
// begin result := [ chassis , engine , control , weapon ] ;
6354: LD_ADDR_VAR 0 6
6358: PUSH
6359: LD_VAR 0 2
6363: PUSH
6364: LD_VAR 0 3
6368: PUSH
6369: LD_VAR 0 4
6373: PUSH
6374: LD_VAR 0 5
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: ST_TO_ADDR
// exit ;
6385: GO 6678
// end ; if not chassis in _chassis then
6387: LD_VAR 0 2
6391: PUSH
6392: LD_VAR 0 9
6396: IN
6397: NOT
6398: IFFALSE 6424
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6400: LD_ADDR_VAR 0 2
6404: PUSH
6405: LD_VAR 0 9
6409: PUSH
6410: LD_INT 1
6412: PPUSH
6413: LD_VAR 0 9
6417: PPUSH
6418: CALL_OW 12
6422: ARRAY
6423: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_VAR 0 3
6433: PPUSH
6434: CALL 6683 0 2
6438: NOT
6439: IFFALSE 6498
// repeat engine := _engine [ 1 ] ;
6441: LD_ADDR_VAR 0 3
6445: PUSH
6446: LD_VAR 0 11
6450: PUSH
6451: LD_INT 1
6453: ARRAY
6454: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6455: LD_ADDR_VAR 0 11
6459: PUSH
6460: LD_VAR 0 11
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: CALL_OW 3
6472: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 6683 0 2
6487: PUSH
6488: LD_VAR 0 11
6492: PUSH
6493: EMPTY
6494: EQUAL
6495: OR
6496: IFFALSE 6441
// if not control in _control then
6498: LD_VAR 0 4
6502: PUSH
6503: LD_VAR 0 12
6507: IN
6508: NOT
6509: IFFALSE 6535
// control := _control [ rand ( 1 , _control ) ] ;
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: LD_VAR 0 12
6520: PUSH
6521: LD_INT 1
6523: PPUSH
6524: LD_VAR 0 12
6528: PPUSH
6529: CALL_OW 12
6533: ARRAY
6534: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6535: LD_VAR 0 2
6539: PPUSH
6540: LD_VAR 0 5
6544: PPUSH
6545: CALL 6903 0 2
6549: NOT
6550: IFFALSE 6609
// repeat weapon := _weapon [ 1 ] ;
6552: LD_ADDR_VAR 0 5
6556: PUSH
6557: LD_VAR 0 10
6561: PUSH
6562: LD_INT 1
6564: ARRAY
6565: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6566: LD_ADDR_VAR 0 10
6570: PUSH
6571: LD_VAR 0 10
6575: PPUSH
6576: LD_INT 1
6578: PPUSH
6579: CALL_OW 3
6583: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6584: LD_VAR 0 2
6588: PPUSH
6589: LD_VAR 0 5
6593: PPUSH
6594: CALL 6903 0 2
6598: PUSH
6599: LD_VAR 0 10
6603: PUSH
6604: EMPTY
6605: EQUAL
6606: OR
6607: IFFALSE 6552
// result := [ ] ;
6609: LD_ADDR_VAR 0 6
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6616: LD_VAR 0 1
6620: PPUSH
6621: LD_VAR 0 2
6625: PPUSH
6626: LD_VAR 0 3
6630: PPUSH
6631: LD_VAR 0 4
6635: PPUSH
6636: LD_VAR 0 5
6640: PPUSH
6641: CALL_OW 448
6645: IFFALSE 6678
// result := [ chassis , engine , control , weapon ] ;
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: LD_VAR 0 2
6656: PUSH
6657: LD_VAR 0 3
6661: PUSH
6662: LD_VAR 0 4
6666: PUSH
6667: LD_VAR 0 5
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// end ;
6678: LD_VAR 0 6
6682: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6683: LD_INT 0
6685: PPUSH
// if not chassis or not engine then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: IFFALSE 6702
// exit ;
6700: GO 6898
// case engine of engine_solar :
6702: LD_VAR 0 2
6706: PUSH
6707: LD_INT 2
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6753
6715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 13
6729: PUSH
6730: LD_INT 14
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: LD_INT 2
6738: PUSH
6739: LD_INT 3
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: ST_TO_ADDR
6751: GO 6882
6753: LD_INT 1
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6823
6761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: LD_INT 11
6769: PUSH
6770: LD_INT 12
6772: PUSH
6773: LD_INT 13
6775: PUSH
6776: LD_INT 14
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 21
6796: PUSH
6797: LD_INT 23
6799: PUSH
6800: LD_INT 22
6802: PUSH
6803: LD_INT 24
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: ST_TO_ADDR
6821: GO 6882
6823: LD_INT 3
6825: DOUBLE
6826: EQUAL
6827: IFTRUE 6831
6829: GO 6881
6831: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6832: LD_ADDR_VAR 0 3
6836: PUSH
6837: LD_INT 13
6839: PUSH
6840: LD_INT 14
6842: PUSH
6843: LD_INT 2
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: LD_INT 4
6851: PUSH
6852: LD_INT 5
6854: PUSH
6855: LD_INT 21
6857: PUSH
6858: LD_INT 22
6860: PUSH
6861: LD_INT 23
6863: PUSH
6864: LD_INT 24
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: ST_TO_ADDR
6879: GO 6882
6881: POP
// result := ( chassis in result ) ;
6882: LD_ADDR_VAR 0 3
6886: PUSH
6887: LD_VAR 0 1
6891: PUSH
6892: LD_VAR 0 3
6896: IN
6897: ST_TO_ADDR
// end ;
6898: LD_VAR 0 3
6902: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6903: LD_INT 0
6905: PPUSH
// if not chassis or not weapon then
6906: LD_VAR 0 1
6910: NOT
6911: PUSH
6912: LD_VAR 0 2
6916: NOT
6917: OR
6918: IFFALSE 6922
// exit ;
6920: GO 7984
// case weapon of us_machine_gun :
6922: LD_VAR 0 2
6926: PUSH
6927: LD_INT 2
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6935
6933: GO 6965
6935: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: LD_INT 2
6946: PUSH
6947: LD_INT 3
6949: PUSH
6950: LD_INT 4
6952: PUSH
6953: LD_INT 5
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
6963: GO 7968
6965: LD_INT 3
6967: DOUBLE
6968: EQUAL
6969: IFTRUE 6973
6971: GO 7003
6973: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: LD_INT 4
6990: PUSH
6991: LD_INT 5
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: ST_TO_ADDR
7001: GO 7968
7003: LD_INT 11
7005: DOUBLE
7006: EQUAL
7007: IFTRUE 7011
7009: GO 7041
7011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7012: LD_ADDR_VAR 0 3
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 4
7028: PUSH
7029: LD_INT 5
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: ST_TO_ADDR
7039: GO 7968
7041: LD_INT 4
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7075
7049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7050: LD_ADDR_VAR 0 3
7054: PUSH
7055: LD_INT 2
7057: PUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 4
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: ST_TO_ADDR
7073: GO 7968
7075: LD_INT 5
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7109
7083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 3
7094: PUSH
7095: LD_INT 4
7097: PUSH
7098: LD_INT 5
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7968
7109: LD_INT 9
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7143
7117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: LD_INT 3
7128: PUSH
7129: LD_INT 4
7131: PUSH
7132: LD_INT 5
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: ST_TO_ADDR
7141: GO 7968
7143: LD_INT 7
7145: DOUBLE
7146: EQUAL
7147: IFTRUE 7151
7149: GO 7177
7151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7152: LD_ADDR_VAR 0 3
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: LD_INT 4
7165: PUSH
7166: LD_INT 5
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
7175: GO 7968
7177: LD_INT 12
7179: DOUBLE
7180: EQUAL
7181: IFTRUE 7185
7183: GO 7211
7185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: LD_INT 2
7193: PUSH
7194: LD_INT 3
7196: PUSH
7197: LD_INT 4
7199: PUSH
7200: LD_INT 5
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: ST_TO_ADDR
7209: GO 7968
7211: LD_INT 13
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7245
7219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: LD_INT 4
7233: PUSH
7234: LD_INT 5
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: ST_TO_ADDR
7243: GO 7968
7245: LD_INT 14
7247: DOUBLE
7248: EQUAL
7249: IFTRUE 7253
7251: GO 7271
7253: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7254: LD_ADDR_VAR 0 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: ST_TO_ADDR
7269: GO 7968
7271: LD_INT 6
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7297
7279: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7280: LD_ADDR_VAR 0 3
7284: PUSH
7285: LD_INT 4
7287: PUSH
7288: LD_INT 5
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: ST_TO_ADDR
7295: GO 7968
7297: LD_INT 10
7299: DOUBLE
7300: EQUAL
7301: IFTRUE 7305
7303: GO 7323
7305: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7306: LD_ADDR_VAR 0 3
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: ST_TO_ADDR
7321: GO 7968
7323: LD_INT 22
7325: DOUBLE
7326: EQUAL
7327: IFTRUE 7331
7329: GO 7357
7331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_INT 11
7339: PUSH
7340: LD_INT 12
7342: PUSH
7343: LD_INT 13
7345: PUSH
7346: LD_INT 14
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: ST_TO_ADDR
7355: GO 7968
7357: LD_INT 23
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7391
7365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: ST_TO_ADDR
7389: GO 7968
7391: LD_INT 24
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7425
7399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 11
7407: PUSH
7408: LD_INT 12
7410: PUSH
7411: LD_INT 13
7413: PUSH
7414: LD_INT 14
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: ST_TO_ADDR
7423: GO 7968
7425: LD_INT 30
7427: DOUBLE
7428: EQUAL
7429: IFTRUE 7433
7431: GO 7459
7433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7434: LD_ADDR_VAR 0 3
7438: PUSH
7439: LD_INT 11
7441: PUSH
7442: LD_INT 12
7444: PUSH
7445: LD_INT 13
7447: PUSH
7448: LD_INT 14
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: ST_TO_ADDR
7457: GO 7968
7459: LD_INT 25
7461: DOUBLE
7462: EQUAL
7463: IFTRUE 7467
7465: GO 7485
7467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7468: LD_ADDR_VAR 0 3
7472: PUSH
7473: LD_INT 13
7475: PUSH
7476: LD_INT 14
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: ST_TO_ADDR
7483: GO 7968
7485: LD_INT 27
7487: DOUBLE
7488: EQUAL
7489: IFTRUE 7493
7491: GO 7511
7493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7494: LD_ADDR_VAR 0 3
7498: PUSH
7499: LD_INT 13
7501: PUSH
7502: LD_INT 14
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: ST_TO_ADDR
7509: GO 7968
7511: LD_EXP 26
7515: DOUBLE
7516: EQUAL
7517: IFTRUE 7521
7519: GO 7547
7521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7522: LD_ADDR_VAR 0 3
7526: PUSH
7527: LD_INT 11
7529: PUSH
7530: LD_INT 12
7532: PUSH
7533: LD_INT 13
7535: PUSH
7536: LD_INT 14
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
7545: GO 7968
7547: LD_INT 28
7549: DOUBLE
7550: EQUAL
7551: IFTRUE 7555
7553: GO 7573
7555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7556: LD_ADDR_VAR 0 3
7560: PUSH
7561: LD_INT 13
7563: PUSH
7564: LD_INT 14
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: ST_TO_ADDR
7571: GO 7968
7573: LD_INT 29
7575: DOUBLE
7576: EQUAL
7577: IFTRUE 7581
7579: GO 7599
7581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7582: LD_ADDR_VAR 0 3
7586: PUSH
7587: LD_INT 13
7589: PUSH
7590: LD_INT 14
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: ST_TO_ADDR
7597: GO 7968
7599: LD_INT 31
7601: DOUBLE
7602: EQUAL
7603: IFTRUE 7607
7605: GO 7625
7607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7608: LD_ADDR_VAR 0 3
7612: PUSH
7613: LD_INT 13
7615: PUSH
7616: LD_INT 14
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: ST_TO_ADDR
7623: GO 7968
7625: LD_INT 26
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7651
7633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7634: LD_ADDR_VAR 0 3
7638: PUSH
7639: LD_INT 13
7641: PUSH
7642: LD_INT 14
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: ST_TO_ADDR
7649: GO 7968
7651: LD_INT 42
7653: DOUBLE
7654: EQUAL
7655: IFTRUE 7659
7657: GO 7685
7659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: LD_INT 21
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 23
7673: PUSH
7674: LD_INT 24
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: ST_TO_ADDR
7683: GO 7968
7685: LD_INT 43
7687: DOUBLE
7688: EQUAL
7689: IFTRUE 7693
7691: GO 7719
7693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7694: LD_ADDR_VAR 0 3
7698: PUSH
7699: LD_INT 21
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_INT 23
7707: PUSH
7708: LD_INT 24
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: ST_TO_ADDR
7717: GO 7968
7719: LD_INT 44
7721: DOUBLE
7722: EQUAL
7723: IFTRUE 7727
7725: GO 7753
7727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7728: LD_ADDR_VAR 0 3
7732: PUSH
7733: LD_INT 21
7735: PUSH
7736: LD_INT 22
7738: PUSH
7739: LD_INT 23
7741: PUSH
7742: LD_INT 24
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
7751: GO 7968
7753: LD_INT 45
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7787
7761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7762: LD_ADDR_VAR 0 3
7766: PUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 22
7772: PUSH
7773: LD_INT 23
7775: PUSH
7776: LD_INT 24
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: ST_TO_ADDR
7785: GO 7968
7787: LD_INT 49
7789: DOUBLE
7790: EQUAL
7791: IFTRUE 7795
7793: GO 7821
7795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7796: LD_ADDR_VAR 0 3
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 22
7806: PUSH
7807: LD_INT 23
7809: PUSH
7810: LD_INT 24
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: ST_TO_ADDR
7819: GO 7968
7821: LD_INT 51
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 7855
7829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 22
7840: PUSH
7841: LD_INT 23
7843: PUSH
7844: LD_INT 24
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: ST_TO_ADDR
7853: GO 7968
7855: LD_INT 52
7857: DOUBLE
7858: EQUAL
7859: IFTRUE 7863
7861: GO 7889
7863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_INT 21
7871: PUSH
7872: LD_INT 22
7874: PUSH
7875: LD_INT 23
7877: PUSH
7878: LD_INT 24
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: ST_TO_ADDR
7887: GO 7968
7889: LD_INT 53
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7915
7897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7898: LD_ADDR_VAR 0 3
7902: PUSH
7903: LD_INT 23
7905: PUSH
7906: LD_INT 24
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
7913: GO 7968
7915: LD_INT 46
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7941
7923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7924: LD_ADDR_VAR 0 3
7928: PUSH
7929: LD_INT 23
7931: PUSH
7932: LD_INT 24
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: ST_TO_ADDR
7939: GO 7968
7941: LD_INT 47
7943: DOUBLE
7944: EQUAL
7945: IFTRUE 7949
7947: GO 7967
7949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7950: LD_ADDR_VAR 0 3
7954: PUSH
7955: LD_INT 23
7957: PUSH
7958: LD_INT 24
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
7965: GO 7968
7967: POP
// result := ( chassis in result ) ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_VAR 0 1
7977: PUSH
7978: LD_VAR 0 3
7982: IN
7983: ST_TO_ADDR
// end ;
7984: LD_VAR 0 3
7988: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7989: LD_INT 0
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
7995: PPUSH
7996: PPUSH
7997: PPUSH
// result := array ;
7998: LD_ADDR_VAR 0 5
8002: PUSH
8003: LD_VAR 0 1
8007: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8008: LD_VAR 0 1
8012: NOT
8013: PUSH
8014: LD_VAR 0 2
8018: NOT
8019: OR
8020: PUSH
8021: LD_VAR 0 3
8025: NOT
8026: OR
8027: PUSH
8028: LD_VAR 0 2
8032: PUSH
8033: LD_VAR 0 1
8037: GREATER
8038: OR
8039: PUSH
8040: LD_VAR 0 3
8044: PUSH
8045: LD_VAR 0 1
8049: GREATER
8050: OR
8051: IFFALSE 8055
// exit ;
8053: GO 8351
// if direction then
8055: LD_VAR 0 4
8059: IFFALSE 8123
// begin d := 1 ;
8061: LD_ADDR_VAR 0 9
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if i_from > i_to then
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 3
8078: GREATER
8079: IFFALSE 8105
// length := ( array - i_from ) + i_to else
8081: LD_ADDR_VAR 0 11
8085: PUSH
8086: LD_VAR 0 1
8090: PUSH
8091: LD_VAR 0 2
8095: MINUS
8096: PUSH
8097: LD_VAR 0 3
8101: PLUS
8102: ST_TO_ADDR
8103: GO 8121
// length := i_to - i_from ;
8105: LD_ADDR_VAR 0 11
8109: PUSH
8110: LD_VAR 0 3
8114: PUSH
8115: LD_VAR 0 2
8119: MINUS
8120: ST_TO_ADDR
// end else
8121: GO 8184
// begin d := - 1 ;
8123: LD_ADDR_VAR 0 9
8127: PUSH
8128: LD_INT 1
8130: NEG
8131: ST_TO_ADDR
// if i_from > i_to then
8132: LD_VAR 0 2
8136: PUSH
8137: LD_VAR 0 3
8141: GREATER
8142: IFFALSE 8162
// length := i_from - i_to else
8144: LD_ADDR_VAR 0 11
8148: PUSH
8149: LD_VAR 0 2
8153: PUSH
8154: LD_VAR 0 3
8158: MINUS
8159: ST_TO_ADDR
8160: GO 8184
// length := ( array - i_to ) + i_from ;
8162: LD_ADDR_VAR 0 11
8166: PUSH
8167: LD_VAR 0 1
8171: PUSH
8172: LD_VAR 0 3
8176: MINUS
8177: PUSH
8178: LD_VAR 0 2
8182: PLUS
8183: ST_TO_ADDR
// end ; if not length then
8184: LD_VAR 0 11
8188: NOT
8189: IFFALSE 8193
// exit ;
8191: GO 8351
// tmp := array ;
8193: LD_ADDR_VAR 0 10
8197: PUSH
8198: LD_VAR 0 1
8202: ST_TO_ADDR
// for i = 1 to length do
8203: LD_ADDR_VAR 0 6
8207: PUSH
8208: DOUBLE
8209: LD_INT 1
8211: DEC
8212: ST_TO_ADDR
8213: LD_VAR 0 11
8217: PUSH
8218: FOR_TO
8219: IFFALSE 8339
// begin for j = 1 to array do
8221: LD_ADDR_VAR 0 7
8225: PUSH
8226: DOUBLE
8227: LD_INT 1
8229: DEC
8230: ST_TO_ADDR
8231: LD_VAR 0 1
8235: PUSH
8236: FOR_TO
8237: IFFALSE 8325
// begin k := j + d ;
8239: LD_ADDR_VAR 0 8
8243: PUSH
8244: LD_VAR 0 7
8248: PUSH
8249: LD_VAR 0 9
8253: PLUS
8254: ST_TO_ADDR
// if k > array then
8255: LD_VAR 0 8
8259: PUSH
8260: LD_VAR 0 1
8264: GREATER
8265: IFFALSE 8275
// k := 1 ;
8267: LD_ADDR_VAR 0 8
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if not k then
8275: LD_VAR 0 8
8279: NOT
8280: IFFALSE 8292
// k := array ;
8282: LD_ADDR_VAR 0 8
8286: PUSH
8287: LD_VAR 0 1
8291: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8292: LD_ADDR_VAR 0 10
8296: PUSH
8297: LD_VAR 0 10
8301: PPUSH
8302: LD_VAR 0 8
8306: PPUSH
8307: LD_VAR 0 1
8311: PUSH
8312: LD_VAR 0 7
8316: ARRAY
8317: PPUSH
8318: CALL_OW 1
8322: ST_TO_ADDR
// end ;
8323: GO 8236
8325: POP
8326: POP
// array := tmp ;
8327: LD_ADDR_VAR 0 1
8331: PUSH
8332: LD_VAR 0 10
8336: ST_TO_ADDR
// end ;
8337: GO 8218
8339: POP
8340: POP
// result := array ;
8341: LD_ADDR_VAR 0 5
8345: PUSH
8346: LD_VAR 0 1
8350: ST_TO_ADDR
// end ;
8351: LD_VAR 0 5
8355: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
// result := 0 ;
8360: LD_ADDR_VAR 0 3
8364: PUSH
8365: LD_INT 0
8367: ST_TO_ADDR
// if not array or not value in array then
8368: LD_VAR 0 1
8372: NOT
8373: PUSH
8374: LD_VAR 0 2
8378: PUSH
8379: LD_VAR 0 1
8383: IN
8384: NOT
8385: OR
8386: IFFALSE 8390
// exit ;
8388: GO 8444
// for i = 1 to array do
8390: LD_ADDR_VAR 0 4
8394: PUSH
8395: DOUBLE
8396: LD_INT 1
8398: DEC
8399: ST_TO_ADDR
8400: LD_VAR 0 1
8404: PUSH
8405: FOR_TO
8406: IFFALSE 8442
// if value = array [ i ] then
8408: LD_VAR 0 2
8412: PUSH
8413: LD_VAR 0 1
8417: PUSH
8418: LD_VAR 0 4
8422: ARRAY
8423: EQUAL
8424: IFFALSE 8440
// begin result := i ;
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_VAR 0 4
8435: ST_TO_ADDR
// exit ;
8436: POP
8437: POP
8438: GO 8444
// end ;
8440: GO 8405
8442: POP
8443: POP
// end ;
8444: LD_VAR 0 3
8448: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8449: LD_INT 0
8451: PPUSH
// vc_chassis := chassis ;
8452: LD_ADDR_OWVAR 37
8456: PUSH
8457: LD_VAR 0 1
8461: ST_TO_ADDR
// vc_engine := engine ;
8462: LD_ADDR_OWVAR 39
8466: PUSH
8467: LD_VAR 0 2
8471: ST_TO_ADDR
// vc_control := control ;
8472: LD_ADDR_OWVAR 38
8476: PUSH
8477: LD_VAR 0 3
8481: ST_TO_ADDR
// vc_weapon := weapon ;
8482: LD_ADDR_OWVAR 40
8486: PUSH
8487: LD_VAR 0 4
8491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8492: LD_ADDR_OWVAR 41
8496: PUSH
8497: LD_VAR 0 5
8501: ST_TO_ADDR
// end ;
8502: LD_VAR 0 6
8506: RET
// export function WantPlant ( unit ) ; var task ; begin
8507: LD_INT 0
8509: PPUSH
8510: PPUSH
// result := false ;
8511: LD_ADDR_VAR 0 2
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8519: LD_ADDR_VAR 0 3
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 437
8533: ST_TO_ADDR
// if task then
8534: LD_VAR 0 3
8538: IFFALSE 8566
// if task [ 1 ] [ 1 ] = p then
8540: LD_VAR 0 3
8544: PUSH
8545: LD_INT 1
8547: ARRAY
8548: PUSH
8549: LD_INT 1
8551: ARRAY
8552: PUSH
8553: LD_STRING p
8555: EQUAL
8556: IFFALSE 8566
// result := true ;
8558: LD_ADDR_VAR 0 2
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// end ;
8566: LD_VAR 0 2
8570: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
// if pos < 1 then
8577: LD_VAR 0 2
8581: PUSH
8582: LD_INT 1
8584: LESS
8585: IFFALSE 8589
// exit ;
8587: GO 8892
// if pos = 1 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_INT 1
8596: EQUAL
8597: IFFALSE 8630
// result := Replace ( arr , pos [ 1 ] , value ) else
8599: LD_ADDR_VAR 0 4
8603: PUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: LD_VAR 0 2
8613: PUSH
8614: LD_INT 1
8616: ARRAY
8617: PPUSH
8618: LD_VAR 0 3
8622: PPUSH
8623: CALL_OW 1
8627: ST_TO_ADDR
8628: GO 8892
// begin tmp := arr ;
8630: LD_ADDR_VAR 0 6
8634: PUSH
8635: LD_VAR 0 1
8639: ST_TO_ADDR
// s_arr := [ tmp ] ;
8640: LD_ADDR_VAR 0 7
8644: PUSH
8645: LD_VAR 0 6
8649: PUSH
8650: EMPTY
8651: LIST
8652: ST_TO_ADDR
// for i = 1 to pos - 1 do
8653: LD_ADDR_VAR 0 5
8657: PUSH
8658: DOUBLE
8659: LD_INT 1
8661: DEC
8662: ST_TO_ADDR
8663: LD_VAR 0 2
8667: PUSH
8668: LD_INT 1
8670: MINUS
8671: PUSH
8672: FOR_TO
8673: IFFALSE 8718
// begin tmp := tmp [ pos [ i ] ] ;
8675: LD_ADDR_VAR 0 6
8679: PUSH
8680: LD_VAR 0 6
8684: PUSH
8685: LD_VAR 0 2
8689: PUSH
8690: LD_VAR 0 5
8694: ARRAY
8695: ARRAY
8696: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8697: LD_ADDR_VAR 0 7
8701: PUSH
8702: LD_VAR 0 7
8706: PUSH
8707: LD_VAR 0 6
8711: PUSH
8712: EMPTY
8713: LIST
8714: ADD
8715: ST_TO_ADDR
// end ;
8716: GO 8672
8718: POP
8719: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8720: LD_ADDR_VAR 0 6
8724: PUSH
8725: LD_VAR 0 6
8729: PPUSH
8730: LD_VAR 0 2
8734: PUSH
8735: LD_VAR 0 2
8739: ARRAY
8740: PPUSH
8741: LD_VAR 0 3
8745: PPUSH
8746: CALL_OW 1
8750: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8751: LD_ADDR_VAR 0 7
8755: PUSH
8756: LD_VAR 0 7
8760: PPUSH
8761: LD_VAR 0 7
8765: PPUSH
8766: LD_VAR 0 6
8770: PPUSH
8771: CALL_OW 1
8775: ST_TO_ADDR
// for i = s_arr downto 2 do
8776: LD_ADDR_VAR 0 5
8780: PUSH
8781: DOUBLE
8782: LD_VAR 0 7
8786: INC
8787: ST_TO_ADDR
8788: LD_INT 2
8790: PUSH
8791: FOR_DOWNTO
8792: IFFALSE 8876
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8794: LD_ADDR_VAR 0 6
8798: PUSH
8799: LD_VAR 0 7
8803: PUSH
8804: LD_VAR 0 5
8808: PUSH
8809: LD_INT 1
8811: MINUS
8812: ARRAY
8813: PPUSH
8814: LD_VAR 0 2
8818: PUSH
8819: LD_VAR 0 5
8823: PUSH
8824: LD_INT 1
8826: MINUS
8827: ARRAY
8828: PPUSH
8829: LD_VAR 0 7
8833: PUSH
8834: LD_VAR 0 5
8838: ARRAY
8839: PPUSH
8840: CALL_OW 1
8844: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8845: LD_ADDR_VAR 0 7
8849: PUSH
8850: LD_VAR 0 7
8854: PPUSH
8855: LD_VAR 0 5
8859: PUSH
8860: LD_INT 1
8862: MINUS
8863: PPUSH
8864: LD_VAR 0 6
8868: PPUSH
8869: CALL_OW 1
8873: ST_TO_ADDR
// end ;
8874: GO 8791
8876: POP
8877: POP
// result := s_arr [ 1 ] ;
8878: LD_ADDR_VAR 0 4
8882: PUSH
8883: LD_VAR 0 7
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: ST_TO_ADDR
// end ; end ;
8892: LD_VAR 0 4
8896: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
// if not list then
8901: LD_VAR 0 1
8905: NOT
8906: IFFALSE 8910
// exit ;
8908: GO 9001
// i := list [ pos1 ] ;
8910: LD_ADDR_VAR 0 5
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: LD_VAR 0 2
8924: ARRAY
8925: ST_TO_ADDR
// if not i then
8926: LD_VAR 0 5
8930: NOT
8931: IFFALSE 8935
// exit ;
8933: GO 9001
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8935: LD_ADDR_VAR 0 1
8939: PUSH
8940: LD_VAR 0 1
8944: PPUSH
8945: LD_VAR 0 2
8949: PPUSH
8950: LD_VAR 0 1
8954: PUSH
8955: LD_VAR 0 3
8959: ARRAY
8960: PPUSH
8961: CALL_OW 1
8965: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8966: LD_ADDR_VAR 0 1
8970: PUSH
8971: LD_VAR 0 1
8975: PPUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_VAR 0 5
8985: PPUSH
8986: CALL_OW 1
8990: ST_TO_ADDR
// result := list ;
8991: LD_ADDR_VAR 0 4
8995: PUSH
8996: LD_VAR 0 1
9000: ST_TO_ADDR
// end ;
9001: LD_VAR 0 4
9005: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9006: LD_INT 0
9008: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9009: LD_ADDR_VAR 0 5
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 250
9023: PPUSH
9024: LD_VAR 0 1
9028: PPUSH
9029: CALL_OW 251
9033: PPUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_VAR 0 3
9043: PPUSH
9044: LD_VAR 0 4
9048: PPUSH
9049: CALL 9059 0 5
9053: ST_TO_ADDR
// end ;
9054: LD_VAR 0 5
9058: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9059: LD_INT 0
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
// if not list then
9065: LD_VAR 0 3
9069: NOT
9070: IFFALSE 9074
// exit ;
9072: GO 9462
// result := [ ] ;
9074: LD_ADDR_VAR 0 6
9078: PUSH
9079: EMPTY
9080: ST_TO_ADDR
// for i in list do
9081: LD_ADDR_VAR 0 7
9085: PUSH
9086: LD_VAR 0 3
9090: PUSH
9091: FOR_IN
9092: IFFALSE 9294
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9094: LD_ADDR_VAR 0 9
9098: PUSH
9099: LD_VAR 0 7
9103: PPUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: CALL_OW 297
9118: ST_TO_ADDR
// if not result then
9119: LD_VAR 0 6
9123: NOT
9124: IFFALSE 9150
// result := [ [ i , tmp ] ] else
9126: LD_ADDR_VAR 0 6
9130: PUSH
9131: LD_VAR 0 7
9135: PUSH
9136: LD_VAR 0 9
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: ST_TO_ADDR
9148: GO 9292
// begin if result [ result ] [ 2 ] < tmp then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_VAR 0 6
9159: ARRAY
9160: PUSH
9161: LD_INT 2
9163: ARRAY
9164: PUSH
9165: LD_VAR 0 9
9169: LESS
9170: IFFALSE 9212
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 6
9181: PPUSH
9182: LD_VAR 0 6
9186: PUSH
9187: LD_INT 1
9189: PLUS
9190: PPUSH
9191: LD_VAR 0 7
9195: PUSH
9196: LD_VAR 0 9
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PPUSH
9205: CALL_OW 2
9209: ST_TO_ADDR
9210: GO 9292
// for j = 1 to result do
9212: LD_ADDR_VAR 0 8
9216: PUSH
9217: DOUBLE
9218: LD_INT 1
9220: DEC
9221: ST_TO_ADDR
9222: LD_VAR 0 6
9226: PUSH
9227: FOR_TO
9228: IFFALSE 9290
// begin if tmp < result [ j ] [ 2 ] then
9230: LD_VAR 0 9
9234: PUSH
9235: LD_VAR 0 6
9239: PUSH
9240: LD_VAR 0 8
9244: ARRAY
9245: PUSH
9246: LD_INT 2
9248: ARRAY
9249: LESS
9250: IFFALSE 9288
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9252: LD_ADDR_VAR 0 6
9256: PUSH
9257: LD_VAR 0 6
9261: PPUSH
9262: LD_VAR 0 8
9266: PPUSH
9267: LD_VAR 0 7
9271: PUSH
9272: LD_VAR 0 9
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: CALL_OW 2
9285: ST_TO_ADDR
// break ;
9286: GO 9290
// end ; end ;
9288: GO 9227
9290: POP
9291: POP
// end ; end ;
9292: GO 9091
9294: POP
9295: POP
// if result and not asc then
9296: LD_VAR 0 6
9300: PUSH
9301: LD_VAR 0 4
9305: NOT
9306: AND
9307: IFFALSE 9382
// begin tmp := result ;
9309: LD_ADDR_VAR 0 9
9313: PUSH
9314: LD_VAR 0 6
9318: ST_TO_ADDR
// for i = tmp downto 1 do
9319: LD_ADDR_VAR 0 7
9323: PUSH
9324: DOUBLE
9325: LD_VAR 0 9
9329: INC
9330: ST_TO_ADDR
9331: LD_INT 1
9333: PUSH
9334: FOR_DOWNTO
9335: IFFALSE 9380
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9337: LD_ADDR_VAR 0 6
9341: PUSH
9342: LD_VAR 0 6
9346: PPUSH
9347: LD_VAR 0 9
9351: PUSH
9352: LD_VAR 0 7
9356: MINUS
9357: PUSH
9358: LD_INT 1
9360: PLUS
9361: PPUSH
9362: LD_VAR 0 9
9366: PUSH
9367: LD_VAR 0 7
9371: ARRAY
9372: PPUSH
9373: CALL_OW 1
9377: ST_TO_ADDR
9378: GO 9334
9380: POP
9381: POP
// end ; tmp := [ ] ;
9382: LD_ADDR_VAR 0 9
9386: PUSH
9387: EMPTY
9388: ST_TO_ADDR
// if mode then
9389: LD_VAR 0 5
9393: IFFALSE 9462
// begin for i = 1 to result do
9395: LD_ADDR_VAR 0 7
9399: PUSH
9400: DOUBLE
9401: LD_INT 1
9403: DEC
9404: ST_TO_ADDR
9405: LD_VAR 0 6
9409: PUSH
9410: FOR_TO
9411: IFFALSE 9450
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9413: LD_ADDR_VAR 0 9
9417: PUSH
9418: LD_VAR 0 9
9422: PPUSH
9423: LD_VAR 0 7
9427: PPUSH
9428: LD_VAR 0 6
9432: PUSH
9433: LD_VAR 0 7
9437: ARRAY
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PPUSH
9443: CALL_OW 1
9447: ST_TO_ADDR
9448: GO 9410
9450: POP
9451: POP
// result := tmp ;
9452: LD_ADDR_VAR 0 6
9456: PUSH
9457: LD_VAR 0 9
9461: ST_TO_ADDR
// end ; end ;
9462: LD_VAR 0 6
9466: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9467: LD_INT 0
9469: PPUSH
9470: PPUSH
9471: PPUSH
9472: PPUSH
9473: PPUSH
9474: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9475: LD_ADDR_VAR 0 5
9479: PUSH
9480: LD_INT 0
9482: PUSH
9483: LD_INT 0
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: EMPTY
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: ST_TO_ADDR
// if not x or not y then
9497: LD_VAR 0 2
9501: NOT
9502: PUSH
9503: LD_VAR 0 3
9507: NOT
9508: OR
9509: IFFALSE 9513
// exit ;
9511: GO 11165
// if not range then
9513: LD_VAR 0 4
9517: NOT
9518: IFFALSE 9528
// range := 10 ;
9520: LD_ADDR_VAR 0 4
9524: PUSH
9525: LD_INT 10
9527: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9528: LD_ADDR_VAR 0 8
9532: PUSH
9533: LD_INT 81
9535: PUSH
9536: LD_VAR 0 1
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 92
9547: PUSH
9548: LD_VAR 0 2
9552: PUSH
9553: LD_VAR 0 3
9557: PUSH
9558: LD_VAR 0 4
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 3
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 3
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: ST_TO_ADDR
// if not tmp then
9596: LD_VAR 0 8
9600: NOT
9601: IFFALSE 9605
// exit ;
9603: GO 11165
// for i in tmp do
9605: LD_ADDR_VAR 0 6
9609: PUSH
9610: LD_VAR 0 8
9614: PUSH
9615: FOR_IN
9616: IFFALSE 11140
// begin points := [ 0 , 0 , 0 ] ;
9618: LD_ADDR_VAR 0 9
9622: PUSH
9623: LD_INT 0
9625: PUSH
9626: LD_INT 0
9628: PUSH
9629: LD_INT 0
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: ST_TO_ADDR
// bpoints := 1 ;
9637: LD_ADDR_VAR 0 10
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9645: LD_VAR 0 6
9649: PPUSH
9650: CALL_OW 247
9654: PUSH
9655: LD_INT 1
9657: DOUBLE
9658: EQUAL
9659: IFTRUE 9663
9661: GO 10241
9663: POP
// begin if GetClass ( i ) = 1 then
9664: LD_VAR 0 6
9668: PPUSH
9669: CALL_OW 257
9673: PUSH
9674: LD_INT 1
9676: EQUAL
9677: IFFALSE 9698
// points := [ 10 , 5 , 3 ] ;
9679: LD_ADDR_VAR 0 9
9683: PUSH
9684: LD_INT 10
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 3
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9698: LD_VAR 0 6
9702: PPUSH
9703: CALL_OW 257
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 4
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: IN
9722: IFFALSE 9743
// points := [ 3 , 2 , 1 ] ;
9724: LD_ADDR_VAR 0 9
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: LD_INT 2
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9743: LD_VAR 0 6
9747: PPUSH
9748: CALL_OW 257
9752: PUSH
9753: LD_INT 5
9755: EQUAL
9756: IFFALSE 9777
// points := [ 130 , 5 , 2 ] ;
9758: LD_ADDR_VAR 0 9
9762: PUSH
9763: LD_INT 130
9765: PUSH
9766: LD_INT 5
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9777: LD_VAR 0 6
9781: PPUSH
9782: CALL_OW 257
9786: PUSH
9787: LD_INT 8
9789: EQUAL
9790: IFFALSE 9811
// points := [ 35 , 35 , 30 ] ;
9792: LD_ADDR_VAR 0 9
9796: PUSH
9797: LD_INT 35
9799: PUSH
9800: LD_INT 35
9802: PUSH
9803: LD_INT 30
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9811: LD_VAR 0 6
9815: PPUSH
9816: CALL_OW 257
9820: PUSH
9821: LD_INT 9
9823: EQUAL
9824: IFFALSE 9845
// points := [ 20 , 55 , 40 ] ;
9826: LD_ADDR_VAR 0 9
9830: PUSH
9831: LD_INT 20
9833: PUSH
9834: LD_INT 55
9836: PUSH
9837: LD_INT 40
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9845: LD_VAR 0 6
9849: PPUSH
9850: CALL_OW 257
9854: PUSH
9855: LD_INT 12
9857: PUSH
9858: LD_INT 16
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: IN
9865: IFFALSE 9886
// points := [ 5 , 3 , 2 ] ;
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_INT 5
9874: PUSH
9875: LD_INT 3
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 17
9898: EQUAL
9899: IFFALSE 9920
// points := [ 100 , 50 , 75 ] ;
9901: LD_ADDR_VAR 0 9
9905: PUSH
9906: LD_INT 100
9908: PUSH
9909: LD_INT 50
9911: PUSH
9912: LD_INT 75
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9920: LD_VAR 0 6
9924: PPUSH
9925: CALL_OW 257
9929: PUSH
9930: LD_INT 15
9932: EQUAL
9933: IFFALSE 9954
// points := [ 10 , 5 , 3 ] ;
9935: LD_ADDR_VAR 0 9
9939: PUSH
9940: LD_INT 10
9942: PUSH
9943: LD_INT 5
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9954: LD_VAR 0 6
9958: PPUSH
9959: CALL_OW 257
9963: PUSH
9964: LD_INT 14
9966: EQUAL
9967: IFFALSE 9988
// points := [ 10 , 0 , 0 ] ;
9969: LD_ADDR_VAR 0 9
9973: PUSH
9974: LD_INT 10
9976: PUSH
9977: LD_INT 0
9979: PUSH
9980: LD_INT 0
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9988: LD_VAR 0 6
9992: PPUSH
9993: CALL_OW 257
9997: PUSH
9998: LD_INT 11
10000: EQUAL
10001: IFFALSE 10022
// points := [ 30 , 10 , 5 ] ;
10003: LD_ADDR_VAR 0 9
10007: PUSH
10008: LD_INT 30
10010: PUSH
10011: LD_INT 10
10013: PUSH
10014: LD_INT 5
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 5
10029: PPUSH
10030: CALL_OW 321
10034: PUSH
10035: LD_INT 2
10037: EQUAL
10038: IFFALSE 10055
// bpoints := bpoints * 1.8 ;
10040: LD_ADDR_VAR 0 10
10044: PUSH
10045: LD_VAR 0 10
10049: PUSH
10050: LD_REAL  1.80000000000000E+0000
10053: MUL
10054: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10055: LD_VAR 0 6
10059: PPUSH
10060: CALL_OW 257
10064: PUSH
10065: LD_INT 1
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: LD_INT 3
10073: PUSH
10074: LD_INT 4
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: IN
10083: PUSH
10084: LD_VAR 0 1
10088: PPUSH
10089: LD_INT 51
10091: PPUSH
10092: CALL_OW 321
10096: PUSH
10097: LD_INT 2
10099: EQUAL
10100: AND
10101: IFFALSE 10118
// bpoints := bpoints * 1.2 ;
10103: LD_ADDR_VAR 0 10
10107: PUSH
10108: LD_VAR 0 10
10112: PUSH
10113: LD_REAL  1.20000000000000E+0000
10116: MUL
10117: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10118: LD_VAR 0 6
10122: PPUSH
10123: CALL_OW 257
10127: PUSH
10128: LD_INT 5
10130: PUSH
10131: LD_INT 7
10133: PUSH
10134: LD_INT 9
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: IN
10142: PUSH
10143: LD_VAR 0 1
10147: PPUSH
10148: LD_INT 52
10150: PPUSH
10151: CALL_OW 321
10155: PUSH
10156: LD_INT 2
10158: EQUAL
10159: AND
10160: IFFALSE 10177
// bpoints := bpoints * 1.5 ;
10162: LD_ADDR_VAR 0 10
10166: PUSH
10167: LD_VAR 0 10
10171: PUSH
10172: LD_REAL  1.50000000000000E+0000
10175: MUL
10176: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10177: LD_VAR 0 1
10181: PPUSH
10182: LD_INT 66
10184: PPUSH
10185: CALL_OW 321
10189: PUSH
10190: LD_INT 2
10192: EQUAL
10193: IFFALSE 10210
// bpoints := bpoints * 1.1 ;
10195: LD_ADDR_VAR 0 10
10199: PUSH
10200: LD_VAR 0 10
10204: PUSH
10205: LD_REAL  1.10000000000000E+0000
10208: MUL
10209: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10210: LD_ADDR_VAR 0 10
10214: PUSH
10215: LD_VAR 0 10
10219: PUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: LD_INT 1
10227: PPUSH
10228: CALL_OW 259
10232: PUSH
10233: LD_REAL  1.15000000000000E+0000
10236: MUL
10237: MUL
10238: ST_TO_ADDR
// end ; unit_vehicle :
10239: GO 11069
10241: LD_INT 2
10243: DOUBLE
10244: EQUAL
10245: IFTRUE 10249
10247: GO 11057
10249: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10250: LD_VAR 0 6
10254: PPUSH
10255: CALL_OW 264
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: LD_INT 42
10265: PUSH
10266: LD_INT 24
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: IN
10274: IFFALSE 10295
// points := [ 25 , 5 , 3 ] ;
10276: LD_ADDR_VAR 0 9
10280: PUSH
10281: LD_INT 25
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10295: LD_VAR 0 6
10299: PPUSH
10300: CALL_OW 264
10304: PUSH
10305: LD_INT 4
10307: PUSH
10308: LD_INT 43
10310: PUSH
10311: LD_INT 25
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: IN
10319: IFFALSE 10340
// points := [ 40 , 15 , 5 ] ;
10321: LD_ADDR_VAR 0 9
10325: PUSH
10326: LD_INT 40
10328: PUSH
10329: LD_INT 15
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10340: LD_VAR 0 6
10344: PPUSH
10345: CALL_OW 264
10349: PUSH
10350: LD_INT 3
10352: PUSH
10353: LD_INT 23
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: IN
10360: IFFALSE 10381
// points := [ 7 , 25 , 8 ] ;
10362: LD_ADDR_VAR 0 9
10366: PUSH
10367: LD_INT 7
10369: PUSH
10370: LD_INT 25
10372: PUSH
10373: LD_INT 8
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10381: LD_VAR 0 6
10385: PPUSH
10386: CALL_OW 264
10390: PUSH
10391: LD_INT 5
10393: PUSH
10394: LD_INT 27
10396: PUSH
10397: LD_INT 44
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: IN
10405: IFFALSE 10426
// points := [ 14 , 50 , 16 ] ;
10407: LD_ADDR_VAR 0 9
10411: PUSH
10412: LD_INT 14
10414: PUSH
10415: LD_INT 50
10417: PUSH
10418: LD_INT 16
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10426: LD_VAR 0 6
10430: PPUSH
10431: CALL_OW 264
10435: PUSH
10436: LD_INT 6
10438: PUSH
10439: LD_INT 46
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: IN
10446: IFFALSE 10467
// points := [ 32 , 120 , 70 ] ;
10448: LD_ADDR_VAR 0 9
10452: PUSH
10453: LD_INT 32
10455: PUSH
10456: LD_INT 120
10458: PUSH
10459: LD_INT 70
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10467: LD_VAR 0 6
10471: PPUSH
10472: CALL_OW 264
10476: PUSH
10477: LD_INT 7
10479: PUSH
10480: LD_INT 28
10482: PUSH
10483: LD_INT 45
10485: PUSH
10486: LD_EXP 26
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: IN
10497: IFFALSE 10518
// points := [ 35 , 20 , 45 ] ;
10499: LD_ADDR_VAR 0 9
10503: PUSH
10504: LD_INT 35
10506: PUSH
10507: LD_INT 20
10509: PUSH
10510: LD_INT 45
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10518: LD_VAR 0 6
10522: PPUSH
10523: CALL_OW 264
10527: PUSH
10528: LD_INT 47
10530: PUSH
10531: EMPTY
10532: LIST
10533: IN
10534: IFFALSE 10555
// points := [ 67 , 45 , 75 ] ;
10536: LD_ADDR_VAR 0 9
10540: PUSH
10541: LD_INT 67
10543: PUSH
10544: LD_INT 45
10546: PUSH
10547: LD_INT 75
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10555: LD_VAR 0 6
10559: PPUSH
10560: CALL_OW 264
10564: PUSH
10565: LD_INT 26
10567: PUSH
10568: EMPTY
10569: LIST
10570: IN
10571: IFFALSE 10592
// points := [ 120 , 30 , 80 ] ;
10573: LD_ADDR_VAR 0 9
10577: PUSH
10578: LD_INT 120
10580: PUSH
10581: LD_INT 30
10583: PUSH
10584: LD_INT 80
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 264
10601: PUSH
10602: LD_INT 22
10604: PUSH
10605: EMPTY
10606: LIST
10607: IN
10608: IFFALSE 10629
// points := [ 40 , 1 , 1 ] ;
10610: LD_ADDR_VAR 0 9
10614: PUSH
10615: LD_INT 40
10617: PUSH
10618: LD_INT 1
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10629: LD_VAR 0 6
10633: PPUSH
10634: CALL_OW 264
10638: PUSH
10639: LD_INT 29
10641: PUSH
10642: EMPTY
10643: LIST
10644: IN
10645: IFFALSE 10666
// points := [ 70 , 200 , 400 ] ;
10647: LD_ADDR_VAR 0 9
10651: PUSH
10652: LD_INT 70
10654: PUSH
10655: LD_INT 200
10657: PUSH
10658: LD_INT 400
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10666: LD_VAR 0 6
10670: PPUSH
10671: CALL_OW 264
10675: PUSH
10676: LD_INT 14
10678: PUSH
10679: LD_INT 53
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: IN
10686: IFFALSE 10707
// points := [ 40 , 10 , 20 ] ;
10688: LD_ADDR_VAR 0 9
10692: PUSH
10693: LD_INT 40
10695: PUSH
10696: LD_INT 10
10698: PUSH
10699: LD_INT 20
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10707: LD_VAR 0 6
10711: PPUSH
10712: CALL_OW 264
10716: PUSH
10717: LD_INT 9
10719: PUSH
10720: EMPTY
10721: LIST
10722: IN
10723: IFFALSE 10744
// points := [ 5 , 70 , 20 ] ;
10725: LD_ADDR_VAR 0 9
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: LD_INT 70
10735: PUSH
10736: LD_INT 20
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10744: LD_VAR 0 6
10748: PPUSH
10749: CALL_OW 264
10753: PUSH
10754: LD_INT 10
10756: PUSH
10757: EMPTY
10758: LIST
10759: IN
10760: IFFALSE 10781
// points := [ 35 , 110 , 70 ] ;
10762: LD_ADDR_VAR 0 9
10766: PUSH
10767: LD_INT 35
10769: PUSH
10770: LD_INT 110
10772: PUSH
10773: LD_INT 70
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10781: LD_VAR 0 6
10785: PPUSH
10786: CALL_OW 265
10790: PUSH
10791: LD_INT 25
10793: EQUAL
10794: IFFALSE 10815
// points := [ 80 , 65 , 100 ] ;
10796: LD_ADDR_VAR 0 9
10800: PUSH
10801: LD_INT 80
10803: PUSH
10804: LD_INT 65
10806: PUSH
10807: LD_INT 100
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10815: LD_VAR 0 6
10819: PPUSH
10820: CALL_OW 263
10824: PUSH
10825: LD_INT 1
10827: EQUAL
10828: IFFALSE 10863
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10830: LD_ADDR_VAR 0 10
10834: PUSH
10835: LD_VAR 0 10
10839: PUSH
10840: LD_VAR 0 6
10844: PPUSH
10845: CALL_OW 311
10849: PPUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 259
10857: PUSH
10858: LD_INT 4
10860: MUL
10861: MUL
10862: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10863: LD_VAR 0 6
10867: PPUSH
10868: CALL_OW 263
10872: PUSH
10873: LD_INT 2
10875: EQUAL
10876: IFFALSE 10927
// begin j := IsControledBy ( i ) ;
10878: LD_ADDR_VAR 0 7
10882: PUSH
10883: LD_VAR 0 6
10887: PPUSH
10888: CALL_OW 312
10892: ST_TO_ADDR
// if j then
10893: LD_VAR 0 7
10897: IFFALSE 10927
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10899: LD_ADDR_VAR 0 10
10903: PUSH
10904: LD_VAR 0 10
10908: PUSH
10909: LD_VAR 0 7
10913: PPUSH
10914: LD_INT 3
10916: PPUSH
10917: CALL_OW 259
10921: PUSH
10922: LD_INT 3
10924: MUL
10925: MUL
10926: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10927: LD_VAR 0 6
10931: PPUSH
10932: CALL_OW 264
10936: PUSH
10937: LD_INT 5
10939: PUSH
10940: LD_INT 6
10942: PUSH
10943: LD_INT 46
10945: PUSH
10946: LD_INT 44
10948: PUSH
10949: LD_INT 47
10951: PUSH
10952: LD_INT 45
10954: PUSH
10955: LD_INT 28
10957: PUSH
10958: LD_INT 7
10960: PUSH
10961: LD_INT 27
10963: PUSH
10964: LD_INT 29
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: IN
10979: PUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: LD_INT 52
10987: PPUSH
10988: CALL_OW 321
10992: PUSH
10993: LD_INT 2
10995: EQUAL
10996: AND
10997: IFFALSE 11014
// bpoints := bpoints * 1.2 ;
10999: LD_ADDR_VAR 0 10
11003: PUSH
11004: LD_VAR 0 10
11008: PUSH
11009: LD_REAL  1.20000000000000E+0000
11012: MUL
11013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11014: LD_VAR 0 6
11018: PPUSH
11019: CALL_OW 264
11023: PUSH
11024: LD_INT 6
11026: PUSH
11027: LD_INT 46
11029: PUSH
11030: LD_INT 47
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: IN
11038: IFFALSE 11055
// bpoints := bpoints * 1.2 ;
11040: LD_ADDR_VAR 0 10
11044: PUSH
11045: LD_VAR 0 10
11049: PUSH
11050: LD_REAL  1.20000000000000E+0000
11053: MUL
11054: ST_TO_ADDR
// end ; unit_building :
11055: GO 11069
11057: LD_INT 3
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11068
11065: POP
// ; end ;
11066: GO 11069
11068: POP
// for j = 1 to 3 do
11069: LD_ADDR_VAR 0 7
11073: PUSH
11074: DOUBLE
11075: LD_INT 1
11077: DEC
11078: ST_TO_ADDR
11079: LD_INT 3
11081: PUSH
11082: FOR_TO
11083: IFFALSE 11136
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11085: LD_ADDR_VAR 0 5
11089: PUSH
11090: LD_VAR 0 5
11094: PPUSH
11095: LD_VAR 0 7
11099: PPUSH
11100: LD_VAR 0 5
11104: PUSH
11105: LD_VAR 0 7
11109: ARRAY
11110: PUSH
11111: LD_VAR 0 9
11115: PUSH
11116: LD_VAR 0 7
11120: ARRAY
11121: PUSH
11122: LD_VAR 0 10
11126: MUL
11127: PLUS
11128: PPUSH
11129: CALL_OW 1
11133: ST_TO_ADDR
11134: GO 11082
11136: POP
11137: POP
// end ;
11138: GO 9615
11140: POP
11141: POP
// result := Replace ( result , 4 , tmp ) ;
11142: LD_ADDR_VAR 0 5
11146: PUSH
11147: LD_VAR 0 5
11151: PPUSH
11152: LD_INT 4
11154: PPUSH
11155: LD_VAR 0 8
11159: PPUSH
11160: CALL_OW 1
11164: ST_TO_ADDR
// end ;
11165: LD_VAR 0 5
11169: RET
// export function DangerAtRange ( unit , range ) ; begin
11170: LD_INT 0
11172: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11173: LD_ADDR_VAR 0 3
11177: PUSH
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 255
11187: PPUSH
11188: LD_VAR 0 1
11192: PPUSH
11193: CALL_OW 250
11197: PPUSH
11198: LD_VAR 0 1
11202: PPUSH
11203: CALL_OW 251
11207: PPUSH
11208: LD_VAR 0 2
11212: PPUSH
11213: CALL 9467 0 4
11217: ST_TO_ADDR
// end ;
11218: LD_VAR 0 3
11222: RET
// export function DangerInArea ( side , area ) ; begin
11223: LD_INT 0
11225: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11226: LD_ADDR_VAR 0 3
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: LD_INT 81
11238: PUSH
11239: LD_VAR 0 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 70
11252: ST_TO_ADDR
// end ;
11253: LD_VAR 0 3
11257: RET
// export function IsExtension ( b ) ; begin
11258: LD_INT 0
11260: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11261: LD_ADDR_VAR 0 2
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 23
11273: PUSH
11274: LD_INT 20
11276: PUSH
11277: LD_INT 22
11279: PUSH
11280: LD_INT 17
11282: PUSH
11283: LD_INT 24
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 19
11291: PUSH
11292: LD_INT 16
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 18
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: IN
11313: ST_TO_ADDR
// end ;
11314: LD_VAR 0 2
11318: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11319: LD_INT 0
11321: PPUSH
11322: PPUSH
11323: PPUSH
// result := [ ] ;
11324: LD_ADDR_VAR 0 4
11328: PUSH
11329: EMPTY
11330: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11331: LD_ADDR_VAR 0 5
11335: PUSH
11336: LD_VAR 0 2
11340: PPUSH
11341: LD_INT 21
11343: PUSH
11344: LD_INT 3
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 70
11355: ST_TO_ADDR
// if not tmp then
11356: LD_VAR 0 5
11360: NOT
11361: IFFALSE 11365
// exit ;
11363: GO 11429
// if checkLink then
11365: LD_VAR 0 3
11369: IFFALSE 11419
// begin for i in tmp do
11371: LD_ADDR_VAR 0 6
11375: PUSH
11376: LD_VAR 0 5
11380: PUSH
11381: FOR_IN
11382: IFFALSE 11417
// if GetBase ( i ) <> base then
11384: LD_VAR 0 6
11388: PPUSH
11389: CALL_OW 274
11393: PUSH
11394: LD_VAR 0 1
11398: NONEQUAL
11399: IFFALSE 11415
// ComLinkToBase ( base , i ) ;
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_VAR 0 6
11410: PPUSH
11411: CALL_OW 169
11415: GO 11381
11417: POP
11418: POP
// end ; result := tmp ;
11419: LD_ADDR_VAR 0 4
11423: PUSH
11424: LD_VAR 0 5
11428: ST_TO_ADDR
// end ;
11429: LD_VAR 0 4
11433: RET
// export function ComComplete ( units , b ) ; var i ; begin
11434: LD_INT 0
11436: PPUSH
11437: PPUSH
// if not units then
11438: LD_VAR 0 1
11442: NOT
11443: IFFALSE 11447
// exit ;
11445: GO 11537
// for i in units do
11447: LD_ADDR_VAR 0 4
11451: PUSH
11452: LD_VAR 0 1
11456: PUSH
11457: FOR_IN
11458: IFFALSE 11535
// if BuildingStatus ( b ) = bs_build then
11460: LD_VAR 0 2
11464: PPUSH
11465: CALL_OW 461
11469: PUSH
11470: LD_INT 1
11472: EQUAL
11473: IFFALSE 11533
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11475: LD_VAR 0 4
11479: PPUSH
11480: LD_STRING h
11482: PUSH
11483: LD_VAR 0 2
11487: PPUSH
11488: CALL_OW 250
11492: PUSH
11493: LD_VAR 0 2
11497: PPUSH
11498: CALL_OW 251
11502: PUSH
11503: LD_VAR 0 2
11507: PUSH
11508: LD_INT 0
11510: PUSH
11511: LD_INT 0
11513: PUSH
11514: LD_INT 0
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: PPUSH
11529: CALL_OW 446
11533: GO 11457
11535: POP
11536: POP
// end ;
11537: LD_VAR 0 3
11541: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11542: LD_INT 0
11544: PPUSH
11545: PPUSH
11546: PPUSH
11547: PPUSH
11548: PPUSH
11549: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11550: LD_VAR 0 1
11554: NOT
11555: PUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 263
11565: PUSH
11566: LD_INT 2
11568: NONEQUAL
11569: OR
11570: IFFALSE 11574
// exit ;
11572: GO 11890
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11574: LD_ADDR_VAR 0 6
11578: PUSH
11579: LD_INT 22
11581: PUSH
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 255
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 2
11598: PUSH
11599: LD_INT 30
11601: PUSH
11602: LD_INT 36
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 34
11611: PUSH
11612: LD_INT 31
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PPUSH
11628: CALL_OW 69
11632: ST_TO_ADDR
// if not tmp then
11633: LD_VAR 0 6
11637: NOT
11638: IFFALSE 11642
// exit ;
11640: GO 11890
// result := [ ] ;
11642: LD_ADDR_VAR 0 2
11646: PUSH
11647: EMPTY
11648: ST_TO_ADDR
// for i in tmp do
11649: LD_ADDR_VAR 0 3
11653: PUSH
11654: LD_VAR 0 6
11658: PUSH
11659: FOR_IN
11660: IFFALSE 11731
// begin t := UnitsInside ( i ) ;
11662: LD_ADDR_VAR 0 4
11666: PUSH
11667: LD_VAR 0 3
11671: PPUSH
11672: CALL_OW 313
11676: ST_TO_ADDR
// if t then
11677: LD_VAR 0 4
11681: IFFALSE 11729
// for j in t do
11683: LD_ADDR_VAR 0 7
11687: PUSH
11688: LD_VAR 0 4
11692: PUSH
11693: FOR_IN
11694: IFFALSE 11727
// result := Replace ( result , result + 1 , j ) ;
11696: LD_ADDR_VAR 0 2
11700: PUSH
11701: LD_VAR 0 2
11705: PPUSH
11706: LD_VAR 0 2
11710: PUSH
11711: LD_INT 1
11713: PLUS
11714: PPUSH
11715: LD_VAR 0 7
11719: PPUSH
11720: CALL_OW 1
11724: ST_TO_ADDR
11725: GO 11693
11727: POP
11728: POP
// end ;
11729: GO 11659
11731: POP
11732: POP
// if not result then
11733: LD_VAR 0 2
11737: NOT
11738: IFFALSE 11742
// exit ;
11740: GO 11890
// mech := result [ 1 ] ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: LD_INT 1
11754: ARRAY
11755: ST_TO_ADDR
// if result > 1 then
11756: LD_VAR 0 2
11760: PUSH
11761: LD_INT 1
11763: GREATER
11764: IFFALSE 11876
// begin for i = 2 to result do
11766: LD_ADDR_VAR 0 3
11770: PUSH
11771: DOUBLE
11772: LD_INT 2
11774: DEC
11775: ST_TO_ADDR
11776: LD_VAR 0 2
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11874
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11784: LD_ADDR_VAR 0 4
11788: PUSH
11789: LD_VAR 0 2
11793: PUSH
11794: LD_VAR 0 3
11798: ARRAY
11799: PPUSH
11800: LD_INT 3
11802: PPUSH
11803: CALL_OW 259
11807: PUSH
11808: LD_VAR 0 2
11812: PUSH
11813: LD_VAR 0 3
11817: ARRAY
11818: PPUSH
11819: CALL_OW 432
11823: MINUS
11824: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11825: LD_VAR 0 4
11829: PUSH
11830: LD_VAR 0 5
11834: PPUSH
11835: LD_INT 3
11837: PPUSH
11838: CALL_OW 259
11842: PUSH
11843: LD_VAR 0 5
11847: PPUSH
11848: CALL_OW 432
11852: MINUS
11853: GREATEREQUAL
11854: IFFALSE 11872
// mech := result [ i ] ;
11856: LD_ADDR_VAR 0 5
11860: PUSH
11861: LD_VAR 0 2
11865: PUSH
11866: LD_VAR 0 3
11870: ARRAY
11871: ST_TO_ADDR
// end ;
11872: GO 11781
11874: POP
11875: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11876: LD_VAR 0 1
11880: PPUSH
11881: LD_VAR 0 5
11885: PPUSH
11886: CALL_OW 135
// end ;
11890: LD_VAR 0 2
11894: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11895: LD_INT 0
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
11909: PPUSH
// result := [ ] ;
11910: LD_ADDR_VAR 0 7
11914: PUSH
11915: EMPTY
11916: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 266
11926: PUSH
11927: LD_INT 0
11929: PUSH
11930: LD_INT 1
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: IN
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 13576
// if name then
11942: LD_VAR 0 3
11946: IFFALSE 11962
// SetBName ( base_dep , name ) ;
11948: LD_VAR 0 1
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: CALL_OW 500
// base := GetBase ( base_dep ) ;
11962: LD_ADDR_VAR 0 15
11966: PUSH
11967: LD_VAR 0 1
11971: PPUSH
11972: CALL_OW 274
11976: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11977: LD_ADDR_VAR 0 16
11981: PUSH
11982: LD_VAR 0 1
11986: PPUSH
11987: CALL_OW 255
11991: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11992: LD_ADDR_VAR 0 17
11996: PUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 248
12006: ST_TO_ADDR
// if sources then
12007: LD_VAR 0 5
12011: IFFALSE 12058
// for i = 1 to 3 do
12013: LD_ADDR_VAR 0 8
12017: PUSH
12018: DOUBLE
12019: LD_INT 1
12021: DEC
12022: ST_TO_ADDR
12023: LD_INT 3
12025: PUSH
12026: FOR_TO
12027: IFFALSE 12056
// AddResourceType ( base , i , sources [ i ] ) ;
12029: LD_VAR 0 15
12033: PPUSH
12034: LD_VAR 0 8
12038: PPUSH
12039: LD_VAR 0 5
12043: PUSH
12044: LD_VAR 0 8
12048: ARRAY
12049: PPUSH
12050: CALL_OW 276
12054: GO 12026
12056: POP
12057: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12058: LD_ADDR_VAR 0 18
12062: PUSH
12063: LD_VAR 0 15
12067: PPUSH
12068: LD_VAR 0 2
12072: PPUSH
12073: LD_INT 1
12075: PPUSH
12076: CALL 11319 0 3
12080: ST_TO_ADDR
// InitHc ;
12081: CALL_OW 19
// InitUc ;
12085: CALL_OW 18
// uc_side := side ;
12089: LD_ADDR_OWVAR 20
12093: PUSH
12094: LD_VAR 0 16
12098: ST_TO_ADDR
// uc_nation := nation ;
12099: LD_ADDR_OWVAR 21
12103: PUSH
12104: LD_VAR 0 17
12108: ST_TO_ADDR
// if buildings then
12109: LD_VAR 0 18
12113: IFFALSE 13435
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12115: LD_ADDR_VAR 0 19
12119: PUSH
12120: LD_VAR 0 18
12124: PPUSH
12125: LD_INT 2
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 29
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 30
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 72
12157: ST_TO_ADDR
// if tmp then
12158: LD_VAR 0 19
12162: IFFALSE 12210
// for i in tmp do
12164: LD_ADDR_VAR 0 8
12168: PUSH
12169: LD_VAR 0 19
12173: PUSH
12174: FOR_IN
12175: IFFALSE 12208
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12177: LD_VAR 0 8
12181: PPUSH
12182: CALL_OW 250
12186: PPUSH
12187: LD_VAR 0 8
12191: PPUSH
12192: CALL_OW 251
12196: PPUSH
12197: LD_VAR 0 16
12201: PPUSH
12202: CALL_OW 441
12206: GO 12174
12208: POP
12209: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12210: LD_VAR 0 18
12214: PPUSH
12215: LD_INT 2
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 30
12230: PUSH
12231: LD_INT 33
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 72
12247: IFFALSE 12335
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12249: LD_ADDR_VAR 0 8
12253: PUSH
12254: LD_VAR 0 18
12258: PPUSH
12259: LD_INT 2
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: LD_INT 32
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 33
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 72
12291: PUSH
12292: FOR_IN
12293: IFFALSE 12333
// begin if not GetBWeapon ( i ) then
12295: LD_VAR 0 8
12299: PPUSH
12300: CALL_OW 269
12304: NOT
12305: IFFALSE 12331
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12307: LD_VAR 0 8
12311: PPUSH
12312: LD_VAR 0 8
12316: PPUSH
12317: LD_VAR 0 2
12321: PPUSH
12322: CALL 13581 0 2
12326: PPUSH
12327: CALL_OW 431
// end ;
12331: GO 12292
12333: POP
12334: POP
// end ; for i = 1 to personel do
12335: LD_ADDR_VAR 0 8
12339: PUSH
12340: DOUBLE
12341: LD_INT 1
12343: DEC
12344: ST_TO_ADDR
12345: LD_VAR 0 6
12349: PUSH
12350: FOR_TO
12351: IFFALSE 13415
// begin if i > 4 then
12353: LD_VAR 0 8
12357: PUSH
12358: LD_INT 4
12360: GREATER
12361: IFFALSE 12365
// break ;
12363: GO 13415
// case i of 1 :
12365: LD_VAR 0 8
12369: PUSH
12370: LD_INT 1
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12458
12378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12379: LD_ADDR_VAR 0 12
12383: PUSH
12384: LD_VAR 0 18
12388: PPUSH
12389: LD_INT 22
12391: PUSH
12392: LD_VAR 0 16
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 58
12403: PUSH
12404: EMPTY
12405: LIST
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 4
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 30
12432: PUSH
12433: LD_INT 5
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 72
12455: ST_TO_ADDR
12456: GO 12680
12458: LD_INT 2
12460: DOUBLE
12461: EQUAL
12462: IFTRUE 12466
12464: GO 12528
12466: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12467: LD_ADDR_VAR 0 12
12471: PUSH
12472: LD_VAR 0 18
12476: PPUSH
12477: LD_INT 22
12479: PUSH
12480: LD_VAR 0 16
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: LD_INT 30
12494: PUSH
12495: LD_INT 0
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 30
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 72
12525: ST_TO_ADDR
12526: GO 12680
12528: LD_INT 3
12530: DOUBLE
12531: EQUAL
12532: IFTRUE 12536
12534: GO 12598
12536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12537: LD_ADDR_VAR 0 12
12541: PUSH
12542: LD_VAR 0 18
12546: PPUSH
12547: LD_INT 22
12549: PUSH
12550: LD_VAR 0 16
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 72
12595: ST_TO_ADDR
12596: GO 12680
12598: LD_INT 4
12600: DOUBLE
12601: EQUAL
12602: IFTRUE 12606
12604: GO 12679
12606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12607: LD_ADDR_VAR 0 12
12611: PUSH
12612: LD_VAR 0 18
12616: PPUSH
12617: LD_INT 22
12619: PUSH
12620: LD_VAR 0 16
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 6
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 30
12644: PUSH
12645: LD_INT 7
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 30
12654: PUSH
12655: LD_INT 8
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 72
12676: ST_TO_ADDR
12677: GO 12680
12679: POP
// if i = 1 then
12680: LD_VAR 0 8
12684: PUSH
12685: LD_INT 1
12687: EQUAL
12688: IFFALSE 12799
// begin tmp := [ ] ;
12690: LD_ADDR_VAR 0 19
12694: PUSH
12695: EMPTY
12696: ST_TO_ADDR
// for j in f do
12697: LD_ADDR_VAR 0 9
12701: PUSH
12702: LD_VAR 0 12
12706: PUSH
12707: FOR_IN
12708: IFFALSE 12781
// if GetBType ( j ) = b_bunker then
12710: LD_VAR 0 9
12714: PPUSH
12715: CALL_OW 266
12719: PUSH
12720: LD_INT 32
12722: EQUAL
12723: IFFALSE 12750
// tmp := Insert ( tmp , 1 , j ) else
12725: LD_ADDR_VAR 0 19
12729: PUSH
12730: LD_VAR 0 19
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: LD_VAR 0 9
12742: PPUSH
12743: CALL_OW 2
12747: ST_TO_ADDR
12748: GO 12779
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12750: LD_ADDR_VAR 0 19
12754: PUSH
12755: LD_VAR 0 19
12759: PPUSH
12760: LD_VAR 0 19
12764: PUSH
12765: LD_INT 1
12767: PLUS
12768: PPUSH
12769: LD_VAR 0 9
12773: PPUSH
12774: CALL_OW 2
12778: ST_TO_ADDR
12779: GO 12707
12781: POP
12782: POP
// if tmp then
12783: LD_VAR 0 19
12787: IFFALSE 12799
// f := tmp ;
12789: LD_ADDR_VAR 0 12
12793: PUSH
12794: LD_VAR 0 19
12798: ST_TO_ADDR
// end ; x := personel [ i ] ;
12799: LD_ADDR_VAR 0 13
12803: PUSH
12804: LD_VAR 0 6
12808: PUSH
12809: LD_VAR 0 8
12813: ARRAY
12814: ST_TO_ADDR
// if x = - 1 then
12815: LD_VAR 0 13
12819: PUSH
12820: LD_INT 1
12822: NEG
12823: EQUAL
12824: IFFALSE 13033
// begin for j in f do
12826: LD_ADDR_VAR 0 9
12830: PUSH
12831: LD_VAR 0 12
12835: PUSH
12836: FOR_IN
12837: IFFALSE 13029
// repeat InitHc ;
12839: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12843: LD_VAR 0 9
12847: PPUSH
12848: CALL_OW 266
12852: PUSH
12853: LD_INT 5
12855: EQUAL
12856: IFFALSE 12926
// begin if UnitsInside ( j ) < 3 then
12858: LD_VAR 0 9
12862: PPUSH
12863: CALL_OW 313
12867: PUSH
12868: LD_INT 3
12870: LESS
12871: IFFALSE 12907
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 5
12878: PUSH
12879: LD_INT 8
12881: PUSH
12882: LD_INT 9
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_VAR 0 17
12894: ARRAY
12895: PPUSH
12896: LD_VAR 0 4
12900: PPUSH
12901: CALL_OW 380
12905: GO 12924
// PrepareHuman ( false , i , skill ) ;
12907: LD_INT 0
12909: PPUSH
12910: LD_VAR 0 8
12914: PPUSH
12915: LD_VAR 0 4
12919: PPUSH
12920: CALL_OW 380
// end else
12924: GO 12943
// PrepareHuman ( false , i , skill ) ;
12926: LD_INT 0
12928: PPUSH
12929: LD_VAR 0 8
12933: PPUSH
12934: LD_VAR 0 4
12938: PPUSH
12939: CALL_OW 380
// un := CreateHuman ;
12943: LD_ADDR_VAR 0 14
12947: PUSH
12948: CALL_OW 44
12952: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12953: LD_ADDR_VAR 0 7
12957: PUSH
12958: LD_VAR 0 7
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: LD_VAR 0 14
12970: PPUSH
12971: CALL_OW 2
12975: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12976: LD_VAR 0 14
12980: PPUSH
12981: LD_VAR 0 9
12985: PPUSH
12986: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12990: LD_VAR 0 9
12994: PPUSH
12995: CALL_OW 313
12999: PUSH
13000: LD_INT 6
13002: EQUAL
13003: PUSH
13004: LD_VAR 0 9
13008: PPUSH
13009: CALL_OW 266
13013: PUSH
13014: LD_INT 32
13016: PUSH
13017: LD_INT 31
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: IN
13024: OR
13025: IFFALSE 12839
13027: GO 12836
13029: POP
13030: POP
// end else
13031: GO 13413
// for j = 1 to x do
13033: LD_ADDR_VAR 0 9
13037: PUSH
13038: DOUBLE
13039: LD_INT 1
13041: DEC
13042: ST_TO_ADDR
13043: LD_VAR 0 13
13047: PUSH
13048: FOR_TO
13049: IFFALSE 13411
// begin InitHc ;
13051: CALL_OW 19
// if not f then
13055: LD_VAR 0 12
13059: NOT
13060: IFFALSE 13149
// begin PrepareHuman ( false , i , skill ) ;
13062: LD_INT 0
13064: PPUSH
13065: LD_VAR 0 8
13069: PPUSH
13070: LD_VAR 0 4
13074: PPUSH
13075: CALL_OW 380
// un := CreateHuman ;
13079: LD_ADDR_VAR 0 14
13083: PUSH
13084: CALL_OW 44
13088: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13089: LD_ADDR_VAR 0 7
13093: PUSH
13094: LD_VAR 0 7
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: LD_VAR 0 14
13106: PPUSH
13107: CALL_OW 2
13111: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13112: LD_VAR 0 14
13116: PPUSH
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 250
13126: PPUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 251
13136: PPUSH
13137: LD_INT 10
13139: PPUSH
13140: LD_INT 0
13142: PPUSH
13143: CALL_OW 50
// continue ;
13147: GO 13048
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13149: LD_VAR 0 12
13153: PUSH
13154: LD_INT 1
13156: ARRAY
13157: PPUSH
13158: CALL_OW 313
13162: PUSH
13163: LD_VAR 0 12
13167: PUSH
13168: LD_INT 1
13170: ARRAY
13171: PPUSH
13172: CALL_OW 266
13176: PUSH
13177: LD_INT 32
13179: PUSH
13180: LD_INT 31
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: IN
13187: AND
13188: PUSH
13189: LD_VAR 0 12
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PPUSH
13198: CALL_OW 313
13202: PUSH
13203: LD_INT 6
13205: EQUAL
13206: OR
13207: IFFALSE 13227
// f := Delete ( f , 1 ) ;
13209: LD_ADDR_VAR 0 12
13213: PUSH
13214: LD_VAR 0 12
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 3
13226: ST_TO_ADDR
// if not f then
13227: LD_VAR 0 12
13231: NOT
13232: IFFALSE 13250
// begin x := x + 2 ;
13234: LD_ADDR_VAR 0 13
13238: PUSH
13239: LD_VAR 0 13
13243: PUSH
13244: LD_INT 2
13246: PLUS
13247: ST_TO_ADDR
// continue ;
13248: GO 13048
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13250: LD_VAR 0 12
13254: PUSH
13255: LD_INT 1
13257: ARRAY
13258: PPUSH
13259: CALL_OW 266
13263: PUSH
13264: LD_INT 5
13266: EQUAL
13267: IFFALSE 13341
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13269: LD_VAR 0 12
13273: PUSH
13274: LD_INT 1
13276: ARRAY
13277: PPUSH
13278: CALL_OW 313
13282: PUSH
13283: LD_INT 3
13285: LESS
13286: IFFALSE 13322
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13288: LD_INT 0
13290: PPUSH
13291: LD_INT 5
13293: PUSH
13294: LD_INT 8
13296: PUSH
13297: LD_INT 9
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_VAR 0 17
13309: ARRAY
13310: PPUSH
13311: LD_VAR 0 4
13315: PPUSH
13316: CALL_OW 380
13320: GO 13339
// PrepareHuman ( false , i , skill ) ;
13322: LD_INT 0
13324: PPUSH
13325: LD_VAR 0 8
13329: PPUSH
13330: LD_VAR 0 4
13334: PPUSH
13335: CALL_OW 380
// end else
13339: GO 13358
// PrepareHuman ( false , i , skill ) ;
13341: LD_INT 0
13343: PPUSH
13344: LD_VAR 0 8
13348: PPUSH
13349: LD_VAR 0 4
13353: PPUSH
13354: CALL_OW 380
// un := CreateHuman ;
13358: LD_ADDR_VAR 0 14
13362: PUSH
13363: CALL_OW 44
13367: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13368: LD_ADDR_VAR 0 7
13372: PUSH
13373: LD_VAR 0 7
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: LD_VAR 0 14
13385: PPUSH
13386: CALL_OW 2
13390: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13391: LD_VAR 0 14
13395: PPUSH
13396: LD_VAR 0 12
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PPUSH
13405: CALL_OW 52
// end ;
13409: GO 13048
13411: POP
13412: POP
// end ;
13413: GO 12350
13415: POP
13416: POP
// result := result ^ buildings ;
13417: LD_ADDR_VAR 0 7
13421: PUSH
13422: LD_VAR 0 7
13426: PUSH
13427: LD_VAR 0 18
13431: ADD
13432: ST_TO_ADDR
// end else
13433: GO 13576
// begin for i = 1 to personel do
13435: LD_ADDR_VAR 0 8
13439: PUSH
13440: DOUBLE
13441: LD_INT 1
13443: DEC
13444: ST_TO_ADDR
13445: LD_VAR 0 6
13449: PUSH
13450: FOR_TO
13451: IFFALSE 13574
// begin if i > 4 then
13453: LD_VAR 0 8
13457: PUSH
13458: LD_INT 4
13460: GREATER
13461: IFFALSE 13465
// break ;
13463: GO 13574
// x := personel [ i ] ;
13465: LD_ADDR_VAR 0 13
13469: PUSH
13470: LD_VAR 0 6
13474: PUSH
13475: LD_VAR 0 8
13479: ARRAY
13480: ST_TO_ADDR
// if x = - 1 then
13481: LD_VAR 0 13
13485: PUSH
13486: LD_INT 1
13488: NEG
13489: EQUAL
13490: IFFALSE 13494
// continue ;
13492: GO 13450
// PrepareHuman ( false , i , skill ) ;
13494: LD_INT 0
13496: PPUSH
13497: LD_VAR 0 8
13501: PPUSH
13502: LD_VAR 0 4
13506: PPUSH
13507: CALL_OW 380
// un := CreateHuman ;
13511: LD_ADDR_VAR 0 14
13515: PUSH
13516: CALL_OW 44
13520: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13521: LD_VAR 0 14
13525: PPUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 250
13535: PPUSH
13536: LD_VAR 0 1
13540: PPUSH
13541: CALL_OW 251
13545: PPUSH
13546: LD_INT 10
13548: PPUSH
13549: LD_INT 0
13551: PPUSH
13552: CALL_OW 50
// result := result ^ un ;
13556: LD_ADDR_VAR 0 7
13560: PUSH
13561: LD_VAR 0 7
13565: PUSH
13566: LD_VAR 0 14
13570: ADD
13571: ST_TO_ADDR
// end ;
13572: GO 13450
13574: POP
13575: POP
// end ; end ;
13576: LD_VAR 0 7
13580: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13581: LD_INT 0
13583: PPUSH
13584: PPUSH
13585: PPUSH
13586: PPUSH
13587: PPUSH
13588: PPUSH
13589: PPUSH
13590: PPUSH
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// result := false ;
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13607: LD_VAR 0 1
13611: NOT
13612: PUSH
13613: LD_VAR 0 1
13617: PPUSH
13618: CALL_OW 266
13622: PUSH
13623: LD_INT 32
13625: PUSH
13626: LD_INT 33
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: IN
13633: NOT
13634: OR
13635: IFFALSE 13639
// exit ;
13637: GO 14748
// nat := GetNation ( tower ) ;
13639: LD_ADDR_VAR 0 12
13643: PUSH
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL_OW 248
13653: ST_TO_ADDR
// side := GetSide ( tower ) ;
13654: LD_ADDR_VAR 0 16
13658: PUSH
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 255
13668: ST_TO_ADDR
// x := GetX ( tower ) ;
13669: LD_ADDR_VAR 0 10
13673: PUSH
13674: LD_VAR 0 1
13678: PPUSH
13679: CALL_OW 250
13683: ST_TO_ADDR
// y := GetY ( tower ) ;
13684: LD_ADDR_VAR 0 11
13688: PUSH
13689: LD_VAR 0 1
13693: PPUSH
13694: CALL_OW 251
13698: ST_TO_ADDR
// if not x or not y then
13699: LD_VAR 0 10
13703: NOT
13704: PUSH
13705: LD_VAR 0 11
13709: NOT
13710: OR
13711: IFFALSE 13715
// exit ;
13713: GO 14748
// weapon := 0 ;
13715: LD_ADDR_VAR 0 18
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// fac_list := [ ] ;
13723: LD_ADDR_VAR 0 17
13727: PUSH
13728: EMPTY
13729: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13730: LD_ADDR_VAR 0 6
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 274
13744: PPUSH
13745: LD_VAR 0 2
13749: PPUSH
13750: LD_INT 0
13752: PPUSH
13753: CALL 11319 0 3
13757: PPUSH
13758: LD_INT 30
13760: PUSH
13761: LD_INT 3
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PPUSH
13768: CALL_OW 72
13772: ST_TO_ADDR
// if not factories then
13773: LD_VAR 0 6
13777: NOT
13778: IFFALSE 13782
// exit ;
13780: GO 14748
// for i in factories do
13782: LD_ADDR_VAR 0 8
13786: PUSH
13787: LD_VAR 0 6
13791: PUSH
13792: FOR_IN
13793: IFFALSE 13818
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13795: LD_ADDR_VAR 0 17
13799: PUSH
13800: LD_VAR 0 17
13804: PUSH
13805: LD_VAR 0 8
13809: PPUSH
13810: CALL_OW 478
13814: UNION
13815: ST_TO_ADDR
13816: GO 13792
13818: POP
13819: POP
// if not fac_list then
13820: LD_VAR 0 17
13824: NOT
13825: IFFALSE 13829
// exit ;
13827: GO 14748
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13829: LD_ADDR_VAR 0 5
13833: PUSH
13834: LD_INT 4
13836: PUSH
13837: LD_INT 5
13839: PUSH
13840: LD_INT 9
13842: PUSH
13843: LD_INT 10
13845: PUSH
13846: LD_INT 6
13848: PUSH
13849: LD_INT 7
13851: PUSH
13852: LD_INT 11
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 27
13866: PUSH
13867: LD_INT 28
13869: PUSH
13870: LD_INT 26
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 43
13884: PUSH
13885: LD_INT 44
13887: PUSH
13888: LD_INT 46
13890: PUSH
13891: LD_INT 45
13893: PUSH
13894: LD_INT 47
13896: PUSH
13897: LD_INT 49
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: LD_VAR 0 12
13917: ARRAY
13918: ST_TO_ADDR
// list := list isect fac_list ;
13919: LD_ADDR_VAR 0 5
13923: PUSH
13924: LD_VAR 0 5
13928: PUSH
13929: LD_VAR 0 17
13933: ISECT
13934: ST_TO_ADDR
// if not list then
13935: LD_VAR 0 5
13939: NOT
13940: IFFALSE 13944
// exit ;
13942: GO 14748
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13944: LD_VAR 0 12
13948: PUSH
13949: LD_INT 3
13951: EQUAL
13952: PUSH
13953: LD_INT 49
13955: PUSH
13956: LD_VAR 0 5
13960: IN
13961: AND
13962: PUSH
13963: LD_INT 31
13965: PPUSH
13966: LD_VAR 0 16
13970: PPUSH
13971: CALL_OW 321
13975: PUSH
13976: LD_INT 2
13978: EQUAL
13979: AND
13980: IFFALSE 14040
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13982: LD_INT 22
13984: PUSH
13985: LD_VAR 0 16
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 35
13996: PUSH
13997: LD_INT 49
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 91
14006: PUSH
14007: LD_VAR 0 1
14011: PUSH
14012: LD_INT 10
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: NOT
14030: IFFALSE 14040
// weapon := ru_time_lapser ;
14032: LD_ADDR_VAR 0 18
14036: PUSH
14037: LD_INT 49
14039: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14040: LD_VAR 0 12
14044: PUSH
14045: LD_INT 1
14047: PUSH
14048: LD_INT 2
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: IN
14055: PUSH
14056: LD_INT 11
14058: PUSH
14059: LD_VAR 0 5
14063: IN
14064: PUSH
14065: LD_INT 30
14067: PUSH
14068: LD_VAR 0 5
14072: IN
14073: OR
14074: AND
14075: PUSH
14076: LD_INT 6
14078: PPUSH
14079: LD_VAR 0 16
14083: PPUSH
14084: CALL_OW 321
14088: PUSH
14089: LD_INT 2
14091: EQUAL
14092: AND
14093: IFFALSE 14258
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 16
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 2
14109: PUSH
14110: LD_INT 35
14112: PUSH
14113: LD_INT 11
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 35
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 91
14137: PUSH
14138: LD_VAR 0 1
14142: PUSH
14143: LD_INT 18
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: NOT
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_VAR 0 16
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 2
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 32
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 33
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 91
14204: PUSH
14205: LD_VAR 0 1
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: PPUSH
14226: CALL_OW 69
14230: PUSH
14231: LD_INT 2
14233: GREATER
14234: AND
14235: IFFALSE 14258
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14237: LD_ADDR_VAR 0 18
14241: PUSH
14242: LD_INT 11
14244: PUSH
14245: LD_INT 30
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_VAR 0 12
14256: ARRAY
14257: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14258: LD_VAR 0 18
14262: NOT
14263: PUSH
14264: LD_INT 40
14266: PPUSH
14267: LD_VAR 0 16
14271: PPUSH
14272: CALL_OW 321
14276: PUSH
14277: LD_INT 2
14279: EQUAL
14280: AND
14281: PUSH
14282: LD_INT 7
14284: PUSH
14285: LD_VAR 0 5
14289: IN
14290: PUSH
14291: LD_INT 28
14293: PUSH
14294: LD_VAR 0 5
14298: IN
14299: OR
14300: PUSH
14301: LD_INT 45
14303: PUSH
14304: LD_VAR 0 5
14308: IN
14309: OR
14310: AND
14311: IFFALSE 14565
// begin hex := GetHexInfo ( x , y ) ;
14313: LD_ADDR_VAR 0 4
14317: PUSH
14318: LD_VAR 0 10
14322: PPUSH
14323: LD_VAR 0 11
14327: PPUSH
14328: CALL_OW 546
14332: ST_TO_ADDR
// if hex [ 1 ] then
14333: LD_VAR 0 4
14337: PUSH
14338: LD_INT 1
14340: ARRAY
14341: IFFALSE 14345
// exit ;
14343: GO 14748
// height := hex [ 2 ] ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: LD_VAR 0 4
14354: PUSH
14355: LD_INT 2
14357: ARRAY
14358: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14359: LD_ADDR_VAR 0 14
14363: PUSH
14364: LD_INT 0
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: LD_INT 5
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: ST_TO_ADDR
// for i in tmp do
14382: LD_ADDR_VAR 0 8
14386: PUSH
14387: LD_VAR 0 14
14391: PUSH
14392: FOR_IN
14393: IFFALSE 14563
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14395: LD_ADDR_VAR 0 9
14399: PUSH
14400: LD_VAR 0 10
14404: PPUSH
14405: LD_VAR 0 8
14409: PPUSH
14410: LD_INT 5
14412: PPUSH
14413: CALL_OW 272
14417: PUSH
14418: LD_VAR 0 11
14422: PPUSH
14423: LD_VAR 0 8
14427: PPUSH
14428: LD_INT 5
14430: PPUSH
14431: CALL_OW 273
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14440: LD_VAR 0 9
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: LD_VAR 0 9
14453: PUSH
14454: LD_INT 2
14456: ARRAY
14457: PPUSH
14458: CALL_OW 488
14462: IFFALSE 14561
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14464: LD_ADDR_VAR 0 4
14468: PUSH
14469: LD_VAR 0 9
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: LD_VAR 0 9
14482: PUSH
14483: LD_INT 2
14485: ARRAY
14486: PPUSH
14487: CALL_OW 546
14491: ST_TO_ADDR
// if hex [ 1 ] then
14492: LD_VAR 0 4
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: IFFALSE 14504
// continue ;
14502: GO 14392
// h := hex [ 2 ] ;
14504: LD_ADDR_VAR 0 13
14508: PUSH
14509: LD_VAR 0 4
14513: PUSH
14514: LD_INT 2
14516: ARRAY
14517: ST_TO_ADDR
// if h + 7 < height then
14518: LD_VAR 0 13
14522: PUSH
14523: LD_INT 7
14525: PLUS
14526: PUSH
14527: LD_VAR 0 15
14531: LESS
14532: IFFALSE 14561
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14534: LD_ADDR_VAR 0 18
14538: PUSH
14539: LD_INT 7
14541: PUSH
14542: LD_INT 28
14544: PUSH
14545: LD_INT 45
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: PUSH
14553: LD_VAR 0 12
14557: ARRAY
14558: ST_TO_ADDR
// break ;
14559: GO 14563
// end ; end ; end ;
14561: GO 14392
14563: POP
14564: POP
// end ; if not weapon then
14565: LD_VAR 0 18
14569: NOT
14570: IFFALSE 14630
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_VAR 0 5
14581: PUSH
14582: LD_INT 11
14584: PUSH
14585: LD_INT 30
14587: PUSH
14588: LD_INT 49
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: DIFF
14596: ST_TO_ADDR
// if not list then
14597: LD_VAR 0 5
14601: NOT
14602: IFFALSE 14606
// exit ;
14604: GO 14748
// weapon := list [ rand ( 1 , list ) ] ;
14606: LD_ADDR_VAR 0 18
14610: PUSH
14611: LD_VAR 0 5
14615: PUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: CALL_OW 12
14628: ARRAY
14629: ST_TO_ADDR
// end ; if weapon then
14630: LD_VAR 0 18
14634: IFFALSE 14748
// begin tmp := CostOfWeapon ( weapon ) ;
14636: LD_ADDR_VAR 0 14
14640: PUSH
14641: LD_VAR 0 18
14645: PPUSH
14646: CALL_OW 451
14650: ST_TO_ADDR
// j := GetBase ( tower ) ;
14651: LD_ADDR_VAR 0 9
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 274
14665: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14666: LD_VAR 0 9
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 275
14678: PUSH
14679: LD_VAR 0 14
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: GREATEREQUAL
14688: PUSH
14689: LD_VAR 0 9
14693: PPUSH
14694: LD_INT 2
14696: PPUSH
14697: CALL_OW 275
14701: PUSH
14702: LD_VAR 0 14
14706: PUSH
14707: LD_INT 2
14709: ARRAY
14710: GREATEREQUAL
14711: AND
14712: PUSH
14713: LD_VAR 0 9
14717: PPUSH
14718: LD_INT 3
14720: PPUSH
14721: CALL_OW 275
14725: PUSH
14726: LD_VAR 0 14
14730: PUSH
14731: LD_INT 3
14733: ARRAY
14734: GREATEREQUAL
14735: AND
14736: IFFALSE 14748
// result := weapon ;
14738: LD_ADDR_VAR 0 3
14742: PUSH
14743: LD_VAR 0 18
14747: ST_TO_ADDR
// end ; end ;
14748: LD_VAR 0 3
14752: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14753: LD_INT 0
14755: PPUSH
14756: PPUSH
// result := true ;
14757: LD_ADDR_VAR 0 3
14761: PUSH
14762: LD_INT 1
14764: ST_TO_ADDR
// if array1 = array2 then
14765: LD_VAR 0 1
14769: PUSH
14770: LD_VAR 0 2
14774: EQUAL
14775: IFFALSE 14835
// begin for i = 1 to array1 do
14777: LD_ADDR_VAR 0 4
14781: PUSH
14782: DOUBLE
14783: LD_INT 1
14785: DEC
14786: ST_TO_ADDR
14787: LD_VAR 0 1
14791: PUSH
14792: FOR_TO
14793: IFFALSE 14831
// if array1 [ i ] <> array2 [ i ] then
14795: LD_VAR 0 1
14799: PUSH
14800: LD_VAR 0 4
14804: ARRAY
14805: PUSH
14806: LD_VAR 0 2
14810: PUSH
14811: LD_VAR 0 4
14815: ARRAY
14816: NONEQUAL
14817: IFFALSE 14829
// begin result := false ;
14819: LD_ADDR_VAR 0 3
14823: PUSH
14824: LD_INT 0
14826: ST_TO_ADDR
// break ;
14827: GO 14831
// end ;
14829: GO 14792
14831: POP
14832: POP
// end else
14833: GO 14843
// result := false ;
14835: LD_ADDR_VAR 0 3
14839: PUSH
14840: LD_INT 0
14842: ST_TO_ADDR
// end ;
14843: LD_VAR 0 3
14847: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14848: LD_INT 0
14850: PPUSH
14851: PPUSH
// if not array1 or not array2 then
14852: LD_VAR 0 1
14856: NOT
14857: PUSH
14858: LD_VAR 0 2
14862: NOT
14863: OR
14864: IFFALSE 14868
// exit ;
14866: GO 14932
// result := true ;
14868: LD_ADDR_VAR 0 3
14872: PUSH
14873: LD_INT 1
14875: ST_TO_ADDR
// for i = 1 to array1 do
14876: LD_ADDR_VAR 0 4
14880: PUSH
14881: DOUBLE
14882: LD_INT 1
14884: DEC
14885: ST_TO_ADDR
14886: LD_VAR 0 1
14890: PUSH
14891: FOR_TO
14892: IFFALSE 14930
// if array1 [ i ] <> array2 [ i ] then
14894: LD_VAR 0 1
14898: PUSH
14899: LD_VAR 0 4
14903: ARRAY
14904: PUSH
14905: LD_VAR 0 2
14909: PUSH
14910: LD_VAR 0 4
14914: ARRAY
14915: NONEQUAL
14916: IFFALSE 14928
// begin result := false ;
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: LD_INT 0
14925: ST_TO_ADDR
// break ;
14926: GO 14930
// end ;
14928: GO 14891
14930: POP
14931: POP
// end ;
14932: LD_VAR 0 3
14936: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
// pom := GetBase ( fac ) ;
14942: LD_ADDR_VAR 0 5
14946: PUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL_OW 274
14956: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: LD_VAR 0 2
14966: PUSH
14967: LD_INT 1
14969: ARRAY
14970: PPUSH
14971: LD_VAR 0 2
14975: PUSH
14976: LD_INT 2
14978: ARRAY
14979: PPUSH
14980: LD_VAR 0 2
14984: PUSH
14985: LD_INT 3
14987: ARRAY
14988: PPUSH
14989: LD_VAR 0 2
14993: PUSH
14994: LD_INT 4
14996: ARRAY
14997: PPUSH
14998: CALL_OW 449
15002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15003: LD_ADDR_VAR 0 3
15007: PUSH
15008: LD_VAR 0 5
15012: PPUSH
15013: LD_INT 1
15015: PPUSH
15016: CALL_OW 275
15020: PUSH
15021: LD_VAR 0 4
15025: PUSH
15026: LD_INT 1
15028: ARRAY
15029: GREATEREQUAL
15030: PUSH
15031: LD_VAR 0 5
15035: PPUSH
15036: LD_INT 2
15038: PPUSH
15039: CALL_OW 275
15043: PUSH
15044: LD_VAR 0 4
15048: PUSH
15049: LD_INT 2
15051: ARRAY
15052: GREATEREQUAL
15053: AND
15054: PUSH
15055: LD_VAR 0 5
15059: PPUSH
15060: LD_INT 3
15062: PPUSH
15063: CALL_OW 275
15067: PUSH
15068: LD_VAR 0 4
15072: PUSH
15073: LD_INT 3
15075: ARRAY
15076: GREATEREQUAL
15077: AND
15078: ST_TO_ADDR
// end ;
15079: LD_VAR 0 3
15083: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15084: LD_INT 0
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
// pom := GetBase ( building ) ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 274
15104: ST_TO_ADDR
// if not pom then
15105: LD_VAR 0 3
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15284
// btype := GetBType ( building ) ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 266
15128: ST_TO_ADDR
// if btype = b_armoury then
15129: LD_VAR 0 5
15133: PUSH
15134: LD_INT 4
15136: EQUAL
15137: IFFALSE 15147
// btype := b_barracks ;
15139: LD_ADDR_VAR 0 5
15143: PUSH
15144: LD_INT 5
15146: ST_TO_ADDR
// if btype = b_depot then
15147: LD_VAR 0 5
15151: PUSH
15152: LD_INT 0
15154: EQUAL
15155: IFFALSE 15165
// btype := b_warehouse ;
15157: LD_ADDR_VAR 0 5
15161: PUSH
15162: LD_INT 1
15164: ST_TO_ADDR
// if btype = b_workshop then
15165: LD_VAR 0 5
15169: PUSH
15170: LD_INT 2
15172: EQUAL
15173: IFFALSE 15183
// btype := b_factory ;
15175: LD_ADDR_VAR 0 5
15179: PUSH
15180: LD_INT 3
15182: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15183: LD_ADDR_VAR 0 4
15187: PUSH
15188: LD_VAR 0 5
15192: PPUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 248
15202: PPUSH
15203: CALL_OW 450
15207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15208: LD_ADDR_VAR 0 2
15212: PUSH
15213: LD_VAR 0 3
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: CALL_OW 275
15225: PUSH
15226: LD_VAR 0 4
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: GREATEREQUAL
15235: PUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: LD_INT 2
15243: PPUSH
15244: CALL_OW 275
15248: PUSH
15249: LD_VAR 0 4
15253: PUSH
15254: LD_INT 2
15256: ARRAY
15257: GREATEREQUAL
15258: AND
15259: PUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: LD_INT 3
15267: PPUSH
15268: CALL_OW 275
15272: PUSH
15273: LD_VAR 0 4
15277: PUSH
15278: LD_INT 3
15280: ARRAY
15281: GREATEREQUAL
15282: AND
15283: ST_TO_ADDR
// end ;
15284: LD_VAR 0 2
15288: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
15293: PPUSH
// pom := GetBase ( building ) ;
15294: LD_ADDR_VAR 0 4
15298: PUSH
15299: LD_VAR 0 1
15303: PPUSH
15304: CALL_OW 274
15308: ST_TO_ADDR
// if not pom then
15309: LD_VAR 0 4
15313: NOT
15314: IFFALSE 15318
// exit ;
15316: GO 15419
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15318: LD_ADDR_VAR 0 5
15322: PUSH
15323: LD_VAR 0 2
15327: PPUSH
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 248
15337: PPUSH
15338: CALL_OW 450
15342: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15343: LD_ADDR_VAR 0 3
15347: PUSH
15348: LD_VAR 0 4
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 275
15360: PUSH
15361: LD_VAR 0 5
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: GREATEREQUAL
15370: PUSH
15371: LD_VAR 0 4
15375: PPUSH
15376: LD_INT 2
15378: PPUSH
15379: CALL_OW 275
15383: PUSH
15384: LD_VAR 0 5
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: GREATEREQUAL
15393: AND
15394: PUSH
15395: LD_VAR 0 4
15399: PPUSH
15400: LD_INT 3
15402: PPUSH
15403: CALL_OW 275
15407: PUSH
15408: LD_VAR 0 5
15412: PUSH
15413: LD_INT 3
15415: ARRAY
15416: GREATEREQUAL
15417: AND
15418: ST_TO_ADDR
// end ;
15419: LD_VAR 0 3
15423: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15424: LD_INT 0
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
// result := false ;
15437: LD_ADDR_VAR 0 8
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15445: LD_VAR 0 5
15449: NOT
15450: PUSH
15451: LD_VAR 0 1
15455: NOT
15456: OR
15457: PUSH
15458: LD_VAR 0 2
15462: NOT
15463: OR
15464: PUSH
15465: LD_VAR 0 3
15469: NOT
15470: OR
15471: IFFALSE 15475
// exit ;
15473: GO 16289
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15475: LD_ADDR_VAR 0 14
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_VAR 0 2
15489: PPUSH
15490: LD_VAR 0 3
15494: PPUSH
15495: LD_VAR 0 4
15499: PPUSH
15500: LD_VAR 0 5
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: CALL_OW 248
15513: PPUSH
15514: LD_INT 0
15516: PPUSH
15517: CALL 17526 0 6
15521: ST_TO_ADDR
// if not hexes then
15522: LD_VAR 0 14
15526: NOT
15527: IFFALSE 15531
// exit ;
15529: GO 16289
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15531: LD_ADDR_VAR 0 17
15535: PUSH
15536: LD_VAR 0 5
15540: PPUSH
15541: LD_INT 22
15543: PUSH
15544: LD_VAR 0 13
15548: PPUSH
15549: CALL_OW 255
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 2
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 0
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 30
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PPUSH
15590: CALL_OW 72
15594: ST_TO_ADDR
// for i = 1 to hexes do
15595: LD_ADDR_VAR 0 9
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_VAR 0 14
15609: PUSH
15610: FOR_TO
15611: IFFALSE 16287
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15613: LD_ADDR_VAR 0 13
15617: PUSH
15618: LD_VAR 0 14
15622: PUSH
15623: LD_VAR 0 9
15627: ARRAY
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: LD_VAR 0 14
15637: PUSH
15638: LD_VAR 0 9
15642: ARRAY
15643: PUSH
15644: LD_INT 2
15646: ARRAY
15647: PPUSH
15648: CALL_OW 428
15652: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15653: LD_VAR 0 14
15657: PUSH
15658: LD_VAR 0 9
15662: ARRAY
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: LD_VAR 0 14
15672: PUSH
15673: LD_VAR 0 9
15677: ARRAY
15678: PUSH
15679: LD_INT 2
15681: ARRAY
15682: PPUSH
15683: CALL_OW 351
15687: PUSH
15688: LD_VAR 0 14
15692: PUSH
15693: LD_VAR 0 9
15697: ARRAY
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 14
15707: PUSH
15708: LD_VAR 0 9
15712: ARRAY
15713: PUSH
15714: LD_INT 2
15716: ARRAY
15717: PPUSH
15718: CALL_OW 488
15722: NOT
15723: OR
15724: PUSH
15725: LD_VAR 0 13
15729: PPUSH
15730: CALL_OW 247
15734: PUSH
15735: LD_INT 3
15737: EQUAL
15738: OR
15739: IFFALSE 15745
// exit ;
15741: POP
15742: POP
15743: GO 16289
// if not tmp then
15745: LD_VAR 0 13
15749: NOT
15750: IFFALSE 15754
// continue ;
15752: GO 15610
// result := true ;
15754: LD_ADDR_VAR 0 8
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15762: LD_VAR 0 6
15766: PUSH
15767: LD_VAR 0 13
15771: PPUSH
15772: CALL_OW 247
15776: PUSH
15777: LD_INT 2
15779: EQUAL
15780: AND
15781: PUSH
15782: LD_VAR 0 13
15786: PPUSH
15787: CALL_OW 263
15791: PUSH
15792: LD_INT 1
15794: EQUAL
15795: AND
15796: IFFALSE 15960
// begin if IsDrivenBy ( tmp ) then
15798: LD_VAR 0 13
15802: PPUSH
15803: CALL_OW 311
15807: IFFALSE 15811
// continue ;
15809: GO 15610
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15811: LD_VAR 0 6
15815: PPUSH
15816: LD_INT 3
15818: PUSH
15819: LD_INT 60
15821: PUSH
15822: EMPTY
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 3
15831: PUSH
15832: LD_INT 55
15834: PUSH
15835: EMPTY
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PPUSH
15846: CALL_OW 72
15850: IFFALSE 15958
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15852: LD_ADDR_VAR 0 18
15856: PUSH
15857: LD_VAR 0 6
15861: PPUSH
15862: LD_INT 3
15864: PUSH
15865: LD_INT 60
15867: PUSH
15868: EMPTY
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 3
15877: PUSH
15878: LD_INT 55
15880: PUSH
15881: EMPTY
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 72
15896: PUSH
15897: LD_INT 1
15899: ARRAY
15900: ST_TO_ADDR
// if IsInUnit ( driver ) then
15901: LD_VAR 0 18
15905: PPUSH
15906: CALL_OW 310
15910: IFFALSE 15921
// ComExit ( driver ) ;
15912: LD_VAR 0 18
15916: PPUSH
15917: CALL 40654 0 1
// AddComEnterUnit ( driver , tmp ) ;
15921: LD_VAR 0 18
15925: PPUSH
15926: LD_VAR 0 13
15930: PPUSH
15931: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15935: LD_VAR 0 18
15939: PPUSH
15940: LD_VAR 0 7
15944: PPUSH
15945: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15949: LD_VAR 0 18
15953: PPUSH
15954: CALL_OW 181
// end ; continue ;
15958: GO 15610
// end ; if not cleaners or not tmp in cleaners then
15960: LD_VAR 0 6
15964: NOT
15965: PUSH
15966: LD_VAR 0 13
15970: PUSH
15971: LD_VAR 0 6
15975: IN
15976: NOT
15977: OR
15978: IFFALSE 16285
// begin if dep then
15980: LD_VAR 0 17
15984: IFFALSE 16120
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15986: LD_ADDR_VAR 0 16
15990: PUSH
15991: LD_VAR 0 17
15995: PUSH
15996: LD_INT 1
15998: ARRAY
15999: PPUSH
16000: CALL_OW 250
16004: PPUSH
16005: LD_VAR 0 17
16009: PUSH
16010: LD_INT 1
16012: ARRAY
16013: PPUSH
16014: CALL_OW 254
16018: PPUSH
16019: LD_INT 5
16021: PPUSH
16022: CALL_OW 272
16026: PUSH
16027: LD_VAR 0 17
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PPUSH
16036: CALL_OW 251
16040: PPUSH
16041: LD_VAR 0 17
16045: PUSH
16046: LD_INT 1
16048: ARRAY
16049: PPUSH
16050: CALL_OW 254
16054: PPUSH
16055: LD_INT 5
16057: PPUSH
16058: CALL_OW 273
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16067: LD_VAR 0 16
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: LD_VAR 0 16
16080: PUSH
16081: LD_INT 2
16083: ARRAY
16084: PPUSH
16085: CALL_OW 488
16089: IFFALSE 16120
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16091: LD_VAR 0 13
16095: PPUSH
16096: LD_VAR 0 16
16100: PUSH
16101: LD_INT 1
16103: ARRAY
16104: PPUSH
16105: LD_VAR 0 16
16109: PUSH
16110: LD_INT 2
16112: ARRAY
16113: PPUSH
16114: CALL_OW 111
// continue ;
16118: GO 15610
// end ; end ; r := GetDir ( tmp ) ;
16120: LD_ADDR_VAR 0 15
16124: PUSH
16125: LD_VAR 0 13
16129: PPUSH
16130: CALL_OW 254
16134: ST_TO_ADDR
// if r = 5 then
16135: LD_VAR 0 15
16139: PUSH
16140: LD_INT 5
16142: EQUAL
16143: IFFALSE 16153
// r := 0 ;
16145: LD_ADDR_VAR 0 15
16149: PUSH
16150: LD_INT 0
16152: ST_TO_ADDR
// for j = r to 5 do
16153: LD_ADDR_VAR 0 10
16157: PUSH
16158: DOUBLE
16159: LD_VAR 0 15
16163: DEC
16164: ST_TO_ADDR
16165: LD_INT 5
16167: PUSH
16168: FOR_TO
16169: IFFALSE 16283
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16171: LD_ADDR_VAR 0 11
16175: PUSH
16176: LD_VAR 0 13
16180: PPUSH
16181: CALL_OW 250
16185: PPUSH
16186: LD_VAR 0 10
16190: PPUSH
16191: LD_INT 2
16193: PPUSH
16194: CALL_OW 272
16198: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16199: LD_ADDR_VAR 0 12
16203: PUSH
16204: LD_VAR 0 13
16208: PPUSH
16209: CALL_OW 251
16213: PPUSH
16214: LD_VAR 0 10
16218: PPUSH
16219: LD_INT 2
16221: PPUSH
16222: CALL_OW 273
16226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16227: LD_VAR 0 11
16231: PPUSH
16232: LD_VAR 0 12
16236: PPUSH
16237: CALL_OW 488
16241: PUSH
16242: LD_VAR 0 11
16246: PPUSH
16247: LD_VAR 0 12
16251: PPUSH
16252: CALL_OW 428
16256: NOT
16257: AND
16258: IFFALSE 16281
// begin ComMoveXY ( tmp , _x , _y ) ;
16260: LD_VAR 0 13
16264: PPUSH
16265: LD_VAR 0 11
16269: PPUSH
16270: LD_VAR 0 12
16274: PPUSH
16275: CALL_OW 111
// break ;
16279: GO 16283
// end ; end ;
16281: GO 16168
16283: POP
16284: POP
// end ; end ;
16285: GO 15610
16287: POP
16288: POP
// end ;
16289: LD_VAR 0 8
16293: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16294: LD_INT 0
16296: PPUSH
// result := true ;
16297: LD_ADDR_VAR 0 3
16301: PUSH
16302: LD_INT 1
16304: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 24
16312: DOUBLE
16313: EQUAL
16314: IFTRUE 16324
16316: LD_INT 33
16318: DOUBLE
16319: EQUAL
16320: IFTRUE 16324
16322: GO 16349
16324: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_INT 32
16332: PPUSH
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 321
16342: PUSH
16343: LD_INT 2
16345: EQUAL
16346: ST_TO_ADDR
16347: GO 16669
16349: LD_INT 20
16351: DOUBLE
16352: EQUAL
16353: IFTRUE 16357
16355: GO 16382
16357: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16358: LD_ADDR_VAR 0 3
16362: PUSH
16363: LD_INT 6
16365: PPUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 321
16375: PUSH
16376: LD_INT 2
16378: EQUAL
16379: ST_TO_ADDR
16380: GO 16669
16382: LD_INT 22
16384: DOUBLE
16385: EQUAL
16386: IFTRUE 16396
16388: LD_INT 36
16390: DOUBLE
16391: EQUAL
16392: IFTRUE 16396
16394: GO 16421
16396: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: LD_INT 15
16404: PPUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 321
16414: PUSH
16415: LD_INT 2
16417: EQUAL
16418: ST_TO_ADDR
16419: GO 16669
16421: LD_INT 30
16423: DOUBLE
16424: EQUAL
16425: IFTRUE 16429
16427: GO 16454
16429: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16430: LD_ADDR_VAR 0 3
16434: PUSH
16435: LD_INT 20
16437: PPUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 321
16447: PUSH
16448: LD_INT 2
16450: EQUAL
16451: ST_TO_ADDR
16452: GO 16669
16454: LD_INT 28
16456: DOUBLE
16457: EQUAL
16458: IFTRUE 16468
16460: LD_INT 21
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16493
16468: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_INT 21
16476: PPUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 321
16486: PUSH
16487: LD_INT 2
16489: EQUAL
16490: ST_TO_ADDR
16491: GO 16669
16493: LD_INT 16
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16528
16501: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_EXP 33
16511: PPUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 321
16521: PUSH
16522: LD_INT 2
16524: EQUAL
16525: ST_TO_ADDR
16526: GO 16669
16528: LD_INT 19
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16542
16534: LD_INT 23
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 16569
16542: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_EXP 32
16552: PPUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 321
16562: PUSH
16563: LD_INT 2
16565: EQUAL
16566: ST_TO_ADDR
16567: GO 16669
16569: LD_INT 17
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16602
16577: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16578: LD_ADDR_VAR 0 3
16582: PUSH
16583: LD_INT 39
16585: PPUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: CALL_OW 321
16595: PUSH
16596: LD_INT 2
16598: EQUAL
16599: ST_TO_ADDR
16600: GO 16669
16602: LD_INT 18
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16635
16610: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_INT 40
16618: PPUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 321
16628: PUSH
16629: LD_INT 2
16631: EQUAL
16632: ST_TO_ADDR
16633: GO 16669
16635: LD_INT 27
16637: DOUBLE
16638: EQUAL
16639: IFTRUE 16643
16641: GO 16668
16643: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_INT 35
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 321
16661: PUSH
16662: LD_INT 2
16664: EQUAL
16665: ST_TO_ADDR
16666: GO 16669
16668: POP
// end ;
16669: LD_VAR 0 3
16673: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16674: LD_INT 0
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
// result := false ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_INT 0
16694: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16695: LD_VAR 0 1
16699: NOT
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 266
16710: PUSH
16711: LD_INT 0
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: IN
16721: NOT
16722: OR
16723: PUSH
16724: LD_VAR 0 2
16728: NOT
16729: OR
16730: PUSH
16731: LD_VAR 0 5
16735: PUSH
16736: LD_INT 0
16738: PUSH
16739: LD_INT 1
16741: PUSH
16742: LD_INT 2
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: LD_INT 4
16750: PUSH
16751: LD_INT 5
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: IN
16762: NOT
16763: OR
16764: PUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_VAR 0 4
16774: PPUSH
16775: CALL_OW 488
16779: NOT
16780: OR
16781: IFFALSE 16785
// exit ;
16783: GO 17521
// side := GetSide ( depot ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 255
16799: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16800: LD_VAR 0 9
16804: PPUSH
16805: LD_VAR 0 2
16809: PPUSH
16810: CALL 16294 0 2
16814: NOT
16815: IFFALSE 16819
// exit ;
16817: GO 17521
// pom := GetBase ( depot ) ;
16819: LD_ADDR_VAR 0 10
16823: PUSH
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL_OW 274
16833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16834: LD_ADDR_VAR 0 11
16838: PUSH
16839: LD_VAR 0 2
16843: PPUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 248
16853: PPUSH
16854: CALL_OW 450
16858: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16859: LD_VAR 0 10
16863: PPUSH
16864: LD_INT 1
16866: PPUSH
16867: CALL_OW 275
16871: PUSH
16872: LD_VAR 0 11
16876: PUSH
16877: LD_INT 1
16879: ARRAY
16880: GREATEREQUAL
16881: PUSH
16882: LD_VAR 0 10
16886: PPUSH
16887: LD_INT 2
16889: PPUSH
16890: CALL_OW 275
16894: PUSH
16895: LD_VAR 0 11
16899: PUSH
16900: LD_INT 2
16902: ARRAY
16903: GREATEREQUAL
16904: AND
16905: PUSH
16906: LD_VAR 0 10
16910: PPUSH
16911: LD_INT 3
16913: PPUSH
16914: CALL_OW 275
16918: PUSH
16919: LD_VAR 0 11
16923: PUSH
16924: LD_INT 3
16926: ARRAY
16927: GREATEREQUAL
16928: AND
16929: NOT
16930: IFFALSE 16934
// exit ;
16932: GO 17521
// if GetBType ( depot ) = b_depot then
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 266
16943: PUSH
16944: LD_INT 0
16946: EQUAL
16947: IFFALSE 16959
// dist := 28 else
16949: LD_ADDR_VAR 0 14
16953: PUSH
16954: LD_INT 28
16956: ST_TO_ADDR
16957: GO 16967
// dist := 36 ;
16959: LD_ADDR_VAR 0 14
16963: PUSH
16964: LD_INT 36
16966: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_VAR 0 4
16981: PPUSH
16982: CALL_OW 297
16986: PUSH
16987: LD_VAR 0 14
16991: GREATER
16992: IFFALSE 16996
// exit ;
16994: GO 17521
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16996: LD_ADDR_VAR 0 12
17000: PUSH
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_VAR 0 3
17010: PPUSH
17011: LD_VAR 0 4
17015: PPUSH
17016: LD_VAR 0 5
17020: PPUSH
17021: LD_VAR 0 1
17025: PPUSH
17026: CALL_OW 248
17030: PPUSH
17031: LD_INT 0
17033: PPUSH
17034: CALL 17526 0 6
17038: ST_TO_ADDR
// if not hexes then
17039: LD_VAR 0 12
17043: NOT
17044: IFFALSE 17048
// exit ;
17046: GO 17521
// hex := GetHexInfo ( x , y ) ;
17048: LD_ADDR_VAR 0 15
17052: PUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: LD_VAR 0 4
17062: PPUSH
17063: CALL_OW 546
17067: ST_TO_ADDR
// if hex [ 1 ] then
17068: LD_VAR 0 15
17072: PUSH
17073: LD_INT 1
17075: ARRAY
17076: IFFALSE 17080
// exit ;
17078: GO 17521
// height := hex [ 2 ] ;
17080: LD_ADDR_VAR 0 13
17084: PUSH
17085: LD_VAR 0 15
17089: PUSH
17090: LD_INT 2
17092: ARRAY
17093: ST_TO_ADDR
// for i = 1 to hexes do
17094: LD_ADDR_VAR 0 7
17098: PUSH
17099: DOUBLE
17100: LD_INT 1
17102: DEC
17103: ST_TO_ADDR
17104: LD_VAR 0 12
17108: PUSH
17109: FOR_TO
17110: IFFALSE 17440
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17112: LD_VAR 0 12
17116: PUSH
17117: LD_VAR 0 7
17121: ARRAY
17122: PUSH
17123: LD_INT 1
17125: ARRAY
17126: PPUSH
17127: LD_VAR 0 12
17131: PUSH
17132: LD_VAR 0 7
17136: ARRAY
17137: PUSH
17138: LD_INT 2
17140: ARRAY
17141: PPUSH
17142: CALL_OW 488
17146: NOT
17147: PUSH
17148: LD_VAR 0 12
17152: PUSH
17153: LD_VAR 0 7
17157: ARRAY
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PPUSH
17163: LD_VAR 0 12
17167: PUSH
17168: LD_VAR 0 7
17172: ARRAY
17173: PUSH
17174: LD_INT 2
17176: ARRAY
17177: PPUSH
17178: CALL_OW 428
17182: PUSH
17183: LD_INT 0
17185: GREATER
17186: OR
17187: PUSH
17188: LD_VAR 0 12
17192: PUSH
17193: LD_VAR 0 7
17197: ARRAY
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: PPUSH
17203: LD_VAR 0 12
17207: PUSH
17208: LD_VAR 0 7
17212: ARRAY
17213: PUSH
17214: LD_INT 2
17216: ARRAY
17217: PPUSH
17218: CALL_OW 351
17222: OR
17223: IFFALSE 17229
// exit ;
17225: POP
17226: POP
17227: GO 17521
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17229: LD_ADDR_VAR 0 8
17233: PUSH
17234: LD_VAR 0 12
17238: PUSH
17239: LD_VAR 0 7
17243: ARRAY
17244: PUSH
17245: LD_INT 1
17247: ARRAY
17248: PPUSH
17249: LD_VAR 0 12
17253: PUSH
17254: LD_VAR 0 7
17258: ARRAY
17259: PUSH
17260: LD_INT 2
17262: ARRAY
17263: PPUSH
17264: CALL_OW 546
17268: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17269: LD_VAR 0 8
17273: PUSH
17274: LD_INT 1
17276: ARRAY
17277: PUSH
17278: LD_VAR 0 8
17282: PUSH
17283: LD_INT 2
17285: ARRAY
17286: PUSH
17287: LD_VAR 0 13
17291: PUSH
17292: LD_INT 2
17294: PLUS
17295: GREATER
17296: OR
17297: PUSH
17298: LD_VAR 0 8
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: PUSH
17307: LD_VAR 0 13
17311: PUSH
17312: LD_INT 2
17314: MINUS
17315: LESS
17316: OR
17317: PUSH
17318: LD_VAR 0 8
17322: PUSH
17323: LD_INT 3
17325: ARRAY
17326: PUSH
17327: LD_INT 0
17329: PUSH
17330: LD_INT 8
17332: PUSH
17333: LD_INT 9
17335: PUSH
17336: LD_INT 10
17338: PUSH
17339: LD_INT 11
17341: PUSH
17342: LD_INT 12
17344: PUSH
17345: LD_INT 13
17347: PUSH
17348: LD_INT 16
17350: PUSH
17351: LD_INT 17
17353: PUSH
17354: LD_INT 18
17356: PUSH
17357: LD_INT 19
17359: PUSH
17360: LD_INT 20
17362: PUSH
17363: LD_INT 21
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: IN
17381: NOT
17382: OR
17383: PUSH
17384: LD_VAR 0 8
17388: PUSH
17389: LD_INT 5
17391: ARRAY
17392: NOT
17393: OR
17394: PUSH
17395: LD_VAR 0 8
17399: PUSH
17400: LD_INT 6
17402: ARRAY
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: LD_INT 7
17412: PUSH
17413: LD_INT 9
17415: PUSH
17416: LD_INT 10
17418: PUSH
17419: LD_INT 11
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: IN
17430: NOT
17431: OR
17432: IFFALSE 17438
// exit ;
17434: POP
17435: POP
17436: GO 17521
// end ;
17438: GO 17109
17440: POP
17441: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17442: LD_VAR 0 9
17446: PPUSH
17447: LD_VAR 0 3
17451: PPUSH
17452: LD_VAR 0 4
17456: PPUSH
17457: LD_INT 20
17459: PPUSH
17460: CALL 9467 0 4
17464: PUSH
17465: LD_INT 4
17467: ARRAY
17468: IFFALSE 17472
// exit ;
17470: GO 17521
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17472: LD_VAR 0 2
17476: PUSH
17477: LD_INT 29
17479: PUSH
17480: LD_INT 30
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: IN
17487: PUSH
17488: LD_VAR 0 3
17492: PPUSH
17493: LD_VAR 0 4
17497: PPUSH
17498: LD_VAR 0 9
17502: PPUSH
17503: CALL_OW 440
17507: NOT
17508: AND
17509: IFFALSE 17513
// exit ;
17511: GO 17521
// result := true ;
17513: LD_ADDR_VAR 0 6
17517: PUSH
17518: LD_INT 1
17520: ST_TO_ADDR
// end ;
17521: LD_VAR 0 6
17525: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
17542: PPUSH
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
17555: PPUSH
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
17560: PPUSH
17561: PPUSH
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
// result = [ ] ;
17586: LD_ADDR_VAR 0 7
17590: PUSH
17591: EMPTY
17592: ST_TO_ADDR
// temp_list = [ ] ;
17593: LD_ADDR_VAR 0 9
17597: PUSH
17598: EMPTY
17599: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17600: LD_VAR 0 4
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: LD_INT 4
17619: PUSH
17620: LD_INT 5
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: IN
17631: NOT
17632: PUSH
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: IN
17648: PUSH
17649: LD_VAR 0 5
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: IN
17668: NOT
17669: AND
17670: OR
17671: IFFALSE 17675
// exit ;
17673: GO 36066
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 6
17682: PUSH
17683: LD_INT 7
17685: PUSH
17686: LD_INT 8
17688: PUSH
17689: LD_INT 13
17691: PUSH
17692: LD_INT 12
17694: PUSH
17695: LD_INT 15
17697: PUSH
17698: LD_INT 11
17700: PUSH
17701: LD_INT 14
17703: PUSH
17704: LD_INT 10
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: IN
17718: IFFALSE 17728
// btype = b_lab ;
17720: LD_ADDR_VAR 0 1
17724: PUSH
17725: LD_INT 6
17727: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17728: LD_VAR 0 6
17732: PUSH
17733: LD_INT 0
17735: PUSH
17736: LD_INT 1
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: IN
17747: NOT
17748: PUSH
17749: LD_VAR 0 1
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: LD_INT 6
17768: PUSH
17769: LD_INT 36
17771: PUSH
17772: LD_INT 4
17774: PUSH
17775: LD_INT 5
17777: PUSH
17778: LD_INT 31
17780: PUSH
17781: LD_INT 32
17783: PUSH
17784: LD_INT 33
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: IN
17800: NOT
17801: PUSH
17802: LD_VAR 0 6
17806: PUSH
17807: LD_INT 1
17809: EQUAL
17810: AND
17811: OR
17812: PUSH
17813: LD_VAR 0 1
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 3
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: IN
17828: NOT
17829: PUSH
17830: LD_VAR 0 6
17834: PUSH
17835: LD_INT 2
17837: EQUAL
17838: AND
17839: OR
17840: IFFALSE 17850
// mode = 0 ;
17842: LD_ADDR_VAR 0 6
17846: PUSH
17847: LD_INT 0
17849: ST_TO_ADDR
// case mode of 0 :
17850: LD_VAR 0 6
17854: PUSH
17855: LD_INT 0
17857: DOUBLE
17858: EQUAL
17859: IFTRUE 17863
17861: GO 29316
17863: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17864: LD_ADDR_VAR 0 11
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: LD_INT 0
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 1
17933: NEG
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: LD_INT 2
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 2
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: LD_INT 1
17971: NEG
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: LD_INT 2
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: LD_INT 1
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: LD_INT 3
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: LD_INT 3
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18057: LD_ADDR_VAR 0 12
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 1
18169: NEG
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: NEG
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 2
18191: NEG
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: NEG
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 3
18214: NEG
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 3
18225: NEG
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18253: LD_ADDR_VAR 0 13
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: LD_INT 0
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PUSH
18336: LD_INT 2
18338: NEG
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: NEG
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 2
18388: NEG
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: LD_INT 3
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 3
18412: NEG
18413: PUSH
18414: LD_INT 2
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 3
18424: NEG
18425: PUSH
18426: LD_INT 3
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18452: LD_ADDR_VAR 0 14
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: LD_INT 0
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 2
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: LD_INT 3
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 3
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: LD_INT 2
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18648: LD_ADDR_VAR 0 15
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 0
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 1
18717: NEG
18718: PUSH
18719: LD_INT 1
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: LD_INT 1
18732: NEG
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: NEG
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: NEG
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18841: LD_ADDR_VAR 0 16
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: LD_INT 1
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: LD_INT 2
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 2
18964: NEG
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: NEG
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 3
18988: PUSH
18989: LD_INT 2
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: LD_INT 3
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: LD_INT 3
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19034: LD_ADDR_VAR 0 17
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: LD_INT 0
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: LD_INT 1
19107: NEG
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: LD_INT 2
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 2
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: LD_INT 1
19141: NEG
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 2
19210: NEG
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 2
19221: NEG
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: NEG
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19264: LD_ADDR_VAR 0 18
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 1
19333: NEG
19334: PUSH
19335: LD_INT 1
19337: NEG
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: LD_INT 2
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 1
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 2
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: NEG
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 2
19451: NEG
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: NEG
19464: PUSH
19465: LD_INT 2
19467: NEG
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19494: LD_ADDR_VAR 0 19
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 0
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: NEG
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 2
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: LD_INT 2
19697: NEG
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19724: LD_ADDR_VAR 0 20
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 1
19793: NEG
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 2
19900: NEG
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: NEG
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19954: LD_ADDR_VAR 0 21
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: LD_INT 2
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 2
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 2
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 2
20130: NEG
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 2
20141: NEG
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: NEG
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20184: LD_ADDR_VAR 0 22
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 1
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 1
20265: NEG
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 2
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 2
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: LD_INT 0
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 2
20371: NEG
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: NEG
20384: PUSH
20385: LD_INT 2
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20414: LD_ADDR_VAR 0 23
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 0
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: LD_INT 0
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: NEG
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 0
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 2
20590: NEG
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 2
20613: NEG
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: NEG
20626: PUSH
20627: LD_INT 3
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 3
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 2
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20694: LD_ADDR_VAR 0 24
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: NEG
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: LD_INT 2
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 2
20908: NEG
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 3
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 3
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20970: LD_ADDR_VAR 0 25
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 2
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: LD_INT 2
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: LD_INT 1
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 2
21146: NEG
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 3
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: LD_INT 3
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: LD_INT 3
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21244: LD_ADDR_VAR 0 26
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 0
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: NEG
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: LD_INT 2
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: LD_INT 3
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 3
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21520: LD_ADDR_VAR 0 27
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 0
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: LD_INT 0
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 1
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 2
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 2
21696: NEG
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 2
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: NEG
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 3
21753: NEG
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 3
21765: NEG
21766: PUSH
21767: LD_INT 2
21769: NEG
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21800: LD_ADDR_VAR 0 28
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: LD_INT 1
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 2
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: NEG
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 2
21976: NEG
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: LD_INT 2
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: LD_INT 3
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 3
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 3
22035: NEG
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 3
22047: NEG
22048: PUSH
22049: LD_INT 2
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22082: LD_ADDR_VAR 0 29
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 2
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 2
22248: NEG
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 2
22260: NEG
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: LD_INT 3
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 3
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: LD_INT 3
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 3
22326: NEG
22327: PUSH
22328: LD_INT 2
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22361: LD_ADDR_VAR 0 30
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 2
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: NEG
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 3
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: LD_INT 2
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 3
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 3
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22639: LD_ADDR_VAR 0 31
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 2
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 2
22804: NEG
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: NEG
22817: PUSH
22818: LD_INT 2
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: LD_INT 3
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 3
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 3
22882: NEG
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22917: LD_ADDR_VAR 0 32
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 2
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 2
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 2
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 2
23083: NEG
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 2
23094: NEG
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: LD_INT 3
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: LD_INT 2
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 3
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: NEG
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 3
23160: NEG
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23195: LD_ADDR_VAR 0 33
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 1
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 2
23350: NEG
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 2
23373: NEG
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: NEG
23386: PUSH
23387: LD_INT 3
23389: NEG
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 3
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: LD_INT 3
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 3
23439: NEG
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23474: LD_ADDR_VAR 0 34
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: NEG
23654: PUSH
23655: LD_INT 2
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: LD_INT 3
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 3
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 3
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23754: LD_ADDR_VAR 0 35
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23866: LD_ADDR_VAR 0 36
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23978: LD_ADDR_VAR 0 37
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24090: LD_ADDR_VAR 0 38
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24202: LD_ADDR_VAR 0 39
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 1
24271: NEG
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: LD_INT 2
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24314: LD_ADDR_VAR 0 40
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24426: LD_ADDR_VAR 0 41
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 2
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 2
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 2
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: LD_INT 3
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 3
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 3
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 3
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 3
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 3
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 3
24700: NEG
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 3
24711: NEG
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 3
24723: NEG
24724: PUSH
24725: LD_INT 2
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 3
24735: NEG
24736: PUSH
24737: LD_INT 3
24739: NEG
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24776: LD_ADDR_VAR 0 42
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: LD_INT 1
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 2
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: LD_INT 3
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: LD_INT 3
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 3
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: LD_INT 2
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 3
25022: PUSH
25023: LD_INT 3
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 3
25073: NEG
25074: PUSH
25075: LD_INT 2
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 3
25085: NEG
25086: PUSH
25087: LD_INT 3
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25126: LD_ADDR_VAR 0 43
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: NEG
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 3
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: LD_INT 3
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 3
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 3
25422: NEG
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 3
25433: NEG
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25474: LD_ADDR_VAR 0 44
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 2
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: NEG
25653: PUSH
25654: LD_INT 2
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: LD_INT 3
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 3
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 3
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 3
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: NEG
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: NEG
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 3
25771: NEG
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: NEG
25784: PUSH
25785: LD_INT 3
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25824: LD_ADDR_VAR 0 45
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: LD_INT 2
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 3
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: LD_INT 3
26030: NEG
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 3
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 3
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: LD_INT 3
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 3
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 3
26121: NEG
26122: PUSH
26123: LD_INT 2
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 3
26133: NEG
26134: PUSH
26135: LD_INT 3
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26174: LD_ADDR_VAR 0 46
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 3
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 3
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 2
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 3
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 3
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: PUSH
26429: LD_INT 3
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: LD_INT 3
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 3
26470: NEG
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 3
26481: NEG
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26522: LD_ADDR_VAR 0 47
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 2
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 2
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26673: LD_ADDR_VAR 0 48
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 2
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26820: LD_ADDR_VAR 0 49
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26964: LD_ADDR_VAR 0 50
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27108: LD_ADDR_VAR 0 51
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27255: LD_ADDR_VAR 0 52
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 2
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: NEG
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27406: LD_ADDR_VAR 0 53
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 2
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 2
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 2
27582: NEG
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27636: LD_ADDR_VAR 0 54
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 2
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 2
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 2
27812: NEG
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27866: LD_ADDR_VAR 0 55
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: LD_INT 1
27939: NEG
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: LD_INT 2
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 2
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 2
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28096: LD_ADDR_VAR 0 56
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 2
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 2
28272: NEG
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28326: LD_ADDR_VAR 0 57
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: NEG
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: NEG
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28556: LD_ADDR_VAR 0 58
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: LD_INT 2
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 2
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: NEG
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28786: LD_ADDR_VAR 0 59
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28874: LD_ADDR_VAR 0 60
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 0
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: NEG
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28962: LD_ADDR_VAR 0 61
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29050: LD_ADDR_VAR 0 62
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29138: LD_ADDR_VAR 0 63
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29226: LD_ADDR_VAR 0 64
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: ST_TO_ADDR
// end ; 1 :
29314: GO 35211
29316: LD_INT 1
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 31947
29324: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29325: LD_ADDR_VAR 0 11
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: LD_INT 3
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: LD_INT 3
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29369: LD_ADDR_VAR 0 12
29373: PUSH
29374: LD_INT 2
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 3
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 3
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29410: LD_ADDR_VAR 0 13
29414: PUSH
29415: LD_INT 3
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29450: LD_ADDR_VAR 0 14
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29491: LD_ADDR_VAR 0 15
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: NEG
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 3
29520: NEG
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29535: LD_ADDR_VAR 0 16
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: LD_INT 3
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 3
29566: NEG
29567: PUSH
29568: LD_INT 3
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29581: LD_ADDR_VAR 0 17
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29625: LD_ADDR_VAR 0 18
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29666: LD_ADDR_VAR 0 19
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29706: LD_ADDR_VAR 0 20
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: LIST
29746: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29747: LD_ADDR_VAR 0 21
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 3
29776: NEG
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29791: LD_ADDR_VAR 0 22
29795: PUSH
29796: LD_INT 2
29798: NEG
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 3
29810: NEG
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 3
29822: NEG
29823: PUSH
29824: LD_INT 3
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29837: LD_ADDR_VAR 0 23
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 3
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: LD_INT 4
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29881: LD_ADDR_VAR 0 24
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 4
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29922: LD_ADDR_VAR 0 25
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 4
29939: PUSH
29940: LD_INT 3
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: LD_INT 4
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29962: LD_ADDR_VAR 0 26
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: LD_INT 3
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 4
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30003: LD_ADDR_VAR 0 27
30007: PUSH
30008: LD_INT 3
30010: NEG
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 3
30021: NEG
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 4
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30047: LD_ADDR_VAR 0 28
30051: PUSH
30052: LD_INT 3
30054: NEG
30055: PUSH
30056: LD_INT 3
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: NEG
30067: PUSH
30068: LD_INT 4
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 4
30078: NEG
30079: PUSH
30080: LD_INT 3
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30093: LD_ADDR_VAR 0 29
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: LD_INT 3
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 0
30112: PUSH
30113: LD_INT 3
30115: NEG
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: LD_INT 4
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 4
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 3
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: PUSH
30170: LD_INT 5
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: LD_INT 5
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 4
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: LD_INT 6
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 6
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 5
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30248: LD_ADDR_VAR 0 30
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 4
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 4
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 4
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 5
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 5
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 5
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 6
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 6
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30391: LD_ADDR_VAR 0 31
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 4
30438: PUSH
30439: LD_INT 4
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: LD_INT 4
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 5
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 5
30468: PUSH
30469: LD_INT 5
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 4
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 6
30488: PUSH
30489: LD_INT 5
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 6
30498: PUSH
30499: LD_INT 6
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 5
30508: PUSH
30509: LD_INT 6
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30530: LD_ADDR_VAR 0 32
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 3
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 4
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 5
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 4
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: LD_INT 6
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: LD_INT 6
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 5
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30673: LD_ADDR_VAR 0 33
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 3
30691: NEG
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 3
30702: NEG
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 3
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 4
30725: NEG
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 4
30736: NEG
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 4
30748: NEG
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 5
30759: NEG
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 5
30770: NEG
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 6
30793: NEG
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 6
30804: NEG
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30828: LD_ADDR_VAR 0 34
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 2
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 4
30883: NEG
30884: PUSH
30885: LD_INT 3
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 4
30895: NEG
30896: PUSH
30897: LD_INT 4
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 4
30907: NEG
30908: PUSH
30909: LD_INT 5
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 5
30919: NEG
30920: PUSH
30921: LD_INT 4
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 5
30931: NEG
30932: PUSH
30933: LD_INT 5
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 5
30943: NEG
30944: PUSH
30945: LD_INT 6
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 6
30955: NEG
30956: PUSH
30957: LD_INT 5
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 6
30967: NEG
30968: PUSH
30969: LD_INT 6
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30991: LD_ADDR_VAR 0 41
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 3
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31035: LD_ADDR_VAR 0 42
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31076: LD_ADDR_VAR 0 43
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31116: LD_ADDR_VAR 0 44
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: NEG
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31157: LD_ADDR_VAR 0 45
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: NEG
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31201: LD_ADDR_VAR 0 46
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 3
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: LD_INT 2
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31247: LD_ADDR_VAR 0 47
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31280: LD_ADDR_VAR 0 48
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31311: LD_ADDR_VAR 0 49
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31340: LD_ADDR_VAR 0 50
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31369: LD_ADDR_VAR 0 51
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31400: LD_ADDR_VAR 0 52
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 3
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31433: LD_ADDR_VAR 0 53
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 3
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 3
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31477: LD_ADDR_VAR 0 54
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31518: LD_ADDR_VAR 0 55
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31558: LD_ADDR_VAR 0 56
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 3
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31599: LD_ADDR_VAR 0 57
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 3
31617: NEG
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 3
31628: NEG
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31643: LD_ADDR_VAR 0 58
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 3
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 3
31662: NEG
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31689: LD_ADDR_VAR 0 59
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31733: LD_ADDR_VAR 0 60
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31774: LD_ADDR_VAR 0 61
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: LD_INT 2
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: LD_INT 2
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31814: LD_ADDR_VAR 0 62
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31855: LD_ADDR_VAR 0 63
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31899: LD_ADDR_VAR 0 64
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
// end ; 2 :
31945: GO 35211
31947: LD_INT 2
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 35210
31955: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31956: LD_ADDR_VAR 0 29
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 5
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 5
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 4
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 3
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 5
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: LD_INT 3
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 4
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 4
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 4
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: LD_INT 5
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 5
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: LD_INT 4
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 5
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 3
32239: NEG
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 3
32250: NEG
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 4
32295: NEG
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 4
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: NEG
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 4
32341: NEG
32342: PUSH
32343: LD_INT 4
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 4
32353: NEG
32354: PUSH
32355: LD_INT 5
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: LD_INT 4
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 5
32401: NEG
32402: PUSH
32403: LD_INT 4
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 5
32413: NEG
32414: PUSH
32415: LD_INT 5
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: LD_INT 5
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 5
32437: NEG
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32494: LD_ADDR_VAR 0 30
32498: PUSH
32499: LD_INT 4
32501: PUSH
32502: LD_INT 4
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 4
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 5
32521: PUSH
32522: LD_INT 4
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 5
32531: PUSH
32532: LD_INT 5
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 4
32541: PUSH
32542: LD_INT 5
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 4
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 5
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 3
32581: PUSH
32582: LD_INT 5
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: LD_INT 4
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 4
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 2
32673: NEG
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 4
32684: NEG
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 4
32695: NEG
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: NEG
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 4
32729: NEG
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 5
32740: NEG
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 5
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 5
32763: NEG
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 3
32775: NEG
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: NEG
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: NEG
32799: PUSH
32800: LD_INT 4
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 3
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 4
32846: NEG
32847: PUSH
32848: LD_INT 3
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 4
32858: NEG
32859: PUSH
32860: LD_INT 4
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: NEG
32871: PUSH
32872: LD_INT 4
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 4
32882: NEG
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 4
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 5
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 4
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 3
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 4
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 5
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: LD_INT 5
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33041: LD_ADDR_VAR 0 31
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 4
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 4
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: LD_INT 5
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: LD_INT 5
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: LD_INT 4
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 1
33109: NEG
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: LD_INT 3
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 3
33141: NEG
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 3
33152: NEG
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 3
33186: NEG
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 4
33197: NEG
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 4
33208: NEG
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 4
33220: NEG
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 4
33243: NEG
33244: PUSH
33245: LD_INT 4
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 4
33255: NEG
33256: PUSH
33257: LD_INT 5
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: LD_INT 4
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 4
33291: NEG
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 5
33303: NEG
33304: PUSH
33305: LD_INT 4
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 5
33315: NEG
33316: PUSH
33317: LD_INT 5
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: LD_INT 5
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 5
33339: NEG
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 3
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 4
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 3
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 4
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 5
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 5
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33591: LD_ADDR_VAR 0 32
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 4
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 3
33621: NEG
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 3
33632: NEG
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 4
33643: NEG
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 5
33654: NEG
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 5
33665: NEG
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 5
33677: NEG
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 3
33700: NEG
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 3
33712: NEG
33713: PUSH
33714: LD_INT 4
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: LD_INT 3
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: LD_INT 3
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 4
33772: NEG
33773: PUSH
33774: LD_INT 4
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: LD_INT 4
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 4
33796: NEG
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: LD_INT 4
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 5
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: LD_INT 4
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: LD_INT 4
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: LD_INT 5
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 3
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: LD_INT 5
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 4
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 4
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 4
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 4
34003: PUSH
34004: LD_INT 4
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 4
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 5
34023: PUSH
34024: LD_INT 4
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 5
34033: PUSH
34034: LD_INT 5
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: LD_INT 5
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 4
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 3
34063: PUSH
34064: LD_INT 3
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 5
34073: PUSH
34074: LD_INT 3
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 5
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34138: LD_ADDR_VAR 0 33
34142: PUSH
34143: LD_INT 4
34145: NEG
34146: PUSH
34147: LD_INT 4
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 4
34157: NEG
34158: PUSH
34159: LD_INT 5
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 3
34169: NEG
34170: PUSH
34171: LD_INT 4
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: LD_INT 3
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 4
34193: NEG
34194: PUSH
34195: LD_INT 3
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 5
34205: NEG
34206: PUSH
34207: LD_INT 4
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 5
34217: NEG
34218: PUSH
34219: LD_INT 5
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: LD_INT 5
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 5
34241: NEG
34242: PUSH
34243: LD_INT 3
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 3
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 4
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: LD_INT 3
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 3
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 4
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: LD_INT 4
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 4
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 4
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 5
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 5
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 4
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 5
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 3
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 4
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 4
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 3
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 4
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 4
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 5
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 5
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 5
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34676: LD_ADDR_VAR 0 34
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 4
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 5
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: LD_INT 4
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: LD_INT 3
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 3
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 4
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: LD_INT 5
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 5
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 4
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 4
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 3
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 4
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 4
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 4
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 5
34898: PUSH
34899: LD_INT 4
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 5
34908: PUSH
34909: LD_INT 5
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 5
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 5
34948: PUSH
34949: LD_INT 3
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 3
34958: PUSH
34959: LD_INT 5
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 3
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: LD_INT 4
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: LD_INT 4
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 4
35061: NEG
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 4
35072: NEG
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 4
35106: NEG
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 5
35117: NEG
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 5
35128: NEG
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 5
35140: NEG
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 3
35152: NEG
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// end ; end ;
35208: GO 35211
35210: POP
// case btype of b_depot , b_warehouse :
35211: LD_VAR 0 1
35215: PUSH
35216: LD_INT 0
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35230
35222: LD_INT 1
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35230
35228: GO 35431
35230: POP
// case nation of nation_american :
35231: LD_VAR 0 5
35235: PUSH
35236: LD_INT 1
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35300
35244: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35245: LD_ADDR_VAR 0 9
35249: PUSH
35250: LD_VAR 0 11
35254: PUSH
35255: LD_VAR 0 12
35259: PUSH
35260: LD_VAR 0 13
35264: PUSH
35265: LD_VAR 0 14
35269: PUSH
35270: LD_VAR 0 15
35274: PUSH
35275: LD_VAR 0 16
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: PUSH
35288: LD_VAR 0 4
35292: PUSH
35293: LD_INT 1
35295: PLUS
35296: ARRAY
35297: ST_TO_ADDR
35298: GO 35429
35300: LD_INT 2
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35364
35308: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35309: LD_ADDR_VAR 0 9
35313: PUSH
35314: LD_VAR 0 17
35318: PUSH
35319: LD_VAR 0 18
35323: PUSH
35324: LD_VAR 0 19
35328: PUSH
35329: LD_VAR 0 20
35333: PUSH
35334: LD_VAR 0 21
35338: PUSH
35339: LD_VAR 0 22
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: PUSH
35352: LD_VAR 0 4
35356: PUSH
35357: LD_INT 1
35359: PLUS
35360: ARRAY
35361: ST_TO_ADDR
35362: GO 35429
35364: LD_INT 3
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35372
35370: GO 35428
35372: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35373: LD_ADDR_VAR 0 9
35377: PUSH
35378: LD_VAR 0 23
35382: PUSH
35383: LD_VAR 0 24
35387: PUSH
35388: LD_VAR 0 25
35392: PUSH
35393: LD_VAR 0 26
35397: PUSH
35398: LD_VAR 0 27
35402: PUSH
35403: LD_VAR 0 28
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: PUSH
35416: LD_VAR 0 4
35420: PUSH
35421: LD_INT 1
35423: PLUS
35424: ARRAY
35425: ST_TO_ADDR
35426: GO 35429
35428: POP
35429: GO 35984
35431: LD_INT 2
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35445
35437: LD_INT 3
35439: DOUBLE
35440: EQUAL
35441: IFTRUE 35445
35443: GO 35501
35445: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35446: LD_ADDR_VAR 0 9
35450: PUSH
35451: LD_VAR 0 29
35455: PUSH
35456: LD_VAR 0 30
35460: PUSH
35461: LD_VAR 0 31
35465: PUSH
35466: LD_VAR 0 32
35470: PUSH
35471: LD_VAR 0 33
35475: PUSH
35476: LD_VAR 0 34
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: PUSH
35489: LD_VAR 0 4
35493: PUSH
35494: LD_INT 1
35496: PLUS
35497: ARRAY
35498: ST_TO_ADDR
35499: GO 35984
35501: LD_INT 16
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35563
35507: LD_INT 17
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35563
35513: LD_INT 18
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35563
35519: LD_INT 19
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35563
35525: LD_INT 22
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35563
35531: LD_INT 20
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35563
35537: LD_INT 21
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35563
35543: LD_INT 23
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35563
35549: LD_INT 24
35551: DOUBLE
35552: EQUAL
35553: IFTRUE 35563
35555: LD_INT 25
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35563
35561: GO 35619
35563: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35564: LD_ADDR_VAR 0 9
35568: PUSH
35569: LD_VAR 0 35
35573: PUSH
35574: LD_VAR 0 36
35578: PUSH
35579: LD_VAR 0 37
35583: PUSH
35584: LD_VAR 0 38
35588: PUSH
35589: LD_VAR 0 39
35593: PUSH
35594: LD_VAR 0 40
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: LD_VAR 0 4
35611: PUSH
35612: LD_INT 1
35614: PLUS
35615: ARRAY
35616: ST_TO_ADDR
35617: GO 35984
35619: LD_INT 6
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35675
35625: LD_INT 7
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35675
35631: LD_INT 8
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35675
35637: LD_INT 13
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35675
35643: LD_INT 12
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35675
35649: LD_INT 15
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35675
35655: LD_INT 11
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35675
35661: LD_INT 14
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35675
35667: LD_INT 10
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35731
35675: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35676: LD_ADDR_VAR 0 9
35680: PUSH
35681: LD_VAR 0 41
35685: PUSH
35686: LD_VAR 0 42
35690: PUSH
35691: LD_VAR 0 43
35695: PUSH
35696: LD_VAR 0 44
35700: PUSH
35701: LD_VAR 0 45
35705: PUSH
35706: LD_VAR 0 46
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: PUSH
35719: LD_VAR 0 4
35723: PUSH
35724: LD_INT 1
35726: PLUS
35727: ARRAY
35728: ST_TO_ADDR
35729: GO 35984
35731: LD_INT 36
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35739
35737: GO 35795
35739: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35740: LD_ADDR_VAR 0 9
35744: PUSH
35745: LD_VAR 0 47
35749: PUSH
35750: LD_VAR 0 48
35754: PUSH
35755: LD_VAR 0 49
35759: PUSH
35760: LD_VAR 0 50
35764: PUSH
35765: LD_VAR 0 51
35769: PUSH
35770: LD_VAR 0 52
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: PUSH
35783: LD_VAR 0 4
35787: PUSH
35788: LD_INT 1
35790: PLUS
35791: ARRAY
35792: ST_TO_ADDR
35793: GO 35984
35795: LD_INT 4
35797: DOUBLE
35798: EQUAL
35799: IFTRUE 35821
35801: LD_INT 5
35803: DOUBLE
35804: EQUAL
35805: IFTRUE 35821
35807: LD_INT 34
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35821
35813: LD_INT 37
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35821
35819: GO 35877
35821: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_VAR 0 53
35831: PUSH
35832: LD_VAR 0 54
35836: PUSH
35837: LD_VAR 0 55
35841: PUSH
35842: LD_VAR 0 56
35846: PUSH
35847: LD_VAR 0 57
35851: PUSH
35852: LD_VAR 0 58
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: LD_VAR 0 4
35869: PUSH
35870: LD_INT 1
35872: PLUS
35873: ARRAY
35874: ST_TO_ADDR
35875: GO 35984
35877: LD_INT 31
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35927
35883: LD_INT 32
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35927
35889: LD_INT 33
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35927
35895: LD_INT 27
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35927
35901: LD_INT 26
35903: DOUBLE
35904: EQUAL
35905: IFTRUE 35927
35907: LD_INT 28
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35927
35913: LD_INT 29
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35927
35919: LD_INT 30
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35927
35925: GO 35983
35927: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35928: LD_ADDR_VAR 0 9
35932: PUSH
35933: LD_VAR 0 59
35937: PUSH
35938: LD_VAR 0 60
35942: PUSH
35943: LD_VAR 0 61
35947: PUSH
35948: LD_VAR 0 62
35952: PUSH
35953: LD_VAR 0 63
35957: PUSH
35958: LD_VAR 0 64
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: PUSH
35971: LD_VAR 0 4
35975: PUSH
35976: LD_INT 1
35978: PLUS
35979: ARRAY
35980: ST_TO_ADDR
35981: GO 35984
35983: POP
// temp_list2 = [ ] ;
35984: LD_ADDR_VAR 0 10
35988: PUSH
35989: EMPTY
35990: ST_TO_ADDR
// for i in temp_list do
35991: LD_ADDR_VAR 0 8
35995: PUSH
35996: LD_VAR 0 9
36000: PUSH
36001: FOR_IN
36002: IFFALSE 36054
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36004: LD_ADDR_VAR 0 10
36008: PUSH
36009: LD_VAR 0 10
36013: PUSH
36014: LD_VAR 0 8
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PUSH
36023: LD_VAR 0 2
36027: PLUS
36028: PUSH
36029: LD_VAR 0 8
36033: PUSH
36034: LD_INT 2
36036: ARRAY
36037: PUSH
36038: LD_VAR 0 3
36042: PLUS
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: EMPTY
36049: LIST
36050: ADD
36051: ST_TO_ADDR
36052: GO 36001
36054: POP
36055: POP
// result = temp_list2 ;
36056: LD_ADDR_VAR 0 7
36060: PUSH
36061: LD_VAR 0 10
36065: ST_TO_ADDR
// end ;
36066: LD_VAR 0 7
36070: RET
// export function EnemyInRange ( unit , dist ) ; begin
36071: LD_INT 0
36073: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36074: LD_ADDR_VAR 0 3
36078: PUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 255
36088: PPUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 250
36098: PPUSH
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 251
36108: PPUSH
36109: LD_VAR 0 2
36113: PPUSH
36114: CALL 9467 0 4
36118: PUSH
36119: LD_INT 4
36121: ARRAY
36122: ST_TO_ADDR
// end ;
36123: LD_VAR 0 3
36127: RET
// export function PlayerSeeMe ( unit ) ; begin
36128: LD_INT 0
36130: PPUSH
// result := See ( your_side , unit ) ;
36131: LD_ADDR_VAR 0 2
36135: PUSH
36136: LD_OWVAR 2
36140: PPUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 292
36150: ST_TO_ADDR
// end ;
36151: LD_VAR 0 2
36155: RET
// export function ReverseDir ( unit ) ; begin
36156: LD_INT 0
36158: PPUSH
// if not unit then
36159: LD_VAR 0 1
36163: NOT
36164: IFFALSE 36168
// exit ;
36166: GO 36191
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36168: LD_ADDR_VAR 0 2
36172: PUSH
36173: LD_VAR 0 1
36177: PPUSH
36178: CALL_OW 254
36182: PUSH
36183: LD_INT 3
36185: PLUS
36186: PUSH
36187: LD_INT 6
36189: MOD
36190: ST_TO_ADDR
// end ;
36191: LD_VAR 0 2
36195: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36196: LD_INT 0
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
// if not hexes then
36203: LD_VAR 0 2
36207: NOT
36208: IFFALSE 36212
// exit ;
36210: GO 36360
// dist := 9999 ;
36212: LD_ADDR_VAR 0 5
36216: PUSH
36217: LD_INT 9999
36219: ST_TO_ADDR
// for i = 1 to hexes do
36220: LD_ADDR_VAR 0 4
36224: PUSH
36225: DOUBLE
36226: LD_INT 1
36228: DEC
36229: ST_TO_ADDR
36230: LD_VAR 0 2
36234: PUSH
36235: FOR_TO
36236: IFFALSE 36348
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36238: LD_VAR 0 1
36242: PPUSH
36243: LD_VAR 0 2
36247: PUSH
36248: LD_VAR 0 4
36252: ARRAY
36253: PUSH
36254: LD_INT 1
36256: ARRAY
36257: PPUSH
36258: LD_VAR 0 2
36262: PUSH
36263: LD_VAR 0 4
36267: ARRAY
36268: PUSH
36269: LD_INT 2
36271: ARRAY
36272: PPUSH
36273: CALL_OW 297
36277: PUSH
36278: LD_VAR 0 5
36282: LESS
36283: IFFALSE 36346
// begin hex := hexes [ i ] ;
36285: LD_ADDR_VAR 0 7
36289: PUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_VAR 0 4
36299: ARRAY
36300: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36301: LD_ADDR_VAR 0 5
36305: PUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: LD_VAR 0 2
36315: PUSH
36316: LD_VAR 0 4
36320: ARRAY
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: PPUSH
36326: LD_VAR 0 2
36330: PUSH
36331: LD_VAR 0 4
36335: ARRAY
36336: PUSH
36337: LD_INT 2
36339: ARRAY
36340: PPUSH
36341: CALL_OW 297
36345: ST_TO_ADDR
// end ; end ;
36346: GO 36235
36348: POP
36349: POP
// result := hex ;
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_VAR 0 7
36359: ST_TO_ADDR
// end ;
36360: LD_VAR 0 3
36364: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36365: LD_INT 0
36367: PPUSH
36368: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36369: LD_VAR 0 1
36373: NOT
36374: PUSH
36375: LD_VAR 0 1
36379: PUSH
36380: LD_INT 21
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 23
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PPUSH
36404: CALL_OW 69
36408: IN
36409: NOT
36410: OR
36411: IFFALSE 36415
// exit ;
36413: GO 36462
// for i = 1 to 3 do
36415: LD_ADDR_VAR 0 3
36419: PUSH
36420: DOUBLE
36421: LD_INT 1
36423: DEC
36424: ST_TO_ADDR
36425: LD_INT 3
36427: PUSH
36428: FOR_TO
36429: IFFALSE 36460
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 250
36440: PPUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 251
36450: PPUSH
36451: LD_INT 1
36453: PPUSH
36454: CALL_OW 453
36458: GO 36428
36460: POP
36461: POP
// end ;
36462: LD_VAR 0 2
36466: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36467: LD_INT 0
36469: PPUSH
36470: PPUSH
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36475: LD_VAR 0 1
36479: NOT
36480: PUSH
36481: LD_VAR 0 2
36485: NOT
36486: OR
36487: PUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 314
36497: OR
36498: IFFALSE 36502
// exit ;
36500: GO 36943
// x := GetX ( enemy_unit ) ;
36502: LD_ADDR_VAR 0 7
36506: PUSH
36507: LD_VAR 0 2
36511: PPUSH
36512: CALL_OW 250
36516: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36517: LD_ADDR_VAR 0 8
36521: PUSH
36522: LD_VAR 0 2
36526: PPUSH
36527: CALL_OW 251
36531: ST_TO_ADDR
// if not x or not y then
36532: LD_VAR 0 7
36536: NOT
36537: PUSH
36538: LD_VAR 0 8
36542: NOT
36543: OR
36544: IFFALSE 36548
// exit ;
36546: GO 36943
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36548: LD_ADDR_VAR 0 6
36552: PUSH
36553: LD_VAR 0 7
36557: PPUSH
36558: LD_INT 0
36560: PPUSH
36561: LD_INT 4
36563: PPUSH
36564: CALL_OW 272
36568: PUSH
36569: LD_VAR 0 8
36573: PPUSH
36574: LD_INT 0
36576: PPUSH
36577: LD_INT 4
36579: PPUSH
36580: CALL_OW 273
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_VAR 0 7
36593: PPUSH
36594: LD_INT 1
36596: PPUSH
36597: LD_INT 4
36599: PPUSH
36600: CALL_OW 272
36604: PUSH
36605: LD_VAR 0 8
36609: PPUSH
36610: LD_INT 1
36612: PPUSH
36613: LD_INT 4
36615: PPUSH
36616: CALL_OW 273
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_VAR 0 7
36629: PPUSH
36630: LD_INT 2
36632: PPUSH
36633: LD_INT 4
36635: PPUSH
36636: CALL_OW 272
36640: PUSH
36641: LD_VAR 0 8
36645: PPUSH
36646: LD_INT 2
36648: PPUSH
36649: LD_INT 4
36651: PPUSH
36652: CALL_OW 273
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_VAR 0 7
36665: PPUSH
36666: LD_INT 3
36668: PPUSH
36669: LD_INT 4
36671: PPUSH
36672: CALL_OW 272
36676: PUSH
36677: LD_VAR 0 8
36681: PPUSH
36682: LD_INT 3
36684: PPUSH
36685: LD_INT 4
36687: PPUSH
36688: CALL_OW 273
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_VAR 0 7
36701: PPUSH
36702: LD_INT 4
36704: PPUSH
36705: LD_INT 4
36707: PPUSH
36708: CALL_OW 272
36712: PUSH
36713: LD_VAR 0 8
36717: PPUSH
36718: LD_INT 4
36720: PPUSH
36721: LD_INT 4
36723: PPUSH
36724: CALL_OW 273
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_VAR 0 7
36737: PPUSH
36738: LD_INT 5
36740: PPUSH
36741: LD_INT 4
36743: PPUSH
36744: CALL_OW 272
36748: PUSH
36749: LD_VAR 0 8
36753: PPUSH
36754: LD_INT 5
36756: PPUSH
36757: LD_INT 4
36759: PPUSH
36760: CALL_OW 273
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: ST_TO_ADDR
// for i = tmp downto 1 do
36777: LD_ADDR_VAR 0 4
36781: PUSH
36782: DOUBLE
36783: LD_VAR 0 6
36787: INC
36788: ST_TO_ADDR
36789: LD_INT 1
36791: PUSH
36792: FOR_DOWNTO
36793: IFFALSE 36894
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36795: LD_VAR 0 6
36799: PUSH
36800: LD_VAR 0 4
36804: ARRAY
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PPUSH
36810: LD_VAR 0 6
36814: PUSH
36815: LD_VAR 0 4
36819: ARRAY
36820: PUSH
36821: LD_INT 2
36823: ARRAY
36824: PPUSH
36825: CALL_OW 488
36829: NOT
36830: PUSH
36831: LD_VAR 0 6
36835: PUSH
36836: LD_VAR 0 4
36840: ARRAY
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: PPUSH
36846: LD_VAR 0 6
36850: PUSH
36851: LD_VAR 0 4
36855: ARRAY
36856: PUSH
36857: LD_INT 2
36859: ARRAY
36860: PPUSH
36861: CALL_OW 428
36865: PUSH
36866: LD_INT 0
36868: NONEQUAL
36869: OR
36870: IFFALSE 36892
// tmp := Delete ( tmp , i ) ;
36872: LD_ADDR_VAR 0 6
36876: PUSH
36877: LD_VAR 0 6
36881: PPUSH
36882: LD_VAR 0 4
36886: PPUSH
36887: CALL_OW 3
36891: ST_TO_ADDR
36892: GO 36792
36894: POP
36895: POP
// j := GetClosestHex ( unit , tmp ) ;
36896: LD_ADDR_VAR 0 5
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: LD_VAR 0 6
36910: PPUSH
36911: CALL 36196 0 2
36915: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36916: LD_VAR 0 1
36920: PPUSH
36921: LD_VAR 0 5
36925: PUSH
36926: LD_INT 1
36928: ARRAY
36929: PPUSH
36930: LD_VAR 0 5
36934: PUSH
36935: LD_INT 2
36937: ARRAY
36938: PPUSH
36939: CALL_OW 111
// end ;
36943: LD_VAR 0 3
36947: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36948: LD_INT 0
36950: PPUSH
36951: PPUSH
36952: PPUSH
// uc_side = 0 ;
36953: LD_ADDR_OWVAR 20
36957: PUSH
36958: LD_INT 0
36960: ST_TO_ADDR
// uc_nation = 0 ;
36961: LD_ADDR_OWVAR 21
36965: PUSH
36966: LD_INT 0
36968: ST_TO_ADDR
// InitHc_All ( ) ;
36969: CALL_OW 584
// InitVc ;
36973: CALL_OW 20
// if mastodonts then
36977: LD_VAR 0 6
36981: IFFALSE 37048
// for i = 1 to mastodonts do
36983: LD_ADDR_VAR 0 11
36987: PUSH
36988: DOUBLE
36989: LD_INT 1
36991: DEC
36992: ST_TO_ADDR
36993: LD_VAR 0 6
36997: PUSH
36998: FOR_TO
36999: IFFALSE 37046
// begin vc_chassis := 31 ;
37001: LD_ADDR_OWVAR 37
37005: PUSH
37006: LD_INT 31
37008: ST_TO_ADDR
// vc_control := control_rider ;
37009: LD_ADDR_OWVAR 38
37013: PUSH
37014: LD_INT 4
37016: ST_TO_ADDR
// animal := CreateVehicle ;
37017: LD_ADDR_VAR 0 12
37021: PUSH
37022: CALL_OW 45
37026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37027: LD_VAR 0 12
37031: PPUSH
37032: LD_VAR 0 8
37036: PPUSH
37037: LD_INT 0
37039: PPUSH
37040: CALL 39183 0 3
// end ;
37044: GO 36998
37046: POP
37047: POP
// if horses then
37048: LD_VAR 0 5
37052: IFFALSE 37119
// for i = 1 to horses do
37054: LD_ADDR_VAR 0 11
37058: PUSH
37059: DOUBLE
37060: LD_INT 1
37062: DEC
37063: ST_TO_ADDR
37064: LD_VAR 0 5
37068: PUSH
37069: FOR_TO
37070: IFFALSE 37117
// begin hc_class := 21 ;
37072: LD_ADDR_OWVAR 28
37076: PUSH
37077: LD_INT 21
37079: ST_TO_ADDR
// hc_gallery :=  ;
37080: LD_ADDR_OWVAR 33
37084: PUSH
37085: LD_STRING 
37087: ST_TO_ADDR
// animal := CreateHuman ;
37088: LD_ADDR_VAR 0 12
37092: PUSH
37093: CALL_OW 44
37097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37098: LD_VAR 0 12
37102: PPUSH
37103: LD_VAR 0 8
37107: PPUSH
37108: LD_INT 0
37110: PPUSH
37111: CALL 39183 0 3
// end ;
37115: GO 37069
37117: POP
37118: POP
// if birds then
37119: LD_VAR 0 1
37123: IFFALSE 37190
// for i = 1 to birds do
37125: LD_ADDR_VAR 0 11
37129: PUSH
37130: DOUBLE
37131: LD_INT 1
37133: DEC
37134: ST_TO_ADDR
37135: LD_VAR 0 1
37139: PUSH
37140: FOR_TO
37141: IFFALSE 37188
// begin hc_class = 18 ;
37143: LD_ADDR_OWVAR 28
37147: PUSH
37148: LD_INT 18
37150: ST_TO_ADDR
// hc_gallery =  ;
37151: LD_ADDR_OWVAR 33
37155: PUSH
37156: LD_STRING 
37158: ST_TO_ADDR
// animal := CreateHuman ;
37159: LD_ADDR_VAR 0 12
37163: PUSH
37164: CALL_OW 44
37168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37169: LD_VAR 0 12
37173: PPUSH
37174: LD_VAR 0 8
37178: PPUSH
37179: LD_INT 0
37181: PPUSH
37182: CALL 39183 0 3
// end ;
37186: GO 37140
37188: POP
37189: POP
// if tigers then
37190: LD_VAR 0 2
37194: IFFALSE 37278
// for i = 1 to tigers do
37196: LD_ADDR_VAR 0 11
37200: PUSH
37201: DOUBLE
37202: LD_INT 1
37204: DEC
37205: ST_TO_ADDR
37206: LD_VAR 0 2
37210: PUSH
37211: FOR_TO
37212: IFFALSE 37276
// begin hc_class = class_tiger ;
37214: LD_ADDR_OWVAR 28
37218: PUSH
37219: LD_INT 14
37221: ST_TO_ADDR
// hc_gallery =  ;
37222: LD_ADDR_OWVAR 33
37226: PUSH
37227: LD_STRING 
37229: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37230: LD_ADDR_OWVAR 35
37234: PUSH
37235: LD_INT 7
37237: NEG
37238: PPUSH
37239: LD_INT 7
37241: PPUSH
37242: CALL_OW 12
37246: ST_TO_ADDR
// animal := CreateHuman ;
37247: LD_ADDR_VAR 0 12
37251: PUSH
37252: CALL_OW 44
37256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37257: LD_VAR 0 12
37261: PPUSH
37262: LD_VAR 0 8
37266: PPUSH
37267: LD_INT 0
37269: PPUSH
37270: CALL 39183 0 3
// end ;
37274: GO 37211
37276: POP
37277: POP
// if apemans then
37278: LD_VAR 0 3
37282: IFFALSE 37405
// for i = 1 to apemans do
37284: LD_ADDR_VAR 0 11
37288: PUSH
37289: DOUBLE
37290: LD_INT 1
37292: DEC
37293: ST_TO_ADDR
37294: LD_VAR 0 3
37298: PUSH
37299: FOR_TO
37300: IFFALSE 37403
// begin hc_class = class_apeman ;
37302: LD_ADDR_OWVAR 28
37306: PUSH
37307: LD_INT 12
37309: ST_TO_ADDR
// hc_gallery =  ;
37310: LD_ADDR_OWVAR 33
37314: PUSH
37315: LD_STRING 
37317: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37318: LD_ADDR_OWVAR 35
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PPUSH
37327: LD_INT 2
37329: PPUSH
37330: CALL_OW 12
37334: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37335: LD_ADDR_OWVAR 31
37339: PUSH
37340: LD_INT 1
37342: PPUSH
37343: LD_INT 3
37345: PPUSH
37346: CALL_OW 12
37350: PUSH
37351: LD_INT 1
37353: PPUSH
37354: LD_INT 3
37356: PPUSH
37357: CALL_OW 12
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// animal := CreateHuman ;
37374: LD_ADDR_VAR 0 12
37378: PUSH
37379: CALL_OW 44
37383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37384: LD_VAR 0 12
37388: PPUSH
37389: LD_VAR 0 8
37393: PPUSH
37394: LD_INT 0
37396: PPUSH
37397: CALL 39183 0 3
// end ;
37401: GO 37299
37403: POP
37404: POP
// if enchidnas then
37405: LD_VAR 0 4
37409: IFFALSE 37476
// for i = 1 to enchidnas do
37411: LD_ADDR_VAR 0 11
37415: PUSH
37416: DOUBLE
37417: LD_INT 1
37419: DEC
37420: ST_TO_ADDR
37421: LD_VAR 0 4
37425: PUSH
37426: FOR_TO
37427: IFFALSE 37474
// begin hc_class = 13 ;
37429: LD_ADDR_OWVAR 28
37433: PUSH
37434: LD_INT 13
37436: ST_TO_ADDR
// hc_gallery =  ;
37437: LD_ADDR_OWVAR 33
37441: PUSH
37442: LD_STRING 
37444: ST_TO_ADDR
// animal := CreateHuman ;
37445: LD_ADDR_VAR 0 12
37449: PUSH
37450: CALL_OW 44
37454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37455: LD_VAR 0 12
37459: PPUSH
37460: LD_VAR 0 8
37464: PPUSH
37465: LD_INT 0
37467: PPUSH
37468: CALL 39183 0 3
// end ;
37472: GO 37426
37474: POP
37475: POP
// if fishes then
37476: LD_VAR 0 7
37480: IFFALSE 37547
// for i = 1 to fishes do
37482: LD_ADDR_VAR 0 11
37486: PUSH
37487: DOUBLE
37488: LD_INT 1
37490: DEC
37491: ST_TO_ADDR
37492: LD_VAR 0 7
37496: PUSH
37497: FOR_TO
37498: IFFALSE 37545
// begin hc_class = 20 ;
37500: LD_ADDR_OWVAR 28
37504: PUSH
37505: LD_INT 20
37507: ST_TO_ADDR
// hc_gallery =  ;
37508: LD_ADDR_OWVAR 33
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// animal := CreateHuman ;
37516: LD_ADDR_VAR 0 12
37520: PUSH
37521: CALL_OW 44
37525: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37526: LD_VAR 0 12
37530: PPUSH
37531: LD_VAR 0 9
37535: PPUSH
37536: LD_INT 0
37538: PPUSH
37539: CALL 39183 0 3
// end ;
37543: GO 37497
37545: POP
37546: POP
// end ;
37547: LD_VAR 0 10
37551: RET
// export function WantHeal ( sci , unit ) ; begin
37552: LD_INT 0
37554: PPUSH
// if GetTaskList ( sci ) > 0 then
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 437
37564: PUSH
37565: LD_INT 0
37567: GREATER
37568: IFFALSE 37638
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 437
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: PUSH
37588: LD_STRING l
37590: EQUAL
37591: PUSH
37592: LD_VAR 0 1
37596: PPUSH
37597: CALL_OW 437
37601: PUSH
37602: LD_INT 1
37604: ARRAY
37605: PUSH
37606: LD_INT 4
37608: ARRAY
37609: PUSH
37610: LD_VAR 0 2
37614: EQUAL
37615: AND
37616: IFFALSE 37628
// result := true else
37618: LD_ADDR_VAR 0 3
37622: PUSH
37623: LD_INT 1
37625: ST_TO_ADDR
37626: GO 37636
// result := false ;
37628: LD_ADDR_VAR 0 3
37632: PUSH
37633: LD_INT 0
37635: ST_TO_ADDR
// end else
37636: GO 37646
// result := false ;
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 0
37645: ST_TO_ADDR
// end ;
37646: LD_VAR 0 3
37650: RET
// export function HealTarget ( sci ) ; begin
37651: LD_INT 0
37653: PPUSH
// if not sci then
37654: LD_VAR 0 1
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37728
// result := 0 ;
37663: LD_ADDR_VAR 0 2
37667: PUSH
37668: LD_INT 0
37670: ST_TO_ADDR
// if GetTaskList ( sci ) then
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 437
37680: IFFALSE 37728
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37682: LD_VAR 0 1
37686: PPUSH
37687: CALL_OW 437
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PUSH
37696: LD_INT 1
37698: ARRAY
37699: PUSH
37700: LD_STRING l
37702: EQUAL
37703: IFFALSE 37728
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37705: LD_ADDR_VAR 0 2
37709: PUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL_OW 437
37719: PUSH
37720: LD_INT 1
37722: ARRAY
37723: PUSH
37724: LD_INT 4
37726: ARRAY
37727: ST_TO_ADDR
// end ;
37728: LD_VAR 0 2
37732: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37733: LD_INT 0
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
// if not base_units then
37739: LD_VAR 0 1
37743: NOT
37744: IFFALSE 37748
// exit ;
37746: GO 37835
// result := false ;
37748: LD_ADDR_VAR 0 2
37752: PUSH
37753: LD_INT 0
37755: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37756: LD_ADDR_VAR 0 5
37760: PUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: LD_INT 21
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PPUSH
37776: CALL_OW 72
37780: ST_TO_ADDR
// if not tmp then
37781: LD_VAR 0 5
37785: NOT
37786: IFFALSE 37790
// exit ;
37788: GO 37835
// for i in tmp do
37790: LD_ADDR_VAR 0 3
37794: PUSH
37795: LD_VAR 0 5
37799: PUSH
37800: FOR_IN
37801: IFFALSE 37833
// begin result := EnemyInRange ( i , 22 ) ;
37803: LD_ADDR_VAR 0 2
37807: PUSH
37808: LD_VAR 0 3
37812: PPUSH
37813: LD_INT 22
37815: PPUSH
37816: CALL 36071 0 2
37820: ST_TO_ADDR
// if result then
37821: LD_VAR 0 2
37825: IFFALSE 37831
// exit ;
37827: POP
37828: POP
37829: GO 37835
// end ;
37831: GO 37800
37833: POP
37834: POP
// end ;
37835: LD_VAR 0 2
37839: RET
// export function FilterByTag ( units , tag ) ; begin
37840: LD_INT 0
37842: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37843: LD_ADDR_VAR 0 3
37847: PUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: LD_INT 120
37855: PUSH
37856: LD_VAR 0 2
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PPUSH
37865: CALL_OW 72
37869: ST_TO_ADDR
// end ;
37870: LD_VAR 0 3
37874: RET
// export function IsDriver ( un ) ; begin
37875: LD_INT 0
37877: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37878: LD_ADDR_VAR 0 2
37882: PUSH
37883: LD_VAR 0 1
37887: PUSH
37888: LD_INT 55
37890: PUSH
37891: EMPTY
37892: LIST
37893: PPUSH
37894: CALL_OW 69
37898: IN
37899: ST_TO_ADDR
// end ;
37900: LD_VAR 0 2
37904: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37905: LD_INT 0
37907: PPUSH
37908: PPUSH
// list := [ ] ;
37909: LD_ADDR_VAR 0 5
37913: PUSH
37914: EMPTY
37915: ST_TO_ADDR
// case d of 0 :
37916: LD_VAR 0 3
37920: PUSH
37921: LD_INT 0
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 38062
37929: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: LD_INT 4
37942: MINUS
37943: PUSH
37944: LD_VAR 0 2
37948: PUSH
37949: LD_INT 4
37951: MINUS
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: LIST
37960: PUSH
37961: LD_VAR 0 1
37965: PUSH
37966: LD_INT 3
37968: MINUS
37969: PUSH
37970: LD_VAR 0 2
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: PUSH
37983: LD_VAR 0 1
37987: PUSH
37988: LD_INT 4
37990: PLUS
37991: PUSH
37992: LD_VAR 0 2
37996: PUSH
37997: LD_INT 4
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: PUSH
38005: LD_VAR 0 1
38009: PUSH
38010: LD_INT 3
38012: PLUS
38013: PUSH
38014: LD_VAR 0 2
38018: PUSH
38019: LD_INT 3
38021: PLUS
38022: PUSH
38023: LD_INT 5
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: PUSH
38031: LD_VAR 0 1
38035: PUSH
38036: LD_VAR 0 2
38040: PUSH
38041: LD_INT 4
38043: PLUS
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: ST_TO_ADDR
// end ; 1 :
38060: GO 38760
38062: LD_INT 1
38064: DOUBLE
38065: EQUAL
38066: IFTRUE 38070
38068: GO 38203
38070: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38071: LD_ADDR_VAR 0 5
38075: PUSH
38076: LD_VAR 0 1
38080: PUSH
38081: LD_VAR 0 2
38085: PUSH
38086: LD_INT 4
38088: MINUS
38089: PUSH
38090: LD_INT 3
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: PUSH
38098: LD_VAR 0 1
38102: PUSH
38103: LD_INT 3
38105: MINUS
38106: PUSH
38107: LD_VAR 0 2
38111: PUSH
38112: LD_INT 3
38114: MINUS
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: PUSH
38124: LD_VAR 0 1
38128: PUSH
38129: LD_INT 4
38131: MINUS
38132: PUSH
38133: LD_VAR 0 2
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: PUSH
38146: LD_VAR 0 1
38150: PUSH
38151: LD_VAR 0 2
38155: PUSH
38156: LD_INT 3
38158: PLUS
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: PUSH
38168: LD_VAR 0 1
38172: PUSH
38173: LD_INT 4
38175: PLUS
38176: PUSH
38177: LD_VAR 0 2
38181: PUSH
38182: LD_INT 4
38184: PLUS
38185: PUSH
38186: LD_INT 5
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// end ; 2 :
38201: GO 38760
38203: LD_INT 2
38205: DOUBLE
38206: EQUAL
38207: IFTRUE 38211
38209: GO 38340
38211: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38212: LD_ADDR_VAR 0 5
38216: PUSH
38217: LD_VAR 0 1
38221: PUSH
38222: LD_VAR 0 2
38226: PUSH
38227: LD_INT 3
38229: MINUS
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: PUSH
38239: LD_VAR 0 1
38243: PUSH
38244: LD_INT 4
38246: PLUS
38247: PUSH
38248: LD_VAR 0 2
38252: PUSH
38253: LD_INT 4
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: PUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_VAR 0 2
38270: PUSH
38271: LD_INT 4
38273: PLUS
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: PUSH
38283: LD_VAR 0 1
38287: PUSH
38288: LD_INT 3
38290: MINUS
38291: PUSH
38292: LD_VAR 0 2
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: PUSH
38305: LD_VAR 0 1
38309: PUSH
38310: LD_INT 4
38312: MINUS
38313: PUSH
38314: LD_VAR 0 2
38318: PUSH
38319: LD_INT 4
38321: MINUS
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// end ; 3 :
38338: GO 38760
38340: LD_INT 3
38342: DOUBLE
38343: EQUAL
38344: IFTRUE 38348
38346: GO 38481
38348: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38349: LD_ADDR_VAR 0 5
38353: PUSH
38354: LD_VAR 0 1
38358: PUSH
38359: LD_INT 3
38361: PLUS
38362: PUSH
38363: LD_VAR 0 2
38367: PUSH
38368: LD_INT 4
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: PUSH
38376: LD_VAR 0 1
38380: PUSH
38381: LD_INT 4
38383: PLUS
38384: PUSH
38385: LD_VAR 0 2
38389: PUSH
38390: LD_INT 4
38392: PLUS
38393: PUSH
38394: LD_INT 5
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: LD_VAR 0 1
38406: PUSH
38407: LD_INT 4
38409: MINUS
38410: PUSH
38411: LD_VAR 0 2
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: PUSH
38424: LD_VAR 0 1
38428: PUSH
38429: LD_VAR 0 2
38433: PUSH
38434: LD_INT 4
38436: MINUS
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: PUSH
38446: LD_VAR 0 1
38450: PUSH
38451: LD_INT 3
38453: MINUS
38454: PUSH
38455: LD_VAR 0 2
38459: PUSH
38460: LD_INT 3
38462: MINUS
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: ST_TO_ADDR
// end ; 4 :
38479: GO 38760
38481: LD_INT 4
38483: DOUBLE
38484: EQUAL
38485: IFTRUE 38489
38487: GO 38622
38489: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38490: LD_ADDR_VAR 0 5
38494: PUSH
38495: LD_VAR 0 1
38499: PUSH
38500: LD_VAR 0 2
38504: PUSH
38505: LD_INT 4
38507: PLUS
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: PUSH
38517: LD_VAR 0 1
38521: PUSH
38522: LD_INT 3
38524: PLUS
38525: PUSH
38526: LD_VAR 0 2
38530: PUSH
38531: LD_INT 3
38533: PLUS
38534: PUSH
38535: LD_INT 5
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: PUSH
38543: LD_VAR 0 1
38547: PUSH
38548: LD_INT 4
38550: PLUS
38551: PUSH
38552: LD_VAR 0 2
38556: PUSH
38557: LD_INT 4
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: PUSH
38565: LD_VAR 0 1
38569: PUSH
38570: LD_VAR 0 2
38574: PUSH
38575: LD_INT 3
38577: MINUS
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: PUSH
38587: LD_VAR 0 1
38591: PUSH
38592: LD_INT 4
38594: MINUS
38595: PUSH
38596: LD_VAR 0 2
38600: PUSH
38601: LD_INT 4
38603: MINUS
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// end ; 5 :
38620: GO 38760
38622: LD_INT 5
38624: DOUBLE
38625: EQUAL
38626: IFTRUE 38630
38628: GO 38759
38630: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38631: LD_ADDR_VAR 0 5
38635: PUSH
38636: LD_VAR 0 1
38640: PUSH
38641: LD_INT 4
38643: MINUS
38644: PUSH
38645: LD_VAR 0 2
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: PUSH
38658: LD_VAR 0 1
38662: PUSH
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 4
38670: MINUS
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: PUSH
38680: LD_VAR 0 1
38684: PUSH
38685: LD_INT 4
38687: PLUS
38688: PUSH
38689: LD_VAR 0 2
38693: PUSH
38694: LD_INT 4
38696: PLUS
38697: PUSH
38698: LD_INT 5
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: PUSH
38706: LD_VAR 0 1
38710: PUSH
38711: LD_INT 3
38713: PLUS
38714: PUSH
38715: LD_VAR 0 2
38719: PUSH
38720: LD_INT 4
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: PUSH
38728: LD_VAR 0 1
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 3
38740: PLUS
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// end ; end ;
38757: GO 38760
38759: POP
// result := list ;
38760: LD_ADDR_VAR 0 4
38764: PUSH
38765: LD_VAR 0 5
38769: ST_TO_ADDR
// end ;
38770: LD_VAR 0 4
38774: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38775: LD_INT 0
38777: PPUSH
38778: PPUSH
38779: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38780: LD_VAR 0 1
38784: NOT
38785: PUSH
38786: LD_VAR 0 2
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 4
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: IN
38809: NOT
38810: OR
38811: IFFALSE 38815
// exit ;
38813: GO 38907
// tmp := [ ] ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: EMPTY
38821: ST_TO_ADDR
// for i in units do
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: FOR_IN
38833: IFFALSE 38876
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38835: LD_ADDR_VAR 0 5
38839: PUSH
38840: LD_VAR 0 5
38844: PPUSH
38845: LD_VAR 0 5
38849: PUSH
38850: LD_INT 1
38852: PLUS
38853: PPUSH
38854: LD_VAR 0 4
38858: PPUSH
38859: LD_VAR 0 2
38863: PPUSH
38864: CALL_OW 259
38868: PPUSH
38869: CALL_OW 2
38873: ST_TO_ADDR
38874: GO 38832
38876: POP
38877: POP
// if not tmp then
38878: LD_VAR 0 5
38882: NOT
38883: IFFALSE 38887
// exit ;
38885: GO 38907
// result := SortListByListDesc ( units , tmp ) ;
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: LD_VAR 0 5
38901: PPUSH
38902: CALL_OW 77
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 3
38911: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
38916: PPUSH
// result := false ;
38917: LD_ADDR_VAR 0 3
38921: PUSH
38922: LD_INT 0
38924: ST_TO_ADDR
// x := GetX ( building ) ;
38925: LD_ADDR_VAR 0 4
38929: PUSH
38930: LD_VAR 0 2
38934: PPUSH
38935: CALL_OW 250
38939: ST_TO_ADDR
// y := GetY ( building ) ;
38940: LD_ADDR_VAR 0 5
38944: PUSH
38945: LD_VAR 0 2
38949: PPUSH
38950: CALL_OW 251
38954: ST_TO_ADDR
// if not building or not x or not y then
38955: LD_VAR 0 2
38959: NOT
38960: PUSH
38961: LD_VAR 0 4
38965: NOT
38966: OR
38967: PUSH
38968: LD_VAR 0 5
38972: NOT
38973: OR
38974: IFFALSE 38978
// exit ;
38976: GO 39070
// if GetTaskList ( unit ) then
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL_OW 437
38987: IFFALSE 39070
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38989: LD_STRING e
38991: PUSH
38992: LD_VAR 0 1
38996: PPUSH
38997: CALL_OW 437
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: EQUAL
39010: PUSH
39011: LD_VAR 0 4
39015: PUSH
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 437
39025: PUSH
39026: LD_INT 1
39028: ARRAY
39029: PUSH
39030: LD_INT 2
39032: ARRAY
39033: EQUAL
39034: AND
39035: PUSH
39036: LD_VAR 0 5
39040: PUSH
39041: LD_VAR 0 1
39045: PPUSH
39046: CALL_OW 437
39050: PUSH
39051: LD_INT 1
39053: ARRAY
39054: PUSH
39055: LD_INT 3
39057: ARRAY
39058: EQUAL
39059: AND
39060: IFFALSE 39070
// result := true end ;
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: LD_INT 1
39069: ST_TO_ADDR
// end ;
39070: LD_VAR 0 3
39074: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39075: LD_INT 0
39077: PPUSH
// result := false ;
39078: LD_ADDR_VAR 0 4
39082: PUSH
39083: LD_INT 0
39085: ST_TO_ADDR
// if GetTaskList ( unit ) then
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 437
39095: IFFALSE 39178
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39097: LD_STRING M
39099: PUSH
39100: LD_VAR 0 1
39104: PPUSH
39105: CALL_OW 437
39109: PUSH
39110: LD_INT 1
39112: ARRAY
39113: PUSH
39114: LD_INT 1
39116: ARRAY
39117: EQUAL
39118: PUSH
39119: LD_VAR 0 2
39123: PUSH
39124: LD_VAR 0 1
39128: PPUSH
39129: CALL_OW 437
39133: PUSH
39134: LD_INT 1
39136: ARRAY
39137: PUSH
39138: LD_INT 2
39140: ARRAY
39141: EQUAL
39142: AND
39143: PUSH
39144: LD_VAR 0 3
39148: PUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL_OW 437
39158: PUSH
39159: LD_INT 1
39161: ARRAY
39162: PUSH
39163: LD_INT 3
39165: ARRAY
39166: EQUAL
39167: AND
39168: IFFALSE 39178
// result := true ;
39170: LD_ADDR_VAR 0 4
39174: PUSH
39175: LD_INT 1
39177: ST_TO_ADDR
// end ; end ;
39178: LD_VAR 0 4
39182: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39183: LD_INT 0
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
// if not unit or not area then
39189: LD_VAR 0 1
39193: NOT
39194: PUSH
39195: LD_VAR 0 2
39199: NOT
39200: OR
39201: IFFALSE 39205
// exit ;
39203: GO 39369
// tmp := AreaToList ( area , i ) ;
39205: LD_ADDR_VAR 0 6
39209: PUSH
39210: LD_VAR 0 2
39214: PPUSH
39215: LD_VAR 0 5
39219: PPUSH
39220: CALL_OW 517
39224: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39225: LD_ADDR_VAR 0 5
39229: PUSH
39230: DOUBLE
39231: LD_INT 1
39233: DEC
39234: ST_TO_ADDR
39235: LD_VAR 0 6
39239: PUSH
39240: LD_INT 1
39242: ARRAY
39243: PUSH
39244: FOR_TO
39245: IFFALSE 39367
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39247: LD_ADDR_VAR 0 7
39251: PUSH
39252: LD_VAR 0 6
39256: PUSH
39257: LD_INT 1
39259: ARRAY
39260: PUSH
39261: LD_VAR 0 5
39265: ARRAY
39266: PUSH
39267: LD_VAR 0 6
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PUSH
39276: LD_VAR 0 5
39280: ARRAY
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39286: LD_VAR 0 7
39290: PUSH
39291: LD_INT 1
39293: ARRAY
39294: PPUSH
39295: LD_VAR 0 7
39299: PUSH
39300: LD_INT 2
39302: ARRAY
39303: PPUSH
39304: CALL_OW 428
39308: PUSH
39309: LD_INT 0
39311: EQUAL
39312: IFFALSE 39365
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39314: LD_VAR 0 1
39318: PPUSH
39319: LD_VAR 0 7
39323: PUSH
39324: LD_INT 1
39326: ARRAY
39327: PPUSH
39328: LD_VAR 0 7
39332: PUSH
39333: LD_INT 2
39335: ARRAY
39336: PPUSH
39337: LD_VAR 0 3
39341: PPUSH
39342: CALL_OW 48
// result := IsPlaced ( unit ) ;
39346: LD_ADDR_VAR 0 4
39350: PUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 305
39360: ST_TO_ADDR
// exit ;
39361: POP
39362: POP
39363: GO 39369
// end ; end ;
39365: GO 39244
39367: POP
39368: POP
// end ;
39369: LD_VAR 0 4
39373: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39374: LD_INT 0
39376: PPUSH
39377: PPUSH
39378: PPUSH
// if not side or side > 8 then
39379: LD_VAR 0 1
39383: NOT
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: LD_INT 8
39392: GREATER
39393: OR
39394: IFFALSE 39398
// exit ;
39396: GO 39585
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39398: LD_ADDR_VAR 0 4
39402: PUSH
39403: LD_INT 22
39405: PUSH
39406: LD_VAR 0 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 21
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PPUSH
39429: CALL_OW 69
39433: ST_TO_ADDR
// if not tmp then
39434: LD_VAR 0 4
39438: NOT
39439: IFFALSE 39443
// exit ;
39441: GO 39585
// enable_addtolog := true ;
39443: LD_ADDR_OWVAR 81
39447: PUSH
39448: LD_INT 1
39450: ST_TO_ADDR
// AddToLog ( [ ) ;
39451: LD_STRING [
39453: PPUSH
39454: CALL_OW 561
// for i in tmp do
39458: LD_ADDR_VAR 0 3
39462: PUSH
39463: LD_VAR 0 4
39467: PUSH
39468: FOR_IN
39469: IFFALSE 39576
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39471: LD_STRING [
39473: PUSH
39474: LD_VAR 0 3
39478: PPUSH
39479: CALL_OW 266
39483: STR
39484: PUSH
39485: LD_STRING , 
39487: STR
39488: PUSH
39489: LD_VAR 0 3
39493: PPUSH
39494: CALL_OW 250
39498: STR
39499: PUSH
39500: LD_STRING , 
39502: STR
39503: PUSH
39504: LD_VAR 0 3
39508: PPUSH
39509: CALL_OW 251
39513: STR
39514: PUSH
39515: LD_STRING , 
39517: STR
39518: PUSH
39519: LD_VAR 0 3
39523: PPUSH
39524: CALL_OW 254
39528: STR
39529: PUSH
39530: LD_STRING , 
39532: STR
39533: PUSH
39534: LD_VAR 0 3
39538: PPUSH
39539: LD_INT 1
39541: PPUSH
39542: CALL_OW 268
39546: STR
39547: PUSH
39548: LD_STRING , 
39550: STR
39551: PUSH
39552: LD_VAR 0 3
39556: PPUSH
39557: LD_INT 2
39559: PPUSH
39560: CALL_OW 268
39564: STR
39565: PUSH
39566: LD_STRING ],
39568: STR
39569: PPUSH
39570: CALL_OW 561
// end ;
39574: GO 39468
39576: POP
39577: POP
// AddToLog ( ]; ) ;
39578: LD_STRING ];
39580: PPUSH
39581: CALL_OW 561
// end ;
39585: LD_VAR 0 2
39589: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39590: LD_INT 0
39592: PPUSH
39593: PPUSH
39594: PPUSH
39595: PPUSH
39596: PPUSH
// if not area or not rate or not max then
39597: LD_VAR 0 1
39601: NOT
39602: PUSH
39603: LD_VAR 0 2
39607: NOT
39608: OR
39609: PUSH
39610: LD_VAR 0 4
39614: NOT
39615: OR
39616: IFFALSE 39620
// exit ;
39618: GO 39809
// while 1 do
39620: LD_INT 1
39622: IFFALSE 39809
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39624: LD_ADDR_VAR 0 9
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_INT 1
39636: PPUSH
39637: CALL_OW 287
39641: PUSH
39642: LD_INT 10
39644: MUL
39645: ST_TO_ADDR
// r := rate / 10 ;
39646: LD_ADDR_VAR 0 7
39650: PUSH
39651: LD_VAR 0 2
39655: PUSH
39656: LD_INT 10
39658: DIVREAL
39659: ST_TO_ADDR
// time := 1 1$00 ;
39660: LD_ADDR_VAR 0 8
39664: PUSH
39665: LD_INT 2100
39667: ST_TO_ADDR
// if amount < min then
39668: LD_VAR 0 9
39672: PUSH
39673: LD_VAR 0 3
39677: LESS
39678: IFFALSE 39696
// r := r * 2 else
39680: LD_ADDR_VAR 0 7
39684: PUSH
39685: LD_VAR 0 7
39689: PUSH
39690: LD_INT 2
39692: MUL
39693: ST_TO_ADDR
39694: GO 39722
// if amount > max then
39696: LD_VAR 0 9
39700: PUSH
39701: LD_VAR 0 4
39705: GREATER
39706: IFFALSE 39722
// r := r / 2 ;
39708: LD_ADDR_VAR 0 7
39712: PUSH
39713: LD_VAR 0 7
39717: PUSH
39718: LD_INT 2
39720: DIVREAL
39721: ST_TO_ADDR
// time := time / r ;
39722: LD_ADDR_VAR 0 8
39726: PUSH
39727: LD_VAR 0 8
39731: PUSH
39732: LD_VAR 0 7
39736: DIVREAL
39737: ST_TO_ADDR
// if time < 0 then
39738: LD_VAR 0 8
39742: PUSH
39743: LD_INT 0
39745: LESS
39746: IFFALSE 39763
// time := time * - 1 ;
39748: LD_ADDR_VAR 0 8
39752: PUSH
39753: LD_VAR 0 8
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: MUL
39762: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39763: LD_VAR 0 8
39767: PUSH
39768: LD_INT 35
39770: PPUSH
39771: LD_INT 875
39773: PPUSH
39774: CALL_OW 12
39778: PLUS
39779: PPUSH
39780: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39784: LD_INT 1
39786: PPUSH
39787: LD_INT 5
39789: PPUSH
39790: CALL_OW 12
39794: PPUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: LD_INT 1
39802: PPUSH
39803: CALL_OW 55
// end ;
39807: GO 39620
// end ;
39809: LD_VAR 0 5
39813: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
// if not turrets or not factories then
39824: LD_VAR 0 1
39828: NOT
39829: PUSH
39830: LD_VAR 0 2
39834: NOT
39835: OR
39836: IFFALSE 39840
// exit ;
39838: GO 40147
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39840: LD_ADDR_VAR 0 10
39844: PUSH
39845: LD_INT 5
39847: PUSH
39848: LD_INT 6
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 4
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: LD_INT 5
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 24
39882: PUSH
39883: LD_INT 25
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 23
39892: PUSH
39893: LD_INT 27
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 42
39906: PUSH
39907: LD_INT 43
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 44
39916: PUSH
39917: LD_INT 46
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 45
39926: PUSH
39927: LD_INT 47
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: LIST
39943: ST_TO_ADDR
// result := [ ] ;
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: EMPTY
39950: ST_TO_ADDR
// for i in turrets do
39951: LD_ADDR_VAR 0 4
39955: PUSH
39956: LD_VAR 0 1
39960: PUSH
39961: FOR_IN
39962: IFFALSE 40145
// begin nat := GetNation ( i ) ;
39964: LD_ADDR_VAR 0 7
39968: PUSH
39969: LD_VAR 0 4
39973: PPUSH
39974: CALL_OW 248
39978: ST_TO_ADDR
// weapon := 0 ;
39979: LD_ADDR_VAR 0 8
39983: PUSH
39984: LD_INT 0
39986: ST_TO_ADDR
// if not nat then
39987: LD_VAR 0 7
39991: NOT
39992: IFFALSE 39996
// continue ;
39994: GO 39961
// for j in list [ nat ] do
39996: LD_ADDR_VAR 0 5
40000: PUSH
40001: LD_VAR 0 10
40005: PUSH
40006: LD_VAR 0 7
40010: ARRAY
40011: PUSH
40012: FOR_IN
40013: IFFALSE 40054
// if GetBWeapon ( i ) = j [ 1 ] then
40015: LD_VAR 0 4
40019: PPUSH
40020: CALL_OW 269
40024: PUSH
40025: LD_VAR 0 5
40029: PUSH
40030: LD_INT 1
40032: ARRAY
40033: EQUAL
40034: IFFALSE 40052
// begin weapon := j [ 2 ] ;
40036: LD_ADDR_VAR 0 8
40040: PUSH
40041: LD_VAR 0 5
40045: PUSH
40046: LD_INT 2
40048: ARRAY
40049: ST_TO_ADDR
// break ;
40050: GO 40054
// end ;
40052: GO 40012
40054: POP
40055: POP
// if not weapon then
40056: LD_VAR 0 8
40060: NOT
40061: IFFALSE 40065
// continue ;
40063: GO 39961
// for k in factories do
40065: LD_ADDR_VAR 0 6
40069: PUSH
40070: LD_VAR 0 2
40074: PUSH
40075: FOR_IN
40076: IFFALSE 40141
// begin weapons := AvailableWeaponList ( k ) ;
40078: LD_ADDR_VAR 0 9
40082: PUSH
40083: LD_VAR 0 6
40087: PPUSH
40088: CALL_OW 478
40092: ST_TO_ADDR
// if not weapons then
40093: LD_VAR 0 9
40097: NOT
40098: IFFALSE 40102
// continue ;
40100: GO 40075
// if weapon in weapons then
40102: LD_VAR 0 8
40106: PUSH
40107: LD_VAR 0 9
40111: IN
40112: IFFALSE 40139
// begin result := [ i , weapon ] ;
40114: LD_ADDR_VAR 0 3
40118: PUSH
40119: LD_VAR 0 4
40123: PUSH
40124: LD_VAR 0 8
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: ST_TO_ADDR
// exit ;
40133: POP
40134: POP
40135: POP
40136: POP
40137: GO 40147
// end ; end ;
40139: GO 40075
40141: POP
40142: POP
// end ;
40143: GO 39961
40145: POP
40146: POP
// end ;
40147: LD_VAR 0 3
40151: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40152: LD_INT 0
40154: PPUSH
// if not side or side > 8 then
40155: LD_VAR 0 3
40159: NOT
40160: PUSH
40161: LD_VAR 0 3
40165: PUSH
40166: LD_INT 8
40168: GREATER
40169: OR
40170: IFFALSE 40174
// exit ;
40172: GO 40233
// if not range then
40174: LD_VAR 0 4
40178: NOT
40179: IFFALSE 40190
// range := - 12 ;
40181: LD_ADDR_VAR 0 4
40185: PUSH
40186: LD_INT 12
40188: NEG
40189: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40190: LD_VAR 0 1
40194: PPUSH
40195: LD_VAR 0 2
40199: PPUSH
40200: LD_VAR 0 3
40204: PPUSH
40205: LD_VAR 0 4
40209: PPUSH
40210: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40214: LD_VAR 0 1
40218: PPUSH
40219: LD_VAR 0 2
40223: PPUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: CALL_OW 331
// end ;
40233: LD_VAR 0 5
40237: RET
// export function Video ( mode ) ; begin
40238: LD_INT 0
40240: PPUSH
// ingame_video = mode ;
40241: LD_ADDR_OWVAR 52
40245: PUSH
40246: LD_VAR 0 1
40250: ST_TO_ADDR
// interface_hidden = mode ;
40251: LD_ADDR_OWVAR 54
40255: PUSH
40256: LD_VAR 0 1
40260: ST_TO_ADDR
// end ;
40261: LD_VAR 0 2
40265: RET
// export function Join ( array , element ) ; begin
40266: LD_INT 0
40268: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_VAR 0 1
40278: PPUSH
40279: LD_VAR 0 1
40283: PUSH
40284: LD_INT 1
40286: PLUS
40287: PPUSH
40288: LD_VAR 0 2
40292: PPUSH
40293: CALL_OW 1
40297: ST_TO_ADDR
// end ;
40298: LD_VAR 0 3
40302: RET
// export function JoinUnion ( array , element ) ; begin
40303: LD_INT 0
40305: PPUSH
// result := array union element ;
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_VAR 0 1
40315: PUSH
40316: LD_VAR 0 2
40320: UNION
40321: ST_TO_ADDR
// end ;
40322: LD_VAR 0 3
40326: RET
// export function GetBehemoths ( side ) ; begin
40327: LD_INT 0
40329: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40330: LD_ADDR_VAR 0 2
40334: PUSH
40335: LD_INT 22
40337: PUSH
40338: LD_VAR 0 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 31
40349: PUSH
40350: LD_INT 25
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PPUSH
40361: CALL_OW 69
40365: ST_TO_ADDR
// end ;
40366: LD_VAR 0 2
40370: RET
// export function Shuffle ( array ) ; var i , index ; begin
40371: LD_INT 0
40373: PPUSH
40374: PPUSH
40375: PPUSH
// result := [ ] ;
40376: LD_ADDR_VAR 0 2
40380: PUSH
40381: EMPTY
40382: ST_TO_ADDR
// if not array then
40383: LD_VAR 0 1
40387: NOT
40388: IFFALSE 40392
// exit ;
40390: GO 40491
// Randomize ;
40392: CALL_OW 10
// for i = array downto 1 do
40396: LD_ADDR_VAR 0 3
40400: PUSH
40401: DOUBLE
40402: LD_VAR 0 1
40406: INC
40407: ST_TO_ADDR
40408: LD_INT 1
40410: PUSH
40411: FOR_DOWNTO
40412: IFFALSE 40489
// begin index := rand ( 1 , array ) ;
40414: LD_ADDR_VAR 0 4
40418: PUSH
40419: LD_INT 1
40421: PPUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 12
40431: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40432: LD_ADDR_VAR 0 2
40436: PUSH
40437: LD_VAR 0 2
40441: PPUSH
40442: LD_VAR 0 2
40446: PUSH
40447: LD_INT 1
40449: PLUS
40450: PPUSH
40451: LD_VAR 0 1
40455: PUSH
40456: LD_VAR 0 4
40460: ARRAY
40461: PPUSH
40462: CALL_OW 2
40466: ST_TO_ADDR
// array := Delete ( array , index ) ;
40467: LD_ADDR_VAR 0 1
40471: PUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: LD_VAR 0 4
40481: PPUSH
40482: CALL_OW 3
40486: ST_TO_ADDR
// end ;
40487: GO 40411
40489: POP
40490: POP
// end ;
40491: LD_VAR 0 2
40495: RET
// export function GetBaseMaterials ( base ) ; begin
40496: LD_INT 0
40498: PPUSH
// result := [ 0 , 0 , 0 ] ;
40499: LD_ADDR_VAR 0 2
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: ST_TO_ADDR
// if not base then
40518: LD_VAR 0 1
40522: NOT
40523: IFFALSE 40527
// exit ;
40525: GO 40576
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40527: LD_ADDR_VAR 0 2
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: LD_INT 1
40539: PPUSH
40540: CALL_OW 275
40544: PUSH
40545: LD_VAR 0 1
40549: PPUSH
40550: LD_INT 2
40552: PPUSH
40553: CALL_OW 275
40557: PUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: LD_INT 3
40565: PPUSH
40566: CALL_OW 275
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: ST_TO_ADDR
// end ;
40576: LD_VAR 0 2
40580: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
// result := array ;
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_VAR 0 1
40594: ST_TO_ADDR
// if size > 0 then
40595: LD_VAR 0 2
40599: PUSH
40600: LD_INT 0
40602: GREATER
40603: IFFALSE 40649
// for i := array downto size do
40605: LD_ADDR_VAR 0 4
40609: PUSH
40610: DOUBLE
40611: LD_VAR 0 1
40615: INC
40616: ST_TO_ADDR
40617: LD_VAR 0 2
40621: PUSH
40622: FOR_DOWNTO
40623: IFFALSE 40647
// result := Delete ( result , result ) ;
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_VAR 0 3
40634: PPUSH
40635: LD_VAR 0 3
40639: PPUSH
40640: CALL_OW 3
40644: ST_TO_ADDR
40645: GO 40622
40647: POP
40648: POP
// end ;
40649: LD_VAR 0 3
40653: RET
// export function ComExit ( unit ) ; var tmp ; begin
40654: LD_INT 0
40656: PPUSH
40657: PPUSH
// if not IsInUnit ( unit ) then
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 310
40667: NOT
40668: IFFALSE 40672
// exit ;
40670: GO 40732
// tmp := IsInUnit ( unit ) ;
40672: LD_ADDR_VAR 0 3
40676: PUSH
40677: LD_VAR 0 1
40681: PPUSH
40682: CALL_OW 310
40686: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40687: LD_VAR 0 3
40691: PPUSH
40692: CALL_OW 247
40696: PUSH
40697: LD_INT 2
40699: EQUAL
40700: IFFALSE 40713
// ComExitVehicle ( unit ) else
40702: LD_VAR 0 1
40706: PPUSH
40707: CALL_OW 121
40711: GO 40722
// ComExitBuilding ( unit ) ;
40713: LD_VAR 0 1
40717: PPUSH
40718: CALL_OW 122
// result := tmp ;
40722: LD_ADDR_VAR 0 2
40726: PUSH
40727: LD_VAR 0 3
40731: ST_TO_ADDR
// end ;
40732: LD_VAR 0 2
40736: RET
// export function ComExitAll ( units ) ; var i ; begin
40737: LD_INT 0
40739: PPUSH
40740: PPUSH
// if not units then
40741: LD_VAR 0 1
40745: NOT
40746: IFFALSE 40750
// exit ;
40748: GO 40776
// for i in units do
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: LD_VAR 0 1
40759: PUSH
40760: FOR_IN
40761: IFFALSE 40774
// ComExit ( i ) ;
40763: LD_VAR 0 3
40767: PPUSH
40768: CALL 40654 0 1
40772: GO 40760
40774: POP
40775: POP
// end ;
40776: LD_VAR 0 2
40780: RET
// export function ResetHc ; begin
40781: LD_INT 0
40783: PPUSH
// InitHc ;
40784: CALL_OW 19
// hc_importance := 0 ;
40788: LD_ADDR_OWVAR 32
40792: PUSH
40793: LD_INT 0
40795: ST_TO_ADDR
// end ;
40796: LD_VAR 0 1
40800: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40801: LD_INT 0
40803: PPUSH
40804: PPUSH
40805: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40806: LD_ADDR_VAR 0 6
40810: PUSH
40811: LD_VAR 0 1
40815: PUSH
40816: LD_VAR 0 3
40820: PLUS
40821: PUSH
40822: LD_INT 2
40824: DIV
40825: ST_TO_ADDR
// if _x < 0 then
40826: LD_VAR 0 6
40830: PUSH
40831: LD_INT 0
40833: LESS
40834: IFFALSE 40851
// _x := _x * - 1 ;
40836: LD_ADDR_VAR 0 6
40840: PUSH
40841: LD_VAR 0 6
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: MUL
40850: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40851: LD_ADDR_VAR 0 7
40855: PUSH
40856: LD_VAR 0 2
40860: PUSH
40861: LD_VAR 0 4
40865: PLUS
40866: PUSH
40867: LD_INT 2
40869: DIV
40870: ST_TO_ADDR
// if _y < 0 then
40871: LD_VAR 0 7
40875: PUSH
40876: LD_INT 0
40878: LESS
40879: IFFALSE 40896
// _y := _y * - 1 ;
40881: LD_ADDR_VAR 0 7
40885: PUSH
40886: LD_VAR 0 7
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: MUL
40895: ST_TO_ADDR
// result := [ _x , _y ] ;
40896: LD_ADDR_VAR 0 5
40900: PUSH
40901: LD_VAR 0 6
40905: PUSH
40906: LD_VAR 0 7
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: ST_TO_ADDR
// end ;
40915: LD_VAR 0 5
40919: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40920: LD_INT 0
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
// task := GetTaskList ( unit ) ;
40926: LD_ADDR_VAR 0 7
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: CALL_OW 437
40940: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40941: LD_VAR 0 7
40945: NOT
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: LD_VAR 0 2
40956: PPUSH
40957: CALL_OW 308
40961: NOT
40962: AND
40963: IFFALSE 40967
// exit ;
40965: GO 41085
// if IsInArea ( unit , area ) then
40967: LD_VAR 0 1
40971: PPUSH
40972: LD_VAR 0 2
40976: PPUSH
40977: CALL_OW 308
40981: IFFALSE 40999
// begin ComMoveToArea ( unit , goAway ) ;
40983: LD_VAR 0 1
40987: PPUSH
40988: LD_VAR 0 3
40992: PPUSH
40993: CALL_OW 113
// exit ;
40997: GO 41085
// end ; if task [ 1 ] [ 1 ] <> M then
40999: LD_VAR 0 7
41003: PUSH
41004: LD_INT 1
41006: ARRAY
41007: PUSH
41008: LD_INT 1
41010: ARRAY
41011: PUSH
41012: LD_STRING M
41014: NONEQUAL
41015: IFFALSE 41019
// exit ;
41017: GO 41085
// x := task [ 1 ] [ 2 ] ;
41019: LD_ADDR_VAR 0 5
41023: PUSH
41024: LD_VAR 0 7
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41037: LD_ADDR_VAR 0 6
41041: PUSH
41042: LD_VAR 0 7
41046: PUSH
41047: LD_INT 1
41049: ARRAY
41050: PUSH
41051: LD_INT 3
41053: ARRAY
41054: ST_TO_ADDR
// if InArea ( x , y , area ) then
41055: LD_VAR 0 5
41059: PPUSH
41060: LD_VAR 0 6
41064: PPUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: CALL_OW 309
41074: IFFALSE 41085
// ComStop ( unit ) ;
41076: LD_VAR 0 1
41080: PPUSH
41081: CALL_OW 141
// end ;
41085: LD_VAR 0 4
41089: RET
// export function Abs ( value ) ; begin
41090: LD_INT 0
41092: PPUSH
// result := value ;
41093: LD_ADDR_VAR 0 2
41097: PUSH
41098: LD_VAR 0 1
41102: ST_TO_ADDR
// if value < 0 then
41103: LD_VAR 0 1
41107: PUSH
41108: LD_INT 0
41110: LESS
41111: IFFALSE 41128
// result := value * - 1 ;
41113: LD_ADDR_VAR 0 2
41117: PUSH
41118: LD_VAR 0 1
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: MUL
41127: ST_TO_ADDR
// end ;
41128: LD_VAR 0 2
41132: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41133: LD_INT 0
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
41140: PPUSH
41141: PPUSH
41142: PPUSH
// if not unit or not building then
41143: LD_VAR 0 1
41147: NOT
41148: PUSH
41149: LD_VAR 0 2
41153: NOT
41154: OR
41155: IFFALSE 41159
// exit ;
41157: GO 41385
// x := GetX ( building ) ;
41159: LD_ADDR_VAR 0 4
41163: PUSH
41164: LD_VAR 0 2
41168: PPUSH
41169: CALL_OW 250
41173: ST_TO_ADDR
// y := GetY ( building ) ;
41174: LD_ADDR_VAR 0 6
41178: PUSH
41179: LD_VAR 0 2
41183: PPUSH
41184: CALL_OW 251
41188: ST_TO_ADDR
// d := GetDir ( building ) ;
41189: LD_ADDR_VAR 0 8
41193: PUSH
41194: LD_VAR 0 2
41198: PPUSH
41199: CALL_OW 254
41203: ST_TO_ADDR
// r := 4 ;
41204: LD_ADDR_VAR 0 9
41208: PUSH
41209: LD_INT 4
41211: ST_TO_ADDR
// for i := 1 to 5 do
41212: LD_ADDR_VAR 0 10
41216: PUSH
41217: DOUBLE
41218: LD_INT 1
41220: DEC
41221: ST_TO_ADDR
41222: LD_INT 5
41224: PUSH
41225: FOR_TO
41226: IFFALSE 41383
// begin _x := ShiftX ( x , d , r + i ) ;
41228: LD_ADDR_VAR 0 5
41232: PUSH
41233: LD_VAR 0 4
41237: PPUSH
41238: LD_VAR 0 8
41242: PPUSH
41243: LD_VAR 0 9
41247: PUSH
41248: LD_VAR 0 10
41252: PLUS
41253: PPUSH
41254: CALL_OW 272
41258: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41259: LD_ADDR_VAR 0 7
41263: PUSH
41264: LD_VAR 0 6
41268: PPUSH
41269: LD_VAR 0 8
41273: PPUSH
41274: LD_VAR 0 9
41278: PUSH
41279: LD_VAR 0 10
41283: PLUS
41284: PPUSH
41285: CALL_OW 273
41289: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41290: LD_VAR 0 5
41294: PPUSH
41295: LD_VAR 0 7
41299: PPUSH
41300: CALL_OW 488
41304: PUSH
41305: LD_VAR 0 5
41309: PPUSH
41310: LD_VAR 0 7
41314: PPUSH
41315: CALL_OW 428
41319: PPUSH
41320: CALL_OW 247
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: IN
41335: NOT
41336: AND
41337: IFFALSE 41381
// begin ComMoveXY ( unit , _x , _y ) ;
41339: LD_VAR 0 1
41343: PPUSH
41344: LD_VAR 0 5
41348: PPUSH
41349: LD_VAR 0 7
41353: PPUSH
41354: CALL_OW 111
// result := [ _x , _y ] ;
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_VAR 0 5
41367: PUSH
41368: LD_VAR 0 7
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: ST_TO_ADDR
// exit ;
41377: POP
41378: POP
41379: GO 41385
// end ; end ;
41381: GO 41225
41383: POP
41384: POP
// end ;
41385: LD_VAR 0 3
41389: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41390: LD_INT 0
41392: PPUSH
41393: PPUSH
41394: PPUSH
// result := 0 ;
41395: LD_ADDR_VAR 0 3
41399: PUSH
41400: LD_INT 0
41402: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41403: LD_VAR 0 1
41407: PUSH
41408: LD_INT 0
41410: LESS
41411: PUSH
41412: LD_VAR 0 1
41416: PUSH
41417: LD_INT 8
41419: GREATER
41420: OR
41421: PUSH
41422: LD_VAR 0 2
41426: PUSH
41427: LD_INT 0
41429: LESS
41430: OR
41431: PUSH
41432: LD_VAR 0 2
41436: PUSH
41437: LD_INT 8
41439: GREATER
41440: OR
41441: IFFALSE 41445
// exit ;
41443: GO 41520
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41445: LD_ADDR_VAR 0 4
41449: PUSH
41450: LD_INT 22
41452: PUSH
41453: LD_VAR 0 2
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PPUSH
41462: CALL_OW 69
41466: PUSH
41467: FOR_IN
41468: IFFALSE 41518
// begin un := UnitShoot ( i ) ;
41470: LD_ADDR_VAR 0 5
41474: PUSH
41475: LD_VAR 0 4
41479: PPUSH
41480: CALL_OW 504
41484: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41485: LD_VAR 0 5
41489: PPUSH
41490: CALL_OW 255
41494: PUSH
41495: LD_VAR 0 1
41499: EQUAL
41500: IFFALSE 41516
// begin result := un ;
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_VAR 0 5
41511: ST_TO_ADDR
// exit ;
41512: POP
41513: POP
41514: GO 41520
// end ; end ;
41516: GO 41467
41518: POP
41519: POP
// end ;
41520: LD_VAR 0 3
41524: RET
// export function GetCargoBay ( units ) ; begin
41525: LD_INT 0
41527: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41528: LD_ADDR_VAR 0 2
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 34
41543: PUSH
41544: LD_INT 12
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 34
41553: PUSH
41554: LD_INT 51
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 34
41563: PUSH
41564: LD_INT 32
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 34
41573: PUSH
41574: LD_EXP 22
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: PPUSH
41590: CALL_OW 72
41594: ST_TO_ADDR
// end ;
41595: LD_VAR 0 2
41599: RET
// export function Negate ( value ) ; begin
41600: LD_INT 0
41602: PPUSH
// result := not value ;
41603: LD_ADDR_VAR 0 2
41607: PUSH
41608: LD_VAR 0 1
41612: NOT
41613: ST_TO_ADDR
// end ;
41614: LD_VAR 0 2
41618: RET
// export function Inc ( value ) ; begin
41619: LD_INT 0
41621: PPUSH
// result := value + 1 ;
41622: LD_ADDR_VAR 0 2
41626: PUSH
41627: LD_VAR 0 1
41631: PUSH
41632: LD_INT 1
41634: PLUS
41635: ST_TO_ADDR
// end ;
41636: LD_VAR 0 2
41640: RET
// export function Dec ( value ) ; begin
41641: LD_INT 0
41643: PPUSH
// result := value - 1 ;
41644: LD_ADDR_VAR 0 2
41648: PUSH
41649: LD_VAR 0 1
41653: PUSH
41654: LD_INT 1
41656: MINUS
41657: ST_TO_ADDR
// end ;
41658: LD_VAR 0 2
41662: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41663: LD_INT 0
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41673: LD_VAR 0 1
41677: PPUSH
41678: LD_VAR 0 2
41682: PPUSH
41683: CALL_OW 488
41687: NOT
41688: PUSH
41689: LD_VAR 0 3
41693: PPUSH
41694: LD_VAR 0 4
41698: PPUSH
41699: CALL_OW 488
41703: NOT
41704: OR
41705: IFFALSE 41718
// begin result := - 1 ;
41707: LD_ADDR_VAR 0 5
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: ST_TO_ADDR
// exit ;
41716: GO 41953
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41718: LD_ADDR_VAR 0 12
41722: PUSH
41723: LD_VAR 0 1
41727: PPUSH
41728: LD_VAR 0 2
41732: PPUSH
41733: LD_VAR 0 3
41737: PPUSH
41738: LD_VAR 0 4
41742: PPUSH
41743: CALL 40801 0 4
41747: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41748: LD_ADDR_VAR 0 11
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: LD_VAR 0 2
41762: PPUSH
41763: LD_VAR 0 12
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: PPUSH
41772: LD_VAR 0 12
41776: PUSH
41777: LD_INT 2
41779: ARRAY
41780: PPUSH
41781: CALL_OW 298
41785: ST_TO_ADDR
// distance := 9999 ;
41786: LD_ADDR_VAR 0 10
41790: PUSH
41791: LD_INT 9999
41793: ST_TO_ADDR
// for i := 0 to 5 do
41794: LD_ADDR_VAR 0 6
41798: PUSH
41799: DOUBLE
41800: LD_INT 0
41802: DEC
41803: ST_TO_ADDR
41804: LD_INT 5
41806: PUSH
41807: FOR_TO
41808: IFFALSE 41951
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41810: LD_ADDR_VAR 0 7
41814: PUSH
41815: LD_VAR 0 1
41819: PPUSH
41820: LD_VAR 0 6
41824: PPUSH
41825: LD_VAR 0 11
41829: PPUSH
41830: CALL_OW 272
41834: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41835: LD_ADDR_VAR 0 8
41839: PUSH
41840: LD_VAR 0 2
41844: PPUSH
41845: LD_VAR 0 6
41849: PPUSH
41850: LD_VAR 0 11
41854: PPUSH
41855: CALL_OW 273
41859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41860: LD_VAR 0 7
41864: PPUSH
41865: LD_VAR 0 8
41869: PPUSH
41870: CALL_OW 488
41874: NOT
41875: IFFALSE 41879
// continue ;
41877: GO 41807
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41879: LD_ADDR_VAR 0 9
41883: PUSH
41884: LD_VAR 0 12
41888: PUSH
41889: LD_INT 1
41891: ARRAY
41892: PPUSH
41893: LD_VAR 0 12
41897: PUSH
41898: LD_INT 2
41900: ARRAY
41901: PPUSH
41902: LD_VAR 0 7
41906: PPUSH
41907: LD_VAR 0 8
41911: PPUSH
41912: CALL_OW 298
41916: ST_TO_ADDR
// if tmp < distance then
41917: LD_VAR 0 9
41921: PUSH
41922: LD_VAR 0 10
41926: LESS
41927: IFFALSE 41949
// begin result := i ;
41929: LD_ADDR_VAR 0 5
41933: PUSH
41934: LD_VAR 0 6
41938: ST_TO_ADDR
// distance := tmp ;
41939: LD_ADDR_VAR 0 10
41943: PUSH
41944: LD_VAR 0 9
41948: ST_TO_ADDR
// end ; end ;
41949: GO 41807
41951: POP
41952: POP
// end ;
41953: LD_VAR 0 5
41957: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41958: LD_INT 0
41960: PPUSH
41961: PPUSH
// if not driver or not IsInUnit ( driver ) then
41962: LD_VAR 0 1
41966: NOT
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 310
41977: NOT
41978: OR
41979: IFFALSE 41983
// exit ;
41981: GO 42073
// vehicle := IsInUnit ( driver ) ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 310
41997: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41998: LD_VAR 0 1
42002: PPUSH
42003: LD_STRING \
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: PUSH
42033: LD_STRING E
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_VAR 0 3
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PPUSH
42069: CALL_OW 446
// end ;
42073: LD_VAR 0 2
42077: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42078: LD_INT 0
42080: PPUSH
42081: PPUSH
// if not driver or not IsInUnit ( driver ) then
42082: LD_VAR 0 1
42086: NOT
42087: PUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: CALL_OW 310
42097: NOT
42098: OR
42099: IFFALSE 42103
// exit ;
42101: GO 42193
// vehicle := IsInUnit ( driver ) ;
42103: LD_ADDR_VAR 0 3
42107: PUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 310
42117: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42118: LD_VAR 0 1
42122: PPUSH
42123: LD_STRING \
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: PUSH
42153: LD_STRING E
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_VAR 0 3
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PPUSH
42189: CALL_OW 447
// end ;
42193: LD_VAR 0 2
42197: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42198: LD_INT 0
42200: PPUSH
42201: PPUSH
42202: PPUSH
// tmp := [ ] ;
42203: LD_ADDR_VAR 0 5
42207: PUSH
42208: EMPTY
42209: ST_TO_ADDR
// for i in units do
42210: LD_ADDR_VAR 0 4
42214: PUSH
42215: LD_VAR 0 1
42219: PUSH
42220: FOR_IN
42221: IFFALSE 42259
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42223: LD_ADDR_VAR 0 5
42227: PUSH
42228: LD_VAR 0 5
42232: PPUSH
42233: LD_VAR 0 5
42237: PUSH
42238: LD_INT 1
42240: PLUS
42241: PPUSH
42242: LD_VAR 0 4
42246: PPUSH
42247: CALL_OW 256
42251: PPUSH
42252: CALL_OW 2
42256: ST_TO_ADDR
42257: GO 42220
42259: POP
42260: POP
// if not tmp then
42261: LD_VAR 0 5
42265: NOT
42266: IFFALSE 42270
// exit ;
42268: GO 42318
// if asc then
42270: LD_VAR 0 2
42274: IFFALSE 42298
// result := SortListByListAsc ( units , tmp ) else
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_VAR 0 1
42285: PPUSH
42286: LD_VAR 0 5
42290: PPUSH
42291: CALL_OW 76
42295: ST_TO_ADDR
42296: GO 42318
// result := SortListByListDesc ( units , tmp ) ;
42298: LD_ADDR_VAR 0 3
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_VAR 0 5
42312: PPUSH
42313: CALL_OW 77
42317: ST_TO_ADDR
// end ;
42318: LD_VAR 0 3
42322: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42323: LD_INT 0
42325: PPUSH
42326: PPUSH
// task := GetTaskList ( mech ) ;
42327: LD_ADDR_VAR 0 4
42331: PUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 437
42341: ST_TO_ADDR
// if not task then
42342: LD_VAR 0 4
42346: NOT
42347: IFFALSE 42351
// exit ;
42349: GO 42393
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42351: LD_ADDR_VAR 0 3
42355: PUSH
42356: LD_VAR 0 4
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: PUSH
42365: LD_INT 1
42367: ARRAY
42368: PUSH
42369: LD_STRING r
42371: EQUAL
42372: PUSH
42373: LD_VAR 0 4
42377: PUSH
42378: LD_INT 1
42380: ARRAY
42381: PUSH
42382: LD_INT 4
42384: ARRAY
42385: PUSH
42386: LD_VAR 0 2
42390: EQUAL
42391: AND
42392: ST_TO_ADDR
// end ;
42393: LD_VAR 0 3
42397: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42398: LD_INT 0
42400: PPUSH
// SetDir ( unit , d ) ;
42401: LD_VAR 0 1
42405: PPUSH
42406: LD_VAR 0 4
42410: PPUSH
42411: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42415: LD_VAR 0 1
42419: PPUSH
42420: LD_VAR 0 2
42424: PPUSH
42425: LD_VAR 0 3
42429: PPUSH
42430: LD_VAR 0 5
42434: PPUSH
42435: CALL_OW 48
// end ;
42439: LD_VAR 0 6
42443: RET
// export function ToNaturalNumber ( number ) ; begin
42444: LD_INT 0
42446: PPUSH
// result := number div 1 ;
42447: LD_ADDR_VAR 0 2
42451: PUSH
42452: LD_VAR 0 1
42456: PUSH
42457: LD_INT 1
42459: DIV
42460: ST_TO_ADDR
// if number < 0 then
42461: LD_VAR 0 1
42465: PUSH
42466: LD_INT 0
42468: LESS
42469: IFFALSE 42479
// result := 0 ;
42471: LD_ADDR_VAR 0 2
42475: PUSH
42476: LD_INT 0
42478: ST_TO_ADDR
// end ;
42479: LD_VAR 0 2
42483: RET
// export function SortByClass ( units , class ) ; var un ; begin
42484: LD_INT 0
42486: PPUSH
42487: PPUSH
// if not units or not class then
42488: LD_VAR 0 1
42492: NOT
42493: PUSH
42494: LD_VAR 0 2
42498: NOT
42499: OR
42500: IFFALSE 42504
// exit ;
42502: GO 42599
// result := [ ] ;
42504: LD_ADDR_VAR 0 3
42508: PUSH
42509: EMPTY
42510: ST_TO_ADDR
// for un in units do
42511: LD_ADDR_VAR 0 4
42515: PUSH
42516: LD_VAR 0 1
42520: PUSH
42521: FOR_IN
42522: IFFALSE 42597
// if GetClass ( un ) = class then
42524: LD_VAR 0 4
42528: PPUSH
42529: CALL_OW 257
42533: PUSH
42534: LD_VAR 0 2
42538: EQUAL
42539: IFFALSE 42566
// result := Insert ( result , 1 , un ) else
42541: LD_ADDR_VAR 0 3
42545: PUSH
42546: LD_VAR 0 3
42550: PPUSH
42551: LD_INT 1
42553: PPUSH
42554: LD_VAR 0 4
42558: PPUSH
42559: CALL_OW 2
42563: ST_TO_ADDR
42564: GO 42595
// result := Replace ( result , result + 1 , un ) ;
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_VAR 0 3
42580: PUSH
42581: LD_INT 1
42583: PLUS
42584: PPUSH
42585: LD_VAR 0 4
42589: PPUSH
42590: CALL_OW 1
42594: ST_TO_ADDR
42595: GO 42521
42597: POP
42598: POP
// end ;
42599: LD_VAR 0 3
42603: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42604: LD_INT 0
42606: PPUSH
42607: PPUSH
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
// result := [ ] ;
42613: LD_ADDR_VAR 0 4
42617: PUSH
42618: EMPTY
42619: ST_TO_ADDR
// if x - r < 0 then
42620: LD_VAR 0 1
42624: PUSH
42625: LD_VAR 0 3
42629: MINUS
42630: PUSH
42631: LD_INT 0
42633: LESS
42634: IFFALSE 42646
// min_x := 0 else
42636: LD_ADDR_VAR 0 8
42640: PUSH
42641: LD_INT 0
42643: ST_TO_ADDR
42644: GO 42662
// min_x := x - r ;
42646: LD_ADDR_VAR 0 8
42650: PUSH
42651: LD_VAR 0 1
42655: PUSH
42656: LD_VAR 0 3
42660: MINUS
42661: ST_TO_ADDR
// if y - r < 0 then
42662: LD_VAR 0 2
42666: PUSH
42667: LD_VAR 0 3
42671: MINUS
42672: PUSH
42673: LD_INT 0
42675: LESS
42676: IFFALSE 42688
// min_y := 0 else
42678: LD_ADDR_VAR 0 7
42682: PUSH
42683: LD_INT 0
42685: ST_TO_ADDR
42686: GO 42704
// min_y := y - r ;
42688: LD_ADDR_VAR 0 7
42692: PUSH
42693: LD_VAR 0 2
42697: PUSH
42698: LD_VAR 0 3
42702: MINUS
42703: ST_TO_ADDR
// max_x := x + r ;
42704: LD_ADDR_VAR 0 9
42708: PUSH
42709: LD_VAR 0 1
42713: PUSH
42714: LD_VAR 0 3
42718: PLUS
42719: ST_TO_ADDR
// max_y := y + r ;
42720: LD_ADDR_VAR 0 10
42724: PUSH
42725: LD_VAR 0 2
42729: PUSH
42730: LD_VAR 0 3
42734: PLUS
42735: ST_TO_ADDR
// for _x = min_x to max_x do
42736: LD_ADDR_VAR 0 5
42740: PUSH
42741: DOUBLE
42742: LD_VAR 0 8
42746: DEC
42747: ST_TO_ADDR
42748: LD_VAR 0 9
42752: PUSH
42753: FOR_TO
42754: IFFALSE 42855
// for _y = min_y to max_y do
42756: LD_ADDR_VAR 0 6
42760: PUSH
42761: DOUBLE
42762: LD_VAR 0 7
42766: DEC
42767: ST_TO_ADDR
42768: LD_VAR 0 10
42772: PUSH
42773: FOR_TO
42774: IFFALSE 42851
// begin if not ValidHex ( _x , _y ) then
42776: LD_VAR 0 5
42780: PPUSH
42781: LD_VAR 0 6
42785: PPUSH
42786: CALL_OW 488
42790: NOT
42791: IFFALSE 42795
// continue ;
42793: GO 42773
// if GetResourceTypeXY ( _x , _y ) then
42795: LD_VAR 0 5
42799: PPUSH
42800: LD_VAR 0 6
42804: PPUSH
42805: CALL_OW 283
42809: IFFALSE 42849
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42811: LD_ADDR_VAR 0 4
42815: PUSH
42816: LD_VAR 0 4
42820: PPUSH
42821: LD_VAR 0 4
42825: PUSH
42826: LD_INT 1
42828: PLUS
42829: PPUSH
42830: LD_VAR 0 5
42834: PUSH
42835: LD_VAR 0 6
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PPUSH
42844: CALL_OW 1
42848: ST_TO_ADDR
// end ;
42849: GO 42773
42851: POP
42852: POP
42853: GO 42753
42855: POP
42856: POP
// end ;
42857: LD_VAR 0 4
42861: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42862: LD_INT 0
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
// if not units then
42872: LD_VAR 0 1
42876: NOT
42877: IFFALSE 42881
// exit ;
42879: GO 43306
// result := UnitFilter ( units , [ f_ok ] ) ;
42881: LD_ADDR_VAR 0 3
42885: PUSH
42886: LD_VAR 0 1
42890: PPUSH
42891: LD_INT 50
42893: PUSH
42894: EMPTY
42895: LIST
42896: PPUSH
42897: CALL_OW 72
42901: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42902: LD_ADDR_VAR 0 8
42906: PUSH
42907: LD_VAR 0 1
42911: PUSH
42912: LD_INT 1
42914: ARRAY
42915: PPUSH
42916: CALL_OW 255
42920: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
42921: LD_ADDR_VAR 0 10
42925: PUSH
42926: LD_INT 29
42928: PUSH
42929: LD_EXP 25
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: ST_TO_ADDR
// if not result then
42938: LD_VAR 0 3
42942: NOT
42943: IFFALSE 42947
// exit ;
42945: GO 43306
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42947: LD_ADDR_VAR 0 5
42951: PUSH
42952: LD_INT 81
42954: PUSH
42955: LD_VAR 0 8
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PPUSH
42964: CALL_OW 69
42968: ST_TO_ADDR
// for i in result do
42969: LD_ADDR_VAR 0 4
42973: PUSH
42974: LD_VAR 0 3
42978: PUSH
42979: FOR_IN
42980: IFFALSE 43304
// begin tag := GetTag ( i ) + 1 ;
42982: LD_ADDR_VAR 0 9
42986: PUSH
42987: LD_VAR 0 4
42991: PPUSH
42992: CALL_OW 110
42996: PUSH
42997: LD_INT 1
42999: PLUS
43000: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43001: LD_ADDR_VAR 0 7
43005: PUSH
43006: LD_VAR 0 4
43010: PPUSH
43011: CALL_OW 250
43015: PPUSH
43016: LD_VAR 0 4
43020: PPUSH
43021: CALL_OW 251
43025: PPUSH
43026: LD_INT 6
43028: PPUSH
43029: CALL 42604 0 3
43033: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43034: LD_VAR 0 7
43038: PUSH
43039: LD_VAR 0 4
43043: PPUSH
43044: CALL_OW 264
43048: PUSH
43049: LD_VAR 0 10
43053: IN
43054: NOT
43055: AND
43056: IFFALSE 43095
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43058: LD_VAR 0 4
43062: PPUSH
43063: LD_VAR 0 7
43067: PUSH
43068: LD_INT 1
43070: ARRAY
43071: PUSH
43072: LD_INT 1
43074: ARRAY
43075: PPUSH
43076: LD_VAR 0 7
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: PUSH
43085: LD_INT 2
43087: ARRAY
43088: PPUSH
43089: CALL_OW 116
43093: GO 43302
// if path > tag then
43095: LD_VAR 0 2
43099: PUSH
43100: LD_VAR 0 9
43104: GREATER
43105: IFFALSE 43272
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
43107: LD_ADDR_VAR 0 6
43111: PUSH
43112: LD_VAR 0 5
43116: PPUSH
43117: LD_INT 91
43119: PUSH
43120: LD_VAR 0 4
43124: PUSH
43125: LD_INT 12
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: PPUSH
43133: CALL_OW 72
43137: ST_TO_ADDR
// if nearEnemy then
43138: LD_VAR 0 6
43142: IFFALSE 43170
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43144: LD_VAR 0 4
43148: PPUSH
43149: LD_VAR 0 6
43153: PPUSH
43154: LD_VAR 0 4
43158: PPUSH
43159: CALL_OW 74
43163: PPUSH
43164: CALL_OW 115
43168: GO 43270
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43170: LD_VAR 0 4
43174: PPUSH
43175: LD_VAR 0 2
43179: PUSH
43180: LD_VAR 0 9
43184: ARRAY
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PPUSH
43190: LD_VAR 0 2
43194: PUSH
43195: LD_VAR 0 9
43199: ARRAY
43200: PUSH
43201: LD_INT 2
43203: ARRAY
43204: PPUSH
43205: CALL_OW 297
43209: PUSH
43210: LD_INT 6
43212: GREATER
43213: IFFALSE 43256
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43215: LD_VAR 0 4
43219: PPUSH
43220: LD_VAR 0 2
43224: PUSH
43225: LD_VAR 0 9
43229: ARRAY
43230: PUSH
43231: LD_INT 1
43233: ARRAY
43234: PPUSH
43235: LD_VAR 0 2
43239: PUSH
43240: LD_VAR 0 9
43244: ARRAY
43245: PUSH
43246: LD_INT 2
43248: ARRAY
43249: PPUSH
43250: CALL_OW 114
43254: GO 43270
// SetTag ( i , tag ) ;
43256: LD_VAR 0 4
43260: PPUSH
43261: LD_VAR 0 9
43265: PPUSH
43266: CALL_OW 109
// end else
43270: GO 43302
// if enemy then
43272: LD_VAR 0 5
43276: IFFALSE 43302
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43278: LD_VAR 0 4
43282: PPUSH
43283: LD_VAR 0 5
43287: PPUSH
43288: LD_VAR 0 4
43292: PPUSH
43293: CALL_OW 74
43297: PPUSH
43298: CALL_OW 115
// end ;
43302: GO 42979
43304: POP
43305: POP
// end ;
43306: LD_VAR 0 3
43310: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43311: LD_INT 0
43313: PPUSH
43314: PPUSH
43315: PPUSH
// if not unit or IsInUnit ( unit ) then
43316: LD_VAR 0 1
43320: NOT
43321: PUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: CALL_OW 310
43331: OR
43332: IFFALSE 43336
// exit ;
43334: GO 43427
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43336: LD_ADDR_VAR 0 4
43340: PUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 250
43350: PPUSH
43351: LD_VAR 0 2
43355: PPUSH
43356: LD_INT 1
43358: PPUSH
43359: CALL_OW 272
43363: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43364: LD_ADDR_VAR 0 5
43368: PUSH
43369: LD_VAR 0 1
43373: PPUSH
43374: CALL_OW 251
43378: PPUSH
43379: LD_VAR 0 2
43383: PPUSH
43384: LD_INT 1
43386: PPUSH
43387: CALL_OW 273
43391: ST_TO_ADDR
// if ValidHex ( x , y ) then
43392: LD_VAR 0 4
43396: PPUSH
43397: LD_VAR 0 5
43401: PPUSH
43402: CALL_OW 488
43406: IFFALSE 43427
// ComTurnXY ( unit , x , y ) ;
43408: LD_VAR 0 1
43412: PPUSH
43413: LD_VAR 0 4
43417: PPUSH
43418: LD_VAR 0 5
43422: PPUSH
43423: CALL_OW 118
// end ;
43427: LD_VAR 0 3
43431: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43432: LD_INT 0
43434: PPUSH
43435: PPUSH
// result := false ;
43436: LD_ADDR_VAR 0 3
43440: PUSH
43441: LD_INT 0
43443: ST_TO_ADDR
// if not units then
43444: LD_VAR 0 2
43448: NOT
43449: IFFALSE 43453
// exit ;
43451: GO 43498
// for i in units do
43453: LD_ADDR_VAR 0 4
43457: PUSH
43458: LD_VAR 0 2
43462: PUSH
43463: FOR_IN
43464: IFFALSE 43496
// if See ( side , i ) then
43466: LD_VAR 0 1
43470: PPUSH
43471: LD_VAR 0 4
43475: PPUSH
43476: CALL_OW 292
43480: IFFALSE 43494
// begin result := true ;
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_INT 1
43489: ST_TO_ADDR
// exit ;
43490: POP
43491: POP
43492: GO 43498
// end ;
43494: GO 43463
43496: POP
43497: POP
// end ;
43498: LD_VAR 0 3
43502: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43503: LD_INT 0
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
// if not unit or not points then
43509: LD_VAR 0 1
43513: NOT
43514: PUSH
43515: LD_VAR 0 2
43519: NOT
43520: OR
43521: IFFALSE 43525
// exit ;
43523: GO 43615
// dist := 99999 ;
43525: LD_ADDR_VAR 0 5
43529: PUSH
43530: LD_INT 99999
43532: ST_TO_ADDR
// for i in points do
43533: LD_ADDR_VAR 0 4
43537: PUSH
43538: LD_VAR 0 2
43542: PUSH
43543: FOR_IN
43544: IFFALSE 43613
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43546: LD_ADDR_VAR 0 6
43550: PUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: LD_VAR 0 4
43560: PUSH
43561: LD_INT 1
43563: ARRAY
43564: PPUSH
43565: LD_VAR 0 4
43569: PUSH
43570: LD_INT 2
43572: ARRAY
43573: PPUSH
43574: CALL_OW 297
43578: ST_TO_ADDR
// if tmpDist < dist then
43579: LD_VAR 0 6
43583: PUSH
43584: LD_VAR 0 5
43588: LESS
43589: IFFALSE 43611
// begin result := i ;
43591: LD_ADDR_VAR 0 3
43595: PUSH
43596: LD_VAR 0 4
43600: ST_TO_ADDR
// dist := tmpDist ;
43601: LD_ADDR_VAR 0 5
43605: PUSH
43606: LD_VAR 0 6
43610: ST_TO_ADDR
// end ; end ;
43611: GO 43543
43613: POP
43614: POP
// end ; end_of_file
43615: LD_VAR 0 3
43619: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
43620: LD_INT 0
43622: PPUSH
// ar_miner := 81 ;
43623: LD_ADDR_EXP 28
43627: PUSH
43628: LD_INT 81
43630: ST_TO_ADDR
// ar_crane := 88 ;
43631: LD_ADDR_EXP 27
43635: PUSH
43636: LD_INT 88
43638: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
43639: LD_ADDR_EXP 22
43643: PUSH
43644: LD_INT 89
43646: ST_TO_ADDR
// us_hack := 99 ;
43647: LD_ADDR_EXP 23
43651: PUSH
43652: LD_INT 99
43654: ST_TO_ADDR
// us_artillery := 97 ;
43655: LD_ADDR_EXP 24
43659: PUSH
43660: LD_INT 97
43662: ST_TO_ADDR
// ar_bio_bomb := 91 ;
43663: LD_ADDR_EXP 25
43667: PUSH
43668: LD_INT 91
43670: ST_TO_ADDR
// ar_mortar := 92 ;
43671: LD_ADDR_EXP 26
43675: PUSH
43676: LD_INT 92
43678: ST_TO_ADDR
// ru_radar := 98 ;
43679: LD_ADDR_EXP 21
43683: PUSH
43684: LD_INT 98
43686: ST_TO_ADDR
// tech_Artillery := 80 ;
43687: LD_ADDR_EXP 29
43691: PUSH
43692: LD_INT 80
43694: ST_TO_ADDR
// tech_RadMat := 81 ;
43695: LD_ADDR_EXP 30
43699: PUSH
43700: LD_INT 81
43702: ST_TO_ADDR
// tech_BasicTools := 82 ;
43703: LD_ADDR_EXP 31
43707: PUSH
43708: LD_INT 82
43710: ST_TO_ADDR
// tech_Cargo := 83 ;
43711: LD_ADDR_EXP 32
43715: PUSH
43716: LD_INT 83
43718: ST_TO_ADDR
// tech_Track := 84 ;
43719: LD_ADDR_EXP 33
43723: PUSH
43724: LD_INT 84
43726: ST_TO_ADDR
// tech_Crane := 85 ;
43727: LD_ADDR_EXP 34
43731: PUSH
43732: LD_INT 85
43734: ST_TO_ADDR
// tech_Bulldozer := 86 ;
43735: LD_ADDR_EXP 35
43739: PUSH
43740: LD_INT 86
43742: ST_TO_ADDR
// tech_Hovercraft := 87 ;
43743: LD_ADDR_EXP 36
43747: PUSH
43748: LD_INT 87
43750: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
43751: LD_ADDR_EXP 37
43755: PUSH
43756: LD_INT 88
43758: ST_TO_ADDR
// class_mastodont := 31 ;
43759: LD_ADDR_EXP 38
43763: PUSH
43764: LD_INT 31
43766: ST_TO_ADDR
// class_horse := 21 ;
43767: LD_ADDR_EXP 39
43771: PUSH
43772: LD_INT 21
43774: ST_TO_ADDR
// end ;
43775: LD_VAR 0 1
43779: RET
// every 1 do
43780: GO 43782
43782: DISABLE
// InitGlobalVariables ;
43783: CALL 43620 0 0
43787: END
