// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2680 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41044 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3576 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3576 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3576 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3576 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3576 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3576 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3576 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3576 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3576 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3576 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3576 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2527
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 7
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2496
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 45
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 1
2426: PPUSH
2427: LD_INT 3
2429: PPUSH
2430: CALL_OW 12
2434: ARRAY
2435: ST_TO_ADDR
// un := CreateVehicle ;
2436: LD_ADDR_VAR 0 3
2440: PUSH
2441: CALL_OW 45
2445: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_INT 3
2453: PPUSH
2454: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 4
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// ComHold ( un ) ;
2473: LD_VAR 0 3
2477: PPUSH
2478: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2482: CALL_OW 44
2486: PPUSH
2487: LD_VAR 0 3
2491: PPUSH
2492: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2496: LD_ADDR_EXP 19
2500: PUSH
2501: LD_EXP 19
2505: PPUSH
2506: LD_EXP 19
2510: PUSH
2511: LD_INT 1
2513: PLUS
2514: PPUSH
2515: LD_VAR 0 3
2519: PPUSH
2520: CALL_OW 1
2524: ST_TO_ADDR
// end ;
2525: GO 2289
2527: POP
2528: POP
// end ;
2529: LD_VAR 0 1
2533: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2534: LD_EXP 3
2538: PUSH
2539: LD_EXP 18
2543: AND
2544: IFFALSE 2604
2546: GO 2548
2548: DISABLE
2549: LD_INT 0
2551: PPUSH
// begin enable ;
2552: ENABLE
// for i in kabulAttackers do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: LD_EXP 18
2562: PUSH
2563: FOR_IN
2564: IFFALSE 2602
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2566: LD_VAR 0 1
2570: PPUSH
2571: LD_INT 22
2573: PUSH
2574: LD_INT 5
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PPUSH
2581: CALL_OW 69
2585: PPUSH
2586: LD_VAR 0 1
2590: PPUSH
2591: CALL_OW 74
2595: PPUSH
2596: CALL_OW 115
2600: GO 2563
2602: POP
2603: POP
// end ;
2604: PPOPN 1
2606: END
// every 0 0$2 trigger startAttackOnHeike and heikeAttackers do var i ;
2607: LD_EXP 4
2611: PUSH
2612: LD_EXP 19
2616: AND
2617: IFFALSE 2677
2619: GO 2621
2621: DISABLE
2622: LD_INT 0
2624: PPUSH
// begin enable ;
2625: ENABLE
// for i in heikeAttackers do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_EXP 19
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2675
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2639: LD_VAR 0 1
2643: PPUSH
2644: LD_INT 22
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PPUSH
2654: CALL_OW 69
2658: PPUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 74
2668: PPUSH
2669: CALL_OW 115
2673: GO 2636
2675: POP
2676: POP
// end ; end_of_file
2677: PPOPN 1
2679: END
// export function Action ; var i ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
// Video ( true ) ;
2684: LD_INT 1
2686: PPUSH
2687: CALL 41016 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2691: LD_INT 111
2693: PPUSH
2694: LD_INT 168
2696: PPUSH
2697: LD_INT 2
2699: PPUSH
2700: LD_INT 25
2702: NEG
2703: PPUSH
2704: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2708: LD_INT 102
2710: PPUSH
2711: LD_INT 47
2713: PPUSH
2714: LD_INT 2
2716: PPUSH
2717: LD_INT 40
2719: NEG
2720: PPUSH
2721: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2725: LD_EXP 5
2729: PPUSH
2730: CALL_OW 87
// startAttackOnKabul := true ;
2734: LD_ADDR_EXP 3
2738: PUSH
2739: LD_INT 1
2741: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2742: LD_INT 70
2744: PPUSH
2745: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2749: LD_INT 102
2751: PPUSH
2752: LD_INT 47
2754: PPUSH
2755: CALL_OW 84
// if Givi then
2759: LD_EXP 6
2763: IFFALSE 2954
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2765: LD_EXP 6
2769: PPUSH
2770: LD_INT 113
2772: PPUSH
2773: LD_INT 162
2775: PPUSH
2776: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2780: LD_EXP 6
2784: PPUSH
2785: LD_EXP 5
2789: PPUSH
2790: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_STRING DG-Intro-1
2801: PPUSH
2802: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2806: LD_EXP 6
2810: PPUSH
2811: LD_STRING DG-Intro-2
2813: PPUSH
2814: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2818: LD_EXP 5
2822: PPUSH
2823: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2827: LD_INT 102
2829: PPUSH
2830: LD_INT 47
2832: PPUSH
2833: LD_INT 2
2835: PPUSH
2836: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2840: LD_INT 10
2842: PPUSH
2843: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2847: LD_EXP 5
2851: PPUSH
2852: LD_STRING DH-Intro-3
2854: PPUSH
2855: CALL_OW 88
// if Mike then
2859: LD_EXP 7
2863: IFFALSE 2952
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2865: LD_INT 92
2867: PPUSH
2868: LD_INT 129
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: LD_INT 18
2876: NEG
2877: PPUSH
2878: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2882: LD_INT 92
2884: PPUSH
2885: LD_INT 129
2887: PPUSH
2888: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2892: LD_EXP 7
2896: PUSH
2897: LD_EXP 10
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: LD_EXP 5
2910: PPUSH
2911: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2915: LD_EXP 7
2919: PPUSH
2920: LD_STRING DM-Intro-4
2922: PPUSH
2923: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2927: LD_EXP 10
2931: PPUSH
2932: LD_STRING DK-Intro-5
2934: PPUSH
2935: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2939: LD_INT 92
2941: PPUSH
2942: LD_INT 129
2944: PPUSH
2945: LD_INT 2
2947: PPUSH
2948: CALL_OW 331
// end ; end else
2952: GO 3207
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2954: LD_EXP 16
2958: PPUSH
2959: LD_INT 26
2961: PUSH
2962: LD_INT 1
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PPUSH
2969: CALL_OW 72
2973: PUSH
2974: LD_INT 1
2976: ARRAY
2977: PPUSH
2978: LD_STRING DArm-Intro-b-1
2980: PPUSH
2981: CALL_OW 88
2985: NOT
2986: IFFALSE 3019
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
2988: LD_EXP 16
2992: PPUSH
2993: LD_INT 26
2995: PUSH
2996: LD_INT 2
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PPUSH
3003: CALL_OW 72
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: LD_STRING DArf-Intro-b-1
3014: PPUSH
3015: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3019: LD_EXP 16
3023: PPUSH
3024: LD_INT 26
3026: PUSH
3027: LD_INT 1
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 72
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PPUSH
3043: LD_STRING DArm-Intro-b-2
3045: PPUSH
3046: CALL_OW 88
3050: NOT
3051: IFFALSE 3084
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3053: LD_EXP 16
3057: PPUSH
3058: LD_INT 26
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 72
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PPUSH
3077: LD_STRING DArf-Intro-b-2
3079: PPUSH
3080: CALL_OW 88
// if Kaia then
3084: LD_EXP 10
3088: IFFALSE 3102
// Say ( Kaia , DK-Intro-5 ) ;
3090: LD_EXP 10
3094: PPUSH
3095: LD_STRING DK-Intro-5
3097: PPUSH
3098: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3102: LD_INT 92
3104: PPUSH
3105: LD_INT 129
3107: PPUSH
3108: LD_INT 2
3110: PPUSH
3111: LD_INT 18
3113: NEG
3114: PPUSH
3115: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3119: LD_INT 92
3121: PPUSH
3122: LD_INT 129
3124: PPUSH
3125: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3129: LD_EXP 16
3133: PPUSH
3134: LD_INT 26
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 72
3148: PUSH
3149: LD_INT 1
3151: ARRAY
3152: PPUSH
3153: LD_STRING DArm-Intro-b-4
3155: PPUSH
3156: CALL_OW 88
3160: NOT
3161: IFFALSE 3194
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3163: LD_EXP 16
3167: PPUSH
3168: LD_INT 26
3170: PUSH
3171: LD_INT 2
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: PPUSH
3187: LD_STRING DArf-Intro-b-4
3189: PPUSH
3190: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3194: LD_INT 92
3196: PPUSH
3197: LD_INT 129
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3207: LD_EXP 5
3211: PPUSH
3212: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3216: LD_EXP 20
3220: PPUSH
3221: LD_STRING DB-Intro-6
3223: PPUSH
3224: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3228: LD_EXP 5
3232: PPUSH
3233: LD_STRING DH-Intro-7
3235: PPUSH
3236: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3240: LD_EXP 20
3244: PPUSH
3245: LD_STRING DB-Intro-8
3247: PPUSH
3248: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3252: LD_EXP 20
3256: PPUSH
3257: LD_STRING DB-Intro-9
3259: PPUSH
3260: CALL_OW 94
// if Givi then
3264: LD_EXP 6
3268: IFFALSE 3296
// begin Say ( Givi , DG-Intro-10 ) ;
3270: LD_EXP 6
3274: PPUSH
3275: LD_STRING DG-Intro-10
3277: PPUSH
3278: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3282: LD_EXP 10
3286: PPUSH
3287: LD_STRING DK-Intro-11
3289: PPUSH
3290: CALL_OW 88
// end else
3294: GO 3361
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3296: LD_EXP 16
3300: PPUSH
3301: LD_INT 26
3303: PUSH
3304: LD_INT 1
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PPUSH
3311: CALL_OW 72
3315: PUSH
3316: LD_INT 1
3318: ARRAY
3319: PPUSH
3320: LD_STRING DArm-Intro-b-10
3322: PPUSH
3323: CALL_OW 88
3327: NOT
3328: IFFALSE 3361
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3330: LD_EXP 16
3334: PPUSH
3335: LD_INT 26
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 72
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PPUSH
3354: LD_STRING DArf-Intro-b-10
3356: PPUSH
3357: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3361: LD_EXP 7
3365: PPUSH
3366: LD_STRING DM-Intro-12
3368: PPUSH
3369: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3373: LD_EXP 14
3377: PPUSH
3378: LD_STRING DKs-Intro-13
3380: PPUSH
3381: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3385: LD_EXP 9
3389: PPUSH
3390: LD_STRING DKam-Intro-14
3392: PPUSH
3393: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3397: LD_STRING QSurrender
3399: PPUSH
3400: CALL_OW 97
3404: PUSH
3405: LD_INT 1
3407: DOUBLE
3408: EQUAL
3409: IFTRUE 3413
3411: GO 3432
3413: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3414: LD_EXP 5
3418: PPUSH
3419: LD_STRING DH-Intro-16
3421: PPUSH
3422: CALL_OW 88
// missionEnd ;
3426: CALL 3558 0 0
// end ; 2 :
3430: GO 3476
3432: LD_INT 2
3434: DOUBLE
3435: EQUAL
3436: IFTRUE 3440
3438: GO 3475
3440: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3441: LD_EXP 5
3445: PPUSH
3446: LD_STRING DH-Intro-a-16
3448: PPUSH
3449: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3453: LD_EXP 20
3457: PPUSH
3458: LD_STRING DB-Intro-a-17
3460: PPUSH
3461: CALL_OW 94
// startAttackOnHeike := true ;
3465: LD_ADDR_EXP 4
3469: PUSH
3470: LD_INT 1
3472: ST_TO_ADDR
// end ; end ;
3473: GO 3476
3475: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3476: LD_ADDR_VAR 0 2
3480: PUSH
3481: LD_INT 22
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: PPUSH
3491: CALL_OW 69
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3516
// ComAgressiveMove ( i , 98 , 143 ) ;
3499: LD_VAR 0 2
3503: PPUSH
3504: LD_INT 98
3506: PPUSH
3507: LD_INT 143
3509: PPUSH
3510: CALL_OW 114
3514: GO 3496
3516: POP
3517: POP
// CenterOnXY ( 98 , 143 ) ;
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3528: LD_INT 35
3530: PPUSH
3531: CALL_OW 67
// until IsDead ( Heike ) ;
3535: LD_EXP 5
3539: PPUSH
3540: CALL_OW 301
3544: IFFALSE 3528
// YouLost ( HeikeNoSurrender ) ;
3546: LD_STRING HeikeNoSurrender
3548: PPUSH
3549: CALL_OW 104
// end ;
3553: LD_VAR 0 1
3557: RET
// function MissionEnd ( ) ; begin
3558: LD_INT 0
3560: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3561: LD_INT 1
3563: PPUSH
3564: LD_STRING %_cont
3566: PPUSH
3567: CALL_OW 340
// end ; end_of_file
3571: LD_VAR 0 1
3575: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3576: LD_INT 0
3578: PPUSH
3579: PPUSH
// if exist_mode then
3580: LD_VAR 0 2
3584: IFFALSE 3609
// unit := CreateCharacter ( prefix & ident ) else
3586: LD_ADDR_VAR 0 5
3590: PUSH
3591: LD_VAR 0 3
3595: PUSH
3596: LD_VAR 0 1
3600: STR
3601: PPUSH
3602: CALL_OW 34
3606: ST_TO_ADDR
3607: GO 3624
// unit := NewCharacter ( ident ) ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_VAR 0 1
3618: PPUSH
3619: CALL_OW 25
3623: ST_TO_ADDR
// result := unit ;
3624: LD_ADDR_VAR 0 4
3628: PUSH
3629: LD_VAR 0 5
3633: ST_TO_ADDR
// end ;
3634: LD_VAR 0 4
3638: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3639: LD_INT 0
3641: PPUSH
3642: PPUSH
// if not side or not nation then
3643: LD_VAR 0 1
3647: NOT
3648: PUSH
3649: LD_VAR 0 2
3653: NOT
3654: OR
3655: IFFALSE 3659
// exit ;
3657: GO 4427
// case nation of nation_american :
3659: LD_VAR 0 2
3663: PUSH
3664: LD_INT 1
3666: DOUBLE
3667: EQUAL
3668: IFTRUE 3672
3670: GO 3886
3672: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3673: LD_ADDR_VAR 0 4
3677: PUSH
3678: LD_INT 35
3680: PUSH
3681: LD_INT 45
3683: PUSH
3684: LD_INT 46
3686: PUSH
3687: LD_INT 47
3689: PUSH
3690: LD_INT 82
3692: PUSH
3693: LD_INT 83
3695: PUSH
3696: LD_INT 84
3698: PUSH
3699: LD_INT 85
3701: PUSH
3702: LD_INT 86
3704: PUSH
3705: LD_INT 1
3707: PUSH
3708: LD_INT 2
3710: PUSH
3711: LD_INT 6
3713: PUSH
3714: LD_INT 15
3716: PUSH
3717: LD_INT 16
3719: PUSH
3720: LD_INT 7
3722: PUSH
3723: LD_INT 12
3725: PUSH
3726: LD_INT 13
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: LD_INT 14
3734: PUSH
3735: LD_INT 20
3737: PUSH
3738: LD_INT 21
3740: PUSH
3741: LD_INT 22
3743: PUSH
3744: LD_INT 25
3746: PUSH
3747: LD_INT 32
3749: PUSH
3750: LD_INT 27
3752: PUSH
3753: LD_INT 36
3755: PUSH
3756: LD_INT 69
3758: PUSH
3759: LD_INT 39
3761: PUSH
3762: LD_INT 34
3764: PUSH
3765: LD_INT 40
3767: PUSH
3768: LD_INT 48
3770: PUSH
3771: LD_INT 49
3773: PUSH
3774: LD_INT 50
3776: PUSH
3777: LD_INT 51
3779: PUSH
3780: LD_INT 52
3782: PUSH
3783: LD_INT 53
3785: PUSH
3786: LD_INT 54
3788: PUSH
3789: LD_INT 55
3791: PUSH
3792: LD_INT 56
3794: PUSH
3795: LD_INT 57
3797: PUSH
3798: LD_INT 58
3800: PUSH
3801: LD_INT 59
3803: PUSH
3804: LD_INT 60
3806: PUSH
3807: LD_INT 61
3809: PUSH
3810: LD_INT 62
3812: PUSH
3813: LD_INT 80
3815: PUSH
3816: LD_INT 82
3818: PUSH
3819: LD_INT 83
3821: PUSH
3822: LD_INT 84
3824: PUSH
3825: LD_INT 85
3827: PUSH
3828: LD_INT 86
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: ST_TO_ADDR
3884: GO 4351
3886: LD_INT 2
3888: DOUBLE
3889: EQUAL
3890: IFTRUE 3894
3892: GO 4120
3894: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3895: LD_ADDR_VAR 0 4
3899: PUSH
3900: LD_INT 35
3902: PUSH
3903: LD_INT 45
3905: PUSH
3906: LD_INT 46
3908: PUSH
3909: LD_INT 47
3911: PUSH
3912: LD_INT 82
3914: PUSH
3915: LD_INT 83
3917: PUSH
3918: LD_INT 84
3920: PUSH
3921: LD_INT 85
3923: PUSH
3924: LD_INT 87
3926: PUSH
3927: LD_INT 70
3929: PUSH
3930: LD_INT 1
3932: PUSH
3933: LD_INT 11
3935: PUSH
3936: LD_INT 3
3938: PUSH
3939: LD_INT 4
3941: PUSH
3942: LD_INT 5
3944: PUSH
3945: LD_INT 6
3947: PUSH
3948: LD_INT 15
3950: PUSH
3951: LD_INT 18
3953: PUSH
3954: LD_INT 7
3956: PUSH
3957: LD_INT 17
3959: PUSH
3960: LD_INT 8
3962: PUSH
3963: LD_INT 20
3965: PUSH
3966: LD_INT 21
3968: PUSH
3969: LD_INT 22
3971: PUSH
3972: LD_INT 72
3974: PUSH
3975: LD_INT 26
3977: PUSH
3978: LD_INT 69
3980: PUSH
3981: LD_INT 39
3983: PUSH
3984: LD_INT 40
3986: PUSH
3987: LD_INT 41
3989: PUSH
3990: LD_INT 42
3992: PUSH
3993: LD_INT 43
3995: PUSH
3996: LD_INT 48
3998: PUSH
3999: LD_INT 49
4001: PUSH
4002: LD_INT 50
4004: PUSH
4005: LD_INT 51
4007: PUSH
4008: LD_INT 52
4010: PUSH
4011: LD_INT 53
4013: PUSH
4014: LD_INT 54
4016: PUSH
4017: LD_INT 55
4019: PUSH
4020: LD_INT 56
4022: PUSH
4023: LD_INT 60
4025: PUSH
4026: LD_INT 61
4028: PUSH
4029: LD_INT 62
4031: PUSH
4032: LD_INT 66
4034: PUSH
4035: LD_INT 67
4037: PUSH
4038: LD_INT 68
4040: PUSH
4041: LD_INT 81
4043: PUSH
4044: LD_INT 82
4046: PUSH
4047: LD_INT 83
4049: PUSH
4050: LD_INT 84
4052: PUSH
4053: LD_INT 85
4055: PUSH
4056: LD_INT 87
4058: PUSH
4059: LD_INT 88
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
4118: GO 4351
4120: LD_INT 3
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4350
4128: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_INT 46
4136: PUSH
4137: LD_INT 47
4139: PUSH
4140: LD_INT 1
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: LD_INT 82
4148: PUSH
4149: LD_INT 83
4151: PUSH
4152: LD_INT 84
4154: PUSH
4155: LD_INT 85
4157: PUSH
4158: LD_INT 86
4160: PUSH
4161: LD_INT 11
4163: PUSH
4164: LD_INT 9
4166: PUSH
4167: LD_INT 20
4169: PUSH
4170: LD_INT 19
4172: PUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 24
4178: PUSH
4179: LD_INT 22
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 28
4187: PUSH
4188: LD_INT 29
4190: PUSH
4191: LD_INT 30
4193: PUSH
4194: LD_INT 31
4196: PUSH
4197: LD_INT 37
4199: PUSH
4200: LD_INT 38
4202: PUSH
4203: LD_INT 32
4205: PUSH
4206: LD_INT 27
4208: PUSH
4209: LD_INT 33
4211: PUSH
4212: LD_INT 69
4214: PUSH
4215: LD_INT 39
4217: PUSH
4218: LD_INT 34
4220: PUSH
4221: LD_INT 40
4223: PUSH
4224: LD_INT 71
4226: PUSH
4227: LD_INT 23
4229: PUSH
4230: LD_INT 44
4232: PUSH
4233: LD_INT 48
4235: PUSH
4236: LD_INT 49
4238: PUSH
4239: LD_INT 50
4241: PUSH
4242: LD_INT 51
4244: PUSH
4245: LD_INT 52
4247: PUSH
4248: LD_INT 53
4250: PUSH
4251: LD_INT 54
4253: PUSH
4254: LD_INT 55
4256: PUSH
4257: LD_INT 56
4259: PUSH
4260: LD_INT 57
4262: PUSH
4263: LD_INT 58
4265: PUSH
4266: LD_INT 59
4268: PUSH
4269: LD_INT 63
4271: PUSH
4272: LD_INT 64
4274: PUSH
4275: LD_INT 65
4277: PUSH
4278: LD_INT 82
4280: PUSH
4281: LD_INT 83
4283: PUSH
4284: LD_INT 84
4286: PUSH
4287: LD_INT 85
4289: PUSH
4290: LD_INT 86
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: ST_TO_ADDR
4348: GO 4351
4350: POP
// if state > - 1 and state < 3 then
4351: LD_VAR 0 3
4355: PUSH
4356: LD_INT 1
4358: NEG
4359: GREATER
4360: PUSH
4361: LD_VAR 0 3
4365: PUSH
4366: LD_INT 3
4368: LESS
4369: AND
4370: IFFALSE 4427
// for i in result do
4372: LD_ADDR_VAR 0 5
4376: PUSH
4377: LD_VAR 0 4
4381: PUSH
4382: FOR_IN
4383: IFFALSE 4425
// if GetTech ( i , side ) <> state then
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_VAR 0 1
4394: PPUSH
4395: CALL_OW 321
4399: PUSH
4400: LD_VAR 0 3
4404: NONEQUAL
4405: IFFALSE 4423
// result := result diff i ;
4407: LD_ADDR_VAR 0 4
4411: PUSH
4412: LD_VAR 0 4
4416: PUSH
4417: LD_VAR 0 5
4421: DIFF
4422: ST_TO_ADDR
4423: GO 4382
4425: POP
4426: POP
// end ;
4427: LD_VAR 0 4
4431: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
4436: PPUSH
// result := true ;
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: LD_VAR 0 2
4454: PPUSH
4455: CALL_OW 480
4459: ST_TO_ADDR
// if not tmp then
4460: LD_VAR 0 5
4464: NOT
4465: IFFALSE 4469
// exit ;
4467: GO 4518
// for i in tmp do
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_VAR 0 5
4478: PUSH
4479: FOR_IN
4480: IFFALSE 4516
// if GetTech ( i , side ) <> state_researched then
4482: LD_VAR 0 4
4486: PPUSH
4487: LD_VAR 0 1
4491: PPUSH
4492: CALL_OW 321
4496: PUSH
4497: LD_INT 2
4499: NONEQUAL
4500: IFFALSE 4514
// begin result := false ;
4502: LD_ADDR_VAR 0 3
4506: PUSH
4507: LD_INT 0
4509: ST_TO_ADDR
// exit ;
4510: POP
4511: POP
4512: GO 4518
// end ;
4514: GO 4479
4516: POP
4517: POP
// end ;
4518: LD_VAR 0 3
4522: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4523: LD_INT 0
4525: PPUSH
4526: PPUSH
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4538: LD_VAR 0 1
4542: NOT
4543: PUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 257
4553: PUSH
4554: LD_INT 9
4556: NONEQUAL
4557: OR
4558: IFFALSE 4562
// exit ;
4560: GO 5135
// side := GetSide ( unit ) ;
4562: LD_ADDR_VAR 0 9
4566: PUSH
4567: LD_VAR 0 1
4571: PPUSH
4572: CALL_OW 255
4576: ST_TO_ADDR
// tech_space := tech_spacanom ;
4577: LD_ADDR_VAR 0 12
4581: PUSH
4582: LD_INT 29
4584: ST_TO_ADDR
// tech_time := tech_taurad ;
4585: LD_ADDR_VAR 0 13
4589: PUSH
4590: LD_INT 28
4592: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4593: LD_ADDR_VAR 0 11
4597: PUSH
4598: LD_VAR 0 1
4602: PPUSH
4603: CALL_OW 310
4607: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4608: LD_VAR 0 11
4612: PPUSH
4613: CALL_OW 247
4617: PUSH
4618: LD_INT 2
4620: EQUAL
4621: IFFALSE 4625
// exit ;
4623: GO 5135
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4625: LD_ADDR_VAR 0 8
4629: PUSH
4630: LD_INT 81
4632: PUSH
4633: LD_VAR 0 9
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 3
4644: PUSH
4645: LD_INT 21
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 69
4667: ST_TO_ADDR
// if not tmp then
4668: LD_VAR 0 8
4672: NOT
4673: IFFALSE 4677
// exit ;
4675: GO 5135
// if in_unit then
4677: LD_VAR 0 11
4681: IFFALSE 4705
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4683: LD_ADDR_VAR 0 10
4687: PUSH
4688: LD_VAR 0 8
4692: PPUSH
4693: LD_VAR 0 11
4697: PPUSH
4698: CALL_OW 74
4702: ST_TO_ADDR
4703: GO 4725
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4705: LD_ADDR_VAR 0 10
4709: PUSH
4710: LD_VAR 0 8
4714: PPUSH
4715: LD_VAR 0 1
4719: PPUSH
4720: CALL_OW 74
4724: ST_TO_ADDR
// if not enemy then
4725: LD_VAR 0 10
4729: NOT
4730: IFFALSE 4734
// exit ;
4732: GO 5135
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4734: LD_VAR 0 11
4738: PUSH
4739: LD_VAR 0 11
4743: PPUSH
4744: LD_VAR 0 10
4748: PPUSH
4749: CALL_OW 296
4753: PUSH
4754: LD_INT 13
4756: GREATER
4757: AND
4758: PUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: LD_VAR 0 10
4768: PPUSH
4769: CALL_OW 296
4773: PUSH
4774: LD_INT 12
4776: GREATER
4777: OR
4778: IFFALSE 4782
// exit ;
4780: GO 5135
// missile := [ 1 ] ;
4782: LD_ADDR_VAR 0 14
4786: PUSH
4787: LD_INT 1
4789: PUSH
4790: EMPTY
4791: LIST
4792: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4793: LD_VAR 0 9
4797: PPUSH
4798: LD_VAR 0 12
4802: PPUSH
4803: CALL_OW 325
4807: IFFALSE 4836
// missile := Replace ( missile , missile + 1 , 2 ) ;
4809: LD_ADDR_VAR 0 14
4813: PUSH
4814: LD_VAR 0 14
4818: PPUSH
4819: LD_VAR 0 14
4823: PUSH
4824: LD_INT 1
4826: PLUS
4827: PPUSH
4828: LD_INT 2
4830: PPUSH
4831: CALL_OW 1
4835: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4836: LD_VAR 0 9
4840: PPUSH
4841: LD_VAR 0 13
4845: PPUSH
4846: CALL_OW 325
4850: PUSH
4851: LD_VAR 0 10
4855: PPUSH
4856: CALL_OW 255
4860: PPUSH
4861: LD_VAR 0 13
4865: PPUSH
4866: CALL_OW 325
4870: NOT
4871: AND
4872: IFFALSE 4901
// missile := Replace ( missile , missile + 1 , 3 ) ;
4874: LD_ADDR_VAR 0 14
4878: PUSH
4879: LD_VAR 0 14
4883: PPUSH
4884: LD_VAR 0 14
4888: PUSH
4889: LD_INT 1
4891: PLUS
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: CALL_OW 1
4900: ST_TO_ADDR
// if missile < 2 then
4901: LD_VAR 0 14
4905: PUSH
4906: LD_INT 2
4908: LESS
4909: IFFALSE 4913
// exit ;
4911: GO 5135
// x := GetX ( enemy ) ;
4913: LD_ADDR_VAR 0 4
4917: PUSH
4918: LD_VAR 0 10
4922: PPUSH
4923: CALL_OW 250
4927: ST_TO_ADDR
// y := GetY ( enemy ) ;
4928: LD_ADDR_VAR 0 5
4932: PUSH
4933: LD_VAR 0 10
4937: PPUSH
4938: CALL_OW 251
4942: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4943: LD_ADDR_VAR 0 6
4947: PUSH
4948: LD_VAR 0 4
4952: PUSH
4953: LD_INT 1
4955: NEG
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 12
4964: PLUS
4965: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4966: LD_ADDR_VAR 0 7
4970: PUSH
4971: LD_VAR 0 5
4975: PUSH
4976: LD_INT 1
4978: NEG
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 12
4987: PLUS
4988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4989: LD_VAR 0 6
4993: PPUSH
4994: LD_VAR 0 7
4998: PPUSH
4999: CALL_OW 488
5003: NOT
5004: IFFALSE 5026
// begin _x := x ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 4
5015: ST_TO_ADDR
// _y := y ;
5016: LD_ADDR_VAR 0 7
5020: PUSH
5021: LD_VAR 0 5
5025: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_VAR 0 14
5038: PPUSH
5039: CALL_OW 12
5043: ST_TO_ADDR
// case i of 1 :
5044: LD_VAR 0 3
5048: PUSH
5049: LD_INT 1
5051: DOUBLE
5052: EQUAL
5053: IFTRUE 5057
5055: GO 5074
5057: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5058: LD_VAR 0 1
5062: PPUSH
5063: LD_VAR 0 10
5067: PPUSH
5068: CALL_OW 115
5072: GO 5135
5074: LD_INT 2
5076: DOUBLE
5077: EQUAL
5078: IFTRUE 5082
5080: GO 5104
5082: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5083: LD_VAR 0 1
5087: PPUSH
5088: LD_VAR 0 6
5092: PPUSH
5093: LD_VAR 0 7
5097: PPUSH
5098: CALL_OW 153
5102: GO 5135
5104: LD_INT 3
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5134
5112: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5113: LD_VAR 0 1
5117: PPUSH
5118: LD_VAR 0 6
5122: PPUSH
5123: LD_VAR 0 7
5127: PPUSH
5128: CALL_OW 154
5132: GO 5135
5134: POP
// end ;
5135: LD_VAR 0 2
5139: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5140: LD_INT 0
5142: PPUSH
5143: PPUSH
5144: PPUSH
5145: PPUSH
5146: PPUSH
5147: PPUSH
// if not unit or not building then
5148: LD_VAR 0 1
5152: NOT
5153: PUSH
5154: LD_VAR 0 2
5158: NOT
5159: OR
5160: IFFALSE 5164
// exit ;
5162: GO 5322
// x := GetX ( building ) ;
5164: LD_ADDR_VAR 0 5
5168: PUSH
5169: LD_VAR 0 2
5173: PPUSH
5174: CALL_OW 250
5178: ST_TO_ADDR
// y := GetY ( building ) ;
5179: LD_ADDR_VAR 0 6
5183: PUSH
5184: LD_VAR 0 2
5188: PPUSH
5189: CALL_OW 251
5193: ST_TO_ADDR
// for i = 0 to 5 do
5194: LD_ADDR_VAR 0 4
5198: PUSH
5199: DOUBLE
5200: LD_INT 0
5202: DEC
5203: ST_TO_ADDR
5204: LD_INT 5
5206: PUSH
5207: FOR_TO
5208: IFFALSE 5320
// begin _x := ShiftX ( x , i , 3 ) ;
5210: LD_ADDR_VAR 0 7
5214: PUSH
5215: LD_VAR 0 5
5219: PPUSH
5220: LD_VAR 0 4
5224: PPUSH
5225: LD_INT 3
5227: PPUSH
5228: CALL_OW 272
5232: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5233: LD_ADDR_VAR 0 8
5237: PUSH
5238: LD_VAR 0 6
5242: PPUSH
5243: LD_VAR 0 4
5247: PPUSH
5248: LD_INT 3
5250: PPUSH
5251: CALL_OW 273
5255: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5256: LD_VAR 0 7
5260: PPUSH
5261: LD_VAR 0 8
5265: PPUSH
5266: CALL_OW 488
5270: NOT
5271: IFFALSE 5275
// continue ;
5273: GO 5207
// if HexInfo ( _x , _y ) = 0 then
5275: LD_VAR 0 7
5279: PPUSH
5280: LD_VAR 0 8
5284: PPUSH
5285: CALL_OW 428
5289: PUSH
5290: LD_INT 0
5292: EQUAL
5293: IFFALSE 5318
// begin ComMoveXY ( unit , _x , _y ) ;
5295: LD_VAR 0 1
5299: PPUSH
5300: LD_VAR 0 7
5304: PPUSH
5305: LD_VAR 0 8
5309: PPUSH
5310: CALL_OW 111
// exit ;
5314: POP
5315: POP
5316: GO 5322
// end ; end ;
5318: GO 5207
5320: POP
5321: POP
// end ;
5322: LD_VAR 0 3
5326: RET
// export function ScanBase ( side , base_area ) ; begin
5327: LD_INT 0
5329: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5330: LD_ADDR_VAR 0 3
5334: PUSH
5335: LD_VAR 0 2
5339: PPUSH
5340: LD_INT 81
5342: PUSH
5343: LD_VAR 0 1
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PPUSH
5352: CALL_OW 70
5356: ST_TO_ADDR
// end ;
5357: LD_VAR 0 3
5361: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5362: LD_INT 0
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
// result := false ;
5368: LD_ADDR_VAR 0 2
5372: PUSH
5373: LD_INT 0
5375: ST_TO_ADDR
// side := GetSide ( unit ) ;
5376: LD_ADDR_VAR 0 3
5380: PUSH
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 255
5390: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 248
5405: ST_TO_ADDR
// case nat of 1 :
5406: LD_VAR 0 4
5410: PUSH
5411: LD_INT 1
5413: DOUBLE
5414: EQUAL
5415: IFTRUE 5419
5417: GO 5430
5419: POP
// tech := tech_lassight ; 2 :
5420: LD_ADDR_VAR 0 5
5424: PUSH
5425: LD_INT 12
5427: ST_TO_ADDR
5428: GO 5469
5430: LD_INT 2
5432: DOUBLE
5433: EQUAL
5434: IFTRUE 5438
5436: GO 5449
5438: POP
// tech := tech_mortar ; 3 :
5439: LD_ADDR_VAR 0 5
5443: PUSH
5444: LD_INT 41
5446: ST_TO_ADDR
5447: GO 5469
5449: LD_INT 3
5451: DOUBLE
5452: EQUAL
5453: IFTRUE 5457
5455: GO 5468
5457: POP
// tech := tech_bazooka ; end ;
5458: LD_ADDR_VAR 0 5
5462: PUSH
5463: LD_INT 44
5465: ST_TO_ADDR
5466: GO 5469
5468: POP
// if Researched ( side , tech ) then
5469: LD_VAR 0 3
5473: PPUSH
5474: LD_VAR 0 5
5478: PPUSH
5479: CALL_OW 325
5483: IFFALSE 5510
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: LD_INT 5
5492: PUSH
5493: LD_INT 8
5495: PUSH
5496: LD_INT 9
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: PUSH
5504: LD_VAR 0 4
5508: ARRAY
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 2
5514: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
// if not mines then
5520: LD_VAR 0 2
5524: NOT
5525: IFFALSE 5529
// exit ;
5527: GO 5673
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_INT 81
5536: PUSH
5537: LD_VAR 0 1
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 3
5548: PUSH
5549: LD_INT 21
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 69
5571: ST_TO_ADDR
// for i in mines do
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: LD_VAR 0 2
5581: PUSH
5582: FOR_IN
5583: IFFALSE 5671
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5585: LD_VAR 0 4
5589: PUSH
5590: LD_INT 1
5592: ARRAY
5593: PPUSH
5594: LD_VAR 0 4
5598: PUSH
5599: LD_INT 2
5601: ARRAY
5602: PPUSH
5603: CALL_OW 458
5607: NOT
5608: IFFALSE 5612
// continue ;
5610: GO 5582
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5612: LD_VAR 0 4
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PPUSH
5621: LD_VAR 0 4
5625: PUSH
5626: LD_INT 2
5628: ARRAY
5629: PPUSH
5630: CALL_OW 428
5634: PUSH
5635: LD_VAR 0 5
5639: IN
5640: IFFALSE 5669
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5642: LD_VAR 0 4
5646: PUSH
5647: LD_INT 1
5649: ARRAY
5650: PPUSH
5651: LD_VAR 0 4
5655: PUSH
5656: LD_INT 2
5658: ARRAY
5659: PPUSH
5660: LD_VAR 0 1
5664: PPUSH
5665: CALL_OW 456
// end ;
5669: GO 5582
5671: POP
5672: POP
// end ;
5673: LD_VAR 0 3
5677: RET
// export function Count ( array ) ; var i ; begin
5678: LD_INT 0
5680: PPUSH
5681: PPUSH
// result := 0 ;
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_INT 0
5689: ST_TO_ADDR
// for i in array do
5690: LD_ADDR_VAR 0 3
5694: PUSH
5695: LD_VAR 0 1
5699: PUSH
5700: FOR_IN
5701: IFFALSE 5725
// if i then
5703: LD_VAR 0 3
5707: IFFALSE 5723
// result := result + 1 ;
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: LD_VAR 0 2
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
5723: GO 5700
5725: POP
5726: POP
// end ;
5727: LD_VAR 0 2
5731: RET
// export function IsEmpty ( building ) ; begin
5732: LD_INT 0
5734: PPUSH
// if not building then
5735: LD_VAR 0 1
5739: NOT
5740: IFFALSE 5744
// exit ;
5742: GO 5787
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5744: LD_ADDR_VAR 0 2
5748: PUSH
5749: LD_VAR 0 1
5753: PUSH
5754: LD_INT 22
5756: PUSH
5757: LD_VAR 0 1
5761: PPUSH
5762: CALL_OW 255
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: LD_INT 58
5773: PUSH
5774: EMPTY
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: IN
5786: ST_TO_ADDR
// end ;
5787: LD_VAR 0 2
5791: RET
// export function IsNotFull ( building ) ; var places ; begin
5792: LD_INT 0
5794: PPUSH
5795: PPUSH
// if not building then
5796: LD_VAR 0 1
5800: NOT
5801: IFFALSE 5805
// exit ;
5803: GO 5976
// result := false ;
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: LD_INT 0
5812: ST_TO_ADDR
// places := 0 ;
5813: LD_ADDR_VAR 0 3
5817: PUSH
5818: LD_INT 0
5820: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5821: LD_VAR 0 1
5825: PPUSH
5826: CALL_OW 266
5830: PUSH
5831: LD_INT 0
5833: DOUBLE
5834: EQUAL
5835: IFTRUE 5893
5837: LD_INT 1
5839: DOUBLE
5840: EQUAL
5841: IFTRUE 5893
5843: LD_INT 6
5845: DOUBLE
5846: EQUAL
5847: IFTRUE 5893
5849: LD_INT 7
5851: DOUBLE
5852: EQUAL
5853: IFTRUE 5893
5855: LD_INT 8
5857: DOUBLE
5858: EQUAL
5859: IFTRUE 5893
5861: LD_INT 4
5863: DOUBLE
5864: EQUAL
5865: IFTRUE 5893
5867: LD_INT 5
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5893
5873: LD_INT 2
5875: DOUBLE
5876: EQUAL
5877: IFTRUE 5893
5879: LD_INT 3
5881: DOUBLE
5882: EQUAL
5883: IFTRUE 5893
5885: LD_INT 35
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5893
5891: GO 5904
5893: POP
// places := 6 ; b_bunker , b_breastwork :
5894: LD_ADDR_VAR 0 3
5898: PUSH
5899: LD_INT 6
5901: ST_TO_ADDR
5902: GO 5949
5904: LD_INT 32
5906: DOUBLE
5907: EQUAL
5908: IFTRUE 5918
5910: LD_INT 31
5912: DOUBLE
5913: EQUAL
5914: IFTRUE 5918
5916: GO 5929
5918: POP
// places := 1 ; b_control_tower :
5919: LD_ADDR_VAR 0 3
5923: PUSH
5924: LD_INT 1
5926: ST_TO_ADDR
5927: GO 5949
5929: LD_INT 36
5931: DOUBLE
5932: EQUAL
5933: IFTRUE 5937
5935: GO 5948
5937: POP
// places := 3 ; end ;
5938: LD_ADDR_VAR 0 3
5942: PUSH
5943: LD_INT 3
5945: ST_TO_ADDR
5946: GO 5949
5948: POP
// if places then
5949: LD_VAR 0 3
5953: IFFALSE 5976
// result := UnitsInside ( building ) < places ;
5955: LD_ADDR_VAR 0 2
5959: PUSH
5960: LD_VAR 0 1
5964: PPUSH
5965: CALL_OW 313
5969: PUSH
5970: LD_VAR 0 3
5974: LESS
5975: ST_TO_ADDR
// end ;
5976: LD_VAR 0 2
5980: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5981: LD_INT 0
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
// tmp := [ ] ;
5987: LD_ADDR_VAR 0 3
5991: PUSH
5992: EMPTY
5993: ST_TO_ADDR
// list := [ ] ;
5994: LD_ADDR_VAR 0 5
5998: PUSH
5999: EMPTY
6000: ST_TO_ADDR
// for i = 16 to 25 do
6001: LD_ADDR_VAR 0 4
6005: PUSH
6006: DOUBLE
6007: LD_INT 16
6009: DEC
6010: ST_TO_ADDR
6011: LD_INT 25
6013: PUSH
6014: FOR_TO
6015: IFFALSE 6088
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_VAR 0 3
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_VAR 0 1
6034: PPUSH
6035: CALL_OW 255
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 91
6046: PUSH
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 6
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 30
6062: PUSH
6063: LD_VAR 0 4
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: ADD
6085: ST_TO_ADDR
6086: GO 6014
6088: POP
6089: POP
// for i = 1 to tmp do
6090: LD_ADDR_VAR 0 4
6094: PUSH
6095: DOUBLE
6096: LD_INT 1
6098: DEC
6099: ST_TO_ADDR
6100: LD_VAR 0 3
6104: PUSH
6105: FOR_TO
6106: IFFALSE 6194
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6108: LD_ADDR_VAR 0 5
6112: PUSH
6113: LD_VAR 0 5
6117: PUSH
6118: LD_VAR 0 3
6122: PUSH
6123: LD_VAR 0 4
6127: ARRAY
6128: PPUSH
6129: CALL_OW 266
6133: PUSH
6134: LD_VAR 0 3
6138: PUSH
6139: LD_VAR 0 4
6143: ARRAY
6144: PPUSH
6145: CALL_OW 250
6149: PUSH
6150: LD_VAR 0 3
6154: PUSH
6155: LD_VAR 0 4
6159: ARRAY
6160: PPUSH
6161: CALL_OW 251
6165: PUSH
6166: LD_VAR 0 3
6170: PUSH
6171: LD_VAR 0 4
6175: ARRAY
6176: PPUSH
6177: CALL_OW 254
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: ADD
6191: ST_TO_ADDR
6192: GO 6105
6194: POP
6195: POP
// result := list ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_VAR 0 5
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 2
6210: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
6218: PPUSH
6219: PPUSH
// if not factory then
6220: LD_VAR 0 1
6224: NOT
6225: IFFALSE 6229
// exit ;
6227: GO 6822
// if control = control_apeman then
6229: LD_VAR 0 4
6233: PUSH
6234: LD_INT 5
6236: EQUAL
6237: IFFALSE 6346
// begin tmp := UnitsInside ( factory ) ;
6239: LD_ADDR_VAR 0 8
6243: PUSH
6244: LD_VAR 0 1
6248: PPUSH
6249: CALL_OW 313
6253: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6254: LD_VAR 0 8
6258: PPUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 12
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 72
6273: NOT
6274: IFFALSE 6284
// control := control_manual ;
6276: LD_ADDR_VAR 0 4
6280: PUSH
6281: LD_INT 1
6283: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6284: LD_ADDR_VAR 0 8
6288: PUSH
6289: LD_VAR 0 1
6293: PPUSH
6294: CALL 5981 0 1
6298: ST_TO_ADDR
// if tmp then
6299: LD_VAR 0 8
6303: IFFALSE 6346
// begin for i in tmp do
6305: LD_ADDR_VAR 0 7
6309: PUSH
6310: LD_VAR 0 8
6314: PUSH
6315: FOR_IN
6316: IFFALSE 6344
// if i [ 1 ] = b_ext_radio then
6318: LD_VAR 0 7
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: PUSH
6327: LD_INT 22
6329: EQUAL
6330: IFFALSE 6342
// begin control := control_remote ;
6332: LD_ADDR_VAR 0 4
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// break ;
6340: GO 6344
// end ;
6342: GO 6315
6344: POP
6345: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6346: LD_VAR 0 1
6350: PPUSH
6351: LD_VAR 0 2
6355: PPUSH
6356: LD_VAR 0 3
6360: PPUSH
6361: LD_VAR 0 4
6365: PPUSH
6366: LD_VAR 0 5
6370: PPUSH
6371: CALL_OW 448
6375: IFFALSE 6410
// begin result := [ chassis , engine , control , weapon ] ;
6377: LD_ADDR_VAR 0 6
6381: PUSH
6382: LD_VAR 0 2
6386: PUSH
6387: LD_VAR 0 3
6391: PUSH
6392: LD_VAR 0 4
6396: PUSH
6397: LD_VAR 0 5
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: ST_TO_ADDR
// exit ;
6408: GO 6822
// end ; _chassis := AvailableChassisList ( factory ) ;
6410: LD_ADDR_VAR 0 9
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 475
6424: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6425: LD_ADDR_VAR 0 11
6429: PUSH
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 476
6439: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6440: LD_ADDR_VAR 0 12
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 477
6454: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6455: LD_ADDR_VAR 0 10
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 478
6469: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6470: LD_VAR 0 9
6474: NOT
6475: PUSH
6476: LD_VAR 0 11
6480: NOT
6481: OR
6482: PUSH
6483: LD_VAR 0 12
6487: NOT
6488: OR
6489: PUSH
6490: LD_VAR 0 10
6494: NOT
6495: OR
6496: IFFALSE 6531
// begin result := [ chassis , engine , control , weapon ] ;
6498: LD_ADDR_VAR 0 6
6502: PUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_VAR 0 3
6512: PUSH
6513: LD_VAR 0 4
6517: PUSH
6518: LD_VAR 0 5
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: ST_TO_ADDR
// exit ;
6529: GO 6822
// end ; if not chassis in _chassis then
6531: LD_VAR 0 2
6535: PUSH
6536: LD_VAR 0 9
6540: IN
6541: NOT
6542: IFFALSE 6568
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6544: LD_ADDR_VAR 0 2
6548: PUSH
6549: LD_VAR 0 9
6553: PUSH
6554: LD_INT 1
6556: PPUSH
6557: LD_VAR 0 9
6561: PPUSH
6562: CALL_OW 12
6566: ARRAY
6567: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6568: LD_VAR 0 2
6572: PPUSH
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL 6827 0 2
6582: NOT
6583: IFFALSE 6642
// repeat engine := _engine [ 1 ] ;
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: LD_VAR 0 11
6594: PUSH
6595: LD_INT 1
6597: ARRAY
6598: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6599: LD_ADDR_VAR 0 11
6603: PUSH
6604: LD_VAR 0 11
6608: PPUSH
6609: LD_INT 1
6611: PPUSH
6612: CALL_OW 3
6616: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6617: LD_VAR 0 2
6621: PPUSH
6622: LD_VAR 0 3
6626: PPUSH
6627: CALL 6827 0 2
6631: PUSH
6632: LD_VAR 0 11
6636: PUSH
6637: EMPTY
6638: EQUAL
6639: OR
6640: IFFALSE 6585
// if not control in _control then
6642: LD_VAR 0 4
6646: PUSH
6647: LD_VAR 0 12
6651: IN
6652: NOT
6653: IFFALSE 6679
// control := _control [ rand ( 1 , _control ) ] ;
6655: LD_ADDR_VAR 0 4
6659: PUSH
6660: LD_VAR 0 12
6664: PUSH
6665: LD_INT 1
6667: PPUSH
6668: LD_VAR 0 12
6672: PPUSH
6673: CALL_OW 12
6677: ARRAY
6678: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6679: LD_VAR 0 2
6683: PPUSH
6684: LD_VAR 0 5
6688: PPUSH
6689: CALL 7047 0 2
6693: NOT
6694: IFFALSE 6753
// repeat weapon := _weapon [ 1 ] ;
6696: LD_ADDR_VAR 0 5
6700: PUSH
6701: LD_VAR 0 10
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6710: LD_ADDR_VAR 0 10
6714: PUSH
6715: LD_VAR 0 10
6719: PPUSH
6720: LD_INT 1
6722: PPUSH
6723: CALL_OW 3
6727: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6728: LD_VAR 0 2
6732: PPUSH
6733: LD_VAR 0 5
6737: PPUSH
6738: CALL 7047 0 2
6742: PUSH
6743: LD_VAR 0 10
6747: PUSH
6748: EMPTY
6749: EQUAL
6750: OR
6751: IFFALSE 6696
// result := [ ] ;
6753: LD_ADDR_VAR 0 6
6757: PUSH
6758: EMPTY
6759: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6760: LD_VAR 0 1
6764: PPUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: LD_VAR 0 4
6779: PPUSH
6780: LD_VAR 0 5
6784: PPUSH
6785: CALL_OW 448
6789: IFFALSE 6822
// result := [ chassis , engine , control , weapon ] ;
6791: LD_ADDR_VAR 0 6
6795: PUSH
6796: LD_VAR 0 2
6800: PUSH
6801: LD_VAR 0 3
6805: PUSH
6806: LD_VAR 0 4
6810: PUSH
6811: LD_VAR 0 5
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 6
6826: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6827: LD_INT 0
6829: PPUSH
// if not chassis or not engine then
6830: LD_VAR 0 1
6834: NOT
6835: PUSH
6836: LD_VAR 0 2
6840: NOT
6841: OR
6842: IFFALSE 6846
// exit ;
6844: GO 7042
// case engine of engine_solar :
6846: LD_VAR 0 2
6850: PUSH
6851: LD_INT 2
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6897
6859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6860: LD_ADDR_VAR 0 3
6864: PUSH
6865: LD_INT 11
6867: PUSH
6868: LD_INT 12
6870: PUSH
6871: LD_INT 13
6873: PUSH
6874: LD_INT 14
6876: PUSH
6877: LD_INT 1
6879: PUSH
6880: LD_INT 2
6882: PUSH
6883: LD_INT 3
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 7026
6897: LD_INT 1
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 6967
6905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_INT 11
6913: PUSH
6914: LD_INT 12
6916: PUSH
6917: LD_INT 13
6919: PUSH
6920: LD_INT 14
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: LD_INT 4
6934: PUSH
6935: LD_INT 5
6937: PUSH
6938: LD_INT 21
6940: PUSH
6941: LD_INT 23
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_INT 24
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: ST_TO_ADDR
6965: GO 7026
6967: LD_INT 3
6969: DOUBLE
6970: EQUAL
6971: IFTRUE 6975
6973: GO 7025
6975: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 13
6983: PUSH
6984: LD_INT 14
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: LD_INT 21
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 23
7007: PUSH
7008: LD_INT 24
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: ST_TO_ADDR
7023: GO 7026
7025: POP
// result := ( chassis in result ) ;
7026: LD_ADDR_VAR 0 3
7030: PUSH
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 3
7040: IN
7041: ST_TO_ADDR
// end ;
7042: LD_VAR 0 3
7046: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7047: LD_INT 0
7049: PPUSH
// if not chassis or not weapon then
7050: LD_VAR 0 1
7054: NOT
7055: PUSH
7056: LD_VAR 0 2
7060: NOT
7061: OR
7062: IFFALSE 7066
// exit ;
7064: GO 8126
// case weapon of us_machine_gun :
7066: LD_VAR 0 2
7070: PUSH
7071: LD_INT 2
7073: DOUBLE
7074: EQUAL
7075: IFTRUE 7079
7077: GO 7109
7079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7080: LD_ADDR_VAR 0 3
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: LD_INT 4
7096: PUSH
7097: LD_INT 5
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 8110
7109: LD_INT 3
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7147
7117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: LD_INT 2
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: LD_INT 4
7134: PUSH
7135: LD_INT 5
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: ST_TO_ADDR
7145: GO 8110
7147: LD_INT 11
7149: DOUBLE
7150: EQUAL
7151: IFTRUE 7155
7153: GO 7185
7155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7156: LD_ADDR_VAR 0 3
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: LD_INT 2
7166: PUSH
7167: LD_INT 3
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: LD_INT 5
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: ST_TO_ADDR
7183: GO 8110
7185: LD_INT 4
7187: DOUBLE
7188: EQUAL
7189: IFTRUE 7193
7191: GO 7219
7193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7194: LD_ADDR_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: LD_INT 3
7204: PUSH
7205: LD_INT 4
7207: PUSH
7208: LD_INT 5
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: ST_TO_ADDR
7217: GO 8110
7219: LD_INT 5
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7253
7227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 3
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: ST_TO_ADDR
7251: GO 8110
7253: LD_INT 9
7255: DOUBLE
7256: EQUAL
7257: IFTRUE 7261
7259: GO 7287
7261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: LD_INT 4
7275: PUSH
7276: LD_INT 5
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: ST_TO_ADDR
7285: GO 8110
7287: LD_INT 7
7289: DOUBLE
7290: EQUAL
7291: IFTRUE 7295
7293: GO 7321
7295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7296: LD_ADDR_VAR 0 3
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: ST_TO_ADDR
7319: GO 8110
7321: LD_INT 12
7323: DOUBLE
7324: EQUAL
7325: IFTRUE 7329
7327: GO 7355
7329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_INT 2
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 4
7343: PUSH
7344: LD_INT 5
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 8110
7355: LD_INT 13
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7389
7363: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 3
7374: PUSH
7375: LD_INT 4
7377: PUSH
7378: LD_INT 5
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: ST_TO_ADDR
7387: GO 8110
7389: LD_INT 14
7391: DOUBLE
7392: EQUAL
7393: IFTRUE 7397
7395: GO 7415
7397: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: LD_INT 4
7405: PUSH
7406: LD_INT 5
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: ST_TO_ADDR
7413: GO 8110
7415: LD_INT 6
7417: DOUBLE
7418: EQUAL
7419: IFTRUE 7423
7421: GO 7441
7423: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7424: LD_ADDR_VAR 0 3
7428: PUSH
7429: LD_INT 4
7431: PUSH
7432: LD_INT 5
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: ST_TO_ADDR
7439: GO 8110
7441: LD_INT 10
7443: DOUBLE
7444: EQUAL
7445: IFTRUE 7449
7447: GO 7467
7449: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7450: LD_ADDR_VAR 0 3
7454: PUSH
7455: LD_INT 4
7457: PUSH
7458: LD_INT 5
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: ST_TO_ADDR
7465: GO 8110
7467: LD_INT 22
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7501
7475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: LD_INT 11
7483: PUSH
7484: LD_INT 12
7486: PUSH
7487: LD_INT 13
7489: PUSH
7490: LD_INT 14
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: ST_TO_ADDR
7499: GO 8110
7501: LD_INT 23
7503: DOUBLE
7504: EQUAL
7505: IFTRUE 7509
7507: GO 7535
7509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7510: LD_ADDR_VAR 0 3
7514: PUSH
7515: LD_INT 11
7517: PUSH
7518: LD_INT 12
7520: PUSH
7521: LD_INT 13
7523: PUSH
7524: LD_INT 14
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: ST_TO_ADDR
7533: GO 8110
7535: LD_INT 24
7537: DOUBLE
7538: EQUAL
7539: IFTRUE 7543
7541: GO 7569
7543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7544: LD_ADDR_VAR 0 3
7548: PUSH
7549: LD_INT 11
7551: PUSH
7552: LD_INT 12
7554: PUSH
7555: LD_INT 13
7557: PUSH
7558: LD_INT 14
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: ST_TO_ADDR
7567: GO 8110
7569: LD_INT 30
7571: DOUBLE
7572: EQUAL
7573: IFTRUE 7577
7575: GO 7603
7577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7578: LD_ADDR_VAR 0 3
7582: PUSH
7583: LD_INT 11
7585: PUSH
7586: LD_INT 12
7588: PUSH
7589: LD_INT 13
7591: PUSH
7592: LD_INT 14
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: ST_TO_ADDR
7601: GO 8110
7603: LD_INT 25
7605: DOUBLE
7606: EQUAL
7607: IFTRUE 7611
7609: GO 7629
7611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7612: LD_ADDR_VAR 0 3
7616: PUSH
7617: LD_INT 13
7619: PUSH
7620: LD_INT 14
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: ST_TO_ADDR
7627: GO 8110
7629: LD_INT 27
7631: DOUBLE
7632: EQUAL
7633: IFTRUE 7637
7635: GO 7655
7637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7638: LD_ADDR_VAR 0 3
7642: PUSH
7643: LD_INT 13
7645: PUSH
7646: LD_INT 14
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: ST_TO_ADDR
7653: GO 8110
7655: LD_INT 92
7657: DOUBLE
7658: EQUAL
7659: IFTRUE 7663
7661: GO 7689
7663: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7664: LD_ADDR_VAR 0 3
7668: PUSH
7669: LD_INT 11
7671: PUSH
7672: LD_INT 12
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: LD_INT 14
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: ST_TO_ADDR
7687: GO 8110
7689: LD_INT 28
7691: DOUBLE
7692: EQUAL
7693: IFTRUE 7697
7695: GO 7715
7697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7698: LD_ADDR_VAR 0 3
7702: PUSH
7703: LD_INT 13
7705: PUSH
7706: LD_INT 14
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: ST_TO_ADDR
7713: GO 8110
7715: LD_INT 29
7717: DOUBLE
7718: EQUAL
7719: IFTRUE 7723
7721: GO 7741
7723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7724: LD_ADDR_VAR 0 3
7728: PUSH
7729: LD_INT 13
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: ST_TO_ADDR
7739: GO 8110
7741: LD_INT 31
7743: DOUBLE
7744: EQUAL
7745: IFTRUE 7749
7747: GO 7767
7749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7750: LD_ADDR_VAR 0 3
7754: PUSH
7755: LD_INT 13
7757: PUSH
7758: LD_INT 14
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: ST_TO_ADDR
7765: GO 8110
7767: LD_INT 26
7769: DOUBLE
7770: EQUAL
7771: IFTRUE 7775
7773: GO 7793
7775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: LD_INT 13
7783: PUSH
7784: LD_INT 14
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: ST_TO_ADDR
7791: GO 8110
7793: LD_INT 42
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 7827
7801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 21
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 23
7815: PUSH
7816: LD_INT 24
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
7825: GO 8110
7827: LD_INT 43
7829: DOUBLE
7830: EQUAL
7831: IFTRUE 7835
7833: GO 7861
7835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 22
7846: PUSH
7847: LD_INT 23
7849: PUSH
7850: LD_INT 24
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: ST_TO_ADDR
7859: GO 8110
7861: LD_INT 44
7863: DOUBLE
7864: EQUAL
7865: IFTRUE 7869
7867: GO 7895
7869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 21
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 23
7883: PUSH
7884: LD_INT 24
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: ST_TO_ADDR
7893: GO 8110
7895: LD_INT 45
7897: DOUBLE
7898: EQUAL
7899: IFTRUE 7903
7901: GO 7929
7903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7904: LD_ADDR_VAR 0 3
7908: PUSH
7909: LD_INT 21
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 23
7917: PUSH
7918: LD_INT 24
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
7927: GO 8110
7929: LD_INT 49
7931: DOUBLE
7932: EQUAL
7933: IFTRUE 7937
7935: GO 7963
7937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7938: LD_ADDR_VAR 0 3
7942: PUSH
7943: LD_INT 21
7945: PUSH
7946: LD_INT 22
7948: PUSH
7949: LD_INT 23
7951: PUSH
7952: LD_INT 24
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
7961: GO 8110
7963: LD_INT 51
7965: DOUBLE
7966: EQUAL
7967: IFTRUE 7971
7969: GO 7997
7971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7972: LD_ADDR_VAR 0 3
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_INT 23
7985: PUSH
7986: LD_INT 24
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: ST_TO_ADDR
7995: GO 8110
7997: LD_INT 52
7999: DOUBLE
8000: EQUAL
8001: IFTRUE 8005
8003: GO 8031
8005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8006: LD_ADDR_VAR 0 3
8010: PUSH
8011: LD_INT 21
8013: PUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 23
8019: PUSH
8020: LD_INT 24
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
8029: GO 8110
8031: LD_INT 53
8033: DOUBLE
8034: EQUAL
8035: IFTRUE 8039
8037: GO 8057
8039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8040: LD_ADDR_VAR 0 3
8044: PUSH
8045: LD_INT 23
8047: PUSH
8048: LD_INT 24
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: ST_TO_ADDR
8055: GO 8110
8057: LD_INT 46
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8083
8065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8066: LD_ADDR_VAR 0 3
8070: PUSH
8071: LD_INT 23
8073: PUSH
8074: LD_INT 24
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: ST_TO_ADDR
8081: GO 8110
8083: LD_INT 47
8085: DOUBLE
8086: EQUAL
8087: IFTRUE 8091
8089: GO 8109
8091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: LD_INT 23
8099: PUSH
8100: LD_INT 24
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: ST_TO_ADDR
8107: GO 8110
8109: POP
// result := ( chassis in result ) ;
8110: LD_ADDR_VAR 0 3
8114: PUSH
8115: LD_VAR 0 1
8119: PUSH
8120: LD_VAR 0 3
8124: IN
8125: ST_TO_ADDR
// end ;
8126: LD_VAR 0 3
8130: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8131: LD_INT 0
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
8137: PPUSH
8138: PPUSH
8139: PPUSH
// result := array ;
8140: LD_ADDR_VAR 0 5
8144: PUSH
8145: LD_VAR 0 1
8149: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8150: LD_VAR 0 1
8154: NOT
8155: PUSH
8156: LD_VAR 0 2
8160: NOT
8161: OR
8162: PUSH
8163: LD_VAR 0 3
8167: NOT
8168: OR
8169: PUSH
8170: LD_VAR 0 2
8174: PUSH
8175: LD_VAR 0 1
8179: GREATER
8180: OR
8181: PUSH
8182: LD_VAR 0 3
8186: PUSH
8187: LD_VAR 0 1
8191: GREATER
8192: OR
8193: IFFALSE 8197
// exit ;
8195: GO 8493
// if direction then
8197: LD_VAR 0 4
8201: IFFALSE 8265
// begin d := 1 ;
8203: LD_ADDR_VAR 0 9
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// if i_from > i_to then
8211: LD_VAR 0 2
8215: PUSH
8216: LD_VAR 0 3
8220: GREATER
8221: IFFALSE 8247
// length := ( array - i_from ) + i_to else
8223: LD_ADDR_VAR 0 11
8227: PUSH
8228: LD_VAR 0 1
8232: PUSH
8233: LD_VAR 0 2
8237: MINUS
8238: PUSH
8239: LD_VAR 0 3
8243: PLUS
8244: ST_TO_ADDR
8245: GO 8263
// length := i_to - i_from ;
8247: LD_ADDR_VAR 0 11
8251: PUSH
8252: LD_VAR 0 3
8256: PUSH
8257: LD_VAR 0 2
8261: MINUS
8262: ST_TO_ADDR
// end else
8263: GO 8326
// begin d := - 1 ;
8265: LD_ADDR_VAR 0 9
8269: PUSH
8270: LD_INT 1
8272: NEG
8273: ST_TO_ADDR
// if i_from > i_to then
8274: LD_VAR 0 2
8278: PUSH
8279: LD_VAR 0 3
8283: GREATER
8284: IFFALSE 8304
// length := i_from - i_to else
8286: LD_ADDR_VAR 0 11
8290: PUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_VAR 0 3
8300: MINUS
8301: ST_TO_ADDR
8302: GO 8326
// length := ( array - i_to ) + i_from ;
8304: LD_ADDR_VAR 0 11
8308: PUSH
8309: LD_VAR 0 1
8313: PUSH
8314: LD_VAR 0 3
8318: MINUS
8319: PUSH
8320: LD_VAR 0 2
8324: PLUS
8325: ST_TO_ADDR
// end ; if not length then
8326: LD_VAR 0 11
8330: NOT
8331: IFFALSE 8335
// exit ;
8333: GO 8493
// tmp := array ;
8335: LD_ADDR_VAR 0 10
8339: PUSH
8340: LD_VAR 0 1
8344: ST_TO_ADDR
// for i = 1 to length do
8345: LD_ADDR_VAR 0 6
8349: PUSH
8350: DOUBLE
8351: LD_INT 1
8353: DEC
8354: ST_TO_ADDR
8355: LD_VAR 0 11
8359: PUSH
8360: FOR_TO
8361: IFFALSE 8481
// begin for j = 1 to array do
8363: LD_ADDR_VAR 0 7
8367: PUSH
8368: DOUBLE
8369: LD_INT 1
8371: DEC
8372: ST_TO_ADDR
8373: LD_VAR 0 1
8377: PUSH
8378: FOR_TO
8379: IFFALSE 8467
// begin k := j + d ;
8381: LD_ADDR_VAR 0 8
8385: PUSH
8386: LD_VAR 0 7
8390: PUSH
8391: LD_VAR 0 9
8395: PLUS
8396: ST_TO_ADDR
// if k > array then
8397: LD_VAR 0 8
8401: PUSH
8402: LD_VAR 0 1
8406: GREATER
8407: IFFALSE 8417
// k := 1 ;
8409: LD_ADDR_VAR 0 8
8413: PUSH
8414: LD_INT 1
8416: ST_TO_ADDR
// if not k then
8417: LD_VAR 0 8
8421: NOT
8422: IFFALSE 8434
// k := array ;
8424: LD_ADDR_VAR 0 8
8428: PUSH
8429: LD_VAR 0 1
8433: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8434: LD_ADDR_VAR 0 10
8438: PUSH
8439: LD_VAR 0 10
8443: PPUSH
8444: LD_VAR 0 8
8448: PPUSH
8449: LD_VAR 0 1
8453: PUSH
8454: LD_VAR 0 7
8458: ARRAY
8459: PPUSH
8460: CALL_OW 1
8464: ST_TO_ADDR
// end ;
8465: GO 8378
8467: POP
8468: POP
// array := tmp ;
8469: LD_ADDR_VAR 0 1
8473: PUSH
8474: LD_VAR 0 10
8478: ST_TO_ADDR
// end ;
8479: GO 8360
8481: POP
8482: POP
// result := array ;
8483: LD_ADDR_VAR 0 5
8487: PUSH
8488: LD_VAR 0 1
8492: ST_TO_ADDR
// end ;
8493: LD_VAR 0 5
8497: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8498: LD_INT 0
8500: PPUSH
8501: PPUSH
// result := 0 ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_INT 0
8509: ST_TO_ADDR
// if not array or not value in array then
8510: LD_VAR 0 1
8514: NOT
8515: PUSH
8516: LD_VAR 0 2
8520: PUSH
8521: LD_VAR 0 1
8525: IN
8526: NOT
8527: OR
8528: IFFALSE 8532
// exit ;
8530: GO 8586
// for i = 1 to array do
8532: LD_ADDR_VAR 0 4
8536: PUSH
8537: DOUBLE
8538: LD_INT 1
8540: DEC
8541: ST_TO_ADDR
8542: LD_VAR 0 1
8546: PUSH
8547: FOR_TO
8548: IFFALSE 8584
// if value = array [ i ] then
8550: LD_VAR 0 2
8554: PUSH
8555: LD_VAR 0 1
8559: PUSH
8560: LD_VAR 0 4
8564: ARRAY
8565: EQUAL
8566: IFFALSE 8582
// begin result := i ;
8568: LD_ADDR_VAR 0 3
8572: PUSH
8573: LD_VAR 0 4
8577: ST_TO_ADDR
// exit ;
8578: POP
8579: POP
8580: GO 8586
// end ;
8582: GO 8547
8584: POP
8585: POP
// end ;
8586: LD_VAR 0 3
8590: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8591: LD_INT 0
8593: PPUSH
// vc_chassis := chassis ;
8594: LD_ADDR_OWVAR 37
8598: PUSH
8599: LD_VAR 0 1
8603: ST_TO_ADDR
// vc_engine := engine ;
8604: LD_ADDR_OWVAR 39
8608: PUSH
8609: LD_VAR 0 2
8613: ST_TO_ADDR
// vc_control := control ;
8614: LD_ADDR_OWVAR 38
8618: PUSH
8619: LD_VAR 0 3
8623: ST_TO_ADDR
// vc_weapon := weapon ;
8624: LD_ADDR_OWVAR 40
8628: PUSH
8629: LD_VAR 0 4
8633: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8634: LD_ADDR_OWVAR 41
8638: PUSH
8639: LD_VAR 0 5
8643: ST_TO_ADDR
// end ;
8644: LD_VAR 0 6
8648: RET
// export function WantPlant ( unit ) ; var task ; begin
8649: LD_INT 0
8651: PPUSH
8652: PPUSH
// result := false ;
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: LD_INT 0
8660: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8661: LD_ADDR_VAR 0 3
8665: PUSH
8666: LD_VAR 0 1
8670: PPUSH
8671: CALL_OW 437
8675: ST_TO_ADDR
// if task then
8676: LD_VAR 0 3
8680: IFFALSE 8708
// if task [ 1 ] [ 1 ] = p then
8682: LD_VAR 0 3
8686: PUSH
8687: LD_INT 1
8689: ARRAY
8690: PUSH
8691: LD_INT 1
8693: ARRAY
8694: PUSH
8695: LD_STRING p
8697: EQUAL
8698: IFFALSE 8708
// result := true ;
8700: LD_ADDR_VAR 0 2
8704: PUSH
8705: LD_INT 1
8707: ST_TO_ADDR
// end ;
8708: LD_VAR 0 2
8712: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
// if pos < 1 then
8719: LD_VAR 0 2
8723: PUSH
8724: LD_INT 1
8726: LESS
8727: IFFALSE 8731
// exit ;
8729: GO 9034
// if pos = 1 then
8731: LD_VAR 0 2
8735: PUSH
8736: LD_INT 1
8738: EQUAL
8739: IFFALSE 8772
// result := Replace ( arr , pos [ 1 ] , value ) else
8741: LD_ADDR_VAR 0 4
8745: PUSH
8746: LD_VAR 0 1
8750: PPUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: LD_VAR 0 3
8764: PPUSH
8765: CALL_OW 1
8769: ST_TO_ADDR
8770: GO 9034
// begin tmp := arr ;
8772: LD_ADDR_VAR 0 6
8776: PUSH
8777: LD_VAR 0 1
8781: ST_TO_ADDR
// s_arr := [ tmp ] ;
8782: LD_ADDR_VAR 0 7
8786: PUSH
8787: LD_VAR 0 6
8791: PUSH
8792: EMPTY
8793: LIST
8794: ST_TO_ADDR
// for i = 1 to pos - 1 do
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: DOUBLE
8801: LD_INT 1
8803: DEC
8804: ST_TO_ADDR
8805: LD_VAR 0 2
8809: PUSH
8810: LD_INT 1
8812: MINUS
8813: PUSH
8814: FOR_TO
8815: IFFALSE 8860
// begin tmp := tmp [ pos [ i ] ] ;
8817: LD_ADDR_VAR 0 6
8821: PUSH
8822: LD_VAR 0 6
8826: PUSH
8827: LD_VAR 0 2
8831: PUSH
8832: LD_VAR 0 5
8836: ARRAY
8837: ARRAY
8838: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8839: LD_ADDR_VAR 0 7
8843: PUSH
8844: LD_VAR 0 7
8848: PUSH
8849: LD_VAR 0 6
8853: PUSH
8854: EMPTY
8855: LIST
8856: ADD
8857: ST_TO_ADDR
// end ;
8858: GO 8814
8860: POP
8861: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8862: LD_ADDR_VAR 0 6
8866: PUSH
8867: LD_VAR 0 6
8871: PPUSH
8872: LD_VAR 0 2
8876: PUSH
8877: LD_VAR 0 2
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 3
8887: PPUSH
8888: CALL_OW 1
8892: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8893: LD_ADDR_VAR 0 7
8897: PUSH
8898: LD_VAR 0 7
8902: PPUSH
8903: LD_VAR 0 7
8907: PPUSH
8908: LD_VAR 0 6
8912: PPUSH
8913: CALL_OW 1
8917: ST_TO_ADDR
// for i = s_arr downto 2 do
8918: LD_ADDR_VAR 0 5
8922: PUSH
8923: DOUBLE
8924: LD_VAR 0 7
8928: INC
8929: ST_TO_ADDR
8930: LD_INT 2
8932: PUSH
8933: FOR_DOWNTO
8934: IFFALSE 9018
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8936: LD_ADDR_VAR 0 6
8940: PUSH
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 5
8950: PUSH
8951: LD_INT 1
8953: MINUS
8954: ARRAY
8955: PPUSH
8956: LD_VAR 0 2
8960: PUSH
8961: LD_VAR 0 5
8965: PUSH
8966: LD_INT 1
8968: MINUS
8969: ARRAY
8970: PPUSH
8971: LD_VAR 0 7
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 1
8986: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8987: LD_ADDR_VAR 0 7
8991: PUSH
8992: LD_VAR 0 7
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_INT 1
9004: MINUS
9005: PPUSH
9006: LD_VAR 0 6
9010: PPUSH
9011: CALL_OW 1
9015: ST_TO_ADDR
// end ;
9016: GO 8933
9018: POP
9019: POP
// result := s_arr [ 1 ] ;
9020: LD_ADDR_VAR 0 4
9024: PUSH
9025: LD_VAR 0 7
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: ST_TO_ADDR
// end ; end ;
9034: LD_VAR 0 4
9038: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9039: LD_INT 0
9041: PPUSH
9042: PPUSH
// if not list then
9043: LD_VAR 0 1
9047: NOT
9048: IFFALSE 9052
// exit ;
9050: GO 9143
// i := list [ pos1 ] ;
9052: LD_ADDR_VAR 0 5
9056: PUSH
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: ARRAY
9067: ST_TO_ADDR
// if not i then
9068: LD_VAR 0 5
9072: NOT
9073: IFFALSE 9077
// exit ;
9075: GO 9143
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9077: LD_ADDR_VAR 0 1
9081: PUSH
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_VAR 0 2
9091: PPUSH
9092: LD_VAR 0 1
9096: PUSH
9097: LD_VAR 0 3
9101: ARRAY
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9108: LD_ADDR_VAR 0 1
9112: PUSH
9113: LD_VAR 0 1
9117: PPUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: LD_VAR 0 5
9127: PPUSH
9128: CALL_OW 1
9132: ST_TO_ADDR
// result := list ;
9133: LD_ADDR_VAR 0 4
9137: PUSH
9138: LD_VAR 0 1
9142: ST_TO_ADDR
// end ;
9143: LD_VAR 0 4
9147: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9148: LD_INT 0
9150: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9151: LD_ADDR_VAR 0 5
9155: PUSH
9156: LD_VAR 0 1
9160: PPUSH
9161: CALL_OW 250
9165: PPUSH
9166: LD_VAR 0 1
9170: PPUSH
9171: CALL_OW 251
9175: PPUSH
9176: LD_VAR 0 2
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_VAR 0 4
9190: PPUSH
9191: CALL 9201 0 5
9195: ST_TO_ADDR
// end ;
9196: LD_VAR 0 5
9200: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9201: LD_INT 0
9203: PPUSH
9204: PPUSH
9205: PPUSH
9206: PPUSH
// if not list then
9207: LD_VAR 0 3
9211: NOT
9212: IFFALSE 9216
// exit ;
9214: GO 9604
// result := [ ] ;
9216: LD_ADDR_VAR 0 6
9220: PUSH
9221: EMPTY
9222: ST_TO_ADDR
// for i in list do
9223: LD_ADDR_VAR 0 7
9227: PUSH
9228: LD_VAR 0 3
9232: PUSH
9233: FOR_IN
9234: IFFALSE 9436
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: LD_VAR 0 7
9245: PPUSH
9246: LD_VAR 0 1
9250: PPUSH
9251: LD_VAR 0 2
9255: PPUSH
9256: CALL_OW 297
9260: ST_TO_ADDR
// if not result then
9261: LD_VAR 0 6
9265: NOT
9266: IFFALSE 9292
// result := [ [ i , tmp ] ] else
9268: LD_ADDR_VAR 0 6
9272: PUSH
9273: LD_VAR 0 7
9277: PUSH
9278: LD_VAR 0 9
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: ST_TO_ADDR
9290: GO 9434
// begin if result [ result ] [ 2 ] < tmp then
9292: LD_VAR 0 6
9296: PUSH
9297: LD_VAR 0 6
9301: ARRAY
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PUSH
9307: LD_VAR 0 9
9311: LESS
9312: IFFALSE 9354
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9314: LD_ADDR_VAR 0 6
9318: PUSH
9319: LD_VAR 0 6
9323: PPUSH
9324: LD_VAR 0 6
9328: PUSH
9329: LD_INT 1
9331: PLUS
9332: PPUSH
9333: LD_VAR 0 7
9337: PUSH
9338: LD_VAR 0 9
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 2
9351: ST_TO_ADDR
9352: GO 9434
// for j = 1 to result do
9354: LD_ADDR_VAR 0 8
9358: PUSH
9359: DOUBLE
9360: LD_INT 1
9362: DEC
9363: ST_TO_ADDR
9364: LD_VAR 0 6
9368: PUSH
9369: FOR_TO
9370: IFFALSE 9432
// begin if tmp < result [ j ] [ 2 ] then
9372: LD_VAR 0 9
9376: PUSH
9377: LD_VAR 0 6
9381: PUSH
9382: LD_VAR 0 8
9386: ARRAY
9387: PUSH
9388: LD_INT 2
9390: ARRAY
9391: LESS
9392: IFFALSE 9430
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9394: LD_ADDR_VAR 0 6
9398: PUSH
9399: LD_VAR 0 6
9403: PPUSH
9404: LD_VAR 0 8
9408: PPUSH
9409: LD_VAR 0 7
9413: PUSH
9414: LD_VAR 0 9
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PPUSH
9423: CALL_OW 2
9427: ST_TO_ADDR
// break ;
9428: GO 9432
// end ; end ;
9430: GO 9369
9432: POP
9433: POP
// end ; end ;
9434: GO 9233
9436: POP
9437: POP
// if result and not asc then
9438: LD_VAR 0 6
9442: PUSH
9443: LD_VAR 0 4
9447: NOT
9448: AND
9449: IFFALSE 9524
// begin tmp := result ;
9451: LD_ADDR_VAR 0 9
9455: PUSH
9456: LD_VAR 0 6
9460: ST_TO_ADDR
// for i = tmp downto 1 do
9461: LD_ADDR_VAR 0 7
9465: PUSH
9466: DOUBLE
9467: LD_VAR 0 9
9471: INC
9472: ST_TO_ADDR
9473: LD_INT 1
9475: PUSH
9476: FOR_DOWNTO
9477: IFFALSE 9522
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9479: LD_ADDR_VAR 0 6
9483: PUSH
9484: LD_VAR 0 6
9488: PPUSH
9489: LD_VAR 0 9
9493: PUSH
9494: LD_VAR 0 7
9498: MINUS
9499: PUSH
9500: LD_INT 1
9502: PLUS
9503: PPUSH
9504: LD_VAR 0 9
9508: PUSH
9509: LD_VAR 0 7
9513: ARRAY
9514: PPUSH
9515: CALL_OW 1
9519: ST_TO_ADDR
9520: GO 9476
9522: POP
9523: POP
// end ; tmp := [ ] ;
9524: LD_ADDR_VAR 0 9
9528: PUSH
9529: EMPTY
9530: ST_TO_ADDR
// if mode then
9531: LD_VAR 0 5
9535: IFFALSE 9604
// begin for i = 1 to result do
9537: LD_ADDR_VAR 0 7
9541: PUSH
9542: DOUBLE
9543: LD_INT 1
9545: DEC
9546: ST_TO_ADDR
9547: LD_VAR 0 6
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9592
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9555: LD_ADDR_VAR 0 9
9559: PUSH
9560: LD_VAR 0 9
9564: PPUSH
9565: LD_VAR 0 7
9569: PPUSH
9570: LD_VAR 0 6
9574: PUSH
9575: LD_VAR 0 7
9579: ARRAY
9580: PUSH
9581: LD_INT 1
9583: ARRAY
9584: PPUSH
9585: CALL_OW 1
9589: ST_TO_ADDR
9590: GO 9552
9592: POP
9593: POP
// result := tmp ;
9594: LD_ADDR_VAR 0 6
9598: PUSH
9599: LD_VAR 0 9
9603: ST_TO_ADDR
// end ; end ;
9604: LD_VAR 0 6
9608: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9609: LD_INT 0
9611: PPUSH
9612: PPUSH
9613: PPUSH
9614: PPUSH
9615: PPUSH
9616: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9617: LD_ADDR_VAR 0 5
9621: PUSH
9622: LD_INT 0
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: LD_INT 0
9630: PUSH
9631: EMPTY
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
// if not x or not y then
9639: LD_VAR 0 2
9643: NOT
9644: PUSH
9645: LD_VAR 0 3
9649: NOT
9650: OR
9651: IFFALSE 9655
// exit ;
9653: GO 11305
// if not range then
9655: LD_VAR 0 4
9659: NOT
9660: IFFALSE 9670
// range := 10 ;
9662: LD_ADDR_VAR 0 4
9666: PUSH
9667: LD_INT 10
9669: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9670: LD_ADDR_VAR 0 8
9674: PUSH
9675: LD_INT 81
9677: PUSH
9678: LD_VAR 0 1
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 92
9689: PUSH
9690: LD_VAR 0 2
9694: PUSH
9695: LD_VAR 0 3
9699: PUSH
9700: LD_VAR 0 4
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 21
9716: PUSH
9717: LD_INT 3
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 69
9737: ST_TO_ADDR
// if not tmp then
9738: LD_VAR 0 8
9742: NOT
9743: IFFALSE 9747
// exit ;
9745: GO 11305
// for i in tmp do
9747: LD_ADDR_VAR 0 6
9751: PUSH
9752: LD_VAR 0 8
9756: PUSH
9757: FOR_IN
9758: IFFALSE 11280
// begin points := [ 0 , 0 , 0 ] ;
9760: LD_ADDR_VAR 0 9
9764: PUSH
9765: LD_INT 0
9767: PUSH
9768: LD_INT 0
9770: PUSH
9771: LD_INT 0
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: ST_TO_ADDR
// bpoints := 1 ;
9779: LD_ADDR_VAR 0 10
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9787: LD_VAR 0 6
9791: PPUSH
9792: CALL_OW 247
9796: PUSH
9797: LD_INT 1
9799: DOUBLE
9800: EQUAL
9801: IFTRUE 9805
9803: GO 10383
9805: POP
// begin if GetClass ( i ) = 1 then
9806: LD_VAR 0 6
9810: PPUSH
9811: CALL_OW 257
9815: PUSH
9816: LD_INT 1
9818: EQUAL
9819: IFFALSE 9840
// points := [ 10 , 5 , 3 ] ;
9821: LD_ADDR_VAR 0 9
9825: PUSH
9826: LD_INT 10
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: LD_INT 3
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9840: LD_VAR 0 6
9844: PPUSH
9845: CALL_OW 257
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 3
9855: PUSH
9856: LD_INT 4
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: IN
9864: IFFALSE 9885
// points := [ 3 , 2 , 1 ] ;
9866: LD_ADDR_VAR 0 9
9870: PUSH
9871: LD_INT 3
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9885: LD_VAR 0 6
9889: PPUSH
9890: CALL_OW 257
9894: PUSH
9895: LD_INT 5
9897: EQUAL
9898: IFFALSE 9919
// points := [ 130 , 5 , 2 ] ;
9900: LD_ADDR_VAR 0 9
9904: PUSH
9905: LD_INT 130
9907: PUSH
9908: LD_INT 5
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9919: LD_VAR 0 6
9923: PPUSH
9924: CALL_OW 257
9928: PUSH
9929: LD_INT 8
9931: EQUAL
9932: IFFALSE 9953
// points := [ 35 , 35 , 30 ] ;
9934: LD_ADDR_VAR 0 9
9938: PUSH
9939: LD_INT 35
9941: PUSH
9942: LD_INT 35
9944: PUSH
9945: LD_INT 30
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9953: LD_VAR 0 6
9957: PPUSH
9958: CALL_OW 257
9962: PUSH
9963: LD_INT 9
9965: EQUAL
9966: IFFALSE 9987
// points := [ 20 , 55 , 40 ] ;
9968: LD_ADDR_VAR 0 9
9972: PUSH
9973: LD_INT 20
9975: PUSH
9976: LD_INT 55
9978: PUSH
9979: LD_INT 40
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9987: LD_VAR 0 6
9991: PPUSH
9992: CALL_OW 257
9996: PUSH
9997: LD_INT 12
9999: PUSH
10000: LD_INT 16
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: IN
10007: IFFALSE 10028
// points := [ 5 , 3 , 2 ] ;
10009: LD_ADDR_VAR 0 9
10013: PUSH
10014: LD_INT 5
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10028: LD_VAR 0 6
10032: PPUSH
10033: CALL_OW 257
10037: PUSH
10038: LD_INT 17
10040: EQUAL
10041: IFFALSE 10062
// points := [ 100 , 50 , 75 ] ;
10043: LD_ADDR_VAR 0 9
10047: PUSH
10048: LD_INT 100
10050: PUSH
10051: LD_INT 50
10053: PUSH
10054: LD_INT 75
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: LIST
10061: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10062: LD_VAR 0 6
10066: PPUSH
10067: CALL_OW 257
10071: PUSH
10072: LD_INT 15
10074: EQUAL
10075: IFFALSE 10096
// points := [ 10 , 5 , 3 ] ;
10077: LD_ADDR_VAR 0 9
10081: PUSH
10082: LD_INT 10
10084: PUSH
10085: LD_INT 5
10087: PUSH
10088: LD_INT 3
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10096: LD_VAR 0 6
10100: PPUSH
10101: CALL_OW 257
10105: PUSH
10106: LD_INT 14
10108: EQUAL
10109: IFFALSE 10130
// points := [ 10 , 0 , 0 ] ;
10111: LD_ADDR_VAR 0 9
10115: PUSH
10116: LD_INT 10
10118: PUSH
10119: LD_INT 0
10121: PUSH
10122: LD_INT 0
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10130: LD_VAR 0 6
10134: PPUSH
10135: CALL_OW 257
10139: PUSH
10140: LD_INT 11
10142: EQUAL
10143: IFFALSE 10164
// points := [ 30 , 10 , 5 ] ;
10145: LD_ADDR_VAR 0 9
10149: PUSH
10150: LD_INT 30
10152: PUSH
10153: LD_INT 10
10155: PUSH
10156: LD_INT 5
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10164: LD_VAR 0 1
10168: PPUSH
10169: LD_INT 5
10171: PPUSH
10172: CALL_OW 321
10176: PUSH
10177: LD_INT 2
10179: EQUAL
10180: IFFALSE 10197
// bpoints := bpoints * 1.8 ;
10182: LD_ADDR_VAR 0 10
10186: PUSH
10187: LD_VAR 0 10
10191: PUSH
10192: LD_REAL  1.80000000000000E+0000
10195: MUL
10196: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 257
10206: PUSH
10207: LD_INT 1
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: LD_INT 4
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: IN
10225: PUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: LD_INT 51
10233: PPUSH
10234: CALL_OW 321
10238: PUSH
10239: LD_INT 2
10241: EQUAL
10242: AND
10243: IFFALSE 10260
// bpoints := bpoints * 1.2 ;
10245: LD_ADDR_VAR 0 10
10249: PUSH
10250: LD_VAR 0 10
10254: PUSH
10255: LD_REAL  1.20000000000000E+0000
10258: MUL
10259: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10260: LD_VAR 0 6
10264: PPUSH
10265: CALL_OW 257
10269: PUSH
10270: LD_INT 5
10272: PUSH
10273: LD_INT 7
10275: PUSH
10276: LD_INT 9
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: IN
10284: PUSH
10285: LD_VAR 0 1
10289: PPUSH
10290: LD_INT 52
10292: PPUSH
10293: CALL_OW 321
10297: PUSH
10298: LD_INT 2
10300: EQUAL
10301: AND
10302: IFFALSE 10319
// bpoints := bpoints * 1.5 ;
10304: LD_ADDR_VAR 0 10
10308: PUSH
10309: LD_VAR 0 10
10313: PUSH
10314: LD_REAL  1.50000000000000E+0000
10317: MUL
10318: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10319: LD_VAR 0 1
10323: PPUSH
10324: LD_INT 66
10326: PPUSH
10327: CALL_OW 321
10331: PUSH
10332: LD_INT 2
10334: EQUAL
10335: IFFALSE 10352
// bpoints := bpoints * 1.1 ;
10337: LD_ADDR_VAR 0 10
10341: PUSH
10342: LD_VAR 0 10
10346: PUSH
10347: LD_REAL  1.10000000000000E+0000
10350: MUL
10351: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10352: LD_ADDR_VAR 0 10
10356: PUSH
10357: LD_VAR 0 10
10361: PUSH
10362: LD_VAR 0 6
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 259
10374: PUSH
10375: LD_REAL  1.15000000000000E+0000
10378: MUL
10379: MUL
10380: ST_TO_ADDR
// end ; unit_vehicle :
10381: GO 11209
10383: LD_INT 2
10385: DOUBLE
10386: EQUAL
10387: IFTRUE 10391
10389: GO 11197
10391: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10392: LD_VAR 0 6
10396: PPUSH
10397: CALL_OW 264
10401: PUSH
10402: LD_INT 2
10404: PUSH
10405: LD_INT 42
10407: PUSH
10408: LD_INT 24
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: IN
10416: IFFALSE 10437
// points := [ 25 , 5 , 3 ] ;
10418: LD_ADDR_VAR 0 9
10422: PUSH
10423: LD_INT 25
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10437: LD_VAR 0 6
10441: PPUSH
10442: CALL_OW 264
10446: PUSH
10447: LD_INT 4
10449: PUSH
10450: LD_INT 43
10452: PUSH
10453: LD_INT 25
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: LIST
10460: IN
10461: IFFALSE 10482
// points := [ 40 , 15 , 5 ] ;
10463: LD_ADDR_VAR 0 9
10467: PUSH
10468: LD_INT 40
10470: PUSH
10471: LD_INT 15
10473: PUSH
10474: LD_INT 5
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10482: LD_VAR 0 6
10486: PPUSH
10487: CALL_OW 264
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 23
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: IN
10502: IFFALSE 10523
// points := [ 7 , 25 , 8 ] ;
10504: LD_ADDR_VAR 0 9
10508: PUSH
10509: LD_INT 7
10511: PUSH
10512: LD_INT 25
10514: PUSH
10515: LD_INT 8
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 264
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: LD_INT 27
10538: PUSH
10539: LD_INT 44
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: IN
10547: IFFALSE 10568
// points := [ 14 , 50 , 16 ] ;
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_INT 14
10556: PUSH
10557: LD_INT 50
10559: PUSH
10560: LD_INT 16
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10568: LD_VAR 0 6
10572: PPUSH
10573: CALL_OW 264
10577: PUSH
10578: LD_INT 6
10580: PUSH
10581: LD_INT 46
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: IN
10588: IFFALSE 10609
// points := [ 32 , 120 , 70 ] ;
10590: LD_ADDR_VAR 0 9
10594: PUSH
10595: LD_INT 32
10597: PUSH
10598: LD_INT 120
10600: PUSH
10601: LD_INT 70
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10609: LD_VAR 0 6
10613: PPUSH
10614: CALL_OW 264
10618: PUSH
10619: LD_INT 7
10621: PUSH
10622: LD_INT 28
10624: PUSH
10625: LD_INT 45
10627: PUSH
10628: LD_INT 92
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: IN
10637: IFFALSE 10658
// points := [ 35 , 20 , 45 ] ;
10639: LD_ADDR_VAR 0 9
10643: PUSH
10644: LD_INT 35
10646: PUSH
10647: LD_INT 20
10649: PUSH
10650: LD_INT 45
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10658: LD_VAR 0 6
10662: PPUSH
10663: CALL_OW 264
10667: PUSH
10668: LD_INT 47
10670: PUSH
10671: EMPTY
10672: LIST
10673: IN
10674: IFFALSE 10695
// points := [ 67 , 45 , 75 ] ;
10676: LD_ADDR_VAR 0 9
10680: PUSH
10681: LD_INT 67
10683: PUSH
10684: LD_INT 45
10686: PUSH
10687: LD_INT 75
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10695: LD_VAR 0 6
10699: PPUSH
10700: CALL_OW 264
10704: PUSH
10705: LD_INT 26
10707: PUSH
10708: EMPTY
10709: LIST
10710: IN
10711: IFFALSE 10732
// points := [ 120 , 30 , 80 ] ;
10713: LD_ADDR_VAR 0 9
10717: PUSH
10718: LD_INT 120
10720: PUSH
10721: LD_INT 30
10723: PUSH
10724: LD_INT 80
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10732: LD_VAR 0 6
10736: PPUSH
10737: CALL_OW 264
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: EMPTY
10746: LIST
10747: IN
10748: IFFALSE 10769
// points := [ 40 , 1 , 1 ] ;
10750: LD_ADDR_VAR 0 9
10754: PUSH
10755: LD_INT 40
10757: PUSH
10758: LD_INT 1
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10769: LD_VAR 0 6
10773: PPUSH
10774: CALL_OW 264
10778: PUSH
10779: LD_INT 29
10781: PUSH
10782: EMPTY
10783: LIST
10784: IN
10785: IFFALSE 10806
// points := [ 70 , 200 , 400 ] ;
10787: LD_ADDR_VAR 0 9
10791: PUSH
10792: LD_INT 70
10794: PUSH
10795: LD_INT 200
10797: PUSH
10798: LD_INT 400
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10806: LD_VAR 0 6
10810: PPUSH
10811: CALL_OW 264
10815: PUSH
10816: LD_INT 14
10818: PUSH
10819: LD_INT 53
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: IN
10826: IFFALSE 10847
// points := [ 40 , 10 , 20 ] ;
10828: LD_ADDR_VAR 0 9
10832: PUSH
10833: LD_INT 40
10835: PUSH
10836: LD_INT 10
10838: PUSH
10839: LD_INT 20
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10847: LD_VAR 0 6
10851: PPUSH
10852: CALL_OW 264
10856: PUSH
10857: LD_INT 9
10859: PUSH
10860: EMPTY
10861: LIST
10862: IN
10863: IFFALSE 10884
// points := [ 5 , 70 , 20 ] ;
10865: LD_ADDR_VAR 0 9
10869: PUSH
10870: LD_INT 5
10872: PUSH
10873: LD_INT 70
10875: PUSH
10876: LD_INT 20
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10884: LD_VAR 0 6
10888: PPUSH
10889: CALL_OW 264
10893: PUSH
10894: LD_INT 10
10896: PUSH
10897: EMPTY
10898: LIST
10899: IN
10900: IFFALSE 10921
// points := [ 35 , 110 , 70 ] ;
10902: LD_ADDR_VAR 0 9
10906: PUSH
10907: LD_INT 35
10909: PUSH
10910: LD_INT 110
10912: PUSH
10913: LD_INT 70
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10921: LD_VAR 0 6
10925: PPUSH
10926: CALL_OW 265
10930: PUSH
10931: LD_INT 25
10933: EQUAL
10934: IFFALSE 10955
// points := [ 80 , 65 , 100 ] ;
10936: LD_ADDR_VAR 0 9
10940: PUSH
10941: LD_INT 80
10943: PUSH
10944: LD_INT 65
10946: PUSH
10947: LD_INT 100
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10955: LD_VAR 0 6
10959: PPUSH
10960: CALL_OW 263
10964: PUSH
10965: LD_INT 1
10967: EQUAL
10968: IFFALSE 11003
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10970: LD_ADDR_VAR 0 10
10974: PUSH
10975: LD_VAR 0 10
10979: PUSH
10980: LD_VAR 0 6
10984: PPUSH
10985: CALL_OW 311
10989: PPUSH
10990: LD_INT 3
10992: PPUSH
10993: CALL_OW 259
10997: PUSH
10998: LD_INT 4
11000: MUL
11001: MUL
11002: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11003: LD_VAR 0 6
11007: PPUSH
11008: CALL_OW 263
11012: PUSH
11013: LD_INT 2
11015: EQUAL
11016: IFFALSE 11067
// begin j := IsControledBy ( i ) ;
11018: LD_ADDR_VAR 0 7
11022: PUSH
11023: LD_VAR 0 6
11027: PPUSH
11028: CALL_OW 312
11032: ST_TO_ADDR
// if j then
11033: LD_VAR 0 7
11037: IFFALSE 11067
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11039: LD_ADDR_VAR 0 10
11043: PUSH
11044: LD_VAR 0 10
11048: PUSH
11049: LD_VAR 0 7
11053: PPUSH
11054: LD_INT 3
11056: PPUSH
11057: CALL_OW 259
11061: PUSH
11062: LD_INT 3
11064: MUL
11065: MUL
11066: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11067: LD_VAR 0 6
11071: PPUSH
11072: CALL_OW 264
11076: PUSH
11077: LD_INT 5
11079: PUSH
11080: LD_INT 6
11082: PUSH
11083: LD_INT 46
11085: PUSH
11086: LD_INT 44
11088: PUSH
11089: LD_INT 47
11091: PUSH
11092: LD_INT 45
11094: PUSH
11095: LD_INT 28
11097: PUSH
11098: LD_INT 7
11100: PUSH
11101: LD_INT 27
11103: PUSH
11104: LD_INT 29
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: IN
11119: PUSH
11120: LD_VAR 0 1
11124: PPUSH
11125: LD_INT 52
11127: PPUSH
11128: CALL_OW 321
11132: PUSH
11133: LD_INT 2
11135: EQUAL
11136: AND
11137: IFFALSE 11154
// bpoints := bpoints * 1.2 ;
11139: LD_ADDR_VAR 0 10
11143: PUSH
11144: LD_VAR 0 10
11148: PUSH
11149: LD_REAL  1.20000000000000E+0000
11152: MUL
11153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11154: LD_VAR 0 6
11158: PPUSH
11159: CALL_OW 264
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: LD_INT 46
11169: PUSH
11170: LD_INT 47
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: IN
11178: IFFALSE 11195
// bpoints := bpoints * 1.2 ;
11180: LD_ADDR_VAR 0 10
11184: PUSH
11185: LD_VAR 0 10
11189: PUSH
11190: LD_REAL  1.20000000000000E+0000
11193: MUL
11194: ST_TO_ADDR
// end ; unit_building :
11195: GO 11209
11197: LD_INT 3
11199: DOUBLE
11200: EQUAL
11201: IFTRUE 11205
11203: GO 11208
11205: POP
// ; end ;
11206: GO 11209
11208: POP
// for j = 1 to 3 do
11209: LD_ADDR_VAR 0 7
11213: PUSH
11214: DOUBLE
11215: LD_INT 1
11217: DEC
11218: ST_TO_ADDR
11219: LD_INT 3
11221: PUSH
11222: FOR_TO
11223: IFFALSE 11276
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11225: LD_ADDR_VAR 0 5
11229: PUSH
11230: LD_VAR 0 5
11234: PPUSH
11235: LD_VAR 0 7
11239: PPUSH
11240: LD_VAR 0 5
11244: PUSH
11245: LD_VAR 0 7
11249: ARRAY
11250: PUSH
11251: LD_VAR 0 9
11255: PUSH
11256: LD_VAR 0 7
11260: ARRAY
11261: PUSH
11262: LD_VAR 0 10
11266: MUL
11267: PLUS
11268: PPUSH
11269: CALL_OW 1
11273: ST_TO_ADDR
11274: GO 11222
11276: POP
11277: POP
// end ;
11278: GO 9757
11280: POP
11281: POP
// result := Replace ( result , 4 , tmp ) ;
11282: LD_ADDR_VAR 0 5
11286: PUSH
11287: LD_VAR 0 5
11291: PPUSH
11292: LD_INT 4
11294: PPUSH
11295: LD_VAR 0 8
11299: PPUSH
11300: CALL_OW 1
11304: ST_TO_ADDR
// end ;
11305: LD_VAR 0 5
11309: RET
// export function DangerAtRange ( unit , range ) ; begin
11310: LD_INT 0
11312: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11313: LD_ADDR_VAR 0 3
11317: PUSH
11318: LD_VAR 0 1
11322: PPUSH
11323: CALL_OW 255
11327: PPUSH
11328: LD_VAR 0 1
11332: PPUSH
11333: CALL_OW 250
11337: PPUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 251
11347: PPUSH
11348: LD_VAR 0 2
11352: PPUSH
11353: CALL 9609 0 4
11357: ST_TO_ADDR
// end ;
11358: LD_VAR 0 3
11362: RET
// export function DangerInArea ( side , area ) ; begin
11363: LD_INT 0
11365: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11366: LD_ADDR_VAR 0 3
11370: PUSH
11371: LD_VAR 0 2
11375: PPUSH
11376: LD_INT 81
11378: PUSH
11379: LD_VAR 0 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PPUSH
11388: CALL_OW 70
11392: ST_TO_ADDR
// end ;
11393: LD_VAR 0 3
11397: RET
// export function IsExtension ( b ) ; begin
11398: LD_INT 0
11400: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11401: LD_ADDR_VAR 0 2
11405: PUSH
11406: LD_VAR 0 1
11410: PUSH
11411: LD_INT 23
11413: PUSH
11414: LD_INT 20
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 17
11422: PUSH
11423: LD_INT 24
11425: PUSH
11426: LD_INT 21
11428: PUSH
11429: LD_INT 19
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 18
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: IN
11453: ST_TO_ADDR
// end ;
11454: LD_VAR 0 2
11458: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
11463: PPUSH
// result := [ ] ;
11464: LD_ADDR_VAR 0 4
11468: PUSH
11469: EMPTY
11470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11471: LD_ADDR_VAR 0 5
11475: PUSH
11476: LD_VAR 0 2
11480: PPUSH
11481: LD_INT 21
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 70
11495: ST_TO_ADDR
// if not tmp then
11496: LD_VAR 0 5
11500: NOT
11501: IFFALSE 11505
// exit ;
11503: GO 11569
// if checkLink then
11505: LD_VAR 0 3
11509: IFFALSE 11559
// begin for i in tmp do
11511: LD_ADDR_VAR 0 6
11515: PUSH
11516: LD_VAR 0 5
11520: PUSH
11521: FOR_IN
11522: IFFALSE 11557
// if GetBase ( i ) <> base then
11524: LD_VAR 0 6
11528: PPUSH
11529: CALL_OW 274
11533: PUSH
11534: LD_VAR 0 1
11538: NONEQUAL
11539: IFFALSE 11555
// ComLinkToBase ( base , i ) ;
11541: LD_VAR 0 1
11545: PPUSH
11546: LD_VAR 0 6
11550: PPUSH
11551: CALL_OW 169
11555: GO 11521
11557: POP
11558: POP
// end ; result := tmp ;
11559: LD_ADDR_VAR 0 4
11563: PUSH
11564: LD_VAR 0 5
11568: ST_TO_ADDR
// end ;
11569: LD_VAR 0 4
11573: RET
// export function ComComplete ( units , b ) ; var i ; begin
11574: LD_INT 0
11576: PPUSH
11577: PPUSH
// if not units then
11578: LD_VAR 0 1
11582: NOT
11583: IFFALSE 11587
// exit ;
11585: GO 11677
// for i in units do
11587: LD_ADDR_VAR 0 4
11591: PUSH
11592: LD_VAR 0 1
11596: PUSH
11597: FOR_IN
11598: IFFALSE 11675
// if BuildingStatus ( b ) = bs_build then
11600: LD_VAR 0 2
11604: PPUSH
11605: CALL_OW 461
11609: PUSH
11610: LD_INT 1
11612: EQUAL
11613: IFFALSE 11673
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11615: LD_VAR 0 4
11619: PPUSH
11620: LD_STRING h
11622: PUSH
11623: LD_VAR 0 2
11627: PPUSH
11628: CALL_OW 250
11632: PUSH
11633: LD_VAR 0 2
11637: PPUSH
11638: CALL_OW 251
11642: PUSH
11643: LD_VAR 0 2
11647: PUSH
11648: LD_INT 0
11650: PUSH
11651: LD_INT 0
11653: PUSH
11654: LD_INT 0
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: PPUSH
11669: CALL_OW 446
11673: GO 11597
11675: POP
11676: POP
// end ;
11677: LD_VAR 0 3
11681: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11682: LD_INT 0
11684: PPUSH
11685: PPUSH
11686: PPUSH
11687: PPUSH
11688: PPUSH
11689: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11690: LD_VAR 0 1
11694: NOT
11695: PUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL_OW 263
11705: PUSH
11706: LD_INT 2
11708: NONEQUAL
11709: OR
11710: IFFALSE 11714
// exit ;
11712: GO 12030
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11714: LD_ADDR_VAR 0 6
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 255
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: LD_INT 30
11741: PUSH
11742: LD_INT 36
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 34
11751: PUSH
11752: LD_INT 31
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PPUSH
11768: CALL_OW 69
11772: ST_TO_ADDR
// if not tmp then
11773: LD_VAR 0 6
11777: NOT
11778: IFFALSE 11782
// exit ;
11780: GO 12030
// result := [ ] ;
11782: LD_ADDR_VAR 0 2
11786: PUSH
11787: EMPTY
11788: ST_TO_ADDR
// for i in tmp do
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_VAR 0 6
11798: PUSH
11799: FOR_IN
11800: IFFALSE 11871
// begin t := UnitsInside ( i ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 3
11811: PPUSH
11812: CALL_OW 313
11816: ST_TO_ADDR
// if t then
11817: LD_VAR 0 4
11821: IFFALSE 11869
// for j in t do
11823: LD_ADDR_VAR 0 7
11827: PUSH
11828: LD_VAR 0 4
11832: PUSH
11833: FOR_IN
11834: IFFALSE 11867
// result := Replace ( result , result + 1 , j ) ;
11836: LD_ADDR_VAR 0 2
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: LD_VAR 0 2
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: PPUSH
11855: LD_VAR 0 7
11859: PPUSH
11860: CALL_OW 1
11864: ST_TO_ADDR
11865: GO 11833
11867: POP
11868: POP
// end ;
11869: GO 11799
11871: POP
11872: POP
// if not result then
11873: LD_VAR 0 2
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 12030
// mech := result [ 1 ] ;
11882: LD_ADDR_VAR 0 5
11886: PUSH
11887: LD_VAR 0 2
11891: PUSH
11892: LD_INT 1
11894: ARRAY
11895: ST_TO_ADDR
// if result > 1 then
11896: LD_VAR 0 2
11900: PUSH
11901: LD_INT 1
11903: GREATER
11904: IFFALSE 12016
// begin for i = 2 to result do
11906: LD_ADDR_VAR 0 3
11910: PUSH
11911: DOUBLE
11912: LD_INT 2
11914: DEC
11915: ST_TO_ADDR
11916: LD_VAR 0 2
11920: PUSH
11921: FOR_TO
11922: IFFALSE 12014
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11924: LD_ADDR_VAR 0 4
11928: PUSH
11929: LD_VAR 0 2
11933: PUSH
11934: LD_VAR 0 3
11938: ARRAY
11939: PPUSH
11940: LD_INT 3
11942: PPUSH
11943: CALL_OW 259
11947: PUSH
11948: LD_VAR 0 2
11952: PUSH
11953: LD_VAR 0 3
11957: ARRAY
11958: PPUSH
11959: CALL_OW 432
11963: MINUS
11964: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11965: LD_VAR 0 4
11969: PUSH
11970: LD_VAR 0 5
11974: PPUSH
11975: LD_INT 3
11977: PPUSH
11978: CALL_OW 259
11982: PUSH
11983: LD_VAR 0 5
11987: PPUSH
11988: CALL_OW 432
11992: MINUS
11993: GREATEREQUAL
11994: IFFALSE 12012
// mech := result [ i ] ;
11996: LD_ADDR_VAR 0 5
12000: PUSH
12001: LD_VAR 0 2
12005: PUSH
12006: LD_VAR 0 3
12010: ARRAY
12011: ST_TO_ADDR
// end ;
12012: GO 11921
12014: POP
12015: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12016: LD_VAR 0 1
12020: PPUSH
12021: LD_VAR 0 5
12025: PPUSH
12026: CALL_OW 135
// end ;
12030: LD_VAR 0 2
12034: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12035: LD_INT 0
12037: PPUSH
12038: PPUSH
12039: PPUSH
12040: PPUSH
12041: PPUSH
12042: PPUSH
12043: PPUSH
12044: PPUSH
12045: PPUSH
12046: PPUSH
12047: PPUSH
12048: PPUSH
12049: PPUSH
// result := [ ] ;
12050: LD_ADDR_VAR 0 7
12054: PUSH
12055: EMPTY
12056: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL_OW 266
12066: PUSH
12067: LD_INT 0
12069: PUSH
12070: LD_INT 1
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: IN
12077: NOT
12078: IFFALSE 12082
// exit ;
12080: GO 13716
// if name then
12082: LD_VAR 0 3
12086: IFFALSE 12102
// SetBName ( base_dep , name ) ;
12088: LD_VAR 0 1
12092: PPUSH
12093: LD_VAR 0 3
12097: PPUSH
12098: CALL_OW 500
// base := GetBase ( base_dep ) ;
12102: LD_ADDR_VAR 0 15
12106: PUSH
12107: LD_VAR 0 1
12111: PPUSH
12112: CALL_OW 274
12116: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12117: LD_ADDR_VAR 0 16
12121: PUSH
12122: LD_VAR 0 1
12126: PPUSH
12127: CALL_OW 255
12131: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12132: LD_ADDR_VAR 0 17
12136: PUSH
12137: LD_VAR 0 1
12141: PPUSH
12142: CALL_OW 248
12146: ST_TO_ADDR
// if sources then
12147: LD_VAR 0 5
12151: IFFALSE 12198
// for i = 1 to 3 do
12153: LD_ADDR_VAR 0 8
12157: PUSH
12158: DOUBLE
12159: LD_INT 1
12161: DEC
12162: ST_TO_ADDR
12163: LD_INT 3
12165: PUSH
12166: FOR_TO
12167: IFFALSE 12196
// AddResourceType ( base , i , sources [ i ] ) ;
12169: LD_VAR 0 15
12173: PPUSH
12174: LD_VAR 0 8
12178: PPUSH
12179: LD_VAR 0 5
12183: PUSH
12184: LD_VAR 0 8
12188: ARRAY
12189: PPUSH
12190: CALL_OW 276
12194: GO 12166
12196: POP
12197: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12198: LD_ADDR_VAR 0 18
12202: PUSH
12203: LD_VAR 0 15
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL 11459 0 3
12220: ST_TO_ADDR
// InitHc ;
12221: CALL_OW 19
// InitUc ;
12225: CALL_OW 18
// uc_side := side ;
12229: LD_ADDR_OWVAR 20
12233: PUSH
12234: LD_VAR 0 16
12238: ST_TO_ADDR
// uc_nation := nation ;
12239: LD_ADDR_OWVAR 21
12243: PUSH
12244: LD_VAR 0 17
12248: ST_TO_ADDR
// if buildings then
12249: LD_VAR 0 18
12253: IFFALSE 13575
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12255: LD_ADDR_VAR 0 19
12259: PUSH
12260: LD_VAR 0 18
12264: PPUSH
12265: LD_INT 2
12267: PUSH
12268: LD_INT 30
12270: PUSH
12271: LD_INT 29
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 30
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 72
12297: ST_TO_ADDR
// if tmp then
12298: LD_VAR 0 19
12302: IFFALSE 12350
// for i in tmp do
12304: LD_ADDR_VAR 0 8
12308: PUSH
12309: LD_VAR 0 19
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12348
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12317: LD_VAR 0 8
12321: PPUSH
12322: CALL_OW 250
12326: PPUSH
12327: LD_VAR 0 8
12331: PPUSH
12332: CALL_OW 251
12336: PPUSH
12337: LD_VAR 0 16
12341: PPUSH
12342: CALL_OW 441
12346: GO 12314
12348: POP
12349: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12350: LD_VAR 0 18
12354: PPUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 30
12360: PUSH
12361: LD_INT 32
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 30
12370: PUSH
12371: LD_INT 33
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: IFFALSE 12475
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12389: LD_ADDR_VAR 0 8
12393: PUSH
12394: LD_VAR 0 18
12398: PPUSH
12399: LD_INT 2
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 32
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 30
12414: PUSH
12415: LD_INT 33
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 72
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12473
// begin if not GetBWeapon ( i ) then
12435: LD_VAR 0 8
12439: PPUSH
12440: CALL_OW 269
12444: NOT
12445: IFFALSE 12471
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12447: LD_VAR 0 8
12451: PPUSH
12452: LD_VAR 0 8
12456: PPUSH
12457: LD_VAR 0 2
12461: PPUSH
12462: CALL 13721 0 2
12466: PPUSH
12467: CALL_OW 431
// end ;
12471: GO 12432
12473: POP
12474: POP
// end ; for i = 1 to personel do
12475: LD_ADDR_VAR 0 8
12479: PUSH
12480: DOUBLE
12481: LD_INT 1
12483: DEC
12484: ST_TO_ADDR
12485: LD_VAR 0 6
12489: PUSH
12490: FOR_TO
12491: IFFALSE 13555
// begin if i > 4 then
12493: LD_VAR 0 8
12497: PUSH
12498: LD_INT 4
12500: GREATER
12501: IFFALSE 12505
// break ;
12503: GO 13555
// case i of 1 :
12505: LD_VAR 0 8
12509: PUSH
12510: LD_INT 1
12512: DOUBLE
12513: EQUAL
12514: IFTRUE 12518
12516: GO 12598
12518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12519: LD_ADDR_VAR 0 12
12523: PUSH
12524: LD_VAR 0 18
12528: PPUSH
12529: LD_INT 22
12531: PUSH
12532: LD_VAR 0 16
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 58
12543: PUSH
12544: EMPTY
12545: LIST
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: LD_INT 30
12552: PUSH
12553: LD_INT 32
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 30
12562: PUSH
12563: LD_INT 4
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 30
12572: PUSH
12573: LD_INT 5
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 72
12595: ST_TO_ADDR
12596: GO 12820
12598: LD_INT 2
12600: DOUBLE
12601: EQUAL
12602: IFTRUE 12606
12604: GO 12668
12606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12607: LD_ADDR_VAR 0 12
12611: PUSH
12612: LD_VAR 0 18
12616: PPUSH
12617: LD_INT 22
12619: PUSH
12620: LD_VAR 0 16
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 0
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 30
12644: PUSH
12645: LD_INT 1
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 72
12665: ST_TO_ADDR
12666: GO 12820
12668: LD_INT 3
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12738
12676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12677: LD_ADDR_VAR 0 12
12681: PUSH
12682: LD_VAR 0 18
12686: PPUSH
12687: LD_INT 22
12689: PUSH
12690: LD_VAR 0 16
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 2
12701: PUSH
12702: LD_INT 30
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 72
12735: ST_TO_ADDR
12736: GO 12820
12738: LD_INT 4
12740: DOUBLE
12741: EQUAL
12742: IFTRUE 12746
12744: GO 12819
12746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12747: LD_ADDR_VAR 0 12
12751: PUSH
12752: LD_VAR 0 18
12756: PPUSH
12757: LD_INT 22
12759: PUSH
12760: LD_VAR 0 16
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 2
12771: PUSH
12772: LD_INT 30
12774: PUSH
12775: LD_INT 6
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 30
12784: PUSH
12785: LD_INT 7
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 30
12794: PUSH
12795: LD_INT 8
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 72
12816: ST_TO_ADDR
12817: GO 12820
12819: POP
// if i = 1 then
12820: LD_VAR 0 8
12824: PUSH
12825: LD_INT 1
12827: EQUAL
12828: IFFALSE 12939
// begin tmp := [ ] ;
12830: LD_ADDR_VAR 0 19
12834: PUSH
12835: EMPTY
12836: ST_TO_ADDR
// for j in f do
12837: LD_ADDR_VAR 0 9
12841: PUSH
12842: LD_VAR 0 12
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12921
// if GetBType ( j ) = b_bunker then
12850: LD_VAR 0 9
12854: PPUSH
12855: CALL_OW 266
12859: PUSH
12860: LD_INT 32
12862: EQUAL
12863: IFFALSE 12890
// tmp := Insert ( tmp , 1 , j ) else
12865: LD_ADDR_VAR 0 19
12869: PUSH
12870: LD_VAR 0 19
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: LD_VAR 0 9
12882: PPUSH
12883: CALL_OW 2
12887: ST_TO_ADDR
12888: GO 12919
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 19
12899: PPUSH
12900: LD_VAR 0 19
12904: PUSH
12905: LD_INT 1
12907: PLUS
12908: PPUSH
12909: LD_VAR 0 9
12913: PPUSH
12914: CALL_OW 2
12918: ST_TO_ADDR
12919: GO 12847
12921: POP
12922: POP
// if tmp then
12923: LD_VAR 0 19
12927: IFFALSE 12939
// f := tmp ;
12929: LD_ADDR_VAR 0 12
12933: PUSH
12934: LD_VAR 0 19
12938: ST_TO_ADDR
// end ; x := personel [ i ] ;
12939: LD_ADDR_VAR 0 13
12943: PUSH
12944: LD_VAR 0 6
12948: PUSH
12949: LD_VAR 0 8
12953: ARRAY
12954: ST_TO_ADDR
// if x = - 1 then
12955: LD_VAR 0 13
12959: PUSH
12960: LD_INT 1
12962: NEG
12963: EQUAL
12964: IFFALSE 13173
// begin for j in f do
12966: LD_ADDR_VAR 0 9
12970: PUSH
12971: LD_VAR 0 12
12975: PUSH
12976: FOR_IN
12977: IFFALSE 13169
// repeat InitHc ;
12979: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12983: LD_VAR 0 9
12987: PPUSH
12988: CALL_OW 266
12992: PUSH
12993: LD_INT 5
12995: EQUAL
12996: IFFALSE 13066
// begin if UnitsInside ( j ) < 3 then
12998: LD_VAR 0 9
13002: PPUSH
13003: CALL_OW 313
13007: PUSH
13008: LD_INT 3
13010: LESS
13011: IFFALSE 13047
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13013: LD_INT 0
13015: PPUSH
13016: LD_INT 5
13018: PUSH
13019: LD_INT 8
13021: PUSH
13022: LD_INT 9
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: PUSH
13030: LD_VAR 0 17
13034: ARRAY
13035: PPUSH
13036: LD_VAR 0 4
13040: PPUSH
13041: CALL_OW 380
13045: GO 13064
// PrepareHuman ( false , i , skill ) ;
13047: LD_INT 0
13049: PPUSH
13050: LD_VAR 0 8
13054: PPUSH
13055: LD_VAR 0 4
13059: PPUSH
13060: CALL_OW 380
// end else
13064: GO 13083
// PrepareHuman ( false , i , skill ) ;
13066: LD_INT 0
13068: PPUSH
13069: LD_VAR 0 8
13073: PPUSH
13074: LD_VAR 0 4
13078: PPUSH
13079: CALL_OW 380
// un := CreateHuman ;
13083: LD_ADDR_VAR 0 14
13087: PUSH
13088: CALL_OW 44
13092: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13093: LD_ADDR_VAR 0 7
13097: PUSH
13098: LD_VAR 0 7
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_VAR 0 14
13110: PPUSH
13111: CALL_OW 2
13115: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13116: LD_VAR 0 14
13120: PPUSH
13121: LD_VAR 0 9
13125: PPUSH
13126: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13130: LD_VAR 0 9
13134: PPUSH
13135: CALL_OW 313
13139: PUSH
13140: LD_INT 6
13142: EQUAL
13143: PUSH
13144: LD_VAR 0 9
13148: PPUSH
13149: CALL_OW 266
13153: PUSH
13154: LD_INT 32
13156: PUSH
13157: LD_INT 31
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: IN
13164: OR
13165: IFFALSE 12979
13167: GO 12976
13169: POP
13170: POP
// end else
13171: GO 13553
// for j = 1 to x do
13173: LD_ADDR_VAR 0 9
13177: PUSH
13178: DOUBLE
13179: LD_INT 1
13181: DEC
13182: ST_TO_ADDR
13183: LD_VAR 0 13
13187: PUSH
13188: FOR_TO
13189: IFFALSE 13551
// begin InitHc ;
13191: CALL_OW 19
// if not f then
13195: LD_VAR 0 12
13199: NOT
13200: IFFALSE 13289
// begin PrepareHuman ( false , i , skill ) ;
13202: LD_INT 0
13204: PPUSH
13205: LD_VAR 0 8
13209: PPUSH
13210: LD_VAR 0 4
13214: PPUSH
13215: CALL_OW 380
// un := CreateHuman ;
13219: LD_ADDR_VAR 0 14
13223: PUSH
13224: CALL_OW 44
13228: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13229: LD_ADDR_VAR 0 7
13233: PUSH
13234: LD_VAR 0 7
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: LD_VAR 0 14
13246: PPUSH
13247: CALL_OW 2
13251: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13252: LD_VAR 0 14
13256: PPUSH
13257: LD_VAR 0 1
13261: PPUSH
13262: CALL_OW 250
13266: PPUSH
13267: LD_VAR 0 1
13271: PPUSH
13272: CALL_OW 251
13276: PPUSH
13277: LD_INT 10
13279: PPUSH
13280: LD_INT 0
13282: PPUSH
13283: CALL_OW 50
// continue ;
13287: GO 13188
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13289: LD_VAR 0 12
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 313
13302: PUSH
13303: LD_VAR 0 12
13307: PUSH
13308: LD_INT 1
13310: ARRAY
13311: PPUSH
13312: CALL_OW 266
13316: PUSH
13317: LD_INT 32
13319: PUSH
13320: LD_INT 31
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: IN
13327: AND
13328: PUSH
13329: LD_VAR 0 12
13333: PUSH
13334: LD_INT 1
13336: ARRAY
13337: PPUSH
13338: CALL_OW 313
13342: PUSH
13343: LD_INT 6
13345: EQUAL
13346: OR
13347: IFFALSE 13367
// f := Delete ( f , 1 ) ;
13349: LD_ADDR_VAR 0 12
13353: PUSH
13354: LD_VAR 0 12
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 3
13366: ST_TO_ADDR
// if not f then
13367: LD_VAR 0 12
13371: NOT
13372: IFFALSE 13390
// begin x := x + 2 ;
13374: LD_ADDR_VAR 0 13
13378: PUSH
13379: LD_VAR 0 13
13383: PUSH
13384: LD_INT 2
13386: PLUS
13387: ST_TO_ADDR
// continue ;
13388: GO 13188
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13390: LD_VAR 0 12
13394: PUSH
13395: LD_INT 1
13397: ARRAY
13398: PPUSH
13399: CALL_OW 266
13403: PUSH
13404: LD_INT 5
13406: EQUAL
13407: IFFALSE 13481
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13409: LD_VAR 0 12
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: CALL_OW 313
13422: PUSH
13423: LD_INT 3
13425: LESS
13426: IFFALSE 13462
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13428: LD_INT 0
13430: PPUSH
13431: LD_INT 5
13433: PUSH
13434: LD_INT 8
13436: PUSH
13437: LD_INT 9
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: LD_VAR 0 17
13449: ARRAY
13450: PPUSH
13451: LD_VAR 0 4
13455: PPUSH
13456: CALL_OW 380
13460: GO 13479
// PrepareHuman ( false , i , skill ) ;
13462: LD_INT 0
13464: PPUSH
13465: LD_VAR 0 8
13469: PPUSH
13470: LD_VAR 0 4
13474: PPUSH
13475: CALL_OW 380
// end else
13479: GO 13498
// PrepareHuman ( false , i , skill ) ;
13481: LD_INT 0
13483: PPUSH
13484: LD_VAR 0 8
13488: PPUSH
13489: LD_VAR 0 4
13493: PPUSH
13494: CALL_OW 380
// un := CreateHuman ;
13498: LD_ADDR_VAR 0 14
13502: PUSH
13503: CALL_OW 44
13507: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13508: LD_ADDR_VAR 0 7
13512: PUSH
13513: LD_VAR 0 7
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: LD_VAR 0 14
13525: PPUSH
13526: CALL_OW 2
13530: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13531: LD_VAR 0 14
13535: PPUSH
13536: LD_VAR 0 12
13540: PUSH
13541: LD_INT 1
13543: ARRAY
13544: PPUSH
13545: CALL_OW 52
// end ;
13549: GO 13188
13551: POP
13552: POP
// end ;
13553: GO 12490
13555: POP
13556: POP
// result := result ^ buildings ;
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: LD_VAR 0 7
13566: PUSH
13567: LD_VAR 0 18
13571: ADD
13572: ST_TO_ADDR
// end else
13573: GO 13716
// begin for i = 1 to personel do
13575: LD_ADDR_VAR 0 8
13579: PUSH
13580: DOUBLE
13581: LD_INT 1
13583: DEC
13584: ST_TO_ADDR
13585: LD_VAR 0 6
13589: PUSH
13590: FOR_TO
13591: IFFALSE 13714
// begin if i > 4 then
13593: LD_VAR 0 8
13597: PUSH
13598: LD_INT 4
13600: GREATER
13601: IFFALSE 13605
// break ;
13603: GO 13714
// x := personel [ i ] ;
13605: LD_ADDR_VAR 0 13
13609: PUSH
13610: LD_VAR 0 6
13614: PUSH
13615: LD_VAR 0 8
13619: ARRAY
13620: ST_TO_ADDR
// if x = - 1 then
13621: LD_VAR 0 13
13625: PUSH
13626: LD_INT 1
13628: NEG
13629: EQUAL
13630: IFFALSE 13634
// continue ;
13632: GO 13590
// PrepareHuman ( false , i , skill ) ;
13634: LD_INT 0
13636: PPUSH
13637: LD_VAR 0 8
13641: PPUSH
13642: LD_VAR 0 4
13646: PPUSH
13647: CALL_OW 380
// un := CreateHuman ;
13651: LD_ADDR_VAR 0 14
13655: PUSH
13656: CALL_OW 44
13660: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13661: LD_VAR 0 14
13665: PPUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 250
13675: PPUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 251
13685: PPUSH
13686: LD_INT 10
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 50
// result := result ^ un ;
13696: LD_ADDR_VAR 0 7
13700: PUSH
13701: LD_VAR 0 7
13705: PUSH
13706: LD_VAR 0 14
13710: ADD
13711: ST_TO_ADDR
// end ;
13712: GO 13590
13714: POP
13715: POP
// end ; end ;
13716: LD_VAR 0 7
13720: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13721: LD_INT 0
13723: PPUSH
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
13732: PPUSH
13733: PPUSH
13734: PPUSH
13735: PPUSH
13736: PPUSH
13737: PPUSH
13738: PPUSH
// result := false ;
13739: LD_ADDR_VAR 0 3
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13747: LD_VAR 0 1
13751: NOT
13752: PUSH
13753: LD_VAR 0 1
13757: PPUSH
13758: CALL_OW 266
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: LD_INT 33
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: IN
13773: NOT
13774: OR
13775: IFFALSE 13779
// exit ;
13777: GO 14888
// nat := GetNation ( tower ) ;
13779: LD_ADDR_VAR 0 12
13783: PUSH
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 248
13793: ST_TO_ADDR
// side := GetSide ( tower ) ;
13794: LD_ADDR_VAR 0 16
13798: PUSH
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 255
13808: ST_TO_ADDR
// x := GetX ( tower ) ;
13809: LD_ADDR_VAR 0 10
13813: PUSH
13814: LD_VAR 0 1
13818: PPUSH
13819: CALL_OW 250
13823: ST_TO_ADDR
// y := GetY ( tower ) ;
13824: LD_ADDR_VAR 0 11
13828: PUSH
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 251
13838: ST_TO_ADDR
// if not x or not y then
13839: LD_VAR 0 10
13843: NOT
13844: PUSH
13845: LD_VAR 0 11
13849: NOT
13850: OR
13851: IFFALSE 13855
// exit ;
13853: GO 14888
// weapon := 0 ;
13855: LD_ADDR_VAR 0 18
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// fac_list := [ ] ;
13863: LD_ADDR_VAR 0 17
13867: PUSH
13868: EMPTY
13869: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13870: LD_ADDR_VAR 0 6
13874: PUSH
13875: LD_VAR 0 1
13879: PPUSH
13880: CALL_OW 274
13884: PPUSH
13885: LD_VAR 0 2
13889: PPUSH
13890: LD_INT 0
13892: PPUSH
13893: CALL 11459 0 3
13897: PPUSH
13898: LD_INT 30
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PPUSH
13908: CALL_OW 72
13912: ST_TO_ADDR
// if not factories then
13913: LD_VAR 0 6
13917: NOT
13918: IFFALSE 13922
// exit ;
13920: GO 14888
// for i in factories do
13922: LD_ADDR_VAR 0 8
13926: PUSH
13927: LD_VAR 0 6
13931: PUSH
13932: FOR_IN
13933: IFFALSE 13958
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13935: LD_ADDR_VAR 0 17
13939: PUSH
13940: LD_VAR 0 17
13944: PUSH
13945: LD_VAR 0 8
13949: PPUSH
13950: CALL_OW 478
13954: UNION
13955: ST_TO_ADDR
13956: GO 13932
13958: POP
13959: POP
// if not fac_list then
13960: LD_VAR 0 17
13964: NOT
13965: IFFALSE 13969
// exit ;
13967: GO 14888
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13969: LD_ADDR_VAR 0 5
13973: PUSH
13974: LD_INT 4
13976: PUSH
13977: LD_INT 5
13979: PUSH
13980: LD_INT 9
13982: PUSH
13983: LD_INT 10
13985: PUSH
13986: LD_INT 6
13988: PUSH
13989: LD_INT 7
13991: PUSH
13992: LD_INT 11
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 27
14006: PUSH
14007: LD_INT 28
14009: PUSH
14010: LD_INT 26
14012: PUSH
14013: LD_INT 30
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 43
14024: PUSH
14025: LD_INT 44
14027: PUSH
14028: LD_INT 46
14030: PUSH
14031: LD_INT 45
14033: PUSH
14034: LD_INT 47
14036: PUSH
14037: LD_INT 49
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_VAR 0 12
14057: ARRAY
14058: ST_TO_ADDR
// list := list isect fac_list ;
14059: LD_ADDR_VAR 0 5
14063: PUSH
14064: LD_VAR 0 5
14068: PUSH
14069: LD_VAR 0 17
14073: ISECT
14074: ST_TO_ADDR
// if not list then
14075: LD_VAR 0 5
14079: NOT
14080: IFFALSE 14084
// exit ;
14082: GO 14888
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14084: LD_VAR 0 12
14088: PUSH
14089: LD_INT 3
14091: EQUAL
14092: PUSH
14093: LD_INT 49
14095: PUSH
14096: LD_VAR 0 5
14100: IN
14101: AND
14102: PUSH
14103: LD_INT 31
14105: PPUSH
14106: LD_VAR 0 16
14110: PPUSH
14111: CALL_OW 321
14115: PUSH
14116: LD_INT 2
14118: EQUAL
14119: AND
14120: IFFALSE 14180
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14122: LD_INT 22
14124: PUSH
14125: LD_VAR 0 16
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 35
14136: PUSH
14137: LD_INT 49
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 91
14146: PUSH
14147: LD_VAR 0 1
14151: PUSH
14152: LD_INT 10
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: NOT
14170: IFFALSE 14180
// weapon := ru_time_lapser ;
14172: LD_ADDR_VAR 0 18
14176: PUSH
14177: LD_INT 49
14179: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14180: LD_VAR 0 12
14184: PUSH
14185: LD_INT 1
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: IN
14195: PUSH
14196: LD_INT 11
14198: PUSH
14199: LD_VAR 0 5
14203: IN
14204: PUSH
14205: LD_INT 30
14207: PUSH
14208: LD_VAR 0 5
14212: IN
14213: OR
14214: AND
14215: PUSH
14216: LD_INT 6
14218: PPUSH
14219: LD_VAR 0 16
14223: PPUSH
14224: CALL_OW 321
14228: PUSH
14229: LD_INT 2
14231: EQUAL
14232: AND
14233: IFFALSE 14398
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14235: LD_INT 22
14237: PUSH
14238: LD_VAR 0 16
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: LD_INT 35
14252: PUSH
14253: LD_INT 11
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 35
14262: PUSH
14263: LD_INT 30
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 91
14277: PUSH
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 18
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 69
14300: NOT
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_VAR 0 16
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 2
14316: PUSH
14317: LD_INT 30
14319: PUSH
14320: LD_INT 32
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 33
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 91
14344: PUSH
14345: LD_VAR 0 1
14349: PUSH
14350: LD_INT 12
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: PPUSH
14366: CALL_OW 69
14370: PUSH
14371: LD_INT 2
14373: GREATER
14374: AND
14375: IFFALSE 14398
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14377: LD_ADDR_VAR 0 18
14381: PUSH
14382: LD_INT 11
14384: PUSH
14385: LD_INT 30
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_VAR 0 12
14396: ARRAY
14397: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14398: LD_VAR 0 18
14402: NOT
14403: PUSH
14404: LD_INT 40
14406: PPUSH
14407: LD_VAR 0 16
14411: PPUSH
14412: CALL_OW 321
14416: PUSH
14417: LD_INT 2
14419: EQUAL
14420: AND
14421: PUSH
14422: LD_INT 7
14424: PUSH
14425: LD_VAR 0 5
14429: IN
14430: PUSH
14431: LD_INT 28
14433: PUSH
14434: LD_VAR 0 5
14438: IN
14439: OR
14440: PUSH
14441: LD_INT 45
14443: PUSH
14444: LD_VAR 0 5
14448: IN
14449: OR
14450: AND
14451: IFFALSE 14705
// begin hex := GetHexInfo ( x , y ) ;
14453: LD_ADDR_VAR 0 4
14457: PUSH
14458: LD_VAR 0 10
14462: PPUSH
14463: LD_VAR 0 11
14467: PPUSH
14468: CALL_OW 546
14472: ST_TO_ADDR
// if hex [ 1 ] then
14473: LD_VAR 0 4
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: IFFALSE 14485
// exit ;
14483: GO 14888
// height := hex [ 2 ] ;
14485: LD_ADDR_VAR 0 15
14489: PUSH
14490: LD_VAR 0 4
14494: PUSH
14495: LD_INT 2
14497: ARRAY
14498: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14499: LD_ADDR_VAR 0 14
14503: PUSH
14504: LD_INT 0
14506: PUSH
14507: LD_INT 2
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: LD_INT 5
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: ST_TO_ADDR
// for i in tmp do
14522: LD_ADDR_VAR 0 8
14526: PUSH
14527: LD_VAR 0 14
14531: PUSH
14532: FOR_IN
14533: IFFALSE 14703
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14535: LD_ADDR_VAR 0 9
14539: PUSH
14540: LD_VAR 0 10
14544: PPUSH
14545: LD_VAR 0 8
14549: PPUSH
14550: LD_INT 5
14552: PPUSH
14553: CALL_OW 272
14557: PUSH
14558: LD_VAR 0 11
14562: PPUSH
14563: LD_VAR 0 8
14567: PPUSH
14568: LD_INT 5
14570: PPUSH
14571: CALL_OW 273
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14580: LD_VAR 0 9
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PPUSH
14589: LD_VAR 0 9
14593: PUSH
14594: LD_INT 2
14596: ARRAY
14597: PPUSH
14598: CALL_OW 488
14602: IFFALSE 14701
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14604: LD_ADDR_VAR 0 4
14608: PUSH
14609: LD_VAR 0 9
14613: PUSH
14614: LD_INT 1
14616: ARRAY
14617: PPUSH
14618: LD_VAR 0 9
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: PPUSH
14627: CALL_OW 546
14631: ST_TO_ADDR
// if hex [ 1 ] then
14632: LD_VAR 0 4
14636: PUSH
14637: LD_INT 1
14639: ARRAY
14640: IFFALSE 14644
// continue ;
14642: GO 14532
// h := hex [ 2 ] ;
14644: LD_ADDR_VAR 0 13
14648: PUSH
14649: LD_VAR 0 4
14653: PUSH
14654: LD_INT 2
14656: ARRAY
14657: ST_TO_ADDR
// if h + 7 < height then
14658: LD_VAR 0 13
14662: PUSH
14663: LD_INT 7
14665: PLUS
14666: PUSH
14667: LD_VAR 0 15
14671: LESS
14672: IFFALSE 14701
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14674: LD_ADDR_VAR 0 18
14678: PUSH
14679: LD_INT 7
14681: PUSH
14682: LD_INT 28
14684: PUSH
14685: LD_INT 45
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: PUSH
14693: LD_VAR 0 12
14697: ARRAY
14698: ST_TO_ADDR
// break ;
14699: GO 14703
// end ; end ; end ;
14701: GO 14532
14703: POP
14704: POP
// end ; if not weapon then
14705: LD_VAR 0 18
14709: NOT
14710: IFFALSE 14770
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14712: LD_ADDR_VAR 0 5
14716: PUSH
14717: LD_VAR 0 5
14721: PUSH
14722: LD_INT 11
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 49
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: LIST
14735: DIFF
14736: ST_TO_ADDR
// if not list then
14737: LD_VAR 0 5
14741: NOT
14742: IFFALSE 14746
// exit ;
14744: GO 14888
// weapon := list [ rand ( 1 , list ) ] ;
14746: LD_ADDR_VAR 0 18
14750: PUSH
14751: LD_VAR 0 5
14755: PUSH
14756: LD_INT 1
14758: PPUSH
14759: LD_VAR 0 5
14763: PPUSH
14764: CALL_OW 12
14768: ARRAY
14769: ST_TO_ADDR
// end ; if weapon then
14770: LD_VAR 0 18
14774: IFFALSE 14888
// begin tmp := CostOfWeapon ( weapon ) ;
14776: LD_ADDR_VAR 0 14
14780: PUSH
14781: LD_VAR 0 18
14785: PPUSH
14786: CALL_OW 451
14790: ST_TO_ADDR
// j := GetBase ( tower ) ;
14791: LD_ADDR_VAR 0 9
14795: PUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 274
14805: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14806: LD_VAR 0 9
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 275
14818: PUSH
14819: LD_VAR 0 14
14823: PUSH
14824: LD_INT 1
14826: ARRAY
14827: GREATEREQUAL
14828: PUSH
14829: LD_VAR 0 9
14833: PPUSH
14834: LD_INT 2
14836: PPUSH
14837: CALL_OW 275
14841: PUSH
14842: LD_VAR 0 14
14846: PUSH
14847: LD_INT 2
14849: ARRAY
14850: GREATEREQUAL
14851: AND
14852: PUSH
14853: LD_VAR 0 9
14857: PPUSH
14858: LD_INT 3
14860: PPUSH
14861: CALL_OW 275
14865: PUSH
14866: LD_VAR 0 14
14870: PUSH
14871: LD_INT 3
14873: ARRAY
14874: GREATEREQUAL
14875: AND
14876: IFFALSE 14888
// result := weapon ;
14878: LD_ADDR_VAR 0 3
14882: PUSH
14883: LD_VAR 0 18
14887: ST_TO_ADDR
// end ; end ;
14888: LD_VAR 0 3
14892: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14893: LD_INT 0
14895: PPUSH
14896: PPUSH
// result := true ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_INT 1
14904: ST_TO_ADDR
// if array1 = array2 then
14905: LD_VAR 0 1
14909: PUSH
14910: LD_VAR 0 2
14914: EQUAL
14915: IFFALSE 14975
// begin for i = 1 to array1 do
14917: LD_ADDR_VAR 0 4
14921: PUSH
14922: DOUBLE
14923: LD_INT 1
14925: DEC
14926: ST_TO_ADDR
14927: LD_VAR 0 1
14931: PUSH
14932: FOR_TO
14933: IFFALSE 14971
// if array1 [ i ] <> array2 [ i ] then
14935: LD_VAR 0 1
14939: PUSH
14940: LD_VAR 0 4
14944: ARRAY
14945: PUSH
14946: LD_VAR 0 2
14950: PUSH
14951: LD_VAR 0 4
14955: ARRAY
14956: NONEQUAL
14957: IFFALSE 14969
// begin result := false ;
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 0
14966: ST_TO_ADDR
// break ;
14967: GO 14971
// end ;
14969: GO 14932
14971: POP
14972: POP
// end else
14973: GO 14983
// result := false ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_INT 0
14982: ST_TO_ADDR
// end ;
14983: LD_VAR 0 3
14987: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14988: LD_INT 0
14990: PPUSH
14991: PPUSH
// if not array1 or not array2 then
14992: LD_VAR 0 1
14996: NOT
14997: PUSH
14998: LD_VAR 0 2
15002: NOT
15003: OR
15004: IFFALSE 15008
// exit ;
15006: GO 15072
// result := true ;
15008: LD_ADDR_VAR 0 3
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// for i = 1 to array1 do
15016: LD_ADDR_VAR 0 4
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_TO
15032: IFFALSE 15070
// if array1 [ i ] <> array2 [ i ] then
15034: LD_VAR 0 1
15038: PUSH
15039: LD_VAR 0 4
15043: ARRAY
15044: PUSH
15045: LD_VAR 0 2
15049: PUSH
15050: LD_VAR 0 4
15054: ARRAY
15055: NONEQUAL
15056: IFFALSE 15068
// begin result := false ;
15058: LD_ADDR_VAR 0 3
15062: PUSH
15063: LD_INT 0
15065: ST_TO_ADDR
// break ;
15066: GO 15070
// end ;
15068: GO 15031
15070: POP
15071: POP
// end ;
15072: LD_VAR 0 3
15076: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15077: LD_INT 0
15079: PPUSH
15080: PPUSH
15081: PPUSH
// pom := GetBase ( fac ) ;
15082: LD_ADDR_VAR 0 5
15086: PUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 274
15096: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15097: LD_ADDR_VAR 0 4
15101: PUSH
15102: LD_VAR 0 2
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PPUSH
15111: LD_VAR 0 2
15115: PUSH
15116: LD_INT 2
15118: ARRAY
15119: PPUSH
15120: LD_VAR 0 2
15124: PUSH
15125: LD_INT 3
15127: ARRAY
15128: PPUSH
15129: LD_VAR 0 2
15133: PUSH
15134: LD_INT 4
15136: ARRAY
15137: PPUSH
15138: CALL_OW 449
15142: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15143: LD_ADDR_VAR 0 3
15147: PUSH
15148: LD_VAR 0 5
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 275
15160: PUSH
15161: LD_VAR 0 4
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: GREATEREQUAL
15170: PUSH
15171: LD_VAR 0 5
15175: PPUSH
15176: LD_INT 2
15178: PPUSH
15179: CALL_OW 275
15183: PUSH
15184: LD_VAR 0 4
15188: PUSH
15189: LD_INT 2
15191: ARRAY
15192: GREATEREQUAL
15193: AND
15194: PUSH
15195: LD_VAR 0 5
15199: PPUSH
15200: LD_INT 3
15202: PPUSH
15203: CALL_OW 275
15207: PUSH
15208: LD_VAR 0 4
15212: PUSH
15213: LD_INT 3
15215: ARRAY
15216: GREATEREQUAL
15217: AND
15218: ST_TO_ADDR
// end ;
15219: LD_VAR 0 3
15223: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15224: LD_INT 0
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
// pom := GetBase ( building ) ;
15230: LD_ADDR_VAR 0 3
15234: PUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 274
15244: ST_TO_ADDR
// if not pom then
15245: LD_VAR 0 3
15249: NOT
15250: IFFALSE 15254
// exit ;
15252: GO 15424
// btype := GetBType ( building ) ;
15254: LD_ADDR_VAR 0 5
15258: PUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 266
15268: ST_TO_ADDR
// if btype = b_armoury then
15269: LD_VAR 0 5
15273: PUSH
15274: LD_INT 4
15276: EQUAL
15277: IFFALSE 15287
// btype := b_barracks ;
15279: LD_ADDR_VAR 0 5
15283: PUSH
15284: LD_INT 5
15286: ST_TO_ADDR
// if btype = b_depot then
15287: LD_VAR 0 5
15291: PUSH
15292: LD_INT 0
15294: EQUAL
15295: IFFALSE 15305
// btype := b_warehouse ;
15297: LD_ADDR_VAR 0 5
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if btype = b_workshop then
15305: LD_VAR 0 5
15309: PUSH
15310: LD_INT 2
15312: EQUAL
15313: IFFALSE 15323
// btype := b_factory ;
15315: LD_ADDR_VAR 0 5
15319: PUSH
15320: LD_INT 3
15322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15323: LD_ADDR_VAR 0 4
15327: PUSH
15328: LD_VAR 0 5
15332: PPUSH
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 248
15342: PPUSH
15343: CALL_OW 450
15347: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15348: LD_ADDR_VAR 0 2
15352: PUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 275
15365: PUSH
15366: LD_VAR 0 4
15370: PUSH
15371: LD_INT 1
15373: ARRAY
15374: GREATEREQUAL
15375: PUSH
15376: LD_VAR 0 3
15380: PPUSH
15381: LD_INT 2
15383: PPUSH
15384: CALL_OW 275
15388: PUSH
15389: LD_VAR 0 4
15393: PUSH
15394: LD_INT 2
15396: ARRAY
15397: GREATEREQUAL
15398: AND
15399: PUSH
15400: LD_VAR 0 3
15404: PPUSH
15405: LD_INT 3
15407: PPUSH
15408: CALL_OW 275
15412: PUSH
15413: LD_VAR 0 4
15417: PUSH
15418: LD_INT 3
15420: ARRAY
15421: GREATEREQUAL
15422: AND
15423: ST_TO_ADDR
// end ;
15424: LD_VAR 0 2
15428: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
15433: PPUSH
// pom := GetBase ( building ) ;
15434: LD_ADDR_VAR 0 4
15438: PUSH
15439: LD_VAR 0 1
15443: PPUSH
15444: CALL_OW 274
15448: ST_TO_ADDR
// if not pom then
15449: LD_VAR 0 4
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15559
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15458: LD_ADDR_VAR 0 5
15462: PUSH
15463: LD_VAR 0 2
15467: PPUSH
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 248
15477: PPUSH
15478: CALL_OW 450
15482: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15483: LD_ADDR_VAR 0 3
15487: PUSH
15488: LD_VAR 0 4
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: CALL_OW 275
15500: PUSH
15501: LD_VAR 0 5
15505: PUSH
15506: LD_INT 1
15508: ARRAY
15509: GREATEREQUAL
15510: PUSH
15511: LD_VAR 0 4
15515: PPUSH
15516: LD_INT 2
15518: PPUSH
15519: CALL_OW 275
15523: PUSH
15524: LD_VAR 0 5
15528: PUSH
15529: LD_INT 2
15531: ARRAY
15532: GREATEREQUAL
15533: AND
15534: PUSH
15535: LD_VAR 0 4
15539: PPUSH
15540: LD_INT 3
15542: PPUSH
15543: CALL_OW 275
15547: PUSH
15548: LD_VAR 0 5
15552: PUSH
15553: LD_INT 3
15555: ARRAY
15556: GREATEREQUAL
15557: AND
15558: ST_TO_ADDR
// end ;
15559: LD_VAR 0 3
15563: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15564: LD_INT 0
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
// result := false ;
15577: LD_ADDR_VAR 0 8
15581: PUSH
15582: LD_INT 0
15584: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15585: LD_VAR 0 5
15589: NOT
15590: PUSH
15591: LD_VAR 0 1
15595: NOT
15596: OR
15597: PUSH
15598: LD_VAR 0 2
15602: NOT
15603: OR
15604: PUSH
15605: LD_VAR 0 3
15609: NOT
15610: OR
15611: IFFALSE 15615
// exit ;
15613: GO 16429
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15615: LD_ADDR_VAR 0 14
15619: PUSH
15620: LD_VAR 0 1
15624: PPUSH
15625: LD_VAR 0 2
15629: PPUSH
15630: LD_VAR 0 3
15634: PPUSH
15635: LD_VAR 0 4
15639: PPUSH
15640: LD_VAR 0 5
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 248
15653: PPUSH
15654: LD_INT 0
15656: PPUSH
15657: CALL 17662 0 6
15661: ST_TO_ADDR
// if not hexes then
15662: LD_VAR 0 14
15666: NOT
15667: IFFALSE 15671
// exit ;
15669: GO 16429
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15671: LD_ADDR_VAR 0 17
15675: PUSH
15676: LD_VAR 0 5
15680: PPUSH
15681: LD_INT 22
15683: PUSH
15684: LD_VAR 0 13
15688: PPUSH
15689: CALL_OW 255
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 2
15700: PUSH
15701: LD_INT 30
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 30
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 72
15734: ST_TO_ADDR
// for i = 1 to hexes do
15735: LD_ADDR_VAR 0 9
15739: PUSH
15740: DOUBLE
15741: LD_INT 1
15743: DEC
15744: ST_TO_ADDR
15745: LD_VAR 0 14
15749: PUSH
15750: FOR_TO
15751: IFFALSE 16427
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15753: LD_ADDR_VAR 0 13
15757: PUSH
15758: LD_VAR 0 14
15762: PUSH
15763: LD_VAR 0 9
15767: ARRAY
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_VAR 0 14
15777: PUSH
15778: LD_VAR 0 9
15782: ARRAY
15783: PUSH
15784: LD_INT 2
15786: ARRAY
15787: PPUSH
15788: CALL_OW 428
15792: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15793: LD_VAR 0 14
15797: PUSH
15798: LD_VAR 0 9
15802: ARRAY
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PPUSH
15808: LD_VAR 0 14
15812: PUSH
15813: LD_VAR 0 9
15817: ARRAY
15818: PUSH
15819: LD_INT 2
15821: ARRAY
15822: PPUSH
15823: CALL_OW 351
15827: PUSH
15828: LD_VAR 0 14
15832: PUSH
15833: LD_VAR 0 9
15837: ARRAY
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: LD_VAR 0 14
15847: PUSH
15848: LD_VAR 0 9
15852: ARRAY
15853: PUSH
15854: LD_INT 2
15856: ARRAY
15857: PPUSH
15858: CALL_OW 488
15862: NOT
15863: OR
15864: PUSH
15865: LD_VAR 0 13
15869: PPUSH
15870: CALL_OW 247
15874: PUSH
15875: LD_INT 3
15877: EQUAL
15878: OR
15879: IFFALSE 15885
// exit ;
15881: POP
15882: POP
15883: GO 16429
// if not tmp then
15885: LD_VAR 0 13
15889: NOT
15890: IFFALSE 15894
// continue ;
15892: GO 15750
// result := true ;
15894: LD_ADDR_VAR 0 8
15898: PUSH
15899: LD_INT 1
15901: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15902: LD_VAR 0 6
15906: PUSH
15907: LD_VAR 0 13
15911: PPUSH
15912: CALL_OW 247
15916: PUSH
15917: LD_INT 2
15919: EQUAL
15920: AND
15921: PUSH
15922: LD_VAR 0 13
15926: PPUSH
15927: CALL_OW 263
15931: PUSH
15932: LD_INT 1
15934: EQUAL
15935: AND
15936: IFFALSE 16100
// begin if IsDrivenBy ( tmp ) then
15938: LD_VAR 0 13
15942: PPUSH
15943: CALL_OW 311
15947: IFFALSE 15951
// continue ;
15949: GO 15750
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15951: LD_VAR 0 6
15955: PPUSH
15956: LD_INT 3
15958: PUSH
15959: LD_INT 60
15961: PUSH
15962: EMPTY
15963: LIST
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 3
15971: PUSH
15972: LD_INT 55
15974: PUSH
15975: EMPTY
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 72
15990: IFFALSE 16098
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15992: LD_ADDR_VAR 0 18
15996: PUSH
15997: LD_VAR 0 6
16001: PPUSH
16002: LD_INT 3
16004: PUSH
16005: LD_INT 60
16007: PUSH
16008: EMPTY
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 3
16017: PUSH
16018: LD_INT 55
16020: PUSH
16021: EMPTY
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 72
16036: PUSH
16037: LD_INT 1
16039: ARRAY
16040: ST_TO_ADDR
// if IsInUnit ( driver ) then
16041: LD_VAR 0 18
16045: PPUSH
16046: CALL_OW 310
16050: IFFALSE 16061
// ComExit ( driver ) ;
16052: LD_VAR 0 18
16056: PPUSH
16057: CALL 41442 0 1
// AddComEnterUnit ( driver , tmp ) ;
16061: LD_VAR 0 18
16065: PPUSH
16066: LD_VAR 0 13
16070: PPUSH
16071: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16075: LD_VAR 0 18
16079: PPUSH
16080: LD_VAR 0 7
16084: PPUSH
16085: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16089: LD_VAR 0 18
16093: PPUSH
16094: CALL_OW 181
// end ; continue ;
16098: GO 15750
// end ; if not cleaners or not tmp in cleaners then
16100: LD_VAR 0 6
16104: NOT
16105: PUSH
16106: LD_VAR 0 13
16110: PUSH
16111: LD_VAR 0 6
16115: IN
16116: NOT
16117: OR
16118: IFFALSE 16425
// begin if dep then
16120: LD_VAR 0 17
16124: IFFALSE 16260
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16126: LD_ADDR_VAR 0 16
16130: PUSH
16131: LD_VAR 0 17
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PPUSH
16140: CALL_OW 250
16144: PPUSH
16145: LD_VAR 0 17
16149: PUSH
16150: LD_INT 1
16152: ARRAY
16153: PPUSH
16154: CALL_OW 254
16158: PPUSH
16159: LD_INT 5
16161: PPUSH
16162: CALL_OW 272
16166: PUSH
16167: LD_VAR 0 17
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PPUSH
16176: CALL_OW 251
16180: PPUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: PPUSH
16190: CALL_OW 254
16194: PPUSH
16195: LD_INT 5
16197: PPUSH
16198: CALL_OW 273
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16207: LD_VAR 0 16
16211: PUSH
16212: LD_INT 1
16214: ARRAY
16215: PPUSH
16216: LD_VAR 0 16
16220: PUSH
16221: LD_INT 2
16223: ARRAY
16224: PPUSH
16225: CALL_OW 488
16229: IFFALSE 16260
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16231: LD_VAR 0 13
16235: PPUSH
16236: LD_VAR 0 16
16240: PUSH
16241: LD_INT 1
16243: ARRAY
16244: PPUSH
16245: LD_VAR 0 16
16249: PUSH
16250: LD_INT 2
16252: ARRAY
16253: PPUSH
16254: CALL_OW 111
// continue ;
16258: GO 15750
// end ; end ; r := GetDir ( tmp ) ;
16260: LD_ADDR_VAR 0 15
16264: PUSH
16265: LD_VAR 0 13
16269: PPUSH
16270: CALL_OW 254
16274: ST_TO_ADDR
// if r = 5 then
16275: LD_VAR 0 15
16279: PUSH
16280: LD_INT 5
16282: EQUAL
16283: IFFALSE 16293
// r := 0 ;
16285: LD_ADDR_VAR 0 15
16289: PUSH
16290: LD_INT 0
16292: ST_TO_ADDR
// for j = r to 5 do
16293: LD_ADDR_VAR 0 10
16297: PUSH
16298: DOUBLE
16299: LD_VAR 0 15
16303: DEC
16304: ST_TO_ADDR
16305: LD_INT 5
16307: PUSH
16308: FOR_TO
16309: IFFALSE 16423
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16311: LD_ADDR_VAR 0 11
16315: PUSH
16316: LD_VAR 0 13
16320: PPUSH
16321: CALL_OW 250
16325: PPUSH
16326: LD_VAR 0 10
16330: PPUSH
16331: LD_INT 2
16333: PPUSH
16334: CALL_OW 272
16338: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16339: LD_ADDR_VAR 0 12
16343: PUSH
16344: LD_VAR 0 13
16348: PPUSH
16349: CALL_OW 251
16353: PPUSH
16354: LD_VAR 0 10
16358: PPUSH
16359: LD_INT 2
16361: PPUSH
16362: CALL_OW 273
16366: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16367: LD_VAR 0 11
16371: PPUSH
16372: LD_VAR 0 12
16376: PPUSH
16377: CALL_OW 488
16381: PUSH
16382: LD_VAR 0 11
16386: PPUSH
16387: LD_VAR 0 12
16391: PPUSH
16392: CALL_OW 428
16396: NOT
16397: AND
16398: IFFALSE 16421
// begin ComMoveXY ( tmp , _x , _y ) ;
16400: LD_VAR 0 13
16404: PPUSH
16405: LD_VAR 0 11
16409: PPUSH
16410: LD_VAR 0 12
16414: PPUSH
16415: CALL_OW 111
// break ;
16419: GO 16423
// end ; end ;
16421: GO 16308
16423: POP
16424: POP
// end ; end ;
16425: GO 15750
16427: POP
16428: POP
// end ;
16429: LD_VAR 0 8
16433: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16434: LD_INT 0
16436: PPUSH
// result := true ;
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 24
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16464
16456: LD_INT 33
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16489
16464: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_INT 32
16472: PPUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 321
16482: PUSH
16483: LD_INT 2
16485: EQUAL
16486: ST_TO_ADDR
16487: GO 16805
16489: LD_INT 20
16491: DOUBLE
16492: EQUAL
16493: IFTRUE 16497
16495: GO 16522
16497: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_INT 6
16505: PPUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 321
16515: PUSH
16516: LD_INT 2
16518: EQUAL
16519: ST_TO_ADDR
16520: GO 16805
16522: LD_INT 22
16524: DOUBLE
16525: EQUAL
16526: IFTRUE 16536
16528: LD_INT 36
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16561
16536: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_INT 15
16544: PPUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 321
16554: PUSH
16555: LD_INT 2
16557: EQUAL
16558: ST_TO_ADDR
16559: GO 16805
16561: LD_INT 30
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16594
16569: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_INT 20
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 321
16587: PUSH
16588: LD_INT 2
16590: EQUAL
16591: ST_TO_ADDR
16592: GO 16805
16594: LD_INT 28
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16608
16600: LD_INT 21
16602: DOUBLE
16603: EQUAL
16604: IFTRUE 16608
16606: GO 16633
16608: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: LD_INT 21
16616: PPUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 321
16626: PUSH
16627: LD_INT 2
16629: EQUAL
16630: ST_TO_ADDR
16631: GO 16805
16633: LD_INT 16
16635: DOUBLE
16636: EQUAL
16637: IFTRUE 16641
16639: GO 16666
16641: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16642: LD_ADDR_VAR 0 3
16646: PUSH
16647: LD_INT 84
16649: PPUSH
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL_OW 321
16659: PUSH
16660: LD_INT 2
16662: EQUAL
16663: ST_TO_ADDR
16664: GO 16805
16666: LD_INT 19
16668: DOUBLE
16669: EQUAL
16670: IFTRUE 16680
16672: LD_INT 23
16674: DOUBLE
16675: EQUAL
16676: IFTRUE 16680
16678: GO 16705
16680: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16681: LD_ADDR_VAR 0 3
16685: PUSH
16686: LD_INT 83
16688: PPUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 321
16698: PUSH
16699: LD_INT 2
16701: EQUAL
16702: ST_TO_ADDR
16703: GO 16805
16705: LD_INT 17
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16738
16713: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16714: LD_ADDR_VAR 0 3
16718: PUSH
16719: LD_INT 39
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 321
16731: PUSH
16732: LD_INT 2
16734: EQUAL
16735: ST_TO_ADDR
16736: GO 16805
16738: LD_INT 18
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16771
16746: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16747: LD_ADDR_VAR 0 3
16751: PUSH
16752: LD_INT 40
16754: PPUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 321
16764: PUSH
16765: LD_INT 2
16767: EQUAL
16768: ST_TO_ADDR
16769: GO 16805
16771: LD_INT 27
16773: DOUBLE
16774: EQUAL
16775: IFTRUE 16779
16777: GO 16804
16779: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16780: LD_ADDR_VAR 0 3
16784: PUSH
16785: LD_INT 35
16787: PPUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 321
16797: PUSH
16798: LD_INT 2
16800: EQUAL
16801: ST_TO_ADDR
16802: GO 16805
16804: POP
// end ;
16805: LD_VAR 0 3
16809: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// result := false ;
16823: LD_ADDR_VAR 0 6
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16831: LD_VAR 0 1
16835: NOT
16836: PUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 266
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: IN
16857: NOT
16858: OR
16859: PUSH
16860: LD_VAR 0 2
16864: NOT
16865: OR
16866: PUSH
16867: LD_VAR 0 5
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 4
16886: PUSH
16887: LD_INT 5
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: IN
16898: NOT
16899: OR
16900: PUSH
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_VAR 0 4
16910: PPUSH
16911: CALL_OW 488
16915: NOT
16916: OR
16917: IFFALSE 16921
// exit ;
16919: GO 17657
// side := GetSide ( depot ) ;
16921: LD_ADDR_VAR 0 9
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 255
16935: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16936: LD_VAR 0 9
16940: PPUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: CALL 16434 0 2
16950: NOT
16951: IFFALSE 16955
// exit ;
16953: GO 17657
// pom := GetBase ( depot ) ;
16955: LD_ADDR_VAR 0 10
16959: PUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 274
16969: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16970: LD_ADDR_VAR 0 11
16974: PUSH
16975: LD_VAR 0 2
16979: PPUSH
16980: LD_VAR 0 1
16984: PPUSH
16985: CALL_OW 248
16989: PPUSH
16990: CALL_OW 450
16994: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16995: LD_VAR 0 10
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 275
17007: PUSH
17008: LD_VAR 0 11
17012: PUSH
17013: LD_INT 1
17015: ARRAY
17016: GREATEREQUAL
17017: PUSH
17018: LD_VAR 0 10
17022: PPUSH
17023: LD_INT 2
17025: PPUSH
17026: CALL_OW 275
17030: PUSH
17031: LD_VAR 0 11
17035: PUSH
17036: LD_INT 2
17038: ARRAY
17039: GREATEREQUAL
17040: AND
17041: PUSH
17042: LD_VAR 0 10
17046: PPUSH
17047: LD_INT 3
17049: PPUSH
17050: CALL_OW 275
17054: PUSH
17055: LD_VAR 0 11
17059: PUSH
17060: LD_INT 3
17062: ARRAY
17063: GREATEREQUAL
17064: AND
17065: NOT
17066: IFFALSE 17070
// exit ;
17068: GO 17657
// if GetBType ( depot ) = b_depot then
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 266
17079: PUSH
17080: LD_INT 0
17082: EQUAL
17083: IFFALSE 17095
// dist := 28 else
17085: LD_ADDR_VAR 0 14
17089: PUSH
17090: LD_INT 28
17092: ST_TO_ADDR
17093: GO 17103
// dist := 36 ;
17095: LD_ADDR_VAR 0 14
17099: PUSH
17100: LD_INT 36
17102: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: LD_VAR 0 4
17117: PPUSH
17118: CALL_OW 297
17122: PUSH
17123: LD_VAR 0 14
17127: GREATER
17128: IFFALSE 17132
// exit ;
17130: GO 17657
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17132: LD_ADDR_VAR 0 12
17136: PUSH
17137: LD_VAR 0 2
17141: PPUSH
17142: LD_VAR 0 3
17146: PPUSH
17147: LD_VAR 0 4
17151: PPUSH
17152: LD_VAR 0 5
17156: PPUSH
17157: LD_VAR 0 1
17161: PPUSH
17162: CALL_OW 248
17166: PPUSH
17167: LD_INT 0
17169: PPUSH
17170: CALL 17662 0 6
17174: ST_TO_ADDR
// if not hexes then
17175: LD_VAR 0 12
17179: NOT
17180: IFFALSE 17184
// exit ;
17182: GO 17657
// hex := GetHexInfo ( x , y ) ;
17184: LD_ADDR_VAR 0 15
17188: PUSH
17189: LD_VAR 0 3
17193: PPUSH
17194: LD_VAR 0 4
17198: PPUSH
17199: CALL_OW 546
17203: ST_TO_ADDR
// if hex [ 1 ] then
17204: LD_VAR 0 15
17208: PUSH
17209: LD_INT 1
17211: ARRAY
17212: IFFALSE 17216
// exit ;
17214: GO 17657
// height := hex [ 2 ] ;
17216: LD_ADDR_VAR 0 13
17220: PUSH
17221: LD_VAR 0 15
17225: PUSH
17226: LD_INT 2
17228: ARRAY
17229: ST_TO_ADDR
// for i = 1 to hexes do
17230: LD_ADDR_VAR 0 7
17234: PUSH
17235: DOUBLE
17236: LD_INT 1
17238: DEC
17239: ST_TO_ADDR
17240: LD_VAR 0 12
17244: PUSH
17245: FOR_TO
17246: IFFALSE 17576
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17248: LD_VAR 0 12
17252: PUSH
17253: LD_VAR 0 7
17257: ARRAY
17258: PUSH
17259: LD_INT 1
17261: ARRAY
17262: PPUSH
17263: LD_VAR 0 12
17267: PUSH
17268: LD_VAR 0 7
17272: ARRAY
17273: PUSH
17274: LD_INT 2
17276: ARRAY
17277: PPUSH
17278: CALL_OW 488
17282: NOT
17283: PUSH
17284: LD_VAR 0 12
17288: PUSH
17289: LD_VAR 0 7
17293: ARRAY
17294: PUSH
17295: LD_INT 1
17297: ARRAY
17298: PPUSH
17299: LD_VAR 0 12
17303: PUSH
17304: LD_VAR 0 7
17308: ARRAY
17309: PUSH
17310: LD_INT 2
17312: ARRAY
17313: PPUSH
17314: CALL_OW 428
17318: PUSH
17319: LD_INT 0
17321: GREATER
17322: OR
17323: PUSH
17324: LD_VAR 0 12
17328: PUSH
17329: LD_VAR 0 7
17333: ARRAY
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: PPUSH
17339: LD_VAR 0 12
17343: PUSH
17344: LD_VAR 0 7
17348: ARRAY
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: PPUSH
17354: CALL_OW 351
17358: OR
17359: IFFALSE 17365
// exit ;
17361: POP
17362: POP
17363: GO 17657
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17365: LD_ADDR_VAR 0 8
17369: PUSH
17370: LD_VAR 0 12
17374: PUSH
17375: LD_VAR 0 7
17379: ARRAY
17380: PUSH
17381: LD_INT 1
17383: ARRAY
17384: PPUSH
17385: LD_VAR 0 12
17389: PUSH
17390: LD_VAR 0 7
17394: ARRAY
17395: PUSH
17396: LD_INT 2
17398: ARRAY
17399: PPUSH
17400: CALL_OW 546
17404: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17405: LD_VAR 0 8
17409: PUSH
17410: LD_INT 1
17412: ARRAY
17413: PUSH
17414: LD_VAR 0 8
17418: PUSH
17419: LD_INT 2
17421: ARRAY
17422: PUSH
17423: LD_VAR 0 13
17427: PUSH
17428: LD_INT 2
17430: PLUS
17431: GREATER
17432: OR
17433: PUSH
17434: LD_VAR 0 8
17438: PUSH
17439: LD_INT 2
17441: ARRAY
17442: PUSH
17443: LD_VAR 0 13
17447: PUSH
17448: LD_INT 2
17450: MINUS
17451: LESS
17452: OR
17453: PUSH
17454: LD_VAR 0 8
17458: PUSH
17459: LD_INT 3
17461: ARRAY
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: LD_INT 8
17468: PUSH
17469: LD_INT 9
17471: PUSH
17472: LD_INT 10
17474: PUSH
17475: LD_INT 11
17477: PUSH
17478: LD_INT 12
17480: PUSH
17481: LD_INT 13
17483: PUSH
17484: LD_INT 16
17486: PUSH
17487: LD_INT 17
17489: PUSH
17490: LD_INT 18
17492: PUSH
17493: LD_INT 19
17495: PUSH
17496: LD_INT 20
17498: PUSH
17499: LD_INT 21
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: IN
17517: NOT
17518: OR
17519: PUSH
17520: LD_VAR 0 8
17524: PUSH
17525: LD_INT 5
17527: ARRAY
17528: NOT
17529: OR
17530: PUSH
17531: LD_VAR 0 8
17535: PUSH
17536: LD_INT 6
17538: ARRAY
17539: PUSH
17540: LD_INT 1
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: LD_INT 7
17548: PUSH
17549: LD_INT 9
17551: PUSH
17552: LD_INT 10
17554: PUSH
17555: LD_INT 11
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: IN
17566: NOT
17567: OR
17568: IFFALSE 17574
// exit ;
17570: POP
17571: POP
17572: GO 17657
// end ;
17574: GO 17245
17576: POP
17577: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17578: LD_VAR 0 9
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: LD_INT 20
17595: PPUSH
17596: CALL 9609 0 4
17600: PUSH
17601: LD_INT 4
17603: ARRAY
17604: IFFALSE 17608
// exit ;
17606: GO 17657
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17608: LD_VAR 0 2
17612: PUSH
17613: LD_INT 29
17615: PUSH
17616: LD_INT 30
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: IN
17623: PUSH
17624: LD_VAR 0 3
17628: PPUSH
17629: LD_VAR 0 4
17633: PPUSH
17634: LD_VAR 0 9
17638: PPUSH
17639: CALL_OW 440
17643: NOT
17644: AND
17645: IFFALSE 17649
// exit ;
17647: GO 17657
// result := true ;
17649: LD_ADDR_VAR 0 6
17653: PUSH
17654: LD_INT 1
17656: ST_TO_ADDR
// end ;
17657: LD_VAR 0 6
17661: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
17721: PPUSH
// result = [ ] ;
17722: LD_ADDR_VAR 0 7
17726: PUSH
17727: EMPTY
17728: ST_TO_ADDR
// temp_list = [ ] ;
17729: LD_ADDR_VAR 0 9
17733: PUSH
17734: EMPTY
17735: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17736: LD_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 3
17752: PUSH
17753: LD_INT 4
17755: PUSH
17756: LD_INT 5
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: IN
17767: NOT
17768: PUSH
17769: LD_VAR 0 1
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: IN
17784: PUSH
17785: LD_VAR 0 5
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 2
17795: PUSH
17796: LD_INT 3
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: IN
17804: NOT
17805: AND
17806: OR
17807: IFFALSE 17811
// exit ;
17809: GO 36202
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17811: LD_VAR 0 1
17815: PUSH
17816: LD_INT 6
17818: PUSH
17819: LD_INT 7
17821: PUSH
17822: LD_INT 8
17824: PUSH
17825: LD_INT 13
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 15
17833: PUSH
17834: LD_INT 11
17836: PUSH
17837: LD_INT 14
17839: PUSH
17840: LD_INT 10
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: IN
17854: IFFALSE 17864
// btype = b_lab ;
17856: LD_ADDR_VAR 0 1
17860: PUSH
17861: LD_INT 6
17863: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17864: LD_VAR 0 6
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: IN
17883: NOT
17884: PUSH
17885: LD_VAR 0 1
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 3
17901: PUSH
17902: LD_INT 6
17904: PUSH
17905: LD_INT 36
17907: PUSH
17908: LD_INT 4
17910: PUSH
17911: LD_INT 5
17913: PUSH
17914: LD_INT 31
17916: PUSH
17917: LD_INT 32
17919: PUSH
17920: LD_INT 33
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: IN
17936: NOT
17937: PUSH
17938: LD_VAR 0 6
17942: PUSH
17943: LD_INT 1
17945: EQUAL
17946: AND
17947: OR
17948: PUSH
17949: LD_VAR 0 1
17953: PUSH
17954: LD_INT 2
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: IN
17964: NOT
17965: PUSH
17966: LD_VAR 0 6
17970: PUSH
17971: LD_INT 2
17973: EQUAL
17974: AND
17975: OR
17976: IFFALSE 17986
// mode = 0 ;
17978: LD_ADDR_VAR 0 6
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
// case mode of 0 :
17986: LD_VAR 0 6
17990: PUSH
17991: LD_INT 0
17993: DOUBLE
17994: EQUAL
17995: IFTRUE 17999
17997: GO 29452
17999: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18000: LD_ADDR_VAR 0 11
18004: PUSH
18005: LD_INT 0
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 0
18017: PUSH
18018: LD_INT 1
18020: NEG
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 1
18058: NEG
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 1
18081: NEG
18082: PUSH
18083: LD_INT 2
18085: NEG
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 2
18096: NEG
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 0
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 1
18135: NEG
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 3
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: LD_INT 3
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18193: LD_ADDR_VAR 0 12
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 2
18316: NEG
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: NEG
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 3
18350: NEG
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 3
18361: NEG
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18389: LD_ADDR_VAR 0 13
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: NEG
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 2
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 2
18512: NEG
18513: PUSH
18514: LD_INT 1
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 2
18524: NEG
18525: PUSH
18526: LD_INT 2
18528: NEG
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 2
18536: NEG
18537: PUSH
18538: LD_INT 3
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 3
18548: NEG
18549: PUSH
18550: LD_INT 2
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 3
18560: NEG
18561: PUSH
18562: LD_INT 3
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18588: LD_ADDR_VAR 0 14
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: LD_INT 1
18608: NEG
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: LD_INT 1
18661: NEG
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: LD_INT 2
18673: NEG
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: LD_INT 2
18684: NEG
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 1
18692: PUSH
18693: LD_INT 1
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: LD_INT 3
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 3
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18784: LD_ADDR_VAR 0 15
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: LD_INT 1
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 0
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: LD_INT 1
18868: NEG
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 2
18907: NEG
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: NEG
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 3
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18977: LD_ADDR_VAR 0 16
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: LD_INT 1
19050: NEG
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: LD_INT 2
19062: NEG
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 2
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: NEG
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: LD_INT 2
19116: NEG
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 3
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 3
19134: PUSH
19135: LD_INT 3
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: LD_INT 3
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19170: LD_ADDR_VAR 0 17
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: LD_INT 1
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: LD_INT 2
19255: NEG
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: LD_INT 1
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 2
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 2
19346: NEG
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 1
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: LD_INT 2
19373: NEG
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19400: LD_ADDR_VAR 0 18
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 0
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: NEG
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 1
19481: NEG
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 2
19496: NEG
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 2
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: LD_INT 2
19603: NEG
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19630: LD_ADDR_VAR 0 19
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19860: LD_ADDR_VAR 0 20
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: NEG
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 2
20036: NEG
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: LD_INT 2
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20090: LD_ADDR_VAR 0 21
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 2
20266: NEG
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20320: LD_ADDR_VAR 0 22
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20550: LD_ADDR_VAR 0 23
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: LD_INT 3
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: LD_INT 3
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 2
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20830: LD_ADDR_VAR 0 24
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 1
20850: NEG
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: LD_INT 2
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 2
21029: NEG
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 3
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 3
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21106: LD_ADDR_VAR 0 25
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 0
21199: PUSH
21200: LD_INT 2
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 0
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: NEG
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 2
21305: NEG
21306: PUSH
21307: LD_INT 2
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 3
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 3
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 3
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21380: LD_ADDR_VAR 0 26
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: NEG
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: LD_INT 2
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: LD_INT 2
21476: NEG
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: LD_INT 2
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: LD_INT 3
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: NEG
21612: PUSH
21613: LD_INT 2
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 1
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21656: LD_ADDR_VAR 0 27
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: LD_INT 1
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: NEG
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: LD_INT 2
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: LD_INT 0
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 2
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: NEG
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: NEG
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 3
21889: NEG
21890: PUSH
21891: LD_INT 1
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 3
21901: NEG
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21936: LD_ADDR_VAR 0 28
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: LD_INT 0
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: LD_INT 1
21956: NEG
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 0
22029: PUSH
22030: LD_INT 2
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: NEG
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: LD_INT 2
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: LD_INT 3
22151: NEG
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 3
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 3
22171: NEG
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 3
22183: NEG
22184: PUSH
22185: LD_INT 2
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22218: LD_ADDR_VAR 0 29
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: LD_INT 2
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 2
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: NEG
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: NEG
22397: PUSH
22398: LD_INT 2
22400: NEG
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: LD_INT 3
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 3
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 3
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 3
22462: NEG
22463: PUSH
22464: LD_INT 2
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22497: LD_ADDR_VAR 0 30
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: LD_INT 1
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 2
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: LD_INT 3
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 3
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22775: LD_ADDR_VAR 0 31
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 2
22964: NEG
22965: PUSH
22966: LD_INT 3
22968: NEG
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: LD_INT 1
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 3
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: LD_INT 3
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 3
23018: NEG
23019: PUSH
23020: LD_INT 2
23022: NEG
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23053: LD_ADDR_VAR 0 32
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: LD_INT 1
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: LD_INT 2
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 2
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 1
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: NEG
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 3
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: LD_INT 2
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 3
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 3
23296: NEG
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23331: LD_ADDR_VAR 0 33
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: NEG
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 2
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: LD_INT 3
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 3
23575: NEG
23576: PUSH
23577: LD_INT 2
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23610: LD_ADDR_VAR 0 34
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: LD_INT 3
23805: NEG
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 2
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: LD_INT 3
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: NEG
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 3
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23890: LD_ADDR_VAR 0 35
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 2
23981: NEG
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24002: LD_ADDR_VAR 0 36
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: LD_INT 2
24087: NEG
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24114: LD_ADDR_VAR 0 37
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: LD_INT 1
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24226: LD_ADDR_VAR 0 38
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24338: LD_ADDR_VAR 0 39
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 0
24355: PUSH
24356: LD_INT 1
24358: NEG
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: NEG
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24450: LD_ADDR_VAR 0 40
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24562: LD_ADDR_VAR 0 41
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 2
24717: NEG
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: NEG
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: NEG
24741: PUSH
24742: LD_INT 2
24744: NEG
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 2
24752: NEG
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 3
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 2
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 3
24805: PUSH
24806: LD_INT 3
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: LD_INT 3
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 3
24836: NEG
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 3
24847: NEG
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 3
24859: NEG
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 3
24871: NEG
24872: PUSH
24873: LD_INT 3
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24912: LD_ADDR_VAR 0 42
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 2
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: NEG
25091: PUSH
25092: LD_INT 2
25094: NEG
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: LD_INT 3
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: LD_INT 3
25118: NEG
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 3
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 3
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 3
25158: PUSH
25159: LD_INT 3
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 3
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 3
25209: NEG
25210: PUSH
25211: LD_INT 2
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 3
25221: NEG
25222: PUSH
25223: LD_INT 3
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25262: LD_ADDR_VAR 0 43
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: LD_INT 2
25347: NEG
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 2
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 2
25428: NEG
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: NEG
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: LD_INT 3
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 2
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 3
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 3
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 3
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 3
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: NEG
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 3
25558: NEG
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 3
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25610: LD_ADDR_VAR 0 44
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 2
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 3
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 3
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 3
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: LD_INT 3
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: LD_INT 3
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 3
25884: NEG
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 3
25895: NEG
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 3
25907: NEG
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 3
25919: NEG
25920: PUSH
25921: LD_INT 3
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25960: LD_ADDR_VAR 0 45
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: LD_INT 2
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 2
26126: NEG
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: NEG
26139: PUSH
26140: LD_INT 2
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: LD_INT 3
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 3
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 3
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 3
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 3
26206: PUSH
26207: LD_INT 3
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: LD_INT 3
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: LD_INT 3
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 3
26257: NEG
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 3
26269: NEG
26270: PUSH
26271: LD_INT 3
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26310: LD_ADDR_VAR 0 46
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 2
26476: NEG
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 3
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 3
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 3
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 3
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: LD_INT 3
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 3
26606: NEG
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 3
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26658: LD_ADDR_VAR 0 47
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: LD_INT 2
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26809: LD_ADDR_VAR 0 48
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 2
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26956: LD_ADDR_VAR 0 49
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 1
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27100: LD_ADDR_VAR 0 50
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27244: LD_ADDR_VAR 0 51
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27391: LD_ADDR_VAR 0 52
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: NEG
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: NEG
27519: PUSH
27520: LD_INT 2
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27542: LD_ADDR_VAR 0 53
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: LD_INT 2
27627: NEG
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: LD_INT 2
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 2
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27772: LD_ADDR_VAR 0 54
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 2
27948: NEG
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28002: LD_ADDR_VAR 0 55
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: NEG
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28232: LD_ADDR_VAR 0 56
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 2
28408: NEG
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: LD_INT 2
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28462: LD_ADDR_VAR 0 57
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 2
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: NEG
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: NEG
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: LD_INT 2
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28692: LD_ADDR_VAR 0 58
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: LD_INT 2
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 2
28868: NEG
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 2
28879: NEG
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: LD_INT 2
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28922: LD_ADDR_VAR 0 59
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29010: LD_ADDR_VAR 0 60
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29098: LD_ADDR_VAR 0 61
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29186: LD_ADDR_VAR 0 62
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29274: LD_ADDR_VAR 0 63
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 1
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29362: LD_ADDR_VAR 0 64
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
// end ; 1 :
29450: GO 35347
29452: LD_INT 1
29454: DOUBLE
29455: EQUAL
29456: IFTRUE 29460
29458: GO 32083
29460: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29461: LD_ADDR_VAR 0 11
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: LD_INT 3
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: LD_INT 3
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29505: LD_ADDR_VAR 0 12
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 3
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29546: LD_ADDR_VAR 0 13
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29586: LD_ADDR_VAR 0 14
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29627: LD_ADDR_VAR 0 15
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 3
29645: NEG
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29671: LD_ADDR_VAR 0 16
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: LD_INT 3
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 3
29690: NEG
29691: PUSH
29692: LD_INT 2
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: LD_INT 3
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29717: LD_ADDR_VAR 0 17
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 3
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 3
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29761: LD_ADDR_VAR 0 18
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29802: LD_ADDR_VAR 0 19
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 3
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29842: LD_ADDR_VAR 0 20
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29883: LD_ADDR_VAR 0 21
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: NEG
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29927: LD_ADDR_VAR 0 22
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: LD_INT 3
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: NEG
29947: PUSH
29948: LD_INT 2
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 3
29958: NEG
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29973: LD_ADDR_VAR 0 23
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 3
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: LD_INT 4
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 3
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30017: LD_ADDR_VAR 0 24
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30058: LD_ADDR_VAR 0 25
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 4
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30098: LD_ADDR_VAR 0 26
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 4
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30139: LD_ADDR_VAR 0 27
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 4
30168: NEG
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30183: LD_ADDR_VAR 0 28
30187: PUSH
30188: LD_INT 3
30190: NEG
30191: PUSH
30192: LD_INT 3
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: NEG
30203: PUSH
30204: LD_INT 4
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 4
30214: NEG
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30229: LD_ADDR_VAR 0 29
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 3
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 2
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 4
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 4
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 3
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 5
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: LD_INT 5
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: LD_INT 4
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 6
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 6
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 5
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30384: LD_ADDR_VAR 0 30
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 4
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 5
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 5
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 5
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 6
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 6
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30527: LD_ADDR_VAR 0 31
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: LD_INT 3
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: LD_INT 3
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 4
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 4
30574: PUSH
30575: LD_INT 4
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 3
30584: PUSH
30585: LD_INT 4
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 5
30594: PUSH
30595: LD_INT 4
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 5
30604: PUSH
30605: LD_INT 5
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: LD_INT 5
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 6
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 6
30634: PUSH
30635: LD_INT 6
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 5
30644: PUSH
30645: LD_INT 6
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30666: LD_ADDR_VAR 0 32
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 4
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 5
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 5
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: LD_INT 4
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: LD_INT 6
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: LD_INT 6
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: LD_INT 5
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30809: LD_ADDR_VAR 0 33
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 4
30861: NEG
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 4
30872: NEG
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 4
30884: NEG
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 5
30895: NEG
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 5
30906: NEG
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 5
30918: NEG
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 6
30929: NEG
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 6
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30964: LD_ADDR_VAR 0 34
30968: PUSH
30969: LD_INT 2
30971: NEG
30972: PUSH
30973: LD_INT 3
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 3
30983: NEG
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: LD_INT 4
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: LD_INT 3
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 4
31031: NEG
31032: PUSH
31033: LD_INT 4
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 4
31043: NEG
31044: PUSH
31045: LD_INT 5
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 5
31055: NEG
31056: PUSH
31057: LD_INT 4
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 5
31067: NEG
31068: PUSH
31069: LD_INT 5
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 5
31079: NEG
31080: PUSH
31081: LD_INT 6
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 6
31091: NEG
31092: PUSH
31093: LD_INT 5
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 6
31103: NEG
31104: PUSH
31105: LD_INT 6
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31127: LD_ADDR_VAR 0 41
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: LD_INT 3
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: LD_INT 2
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31171: LD_ADDR_VAR 0 42
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 1
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31212: LD_ADDR_VAR 0 43
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: LD_INT 2
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31252: LD_ADDR_VAR 0 44
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31293: LD_ADDR_VAR 0 45
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 3
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31337: LD_ADDR_VAR 0 46
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: LD_INT 3
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: LD_INT 2
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31383: LD_ADDR_VAR 0 47
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: LD_INT 3
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: LD_INT 3
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31416: LD_ADDR_VAR 0 48
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31447: LD_ADDR_VAR 0 49
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31476: LD_ADDR_VAR 0 50
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: LD_INT 3
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31505: LD_ADDR_VAR 0 51
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: NEG
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31536: LD_ADDR_VAR 0 52
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31569: LD_ADDR_VAR 0 53
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: LD_INT 3
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31613: LD_ADDR_VAR 0 54
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31654: LD_ADDR_VAR 0 55
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 3
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31694: LD_ADDR_VAR 0 56
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31735: LD_ADDR_VAR 0 57
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31779: LD_ADDR_VAR 0 58
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: LD_INT 3
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 3
31798: NEG
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 3
31810: NEG
31811: PUSH
31812: LD_INT 3
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31825: LD_ADDR_VAR 0 59
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31869: LD_ADDR_VAR 0 60
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31910: LD_ADDR_VAR 0 61
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31950: LD_ADDR_VAR 0 62
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31991: LD_ADDR_VAR 0 63
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32035: LD_ADDR_VAR 0 64
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// end ; 2 :
32081: GO 35347
32083: LD_INT 2
32085: DOUBLE
32086: EQUAL
32087: IFTRUE 32091
32089: GO 35346
32091: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32092: LD_ADDR_VAR 0 29
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 4
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 5
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 5
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 4
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 3
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 5
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 4
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: LD_INT 4
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 4
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: LD_INT 4
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 5
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: LD_INT 4
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 3
32375: NEG
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 3
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 4
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 4
32454: NEG
32455: PUSH
32456: LD_INT 2
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 4
32477: NEG
32478: PUSH
32479: LD_INT 4
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 4
32489: NEG
32490: PUSH
32491: LD_INT 5
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: LD_INT 4
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 4
32525: NEG
32526: PUSH
32527: LD_INT 3
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 5
32537: NEG
32538: PUSH
32539: LD_INT 4
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 5
32549: NEG
32550: PUSH
32551: LD_INT 5
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: LD_INT 5
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 5
32573: NEG
32574: PUSH
32575: LD_INT 3
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32630: LD_ADDR_VAR 0 30
32634: PUSH
32635: LD_INT 4
32637: PUSH
32638: LD_INT 4
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 4
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 5
32667: PUSH
32668: LD_INT 5
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: LD_INT 5
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: LD_INT 3
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: LD_INT 5
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: LD_INT 4
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 4
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 4
32820: NEG
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 4
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 3
32843: NEG
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 3
32854: NEG
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 4
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 5
32876: NEG
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 5
32887: NEG
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 5
32899: NEG
32900: PUSH
32901: LD_INT 2
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 3
32911: NEG
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: NEG
32923: PUSH
32924: LD_INT 3
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: NEG
32935: PUSH
32936: LD_INT 4
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: LD_INT 3
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: NEG
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 4
32982: NEG
32983: PUSH
32984: LD_INT 3
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 4
32994: NEG
32995: PUSH
32996: LD_INT 4
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: LD_INT 4
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 4
33018: NEG
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 4
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 5
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: LD_INT 4
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: LD_INT 3
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: LD_INT 4
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: LD_INT 5
33101: NEG
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 3
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: LD_INT 5
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33177: LD_ADDR_VAR 0 31
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 4
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: LD_INT 5
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 5
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: LD_INT 4
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 5
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 3
33277: NEG
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: NEG
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 2
33300: NEG
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 4
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 4
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: NEG
33380: PUSH
33381: LD_INT 4
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: NEG
33392: PUSH
33393: LD_INT 5
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 3
33403: NEG
33404: PUSH
33405: LD_INT 4
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 3
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 4
33427: NEG
33428: PUSH
33429: LD_INT 3
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 5
33439: NEG
33440: PUSH
33441: LD_INT 4
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 5
33451: NEG
33452: PUSH
33453: LD_INT 5
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: NEG
33464: PUSH
33465: LD_INT 5
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 5
33475: NEG
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 3
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: LD_INT 4
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: LD_INT 3
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: LD_INT 2
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: LD_INT 4
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: NEG
33578: PUSH
33579: LD_INT 4
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 5
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 5
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 4
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 3
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33727: LD_ADDR_VAR 0 32
33731: PUSH
33732: LD_INT 4
33734: NEG
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 4
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: NEG
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 3
33768: NEG
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 4
33779: NEG
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 5
33790: NEG
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 5
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 5
33813: NEG
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: NEG
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: NEG
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: NEG
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 3
33884: NEG
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 4
33896: NEG
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 4
33908: NEG
33909: PUSH
33910: LD_INT 4
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 4
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 4
33932: NEG
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 4
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 5
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 4
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 3
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 3
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 4
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 5
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 3
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 2
34034: NEG
34035: PUSH
34036: LD_INT 5
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 4
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 4
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 3
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 4
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 4
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 5
34159: PUSH
34160: LD_INT 4
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 5
34169: PUSH
34170: LD_INT 5
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 4
34179: PUSH
34180: LD_INT 5
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 3
34189: PUSH
34190: LD_INT 4
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 3
34199: PUSH
34200: LD_INT 3
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 5
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: LD_INT 5
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34274: LD_ADDR_VAR 0 33
34278: PUSH
34279: LD_INT 4
34281: NEG
34282: PUSH
34283: LD_INT 4
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 4
34293: NEG
34294: PUSH
34295: LD_INT 5
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 3
34305: NEG
34306: PUSH
34307: LD_INT 4
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: LD_INT 3
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 4
34329: NEG
34330: PUSH
34331: LD_INT 3
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 5
34341: NEG
34342: PUSH
34343: LD_INT 4
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 5
34353: NEG
34354: PUSH
34355: LD_INT 5
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 3
34365: NEG
34366: PUSH
34367: LD_INT 5
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 5
34377: NEG
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 3
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 4
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 3
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 4
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: LD_INT 4
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 4
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 5
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 5
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 4
34604: PUSH
34605: LD_INT 3
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: LD_INT 4
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 3
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: LD_INT 4
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: LD_INT 4
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: LD_INT 4
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 5
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 5
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 4
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34812: LD_ADDR_VAR 0 34
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: LD_INT 4
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: LD_INT 5
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: LD_INT 4
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 3
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 3
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 4
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: LD_INT 5
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 3
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 5
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 3
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 4
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 4
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 4
35014: PUSH
35015: LD_INT 4
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 5
35034: PUSH
35035: LD_INT 4
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 5
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 4
35054: PUSH
35055: LD_INT 5
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 4
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 5
35084: PUSH
35085: LD_INT 3
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: LD_INT 4
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 4
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: LD_INT 3
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 4
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 4
35197: NEG
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 4
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 3
35220: NEG
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 3
35231: NEG
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 4
35242: NEG
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 5
35253: NEG
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 5
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 5
35276: NEG
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 3
35288: NEG
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// end ; end ;
35344: GO 35347
35346: POP
// case btype of b_depot , b_warehouse :
35347: LD_VAR 0 1
35351: PUSH
35352: LD_INT 0
35354: DOUBLE
35355: EQUAL
35356: IFTRUE 35366
35358: LD_INT 1
35360: DOUBLE
35361: EQUAL
35362: IFTRUE 35366
35364: GO 35567
35366: POP
// case nation of nation_american :
35367: LD_VAR 0 5
35371: PUSH
35372: LD_INT 1
35374: DOUBLE
35375: EQUAL
35376: IFTRUE 35380
35378: GO 35436
35380: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35381: LD_ADDR_VAR 0 9
35385: PUSH
35386: LD_VAR 0 11
35390: PUSH
35391: LD_VAR 0 12
35395: PUSH
35396: LD_VAR 0 13
35400: PUSH
35401: LD_VAR 0 14
35405: PUSH
35406: LD_VAR 0 15
35410: PUSH
35411: LD_VAR 0 16
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: PUSH
35424: LD_VAR 0 4
35428: PUSH
35429: LD_INT 1
35431: PLUS
35432: ARRAY
35433: ST_TO_ADDR
35434: GO 35565
35436: LD_INT 2
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35500
35444: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35445: LD_ADDR_VAR 0 9
35449: PUSH
35450: LD_VAR 0 17
35454: PUSH
35455: LD_VAR 0 18
35459: PUSH
35460: LD_VAR 0 19
35464: PUSH
35465: LD_VAR 0 20
35469: PUSH
35470: LD_VAR 0 21
35474: PUSH
35475: LD_VAR 0 22
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: PUSH
35488: LD_VAR 0 4
35492: PUSH
35493: LD_INT 1
35495: PLUS
35496: ARRAY
35497: ST_TO_ADDR
35498: GO 35565
35500: LD_INT 3
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35564
35508: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35509: LD_ADDR_VAR 0 9
35513: PUSH
35514: LD_VAR 0 23
35518: PUSH
35519: LD_VAR 0 24
35523: PUSH
35524: LD_VAR 0 25
35528: PUSH
35529: LD_VAR 0 26
35533: PUSH
35534: LD_VAR 0 27
35538: PUSH
35539: LD_VAR 0 28
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: PUSH
35552: LD_VAR 0 4
35556: PUSH
35557: LD_INT 1
35559: PLUS
35560: ARRAY
35561: ST_TO_ADDR
35562: GO 35565
35564: POP
35565: GO 36120
35567: LD_INT 2
35569: DOUBLE
35570: EQUAL
35571: IFTRUE 35581
35573: LD_INT 3
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35637
35581: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35582: LD_ADDR_VAR 0 9
35586: PUSH
35587: LD_VAR 0 29
35591: PUSH
35592: LD_VAR 0 30
35596: PUSH
35597: LD_VAR 0 31
35601: PUSH
35602: LD_VAR 0 32
35606: PUSH
35607: LD_VAR 0 33
35611: PUSH
35612: LD_VAR 0 34
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: PUSH
35625: LD_VAR 0 4
35629: PUSH
35630: LD_INT 1
35632: PLUS
35633: ARRAY
35634: ST_TO_ADDR
35635: GO 36120
35637: LD_INT 16
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35699
35643: LD_INT 17
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35699
35649: LD_INT 18
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35699
35655: LD_INT 19
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35699
35661: LD_INT 22
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35699
35667: LD_INT 20
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35699
35673: LD_INT 21
35675: DOUBLE
35676: EQUAL
35677: IFTRUE 35699
35679: LD_INT 23
35681: DOUBLE
35682: EQUAL
35683: IFTRUE 35699
35685: LD_INT 24
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35699
35691: LD_INT 25
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35699
35697: GO 35755
35699: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35700: LD_ADDR_VAR 0 9
35704: PUSH
35705: LD_VAR 0 35
35709: PUSH
35710: LD_VAR 0 36
35714: PUSH
35715: LD_VAR 0 37
35719: PUSH
35720: LD_VAR 0 38
35724: PUSH
35725: LD_VAR 0 39
35729: PUSH
35730: LD_VAR 0 40
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: PUSH
35743: LD_VAR 0 4
35747: PUSH
35748: LD_INT 1
35750: PLUS
35751: ARRAY
35752: ST_TO_ADDR
35753: GO 36120
35755: LD_INT 6
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35811
35761: LD_INT 7
35763: DOUBLE
35764: EQUAL
35765: IFTRUE 35811
35767: LD_INT 8
35769: DOUBLE
35770: EQUAL
35771: IFTRUE 35811
35773: LD_INT 13
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35811
35779: LD_INT 12
35781: DOUBLE
35782: EQUAL
35783: IFTRUE 35811
35785: LD_INT 15
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35811
35791: LD_INT 11
35793: DOUBLE
35794: EQUAL
35795: IFTRUE 35811
35797: LD_INT 14
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35811
35803: LD_INT 10
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35811
35809: GO 35867
35811: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35812: LD_ADDR_VAR 0 9
35816: PUSH
35817: LD_VAR 0 41
35821: PUSH
35822: LD_VAR 0 42
35826: PUSH
35827: LD_VAR 0 43
35831: PUSH
35832: LD_VAR 0 44
35836: PUSH
35837: LD_VAR 0 45
35841: PUSH
35842: LD_VAR 0 46
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: PUSH
35855: LD_VAR 0 4
35859: PUSH
35860: LD_INT 1
35862: PLUS
35863: ARRAY
35864: ST_TO_ADDR
35865: GO 36120
35867: LD_INT 36
35869: DOUBLE
35870: EQUAL
35871: IFTRUE 35875
35873: GO 35931
35875: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35876: LD_ADDR_VAR 0 9
35880: PUSH
35881: LD_VAR 0 47
35885: PUSH
35886: LD_VAR 0 48
35890: PUSH
35891: LD_VAR 0 49
35895: PUSH
35896: LD_VAR 0 50
35900: PUSH
35901: LD_VAR 0 51
35905: PUSH
35906: LD_VAR 0 52
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: PUSH
35919: LD_VAR 0 4
35923: PUSH
35924: LD_INT 1
35926: PLUS
35927: ARRAY
35928: ST_TO_ADDR
35929: GO 36120
35931: LD_INT 4
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35957
35937: LD_INT 5
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35957
35943: LD_INT 34
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35957
35949: LD_INT 37
35951: DOUBLE
35952: EQUAL
35953: IFTRUE 35957
35955: GO 36013
35957: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35958: LD_ADDR_VAR 0 9
35962: PUSH
35963: LD_VAR 0 53
35967: PUSH
35968: LD_VAR 0 54
35972: PUSH
35973: LD_VAR 0 55
35977: PUSH
35978: LD_VAR 0 56
35982: PUSH
35983: LD_VAR 0 57
35987: PUSH
35988: LD_VAR 0 58
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: PUSH
36001: LD_VAR 0 4
36005: PUSH
36006: LD_INT 1
36008: PLUS
36009: ARRAY
36010: ST_TO_ADDR
36011: GO 36120
36013: LD_INT 31
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36063
36019: LD_INT 32
36021: DOUBLE
36022: EQUAL
36023: IFTRUE 36063
36025: LD_INT 33
36027: DOUBLE
36028: EQUAL
36029: IFTRUE 36063
36031: LD_INT 27
36033: DOUBLE
36034: EQUAL
36035: IFTRUE 36063
36037: LD_INT 26
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36063
36043: LD_INT 28
36045: DOUBLE
36046: EQUAL
36047: IFTRUE 36063
36049: LD_INT 29
36051: DOUBLE
36052: EQUAL
36053: IFTRUE 36063
36055: LD_INT 30
36057: DOUBLE
36058: EQUAL
36059: IFTRUE 36063
36061: GO 36119
36063: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36064: LD_ADDR_VAR 0 9
36068: PUSH
36069: LD_VAR 0 59
36073: PUSH
36074: LD_VAR 0 60
36078: PUSH
36079: LD_VAR 0 61
36083: PUSH
36084: LD_VAR 0 62
36088: PUSH
36089: LD_VAR 0 63
36093: PUSH
36094: LD_VAR 0 64
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: PUSH
36107: LD_VAR 0 4
36111: PUSH
36112: LD_INT 1
36114: PLUS
36115: ARRAY
36116: ST_TO_ADDR
36117: GO 36120
36119: POP
// temp_list2 = [ ] ;
36120: LD_ADDR_VAR 0 10
36124: PUSH
36125: EMPTY
36126: ST_TO_ADDR
// for i in temp_list do
36127: LD_ADDR_VAR 0 8
36131: PUSH
36132: LD_VAR 0 9
36136: PUSH
36137: FOR_IN
36138: IFFALSE 36190
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36140: LD_ADDR_VAR 0 10
36144: PUSH
36145: LD_VAR 0 10
36149: PUSH
36150: LD_VAR 0 8
36154: PUSH
36155: LD_INT 1
36157: ARRAY
36158: PUSH
36159: LD_VAR 0 2
36163: PLUS
36164: PUSH
36165: LD_VAR 0 8
36169: PUSH
36170: LD_INT 2
36172: ARRAY
36173: PUSH
36174: LD_VAR 0 3
36178: PLUS
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: EMPTY
36185: LIST
36186: ADD
36187: ST_TO_ADDR
36188: GO 36137
36190: POP
36191: POP
// result = temp_list2 ;
36192: LD_ADDR_VAR 0 7
36196: PUSH
36197: LD_VAR 0 10
36201: ST_TO_ADDR
// end ;
36202: LD_VAR 0 7
36206: RET
// export function EnemyInRange ( unit , dist ) ; begin
36207: LD_INT 0
36209: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36210: LD_ADDR_VAR 0 3
36214: PUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 255
36224: PPUSH
36225: LD_VAR 0 1
36229: PPUSH
36230: CALL_OW 250
36234: PPUSH
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 251
36244: PPUSH
36245: LD_VAR 0 2
36249: PPUSH
36250: CALL 9609 0 4
36254: PUSH
36255: LD_INT 4
36257: ARRAY
36258: ST_TO_ADDR
// end ;
36259: LD_VAR 0 3
36263: RET
// export function PlayerSeeMe ( unit ) ; begin
36264: LD_INT 0
36266: PPUSH
// result := See ( your_side , unit ) ;
36267: LD_ADDR_VAR 0 2
36271: PUSH
36272: LD_OWVAR 2
36276: PPUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 292
36286: ST_TO_ADDR
// end ;
36287: LD_VAR 0 2
36291: RET
// export function ReverseDir ( unit ) ; begin
36292: LD_INT 0
36294: PPUSH
// if not unit then
36295: LD_VAR 0 1
36299: NOT
36300: IFFALSE 36304
// exit ;
36302: GO 36327
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36304: LD_ADDR_VAR 0 2
36308: PUSH
36309: LD_VAR 0 1
36313: PPUSH
36314: CALL_OW 254
36318: PUSH
36319: LD_INT 3
36321: PLUS
36322: PUSH
36323: LD_INT 6
36325: MOD
36326: ST_TO_ADDR
// end ;
36327: LD_VAR 0 2
36331: RET
// export function ReverseArray ( array ) ; var i ; begin
36332: LD_INT 0
36334: PPUSH
36335: PPUSH
// if not array then
36336: LD_VAR 0 1
36340: NOT
36341: IFFALSE 36345
// exit ;
36343: GO 36400
// result := [ ] ;
36345: LD_ADDR_VAR 0 2
36349: PUSH
36350: EMPTY
36351: ST_TO_ADDR
// for i := array downto 1 do
36352: LD_ADDR_VAR 0 3
36356: PUSH
36357: DOUBLE
36358: LD_VAR 0 1
36362: INC
36363: ST_TO_ADDR
36364: LD_INT 1
36366: PUSH
36367: FOR_DOWNTO
36368: IFFALSE 36398
// result := Join ( result , array [ i ] ) ;
36370: LD_ADDR_VAR 0 2
36374: PUSH
36375: LD_VAR 0 2
36379: PPUSH
36380: LD_VAR 0 1
36384: PUSH
36385: LD_VAR 0 3
36389: ARRAY
36390: PPUSH
36391: CALL 41044 0 2
36395: ST_TO_ADDR
36396: GO 36367
36398: POP
36399: POP
// end ;
36400: LD_VAR 0 2
36404: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
// if not unit or not hexes then
36413: LD_VAR 0 1
36417: NOT
36418: PUSH
36419: LD_VAR 0 2
36423: NOT
36424: OR
36425: IFFALSE 36429
// exit ;
36427: GO 36552
// dist := 9999 ;
36429: LD_ADDR_VAR 0 5
36433: PUSH
36434: LD_INT 9999
36436: ST_TO_ADDR
// for i = 1 to hexes do
36437: LD_ADDR_VAR 0 4
36441: PUSH
36442: DOUBLE
36443: LD_INT 1
36445: DEC
36446: ST_TO_ADDR
36447: LD_VAR 0 2
36451: PUSH
36452: FOR_TO
36453: IFFALSE 36540
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36455: LD_ADDR_VAR 0 6
36459: PUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: LD_VAR 0 2
36469: PUSH
36470: LD_VAR 0 4
36474: ARRAY
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PPUSH
36480: LD_VAR 0 2
36484: PUSH
36485: LD_VAR 0 4
36489: ARRAY
36490: PUSH
36491: LD_INT 2
36493: ARRAY
36494: PPUSH
36495: CALL_OW 297
36499: ST_TO_ADDR
// if tdist < dist then
36500: LD_VAR 0 6
36504: PUSH
36505: LD_VAR 0 5
36509: LESS
36510: IFFALSE 36538
// begin hex := hexes [ i ] ;
36512: LD_ADDR_VAR 0 8
36516: PUSH
36517: LD_VAR 0 2
36521: PUSH
36522: LD_VAR 0 4
36526: ARRAY
36527: ST_TO_ADDR
// dist := tdist ;
36528: LD_ADDR_VAR 0 5
36532: PUSH
36533: LD_VAR 0 6
36537: ST_TO_ADDR
// end ; end ;
36538: GO 36452
36540: POP
36541: POP
// result := hex ;
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: LD_VAR 0 8
36551: ST_TO_ADDR
// end ;
36552: LD_VAR 0 3
36556: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36557: LD_INT 0
36559: PPUSH
36560: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36561: LD_VAR 0 1
36565: NOT
36566: PUSH
36567: LD_VAR 0 1
36571: PUSH
36572: LD_INT 21
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 23
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PPUSH
36596: CALL_OW 69
36600: IN
36601: NOT
36602: OR
36603: IFFALSE 36607
// exit ;
36605: GO 36654
// for i = 1 to 3 do
36607: LD_ADDR_VAR 0 3
36611: PUSH
36612: DOUBLE
36613: LD_INT 1
36615: DEC
36616: ST_TO_ADDR
36617: LD_INT 3
36619: PUSH
36620: FOR_TO
36621: IFFALSE 36652
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36623: LD_VAR 0 1
36627: PPUSH
36628: CALL_OW 250
36632: PPUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 251
36642: PPUSH
36643: LD_INT 1
36645: PPUSH
36646: CALL_OW 453
36650: GO 36620
36652: POP
36653: POP
// end ;
36654: LD_VAR 0 2
36658: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36667: LD_VAR 0 1
36671: NOT
36672: PUSH
36673: LD_VAR 0 2
36677: NOT
36678: OR
36679: PUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL_OW 314
36689: OR
36690: IFFALSE 36694
// exit ;
36692: GO 37161
// if GetLives ( i ) < 250 then
36694: LD_VAR 0 4
36698: PPUSH
36699: CALL_OW 256
36703: PUSH
36704: LD_INT 250
36706: LESS
36707: IFFALSE 36720
// begin ComAutodestruct ( i ) ;
36709: LD_VAR 0 4
36713: PPUSH
36714: CALL 36557 0 1
// exit ;
36718: GO 37161
// end ; x := GetX ( enemy_unit ) ;
36720: LD_ADDR_VAR 0 7
36724: PUSH
36725: LD_VAR 0 2
36729: PPUSH
36730: CALL_OW 250
36734: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36735: LD_ADDR_VAR 0 8
36739: PUSH
36740: LD_VAR 0 2
36744: PPUSH
36745: CALL_OW 251
36749: ST_TO_ADDR
// if not x or not y then
36750: LD_VAR 0 7
36754: NOT
36755: PUSH
36756: LD_VAR 0 8
36760: NOT
36761: OR
36762: IFFALSE 36766
// exit ;
36764: GO 37161
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36766: LD_ADDR_VAR 0 6
36770: PUSH
36771: LD_VAR 0 7
36775: PPUSH
36776: LD_INT 0
36778: PPUSH
36779: LD_INT 4
36781: PPUSH
36782: CALL_OW 272
36786: PUSH
36787: LD_VAR 0 8
36791: PPUSH
36792: LD_INT 0
36794: PPUSH
36795: LD_INT 4
36797: PPUSH
36798: CALL_OW 273
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_VAR 0 7
36811: PPUSH
36812: LD_INT 1
36814: PPUSH
36815: LD_INT 4
36817: PPUSH
36818: CALL_OW 272
36822: PUSH
36823: LD_VAR 0 8
36827: PPUSH
36828: LD_INT 1
36830: PPUSH
36831: LD_INT 4
36833: PPUSH
36834: CALL_OW 273
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_VAR 0 7
36847: PPUSH
36848: LD_INT 2
36850: PPUSH
36851: LD_INT 4
36853: PPUSH
36854: CALL_OW 272
36858: PUSH
36859: LD_VAR 0 8
36863: PPUSH
36864: LD_INT 2
36866: PPUSH
36867: LD_INT 4
36869: PPUSH
36870: CALL_OW 273
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_VAR 0 7
36883: PPUSH
36884: LD_INT 3
36886: PPUSH
36887: LD_INT 4
36889: PPUSH
36890: CALL_OW 272
36894: PUSH
36895: LD_VAR 0 8
36899: PPUSH
36900: LD_INT 3
36902: PPUSH
36903: LD_INT 4
36905: PPUSH
36906: CALL_OW 273
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_VAR 0 7
36919: PPUSH
36920: LD_INT 4
36922: PPUSH
36923: LD_INT 4
36925: PPUSH
36926: CALL_OW 272
36930: PUSH
36931: LD_VAR 0 8
36935: PPUSH
36936: LD_INT 4
36938: PPUSH
36939: LD_INT 4
36941: PPUSH
36942: CALL_OW 273
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_VAR 0 7
36955: PPUSH
36956: LD_INT 5
36958: PPUSH
36959: LD_INT 4
36961: PPUSH
36962: CALL_OW 272
36966: PUSH
36967: LD_VAR 0 8
36971: PPUSH
36972: LD_INT 5
36974: PPUSH
36975: LD_INT 4
36977: PPUSH
36978: CALL_OW 273
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
// for i = tmp downto 1 do
36995: LD_ADDR_VAR 0 4
36999: PUSH
37000: DOUBLE
37001: LD_VAR 0 6
37005: INC
37006: ST_TO_ADDR
37007: LD_INT 1
37009: PUSH
37010: FOR_DOWNTO
37011: IFFALSE 37112
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37013: LD_VAR 0 6
37017: PUSH
37018: LD_VAR 0 4
37022: ARRAY
37023: PUSH
37024: LD_INT 1
37026: ARRAY
37027: PPUSH
37028: LD_VAR 0 6
37032: PUSH
37033: LD_VAR 0 4
37037: ARRAY
37038: PUSH
37039: LD_INT 2
37041: ARRAY
37042: PPUSH
37043: CALL_OW 488
37047: NOT
37048: PUSH
37049: LD_VAR 0 6
37053: PUSH
37054: LD_VAR 0 4
37058: ARRAY
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: PPUSH
37064: LD_VAR 0 6
37068: PUSH
37069: LD_VAR 0 4
37073: ARRAY
37074: PUSH
37075: LD_INT 2
37077: ARRAY
37078: PPUSH
37079: CALL_OW 428
37083: PUSH
37084: LD_INT 0
37086: NONEQUAL
37087: OR
37088: IFFALSE 37110
// tmp := Delete ( tmp , i ) ;
37090: LD_ADDR_VAR 0 6
37094: PUSH
37095: LD_VAR 0 6
37099: PPUSH
37100: LD_VAR 0 4
37104: PPUSH
37105: CALL_OW 3
37109: ST_TO_ADDR
37110: GO 37010
37112: POP
37113: POP
// j := GetClosestHex ( unit , tmp ) ;
37114: LD_ADDR_VAR 0 5
37118: PUSH
37119: LD_VAR 0 1
37123: PPUSH
37124: LD_VAR 0 6
37128: PPUSH
37129: CALL 36405 0 2
37133: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37134: LD_VAR 0 1
37138: PPUSH
37139: LD_VAR 0 5
37143: PUSH
37144: LD_INT 1
37146: ARRAY
37147: PPUSH
37148: LD_VAR 0 5
37152: PUSH
37153: LD_INT 2
37155: ARRAY
37156: PPUSH
37157: CALL_OW 111
// end ;
37161: LD_VAR 0 3
37165: RET
// export function PrepareApemanSoldier ( ) ; begin
37166: LD_INT 0
37168: PPUSH
// uc_nation := 0 ;
37169: LD_ADDR_OWVAR 21
37173: PUSH
37174: LD_INT 0
37176: ST_TO_ADDR
// hc_sex := sex_male ;
37177: LD_ADDR_OWVAR 27
37181: PUSH
37182: LD_INT 1
37184: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37185: LD_ADDR_OWVAR 28
37189: PUSH
37190: LD_INT 15
37192: ST_TO_ADDR
// hc_gallery :=  ;
37193: LD_ADDR_OWVAR 33
37197: PUSH
37198: LD_STRING 
37200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37201: LD_ADDR_OWVAR 31
37205: PUSH
37206: LD_INT 0
37208: PPUSH
37209: LD_INT 3
37211: PPUSH
37212: CALL_OW 12
37216: PUSH
37217: LD_INT 0
37219: PPUSH
37220: LD_INT 3
37222: PPUSH
37223: CALL_OW 12
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: ST_TO_ADDR
// end ;
37240: LD_VAR 0 1
37244: RET
// export function PrepareApemanEngineer ( ) ; begin
37245: LD_INT 0
37247: PPUSH
// uc_nation := 0 ;
37248: LD_ADDR_OWVAR 21
37252: PUSH
37253: LD_INT 0
37255: ST_TO_ADDR
// hc_sex := sex_male ;
37256: LD_ADDR_OWVAR 27
37260: PUSH
37261: LD_INT 1
37263: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37264: LD_ADDR_OWVAR 28
37268: PUSH
37269: LD_INT 16
37271: ST_TO_ADDR
// hc_gallery :=  ;
37272: LD_ADDR_OWVAR 33
37276: PUSH
37277: LD_STRING 
37279: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37280: LD_ADDR_OWVAR 31
37284: PUSH
37285: LD_INT 0
37287: PPUSH
37288: LD_INT 3
37290: PPUSH
37291: CALL_OW 12
37295: PUSH
37296: LD_INT 0
37298: PPUSH
37299: LD_INT 3
37301: PPUSH
37302: CALL_OW 12
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// end ;
37319: LD_VAR 0 1
37323: RET
// export function PrepareApeman ( agressivity ) ; begin
37324: LD_INT 0
37326: PPUSH
// uc_side := 0 ;
37327: LD_ADDR_OWVAR 20
37331: PUSH
37332: LD_INT 0
37334: ST_TO_ADDR
// uc_nation := 0 ;
37335: LD_ADDR_OWVAR 21
37339: PUSH
37340: LD_INT 0
37342: ST_TO_ADDR
// hc_sex := sex_male ;
37343: LD_ADDR_OWVAR 27
37347: PUSH
37348: LD_INT 1
37350: ST_TO_ADDR
// hc_class := class_apeman ;
37351: LD_ADDR_OWVAR 28
37355: PUSH
37356: LD_INT 12
37358: ST_TO_ADDR
// hc_gallery :=  ;
37359: LD_ADDR_OWVAR 33
37363: PUSH
37364: LD_STRING 
37366: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37367: LD_ADDR_OWVAR 35
37371: PUSH
37372: LD_VAR 0 1
37376: NEG
37377: PPUSH
37378: LD_VAR 0 1
37382: PPUSH
37383: CALL_OW 12
37387: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37388: LD_ADDR_OWVAR 31
37392: PUSH
37393: LD_INT 0
37395: PPUSH
37396: LD_INT 3
37398: PPUSH
37399: CALL_OW 12
37403: PUSH
37404: LD_INT 0
37406: PPUSH
37407: LD_INT 3
37409: PPUSH
37410: CALL_OW 12
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
// end ;
37427: LD_VAR 0 2
37431: RET
// export function PrepareTiger ( agressivity ) ; begin
37432: LD_INT 0
37434: PPUSH
// uc_side := 0 ;
37435: LD_ADDR_OWVAR 20
37439: PUSH
37440: LD_INT 0
37442: ST_TO_ADDR
// uc_nation := 0 ;
37443: LD_ADDR_OWVAR 21
37447: PUSH
37448: LD_INT 0
37450: ST_TO_ADDR
// hc_class := class_tiger ;
37451: LD_ADDR_OWVAR 28
37455: PUSH
37456: LD_INT 14
37458: ST_TO_ADDR
// hc_gallery :=  ;
37459: LD_ADDR_OWVAR 33
37463: PUSH
37464: LD_STRING 
37466: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37467: LD_ADDR_OWVAR 35
37471: PUSH
37472: LD_VAR 0 1
37476: NEG
37477: PPUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: CALL_OW 12
37487: ST_TO_ADDR
// end ;
37488: LD_VAR 0 2
37492: RET
// export function PrepareEnchidna ( ) ; begin
37493: LD_INT 0
37495: PPUSH
// uc_side := 0 ;
37496: LD_ADDR_OWVAR 20
37500: PUSH
37501: LD_INT 0
37503: ST_TO_ADDR
// uc_nation := 0 ;
37504: LD_ADDR_OWVAR 21
37508: PUSH
37509: LD_INT 0
37511: ST_TO_ADDR
// hc_class := class_baggie ;
37512: LD_ADDR_OWVAR 28
37516: PUSH
37517: LD_INT 13
37519: ST_TO_ADDR
// hc_gallery :=  ;
37520: LD_ADDR_OWVAR 33
37524: PUSH
37525: LD_STRING 
37527: ST_TO_ADDR
// end ;
37528: LD_VAR 0 1
37532: RET
// export function PrepareFrog ( ) ; begin
37533: LD_INT 0
37535: PPUSH
// uc_side := 0 ;
37536: LD_ADDR_OWVAR 20
37540: PUSH
37541: LD_INT 0
37543: ST_TO_ADDR
// uc_nation := 0 ;
37544: LD_ADDR_OWVAR 21
37548: PUSH
37549: LD_INT 0
37551: ST_TO_ADDR
// hc_class := class_frog ;
37552: LD_ADDR_OWVAR 28
37556: PUSH
37557: LD_INT 19
37559: ST_TO_ADDR
// hc_gallery :=  ;
37560: LD_ADDR_OWVAR 33
37564: PUSH
37565: LD_STRING 
37567: ST_TO_ADDR
// end ;
37568: LD_VAR 0 1
37572: RET
// export function PrepareFish ( ) ; begin
37573: LD_INT 0
37575: PPUSH
// uc_side := 0 ;
37576: LD_ADDR_OWVAR 20
37580: PUSH
37581: LD_INT 0
37583: ST_TO_ADDR
// uc_nation := 0 ;
37584: LD_ADDR_OWVAR 21
37588: PUSH
37589: LD_INT 0
37591: ST_TO_ADDR
// hc_class := class_fish ;
37592: LD_ADDR_OWVAR 28
37596: PUSH
37597: LD_INT 20
37599: ST_TO_ADDR
// hc_gallery :=  ;
37600: LD_ADDR_OWVAR 33
37604: PUSH
37605: LD_STRING 
37607: ST_TO_ADDR
// end ;
37608: LD_VAR 0 1
37612: RET
// export function PrepareBird ( ) ; begin
37613: LD_INT 0
37615: PPUSH
// uc_side := 0 ;
37616: LD_ADDR_OWVAR 20
37620: PUSH
37621: LD_INT 0
37623: ST_TO_ADDR
// uc_nation := 0 ;
37624: LD_ADDR_OWVAR 21
37628: PUSH
37629: LD_INT 0
37631: ST_TO_ADDR
// hc_class := class_phororhacos ;
37632: LD_ADDR_OWVAR 28
37636: PUSH
37637: LD_INT 18
37639: ST_TO_ADDR
// hc_gallery :=  ;
37640: LD_ADDR_OWVAR 33
37644: PUSH
37645: LD_STRING 
37647: ST_TO_ADDR
// end ;
37648: LD_VAR 0 1
37652: RET
// export function PrepareHorse ( ) ; begin
37653: LD_INT 0
37655: PPUSH
// uc_side := 0 ;
37656: LD_ADDR_OWVAR 20
37660: PUSH
37661: LD_INT 0
37663: ST_TO_ADDR
// uc_nation := 0 ;
37664: LD_ADDR_OWVAR 21
37668: PUSH
37669: LD_INT 0
37671: ST_TO_ADDR
// hc_class := class_horse ;
37672: LD_ADDR_OWVAR 28
37676: PUSH
37677: LD_INT 21
37679: ST_TO_ADDR
// hc_gallery :=  ;
37680: LD_ADDR_OWVAR 33
37684: PUSH
37685: LD_STRING 
37687: ST_TO_ADDR
// end ;
37688: LD_VAR 0 1
37692: RET
// export function PrepareMastodont ( ) ; begin
37693: LD_INT 0
37695: PPUSH
// uc_side := 0 ;
37696: LD_ADDR_OWVAR 20
37700: PUSH
37701: LD_INT 0
37703: ST_TO_ADDR
// uc_nation := 0 ;
37704: LD_ADDR_OWVAR 21
37708: PUSH
37709: LD_INT 0
37711: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37712: LD_ADDR_OWVAR 37
37716: PUSH
37717: LD_INT 31
37719: ST_TO_ADDR
// vc_control := control_rider ;
37720: LD_ADDR_OWVAR 38
37724: PUSH
37725: LD_INT 4
37727: ST_TO_ADDR
// end ;
37728: LD_VAR 0 1
37732: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37733: LD_INT 0
37735: PPUSH
37736: PPUSH
37737: PPUSH
// uc_side = 0 ;
37738: LD_ADDR_OWVAR 20
37742: PUSH
37743: LD_INT 0
37745: ST_TO_ADDR
// uc_nation = 0 ;
37746: LD_ADDR_OWVAR 21
37750: PUSH
37751: LD_INT 0
37753: ST_TO_ADDR
// InitHc_All ( ) ;
37754: CALL_OW 584
// InitVc ;
37758: CALL_OW 20
// if mastodonts then
37762: LD_VAR 0 6
37766: IFFALSE 37833
// for i = 1 to mastodonts do
37768: LD_ADDR_VAR 0 11
37772: PUSH
37773: DOUBLE
37774: LD_INT 1
37776: DEC
37777: ST_TO_ADDR
37778: LD_VAR 0 6
37782: PUSH
37783: FOR_TO
37784: IFFALSE 37831
// begin vc_chassis := 31 ;
37786: LD_ADDR_OWVAR 37
37790: PUSH
37791: LD_INT 31
37793: ST_TO_ADDR
// vc_control := control_rider ;
37794: LD_ADDR_OWVAR 38
37798: PUSH
37799: LD_INT 4
37801: ST_TO_ADDR
// animal := CreateVehicle ;
37802: LD_ADDR_VAR 0 12
37806: PUSH
37807: CALL_OW 45
37811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37812: LD_VAR 0 12
37816: PPUSH
37817: LD_VAR 0 8
37821: PPUSH
37822: LD_INT 0
37824: PPUSH
37825: CALL 39961 0 3
// end ;
37829: GO 37783
37831: POP
37832: POP
// if horses then
37833: LD_VAR 0 5
37837: IFFALSE 37904
// for i = 1 to horses do
37839: LD_ADDR_VAR 0 11
37843: PUSH
37844: DOUBLE
37845: LD_INT 1
37847: DEC
37848: ST_TO_ADDR
37849: LD_VAR 0 5
37853: PUSH
37854: FOR_TO
37855: IFFALSE 37902
// begin hc_class := 21 ;
37857: LD_ADDR_OWVAR 28
37861: PUSH
37862: LD_INT 21
37864: ST_TO_ADDR
// hc_gallery :=  ;
37865: LD_ADDR_OWVAR 33
37869: PUSH
37870: LD_STRING 
37872: ST_TO_ADDR
// animal := CreateHuman ;
37873: LD_ADDR_VAR 0 12
37877: PUSH
37878: CALL_OW 44
37882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37883: LD_VAR 0 12
37887: PPUSH
37888: LD_VAR 0 8
37892: PPUSH
37893: LD_INT 0
37895: PPUSH
37896: CALL 39961 0 3
// end ;
37900: GO 37854
37902: POP
37903: POP
// if birds then
37904: LD_VAR 0 1
37908: IFFALSE 37975
// for i = 1 to birds do
37910: LD_ADDR_VAR 0 11
37914: PUSH
37915: DOUBLE
37916: LD_INT 1
37918: DEC
37919: ST_TO_ADDR
37920: LD_VAR 0 1
37924: PUSH
37925: FOR_TO
37926: IFFALSE 37973
// begin hc_class = 18 ;
37928: LD_ADDR_OWVAR 28
37932: PUSH
37933: LD_INT 18
37935: ST_TO_ADDR
// hc_gallery =  ;
37936: LD_ADDR_OWVAR 33
37940: PUSH
37941: LD_STRING 
37943: ST_TO_ADDR
// animal := CreateHuman ;
37944: LD_ADDR_VAR 0 12
37948: PUSH
37949: CALL_OW 44
37953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37954: LD_VAR 0 12
37958: PPUSH
37959: LD_VAR 0 8
37963: PPUSH
37964: LD_INT 0
37966: PPUSH
37967: CALL 39961 0 3
// end ;
37971: GO 37925
37973: POP
37974: POP
// if tigers then
37975: LD_VAR 0 2
37979: IFFALSE 38063
// for i = 1 to tigers do
37981: LD_ADDR_VAR 0 11
37985: PUSH
37986: DOUBLE
37987: LD_INT 1
37989: DEC
37990: ST_TO_ADDR
37991: LD_VAR 0 2
37995: PUSH
37996: FOR_TO
37997: IFFALSE 38061
// begin hc_class = class_tiger ;
37999: LD_ADDR_OWVAR 28
38003: PUSH
38004: LD_INT 14
38006: ST_TO_ADDR
// hc_gallery =  ;
38007: LD_ADDR_OWVAR 33
38011: PUSH
38012: LD_STRING 
38014: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38015: LD_ADDR_OWVAR 35
38019: PUSH
38020: LD_INT 7
38022: NEG
38023: PPUSH
38024: LD_INT 7
38026: PPUSH
38027: CALL_OW 12
38031: ST_TO_ADDR
// animal := CreateHuman ;
38032: LD_ADDR_VAR 0 12
38036: PUSH
38037: CALL_OW 44
38041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38042: LD_VAR 0 12
38046: PPUSH
38047: LD_VAR 0 8
38051: PPUSH
38052: LD_INT 0
38054: PPUSH
38055: CALL 39961 0 3
// end ;
38059: GO 37996
38061: POP
38062: POP
// if apemans then
38063: LD_VAR 0 3
38067: IFFALSE 38190
// for i = 1 to apemans do
38069: LD_ADDR_VAR 0 11
38073: PUSH
38074: DOUBLE
38075: LD_INT 1
38077: DEC
38078: ST_TO_ADDR
38079: LD_VAR 0 3
38083: PUSH
38084: FOR_TO
38085: IFFALSE 38188
// begin hc_class = class_apeman ;
38087: LD_ADDR_OWVAR 28
38091: PUSH
38092: LD_INT 12
38094: ST_TO_ADDR
// hc_gallery =  ;
38095: LD_ADDR_OWVAR 33
38099: PUSH
38100: LD_STRING 
38102: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38103: LD_ADDR_OWVAR 35
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PPUSH
38112: LD_INT 2
38114: PPUSH
38115: CALL_OW 12
38119: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38120: LD_ADDR_OWVAR 31
38124: PUSH
38125: LD_INT 1
38127: PPUSH
38128: LD_INT 3
38130: PPUSH
38131: CALL_OW 12
38135: PUSH
38136: LD_INT 1
38138: PPUSH
38139: LD_INT 3
38141: PPUSH
38142: CALL_OW 12
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: ST_TO_ADDR
// animal := CreateHuman ;
38159: LD_ADDR_VAR 0 12
38163: PUSH
38164: CALL_OW 44
38168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38169: LD_VAR 0 12
38173: PPUSH
38174: LD_VAR 0 8
38178: PPUSH
38179: LD_INT 0
38181: PPUSH
38182: CALL 39961 0 3
// end ;
38186: GO 38084
38188: POP
38189: POP
// if enchidnas then
38190: LD_VAR 0 4
38194: IFFALSE 38261
// for i = 1 to enchidnas do
38196: LD_ADDR_VAR 0 11
38200: PUSH
38201: DOUBLE
38202: LD_INT 1
38204: DEC
38205: ST_TO_ADDR
38206: LD_VAR 0 4
38210: PUSH
38211: FOR_TO
38212: IFFALSE 38259
// begin hc_class = 13 ;
38214: LD_ADDR_OWVAR 28
38218: PUSH
38219: LD_INT 13
38221: ST_TO_ADDR
// hc_gallery =  ;
38222: LD_ADDR_OWVAR 33
38226: PUSH
38227: LD_STRING 
38229: ST_TO_ADDR
// animal := CreateHuman ;
38230: LD_ADDR_VAR 0 12
38234: PUSH
38235: CALL_OW 44
38239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38240: LD_VAR 0 12
38244: PPUSH
38245: LD_VAR 0 8
38249: PPUSH
38250: LD_INT 0
38252: PPUSH
38253: CALL 39961 0 3
// end ;
38257: GO 38211
38259: POP
38260: POP
// if fishes then
38261: LD_VAR 0 7
38265: IFFALSE 38332
// for i = 1 to fishes do
38267: LD_ADDR_VAR 0 11
38271: PUSH
38272: DOUBLE
38273: LD_INT 1
38275: DEC
38276: ST_TO_ADDR
38277: LD_VAR 0 7
38281: PUSH
38282: FOR_TO
38283: IFFALSE 38330
// begin hc_class = 20 ;
38285: LD_ADDR_OWVAR 28
38289: PUSH
38290: LD_INT 20
38292: ST_TO_ADDR
// hc_gallery =  ;
38293: LD_ADDR_OWVAR 33
38297: PUSH
38298: LD_STRING 
38300: ST_TO_ADDR
// animal := CreateHuman ;
38301: LD_ADDR_VAR 0 12
38305: PUSH
38306: CALL_OW 44
38310: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38311: LD_VAR 0 12
38315: PPUSH
38316: LD_VAR 0 9
38320: PPUSH
38321: LD_INT 0
38323: PPUSH
38324: CALL 39961 0 3
// end ;
38328: GO 38282
38330: POP
38331: POP
// end ;
38332: LD_VAR 0 10
38336: RET
// export function WantHeal ( sci , unit ) ; begin
38337: LD_INT 0
38339: PPUSH
// if GetTaskList ( sci ) > 0 then
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 437
38349: PUSH
38350: LD_INT 0
38352: GREATER
38353: IFFALSE 38423
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 437
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PUSH
38369: LD_INT 1
38371: ARRAY
38372: PUSH
38373: LD_STRING l
38375: EQUAL
38376: PUSH
38377: LD_VAR 0 1
38381: PPUSH
38382: CALL_OW 437
38386: PUSH
38387: LD_INT 1
38389: ARRAY
38390: PUSH
38391: LD_INT 4
38393: ARRAY
38394: PUSH
38395: LD_VAR 0 2
38399: EQUAL
38400: AND
38401: IFFALSE 38413
// result := true else
38403: LD_ADDR_VAR 0 3
38407: PUSH
38408: LD_INT 1
38410: ST_TO_ADDR
38411: GO 38421
// result := false ;
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: LD_INT 0
38420: ST_TO_ADDR
// end else
38421: GO 38431
// result := false ;
38423: LD_ADDR_VAR 0 3
38427: PUSH
38428: LD_INT 0
38430: ST_TO_ADDR
// end ;
38431: LD_VAR 0 3
38435: RET
// export function HealTarget ( sci ) ; begin
38436: LD_INT 0
38438: PPUSH
// if not sci then
38439: LD_VAR 0 1
38443: NOT
38444: IFFALSE 38448
// exit ;
38446: GO 38513
// result := 0 ;
38448: LD_ADDR_VAR 0 2
38452: PUSH
38453: LD_INT 0
38455: ST_TO_ADDR
// if GetTaskList ( sci ) then
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 437
38465: IFFALSE 38513
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 437
38476: PUSH
38477: LD_INT 1
38479: ARRAY
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: PUSH
38485: LD_STRING l
38487: EQUAL
38488: IFFALSE 38513
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38490: LD_ADDR_VAR 0 2
38494: PUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL_OW 437
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PUSH
38509: LD_INT 4
38511: ARRAY
38512: ST_TO_ADDR
// end ;
38513: LD_VAR 0 2
38517: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38518: LD_INT 0
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
// if not base_units then
38524: LD_VAR 0 1
38528: NOT
38529: IFFALSE 38533
// exit ;
38531: GO 38620
// result := false ;
38533: LD_ADDR_VAR 0 2
38537: PUSH
38538: LD_INT 0
38540: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38541: LD_ADDR_VAR 0 5
38545: PUSH
38546: LD_VAR 0 1
38550: PPUSH
38551: LD_INT 21
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PPUSH
38561: CALL_OW 72
38565: ST_TO_ADDR
// if not tmp then
38566: LD_VAR 0 5
38570: NOT
38571: IFFALSE 38575
// exit ;
38573: GO 38620
// for i in tmp do
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_VAR 0 5
38584: PUSH
38585: FOR_IN
38586: IFFALSE 38618
// begin result := EnemyInRange ( i , 22 ) ;
38588: LD_ADDR_VAR 0 2
38592: PUSH
38593: LD_VAR 0 3
38597: PPUSH
38598: LD_INT 22
38600: PPUSH
38601: CALL 36207 0 2
38605: ST_TO_ADDR
// if result then
38606: LD_VAR 0 2
38610: IFFALSE 38616
// exit ;
38612: POP
38613: POP
38614: GO 38620
// end ;
38616: GO 38585
38618: POP
38619: POP
// end ;
38620: LD_VAR 0 2
38624: RET
// export function FilterByTag ( units , tag ) ; begin
38625: LD_INT 0
38627: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38628: LD_ADDR_VAR 0 3
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: LD_INT 120
38640: PUSH
38641: LD_VAR 0 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PPUSH
38650: CALL_OW 72
38654: ST_TO_ADDR
// end ;
38655: LD_VAR 0 3
38659: RET
// export function IsDriver ( un ) ; begin
38660: LD_INT 0
38662: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38663: LD_ADDR_VAR 0 2
38667: PUSH
38668: LD_VAR 0 1
38672: PUSH
38673: LD_INT 55
38675: PUSH
38676: EMPTY
38677: LIST
38678: PPUSH
38679: CALL_OW 69
38683: IN
38684: ST_TO_ADDR
// end ;
38685: LD_VAR 0 2
38689: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38690: LD_INT 0
38692: PPUSH
38693: PPUSH
// list := [ ] ;
38694: LD_ADDR_VAR 0 5
38698: PUSH
38699: EMPTY
38700: ST_TO_ADDR
// case d of 0 :
38701: LD_VAR 0 3
38705: PUSH
38706: LD_INT 0
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38714
38712: GO 38847
38714: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38715: LD_ADDR_VAR 0 5
38719: PUSH
38720: LD_VAR 0 1
38724: PUSH
38725: LD_INT 4
38727: MINUS
38728: PUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_INT 4
38736: MINUS
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_INT 3
38753: MINUS
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: LD_INT 4
38775: PLUS
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 4
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_INT 3
38797: PLUS
38798: PUSH
38799: LD_VAR 0 2
38803: PUSH
38804: LD_INT 3
38806: PLUS
38807: PUSH
38808: LD_INT 5
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_VAR 0 2
38825: PUSH
38826: LD_INT 4
38828: PLUS
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: ST_TO_ADDR
// end ; 1 :
38845: GO 39545
38847: LD_INT 1
38849: DOUBLE
38850: EQUAL
38851: IFTRUE 38855
38853: GO 38988
38855: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38856: LD_ADDR_VAR 0 5
38860: PUSH
38861: LD_VAR 0 1
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_INT 4
38873: MINUS
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: LD_VAR 0 1
38887: PUSH
38888: LD_INT 3
38890: MINUS
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 3
38899: MINUS
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: LD_INT 4
38916: MINUS
38917: PUSH
38918: LD_VAR 0 2
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: PUSH
38931: LD_VAR 0 1
38935: PUSH
38936: LD_VAR 0 2
38940: PUSH
38941: LD_INT 3
38943: PLUS
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_INT 4
38960: PLUS
38961: PUSH
38962: LD_VAR 0 2
38966: PUSH
38967: LD_INT 4
38969: PLUS
38970: PUSH
38971: LD_INT 5
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: ST_TO_ADDR
// end ; 2 :
38986: GO 39545
38988: LD_INT 2
38990: DOUBLE
38991: EQUAL
38992: IFTRUE 38996
38994: GO 39125
38996: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38997: LD_ADDR_VAR 0 5
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 3
39014: MINUS
39015: PUSH
39016: LD_INT 3
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_INT 4
39031: PLUS
39032: PUSH
39033: LD_VAR 0 2
39037: PUSH
39038: LD_INT 4
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_VAR 0 2
39055: PUSH
39056: LD_INT 4
39058: PLUS
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 3
39075: MINUS
39076: PUSH
39077: LD_VAR 0 2
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: PUSH
39090: LD_VAR 0 1
39094: PUSH
39095: LD_INT 4
39097: MINUS
39098: PUSH
39099: LD_VAR 0 2
39103: PUSH
39104: LD_INT 4
39106: MINUS
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// end ; 3 :
39123: GO 39545
39125: LD_INT 3
39127: DOUBLE
39128: EQUAL
39129: IFTRUE 39133
39131: GO 39266
39133: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39134: LD_ADDR_VAR 0 5
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 3
39146: PLUS
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_INT 4
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: PUSH
39161: LD_VAR 0 1
39165: PUSH
39166: LD_INT 4
39168: PLUS
39169: PUSH
39170: LD_VAR 0 2
39174: PUSH
39175: LD_INT 4
39177: PLUS
39178: PUSH
39179: LD_INT 5
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_INT 4
39194: MINUS
39195: PUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: LD_VAR 0 2
39218: PUSH
39219: LD_INT 4
39221: MINUS
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: PUSH
39231: LD_VAR 0 1
39235: PUSH
39236: LD_INT 3
39238: MINUS
39239: PUSH
39240: LD_VAR 0 2
39244: PUSH
39245: LD_INT 3
39247: MINUS
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: ST_TO_ADDR
// end ; 4 :
39264: GO 39545
39266: LD_INT 4
39268: DOUBLE
39269: EQUAL
39270: IFTRUE 39274
39272: GO 39407
39274: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39275: LD_ADDR_VAR 0 5
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_VAR 0 2
39289: PUSH
39290: LD_INT 4
39292: PLUS
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: PUSH
39302: LD_VAR 0 1
39306: PUSH
39307: LD_INT 3
39309: PLUS
39310: PUSH
39311: LD_VAR 0 2
39315: PUSH
39316: LD_INT 3
39318: PLUS
39319: PUSH
39320: LD_INT 5
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_INT 4
39335: PLUS
39336: PUSH
39337: LD_VAR 0 2
39341: PUSH
39342: LD_INT 4
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_INT 3
39362: MINUS
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: PUSH
39372: LD_VAR 0 1
39376: PUSH
39377: LD_INT 4
39379: MINUS
39380: PUSH
39381: LD_VAR 0 2
39385: PUSH
39386: LD_INT 4
39388: MINUS
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// end ; 5 :
39405: GO 39545
39407: LD_INT 5
39409: DOUBLE
39410: EQUAL
39411: IFTRUE 39415
39413: GO 39544
39415: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39416: LD_ADDR_VAR 0 5
39420: PUSH
39421: LD_VAR 0 1
39425: PUSH
39426: LD_INT 4
39428: MINUS
39429: PUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PUSH
39443: LD_VAR 0 1
39447: PUSH
39448: LD_VAR 0 2
39452: PUSH
39453: LD_INT 4
39455: MINUS
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: LD_VAR 0 1
39469: PUSH
39470: LD_INT 4
39472: PLUS
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_INT 4
39481: PLUS
39482: PUSH
39483: LD_INT 5
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: LD_VAR 0 1
39495: PUSH
39496: LD_INT 3
39498: PLUS
39499: PUSH
39500: LD_VAR 0 2
39504: PUSH
39505: LD_INT 4
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: PUSH
39513: LD_VAR 0 1
39517: PUSH
39518: LD_VAR 0 2
39522: PUSH
39523: LD_INT 3
39525: PLUS
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: ST_TO_ADDR
// end ; end ;
39542: GO 39545
39544: POP
// result := list ;
39545: LD_ADDR_VAR 0 4
39549: PUSH
39550: LD_VAR 0 5
39554: ST_TO_ADDR
// end ;
39555: LD_VAR 0 4
39559: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39560: LD_INT 0
39562: PPUSH
39563: PPUSH
39564: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39565: LD_VAR 0 1
39569: NOT
39570: PUSH
39571: LD_VAR 0 2
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: IN
39594: NOT
39595: OR
39596: IFFALSE 39600
// exit ;
39598: GO 39683
// tmp := [ ] ;
39600: LD_ADDR_VAR 0 5
39604: PUSH
39605: EMPTY
39606: ST_TO_ADDR
// for i in units do
39607: LD_ADDR_VAR 0 4
39611: PUSH
39612: LD_VAR 0 1
39616: PUSH
39617: FOR_IN
39618: IFFALSE 39652
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39620: LD_ADDR_VAR 0 5
39624: PUSH
39625: LD_VAR 0 5
39629: PPUSH
39630: LD_VAR 0 4
39634: PPUSH
39635: LD_VAR 0 2
39639: PPUSH
39640: CALL_OW 259
39644: PPUSH
39645: CALL 41044 0 2
39649: ST_TO_ADDR
39650: GO 39617
39652: POP
39653: POP
// if not tmp then
39654: LD_VAR 0 5
39658: NOT
39659: IFFALSE 39663
// exit ;
39661: GO 39683
// result := SortListByListDesc ( units , tmp ) ;
39663: LD_ADDR_VAR 0 3
39667: PUSH
39668: LD_VAR 0 1
39672: PPUSH
39673: LD_VAR 0 5
39677: PPUSH
39678: CALL_OW 77
39682: ST_TO_ADDR
// end ;
39683: LD_VAR 0 3
39687: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39688: LD_INT 0
39690: PPUSH
39691: PPUSH
39692: PPUSH
// result := false ;
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: LD_INT 0
39700: ST_TO_ADDR
// if not building then
39701: LD_VAR 0 2
39705: NOT
39706: IFFALSE 39710
// exit ;
39708: GO 39848
// x := GetX ( building ) ;
39710: LD_ADDR_VAR 0 4
39714: PUSH
39715: LD_VAR 0 2
39719: PPUSH
39720: CALL_OW 250
39724: ST_TO_ADDR
// y := GetY ( building ) ;
39725: LD_ADDR_VAR 0 5
39729: PUSH
39730: LD_VAR 0 2
39734: PPUSH
39735: CALL_OW 251
39739: ST_TO_ADDR
// if not x or not y then
39740: LD_VAR 0 4
39744: NOT
39745: PUSH
39746: LD_VAR 0 5
39750: NOT
39751: OR
39752: IFFALSE 39756
// exit ;
39754: GO 39848
// if GetTaskList ( unit ) then
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 437
39765: IFFALSE 39848
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39767: LD_STRING e
39769: PUSH
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 437
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: EQUAL
39788: PUSH
39789: LD_VAR 0 4
39793: PUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 437
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: PUSH
39808: LD_INT 2
39810: ARRAY
39811: EQUAL
39812: AND
39813: PUSH
39814: LD_VAR 0 5
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 437
39828: PUSH
39829: LD_INT 1
39831: ARRAY
39832: PUSH
39833: LD_INT 3
39835: ARRAY
39836: EQUAL
39837: AND
39838: IFFALSE 39848
// result := true end ;
39840: LD_ADDR_VAR 0 3
39844: PUSH
39845: LD_INT 1
39847: ST_TO_ADDR
// end ;
39848: LD_VAR 0 3
39852: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39853: LD_INT 0
39855: PPUSH
// result := false ;
39856: LD_ADDR_VAR 0 4
39860: PUSH
39861: LD_INT 0
39863: ST_TO_ADDR
// if GetTaskList ( unit ) then
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 437
39873: IFFALSE 39956
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39875: LD_STRING M
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 437
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PUSH
39892: LD_INT 1
39894: ARRAY
39895: EQUAL
39896: PUSH
39897: LD_VAR 0 2
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 437
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: EQUAL
39920: AND
39921: PUSH
39922: LD_VAR 0 3
39926: PUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: CALL_OW 437
39936: PUSH
39937: LD_INT 1
39939: ARRAY
39940: PUSH
39941: LD_INT 3
39943: ARRAY
39944: EQUAL
39945: AND
39946: IFFALSE 39956
// result := true ;
39948: LD_ADDR_VAR 0 4
39952: PUSH
39953: LD_INT 1
39955: ST_TO_ADDR
// end ; end ;
39956: LD_VAR 0 4
39960: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39961: LD_INT 0
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
// if not unit or not area then
39967: LD_VAR 0 1
39971: NOT
39972: PUSH
39973: LD_VAR 0 2
39977: NOT
39978: OR
39979: IFFALSE 39983
// exit ;
39981: GO 40147
// tmp := AreaToList ( area , i ) ;
39983: LD_ADDR_VAR 0 6
39987: PUSH
39988: LD_VAR 0 2
39992: PPUSH
39993: LD_VAR 0 5
39997: PPUSH
39998: CALL_OW 517
40002: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40003: LD_ADDR_VAR 0 5
40007: PUSH
40008: DOUBLE
40009: LD_INT 1
40011: DEC
40012: ST_TO_ADDR
40013: LD_VAR 0 6
40017: PUSH
40018: LD_INT 1
40020: ARRAY
40021: PUSH
40022: FOR_TO
40023: IFFALSE 40145
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40025: LD_ADDR_VAR 0 7
40029: PUSH
40030: LD_VAR 0 6
40034: PUSH
40035: LD_INT 1
40037: ARRAY
40038: PUSH
40039: LD_VAR 0 5
40043: ARRAY
40044: PUSH
40045: LD_VAR 0 6
40049: PUSH
40050: LD_INT 2
40052: ARRAY
40053: PUSH
40054: LD_VAR 0 5
40058: ARRAY
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40064: LD_VAR 0 7
40068: PUSH
40069: LD_INT 1
40071: ARRAY
40072: PPUSH
40073: LD_VAR 0 7
40077: PUSH
40078: LD_INT 2
40080: ARRAY
40081: PPUSH
40082: CALL_OW 428
40086: PUSH
40087: LD_INT 0
40089: EQUAL
40090: IFFALSE 40143
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40092: LD_VAR 0 1
40096: PPUSH
40097: LD_VAR 0 7
40101: PUSH
40102: LD_INT 1
40104: ARRAY
40105: PPUSH
40106: LD_VAR 0 7
40110: PUSH
40111: LD_INT 2
40113: ARRAY
40114: PPUSH
40115: LD_VAR 0 3
40119: PPUSH
40120: CALL_OW 48
// result := IsPlaced ( unit ) ;
40124: LD_ADDR_VAR 0 4
40128: PUSH
40129: LD_VAR 0 1
40133: PPUSH
40134: CALL_OW 305
40138: ST_TO_ADDR
// exit ;
40139: POP
40140: POP
40141: GO 40147
// end ; end ;
40143: GO 40022
40145: POP
40146: POP
// end ;
40147: LD_VAR 0 4
40151: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
// if not side or side > 8 then
40157: LD_VAR 0 1
40161: NOT
40162: PUSH
40163: LD_VAR 0 1
40167: PUSH
40168: LD_INT 8
40170: GREATER
40171: OR
40172: IFFALSE 40176
// exit ;
40174: GO 40363
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40176: LD_ADDR_VAR 0 4
40180: PUSH
40181: LD_INT 22
40183: PUSH
40184: LD_VAR 0 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 21
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PPUSH
40207: CALL_OW 69
40211: ST_TO_ADDR
// if not tmp then
40212: LD_VAR 0 4
40216: NOT
40217: IFFALSE 40221
// exit ;
40219: GO 40363
// enable_addtolog := true ;
40221: LD_ADDR_OWVAR 81
40225: PUSH
40226: LD_INT 1
40228: ST_TO_ADDR
// AddToLog ( [ ) ;
40229: LD_STRING [
40231: PPUSH
40232: CALL_OW 561
// for i in tmp do
40236: LD_ADDR_VAR 0 3
40240: PUSH
40241: LD_VAR 0 4
40245: PUSH
40246: FOR_IN
40247: IFFALSE 40354
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40249: LD_STRING [
40251: PUSH
40252: LD_VAR 0 3
40256: PPUSH
40257: CALL_OW 266
40261: STR
40262: PUSH
40263: LD_STRING , 
40265: STR
40266: PUSH
40267: LD_VAR 0 3
40271: PPUSH
40272: CALL_OW 250
40276: STR
40277: PUSH
40278: LD_STRING , 
40280: STR
40281: PUSH
40282: LD_VAR 0 3
40286: PPUSH
40287: CALL_OW 251
40291: STR
40292: PUSH
40293: LD_STRING , 
40295: STR
40296: PUSH
40297: LD_VAR 0 3
40301: PPUSH
40302: CALL_OW 254
40306: STR
40307: PUSH
40308: LD_STRING , 
40310: STR
40311: PUSH
40312: LD_VAR 0 3
40316: PPUSH
40317: LD_INT 1
40319: PPUSH
40320: CALL_OW 268
40324: STR
40325: PUSH
40326: LD_STRING , 
40328: STR
40329: PUSH
40330: LD_VAR 0 3
40334: PPUSH
40335: LD_INT 2
40337: PPUSH
40338: CALL_OW 268
40342: STR
40343: PUSH
40344: LD_STRING ],
40346: STR
40347: PPUSH
40348: CALL_OW 561
// end ;
40352: GO 40246
40354: POP
40355: POP
// AddToLog ( ]; ) ;
40356: LD_STRING ];
40358: PPUSH
40359: CALL_OW 561
// end ;
40363: LD_VAR 0 2
40367: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40368: LD_INT 0
40370: PPUSH
40371: PPUSH
40372: PPUSH
40373: PPUSH
40374: PPUSH
// if not area or not rate or not max then
40375: LD_VAR 0 1
40379: NOT
40380: PUSH
40381: LD_VAR 0 2
40385: NOT
40386: OR
40387: PUSH
40388: LD_VAR 0 4
40392: NOT
40393: OR
40394: IFFALSE 40398
// exit ;
40396: GO 40587
// while 1 do
40398: LD_INT 1
40400: IFFALSE 40587
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40402: LD_ADDR_VAR 0 9
40406: PUSH
40407: LD_VAR 0 1
40411: PPUSH
40412: LD_INT 1
40414: PPUSH
40415: CALL_OW 287
40419: PUSH
40420: LD_INT 10
40422: MUL
40423: ST_TO_ADDR
// r := rate / 10 ;
40424: LD_ADDR_VAR 0 7
40428: PUSH
40429: LD_VAR 0 2
40433: PUSH
40434: LD_INT 10
40436: DIVREAL
40437: ST_TO_ADDR
// time := 1 1$00 ;
40438: LD_ADDR_VAR 0 8
40442: PUSH
40443: LD_INT 2100
40445: ST_TO_ADDR
// if amount < min then
40446: LD_VAR 0 9
40450: PUSH
40451: LD_VAR 0 3
40455: LESS
40456: IFFALSE 40474
// r := r * 2 else
40458: LD_ADDR_VAR 0 7
40462: PUSH
40463: LD_VAR 0 7
40467: PUSH
40468: LD_INT 2
40470: MUL
40471: ST_TO_ADDR
40472: GO 40500
// if amount > max then
40474: LD_VAR 0 9
40478: PUSH
40479: LD_VAR 0 4
40483: GREATER
40484: IFFALSE 40500
// r := r / 2 ;
40486: LD_ADDR_VAR 0 7
40490: PUSH
40491: LD_VAR 0 7
40495: PUSH
40496: LD_INT 2
40498: DIVREAL
40499: ST_TO_ADDR
// time := time / r ;
40500: LD_ADDR_VAR 0 8
40504: PUSH
40505: LD_VAR 0 8
40509: PUSH
40510: LD_VAR 0 7
40514: DIVREAL
40515: ST_TO_ADDR
// if time < 0 then
40516: LD_VAR 0 8
40520: PUSH
40521: LD_INT 0
40523: LESS
40524: IFFALSE 40541
// time := time * - 1 ;
40526: LD_ADDR_VAR 0 8
40530: PUSH
40531: LD_VAR 0 8
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: MUL
40540: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40541: LD_VAR 0 8
40545: PUSH
40546: LD_INT 35
40548: PPUSH
40549: LD_INT 875
40551: PPUSH
40552: CALL_OW 12
40556: PLUS
40557: PPUSH
40558: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40562: LD_INT 1
40564: PPUSH
40565: LD_INT 5
40567: PPUSH
40568: CALL_OW 12
40572: PPUSH
40573: LD_VAR 0 1
40577: PPUSH
40578: LD_INT 1
40580: PPUSH
40581: CALL_OW 55
// end ;
40585: GO 40398
// end ;
40587: LD_VAR 0 5
40591: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40592: LD_INT 0
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
// if not turrets or not factories then
40602: LD_VAR 0 1
40606: NOT
40607: PUSH
40608: LD_VAR 0 2
40612: NOT
40613: OR
40614: IFFALSE 40618
// exit ;
40616: GO 40925
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40618: LD_ADDR_VAR 0 10
40622: PUSH
40623: LD_INT 5
40625: PUSH
40626: LD_INT 6
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: LD_INT 4
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: LD_INT 5
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 24
40660: PUSH
40661: LD_INT 25
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 23
40670: PUSH
40671: LD_INT 27
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 42
40684: PUSH
40685: LD_INT 43
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 44
40694: PUSH
40695: LD_INT 46
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 45
40704: PUSH
40705: LD_INT 47
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: ST_TO_ADDR
// result := [ ] ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: EMPTY
40728: ST_TO_ADDR
// for i in turrets do
40729: LD_ADDR_VAR 0 4
40733: PUSH
40734: LD_VAR 0 1
40738: PUSH
40739: FOR_IN
40740: IFFALSE 40923
// begin nat := GetNation ( i ) ;
40742: LD_ADDR_VAR 0 7
40746: PUSH
40747: LD_VAR 0 4
40751: PPUSH
40752: CALL_OW 248
40756: ST_TO_ADDR
// weapon := 0 ;
40757: LD_ADDR_VAR 0 8
40761: PUSH
40762: LD_INT 0
40764: ST_TO_ADDR
// if not nat then
40765: LD_VAR 0 7
40769: NOT
40770: IFFALSE 40774
// continue ;
40772: GO 40739
// for j in list [ nat ] do
40774: LD_ADDR_VAR 0 5
40778: PUSH
40779: LD_VAR 0 10
40783: PUSH
40784: LD_VAR 0 7
40788: ARRAY
40789: PUSH
40790: FOR_IN
40791: IFFALSE 40832
// if GetBWeapon ( i ) = j [ 1 ] then
40793: LD_VAR 0 4
40797: PPUSH
40798: CALL_OW 269
40802: PUSH
40803: LD_VAR 0 5
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: EQUAL
40812: IFFALSE 40830
// begin weapon := j [ 2 ] ;
40814: LD_ADDR_VAR 0 8
40818: PUSH
40819: LD_VAR 0 5
40823: PUSH
40824: LD_INT 2
40826: ARRAY
40827: ST_TO_ADDR
// break ;
40828: GO 40832
// end ;
40830: GO 40790
40832: POP
40833: POP
// if not weapon then
40834: LD_VAR 0 8
40838: NOT
40839: IFFALSE 40843
// continue ;
40841: GO 40739
// for k in factories do
40843: LD_ADDR_VAR 0 6
40847: PUSH
40848: LD_VAR 0 2
40852: PUSH
40853: FOR_IN
40854: IFFALSE 40919
// begin weapons := AvailableWeaponList ( k ) ;
40856: LD_ADDR_VAR 0 9
40860: PUSH
40861: LD_VAR 0 6
40865: PPUSH
40866: CALL_OW 478
40870: ST_TO_ADDR
// if not weapons then
40871: LD_VAR 0 9
40875: NOT
40876: IFFALSE 40880
// continue ;
40878: GO 40853
// if weapon in weapons then
40880: LD_VAR 0 8
40884: PUSH
40885: LD_VAR 0 9
40889: IN
40890: IFFALSE 40917
// begin result := [ i , weapon ] ;
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_VAR 0 4
40901: PUSH
40902: LD_VAR 0 8
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: ST_TO_ADDR
// exit ;
40911: POP
40912: POP
40913: POP
40914: POP
40915: GO 40925
// end ; end ;
40917: GO 40853
40919: POP
40920: POP
// end ;
40921: GO 40739
40923: POP
40924: POP
// end ;
40925: LD_VAR 0 3
40929: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40930: LD_INT 0
40932: PPUSH
// if not side or side > 8 then
40933: LD_VAR 0 3
40937: NOT
40938: PUSH
40939: LD_VAR 0 3
40943: PUSH
40944: LD_INT 8
40946: GREATER
40947: OR
40948: IFFALSE 40952
// exit ;
40950: GO 41011
// if not range then
40952: LD_VAR 0 4
40956: NOT
40957: IFFALSE 40968
// range := - 12 ;
40959: LD_ADDR_VAR 0 4
40963: PUSH
40964: LD_INT 12
40966: NEG
40967: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40968: LD_VAR 0 1
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: LD_VAR 0 3
40982: PPUSH
40983: LD_VAR 0 4
40987: PPUSH
40988: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40992: LD_VAR 0 1
40996: PPUSH
40997: LD_VAR 0 2
41001: PPUSH
41002: LD_VAR 0 3
41006: PPUSH
41007: CALL_OW 331
// end ;
41011: LD_VAR 0 5
41015: RET
// export function Video ( mode ) ; begin
41016: LD_INT 0
41018: PPUSH
// ingame_video = mode ;
41019: LD_ADDR_OWVAR 52
41023: PUSH
41024: LD_VAR 0 1
41028: ST_TO_ADDR
// interface_hidden = mode ;
41029: LD_ADDR_OWVAR 54
41033: PUSH
41034: LD_VAR 0 1
41038: ST_TO_ADDR
// end ;
41039: LD_VAR 0 2
41043: RET
// export function Join ( array , element ) ; begin
41044: LD_INT 0
41046: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: LD_VAR 0 1
41061: PUSH
41062: LD_INT 1
41064: PLUS
41065: PPUSH
41066: LD_VAR 0 2
41070: PPUSH
41071: CALL_OW 1
41075: ST_TO_ADDR
// end ;
41076: LD_VAR 0 3
41080: RET
// export function JoinUnion ( array , element ) ; begin
41081: LD_INT 0
41083: PPUSH
// result := array union element ;
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_VAR 0 1
41093: PUSH
41094: LD_VAR 0 2
41098: UNION
41099: ST_TO_ADDR
// end ;
41100: LD_VAR 0 3
41104: RET
// export function GetBehemoths ( side ) ; begin
41105: LD_INT 0
41107: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41108: LD_ADDR_VAR 0 2
41112: PUSH
41113: LD_INT 22
41115: PUSH
41116: LD_VAR 0 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 31
41127: PUSH
41128: LD_INT 25
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PPUSH
41139: CALL_OW 69
41143: ST_TO_ADDR
// end ;
41144: LD_VAR 0 2
41148: RET
// export function Shuffle ( array ) ; var i , index ; begin
41149: LD_INT 0
41151: PPUSH
41152: PPUSH
41153: PPUSH
// result := [ ] ;
41154: LD_ADDR_VAR 0 2
41158: PUSH
41159: EMPTY
41160: ST_TO_ADDR
// if not array then
41161: LD_VAR 0 1
41165: NOT
41166: IFFALSE 41170
// exit ;
41168: GO 41269
// Randomize ;
41170: CALL_OW 10
// for i = array downto 1 do
41174: LD_ADDR_VAR 0 3
41178: PUSH
41179: DOUBLE
41180: LD_VAR 0 1
41184: INC
41185: ST_TO_ADDR
41186: LD_INT 1
41188: PUSH
41189: FOR_DOWNTO
41190: IFFALSE 41267
// begin index := rand ( 1 , array ) ;
41192: LD_ADDR_VAR 0 4
41196: PUSH
41197: LD_INT 1
41199: PPUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL_OW 12
41209: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41210: LD_ADDR_VAR 0 2
41214: PUSH
41215: LD_VAR 0 2
41219: PPUSH
41220: LD_VAR 0 2
41224: PUSH
41225: LD_INT 1
41227: PLUS
41228: PPUSH
41229: LD_VAR 0 1
41233: PUSH
41234: LD_VAR 0 4
41238: ARRAY
41239: PPUSH
41240: CALL_OW 2
41244: ST_TO_ADDR
// array := Delete ( array , index ) ;
41245: LD_ADDR_VAR 0 1
41249: PUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: LD_VAR 0 4
41259: PPUSH
41260: CALL_OW 3
41264: ST_TO_ADDR
// end ;
41265: GO 41189
41267: POP
41268: POP
// end ;
41269: LD_VAR 0 2
41273: RET
// export function GetBaseMaterials ( base ) ; begin
41274: LD_INT 0
41276: PPUSH
// result := [ 0 , 0 , 0 ] ;
41277: LD_ADDR_VAR 0 2
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// if not base then
41296: LD_VAR 0 1
41300: NOT
41301: IFFALSE 41305
// exit ;
41303: GO 41354
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41305: LD_ADDR_VAR 0 2
41309: PUSH
41310: LD_VAR 0 1
41314: PPUSH
41315: LD_INT 1
41317: PPUSH
41318: CALL_OW 275
41322: PUSH
41323: LD_VAR 0 1
41327: PPUSH
41328: LD_INT 2
41330: PPUSH
41331: CALL_OW 275
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: LD_INT 3
41343: PPUSH
41344: CALL_OW 275
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
// end ;
41354: LD_VAR 0 2
41358: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
// result := array ;
41363: LD_ADDR_VAR 0 3
41367: PUSH
41368: LD_VAR 0 1
41372: ST_TO_ADDR
// if size >= result then
41373: LD_VAR 0 2
41377: PUSH
41378: LD_VAR 0 3
41382: GREATEREQUAL
41383: IFFALSE 41387
// exit ;
41385: GO 41437
// if size then
41387: LD_VAR 0 2
41391: IFFALSE 41437
// for i := array downto size do
41393: LD_ADDR_VAR 0 4
41397: PUSH
41398: DOUBLE
41399: LD_VAR 0 1
41403: INC
41404: ST_TO_ADDR
41405: LD_VAR 0 2
41409: PUSH
41410: FOR_DOWNTO
41411: IFFALSE 41435
// result := Delete ( result , result ) ;
41413: LD_ADDR_VAR 0 3
41417: PUSH
41418: LD_VAR 0 3
41422: PPUSH
41423: LD_VAR 0 3
41427: PPUSH
41428: CALL_OW 3
41432: ST_TO_ADDR
41433: GO 41410
41435: POP
41436: POP
// end ;
41437: LD_VAR 0 3
41441: RET
// export function ComExit ( unit ) ; var tmp ; begin
41442: LD_INT 0
41444: PPUSH
41445: PPUSH
// if not IsInUnit ( unit ) then
41446: LD_VAR 0 1
41450: PPUSH
41451: CALL_OW 310
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 41520
// tmp := IsInUnit ( unit ) ;
41460: LD_ADDR_VAR 0 3
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: CALL_OW 310
41474: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41475: LD_VAR 0 3
41479: PPUSH
41480: CALL_OW 247
41484: PUSH
41485: LD_INT 2
41487: EQUAL
41488: IFFALSE 41501
// ComExitVehicle ( unit ) else
41490: LD_VAR 0 1
41494: PPUSH
41495: CALL_OW 121
41499: GO 41510
// ComExitBuilding ( unit ) ;
41501: LD_VAR 0 1
41505: PPUSH
41506: CALL_OW 122
// result := tmp ;
41510: LD_ADDR_VAR 0 2
41514: PUSH
41515: LD_VAR 0 3
41519: ST_TO_ADDR
// end ;
41520: LD_VAR 0 2
41524: RET
// export function ComExitAll ( units ) ; var i ; begin
41525: LD_INT 0
41527: PPUSH
41528: PPUSH
// if not units then
41529: LD_VAR 0 1
41533: NOT
41534: IFFALSE 41538
// exit ;
41536: GO 41564
// for i in units do
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_VAR 0 1
41547: PUSH
41548: FOR_IN
41549: IFFALSE 41562
// ComExit ( i ) ;
41551: LD_VAR 0 3
41555: PPUSH
41556: CALL 41442 0 1
41560: GO 41548
41562: POP
41563: POP
// end ;
41564: LD_VAR 0 2
41568: RET
// export function ResetHc ; begin
41569: LD_INT 0
41571: PPUSH
// InitHc ;
41572: CALL_OW 19
// hc_importance := 0 ;
41576: LD_ADDR_OWVAR 32
41580: PUSH
41581: LD_INT 0
41583: ST_TO_ADDR
// end ;
41584: LD_VAR 0 1
41588: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41589: LD_INT 0
41591: PPUSH
41592: PPUSH
41593: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41594: LD_ADDR_VAR 0 6
41598: PUSH
41599: LD_VAR 0 1
41603: PUSH
41604: LD_VAR 0 3
41608: PLUS
41609: PUSH
41610: LD_INT 2
41612: DIV
41613: ST_TO_ADDR
// if _x < 0 then
41614: LD_VAR 0 6
41618: PUSH
41619: LD_INT 0
41621: LESS
41622: IFFALSE 41639
// _x := _x * - 1 ;
41624: LD_ADDR_VAR 0 6
41628: PUSH
41629: LD_VAR 0 6
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: MUL
41638: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41639: LD_ADDR_VAR 0 7
41643: PUSH
41644: LD_VAR 0 2
41648: PUSH
41649: LD_VAR 0 4
41653: PLUS
41654: PUSH
41655: LD_INT 2
41657: DIV
41658: ST_TO_ADDR
// if _y < 0 then
41659: LD_VAR 0 7
41663: PUSH
41664: LD_INT 0
41666: LESS
41667: IFFALSE 41684
// _y := _y * - 1 ;
41669: LD_ADDR_VAR 0 7
41673: PUSH
41674: LD_VAR 0 7
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: MUL
41683: ST_TO_ADDR
// result := [ _x , _y ] ;
41684: LD_ADDR_VAR 0 5
41688: PUSH
41689: LD_VAR 0 6
41693: PUSH
41694: LD_VAR 0 7
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// end ;
41703: LD_VAR 0 5
41707: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41708: LD_INT 0
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
// task := GetTaskList ( unit ) ;
41714: LD_ADDR_VAR 0 7
41718: PUSH
41719: LD_VAR 0 1
41723: PPUSH
41724: CALL_OW 437
41728: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41729: LD_VAR 0 7
41733: NOT
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: LD_VAR 0 2
41744: PPUSH
41745: CALL_OW 308
41749: NOT
41750: AND
41751: IFFALSE 41755
// exit ;
41753: GO 41873
// if IsInArea ( unit , area ) then
41755: LD_VAR 0 1
41759: PPUSH
41760: LD_VAR 0 2
41764: PPUSH
41765: CALL_OW 308
41769: IFFALSE 41787
// begin ComMoveToArea ( unit , goAway ) ;
41771: LD_VAR 0 1
41775: PPUSH
41776: LD_VAR 0 3
41780: PPUSH
41781: CALL_OW 113
// exit ;
41785: GO 41873
// end ; if task [ 1 ] [ 1 ] <> M then
41787: LD_VAR 0 7
41791: PUSH
41792: LD_INT 1
41794: ARRAY
41795: PUSH
41796: LD_INT 1
41798: ARRAY
41799: PUSH
41800: LD_STRING M
41802: NONEQUAL
41803: IFFALSE 41807
// exit ;
41805: GO 41873
// x := task [ 1 ] [ 2 ] ;
41807: LD_ADDR_VAR 0 5
41811: PUSH
41812: LD_VAR 0 7
41816: PUSH
41817: LD_INT 1
41819: ARRAY
41820: PUSH
41821: LD_INT 2
41823: ARRAY
41824: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41825: LD_ADDR_VAR 0 6
41829: PUSH
41830: LD_VAR 0 7
41834: PUSH
41835: LD_INT 1
41837: ARRAY
41838: PUSH
41839: LD_INT 3
41841: ARRAY
41842: ST_TO_ADDR
// if InArea ( x , y , area ) then
41843: LD_VAR 0 5
41847: PPUSH
41848: LD_VAR 0 6
41852: PPUSH
41853: LD_VAR 0 2
41857: PPUSH
41858: CALL_OW 309
41862: IFFALSE 41873
// ComStop ( unit ) ;
41864: LD_VAR 0 1
41868: PPUSH
41869: CALL_OW 141
// end ;
41873: LD_VAR 0 4
41877: RET
// export function Abs ( value ) ; begin
41878: LD_INT 0
41880: PPUSH
// result := value ;
41881: LD_ADDR_VAR 0 2
41885: PUSH
41886: LD_VAR 0 1
41890: ST_TO_ADDR
// if value < 0 then
41891: LD_VAR 0 1
41895: PUSH
41896: LD_INT 0
41898: LESS
41899: IFFALSE 41916
// result := value * - 1 ;
41901: LD_ADDR_VAR 0 2
41905: PUSH
41906: LD_VAR 0 1
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: MUL
41915: ST_TO_ADDR
// end ;
41916: LD_VAR 0 2
41920: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41921: LD_INT 0
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
// if not unit or not building then
41931: LD_VAR 0 1
41935: NOT
41936: PUSH
41937: LD_VAR 0 2
41941: NOT
41942: OR
41943: IFFALSE 41947
// exit ;
41945: GO 42173
// x := GetX ( building ) ;
41947: LD_ADDR_VAR 0 4
41951: PUSH
41952: LD_VAR 0 2
41956: PPUSH
41957: CALL_OW 250
41961: ST_TO_ADDR
// y := GetY ( building ) ;
41962: LD_ADDR_VAR 0 6
41966: PUSH
41967: LD_VAR 0 2
41971: PPUSH
41972: CALL_OW 251
41976: ST_TO_ADDR
// d := GetDir ( building ) ;
41977: LD_ADDR_VAR 0 8
41981: PUSH
41982: LD_VAR 0 2
41986: PPUSH
41987: CALL_OW 254
41991: ST_TO_ADDR
// r := 4 ;
41992: LD_ADDR_VAR 0 9
41996: PUSH
41997: LD_INT 4
41999: ST_TO_ADDR
// for i := 1 to 5 do
42000: LD_ADDR_VAR 0 10
42004: PUSH
42005: DOUBLE
42006: LD_INT 1
42008: DEC
42009: ST_TO_ADDR
42010: LD_INT 5
42012: PUSH
42013: FOR_TO
42014: IFFALSE 42171
// begin _x := ShiftX ( x , d , r + i ) ;
42016: LD_ADDR_VAR 0 5
42020: PUSH
42021: LD_VAR 0 4
42025: PPUSH
42026: LD_VAR 0 8
42030: PPUSH
42031: LD_VAR 0 9
42035: PUSH
42036: LD_VAR 0 10
42040: PLUS
42041: PPUSH
42042: CALL_OW 272
42046: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42047: LD_ADDR_VAR 0 7
42051: PUSH
42052: LD_VAR 0 6
42056: PPUSH
42057: LD_VAR 0 8
42061: PPUSH
42062: LD_VAR 0 9
42066: PUSH
42067: LD_VAR 0 10
42071: PLUS
42072: PPUSH
42073: CALL_OW 273
42077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42078: LD_VAR 0 5
42082: PPUSH
42083: LD_VAR 0 7
42087: PPUSH
42088: CALL_OW 488
42092: PUSH
42093: LD_VAR 0 5
42097: PPUSH
42098: LD_VAR 0 7
42102: PPUSH
42103: CALL_OW 428
42107: PPUSH
42108: CALL_OW 247
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: IN
42123: NOT
42124: AND
42125: IFFALSE 42169
// begin ComMoveXY ( unit , _x , _y ) ;
42127: LD_VAR 0 1
42131: PPUSH
42132: LD_VAR 0 5
42136: PPUSH
42137: LD_VAR 0 7
42141: PPUSH
42142: CALL_OW 111
// result := [ _x , _y ] ;
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_VAR 0 5
42155: PUSH
42156: LD_VAR 0 7
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// exit ;
42165: POP
42166: POP
42167: GO 42173
// end ; end ;
42169: GO 42013
42171: POP
42172: POP
// end ;
42173: LD_VAR 0 3
42177: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42178: LD_INT 0
42180: PPUSH
42181: PPUSH
42182: PPUSH
// result := 0 ;
42183: LD_ADDR_VAR 0 3
42187: PUSH
42188: LD_INT 0
42190: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42191: LD_VAR 0 1
42195: PUSH
42196: LD_INT 0
42198: LESS
42199: PUSH
42200: LD_VAR 0 1
42204: PUSH
42205: LD_INT 8
42207: GREATER
42208: OR
42209: PUSH
42210: LD_VAR 0 2
42214: PUSH
42215: LD_INT 0
42217: LESS
42218: OR
42219: PUSH
42220: LD_VAR 0 2
42224: PUSH
42225: LD_INT 8
42227: GREATER
42228: OR
42229: IFFALSE 42233
// exit ;
42231: GO 42308
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42233: LD_ADDR_VAR 0 4
42237: PUSH
42238: LD_INT 22
42240: PUSH
42241: LD_VAR 0 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PPUSH
42250: CALL_OW 69
42254: PUSH
42255: FOR_IN
42256: IFFALSE 42306
// begin un := UnitShoot ( i ) ;
42258: LD_ADDR_VAR 0 5
42262: PUSH
42263: LD_VAR 0 4
42267: PPUSH
42268: CALL_OW 504
42272: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42273: LD_VAR 0 5
42277: PPUSH
42278: CALL_OW 255
42282: PUSH
42283: LD_VAR 0 1
42287: EQUAL
42288: IFFALSE 42304
// begin result := un ;
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_VAR 0 5
42299: ST_TO_ADDR
// exit ;
42300: POP
42301: POP
42302: GO 42308
// end ; end ;
42304: GO 42255
42306: POP
42307: POP
// end ;
42308: LD_VAR 0 3
42312: RET
// export function GetCargoBay ( units ) ; begin
42313: LD_INT 0
42315: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42316: LD_ADDR_VAR 0 2
42320: PUSH
42321: LD_VAR 0 1
42325: PPUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 34
42331: PUSH
42332: LD_INT 12
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 34
42341: PUSH
42342: LD_INT 51
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 34
42351: PUSH
42352: LD_INT 32
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 34
42361: PUSH
42362: LD_INT 89
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: PPUSH
42376: CALL_OW 72
42380: ST_TO_ADDR
// end ;
42381: LD_VAR 0 2
42385: RET
// export function Negate ( value ) ; begin
42386: LD_INT 0
42388: PPUSH
// result := not value ;
42389: LD_ADDR_VAR 0 2
42393: PUSH
42394: LD_VAR 0 1
42398: NOT
42399: ST_TO_ADDR
// end ;
42400: LD_VAR 0 2
42404: RET
// export function Inc ( value ) ; begin
42405: LD_INT 0
42407: PPUSH
// result := value + 1 ;
42408: LD_ADDR_VAR 0 2
42412: PUSH
42413: LD_VAR 0 1
42417: PUSH
42418: LD_INT 1
42420: PLUS
42421: ST_TO_ADDR
// end ;
42422: LD_VAR 0 2
42426: RET
// export function Dec ( value ) ; begin
42427: LD_INT 0
42429: PPUSH
// result := value - 1 ;
42430: LD_ADDR_VAR 0 2
42434: PUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_INT 1
42442: MINUS
42443: ST_TO_ADDR
// end ;
42444: LD_VAR 0 2
42448: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42449: LD_INT 0
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42459: LD_VAR 0 1
42463: PPUSH
42464: LD_VAR 0 2
42468: PPUSH
42469: CALL_OW 488
42473: NOT
42474: PUSH
42475: LD_VAR 0 3
42479: PPUSH
42480: LD_VAR 0 4
42484: PPUSH
42485: CALL_OW 488
42489: NOT
42490: OR
42491: IFFALSE 42504
// begin result := - 1 ;
42493: LD_ADDR_VAR 0 5
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: ST_TO_ADDR
// exit ;
42502: GO 42739
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42504: LD_ADDR_VAR 0 12
42508: PUSH
42509: LD_VAR 0 1
42513: PPUSH
42514: LD_VAR 0 2
42518: PPUSH
42519: LD_VAR 0 3
42523: PPUSH
42524: LD_VAR 0 4
42528: PPUSH
42529: CALL 41589 0 4
42533: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42534: LD_ADDR_VAR 0 11
42538: PUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: LD_VAR 0 2
42548: PPUSH
42549: LD_VAR 0 12
42553: PUSH
42554: LD_INT 1
42556: ARRAY
42557: PPUSH
42558: LD_VAR 0 12
42562: PUSH
42563: LD_INT 2
42565: ARRAY
42566: PPUSH
42567: CALL_OW 298
42571: ST_TO_ADDR
// distance := 9999 ;
42572: LD_ADDR_VAR 0 10
42576: PUSH
42577: LD_INT 9999
42579: ST_TO_ADDR
// for i := 0 to 5 do
42580: LD_ADDR_VAR 0 6
42584: PUSH
42585: DOUBLE
42586: LD_INT 0
42588: DEC
42589: ST_TO_ADDR
42590: LD_INT 5
42592: PUSH
42593: FOR_TO
42594: IFFALSE 42737
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42596: LD_ADDR_VAR 0 7
42600: PUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: LD_VAR 0 6
42610: PPUSH
42611: LD_VAR 0 11
42615: PPUSH
42616: CALL_OW 272
42620: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42621: LD_ADDR_VAR 0 8
42625: PUSH
42626: LD_VAR 0 2
42630: PPUSH
42631: LD_VAR 0 6
42635: PPUSH
42636: LD_VAR 0 11
42640: PPUSH
42641: CALL_OW 273
42645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42646: LD_VAR 0 7
42650: PPUSH
42651: LD_VAR 0 8
42655: PPUSH
42656: CALL_OW 488
42660: NOT
42661: IFFALSE 42665
// continue ;
42663: GO 42593
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42665: LD_ADDR_VAR 0 9
42669: PUSH
42670: LD_VAR 0 12
42674: PUSH
42675: LD_INT 1
42677: ARRAY
42678: PPUSH
42679: LD_VAR 0 12
42683: PUSH
42684: LD_INT 2
42686: ARRAY
42687: PPUSH
42688: LD_VAR 0 7
42692: PPUSH
42693: LD_VAR 0 8
42697: PPUSH
42698: CALL_OW 298
42702: ST_TO_ADDR
// if tmp < distance then
42703: LD_VAR 0 9
42707: PUSH
42708: LD_VAR 0 10
42712: LESS
42713: IFFALSE 42735
// begin result := i ;
42715: LD_ADDR_VAR 0 5
42719: PUSH
42720: LD_VAR 0 6
42724: ST_TO_ADDR
// distance := tmp ;
42725: LD_ADDR_VAR 0 10
42729: PUSH
42730: LD_VAR 0 9
42734: ST_TO_ADDR
// end ; end ;
42735: GO 42593
42737: POP
42738: POP
// end ;
42739: LD_VAR 0 5
42743: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42744: LD_INT 0
42746: PPUSH
42747: PPUSH
// if not driver or not IsInUnit ( driver ) then
42748: LD_VAR 0 1
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 310
42763: NOT
42764: OR
42765: IFFALSE 42769
// exit ;
42767: GO 42859
// vehicle := IsInUnit ( driver ) ;
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_VAR 0 1
42778: PPUSH
42779: CALL_OW 310
42783: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42784: LD_VAR 0 1
42788: PPUSH
42789: LD_STRING \
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: PUSH
42819: LD_STRING E
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_VAR 0 3
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PPUSH
42855: CALL_OW 446
// end ;
42859: LD_VAR 0 2
42863: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42864: LD_INT 0
42866: PPUSH
42867: PPUSH
// if not driver or not IsInUnit ( driver ) then
42868: LD_VAR 0 1
42872: NOT
42873: PUSH
42874: LD_VAR 0 1
42878: PPUSH
42879: CALL_OW 310
42883: NOT
42884: OR
42885: IFFALSE 42889
// exit ;
42887: GO 42979
// vehicle := IsInUnit ( driver ) ;
42889: LD_ADDR_VAR 0 3
42893: PUSH
42894: LD_VAR 0 1
42898: PPUSH
42899: CALL_OW 310
42903: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42904: LD_VAR 0 1
42908: PPUSH
42909: LD_STRING \
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: PUSH
42939: LD_STRING E
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_VAR 0 3
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PPUSH
42975: CALL_OW 447
// end ;
42979: LD_VAR 0 2
42983: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42984: LD_INT 0
42986: PPUSH
42987: PPUSH
42988: PPUSH
// tmp := [ ] ;
42989: LD_ADDR_VAR 0 5
42993: PUSH
42994: EMPTY
42995: ST_TO_ADDR
// for i in units do
42996: LD_ADDR_VAR 0 4
43000: PUSH
43001: LD_VAR 0 1
43005: PUSH
43006: FOR_IN
43007: IFFALSE 43045
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43009: LD_ADDR_VAR 0 5
43013: PUSH
43014: LD_VAR 0 5
43018: PPUSH
43019: LD_VAR 0 5
43023: PUSH
43024: LD_INT 1
43026: PLUS
43027: PPUSH
43028: LD_VAR 0 4
43032: PPUSH
43033: CALL_OW 256
43037: PPUSH
43038: CALL_OW 2
43042: ST_TO_ADDR
43043: GO 43006
43045: POP
43046: POP
// if not tmp then
43047: LD_VAR 0 5
43051: NOT
43052: IFFALSE 43056
// exit ;
43054: GO 43104
// if asc then
43056: LD_VAR 0 2
43060: IFFALSE 43084
// result := SortListByListAsc ( units , tmp ) else
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: LD_VAR 0 5
43076: PPUSH
43077: CALL_OW 76
43081: ST_TO_ADDR
43082: GO 43104
// result := SortListByListDesc ( units , tmp ) ;
43084: LD_ADDR_VAR 0 3
43088: PUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: LD_VAR 0 5
43098: PPUSH
43099: CALL_OW 77
43103: ST_TO_ADDR
// end ;
43104: LD_VAR 0 3
43108: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43109: LD_INT 0
43111: PPUSH
43112: PPUSH
// task := GetTaskList ( mech ) ;
43113: LD_ADDR_VAR 0 4
43117: PUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: CALL_OW 437
43127: ST_TO_ADDR
// if not task then
43128: LD_VAR 0 4
43132: NOT
43133: IFFALSE 43137
// exit ;
43135: GO 43179
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_VAR 0 4
43146: PUSH
43147: LD_INT 1
43149: ARRAY
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: PUSH
43155: LD_STRING r
43157: EQUAL
43158: PUSH
43159: LD_VAR 0 4
43163: PUSH
43164: LD_INT 1
43166: ARRAY
43167: PUSH
43168: LD_INT 4
43170: ARRAY
43171: PUSH
43172: LD_VAR 0 2
43176: EQUAL
43177: AND
43178: ST_TO_ADDR
// end ;
43179: LD_VAR 0 3
43183: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43184: LD_INT 0
43186: PPUSH
// SetDir ( unit , d ) ;
43187: LD_VAR 0 1
43191: PPUSH
43192: LD_VAR 0 4
43196: PPUSH
43197: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43201: LD_VAR 0 1
43205: PPUSH
43206: LD_VAR 0 2
43210: PPUSH
43211: LD_VAR 0 3
43215: PPUSH
43216: LD_VAR 0 5
43220: PPUSH
43221: CALL_OW 48
// end ;
43225: LD_VAR 0 6
43229: RET
// export function ToNaturalNumber ( number ) ; begin
43230: LD_INT 0
43232: PPUSH
// result := number div 1 ;
43233: LD_ADDR_VAR 0 2
43237: PUSH
43238: LD_VAR 0 1
43242: PUSH
43243: LD_INT 1
43245: DIV
43246: ST_TO_ADDR
// if number < 0 then
43247: LD_VAR 0 1
43251: PUSH
43252: LD_INT 0
43254: LESS
43255: IFFALSE 43265
// result := 0 ;
43257: LD_ADDR_VAR 0 2
43261: PUSH
43262: LD_INT 0
43264: ST_TO_ADDR
// end ;
43265: LD_VAR 0 2
43269: RET
// export function SortByClass ( units , class ) ; var un ; begin
43270: LD_INT 0
43272: PPUSH
43273: PPUSH
// if not units or not class then
43274: LD_VAR 0 1
43278: NOT
43279: PUSH
43280: LD_VAR 0 2
43284: NOT
43285: OR
43286: IFFALSE 43290
// exit ;
43288: GO 43385
// result := [ ] ;
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: EMPTY
43296: ST_TO_ADDR
// for un in units do
43297: LD_ADDR_VAR 0 4
43301: PUSH
43302: LD_VAR 0 1
43306: PUSH
43307: FOR_IN
43308: IFFALSE 43383
// if GetClass ( un ) = class then
43310: LD_VAR 0 4
43314: PPUSH
43315: CALL_OW 257
43319: PUSH
43320: LD_VAR 0 2
43324: EQUAL
43325: IFFALSE 43352
// result := Insert ( result , 1 , un ) else
43327: LD_ADDR_VAR 0 3
43331: PUSH
43332: LD_VAR 0 3
43336: PPUSH
43337: LD_INT 1
43339: PPUSH
43340: LD_VAR 0 4
43344: PPUSH
43345: CALL_OW 2
43349: ST_TO_ADDR
43350: GO 43381
// result := Replace ( result , result + 1 , un ) ;
43352: LD_ADDR_VAR 0 3
43356: PUSH
43357: LD_VAR 0 3
43361: PPUSH
43362: LD_VAR 0 3
43366: PUSH
43367: LD_INT 1
43369: PLUS
43370: PPUSH
43371: LD_VAR 0 4
43375: PPUSH
43376: CALL_OW 1
43380: ST_TO_ADDR
43381: GO 43307
43383: POP
43384: POP
// end ;
43385: LD_VAR 0 3
43389: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43390: LD_INT 0
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
// result := [ ] ;
43399: LD_ADDR_VAR 0 4
43403: PUSH
43404: EMPTY
43405: ST_TO_ADDR
// if x - r < 0 then
43406: LD_VAR 0 1
43410: PUSH
43411: LD_VAR 0 3
43415: MINUS
43416: PUSH
43417: LD_INT 0
43419: LESS
43420: IFFALSE 43432
// min_x := 0 else
43422: LD_ADDR_VAR 0 8
43426: PUSH
43427: LD_INT 0
43429: ST_TO_ADDR
43430: GO 43448
// min_x := x - r ;
43432: LD_ADDR_VAR 0 8
43436: PUSH
43437: LD_VAR 0 1
43441: PUSH
43442: LD_VAR 0 3
43446: MINUS
43447: ST_TO_ADDR
// if y - r < 0 then
43448: LD_VAR 0 2
43452: PUSH
43453: LD_VAR 0 3
43457: MINUS
43458: PUSH
43459: LD_INT 0
43461: LESS
43462: IFFALSE 43474
// min_y := 0 else
43464: LD_ADDR_VAR 0 7
43468: PUSH
43469: LD_INT 0
43471: ST_TO_ADDR
43472: GO 43490
// min_y := y - r ;
43474: LD_ADDR_VAR 0 7
43478: PUSH
43479: LD_VAR 0 2
43483: PUSH
43484: LD_VAR 0 3
43488: MINUS
43489: ST_TO_ADDR
// max_x := x + r ;
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_VAR 0 1
43499: PUSH
43500: LD_VAR 0 3
43504: PLUS
43505: ST_TO_ADDR
// max_y := y + r ;
43506: LD_ADDR_VAR 0 10
43510: PUSH
43511: LD_VAR 0 2
43515: PUSH
43516: LD_VAR 0 3
43520: PLUS
43521: ST_TO_ADDR
// for _x = min_x to max_x do
43522: LD_ADDR_VAR 0 5
43526: PUSH
43527: DOUBLE
43528: LD_VAR 0 8
43532: DEC
43533: ST_TO_ADDR
43534: LD_VAR 0 9
43538: PUSH
43539: FOR_TO
43540: IFFALSE 43641
// for _y = min_y to max_y do
43542: LD_ADDR_VAR 0 6
43546: PUSH
43547: DOUBLE
43548: LD_VAR 0 7
43552: DEC
43553: ST_TO_ADDR
43554: LD_VAR 0 10
43558: PUSH
43559: FOR_TO
43560: IFFALSE 43637
// begin if not ValidHex ( _x , _y ) then
43562: LD_VAR 0 5
43566: PPUSH
43567: LD_VAR 0 6
43571: PPUSH
43572: CALL_OW 488
43576: NOT
43577: IFFALSE 43581
// continue ;
43579: GO 43559
// if GetResourceTypeXY ( _x , _y ) then
43581: LD_VAR 0 5
43585: PPUSH
43586: LD_VAR 0 6
43590: PPUSH
43591: CALL_OW 283
43595: IFFALSE 43635
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43597: LD_ADDR_VAR 0 4
43601: PUSH
43602: LD_VAR 0 4
43606: PPUSH
43607: LD_VAR 0 4
43611: PUSH
43612: LD_INT 1
43614: PLUS
43615: PPUSH
43616: LD_VAR 0 5
43620: PUSH
43621: LD_VAR 0 6
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PPUSH
43630: CALL_OW 1
43634: ST_TO_ADDR
// end ;
43635: GO 43559
43637: POP
43638: POP
43639: GO 43539
43641: POP
43642: POP
// end ;
43643: LD_VAR 0 4
43647: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43648: LD_INT 0
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
// if not units then
43658: LD_VAR 0 1
43662: NOT
43663: IFFALSE 43667
// exit ;
43665: GO 44191
// result := UnitFilter ( units , [ f_ok ] ) ;
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_VAR 0 1
43676: PPUSH
43677: LD_INT 50
43679: PUSH
43680: EMPTY
43681: LIST
43682: PPUSH
43683: CALL_OW 72
43687: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43688: LD_ADDR_VAR 0 8
43692: PUSH
43693: LD_VAR 0 1
43697: PUSH
43698: LD_INT 1
43700: ARRAY
43701: PPUSH
43702: CALL_OW 255
43706: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43707: LD_ADDR_VAR 0 10
43711: PUSH
43712: LD_INT 29
43714: PUSH
43715: LD_INT 91
43717: PUSH
43718: LD_INT 49
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: ST_TO_ADDR
// if not result then
43726: LD_VAR 0 3
43730: NOT
43731: IFFALSE 43735
// exit ;
43733: GO 44191
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43735: LD_ADDR_VAR 0 5
43739: PUSH
43740: LD_INT 81
43742: PUSH
43743: LD_VAR 0 8
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PPUSH
43752: CALL_OW 69
43756: ST_TO_ADDR
// for i in result do
43757: LD_ADDR_VAR 0 4
43761: PUSH
43762: LD_VAR 0 3
43766: PUSH
43767: FOR_IN
43768: IFFALSE 44189
// begin tag := GetTag ( i ) + 1 ;
43770: LD_ADDR_VAR 0 9
43774: PUSH
43775: LD_VAR 0 4
43779: PPUSH
43780: CALL_OW 110
43784: PUSH
43785: LD_INT 1
43787: PLUS
43788: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43789: LD_ADDR_VAR 0 7
43793: PUSH
43794: LD_VAR 0 4
43798: PPUSH
43799: CALL_OW 250
43803: PPUSH
43804: LD_VAR 0 4
43808: PPUSH
43809: CALL_OW 251
43813: PPUSH
43814: LD_INT 6
43816: PPUSH
43817: CALL 43390 0 3
43821: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43822: LD_VAR 0 4
43826: PPUSH
43827: CALL_OW 247
43831: PUSH
43832: LD_INT 2
43834: EQUAL
43835: PUSH
43836: LD_VAR 0 7
43840: AND
43841: PUSH
43842: LD_VAR 0 4
43846: PPUSH
43847: CALL_OW 264
43851: PUSH
43852: LD_VAR 0 10
43856: IN
43857: NOT
43858: AND
43859: IFFALSE 43898
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43861: LD_VAR 0 4
43865: PPUSH
43866: LD_VAR 0 7
43870: PUSH
43871: LD_INT 1
43873: ARRAY
43874: PUSH
43875: LD_INT 1
43877: ARRAY
43878: PPUSH
43879: LD_VAR 0 7
43883: PUSH
43884: LD_INT 1
43886: ARRAY
43887: PUSH
43888: LD_INT 2
43890: ARRAY
43891: PPUSH
43892: CALL_OW 116
43896: GO 44187
// if path > tag then
43898: LD_VAR 0 2
43902: PUSH
43903: LD_VAR 0 9
43907: GREATER
43908: IFFALSE 44116
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43910: LD_ADDR_VAR 0 6
43914: PUSH
43915: LD_VAR 0 5
43919: PPUSH
43920: LD_INT 91
43922: PUSH
43923: LD_VAR 0 4
43927: PUSH
43928: LD_INT 8
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: PPUSH
43936: CALL_OW 72
43940: ST_TO_ADDR
// if nearEnemy then
43941: LD_VAR 0 6
43945: IFFALSE 44014
// begin if GetWeapon ( i ) = ru_time_lapser then
43947: LD_VAR 0 4
43951: PPUSH
43952: CALL_OW 264
43956: PUSH
43957: LD_INT 49
43959: EQUAL
43960: IFFALSE 43988
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43962: LD_VAR 0 4
43966: PPUSH
43967: LD_VAR 0 6
43971: PPUSH
43972: LD_VAR 0 4
43976: PPUSH
43977: CALL_OW 74
43981: PPUSH
43982: CALL_OW 112
43986: GO 44012
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43988: LD_VAR 0 4
43992: PPUSH
43993: LD_VAR 0 6
43997: PPUSH
43998: LD_VAR 0 4
44002: PPUSH
44003: CALL_OW 74
44007: PPUSH
44008: CALL_OW 115
// end else
44012: GO 44114
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44014: LD_VAR 0 4
44018: PPUSH
44019: LD_VAR 0 2
44023: PUSH
44024: LD_VAR 0 9
44028: ARRAY
44029: PUSH
44030: LD_INT 1
44032: ARRAY
44033: PPUSH
44034: LD_VAR 0 2
44038: PUSH
44039: LD_VAR 0 9
44043: ARRAY
44044: PUSH
44045: LD_INT 2
44047: ARRAY
44048: PPUSH
44049: CALL_OW 297
44053: PUSH
44054: LD_INT 6
44056: GREATER
44057: IFFALSE 44100
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44059: LD_VAR 0 4
44063: PPUSH
44064: LD_VAR 0 2
44068: PUSH
44069: LD_VAR 0 9
44073: ARRAY
44074: PUSH
44075: LD_INT 1
44077: ARRAY
44078: PPUSH
44079: LD_VAR 0 2
44083: PUSH
44084: LD_VAR 0 9
44088: ARRAY
44089: PUSH
44090: LD_INT 2
44092: ARRAY
44093: PPUSH
44094: CALL_OW 114
44098: GO 44114
// SetTag ( i , tag ) ;
44100: LD_VAR 0 4
44104: PPUSH
44105: LD_VAR 0 9
44109: PPUSH
44110: CALL_OW 109
// end else
44114: GO 44187
// if enemy then
44116: LD_VAR 0 5
44120: IFFALSE 44187
// begin if GetWeapon ( i ) = ru_time_lapser then
44122: LD_VAR 0 4
44126: PPUSH
44127: CALL_OW 264
44131: PUSH
44132: LD_INT 49
44134: EQUAL
44135: IFFALSE 44163
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44137: LD_VAR 0 4
44141: PPUSH
44142: LD_VAR 0 5
44146: PPUSH
44147: LD_VAR 0 4
44151: PPUSH
44152: CALL_OW 74
44156: PPUSH
44157: CALL_OW 112
44161: GO 44187
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44163: LD_VAR 0 4
44167: PPUSH
44168: LD_VAR 0 5
44172: PPUSH
44173: LD_VAR 0 4
44177: PPUSH
44178: CALL_OW 74
44182: PPUSH
44183: CALL_OW 115
// end ; end ;
44187: GO 43767
44189: POP
44190: POP
// end ;
44191: LD_VAR 0 3
44195: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44196: LD_INT 0
44198: PPUSH
44199: PPUSH
44200: PPUSH
// if not unit or IsInUnit ( unit ) then
44201: LD_VAR 0 1
44205: NOT
44206: PUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 310
44216: OR
44217: IFFALSE 44221
// exit ;
44219: GO 44312
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44221: LD_ADDR_VAR 0 4
44225: PUSH
44226: LD_VAR 0 1
44230: PPUSH
44231: CALL_OW 250
44235: PPUSH
44236: LD_VAR 0 2
44240: PPUSH
44241: LD_INT 1
44243: PPUSH
44244: CALL_OW 272
44248: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44249: LD_ADDR_VAR 0 5
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 251
44263: PPUSH
44264: LD_VAR 0 2
44268: PPUSH
44269: LD_INT 1
44271: PPUSH
44272: CALL_OW 273
44276: ST_TO_ADDR
// if ValidHex ( x , y ) then
44277: LD_VAR 0 4
44281: PPUSH
44282: LD_VAR 0 5
44286: PPUSH
44287: CALL_OW 488
44291: IFFALSE 44312
// ComTurnXY ( unit , x , y ) ;
44293: LD_VAR 0 1
44297: PPUSH
44298: LD_VAR 0 4
44302: PPUSH
44303: LD_VAR 0 5
44307: PPUSH
44308: CALL_OW 118
// end ;
44312: LD_VAR 0 3
44316: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44317: LD_INT 0
44319: PPUSH
44320: PPUSH
// result := false ;
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 0
44328: ST_TO_ADDR
// if not units then
44329: LD_VAR 0 2
44333: NOT
44334: IFFALSE 44338
// exit ;
44336: GO 44383
// for i in units do
44338: LD_ADDR_VAR 0 4
44342: PUSH
44343: LD_VAR 0 2
44347: PUSH
44348: FOR_IN
44349: IFFALSE 44381
// if See ( side , i ) then
44351: LD_VAR 0 1
44355: PPUSH
44356: LD_VAR 0 4
44360: PPUSH
44361: CALL_OW 292
44365: IFFALSE 44379
// begin result := true ;
44367: LD_ADDR_VAR 0 3
44371: PUSH
44372: LD_INT 1
44374: ST_TO_ADDR
// exit ;
44375: POP
44376: POP
44377: GO 44383
// end ;
44379: GO 44348
44381: POP
44382: POP
// end ;
44383: LD_VAR 0 3
44387: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44388: LD_INT 0
44390: PPUSH
44391: PPUSH
44392: PPUSH
44393: PPUSH
// if not unit or not points then
44394: LD_VAR 0 1
44398: NOT
44399: PUSH
44400: LD_VAR 0 2
44404: NOT
44405: OR
44406: IFFALSE 44410
// exit ;
44408: GO 44500
// dist := 99999 ;
44410: LD_ADDR_VAR 0 5
44414: PUSH
44415: LD_INT 99999
44417: ST_TO_ADDR
// for i in points do
44418: LD_ADDR_VAR 0 4
44422: PUSH
44423: LD_VAR 0 2
44427: PUSH
44428: FOR_IN
44429: IFFALSE 44498
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44431: LD_ADDR_VAR 0 6
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: LD_VAR 0 4
44445: PUSH
44446: LD_INT 1
44448: ARRAY
44449: PPUSH
44450: LD_VAR 0 4
44454: PUSH
44455: LD_INT 2
44457: ARRAY
44458: PPUSH
44459: CALL_OW 297
44463: ST_TO_ADDR
// if tmpDist < dist then
44464: LD_VAR 0 6
44468: PUSH
44469: LD_VAR 0 5
44473: LESS
44474: IFFALSE 44496
// begin result := i ;
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_VAR 0 4
44485: ST_TO_ADDR
// dist := tmpDist ;
44486: LD_ADDR_VAR 0 5
44490: PUSH
44491: LD_VAR 0 6
44495: ST_TO_ADDR
// end ; end ;
44496: GO 44428
44498: POP
44499: POP
// end ;
44500: LD_VAR 0 3
44504: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44505: LD_INT 0
44507: PPUSH
// uc_side := side ;
44508: LD_ADDR_OWVAR 20
44512: PUSH
44513: LD_VAR 0 1
44517: ST_TO_ADDR
// uc_nation := 3 ;
44518: LD_ADDR_OWVAR 21
44522: PUSH
44523: LD_INT 3
44525: ST_TO_ADDR
// vc_chassis := 25 ;
44526: LD_ADDR_OWVAR 37
44530: PUSH
44531: LD_INT 25
44533: ST_TO_ADDR
// vc_engine := engine_siberite ;
44534: LD_ADDR_OWVAR 39
44538: PUSH
44539: LD_INT 3
44541: ST_TO_ADDR
// vc_control := control_computer ;
44542: LD_ADDR_OWVAR 38
44546: PUSH
44547: LD_INT 3
44549: ST_TO_ADDR
// vc_weapon := 59 ;
44550: LD_ADDR_OWVAR 40
44554: PUSH
44555: LD_INT 59
44557: ST_TO_ADDR
// result := CreateVehicle ;
44558: LD_ADDR_VAR 0 5
44562: PUSH
44563: CALL_OW 45
44567: ST_TO_ADDR
// SetDir ( result , d ) ;
44568: LD_VAR 0 5
44572: PPUSH
44573: LD_VAR 0 4
44577: PPUSH
44578: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44582: LD_VAR 0 5
44586: PPUSH
44587: LD_VAR 0 2
44591: PPUSH
44592: LD_VAR 0 3
44596: PPUSH
44597: LD_INT 0
44599: PPUSH
44600: CALL_OW 48
// end ;
44604: LD_VAR 0 5
44608: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44609: LD_INT 0
44611: PPUSH
44612: PPUSH
44613: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44614: LD_ADDR_VAR 0 2
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44637: LD_VAR 0 1
44641: NOT
44642: PUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: CALL_OW 264
44652: PUSH
44653: LD_INT 12
44655: PUSH
44656: LD_INT 51
44658: PUSH
44659: LD_INT 32
44661: PUSH
44662: LD_INT 89
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: IN
44671: NOT
44672: OR
44673: IFFALSE 44677
// exit ;
44675: GO 44775
// for i := 1 to 3 do
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: DOUBLE
44683: LD_INT 1
44685: DEC
44686: ST_TO_ADDR
44687: LD_INT 3
44689: PUSH
44690: FOR_TO
44691: IFFALSE 44773
// begin tmp := GetCargo ( cargo , i ) ;
44693: LD_ADDR_VAR 0 4
44697: PUSH
44698: LD_VAR 0 1
44702: PPUSH
44703: LD_VAR 0 3
44707: PPUSH
44708: CALL_OW 289
44712: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44713: LD_ADDR_VAR 0 2
44717: PUSH
44718: LD_VAR 0 2
44722: PPUSH
44723: LD_VAR 0 3
44727: PPUSH
44728: LD_VAR 0 4
44732: PPUSH
44733: CALL_OW 1
44737: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44738: LD_ADDR_VAR 0 2
44742: PUSH
44743: LD_VAR 0 2
44747: PPUSH
44748: LD_INT 4
44750: PPUSH
44751: LD_VAR 0 2
44755: PUSH
44756: LD_INT 4
44758: ARRAY
44759: PUSH
44760: LD_VAR 0 4
44764: PLUS
44765: PPUSH
44766: CALL_OW 1
44770: ST_TO_ADDR
// end ;
44771: GO 44690
44773: POP
44774: POP
// end ;
44775: LD_VAR 0 2
44779: RET
// export function Length ( array ) ; begin
44780: LD_INT 0
44782: PPUSH
// result := array + 0 ;
44783: LD_ADDR_VAR 0 2
44787: PUSH
44788: LD_VAR 0 1
44792: PUSH
44793: LD_INT 0
44795: PLUS
44796: ST_TO_ADDR
// end ;
44797: LD_VAR 0 2
44801: RET
// export function PrepareArray ( array ) ; begin
44802: LD_INT 0
44804: PPUSH
// result := array diff 0 ;
44805: LD_ADDR_VAR 0 2
44809: PUSH
44810: LD_VAR 0 1
44814: PUSH
44815: LD_INT 0
44817: DIFF
44818: ST_TO_ADDR
// if not result [ 1 ] then
44819: LD_VAR 0 2
44823: PUSH
44824: LD_INT 1
44826: ARRAY
44827: NOT
44828: IFFALSE 44848
// result := Delete ( result , 1 ) ;
44830: LD_ADDR_VAR 0 2
44834: PUSH
44835: LD_VAR 0 2
44839: PPUSH
44840: LD_INT 1
44842: PPUSH
44843: CALL_OW 3
44847: ST_TO_ADDR
// end ;
44848: LD_VAR 0 2
44852: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44853: LD_INT 0
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
// sibRocketRange := 25 ;
44859: LD_ADDR_VAR 0 6
44863: PUSH
44864: LD_INT 25
44866: ST_TO_ADDR
// result := false ;
44867: LD_ADDR_VAR 0 4
44871: PUSH
44872: LD_INT 0
44874: ST_TO_ADDR
// for i := 0 to 5 do
44875: LD_ADDR_VAR 0 5
44879: PUSH
44880: DOUBLE
44881: LD_INT 0
44883: DEC
44884: ST_TO_ADDR
44885: LD_INT 5
44887: PUSH
44888: FOR_TO
44889: IFFALSE 44956
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44891: LD_VAR 0 1
44895: PPUSH
44896: LD_VAR 0 5
44900: PPUSH
44901: LD_VAR 0 6
44905: PPUSH
44906: CALL_OW 272
44910: PPUSH
44911: LD_VAR 0 2
44915: PPUSH
44916: LD_VAR 0 5
44920: PPUSH
44921: LD_VAR 0 6
44925: PPUSH
44926: CALL_OW 273
44930: PPUSH
44931: LD_VAR 0 3
44935: PPUSH
44936: CALL_OW 309
44940: IFFALSE 44954
// begin result := true ;
44942: LD_ADDR_VAR 0 4
44946: PUSH
44947: LD_INT 1
44949: ST_TO_ADDR
// exit ;
44950: POP
44951: POP
44952: GO 44958
// end ;
44954: GO 44888
44956: POP
44957: POP
// end ;
44958: LD_VAR 0 4
44962: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44963: LD_INT 0
44965: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44966: LD_VAR 0 1
44970: PPUSH
44971: LD_VAR 0 2
44975: PPUSH
44976: LD_INT 0
44978: PPUSH
44979: LD_INT 0
44981: PPUSH
44982: LD_INT 1
44984: PPUSH
44985: LD_INT 0
44987: PPUSH
44988: CALL_OW 587
// end ;
44992: LD_VAR 0 3
44996: RET
