// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1713 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnitForce ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1713 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnitForce ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1713 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnitForce ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1713 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1713 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnitForce ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1713 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnitForce ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1713 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnitForce ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1713 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnitForce ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1713 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnitForce ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1713 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnitForce ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1713 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnitForce ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1713 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnitForce ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1713 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un , p ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
 635: PPUSH
// music_nat := 2 ;
 636: LD_ADDR_OWVAR 71
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// Video ( true ) ;
 644: LD_INT 1
 646: PPUSH
 647: CALL 39757 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 51
 658: PPUSH
 659: LD_INT 23
 661: PPUSH
 662: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 666: LD_OWVAR 3
 670: PUSH
 671: LD_EXP 3
 675: DIFF
 676: PPUSH
 677: LD_INT 53
 679: PPUSH
 680: LD_INT 27
 682: PPUSH
 683: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 687: LD_INT 52
 689: PPUSH
 690: LD_INT 25
 692: PPUSH
 693: CALL_OW 86
// wait ( 0 0$2 ) ;
 697: LD_INT 70
 699: PPUSH
 700: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 704: LD_INT 35
 706: PPUSH
 707: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 711: LD_EXP 3
 715: PPUSH
 716: LD_INT 51
 718: PPUSH
 719: LD_INT 23
 721: PPUSH
 722: CALL_OW 307
 726: IFTRUE 740
 728: PUSH
 729: LD_EXP 3
 733: PPUSH
 734: CALL_OW 314
 738: NOT
 739: OR
 740: IFFALSE 704
// ComTurnXY ( Heike , 53 , 26 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 53
 749: PPUSH
 750: LD_INT 26
 752: PPUSH
 753: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 757: LD_INT 10
 759: PPUSH
 760: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 764: LD_EXP 3
 768: PPUSH
 769: LD_STRING DH-Intro-1
 771: PPUSH
 772: CALL_OW 88
// ComHold ( all_units ) ;
 776: LD_OWVAR 3
 780: PPUSH
 781: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 785: LD_OWVAR 3
 789: PUSH
 790: LD_EXP 3
 794: DIFF
 795: PPUSH
 796: LD_EXP 3
 800: PPUSH
 801: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 805: LD_EXP 17
 809: IFFALSE 823
 811: PUSH
 812: LD_STRING 08_DealWithDoug
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: AND
 823: IFFALSE 935
// begin ComTurnUnit ( Heike , Doug ) ;
 825: LD_EXP 3
 829: PPUSH
 830: LD_EXP 17
 834: PPUSH
 835: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 839: LD_EXP 17
 843: PPUSH
 844: LD_STRING DCa-Intro-a-2
 846: PPUSH
 847: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 851: LD_EXP 3
 855: PPUSH
 856: LD_STRING DH-Intro-a-3
 858: PPUSH
 859: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 863: LD_EXP 17
 867: PPUSH
 868: LD_STRING DCa-Intro-a-4
 870: PPUSH
 871: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 875: LD_EXP 3
 879: PPUSH
 880: LD_STRING DH-Intro-a-5
 882: PPUSH
 883: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 887: LD_EXP 17
 891: PPUSH
 892: LD_STRING DCa-Intro-a-6
 894: PPUSH
 895: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 899: LD_EXP 16
 903: PUSH
 904: LD_EXP 17
 908: ADD
 909: PUSH
 910: LD_EXP 15
 914: ADD
 915: PPUSH
 916: LD_INT 5
 918: PPUSH
 919: LD_INT 7
 921: PPUSH
 922: CALL_OW 111
// wait ( 0 0$01 ) ;
 926: LD_INT 35
 928: PPUSH
 929: CALL_OW 67
// end else
 933: GO 1037
// if Harris then
 935: LD_EXP 16
 939: IFFALSE 1037
// begin ComTurnUnit ( Heike , Harris ) ;
 941: LD_EXP 3
 945: PPUSH
 946: LD_EXP 16
 950: PPUSH
 951: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 955: LD_EXP 16
 959: PPUSH
 960: LD_STRING DJ-Intro-2
 962: PPUSH
 963: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 967: LD_EXP 3
 971: PPUSH
 972: LD_STRING DH-Intro-3
 974: PPUSH
 975: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 979: LD_EXP 3
 983: PPUSH
 984: LD_STRING DH-Intro-4
 986: PPUSH
 987: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 991: LD_EXP 16
 995: PPUSH
 996: LD_STRING DJ-Intro-5
 998: PPUSH
 999: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
1003: LD_EXP 16
1007: PUSH
1008: LD_EXP 17
1012: ADD
1013: PUSH
1014: LD_EXP 15
1018: ADD
1019: PPUSH
1020: LD_INT 5
1022: PPUSH
1023: LD_INT 7
1025: PPUSH
1026: CALL_OW 111
// wait ( 0 0$01 ) ;
1030: LD_INT 35
1032: PPUSH
1033: CALL_OW 67
// end ; if Givi then
1037: LD_EXP 4
1041: IFFALSE 1173
// begin ComMoveUnit ( Givi , Heike ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_EXP 3
1052: PPUSH
1053: CALL_OW 112
// p := 0 ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1065: LD_INT 35
1067: PPUSH
1068: CALL_OW 67
// p := Inc ( p ) ;
1072: LD_ADDR_VAR 0 4
1076: PUSH
1077: LD_VAR 0 4
1081: PPUSH
1082: CALL 41158 0 1
1086: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) or p > 8 ;
1087: LD_EXP 3
1091: PPUSH
1092: LD_EXP 4
1096: PPUSH
1097: CALL_OW 296
1101: PUSH
1102: LD_INT 4
1104: LESS
1105: IFTRUE 1119
1107: PUSH
1108: LD_EXP 4
1112: PPUSH
1113: CALL_OW 314
1117: NOT
1118: OR
1119: IFTRUE 1131
1121: PUSH
1122: LD_VAR 0 4
1126: PUSH
1127: LD_INT 8
1129: GREATER
1130: OR
1131: IFFALSE 1065
// ComTurnUnit ( Givi , Heike ) ;
1133: LD_EXP 4
1137: PPUSH
1138: LD_EXP 3
1142: PPUSH
1143: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1147: LD_EXP 3
1151: PPUSH
1152: LD_EXP 4
1156: PPUSH
1157: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_STRING DG-Intro-7
1168: PPUSH
1169: CALL_OW 88
// end ; if not Givi then
1173: LD_EXP 4
1177: NOT
1178: IFFALSE 1195
// ComTurnXY ( Heike , 52 , 25 ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_INT 52
1187: PPUSH
1188: LD_INT 25
1190: PPUSH
1191: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1195: LD_EXP 3
1199: PPUSH
1200: LD_STRING DH-Intro-7
1202: PPUSH
1203: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1207: LD_INT 22
1209: PUSH
1210: LD_INT 2
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PPUSH
1217: CALL_OW 69
1221: PPUSH
1222: LD_INT 48
1224: PPUSH
1225: LD_INT 4
1227: PPUSH
1228: CALL_OW 111
// wait ( 0 0$3 ) ;
1232: LD_INT 105
1234: PPUSH
1235: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1239: LD_INT 74
1241: PPUSH
1242: LD_INT 79
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: LD_INT 16
1250: NEG
1251: PPUSH
1252: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1256: LD_INT 74
1258: PPUSH
1259: LD_INT 79
1261: PPUSH
1262: CALL_OW 84
// uc_side := 3 ;
1266: LD_ADDR_OWVAR 20
1270: PUSH
1271: LD_INT 3
1273: ST_TO_ADDR
// uc_nation := nation_russian ;
1274: LD_ADDR_OWVAR 21
1278: PUSH
1279: LD_INT 3
1281: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1282: LD_INT 22
1284: PPUSH
1285: LD_INT 3
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 43
1293: PPUSH
1294: LD_INT 100
1296: PPUSH
1297: CALL 6615 0 5
// un := CreateVehicle ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: CALL_OW 45
1310: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 76
1318: PPUSH
1319: LD_INT 87
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 8
1334: PPUSH
1335: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1339: CALL_OW 44
1343: PPUSH
1344: LD_VAR 0 3
1348: PPUSH
1349: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1353: LD_VAR 0 3
1357: PPUSH
1358: LD_INT 67
1360: PPUSH
1361: LD_INT 56
1363: PPUSH
1364: CALL_OW 111
// wait ( 0 0$1 ) ;
1368: LD_INT 35
1370: PPUSH
1371: CALL_OW 67
// for i := 1 to 3 do
1375: LD_ADDR_VAR 0 2
1379: PUSH
1380: DOUBLE
1381: LD_INT 1
1383: DEC
1384: ST_TO_ADDR
1385: LD_INT 3
1387: PUSH
1388: FOR_TO
1389: IFFALSE 1449
// begin PrepareSoldier ( false , 8 ) ;
1391: LD_INT 0
1393: PPUSH
1394: LD_INT 8
1396: PPUSH
1397: CALL_OW 381
// un := CreateHuman ;
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: CALL_OW 44
1410: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1411: LD_VAR 0 3
1415: PPUSH
1416: LD_INT 76
1418: PPUSH
1419: LD_INT 87
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1432: LD_VAR 0 3
1436: PPUSH
1437: LD_INT 67
1439: PPUSH
1440: LD_INT 56
1442: PPUSH
1443: CALL_OW 111
// end ;
1447: GO 1388
1449: POP
1450: POP
// wait ( 0 0$2 ) ;
1451: LD_INT 70
1453: PPUSH
1454: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1458: LD_INT 1
1460: PPUSH
1461: LD_STRING %_cont
1463: PPUSH
1464: CALL_OW 340
// Video ( false ) ;
1468: LD_INT 0
1470: PPUSH
1471: CALL 39757 0 1
// end ;
1475: LD_VAR 0 1
1479: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1480: LD_INT 5
1482: PPUSH
1483: LD_INT 22
1485: PUSH
1486: LD_INT 4
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PPUSH
1493: CALL_OW 70
1497: IFFALSE 1545
1499: GO 1501
1501: DISABLE
1502: LD_INT 0
1504: PPUSH
// begin enable ;
1505: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: LD_INT 5
1513: PPUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 70
1528: PUSH
1529: FOR_IN
1530: IFFALSE 1543
// RemoveUnit ( i ) ;
1532: LD_VAR 0 1
1536: PPUSH
1537: CALL_OW 64
1541: GO 1529
1543: POP
1544: POP
// end ;
1545: PPOPN 1
1547: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 2
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PPUSH
1561: CALL_OW 70
1565: IFFALSE 1613
1567: GO 1569
1569: DISABLE
1570: LD_INT 0
1572: PPUSH
// begin enable ;
1573: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1574: LD_ADDR_VAR 0 1
1578: PUSH
1579: LD_INT 6
1581: PPUSH
1582: LD_INT 22
1584: PUSH
1585: LD_INT 2
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PPUSH
1592: CALL_OW 70
1596: PUSH
1597: FOR_IN
1598: IFFALSE 1611
// RemoveUnit ( i ) ;
1600: LD_VAR 0 1
1604: PPUSH
1605: CALL_OW 64
1609: GO 1597
1611: POP
1612: POP
// end ; end_of_file
1613: PPOPN 1
1615: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1616: LD_INT 1
1618: PPUSH
1619: LD_STRING %_cont
1621: PPUSH
1622: CALL_OW 340
// end ; end_of_file
1626: PPOPN 1
1628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
// if exist_mode then
1633: LD_VAR 0 2
1637: IFFALSE 1683
// begin unit := CreateCharacter ( prefix & ident ) ;
1639: LD_ADDR_VAR 0 5
1643: PUSH
1644: LD_VAR 0 3
1648: PUSH
1649: LD_VAR 0 1
1653: STR
1654: PPUSH
1655: CALL_OW 34
1659: ST_TO_ADDR
// if unit then
1660: LD_VAR 0 5
1664: IFFALSE 1681
// DeleteCharacters ( prefix & ident ) ;
1666: LD_VAR 0 3
1670: PUSH
1671: LD_VAR 0 1
1675: STR
1676: PPUSH
1677: CALL_OW 40
// end else
1681: GO 1698
// unit := NewCharacter ( ident ) ;
1683: LD_ADDR_VAR 0 5
1687: PUSH
1688: LD_VAR 0 1
1692: PPUSH
1693: CALL_OW 25
1697: ST_TO_ADDR
// result := unit ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 5
1707: ST_TO_ADDR
// end ;
1708: LD_VAR 0 4
1712: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1713: LD_INT 0
1715: PPUSH
1716: PPUSH
// if exist_mode then
1717: LD_VAR 0 2
1721: IFFALSE 1746
// unit := CreateCharacter ( prefix & ident ) else
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 3
1732: PUSH
1733: LD_VAR 0 1
1737: STR
1738: PPUSH
1739: CALL_OW 34
1743: ST_TO_ADDR
1744: GO 1761
// unit := NewCharacter ( ident ) ;
1746: LD_ADDR_VAR 0 5
1750: PUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: CALL_OW 25
1760: ST_TO_ADDR
// result := unit ;
1761: LD_ADDR_VAR 0 4
1765: PUSH
1766: LD_VAR 0 5
1770: ST_TO_ADDR
// end ;
1771: LD_VAR 0 4
1775: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// if not side or not nation then
1780: LD_VAR 0 1
1784: NOT
1785: IFTRUE 1794
1787: PUSH
1788: LD_VAR 0 2
1792: NOT
1793: OR
1794: IFFALSE 1798
// exit ;
1796: GO 2592
// case nation of nation_american :
1798: LD_VAR 0 2
1802: PUSH
1803: LD_INT 1
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 2033
1811: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1812: LD_ADDR_VAR 0 4
1816: PUSH
1817: LD_INT 35
1819: PUSH
1820: LD_INT 45
1822: PUSH
1823: LD_INT 46
1825: PUSH
1826: LD_INT 47
1828: PUSH
1829: LD_INT 82
1831: PUSH
1832: LD_INT 83
1834: PUSH
1835: LD_INT 84
1837: PUSH
1838: LD_INT 85
1840: PUSH
1841: LD_INT 86
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 6
1852: PUSH
1853: LD_INT 15
1855: PUSH
1856: LD_INT 16
1858: PUSH
1859: LD_INT 7
1861: PUSH
1862: LD_INT 12
1864: PUSH
1865: LD_INT 13
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: LD_INT 14
1873: PUSH
1874: LD_INT 20
1876: PUSH
1877: LD_INT 21
1879: PUSH
1880: LD_INT 22
1882: PUSH
1883: LD_INT 25
1885: PUSH
1886: LD_INT 32
1888: PUSH
1889: LD_INT 27
1891: PUSH
1892: LD_INT 36
1894: PUSH
1895: LD_INT 69
1897: PUSH
1898: LD_INT 39
1900: PUSH
1901: LD_INT 34
1903: PUSH
1904: LD_INT 40
1906: PUSH
1907: LD_INT 48
1909: PUSH
1910: LD_INT 49
1912: PUSH
1913: LD_INT 50
1915: PUSH
1916: LD_INT 51
1918: PUSH
1919: LD_INT 52
1921: PUSH
1922: LD_INT 53
1924: PUSH
1925: LD_INT 54
1927: PUSH
1928: LD_INT 55
1930: PUSH
1931: LD_INT 56
1933: PUSH
1934: LD_INT 57
1936: PUSH
1937: LD_INT 58
1939: PUSH
1940: LD_INT 59
1942: PUSH
1943: LD_INT 60
1945: PUSH
1946: LD_INT 61
1948: PUSH
1949: LD_INT 62
1951: PUSH
1952: LD_INT 80
1954: PUSH
1955: LD_INT 82
1957: PUSH
1958: LD_INT 83
1960: PUSH
1961: LD_INT 84
1963: PUSH
1964: LD_INT 85
1966: PUSH
1967: LD_INT 86
1969: PUSH
1970: LD_INT 90
1972: PUSH
1973: LD_INT 93
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: ST_TO_ADDR
2031: GO 2514
2033: LD_INT 2
2035: DOUBLE
2036: EQUAL
2037: IFTRUE 2041
2039: GO 2275
2041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
2042: LD_ADDR_VAR 0 4
2046: PUSH
2047: LD_INT 35
2049: PUSH
2050: LD_INT 45
2052: PUSH
2053: LD_INT 46
2055: PUSH
2056: LD_INT 47
2058: PUSH
2059: LD_INT 82
2061: PUSH
2062: LD_INT 83
2064: PUSH
2065: LD_INT 84
2067: PUSH
2068: LD_INT 85
2070: PUSH
2071: LD_INT 87
2073: PUSH
2074: LD_INT 70
2076: PUSH
2077: LD_INT 1
2079: PUSH
2080: LD_INT 11
2082: PUSH
2083: LD_INT 3
2085: PUSH
2086: LD_INT 4
2088: PUSH
2089: LD_INT 5
2091: PUSH
2092: LD_INT 6
2094: PUSH
2095: LD_INT 15
2097: PUSH
2098: LD_INT 18
2100: PUSH
2101: LD_INT 7
2103: PUSH
2104: LD_INT 17
2106: PUSH
2107: LD_INT 8
2109: PUSH
2110: LD_INT 20
2112: PUSH
2113: LD_INT 21
2115: PUSH
2116: LD_INT 22
2118: PUSH
2119: LD_INT 72
2121: PUSH
2122: LD_INT 26
2124: PUSH
2125: LD_INT 69
2127: PUSH
2128: LD_INT 39
2130: PUSH
2131: LD_INT 40
2133: PUSH
2134: LD_INT 41
2136: PUSH
2137: LD_INT 42
2139: PUSH
2140: LD_INT 43
2142: PUSH
2143: LD_INT 48
2145: PUSH
2146: LD_INT 49
2148: PUSH
2149: LD_INT 50
2151: PUSH
2152: LD_INT 51
2154: PUSH
2155: LD_INT 52
2157: PUSH
2158: LD_INT 53
2160: PUSH
2161: LD_INT 54
2163: PUSH
2164: LD_INT 55
2166: PUSH
2167: LD_INT 56
2169: PUSH
2170: LD_INT 60
2172: PUSH
2173: LD_INT 61
2175: PUSH
2176: LD_INT 62
2178: PUSH
2179: LD_INT 66
2181: PUSH
2182: LD_INT 67
2184: PUSH
2185: LD_INT 68
2187: PUSH
2188: LD_INT 81
2190: PUSH
2191: LD_INT 82
2193: PUSH
2194: LD_INT 83
2196: PUSH
2197: LD_INT 84
2199: PUSH
2200: LD_INT 85
2202: PUSH
2203: LD_INT 87
2205: PUSH
2206: LD_INT 88
2208: PUSH
2209: LD_INT 92
2211: PUSH
2212: LD_INT 94
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: ST_TO_ADDR
2273: GO 2514
2275: LD_INT 3
2277: DOUBLE
2278: EQUAL
2279: IFTRUE 2283
2281: GO 2513
2283: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2284: LD_ADDR_VAR 0 4
2288: PUSH
2289: LD_INT 46
2291: PUSH
2292: LD_INT 47
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: LD_INT 2
2300: PUSH
2301: LD_INT 82
2303: PUSH
2304: LD_INT 83
2306: PUSH
2307: LD_INT 84
2309: PUSH
2310: LD_INT 85
2312: PUSH
2313: LD_INT 86
2315: PUSH
2316: LD_INT 11
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_INT 20
2324: PUSH
2325: LD_INT 19
2327: PUSH
2328: LD_INT 21
2330: PUSH
2331: LD_INT 24
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_INT 25
2339: PUSH
2340: LD_INT 28
2342: PUSH
2343: LD_INT 29
2345: PUSH
2346: LD_INT 30
2348: PUSH
2349: LD_INT 31
2351: PUSH
2352: LD_INT 37
2354: PUSH
2355: LD_INT 38
2357: PUSH
2358: LD_INT 32
2360: PUSH
2361: LD_INT 27
2363: PUSH
2364: LD_INT 33
2366: PUSH
2367: LD_INT 69
2369: PUSH
2370: LD_INT 39
2372: PUSH
2373: LD_INT 34
2375: PUSH
2376: LD_INT 40
2378: PUSH
2379: LD_INT 71
2381: PUSH
2382: LD_INT 23
2384: PUSH
2385: LD_INT 44
2387: PUSH
2388: LD_INT 48
2390: PUSH
2391: LD_INT 49
2393: PUSH
2394: LD_INT 50
2396: PUSH
2397: LD_INT 51
2399: PUSH
2400: LD_INT 52
2402: PUSH
2403: LD_INT 53
2405: PUSH
2406: LD_INT 54
2408: PUSH
2409: LD_INT 55
2411: PUSH
2412: LD_INT 56
2414: PUSH
2415: LD_INT 57
2417: PUSH
2418: LD_INT 58
2420: PUSH
2421: LD_INT 59
2423: PUSH
2424: LD_INT 63
2426: PUSH
2427: LD_INT 64
2429: PUSH
2430: LD_INT 65
2432: PUSH
2433: LD_INT 82
2435: PUSH
2436: LD_INT 83
2438: PUSH
2439: LD_INT 84
2441: PUSH
2442: LD_INT 85
2444: PUSH
2445: LD_INT 86
2447: PUSH
2448: LD_INT 89
2450: PUSH
2451: LD_INT 91
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: ST_TO_ADDR
2511: GO 2514
2513: POP
// if state > - 1 and state < 3 then
2514: LD_VAR 0 3
2518: PUSH
2519: LD_INT 1
2521: NEG
2522: GREATER
2523: IFFALSE 2535
2525: PUSH
2526: LD_VAR 0 3
2530: PUSH
2531: LD_INT 3
2533: LESS
2534: AND
2535: IFFALSE 2592
// for i in result do
2537: LD_ADDR_VAR 0 5
2541: PUSH
2542: LD_VAR 0 4
2546: PUSH
2547: FOR_IN
2548: IFFALSE 2590
// if GetTech ( i , side ) <> state then
2550: LD_VAR 0 5
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 321
2564: PUSH
2565: LD_VAR 0 3
2569: NONEQUAL
2570: IFFALSE 2588
// result := result diff i ;
2572: LD_ADDR_VAR 0 4
2576: PUSH
2577: LD_VAR 0 4
2581: PUSH
2582: LD_VAR 0 5
2586: DIFF
2587: ST_TO_ADDR
2588: GO 2547
2590: POP
2591: POP
// end ;
2592: LD_VAR 0 4
2596: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2597: LD_INT 0
2599: PPUSH
2600: PPUSH
2601: PPUSH
// result := true ;
2602: LD_ADDR_VAR 0 3
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2610: LD_ADDR_VAR 0 5
2614: PUSH
2615: LD_VAR 0 2
2619: PPUSH
2620: CALL_OW 480
2624: ST_TO_ADDR
// if not tmp then
2625: LD_VAR 0 5
2629: NOT
2630: IFFALSE 2634
// exit ;
2632: GO 2683
// for i in tmp do
2634: LD_ADDR_VAR 0 4
2638: PUSH
2639: LD_VAR 0 5
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2681
// if GetTech ( i , side ) <> state_researched then
2647: LD_VAR 0 4
2651: PPUSH
2652: LD_VAR 0 1
2656: PPUSH
2657: CALL_OW 321
2661: PUSH
2662: LD_INT 2
2664: NONEQUAL
2665: IFFALSE 2679
// begin result := false ;
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// exit ;
2675: POP
2676: POP
2677: GO 2683
// end ;
2679: GO 2644
2681: POP
2682: POP
// end ;
2683: LD_VAR 0 3
2687: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2688: LD_INT 0
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2703: LD_VAR 0 1
2707: NOT
2708: IFTRUE 2725
2710: PUSH
2711: LD_VAR 0 1
2715: PPUSH
2716: CALL_OW 257
2720: PUSH
2721: LD_INT 9
2723: NONEQUAL
2724: OR
2725: IFFALSE 2729
// exit ;
2727: GO 3308
// side := GetSide ( unit ) ;
2729: LD_ADDR_VAR 0 9
2733: PUSH
2734: LD_VAR 0 1
2738: PPUSH
2739: CALL_OW 255
2743: ST_TO_ADDR
// tech_space := tech_spacanom ;
2744: LD_ADDR_VAR 0 12
2748: PUSH
2749: LD_INT 29
2751: ST_TO_ADDR
// tech_time := tech_taurad ;
2752: LD_ADDR_VAR 0 13
2756: PUSH
2757: LD_INT 28
2759: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2760: LD_ADDR_VAR 0 11
2764: PUSH
2765: LD_VAR 0 1
2769: PPUSH
2770: CALL_OW 310
2774: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2775: LD_VAR 0 11
2779: PPUSH
2780: CALL_OW 247
2784: PUSH
2785: LD_INT 2
2787: EQUAL
2788: IFFALSE 2792
// exit ;
2790: GO 3308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2792: LD_ADDR_VAR 0 8
2796: PUSH
2797: LD_INT 81
2799: PUSH
2800: LD_VAR 0 9
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 3
2811: PUSH
2812: LD_INT 21
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: ST_TO_ADDR
// if not tmp then
2835: LD_VAR 0 8
2839: NOT
2840: IFFALSE 2844
// exit ;
2842: GO 3308
// if in_unit then
2844: LD_VAR 0 11
2848: IFFALSE 2872
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2850: LD_ADDR_VAR 0 10
2854: PUSH
2855: LD_VAR 0 8
2859: PPUSH
2860: LD_VAR 0 11
2864: PPUSH
2865: CALL_OW 74
2869: ST_TO_ADDR
2870: GO 2892
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2872: LD_ADDR_VAR 0 10
2876: PUSH
2877: LD_VAR 0 8
2881: PPUSH
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL_OW 74
2891: ST_TO_ADDR
// if not enemy then
2892: LD_VAR 0 10
2896: NOT
2897: IFFALSE 2901
// exit ;
2899: GO 3308
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2901: LD_VAR 0 11
2905: IFFALSE 2927
2907: PUSH
2908: LD_VAR 0 11
2912: PPUSH
2913: LD_VAR 0 10
2917: PPUSH
2918: CALL_OW 296
2922: PUSH
2923: LD_INT 13
2925: GREATER
2926: AND
2927: IFTRUE 2949
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: LD_VAR 0 10
2939: PPUSH
2940: CALL_OW 296
2944: PUSH
2945: LD_INT 12
2947: GREATER
2948: OR
2949: IFFALSE 2953
// exit ;
2951: GO 3308
// missile := [ 1 ] ;
2953: LD_ADDR_VAR 0 14
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: EMPTY
2962: LIST
2963: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2964: LD_VAR 0 9
2968: PPUSH
2969: LD_VAR 0 12
2973: PPUSH
2974: CALL_OW 325
2978: IFFALSE 3007
// missile := Replace ( missile , missile + 1 , 2 ) ;
2980: LD_ADDR_VAR 0 14
2984: PUSH
2985: LD_VAR 0 14
2989: PPUSH
2990: LD_VAR 0 14
2994: PUSH
2995: LD_INT 1
2997: PLUS
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 1
3006: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3007: LD_VAR 0 9
3011: PPUSH
3012: LD_VAR 0 13
3016: PPUSH
3017: CALL_OW 325
3021: IFFALSE 3045
3023: PUSH
3024: LD_VAR 0 10
3028: PPUSH
3029: CALL_OW 255
3033: PPUSH
3034: LD_VAR 0 13
3038: PPUSH
3039: CALL_OW 325
3043: NOT
3044: AND
3045: IFFALSE 3074
// missile := Replace ( missile , missile + 1 , 3 ) ;
3047: LD_ADDR_VAR 0 14
3051: PUSH
3052: LD_VAR 0 14
3056: PPUSH
3057: LD_VAR 0 14
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: CALL_OW 1
3073: ST_TO_ADDR
// if missile < 2 then
3074: LD_VAR 0 14
3078: PUSH
3079: LD_INT 2
3081: LESS
3082: IFFALSE 3086
// exit ;
3084: GO 3308
// x := GetX ( enemy ) ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: LD_VAR 0 10
3095: PPUSH
3096: CALL_OW 250
3100: ST_TO_ADDR
// y := GetY ( enemy ) ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_VAR 0 10
3110: PPUSH
3111: CALL_OW 251
3115: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3116: LD_ADDR_VAR 0 6
3120: PUSH
3121: LD_VAR 0 4
3125: PUSH
3126: LD_INT 1
3128: NEG
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 12
3137: PLUS
3138: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3139: LD_ADDR_VAR 0 7
3143: PUSH
3144: LD_VAR 0 5
3148: PUSH
3149: LD_INT 1
3151: NEG
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: CALL_OW 12
3160: PLUS
3161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3162: LD_VAR 0 6
3166: PPUSH
3167: LD_VAR 0 7
3171: PPUSH
3172: CALL_OW 488
3176: NOT
3177: IFFALSE 3199
// begin _x := x ;
3179: LD_ADDR_VAR 0 6
3183: PUSH
3184: LD_VAR 0 4
3188: ST_TO_ADDR
// _y := y ;
3189: LD_ADDR_VAR 0 7
3193: PUSH
3194: LD_VAR 0 5
3198: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3199: LD_ADDR_VAR 0 3
3203: PUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_VAR 0 14
3211: PPUSH
3212: CALL_OW 12
3216: ST_TO_ADDR
// case i of 1 :
3217: LD_VAR 0 3
3221: PUSH
3222: LD_INT 1
3224: DOUBLE
3225: EQUAL
3226: IFTRUE 3230
3228: GO 3247
3230: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3231: LD_VAR 0 1
3235: PPUSH
3236: LD_VAR 0 10
3240: PPUSH
3241: CALL_OW 115
3245: GO 3308
3247: LD_INT 2
3249: DOUBLE
3250: EQUAL
3251: IFTRUE 3255
3253: GO 3277
3255: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3256: LD_VAR 0 1
3260: PPUSH
3261: LD_VAR 0 6
3265: PPUSH
3266: LD_VAR 0 7
3270: PPUSH
3271: CALL_OW 153
3275: GO 3308
3277: LD_INT 3
3279: DOUBLE
3280: EQUAL
3281: IFTRUE 3285
3283: GO 3307
3285: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 6
3295: PPUSH
3296: LD_VAR 0 7
3300: PPUSH
3301: CALL_OW 154
3305: GO 3308
3307: POP
// end ;
3308: LD_VAR 0 2
3312: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3313: LD_INT 0
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// if not unit or not building then
3321: LD_VAR 0 1
3325: NOT
3326: IFTRUE 3335
3328: PUSH
3329: LD_VAR 0 2
3333: NOT
3334: OR
3335: IFFALSE 3339
// exit ;
3337: GO 3497
// x := GetX ( building ) ;
3339: LD_ADDR_VAR 0 5
3343: PUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: CALL_OW 250
3353: ST_TO_ADDR
// y := GetY ( building ) ;
3354: LD_ADDR_VAR 0 6
3358: PUSH
3359: LD_VAR 0 2
3363: PPUSH
3364: CALL_OW 251
3368: ST_TO_ADDR
// for i := 0 to 5 do
3369: LD_ADDR_VAR 0 4
3373: PUSH
3374: DOUBLE
3375: LD_INT 0
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 5
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3495
// begin _x := ShiftX ( x , i , 3 ) ;
3385: LD_ADDR_VAR 0 7
3389: PUSH
3390: LD_VAR 0 5
3394: PPUSH
3395: LD_VAR 0 4
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: CALL_OW 272
3407: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3408: LD_ADDR_VAR 0 8
3412: PUSH
3413: LD_VAR 0 6
3417: PPUSH
3418: LD_VAR 0 4
3422: PPUSH
3423: LD_INT 3
3425: PPUSH
3426: CALL_OW 273
3430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3431: LD_VAR 0 7
3435: PPUSH
3436: LD_VAR 0 8
3440: PPUSH
3441: CALL_OW 488
3445: NOT
3446: IFFALSE 3450
// continue ;
3448: GO 3382
// if HexInfo ( _x , _y ) = 0 then
3450: LD_VAR 0 7
3454: PPUSH
3455: LD_VAR 0 8
3459: PPUSH
3460: CALL_OW 428
3464: PUSH
3465: LD_INT 0
3467: EQUAL
3468: IFFALSE 3493
// begin ComMoveXY ( unit , _x , _y ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: LD_VAR 0 7
3479: PPUSH
3480: LD_VAR 0 8
3484: PPUSH
3485: CALL_OW 111
// exit ;
3489: POP
3490: POP
3491: GO 3497
// end ; end ;
3493: GO 3382
3495: POP
3496: POP
// end ;
3497: LD_VAR 0 3
3501: RET
// export function ScanBase ( side , base_area ) ; begin
3502: LD_INT 0
3504: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 2
3514: PPUSH
3515: LD_INT 81
3517: PUSH
3518: LD_VAR 0 1
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 70
3531: ST_TO_ADDR
// end ;
3532: LD_VAR 0 3
3536: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3537: LD_INT 0
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
// result := false ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// side := GetSide ( unit ) ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 255
3565: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: CALL_OW 248
3580: ST_TO_ADDR
// case nat of 1 :
3581: LD_VAR 0 4
3585: PUSH
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3605
3594: POP
// tech := tech_lassight ; 2 :
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_INT 12
3602: ST_TO_ADDR
3603: GO 3644
3605: LD_INT 2
3607: DOUBLE
3608: EQUAL
3609: IFTRUE 3613
3611: GO 3624
3613: POP
// tech := tech_mortar ; 3 :
3614: LD_ADDR_VAR 0 5
3618: PUSH
3619: LD_INT 41
3621: ST_TO_ADDR
3622: GO 3644
3624: LD_INT 3
3626: DOUBLE
3627: EQUAL
3628: IFTRUE 3632
3630: GO 3643
3632: POP
// tech := tech_bazooka ; end ;
3633: LD_ADDR_VAR 0 5
3637: PUSH
3638: LD_INT 44
3640: ST_TO_ADDR
3641: GO 3644
3643: POP
// if Researched ( side , tech ) then
3644: LD_VAR 0 3
3648: PPUSH
3649: LD_VAR 0 5
3653: PPUSH
3654: CALL_OW 325
3658: IFFALSE 3685
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: LD_INT 5
3667: PUSH
3668: LD_INT 8
3670: PUSH
3671: LD_INT 9
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_VAR 0 4
3683: ARRAY
3684: ST_TO_ADDR
// end ;
3685: LD_VAR 0 2
3689: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3690: LD_INT 0
3692: PPUSH
3693: PPUSH
3694: PPUSH
// if not mines then
3695: LD_VAR 0 2
3699: NOT
3700: IFFALSE 3704
// exit ;
3702: GO 3848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3704: LD_ADDR_VAR 0 5
3708: PUSH
3709: LD_INT 81
3711: PUSH
3712: LD_VAR 0 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 3
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PPUSH
3742: CALL_OW 69
3746: ST_TO_ADDR
// for i in mines do
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_VAR 0 2
3756: PUSH
3757: FOR_IN
3758: IFFALSE 3846
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3760: LD_VAR 0 4
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PPUSH
3769: LD_VAR 0 4
3773: PUSH
3774: LD_INT 2
3776: ARRAY
3777: PPUSH
3778: CALL_OW 458
3782: NOT
3783: IFFALSE 3787
// continue ;
3785: GO 3757
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3787: LD_VAR 0 4
3791: PUSH
3792: LD_INT 1
3794: ARRAY
3795: PPUSH
3796: LD_VAR 0 4
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: CALL_OW 428
3809: PUSH
3810: LD_VAR 0 5
3814: IN
3815: IFFALSE 3844
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3817: LD_VAR 0 4
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 456
// end ;
3844: GO 3757
3846: POP
3847: POP
// end ;
3848: LD_VAR 0 3
3852: RET
// export function Count ( array ) ; begin
3853: LD_INT 0
3855: PPUSH
// result := array + 0 ;
3856: LD_ADDR_VAR 0 2
3860: PUSH
3861: LD_VAR 0 1
3865: PUSH
3866: LD_INT 0
3868: PLUS
3869: ST_TO_ADDR
// end ;
3870: LD_VAR 0 2
3874: RET
// export function IsEmpty ( building ) ; begin
3875: LD_INT 0
3877: PPUSH
// if not building then
3878: LD_VAR 0 1
3882: NOT
3883: IFFALSE 3887
// exit ;
3885: GO 3930
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3887: LD_ADDR_VAR 0 2
3891: PUSH
3892: LD_VAR 0 1
3896: PUSH
3897: LD_INT 22
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 255
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 58
3916: PUSH
3917: EMPTY
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: IN
3929: ST_TO_ADDR
// end ;
3930: LD_VAR 0 2
3934: RET
// export function IsNotFull ( building ) ; var places ; begin
3935: LD_INT 0
3937: PPUSH
3938: PPUSH
// if not building then
3939: LD_VAR 0 1
3943: NOT
3944: IFFALSE 3948
// exit ;
3946: GO 3976
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 62
3963: PUSH
3964: EMPTY
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PPUSH
3971: CALL_OW 72
3975: ST_TO_ADDR
// end ;
3976: LD_VAR 0 2
3980: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3981: LD_INT 0
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
// tmp := [ ] ;
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: EMPTY
3993: ST_TO_ADDR
// list := [ ] ;
3994: LD_ADDR_VAR 0 5
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i = 16 to 25 do
4001: LD_ADDR_VAR 0 4
4005: PUSH
4006: DOUBLE
4007: LD_INT 16
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 25
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4088
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: LD_VAR 0 3
4026: PUSH
4027: LD_INT 22
4029: PUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 255
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 91
4046: PUSH
4047: LD_VAR 0 1
4051: PUSH
4052: LD_INT 6
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 30
4062: PUSH
4063: LD_VAR 0 4
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: EMPTY
4078: LIST
4079: PPUSH
4080: CALL_OW 69
4084: ADD
4085: ST_TO_ADDR
4086: GO 4014
4088: POP
4089: POP
// for i = 1 to tmp do
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: DOUBLE
4096: LD_INT 1
4098: DEC
4099: ST_TO_ADDR
4100: LD_VAR 0 3
4104: PUSH
4105: FOR_TO
4106: IFFALSE 4194
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4108: LD_ADDR_VAR 0 5
4112: PUSH
4113: LD_VAR 0 5
4117: PUSH
4118: LD_VAR 0 3
4122: PUSH
4123: LD_VAR 0 4
4127: ARRAY
4128: PPUSH
4129: CALL_OW 266
4133: PUSH
4134: LD_VAR 0 3
4138: PUSH
4139: LD_VAR 0 4
4143: ARRAY
4144: PPUSH
4145: CALL_OW 250
4149: PUSH
4150: LD_VAR 0 3
4154: PUSH
4155: LD_VAR 0 4
4159: ARRAY
4160: PPUSH
4161: CALL_OW 251
4165: PUSH
4166: LD_VAR 0 3
4170: PUSH
4171: LD_VAR 0 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 254
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: ADD
4191: ST_TO_ADDR
4192: GO 4105
4194: POP
4195: POP
// result := list ;
4196: LD_ADDR_VAR 0 2
4200: PUSH
4201: LD_VAR 0 5
4205: ST_TO_ADDR
// end ;
4206: LD_VAR 0 2
4210: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4211: LD_INT 0
4213: PPUSH
4214: PPUSH
4215: PPUSH
4216: PPUSH
4217: PPUSH
4218: PPUSH
4219: PPUSH
// if not factory then
4220: LD_VAR 0 1
4224: NOT
4225: IFFALSE 4229
// exit ;
4227: GO 4832
// if control = control_apeman then
4229: LD_VAR 0 4
4233: PUSH
4234: LD_INT 5
4236: EQUAL
4237: IFFALSE 4346
// begin tmp := UnitsInside ( factory ) ;
4239: LD_ADDR_VAR 0 8
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 313
4253: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4254: LD_VAR 0 8
4258: PPUSH
4259: LD_INT 25
4261: PUSH
4262: LD_INT 12
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PPUSH
4269: CALL_OW 72
4273: NOT
4274: IFFALSE 4284
// control := control_manual ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 1
4283: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4284: LD_ADDR_VAR 0 8
4288: PUSH
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL 3981 0 1
4298: ST_TO_ADDR
// if tmp then
4299: LD_VAR 0 8
4303: IFFALSE 4346
// begin for i in tmp do
4305: LD_ADDR_VAR 0 7
4309: PUSH
4310: LD_VAR 0 8
4314: PUSH
4315: FOR_IN
4316: IFFALSE 4344
// if i [ 1 ] = b_ext_radio then
4318: LD_VAR 0 7
4322: PUSH
4323: LD_INT 1
4325: ARRAY
4326: PUSH
4327: LD_INT 22
4329: EQUAL
4330: IFFALSE 4342
// begin control := control_remote ;
4332: LD_ADDR_VAR 0 4
4336: PUSH
4337: LD_INT 2
4339: ST_TO_ADDR
// break ;
4340: GO 4344
// end ;
4342: GO 4315
4344: POP
4345: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4346: LD_VAR 0 1
4350: PPUSH
4351: LD_VAR 0 2
4355: PPUSH
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_VAR 0 4
4365: PPUSH
4366: LD_VAR 0 5
4370: PPUSH
4371: CALL_OW 448
4375: IFFALSE 4410
// begin result := [ chassis , engine , control , weapon ] ;
4377: LD_ADDR_VAR 0 6
4381: PUSH
4382: LD_VAR 0 2
4386: PUSH
4387: LD_VAR 0 3
4391: PUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_VAR 0 5
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// exit ;
4408: GO 4832
// end ; _chassis := AvailableChassisList ( factory ) ;
4410: LD_ADDR_VAR 0 9
4414: PUSH
4415: LD_VAR 0 1
4419: PPUSH
4420: CALL_OW 475
4424: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4425: LD_ADDR_VAR 0 11
4429: PUSH
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 476
4439: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4440: LD_ADDR_VAR 0 12
4444: PUSH
4445: LD_VAR 0 1
4449: PPUSH
4450: CALL_OW 477
4454: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4455: LD_ADDR_VAR 0 10
4459: PUSH
4460: LD_VAR 0 1
4464: PPUSH
4465: CALL_OW 478
4469: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4470: LD_VAR 0 9
4474: NOT
4475: IFTRUE 4484
4477: PUSH
4478: LD_VAR 0 11
4482: NOT
4483: OR
4484: IFTRUE 4493
4486: PUSH
4487: LD_VAR 0 12
4491: NOT
4492: OR
4493: IFTRUE 4502
4495: PUSH
4496: LD_VAR 0 10
4500: NOT
4501: OR
4502: IFFALSE 4537
// begin result := [ chassis , engine , control , weapon ] ;
4504: LD_ADDR_VAR 0 6
4508: PUSH
4509: LD_VAR 0 2
4513: PUSH
4514: LD_VAR 0 3
4518: PUSH
4519: LD_VAR 0 4
4523: PUSH
4524: LD_VAR 0 5
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: ST_TO_ADDR
// exit ;
4535: GO 4832
// end ; if not chassis in _chassis then
4537: LD_VAR 0 2
4541: PUSH
4542: LD_VAR 0 9
4546: IN
4547: NOT
4548: IFFALSE 4574
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_VAR 0 9
4559: PUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 12
4572: ARRAY
4573: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_VAR 0 3
4583: PPUSH
4584: CALL 4837 0 2
4588: NOT
4589: IFFALSE 4650
// repeat engine := _engine [ 1 ] ;
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: LD_VAR 0 11
4600: PUSH
4601: LD_INT 1
4603: ARRAY
4604: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4605: LD_ADDR_VAR 0 11
4609: PUSH
4610: LD_VAR 0 11
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: CALL_OW 3
4622: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4623: LD_VAR 0 2
4627: PPUSH
4628: LD_VAR 0 3
4632: PPUSH
4633: CALL 4837 0 2
4637: IFTRUE 4648
4639: PUSH
4640: LD_VAR 0 11
4644: PUSH
4645: EMPTY
4646: EQUAL
4647: OR
4648: IFFALSE 4591
// if not control in _control then
4650: LD_VAR 0 4
4654: PUSH
4655: LD_VAR 0 12
4659: IN
4660: NOT
4661: IFFALSE 4687
// control := _control [ rand ( 1 , _control ) ] ;
4663: LD_ADDR_VAR 0 4
4667: PUSH
4668: LD_VAR 0 12
4672: PUSH
4673: LD_INT 1
4675: PPUSH
4676: LD_VAR 0 12
4680: PPUSH
4681: CALL_OW 12
4685: ARRAY
4686: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4687: LD_VAR 0 2
4691: PPUSH
4692: LD_VAR 0 5
4696: PPUSH
4697: CALL 5059 0 2
4701: NOT
4702: IFFALSE 4763
// repeat weapon := _weapon [ 1 ] ;
4704: LD_ADDR_VAR 0 5
4708: PUSH
4709: LD_VAR 0 10
4713: PUSH
4714: LD_INT 1
4716: ARRAY
4717: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4718: LD_ADDR_VAR 0 10
4722: PUSH
4723: LD_VAR 0 10
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 3
4735: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_VAR 0 5
4745: PPUSH
4746: CALL 5059 0 2
4750: IFTRUE 4761
4752: PUSH
4753: LD_VAR 0 10
4757: PUSH
4758: EMPTY
4759: EQUAL
4760: OR
4761: IFFALSE 4704
// result := [ ] ;
4763: LD_ADDR_VAR 0 6
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4770: LD_VAR 0 1
4774: PPUSH
4775: LD_VAR 0 2
4779: PPUSH
4780: LD_VAR 0 3
4784: PPUSH
4785: LD_VAR 0 4
4789: PPUSH
4790: LD_VAR 0 5
4794: PPUSH
4795: CALL_OW 448
4799: IFFALSE 4832
// result := [ chassis , engine , control , weapon ] ;
4801: LD_ADDR_VAR 0 6
4805: PUSH
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 3
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_VAR 0 5
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: ST_TO_ADDR
// end ;
4832: LD_VAR 0 6
4836: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4837: LD_INT 0
4839: PPUSH
// if not chassis or not engine then
4840: LD_VAR 0 1
4844: NOT
4845: IFTRUE 4854
4847: PUSH
4848: LD_VAR 0 2
4852: NOT
4853: OR
4854: IFFALSE 4858
// exit ;
4856: GO 5054
// case engine of engine_solar :
4858: LD_VAR 0 2
4862: PUSH
4863: LD_INT 2
4865: DOUBLE
4866: EQUAL
4867: IFTRUE 4871
4869: GO 4909
4871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 11
4879: PUSH
4880: LD_INT 12
4882: PUSH
4883: LD_INT 13
4885: PUSH
4886: LD_INT 14
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
4907: GO 5038
4909: LD_INT 1
4911: DOUBLE
4912: EQUAL
4913: IFTRUE 4917
4915: GO 4979
4917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4918: LD_ADDR_VAR 0 3
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: LD_INT 12
4928: PUSH
4929: LD_INT 13
4931: PUSH
4932: LD_INT 14
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: LD_INT 2
4940: PUSH
4941: LD_INT 3
4943: PUSH
4944: LD_INT 4
4946: PUSH
4947: LD_INT 5
4949: PUSH
4950: LD_INT 21
4952: PUSH
4953: LD_INT 23
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 24
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5038
4979: LD_INT 3
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5037
4987: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 13
4995: PUSH
4996: LD_INT 14
4998: PUSH
4999: LD_INT 2
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: LD_INT 4
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: LD_INT 21
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 23
5019: PUSH
5020: LD_INT 24
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: ST_TO_ADDR
5035: GO 5038
5037: POP
// result := ( chassis in result ) ;
5038: LD_ADDR_VAR 0 3
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: LD_VAR 0 3
5052: IN
5053: ST_TO_ADDR
// end ;
5054: LD_VAR 0 3
5058: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5059: LD_INT 0
5061: PPUSH
// if not chassis or not weapon then
5062: LD_VAR 0 1
5066: NOT
5067: IFTRUE 5076
5069: PUSH
5070: LD_VAR 0 2
5074: NOT
5075: OR
5076: IFFALSE 5080
// exit ;
5078: GO 6140
// case weapon of us_machine_gun :
5080: LD_VAR 0 2
5084: PUSH
5085: LD_INT 2
5087: DOUBLE
5088: EQUAL
5089: IFTRUE 5093
5091: GO 5123
5093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_INT 1
5101: PUSH
5102: LD_INT 2
5104: PUSH
5105: LD_INT 3
5107: PUSH
5108: LD_INT 4
5110: PUSH
5111: LD_INT 5
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 6124
5123: LD_INT 3
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5161
5131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 1
5139: PUSH
5140: LD_INT 2
5142: PUSH
5143: LD_INT 3
5145: PUSH
5146: LD_INT 4
5148: PUSH
5149: LD_INT 5
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: ST_TO_ADDR
5159: GO 6124
5161: LD_INT 11
5163: DOUBLE
5164: EQUAL
5165: IFTRUE 5169
5167: GO 5199
5169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5170: LD_ADDR_VAR 0 3
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: LD_INT 2
5180: PUSH
5181: LD_INT 3
5183: PUSH
5184: LD_INT 4
5186: PUSH
5187: LD_INT 5
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
5197: GO 6124
5199: LD_INT 4
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5233
5207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 2
5215: PUSH
5216: LD_INT 3
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: LD_INT 5
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: ST_TO_ADDR
5231: GO 6124
5233: LD_INT 5
5235: DOUBLE
5236: EQUAL
5237: IFTRUE 5241
5239: GO 5267
5241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5242: LD_ADDR_VAR 0 3
5246: PUSH
5247: LD_INT 2
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 4
5255: PUSH
5256: LD_INT 5
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: ST_TO_ADDR
5265: GO 6124
5267: LD_INT 9
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5301
5275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: LD_INT 2
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 4
5289: PUSH
5290: LD_INT 5
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: ST_TO_ADDR
5299: GO 6124
5301: LD_INT 7
5303: DOUBLE
5304: EQUAL
5305: IFTRUE 5309
5307: GO 5335
5309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5310: LD_ADDR_VAR 0 3
5314: PUSH
5315: LD_INT 2
5317: PUSH
5318: LD_INT 3
5320: PUSH
5321: LD_INT 4
5323: PUSH
5324: LD_INT 5
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: ST_TO_ADDR
5333: GO 6124
5335: LD_INT 12
5337: DOUBLE
5338: EQUAL
5339: IFTRUE 5343
5341: GO 5369
5343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_INT 2
5351: PUSH
5352: LD_INT 3
5354: PUSH
5355: LD_INT 4
5357: PUSH
5358: LD_INT 5
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: ST_TO_ADDR
5367: GO 6124
5369: LD_INT 13
5371: DOUBLE
5372: EQUAL
5373: IFTRUE 5377
5375: GO 5403
5377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 3
5388: PUSH
5389: LD_INT 4
5391: PUSH
5392: LD_INT 5
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: ST_TO_ADDR
5401: GO 6124
5403: LD_INT 14
5405: DOUBLE
5406: EQUAL
5407: IFTRUE 5411
5409: GO 5429
5411: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5412: LD_ADDR_VAR 0 3
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: LD_INT 5
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: ST_TO_ADDR
5427: GO 6124
5429: LD_INT 6
5431: DOUBLE
5432: EQUAL
5433: IFTRUE 5437
5435: GO 5455
5437: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5438: LD_ADDR_VAR 0 3
5442: PUSH
5443: LD_INT 4
5445: PUSH
5446: LD_INT 5
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: ST_TO_ADDR
5453: GO 6124
5455: LD_INT 10
5457: DOUBLE
5458: EQUAL
5459: IFTRUE 5463
5461: GO 5481
5463: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5464: LD_ADDR_VAR 0 3
5468: PUSH
5469: LD_INT 4
5471: PUSH
5472: LD_INT 5
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: ST_TO_ADDR
5479: GO 6124
5481: LD_INT 22
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5515
5489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5490: LD_ADDR_VAR 0 3
5494: PUSH
5495: LD_INT 11
5497: PUSH
5498: LD_INT 12
5500: PUSH
5501: LD_INT 13
5503: PUSH
5504: LD_INT 14
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: ST_TO_ADDR
5513: GO 6124
5515: LD_INT 23
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5549
5523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_INT 11
5531: PUSH
5532: LD_INT 12
5534: PUSH
5535: LD_INT 13
5537: PUSH
5538: LD_INT 14
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: ST_TO_ADDR
5547: GO 6124
5549: LD_INT 24
5551: DOUBLE
5552: EQUAL
5553: IFTRUE 5557
5555: GO 5583
5557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5558: LD_ADDR_VAR 0 3
5562: PUSH
5563: LD_INT 11
5565: PUSH
5566: LD_INT 12
5568: PUSH
5569: LD_INT 13
5571: PUSH
5572: LD_INT 14
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
5581: GO 6124
5583: LD_INT 30
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5617
5591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: LD_INT 11
5599: PUSH
5600: LD_INT 12
5602: PUSH
5603: LD_INT 13
5605: PUSH
5606: LD_INT 14
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
5615: GO 6124
5617: LD_INT 25
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5625
5623: GO 5643
5625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5626: LD_ADDR_VAR 0 3
5630: PUSH
5631: LD_INT 13
5633: PUSH
5634: LD_INT 14
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: ST_TO_ADDR
5641: GO 6124
5643: LD_INT 27
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5651
5649: GO 5669
5651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5652: LD_ADDR_VAR 0 3
5656: PUSH
5657: LD_INT 13
5659: PUSH
5660: LD_INT 14
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: ST_TO_ADDR
5667: GO 6124
5669: LD_INT 92
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5703
5677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: LD_INT 11
5685: PUSH
5686: LD_INT 12
5688: PUSH
5689: LD_INT 13
5691: PUSH
5692: LD_INT 14
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: ST_TO_ADDR
5701: GO 6124
5703: LD_INT 28
5705: DOUBLE
5706: EQUAL
5707: IFTRUE 5711
5709: GO 5729
5711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 13
5719: PUSH
5720: LD_INT 14
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: ST_TO_ADDR
5727: GO 6124
5729: LD_INT 29
5731: DOUBLE
5732: EQUAL
5733: IFTRUE 5737
5735: GO 5755
5737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_INT 13
5745: PUSH
5746: LD_INT 14
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: ST_TO_ADDR
5753: GO 6124
5755: LD_INT 31
5757: DOUBLE
5758: EQUAL
5759: IFTRUE 5763
5761: GO 5781
5763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5764: LD_ADDR_VAR 0 3
5768: PUSH
5769: LD_INT 13
5771: PUSH
5772: LD_INT 14
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: ST_TO_ADDR
5779: GO 6124
5781: LD_INT 26
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5789
5787: GO 5807
5789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5790: LD_ADDR_VAR 0 3
5794: PUSH
5795: LD_INT 13
5797: PUSH
5798: LD_INT 14
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: ST_TO_ADDR
5805: GO 6124
5807: LD_INT 42
5809: DOUBLE
5810: EQUAL
5811: IFTRUE 5815
5813: GO 5841
5815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 22
5826: PUSH
5827: LD_INT 23
5829: PUSH
5830: LD_INT 24
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: ST_TO_ADDR
5839: GO 6124
5841: LD_INT 43
5843: DOUBLE
5844: EQUAL
5845: IFTRUE 5849
5847: GO 5875
5849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5850: LD_ADDR_VAR 0 3
5854: PUSH
5855: LD_INT 21
5857: PUSH
5858: LD_INT 22
5860: PUSH
5861: LD_INT 23
5863: PUSH
5864: LD_INT 24
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: ST_TO_ADDR
5873: GO 6124
5875: LD_INT 44
5877: DOUBLE
5878: EQUAL
5879: IFTRUE 5883
5881: GO 5909
5883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5884: LD_ADDR_VAR 0 3
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_INT 23
5897: PUSH
5898: LD_INT 24
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: ST_TO_ADDR
5907: GO 6124
5909: LD_INT 45
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5943
5917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5918: LD_ADDR_VAR 0 3
5922: PUSH
5923: LD_INT 21
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_INT 23
5931: PUSH
5932: LD_INT 24
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: ST_TO_ADDR
5941: GO 6124
5943: LD_INT 49
5945: DOUBLE
5946: EQUAL
5947: IFTRUE 5951
5949: GO 5977
5951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5952: LD_ADDR_VAR 0 3
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_INT 23
5965: PUSH
5966: LD_INT 24
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: ST_TO_ADDR
5975: GO 6124
5977: LD_INT 51
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5985
5983: GO 6011
5985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5986: LD_ADDR_VAR 0 3
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 23
5999: PUSH
6000: LD_INT 24
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: ST_TO_ADDR
6009: GO 6124
6011: LD_INT 52
6013: DOUBLE
6014: EQUAL
6015: IFTRUE 6019
6017: GO 6045
6019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_INT 21
6027: PUSH
6028: LD_INT 22
6030: PUSH
6031: LD_INT 23
6033: PUSH
6034: LD_INT 24
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: ST_TO_ADDR
6043: GO 6124
6045: LD_INT 53
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6071
6053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 23
6061: PUSH
6062: LD_INT 24
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: ST_TO_ADDR
6069: GO 6124
6071: LD_INT 46
6073: DOUBLE
6074: EQUAL
6075: IFTRUE 6079
6077: GO 6097
6079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6080: LD_ADDR_VAR 0 3
6084: PUSH
6085: LD_INT 23
6087: PUSH
6088: LD_INT 24
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: ST_TO_ADDR
6095: GO 6124
6097: LD_INT 47
6099: DOUBLE
6100: EQUAL
6101: IFTRUE 6105
6103: GO 6123
6105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: ST_TO_ADDR
6121: GO 6124
6123: POP
// result := ( chassis in result ) ;
6124: LD_ADDR_VAR 0 3
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_VAR 0 3
6138: IN
6139: ST_TO_ADDR
// end ;
6140: LD_VAR 0 3
6144: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6145: LD_INT 0
6147: PPUSH
6148: PPUSH
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
6153: PPUSH
// result := array ;
6154: LD_ADDR_VAR 0 5
6158: PUSH
6159: LD_VAR 0 1
6163: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6164: LD_VAR 0 1
6168: NOT
6169: IFTRUE 6178
6171: PUSH
6172: LD_VAR 0 2
6176: NOT
6177: OR
6178: IFTRUE 6187
6180: PUSH
6181: LD_VAR 0 3
6185: NOT
6186: OR
6187: IFTRUE 6201
6189: PUSH
6190: LD_VAR 0 2
6194: PUSH
6195: LD_VAR 0 1
6199: GREATER
6200: OR
6201: IFTRUE 6215
6203: PUSH
6204: LD_VAR 0 3
6208: PUSH
6209: LD_VAR 0 1
6213: GREATER
6214: OR
6215: IFFALSE 6219
// exit ;
6217: GO 6515
// if direction then
6219: LD_VAR 0 4
6223: IFFALSE 6287
// begin d := 1 ;
6225: LD_ADDR_VAR 0 9
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if i_from > i_to then
6233: LD_VAR 0 2
6237: PUSH
6238: LD_VAR 0 3
6242: GREATER
6243: IFFALSE 6269
// length := ( array - i_from ) + i_to else
6245: LD_ADDR_VAR 0 11
6249: PUSH
6250: LD_VAR 0 1
6254: PUSH
6255: LD_VAR 0 2
6259: MINUS
6260: PUSH
6261: LD_VAR 0 3
6265: PLUS
6266: ST_TO_ADDR
6267: GO 6285
// length := i_to - i_from ;
6269: LD_ADDR_VAR 0 11
6273: PUSH
6274: LD_VAR 0 3
6278: PUSH
6279: LD_VAR 0 2
6283: MINUS
6284: ST_TO_ADDR
// end else
6285: GO 6348
// begin d := - 1 ;
6287: LD_ADDR_VAR 0 9
6291: PUSH
6292: LD_INT 1
6294: NEG
6295: ST_TO_ADDR
// if i_from > i_to then
6296: LD_VAR 0 2
6300: PUSH
6301: LD_VAR 0 3
6305: GREATER
6306: IFFALSE 6326
// length := i_from - i_to else
6308: LD_ADDR_VAR 0 11
6312: PUSH
6313: LD_VAR 0 2
6317: PUSH
6318: LD_VAR 0 3
6322: MINUS
6323: ST_TO_ADDR
6324: GO 6348
// length := ( array - i_to ) + i_from ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PUSH
6336: LD_VAR 0 3
6340: MINUS
6341: PUSH
6342: LD_VAR 0 2
6346: PLUS
6347: ST_TO_ADDR
// end ; if not length then
6348: LD_VAR 0 11
6352: NOT
6353: IFFALSE 6357
// exit ;
6355: GO 6515
// tmp := array ;
6357: LD_ADDR_VAR 0 10
6361: PUSH
6362: LD_VAR 0 1
6366: ST_TO_ADDR
// for i = 1 to length do
6367: LD_ADDR_VAR 0 6
6371: PUSH
6372: DOUBLE
6373: LD_INT 1
6375: DEC
6376: ST_TO_ADDR
6377: LD_VAR 0 11
6381: PUSH
6382: FOR_TO
6383: IFFALSE 6503
// begin for j = 1 to array do
6385: LD_ADDR_VAR 0 7
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_VAR 0 1
6399: PUSH
6400: FOR_TO
6401: IFFALSE 6489
// begin k := j + d ;
6403: LD_ADDR_VAR 0 8
6407: PUSH
6408: LD_VAR 0 7
6412: PUSH
6413: LD_VAR 0 9
6417: PLUS
6418: ST_TO_ADDR
// if k > array then
6419: LD_VAR 0 8
6423: PUSH
6424: LD_VAR 0 1
6428: GREATER
6429: IFFALSE 6439
// k := 1 ;
6431: LD_ADDR_VAR 0 8
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// if not k then
6439: LD_VAR 0 8
6443: NOT
6444: IFFALSE 6456
// k := array ;
6446: LD_ADDR_VAR 0 8
6450: PUSH
6451: LD_VAR 0 1
6455: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6456: LD_ADDR_VAR 0 10
6460: PUSH
6461: LD_VAR 0 10
6465: PPUSH
6466: LD_VAR 0 8
6470: PPUSH
6471: LD_VAR 0 1
6475: PUSH
6476: LD_VAR 0 7
6480: ARRAY
6481: PPUSH
6482: CALL_OW 1
6486: ST_TO_ADDR
// end ;
6487: GO 6400
6489: POP
6490: POP
// array := tmp ;
6491: LD_ADDR_VAR 0 1
6495: PUSH
6496: LD_VAR 0 10
6500: ST_TO_ADDR
// end ;
6501: GO 6382
6503: POP
6504: POP
// result := array ;
6505: LD_ADDR_VAR 0 5
6509: PUSH
6510: LD_VAR 0 1
6514: ST_TO_ADDR
// end ;
6515: LD_VAR 0 5
6519: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6520: LD_INT 0
6522: PPUSH
6523: PPUSH
// result := 0 ;
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// if not array or not value in array then
6532: LD_VAR 0 1
6536: NOT
6537: IFTRUE 6552
6539: PUSH
6540: LD_VAR 0 2
6544: PUSH
6545: LD_VAR 0 1
6549: IN
6550: NOT
6551: OR
6552: IFFALSE 6556
// exit ;
6554: GO 6610
// for i = 1 to array do
6556: LD_ADDR_VAR 0 4
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 1
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6608
// if value = array [ i ] then
6574: LD_VAR 0 2
6578: PUSH
6579: LD_VAR 0 1
6583: PUSH
6584: LD_VAR 0 4
6588: ARRAY
6589: EQUAL
6590: IFFALSE 6606
// begin result := i ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: LD_VAR 0 4
6601: ST_TO_ADDR
// exit ;
6602: POP
6603: POP
6604: GO 6610
// end ;
6606: GO 6571
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 3
6614: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6615: LD_INT 0
6617: PPUSH
// vc_chassis := chassis ;
6618: LD_ADDR_OWVAR 37
6622: PUSH
6623: LD_VAR 0 1
6627: ST_TO_ADDR
// vc_engine := engine ;
6628: LD_ADDR_OWVAR 39
6632: PUSH
6633: LD_VAR 0 2
6637: ST_TO_ADDR
// vc_control := control ;
6638: LD_ADDR_OWVAR 38
6642: PUSH
6643: LD_VAR 0 3
6647: ST_TO_ADDR
// vc_weapon := weapon ;
6648: LD_ADDR_OWVAR 40
6652: PUSH
6653: LD_VAR 0 4
6657: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6658: LD_ADDR_OWVAR 41
6662: PUSH
6663: LD_VAR 0 5
6667: ST_TO_ADDR
// end ;
6668: LD_VAR 0 6
6672: RET
// export function WantPlant ( unit ) ; var task ; begin
6673: LD_INT 0
6675: PPUSH
6676: PPUSH
// result := false ;
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: LD_INT 0
6684: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 437
6699: ST_TO_ADDR
// if task then
6700: LD_VAR 0 3
6704: IFFALSE 6732
// if task [ 1 ] [ 1 ] = p then
6706: LD_VAR 0 3
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PUSH
6719: LD_STRING p
6721: EQUAL
6722: IFFALSE 6732
// result := true ;
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_INT 1
6731: ST_TO_ADDR
// end ;
6732: LD_VAR 0 2
6736: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6737: LD_INT 0
6739: PPUSH
6740: PPUSH
6741: PPUSH
6742: PPUSH
// if pos < 1 then
6743: LD_VAR 0 2
6747: PUSH
6748: LD_INT 1
6750: LESS
6751: IFFALSE 6755
// exit ;
6753: GO 7058
// if pos = 1 then
6755: LD_VAR 0 2
6759: PUSH
6760: LD_INT 1
6762: EQUAL
6763: IFFALSE 6796
// result := Replace ( arr , pos [ 1 ] , value ) else
6765: LD_ADDR_VAR 0 4
6769: PUSH
6770: LD_VAR 0 1
6774: PPUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PPUSH
6784: LD_VAR 0 3
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
6794: GO 7058
// begin tmp := arr ;
6796: LD_ADDR_VAR 0 6
6800: PUSH
6801: LD_VAR 0 1
6805: ST_TO_ADDR
// s_arr := [ tmp ] ;
6806: LD_ADDR_VAR 0 7
6810: PUSH
6811: LD_VAR 0 6
6815: PUSH
6816: EMPTY
6817: LIST
6818: ST_TO_ADDR
// for i = 1 to pos - 1 do
6819: LD_ADDR_VAR 0 5
6823: PUSH
6824: DOUBLE
6825: LD_INT 1
6827: DEC
6828: ST_TO_ADDR
6829: LD_VAR 0 2
6833: PUSH
6834: LD_INT 1
6836: MINUS
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6884
// begin tmp := tmp [ pos [ i ] ] ;
6841: LD_ADDR_VAR 0 6
6845: PUSH
6846: LD_VAR 0 6
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_VAR 0 5
6860: ARRAY
6861: ARRAY
6862: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6863: LD_ADDR_VAR 0 7
6867: PUSH
6868: LD_VAR 0 7
6872: PUSH
6873: LD_VAR 0 6
6877: PUSH
6878: EMPTY
6879: LIST
6880: ADD
6881: ST_TO_ADDR
// end ;
6882: GO 6838
6884: POP
6885: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_VAR 0 6
6895: PPUSH
6896: LD_VAR 0 2
6900: PUSH
6901: LD_VAR 0 2
6905: ARRAY
6906: PPUSH
6907: LD_VAR 0 3
6911: PPUSH
6912: CALL_OW 1
6916: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6917: LD_ADDR_VAR 0 7
6921: PUSH
6922: LD_VAR 0 7
6926: PPUSH
6927: LD_VAR 0 7
6931: PPUSH
6932: LD_VAR 0 6
6936: PPUSH
6937: CALL_OW 1
6941: ST_TO_ADDR
// for i = s_arr downto 2 do
6942: LD_ADDR_VAR 0 5
6946: PUSH
6947: DOUBLE
6948: LD_VAR 0 7
6952: INC
6953: ST_TO_ADDR
6954: LD_INT 2
6956: PUSH
6957: FOR_DOWNTO
6958: IFFALSE 7042
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6960: LD_ADDR_VAR 0 6
6964: PUSH
6965: LD_VAR 0 7
6969: PUSH
6970: LD_VAR 0 5
6974: PUSH
6975: LD_INT 1
6977: MINUS
6978: ARRAY
6979: PPUSH
6980: LD_VAR 0 2
6984: PUSH
6985: LD_VAR 0 5
6989: PUSH
6990: LD_INT 1
6992: MINUS
6993: ARRAY
6994: PPUSH
6995: LD_VAR 0 7
6999: PUSH
7000: LD_VAR 0 5
7004: ARRAY
7005: PPUSH
7006: CALL_OW 1
7010: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7011: LD_ADDR_VAR 0 7
7015: PUSH
7016: LD_VAR 0 7
7020: PPUSH
7021: LD_VAR 0 5
7025: PUSH
7026: LD_INT 1
7028: MINUS
7029: PPUSH
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 1
7039: ST_TO_ADDR
// end ;
7040: GO 6957
7042: POP
7043: POP
// result := s_arr [ 1 ] ;
7044: LD_ADDR_VAR 0 4
7048: PUSH
7049: LD_VAR 0 7
7053: PUSH
7054: LD_INT 1
7056: ARRAY
7057: ST_TO_ADDR
// end ; end ;
7058: LD_VAR 0 4
7062: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
// if not list then
7067: LD_VAR 0 1
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7167
// i := list [ pos1 ] ;
7076: LD_ADDR_VAR 0 5
7080: PUSH
7081: LD_VAR 0 1
7085: PUSH
7086: LD_VAR 0 2
7090: ARRAY
7091: ST_TO_ADDR
// if not i then
7092: LD_VAR 0 5
7096: NOT
7097: IFFALSE 7101
// exit ;
7099: GO 7167
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7101: LD_ADDR_VAR 0 1
7105: PUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PUSH
7121: LD_VAR 0 3
7125: ARRAY
7126: PPUSH
7127: CALL_OW 1
7131: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7132: LD_ADDR_VAR 0 1
7136: PUSH
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_VAR 0 3
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 1
7156: ST_TO_ADDR
// result := list ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 1
7166: ST_TO_ADDR
// end ;
7167: LD_VAR 0 4
7171: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7172: LD_INT 0
7174: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7175: LD_ADDR_VAR 0 5
7179: PUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: CALL_OW 250
7189: PPUSH
7190: LD_VAR 0 1
7194: PPUSH
7195: CALL_OW 251
7199: PPUSH
7200: LD_VAR 0 2
7204: PPUSH
7205: LD_VAR 0 3
7209: PPUSH
7210: LD_VAR 0 4
7214: PPUSH
7215: CALL 7597 0 5
7219: ST_TO_ADDR
// end ;
7220: LD_VAR 0 5
7224: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// if not list or not unit then
7231: LD_VAR 0 2
7235: NOT
7236: IFTRUE 7245
7238: PUSH
7239: LD_VAR 0 1
7243: NOT
7244: OR
7245: IFFALSE 7249
// exit ;
7247: GO 7592
// result := [ ] ;
7249: LD_ADDR_VAR 0 5
7253: PUSH
7254: EMPTY
7255: ST_TO_ADDR
// for i in list do
7256: LD_ADDR_VAR 0 6
7260: PUSH
7261: LD_VAR 0 2
7265: PUSH
7266: FOR_IN
7267: IFFALSE 7485
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7269: LD_ADDR_VAR 0 8
7273: PUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: LD_VAR 0 6
7283: PUSH
7284: LD_INT 1
7286: ARRAY
7287: PPUSH
7288: LD_VAR 0 6
7292: PUSH
7293: LD_INT 2
7295: ARRAY
7296: PPUSH
7297: CALL_OW 297
7301: ST_TO_ADDR
// if not Count ( result ) then
7302: LD_VAR 0 5
7306: PPUSH
7307: CALL 3853 0 1
7311: NOT
7312: IFFALSE 7345
// begin result := Join ( result , [ i , tmp ] ) ;
7314: LD_ADDR_VAR 0 5
7318: PUSH
7319: LD_VAR 0 5
7323: PPUSH
7324: LD_VAR 0 6
7328: PUSH
7329: LD_VAR 0 8
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PPUSH
7338: CALL 39785 0 2
7342: ST_TO_ADDR
// continue ;
7343: GO 7266
// end ; if result [ result ] [ 2 ] <= tmp then
7345: LD_VAR 0 5
7349: PUSH
7350: LD_VAR 0 5
7354: ARRAY
7355: PUSH
7356: LD_INT 2
7358: ARRAY
7359: PUSH
7360: LD_VAR 0 8
7364: LESSEQUAL
7365: IFFALSE 7398
// result := Join ( result , [ i , tmp ] ) else
7367: LD_ADDR_VAR 0 5
7371: PUSH
7372: LD_VAR 0 5
7376: PPUSH
7377: LD_VAR 0 6
7381: PUSH
7382: LD_VAR 0 8
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL 39785 0 2
7395: ST_TO_ADDR
7396: GO 7483
// begin for j := 1 to Count ( result ) do
7398: LD_ADDR_VAR 0 7
7402: PUSH
7403: DOUBLE
7404: LD_INT 1
7406: DEC
7407: ST_TO_ADDR
7408: LD_VAR 0 5
7412: PPUSH
7413: CALL 3853 0 1
7417: PUSH
7418: FOR_TO
7419: IFFALSE 7481
// begin if tmp < result [ j ] [ 2 ] then
7421: LD_VAR 0 8
7425: PUSH
7426: LD_VAR 0 5
7430: PUSH
7431: LD_VAR 0 7
7435: ARRAY
7436: PUSH
7437: LD_INT 2
7439: ARRAY
7440: LESS
7441: IFFALSE 7479
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7443: LD_ADDR_VAR 0 5
7447: PUSH
7448: LD_VAR 0 5
7452: PPUSH
7453: LD_VAR 0 7
7457: PPUSH
7458: LD_VAR 0 6
7462: PUSH
7463: LD_VAR 0 8
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PPUSH
7472: CALL_OW 2
7476: ST_TO_ADDR
// break ;
7477: GO 7481
// end ; end ;
7479: GO 7418
7481: POP
7482: POP
// end ; end ;
7483: GO 7266
7485: POP
7486: POP
// if result and not asc then
7487: LD_VAR 0 5
7491: IFFALSE 7500
7493: PUSH
7494: LD_VAR 0 3
7498: NOT
7499: AND
7500: IFFALSE 7517
// result := ReverseArray ( result ) ;
7502: LD_ADDR_VAR 0 5
7506: PUSH
7507: LD_VAR 0 5
7511: PPUSH
7512: CALL 34875 0 1
7516: ST_TO_ADDR
// tmp := [ ] ;
7517: LD_ADDR_VAR 0 8
7521: PUSH
7522: EMPTY
7523: ST_TO_ADDR
// if mode then
7524: LD_VAR 0 4
7528: IFFALSE 7592
// begin for i := 1 to result do
7530: LD_ADDR_VAR 0 6
7534: PUSH
7535: DOUBLE
7536: LD_INT 1
7538: DEC
7539: ST_TO_ADDR
7540: LD_VAR 0 5
7544: PUSH
7545: FOR_TO
7546: IFFALSE 7580
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7548: LD_ADDR_VAR 0 8
7552: PUSH
7553: LD_VAR 0 8
7557: PPUSH
7558: LD_VAR 0 5
7562: PUSH
7563: LD_VAR 0 6
7567: ARRAY
7568: PUSH
7569: LD_INT 1
7571: ARRAY
7572: PPUSH
7573: CALL 39785 0 2
7577: ST_TO_ADDR
7578: GO 7545
7580: POP
7581: POP
// result := tmp ;
7582: LD_ADDR_VAR 0 5
7586: PUSH
7587: LD_VAR 0 8
7591: ST_TO_ADDR
// end ; end ;
7592: LD_VAR 0 5
7596: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7597: LD_INT 0
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
// if not list then
7603: LD_VAR 0 3
7607: NOT
7608: IFFALSE 7612
// exit ;
7610: GO 8002
// result := [ ] ;
7612: LD_ADDR_VAR 0 6
7616: PUSH
7617: EMPTY
7618: ST_TO_ADDR
// for i in list do
7619: LD_ADDR_VAR 0 7
7623: PUSH
7624: LD_VAR 0 3
7628: PUSH
7629: FOR_IN
7630: IFFALSE 7832
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7632: LD_ADDR_VAR 0 9
7636: PUSH
7637: LD_VAR 0 7
7641: PPUSH
7642: LD_VAR 0 1
7646: PPUSH
7647: LD_VAR 0 2
7651: PPUSH
7652: CALL_OW 297
7656: ST_TO_ADDR
// if not result then
7657: LD_VAR 0 6
7661: NOT
7662: IFFALSE 7688
// result := [ [ i , tmp ] ] else
7664: LD_ADDR_VAR 0 6
7668: PUSH
7669: LD_VAR 0 7
7673: PUSH
7674: LD_VAR 0 9
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: ST_TO_ADDR
7686: GO 7830
// begin if result [ result ] [ 2 ] <= tmp then
7688: LD_VAR 0 6
7692: PUSH
7693: LD_VAR 0 6
7697: ARRAY
7698: PUSH
7699: LD_INT 2
7701: ARRAY
7702: PUSH
7703: LD_VAR 0 9
7707: LESSEQUAL
7708: IFFALSE 7750
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7710: LD_ADDR_VAR 0 6
7714: PUSH
7715: LD_VAR 0 6
7719: PPUSH
7720: LD_VAR 0 6
7724: PUSH
7725: LD_INT 1
7727: PLUS
7728: PPUSH
7729: LD_VAR 0 7
7733: PUSH
7734: LD_VAR 0 9
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 2
7747: ST_TO_ADDR
7748: GO 7830
// for j := 1 to result do
7750: LD_ADDR_VAR 0 8
7754: PUSH
7755: DOUBLE
7756: LD_INT 1
7758: DEC
7759: ST_TO_ADDR
7760: LD_VAR 0 6
7764: PUSH
7765: FOR_TO
7766: IFFALSE 7828
// begin if tmp < result [ j ] [ 2 ] then
7768: LD_VAR 0 9
7772: PUSH
7773: LD_VAR 0 6
7777: PUSH
7778: LD_VAR 0 8
7782: ARRAY
7783: PUSH
7784: LD_INT 2
7786: ARRAY
7787: LESS
7788: IFFALSE 7826
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7790: LD_ADDR_VAR 0 6
7794: PUSH
7795: LD_VAR 0 6
7799: PPUSH
7800: LD_VAR 0 8
7804: PPUSH
7805: LD_VAR 0 7
7809: PUSH
7810: LD_VAR 0 9
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PPUSH
7819: CALL_OW 2
7823: ST_TO_ADDR
// break ;
7824: GO 7828
// end ; end ;
7826: GO 7765
7828: POP
7829: POP
// end ; end ;
7830: GO 7629
7832: POP
7833: POP
// if result and not asc then
7834: LD_VAR 0 6
7838: IFFALSE 7847
7840: PUSH
7841: LD_VAR 0 4
7845: NOT
7846: AND
7847: IFFALSE 7922
// begin tmp := result ;
7849: LD_ADDR_VAR 0 9
7853: PUSH
7854: LD_VAR 0 6
7858: ST_TO_ADDR
// for i = tmp downto 1 do
7859: LD_ADDR_VAR 0 7
7863: PUSH
7864: DOUBLE
7865: LD_VAR 0 9
7869: INC
7870: ST_TO_ADDR
7871: LD_INT 1
7873: PUSH
7874: FOR_DOWNTO
7875: IFFALSE 7920
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7877: LD_ADDR_VAR 0 6
7881: PUSH
7882: LD_VAR 0 6
7886: PPUSH
7887: LD_VAR 0 9
7891: PUSH
7892: LD_VAR 0 7
7896: MINUS
7897: PUSH
7898: LD_INT 1
7900: PLUS
7901: PPUSH
7902: LD_VAR 0 9
7906: PUSH
7907: LD_VAR 0 7
7911: ARRAY
7912: PPUSH
7913: CALL_OW 1
7917: ST_TO_ADDR
7918: GO 7874
7920: POP
7921: POP
// end ; tmp := [ ] ;
7922: LD_ADDR_VAR 0 9
7926: PUSH
7927: EMPTY
7928: ST_TO_ADDR
// if mode then
7929: LD_VAR 0 5
7933: IFFALSE 8002
// begin for i = 1 to result do
7935: LD_ADDR_VAR 0 7
7939: PUSH
7940: DOUBLE
7941: LD_INT 1
7943: DEC
7944: ST_TO_ADDR
7945: LD_VAR 0 6
7949: PUSH
7950: FOR_TO
7951: IFFALSE 7990
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7953: LD_ADDR_VAR 0 9
7957: PUSH
7958: LD_VAR 0 9
7962: PPUSH
7963: LD_VAR 0 7
7967: PPUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_VAR 0 7
7977: ARRAY
7978: PUSH
7979: LD_INT 1
7981: ARRAY
7982: PPUSH
7983: CALL_OW 1
7987: ST_TO_ADDR
7988: GO 7950
7990: POP
7991: POP
// result := tmp ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 9
8001: ST_TO_ADDR
// end ; end ;
8002: LD_VAR 0 6
8006: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8007: LD_INT 0
8009: PPUSH
8010: PPUSH
8011: PPUSH
8012: PPUSH
8013: PPUSH
8014: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8015: LD_ADDR_VAR 0 5
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: LD_INT 0
8025: PUSH
8026: LD_INT 0
8028: PUSH
8029: EMPTY
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: ST_TO_ADDR
// if not x or not y then
8037: LD_VAR 0 2
8041: NOT
8042: IFTRUE 8051
8044: PUSH
8045: LD_VAR 0 3
8049: NOT
8050: OR
8051: IFFALSE 8055
// exit ;
8053: GO 9711
// if not range then
8055: LD_VAR 0 4
8059: NOT
8060: IFFALSE 8070
// range := 10 ;
8062: LD_ADDR_VAR 0 4
8066: PUSH
8067: LD_INT 10
8069: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8070: LD_ADDR_VAR 0 8
8074: PUSH
8075: LD_INT 81
8077: PUSH
8078: LD_VAR 0 1
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 92
8089: PUSH
8090: LD_VAR 0 2
8094: PUSH
8095: LD_VAR 0 3
8099: PUSH
8100: LD_VAR 0 4
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 3
8113: PUSH
8114: LD_INT 21
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 69
8137: ST_TO_ADDR
// if not tmp then
8138: LD_VAR 0 8
8142: NOT
8143: IFFALSE 8147
// exit ;
8145: GO 9711
// for i in tmp do
8147: LD_ADDR_VAR 0 6
8151: PUSH
8152: LD_VAR 0 8
8156: PUSH
8157: FOR_IN
8158: IFFALSE 9686
// begin points := [ 0 , 0 , 0 ] ;
8160: LD_ADDR_VAR 0 9
8164: PUSH
8165: LD_INT 0
8167: PUSH
8168: LD_INT 0
8170: PUSH
8171: LD_INT 0
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: ST_TO_ADDR
// bpoints := 1 ;
8179: LD_ADDR_VAR 0 10
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8187: LD_VAR 0 6
8191: PPUSH
8192: CALL_OW 247
8196: PUSH
8197: LD_INT 1
8199: DOUBLE
8200: EQUAL
8201: IFTRUE 8205
8203: GO 8787
8205: POP
// begin if GetClass ( i ) = 1 then
8206: LD_VAR 0 6
8210: PPUSH
8211: CALL_OW 257
8215: PUSH
8216: LD_INT 1
8218: EQUAL
8219: IFFALSE 8240
// points := [ 10 , 5 , 3 ] ;
8221: LD_ADDR_VAR 0 9
8225: PUSH
8226: LD_INT 10
8228: PUSH
8229: LD_INT 5
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8240: LD_VAR 0 6
8244: PPUSH
8245: CALL_OW 257
8249: PUSH
8250: LD_INT 2
8252: PUSH
8253: LD_INT 3
8255: PUSH
8256: LD_INT 4
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: IN
8264: IFFALSE 8285
// points := [ 3 , 2 , 1 ] ;
8266: LD_ADDR_VAR 0 9
8270: PUSH
8271: LD_INT 3
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: LD_INT 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: LIST
8284: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8285: LD_VAR 0 6
8289: PPUSH
8290: CALL_OW 257
8294: PUSH
8295: LD_INT 5
8297: EQUAL
8298: IFFALSE 8319
// points := [ 130 , 5 , 2 ] ;
8300: LD_ADDR_VAR 0 9
8304: PUSH
8305: LD_INT 130
8307: PUSH
8308: LD_INT 5
8310: PUSH
8311: LD_INT 2
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8319: LD_VAR 0 6
8323: PPUSH
8324: CALL_OW 257
8328: PUSH
8329: LD_INT 8
8331: EQUAL
8332: IFFALSE 8353
// points := [ 35 , 35 , 30 ] ;
8334: LD_ADDR_VAR 0 9
8338: PUSH
8339: LD_INT 35
8341: PUSH
8342: LD_INT 35
8344: PUSH
8345: LD_INT 30
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8353: LD_VAR 0 6
8357: PPUSH
8358: CALL_OW 257
8362: PUSH
8363: LD_INT 9
8365: EQUAL
8366: IFFALSE 8387
// points := [ 20 , 55 , 40 ] ;
8368: LD_ADDR_VAR 0 9
8372: PUSH
8373: LD_INT 20
8375: PUSH
8376: LD_INT 55
8378: PUSH
8379: LD_INT 40
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: LIST
8386: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8387: LD_VAR 0 6
8391: PPUSH
8392: CALL_OW 257
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 16
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: IN
8407: IFFALSE 8428
// points := [ 5 , 3 , 2 ] ;
8409: LD_ADDR_VAR 0 9
8413: PUSH
8414: LD_INT 5
8416: PUSH
8417: LD_INT 3
8419: PUSH
8420: LD_INT 2
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8428: LD_VAR 0 6
8432: PPUSH
8433: CALL_OW 257
8437: PUSH
8438: LD_INT 17
8440: EQUAL
8441: IFFALSE 8462
// points := [ 100 , 50 , 75 ] ;
8443: LD_ADDR_VAR 0 9
8447: PUSH
8448: LD_INT 100
8450: PUSH
8451: LD_INT 50
8453: PUSH
8454: LD_INT 75
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8462: LD_VAR 0 6
8466: PPUSH
8467: CALL_OW 257
8471: PUSH
8472: LD_INT 15
8474: EQUAL
8475: IFFALSE 8496
// points := [ 10 , 5 , 3 ] ;
8477: LD_ADDR_VAR 0 9
8481: PUSH
8482: LD_INT 10
8484: PUSH
8485: LD_INT 5
8487: PUSH
8488: LD_INT 3
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8496: LD_VAR 0 6
8500: PPUSH
8501: CALL_OW 257
8505: PUSH
8506: LD_INT 14
8508: EQUAL
8509: IFFALSE 8530
// points := [ 10 , 0 , 0 ] ;
8511: LD_ADDR_VAR 0 9
8515: PUSH
8516: LD_INT 10
8518: PUSH
8519: LD_INT 0
8521: PUSH
8522: LD_INT 0
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8530: LD_VAR 0 6
8534: PPUSH
8535: CALL_OW 257
8539: PUSH
8540: LD_INT 11
8542: EQUAL
8543: IFFALSE 8564
// points := [ 30 , 10 , 5 ] ;
8545: LD_ADDR_VAR 0 9
8549: PUSH
8550: LD_INT 30
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: LD_INT 5
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_INT 5
8571: PPUSH
8572: CALL_OW 321
8576: PUSH
8577: LD_INT 2
8579: EQUAL
8580: IFFALSE 8597
// bpoints := bpoints * 1.8 ;
8582: LD_ADDR_VAR 0 10
8586: PUSH
8587: LD_VAR 0 10
8591: PUSH
8592: LD_REAL  1.80000000000000E+0000
8595: MUL
8596: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8597: LD_VAR 0 6
8601: PPUSH
8602: CALL_OW 257
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: LD_INT 2
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: IN
8625: IFFALSE 8645
8627: PUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: LD_INT 51
8635: PPUSH
8636: CALL_OW 321
8640: PUSH
8641: LD_INT 2
8643: EQUAL
8644: AND
8645: IFFALSE 8662
// bpoints := bpoints * 1.2 ;
8647: LD_ADDR_VAR 0 10
8651: PUSH
8652: LD_VAR 0 10
8656: PUSH
8657: LD_REAL  1.20000000000000E+0000
8660: MUL
8661: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8662: LD_VAR 0 6
8666: PPUSH
8667: CALL_OW 257
8671: PUSH
8672: LD_INT 5
8674: PUSH
8675: LD_INT 7
8677: PUSH
8678: LD_INT 9
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: IN
8686: IFFALSE 8706
8688: PUSH
8689: LD_VAR 0 1
8693: PPUSH
8694: LD_INT 52
8696: PPUSH
8697: CALL_OW 321
8701: PUSH
8702: LD_INT 2
8704: EQUAL
8705: AND
8706: IFFALSE 8723
// bpoints := bpoints * 1.5 ;
8708: LD_ADDR_VAR 0 10
8712: PUSH
8713: LD_VAR 0 10
8717: PUSH
8718: LD_REAL  1.50000000000000E+0000
8721: MUL
8722: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_INT 66
8730: PPUSH
8731: CALL_OW 321
8735: PUSH
8736: LD_INT 2
8738: EQUAL
8739: IFFALSE 8756
// bpoints := bpoints * 1.1 ;
8741: LD_ADDR_VAR 0 10
8745: PUSH
8746: LD_VAR 0 10
8750: PUSH
8751: LD_REAL  1.10000000000000E+0000
8754: MUL
8755: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8756: LD_ADDR_VAR 0 10
8760: PUSH
8761: LD_VAR 0 10
8765: PUSH
8766: LD_VAR 0 6
8770: PPUSH
8771: LD_INT 1
8773: PPUSH
8774: CALL_OW 259
8778: PUSH
8779: LD_REAL  1.15000000000000E+0000
8782: MUL
8783: MUL
8784: ST_TO_ADDR
// end ; unit_vehicle :
8785: GO 9615
8787: LD_INT 2
8789: DOUBLE
8790: EQUAL
8791: IFTRUE 8795
8793: GO 9603
8795: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8796: LD_VAR 0 6
8800: PPUSH
8801: CALL_OW 264
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: LD_INT 42
8811: PUSH
8812: LD_INT 24
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8841
// points := [ 25 , 5 , 3 ] ;
8822: LD_ADDR_VAR 0 9
8826: PUSH
8827: LD_INT 25
8829: PUSH
8830: LD_INT 5
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8841: LD_VAR 0 6
8845: PPUSH
8846: CALL_OW 264
8850: PUSH
8851: LD_INT 4
8853: PUSH
8854: LD_INT 43
8856: PUSH
8857: LD_INT 25
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: IN
8865: IFFALSE 8886
// points := [ 40 , 15 , 5 ] ;
8867: LD_ADDR_VAR 0 9
8871: PUSH
8872: LD_INT 40
8874: PUSH
8875: LD_INT 15
8877: PUSH
8878: LD_INT 5
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8886: LD_VAR 0 6
8890: PPUSH
8891: CALL_OW 264
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 23
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: IN
8906: IFFALSE 8927
// points := [ 7 , 25 , 8 ] ;
8908: LD_ADDR_VAR 0 9
8912: PUSH
8913: LD_INT 7
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 8
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8927: LD_VAR 0 6
8931: PPUSH
8932: CALL_OW 264
8936: PUSH
8937: LD_INT 5
8939: PUSH
8940: LD_INT 27
8942: PUSH
8943: LD_INT 44
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: IN
8951: IFFALSE 8972
// points := [ 14 , 50 , 16 ] ;
8953: LD_ADDR_VAR 0 9
8957: PUSH
8958: LD_INT 14
8960: PUSH
8961: LD_INT 50
8963: PUSH
8964: LD_INT 16
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8972: LD_VAR 0 6
8976: PPUSH
8977: CALL_OW 264
8981: PUSH
8982: LD_INT 6
8984: PUSH
8985: LD_INT 46
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: IN
8992: IFFALSE 9013
// points := [ 32 , 120 , 70 ] ;
8994: LD_ADDR_VAR 0 9
8998: PUSH
8999: LD_INT 32
9001: PUSH
9002: LD_INT 120
9004: PUSH
9005: LD_INT 70
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9013: LD_VAR 0 6
9017: PPUSH
9018: CALL_OW 264
9022: PUSH
9023: LD_INT 7
9025: PUSH
9026: LD_INT 28
9028: PUSH
9029: LD_INT 45
9031: PUSH
9032: LD_INT 92
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: IN
9041: IFFALSE 9062
// points := [ 35 , 20 , 45 ] ;
9043: LD_ADDR_VAR 0 9
9047: PUSH
9048: LD_INT 35
9050: PUSH
9051: LD_INT 20
9053: PUSH
9054: LD_INT 45
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9062: LD_VAR 0 6
9066: PPUSH
9067: CALL_OW 264
9071: PUSH
9072: LD_INT 47
9074: PUSH
9075: EMPTY
9076: LIST
9077: IN
9078: IFFALSE 9099
// points := [ 67 , 45 , 75 ] ;
9080: LD_ADDR_VAR 0 9
9084: PUSH
9085: LD_INT 67
9087: PUSH
9088: LD_INT 45
9090: PUSH
9091: LD_INT 75
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9099: LD_VAR 0 6
9103: PPUSH
9104: CALL_OW 264
9108: PUSH
9109: LD_INT 26
9111: PUSH
9112: EMPTY
9113: LIST
9114: IN
9115: IFFALSE 9136
// points := [ 120 , 30 , 80 ] ;
9117: LD_ADDR_VAR 0 9
9121: PUSH
9122: LD_INT 120
9124: PUSH
9125: LD_INT 30
9127: PUSH
9128: LD_INT 80
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9136: LD_VAR 0 6
9140: PPUSH
9141: CALL_OW 264
9145: PUSH
9146: LD_INT 22
9148: PUSH
9149: EMPTY
9150: LIST
9151: IN
9152: IFFALSE 9173
// points := [ 40 , 1 , 1 ] ;
9154: LD_ADDR_VAR 0 9
9158: PUSH
9159: LD_INT 40
9161: PUSH
9162: LD_INT 1
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: LIST
9172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9173: LD_VAR 0 6
9177: PPUSH
9178: CALL_OW 264
9182: PUSH
9183: LD_INT 29
9185: PUSH
9186: EMPTY
9187: LIST
9188: IN
9189: IFFALSE 9210
// points := [ 70 , 200 , 400 ] ;
9191: LD_ADDR_VAR 0 9
9195: PUSH
9196: LD_INT 70
9198: PUSH
9199: LD_INT 200
9201: PUSH
9202: LD_INT 400
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9210: LD_VAR 0 6
9214: PPUSH
9215: CALL_OW 264
9219: PUSH
9220: LD_INT 14
9222: PUSH
9223: LD_INT 53
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: IN
9230: IFFALSE 9251
// points := [ 40 , 10 , 20 ] ;
9232: LD_ADDR_VAR 0 9
9236: PUSH
9237: LD_INT 40
9239: PUSH
9240: LD_INT 10
9242: PUSH
9243: LD_INT 20
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9251: LD_VAR 0 6
9255: PPUSH
9256: CALL_OW 264
9260: PUSH
9261: LD_INT 9
9263: PUSH
9264: EMPTY
9265: LIST
9266: IN
9267: IFFALSE 9288
// points := [ 5 , 70 , 20 ] ;
9269: LD_ADDR_VAR 0 9
9273: PUSH
9274: LD_INT 5
9276: PUSH
9277: LD_INT 70
9279: PUSH
9280: LD_INT 20
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9288: LD_VAR 0 6
9292: PPUSH
9293: CALL_OW 264
9297: PUSH
9298: LD_INT 10
9300: PUSH
9301: EMPTY
9302: LIST
9303: IN
9304: IFFALSE 9325
// points := [ 35 , 110 , 70 ] ;
9306: LD_ADDR_VAR 0 9
9310: PUSH
9311: LD_INT 35
9313: PUSH
9314: LD_INT 110
9316: PUSH
9317: LD_INT 70
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9325: LD_VAR 0 6
9329: PPUSH
9330: CALL_OW 265
9334: PUSH
9335: LD_INT 25
9337: EQUAL
9338: IFFALSE 9359
// points := [ 80 , 65 , 100 ] ;
9340: LD_ADDR_VAR 0 9
9344: PUSH
9345: LD_INT 80
9347: PUSH
9348: LD_INT 65
9350: PUSH
9351: LD_INT 100
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9359: LD_VAR 0 6
9363: PPUSH
9364: CALL_OW 263
9368: PUSH
9369: LD_INT 1
9371: EQUAL
9372: IFFALSE 9407
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9374: LD_ADDR_VAR 0 10
9378: PUSH
9379: LD_VAR 0 10
9383: PUSH
9384: LD_VAR 0 6
9388: PPUSH
9389: CALL_OW 311
9393: PPUSH
9394: LD_INT 3
9396: PPUSH
9397: CALL_OW 259
9401: PUSH
9402: LD_INT 4
9404: MUL
9405: MUL
9406: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9407: LD_VAR 0 6
9411: PPUSH
9412: CALL_OW 263
9416: PUSH
9417: LD_INT 2
9419: EQUAL
9420: IFFALSE 9471
// begin j := IsControledBy ( i ) ;
9422: LD_ADDR_VAR 0 7
9426: PUSH
9427: LD_VAR 0 6
9431: PPUSH
9432: CALL_OW 312
9436: ST_TO_ADDR
// if j then
9437: LD_VAR 0 7
9441: IFFALSE 9471
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9443: LD_ADDR_VAR 0 10
9447: PUSH
9448: LD_VAR 0 10
9452: PUSH
9453: LD_VAR 0 7
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: CALL_OW 259
9465: PUSH
9466: LD_INT 3
9468: MUL
9469: MUL
9470: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9471: LD_VAR 0 6
9475: PPUSH
9476: CALL_OW 264
9480: PUSH
9481: LD_INT 5
9483: PUSH
9484: LD_INT 6
9486: PUSH
9487: LD_INT 46
9489: PUSH
9490: LD_INT 44
9492: PUSH
9493: LD_INT 47
9495: PUSH
9496: LD_INT 45
9498: PUSH
9499: LD_INT 28
9501: PUSH
9502: LD_INT 7
9504: PUSH
9505: LD_INT 27
9507: PUSH
9508: LD_INT 29
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: IN
9523: IFFALSE 9543
9525: PUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: LD_INT 52
9533: PPUSH
9534: CALL_OW 321
9538: PUSH
9539: LD_INT 2
9541: EQUAL
9542: AND
9543: IFFALSE 9560
// bpoints := bpoints * 1.2 ;
9545: LD_ADDR_VAR 0 10
9549: PUSH
9550: LD_VAR 0 10
9554: PUSH
9555: LD_REAL  1.20000000000000E+0000
9558: MUL
9559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9560: LD_VAR 0 6
9564: PPUSH
9565: CALL_OW 264
9569: PUSH
9570: LD_INT 6
9572: PUSH
9573: LD_INT 46
9575: PUSH
9576: LD_INT 47
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: IN
9584: IFFALSE 9601
// bpoints := bpoints * 1.2 ;
9586: LD_ADDR_VAR 0 10
9590: PUSH
9591: LD_VAR 0 10
9595: PUSH
9596: LD_REAL  1.20000000000000E+0000
9599: MUL
9600: ST_TO_ADDR
// end ; unit_building :
9601: GO 9615
9603: LD_INT 3
9605: DOUBLE
9606: EQUAL
9607: IFTRUE 9611
9609: GO 9614
9611: POP
// ; end ;
9612: GO 9615
9614: POP
// for j = 1 to 3 do
9615: LD_ADDR_VAR 0 7
9619: PUSH
9620: DOUBLE
9621: LD_INT 1
9623: DEC
9624: ST_TO_ADDR
9625: LD_INT 3
9627: PUSH
9628: FOR_TO
9629: IFFALSE 9682
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9631: LD_ADDR_VAR 0 5
9635: PUSH
9636: LD_VAR 0 5
9640: PPUSH
9641: LD_VAR 0 7
9645: PPUSH
9646: LD_VAR 0 5
9650: PUSH
9651: LD_VAR 0 7
9655: ARRAY
9656: PUSH
9657: LD_VAR 0 9
9661: PUSH
9662: LD_VAR 0 7
9666: ARRAY
9667: PUSH
9668: LD_VAR 0 10
9672: MUL
9673: PLUS
9674: PPUSH
9675: CALL_OW 1
9679: ST_TO_ADDR
9680: GO 9628
9682: POP
9683: POP
// end ;
9684: GO 8157
9686: POP
9687: POP
// result := Replace ( result , 4 , tmp ) ;
9688: LD_ADDR_VAR 0 5
9692: PUSH
9693: LD_VAR 0 5
9697: PPUSH
9698: LD_INT 4
9700: PPUSH
9701: LD_VAR 0 8
9705: PPUSH
9706: CALL_OW 1
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function DangerAtRange ( unit , range ) ; begin
9716: LD_INT 0
9718: PPUSH
// if not unit then
9719: LD_VAR 0 1
9723: NOT
9724: IFFALSE 9728
// exit ;
9726: GO 9773
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9728: LD_ADDR_VAR 0 3
9732: PUSH
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 255
9742: PPUSH
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 250
9752: PPUSH
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL_OW 251
9762: PPUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: CALL 8007 0 4
9772: ST_TO_ADDR
// end ;
9773: LD_VAR 0 3
9777: RET
// export function DangerInArea ( side , area ) ; begin
9778: LD_INT 0
9780: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9781: LD_ADDR_VAR 0 3
9785: PUSH
9786: LD_VAR 0 2
9790: PPUSH
9791: LD_INT 81
9793: PUSH
9794: LD_VAR 0 1
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PPUSH
9803: CALL_OW 70
9807: ST_TO_ADDR
// end ;
9808: LD_VAR 0 3
9812: RET
// export function IsExtension ( b ) ; begin
9813: LD_INT 0
9815: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9816: LD_ADDR_VAR 0 2
9820: PUSH
9821: LD_VAR 0 1
9825: PUSH
9826: LD_INT 23
9828: PUSH
9829: LD_INT 20
9831: PUSH
9832: LD_INT 22
9834: PUSH
9835: LD_INT 17
9837: PUSH
9838: LD_INT 24
9840: PUSH
9841: LD_INT 21
9843: PUSH
9844: LD_INT 19
9846: PUSH
9847: LD_INT 16
9849: PUSH
9850: LD_INT 25
9852: PUSH
9853: LD_INT 18
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: IN
9868: ST_TO_ADDR
// end ;
9869: LD_VAR 0 2
9873: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
9878: PPUSH
// result := [ ] ;
9879: LD_ADDR_VAR 0 4
9883: PUSH
9884: EMPTY
9885: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9886: LD_ADDR_VAR 0 5
9890: PUSH
9891: LD_VAR 0 2
9895: PPUSH
9896: LD_INT 21
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 70
9910: ST_TO_ADDR
// if not tmp then
9911: LD_VAR 0 5
9915: NOT
9916: IFFALSE 9920
// exit ;
9918: GO 9984
// if checkLink then
9920: LD_VAR 0 3
9924: IFFALSE 9974
// begin for i in tmp do
9926: LD_ADDR_VAR 0 6
9930: PUSH
9931: LD_VAR 0 5
9935: PUSH
9936: FOR_IN
9937: IFFALSE 9972
// if GetBase ( i ) <> base then
9939: LD_VAR 0 6
9943: PPUSH
9944: CALL_OW 274
9948: PUSH
9949: LD_VAR 0 1
9953: NONEQUAL
9954: IFFALSE 9970
// ComLinkToBase ( base , i ) ;
9956: LD_VAR 0 1
9960: PPUSH
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 169
9970: GO 9936
9972: POP
9973: POP
// end ; result := tmp ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_VAR 0 5
9983: ST_TO_ADDR
// end ;
9984: LD_VAR 0 4
9988: RET
// export function ComComplete ( units , b ) ; var i ; begin
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// if not units then
9993: LD_VAR 0 1
9997: NOT
9998: IFFALSE 10002
// exit ;
10000: GO 10092
// for i in units do
10002: LD_ADDR_VAR 0 4
10006: PUSH
10007: LD_VAR 0 1
10011: PUSH
10012: FOR_IN
10013: IFFALSE 10090
// if BuildingStatus ( b ) = bs_build then
10015: LD_VAR 0 2
10019: PPUSH
10020: CALL_OW 461
10024: PUSH
10025: LD_INT 1
10027: EQUAL
10028: IFFALSE 10088
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10030: LD_VAR 0 4
10034: PPUSH
10035: LD_STRING h
10037: PUSH
10038: LD_VAR 0 2
10042: PPUSH
10043: CALL_OW 250
10047: PUSH
10048: LD_VAR 0 2
10052: PPUSH
10053: CALL_OW 251
10057: PUSH
10058: LD_VAR 0 2
10062: PUSH
10063: LD_INT 0
10065: PUSH
10066: LD_INT 0
10068: PUSH
10069: LD_INT 0
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: PPUSH
10084: CALL_OW 446
10088: GO 10012
10090: POP
10091: POP
// end ;
10092: LD_VAR 0 3
10096: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10097: LD_INT 0
10099: PPUSH
10100: PPUSH
10101: PPUSH
10102: PPUSH
10103: PPUSH
10104: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10105: LD_VAR 0 1
10109: NOT
10110: IFTRUE 10127
10112: PUSH
10113: LD_VAR 0 1
10117: PPUSH
10118: CALL_OW 263
10122: PUSH
10123: LD_INT 2
10125: NONEQUAL
10126: OR
10127: IFFALSE 10131
// exit ;
10129: GO 10447
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10131: LD_ADDR_VAR 0 6
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_VAR 0 1
10143: PPUSH
10144: CALL_OW 255
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 2
10155: PUSH
10156: LD_INT 30
10158: PUSH
10159: LD_INT 36
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 34
10168: PUSH
10169: LD_INT 31
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PPUSH
10185: CALL_OW 69
10189: ST_TO_ADDR
// if not tmp then
10190: LD_VAR 0 6
10194: NOT
10195: IFFALSE 10199
// exit ;
10197: GO 10447
// result := [ ] ;
10199: LD_ADDR_VAR 0 2
10203: PUSH
10204: EMPTY
10205: ST_TO_ADDR
// for i in tmp do
10206: LD_ADDR_VAR 0 3
10210: PUSH
10211: LD_VAR 0 6
10215: PUSH
10216: FOR_IN
10217: IFFALSE 10288
// begin t := UnitsInside ( i ) ;
10219: LD_ADDR_VAR 0 4
10223: PUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: CALL_OW 313
10233: ST_TO_ADDR
// if t then
10234: LD_VAR 0 4
10238: IFFALSE 10286
// for j in t do
10240: LD_ADDR_VAR 0 7
10244: PUSH
10245: LD_VAR 0 4
10249: PUSH
10250: FOR_IN
10251: IFFALSE 10284
// result := Replace ( result , result + 1 , j ) ;
10253: LD_ADDR_VAR 0 2
10257: PUSH
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 2
10267: PUSH
10268: LD_INT 1
10270: PLUS
10271: PPUSH
10272: LD_VAR 0 7
10276: PPUSH
10277: CALL_OW 1
10281: ST_TO_ADDR
10282: GO 10250
10284: POP
10285: POP
// end ;
10286: GO 10216
10288: POP
10289: POP
// if not result then
10290: LD_VAR 0 2
10294: NOT
10295: IFFALSE 10299
// exit ;
10297: GO 10447
// mech := result [ 1 ] ;
10299: LD_ADDR_VAR 0 5
10303: PUSH
10304: LD_VAR 0 2
10308: PUSH
10309: LD_INT 1
10311: ARRAY
10312: ST_TO_ADDR
// if result > 1 then
10313: LD_VAR 0 2
10317: PUSH
10318: LD_INT 1
10320: GREATER
10321: IFFALSE 10433
// begin for i = 2 to result do
10323: LD_ADDR_VAR 0 3
10327: PUSH
10328: DOUBLE
10329: LD_INT 2
10331: DEC
10332: ST_TO_ADDR
10333: LD_VAR 0 2
10337: PUSH
10338: FOR_TO
10339: IFFALSE 10431
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10341: LD_ADDR_VAR 0 4
10345: PUSH
10346: LD_VAR 0 2
10350: PUSH
10351: LD_VAR 0 3
10355: ARRAY
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: CALL_OW 259
10364: PUSH
10365: LD_VAR 0 2
10369: PUSH
10370: LD_VAR 0 3
10374: ARRAY
10375: PPUSH
10376: CALL_OW 432
10380: MINUS
10381: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10382: LD_VAR 0 4
10386: PUSH
10387: LD_VAR 0 5
10391: PPUSH
10392: LD_INT 3
10394: PPUSH
10395: CALL_OW 259
10399: PUSH
10400: LD_VAR 0 5
10404: PPUSH
10405: CALL_OW 432
10409: MINUS
10410: GREATEREQUAL
10411: IFFALSE 10429
// mech := result [ i ] ;
10413: LD_ADDR_VAR 0 5
10417: PUSH
10418: LD_VAR 0 2
10422: PUSH
10423: LD_VAR 0 3
10427: ARRAY
10428: ST_TO_ADDR
// end ;
10429: GO 10338
10431: POP
10432: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10433: LD_VAR 0 1
10437: PPUSH
10438: LD_VAR 0 5
10442: PPUSH
10443: CALL_OW 135
// end ;
10447: LD_VAR 0 2
10451: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10452: LD_INT 0
10454: PPUSH
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
10459: PPUSH
10460: PPUSH
10461: PPUSH
10462: PPUSH
10463: PPUSH
10464: PPUSH
10465: PPUSH
10466: PPUSH
// result := [ ] ;
10467: LD_ADDR_VAR 0 7
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10474: LD_VAR 0 1
10478: PPUSH
10479: CALL_OW 266
10483: PUSH
10484: LD_INT 0
10486: PUSH
10487: LD_INT 1
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: IN
10494: NOT
10495: IFFALSE 10499
// exit ;
10497: GO 12139
// if name then
10499: LD_VAR 0 3
10503: IFFALSE 10519
// SetBName ( base_dep , name ) ;
10505: LD_VAR 0 1
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: CALL_OW 500
// base := GetBase ( base_dep ) ;
10519: LD_ADDR_VAR 0 15
10523: PUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: CALL_OW 274
10533: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10534: LD_ADDR_VAR 0 16
10538: PUSH
10539: LD_VAR 0 1
10543: PPUSH
10544: CALL_OW 255
10548: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10549: LD_ADDR_VAR 0 17
10553: PUSH
10554: LD_VAR 0 1
10558: PPUSH
10559: CALL_OW 248
10563: ST_TO_ADDR
// if sources then
10564: LD_VAR 0 5
10568: IFFALSE 10615
// for i = 1 to 3 do
10570: LD_ADDR_VAR 0 8
10574: PUSH
10575: DOUBLE
10576: LD_INT 1
10578: DEC
10579: ST_TO_ADDR
10580: LD_INT 3
10582: PUSH
10583: FOR_TO
10584: IFFALSE 10613
// AddResourceType ( base , i , sources [ i ] ) ;
10586: LD_VAR 0 15
10590: PPUSH
10591: LD_VAR 0 8
10595: PPUSH
10596: LD_VAR 0 5
10600: PUSH
10601: LD_VAR 0 8
10605: ARRAY
10606: PPUSH
10607: CALL_OW 276
10611: GO 10583
10613: POP
10614: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10615: LD_ADDR_VAR 0 18
10619: PUSH
10620: LD_VAR 0 15
10624: PPUSH
10625: LD_VAR 0 2
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: CALL 9874 0 3
10637: ST_TO_ADDR
// InitHc ;
10638: CALL_OW 19
// InitUc ;
10642: CALL_OW 18
// uc_side := side ;
10646: LD_ADDR_OWVAR 20
10650: PUSH
10651: LD_VAR 0 16
10655: ST_TO_ADDR
// uc_nation := nation ;
10656: LD_ADDR_OWVAR 21
10660: PUSH
10661: LD_VAR 0 17
10665: ST_TO_ADDR
// if buildings then
10666: LD_VAR 0 18
10670: IFFALSE 11998
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10672: LD_ADDR_VAR 0 19
10676: PUSH
10677: LD_VAR 0 18
10681: PPUSH
10682: LD_INT 2
10684: PUSH
10685: LD_INT 30
10687: PUSH
10688: LD_INT 29
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 30
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 72
10714: ST_TO_ADDR
// if tmp then
10715: LD_VAR 0 19
10719: IFFALSE 10767
// for i in tmp do
10721: LD_ADDR_VAR 0 8
10725: PUSH
10726: LD_VAR 0 19
10730: PUSH
10731: FOR_IN
10732: IFFALSE 10765
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10734: LD_VAR 0 8
10738: PPUSH
10739: CALL_OW 250
10743: PPUSH
10744: LD_VAR 0 8
10748: PPUSH
10749: CALL_OW 251
10753: PPUSH
10754: LD_VAR 0 16
10758: PPUSH
10759: CALL_OW 441
10763: GO 10731
10765: POP
10766: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10767: LD_VAR 0 18
10771: PPUSH
10772: LD_INT 2
10774: PUSH
10775: LD_INT 30
10777: PUSH
10778: LD_INT 32
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 30
10787: PUSH
10788: LD_INT 33
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 72
10804: IFFALSE 10892
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10806: LD_ADDR_VAR 0 8
10810: PUSH
10811: LD_VAR 0 18
10815: PPUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 32
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 30
10831: PUSH
10832: LD_INT 33
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PPUSH
10844: CALL_OW 72
10848: PUSH
10849: FOR_IN
10850: IFFALSE 10890
// begin if not GetBWeapon ( i ) then
10852: LD_VAR 0 8
10856: PPUSH
10857: CALL_OW 269
10861: NOT
10862: IFFALSE 10888
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10864: LD_VAR 0 8
10868: PPUSH
10869: LD_VAR 0 8
10873: PPUSH
10874: LD_VAR 0 2
10878: PPUSH
10879: CALL 12144 0 2
10883: PPUSH
10884: CALL_OW 431
// end ;
10888: GO 10849
10890: POP
10891: POP
// end ; for i = 1 to personel do
10892: LD_ADDR_VAR 0 8
10896: PUSH
10897: DOUBLE
10898: LD_INT 1
10900: DEC
10901: ST_TO_ADDR
10902: LD_VAR 0 6
10906: PUSH
10907: FOR_TO
10908: IFFALSE 11978
// begin if i > 4 then
10910: LD_VAR 0 8
10914: PUSH
10915: LD_INT 4
10917: GREATER
10918: IFFALSE 10922
// break ;
10920: GO 11978
// case i of 1 :
10922: LD_VAR 0 8
10926: PUSH
10927: LD_INT 1
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10935
10933: GO 11015
10935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10936: LD_ADDR_VAR 0 12
10940: PUSH
10941: LD_VAR 0 18
10945: PPUSH
10946: LD_INT 22
10948: PUSH
10949: LD_VAR 0 16
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 58
10960: PUSH
10961: EMPTY
10962: LIST
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 30
10969: PUSH
10970: LD_INT 32
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 4
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: LD_INT 5
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 72
11012: ST_TO_ADDR
11013: GO 11237
11015: LD_INT 2
11017: DOUBLE
11018: EQUAL
11019: IFTRUE 11023
11021: GO 11085
11023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11024: LD_ADDR_VAR 0 12
11028: PUSH
11029: LD_VAR 0 18
11033: PPUSH
11034: LD_INT 22
11036: PUSH
11037: LD_VAR 0 16
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: LD_INT 0
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 30
11061: PUSH
11062: LD_INT 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 72
11082: ST_TO_ADDR
11083: GO 11237
11085: LD_INT 3
11087: DOUBLE
11088: EQUAL
11089: IFTRUE 11093
11091: GO 11155
11093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11094: LD_ADDR_VAR 0 12
11098: PUSH
11099: LD_VAR 0 18
11103: PPUSH
11104: LD_INT 22
11106: PUSH
11107: LD_VAR 0 16
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 2
11118: PUSH
11119: LD_INT 30
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 30
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 72
11152: ST_TO_ADDR
11153: GO 11237
11155: LD_INT 4
11157: DOUBLE
11158: EQUAL
11159: IFTRUE 11163
11161: GO 11236
11163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11164: LD_ADDR_VAR 0 12
11168: PUSH
11169: LD_VAR 0 18
11173: PPUSH
11174: LD_INT 22
11176: PUSH
11177: LD_VAR 0 16
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: LD_INT 30
11191: PUSH
11192: LD_INT 6
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 30
11201: PUSH
11202: LD_INT 7
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 8
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PPUSH
11229: CALL_OW 72
11233: ST_TO_ADDR
11234: GO 11237
11236: POP
// if i = 1 then
11237: LD_VAR 0 8
11241: PUSH
11242: LD_INT 1
11244: EQUAL
11245: IFFALSE 11356
// begin tmp := [ ] ;
11247: LD_ADDR_VAR 0 19
11251: PUSH
11252: EMPTY
11253: ST_TO_ADDR
// for j in f do
11254: LD_ADDR_VAR 0 9
11258: PUSH
11259: LD_VAR 0 12
11263: PUSH
11264: FOR_IN
11265: IFFALSE 11338
// if GetBType ( j ) = b_bunker then
11267: LD_VAR 0 9
11271: PPUSH
11272: CALL_OW 266
11276: PUSH
11277: LD_INT 32
11279: EQUAL
11280: IFFALSE 11307
// tmp := Insert ( tmp , 1 , j ) else
11282: LD_ADDR_VAR 0 19
11286: PUSH
11287: LD_VAR 0 19
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: LD_VAR 0 9
11299: PPUSH
11300: CALL_OW 2
11304: ST_TO_ADDR
11305: GO 11336
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11307: LD_ADDR_VAR 0 19
11311: PUSH
11312: LD_VAR 0 19
11316: PPUSH
11317: LD_VAR 0 19
11321: PUSH
11322: LD_INT 1
11324: PLUS
11325: PPUSH
11326: LD_VAR 0 9
11330: PPUSH
11331: CALL_OW 2
11335: ST_TO_ADDR
11336: GO 11264
11338: POP
11339: POP
// if tmp then
11340: LD_VAR 0 19
11344: IFFALSE 11356
// f := tmp ;
11346: LD_ADDR_VAR 0 12
11350: PUSH
11351: LD_VAR 0 19
11355: ST_TO_ADDR
// end ; x := personel [ i ] ;
11356: LD_ADDR_VAR 0 13
11360: PUSH
11361: LD_VAR 0 6
11365: PUSH
11366: LD_VAR 0 8
11370: ARRAY
11371: ST_TO_ADDR
// if x = - 1 then
11372: LD_VAR 0 13
11376: PUSH
11377: LD_INT 1
11379: NEG
11380: EQUAL
11381: IFFALSE 11592
// begin for j in f do
11383: LD_ADDR_VAR 0 9
11387: PUSH
11388: LD_VAR 0 12
11392: PUSH
11393: FOR_IN
11394: IFFALSE 11588
// repeat InitHc ;
11396: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11400: LD_VAR 0 9
11404: PPUSH
11405: CALL_OW 266
11409: PUSH
11410: LD_INT 5
11412: EQUAL
11413: IFFALSE 11483
// begin if UnitsInside ( j ) < 3 then
11415: LD_VAR 0 9
11419: PPUSH
11420: CALL_OW 313
11424: PUSH
11425: LD_INT 3
11427: LESS
11428: IFFALSE 11464
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11430: LD_INT 0
11432: PPUSH
11433: LD_INT 5
11435: PUSH
11436: LD_INT 8
11438: PUSH
11439: LD_INT 9
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_VAR 0 17
11451: ARRAY
11452: PPUSH
11453: LD_VAR 0 4
11457: PPUSH
11458: CALL_OW 380
11462: GO 11481
// PrepareHuman ( false , i , skill ) ;
11464: LD_INT 0
11466: PPUSH
11467: LD_VAR 0 8
11471: PPUSH
11472: LD_VAR 0 4
11476: PPUSH
11477: CALL_OW 380
// end else
11481: GO 11500
// PrepareHuman ( false , i , skill ) ;
11483: LD_INT 0
11485: PPUSH
11486: LD_VAR 0 8
11490: PPUSH
11491: LD_VAR 0 4
11495: PPUSH
11496: CALL_OW 380
// un := CreateHuman ;
11500: LD_ADDR_VAR 0 14
11504: PUSH
11505: CALL_OW 44
11509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11510: LD_ADDR_VAR 0 7
11514: PUSH
11515: LD_VAR 0 7
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: LD_VAR 0 14
11527: PPUSH
11528: CALL_OW 2
11532: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11533: LD_VAR 0 14
11537: PPUSH
11538: LD_VAR 0 9
11542: PPUSH
11543: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11547: LD_VAR 0 9
11551: PPUSH
11552: CALL_OW 313
11556: PUSH
11557: LD_INT 6
11559: EQUAL
11560: IFTRUE 11584
11562: PUSH
11563: LD_VAR 0 9
11567: PPUSH
11568: CALL_OW 266
11572: PUSH
11573: LD_INT 32
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: IN
11583: OR
11584: IFFALSE 11396
11586: GO 11393
11588: POP
11589: POP
// end else
11590: GO 11976
// for j = 1 to x do
11592: LD_ADDR_VAR 0 9
11596: PUSH
11597: DOUBLE
11598: LD_INT 1
11600: DEC
11601: ST_TO_ADDR
11602: LD_VAR 0 13
11606: PUSH
11607: FOR_TO
11608: IFFALSE 11974
// begin InitHc ;
11610: CALL_OW 19
// if not f then
11614: LD_VAR 0 12
11618: NOT
11619: IFFALSE 11708
// begin PrepareHuman ( false , i , skill ) ;
11621: LD_INT 0
11623: PPUSH
11624: LD_VAR 0 8
11628: PPUSH
11629: LD_VAR 0 4
11633: PPUSH
11634: CALL_OW 380
// un := CreateHuman ;
11638: LD_ADDR_VAR 0 14
11642: PUSH
11643: CALL_OW 44
11647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11648: LD_ADDR_VAR 0 7
11652: PUSH
11653: LD_VAR 0 7
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: LD_VAR 0 14
11665: PPUSH
11666: CALL_OW 2
11670: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11671: LD_VAR 0 14
11675: PPUSH
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 250
11685: PPUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 251
11695: PPUSH
11696: LD_INT 10
11698: PPUSH
11699: LD_INT 0
11701: PPUSH
11702: CALL_OW 50
// continue ;
11706: GO 11607
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11708: LD_VAR 0 12
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 313
11721: IFFALSE 11749
11723: PUSH
11724: LD_VAR 0 12
11728: PUSH
11729: LD_INT 1
11731: ARRAY
11732: PPUSH
11733: CALL_OW 266
11737: PUSH
11738: LD_INT 32
11740: PUSH
11741: LD_INT 31
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: IN
11748: AND
11749: IFTRUE 11770
11751: PUSH
11752: LD_VAR 0 12
11756: PUSH
11757: LD_INT 1
11759: ARRAY
11760: PPUSH
11761: CALL_OW 313
11765: PUSH
11766: LD_INT 6
11768: EQUAL
11769: OR
11770: IFFALSE 11790
// f := Delete ( f , 1 ) ;
11772: LD_ADDR_VAR 0 12
11776: PUSH
11777: LD_VAR 0 12
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: CALL_OW 3
11789: ST_TO_ADDR
// if not f then
11790: LD_VAR 0 12
11794: NOT
11795: IFFALSE 11813
// begin x := x + 2 ;
11797: LD_ADDR_VAR 0 13
11801: PUSH
11802: LD_VAR 0 13
11806: PUSH
11807: LD_INT 2
11809: PLUS
11810: ST_TO_ADDR
// continue ;
11811: GO 11607
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11813: LD_VAR 0 12
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: CALL_OW 266
11826: PUSH
11827: LD_INT 5
11829: EQUAL
11830: IFFALSE 11904
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11832: LD_VAR 0 12
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: CALL_OW 313
11845: PUSH
11846: LD_INT 3
11848: LESS
11849: IFFALSE 11885
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11851: LD_INT 0
11853: PPUSH
11854: LD_INT 5
11856: PUSH
11857: LD_INT 8
11859: PUSH
11860: LD_INT 9
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: LD_VAR 0 17
11872: ARRAY
11873: PPUSH
11874: LD_VAR 0 4
11878: PPUSH
11879: CALL_OW 380
11883: GO 11902
// PrepareHuman ( false , i , skill ) ;
11885: LD_INT 0
11887: PPUSH
11888: LD_VAR 0 8
11892: PPUSH
11893: LD_VAR 0 4
11897: PPUSH
11898: CALL_OW 380
// end else
11902: GO 11921
// PrepareHuman ( false , i , skill ) ;
11904: LD_INT 0
11906: PPUSH
11907: LD_VAR 0 8
11911: PPUSH
11912: LD_VAR 0 4
11916: PPUSH
11917: CALL_OW 380
// un := CreateHuman ;
11921: LD_ADDR_VAR 0 14
11925: PUSH
11926: CALL_OW 44
11930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11931: LD_ADDR_VAR 0 7
11935: PUSH
11936: LD_VAR 0 7
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: LD_VAR 0 14
11948: PPUSH
11949: CALL_OW 2
11953: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11954: LD_VAR 0 14
11958: PPUSH
11959: LD_VAR 0 12
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: CALL_OW 52
// end ;
11972: GO 11607
11974: POP
11975: POP
// end ;
11976: GO 10907
11978: POP
11979: POP
// result := result ^ buildings ;
11980: LD_ADDR_VAR 0 7
11984: PUSH
11985: LD_VAR 0 7
11989: PUSH
11990: LD_VAR 0 18
11994: ADD
11995: ST_TO_ADDR
// end else
11996: GO 12139
// begin for i = 1 to personel do
11998: LD_ADDR_VAR 0 8
12002: PUSH
12003: DOUBLE
12004: LD_INT 1
12006: DEC
12007: ST_TO_ADDR
12008: LD_VAR 0 6
12012: PUSH
12013: FOR_TO
12014: IFFALSE 12137
// begin if i > 4 then
12016: LD_VAR 0 8
12020: PUSH
12021: LD_INT 4
12023: GREATER
12024: IFFALSE 12028
// break ;
12026: GO 12137
// x := personel [ i ] ;
12028: LD_ADDR_VAR 0 13
12032: PUSH
12033: LD_VAR 0 6
12037: PUSH
12038: LD_VAR 0 8
12042: ARRAY
12043: ST_TO_ADDR
// if x = - 1 then
12044: LD_VAR 0 13
12048: PUSH
12049: LD_INT 1
12051: NEG
12052: EQUAL
12053: IFFALSE 12057
// continue ;
12055: GO 12013
// PrepareHuman ( false , i , skill ) ;
12057: LD_INT 0
12059: PPUSH
12060: LD_VAR 0 8
12064: PPUSH
12065: LD_VAR 0 4
12069: PPUSH
12070: CALL_OW 380
// un := CreateHuman ;
12074: LD_ADDR_VAR 0 14
12078: PUSH
12079: CALL_OW 44
12083: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12084: LD_VAR 0 14
12088: PPUSH
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 250
12098: PPUSH
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 251
12108: PPUSH
12109: LD_INT 10
12111: PPUSH
12112: LD_INT 0
12114: PPUSH
12115: CALL_OW 50
// result := result ^ un ;
12119: LD_ADDR_VAR 0 7
12123: PUSH
12124: LD_VAR 0 7
12128: PUSH
12129: LD_VAR 0 14
12133: ADD
12134: ST_TO_ADDR
// end ;
12135: GO 12013
12137: POP
12138: POP
// end ; end ;
12139: LD_VAR 0 7
12143: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12144: LD_INT 0
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
12157: PPUSH
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
// result := false ;
12162: LD_ADDR_VAR 0 3
12166: PUSH
12167: LD_INT 0
12169: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12170: LD_VAR 0 1
12174: NOT
12175: IFTRUE 12200
12177: PUSH
12178: LD_VAR 0 1
12182: PPUSH
12183: CALL_OW 266
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: LD_INT 33
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: IN
12198: NOT
12199: OR
12200: IFFALSE 12204
// exit ;
12202: GO 13339
// nat := GetNation ( tower ) ;
12204: LD_ADDR_VAR 0 12
12208: PUSH
12209: LD_VAR 0 1
12213: PPUSH
12214: CALL_OW 248
12218: ST_TO_ADDR
// side := GetSide ( tower ) ;
12219: LD_ADDR_VAR 0 16
12223: PUSH
12224: LD_VAR 0 1
12228: PPUSH
12229: CALL_OW 255
12233: ST_TO_ADDR
// x := GetX ( tower ) ;
12234: LD_ADDR_VAR 0 10
12238: PUSH
12239: LD_VAR 0 1
12243: PPUSH
12244: CALL_OW 250
12248: ST_TO_ADDR
// y := GetY ( tower ) ;
12249: LD_ADDR_VAR 0 11
12253: PUSH
12254: LD_VAR 0 1
12258: PPUSH
12259: CALL_OW 251
12263: ST_TO_ADDR
// if not x or not y then
12264: LD_VAR 0 10
12268: NOT
12269: IFTRUE 12278
12271: PUSH
12272: LD_VAR 0 11
12276: NOT
12277: OR
12278: IFFALSE 12282
// exit ;
12280: GO 13339
// weapon := 0 ;
12282: LD_ADDR_VAR 0 18
12286: PUSH
12287: LD_INT 0
12289: ST_TO_ADDR
// fac_list := [ ] ;
12290: LD_ADDR_VAR 0 17
12294: PUSH
12295: EMPTY
12296: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12297: LD_ADDR_VAR 0 6
12301: PUSH
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 274
12311: PPUSH
12312: LD_VAR 0 2
12316: PPUSH
12317: LD_INT 0
12319: PPUSH
12320: CALL 9874 0 3
12324: PPUSH
12325: LD_INT 30
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: ST_TO_ADDR
// if not factories then
12340: LD_VAR 0 6
12344: NOT
12345: IFFALSE 12349
// exit ;
12347: GO 13339
// for i in factories do
12349: LD_ADDR_VAR 0 8
12353: PUSH
12354: LD_VAR 0 6
12358: PUSH
12359: FOR_IN
12360: IFFALSE 12385
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12362: LD_ADDR_VAR 0 17
12366: PUSH
12367: LD_VAR 0 17
12371: PUSH
12372: LD_VAR 0 8
12376: PPUSH
12377: CALL_OW 478
12381: UNION
12382: ST_TO_ADDR
12383: GO 12359
12385: POP
12386: POP
// if not fac_list then
12387: LD_VAR 0 17
12391: NOT
12392: IFFALSE 12396
// exit ;
12394: GO 13339
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12396: LD_ADDR_VAR 0 5
12400: PUSH
12401: LD_INT 4
12403: PUSH
12404: LD_INT 5
12406: PUSH
12407: LD_INT 9
12409: PUSH
12410: LD_INT 10
12412: PUSH
12413: LD_INT 6
12415: PUSH
12416: LD_INT 7
12418: PUSH
12419: LD_INT 11
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 27
12433: PUSH
12434: LD_INT 28
12436: PUSH
12437: LD_INT 26
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 43
12451: PUSH
12452: LD_INT 44
12454: PUSH
12455: LD_INT 46
12457: PUSH
12458: LD_INT 45
12460: PUSH
12461: LD_INT 47
12463: PUSH
12464: LD_INT 49
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_VAR 0 12
12484: ARRAY
12485: ST_TO_ADDR
// list := list isect fac_list ;
12486: LD_ADDR_VAR 0 5
12490: PUSH
12491: LD_VAR 0 5
12495: PUSH
12496: LD_VAR 0 17
12500: ISECT
12501: ST_TO_ADDR
// if not list then
12502: LD_VAR 0 5
12506: NOT
12507: IFFALSE 12511
// exit ;
12509: GO 13339
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12511: LD_VAR 0 12
12515: PUSH
12516: LD_INT 3
12518: EQUAL
12519: IFFALSE 12531
12521: PUSH
12522: LD_INT 49
12524: PUSH
12525: LD_VAR 0 5
12529: IN
12530: AND
12531: IFFALSE 12551
12533: PUSH
12534: LD_INT 31
12536: PPUSH
12537: LD_VAR 0 16
12541: PPUSH
12542: CALL_OW 321
12546: PUSH
12547: LD_INT 2
12549: EQUAL
12550: AND
12551: IFFALSE 12611
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12553: LD_INT 22
12555: PUSH
12556: LD_VAR 0 16
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 35
12567: PUSH
12568: LD_INT 49
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 91
12577: PUSH
12578: LD_VAR 0 1
12582: PUSH
12583: LD_INT 10
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PPUSH
12596: CALL_OW 69
12600: NOT
12601: IFFALSE 12611
// weapon := ru_time_lapser ;
12603: LD_ADDR_VAR 0 18
12607: PUSH
12608: LD_INT 49
12610: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12611: LD_VAR 0 12
12615: PUSH
12616: LD_INT 1
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: IN
12626: IFFALSE 12650
12628: PUSH
12629: LD_INT 11
12631: PUSH
12632: LD_VAR 0 5
12636: IN
12637: IFTRUE 12649
12639: PUSH
12640: LD_INT 30
12642: PUSH
12643: LD_VAR 0 5
12647: IN
12648: OR
12649: AND
12650: IFFALSE 12670
12652: PUSH
12653: LD_INT 6
12655: PPUSH
12656: LD_VAR 0 16
12660: PPUSH
12661: CALL_OW 321
12665: PUSH
12666: LD_INT 2
12668: EQUAL
12669: AND
12670: IFFALSE 12837
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12672: LD_INT 22
12674: PUSH
12675: LD_VAR 0 16
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 2
12686: PUSH
12687: LD_INT 35
12689: PUSH
12690: LD_INT 11
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 35
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 91
12714: PUSH
12715: LD_VAR 0 1
12719: PUSH
12720: LD_INT 18
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: NOT
12738: IFFALSE 12814
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_VAR 0 16
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: LD_INT 32
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 30
12768: PUSH
12769: LD_INT 33
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 91
12783: PUSH
12784: LD_VAR 0 1
12788: PUSH
12789: LD_INT 12
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: PPUSH
12805: CALL_OW 69
12809: PUSH
12810: LD_INT 2
12812: GREATER
12813: AND
12814: IFFALSE 12837
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12816: LD_ADDR_VAR 0 18
12820: PUSH
12821: LD_INT 11
12823: PUSH
12824: LD_INT 30
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_VAR 0 12
12835: ARRAY
12836: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12837: LD_VAR 0 18
12841: NOT
12842: IFFALSE 12862
12844: PUSH
12845: LD_INT 40
12847: PPUSH
12848: LD_VAR 0 16
12852: PPUSH
12853: CALL_OW 321
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: AND
12862: IFFALSE 12898
12864: PUSH
12865: LD_INT 7
12867: PUSH
12868: LD_VAR 0 5
12872: IN
12873: IFTRUE 12885
12875: PUSH
12876: LD_INT 28
12878: PUSH
12879: LD_VAR 0 5
12883: IN
12884: OR
12885: IFTRUE 12897
12887: PUSH
12888: LD_INT 45
12890: PUSH
12891: LD_VAR 0 5
12895: IN
12896: OR
12897: AND
12898: IFFALSE 13152
// begin hex := GetHexInfo ( x , y ) ;
12900: LD_ADDR_VAR 0 4
12904: PUSH
12905: LD_VAR 0 10
12909: PPUSH
12910: LD_VAR 0 11
12914: PPUSH
12915: CALL_OW 546
12919: ST_TO_ADDR
// if hex [ 1 ] then
12920: LD_VAR 0 4
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: IFFALSE 12932
// exit ;
12930: GO 13339
// height := hex [ 2 ] ;
12932: LD_ADDR_VAR 0 15
12936: PUSH
12937: LD_VAR 0 4
12941: PUSH
12942: LD_INT 2
12944: ARRAY
12945: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12946: LD_ADDR_VAR 0 14
12950: PUSH
12951: LD_INT 0
12953: PUSH
12954: LD_INT 2
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: LD_INT 5
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: ST_TO_ADDR
// for i in tmp do
12969: LD_ADDR_VAR 0 8
12973: PUSH
12974: LD_VAR 0 14
12978: PUSH
12979: FOR_IN
12980: IFFALSE 13150
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12982: LD_ADDR_VAR 0 9
12986: PUSH
12987: LD_VAR 0 10
12991: PPUSH
12992: LD_VAR 0 8
12996: PPUSH
12997: LD_INT 5
12999: PPUSH
13000: CALL_OW 272
13004: PUSH
13005: LD_VAR 0 11
13009: PPUSH
13010: LD_VAR 0 8
13014: PPUSH
13015: LD_INT 5
13017: PPUSH
13018: CALL_OW 273
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13027: LD_VAR 0 9
13031: PUSH
13032: LD_INT 1
13034: ARRAY
13035: PPUSH
13036: LD_VAR 0 9
13040: PUSH
13041: LD_INT 2
13043: ARRAY
13044: PPUSH
13045: CALL_OW 488
13049: IFFALSE 13148
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13051: LD_ADDR_VAR 0 4
13055: PUSH
13056: LD_VAR 0 9
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: PPUSH
13065: LD_VAR 0 9
13069: PUSH
13070: LD_INT 2
13072: ARRAY
13073: PPUSH
13074: CALL_OW 546
13078: ST_TO_ADDR
// if hex [ 1 ] then
13079: LD_VAR 0 4
13083: PUSH
13084: LD_INT 1
13086: ARRAY
13087: IFFALSE 13091
// continue ;
13089: GO 12979
// h := hex [ 2 ] ;
13091: LD_ADDR_VAR 0 13
13095: PUSH
13096: LD_VAR 0 4
13100: PUSH
13101: LD_INT 2
13103: ARRAY
13104: ST_TO_ADDR
// if h + 7 < height then
13105: LD_VAR 0 13
13109: PUSH
13110: LD_INT 7
13112: PLUS
13113: PUSH
13114: LD_VAR 0 15
13118: LESS
13119: IFFALSE 13148
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13121: LD_ADDR_VAR 0 18
13125: PUSH
13126: LD_INT 7
13128: PUSH
13129: LD_INT 28
13131: PUSH
13132: LD_INT 45
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: LD_VAR 0 12
13144: ARRAY
13145: ST_TO_ADDR
// break ;
13146: GO 13150
// end ; end ; end ;
13148: GO 12979
13150: POP
13151: POP
// end ; if not weapon then
13152: LD_VAR 0 18
13156: NOT
13157: IFFALSE 13217
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13159: LD_ADDR_VAR 0 5
13163: PUSH
13164: LD_VAR 0 5
13168: PUSH
13169: LD_INT 11
13171: PUSH
13172: LD_INT 30
13174: PUSH
13175: LD_INT 49
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: DIFF
13183: ST_TO_ADDR
// if not list then
13184: LD_VAR 0 5
13188: NOT
13189: IFFALSE 13193
// exit ;
13191: GO 13339
// weapon := list [ rand ( 1 , list ) ] ;
13193: LD_ADDR_VAR 0 18
13197: PUSH
13198: LD_VAR 0 5
13202: PUSH
13203: LD_INT 1
13205: PPUSH
13206: LD_VAR 0 5
13210: PPUSH
13211: CALL_OW 12
13215: ARRAY
13216: ST_TO_ADDR
// end ; if weapon then
13217: LD_VAR 0 18
13221: IFFALSE 13339
// begin tmp := CostOfWeapon ( weapon ) ;
13223: LD_ADDR_VAR 0 14
13227: PUSH
13228: LD_VAR 0 18
13232: PPUSH
13233: CALL_OW 451
13237: ST_TO_ADDR
// j := GetBase ( tower ) ;
13238: LD_ADDR_VAR 0 9
13242: PUSH
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 274
13252: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13253: LD_VAR 0 9
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 275
13265: PUSH
13266: LD_VAR 0 14
13270: PUSH
13271: LD_INT 1
13273: ARRAY
13274: GREATEREQUAL
13275: IFFALSE 13301
13277: PUSH
13278: LD_VAR 0 9
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: CALL_OW 275
13290: PUSH
13291: LD_VAR 0 14
13295: PUSH
13296: LD_INT 2
13298: ARRAY
13299: GREATEREQUAL
13300: AND
13301: IFFALSE 13327
13303: PUSH
13304: LD_VAR 0 9
13308: PPUSH
13309: LD_INT 3
13311: PPUSH
13312: CALL_OW 275
13316: PUSH
13317: LD_VAR 0 14
13321: PUSH
13322: LD_INT 3
13324: ARRAY
13325: GREATEREQUAL
13326: AND
13327: IFFALSE 13339
// result := weapon ;
13329: LD_ADDR_VAR 0 3
13333: PUSH
13334: LD_VAR 0 18
13338: ST_TO_ADDR
// end ; end ;
13339: LD_VAR 0 3
13343: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13344: LD_INT 0
13346: PPUSH
13347: PPUSH
// result := true ;
13348: LD_ADDR_VAR 0 3
13352: PUSH
13353: LD_INT 1
13355: ST_TO_ADDR
// if array1 = array2 then
13356: LD_VAR 0 1
13360: PUSH
13361: LD_VAR 0 2
13365: EQUAL
13366: IFFALSE 13426
// begin for i = 1 to array1 do
13368: LD_ADDR_VAR 0 4
13372: PUSH
13373: DOUBLE
13374: LD_INT 1
13376: DEC
13377: ST_TO_ADDR
13378: LD_VAR 0 1
13382: PUSH
13383: FOR_TO
13384: IFFALSE 13422
// if array1 [ i ] <> array2 [ i ] then
13386: LD_VAR 0 1
13390: PUSH
13391: LD_VAR 0 4
13395: ARRAY
13396: PUSH
13397: LD_VAR 0 2
13401: PUSH
13402: LD_VAR 0 4
13406: ARRAY
13407: NONEQUAL
13408: IFFALSE 13420
// begin result := false ;
13410: LD_ADDR_VAR 0 3
13414: PUSH
13415: LD_INT 0
13417: ST_TO_ADDR
// break ;
13418: GO 13422
// end ;
13420: GO 13383
13422: POP
13423: POP
// end else
13424: GO 13434
// result := false ;
13426: LD_ADDR_VAR 0 3
13430: PUSH
13431: LD_INT 0
13433: ST_TO_ADDR
// end ;
13434: LD_VAR 0 3
13438: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13439: LD_INT 0
13441: PPUSH
13442: PPUSH
// if not array1 or not array2 then
13443: LD_VAR 0 1
13447: NOT
13448: IFTRUE 13457
13450: PUSH
13451: LD_VAR 0 2
13455: NOT
13456: OR
13457: IFFALSE 13461
// exit ;
13459: GO 13525
// result := true ;
13461: LD_ADDR_VAR 0 3
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// for i = 1 to array1 do
13469: LD_ADDR_VAR 0 4
13473: PUSH
13474: DOUBLE
13475: LD_INT 1
13477: DEC
13478: ST_TO_ADDR
13479: LD_VAR 0 1
13483: PUSH
13484: FOR_TO
13485: IFFALSE 13523
// if array1 [ i ] <> array2 [ i ] then
13487: LD_VAR 0 1
13491: PUSH
13492: LD_VAR 0 4
13496: ARRAY
13497: PUSH
13498: LD_VAR 0 2
13502: PUSH
13503: LD_VAR 0 4
13507: ARRAY
13508: NONEQUAL
13509: IFFALSE 13521
// begin result := false ;
13511: LD_ADDR_VAR 0 3
13515: PUSH
13516: LD_INT 0
13518: ST_TO_ADDR
// break ;
13519: GO 13523
// end ;
13521: GO 13484
13523: POP
13524: POP
// end ;
13525: LD_VAR 0 3
13529: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13530: LD_INT 0
13532: PPUSH
13533: PPUSH
13534: PPUSH
// pom := GetBase ( fac ) ;
13535: LD_ADDR_VAR 0 5
13539: PUSH
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL_OW 274
13549: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13550: LD_ADDR_VAR 0 4
13554: PUSH
13555: LD_VAR 0 2
13559: PUSH
13560: LD_INT 1
13562: ARRAY
13563: PPUSH
13564: LD_VAR 0 2
13568: PUSH
13569: LD_INT 2
13571: ARRAY
13572: PPUSH
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 3
13580: ARRAY
13581: PPUSH
13582: LD_VAR 0 2
13586: PUSH
13587: LD_INT 4
13589: ARRAY
13590: PPUSH
13591: CALL_OW 449
13595: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: LD_VAR 0 5
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 275
13613: PUSH
13614: LD_VAR 0 4
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: GREATEREQUAL
13623: IFFALSE 13649
13625: PUSH
13626: LD_VAR 0 5
13630: PPUSH
13631: LD_INT 2
13633: PPUSH
13634: CALL_OW 275
13638: PUSH
13639: LD_VAR 0 4
13643: PUSH
13644: LD_INT 2
13646: ARRAY
13647: GREATEREQUAL
13648: AND
13649: IFFALSE 13675
13651: PUSH
13652: LD_VAR 0 5
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: CALL_OW 275
13664: PUSH
13665: LD_VAR 0 4
13669: PUSH
13670: LD_INT 3
13672: ARRAY
13673: GREATEREQUAL
13674: AND
13675: ST_TO_ADDR
// end ;
13676: LD_VAR 0 3
13680: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13681: LD_INT 0
13683: PPUSH
13684: PPUSH
13685: PPUSH
13686: PPUSH
// pom := GetBase ( building ) ;
13687: LD_ADDR_VAR 0 3
13691: PUSH
13692: LD_VAR 0 1
13696: PPUSH
13697: CALL_OW 274
13701: ST_TO_ADDR
// if not pom then
13702: LD_VAR 0 3
13706: NOT
13707: IFFALSE 13711
// exit ;
13709: GO 13885
// btype := GetBType ( building ) ;
13711: LD_ADDR_VAR 0 5
13715: PUSH
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 266
13725: ST_TO_ADDR
// if btype = b_armoury then
13726: LD_VAR 0 5
13730: PUSH
13731: LD_INT 4
13733: EQUAL
13734: IFFALSE 13744
// btype := b_barracks ;
13736: LD_ADDR_VAR 0 5
13740: PUSH
13741: LD_INT 5
13743: ST_TO_ADDR
// if btype = b_depot then
13744: LD_VAR 0 5
13748: PUSH
13749: LD_INT 0
13751: EQUAL
13752: IFFALSE 13762
// btype := b_warehouse ;
13754: LD_ADDR_VAR 0 5
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// if btype = b_workshop then
13762: LD_VAR 0 5
13766: PUSH
13767: LD_INT 2
13769: EQUAL
13770: IFFALSE 13780
// btype := b_factory ;
13772: LD_ADDR_VAR 0 5
13776: PUSH
13777: LD_INT 3
13779: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13780: LD_ADDR_VAR 0 4
13784: PUSH
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 1
13794: PPUSH
13795: CALL_OW 248
13799: PPUSH
13800: CALL_OW 450
13804: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13805: LD_ADDR_VAR 0 2
13809: PUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 275
13822: PUSH
13823: LD_VAR 0 4
13827: PUSH
13828: LD_INT 1
13830: ARRAY
13831: GREATEREQUAL
13832: IFFALSE 13858
13834: PUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 2
13842: PPUSH
13843: CALL_OW 275
13847: PUSH
13848: LD_VAR 0 4
13852: PUSH
13853: LD_INT 2
13855: ARRAY
13856: GREATEREQUAL
13857: AND
13858: IFFALSE 13884
13860: PUSH
13861: LD_VAR 0 3
13865: PPUSH
13866: LD_INT 3
13868: PPUSH
13869: CALL_OW 275
13873: PUSH
13874: LD_VAR 0 4
13878: PUSH
13879: LD_INT 3
13881: ARRAY
13882: GREATEREQUAL
13883: AND
13884: ST_TO_ADDR
// end ;
13885: LD_VAR 0 2
13889: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13890: LD_INT 0
13892: PPUSH
13893: PPUSH
13894: PPUSH
// pom := GetBase ( building ) ;
13895: LD_ADDR_VAR 0 4
13899: PUSH
13900: LD_VAR 0 1
13904: PPUSH
13905: CALL_OW 274
13909: ST_TO_ADDR
// if not pom then
13910: LD_VAR 0 4
13914: NOT
13915: IFFALSE 13919
// exit ;
13917: GO 14024
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13919: LD_ADDR_VAR 0 5
13923: PUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL_OW 248
13938: PPUSH
13939: CALL_OW 450
13943: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13944: LD_ADDR_VAR 0 3
13948: PUSH
13949: LD_VAR 0 4
13953: PPUSH
13954: LD_INT 1
13956: PPUSH
13957: CALL_OW 275
13961: PUSH
13962: LD_VAR 0 5
13966: PUSH
13967: LD_INT 1
13969: ARRAY
13970: GREATEREQUAL
13971: IFFALSE 13997
13973: PUSH
13974: LD_VAR 0 4
13978: PPUSH
13979: LD_INT 2
13981: PPUSH
13982: CALL_OW 275
13986: PUSH
13987: LD_VAR 0 5
13991: PUSH
13992: LD_INT 2
13994: ARRAY
13995: GREATEREQUAL
13996: AND
13997: IFFALSE 14023
13999: PUSH
14000: LD_VAR 0 4
14004: PPUSH
14005: LD_INT 3
14007: PPUSH
14008: CALL_OW 275
14012: PUSH
14013: LD_VAR 0 5
14017: PUSH
14018: LD_INT 3
14020: ARRAY
14021: GREATEREQUAL
14022: AND
14023: ST_TO_ADDR
// end ;
14024: LD_VAR 0 3
14028: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14029: LD_INT 0
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
14037: PPUSH
14038: PPUSH
14039: PPUSH
14040: PPUSH
14041: PPUSH
// result := false ;
14042: LD_ADDR_VAR 0 8
14046: PUSH
14047: LD_INT 0
14049: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14050: LD_VAR 0 5
14054: NOT
14055: IFTRUE 14064
14057: PUSH
14058: LD_VAR 0 1
14062: NOT
14063: OR
14064: IFTRUE 14073
14066: PUSH
14067: LD_VAR 0 2
14071: NOT
14072: OR
14073: IFTRUE 14082
14075: PUSH
14076: LD_VAR 0 3
14080: NOT
14081: OR
14082: IFFALSE 14086
// exit ;
14084: GO 14912
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14086: LD_ADDR_VAR 0 14
14090: PUSH
14091: LD_VAR 0 1
14095: PPUSH
14096: LD_VAR 0 2
14100: PPUSH
14101: LD_VAR 0 3
14105: PPUSH
14106: LD_VAR 0 4
14110: PPUSH
14111: LD_VAR 0 5
14115: PUSH
14116: LD_INT 1
14118: ARRAY
14119: PPUSH
14120: CALL_OW 248
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL 16193 0 6
14132: ST_TO_ADDR
// if not hexes then
14133: LD_VAR 0 14
14137: NOT
14138: IFFALSE 14142
// exit ;
14140: GO 14912
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14142: LD_ADDR_VAR 0 17
14146: PUSH
14147: LD_VAR 0 5
14151: PPUSH
14152: LD_INT 22
14154: PUSH
14155: LD_VAR 0 13
14159: PPUSH
14160: CALL_OW 255
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 30
14174: PUSH
14175: LD_INT 0
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 30
14184: PUSH
14185: LD_INT 1
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 72
14205: ST_TO_ADDR
// for i = 1 to hexes do
14206: LD_ADDR_VAR 0 9
14210: PUSH
14211: DOUBLE
14212: LD_INT 1
14214: DEC
14215: ST_TO_ADDR
14216: LD_VAR 0 14
14220: PUSH
14221: FOR_TO
14222: IFFALSE 14910
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14224: LD_ADDR_VAR 0 13
14228: PUSH
14229: LD_VAR 0 14
14233: PUSH
14234: LD_VAR 0 9
14238: ARRAY
14239: PUSH
14240: LD_INT 1
14242: ARRAY
14243: PPUSH
14244: LD_VAR 0 14
14248: PUSH
14249: LD_VAR 0 9
14253: ARRAY
14254: PUSH
14255: LD_INT 2
14257: ARRAY
14258: PPUSH
14259: CALL_OW 428
14263: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14264: LD_VAR 0 14
14268: PUSH
14269: LD_VAR 0 9
14273: ARRAY
14274: PUSH
14275: LD_INT 1
14277: ARRAY
14278: PPUSH
14279: LD_VAR 0 14
14283: PUSH
14284: LD_VAR 0 9
14288: ARRAY
14289: PUSH
14290: LD_INT 2
14292: ARRAY
14293: PPUSH
14294: CALL_OW 351
14298: IFTRUE 14337
14300: PUSH
14301: LD_VAR 0 14
14305: PUSH
14306: LD_VAR 0 9
14310: ARRAY
14311: PUSH
14312: LD_INT 1
14314: ARRAY
14315: PPUSH
14316: LD_VAR 0 14
14320: PUSH
14321: LD_VAR 0 9
14325: ARRAY
14326: PUSH
14327: LD_INT 2
14329: ARRAY
14330: PPUSH
14331: CALL_OW 488
14335: NOT
14336: OR
14337: IFTRUE 14354
14339: PUSH
14340: LD_VAR 0 13
14344: PPUSH
14345: CALL_OW 247
14349: PUSH
14350: LD_INT 3
14352: EQUAL
14353: OR
14354: IFFALSE 14360
// exit ;
14356: POP
14357: POP
14358: GO 14912
// if not tmp then
14360: LD_VAR 0 13
14364: NOT
14365: IFFALSE 14369
// continue ;
14367: GO 14221
// result := true ;
14369: LD_ADDR_VAR 0 8
14373: PUSH
14374: LD_INT 1
14376: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14377: LD_VAR 0 6
14381: IFFALSE 14398
14383: PUSH
14384: LD_VAR 0 13
14388: PPUSH
14389: CALL_OW 247
14393: PUSH
14394: LD_INT 2
14396: EQUAL
14397: AND
14398: IFFALSE 14415
14400: PUSH
14401: LD_VAR 0 13
14405: PPUSH
14406: CALL_OW 263
14410: PUSH
14411: LD_INT 1
14413: EQUAL
14414: AND
14415: IFFALSE 14579
// begin if IsDrivenBy ( tmp ) then
14417: LD_VAR 0 13
14421: PPUSH
14422: CALL_OW 311
14426: IFFALSE 14430
// continue ;
14428: GO 14221
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14430: LD_VAR 0 6
14434: PPUSH
14435: LD_INT 3
14437: PUSH
14438: LD_INT 60
14440: PUSH
14441: EMPTY
14442: LIST
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: LD_INT 55
14453: PUSH
14454: EMPTY
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 72
14469: IFFALSE 14577
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14471: LD_ADDR_VAR 0 18
14475: PUSH
14476: LD_VAR 0 6
14480: PPUSH
14481: LD_INT 3
14483: PUSH
14484: LD_INT 60
14486: PUSH
14487: EMPTY
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: LD_INT 55
14499: PUSH
14500: EMPTY
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 72
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: ST_TO_ADDR
// if IsInUnit ( driver ) then
14520: LD_VAR 0 18
14524: PPUSH
14525: CALL_OW 310
14529: IFFALSE 14540
// ComExit ( driver ) ;
14531: LD_VAR 0 18
14535: PPUSH
14536: CALL 40183 0 1
// AddComEnterUnit ( driver , tmp ) ;
14540: LD_VAR 0 18
14544: PPUSH
14545: LD_VAR 0 13
14549: PPUSH
14550: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14554: LD_VAR 0 18
14558: PPUSH
14559: LD_VAR 0 7
14563: PPUSH
14564: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14568: LD_VAR 0 18
14572: PPUSH
14573: CALL_OW 181
// end ; continue ;
14577: GO 14221
// end ; if not cleaners or not tmp in cleaners then
14579: LD_VAR 0 6
14583: NOT
14584: IFTRUE 14599
14586: PUSH
14587: LD_VAR 0 13
14591: PUSH
14592: LD_VAR 0 6
14596: IN
14597: NOT
14598: OR
14599: IFFALSE 14908
// begin if dep then
14601: LD_VAR 0 17
14605: IFFALSE 14741
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14607: LD_ADDR_VAR 0 16
14611: PUSH
14612: LD_VAR 0 17
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: CALL_OW 250
14625: PPUSH
14626: LD_VAR 0 17
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PPUSH
14635: CALL_OW 254
14639: PPUSH
14640: LD_INT 5
14642: PPUSH
14643: CALL_OW 272
14647: PUSH
14648: LD_VAR 0 17
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PPUSH
14657: CALL_OW 251
14661: PPUSH
14662: LD_VAR 0 17
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL_OW 254
14675: PPUSH
14676: LD_INT 5
14678: PPUSH
14679: CALL_OW 273
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14688: LD_VAR 0 16
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 16
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: PPUSH
14706: CALL_OW 488
14710: IFFALSE 14741
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14712: LD_VAR 0 13
14716: PPUSH
14717: LD_VAR 0 16
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 16
14730: PUSH
14731: LD_INT 2
14733: ARRAY
14734: PPUSH
14735: CALL_OW 111
// continue ;
14739: GO 14221
// end ; end ; r := GetDir ( tmp ) ;
14741: LD_ADDR_VAR 0 15
14745: PUSH
14746: LD_VAR 0 13
14750: PPUSH
14751: CALL_OW 254
14755: ST_TO_ADDR
// if r = 5 then
14756: LD_VAR 0 15
14760: PUSH
14761: LD_INT 5
14763: EQUAL
14764: IFFALSE 14774
// r := 0 ;
14766: LD_ADDR_VAR 0 15
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// for j = r to 5 do
14774: LD_ADDR_VAR 0 10
14778: PUSH
14779: DOUBLE
14780: LD_VAR 0 15
14784: DEC
14785: ST_TO_ADDR
14786: LD_INT 5
14788: PUSH
14789: FOR_TO
14790: IFFALSE 14906
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14792: LD_ADDR_VAR 0 11
14796: PUSH
14797: LD_VAR 0 13
14801: PPUSH
14802: CALL_OW 250
14806: PPUSH
14807: LD_VAR 0 10
14811: PPUSH
14812: LD_INT 2
14814: PPUSH
14815: CALL_OW 272
14819: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14820: LD_ADDR_VAR 0 12
14824: PUSH
14825: LD_VAR 0 13
14829: PPUSH
14830: CALL_OW 251
14834: PPUSH
14835: LD_VAR 0 10
14839: PPUSH
14840: LD_INT 2
14842: PPUSH
14843: CALL_OW 273
14847: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14848: LD_VAR 0 11
14852: PPUSH
14853: LD_VAR 0 12
14857: PPUSH
14858: CALL_OW 488
14862: IFFALSE 14881
14864: PUSH
14865: LD_VAR 0 11
14869: PPUSH
14870: LD_VAR 0 12
14874: PPUSH
14875: CALL_OW 428
14879: NOT
14880: AND
14881: IFFALSE 14904
// begin ComMoveXY ( tmp , _x , _y ) ;
14883: LD_VAR 0 13
14887: PPUSH
14888: LD_VAR 0 11
14892: PPUSH
14893: LD_VAR 0 12
14897: PPUSH
14898: CALL_OW 111
// break ;
14902: GO 14906
// end ; end ;
14904: GO 14789
14906: POP
14907: POP
// end ; end ;
14908: GO 14221
14910: POP
14911: POP
// end ;
14912: LD_VAR 0 8
14916: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14917: LD_INT 0
14919: PPUSH
// result := true ;
14920: LD_ADDR_VAR 0 3
14924: PUSH
14925: LD_INT 1
14927: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14928: LD_VAR 0 2
14932: PUSH
14933: LD_INT 24
14935: DOUBLE
14936: EQUAL
14937: IFTRUE 14947
14939: LD_INT 33
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 14972
14947: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14948: LD_ADDR_VAR 0 3
14952: PUSH
14953: LD_INT 32
14955: PPUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 321
14965: PUSH
14966: LD_INT 2
14968: EQUAL
14969: ST_TO_ADDR
14970: GO 15288
14972: LD_INT 20
14974: DOUBLE
14975: EQUAL
14976: IFTRUE 14980
14978: GO 15005
14980: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14981: LD_ADDR_VAR 0 3
14985: PUSH
14986: LD_INT 6
14988: PPUSH
14989: LD_VAR 0 1
14993: PPUSH
14994: CALL_OW 321
14998: PUSH
14999: LD_INT 2
15001: EQUAL
15002: ST_TO_ADDR
15003: GO 15288
15005: LD_INT 22
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15019
15011: LD_INT 36
15013: DOUBLE
15014: EQUAL
15015: IFTRUE 15019
15017: GO 15044
15019: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15020: LD_ADDR_VAR 0 3
15024: PUSH
15025: LD_INT 15
15027: PPUSH
15028: LD_VAR 0 1
15032: PPUSH
15033: CALL_OW 321
15037: PUSH
15038: LD_INT 2
15040: EQUAL
15041: ST_TO_ADDR
15042: GO 15288
15044: LD_INT 30
15046: DOUBLE
15047: EQUAL
15048: IFTRUE 15052
15050: GO 15077
15052: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15053: LD_ADDR_VAR 0 3
15057: PUSH
15058: LD_INT 20
15060: PPUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 321
15070: PUSH
15071: LD_INT 2
15073: EQUAL
15074: ST_TO_ADDR
15075: GO 15288
15077: LD_INT 28
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15091
15083: LD_INT 21
15085: DOUBLE
15086: EQUAL
15087: IFTRUE 15091
15089: GO 15116
15091: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_INT 21
15099: PPUSH
15100: LD_VAR 0 1
15104: PPUSH
15105: CALL_OW 321
15109: PUSH
15110: LD_INT 2
15112: EQUAL
15113: ST_TO_ADDR
15114: GO 15288
15116: LD_INT 16
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15124
15122: GO 15149
15124: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_INT 84
15132: PPUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: CALL_OW 321
15142: PUSH
15143: LD_INT 2
15145: EQUAL
15146: ST_TO_ADDR
15147: GO 15288
15149: LD_INT 19
15151: DOUBLE
15152: EQUAL
15153: IFTRUE 15163
15155: LD_INT 23
15157: DOUBLE
15158: EQUAL
15159: IFTRUE 15163
15161: GO 15188
15163: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15164: LD_ADDR_VAR 0 3
15168: PUSH
15169: LD_INT 83
15171: PPUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 321
15181: PUSH
15182: LD_INT 2
15184: EQUAL
15185: ST_TO_ADDR
15186: GO 15288
15188: LD_INT 17
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15221
15196: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15197: LD_ADDR_VAR 0 3
15201: PUSH
15202: LD_INT 39
15204: PPUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 321
15214: PUSH
15215: LD_INT 2
15217: EQUAL
15218: ST_TO_ADDR
15219: GO 15288
15221: LD_INT 18
15223: DOUBLE
15224: EQUAL
15225: IFTRUE 15229
15227: GO 15254
15229: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15230: LD_ADDR_VAR 0 3
15234: PUSH
15235: LD_INT 40
15237: PPUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 321
15247: PUSH
15248: LD_INT 2
15250: EQUAL
15251: ST_TO_ADDR
15252: GO 15288
15254: LD_INT 27
15256: DOUBLE
15257: EQUAL
15258: IFTRUE 15262
15260: GO 15287
15262: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15263: LD_ADDR_VAR 0 3
15267: PUSH
15268: LD_INT 35
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 321
15280: PUSH
15281: LD_INT 2
15283: EQUAL
15284: ST_TO_ADDR
15285: GO 15288
15287: POP
// end ;
15288: LD_VAR 0 3
15292: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15293: LD_INT 0
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
// result := false ;
15306: LD_ADDR_VAR 0 6
15310: PUSH
15311: LD_INT 0
15313: ST_TO_ADDR
// if btype = b_depot then
15314: LD_VAR 0 2
15318: PUSH
15319: LD_INT 0
15321: EQUAL
15322: IFFALSE 15334
// begin result := true ;
15324: LD_ADDR_VAR 0 6
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// exit ;
15332: GO 16188
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15334: LD_VAR 0 1
15338: NOT
15339: IFTRUE 15364
15341: PUSH
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 266
15351: PUSH
15352: LD_INT 0
15354: PUSH
15355: LD_INT 1
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: IN
15362: NOT
15363: OR
15364: IFTRUE 15373
15366: PUSH
15367: LD_VAR 0 2
15371: NOT
15372: OR
15373: IFTRUE 15409
15375: PUSH
15376: LD_VAR 0 5
15380: PUSH
15381: LD_INT 0
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: LD_INT 2
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: LD_INT 5
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: IN
15407: NOT
15408: OR
15409: IFTRUE 15428
15411: PUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: LD_VAR 0 4
15421: PPUSH
15422: CALL_OW 488
15426: NOT
15427: OR
15428: IFFALSE 15432
// exit ;
15430: GO 16188
// side := GetSide ( depot ) ;
15432: LD_ADDR_VAR 0 9
15436: PUSH
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 255
15446: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15447: LD_VAR 0 9
15451: PPUSH
15452: LD_VAR 0 2
15456: PPUSH
15457: CALL 14917 0 2
15461: NOT
15462: IFFALSE 15466
// exit ;
15464: GO 16188
// pom := GetBase ( depot ) ;
15466: LD_ADDR_VAR 0 10
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 274
15480: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15481: LD_ADDR_VAR 0 11
15485: PUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 248
15500: PPUSH
15501: CALL_OW 450
15505: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15506: LD_VAR 0 10
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: CALL_OW 275
15518: PUSH
15519: LD_VAR 0 11
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: GREATEREQUAL
15528: IFFALSE 15554
15530: PUSH
15531: LD_VAR 0 10
15535: PPUSH
15536: LD_INT 2
15538: PPUSH
15539: CALL_OW 275
15543: PUSH
15544: LD_VAR 0 11
15548: PUSH
15549: LD_INT 2
15551: ARRAY
15552: GREATEREQUAL
15553: AND
15554: IFFALSE 15580
15556: PUSH
15557: LD_VAR 0 10
15561: PPUSH
15562: LD_INT 3
15564: PPUSH
15565: CALL_OW 275
15569: PUSH
15570: LD_VAR 0 11
15574: PUSH
15575: LD_INT 3
15577: ARRAY
15578: GREATEREQUAL
15579: AND
15580: NOT
15581: IFFALSE 15585
// exit ;
15583: GO 16188
// if GetBType ( depot ) = b_depot then
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 266
15594: PUSH
15595: LD_INT 0
15597: EQUAL
15598: IFFALSE 15610
// dist := 28 else
15600: LD_ADDR_VAR 0 14
15604: PUSH
15605: LD_INT 28
15607: ST_TO_ADDR
15608: GO 15618
// dist := 36 ;
15610: LD_ADDR_VAR 0 14
15614: PUSH
15615: LD_INT 36
15617: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15618: LD_VAR 0 1
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_VAR 0 4
15632: PPUSH
15633: CALL_OW 297
15637: PUSH
15638: LD_VAR 0 14
15642: GREATER
15643: IFFALSE 15647
// exit ;
15645: GO 16188
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15647: LD_ADDR_VAR 0 12
15651: PUSH
15652: LD_VAR 0 2
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_VAR 0 4
15666: PPUSH
15667: LD_VAR 0 5
15671: PPUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: CALL_OW 248
15681: PPUSH
15682: LD_INT 0
15684: PPUSH
15685: CALL 16193 0 6
15689: ST_TO_ADDR
// if not hexes then
15690: LD_VAR 0 12
15694: NOT
15695: IFFALSE 15699
// exit ;
15697: GO 16188
// hex := GetHexInfo ( x , y ) ;
15699: LD_ADDR_VAR 0 15
15703: PUSH
15704: LD_VAR 0 3
15708: PPUSH
15709: LD_VAR 0 4
15713: PPUSH
15714: CALL_OW 546
15718: ST_TO_ADDR
// if hex [ 1 ] then
15719: LD_VAR 0 15
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: IFFALSE 15731
// exit ;
15729: GO 16188
// height := hex [ 2 ] ;
15731: LD_ADDR_VAR 0 13
15735: PUSH
15736: LD_VAR 0 15
15740: PUSH
15741: LD_INT 2
15743: ARRAY
15744: ST_TO_ADDR
// for i = 1 to hexes do
15745: LD_ADDR_VAR 0 7
15749: PUSH
15750: DOUBLE
15751: LD_INT 1
15753: DEC
15754: ST_TO_ADDR
15755: LD_VAR 0 12
15759: PUSH
15760: FOR_TO
15761: IFFALSE 16105
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15763: LD_VAR 0 12
15767: PUSH
15768: LD_VAR 0 7
15772: ARRAY
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: PPUSH
15778: LD_VAR 0 12
15782: PUSH
15783: LD_VAR 0 7
15787: ARRAY
15788: PUSH
15789: LD_INT 2
15791: ARRAY
15792: PPUSH
15793: CALL_OW 488
15797: NOT
15798: IFTRUE 15840
15800: PUSH
15801: LD_VAR 0 12
15805: PUSH
15806: LD_VAR 0 7
15810: ARRAY
15811: PUSH
15812: LD_INT 1
15814: ARRAY
15815: PPUSH
15816: LD_VAR 0 12
15820: PUSH
15821: LD_VAR 0 7
15825: ARRAY
15826: PUSH
15827: LD_INT 2
15829: ARRAY
15830: PPUSH
15831: CALL_OW 428
15835: PUSH
15836: LD_INT 0
15838: GREATER
15839: OR
15840: IFTRUE 15878
15842: PUSH
15843: LD_VAR 0 12
15847: PUSH
15848: LD_VAR 0 7
15852: ARRAY
15853: PUSH
15854: LD_INT 1
15856: ARRAY
15857: PPUSH
15858: LD_VAR 0 12
15862: PUSH
15863: LD_VAR 0 7
15867: ARRAY
15868: PUSH
15869: LD_INT 2
15871: ARRAY
15872: PPUSH
15873: CALL_OW 351
15877: OR
15878: IFFALSE 15884
// exit ;
15880: POP
15881: POP
15882: GO 16188
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15884: LD_ADDR_VAR 0 8
15888: PUSH
15889: LD_VAR 0 12
15893: PUSH
15894: LD_VAR 0 7
15898: ARRAY
15899: PUSH
15900: LD_INT 1
15902: ARRAY
15903: PPUSH
15904: LD_VAR 0 12
15908: PUSH
15909: LD_VAR 0 7
15913: ARRAY
15914: PUSH
15915: LD_INT 2
15917: ARRAY
15918: PPUSH
15919: CALL_OW 546
15923: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15924: LD_VAR 0 8
15928: PUSH
15929: LD_INT 1
15931: ARRAY
15932: IFTRUE 15954
15934: PUSH
15935: LD_VAR 0 8
15939: PUSH
15940: LD_INT 2
15942: ARRAY
15943: PUSH
15944: LD_VAR 0 13
15948: PUSH
15949: LD_INT 2
15951: PLUS
15952: GREATER
15953: OR
15954: IFTRUE 15976
15956: PUSH
15957: LD_VAR 0 8
15961: PUSH
15962: LD_INT 2
15964: ARRAY
15965: PUSH
15966: LD_VAR 0 13
15970: PUSH
15971: LD_INT 2
15973: MINUS
15974: LESS
15975: OR
15976: IFTRUE 16044
15978: PUSH
15979: LD_VAR 0 8
15983: PUSH
15984: LD_INT 3
15986: ARRAY
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: LD_INT 8
15993: PUSH
15994: LD_INT 9
15996: PUSH
15997: LD_INT 10
15999: PUSH
16000: LD_INT 11
16002: PUSH
16003: LD_INT 12
16005: PUSH
16006: LD_INT 13
16008: PUSH
16009: LD_INT 16
16011: PUSH
16012: LD_INT 17
16014: PUSH
16015: LD_INT 18
16017: PUSH
16018: LD_INT 19
16020: PUSH
16021: LD_INT 20
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: IN
16042: NOT
16043: OR
16044: IFTRUE 16057
16046: PUSH
16047: LD_VAR 0 8
16051: PUSH
16052: LD_INT 5
16054: ARRAY
16055: NOT
16056: OR
16057: IFTRUE 16097
16059: PUSH
16060: LD_VAR 0 8
16064: PUSH
16065: LD_INT 6
16067: ARRAY
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: LD_INT 2
16074: PUSH
16075: LD_INT 7
16077: PUSH
16078: LD_INT 9
16080: PUSH
16081: LD_INT 10
16083: PUSH
16084: LD_INT 11
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: IN
16095: NOT
16096: OR
16097: IFFALSE 16103
// exit ;
16099: POP
16100: POP
16101: GO 16188
// end ;
16103: GO 15760
16105: POP
16106: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16107: LD_VAR 0 9
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_VAR 0 4
16121: PPUSH
16122: LD_INT 20
16124: PPUSH
16125: CALL 8007 0 4
16129: PUSH
16130: LD_INT 4
16132: ARRAY
16133: IFFALSE 16137
// exit ;
16135: GO 16188
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16137: LD_VAR 0 2
16141: PUSH
16142: LD_INT 29
16144: PUSH
16145: LD_INT 30
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: IN
16152: IFFALSE 16176
16154: PUSH
16155: LD_VAR 0 3
16159: PPUSH
16160: LD_VAR 0 4
16164: PPUSH
16165: LD_VAR 0 9
16169: PPUSH
16170: CALL_OW 440
16174: NOT
16175: AND
16176: IFFALSE 16180
// exit ;
16178: GO 16188
// result := true ;
16180: LD_ADDR_VAR 0 6
16184: PUSH
16185: LD_INT 1
16187: ST_TO_ADDR
// end ;
16188: LD_VAR 0 6
16192: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16193: LD_INT 0
16195: PPUSH
16196: PPUSH
16197: PPUSH
16198: PPUSH
16199: PPUSH
16200: PPUSH
16201: PPUSH
16202: PPUSH
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
16237: PPUSH
16238: PPUSH
16239: PPUSH
16240: PPUSH
16241: PPUSH
16242: PPUSH
16243: PPUSH
16244: PPUSH
16245: PPUSH
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
// result = [ ] ;
16253: LD_ADDR_VAR 0 7
16257: PUSH
16258: EMPTY
16259: ST_TO_ADDR
// temp_list = [ ] ;
16260: LD_ADDR_VAR 0 9
16264: PUSH
16265: EMPTY
16266: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16267: LD_VAR 0 4
16271: PUSH
16272: LD_INT 0
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: LD_INT 3
16283: PUSH
16284: LD_INT 4
16286: PUSH
16287: LD_INT 5
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: IN
16298: NOT
16299: IFTRUE 16342
16301: PUSH
16302: LD_VAR 0 1
16306: PUSH
16307: LD_INT 0
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: IN
16317: IFFALSE 16341
16319: PUSH
16320: LD_VAR 0 5
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: LD_INT 2
16330: PUSH
16331: LD_INT 3
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: IN
16339: NOT
16340: AND
16341: OR
16342: IFFALSE 16346
// exit ;
16344: GO 34745
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16346: LD_VAR 0 1
16350: PUSH
16351: LD_INT 6
16353: PUSH
16354: LD_INT 7
16356: PUSH
16357: LD_INT 8
16359: PUSH
16360: LD_INT 13
16362: PUSH
16363: LD_INT 12
16365: PUSH
16366: LD_INT 15
16368: PUSH
16369: LD_INT 11
16371: PUSH
16372: LD_INT 14
16374: PUSH
16375: LD_INT 10
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: IN
16389: IFFALSE 16399
// btype = b_lab ;
16391: LD_ADDR_VAR 0 1
16395: PUSH
16396: LD_INT 6
16398: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16399: LD_VAR 0 6
16403: PUSH
16404: LD_INT 0
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: LIST
16417: IN
16418: NOT
16419: IFTRUE 16487
16421: PUSH
16422: LD_VAR 0 1
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 3
16438: PUSH
16439: LD_INT 6
16441: PUSH
16442: LD_INT 36
16444: PUSH
16445: LD_INT 4
16447: PUSH
16448: LD_INT 5
16450: PUSH
16451: LD_INT 31
16453: PUSH
16454: LD_INT 32
16456: PUSH
16457: LD_INT 33
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: IN
16473: NOT
16474: IFFALSE 16486
16476: PUSH
16477: LD_VAR 0 6
16481: PUSH
16482: LD_INT 1
16484: EQUAL
16485: AND
16486: OR
16487: IFTRUE 16519
16489: PUSH
16490: LD_VAR 0 1
16494: PUSH
16495: LD_INT 2
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: IN
16505: NOT
16506: IFFALSE 16518
16508: PUSH
16509: LD_VAR 0 6
16513: PUSH
16514: LD_INT 2
16516: EQUAL
16517: AND
16518: OR
16519: IFFALSE 16529
// mode = 0 ;
16521: LD_ADDR_VAR 0 6
16525: PUSH
16526: LD_INT 0
16528: ST_TO_ADDR
// case mode of 0 :
16529: LD_VAR 0 6
16533: PUSH
16534: LD_INT 0
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 27995
16542: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16543: LD_ADDR_VAR 0 11
16547: PUSH
16548: LD_INT 0
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 0
16560: PUSH
16561: LD_INT 1
16563: NEG
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 1
16601: NEG
16602: PUSH
16603: LD_INT 0
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: NEG
16613: PUSH
16614: LD_INT 1
16616: NEG
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 1
16624: NEG
16625: PUSH
16626: LD_INT 2
16628: NEG
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 2
16639: NEG
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: LD_INT 1
16650: NEG
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 1
16678: NEG
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: LD_INT 3
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 3
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 1
16709: NEG
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16736: LD_ADDR_VAR 0 12
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 0
16753: PUSH
16754: LD_INT 1
16756: NEG
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 0
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: NEG
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: LD_INT 1
16809: NEG
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 1
16817: PUSH
16818: LD_INT 1
16820: NEG
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 2
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 2
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 1
16848: NEG
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: NEG
16860: PUSH
16861: LD_INT 0
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 2
16870: NEG
16871: PUSH
16872: LD_INT 1
16874: NEG
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 2
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: NEG
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 3
16904: NEG
16905: PUSH
16906: LD_INT 1
16908: NEG
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16932: LD_ADDR_VAR 0 13
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: LD_INT 0
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 0
16949: PUSH
16950: LD_INT 1
16952: NEG
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 1
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 1
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 1
16990: NEG
16991: PUSH
16992: LD_INT 0
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: NEG
17002: PUSH
17003: LD_INT 1
17005: NEG
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: NEG
17014: PUSH
17015: LD_INT 2
17017: NEG
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 2
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: NEG
17056: PUSH
17057: LD_INT 1
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 2
17067: NEG
17068: PUSH
17069: LD_INT 2
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: NEG
17080: PUSH
17081: LD_INT 3
17083: NEG
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 3
17091: NEG
17092: PUSH
17093: LD_INT 2
17095: NEG
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 3
17103: NEG
17104: PUSH
17105: LD_INT 3
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17131: LD_ADDR_VAR 0 14
17135: PUSH
17136: LD_INT 0
17138: PUSH
17139: LD_INT 0
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: LD_INT 1
17151: NEG
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: LD_INT 0
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 0
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 1
17189: NEG
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 1
17200: NEG
17201: PUSH
17202: LD_INT 1
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: NEG
17213: PUSH
17214: LD_INT 2
17216: NEG
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 2
17227: NEG
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: LD_INT 1
17238: NEG
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: LD_INT 2
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: NEG
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: LD_INT 3
17281: NEG
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: LD_INT 3
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: LD_INT 2
17303: NEG
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17327: LD_ADDR_VAR 0 15
17331: PUSH
17332: LD_INT 0
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: LD_INT 1
17347: NEG
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 1
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 1
17396: NEG
17397: PUSH
17398: LD_INT 1
17400: NEG
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: LD_INT 1
17411: NEG
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 2
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 2
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 1
17439: NEG
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 2
17450: NEG
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: NEG
17462: PUSH
17463: LD_INT 1
17465: NEG
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: LD_INT 1
17476: NEG
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 0
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 1
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17520: LD_ADDR_VAR 0 16
17524: PUSH
17525: LD_INT 0
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 1
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 1
17578: NEG
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 1
17601: NEG
17602: PUSH
17603: LD_INT 2
17605: NEG
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 2
17643: NEG
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: NEG
17656: PUSH
17657: LD_INT 2
17659: NEG
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 3
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17713: LD_ADDR_VAR 0 17
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 1
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 0
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 1
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: LD_INT 2
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 2
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: LD_INT 0
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 2
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 0
17868: PUSH
17869: LD_INT 2
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 2
17889: NEG
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: LD_INT 2
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17943: LD_ADDR_VAR 0 18
17947: PUSH
17948: LD_INT 0
17950: PUSH
17951: LD_INT 0
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: LD_INT 1
17963: NEG
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: LD_INT 1
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: NEG
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: LD_INT 2
18028: NEG
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: LD_INT 2
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 2
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: LD_INT 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 0
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 2
18119: NEG
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: LD_INT 2
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18173: LD_ADDR_VAR 0 19
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 1
18193: NEG
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: NEG
18232: PUSH
18233: LD_INT 0
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: LD_INT 2
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 2
18269: NEG
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: LD_INT 2
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 1
18338: NEG
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 2
18349: NEG
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: LD_INT 1
18364: NEG
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: LD_INT 2
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18403: LD_ADDR_VAR 0 20
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 1
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 2
18488: NEG
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 2
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 0
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 2
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: NEG
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: NEG
18580: PUSH
18581: LD_INT 0
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: LD_INT 2
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18633: LD_ADDR_VAR 0 21
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 0
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: NEG
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: NEG
18715: PUSH
18716: LD_INT 2
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: LD_INT 2
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: NEG
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: NEG
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 2
18832: NEG
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18863: LD_ADDR_VAR 0 22
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: LD_INT 1
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: NEG
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: LD_INT 2
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 2
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: LD_INT 2
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: NEG
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: NEG
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 2
19062: NEG
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19093: LD_ADDR_VAR 0 23
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 1
19162: NEG
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 0
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: NEG
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 2
19269: NEG
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: NEG
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 2
19292: NEG
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: NEG
19305: PUSH
19306: LD_INT 3
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 3
19320: NEG
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: LD_INT 2
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19373: LD_ADDR_VAR 0 24
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 2
19458: NEG
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: NEG
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: NEG
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 3
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 3
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19649: LD_ADDR_VAR 0 25
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: NEG
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: LD_INT 1
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 0
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: NEG
19849: PUSH
19850: LD_INT 2
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 3
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 3
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: LD_INT 3
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 3
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19923: LD_ADDR_VAR 0 26
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 1
19992: NEG
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: LD_INT 2
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: NEG
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 3
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: LD_INT 3
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: NEG
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20199: LD_ADDR_VAR 0 27
20203: PUSH
20204: LD_INT 0
20206: PUSH
20207: LD_INT 0
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: LD_INT 0
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: LD_INT 2
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: LD_INT 2
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 2
20375: NEG
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 2
20386: NEG
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: NEG
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: NEG
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 3
20432: NEG
20433: PUSH
20434: LD_INT 1
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 3
20444: NEG
20445: PUSH
20446: LD_INT 2
20448: NEG
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20479: LD_ADDR_VAR 0 28
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 1
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: NEG
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: NEG
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: NEG
20679: PUSH
20680: LD_INT 2
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: NEG
20691: PUSH
20692: LD_INT 3
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: LD_INT 3
20706: NEG
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 3
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 3
20726: NEG
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20761: LD_ADDR_VAR 0 29
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 1
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: NEG
20843: PUSH
20844: LD_INT 2
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: NEG
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 2
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 3
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 3
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 3
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 3
21005: NEG
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21040: LD_ADDR_VAR 0 30
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 2
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 2
21206: NEG
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: LD_INT 3
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 2
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 3
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 3
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 3
21283: NEG
21284: PUSH
21285: LD_INT 1
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21318: LD_ADDR_VAR 0 31
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: LD_INT 2
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: NEG
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 2
21483: NEG
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: LD_INT 2
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: LD_INT 3
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 3
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 3
21561: NEG
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21596: LD_ADDR_VAR 0 32
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 2
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 2
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: NEG
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: NEG
21786: PUSH
21787: LD_INT 3
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 3
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 3
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 3
21839: NEG
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21874: LD_ADDR_VAR 0 33
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 0
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 1
21932: NEG
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: LD_INT 2
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: NEG
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: NEG
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 2
22040: NEG
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: NEG
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 2
22064: NEG
22065: PUSH
22066: LD_INT 3
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 3
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 3
22118: NEG
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22153: LD_ADDR_VAR 0 34
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 2
22249: NEG
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: NEG
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: LD_INT 2
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: NEG
22345: PUSH
22346: LD_INT 3
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: LD_INT 2
22359: NEG
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 3
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22433: LD_ADDR_VAR 0 35
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: NEG
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22545: LD_ADDR_VAR 0 36
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 2
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22657: LD_ADDR_VAR 0 37
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: NEG
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: NEG
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 1
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22769: LD_ADDR_VAR 0 38
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: LD_INT 1
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22881: LD_ADDR_VAR 0 39
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22993: LD_ADDR_VAR 0 40
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23105: LD_ADDR_VAR 0 41
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: LD_INT 1
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 2
23295: NEG
23296: PUSH
23297: LD_INT 3
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 1
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 3
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: PUSH
23359: LD_INT 3
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 2
23368: NEG
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 3
23379: NEG
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 3
23402: NEG
23403: PUSH
23404: LD_INT 2
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 3
23414: NEG
23415: PUSH
23416: LD_INT 3
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23455: LD_ADDR_VAR 0 42
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 2
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: NEG
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 2
23645: NEG
23646: PUSH
23647: LD_INT 3
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: LD_INT 3
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 3
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 2
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 3
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: LD_INT 3
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 3
23752: NEG
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 3
23764: NEG
23765: PUSH
23766: LD_INT 3
23768: NEG
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23805: LD_ADDR_VAR 0 43
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: NEG
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 2
23971: NEG
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: NEG
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 3
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 3
24009: NEG
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 2
24090: NEG
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 3
24101: NEG
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 3
24112: NEG
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24153: LD_ADDR_VAR 0 44
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 2
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: NEG
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: NEG
24344: PUSH
24345: LD_INT 3
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 1
24358: NEG
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 3
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 3
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 3
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 2
24416: NEG
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 3
24427: NEG
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 3
24438: NEG
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 3
24450: NEG
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 3
24462: NEG
24463: PUSH
24464: LD_INT 3
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24503: LD_ADDR_VAR 0 45
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: LD_INT 3
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: LD_INT 3
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: LD_INT 3
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 3
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 3
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 3
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 3
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 3
24800: NEG
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 3
24812: NEG
24813: PUSH
24814: LD_INT 3
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24853: LD_ADDR_VAR 0 46
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 3
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 3
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 3
25149: NEG
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 3
25160: NEG
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25201: LD_ADDR_VAR 0 47
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 2
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25352: LD_ADDR_VAR 0 48
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: LD_INT 2
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: LD_INT 2
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 2
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25499: LD_ADDR_VAR 0 49
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25643: LD_ADDR_VAR 0 50
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25787: LD_ADDR_VAR 0 51
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 2
25899: NEG
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25934: LD_ADDR_VAR 0 52
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: NEG
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26085: LD_ADDR_VAR 0 53
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26315: LD_ADDR_VAR 0 54
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26545: LD_ADDR_VAR 0 55
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 2
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26775: LD_ADDR_VAR 0 56
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 2
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: NEG
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27005: LD_ADDR_VAR 0 57
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 2
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: LD_INT 1
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27235: LD_ADDR_VAR 0 58
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 2
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: NEG
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27465: LD_ADDR_VAR 0 59
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27553: LD_ADDR_VAR 0 60
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27641: LD_ADDR_VAR 0 61
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27729: LD_ADDR_VAR 0 62
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27817: LD_ADDR_VAR 0 63
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27905: LD_ADDR_VAR 0 64
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: ST_TO_ADDR
// end ; 1 :
27993: GO 33890
27995: LD_INT 1
27997: DOUBLE
27998: EQUAL
27999: IFTRUE 28003
28001: GO 30626
28003: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28004: LD_ADDR_VAR 0 11
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 3
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 3
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28048: LD_ADDR_VAR 0 12
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 3
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 3
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28089: LD_ADDR_VAR 0 13
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 3
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28129: LD_ADDR_VAR 0 14
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28170: LD_ADDR_VAR 0 15
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: NEG
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 3
28199: NEG
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28214: LD_ADDR_VAR 0 16
28218: PUSH
28219: LD_INT 2
28221: NEG
28222: PUSH
28223: LD_INT 3
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 3
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: LD_INT 3
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28260: LD_ADDR_VAR 0 17
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: LD_INT 3
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 2
28293: NEG
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28304: LD_ADDR_VAR 0 18
28308: PUSH
28309: LD_INT 2
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 3
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 3
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28345: LD_ADDR_VAR 0 19
28349: PUSH
28350: LD_INT 3
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: LD_INT 3
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28385: LD_ADDR_VAR 0 20
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 3
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 3
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28426: LD_ADDR_VAR 0 21
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 3
28444: NEG
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 3
28455: NEG
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28470: LD_ADDR_VAR 0 22
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 3
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 3
28489: NEG
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 3
28501: NEG
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28516: LD_ADDR_VAR 0 23
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 3
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 4
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: LD_INT 3
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28560: LD_ADDR_VAR 0 24
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 4
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28601: LD_ADDR_VAR 0 25
28605: PUSH
28606: LD_INT 3
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 4
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: LD_INT 4
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28641: LD_ADDR_VAR 0 26
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: LD_INT 3
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 4
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28682: LD_ADDR_VAR 0 27
28686: PUSH
28687: LD_INT 3
28689: NEG
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 3
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 4
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28726: LD_ADDR_VAR 0 28
28730: PUSH
28731: LD_INT 3
28733: NEG
28734: PUSH
28735: LD_INT 3
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 3
28745: NEG
28746: PUSH
28747: LD_INT 4
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 4
28757: NEG
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28772: LD_ADDR_VAR 0 29
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 3
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: LD_INT 3
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 4
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: LD_INT 4
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 3
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 5
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 5
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 4
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: LD_INT 6
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 6
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: LD_INT 5
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28927: LD_ADDR_VAR 0 30
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 3
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 3
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 4
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 4
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 4
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 5
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 5
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 5
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 6
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 6
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29070: LD_ADDR_VAR 0 31
29074: PUSH
29075: LD_INT 3
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 3
29087: PUSH
29088: LD_INT 3
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: LD_INT 3
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 4
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 4
29117: PUSH
29118: LD_INT 4
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 3
29127: PUSH
29128: LD_INT 4
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 5
29137: PUSH
29138: LD_INT 4
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 5
29147: PUSH
29148: LD_INT 5
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 4
29157: PUSH
29158: LD_INT 5
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 6
29167: PUSH
29168: LD_INT 5
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 6
29177: PUSH
29178: LD_INT 6
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 5
29187: PUSH
29188: LD_INT 6
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29209: LD_ADDR_VAR 0 32
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: LD_INT 4
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 4
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 5
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: LD_INT 5
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 6
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 6
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: LD_INT 5
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29352: LD_ADDR_VAR 0 33
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 3
29370: NEG
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 3
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 3
29393: NEG
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 4
29404: NEG
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 4
29415: NEG
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 4
29427: NEG
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 5
29438: NEG
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 5
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 5
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 6
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 6
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29507: LD_ADDR_VAR 0 34
29511: PUSH
29512: LD_INT 2
29514: NEG
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 3
29526: NEG
29527: PUSH
29528: LD_INT 2
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 3
29538: NEG
29539: PUSH
29540: LD_INT 3
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: LD_INT 4
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 4
29562: NEG
29563: PUSH
29564: LD_INT 3
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 4
29574: NEG
29575: PUSH
29576: LD_INT 4
29578: NEG
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 4
29586: NEG
29587: PUSH
29588: LD_INT 5
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 5
29598: NEG
29599: PUSH
29600: LD_INT 4
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 5
29610: NEG
29611: PUSH
29612: LD_INT 5
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 5
29622: NEG
29623: PUSH
29624: LD_INT 6
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 6
29634: NEG
29635: PUSH
29636: LD_INT 5
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 6
29646: NEG
29647: PUSH
29648: LD_INT 6
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29670: LD_ADDR_VAR 0 41
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: LD_INT 2
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 3
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29714: LD_ADDR_VAR 0 42
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29755: LD_ADDR_VAR 0 43
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29795: LD_ADDR_VAR 0 44
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29836: LD_ADDR_VAR 0 45
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 3
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29880: LD_ADDR_VAR 0 46
29884: PUSH
29885: LD_INT 2
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: LD_INT 3
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 3
29911: NEG
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29926: LD_ADDR_VAR 0 47
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: LD_INT 3
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29959: LD_ADDR_VAR 0 48
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29990: LD_ADDR_VAR 0 49
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30019: LD_ADDR_VAR 0 50
30023: PUSH
30024: LD_INT 2
30026: PUSH
30027: LD_INT 3
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: LD_INT 3
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30048: LD_ADDR_VAR 0 51
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 2
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30079: LD_ADDR_VAR 0 52
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30112: LD_ADDR_VAR 0 53
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 3
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30156: LD_ADDR_VAR 0 54
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30197: LD_ADDR_VAR 0 55
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30237: LD_ADDR_VAR 0 56
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30278: LD_ADDR_VAR 0 57
30282: PUSH
30283: LD_INT 2
30285: NEG
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 3
30296: NEG
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: NEG
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30322: LD_ADDR_VAR 0 58
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: LD_INT 3
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: NEG
30354: PUSH
30355: LD_INT 3
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30368: LD_ADDR_VAR 0 59
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: LD_INT 2
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30412: LD_ADDR_VAR 0 60
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30453: LD_ADDR_VAR 0 61
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30493: LD_ADDR_VAR 0 62
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30534: LD_ADDR_VAR 0 63
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30578: LD_ADDR_VAR 0 64
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 2
30609: NEG
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
// end ; 2 :
30624: GO 33890
30626: LD_INT 2
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 33889
30634: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30635: LD_ADDR_VAR 0 29
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 5
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 5
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 5
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 4
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: LD_INT 4
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: LD_INT 4
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 4
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: LD_INT 4
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 4
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 5
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 5
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 4
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: LD_INT 3
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 5
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 3
30918: NEG
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: NEG
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 4
30974: NEG
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 4
30985: NEG
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 4
30997: NEG
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 4
31020: NEG
31021: PUSH
31022: LD_INT 4
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 4
31032: NEG
31033: PUSH
31034: LD_INT 5
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: LD_INT 3
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 4
31068: NEG
31069: PUSH
31070: LD_INT 3
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 5
31080: NEG
31081: PUSH
31082: LD_INT 4
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 5
31092: NEG
31093: PUSH
31094: LD_INT 5
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: LD_INT 5
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 5
31116: NEG
31117: PUSH
31118: LD_INT 3
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31173: LD_ADDR_VAR 0 30
31177: PUSH
31178: LD_INT 4
31180: PUSH
31181: LD_INT 4
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 4
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 5
31200: PUSH
31201: LD_INT 4
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 5
31210: PUSH
31211: LD_INT 5
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 4
31220: PUSH
31221: LD_INT 5
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: LD_INT 4
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 5
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 5
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 4
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: NEG
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 4
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 4
31363: NEG
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 4
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 4
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 5
31419: NEG
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 5
31430: NEG
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 5
31442: NEG
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: LD_INT 4
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: LD_INT 3
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: LD_INT 2
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 3
31513: NEG
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 4
31525: NEG
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 4
31537: NEG
31538: PUSH
31539: LD_INT 4
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 4
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 4
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 4
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: LD_INT 5
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: LD_INT 4
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 3
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 3
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: LD_INT 5
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 5
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31720: LD_ADDR_VAR 0 31
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: LD_INT 4
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 5
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: NEG
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 4
31876: NEG
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 4
31887: NEG
31888: PUSH
31889: LD_INT 1
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 4
31899: NEG
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 4
31922: NEG
31923: PUSH
31924: LD_INT 4
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 4
31934: NEG
31935: PUSH
31936: LD_INT 5
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 3
31946: NEG
31947: PUSH
31948: LD_INT 4
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: LD_INT 3
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 4
31970: NEG
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 5
31982: NEG
31983: PUSH
31984: LD_INT 4
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 5
31994: NEG
31995: PUSH
31996: LD_INT 5
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: LD_INT 5
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 5
32018: NEG
32019: PUSH
32020: LD_INT 3
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 3
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 4
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: LD_INT 3
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: LD_INT 4
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 4
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 4
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 4
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 5
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 5
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 4
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 5
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32270: LD_ADDR_VAR 0 32
32274: PUSH
32275: LD_INT 4
32277: NEG
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 4
32288: NEG
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 3
32311: NEG
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 4
32322: NEG
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 5
32333: NEG
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 5
32344: NEG
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 5
32356: NEG
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 3
32368: NEG
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 3
32379: NEG
32380: PUSH
32381: LD_INT 3
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: LD_INT 4
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: NEG
32404: PUSH
32405: LD_INT 3
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 3
32427: NEG
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 4
32439: NEG
32440: PUSH
32441: LD_INT 3
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 4
32451: NEG
32452: PUSH
32453: LD_INT 4
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 4
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 4
32475: NEG
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 4
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 5
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 4
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: LD_INT 4
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: LD_INT 5
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 3
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: LD_INT 5
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 3
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 4
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 4
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 4
32682: PUSH
32683: LD_INT 4
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 5
32702: PUSH
32703: LD_INT 4
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: LD_INT 5
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 4
32722: PUSH
32723: LD_INT 5
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: LD_INT 4
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 5
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 5
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32817: LD_ADDR_VAR 0 33
32821: PUSH
32822: LD_INT 4
32824: NEG
32825: PUSH
32826: LD_INT 4
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 4
32836: NEG
32837: PUSH
32838: LD_INT 5
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 3
32848: NEG
32849: PUSH
32850: LD_INT 4
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 3
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 4
32872: NEG
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 5
32884: NEG
32885: PUSH
32886: LD_INT 4
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 5
32896: NEG
32897: PUSH
32898: LD_INT 5
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 3
32908: NEG
32909: PUSH
32910: LD_INT 5
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 5
32920: NEG
32921: PUSH
32922: LD_INT 3
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 4
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 3
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 4
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: LD_INT 4
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 4
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 5
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 5
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 4
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 5
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 4
33147: PUSH
33148: LD_INT 3
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 4
33157: PUSH
33158: LD_INT 4
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: LD_INT 4
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 4
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 4
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 4
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: LD_INT 5
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: LD_INT 3
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33355: LD_ADDR_VAR 0 34
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 4
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 5
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 4
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 3
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 3
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: LD_INT 4
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: LD_INT 5
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 3
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: LD_INT 5
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 4
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: LD_INT 2
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 4
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: LD_INT 4
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 4
33567: PUSH
33568: LD_INT 3
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 5
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 4
33597: PUSH
33598: LD_INT 5
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 4
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 3
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 5
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 3
33637: PUSH
33638: LD_INT 5
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 4
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 4
33740: NEG
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 5
33796: NEG
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 5
33807: NEG
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 5
33819: NEG
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// end ; end ;
33887: GO 33890
33889: POP
// case btype of b_depot , b_warehouse :
33890: LD_VAR 0 1
33894: PUSH
33895: LD_INT 0
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33909
33901: LD_INT 1
33903: DOUBLE
33904: EQUAL
33905: IFTRUE 33909
33907: GO 34110
33909: POP
// case nation of nation_american :
33910: LD_VAR 0 5
33914: PUSH
33915: LD_INT 1
33917: DOUBLE
33918: EQUAL
33919: IFTRUE 33923
33921: GO 33979
33923: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33924: LD_ADDR_VAR 0 9
33928: PUSH
33929: LD_VAR 0 11
33933: PUSH
33934: LD_VAR 0 12
33938: PUSH
33939: LD_VAR 0 13
33943: PUSH
33944: LD_VAR 0 14
33948: PUSH
33949: LD_VAR 0 15
33953: PUSH
33954: LD_VAR 0 16
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: PUSH
33967: LD_VAR 0 4
33971: PUSH
33972: LD_INT 1
33974: PLUS
33975: ARRAY
33976: ST_TO_ADDR
33977: GO 34108
33979: LD_INT 2
33981: DOUBLE
33982: EQUAL
33983: IFTRUE 33987
33985: GO 34043
33987: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33988: LD_ADDR_VAR 0 9
33992: PUSH
33993: LD_VAR 0 17
33997: PUSH
33998: LD_VAR 0 18
34002: PUSH
34003: LD_VAR 0 19
34007: PUSH
34008: LD_VAR 0 20
34012: PUSH
34013: LD_VAR 0 21
34017: PUSH
34018: LD_VAR 0 22
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: PUSH
34031: LD_VAR 0 4
34035: PUSH
34036: LD_INT 1
34038: PLUS
34039: ARRAY
34040: ST_TO_ADDR
34041: GO 34108
34043: LD_INT 3
34045: DOUBLE
34046: EQUAL
34047: IFTRUE 34051
34049: GO 34107
34051: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34052: LD_ADDR_VAR 0 9
34056: PUSH
34057: LD_VAR 0 23
34061: PUSH
34062: LD_VAR 0 24
34066: PUSH
34067: LD_VAR 0 25
34071: PUSH
34072: LD_VAR 0 26
34076: PUSH
34077: LD_VAR 0 27
34081: PUSH
34082: LD_VAR 0 28
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: PUSH
34095: LD_VAR 0 4
34099: PUSH
34100: LD_INT 1
34102: PLUS
34103: ARRAY
34104: ST_TO_ADDR
34105: GO 34108
34107: POP
34108: GO 34663
34110: LD_INT 2
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34124
34116: LD_INT 3
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34124
34122: GO 34180
34124: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34125: LD_ADDR_VAR 0 9
34129: PUSH
34130: LD_VAR 0 29
34134: PUSH
34135: LD_VAR 0 30
34139: PUSH
34140: LD_VAR 0 31
34144: PUSH
34145: LD_VAR 0 32
34149: PUSH
34150: LD_VAR 0 33
34154: PUSH
34155: LD_VAR 0 34
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: PUSH
34168: LD_VAR 0 4
34172: PUSH
34173: LD_INT 1
34175: PLUS
34176: ARRAY
34177: ST_TO_ADDR
34178: GO 34663
34180: LD_INT 16
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34242
34186: LD_INT 17
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34242
34192: LD_INT 18
34194: DOUBLE
34195: EQUAL
34196: IFTRUE 34242
34198: LD_INT 19
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34242
34204: LD_INT 22
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34242
34210: LD_INT 20
34212: DOUBLE
34213: EQUAL
34214: IFTRUE 34242
34216: LD_INT 21
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34242
34222: LD_INT 23
34224: DOUBLE
34225: EQUAL
34226: IFTRUE 34242
34228: LD_INT 24
34230: DOUBLE
34231: EQUAL
34232: IFTRUE 34242
34234: LD_INT 25
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34298
34242: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_VAR 0 35
34252: PUSH
34253: LD_VAR 0 36
34257: PUSH
34258: LD_VAR 0 37
34262: PUSH
34263: LD_VAR 0 38
34267: PUSH
34268: LD_VAR 0 39
34272: PUSH
34273: LD_VAR 0 40
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: PUSH
34286: LD_VAR 0 4
34290: PUSH
34291: LD_INT 1
34293: PLUS
34294: ARRAY
34295: ST_TO_ADDR
34296: GO 34663
34298: LD_INT 6
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34354
34304: LD_INT 7
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34354
34310: LD_INT 8
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34354
34316: LD_INT 13
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34354
34322: LD_INT 12
34324: DOUBLE
34325: EQUAL
34326: IFTRUE 34354
34328: LD_INT 15
34330: DOUBLE
34331: EQUAL
34332: IFTRUE 34354
34334: LD_INT 11
34336: DOUBLE
34337: EQUAL
34338: IFTRUE 34354
34340: LD_INT 14
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34354
34346: LD_INT 10
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34410
34354: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34355: LD_ADDR_VAR 0 9
34359: PUSH
34360: LD_VAR 0 41
34364: PUSH
34365: LD_VAR 0 42
34369: PUSH
34370: LD_VAR 0 43
34374: PUSH
34375: LD_VAR 0 44
34379: PUSH
34380: LD_VAR 0 45
34384: PUSH
34385: LD_VAR 0 46
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: PUSH
34398: LD_VAR 0 4
34402: PUSH
34403: LD_INT 1
34405: PLUS
34406: ARRAY
34407: ST_TO_ADDR
34408: GO 34663
34410: LD_INT 36
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34474
34418: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34419: LD_ADDR_VAR 0 9
34423: PUSH
34424: LD_VAR 0 47
34428: PUSH
34429: LD_VAR 0 48
34433: PUSH
34434: LD_VAR 0 49
34438: PUSH
34439: LD_VAR 0 50
34443: PUSH
34444: LD_VAR 0 51
34448: PUSH
34449: LD_VAR 0 52
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: PUSH
34462: LD_VAR 0 4
34466: PUSH
34467: LD_INT 1
34469: PLUS
34470: ARRAY
34471: ST_TO_ADDR
34472: GO 34663
34474: LD_INT 4
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34500
34480: LD_INT 5
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34500
34486: LD_INT 34
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34500
34492: LD_INT 37
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34556
34500: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34501: LD_ADDR_VAR 0 9
34505: PUSH
34506: LD_VAR 0 53
34510: PUSH
34511: LD_VAR 0 54
34515: PUSH
34516: LD_VAR 0 55
34520: PUSH
34521: LD_VAR 0 56
34525: PUSH
34526: LD_VAR 0 57
34530: PUSH
34531: LD_VAR 0 58
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: PUSH
34544: LD_VAR 0 4
34548: PUSH
34549: LD_INT 1
34551: PLUS
34552: ARRAY
34553: ST_TO_ADDR
34554: GO 34663
34556: LD_INT 31
34558: DOUBLE
34559: EQUAL
34560: IFTRUE 34606
34562: LD_INT 32
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34606
34568: LD_INT 33
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34606
34574: LD_INT 27
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34606
34580: LD_INT 26
34582: DOUBLE
34583: EQUAL
34584: IFTRUE 34606
34586: LD_INT 28
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34606
34592: LD_INT 29
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34606
34598: LD_INT 30
34600: DOUBLE
34601: EQUAL
34602: IFTRUE 34606
34604: GO 34662
34606: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34607: LD_ADDR_VAR 0 9
34611: PUSH
34612: LD_VAR 0 59
34616: PUSH
34617: LD_VAR 0 60
34621: PUSH
34622: LD_VAR 0 61
34626: PUSH
34627: LD_VAR 0 62
34631: PUSH
34632: LD_VAR 0 63
34636: PUSH
34637: LD_VAR 0 64
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: PUSH
34650: LD_VAR 0 4
34654: PUSH
34655: LD_INT 1
34657: PLUS
34658: ARRAY
34659: ST_TO_ADDR
34660: GO 34663
34662: POP
// temp_list2 = [ ] ;
34663: LD_ADDR_VAR 0 10
34667: PUSH
34668: EMPTY
34669: ST_TO_ADDR
// for i in temp_list do
34670: LD_ADDR_VAR 0 8
34674: PUSH
34675: LD_VAR 0 9
34679: PUSH
34680: FOR_IN
34681: IFFALSE 34733
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34683: LD_ADDR_VAR 0 10
34687: PUSH
34688: LD_VAR 0 10
34692: PUSH
34693: LD_VAR 0 8
34697: PUSH
34698: LD_INT 1
34700: ARRAY
34701: PUSH
34702: LD_VAR 0 2
34706: PLUS
34707: PUSH
34708: LD_VAR 0 8
34712: PUSH
34713: LD_INT 2
34715: ARRAY
34716: PUSH
34717: LD_VAR 0 3
34721: PLUS
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: EMPTY
34728: LIST
34729: ADD
34730: ST_TO_ADDR
34731: GO 34680
34733: POP
34734: POP
// result = temp_list2 ;
34735: LD_ADDR_VAR 0 7
34739: PUSH
34740: LD_VAR 0 10
34744: ST_TO_ADDR
// end ;
34745: LD_VAR 0 7
34749: RET
// export function EnemyInRange ( unit , dist ) ; begin
34750: LD_INT 0
34752: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34753: LD_ADDR_VAR 0 3
34757: PUSH
34758: LD_VAR 0 1
34762: PPUSH
34763: CALL_OW 255
34767: PPUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: CALL_OW 250
34777: PPUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: CALL_OW 251
34787: PPUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: CALL 8007 0 4
34797: PUSH
34798: LD_INT 4
34800: ARRAY
34801: ST_TO_ADDR
// end ;
34802: LD_VAR 0 3
34806: RET
// export function PlayerSeeMe ( unit ) ; begin
34807: LD_INT 0
34809: PPUSH
// result := See ( your_side , unit ) ;
34810: LD_ADDR_VAR 0 2
34814: PUSH
34815: LD_OWVAR 2
34819: PPUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 292
34829: ST_TO_ADDR
// end ;
34830: LD_VAR 0 2
34834: RET
// export function ReverseDir ( unit ) ; begin
34835: LD_INT 0
34837: PPUSH
// if not unit then
34838: LD_VAR 0 1
34842: NOT
34843: IFFALSE 34847
// exit ;
34845: GO 34870
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34847: LD_ADDR_VAR 0 2
34851: PUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 254
34861: PUSH
34862: LD_INT 3
34864: PLUS
34865: PUSH
34866: LD_INT 6
34868: MOD
34869: ST_TO_ADDR
// end ;
34870: LD_VAR 0 2
34874: RET
// export function ReverseArray ( array ) ; var i ; begin
34875: LD_INT 0
34877: PPUSH
34878: PPUSH
// if not array then
34879: LD_VAR 0 1
34883: NOT
34884: IFFALSE 34888
// exit ;
34886: GO 34943
// result := [ ] ;
34888: LD_ADDR_VAR 0 2
34892: PUSH
34893: EMPTY
34894: ST_TO_ADDR
// for i := array downto 1 do
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: DOUBLE
34901: LD_VAR 0 1
34905: INC
34906: ST_TO_ADDR
34907: LD_INT 1
34909: PUSH
34910: FOR_DOWNTO
34911: IFFALSE 34941
// result := Join ( result , array [ i ] ) ;
34913: LD_ADDR_VAR 0 2
34917: PUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 1
34927: PUSH
34928: LD_VAR 0 3
34932: ARRAY
34933: PPUSH
34934: CALL 39785 0 2
34938: ST_TO_ADDR
34939: GO 34910
34941: POP
34942: POP
// end ;
34943: LD_VAR 0 2
34947: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34948: LD_INT 0
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
// if not unit or not hexes then
34956: LD_VAR 0 1
34960: NOT
34961: IFTRUE 34970
34963: PUSH
34964: LD_VAR 0 2
34968: NOT
34969: OR
34970: IFFALSE 34974
// exit ;
34972: GO 35097
// dist := 9999 ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_INT 9999
34981: ST_TO_ADDR
// for i = 1 to hexes do
34982: LD_ADDR_VAR 0 4
34986: PUSH
34987: DOUBLE
34988: LD_INT 1
34990: DEC
34991: ST_TO_ADDR
34992: LD_VAR 0 2
34996: PUSH
34997: FOR_TO
34998: IFFALSE 35085
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35000: LD_ADDR_VAR 0 6
35004: PUSH
35005: LD_VAR 0 1
35009: PPUSH
35010: LD_VAR 0 2
35014: PUSH
35015: LD_VAR 0 4
35019: ARRAY
35020: PUSH
35021: LD_INT 1
35023: ARRAY
35024: PPUSH
35025: LD_VAR 0 2
35029: PUSH
35030: LD_VAR 0 4
35034: ARRAY
35035: PUSH
35036: LD_INT 2
35038: ARRAY
35039: PPUSH
35040: CALL_OW 297
35044: ST_TO_ADDR
// if tdist < dist then
35045: LD_VAR 0 6
35049: PUSH
35050: LD_VAR 0 5
35054: LESS
35055: IFFALSE 35083
// begin hex := hexes [ i ] ;
35057: LD_ADDR_VAR 0 8
35061: PUSH
35062: LD_VAR 0 2
35066: PUSH
35067: LD_VAR 0 4
35071: ARRAY
35072: ST_TO_ADDR
// dist := tdist ;
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: LD_VAR 0 6
35082: ST_TO_ADDR
// end ; end ;
35083: GO 34997
35085: POP
35086: POP
// result := hex ;
35087: LD_ADDR_VAR 0 3
35091: PUSH
35092: LD_VAR 0 8
35096: ST_TO_ADDR
// end ;
35097: LD_VAR 0 3
35101: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35102: LD_INT 0
35104: PPUSH
35105: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35106: LD_VAR 0 1
35110: NOT
35111: IFTRUE 35150
35113: PUSH
35114: LD_VAR 0 1
35118: PUSH
35119: LD_INT 21
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 23
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PPUSH
35143: CALL_OW 69
35147: IN
35148: NOT
35149: OR
35150: IFFALSE 35154
// exit ;
35152: GO 35201
// for i = 1 to 3 do
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: DOUBLE
35160: LD_INT 1
35162: DEC
35163: ST_TO_ADDR
35164: LD_INT 3
35166: PUSH
35167: FOR_TO
35168: IFFALSE 35199
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35170: LD_VAR 0 1
35174: PPUSH
35175: CALL_OW 250
35179: PPUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 251
35189: PPUSH
35190: LD_INT 1
35192: PPUSH
35193: CALL_OW 453
35197: GO 35167
35199: POP
35200: POP
// end ;
35201: LD_VAR 0 2
35205: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35206: LD_INT 0
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
// if not unit or not enemy_unit then
35214: LD_VAR 0 1
35218: NOT
35219: IFTRUE 35228
35221: PUSH
35222: LD_VAR 0 2
35226: NOT
35227: OR
35228: IFFALSE 35232
// exit ;
35230: GO 35703
// if GetLives ( i ) < 250 then
35232: LD_VAR 0 4
35236: PPUSH
35237: CALL_OW 256
35241: PUSH
35242: LD_INT 250
35244: LESS
35245: IFFALSE 35258
// begin ComAutodestruct ( i ) ;
35247: LD_VAR 0 4
35251: PPUSH
35252: CALL 35102 0 1
// exit ;
35256: GO 35703
// end ; x := GetX ( enemy_unit ) ;
35258: LD_ADDR_VAR 0 7
35262: PUSH
35263: LD_VAR 0 2
35267: PPUSH
35268: CALL_OW 250
35272: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35273: LD_ADDR_VAR 0 8
35277: PUSH
35278: LD_VAR 0 2
35282: PPUSH
35283: CALL_OW 251
35287: ST_TO_ADDR
// if not x or not y then
35288: LD_VAR 0 7
35292: NOT
35293: IFTRUE 35302
35295: PUSH
35296: LD_VAR 0 8
35300: NOT
35301: OR
35302: IFFALSE 35306
// exit ;
35304: GO 35703
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35306: LD_ADDR_VAR 0 6
35310: PUSH
35311: LD_VAR 0 7
35315: PPUSH
35316: LD_INT 0
35318: PPUSH
35319: LD_INT 4
35321: PPUSH
35322: CALL_OW 272
35326: PUSH
35327: LD_VAR 0 8
35331: PPUSH
35332: LD_INT 0
35334: PPUSH
35335: LD_INT 4
35337: PPUSH
35338: CALL_OW 273
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_VAR 0 7
35351: PPUSH
35352: LD_INT 1
35354: PPUSH
35355: LD_INT 4
35357: PPUSH
35358: CALL_OW 272
35362: PUSH
35363: LD_VAR 0 8
35367: PPUSH
35368: LD_INT 1
35370: PPUSH
35371: LD_INT 4
35373: PPUSH
35374: CALL_OW 273
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_VAR 0 7
35387: PPUSH
35388: LD_INT 2
35390: PPUSH
35391: LD_INT 4
35393: PPUSH
35394: CALL_OW 272
35398: PUSH
35399: LD_VAR 0 8
35403: PPUSH
35404: LD_INT 2
35406: PPUSH
35407: LD_INT 4
35409: PPUSH
35410: CALL_OW 273
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_VAR 0 7
35423: PPUSH
35424: LD_INT 3
35426: PPUSH
35427: LD_INT 4
35429: PPUSH
35430: CALL_OW 272
35434: PUSH
35435: LD_VAR 0 8
35439: PPUSH
35440: LD_INT 3
35442: PPUSH
35443: LD_INT 4
35445: PPUSH
35446: CALL_OW 273
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_VAR 0 7
35459: PPUSH
35460: LD_INT 4
35462: PPUSH
35463: LD_INT 4
35465: PPUSH
35466: CALL_OW 272
35470: PUSH
35471: LD_VAR 0 8
35475: PPUSH
35476: LD_INT 4
35478: PPUSH
35479: LD_INT 4
35481: PPUSH
35482: CALL_OW 273
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_VAR 0 7
35495: PPUSH
35496: LD_INT 5
35498: PPUSH
35499: LD_INT 4
35501: PPUSH
35502: CALL_OW 272
35506: PUSH
35507: LD_VAR 0 8
35511: PPUSH
35512: LD_INT 5
35514: PPUSH
35515: LD_INT 4
35517: PPUSH
35518: CALL_OW 273
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: ST_TO_ADDR
// for i = tmp downto 1 do
35535: LD_ADDR_VAR 0 4
35539: PUSH
35540: DOUBLE
35541: LD_VAR 0 6
35545: INC
35546: ST_TO_ADDR
35547: LD_INT 1
35549: PUSH
35550: FOR_DOWNTO
35551: IFFALSE 35654
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35553: LD_VAR 0 6
35557: PUSH
35558: LD_VAR 0 4
35562: ARRAY
35563: PUSH
35564: LD_INT 1
35566: ARRAY
35567: PPUSH
35568: LD_VAR 0 6
35572: PUSH
35573: LD_VAR 0 4
35577: ARRAY
35578: PUSH
35579: LD_INT 2
35581: ARRAY
35582: PPUSH
35583: CALL_OW 488
35587: NOT
35588: IFTRUE 35630
35590: PUSH
35591: LD_VAR 0 6
35595: PUSH
35596: LD_VAR 0 4
35600: ARRAY
35601: PUSH
35602: LD_INT 1
35604: ARRAY
35605: PPUSH
35606: LD_VAR 0 6
35610: PUSH
35611: LD_VAR 0 4
35615: ARRAY
35616: PUSH
35617: LD_INT 2
35619: ARRAY
35620: PPUSH
35621: CALL_OW 428
35625: PUSH
35626: LD_INT 0
35628: NONEQUAL
35629: OR
35630: IFFALSE 35652
// tmp := Delete ( tmp , i ) ;
35632: LD_ADDR_VAR 0 6
35636: PUSH
35637: LD_VAR 0 6
35641: PPUSH
35642: LD_VAR 0 4
35646: PPUSH
35647: CALL_OW 3
35651: ST_TO_ADDR
35652: GO 35550
35654: POP
35655: POP
// j := GetClosestHex ( unit , tmp ) ;
35656: LD_ADDR_VAR 0 5
35660: PUSH
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_VAR 0 6
35670: PPUSH
35671: CALL 34948 0 2
35675: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35676: LD_VAR 0 1
35680: PPUSH
35681: LD_VAR 0 5
35685: PUSH
35686: LD_INT 1
35688: ARRAY
35689: PPUSH
35690: LD_VAR 0 5
35694: PUSH
35695: LD_INT 2
35697: ARRAY
35698: PPUSH
35699: CALL_OW 111
// end ;
35703: LD_VAR 0 3
35707: RET
// export function PrepareApemanSoldier ( ) ; begin
35708: LD_INT 0
35710: PPUSH
// uc_nation := 0 ;
35711: LD_ADDR_OWVAR 21
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// hc_sex := sex_male ;
35719: LD_ADDR_OWVAR 27
35723: PUSH
35724: LD_INT 1
35726: ST_TO_ADDR
// hc_name :=  ;
35727: LD_ADDR_OWVAR 26
35731: PUSH
35732: LD_STRING 
35734: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35735: LD_ADDR_OWVAR 28
35739: PUSH
35740: LD_INT 15
35742: ST_TO_ADDR
// hc_gallery :=  ;
35743: LD_ADDR_OWVAR 33
35747: PUSH
35748: LD_STRING 
35750: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35751: LD_ADDR_OWVAR 31
35755: PUSH
35756: LD_INT 0
35758: PPUSH
35759: LD_INT 3
35761: PPUSH
35762: CALL_OW 12
35766: PUSH
35767: LD_INT 0
35769: PPUSH
35770: LD_INT 3
35772: PPUSH
35773: CALL_OW 12
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35790: LD_ADDR_OWVAR 29
35794: PUSH
35795: LD_INT 12
35797: PUSH
35798: LD_INT 12
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// end ;
35805: LD_VAR 0 1
35809: RET
// export function PrepareApemanEngineer ( ) ; begin
35810: LD_INT 0
35812: PPUSH
// uc_nation := 0 ;
35813: LD_ADDR_OWVAR 21
35817: PUSH
35818: LD_INT 0
35820: ST_TO_ADDR
// hc_sex := sex_male ;
35821: LD_ADDR_OWVAR 27
35825: PUSH
35826: LD_INT 1
35828: ST_TO_ADDR
// hc_name :=  ;
35829: LD_ADDR_OWVAR 26
35833: PUSH
35834: LD_STRING 
35836: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35837: LD_ADDR_OWVAR 28
35841: PUSH
35842: LD_INT 16
35844: ST_TO_ADDR
// hc_gallery :=  ;
35845: LD_ADDR_OWVAR 33
35849: PUSH
35850: LD_STRING 
35852: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35853: LD_ADDR_OWVAR 31
35857: PUSH
35858: LD_INT 0
35860: PPUSH
35861: LD_INT 3
35863: PPUSH
35864: CALL_OW 12
35868: PUSH
35869: LD_INT 0
35871: PPUSH
35872: LD_INT 3
35874: PPUSH
35875: CALL_OW 12
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35892: LD_ADDR_OWVAR 29
35896: PUSH
35897: LD_INT 12
35899: PUSH
35900: LD_INT 12
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// end ;
35907: LD_VAR 0 1
35911: RET
// export function PrepareApeman ( agressivity ) ; begin
35912: LD_INT 0
35914: PPUSH
// uc_side := 0 ;
35915: LD_ADDR_OWVAR 20
35919: PUSH
35920: LD_INT 0
35922: ST_TO_ADDR
// uc_nation := 0 ;
35923: LD_ADDR_OWVAR 21
35927: PUSH
35928: LD_INT 0
35930: ST_TO_ADDR
// hc_sex := sex_male ;
35931: LD_ADDR_OWVAR 27
35935: PUSH
35936: LD_INT 1
35938: ST_TO_ADDR
// hc_class := class_apeman ;
35939: LD_ADDR_OWVAR 28
35943: PUSH
35944: LD_INT 12
35946: ST_TO_ADDR
// hc_gallery :=  ;
35947: LD_ADDR_OWVAR 33
35951: PUSH
35952: LD_STRING 
35954: ST_TO_ADDR
// hc_name :=  ;
35955: LD_ADDR_OWVAR 26
35959: PUSH
35960: LD_STRING 
35962: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35963: LD_ADDR_OWVAR 29
35967: PUSH
35968: LD_INT 12
35970: PUSH
35971: LD_INT 12
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: ST_TO_ADDR
// if agressivity = 0 then
35978: LD_VAR 0 1
35982: PUSH
35983: LD_INT 0
35985: EQUAL
35986: IFFALSE 35998
// hc_agressivity := 0 else
35988: LD_ADDR_OWVAR 35
35992: PUSH
35993: LD_INT 0
35995: ST_TO_ADDR
35996: GO 36019
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35998: LD_ADDR_OWVAR 35
36002: PUSH
36003: LD_VAR 0 1
36007: NEG
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 12
36018: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36019: LD_ADDR_OWVAR 31
36023: PUSH
36024: LD_INT 0
36026: PPUSH
36027: LD_INT 3
36029: PPUSH
36030: CALL_OW 12
36034: PUSH
36035: LD_INT 0
36037: PPUSH
36038: LD_INT 3
36040: PPUSH
36041: CALL_OW 12
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 2
36062: RET
// export function PrepareTiger ( agressivity ) ; begin
36063: LD_INT 0
36065: PPUSH
// uc_side := 0 ;
36066: LD_ADDR_OWVAR 20
36070: PUSH
36071: LD_INT 0
36073: ST_TO_ADDR
// uc_nation := 0 ;
36074: LD_ADDR_OWVAR 21
36078: PUSH
36079: LD_INT 0
36081: ST_TO_ADDR
// InitHc ;
36082: CALL_OW 19
// hc_class := class_tiger ;
36086: LD_ADDR_OWVAR 28
36090: PUSH
36091: LD_INT 14
36093: ST_TO_ADDR
// hc_gallery :=  ;
36094: LD_ADDR_OWVAR 33
36098: PUSH
36099: LD_STRING 
36101: ST_TO_ADDR
// hc_name :=  ;
36102: LD_ADDR_OWVAR 26
36106: PUSH
36107: LD_STRING 
36109: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36110: LD_ADDR_OWVAR 35
36114: PUSH
36115: LD_VAR 0 1
36119: NEG
36120: PPUSH
36121: LD_VAR 0 1
36125: PPUSH
36126: CALL_OW 12
36130: ST_TO_ADDR
// end ;
36131: LD_VAR 0 2
36135: RET
// export function PrepareEnchidna ( ) ; begin
36136: LD_INT 0
36138: PPUSH
// uc_side := 0 ;
36139: LD_ADDR_OWVAR 20
36143: PUSH
36144: LD_INT 0
36146: ST_TO_ADDR
// uc_nation := 0 ;
36147: LD_ADDR_OWVAR 21
36151: PUSH
36152: LD_INT 0
36154: ST_TO_ADDR
// InitHc ;
36155: CALL_OW 19
// hc_class := class_baggie ;
36159: LD_ADDR_OWVAR 28
36163: PUSH
36164: LD_INT 13
36166: ST_TO_ADDR
// hc_gallery :=  ;
36167: LD_ADDR_OWVAR 33
36171: PUSH
36172: LD_STRING 
36174: ST_TO_ADDR
// hc_name :=  ;
36175: LD_ADDR_OWVAR 26
36179: PUSH
36180: LD_STRING 
36182: ST_TO_ADDR
// end ;
36183: LD_VAR 0 1
36187: RET
// export function PrepareFrog ( ) ; begin
36188: LD_INT 0
36190: PPUSH
// uc_side := 0 ;
36191: LD_ADDR_OWVAR 20
36195: PUSH
36196: LD_INT 0
36198: ST_TO_ADDR
// uc_nation := 0 ;
36199: LD_ADDR_OWVAR 21
36203: PUSH
36204: LD_INT 0
36206: ST_TO_ADDR
// InitHc ;
36207: CALL_OW 19
// hc_class := class_frog ;
36211: LD_ADDR_OWVAR 28
36215: PUSH
36216: LD_INT 19
36218: ST_TO_ADDR
// hc_gallery :=  ;
36219: LD_ADDR_OWVAR 33
36223: PUSH
36224: LD_STRING 
36226: ST_TO_ADDR
// hc_name :=  ;
36227: LD_ADDR_OWVAR 26
36231: PUSH
36232: LD_STRING 
36234: ST_TO_ADDR
// end ;
36235: LD_VAR 0 1
36239: RET
// export function PrepareFish ( ) ; begin
36240: LD_INT 0
36242: PPUSH
// uc_side := 0 ;
36243: LD_ADDR_OWVAR 20
36247: PUSH
36248: LD_INT 0
36250: ST_TO_ADDR
// uc_nation := 0 ;
36251: LD_ADDR_OWVAR 21
36255: PUSH
36256: LD_INT 0
36258: ST_TO_ADDR
// InitHc ;
36259: CALL_OW 19
// hc_class := class_fish ;
36263: LD_ADDR_OWVAR 28
36267: PUSH
36268: LD_INT 20
36270: ST_TO_ADDR
// hc_gallery :=  ;
36271: LD_ADDR_OWVAR 33
36275: PUSH
36276: LD_STRING 
36278: ST_TO_ADDR
// hc_name :=  ;
36279: LD_ADDR_OWVAR 26
36283: PUSH
36284: LD_STRING 
36286: ST_TO_ADDR
// end ;
36287: LD_VAR 0 1
36291: RET
// export function PrepareBird ( ) ; begin
36292: LD_INT 0
36294: PPUSH
// uc_side := 0 ;
36295: LD_ADDR_OWVAR 20
36299: PUSH
36300: LD_INT 0
36302: ST_TO_ADDR
// uc_nation := 0 ;
36303: LD_ADDR_OWVAR 21
36307: PUSH
36308: LD_INT 0
36310: ST_TO_ADDR
// InitHc ;
36311: CALL_OW 19
// hc_class := class_phororhacos ;
36315: LD_ADDR_OWVAR 28
36319: PUSH
36320: LD_INT 18
36322: ST_TO_ADDR
// hc_gallery :=  ;
36323: LD_ADDR_OWVAR 33
36327: PUSH
36328: LD_STRING 
36330: ST_TO_ADDR
// hc_name :=  ;
36331: LD_ADDR_OWVAR 26
36335: PUSH
36336: LD_STRING 
36338: ST_TO_ADDR
// end ;
36339: LD_VAR 0 1
36343: RET
// export function PrepareHorse ( ) ; begin
36344: LD_INT 0
36346: PPUSH
// uc_side := 0 ;
36347: LD_ADDR_OWVAR 20
36351: PUSH
36352: LD_INT 0
36354: ST_TO_ADDR
// uc_nation := 0 ;
36355: LD_ADDR_OWVAR 21
36359: PUSH
36360: LD_INT 0
36362: ST_TO_ADDR
// InitHc ;
36363: CALL_OW 19
// hc_class := class_horse ;
36367: LD_ADDR_OWVAR 28
36371: PUSH
36372: LD_INT 21
36374: ST_TO_ADDR
// hc_gallery :=  ;
36375: LD_ADDR_OWVAR 33
36379: PUSH
36380: LD_STRING 
36382: ST_TO_ADDR
// hc_name :=  ;
36383: LD_ADDR_OWVAR 26
36387: PUSH
36388: LD_STRING 
36390: ST_TO_ADDR
// end ;
36391: LD_VAR 0 1
36395: RET
// export function PrepareMastodont ( ) ; begin
36396: LD_INT 0
36398: PPUSH
// uc_side := 0 ;
36399: LD_ADDR_OWVAR 20
36403: PUSH
36404: LD_INT 0
36406: ST_TO_ADDR
// uc_nation := 0 ;
36407: LD_ADDR_OWVAR 21
36411: PUSH
36412: LD_INT 0
36414: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36415: LD_ADDR_OWVAR 37
36419: PUSH
36420: LD_INT 31
36422: ST_TO_ADDR
// vc_control := control_rider ;
36423: LD_ADDR_OWVAR 38
36427: PUSH
36428: LD_INT 4
36430: ST_TO_ADDR
// end ;
36431: LD_VAR 0 1
36435: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36436: LD_INT 0
36438: PPUSH
36439: PPUSH
36440: PPUSH
// uc_side = 0 ;
36441: LD_ADDR_OWVAR 20
36445: PUSH
36446: LD_INT 0
36448: ST_TO_ADDR
// uc_nation = 0 ;
36449: LD_ADDR_OWVAR 21
36453: PUSH
36454: LD_INT 0
36456: ST_TO_ADDR
// InitHc_All ( ) ;
36457: CALL_OW 584
// InitVc ;
36461: CALL_OW 20
// if mastodonts then
36465: LD_VAR 0 6
36469: IFFALSE 36536
// for i = 1 to mastodonts do
36471: LD_ADDR_VAR 0 11
36475: PUSH
36476: DOUBLE
36477: LD_INT 1
36479: DEC
36480: ST_TO_ADDR
36481: LD_VAR 0 6
36485: PUSH
36486: FOR_TO
36487: IFFALSE 36534
// begin vc_chassis := 31 ;
36489: LD_ADDR_OWVAR 37
36493: PUSH
36494: LD_INT 31
36496: ST_TO_ADDR
// vc_control := control_rider ;
36497: LD_ADDR_OWVAR 38
36501: PUSH
36502: LD_INT 4
36504: ST_TO_ADDR
// animal := CreateVehicle ;
36505: LD_ADDR_VAR 0 12
36509: PUSH
36510: CALL_OW 45
36514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36515: LD_VAR 0 12
36519: PPUSH
36520: LD_VAR 0 8
36524: PPUSH
36525: LD_INT 0
36527: PPUSH
36528: CALL 38678 0 3
// end ;
36532: GO 36486
36534: POP
36535: POP
// if horses then
36536: LD_VAR 0 5
36540: IFFALSE 36607
// for i = 1 to horses do
36542: LD_ADDR_VAR 0 11
36546: PUSH
36547: DOUBLE
36548: LD_INT 1
36550: DEC
36551: ST_TO_ADDR
36552: LD_VAR 0 5
36556: PUSH
36557: FOR_TO
36558: IFFALSE 36605
// begin hc_class := 21 ;
36560: LD_ADDR_OWVAR 28
36564: PUSH
36565: LD_INT 21
36567: ST_TO_ADDR
// hc_gallery :=  ;
36568: LD_ADDR_OWVAR 33
36572: PUSH
36573: LD_STRING 
36575: ST_TO_ADDR
// animal := CreateHuman ;
36576: LD_ADDR_VAR 0 12
36580: PUSH
36581: CALL_OW 44
36585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36586: LD_VAR 0 12
36590: PPUSH
36591: LD_VAR 0 8
36595: PPUSH
36596: LD_INT 0
36598: PPUSH
36599: CALL 38678 0 3
// end ;
36603: GO 36557
36605: POP
36606: POP
// if birds then
36607: LD_VAR 0 1
36611: IFFALSE 36678
// for i = 1 to birds do
36613: LD_ADDR_VAR 0 11
36617: PUSH
36618: DOUBLE
36619: LD_INT 1
36621: DEC
36622: ST_TO_ADDR
36623: LD_VAR 0 1
36627: PUSH
36628: FOR_TO
36629: IFFALSE 36676
// begin hc_class := 18 ;
36631: LD_ADDR_OWVAR 28
36635: PUSH
36636: LD_INT 18
36638: ST_TO_ADDR
// hc_gallery =  ;
36639: LD_ADDR_OWVAR 33
36643: PUSH
36644: LD_STRING 
36646: ST_TO_ADDR
// animal := CreateHuman ;
36647: LD_ADDR_VAR 0 12
36651: PUSH
36652: CALL_OW 44
36656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36657: LD_VAR 0 12
36661: PPUSH
36662: LD_VAR 0 8
36666: PPUSH
36667: LD_INT 0
36669: PPUSH
36670: CALL 38678 0 3
// end ;
36674: GO 36628
36676: POP
36677: POP
// if tigers then
36678: LD_VAR 0 2
36682: IFFALSE 36766
// for i = 1 to tigers do
36684: LD_ADDR_VAR 0 11
36688: PUSH
36689: DOUBLE
36690: LD_INT 1
36692: DEC
36693: ST_TO_ADDR
36694: LD_VAR 0 2
36698: PUSH
36699: FOR_TO
36700: IFFALSE 36764
// begin hc_class = class_tiger ;
36702: LD_ADDR_OWVAR 28
36706: PUSH
36707: LD_INT 14
36709: ST_TO_ADDR
// hc_gallery =  ;
36710: LD_ADDR_OWVAR 33
36714: PUSH
36715: LD_STRING 
36717: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36718: LD_ADDR_OWVAR 35
36722: PUSH
36723: LD_INT 7
36725: NEG
36726: PPUSH
36727: LD_INT 7
36729: PPUSH
36730: CALL_OW 12
36734: ST_TO_ADDR
// animal := CreateHuman ;
36735: LD_ADDR_VAR 0 12
36739: PUSH
36740: CALL_OW 44
36744: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36745: LD_VAR 0 12
36749: PPUSH
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_INT 0
36757: PPUSH
36758: CALL 38678 0 3
// end ;
36762: GO 36699
36764: POP
36765: POP
// if apemans then
36766: LD_VAR 0 3
36770: IFFALSE 36893
// for i = 1 to apemans do
36772: LD_ADDR_VAR 0 11
36776: PUSH
36777: DOUBLE
36778: LD_INT 1
36780: DEC
36781: ST_TO_ADDR
36782: LD_VAR 0 3
36786: PUSH
36787: FOR_TO
36788: IFFALSE 36891
// begin hc_class = class_apeman ;
36790: LD_ADDR_OWVAR 28
36794: PUSH
36795: LD_INT 12
36797: ST_TO_ADDR
// hc_gallery =  ;
36798: LD_ADDR_OWVAR 33
36802: PUSH
36803: LD_STRING 
36805: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36806: LD_ADDR_OWVAR 35
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PPUSH
36815: LD_INT 2
36817: PPUSH
36818: CALL_OW 12
36822: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36823: LD_ADDR_OWVAR 31
36827: PUSH
36828: LD_INT 1
36830: PPUSH
36831: LD_INT 3
36833: PPUSH
36834: CALL_OW 12
36838: PUSH
36839: LD_INT 1
36841: PPUSH
36842: LD_INT 3
36844: PPUSH
36845: CALL_OW 12
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// animal := CreateHuman ;
36862: LD_ADDR_VAR 0 12
36866: PUSH
36867: CALL_OW 44
36871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36872: LD_VAR 0 12
36876: PPUSH
36877: LD_VAR 0 8
36881: PPUSH
36882: LD_INT 0
36884: PPUSH
36885: CALL 38678 0 3
// end ;
36889: GO 36787
36891: POP
36892: POP
// if enchidnas then
36893: LD_VAR 0 4
36897: IFFALSE 36964
// for i = 1 to enchidnas do
36899: LD_ADDR_VAR 0 11
36903: PUSH
36904: DOUBLE
36905: LD_INT 1
36907: DEC
36908: ST_TO_ADDR
36909: LD_VAR 0 4
36913: PUSH
36914: FOR_TO
36915: IFFALSE 36962
// begin hc_class = 13 ;
36917: LD_ADDR_OWVAR 28
36921: PUSH
36922: LD_INT 13
36924: ST_TO_ADDR
// hc_gallery =  ;
36925: LD_ADDR_OWVAR 33
36929: PUSH
36930: LD_STRING 
36932: ST_TO_ADDR
// animal := CreateHuman ;
36933: LD_ADDR_VAR 0 12
36937: PUSH
36938: CALL_OW 44
36942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36943: LD_VAR 0 12
36947: PPUSH
36948: LD_VAR 0 8
36952: PPUSH
36953: LD_INT 0
36955: PPUSH
36956: CALL 38678 0 3
// end ;
36960: GO 36914
36962: POP
36963: POP
// if fishes then
36964: LD_VAR 0 7
36968: IFFALSE 37035
// for i = 1 to fishes do
36970: LD_ADDR_VAR 0 11
36974: PUSH
36975: DOUBLE
36976: LD_INT 1
36978: DEC
36979: ST_TO_ADDR
36980: LD_VAR 0 7
36984: PUSH
36985: FOR_TO
36986: IFFALSE 37033
// begin hc_class = 20 ;
36988: LD_ADDR_OWVAR 28
36992: PUSH
36993: LD_INT 20
36995: ST_TO_ADDR
// hc_gallery =  ;
36996: LD_ADDR_OWVAR 33
37000: PUSH
37001: LD_STRING 
37003: ST_TO_ADDR
// animal := CreateHuman ;
37004: LD_ADDR_VAR 0 12
37008: PUSH
37009: CALL_OW 44
37013: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37014: LD_VAR 0 12
37018: PPUSH
37019: LD_VAR 0 9
37023: PPUSH
37024: LD_INT 0
37026: PPUSH
37027: CALL 38678 0 3
// end ;
37031: GO 36985
37033: POP
37034: POP
// end ;
37035: LD_VAR 0 10
37039: RET
// export function WantHeal ( sci , unit ) ; begin
37040: LD_INT 0
37042: PPUSH
// if GetTaskList ( sci ) > 0 then
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 437
37052: PUSH
37053: LD_INT 0
37055: GREATER
37056: IFFALSE 37128
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 437
37067: PUSH
37068: LD_INT 1
37070: ARRAY
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PUSH
37076: LD_STRING l
37078: EQUAL
37079: IFFALSE 37106
37081: PUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL_OW 437
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PUSH
37096: LD_INT 4
37098: ARRAY
37099: PUSH
37100: LD_VAR 0 2
37104: EQUAL
37105: AND
37106: IFFALSE 37118
// result := true else
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_INT 1
37115: ST_TO_ADDR
37116: GO 37126
// result := false ;
37118: LD_ADDR_VAR 0 3
37122: PUSH
37123: LD_INT 0
37125: ST_TO_ADDR
// end else
37126: GO 37136
// result := false ;
37128: LD_ADDR_VAR 0 3
37132: PUSH
37133: LD_INT 0
37135: ST_TO_ADDR
// end ;
37136: LD_VAR 0 3
37140: RET
// export function HealTarget ( sci ) ; begin
37141: LD_INT 0
37143: PPUSH
// if not sci then
37144: LD_VAR 0 1
37148: NOT
37149: IFFALSE 37153
// exit ;
37151: GO 37218
// result := 0 ;
37153: LD_ADDR_VAR 0 2
37157: PUSH
37158: LD_INT 0
37160: ST_TO_ADDR
// if GetTaskList ( sci ) then
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL_OW 437
37170: IFFALSE 37218
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37172: LD_VAR 0 1
37176: PPUSH
37177: CALL_OW 437
37181: PUSH
37182: LD_INT 1
37184: ARRAY
37185: PUSH
37186: LD_INT 1
37188: ARRAY
37189: PUSH
37190: LD_STRING l
37192: EQUAL
37193: IFFALSE 37218
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37195: LD_ADDR_VAR 0 2
37199: PUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 437
37209: PUSH
37210: LD_INT 1
37212: ARRAY
37213: PUSH
37214: LD_INT 4
37216: ARRAY
37217: ST_TO_ADDR
// end ;
37218: LD_VAR 0 2
37222: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37223: LD_INT 0
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
// if not base_units then
37229: LD_VAR 0 1
37233: NOT
37234: IFFALSE 37238
// exit ;
37236: GO 37325
// result := false ;
37238: LD_ADDR_VAR 0 2
37242: PUSH
37243: LD_INT 0
37245: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37246: LD_ADDR_VAR 0 5
37250: PUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: LD_INT 21
37258: PUSH
37259: LD_INT 3
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PPUSH
37266: CALL_OW 72
37270: ST_TO_ADDR
// if not tmp then
37271: LD_VAR 0 5
37275: NOT
37276: IFFALSE 37280
// exit ;
37278: GO 37325
// for i in tmp do
37280: LD_ADDR_VAR 0 3
37284: PUSH
37285: LD_VAR 0 5
37289: PUSH
37290: FOR_IN
37291: IFFALSE 37323
// begin result := EnemyInRange ( i , 22 ) ;
37293: LD_ADDR_VAR 0 2
37297: PUSH
37298: LD_VAR 0 3
37302: PPUSH
37303: LD_INT 22
37305: PPUSH
37306: CALL 34750 0 2
37310: ST_TO_ADDR
// if result then
37311: LD_VAR 0 2
37315: IFFALSE 37321
// exit ;
37317: POP
37318: POP
37319: GO 37325
// end ;
37321: GO 37290
37323: POP
37324: POP
// end ;
37325: LD_VAR 0 2
37329: RET
// export function FilterByTag ( units , tag ) ; begin
37330: LD_INT 0
37332: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37333: LD_ADDR_VAR 0 3
37337: PUSH
37338: LD_VAR 0 1
37342: PPUSH
37343: LD_INT 120
37345: PUSH
37346: LD_VAR 0 2
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PPUSH
37355: CALL_OW 72
37359: ST_TO_ADDR
// end ;
37360: LD_VAR 0 3
37364: RET
// export function IsDriver ( un ) ; begin
37365: LD_INT 0
37367: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37368: LD_ADDR_VAR 0 2
37372: PUSH
37373: LD_VAR 0 1
37377: PUSH
37378: LD_INT 55
37380: PUSH
37381: EMPTY
37382: LIST
37383: PPUSH
37384: CALL_OW 69
37388: IN
37389: ST_TO_ADDR
// end ;
37390: LD_VAR 0 2
37394: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37395: LD_INT 0
37397: PPUSH
37398: PPUSH
// list := [ ] ;
37399: LD_ADDR_VAR 0 5
37403: PUSH
37404: EMPTY
37405: ST_TO_ADDR
// case d of 0 :
37406: LD_VAR 0 3
37410: PUSH
37411: LD_INT 0
37413: DOUBLE
37414: EQUAL
37415: IFTRUE 37419
37417: GO 37552
37419: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37420: LD_ADDR_VAR 0 5
37424: PUSH
37425: LD_VAR 0 1
37429: PUSH
37430: LD_INT 4
37432: MINUS
37433: PUSH
37434: LD_VAR 0 2
37438: PUSH
37439: LD_INT 4
37441: MINUS
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: LD_VAR 0 1
37455: PUSH
37456: LD_INT 3
37458: MINUS
37459: PUSH
37460: LD_VAR 0 2
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: LD_VAR 0 1
37477: PUSH
37478: LD_INT 4
37480: PLUS
37481: PUSH
37482: LD_VAR 0 2
37486: PUSH
37487: LD_INT 4
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: LD_VAR 0 1
37499: PUSH
37500: LD_INT 3
37502: PLUS
37503: PUSH
37504: LD_VAR 0 2
37508: PUSH
37509: LD_INT 3
37511: PLUS
37512: PUSH
37513: LD_INT 5
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PUSH
37521: LD_VAR 0 1
37525: PUSH
37526: LD_VAR 0 2
37530: PUSH
37531: LD_INT 4
37533: PLUS
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
// end ; 1 :
37550: GO 38250
37552: LD_INT 1
37554: DOUBLE
37555: EQUAL
37556: IFTRUE 37560
37558: GO 37693
37560: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37561: LD_ADDR_VAR 0 5
37565: PUSH
37566: LD_VAR 0 1
37570: PUSH
37571: LD_VAR 0 2
37575: PUSH
37576: LD_INT 4
37578: MINUS
37579: PUSH
37580: LD_INT 3
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_INT 3
37595: MINUS
37596: PUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_INT 3
37604: MINUS
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: PUSH
37614: LD_VAR 0 1
37618: PUSH
37619: LD_INT 4
37621: MINUS
37622: PUSH
37623: LD_VAR 0 2
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: PUSH
37636: LD_VAR 0 1
37640: PUSH
37641: LD_VAR 0 2
37645: PUSH
37646: LD_INT 3
37648: PLUS
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PUSH
37658: LD_VAR 0 1
37662: PUSH
37663: LD_INT 4
37665: PLUS
37666: PUSH
37667: LD_VAR 0 2
37671: PUSH
37672: LD_INT 4
37674: PLUS
37675: PUSH
37676: LD_INT 5
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: ST_TO_ADDR
// end ; 2 :
37691: GO 38250
37693: LD_INT 2
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37830
37701: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37702: LD_ADDR_VAR 0 5
37706: PUSH
37707: LD_VAR 0 1
37711: PUSH
37712: LD_VAR 0 2
37716: PUSH
37717: LD_INT 3
37719: MINUS
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: LD_INT 4
37736: PLUS
37737: PUSH
37738: LD_VAR 0 2
37742: PUSH
37743: LD_INT 4
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: PUSH
37751: LD_VAR 0 1
37755: PUSH
37756: LD_VAR 0 2
37760: PUSH
37761: LD_INT 4
37763: PLUS
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: PUSH
37773: LD_VAR 0 1
37777: PUSH
37778: LD_INT 3
37780: MINUS
37781: PUSH
37782: LD_VAR 0 2
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: PUSH
37795: LD_VAR 0 1
37799: PUSH
37800: LD_INT 4
37802: MINUS
37803: PUSH
37804: LD_VAR 0 2
37808: PUSH
37809: LD_INT 4
37811: MINUS
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// end ; 3 :
37828: GO 38250
37830: LD_INT 3
37832: DOUBLE
37833: EQUAL
37834: IFTRUE 37838
37836: GO 37971
37838: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37839: LD_ADDR_VAR 0 5
37843: PUSH
37844: LD_VAR 0 1
37848: PUSH
37849: LD_INT 3
37851: PLUS
37852: PUSH
37853: LD_VAR 0 2
37857: PUSH
37858: LD_INT 4
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: PUSH
37866: LD_VAR 0 1
37870: PUSH
37871: LD_INT 4
37873: PLUS
37874: PUSH
37875: LD_VAR 0 2
37879: PUSH
37880: LD_INT 4
37882: PLUS
37883: PUSH
37884: LD_INT 5
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: PUSH
37892: LD_VAR 0 1
37896: PUSH
37897: LD_INT 4
37899: MINUS
37900: PUSH
37901: LD_VAR 0 2
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: PUSH
37914: LD_VAR 0 1
37918: PUSH
37919: LD_VAR 0 2
37923: PUSH
37924: LD_INT 4
37926: MINUS
37927: PUSH
37928: LD_INT 3
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: PUSH
37936: LD_VAR 0 1
37940: PUSH
37941: LD_INT 3
37943: MINUS
37944: PUSH
37945: LD_VAR 0 2
37949: PUSH
37950: LD_INT 3
37952: MINUS
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
// end ; 4 :
37969: GO 38250
37971: LD_INT 4
37973: DOUBLE
37974: EQUAL
37975: IFTRUE 37979
37977: GO 38112
37979: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37980: LD_ADDR_VAR 0 5
37984: PUSH
37985: LD_VAR 0 1
37989: PUSH
37990: LD_VAR 0 2
37994: PUSH
37995: LD_INT 4
37997: PLUS
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: PUSH
38007: LD_VAR 0 1
38011: PUSH
38012: LD_INT 3
38014: PLUS
38015: PUSH
38016: LD_VAR 0 2
38020: PUSH
38021: LD_INT 3
38023: PLUS
38024: PUSH
38025: LD_INT 5
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: PUSH
38033: LD_VAR 0 1
38037: PUSH
38038: LD_INT 4
38040: PLUS
38041: PUSH
38042: LD_VAR 0 2
38046: PUSH
38047: LD_INT 4
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: PUSH
38055: LD_VAR 0 1
38059: PUSH
38060: LD_VAR 0 2
38064: PUSH
38065: LD_INT 3
38067: MINUS
38068: PUSH
38069: LD_INT 3
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: LD_VAR 0 1
38081: PUSH
38082: LD_INT 4
38084: MINUS
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_INT 4
38093: MINUS
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// end ; 5 :
38110: GO 38250
38112: LD_INT 5
38114: DOUBLE
38115: EQUAL
38116: IFTRUE 38120
38118: GO 38249
38120: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38121: LD_ADDR_VAR 0 5
38125: PUSH
38126: LD_VAR 0 1
38130: PUSH
38131: LD_INT 4
38133: MINUS
38134: PUSH
38135: LD_VAR 0 2
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: PUSH
38148: LD_VAR 0 1
38152: PUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_INT 4
38160: MINUS
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: PUSH
38170: LD_VAR 0 1
38174: PUSH
38175: LD_INT 4
38177: PLUS
38178: PUSH
38179: LD_VAR 0 2
38183: PUSH
38184: LD_INT 4
38186: PLUS
38187: PUSH
38188: LD_INT 5
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: PUSH
38196: LD_VAR 0 1
38200: PUSH
38201: LD_INT 3
38203: PLUS
38204: PUSH
38205: LD_VAR 0 2
38209: PUSH
38210: LD_INT 4
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: PUSH
38218: LD_VAR 0 1
38222: PUSH
38223: LD_VAR 0 2
38227: PUSH
38228: LD_INT 3
38230: PLUS
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: ST_TO_ADDR
// end ; end ;
38247: GO 38250
38249: POP
// result := list ;
38250: LD_ADDR_VAR 0 4
38254: PUSH
38255: LD_VAR 0 5
38259: ST_TO_ADDR
// end ;
38260: LD_VAR 0 4
38264: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38265: LD_INT 0
38267: PPUSH
38268: PPUSH
38269: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38270: LD_VAR 0 1
38274: NOT
38275: IFTRUE 38303
38277: PUSH
38278: LD_VAR 0 2
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: LD_INT 4
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: IN
38301: NOT
38302: OR
38303: IFFALSE 38307
// exit ;
38305: GO 38390
// tmp := [ ] ;
38307: LD_ADDR_VAR 0 5
38311: PUSH
38312: EMPTY
38313: ST_TO_ADDR
// for i in units do
38314: LD_ADDR_VAR 0 4
38318: PUSH
38319: LD_VAR 0 1
38323: PUSH
38324: FOR_IN
38325: IFFALSE 38359
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38327: LD_ADDR_VAR 0 5
38331: PUSH
38332: LD_VAR 0 5
38336: PPUSH
38337: LD_VAR 0 4
38341: PPUSH
38342: LD_VAR 0 2
38346: PPUSH
38347: CALL_OW 259
38351: PPUSH
38352: CALL 39785 0 2
38356: ST_TO_ADDR
38357: GO 38324
38359: POP
38360: POP
// if not tmp then
38361: LD_VAR 0 5
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38390
// result := SortListByListDesc ( units , tmp ) ;
38370: LD_ADDR_VAR 0 3
38374: PUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: LD_VAR 0 5
38384: PPUSH
38385: CALL_OW 77
38389: ST_TO_ADDR
// end ;
38390: LD_VAR 0 3
38394: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38395: LD_INT 0
38397: PPUSH
38398: PPUSH
38399: PPUSH
// result := false ;
38400: LD_ADDR_VAR 0 3
38404: PUSH
38405: LD_INT 0
38407: ST_TO_ADDR
// if not building then
38408: LD_VAR 0 2
38412: NOT
38413: IFFALSE 38417
// exit ;
38415: GO 38561
// x := GetX ( building ) ;
38417: LD_ADDR_VAR 0 4
38421: PUSH
38422: LD_VAR 0 2
38426: PPUSH
38427: CALL_OW 250
38431: ST_TO_ADDR
// y := GetY ( building ) ;
38432: LD_ADDR_VAR 0 5
38436: PUSH
38437: LD_VAR 0 2
38441: PPUSH
38442: CALL_OW 251
38446: ST_TO_ADDR
// if not x or not y then
38447: LD_VAR 0 4
38451: NOT
38452: IFTRUE 38461
38454: PUSH
38455: LD_VAR 0 5
38459: NOT
38460: OR
38461: IFFALSE 38465
// exit ;
38463: GO 38561
// if GetTaskList ( unit ) then
38465: LD_VAR 0 1
38469: PPUSH
38470: CALL_OW 437
38474: IFFALSE 38561
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38476: LD_STRING e
38478: PUSH
38479: LD_VAR 0 1
38483: PPUSH
38484: CALL_OW 437
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PUSH
38493: LD_INT 1
38495: ARRAY
38496: EQUAL
38497: IFFALSE 38524
38499: PUSH
38500: LD_VAR 0 4
38504: PUSH
38505: LD_VAR 0 1
38509: PPUSH
38510: CALL_OW 437
38514: PUSH
38515: LD_INT 1
38517: ARRAY
38518: PUSH
38519: LD_INT 2
38521: ARRAY
38522: EQUAL
38523: AND
38524: IFFALSE 38551
38526: PUSH
38527: LD_VAR 0 5
38531: PUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 437
38541: PUSH
38542: LD_INT 1
38544: ARRAY
38545: PUSH
38546: LD_INT 3
38548: ARRAY
38549: EQUAL
38550: AND
38551: IFFALSE 38561
// result := true end ;
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_INT 1
38560: ST_TO_ADDR
// end ;
38561: LD_VAR 0 3
38565: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38566: LD_INT 0
38568: PPUSH
// result := false ;
38569: LD_ADDR_VAR 0 4
38573: PUSH
38574: LD_INT 0
38576: ST_TO_ADDR
// if GetTaskList ( unit ) then
38577: LD_VAR 0 1
38581: PPUSH
38582: CALL_OW 437
38586: IFFALSE 38673
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38588: LD_STRING M
38590: PUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 437
38600: PUSH
38601: LD_INT 1
38603: ARRAY
38604: PUSH
38605: LD_INT 1
38607: ARRAY
38608: EQUAL
38609: IFFALSE 38636
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 437
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PUSH
38631: LD_INT 2
38633: ARRAY
38634: EQUAL
38635: AND
38636: IFFALSE 38663
38638: PUSH
38639: LD_VAR 0 3
38643: PUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 437
38653: PUSH
38654: LD_INT 1
38656: ARRAY
38657: PUSH
38658: LD_INT 3
38660: ARRAY
38661: EQUAL
38662: AND
38663: IFFALSE 38673
// result := true ;
38665: LD_ADDR_VAR 0 4
38669: PUSH
38670: LD_INT 1
38672: ST_TO_ADDR
// end ; end ;
38673: LD_VAR 0 4
38677: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38678: LD_INT 0
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
// if not unit or not area then
38684: LD_VAR 0 1
38688: NOT
38689: IFTRUE 38698
38691: PUSH
38692: LD_VAR 0 2
38696: NOT
38697: OR
38698: IFFALSE 38702
// exit ;
38700: GO 38878
// tmp := AreaToList ( area , i ) ;
38702: LD_ADDR_VAR 0 6
38706: PUSH
38707: LD_VAR 0 2
38711: PPUSH
38712: LD_VAR 0 5
38716: PPUSH
38717: CALL_OW 517
38721: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38722: LD_ADDR_VAR 0 5
38726: PUSH
38727: DOUBLE
38728: LD_INT 1
38730: DEC
38731: ST_TO_ADDR
38732: LD_VAR 0 6
38736: PUSH
38737: LD_INT 1
38739: ARRAY
38740: PUSH
38741: FOR_TO
38742: IFFALSE 38876
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38744: LD_ADDR_VAR 0 7
38748: PUSH
38749: LD_VAR 0 6
38753: PUSH
38754: LD_INT 1
38756: ARRAY
38757: PUSH
38758: LD_VAR 0 5
38762: ARRAY
38763: PUSH
38764: LD_VAR 0 6
38768: PUSH
38769: LD_INT 2
38771: ARRAY
38772: PUSH
38773: LD_VAR 0 5
38777: ARRAY
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38783: LD_INT 92
38785: PUSH
38786: LD_VAR 0 7
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PUSH
38795: LD_VAR 0 7
38799: PUSH
38800: LD_INT 2
38802: ARRAY
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: PPUSH
38813: CALL_OW 69
38817: PUSH
38818: LD_INT 0
38820: EQUAL
38821: IFFALSE 38874
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38823: LD_VAR 0 1
38827: PPUSH
38828: LD_VAR 0 7
38832: PUSH
38833: LD_INT 1
38835: ARRAY
38836: PPUSH
38837: LD_VAR 0 7
38841: PUSH
38842: LD_INT 2
38844: ARRAY
38845: PPUSH
38846: LD_VAR 0 3
38850: PPUSH
38851: CALL_OW 48
// result := IsPlaced ( unit ) ;
38855: LD_ADDR_VAR 0 4
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 305
38869: ST_TO_ADDR
// exit ;
38870: POP
38871: POP
38872: GO 38878
// end ; end ;
38874: GO 38741
38876: POP
38877: POP
// end ;
38878: LD_VAR 0 4
38882: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38883: LD_INT 0
38885: PPUSH
38886: PPUSH
38887: PPUSH
// if not side or side > 8 then
38888: LD_VAR 0 1
38892: NOT
38893: IFTRUE 38905
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_INT 8
38903: GREATER
38904: OR
38905: IFFALSE 38909
// exit ;
38907: GO 39096
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38909: LD_ADDR_VAR 0 4
38913: PUSH
38914: LD_INT 22
38916: PUSH
38917: LD_VAR 0 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 21
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PPUSH
38940: CALL_OW 69
38944: ST_TO_ADDR
// if not tmp then
38945: LD_VAR 0 4
38949: NOT
38950: IFFALSE 38954
// exit ;
38952: GO 39096
// enable_addtolog := true ;
38954: LD_ADDR_OWVAR 81
38958: PUSH
38959: LD_INT 1
38961: ST_TO_ADDR
// AddToLog ( [ ) ;
38962: LD_STRING [
38964: PPUSH
38965: CALL_OW 561
// for i in tmp do
38969: LD_ADDR_VAR 0 3
38973: PUSH
38974: LD_VAR 0 4
38978: PUSH
38979: FOR_IN
38980: IFFALSE 39087
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38982: LD_STRING [
38984: PUSH
38985: LD_VAR 0 3
38989: PPUSH
38990: CALL_OW 266
38994: STR
38995: PUSH
38996: LD_STRING , 
38998: STR
38999: PUSH
39000: LD_VAR 0 3
39004: PPUSH
39005: CALL_OW 250
39009: STR
39010: PUSH
39011: LD_STRING , 
39013: STR
39014: PUSH
39015: LD_VAR 0 3
39019: PPUSH
39020: CALL_OW 251
39024: STR
39025: PUSH
39026: LD_STRING , 
39028: STR
39029: PUSH
39030: LD_VAR 0 3
39034: PPUSH
39035: CALL_OW 254
39039: STR
39040: PUSH
39041: LD_STRING , 
39043: STR
39044: PUSH
39045: LD_VAR 0 3
39049: PPUSH
39050: LD_INT 1
39052: PPUSH
39053: CALL_OW 268
39057: STR
39058: PUSH
39059: LD_STRING , 
39061: STR
39062: PUSH
39063: LD_VAR 0 3
39067: PPUSH
39068: LD_INT 2
39070: PPUSH
39071: CALL_OW 268
39075: STR
39076: PUSH
39077: LD_STRING ],
39079: STR
39080: PPUSH
39081: CALL_OW 561
// end ;
39085: GO 38979
39087: POP
39088: POP
// AddToLog ( ]; ) ;
39089: LD_STRING ];
39091: PPUSH
39092: CALL_OW 561
// end ;
39096: LD_VAR 0 2
39100: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39101: LD_INT 0
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
// if not area or not rate or not max then
39108: LD_VAR 0 1
39112: NOT
39113: IFTRUE 39122
39115: PUSH
39116: LD_VAR 0 2
39120: NOT
39121: OR
39122: IFTRUE 39131
39124: PUSH
39125: LD_VAR 0 4
39129: NOT
39130: OR
39131: IFFALSE 39135
// exit ;
39133: GO 39324
// while 1 do
39135: LD_INT 1
39137: IFFALSE 39324
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39139: LD_ADDR_VAR 0 9
39143: PUSH
39144: LD_VAR 0 1
39148: PPUSH
39149: LD_INT 1
39151: PPUSH
39152: CALL_OW 287
39156: PUSH
39157: LD_INT 10
39159: MUL
39160: ST_TO_ADDR
// r := rate / 10 ;
39161: LD_ADDR_VAR 0 7
39165: PUSH
39166: LD_VAR 0 2
39170: PUSH
39171: LD_INT 10
39173: DIVREAL
39174: ST_TO_ADDR
// time := 1 1$00 ;
39175: LD_ADDR_VAR 0 8
39179: PUSH
39180: LD_INT 2100
39182: ST_TO_ADDR
// if amount < min then
39183: LD_VAR 0 9
39187: PUSH
39188: LD_VAR 0 3
39192: LESS
39193: IFFALSE 39211
// r := r * 2 else
39195: LD_ADDR_VAR 0 7
39199: PUSH
39200: LD_VAR 0 7
39204: PUSH
39205: LD_INT 2
39207: MUL
39208: ST_TO_ADDR
39209: GO 39237
// if amount > max then
39211: LD_VAR 0 9
39215: PUSH
39216: LD_VAR 0 4
39220: GREATER
39221: IFFALSE 39237
// r := r / 2 ;
39223: LD_ADDR_VAR 0 7
39227: PUSH
39228: LD_VAR 0 7
39232: PUSH
39233: LD_INT 2
39235: DIVREAL
39236: ST_TO_ADDR
// time := time / r ;
39237: LD_ADDR_VAR 0 8
39241: PUSH
39242: LD_VAR 0 8
39246: PUSH
39247: LD_VAR 0 7
39251: DIVREAL
39252: ST_TO_ADDR
// if time < 0 then
39253: LD_VAR 0 8
39257: PUSH
39258: LD_INT 0
39260: LESS
39261: IFFALSE 39278
// time := time * - 1 ;
39263: LD_ADDR_VAR 0 8
39267: PUSH
39268: LD_VAR 0 8
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: MUL
39277: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39278: LD_VAR 0 8
39282: PUSH
39283: LD_INT 35
39285: PPUSH
39286: LD_INT 875
39288: PPUSH
39289: CALL_OW 12
39293: PLUS
39294: PPUSH
39295: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39299: LD_INT 1
39301: PPUSH
39302: LD_INT 5
39304: PPUSH
39305: CALL_OW 12
39309: PPUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: LD_INT 1
39317: PPUSH
39318: CALL_OW 55
// end ;
39322: GO 39135
// end ;
39324: LD_VAR 0 5
39328: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39329: LD_INT 0
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
// if not turrets or not factories then
39339: LD_VAR 0 1
39343: NOT
39344: IFTRUE 39353
39346: PUSH
39347: LD_VAR 0 2
39351: NOT
39352: OR
39353: IFFALSE 39357
// exit ;
39355: GO 39664
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39357: LD_ADDR_VAR 0 10
39361: PUSH
39362: LD_INT 5
39364: PUSH
39365: LD_INT 6
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: LD_INT 4
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: LD_INT 5
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 24
39399: PUSH
39400: LD_INT 25
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 23
39409: PUSH
39410: LD_INT 27
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 42
39423: PUSH
39424: LD_INT 43
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 44
39433: PUSH
39434: LD_INT 46
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 45
39443: PUSH
39444: LD_INT 47
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: ST_TO_ADDR
// result := [ ] ;
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: EMPTY
39467: ST_TO_ADDR
// for i in turrets do
39468: LD_ADDR_VAR 0 4
39472: PUSH
39473: LD_VAR 0 1
39477: PUSH
39478: FOR_IN
39479: IFFALSE 39662
// begin nat := GetNation ( i ) ;
39481: LD_ADDR_VAR 0 7
39485: PUSH
39486: LD_VAR 0 4
39490: PPUSH
39491: CALL_OW 248
39495: ST_TO_ADDR
// weapon := 0 ;
39496: LD_ADDR_VAR 0 8
39500: PUSH
39501: LD_INT 0
39503: ST_TO_ADDR
// if not nat then
39504: LD_VAR 0 7
39508: NOT
39509: IFFALSE 39513
// continue ;
39511: GO 39478
// for j in list [ nat ] do
39513: LD_ADDR_VAR 0 5
39517: PUSH
39518: LD_VAR 0 10
39522: PUSH
39523: LD_VAR 0 7
39527: ARRAY
39528: PUSH
39529: FOR_IN
39530: IFFALSE 39571
// if GetBWeapon ( i ) = j [ 1 ] then
39532: LD_VAR 0 4
39536: PPUSH
39537: CALL_OW 269
39541: PUSH
39542: LD_VAR 0 5
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: EQUAL
39551: IFFALSE 39569
// begin weapon := j [ 2 ] ;
39553: LD_ADDR_VAR 0 8
39557: PUSH
39558: LD_VAR 0 5
39562: PUSH
39563: LD_INT 2
39565: ARRAY
39566: ST_TO_ADDR
// break ;
39567: GO 39571
// end ;
39569: GO 39529
39571: POP
39572: POP
// if not weapon then
39573: LD_VAR 0 8
39577: NOT
39578: IFFALSE 39582
// continue ;
39580: GO 39478
// for k in factories do
39582: LD_ADDR_VAR 0 6
39586: PUSH
39587: LD_VAR 0 2
39591: PUSH
39592: FOR_IN
39593: IFFALSE 39658
// begin weapons := AvailableWeaponList ( k ) ;
39595: LD_ADDR_VAR 0 9
39599: PUSH
39600: LD_VAR 0 6
39604: PPUSH
39605: CALL_OW 478
39609: ST_TO_ADDR
// if not weapons then
39610: LD_VAR 0 9
39614: NOT
39615: IFFALSE 39619
// continue ;
39617: GO 39592
// if weapon in weapons then
39619: LD_VAR 0 8
39623: PUSH
39624: LD_VAR 0 9
39628: IN
39629: IFFALSE 39656
// begin result := [ i , weapon ] ;
39631: LD_ADDR_VAR 0 3
39635: PUSH
39636: LD_VAR 0 4
39640: PUSH
39641: LD_VAR 0 8
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// exit ;
39650: POP
39651: POP
39652: POP
39653: POP
39654: GO 39664
// end ; end ;
39656: GO 39592
39658: POP
39659: POP
// end ;
39660: GO 39478
39662: POP
39663: POP
// end ;
39664: LD_VAR 0 3
39668: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39669: LD_INT 0
39671: PPUSH
// if not side or side > 8 then
39672: LD_VAR 0 3
39676: NOT
39677: IFTRUE 39689
39679: PUSH
39680: LD_VAR 0 3
39684: PUSH
39685: LD_INT 8
39687: GREATER
39688: OR
39689: IFFALSE 39693
// exit ;
39691: GO 39752
// if not range then
39693: LD_VAR 0 4
39697: NOT
39698: IFFALSE 39709
// range := - 12 ;
39700: LD_ADDR_VAR 0 4
39704: PUSH
39705: LD_INT 12
39707: NEG
39708: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_VAR 0 2
39718: PPUSH
39719: LD_VAR 0 3
39723: PPUSH
39724: LD_VAR 0 4
39728: PPUSH
39729: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39733: LD_VAR 0 1
39737: PPUSH
39738: LD_VAR 0 2
39742: PPUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: CALL_OW 331
// end ;
39752: LD_VAR 0 5
39756: RET
// export function Video ( mode ) ; begin
39757: LD_INT 0
39759: PPUSH
// ingame_video = mode ;
39760: LD_ADDR_OWVAR 52
39764: PUSH
39765: LD_VAR 0 1
39769: ST_TO_ADDR
// interface_hidden = mode ;
39770: LD_ADDR_OWVAR 54
39774: PUSH
39775: LD_VAR 0 1
39779: ST_TO_ADDR
// end ;
39780: LD_VAR 0 2
39784: RET
// export function Join ( array , element ) ; begin
39785: LD_INT 0
39787: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39788: LD_ADDR_VAR 0 3
39792: PUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: LD_VAR 0 1
39802: PUSH
39803: LD_INT 1
39805: PLUS
39806: PPUSH
39807: LD_VAR 0 2
39811: PPUSH
39812: CALL_OW 1
39816: ST_TO_ADDR
// end ;
39817: LD_VAR 0 3
39821: RET
// export function JoinUnion ( array , element ) ; begin
39822: LD_INT 0
39824: PPUSH
// result := array union element ;
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_VAR 0 1
39834: PUSH
39835: LD_VAR 0 2
39839: UNION
39840: ST_TO_ADDR
// end ;
39841: LD_VAR 0 3
39845: RET
// export function GetBehemoths ( side ) ; begin
39846: LD_INT 0
39848: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39849: LD_ADDR_VAR 0 2
39853: PUSH
39854: LD_INT 22
39856: PUSH
39857: LD_VAR 0 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 31
39868: PUSH
39869: LD_INT 25
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PPUSH
39880: CALL_OW 69
39884: ST_TO_ADDR
// end ;
39885: LD_VAR 0 2
39889: RET
// export function Shuffle ( array ) ; var i , index ; begin
39890: LD_INT 0
39892: PPUSH
39893: PPUSH
39894: PPUSH
// result := [ ] ;
39895: LD_ADDR_VAR 0 2
39899: PUSH
39900: EMPTY
39901: ST_TO_ADDR
// if not array then
39902: LD_VAR 0 1
39906: NOT
39907: IFFALSE 39911
// exit ;
39909: GO 40010
// Randomize ;
39911: CALL_OW 10
// for i = array downto 1 do
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: DOUBLE
39921: LD_VAR 0 1
39925: INC
39926: ST_TO_ADDR
39927: LD_INT 1
39929: PUSH
39930: FOR_DOWNTO
39931: IFFALSE 40008
// begin index := rand ( 1 , array ) ;
39933: LD_ADDR_VAR 0 4
39937: PUSH
39938: LD_INT 1
39940: PPUSH
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 12
39950: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39951: LD_ADDR_VAR 0 2
39955: PUSH
39956: LD_VAR 0 2
39960: PPUSH
39961: LD_VAR 0 2
39965: PUSH
39966: LD_INT 1
39968: PLUS
39969: PPUSH
39970: LD_VAR 0 1
39974: PUSH
39975: LD_VAR 0 4
39979: ARRAY
39980: PPUSH
39981: CALL_OW 2
39985: ST_TO_ADDR
// array := Delete ( array , index ) ;
39986: LD_ADDR_VAR 0 1
39990: PUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: LD_VAR 0 4
40000: PPUSH
40001: CALL_OW 3
40005: ST_TO_ADDR
// end ;
40006: GO 39930
40008: POP
40009: POP
// end ;
40010: LD_VAR 0 2
40014: RET
// export function GetBaseMaterials ( base ) ; begin
40015: LD_INT 0
40017: PPUSH
// result := [ 0 , 0 , 0 ] ;
40018: LD_ADDR_VAR 0 2
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// if not base then
40037: LD_VAR 0 1
40041: NOT
40042: IFFALSE 40046
// exit ;
40044: GO 40095
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40046: LD_ADDR_VAR 0 2
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: LD_INT 1
40058: PPUSH
40059: CALL_OW 275
40063: PUSH
40064: LD_VAR 0 1
40068: PPUSH
40069: LD_INT 2
40071: PPUSH
40072: CALL_OW 275
40076: PUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: LD_INT 3
40084: PPUSH
40085: CALL_OW 275
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// end ;
40095: LD_VAR 0 2
40099: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40100: LD_INT 0
40102: PPUSH
40103: PPUSH
// result := array ;
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: LD_VAR 0 1
40113: ST_TO_ADDR
// if size >= result then
40114: LD_VAR 0 2
40118: PUSH
40119: LD_VAR 0 3
40123: GREATEREQUAL
40124: IFFALSE 40128
// exit ;
40126: GO 40178
// if size then
40128: LD_VAR 0 2
40132: IFFALSE 40178
// for i := array downto size do
40134: LD_ADDR_VAR 0 4
40138: PUSH
40139: DOUBLE
40140: LD_VAR 0 1
40144: INC
40145: ST_TO_ADDR
40146: LD_VAR 0 2
40150: PUSH
40151: FOR_DOWNTO
40152: IFFALSE 40176
// result := Delete ( result , result ) ;
40154: LD_ADDR_VAR 0 3
40158: PUSH
40159: LD_VAR 0 3
40163: PPUSH
40164: LD_VAR 0 3
40168: PPUSH
40169: CALL_OW 3
40173: ST_TO_ADDR
40174: GO 40151
40176: POP
40177: POP
// end ;
40178: LD_VAR 0 3
40182: RET
// export function ComExit ( unit ) ; var tmp ; begin
40183: LD_INT 0
40185: PPUSH
40186: PPUSH
// if not IsInUnit ( unit ) then
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 310
40196: NOT
40197: IFFALSE 40201
// exit ;
40199: GO 40261
// tmp := IsInUnit ( unit ) ;
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: CALL_OW 310
40215: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40216: LD_VAR 0 3
40220: PPUSH
40221: CALL_OW 247
40225: PUSH
40226: LD_INT 2
40228: EQUAL
40229: IFFALSE 40242
// ComExitVehicle ( unit ) else
40231: LD_VAR 0 1
40235: PPUSH
40236: CALL_OW 121
40240: GO 40251
// ComExitBuilding ( unit ) ;
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 122
// result := tmp ;
40251: LD_ADDR_VAR 0 2
40255: PUSH
40256: LD_VAR 0 3
40260: ST_TO_ADDR
// end ;
40261: LD_VAR 0 2
40265: RET
// export function ComExitAll ( units ) ; var i ; begin
40266: LD_INT 0
40268: PPUSH
40269: PPUSH
// if not units then
40270: LD_VAR 0 1
40274: NOT
40275: IFFALSE 40279
// exit ;
40277: GO 40305
// for i in units do
40279: LD_ADDR_VAR 0 3
40283: PUSH
40284: LD_VAR 0 1
40288: PUSH
40289: FOR_IN
40290: IFFALSE 40303
// ComExit ( i ) ;
40292: LD_VAR 0 3
40296: PPUSH
40297: CALL 40183 0 1
40301: GO 40289
40303: POP
40304: POP
// end ;
40305: LD_VAR 0 2
40309: RET
// export function ResetHc ; begin
40310: LD_INT 0
40312: PPUSH
// InitHc ;
40313: CALL_OW 19
// hc_importance := 0 ;
40317: LD_ADDR_OWVAR 32
40321: PUSH
40322: LD_INT 0
40324: ST_TO_ADDR
// end ;
40325: LD_VAR 0 1
40329: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40330: LD_INT 0
40332: PPUSH
40333: PPUSH
40334: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40335: LD_ADDR_VAR 0 6
40339: PUSH
40340: LD_VAR 0 1
40344: PUSH
40345: LD_VAR 0 3
40349: PLUS
40350: PUSH
40351: LD_INT 2
40353: DIV
40354: ST_TO_ADDR
// if _x < 0 then
40355: LD_VAR 0 6
40359: PUSH
40360: LD_INT 0
40362: LESS
40363: IFFALSE 40380
// _x := _x * - 1 ;
40365: LD_ADDR_VAR 0 6
40369: PUSH
40370: LD_VAR 0 6
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: MUL
40379: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40380: LD_ADDR_VAR 0 7
40384: PUSH
40385: LD_VAR 0 2
40389: PUSH
40390: LD_VAR 0 4
40394: PLUS
40395: PUSH
40396: LD_INT 2
40398: DIV
40399: ST_TO_ADDR
// if _y < 0 then
40400: LD_VAR 0 7
40404: PUSH
40405: LD_INT 0
40407: LESS
40408: IFFALSE 40425
// _y := _y * - 1 ;
40410: LD_ADDR_VAR 0 7
40414: PUSH
40415: LD_VAR 0 7
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: MUL
40424: ST_TO_ADDR
// result := [ _x , _y ] ;
40425: LD_ADDR_VAR 0 5
40429: PUSH
40430: LD_VAR 0 6
40434: PUSH
40435: LD_VAR 0 7
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// end ;
40444: LD_VAR 0 5
40448: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40449: LD_INT 0
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
// task := GetTaskList ( unit ) ;
40455: LD_ADDR_VAR 0 7
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 437
40469: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40470: LD_VAR 0 7
40474: NOT
40475: IFFALSE 40494
40477: PUSH
40478: LD_VAR 0 1
40482: PPUSH
40483: LD_VAR 0 2
40487: PPUSH
40488: CALL_OW 308
40492: NOT
40493: AND
40494: IFFALSE 40498
// exit ;
40496: GO 40616
// if IsInArea ( unit , area ) then
40498: LD_VAR 0 1
40502: PPUSH
40503: LD_VAR 0 2
40507: PPUSH
40508: CALL_OW 308
40512: IFFALSE 40530
// begin ComMoveToArea ( unit , goAway ) ;
40514: LD_VAR 0 1
40518: PPUSH
40519: LD_VAR 0 3
40523: PPUSH
40524: CALL_OW 113
// exit ;
40528: GO 40616
// end ; if task [ 1 ] [ 1 ] <> M then
40530: LD_VAR 0 7
40534: PUSH
40535: LD_INT 1
40537: ARRAY
40538: PUSH
40539: LD_INT 1
40541: ARRAY
40542: PUSH
40543: LD_STRING M
40545: NONEQUAL
40546: IFFALSE 40550
// exit ;
40548: GO 40616
// x := task [ 1 ] [ 2 ] ;
40550: LD_ADDR_VAR 0 5
40554: PUSH
40555: LD_VAR 0 7
40559: PUSH
40560: LD_INT 1
40562: ARRAY
40563: PUSH
40564: LD_INT 2
40566: ARRAY
40567: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40568: LD_ADDR_VAR 0 6
40572: PUSH
40573: LD_VAR 0 7
40577: PUSH
40578: LD_INT 1
40580: ARRAY
40581: PUSH
40582: LD_INT 3
40584: ARRAY
40585: ST_TO_ADDR
// if InArea ( x , y , area ) then
40586: LD_VAR 0 5
40590: PPUSH
40591: LD_VAR 0 6
40595: PPUSH
40596: LD_VAR 0 2
40600: PPUSH
40601: CALL_OW 309
40605: IFFALSE 40616
// ComStop ( unit ) ;
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 141
// end ;
40616: LD_VAR 0 4
40620: RET
// export function Abs ( value ) ; begin
40621: LD_INT 0
40623: PPUSH
// result := value ;
40624: LD_ADDR_VAR 0 2
40628: PUSH
40629: LD_VAR 0 1
40633: ST_TO_ADDR
// if value < 0 then
40634: LD_VAR 0 1
40638: PUSH
40639: LD_INT 0
40641: LESS
40642: IFFALSE 40659
// result := value * - 1 ;
40644: LD_ADDR_VAR 0 2
40648: PUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: MUL
40658: ST_TO_ADDR
// end ;
40659: LD_VAR 0 2
40663: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40664: LD_INT 0
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
40670: PPUSH
40671: PPUSH
40672: PPUSH
40673: PPUSH
// if not unit or not building then
40674: LD_VAR 0 1
40678: NOT
40679: IFTRUE 40688
40681: PUSH
40682: LD_VAR 0 2
40686: NOT
40687: OR
40688: IFFALSE 40692
// exit ;
40690: GO 40920
// x := GetX ( building ) ;
40692: LD_ADDR_VAR 0 4
40696: PUSH
40697: LD_VAR 0 2
40701: PPUSH
40702: CALL_OW 250
40706: ST_TO_ADDR
// y := GetY ( building ) ;
40707: LD_ADDR_VAR 0 6
40711: PUSH
40712: LD_VAR 0 2
40716: PPUSH
40717: CALL_OW 251
40721: ST_TO_ADDR
// d := GetDir ( building ) ;
40722: LD_ADDR_VAR 0 8
40726: PUSH
40727: LD_VAR 0 2
40731: PPUSH
40732: CALL_OW 254
40736: ST_TO_ADDR
// r := 4 ;
40737: LD_ADDR_VAR 0 9
40741: PUSH
40742: LD_INT 4
40744: ST_TO_ADDR
// for i := 1 to 5 do
40745: LD_ADDR_VAR 0 10
40749: PUSH
40750: DOUBLE
40751: LD_INT 1
40753: DEC
40754: ST_TO_ADDR
40755: LD_INT 5
40757: PUSH
40758: FOR_TO
40759: IFFALSE 40918
// begin _x := ShiftX ( x , d , r + i ) ;
40761: LD_ADDR_VAR 0 5
40765: PUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: LD_VAR 0 8
40775: PPUSH
40776: LD_VAR 0 9
40780: PUSH
40781: LD_VAR 0 10
40785: PLUS
40786: PPUSH
40787: CALL_OW 272
40791: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40792: LD_ADDR_VAR 0 7
40796: PUSH
40797: LD_VAR 0 6
40801: PPUSH
40802: LD_VAR 0 8
40806: PPUSH
40807: LD_VAR 0 9
40811: PUSH
40812: LD_VAR 0 10
40816: PLUS
40817: PPUSH
40818: CALL_OW 273
40822: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40823: LD_VAR 0 5
40827: PPUSH
40828: LD_VAR 0 7
40832: PPUSH
40833: CALL_OW 488
40837: IFFALSE 40872
40839: PUSH
40840: LD_VAR 0 5
40844: PPUSH
40845: LD_VAR 0 7
40849: PPUSH
40850: CALL_OW 428
40854: PPUSH
40855: CALL_OW 247
40859: PUSH
40860: LD_INT 3
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: IN
40870: NOT
40871: AND
40872: IFFALSE 40916
// begin ComMoveXY ( unit , _x , _y ) ;
40874: LD_VAR 0 1
40878: PPUSH
40879: LD_VAR 0 5
40883: PPUSH
40884: LD_VAR 0 7
40888: PPUSH
40889: CALL_OW 111
// result := [ _x , _y ] ;
40893: LD_ADDR_VAR 0 3
40897: PUSH
40898: LD_VAR 0 5
40902: PUSH
40903: LD_VAR 0 7
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: ST_TO_ADDR
// exit ;
40912: POP
40913: POP
40914: GO 40920
// end ; end ;
40916: GO 40758
40918: POP
40919: POP
// end ;
40920: LD_VAR 0 3
40924: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40925: LD_INT 0
40927: PPUSH
40928: PPUSH
40929: PPUSH
// result := 0 ;
40930: LD_ADDR_VAR 0 3
40934: PUSH
40935: LD_INT 0
40937: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40938: LD_VAR 0 1
40942: PUSH
40943: LD_INT 0
40945: LESS
40946: IFTRUE 40958
40948: PUSH
40949: LD_VAR 0 1
40953: PUSH
40954: LD_INT 8
40956: GREATER
40957: OR
40958: IFTRUE 40970
40960: PUSH
40961: LD_VAR 0 2
40965: PUSH
40966: LD_INT 0
40968: LESS
40969: OR
40970: IFTRUE 40982
40972: PUSH
40973: LD_VAR 0 2
40977: PUSH
40978: LD_INT 8
40980: GREATER
40981: OR
40982: IFFALSE 40986
// exit ;
40984: GO 41061
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40986: LD_ADDR_VAR 0 4
40990: PUSH
40991: LD_INT 22
40993: PUSH
40994: LD_VAR 0 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PPUSH
41003: CALL_OW 69
41007: PUSH
41008: FOR_IN
41009: IFFALSE 41059
// begin un := UnitShoot ( i ) ;
41011: LD_ADDR_VAR 0 5
41015: PUSH
41016: LD_VAR 0 4
41020: PPUSH
41021: CALL_OW 504
41025: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41026: LD_VAR 0 5
41030: PPUSH
41031: CALL_OW 255
41035: PUSH
41036: LD_VAR 0 1
41040: EQUAL
41041: IFFALSE 41057
// begin result := un ;
41043: LD_ADDR_VAR 0 3
41047: PUSH
41048: LD_VAR 0 5
41052: ST_TO_ADDR
// exit ;
41053: POP
41054: POP
41055: GO 41061
// end ; end ;
41057: GO 41008
41059: POP
41060: POP
// end ;
41061: LD_VAR 0 3
41065: RET
// export function GetCargoBay ( units ) ; begin
41066: LD_INT 0
41068: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41069: LD_ADDR_VAR 0 2
41073: PUSH
41074: LD_VAR 0 1
41078: PPUSH
41079: LD_INT 2
41081: PUSH
41082: LD_INT 34
41084: PUSH
41085: LD_INT 12
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 34
41094: PUSH
41095: LD_INT 51
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 34
41104: PUSH
41105: LD_INT 32
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 34
41114: PUSH
41115: LD_INT 89
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: PPUSH
41129: CALL_OW 72
41133: ST_TO_ADDR
// end ;
41134: LD_VAR 0 2
41138: RET
// export function Negate ( value ) ; begin
41139: LD_INT 0
41141: PPUSH
// result := not value ;
41142: LD_ADDR_VAR 0 2
41146: PUSH
41147: LD_VAR 0 1
41151: NOT
41152: ST_TO_ADDR
// end ;
41153: LD_VAR 0 2
41157: RET
// export function Inc ( value ) ; begin
41158: LD_INT 0
41160: PPUSH
// result := value + 1 ;
41161: LD_ADDR_VAR 0 2
41165: PUSH
41166: LD_VAR 0 1
41170: PUSH
41171: LD_INT 1
41173: PLUS
41174: ST_TO_ADDR
// end ;
41175: LD_VAR 0 2
41179: RET
// export function Dec ( value ) ; begin
41180: LD_INT 0
41182: PPUSH
// result := value - 1 ;
41183: LD_ADDR_VAR 0 2
41187: PUSH
41188: LD_VAR 0 1
41192: PUSH
41193: LD_INT 1
41195: MINUS
41196: ST_TO_ADDR
// end ;
41197: LD_VAR 0 2
41201: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41202: LD_INT 0
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41212: LD_VAR 0 1
41216: PPUSH
41217: LD_VAR 0 2
41221: PPUSH
41222: CALL_OW 488
41226: NOT
41227: IFTRUE 41246
41229: PUSH
41230: LD_VAR 0 3
41234: PPUSH
41235: LD_VAR 0 4
41239: PPUSH
41240: CALL_OW 488
41244: NOT
41245: OR
41246: IFFALSE 41259
// begin result := - 1 ;
41248: LD_ADDR_VAR 0 5
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: ST_TO_ADDR
// exit ;
41257: GO 41494
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41259: LD_ADDR_VAR 0 12
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: LD_VAR 0 2
41273: PPUSH
41274: LD_VAR 0 3
41278: PPUSH
41279: LD_VAR 0 4
41283: PPUSH
41284: CALL 40330 0 4
41288: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41289: LD_ADDR_VAR 0 11
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: LD_VAR 0 2
41303: PPUSH
41304: LD_VAR 0 12
41308: PUSH
41309: LD_INT 1
41311: ARRAY
41312: PPUSH
41313: LD_VAR 0 12
41317: PUSH
41318: LD_INT 2
41320: ARRAY
41321: PPUSH
41322: CALL_OW 298
41326: ST_TO_ADDR
// distance := 9999 ;
41327: LD_ADDR_VAR 0 10
41331: PUSH
41332: LD_INT 9999
41334: ST_TO_ADDR
// for i := 0 to 5 do
41335: LD_ADDR_VAR 0 6
41339: PUSH
41340: DOUBLE
41341: LD_INT 0
41343: DEC
41344: ST_TO_ADDR
41345: LD_INT 5
41347: PUSH
41348: FOR_TO
41349: IFFALSE 41492
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41351: LD_ADDR_VAR 0 7
41355: PUSH
41356: LD_VAR 0 1
41360: PPUSH
41361: LD_VAR 0 6
41365: PPUSH
41366: LD_VAR 0 11
41370: PPUSH
41371: CALL_OW 272
41375: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41376: LD_ADDR_VAR 0 8
41380: PUSH
41381: LD_VAR 0 2
41385: PPUSH
41386: LD_VAR 0 6
41390: PPUSH
41391: LD_VAR 0 11
41395: PPUSH
41396: CALL_OW 273
41400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41401: LD_VAR 0 7
41405: PPUSH
41406: LD_VAR 0 8
41410: PPUSH
41411: CALL_OW 488
41415: NOT
41416: IFFALSE 41420
// continue ;
41418: GO 41348
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41420: LD_ADDR_VAR 0 9
41424: PUSH
41425: LD_VAR 0 12
41429: PUSH
41430: LD_INT 1
41432: ARRAY
41433: PPUSH
41434: LD_VAR 0 12
41438: PUSH
41439: LD_INT 2
41441: ARRAY
41442: PPUSH
41443: LD_VAR 0 7
41447: PPUSH
41448: LD_VAR 0 8
41452: PPUSH
41453: CALL_OW 298
41457: ST_TO_ADDR
// if tmp < distance then
41458: LD_VAR 0 9
41462: PUSH
41463: LD_VAR 0 10
41467: LESS
41468: IFFALSE 41490
// begin result := i ;
41470: LD_ADDR_VAR 0 5
41474: PUSH
41475: LD_VAR 0 6
41479: ST_TO_ADDR
// distance := tmp ;
41480: LD_ADDR_VAR 0 10
41484: PUSH
41485: LD_VAR 0 9
41489: ST_TO_ADDR
// end ; end ;
41490: GO 41348
41492: POP
41493: POP
// end ;
41494: LD_VAR 0 5
41498: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41499: LD_INT 0
41501: PPUSH
41502: PPUSH
// if not driver or not IsInUnit ( driver ) then
41503: LD_VAR 0 1
41507: NOT
41508: IFTRUE 41522
41510: PUSH
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 310
41520: NOT
41521: OR
41522: IFFALSE 41526
// exit ;
41524: GO 41616
// vehicle := IsInUnit ( driver ) ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 310
41540: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41541: LD_VAR 0 1
41545: PPUSH
41546: LD_STRING \
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: PUSH
41576: LD_STRING E
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_VAR 0 3
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PPUSH
41612: CALL_OW 446
// end ;
41616: LD_VAR 0 2
41620: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41621: LD_INT 0
41623: PPUSH
41624: PPUSH
// if not driver or not IsInUnit ( driver ) then
41625: LD_VAR 0 1
41629: NOT
41630: IFTRUE 41644
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 310
41642: NOT
41643: OR
41644: IFFALSE 41648
// exit ;
41646: GO 41738
// vehicle := IsInUnit ( driver ) ;
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: CALL_OW 310
41662: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41663: LD_VAR 0 1
41667: PPUSH
41668: LD_STRING \
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: PUSH
41698: LD_STRING E
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_VAR 0 3
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PPUSH
41734: CALL_OW 447
// end ;
41738: LD_VAR 0 2
41742: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41743: LD_INT 0
41745: PPUSH
41746: PPUSH
41747: PPUSH
// tmp := [ ] ;
41748: LD_ADDR_VAR 0 5
41752: PUSH
41753: EMPTY
41754: ST_TO_ADDR
// for i in units do
41755: LD_ADDR_VAR 0 4
41759: PUSH
41760: LD_VAR 0 1
41764: PUSH
41765: FOR_IN
41766: IFFALSE 41804
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41768: LD_ADDR_VAR 0 5
41772: PUSH
41773: LD_VAR 0 5
41777: PPUSH
41778: LD_VAR 0 5
41782: PUSH
41783: LD_INT 1
41785: PLUS
41786: PPUSH
41787: LD_VAR 0 4
41791: PPUSH
41792: CALL_OW 256
41796: PPUSH
41797: CALL_OW 2
41801: ST_TO_ADDR
41802: GO 41765
41804: POP
41805: POP
// if not tmp then
41806: LD_VAR 0 5
41810: NOT
41811: IFFALSE 41815
// exit ;
41813: GO 41863
// if asc then
41815: LD_VAR 0 2
41819: IFFALSE 41843
// result := SortListByListAsc ( units , tmp ) else
41821: LD_ADDR_VAR 0 3
41825: PUSH
41826: LD_VAR 0 1
41830: PPUSH
41831: LD_VAR 0 5
41835: PPUSH
41836: CALL_OW 76
41840: ST_TO_ADDR
41841: GO 41863
// result := SortListByListDesc ( units , tmp ) ;
41843: LD_ADDR_VAR 0 3
41847: PUSH
41848: LD_VAR 0 1
41852: PPUSH
41853: LD_VAR 0 5
41857: PPUSH
41858: CALL_OW 77
41862: ST_TO_ADDR
// end ;
41863: LD_VAR 0 3
41867: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41868: LD_INT 0
41870: PPUSH
41871: PPUSH
// task := GetTaskList ( mech ) ;
41872: LD_ADDR_VAR 0 4
41876: PUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 437
41886: ST_TO_ADDR
// if not task then
41887: LD_VAR 0 4
41891: NOT
41892: IFFALSE 41896
// exit ;
41894: GO 41940
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41896: LD_ADDR_VAR 0 3
41900: PUSH
41901: LD_VAR 0 4
41905: PUSH
41906: LD_INT 1
41908: ARRAY
41909: PUSH
41910: LD_INT 1
41912: ARRAY
41913: PUSH
41914: LD_STRING r
41916: EQUAL
41917: IFFALSE 41939
41919: PUSH
41920: LD_VAR 0 4
41924: PUSH
41925: LD_INT 1
41927: ARRAY
41928: PUSH
41929: LD_INT 4
41931: ARRAY
41932: PUSH
41933: LD_VAR 0 2
41937: EQUAL
41938: AND
41939: ST_TO_ADDR
// end ;
41940: LD_VAR 0 3
41944: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41945: LD_INT 0
41947: PPUSH
// SetDir ( unit , d ) ;
41948: LD_VAR 0 1
41952: PPUSH
41953: LD_VAR 0 4
41957: PPUSH
41958: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41962: LD_ADDR_VAR 0 6
41966: PUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: LD_VAR 0 2
41976: PPUSH
41977: LD_VAR 0 3
41981: PPUSH
41982: LD_VAR 0 5
41986: PPUSH
41987: CALL_OW 48
41991: ST_TO_ADDR
// end ;
41992: LD_VAR 0 6
41996: RET
// export function ToNaturalNumber ( number ) ; begin
41997: LD_INT 0
41999: PPUSH
// result := number div 1 ;
42000: LD_ADDR_VAR 0 2
42004: PUSH
42005: LD_VAR 0 1
42009: PUSH
42010: LD_INT 1
42012: DIV
42013: ST_TO_ADDR
// if number < 0 then
42014: LD_VAR 0 1
42018: PUSH
42019: LD_INT 0
42021: LESS
42022: IFFALSE 42032
// result := 0 ;
42024: LD_ADDR_VAR 0 2
42028: PUSH
42029: LD_INT 0
42031: ST_TO_ADDR
// end ;
42032: LD_VAR 0 2
42036: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42037: LD_INT 0
42039: PPUSH
42040: PPUSH
42041: PPUSH
// if not buildings then
42042: LD_VAR 0 1
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42166
// tmp := [ ] ;
42051: LD_ADDR_VAR 0 5
42055: PUSH
42056: EMPTY
42057: ST_TO_ADDR
// for b in buildings do
42058: LD_ADDR_VAR 0 4
42062: PUSH
42063: LD_VAR 0 1
42067: PUSH
42068: FOR_IN
42069: IFFALSE 42107
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42071: LD_ADDR_VAR 0 5
42075: PUSH
42076: LD_VAR 0 5
42080: PPUSH
42081: LD_VAR 0 5
42085: PUSH
42086: LD_INT 1
42088: PLUS
42089: PPUSH
42090: LD_VAR 0 4
42094: PPUSH
42095: CALL_OW 266
42099: PPUSH
42100: CALL_OW 1
42104: ST_TO_ADDR
42105: GO 42068
42107: POP
42108: POP
// if not tmp then
42109: LD_VAR 0 5
42113: NOT
42114: IFFALSE 42118
// exit ;
42116: GO 42166
// if asc then
42118: LD_VAR 0 2
42122: IFFALSE 42146
// result := SortListByListAsc ( buildings , tmp ) else
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_VAR 0 1
42133: PPUSH
42134: LD_VAR 0 5
42138: PPUSH
42139: CALL_OW 76
42143: ST_TO_ADDR
42144: GO 42166
// result := SortListByListDesc ( buildings , tmp ) ;
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: LD_VAR 0 5
42160: PPUSH
42161: CALL_OW 77
42165: ST_TO_ADDR
// end ;
42166: LD_VAR 0 3
42170: RET
// export function SortByClass ( units , class ) ; var un ; begin
42171: LD_INT 0
42173: PPUSH
42174: PPUSH
// if not units or not class then
42175: LD_VAR 0 1
42179: NOT
42180: IFTRUE 42189
42182: PUSH
42183: LD_VAR 0 2
42187: NOT
42188: OR
42189: IFFALSE 42193
// exit ;
42191: GO 42288
// result := [ ] ;
42193: LD_ADDR_VAR 0 3
42197: PUSH
42198: EMPTY
42199: ST_TO_ADDR
// for un in units do
42200: LD_ADDR_VAR 0 4
42204: PUSH
42205: LD_VAR 0 1
42209: PUSH
42210: FOR_IN
42211: IFFALSE 42286
// if GetClass ( un ) = class then
42213: LD_VAR 0 4
42217: PPUSH
42218: CALL_OW 257
42222: PUSH
42223: LD_VAR 0 2
42227: EQUAL
42228: IFFALSE 42255
// result := Insert ( result , 1 , un ) else
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_VAR 0 3
42239: PPUSH
42240: LD_INT 1
42242: PPUSH
42243: LD_VAR 0 4
42247: PPUSH
42248: CALL_OW 2
42252: ST_TO_ADDR
42253: GO 42284
// result := Replace ( result , result + 1 , un ) ;
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: LD_VAR 0 3
42264: PPUSH
42265: LD_VAR 0 3
42269: PUSH
42270: LD_INT 1
42272: PLUS
42273: PPUSH
42274: LD_VAR 0 4
42278: PPUSH
42279: CALL_OW 1
42283: ST_TO_ADDR
42284: GO 42210
42286: POP
42287: POP
// end ;
42288: LD_VAR 0 3
42292: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42293: LD_INT 0
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
// result := [ ] ;
42302: LD_ADDR_VAR 0 4
42306: PUSH
42307: EMPTY
42308: ST_TO_ADDR
// if x - r < 0 then
42309: LD_VAR 0 1
42313: PUSH
42314: LD_VAR 0 3
42318: MINUS
42319: PUSH
42320: LD_INT 0
42322: LESS
42323: IFFALSE 42335
// min_x := 0 else
42325: LD_ADDR_VAR 0 8
42329: PUSH
42330: LD_INT 0
42332: ST_TO_ADDR
42333: GO 42351
// min_x := x - r ;
42335: LD_ADDR_VAR 0 8
42339: PUSH
42340: LD_VAR 0 1
42344: PUSH
42345: LD_VAR 0 3
42349: MINUS
42350: ST_TO_ADDR
// if y - r < 0 then
42351: LD_VAR 0 2
42355: PUSH
42356: LD_VAR 0 3
42360: MINUS
42361: PUSH
42362: LD_INT 0
42364: LESS
42365: IFFALSE 42377
// min_y := 0 else
42367: LD_ADDR_VAR 0 7
42371: PUSH
42372: LD_INT 0
42374: ST_TO_ADDR
42375: GO 42393
// min_y := y - r ;
42377: LD_ADDR_VAR 0 7
42381: PUSH
42382: LD_VAR 0 2
42386: PUSH
42387: LD_VAR 0 3
42391: MINUS
42392: ST_TO_ADDR
// max_x := x + r ;
42393: LD_ADDR_VAR 0 9
42397: PUSH
42398: LD_VAR 0 1
42402: PUSH
42403: LD_VAR 0 3
42407: PLUS
42408: ST_TO_ADDR
// max_y := y + r ;
42409: LD_ADDR_VAR 0 10
42413: PUSH
42414: LD_VAR 0 2
42418: PUSH
42419: LD_VAR 0 3
42423: PLUS
42424: ST_TO_ADDR
// for _x = min_x to max_x do
42425: LD_ADDR_VAR 0 5
42429: PUSH
42430: DOUBLE
42431: LD_VAR 0 8
42435: DEC
42436: ST_TO_ADDR
42437: LD_VAR 0 9
42441: PUSH
42442: FOR_TO
42443: IFFALSE 42544
// for _y = min_y to max_y do
42445: LD_ADDR_VAR 0 6
42449: PUSH
42450: DOUBLE
42451: LD_VAR 0 7
42455: DEC
42456: ST_TO_ADDR
42457: LD_VAR 0 10
42461: PUSH
42462: FOR_TO
42463: IFFALSE 42540
// begin if not ValidHex ( _x , _y ) then
42465: LD_VAR 0 5
42469: PPUSH
42470: LD_VAR 0 6
42474: PPUSH
42475: CALL_OW 488
42479: NOT
42480: IFFALSE 42484
// continue ;
42482: GO 42462
// if GetResourceTypeXY ( _x , _y ) then
42484: LD_VAR 0 5
42488: PPUSH
42489: LD_VAR 0 6
42493: PPUSH
42494: CALL_OW 283
42498: IFFALSE 42538
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42500: LD_ADDR_VAR 0 4
42504: PUSH
42505: LD_VAR 0 4
42509: PPUSH
42510: LD_VAR 0 4
42514: PUSH
42515: LD_INT 1
42517: PLUS
42518: PPUSH
42519: LD_VAR 0 5
42523: PUSH
42524: LD_VAR 0 6
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PPUSH
42533: CALL_OW 1
42537: ST_TO_ADDR
// end ;
42538: GO 42462
42540: POP
42541: POP
42542: GO 42442
42544: POP
42545: POP
// end ;
42546: LD_VAR 0 4
42550: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42551: LD_INT 0
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
42558: PPUSH
42559: PPUSH
42560: PPUSH
// if not units then
42561: LD_VAR 0 1
42565: NOT
42566: IFFALSE 42570
// exit ;
42568: GO 43102
// result := UnitFilter ( units , [ f_ok ] ) ;
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: LD_VAR 0 1
42579: PPUSH
42580: LD_INT 50
42582: PUSH
42583: EMPTY
42584: LIST
42585: PPUSH
42586: CALL_OW 72
42590: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42591: LD_ADDR_VAR 0 8
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: PPUSH
42605: CALL_OW 255
42609: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42610: LD_ADDR_VAR 0 10
42614: PUSH
42615: LD_INT 29
42617: PUSH
42618: LD_INT 91
42620: PUSH
42621: LD_INT 49
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
// if not result then
42629: LD_VAR 0 3
42633: NOT
42634: IFFALSE 42638
// exit ;
42636: GO 43102
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42638: LD_ADDR_VAR 0 5
42642: PUSH
42643: LD_INT 81
42645: PUSH
42646: LD_VAR 0 8
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PPUSH
42655: CALL_OW 69
42659: ST_TO_ADDR
// for i in result do
42660: LD_ADDR_VAR 0 4
42664: PUSH
42665: LD_VAR 0 3
42669: PUSH
42670: FOR_IN
42671: IFFALSE 43100
// begin tag := GetTag ( i ) + 1 ;
42673: LD_ADDR_VAR 0 9
42677: PUSH
42678: LD_VAR 0 4
42682: PPUSH
42683: CALL_OW 110
42687: PUSH
42688: LD_INT 1
42690: PLUS
42691: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42692: LD_ADDR_VAR 0 7
42696: PUSH
42697: LD_VAR 0 4
42701: PPUSH
42702: CALL_OW 250
42706: PPUSH
42707: LD_VAR 0 4
42711: PPUSH
42712: CALL_OW 251
42716: PPUSH
42717: LD_INT 4
42719: PPUSH
42720: CALL 42293 0 3
42724: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42725: LD_VAR 0 4
42729: PPUSH
42730: CALL_OW 247
42734: PUSH
42735: LD_INT 2
42737: EQUAL
42738: IFFALSE 42750
42740: PUSH
42741: LD_VAR 0 7
42745: PUSH
42746: LD_INT 2
42748: GREATER
42749: AND
42750: IFFALSE 42770
42752: PUSH
42753: LD_VAR 0 4
42757: PPUSH
42758: CALL_OW 264
42762: PUSH
42763: LD_VAR 0 10
42767: IN
42768: NOT
42769: AND
42770: IFFALSE 42809
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42772: LD_VAR 0 4
42776: PPUSH
42777: LD_VAR 0 7
42781: PUSH
42782: LD_INT 1
42784: ARRAY
42785: PUSH
42786: LD_INT 1
42788: ARRAY
42789: PPUSH
42790: LD_VAR 0 7
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: PPUSH
42803: CALL_OW 116
42807: GO 43098
// if path > tag then
42809: LD_VAR 0 2
42813: PUSH
42814: LD_VAR 0 9
42818: GREATER
42819: IFFALSE 43027
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42821: LD_ADDR_VAR 0 6
42825: PUSH
42826: LD_VAR 0 5
42830: PPUSH
42831: LD_INT 91
42833: PUSH
42834: LD_VAR 0 4
42838: PUSH
42839: LD_INT 8
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: PPUSH
42847: CALL_OW 72
42851: ST_TO_ADDR
// if nearEnemy then
42852: LD_VAR 0 6
42856: IFFALSE 42925
// begin if GetWeapon ( i ) = ru_time_lapser then
42858: LD_VAR 0 4
42862: PPUSH
42863: CALL_OW 264
42867: PUSH
42868: LD_INT 49
42870: EQUAL
42871: IFFALSE 42899
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42873: LD_VAR 0 4
42877: PPUSH
42878: LD_VAR 0 6
42882: PPUSH
42883: LD_VAR 0 4
42887: PPUSH
42888: CALL_OW 74
42892: PPUSH
42893: CALL_OW 112
42897: GO 42923
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42899: LD_VAR 0 4
42903: PPUSH
42904: LD_VAR 0 6
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL_OW 74
42918: PPUSH
42919: CALL 44183 0 2
// end else
42923: GO 43025
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42925: LD_VAR 0 4
42929: PPUSH
42930: LD_VAR 0 2
42934: PUSH
42935: LD_VAR 0 9
42939: ARRAY
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: PPUSH
42945: LD_VAR 0 2
42949: PUSH
42950: LD_VAR 0 9
42954: ARRAY
42955: PUSH
42956: LD_INT 2
42958: ARRAY
42959: PPUSH
42960: CALL_OW 297
42964: PUSH
42965: LD_INT 6
42967: GREATER
42968: IFFALSE 43011
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42970: LD_VAR 0 4
42974: PPUSH
42975: LD_VAR 0 2
42979: PUSH
42980: LD_VAR 0 9
42984: ARRAY
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PPUSH
42990: LD_VAR 0 2
42994: PUSH
42995: LD_VAR 0 9
42999: ARRAY
43000: PUSH
43001: LD_INT 2
43003: ARRAY
43004: PPUSH
43005: CALL_OW 114
43009: GO 43025
// SetTag ( i , tag ) ;
43011: LD_VAR 0 4
43015: PPUSH
43016: LD_VAR 0 9
43020: PPUSH
43021: CALL_OW 109
// end else
43025: GO 43098
// if enemy then
43027: LD_VAR 0 5
43031: IFFALSE 43098
// begin if GetWeapon ( i ) = ru_time_lapser then
43033: LD_VAR 0 4
43037: PPUSH
43038: CALL_OW 264
43042: PUSH
43043: LD_INT 49
43045: EQUAL
43046: IFFALSE 43074
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43048: LD_VAR 0 4
43052: PPUSH
43053: LD_VAR 0 5
43057: PPUSH
43058: LD_VAR 0 4
43062: PPUSH
43063: CALL_OW 74
43067: PPUSH
43068: CALL_OW 112
43072: GO 43098
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43074: LD_VAR 0 4
43078: PPUSH
43079: LD_VAR 0 5
43083: PPUSH
43084: LD_VAR 0 4
43088: PPUSH
43089: CALL_OW 74
43093: PPUSH
43094: CALL 44183 0 2
// end ; end ;
43098: GO 42670
43100: POP
43101: POP
// end ;
43102: LD_VAR 0 3
43106: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43107: LD_INT 0
43109: PPUSH
43110: PPUSH
43111: PPUSH
// if not unit or IsInUnit ( unit ) then
43112: LD_VAR 0 1
43116: NOT
43117: IFTRUE 43130
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: CALL_OW 310
43129: OR
43130: IFFALSE 43134
// exit ;
43132: GO 43225
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43134: LD_ADDR_VAR 0 4
43138: PUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: CALL_OW 250
43148: PPUSH
43149: LD_VAR 0 2
43153: PPUSH
43154: LD_INT 1
43156: PPUSH
43157: CALL_OW 272
43161: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43162: LD_ADDR_VAR 0 5
43166: PUSH
43167: LD_VAR 0 1
43171: PPUSH
43172: CALL_OW 251
43176: PPUSH
43177: LD_VAR 0 2
43181: PPUSH
43182: LD_INT 1
43184: PPUSH
43185: CALL_OW 273
43189: ST_TO_ADDR
// if ValidHex ( x , y ) then
43190: LD_VAR 0 4
43194: PPUSH
43195: LD_VAR 0 5
43199: PPUSH
43200: CALL_OW 488
43204: IFFALSE 43225
// ComTurnXY ( unit , x , y ) ;
43206: LD_VAR 0 1
43210: PPUSH
43211: LD_VAR 0 4
43215: PPUSH
43216: LD_VAR 0 5
43220: PPUSH
43221: CALL_OW 118
// end ;
43225: LD_VAR 0 3
43229: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43230: LD_INT 0
43232: PPUSH
43233: PPUSH
// result := false ;
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_INT 0
43241: ST_TO_ADDR
// if not units then
43242: LD_VAR 0 2
43246: NOT
43247: IFFALSE 43251
// exit ;
43249: GO 43296
// for i in units do
43251: LD_ADDR_VAR 0 4
43255: PUSH
43256: LD_VAR 0 2
43260: PUSH
43261: FOR_IN
43262: IFFALSE 43294
// if See ( side , i ) then
43264: LD_VAR 0 1
43268: PPUSH
43269: LD_VAR 0 4
43273: PPUSH
43274: CALL_OW 292
43278: IFFALSE 43292
// begin result := true ;
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: LD_INT 1
43287: ST_TO_ADDR
// exit ;
43288: POP
43289: POP
43290: GO 43296
// end ;
43292: GO 43261
43294: POP
43295: POP
// end ;
43296: LD_VAR 0 3
43300: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43301: LD_INT 0
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
// if not unit or not points then
43307: LD_VAR 0 1
43311: NOT
43312: IFTRUE 43321
43314: PUSH
43315: LD_VAR 0 2
43319: NOT
43320: OR
43321: IFFALSE 43325
// exit ;
43323: GO 43415
// dist := 99999 ;
43325: LD_ADDR_VAR 0 5
43329: PUSH
43330: LD_INT 99999
43332: ST_TO_ADDR
// for i in points do
43333: LD_ADDR_VAR 0 4
43337: PUSH
43338: LD_VAR 0 2
43342: PUSH
43343: FOR_IN
43344: IFFALSE 43413
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43346: LD_ADDR_VAR 0 6
43350: PUSH
43351: LD_VAR 0 1
43355: PPUSH
43356: LD_VAR 0 4
43360: PUSH
43361: LD_INT 1
43363: ARRAY
43364: PPUSH
43365: LD_VAR 0 4
43369: PUSH
43370: LD_INT 2
43372: ARRAY
43373: PPUSH
43374: CALL_OW 297
43378: ST_TO_ADDR
// if tmpDist < dist then
43379: LD_VAR 0 6
43383: PUSH
43384: LD_VAR 0 5
43388: LESS
43389: IFFALSE 43411
// begin result := i ;
43391: LD_ADDR_VAR 0 3
43395: PUSH
43396: LD_VAR 0 4
43400: ST_TO_ADDR
// dist := tmpDist ;
43401: LD_ADDR_VAR 0 5
43405: PUSH
43406: LD_VAR 0 6
43410: ST_TO_ADDR
// end ; end ;
43411: GO 43343
43413: POP
43414: POP
// end ;
43415: LD_VAR 0 3
43419: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43420: LD_INT 0
43422: PPUSH
// uc_side := side ;
43423: LD_ADDR_OWVAR 20
43427: PUSH
43428: LD_VAR 0 1
43432: ST_TO_ADDR
// uc_nation := 3 ;
43433: LD_ADDR_OWVAR 21
43437: PUSH
43438: LD_INT 3
43440: ST_TO_ADDR
// vc_chassis := 25 ;
43441: LD_ADDR_OWVAR 37
43445: PUSH
43446: LD_INT 25
43448: ST_TO_ADDR
// vc_engine := engine_siberite ;
43449: LD_ADDR_OWVAR 39
43453: PUSH
43454: LD_INT 3
43456: ST_TO_ADDR
// vc_control := control_computer ;
43457: LD_ADDR_OWVAR 38
43461: PUSH
43462: LD_INT 3
43464: ST_TO_ADDR
// vc_weapon := 59 ;
43465: LD_ADDR_OWVAR 40
43469: PUSH
43470: LD_INT 59
43472: ST_TO_ADDR
// result := CreateVehicle ;
43473: LD_ADDR_VAR 0 5
43477: PUSH
43478: CALL_OW 45
43482: ST_TO_ADDR
// SetDir ( result , d ) ;
43483: LD_VAR 0 5
43487: PPUSH
43488: LD_VAR 0 4
43492: PPUSH
43493: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43497: LD_VAR 0 5
43501: PPUSH
43502: LD_VAR 0 2
43506: PPUSH
43507: LD_VAR 0 3
43511: PPUSH
43512: LD_INT 0
43514: PPUSH
43515: CALL_OW 48
// end ;
43519: LD_VAR 0 5
43523: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43524: LD_INT 0
43526: PPUSH
43527: PPUSH
43528: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43529: LD_ADDR_VAR 0 2
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43552: LD_VAR 0 1
43556: NOT
43557: IFTRUE 43590
43559: PUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 264
43569: PUSH
43570: LD_INT 12
43572: PUSH
43573: LD_INT 51
43575: PUSH
43576: LD_INT 32
43578: PUSH
43579: LD_INT 89
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: IN
43588: NOT
43589: OR
43590: IFFALSE 43594
// exit ;
43592: GO 43692
// for i := 1 to 3 do
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: DOUBLE
43600: LD_INT 1
43602: DEC
43603: ST_TO_ADDR
43604: LD_INT 3
43606: PUSH
43607: FOR_TO
43608: IFFALSE 43690
// begin tmp := GetCargo ( cargo , i ) ;
43610: LD_ADDR_VAR 0 4
43614: PUSH
43615: LD_VAR 0 1
43619: PPUSH
43620: LD_VAR 0 3
43624: PPUSH
43625: CALL_OW 289
43629: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43630: LD_ADDR_VAR 0 2
43634: PUSH
43635: LD_VAR 0 2
43639: PPUSH
43640: LD_VAR 0 3
43644: PPUSH
43645: LD_VAR 0 4
43649: PPUSH
43650: CALL_OW 1
43654: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43655: LD_ADDR_VAR 0 2
43659: PUSH
43660: LD_VAR 0 2
43664: PPUSH
43665: LD_INT 4
43667: PPUSH
43668: LD_VAR 0 2
43672: PUSH
43673: LD_INT 4
43675: ARRAY
43676: PUSH
43677: LD_VAR 0 4
43681: PLUS
43682: PPUSH
43683: CALL_OW 1
43687: ST_TO_ADDR
// end ;
43688: GO 43607
43690: POP
43691: POP
// end ;
43692: LD_VAR 0 2
43696: RET
// export function Length ( array ) ; begin
43697: LD_INT 0
43699: PPUSH
// result := array + 0 ;
43700: LD_ADDR_VAR 0 2
43704: PUSH
43705: LD_VAR 0 1
43709: PUSH
43710: LD_INT 0
43712: PLUS
43713: ST_TO_ADDR
// end ;
43714: LD_VAR 0 2
43718: RET
// export function PrepareArray ( array ) ; begin
43719: LD_INT 0
43721: PPUSH
// result := array diff 0 ;
43722: LD_ADDR_VAR 0 2
43726: PUSH
43727: LD_VAR 0 1
43731: PUSH
43732: LD_INT 0
43734: DIFF
43735: ST_TO_ADDR
// if not result [ 1 ] then
43736: LD_VAR 0 2
43740: PUSH
43741: LD_INT 1
43743: ARRAY
43744: NOT
43745: IFFALSE 43765
// result := Delete ( result , 1 ) ;
43747: LD_ADDR_VAR 0 2
43751: PUSH
43752: LD_VAR 0 2
43756: PPUSH
43757: LD_INT 1
43759: PPUSH
43760: CALL_OW 3
43764: ST_TO_ADDR
// end ;
43765: LD_VAR 0 2
43769: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43770: LD_INT 0
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
// sibRocketRange := 25 ;
43776: LD_ADDR_VAR 0 6
43780: PUSH
43781: LD_INT 25
43783: ST_TO_ADDR
// result := false ;
43784: LD_ADDR_VAR 0 4
43788: PUSH
43789: LD_INT 0
43791: ST_TO_ADDR
// for i := 0 to 5 do
43792: LD_ADDR_VAR 0 5
43796: PUSH
43797: DOUBLE
43798: LD_INT 0
43800: DEC
43801: ST_TO_ADDR
43802: LD_INT 5
43804: PUSH
43805: FOR_TO
43806: IFFALSE 43873
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43808: LD_VAR 0 1
43812: PPUSH
43813: LD_VAR 0 5
43817: PPUSH
43818: LD_VAR 0 6
43822: PPUSH
43823: CALL_OW 272
43827: PPUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: LD_VAR 0 5
43837: PPUSH
43838: LD_VAR 0 6
43842: PPUSH
43843: CALL_OW 273
43847: PPUSH
43848: LD_VAR 0 3
43852: PPUSH
43853: CALL_OW 309
43857: IFFALSE 43871
// begin result := true ;
43859: LD_ADDR_VAR 0 4
43863: PUSH
43864: LD_INT 1
43866: ST_TO_ADDR
// exit ;
43867: POP
43868: POP
43869: GO 43875
// end ;
43871: GO 43805
43873: POP
43874: POP
// end ;
43875: LD_VAR 0 4
43879: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43880: LD_INT 0
43882: PPUSH
43883: PPUSH
43884: PPUSH
// if btype = b_depot then
43885: LD_VAR 0 2
43889: PUSH
43890: LD_INT 0
43892: EQUAL
43893: IFFALSE 43905
// begin result := true ;
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: LD_INT 1
43902: ST_TO_ADDR
// exit ;
43903: GO 44025
// end ; pom := GetBase ( depot ) ;
43905: LD_ADDR_VAR 0 4
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 274
43919: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43920: LD_ADDR_VAR 0 5
43924: PUSH
43925: LD_VAR 0 2
43929: PPUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: CALL_OW 248
43939: PPUSH
43940: CALL_OW 450
43944: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_VAR 0 4
43954: PPUSH
43955: LD_INT 1
43957: PPUSH
43958: CALL_OW 275
43962: PUSH
43963: LD_VAR 0 5
43967: PUSH
43968: LD_INT 1
43970: ARRAY
43971: GREATEREQUAL
43972: IFFALSE 43998
43974: PUSH
43975: LD_VAR 0 4
43979: PPUSH
43980: LD_INT 2
43982: PPUSH
43983: CALL_OW 275
43987: PUSH
43988: LD_VAR 0 5
43992: PUSH
43993: LD_INT 2
43995: ARRAY
43996: GREATEREQUAL
43997: AND
43998: IFFALSE 44024
44000: PUSH
44001: LD_VAR 0 4
44005: PPUSH
44006: LD_INT 3
44008: PPUSH
44009: CALL_OW 275
44013: PUSH
44014: LD_VAR 0 5
44018: PUSH
44019: LD_INT 3
44021: ARRAY
44022: GREATEREQUAL
44023: AND
44024: ST_TO_ADDR
// end ;
44025: LD_VAR 0 3
44029: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44030: LD_INT 0
44032: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44033: LD_VAR 0 1
44037: PPUSH
44038: LD_VAR 0 2
44042: PPUSH
44043: LD_INT 0
44045: PPUSH
44046: LD_INT 0
44048: PPUSH
44049: LD_INT 1
44051: PPUSH
44052: LD_INT 0
44054: PPUSH
44055: CALL_OW 587
// end ;
44059: LD_VAR 0 3
44063: RET
// export function CenterOnNow ( unit ) ; begin
44064: LD_INT 0
44066: PPUSH
// result := IsInUnit ( unit ) ;
44067: LD_ADDR_VAR 0 2
44071: PUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 310
44081: ST_TO_ADDR
// if not result then
44082: LD_VAR 0 2
44086: NOT
44087: IFFALSE 44099
// result := unit ;
44089: LD_ADDR_VAR 0 2
44093: PUSH
44094: LD_VAR 0 1
44098: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44099: LD_VAR 0 1
44103: PPUSH
44104: CALL_OW 87
// end ;
44108: LD_VAR 0 2
44112: RET
// export function ComMoveHex ( unit , hex ) ; begin
44113: LD_INT 0
44115: PPUSH
// if not hex then
44116: LD_VAR 0 2
44120: NOT
44121: IFFALSE 44125
// exit ;
44123: GO 44178
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44125: LD_VAR 0 2
44129: PUSH
44130: LD_INT 1
44132: ARRAY
44133: PPUSH
44134: LD_VAR 0 2
44138: PUSH
44139: LD_INT 2
44141: ARRAY
44142: PPUSH
44143: CALL_OW 428
44147: IFFALSE 44151
// exit ;
44149: GO 44178
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44151: LD_VAR 0 1
44155: PPUSH
44156: LD_VAR 0 2
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: LD_VAR 0 2
44169: PUSH
44170: LD_INT 2
44172: ARRAY
44173: PPUSH
44174: CALL_OW 111
// end ;
44178: LD_VAR 0 3
44182: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
// if not unit or not enemy then
44188: LD_VAR 0 1
44192: NOT
44193: IFTRUE 44202
44195: PUSH
44196: LD_VAR 0 2
44200: NOT
44201: OR
44202: IFFALSE 44206
// exit ;
44204: GO 44332
// x := GetX ( enemy ) ;
44206: LD_ADDR_VAR 0 4
44210: PUSH
44211: LD_VAR 0 2
44215: PPUSH
44216: CALL_OW 250
44220: ST_TO_ADDR
// y := GetY ( enemy ) ;
44221: LD_ADDR_VAR 0 5
44225: PUSH
44226: LD_VAR 0 2
44230: PPUSH
44231: CALL_OW 251
44235: ST_TO_ADDR
// if ValidHex ( x , y ) then
44236: LD_VAR 0 4
44240: PPUSH
44241: LD_VAR 0 5
44245: PPUSH
44246: CALL_OW 488
44250: IFFALSE 44332
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44252: LD_VAR 0 2
44256: PPUSH
44257: CALL_OW 247
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: IN
44272: IFTRUE 44295
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 255
44284: PPUSH
44285: LD_VAR 0 2
44289: PPUSH
44290: CALL_OW 292
44294: OR
44295: IFFALSE 44313
// ComAttackUnit ( unit , enemy ) else
44297: LD_VAR 0 1
44301: PPUSH
44302: LD_VAR 0 2
44306: PPUSH
44307: CALL_OW 115
44311: GO 44332
// ComAgressiveMove ( unit , x , y ) ;
44313: LD_VAR 0 1
44317: PPUSH
44318: LD_VAR 0 4
44322: PPUSH
44323: LD_VAR 0 5
44327: PPUSH
44328: CALL_OW 114
// end ;
44332: LD_VAR 0 3
44336: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44337: LD_INT 0
44339: PPUSH
44340: PPUSH
44341: PPUSH
// list := AreaToList ( area , 0 ) ;
44342: LD_ADDR_VAR 0 5
44346: PUSH
44347: LD_VAR 0 1
44351: PPUSH
44352: LD_INT 0
44354: PPUSH
44355: CALL_OW 517
44359: ST_TO_ADDR
// if not list then
44360: LD_VAR 0 5
44364: NOT
44365: IFFALSE 44369
// exit ;
44367: GO 44499
// if all then
44369: LD_VAR 0 2
44373: IFFALSE 44461
// begin for i := 1 to list [ 1 ] do
44375: LD_ADDR_VAR 0 4
44379: PUSH
44380: DOUBLE
44381: LD_INT 1
44383: DEC
44384: ST_TO_ADDR
44385: LD_VAR 0 5
44389: PUSH
44390: LD_INT 1
44392: ARRAY
44393: PUSH
44394: FOR_TO
44395: IFFALSE 44457
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44397: LD_ADDR_VAR 0 3
44401: PUSH
44402: LD_VAR 0 3
44406: PPUSH
44407: LD_VAR 0 3
44411: PUSH
44412: LD_INT 1
44414: PLUS
44415: PPUSH
44416: LD_VAR 0 5
44420: PUSH
44421: LD_INT 1
44423: ARRAY
44424: PUSH
44425: LD_VAR 0 4
44429: ARRAY
44430: PUSH
44431: LD_VAR 0 5
44435: PUSH
44436: LD_INT 2
44438: ARRAY
44439: PUSH
44440: LD_VAR 0 4
44444: ARRAY
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PPUSH
44450: CALL_OW 1
44454: ST_TO_ADDR
44455: GO 44394
44457: POP
44458: POP
// exit ;
44459: GO 44499
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44461: LD_ADDR_VAR 0 3
44465: PUSH
44466: LD_VAR 0 5
44470: PUSH
44471: LD_INT 1
44473: ARRAY
44474: PUSH
44475: LD_INT 1
44477: ARRAY
44478: PUSH
44479: LD_VAR 0 5
44483: PUSH
44484: LD_INT 2
44486: ARRAY
44487: PUSH
44488: LD_INT 1
44490: ARRAY
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: ST_TO_ADDR
// end ;
44499: LD_VAR 0 3
44503: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44504: LD_INT 0
44506: PPUSH
44507: PPUSH
// list := AreaToList ( area , 0 ) ;
44508: LD_ADDR_VAR 0 4
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: LD_INT 0
44520: PPUSH
44521: CALL_OW 517
44525: ST_TO_ADDR
// if not list then
44526: LD_VAR 0 4
44530: NOT
44531: IFFALSE 44535
// exit ;
44533: GO 44576
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44535: LD_ADDR_VAR 0 3
44539: PUSH
44540: LD_VAR 0 4
44544: PUSH
44545: LD_INT 1
44547: ARRAY
44548: PUSH
44549: LD_INT 1
44551: ARRAY
44552: PUSH
44553: LD_VAR 0 4
44557: PUSH
44558: LD_INT 2
44560: ARRAY
44561: PUSH
44562: LD_INT 1
44564: ARRAY
44565: PUSH
44566: LD_VAR 0 2
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// end ;
44576: LD_VAR 0 3
44580: RET
// export function First ( array ) ; begin
44581: LD_INT 0
44583: PPUSH
// if not array then
44584: LD_VAR 0 1
44588: NOT
44589: IFFALSE 44593
// exit ;
44591: GO 44607
// result := array [ 1 ] ;
44593: LD_ADDR_VAR 0 2
44597: PUSH
44598: LD_VAR 0 1
44602: PUSH
44603: LD_INT 1
44605: ARRAY
44606: ST_TO_ADDR
// end ;
44607: LD_VAR 0 2
44611: RET
// export function Last ( array ) ; begin
44612: LD_INT 0
44614: PPUSH
// if not array then
44615: LD_VAR 0 1
44619: NOT
44620: IFFALSE 44624
// exit ;
44622: GO 44640
// result := array [ array ] ;
44624: LD_ADDR_VAR 0 2
44628: PUSH
44629: LD_VAR 0 1
44633: PUSH
44634: LD_VAR 0 1
44638: ARRAY
44639: ST_TO_ADDR
// end ;
44640: LD_VAR 0 2
44644: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44645: LD_INT 0
44647: PPUSH
44648: PPUSH
// result := [ ] ;
44649: LD_ADDR_VAR 0 5
44653: PUSH
44654: EMPTY
44655: ST_TO_ADDR
// if not array then
44656: LD_VAR 0 1
44660: NOT
44661: IFFALSE 44665
// exit ;
44663: GO 44777
// for i := 1 to array do
44665: LD_ADDR_VAR 0 6
44669: PUSH
44670: DOUBLE
44671: LD_INT 1
44673: DEC
44674: ST_TO_ADDR
44675: LD_VAR 0 1
44679: PUSH
44680: FOR_TO
44681: IFFALSE 44775
// if array [ i ] [ index ] = value then
44683: LD_VAR 0 1
44687: PUSH
44688: LD_VAR 0 6
44692: ARRAY
44693: PUSH
44694: LD_VAR 0 2
44698: ARRAY
44699: PUSH
44700: LD_VAR 0 3
44704: EQUAL
44705: IFFALSE 44773
// begin if indexColumn then
44707: LD_VAR 0 4
44711: IFFALSE 44747
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44713: LD_ADDR_VAR 0 5
44717: PUSH
44718: LD_VAR 0 5
44722: PPUSH
44723: LD_VAR 0 1
44727: PUSH
44728: LD_VAR 0 6
44732: ARRAY
44733: PUSH
44734: LD_VAR 0 4
44738: ARRAY
44739: PPUSH
44740: CALL 39785 0 2
44744: ST_TO_ADDR
44745: GO 44773
// result := Join ( result , array [ i ] ) ;
44747: LD_ADDR_VAR 0 5
44751: PUSH
44752: LD_VAR 0 5
44756: PPUSH
44757: LD_VAR 0 1
44761: PUSH
44762: LD_VAR 0 6
44766: ARRAY
44767: PPUSH
44768: CALL 39785 0 2
44772: ST_TO_ADDR
// end ;
44773: GO 44680
44775: POP
44776: POP
// end ;
44777: LD_VAR 0 5
44781: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44782: LD_INT 0
44784: PPUSH
// if not vehicles or not parkingPoint then
44785: LD_VAR 0 1
44789: NOT
44790: IFTRUE 44799
44792: PUSH
44793: LD_VAR 0 2
44797: NOT
44798: OR
44799: IFFALSE 44803
// exit ;
44801: GO 44901
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44803: LD_ADDR_VAR 0 1
44807: PUSH
44808: LD_VAR 0 1
44812: PPUSH
44813: LD_INT 50
44815: PUSH
44816: EMPTY
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 92
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_INT 1
44832: ARRAY
44833: PUSH
44834: LD_VAR 0 2
44838: PUSH
44839: LD_INT 2
44841: ARRAY
44842: PUSH
44843: LD_INT 8
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PPUSH
44860: CALL_OW 72
44864: ST_TO_ADDR
// if not vehicles then
44865: LD_VAR 0 1
44869: NOT
44870: IFFALSE 44874
// exit ;
44872: GO 44901
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44874: LD_VAR 0 1
44878: PPUSH
44879: LD_VAR 0 2
44883: PUSH
44884: LD_INT 1
44886: ARRAY
44887: PPUSH
44888: LD_VAR 0 2
44892: PUSH
44893: LD_INT 2
44895: ARRAY
44896: PPUSH
44897: CALL_OW 111
// end ;
44901: LD_VAR 0 3
44905: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44906: LD_INT 0
44908: PPUSH
44909: PPUSH
44910: PPUSH
// if not side or not area then
44911: LD_VAR 0 1
44915: NOT
44916: IFTRUE 44925
44918: PUSH
44919: LD_VAR 0 2
44923: NOT
44924: OR
44925: IFFALSE 44929
// exit ;
44927: GO 45048
// tmp := AreaToList ( area , 0 ) ;
44929: LD_ADDR_VAR 0 5
44933: PUSH
44934: LD_VAR 0 2
44938: PPUSH
44939: LD_INT 0
44941: PPUSH
44942: CALL_OW 517
44946: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44947: LD_ADDR_VAR 0 4
44951: PUSH
44952: DOUBLE
44953: LD_INT 1
44955: DEC
44956: ST_TO_ADDR
44957: LD_VAR 0 5
44961: PUSH
44962: LD_INT 1
44964: ARRAY
44965: PUSH
44966: FOR_TO
44967: IFFALSE 45046
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44969: LD_VAR 0 5
44973: PUSH
44974: LD_INT 1
44976: ARRAY
44977: PUSH
44978: LD_VAR 0 4
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 5
44988: PUSH
44989: LD_INT 2
44991: ARRAY
44992: PUSH
44993: LD_VAR 0 4
44997: ARRAY
44998: PPUSH
44999: CALL_OW 351
45003: IFFALSE 45044
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45005: LD_VAR 0 5
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: PUSH
45014: LD_VAR 0 4
45018: ARRAY
45019: PPUSH
45020: LD_VAR 0 5
45024: PUSH
45025: LD_INT 2
45027: ARRAY
45028: PUSH
45029: LD_VAR 0 4
45033: ARRAY
45034: PPUSH
45035: LD_VAR 0 1
45039: PPUSH
45040: CALL_OW 244
// end ;
45044: GO 44966
45046: POP
45047: POP
// end ;
45048: LD_VAR 0 3
45052: RET
// export function UniqueArray ( array ) ; var i ; begin
45053: LD_INT 0
45055: PPUSH
45056: PPUSH
// result := [ ] ;
45057: LD_ADDR_VAR 0 2
45061: PUSH
45062: EMPTY
45063: ST_TO_ADDR
// if not array then
45064: LD_VAR 0 1
45068: NOT
45069: IFFALSE 45073
// exit ;
45071: GO 45134
// for i := 1 to array do
45073: LD_ADDR_VAR 0 3
45077: PUSH
45078: DOUBLE
45079: LD_INT 1
45081: DEC
45082: ST_TO_ADDR
45083: LD_VAR 0 1
45087: PUSH
45088: FOR_TO
45089: IFFALSE 45132
// if not array [ i ] in result then
45091: LD_VAR 0 1
45095: PUSH
45096: LD_VAR 0 3
45100: ARRAY
45101: PUSH
45102: LD_VAR 0 2
45106: IN
45107: NOT
45108: IFFALSE 45130
// result := Join ( result , i ) ;
45110: LD_ADDR_VAR 0 2
45114: PUSH
45115: LD_VAR 0 2
45119: PPUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: CALL 39785 0 2
45129: ST_TO_ADDR
45130: GO 45088
45132: POP
45133: POP
// end ;
45134: LD_VAR 0 2
45138: RET
