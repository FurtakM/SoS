// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1575 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1575 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1575 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1575 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1575 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1575 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1575 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1575 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1575 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1575 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1575 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1575 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1575 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// music_nat := 2 ;
 635: LD_ADDR_OWVAR 71
 639: PUSH
 640: LD_INT 2
 642: ST_TO_ADDR
// Video ( true ) ;
 643: LD_INT 1
 645: PPUSH
 646: CALL 39015 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 650: LD_EXP 3
 654: PPUSH
 655: LD_INT 51
 657: PPUSH
 658: LD_INT 23
 660: PPUSH
 661: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 665: LD_OWVAR 3
 669: PUSH
 670: LD_EXP 3
 674: DIFF
 675: PPUSH
 676: LD_INT 53
 678: PPUSH
 679: LD_INT 27
 681: PPUSH
 682: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 686: LD_INT 52
 688: PPUSH
 689: LD_INT 25
 691: PPUSH
 692: CALL_OW 86
// wait ( 0 0$2 ) ;
 696: LD_INT 70
 698: PPUSH
 699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 703: LD_INT 35
 705: PPUSH
 706: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 51
 717: PPUSH
 718: LD_INT 23
 720: PPUSH
 721: CALL_OW 307
 725: PUSH
 726: LD_EXP 3
 730: PPUSH
 731: CALL_OW 314
 735: NOT
 736: OR
 737: IFFALSE 703
// ComTurnXY ( Heike , 53 , 26 ) ;
 739: LD_EXP 3
 743: PPUSH
 744: LD_INT 53
 746: PPUSH
 747: LD_INT 26
 749: PPUSH
 750: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 754: LD_INT 10
 756: PPUSH
 757: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_STRING DH-Intro-1
 768: PPUSH
 769: CALL_OW 88
// ComHold ( all_units ) ;
 773: LD_OWVAR 3
 777: PPUSH
 778: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 782: LD_OWVAR 3
 786: PUSH
 787: LD_EXP 3
 791: DIFF
 792: PPUSH
 793: LD_EXP 3
 797: PPUSH
 798: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 802: LD_EXP 17
 806: PUSH
 807: LD_STRING 08_DealWithDoug
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 30
 817: AND
 818: IFFALSE 930
// begin ComTurnUnit ( Heike , Doug ) ;
 820: LD_EXP 3
 824: PPUSH
 825: LD_EXP 17
 829: PPUSH
 830: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 834: LD_EXP 17
 838: PPUSH
 839: LD_STRING DCa-Intro-a-2
 841: PPUSH
 842: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_STRING DH-Intro-a-3
 853: PPUSH
 854: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 858: LD_EXP 17
 862: PPUSH
 863: LD_STRING DCa-Intro-a-4
 865: PPUSH
 866: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 870: LD_EXP 3
 874: PPUSH
 875: LD_STRING DH-Intro-a-5
 877: PPUSH
 878: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 882: LD_EXP 17
 886: PPUSH
 887: LD_STRING DCa-Intro-a-6
 889: PPUSH
 890: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 894: LD_EXP 16
 898: PUSH
 899: LD_EXP 17
 903: ADD
 904: PUSH
 905: LD_EXP 15
 909: ADD
 910: PPUSH
 911: LD_INT 5
 913: PPUSH
 914: LD_INT 7
 916: PPUSH
 917: CALL_OW 111
// wait ( 0 0$01 ) ;
 921: LD_INT 35
 923: PPUSH
 924: CALL_OW 67
// end else
 928: GO 1032
// if Harris then
 930: LD_EXP 16
 934: IFFALSE 1032
// begin ComTurnUnit ( Heike , Harris ) ;
 936: LD_EXP 3
 940: PPUSH
 941: LD_EXP 16
 945: PPUSH
 946: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 950: LD_EXP 16
 954: PPUSH
 955: LD_STRING DJ-Intro-2
 957: PPUSH
 958: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING DH-Intro-3
 969: PPUSH
 970: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 974: LD_EXP 3
 978: PPUSH
 979: LD_STRING DH-Intro-4
 981: PPUSH
 982: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 986: LD_EXP 16
 990: PPUSH
 991: LD_STRING DJ-Intro-5
 993: PPUSH
 994: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 998: LD_EXP 16
1002: PUSH
1003: LD_EXP 17
1007: ADD
1008: PUSH
1009: LD_EXP 15
1013: ADD
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: LD_INT 7
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$01 ) ;
1025: LD_INT 35
1027: PPUSH
1028: CALL_OW 67
// end ; if Givi then
1032: LD_EXP 4
1036: IFFALSE 1119
// begin ComMoveUnit ( Givi , Heike ) ;
1038: LD_EXP 4
1042: PPUSH
1043: LD_EXP 3
1047: PPUSH
1048: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
1052: LD_INT 35
1054: PPUSH
1055: CALL_OW 67
// until GetDistUnits ( Heike , Givi ) < 4 ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_EXP 4
1068: PPUSH
1069: CALL_OW 296
1073: PUSH
1074: LD_INT 4
1076: LESS
1077: IFFALSE 1052
// ComTurnUnit ( Givi , Heike ) ;
1079: LD_EXP 4
1083: PPUSH
1084: LD_EXP 3
1088: PPUSH
1089: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1093: LD_EXP 3
1097: PPUSH
1098: LD_EXP 4
1102: PPUSH
1103: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_STRING DG-Intro-7
1114: PPUSH
1115: CALL_OW 88
// end ; if not Givi then
1119: LD_EXP 4
1123: NOT
1124: IFFALSE 1141
// ComTurnXY ( Heike , 52 , 25 ) ;
1126: LD_EXP 3
1130: PPUSH
1131: LD_INT 52
1133: PPUSH
1134: LD_INT 25
1136: PPUSH
1137: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1141: LD_EXP 3
1145: PPUSH
1146: LD_STRING DH-Intro-7
1148: PPUSH
1149: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1153: LD_INT 22
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 69
1167: PPUSH
1168: LD_INT 48
1170: PPUSH
1171: LD_INT 4
1173: PPUSH
1174: CALL_OW 111
// wait ( 0 0$3 ) ;
1178: LD_INT 105
1180: PPUSH
1181: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1185: LD_INT 74
1187: PPUSH
1188: LD_INT 79
1190: PPUSH
1191: LD_INT 2
1193: PPUSH
1194: LD_INT 16
1196: NEG
1197: PPUSH
1198: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1202: LD_INT 74
1204: PPUSH
1205: LD_INT 79
1207: PPUSH
1208: CALL_OW 84
// uc_side := 3 ;
1212: LD_ADDR_OWVAR 20
1216: PUSH
1217: LD_INT 3
1219: ST_TO_ADDR
// uc_nation := nation_russian ;
1220: LD_ADDR_OWVAR 21
1224: PUSH
1225: LD_INT 3
1227: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1228: LD_INT 22
1230: PPUSH
1231: LD_INT 3
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 43
1239: PPUSH
1240: LD_INT 100
1242: PPUSH
1243: CALL 6590 0 5
// un := CreateVehicle ;
1247: LD_ADDR_VAR 0 3
1251: PUSH
1252: CALL_OW 45
1256: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 76
1264: PPUSH
1265: LD_INT 87
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1275: LD_INT 0
1277: PPUSH
1278: LD_INT 8
1280: PPUSH
1281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_VAR 0 3
1294: PPUSH
1295: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1299: LD_VAR 0 3
1303: PPUSH
1304: LD_INT 67
1306: PPUSH
1307: LD_INT 56
1309: PPUSH
1310: CALL_OW 111
// wait ( 0 0$1 ) ;
1314: LD_INT 35
1316: PPUSH
1317: CALL_OW 67
// for i := 1 to 3 do
1321: LD_ADDR_VAR 0 2
1325: PUSH
1326: DOUBLE
1327: LD_INT 1
1329: DEC
1330: ST_TO_ADDR
1331: LD_INT 3
1333: PUSH
1334: FOR_TO
1335: IFFALSE 1395
// begin PrepareSoldier ( false , 8 ) ;
1337: LD_INT 0
1339: PPUSH
1340: LD_INT 8
1342: PPUSH
1343: CALL_OW 381
// un := CreateHuman ;
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: CALL_OW 44
1356: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1357: LD_VAR 0 3
1361: PPUSH
1362: LD_INT 76
1364: PPUSH
1365: LD_INT 87
1367: PPUSH
1368: LD_INT 2
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1378: LD_VAR 0 3
1382: PPUSH
1383: LD_INT 67
1385: PPUSH
1386: LD_INT 56
1388: PPUSH
1389: CALL_OW 111
// end ;
1393: GO 1334
1395: POP
1396: POP
// wait ( 0 0$2 ) ;
1397: LD_INT 70
1399: PPUSH
1400: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1404: LD_INT 1
1406: PPUSH
1407: LD_STRING %_cont
1409: PPUSH
1410: CALL_OW 340
// Video ( false ) ;
1414: LD_INT 0
1416: PPUSH
1417: CALL 39015 0 1
// end ;
1421: LD_VAR 0 1
1425: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1426: LD_INT 5
1428: PPUSH
1429: LD_INT 22
1431: PUSH
1432: LD_INT 4
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PPUSH
1439: CALL_OW 70
1443: IFFALSE 1491
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
// begin enable ;
1451: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_INT 5
1459: PPUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 70
1474: PUSH
1475: FOR_IN
1476: IFFALSE 1489
// RemoveUnit ( i ) ;
1478: LD_VAR 0 1
1482: PPUSH
1483: CALL_OW 64
1487: GO 1475
1489: POP
1490: POP
// end ;
1491: PPOPN 1
1493: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1494: LD_INT 6
1496: PPUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 70
1511: IFFALSE 1559
1513: GO 1515
1515: DISABLE
1516: LD_INT 0
1518: PPUSH
// begin enable ;
1519: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1520: LD_ADDR_VAR 0 1
1524: PUSH
1525: LD_INT 6
1527: PPUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 2
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 70
1542: PUSH
1543: FOR_IN
1544: IFFALSE 1557
// RemoveUnit ( i ) ;
1546: LD_VAR 0 1
1550: PPUSH
1551: CALL_OW 64
1555: GO 1543
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 1
1561: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1562: LD_INT 1
1564: PPUSH
1565: LD_STRING %_cont
1567: PPUSH
1568: CALL_OW 340
// end ; end_of_file
1572: PPOPN 1
1574: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1575: LD_INT 0
1577: PPUSH
1578: PPUSH
// if exist_mode then
1579: LD_VAR 0 2
1583: IFFALSE 1608
// unit := CreateCharacter ( prefix & ident ) else
1585: LD_ADDR_VAR 0 5
1589: PUSH
1590: LD_VAR 0 3
1594: PUSH
1595: LD_VAR 0 1
1599: STR
1600: PPUSH
1601: CALL_OW 34
1605: ST_TO_ADDR
1606: GO 1623
// unit := NewCharacter ( ident ) ;
1608: LD_ADDR_VAR 0 5
1612: PUSH
1613: LD_VAR 0 1
1617: PPUSH
1618: CALL_OW 25
1622: ST_TO_ADDR
// result := unit ;
1623: LD_ADDR_VAR 0 4
1627: PUSH
1628: LD_VAR 0 5
1632: ST_TO_ADDR
// end ;
1633: LD_VAR 0 4
1637: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1638: LD_INT 0
1640: PPUSH
1641: PPUSH
// if not side or not nation then
1642: LD_VAR 0 1
1646: NOT
1647: PUSH
1648: LD_VAR 0 2
1652: NOT
1653: OR
1654: IFFALSE 1658
// exit ;
1656: GO 2426
// case nation of nation_american :
1658: LD_VAR 0 2
1662: PUSH
1663: LD_INT 1
1665: DOUBLE
1666: EQUAL
1667: IFTRUE 1671
1669: GO 1885
1671: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1672: LD_ADDR_VAR 0 4
1676: PUSH
1677: LD_INT 35
1679: PUSH
1680: LD_INT 45
1682: PUSH
1683: LD_INT 46
1685: PUSH
1686: LD_INT 47
1688: PUSH
1689: LD_INT 82
1691: PUSH
1692: LD_INT 83
1694: PUSH
1695: LD_INT 84
1697: PUSH
1698: LD_INT 85
1700: PUSH
1701: LD_INT 86
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 6
1712: PUSH
1713: LD_INT 15
1715: PUSH
1716: LD_INT 16
1718: PUSH
1719: LD_INT 7
1721: PUSH
1722: LD_INT 12
1724: PUSH
1725: LD_INT 13
1727: PUSH
1728: LD_INT 10
1730: PUSH
1731: LD_INT 14
1733: PUSH
1734: LD_INT 20
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 25
1745: PUSH
1746: LD_INT 32
1748: PUSH
1749: LD_INT 27
1751: PUSH
1752: LD_INT 36
1754: PUSH
1755: LD_INT 69
1757: PUSH
1758: LD_INT 39
1760: PUSH
1761: LD_INT 34
1763: PUSH
1764: LD_INT 40
1766: PUSH
1767: LD_INT 48
1769: PUSH
1770: LD_INT 49
1772: PUSH
1773: LD_INT 50
1775: PUSH
1776: LD_INT 51
1778: PUSH
1779: LD_INT 52
1781: PUSH
1782: LD_INT 53
1784: PUSH
1785: LD_INT 54
1787: PUSH
1788: LD_INT 55
1790: PUSH
1791: LD_INT 56
1793: PUSH
1794: LD_INT 57
1796: PUSH
1797: LD_INT 58
1799: PUSH
1800: LD_INT 59
1802: PUSH
1803: LD_INT 60
1805: PUSH
1806: LD_INT 61
1808: PUSH
1809: LD_INT 62
1811: PUSH
1812: LD_INT 80
1814: PUSH
1815: LD_INT 82
1817: PUSH
1818: LD_INT 83
1820: PUSH
1821: LD_INT 84
1823: PUSH
1824: LD_INT 85
1826: PUSH
1827: LD_INT 86
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: ST_TO_ADDR
1883: GO 2350
1885: LD_INT 2
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 2119
1893: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1894: LD_ADDR_VAR 0 4
1898: PUSH
1899: LD_INT 35
1901: PUSH
1902: LD_INT 45
1904: PUSH
1905: LD_INT 46
1907: PUSH
1908: LD_INT 47
1910: PUSH
1911: LD_INT 82
1913: PUSH
1914: LD_INT 83
1916: PUSH
1917: LD_INT 84
1919: PUSH
1920: LD_INT 85
1922: PUSH
1923: LD_INT 87
1925: PUSH
1926: LD_INT 70
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: LD_INT 11
1934: PUSH
1935: LD_INT 3
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: LD_INT 5
1943: PUSH
1944: LD_INT 6
1946: PUSH
1947: LD_INT 15
1949: PUSH
1950: LD_INT 18
1952: PUSH
1953: LD_INT 7
1955: PUSH
1956: LD_INT 17
1958: PUSH
1959: LD_INT 8
1961: PUSH
1962: LD_INT 20
1964: PUSH
1965: LD_INT 21
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 72
1973: PUSH
1974: LD_INT 26
1976: PUSH
1977: LD_INT 69
1979: PUSH
1980: LD_INT 39
1982: PUSH
1983: LD_INT 40
1985: PUSH
1986: LD_INT 41
1988: PUSH
1989: LD_INT 42
1991: PUSH
1992: LD_INT 43
1994: PUSH
1995: LD_INT 48
1997: PUSH
1998: LD_INT 49
2000: PUSH
2001: LD_INT 50
2003: PUSH
2004: LD_INT 51
2006: PUSH
2007: LD_INT 52
2009: PUSH
2010: LD_INT 53
2012: PUSH
2013: LD_INT 54
2015: PUSH
2016: LD_INT 55
2018: PUSH
2019: LD_INT 56
2021: PUSH
2022: LD_INT 60
2024: PUSH
2025: LD_INT 61
2027: PUSH
2028: LD_INT 62
2030: PUSH
2031: LD_INT 66
2033: PUSH
2034: LD_INT 67
2036: PUSH
2037: LD_INT 68
2039: PUSH
2040: LD_INT 81
2042: PUSH
2043: LD_INT 82
2045: PUSH
2046: LD_INT 83
2048: PUSH
2049: LD_INT 84
2051: PUSH
2052: LD_INT 85
2054: PUSH
2055: LD_INT 87
2057: PUSH
2058: LD_INT 88
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
2117: GO 2350
2119: LD_INT 3
2121: DOUBLE
2122: EQUAL
2123: IFTRUE 2127
2125: GO 2349
2127: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2128: LD_ADDR_VAR 0 4
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: LD_INT 47
2138: PUSH
2139: LD_INT 1
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 82
2147: PUSH
2148: LD_INT 83
2150: PUSH
2151: LD_INT 84
2153: PUSH
2154: LD_INT 85
2156: PUSH
2157: LD_INT 86
2159: PUSH
2160: LD_INT 11
2162: PUSH
2163: LD_INT 9
2165: PUSH
2166: LD_INT 20
2168: PUSH
2169: LD_INT 19
2171: PUSH
2172: LD_INT 21
2174: PUSH
2175: LD_INT 24
2177: PUSH
2178: LD_INT 22
2180: PUSH
2181: LD_INT 25
2183: PUSH
2184: LD_INT 28
2186: PUSH
2187: LD_INT 29
2189: PUSH
2190: LD_INT 30
2192: PUSH
2193: LD_INT 31
2195: PUSH
2196: LD_INT 37
2198: PUSH
2199: LD_INT 38
2201: PUSH
2202: LD_INT 32
2204: PUSH
2205: LD_INT 27
2207: PUSH
2208: LD_INT 33
2210: PUSH
2211: LD_INT 69
2213: PUSH
2214: LD_INT 39
2216: PUSH
2217: LD_INT 34
2219: PUSH
2220: LD_INT 40
2222: PUSH
2223: LD_INT 71
2225: PUSH
2226: LD_INT 23
2228: PUSH
2229: LD_INT 44
2231: PUSH
2232: LD_INT 48
2234: PUSH
2235: LD_INT 49
2237: PUSH
2238: LD_INT 50
2240: PUSH
2241: LD_INT 51
2243: PUSH
2244: LD_INT 52
2246: PUSH
2247: LD_INT 53
2249: PUSH
2250: LD_INT 54
2252: PUSH
2253: LD_INT 55
2255: PUSH
2256: LD_INT 56
2258: PUSH
2259: LD_INT 57
2261: PUSH
2262: LD_INT 58
2264: PUSH
2265: LD_INT 59
2267: PUSH
2268: LD_INT 63
2270: PUSH
2271: LD_INT 64
2273: PUSH
2274: LD_INT 65
2276: PUSH
2277: LD_INT 82
2279: PUSH
2280: LD_INT 83
2282: PUSH
2283: LD_INT 84
2285: PUSH
2286: LD_INT 85
2288: PUSH
2289: LD_INT 86
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: ST_TO_ADDR
2347: GO 2350
2349: POP
// if state > - 1 and state < 3 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 1
2357: NEG
2358: GREATER
2359: PUSH
2360: LD_VAR 0 3
2364: PUSH
2365: LD_INT 3
2367: LESS
2368: AND
2369: IFFALSE 2426
// for i in result do
2371: LD_ADDR_VAR 0 5
2375: PUSH
2376: LD_VAR 0 4
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2424
// if GetTech ( i , side ) <> state then
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 321
2398: PUSH
2399: LD_VAR 0 3
2403: NONEQUAL
2404: IFFALSE 2422
// result := result diff i ;
2406: LD_ADDR_VAR 0 4
2410: PUSH
2411: LD_VAR 0 4
2415: PUSH
2416: LD_VAR 0 5
2420: DIFF
2421: ST_TO_ADDR
2422: GO 2381
2424: POP
2425: POP
// end ;
2426: LD_VAR 0 4
2430: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2431: LD_INT 0
2433: PPUSH
2434: PPUSH
2435: PPUSH
// result := true ;
2436: LD_ADDR_VAR 0 3
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2444: LD_ADDR_VAR 0 5
2448: PUSH
2449: LD_VAR 0 2
2453: PPUSH
2454: CALL_OW 480
2458: ST_TO_ADDR
// if not tmp then
2459: LD_VAR 0 5
2463: NOT
2464: IFFALSE 2468
// exit ;
2466: GO 2517
// for i in tmp do
2468: LD_ADDR_VAR 0 4
2472: PUSH
2473: LD_VAR 0 5
2477: PUSH
2478: FOR_IN
2479: IFFALSE 2515
// if GetTech ( i , side ) <> state_researched then
2481: LD_VAR 0 4
2485: PPUSH
2486: LD_VAR 0 1
2490: PPUSH
2491: CALL_OW 321
2495: PUSH
2496: LD_INT 2
2498: NONEQUAL
2499: IFFALSE 2513
// begin result := false ;
2501: LD_ADDR_VAR 0 3
2505: PUSH
2506: LD_INT 0
2508: ST_TO_ADDR
// exit ;
2509: POP
2510: POP
2511: GO 2517
// end ;
2513: GO 2478
2515: POP
2516: POP
// end ;
2517: LD_VAR 0 3
2521: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
2530: PPUSH
2531: PPUSH
2532: PPUSH
2533: PPUSH
2534: PPUSH
2535: PPUSH
2536: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2537: LD_VAR 0 1
2541: NOT
2542: PUSH
2543: LD_VAR 0 1
2547: PPUSH
2548: CALL_OW 257
2552: PUSH
2553: LD_INT 9
2555: NONEQUAL
2556: OR
2557: IFFALSE 2561
// exit ;
2559: GO 3134
// side := GetSide ( unit ) ;
2561: LD_ADDR_VAR 0 9
2565: PUSH
2566: LD_VAR 0 1
2570: PPUSH
2571: CALL_OW 255
2575: ST_TO_ADDR
// tech_space := tech_spacanom ;
2576: LD_ADDR_VAR 0 12
2580: PUSH
2581: LD_INT 29
2583: ST_TO_ADDR
// tech_time := tech_taurad ;
2584: LD_ADDR_VAR 0 13
2588: PUSH
2589: LD_INT 28
2591: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2592: LD_ADDR_VAR 0 11
2596: PUSH
2597: LD_VAR 0 1
2601: PPUSH
2602: CALL_OW 310
2606: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2607: LD_VAR 0 11
2611: PPUSH
2612: CALL_OW 247
2616: PUSH
2617: LD_INT 2
2619: EQUAL
2620: IFFALSE 2624
// exit ;
2622: GO 3134
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2624: LD_ADDR_VAR 0 8
2628: PUSH
2629: LD_INT 81
2631: PUSH
2632: LD_VAR 0 9
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 3
2643: PUSH
2644: LD_INT 21
2646: PUSH
2647: LD_INT 3
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PPUSH
2662: CALL_OW 69
2666: ST_TO_ADDR
// if not tmp then
2667: LD_VAR 0 8
2671: NOT
2672: IFFALSE 2676
// exit ;
2674: GO 3134
// if in_unit then
2676: LD_VAR 0 11
2680: IFFALSE 2704
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2682: LD_ADDR_VAR 0 10
2686: PUSH
2687: LD_VAR 0 8
2691: PPUSH
2692: LD_VAR 0 11
2696: PPUSH
2697: CALL_OW 74
2701: ST_TO_ADDR
2702: GO 2724
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2704: LD_ADDR_VAR 0 10
2708: PUSH
2709: LD_VAR 0 8
2713: PPUSH
2714: LD_VAR 0 1
2718: PPUSH
2719: CALL_OW 74
2723: ST_TO_ADDR
// if not enemy then
2724: LD_VAR 0 10
2728: NOT
2729: IFFALSE 2733
// exit ;
2731: GO 3134
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2733: LD_VAR 0 11
2737: PUSH
2738: LD_VAR 0 11
2742: PPUSH
2743: LD_VAR 0 10
2747: PPUSH
2748: CALL_OW 296
2752: PUSH
2753: LD_INT 13
2755: GREATER
2756: AND
2757: PUSH
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_VAR 0 10
2767: PPUSH
2768: CALL_OW 296
2772: PUSH
2773: LD_INT 12
2775: GREATER
2776: OR
2777: IFFALSE 2781
// exit ;
2779: GO 3134
// missile := [ 1 ] ;
2781: LD_ADDR_VAR 0 14
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2792: LD_VAR 0 9
2796: PPUSH
2797: LD_VAR 0 12
2801: PPUSH
2802: CALL_OW 325
2806: IFFALSE 2835
// missile := Replace ( missile , missile + 1 , 2 ) ;
2808: LD_ADDR_VAR 0 14
2812: PUSH
2813: LD_VAR 0 14
2817: PPUSH
2818: LD_VAR 0 14
2822: PUSH
2823: LD_INT 1
2825: PLUS
2826: PPUSH
2827: LD_INT 2
2829: PPUSH
2830: CALL_OW 1
2834: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2835: LD_VAR 0 9
2839: PPUSH
2840: LD_VAR 0 13
2844: PPUSH
2845: CALL_OW 325
2849: PUSH
2850: LD_VAR 0 10
2854: PPUSH
2855: CALL_OW 255
2859: PPUSH
2860: LD_VAR 0 13
2864: PPUSH
2865: CALL_OW 325
2869: NOT
2870: AND
2871: IFFALSE 2900
// missile := Replace ( missile , missile + 1 , 3 ) ;
2873: LD_ADDR_VAR 0 14
2877: PUSH
2878: LD_VAR 0 14
2882: PPUSH
2883: LD_VAR 0 14
2887: PUSH
2888: LD_INT 1
2890: PLUS
2891: PPUSH
2892: LD_INT 3
2894: PPUSH
2895: CALL_OW 1
2899: ST_TO_ADDR
// if missile < 2 then
2900: LD_VAR 0 14
2904: PUSH
2905: LD_INT 2
2907: LESS
2908: IFFALSE 2912
// exit ;
2910: GO 3134
// x := GetX ( enemy ) ;
2912: LD_ADDR_VAR 0 4
2916: PUSH
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 250
2926: ST_TO_ADDR
// y := GetY ( enemy ) ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 10
2936: PPUSH
2937: CALL_OW 251
2941: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2942: LD_ADDR_VAR 0 6
2946: PUSH
2947: LD_VAR 0 4
2951: PUSH
2952: LD_INT 1
2954: NEG
2955: PPUSH
2956: LD_INT 1
2958: PPUSH
2959: CALL_OW 12
2963: PLUS
2964: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2965: LD_ADDR_VAR 0 7
2969: PUSH
2970: LD_VAR 0 5
2974: PUSH
2975: LD_INT 1
2977: NEG
2978: PPUSH
2979: LD_INT 1
2981: PPUSH
2982: CALL_OW 12
2986: PLUS
2987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2988: LD_VAR 0 6
2992: PPUSH
2993: LD_VAR 0 7
2997: PPUSH
2998: CALL_OW 488
3002: NOT
3003: IFFALSE 3025
// begin _x := x ;
3005: LD_ADDR_VAR 0 6
3009: PUSH
3010: LD_VAR 0 4
3014: ST_TO_ADDR
// _y := y ;
3015: LD_ADDR_VAR 0 7
3019: PUSH
3020: LD_VAR 0 5
3024: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_VAR 0 14
3037: PPUSH
3038: CALL_OW 12
3042: ST_TO_ADDR
// case i of 1 :
3043: LD_VAR 0 3
3047: PUSH
3048: LD_INT 1
3050: DOUBLE
3051: EQUAL
3052: IFTRUE 3056
3054: GO 3073
3056: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_VAR 0 10
3066: PPUSH
3067: CALL_OW 115
3071: GO 3134
3073: LD_INT 2
3075: DOUBLE
3076: EQUAL
3077: IFTRUE 3081
3079: GO 3103
3081: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3082: LD_VAR 0 1
3086: PPUSH
3087: LD_VAR 0 6
3091: PPUSH
3092: LD_VAR 0 7
3096: PPUSH
3097: CALL_OW 153
3101: GO 3134
3103: LD_INT 3
3105: DOUBLE
3106: EQUAL
3107: IFTRUE 3111
3109: GO 3133
3111: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_VAR 0 6
3121: PPUSH
3122: LD_VAR 0 7
3126: PPUSH
3127: CALL_OW 154
3131: GO 3134
3133: POP
// end ;
3134: LD_VAR 0 2
3138: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3139: LD_INT 0
3141: PPUSH
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// if not unit or not building then
3147: LD_VAR 0 1
3151: NOT
3152: PUSH
3153: LD_VAR 0 2
3157: NOT
3158: OR
3159: IFFALSE 3163
// exit ;
3161: GO 3321
// x := GetX ( building ) ;
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_VAR 0 2
3172: PPUSH
3173: CALL_OW 250
3177: ST_TO_ADDR
// y := GetY ( building ) ;
3178: LD_ADDR_VAR 0 6
3182: PUSH
3183: LD_VAR 0 2
3187: PPUSH
3188: CALL_OW 251
3192: ST_TO_ADDR
// for i = 0 to 5 do
3193: LD_ADDR_VAR 0 4
3197: PUSH
3198: DOUBLE
3199: LD_INT 0
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 5
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3319
// begin _x := ShiftX ( x , i , 3 ) ;
3209: LD_ADDR_VAR 0 7
3213: PUSH
3214: LD_VAR 0 5
3218: PPUSH
3219: LD_VAR 0 4
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: CALL_OW 272
3231: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3232: LD_ADDR_VAR 0 8
3236: PUSH
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_VAR 0 4
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: CALL_OW 273
3254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3255: LD_VAR 0 7
3259: PPUSH
3260: LD_VAR 0 8
3264: PPUSH
3265: CALL_OW 488
3269: NOT
3270: IFFALSE 3274
// continue ;
3272: GO 3206
// if HexInfo ( _x , _y ) = 0 then
3274: LD_VAR 0 7
3278: PPUSH
3279: LD_VAR 0 8
3283: PPUSH
3284: CALL_OW 428
3288: PUSH
3289: LD_INT 0
3291: EQUAL
3292: IFFALSE 3317
// begin ComMoveXY ( unit , _x , _y ) ;
3294: LD_VAR 0 1
3298: PPUSH
3299: LD_VAR 0 7
3303: PPUSH
3304: LD_VAR 0 8
3308: PPUSH
3309: CALL_OW 111
// exit ;
3313: POP
3314: POP
3315: GO 3321
// end ; end ;
3317: GO 3206
3319: POP
3320: POP
// end ;
3321: LD_VAR 0 3
3325: RET
// export function ScanBase ( side , base_area ) ; begin
3326: LD_INT 0
3328: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3329: LD_ADDR_VAR 0 3
3333: PUSH
3334: LD_VAR 0 2
3338: PPUSH
3339: LD_INT 81
3341: PUSH
3342: LD_VAR 0 1
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PPUSH
3351: CALL_OW 70
3355: ST_TO_ADDR
// end ;
3356: LD_VAR 0 3
3360: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3361: LD_INT 0
3363: PPUSH
3364: PPUSH
3365: PPUSH
3366: PPUSH
// result := false ;
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: LD_INT 0
3374: ST_TO_ADDR
// side := GetSide ( unit ) ;
3375: LD_ADDR_VAR 0 3
3379: PUSH
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 255
3389: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3390: LD_ADDR_VAR 0 4
3394: PUSH
3395: LD_VAR 0 1
3399: PPUSH
3400: CALL_OW 248
3404: ST_TO_ADDR
// case nat of 1 :
3405: LD_VAR 0 4
3409: PUSH
3410: LD_INT 1
3412: DOUBLE
3413: EQUAL
3414: IFTRUE 3418
3416: GO 3429
3418: POP
// tech := tech_lassight ; 2 :
3419: LD_ADDR_VAR 0 5
3423: PUSH
3424: LD_INT 12
3426: ST_TO_ADDR
3427: GO 3468
3429: LD_INT 2
3431: DOUBLE
3432: EQUAL
3433: IFTRUE 3437
3435: GO 3448
3437: POP
// tech := tech_mortar ; 3 :
3438: LD_ADDR_VAR 0 5
3442: PUSH
3443: LD_INT 41
3445: ST_TO_ADDR
3446: GO 3468
3448: LD_INT 3
3450: DOUBLE
3451: EQUAL
3452: IFTRUE 3456
3454: GO 3467
3456: POP
// tech := tech_bazooka ; end ;
3457: LD_ADDR_VAR 0 5
3461: PUSH
3462: LD_INT 44
3464: ST_TO_ADDR
3465: GO 3468
3467: POP
// if Researched ( side , tech ) then
3468: LD_VAR 0 3
3472: PPUSH
3473: LD_VAR 0 5
3477: PPUSH
3478: CALL_OW 325
3482: IFFALSE 3509
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3484: LD_ADDR_VAR 0 2
3488: PUSH
3489: LD_INT 5
3491: PUSH
3492: LD_INT 8
3494: PUSH
3495: LD_INT 9
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: LD_VAR 0 4
3507: ARRAY
3508: ST_TO_ADDR
// end ;
3509: LD_VAR 0 2
3513: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3514: LD_INT 0
3516: PPUSH
3517: PPUSH
3518: PPUSH
// if not mines then
3519: LD_VAR 0 2
3523: NOT
3524: IFFALSE 3528
// exit ;
3526: GO 3672
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3528: LD_ADDR_VAR 0 5
3532: PUSH
3533: LD_INT 81
3535: PUSH
3536: LD_VAR 0 1
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 21
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: CALL_OW 69
3570: ST_TO_ADDR
// for i in mines do
3571: LD_ADDR_VAR 0 4
3575: PUSH
3576: LD_VAR 0 2
3580: PUSH
3581: FOR_IN
3582: IFFALSE 3670
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3584: LD_VAR 0 4
3588: PUSH
3589: LD_INT 1
3591: ARRAY
3592: PPUSH
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 2
3600: ARRAY
3601: PPUSH
3602: CALL_OW 458
3606: NOT
3607: IFFALSE 3611
// continue ;
3609: GO 3581
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3611: LD_VAR 0 4
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_VAR 0 4
3624: PUSH
3625: LD_INT 2
3627: ARRAY
3628: PPUSH
3629: CALL_OW 428
3633: PUSH
3634: LD_VAR 0 5
3638: IN
3639: IFFALSE 3668
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3641: LD_VAR 0 4
3645: PUSH
3646: LD_INT 1
3648: ARRAY
3649: PPUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 2
3657: ARRAY
3658: PPUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 456
// end ;
3668: GO 3581
3670: POP
3671: POP
// end ;
3672: LD_VAR 0 3
3676: RET
// export function Count ( array ) ; var i ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
// result := 0 ;
3681: LD_ADDR_VAR 0 2
3685: PUSH
3686: LD_INT 0
3688: ST_TO_ADDR
// for i in array do
3689: LD_ADDR_VAR 0 3
3693: PUSH
3694: LD_VAR 0 1
3698: PUSH
3699: FOR_IN
3700: IFFALSE 3724
// if i then
3702: LD_VAR 0 3
3706: IFFALSE 3722
// result := result + 1 ;
3708: LD_ADDR_VAR 0 2
3712: PUSH
3713: LD_VAR 0 2
3717: PUSH
3718: LD_INT 1
3720: PLUS
3721: ST_TO_ADDR
3722: GO 3699
3724: POP
3725: POP
// end ;
3726: LD_VAR 0 2
3730: RET
// export function IsEmpty ( building ) ; begin
3731: LD_INT 0
3733: PPUSH
// if not building then
3734: LD_VAR 0 1
3738: NOT
3739: IFFALSE 3743
// exit ;
3741: GO 3786
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: LD_VAR 0 1
3752: PUSH
3753: LD_INT 22
3755: PUSH
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 255
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 58
3772: PUSH
3773: EMPTY
3774: LIST
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 69
3784: IN
3785: ST_TO_ADDR
// end ;
3786: LD_VAR 0 2
3790: RET
// export function IsNotFull ( building ) ; var places ; begin
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
// if not building then
3795: LD_VAR 0 1
3799: NOT
3800: IFFALSE 3804
// exit ;
3802: GO 3975
// result := false ;
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: LD_INT 0
3811: ST_TO_ADDR
// places := 0 ;
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: LD_INT 0
3819: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3820: LD_VAR 0 1
3824: PPUSH
3825: CALL_OW 266
3829: PUSH
3830: LD_INT 0
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3892
3836: LD_INT 1
3838: DOUBLE
3839: EQUAL
3840: IFTRUE 3892
3842: LD_INT 6
3844: DOUBLE
3845: EQUAL
3846: IFTRUE 3892
3848: LD_INT 7
3850: DOUBLE
3851: EQUAL
3852: IFTRUE 3892
3854: LD_INT 8
3856: DOUBLE
3857: EQUAL
3858: IFTRUE 3892
3860: LD_INT 4
3862: DOUBLE
3863: EQUAL
3864: IFTRUE 3892
3866: LD_INT 5
3868: DOUBLE
3869: EQUAL
3870: IFTRUE 3892
3872: LD_INT 2
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3892
3878: LD_INT 3
3880: DOUBLE
3881: EQUAL
3882: IFTRUE 3892
3884: LD_INT 35
3886: DOUBLE
3887: EQUAL
3888: IFTRUE 3892
3890: GO 3903
3892: POP
// places := 6 ; b_bunker , b_breastwork :
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: LD_INT 6
3900: ST_TO_ADDR
3901: GO 3948
3903: LD_INT 32
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3917
3909: LD_INT 31
3911: DOUBLE
3912: EQUAL
3913: IFTRUE 3917
3915: GO 3928
3917: POP
// places := 1 ; b_control_tower :
3918: LD_ADDR_VAR 0 3
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
3926: GO 3948
3928: LD_INT 36
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3947
3936: POP
// places := 3 ; end ;
3937: LD_ADDR_VAR 0 3
3941: PUSH
3942: LD_INT 3
3944: ST_TO_ADDR
3945: GO 3948
3947: POP
// if places then
3948: LD_VAR 0 3
3952: IFFALSE 3975
// result := UnitsInside ( building ) < places ;
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: LD_VAR 0 1
3963: PPUSH
3964: CALL_OW 313
3968: PUSH
3969: LD_VAR 0 3
3973: LESS
3974: ST_TO_ADDR
// end ;
3975: LD_VAR 0 2
3979: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3980: LD_INT 0
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
// tmp := [ ] ;
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: EMPTY
3992: ST_TO_ADDR
// list := [ ] ;
3993: LD_ADDR_VAR 0 5
3997: PUSH
3998: EMPTY
3999: ST_TO_ADDR
// for i = 16 to 25 do
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: DOUBLE
4006: LD_INT 16
4008: DEC
4009: ST_TO_ADDR
4010: LD_INT 25
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4087
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4016: LD_ADDR_VAR 0 3
4020: PUSH
4021: LD_VAR 0 3
4025: PUSH
4026: LD_INT 22
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 255
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 91
4045: PUSH
4046: LD_VAR 0 1
4050: PUSH
4051: LD_INT 6
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 30
4061: PUSH
4062: LD_VAR 0 4
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: ADD
4084: ST_TO_ADDR
4085: GO 4013
4087: POP
4088: POP
// for i = 1 to tmp do
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_VAR 0 3
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4193
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PUSH
4117: LD_VAR 0 3
4121: PUSH
4122: LD_VAR 0 4
4126: ARRAY
4127: PPUSH
4128: CALL_OW 266
4132: PUSH
4133: LD_VAR 0 3
4137: PUSH
4138: LD_VAR 0 4
4142: ARRAY
4143: PPUSH
4144: CALL_OW 250
4148: PUSH
4149: LD_VAR 0 3
4153: PUSH
4154: LD_VAR 0 4
4158: ARRAY
4159: PPUSH
4160: CALL_OW 251
4164: PUSH
4165: LD_VAR 0 3
4169: PUSH
4170: LD_VAR 0 4
4174: ARRAY
4175: PPUSH
4176: CALL_OW 254
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: PUSH
4187: EMPTY
4188: LIST
4189: ADD
4190: ST_TO_ADDR
4191: GO 4104
4193: POP
4194: POP
// result := list ;
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: LD_VAR 0 5
4204: ST_TO_ADDR
// end ;
4205: LD_VAR 0 2
4209: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4210: LD_INT 0
4212: PPUSH
4213: PPUSH
4214: PPUSH
4215: PPUSH
4216: PPUSH
4217: PPUSH
4218: PPUSH
// if not factory then
4219: LD_VAR 0 1
4223: NOT
4224: IFFALSE 4228
// exit ;
4226: GO 4821
// if control = control_apeman then
4228: LD_VAR 0 4
4232: PUSH
4233: LD_INT 5
4235: EQUAL
4236: IFFALSE 4345
// begin tmp := UnitsInside ( factory ) ;
4238: LD_ADDR_VAR 0 8
4242: PUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 313
4252: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4253: LD_VAR 0 8
4257: PPUSH
4258: LD_INT 25
4260: PUSH
4261: LD_INT 12
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: PPUSH
4268: CALL_OW 72
4272: NOT
4273: IFFALSE 4283
// control := control_manual ;
4275: LD_ADDR_VAR 0 4
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4283: LD_ADDR_VAR 0 8
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL 3980 0 1
4297: ST_TO_ADDR
// if tmp then
4298: LD_VAR 0 8
4302: IFFALSE 4345
// begin for i in tmp do
4304: LD_ADDR_VAR 0 7
4308: PUSH
4309: LD_VAR 0 8
4313: PUSH
4314: FOR_IN
4315: IFFALSE 4343
// if i [ 1 ] = b_ext_radio then
4317: LD_VAR 0 7
4321: PUSH
4322: LD_INT 1
4324: ARRAY
4325: PUSH
4326: LD_INT 22
4328: EQUAL
4329: IFFALSE 4341
// begin control := control_remote ;
4331: LD_ADDR_VAR 0 4
4335: PUSH
4336: LD_INT 2
4338: ST_TO_ADDR
// break ;
4339: GO 4343
// end ;
4341: GO 4314
4343: POP
4344: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4345: LD_VAR 0 1
4349: PPUSH
4350: LD_VAR 0 2
4354: PPUSH
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_VAR 0 4
4364: PPUSH
4365: LD_VAR 0 5
4369: PPUSH
4370: CALL_OW 448
4374: IFFALSE 4409
// begin result := [ chassis , engine , control , weapon ] ;
4376: LD_ADDR_VAR 0 6
4380: PUSH
4381: LD_VAR 0 2
4385: PUSH
4386: LD_VAR 0 3
4390: PUSH
4391: LD_VAR 0 4
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: ST_TO_ADDR
// exit ;
4407: GO 4821
// end ; _chassis := AvailableChassisList ( factory ) ;
4409: LD_ADDR_VAR 0 9
4413: PUSH
4414: LD_VAR 0 1
4418: PPUSH
4419: CALL_OW 475
4423: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4424: LD_ADDR_VAR 0 11
4428: PUSH
4429: LD_VAR 0 1
4433: PPUSH
4434: CALL_OW 476
4438: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4439: LD_ADDR_VAR 0 12
4443: PUSH
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL_OW 477
4453: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4454: LD_ADDR_VAR 0 10
4458: PUSH
4459: LD_VAR 0 1
4463: PPUSH
4464: CALL_OW 478
4468: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4469: LD_VAR 0 9
4473: NOT
4474: PUSH
4475: LD_VAR 0 11
4479: NOT
4480: OR
4481: PUSH
4482: LD_VAR 0 12
4486: NOT
4487: OR
4488: PUSH
4489: LD_VAR 0 10
4493: NOT
4494: OR
4495: IFFALSE 4530
// begin result := [ chassis , engine , control , weapon ] ;
4497: LD_ADDR_VAR 0 6
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: LD_VAR 0 3
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 5
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// exit ;
4528: GO 4821
// end ; if not chassis in _chassis then
4530: LD_VAR 0 2
4534: PUSH
4535: LD_VAR 0 9
4539: IN
4540: NOT
4541: IFFALSE 4567
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: LD_VAR 0 9
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_VAR 0 9
4560: PPUSH
4561: CALL_OW 12
4565: ARRAY
4566: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_VAR 0 3
4576: PPUSH
4577: CALL 4826 0 2
4581: NOT
4582: IFFALSE 4641
// repeat engine := _engine [ 1 ] ;
4584: LD_ADDR_VAR 0 3
4588: PUSH
4589: LD_VAR 0 11
4593: PUSH
4594: LD_INT 1
4596: ARRAY
4597: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4598: LD_ADDR_VAR 0 11
4602: PUSH
4603: LD_VAR 0 11
4607: PPUSH
4608: LD_INT 1
4610: PPUSH
4611: CALL_OW 3
4615: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4616: LD_VAR 0 2
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: CALL 4826 0 2
4630: PUSH
4631: LD_VAR 0 11
4635: PUSH
4636: EMPTY
4637: EQUAL
4638: OR
4639: IFFALSE 4584
// if not control in _control then
4641: LD_VAR 0 4
4645: PUSH
4646: LD_VAR 0 12
4650: IN
4651: NOT
4652: IFFALSE 4678
// control := _control [ rand ( 1 , _control ) ] ;
4654: LD_ADDR_VAR 0 4
4658: PUSH
4659: LD_VAR 0 12
4663: PUSH
4664: LD_INT 1
4666: PPUSH
4667: LD_VAR 0 12
4671: PPUSH
4672: CALL_OW 12
4676: ARRAY
4677: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4678: LD_VAR 0 2
4682: PPUSH
4683: LD_VAR 0 5
4687: PPUSH
4688: CALL 5046 0 2
4692: NOT
4693: IFFALSE 4752
// repeat weapon := _weapon [ 1 ] ;
4695: LD_ADDR_VAR 0 5
4699: PUSH
4700: LD_VAR 0 10
4704: PUSH
4705: LD_INT 1
4707: ARRAY
4708: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4709: LD_ADDR_VAR 0 10
4713: PUSH
4714: LD_VAR 0 10
4718: PPUSH
4719: LD_INT 1
4721: PPUSH
4722: CALL_OW 3
4726: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4727: LD_VAR 0 2
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 5046 0 2
4741: PUSH
4742: LD_VAR 0 10
4746: PUSH
4747: EMPTY
4748: EQUAL
4749: OR
4750: IFFALSE 4695
// result := [ ] ;
4752: LD_ADDR_VAR 0 6
4756: PUSH
4757: EMPTY
4758: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4759: LD_VAR 0 1
4763: PPUSH
4764: LD_VAR 0 2
4768: PPUSH
4769: LD_VAR 0 3
4773: PPUSH
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_VAR 0 5
4783: PPUSH
4784: CALL_OW 448
4788: IFFALSE 4821
// result := [ chassis , engine , control , weapon ] ;
4790: LD_ADDR_VAR 0 6
4794: PUSH
4795: LD_VAR 0 2
4799: PUSH
4800: LD_VAR 0 3
4804: PUSH
4805: LD_VAR 0 4
4809: PUSH
4810: LD_VAR 0 5
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// end ;
4821: LD_VAR 0 6
4825: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4826: LD_INT 0
4828: PPUSH
// if not chassis or not engine then
4829: LD_VAR 0 1
4833: NOT
4834: PUSH
4835: LD_VAR 0 2
4839: NOT
4840: OR
4841: IFFALSE 4845
// exit ;
4843: GO 5041
// case engine of engine_solar :
4845: LD_VAR 0 2
4849: PUSH
4850: LD_INT 2
4852: DOUBLE
4853: EQUAL
4854: IFTRUE 4858
4856: GO 4896
4858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4859: LD_ADDR_VAR 0 3
4863: PUSH
4864: LD_INT 11
4866: PUSH
4867: LD_INT 12
4869: PUSH
4870: LD_INT 13
4872: PUSH
4873: LD_INT 14
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: LD_INT 2
4881: PUSH
4882: LD_INT 3
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: ST_TO_ADDR
4894: GO 5025
4896: LD_INT 1
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4966
4904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4905: LD_ADDR_VAR 0 3
4909: PUSH
4910: LD_INT 11
4912: PUSH
4913: LD_INT 12
4915: PUSH
4916: LD_INT 13
4918: PUSH
4919: LD_INT 14
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 2
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: LD_INT 4
4933: PUSH
4934: LD_INT 5
4936: PUSH
4937: LD_INT 21
4939: PUSH
4940: LD_INT 23
4942: PUSH
4943: LD_INT 22
4945: PUSH
4946: LD_INT 24
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: ST_TO_ADDR
4964: GO 5025
4966: LD_INT 3
4968: DOUBLE
4969: EQUAL
4970: IFTRUE 4974
4972: GO 5024
4974: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4975: LD_ADDR_VAR 0 3
4979: PUSH
4980: LD_INT 13
4982: PUSH
4983: LD_INT 14
4985: PUSH
4986: LD_INT 2
4988: PUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 4
4994: PUSH
4995: LD_INT 5
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 22
5003: PUSH
5004: LD_INT 23
5006: PUSH
5007: LD_INT 24
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: ST_TO_ADDR
5022: GO 5025
5024: POP
// result := ( chassis in result ) ;
5025: LD_ADDR_VAR 0 3
5029: PUSH
5030: LD_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: IN
5040: ST_TO_ADDR
// end ;
5041: LD_VAR 0 3
5045: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5046: LD_INT 0
5048: PPUSH
// if not chassis or not weapon then
5049: LD_VAR 0 1
5053: NOT
5054: PUSH
5055: LD_VAR 0 2
5059: NOT
5060: OR
5061: IFFALSE 5065
// exit ;
5063: GO 6125
// case weapon of us_machine_gun :
5065: LD_VAR 0 2
5069: PUSH
5070: LD_INT 2
5072: DOUBLE
5073: EQUAL
5074: IFTRUE 5078
5076: GO 5108
5078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5079: LD_ADDR_VAR 0 3
5083: PUSH
5084: LD_INT 1
5086: PUSH
5087: LD_INT 2
5089: PUSH
5090: LD_INT 3
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: ST_TO_ADDR
5106: GO 6109
5108: LD_INT 3
5110: DOUBLE
5111: EQUAL
5112: IFTRUE 5116
5114: GO 5146
5116: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5117: LD_ADDR_VAR 0 3
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: LD_INT 4
5133: PUSH
5134: LD_INT 5
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: ST_TO_ADDR
5144: GO 6109
5146: LD_INT 11
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5154
5152: GO 5184
5154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5155: LD_ADDR_VAR 0 3
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: LD_INT 2
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: LD_INT 4
5171: PUSH
5172: LD_INT 5
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
5182: GO 6109
5184: LD_INT 4
5186: DOUBLE
5187: EQUAL
5188: IFTRUE 5192
5190: GO 5218
5192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5193: LD_ADDR_VAR 0 3
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: LD_INT 3
5203: PUSH
5204: LD_INT 4
5206: PUSH
5207: LD_INT 5
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: ST_TO_ADDR
5216: GO 6109
5218: LD_INT 5
5220: DOUBLE
5221: EQUAL
5222: IFTRUE 5226
5224: GO 5252
5226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5227: LD_ADDR_VAR 0 3
5231: PUSH
5232: LD_INT 2
5234: PUSH
5235: LD_INT 3
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: LD_INT 5
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: ST_TO_ADDR
5250: GO 6109
5252: LD_INT 9
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5286
5260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5261: LD_ADDR_VAR 0 3
5265: PUSH
5266: LD_INT 2
5268: PUSH
5269: LD_INT 3
5271: PUSH
5272: LD_INT 4
5274: PUSH
5275: LD_INT 5
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: ST_TO_ADDR
5284: GO 6109
5286: LD_INT 7
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5294
5292: GO 5320
5294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5295: LD_ADDR_VAR 0 3
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_INT 3
5305: PUSH
5306: LD_INT 4
5308: PUSH
5309: LD_INT 5
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: ST_TO_ADDR
5318: GO 6109
5320: LD_INT 12
5322: DOUBLE
5323: EQUAL
5324: IFTRUE 5328
5326: GO 5354
5328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5329: LD_ADDR_VAR 0 3
5333: PUSH
5334: LD_INT 2
5336: PUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 4
5342: PUSH
5343: LD_INT 5
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: ST_TO_ADDR
5352: GO 6109
5354: LD_INT 13
5356: DOUBLE
5357: EQUAL
5358: IFTRUE 5362
5360: GO 5388
5362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: LD_INT 3
5373: PUSH
5374: LD_INT 4
5376: PUSH
5377: LD_INT 5
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: ST_TO_ADDR
5386: GO 6109
5388: LD_INT 14
5390: DOUBLE
5391: EQUAL
5392: IFTRUE 5396
5394: GO 5414
5396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5397: LD_ADDR_VAR 0 3
5401: PUSH
5402: LD_INT 4
5404: PUSH
5405: LD_INT 5
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: ST_TO_ADDR
5412: GO 6109
5414: LD_INT 6
5416: DOUBLE
5417: EQUAL
5418: IFTRUE 5422
5420: GO 5440
5422: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5423: LD_ADDR_VAR 0 3
5427: PUSH
5428: LD_INT 4
5430: PUSH
5431: LD_INT 5
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: ST_TO_ADDR
5438: GO 6109
5440: LD_INT 10
5442: DOUBLE
5443: EQUAL
5444: IFTRUE 5448
5446: GO 5466
5448: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5449: LD_ADDR_VAR 0 3
5453: PUSH
5454: LD_INT 4
5456: PUSH
5457: LD_INT 5
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
5464: GO 6109
5466: LD_INT 22
5468: DOUBLE
5469: EQUAL
5470: IFTRUE 5474
5472: GO 5500
5474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_INT 11
5482: PUSH
5483: LD_INT 12
5485: PUSH
5486: LD_INT 13
5488: PUSH
5489: LD_INT 14
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: ST_TO_ADDR
5498: GO 6109
5500: LD_INT 23
5502: DOUBLE
5503: EQUAL
5504: IFTRUE 5508
5506: GO 5534
5508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: LD_INT 11
5516: PUSH
5517: LD_INT 12
5519: PUSH
5520: LD_INT 13
5522: PUSH
5523: LD_INT 14
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: ST_TO_ADDR
5532: GO 6109
5534: LD_INT 24
5536: DOUBLE
5537: EQUAL
5538: IFTRUE 5542
5540: GO 5568
5542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: LD_INT 11
5550: PUSH
5551: LD_INT 12
5553: PUSH
5554: LD_INT 13
5556: PUSH
5557: LD_INT 14
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: ST_TO_ADDR
5566: GO 6109
5568: LD_INT 30
5570: DOUBLE
5571: EQUAL
5572: IFTRUE 5576
5574: GO 5602
5576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5577: LD_ADDR_VAR 0 3
5581: PUSH
5582: LD_INT 11
5584: PUSH
5585: LD_INT 12
5587: PUSH
5588: LD_INT 13
5590: PUSH
5591: LD_INT 14
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: ST_TO_ADDR
5600: GO 6109
5602: LD_INT 25
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5628
5610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5611: LD_ADDR_VAR 0 3
5615: PUSH
5616: LD_INT 13
5618: PUSH
5619: LD_INT 14
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: ST_TO_ADDR
5626: GO 6109
5628: LD_INT 27
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5636
5634: GO 5654
5636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_INT 13
5644: PUSH
5645: LD_INT 14
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: ST_TO_ADDR
5652: GO 6109
5654: LD_INT 92
5656: DOUBLE
5657: EQUAL
5658: IFTRUE 5662
5660: GO 5688
5662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5663: LD_ADDR_VAR 0 3
5667: PUSH
5668: LD_INT 11
5670: PUSH
5671: LD_INT 12
5673: PUSH
5674: LD_INT 13
5676: PUSH
5677: LD_INT 14
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: ST_TO_ADDR
5686: GO 6109
5688: LD_INT 28
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 5714
5696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5697: LD_ADDR_VAR 0 3
5701: PUSH
5702: LD_INT 13
5704: PUSH
5705: LD_INT 14
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: ST_TO_ADDR
5712: GO 6109
5714: LD_INT 29
5716: DOUBLE
5717: EQUAL
5718: IFTRUE 5722
5720: GO 5740
5722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 13
5730: PUSH
5731: LD_INT 14
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: ST_TO_ADDR
5738: GO 6109
5740: LD_INT 31
5742: DOUBLE
5743: EQUAL
5744: IFTRUE 5748
5746: GO 5766
5748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_INT 13
5756: PUSH
5757: LD_INT 14
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: ST_TO_ADDR
5764: GO 6109
5766: LD_INT 26
5768: DOUBLE
5769: EQUAL
5770: IFTRUE 5774
5772: GO 5792
5774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: LD_INT 13
5782: PUSH
5783: LD_INT 14
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: ST_TO_ADDR
5790: GO 6109
5792: LD_INT 42
5794: DOUBLE
5795: EQUAL
5796: IFTRUE 5800
5798: GO 5826
5800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: LD_INT 21
5808: PUSH
5809: LD_INT 22
5811: PUSH
5812: LD_INT 23
5814: PUSH
5815: LD_INT 24
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: ST_TO_ADDR
5824: GO 6109
5826: LD_INT 43
5828: DOUBLE
5829: EQUAL
5830: IFTRUE 5834
5832: GO 5860
5834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5835: LD_ADDR_VAR 0 3
5839: PUSH
5840: LD_INT 21
5842: PUSH
5843: LD_INT 22
5845: PUSH
5846: LD_INT 23
5848: PUSH
5849: LD_INT 24
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: ST_TO_ADDR
5858: GO 6109
5860: LD_INT 44
5862: DOUBLE
5863: EQUAL
5864: IFTRUE 5868
5866: GO 5894
5868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5869: LD_ADDR_VAR 0 3
5873: PUSH
5874: LD_INT 21
5876: PUSH
5877: LD_INT 22
5879: PUSH
5880: LD_INT 23
5882: PUSH
5883: LD_INT 24
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: ST_TO_ADDR
5892: GO 6109
5894: LD_INT 45
5896: DOUBLE
5897: EQUAL
5898: IFTRUE 5902
5900: GO 5928
5902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5903: LD_ADDR_VAR 0 3
5907: PUSH
5908: LD_INT 21
5910: PUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 23
5916: PUSH
5917: LD_INT 24
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: ST_TO_ADDR
5926: GO 6109
5928: LD_INT 49
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 5962
5936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5937: LD_ADDR_VAR 0 3
5941: PUSH
5942: LD_INT 21
5944: PUSH
5945: LD_INT 22
5947: PUSH
5948: LD_INT 23
5950: PUSH
5951: LD_INT 24
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: ST_TO_ADDR
5960: GO 6109
5962: LD_INT 51
5964: DOUBLE
5965: EQUAL
5966: IFTRUE 5970
5968: GO 5996
5970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: LD_INT 21
5978: PUSH
5979: LD_INT 22
5981: PUSH
5982: LD_INT 23
5984: PUSH
5985: LD_INT 24
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: ST_TO_ADDR
5994: GO 6109
5996: LD_INT 52
5998: DOUBLE
5999: EQUAL
6000: IFTRUE 6004
6002: GO 6030
6004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6005: LD_ADDR_VAR 0 3
6009: PUSH
6010: LD_INT 21
6012: PUSH
6013: LD_INT 22
6015: PUSH
6016: LD_INT 23
6018: PUSH
6019: LD_INT 24
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: ST_TO_ADDR
6028: GO 6109
6030: LD_INT 53
6032: DOUBLE
6033: EQUAL
6034: IFTRUE 6038
6036: GO 6056
6038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6039: LD_ADDR_VAR 0 3
6043: PUSH
6044: LD_INT 23
6046: PUSH
6047: LD_INT 24
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: ST_TO_ADDR
6054: GO 6109
6056: LD_INT 46
6058: DOUBLE
6059: EQUAL
6060: IFTRUE 6064
6062: GO 6082
6064: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6065: LD_ADDR_VAR 0 3
6069: PUSH
6070: LD_INT 23
6072: PUSH
6073: LD_INT 24
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: ST_TO_ADDR
6080: GO 6109
6082: LD_INT 47
6084: DOUBLE
6085: EQUAL
6086: IFTRUE 6090
6088: GO 6108
6090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: LD_INT 23
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: ST_TO_ADDR
6106: GO 6109
6108: POP
// result := ( chassis in result ) ;
6109: LD_ADDR_VAR 0 3
6113: PUSH
6114: LD_VAR 0 1
6118: PUSH
6119: LD_VAR 0 3
6123: IN
6124: ST_TO_ADDR
// end ;
6125: LD_VAR 0 3
6129: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// result := array ;
6139: LD_ADDR_VAR 0 5
6143: PUSH
6144: LD_VAR 0 1
6148: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6149: LD_VAR 0 1
6153: NOT
6154: PUSH
6155: LD_VAR 0 2
6159: NOT
6160: OR
6161: PUSH
6162: LD_VAR 0 3
6166: NOT
6167: OR
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_VAR 0 1
6178: GREATER
6179: OR
6180: PUSH
6181: LD_VAR 0 3
6185: PUSH
6186: LD_VAR 0 1
6190: GREATER
6191: OR
6192: IFFALSE 6196
// exit ;
6194: GO 6492
// if direction then
6196: LD_VAR 0 4
6200: IFFALSE 6264
// begin d := 1 ;
6202: LD_ADDR_VAR 0 9
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// if i_from > i_to then
6210: LD_VAR 0 2
6214: PUSH
6215: LD_VAR 0 3
6219: GREATER
6220: IFFALSE 6246
// length := ( array - i_from ) + i_to else
6222: LD_ADDR_VAR 0 11
6226: PUSH
6227: LD_VAR 0 1
6231: PUSH
6232: LD_VAR 0 2
6236: MINUS
6237: PUSH
6238: LD_VAR 0 3
6242: PLUS
6243: ST_TO_ADDR
6244: GO 6262
// length := i_to - i_from ;
6246: LD_ADDR_VAR 0 11
6250: PUSH
6251: LD_VAR 0 3
6255: PUSH
6256: LD_VAR 0 2
6260: MINUS
6261: ST_TO_ADDR
// end else
6262: GO 6325
// begin d := - 1 ;
6264: LD_ADDR_VAR 0 9
6268: PUSH
6269: LD_INT 1
6271: NEG
6272: ST_TO_ADDR
// if i_from > i_to then
6273: LD_VAR 0 2
6277: PUSH
6278: LD_VAR 0 3
6282: GREATER
6283: IFFALSE 6303
// length := i_from - i_to else
6285: LD_ADDR_VAR 0 11
6289: PUSH
6290: LD_VAR 0 2
6294: PUSH
6295: LD_VAR 0 3
6299: MINUS
6300: ST_TO_ADDR
6301: GO 6325
// length := ( array - i_to ) + i_from ;
6303: LD_ADDR_VAR 0 11
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_VAR 0 3
6317: MINUS
6318: PUSH
6319: LD_VAR 0 2
6323: PLUS
6324: ST_TO_ADDR
// end ; if not length then
6325: LD_VAR 0 11
6329: NOT
6330: IFFALSE 6334
// exit ;
6332: GO 6492
// tmp := array ;
6334: LD_ADDR_VAR 0 10
6338: PUSH
6339: LD_VAR 0 1
6343: ST_TO_ADDR
// for i = 1 to length do
6344: LD_ADDR_VAR 0 6
6348: PUSH
6349: DOUBLE
6350: LD_INT 1
6352: DEC
6353: ST_TO_ADDR
6354: LD_VAR 0 11
6358: PUSH
6359: FOR_TO
6360: IFFALSE 6480
// begin for j = 1 to array do
6362: LD_ADDR_VAR 0 7
6366: PUSH
6367: DOUBLE
6368: LD_INT 1
6370: DEC
6371: ST_TO_ADDR
6372: LD_VAR 0 1
6376: PUSH
6377: FOR_TO
6378: IFFALSE 6466
// begin k := j + d ;
6380: LD_ADDR_VAR 0 8
6384: PUSH
6385: LD_VAR 0 7
6389: PUSH
6390: LD_VAR 0 9
6394: PLUS
6395: ST_TO_ADDR
// if k > array then
6396: LD_VAR 0 8
6400: PUSH
6401: LD_VAR 0 1
6405: GREATER
6406: IFFALSE 6416
// k := 1 ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: LD_INT 1
6415: ST_TO_ADDR
// if not k then
6416: LD_VAR 0 8
6420: NOT
6421: IFFALSE 6433
// k := array ;
6423: LD_ADDR_VAR 0 8
6427: PUSH
6428: LD_VAR 0 1
6432: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6433: LD_ADDR_VAR 0 10
6437: PUSH
6438: LD_VAR 0 10
6442: PPUSH
6443: LD_VAR 0 8
6447: PPUSH
6448: LD_VAR 0 1
6452: PUSH
6453: LD_VAR 0 7
6457: ARRAY
6458: PPUSH
6459: CALL_OW 1
6463: ST_TO_ADDR
// end ;
6464: GO 6377
6466: POP
6467: POP
// array := tmp ;
6468: LD_ADDR_VAR 0 1
6472: PUSH
6473: LD_VAR 0 10
6477: ST_TO_ADDR
// end ;
6478: GO 6359
6480: POP
6481: POP
// result := array ;
6482: LD_ADDR_VAR 0 5
6486: PUSH
6487: LD_VAR 0 1
6491: ST_TO_ADDR
// end ;
6492: LD_VAR 0 5
6496: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6497: LD_INT 0
6499: PPUSH
6500: PPUSH
// result := 0 ;
6501: LD_ADDR_VAR 0 3
6505: PUSH
6506: LD_INT 0
6508: ST_TO_ADDR
// if not array or not value in array then
6509: LD_VAR 0 1
6513: NOT
6514: PUSH
6515: LD_VAR 0 2
6519: PUSH
6520: LD_VAR 0 1
6524: IN
6525: NOT
6526: OR
6527: IFFALSE 6531
// exit ;
6529: GO 6585
// for i = 1 to array do
6531: LD_ADDR_VAR 0 4
6535: PUSH
6536: DOUBLE
6537: LD_INT 1
6539: DEC
6540: ST_TO_ADDR
6541: LD_VAR 0 1
6545: PUSH
6546: FOR_TO
6547: IFFALSE 6583
// if value = array [ i ] then
6549: LD_VAR 0 2
6553: PUSH
6554: LD_VAR 0 1
6558: PUSH
6559: LD_VAR 0 4
6563: ARRAY
6564: EQUAL
6565: IFFALSE 6581
// begin result := i ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_VAR 0 4
6576: ST_TO_ADDR
// exit ;
6577: POP
6578: POP
6579: GO 6585
// end ;
6581: GO 6546
6583: POP
6584: POP
// end ;
6585: LD_VAR 0 3
6589: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6590: LD_INT 0
6592: PPUSH
// vc_chassis := chassis ;
6593: LD_ADDR_OWVAR 37
6597: PUSH
6598: LD_VAR 0 1
6602: ST_TO_ADDR
// vc_engine := engine ;
6603: LD_ADDR_OWVAR 39
6607: PUSH
6608: LD_VAR 0 2
6612: ST_TO_ADDR
// vc_control := control ;
6613: LD_ADDR_OWVAR 38
6617: PUSH
6618: LD_VAR 0 3
6622: ST_TO_ADDR
// vc_weapon := weapon ;
6623: LD_ADDR_OWVAR 40
6627: PUSH
6628: LD_VAR 0 4
6632: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6633: LD_ADDR_OWVAR 41
6637: PUSH
6638: LD_VAR 0 5
6642: ST_TO_ADDR
// end ;
6643: LD_VAR 0 6
6647: RET
// export function WantPlant ( unit ) ; var task ; begin
6648: LD_INT 0
6650: PPUSH
6651: PPUSH
// result := false ;
6652: LD_ADDR_VAR 0 2
6656: PUSH
6657: LD_INT 0
6659: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6660: LD_ADDR_VAR 0 3
6664: PUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 437
6674: ST_TO_ADDR
// if task then
6675: LD_VAR 0 3
6679: IFFALSE 6707
// if task [ 1 ] [ 1 ] = p then
6681: LD_VAR 0 3
6685: PUSH
6686: LD_INT 1
6688: ARRAY
6689: PUSH
6690: LD_INT 1
6692: ARRAY
6693: PUSH
6694: LD_STRING p
6696: EQUAL
6697: IFFALSE 6707
// result := true ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// end ;
6707: LD_VAR 0 2
6711: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
// if pos < 1 then
6718: LD_VAR 0 2
6722: PUSH
6723: LD_INT 1
6725: LESS
6726: IFFALSE 6730
// exit ;
6728: GO 7033
// if pos = 1 then
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: EQUAL
6738: IFFALSE 6771
// result := Replace ( arr , pos [ 1 ] , value ) else
6740: LD_ADDR_VAR 0 4
6744: PUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 3
6763: PPUSH
6764: CALL_OW 1
6768: ST_TO_ADDR
6769: GO 7033
// begin tmp := arr ;
6771: LD_ADDR_VAR 0 6
6775: PUSH
6776: LD_VAR 0 1
6780: ST_TO_ADDR
// s_arr := [ tmp ] ;
6781: LD_ADDR_VAR 0 7
6785: PUSH
6786: LD_VAR 0 6
6790: PUSH
6791: EMPTY
6792: LIST
6793: ST_TO_ADDR
// for i = 1 to pos - 1 do
6794: LD_ADDR_VAR 0 5
6798: PUSH
6799: DOUBLE
6800: LD_INT 1
6802: DEC
6803: ST_TO_ADDR
6804: LD_VAR 0 2
6808: PUSH
6809: LD_INT 1
6811: MINUS
6812: PUSH
6813: FOR_TO
6814: IFFALSE 6859
// begin tmp := tmp [ pos [ i ] ] ;
6816: LD_ADDR_VAR 0 6
6820: PUSH
6821: LD_VAR 0 6
6825: PUSH
6826: LD_VAR 0 2
6830: PUSH
6831: LD_VAR 0 5
6835: ARRAY
6836: ARRAY
6837: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6838: LD_ADDR_VAR 0 7
6842: PUSH
6843: LD_VAR 0 7
6847: PUSH
6848: LD_VAR 0 6
6852: PUSH
6853: EMPTY
6854: LIST
6855: ADD
6856: ST_TO_ADDR
// end ;
6857: GO 6813
6859: POP
6860: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6861: LD_ADDR_VAR 0 6
6865: PUSH
6866: LD_VAR 0 6
6870: PPUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_VAR 0 2
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 3
6886: PPUSH
6887: CALL_OW 1
6891: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6892: LD_ADDR_VAR 0 7
6896: PUSH
6897: LD_VAR 0 7
6901: PPUSH
6902: LD_VAR 0 7
6906: PPUSH
6907: LD_VAR 0 6
6911: PPUSH
6912: CALL_OW 1
6916: ST_TO_ADDR
// for i = s_arr downto 2 do
6917: LD_ADDR_VAR 0 5
6921: PUSH
6922: DOUBLE
6923: LD_VAR 0 7
6927: INC
6928: ST_TO_ADDR
6929: LD_INT 2
6931: PUSH
6932: FOR_DOWNTO
6933: IFFALSE 7017
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6935: LD_ADDR_VAR 0 6
6939: PUSH
6940: LD_VAR 0 7
6944: PUSH
6945: LD_VAR 0 5
6949: PUSH
6950: LD_INT 1
6952: MINUS
6953: ARRAY
6954: PPUSH
6955: LD_VAR 0 2
6959: PUSH
6960: LD_VAR 0 5
6964: PUSH
6965: LD_INT 1
6967: MINUS
6968: ARRAY
6969: PPUSH
6970: LD_VAR 0 7
6974: PUSH
6975: LD_VAR 0 5
6979: ARRAY
6980: PPUSH
6981: CALL_OW 1
6985: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6986: LD_ADDR_VAR 0 7
6990: PUSH
6991: LD_VAR 0 7
6995: PPUSH
6996: LD_VAR 0 5
7000: PUSH
7001: LD_INT 1
7003: MINUS
7004: PPUSH
7005: LD_VAR 0 6
7009: PPUSH
7010: CALL_OW 1
7014: ST_TO_ADDR
// end ;
7015: GO 6932
7017: POP
7018: POP
// result := s_arr [ 1 ] ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: LD_VAR 0 7
7028: PUSH
7029: LD_INT 1
7031: ARRAY
7032: ST_TO_ADDR
// end ; end ;
7033: LD_VAR 0 4
7037: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7038: LD_INT 0
7040: PPUSH
7041: PPUSH
// if not list then
7042: LD_VAR 0 1
7046: NOT
7047: IFFALSE 7051
// exit ;
7049: GO 7142
// i := list [ pos1 ] ;
7051: LD_ADDR_VAR 0 5
7055: PUSH
7056: LD_VAR 0 1
7060: PUSH
7061: LD_VAR 0 2
7065: ARRAY
7066: ST_TO_ADDR
// if not i then
7067: LD_VAR 0 5
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7142
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7076: LD_ADDR_VAR 0 1
7080: PUSH
7081: LD_VAR 0 1
7085: PPUSH
7086: LD_VAR 0 2
7090: PPUSH
7091: LD_VAR 0 1
7095: PUSH
7096: LD_VAR 0 3
7100: ARRAY
7101: PPUSH
7102: CALL_OW 1
7106: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7107: LD_ADDR_VAR 0 1
7111: PUSH
7112: LD_VAR 0 1
7116: PPUSH
7117: LD_VAR 0 3
7121: PPUSH
7122: LD_VAR 0 5
7126: PPUSH
7127: CALL_OW 1
7131: ST_TO_ADDR
// result := list ;
7132: LD_ADDR_VAR 0 4
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// end ;
7142: LD_VAR 0 4
7146: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7147: LD_INT 0
7149: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7150: LD_ADDR_VAR 0 5
7154: PUSH
7155: LD_VAR 0 1
7159: PPUSH
7160: CALL_OW 250
7164: PPUSH
7165: LD_VAR 0 1
7169: PPUSH
7170: CALL_OW 251
7174: PPUSH
7175: LD_VAR 0 2
7179: PPUSH
7180: LD_VAR 0 3
7184: PPUSH
7185: LD_VAR 0 4
7189: PPUSH
7190: CALL 7200 0 5
7194: ST_TO_ADDR
// end ;
7195: LD_VAR 0 5
7199: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7200: LD_INT 0
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
// if not list then
7206: LD_VAR 0 3
7210: NOT
7211: IFFALSE 7215
// exit ;
7213: GO 7603
// result := [ ] ;
7215: LD_ADDR_VAR 0 6
7219: PUSH
7220: EMPTY
7221: ST_TO_ADDR
// for i in list do
7222: LD_ADDR_VAR 0 7
7226: PUSH
7227: LD_VAR 0 3
7231: PUSH
7232: FOR_IN
7233: IFFALSE 7435
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7235: LD_ADDR_VAR 0 9
7239: PUSH
7240: LD_VAR 0 7
7244: PPUSH
7245: LD_VAR 0 1
7249: PPUSH
7250: LD_VAR 0 2
7254: PPUSH
7255: CALL_OW 297
7259: ST_TO_ADDR
// if not result then
7260: LD_VAR 0 6
7264: NOT
7265: IFFALSE 7291
// result := [ [ i , tmp ] ] else
7267: LD_ADDR_VAR 0 6
7271: PUSH
7272: LD_VAR 0 7
7276: PUSH
7277: LD_VAR 0 9
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: ST_TO_ADDR
7289: GO 7433
// begin if result [ result ] [ 2 ] < tmp then
7291: LD_VAR 0 6
7295: PUSH
7296: LD_VAR 0 6
7300: ARRAY
7301: PUSH
7302: LD_INT 2
7304: ARRAY
7305: PUSH
7306: LD_VAR 0 9
7310: LESS
7311: IFFALSE 7353
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7313: LD_ADDR_VAR 0 6
7317: PUSH
7318: LD_VAR 0 6
7322: PPUSH
7323: LD_VAR 0 6
7327: PUSH
7328: LD_INT 1
7330: PLUS
7331: PPUSH
7332: LD_VAR 0 7
7336: PUSH
7337: LD_VAR 0 9
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 2
7350: ST_TO_ADDR
7351: GO 7433
// for j = 1 to result do
7353: LD_ADDR_VAR 0 8
7357: PUSH
7358: DOUBLE
7359: LD_INT 1
7361: DEC
7362: ST_TO_ADDR
7363: LD_VAR 0 6
7367: PUSH
7368: FOR_TO
7369: IFFALSE 7431
// begin if tmp < result [ j ] [ 2 ] then
7371: LD_VAR 0 9
7375: PUSH
7376: LD_VAR 0 6
7380: PUSH
7381: LD_VAR 0 8
7385: ARRAY
7386: PUSH
7387: LD_INT 2
7389: ARRAY
7390: LESS
7391: IFFALSE 7429
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7393: LD_ADDR_VAR 0 6
7397: PUSH
7398: LD_VAR 0 6
7402: PPUSH
7403: LD_VAR 0 8
7407: PPUSH
7408: LD_VAR 0 7
7412: PUSH
7413: LD_VAR 0 9
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PPUSH
7422: CALL_OW 2
7426: ST_TO_ADDR
// break ;
7427: GO 7431
// end ; end ;
7429: GO 7368
7431: POP
7432: POP
// end ; end ;
7433: GO 7232
7435: POP
7436: POP
// if result and not asc then
7437: LD_VAR 0 6
7441: PUSH
7442: LD_VAR 0 4
7446: NOT
7447: AND
7448: IFFALSE 7523
// begin tmp := result ;
7450: LD_ADDR_VAR 0 9
7454: PUSH
7455: LD_VAR 0 6
7459: ST_TO_ADDR
// for i = tmp downto 1 do
7460: LD_ADDR_VAR 0 7
7464: PUSH
7465: DOUBLE
7466: LD_VAR 0 9
7470: INC
7471: ST_TO_ADDR
7472: LD_INT 1
7474: PUSH
7475: FOR_DOWNTO
7476: IFFALSE 7521
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7478: LD_ADDR_VAR 0 6
7482: PUSH
7483: LD_VAR 0 6
7487: PPUSH
7488: LD_VAR 0 9
7492: PUSH
7493: LD_VAR 0 7
7497: MINUS
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: PPUSH
7503: LD_VAR 0 9
7507: PUSH
7508: LD_VAR 0 7
7512: ARRAY
7513: PPUSH
7514: CALL_OW 1
7518: ST_TO_ADDR
7519: GO 7475
7521: POP
7522: POP
// end ; tmp := [ ] ;
7523: LD_ADDR_VAR 0 9
7527: PUSH
7528: EMPTY
7529: ST_TO_ADDR
// if mode then
7530: LD_VAR 0 5
7534: IFFALSE 7603
// begin for i = 1 to result do
7536: LD_ADDR_VAR 0 7
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 6
7550: PUSH
7551: FOR_TO
7552: IFFALSE 7591
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7554: LD_ADDR_VAR 0 9
7558: PUSH
7559: LD_VAR 0 9
7563: PPUSH
7564: LD_VAR 0 7
7568: PPUSH
7569: LD_VAR 0 6
7573: PUSH
7574: LD_VAR 0 7
7578: ARRAY
7579: PUSH
7580: LD_INT 1
7582: ARRAY
7583: PPUSH
7584: CALL_OW 1
7588: ST_TO_ADDR
7589: GO 7551
7591: POP
7592: POP
// result := tmp ;
7593: LD_ADDR_VAR 0 6
7597: PUSH
7598: LD_VAR 0 9
7602: ST_TO_ADDR
// end ; end ;
7603: LD_VAR 0 6
7607: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7608: LD_INT 0
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
7615: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7616: LD_ADDR_VAR 0 5
7620: PUSH
7621: LD_INT 0
7623: PUSH
7624: LD_INT 0
7626: PUSH
7627: LD_INT 0
7629: PUSH
7630: EMPTY
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: ST_TO_ADDR
// if not x or not y then
7638: LD_VAR 0 2
7642: NOT
7643: PUSH
7644: LD_VAR 0 3
7648: NOT
7649: OR
7650: IFFALSE 7654
// exit ;
7652: GO 9304
// if not range then
7654: LD_VAR 0 4
7658: NOT
7659: IFFALSE 7669
// range := 10 ;
7661: LD_ADDR_VAR 0 4
7665: PUSH
7666: LD_INT 10
7668: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7669: LD_ADDR_VAR 0 8
7673: PUSH
7674: LD_INT 81
7676: PUSH
7677: LD_VAR 0 1
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 92
7688: PUSH
7689: LD_VAR 0 2
7693: PUSH
7694: LD_VAR 0 3
7698: PUSH
7699: LD_VAR 0 4
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: LD_INT 21
7715: PUSH
7716: LD_INT 3
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 69
7736: ST_TO_ADDR
// if not tmp then
7737: LD_VAR 0 8
7741: NOT
7742: IFFALSE 7746
// exit ;
7744: GO 9304
// for i in tmp do
7746: LD_ADDR_VAR 0 6
7750: PUSH
7751: LD_VAR 0 8
7755: PUSH
7756: FOR_IN
7757: IFFALSE 9279
// begin points := [ 0 , 0 , 0 ] ;
7759: LD_ADDR_VAR 0 9
7763: PUSH
7764: LD_INT 0
7766: PUSH
7767: LD_INT 0
7769: PUSH
7770: LD_INT 0
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: ST_TO_ADDR
// bpoints := 1 ;
7778: LD_ADDR_VAR 0 10
7782: PUSH
7783: LD_INT 1
7785: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7786: LD_VAR 0 6
7790: PPUSH
7791: CALL_OW 247
7795: PUSH
7796: LD_INT 1
7798: DOUBLE
7799: EQUAL
7800: IFTRUE 7804
7802: GO 8382
7804: POP
// begin if GetClass ( i ) = 1 then
7805: LD_VAR 0 6
7809: PPUSH
7810: CALL_OW 257
7814: PUSH
7815: LD_INT 1
7817: EQUAL
7818: IFFALSE 7839
// points := [ 10 , 5 , 3 ] ;
7820: LD_ADDR_VAR 0 9
7824: PUSH
7825: LD_INT 10
7827: PUSH
7828: LD_INT 5
7830: PUSH
7831: LD_INT 3
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7839: LD_VAR 0 6
7843: PPUSH
7844: CALL_OW 257
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: LD_INT 4
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: IN
7863: IFFALSE 7884
// points := [ 3 , 2 , 1 ] ;
7865: LD_ADDR_VAR 0 9
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: LD_INT 2
7875: PUSH
7876: LD_INT 1
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7884: LD_VAR 0 6
7888: PPUSH
7889: CALL_OW 257
7893: PUSH
7894: LD_INT 5
7896: EQUAL
7897: IFFALSE 7918
// points := [ 130 , 5 , 2 ] ;
7899: LD_ADDR_VAR 0 9
7903: PUSH
7904: LD_INT 130
7906: PUSH
7907: LD_INT 5
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7918: LD_VAR 0 6
7922: PPUSH
7923: CALL_OW 257
7927: PUSH
7928: LD_INT 8
7930: EQUAL
7931: IFFALSE 7952
// points := [ 35 , 35 , 30 ] ;
7933: LD_ADDR_VAR 0 9
7937: PUSH
7938: LD_INT 35
7940: PUSH
7941: LD_INT 35
7943: PUSH
7944: LD_INT 30
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: LIST
7951: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7952: LD_VAR 0 6
7956: PPUSH
7957: CALL_OW 257
7961: PUSH
7962: LD_INT 9
7964: EQUAL
7965: IFFALSE 7986
// points := [ 20 , 55 , 40 ] ;
7967: LD_ADDR_VAR 0 9
7971: PUSH
7972: LD_INT 20
7974: PUSH
7975: LD_INT 55
7977: PUSH
7978: LD_INT 40
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7986: LD_VAR 0 6
7990: PPUSH
7991: CALL_OW 257
7995: PUSH
7996: LD_INT 12
7998: PUSH
7999: LD_INT 16
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: IN
8006: IFFALSE 8027
// points := [ 5 , 3 , 2 ] ;
8008: LD_ADDR_VAR 0 9
8012: PUSH
8013: LD_INT 5
8015: PUSH
8016: LD_INT 3
8018: PUSH
8019: LD_INT 2
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8027: LD_VAR 0 6
8031: PPUSH
8032: CALL_OW 257
8036: PUSH
8037: LD_INT 17
8039: EQUAL
8040: IFFALSE 8061
// points := [ 100 , 50 , 75 ] ;
8042: LD_ADDR_VAR 0 9
8046: PUSH
8047: LD_INT 100
8049: PUSH
8050: LD_INT 50
8052: PUSH
8053: LD_INT 75
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8061: LD_VAR 0 6
8065: PPUSH
8066: CALL_OW 257
8070: PUSH
8071: LD_INT 15
8073: EQUAL
8074: IFFALSE 8095
// points := [ 10 , 5 , 3 ] ;
8076: LD_ADDR_VAR 0 9
8080: PUSH
8081: LD_INT 10
8083: PUSH
8084: LD_INT 5
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8095: LD_VAR 0 6
8099: PPUSH
8100: CALL_OW 257
8104: PUSH
8105: LD_INT 14
8107: EQUAL
8108: IFFALSE 8129
// points := [ 10 , 0 , 0 ] ;
8110: LD_ADDR_VAR 0 9
8114: PUSH
8115: LD_INT 10
8117: PUSH
8118: LD_INT 0
8120: PUSH
8121: LD_INT 0
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8129: LD_VAR 0 6
8133: PPUSH
8134: CALL_OW 257
8138: PUSH
8139: LD_INT 11
8141: EQUAL
8142: IFFALSE 8163
// points := [ 30 , 10 , 5 ] ;
8144: LD_ADDR_VAR 0 9
8148: PUSH
8149: LD_INT 30
8151: PUSH
8152: LD_INT 10
8154: PUSH
8155: LD_INT 5
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 5
8170: PPUSH
8171: CALL_OW 321
8175: PUSH
8176: LD_INT 2
8178: EQUAL
8179: IFFALSE 8196
// bpoints := bpoints * 1.8 ;
8181: LD_ADDR_VAR 0 10
8185: PUSH
8186: LD_VAR 0 10
8190: PUSH
8191: LD_REAL  1.80000000000000E+0000
8194: MUL
8195: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8196: LD_VAR 0 6
8200: PPUSH
8201: CALL_OW 257
8205: PUSH
8206: LD_INT 1
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: LD_INT 3
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: IN
8224: PUSH
8225: LD_VAR 0 1
8229: PPUSH
8230: LD_INT 51
8232: PPUSH
8233: CALL_OW 321
8237: PUSH
8238: LD_INT 2
8240: EQUAL
8241: AND
8242: IFFALSE 8259
// bpoints := bpoints * 1.2 ;
8244: LD_ADDR_VAR 0 10
8248: PUSH
8249: LD_VAR 0 10
8253: PUSH
8254: LD_REAL  1.20000000000000E+0000
8257: MUL
8258: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 257
8268: PUSH
8269: LD_INT 5
8271: PUSH
8272: LD_INT 7
8274: PUSH
8275: LD_INT 9
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: IN
8283: PUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_INT 52
8291: PPUSH
8292: CALL_OW 321
8296: PUSH
8297: LD_INT 2
8299: EQUAL
8300: AND
8301: IFFALSE 8318
// bpoints := bpoints * 1.5 ;
8303: LD_ADDR_VAR 0 10
8307: PUSH
8308: LD_VAR 0 10
8312: PUSH
8313: LD_REAL  1.50000000000000E+0000
8316: MUL
8317: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 66
8325: PPUSH
8326: CALL_OW 321
8330: PUSH
8331: LD_INT 2
8333: EQUAL
8334: IFFALSE 8351
// bpoints := bpoints * 1.1 ;
8336: LD_ADDR_VAR 0 10
8340: PUSH
8341: LD_VAR 0 10
8345: PUSH
8346: LD_REAL  1.10000000000000E+0000
8349: MUL
8350: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8351: LD_ADDR_VAR 0 10
8355: PUSH
8356: LD_VAR 0 10
8360: PUSH
8361: LD_VAR 0 6
8365: PPUSH
8366: LD_INT 1
8368: PPUSH
8369: CALL_OW 259
8373: PUSH
8374: LD_REAL  1.15000000000000E+0000
8377: MUL
8378: MUL
8379: ST_TO_ADDR
// end ; unit_vehicle :
8380: GO 9208
8382: LD_INT 2
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 9196
8390: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8391: LD_VAR 0 6
8395: PPUSH
8396: CALL_OW 264
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 42
8406: PUSH
8407: LD_INT 24
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: IN
8415: IFFALSE 8436
// points := [ 25 , 5 , 3 ] ;
8417: LD_ADDR_VAR 0 9
8421: PUSH
8422: LD_INT 25
8424: PUSH
8425: LD_INT 5
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8436: LD_VAR 0 6
8440: PPUSH
8441: CALL_OW 264
8445: PUSH
8446: LD_INT 4
8448: PUSH
8449: LD_INT 43
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: IN
8460: IFFALSE 8481
// points := [ 40 , 15 , 5 ] ;
8462: LD_ADDR_VAR 0 9
8466: PUSH
8467: LD_INT 40
8469: PUSH
8470: LD_INT 15
8472: PUSH
8473: LD_INT 5
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8481: LD_VAR 0 6
8485: PPUSH
8486: CALL_OW 264
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: LD_INT 23
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: IN
8501: IFFALSE 8522
// points := [ 7 , 25 , 8 ] ;
8503: LD_ADDR_VAR 0 9
8507: PUSH
8508: LD_INT 7
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 8
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8522: LD_VAR 0 6
8526: PPUSH
8527: CALL_OW 264
8531: PUSH
8532: LD_INT 5
8534: PUSH
8535: LD_INT 27
8537: PUSH
8538: LD_INT 44
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: IN
8546: IFFALSE 8567
// points := [ 14 , 50 , 16 ] ;
8548: LD_ADDR_VAR 0 9
8552: PUSH
8553: LD_INT 14
8555: PUSH
8556: LD_INT 50
8558: PUSH
8559: LD_INT 16
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8567: LD_VAR 0 6
8571: PPUSH
8572: CALL_OW 264
8576: PUSH
8577: LD_INT 6
8579: PUSH
8580: LD_INT 46
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: IN
8587: IFFALSE 8608
// points := [ 32 , 120 , 70 ] ;
8589: LD_ADDR_VAR 0 9
8593: PUSH
8594: LD_INT 32
8596: PUSH
8597: LD_INT 120
8599: PUSH
8600: LD_INT 70
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: LIST
8607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8608: LD_VAR 0 6
8612: PPUSH
8613: CALL_OW 264
8617: PUSH
8618: LD_INT 7
8620: PUSH
8621: LD_INT 28
8623: PUSH
8624: LD_INT 45
8626: PUSH
8627: LD_INT 92
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: IN
8636: IFFALSE 8657
// points := [ 35 , 20 , 45 ] ;
8638: LD_ADDR_VAR 0 9
8642: PUSH
8643: LD_INT 35
8645: PUSH
8646: LD_INT 20
8648: PUSH
8649: LD_INT 45
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8657: LD_VAR 0 6
8661: PPUSH
8662: CALL_OW 264
8666: PUSH
8667: LD_INT 47
8669: PUSH
8670: EMPTY
8671: LIST
8672: IN
8673: IFFALSE 8694
// points := [ 67 , 45 , 75 ] ;
8675: LD_ADDR_VAR 0 9
8679: PUSH
8680: LD_INT 67
8682: PUSH
8683: LD_INT 45
8685: PUSH
8686: LD_INT 75
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8694: LD_VAR 0 6
8698: PPUSH
8699: CALL_OW 264
8703: PUSH
8704: LD_INT 26
8706: PUSH
8707: EMPTY
8708: LIST
8709: IN
8710: IFFALSE 8731
// points := [ 120 , 30 , 80 ] ;
8712: LD_ADDR_VAR 0 9
8716: PUSH
8717: LD_INT 120
8719: PUSH
8720: LD_INT 30
8722: PUSH
8723: LD_INT 80
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8731: LD_VAR 0 6
8735: PPUSH
8736: CALL_OW 264
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: EMPTY
8745: LIST
8746: IN
8747: IFFALSE 8768
// points := [ 40 , 1 , 1 ] ;
8749: LD_ADDR_VAR 0 9
8753: PUSH
8754: LD_INT 40
8756: PUSH
8757: LD_INT 1
8759: PUSH
8760: LD_INT 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8768: LD_VAR 0 6
8772: PPUSH
8773: CALL_OW 264
8777: PUSH
8778: LD_INT 29
8780: PUSH
8781: EMPTY
8782: LIST
8783: IN
8784: IFFALSE 8805
// points := [ 70 , 200 , 400 ] ;
8786: LD_ADDR_VAR 0 9
8790: PUSH
8791: LD_INT 70
8793: PUSH
8794: LD_INT 200
8796: PUSH
8797: LD_INT 400
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8805: LD_VAR 0 6
8809: PPUSH
8810: CALL_OW 264
8814: PUSH
8815: LD_INT 14
8817: PUSH
8818: LD_INT 53
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: IN
8825: IFFALSE 8846
// points := [ 40 , 10 , 20 ] ;
8827: LD_ADDR_VAR 0 9
8831: PUSH
8832: LD_INT 40
8834: PUSH
8835: LD_INT 10
8837: PUSH
8838: LD_INT 20
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8846: LD_VAR 0 6
8850: PPUSH
8851: CALL_OW 264
8855: PUSH
8856: LD_INT 9
8858: PUSH
8859: EMPTY
8860: LIST
8861: IN
8862: IFFALSE 8883
// points := [ 5 , 70 , 20 ] ;
8864: LD_ADDR_VAR 0 9
8868: PUSH
8869: LD_INT 5
8871: PUSH
8872: LD_INT 70
8874: PUSH
8875: LD_INT 20
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8883: LD_VAR 0 6
8887: PPUSH
8888: CALL_OW 264
8892: PUSH
8893: LD_INT 10
8895: PUSH
8896: EMPTY
8897: LIST
8898: IN
8899: IFFALSE 8920
// points := [ 35 , 110 , 70 ] ;
8901: LD_ADDR_VAR 0 9
8905: PUSH
8906: LD_INT 35
8908: PUSH
8909: LD_INT 110
8911: PUSH
8912: LD_INT 70
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8920: LD_VAR 0 6
8924: PPUSH
8925: CALL_OW 265
8929: PUSH
8930: LD_INT 25
8932: EQUAL
8933: IFFALSE 8954
// points := [ 80 , 65 , 100 ] ;
8935: LD_ADDR_VAR 0 9
8939: PUSH
8940: LD_INT 80
8942: PUSH
8943: LD_INT 65
8945: PUSH
8946: LD_INT 100
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8954: LD_VAR 0 6
8958: PPUSH
8959: CALL_OW 263
8963: PUSH
8964: LD_INT 1
8966: EQUAL
8967: IFFALSE 9002
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8969: LD_ADDR_VAR 0 10
8973: PUSH
8974: LD_VAR 0 10
8978: PUSH
8979: LD_VAR 0 6
8983: PPUSH
8984: CALL_OW 311
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: CALL_OW 259
8996: PUSH
8997: LD_INT 4
8999: MUL
9000: MUL
9001: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9002: LD_VAR 0 6
9006: PPUSH
9007: CALL_OW 263
9011: PUSH
9012: LD_INT 2
9014: EQUAL
9015: IFFALSE 9066
// begin j := IsControledBy ( i ) ;
9017: LD_ADDR_VAR 0 7
9021: PUSH
9022: LD_VAR 0 6
9026: PPUSH
9027: CALL_OW 312
9031: ST_TO_ADDR
// if j then
9032: LD_VAR 0 7
9036: IFFALSE 9066
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9038: LD_ADDR_VAR 0 10
9042: PUSH
9043: LD_VAR 0 10
9047: PUSH
9048: LD_VAR 0 7
9052: PPUSH
9053: LD_INT 3
9055: PPUSH
9056: CALL_OW 259
9060: PUSH
9061: LD_INT 3
9063: MUL
9064: MUL
9065: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9066: LD_VAR 0 6
9070: PPUSH
9071: CALL_OW 264
9075: PUSH
9076: LD_INT 5
9078: PUSH
9079: LD_INT 6
9081: PUSH
9082: LD_INT 46
9084: PUSH
9085: LD_INT 44
9087: PUSH
9088: LD_INT 47
9090: PUSH
9091: LD_INT 45
9093: PUSH
9094: LD_INT 28
9096: PUSH
9097: LD_INT 7
9099: PUSH
9100: LD_INT 27
9102: PUSH
9103: LD_INT 29
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: IN
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_INT 52
9126: PPUSH
9127: CALL_OW 321
9131: PUSH
9132: LD_INT 2
9134: EQUAL
9135: AND
9136: IFFALSE 9153
// bpoints := bpoints * 1.2 ;
9138: LD_ADDR_VAR 0 10
9142: PUSH
9143: LD_VAR 0 10
9147: PUSH
9148: LD_REAL  1.20000000000000E+0000
9151: MUL
9152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9153: LD_VAR 0 6
9157: PPUSH
9158: CALL_OW 264
9162: PUSH
9163: LD_INT 6
9165: PUSH
9166: LD_INT 46
9168: PUSH
9169: LD_INT 47
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: IN
9177: IFFALSE 9194
// bpoints := bpoints * 1.2 ;
9179: LD_ADDR_VAR 0 10
9183: PUSH
9184: LD_VAR 0 10
9188: PUSH
9189: LD_REAL  1.20000000000000E+0000
9192: MUL
9193: ST_TO_ADDR
// end ; unit_building :
9194: GO 9208
9196: LD_INT 3
9198: DOUBLE
9199: EQUAL
9200: IFTRUE 9204
9202: GO 9207
9204: POP
// ; end ;
9205: GO 9208
9207: POP
// for j = 1 to 3 do
9208: LD_ADDR_VAR 0 7
9212: PUSH
9213: DOUBLE
9214: LD_INT 1
9216: DEC
9217: ST_TO_ADDR
9218: LD_INT 3
9220: PUSH
9221: FOR_TO
9222: IFFALSE 9275
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9224: LD_ADDR_VAR 0 5
9228: PUSH
9229: LD_VAR 0 5
9233: PPUSH
9234: LD_VAR 0 7
9238: PPUSH
9239: LD_VAR 0 5
9243: PUSH
9244: LD_VAR 0 7
9248: ARRAY
9249: PUSH
9250: LD_VAR 0 9
9254: PUSH
9255: LD_VAR 0 7
9259: ARRAY
9260: PUSH
9261: LD_VAR 0 10
9265: MUL
9266: PLUS
9267: PPUSH
9268: CALL_OW 1
9272: ST_TO_ADDR
9273: GO 9221
9275: POP
9276: POP
// end ;
9277: GO 7756
9279: POP
9280: POP
// result := Replace ( result , 4 , tmp ) ;
9281: LD_ADDR_VAR 0 5
9285: PUSH
9286: LD_VAR 0 5
9290: PPUSH
9291: LD_INT 4
9293: PPUSH
9294: LD_VAR 0 8
9298: PPUSH
9299: CALL_OW 1
9303: ST_TO_ADDR
// end ;
9304: LD_VAR 0 5
9308: RET
// export function DangerAtRange ( unit , range ) ; begin
9309: LD_INT 0
9311: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9312: LD_ADDR_VAR 0 3
9316: PUSH
9317: LD_VAR 0 1
9321: PPUSH
9322: CALL_OW 255
9326: PPUSH
9327: LD_VAR 0 1
9331: PPUSH
9332: CALL_OW 250
9336: PPUSH
9337: LD_VAR 0 1
9341: PPUSH
9342: CALL_OW 251
9346: PPUSH
9347: LD_VAR 0 2
9351: PPUSH
9352: CALL 7608 0 4
9356: ST_TO_ADDR
// end ;
9357: LD_VAR 0 3
9361: RET
// export function DangerInArea ( side , area ) ; begin
9362: LD_INT 0
9364: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: LD_INT 81
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PPUSH
9387: CALL_OW 70
9391: ST_TO_ADDR
// end ;
9392: LD_VAR 0 3
9396: RET
// export function IsExtension ( b ) ; begin
9397: LD_INT 0
9399: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_VAR 0 1
9409: PUSH
9410: LD_INT 23
9412: PUSH
9413: LD_INT 20
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_INT 17
9421: PUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 21
9427: PUSH
9428: LD_INT 19
9430: PUSH
9431: LD_INT 16
9433: PUSH
9434: LD_INT 25
9436: PUSH
9437: LD_INT 18
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: IN
9452: ST_TO_ADDR
// end ;
9453: LD_VAR 0 2
9457: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9458: LD_INT 0
9460: PPUSH
9461: PPUSH
9462: PPUSH
// result := [ ] ;
9463: LD_ADDR_VAR 0 4
9467: PUSH
9468: EMPTY
9469: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9470: LD_ADDR_VAR 0 5
9474: PUSH
9475: LD_VAR 0 2
9479: PPUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 70
9494: ST_TO_ADDR
// if not tmp then
9495: LD_VAR 0 5
9499: NOT
9500: IFFALSE 9504
// exit ;
9502: GO 9568
// if checkLink then
9504: LD_VAR 0 3
9508: IFFALSE 9558
// begin for i in tmp do
9510: LD_ADDR_VAR 0 6
9514: PUSH
9515: LD_VAR 0 5
9519: PUSH
9520: FOR_IN
9521: IFFALSE 9556
// if GetBase ( i ) <> base then
9523: LD_VAR 0 6
9527: PPUSH
9528: CALL_OW 274
9532: PUSH
9533: LD_VAR 0 1
9537: NONEQUAL
9538: IFFALSE 9554
// ComLinkToBase ( base , i ) ;
9540: LD_VAR 0 1
9544: PPUSH
9545: LD_VAR 0 6
9549: PPUSH
9550: CALL_OW 169
9554: GO 9520
9556: POP
9557: POP
// end ; result := tmp ;
9558: LD_ADDR_VAR 0 4
9562: PUSH
9563: LD_VAR 0 5
9567: ST_TO_ADDR
// end ;
9568: LD_VAR 0 4
9572: RET
// export function ComComplete ( units , b ) ; var i ; begin
9573: LD_INT 0
9575: PPUSH
9576: PPUSH
// if not units then
9577: LD_VAR 0 1
9581: NOT
9582: IFFALSE 9586
// exit ;
9584: GO 9676
// for i in units do
9586: LD_ADDR_VAR 0 4
9590: PUSH
9591: LD_VAR 0 1
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9674
// if BuildingStatus ( b ) = bs_build then
9599: LD_VAR 0 2
9603: PPUSH
9604: CALL_OW 461
9608: PUSH
9609: LD_INT 1
9611: EQUAL
9612: IFFALSE 9672
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9614: LD_VAR 0 4
9618: PPUSH
9619: LD_STRING h
9621: PUSH
9622: LD_VAR 0 2
9626: PPUSH
9627: CALL_OW 250
9631: PUSH
9632: LD_VAR 0 2
9636: PPUSH
9637: CALL_OW 251
9641: PUSH
9642: LD_VAR 0 2
9646: PUSH
9647: LD_INT 0
9649: PUSH
9650: LD_INT 0
9652: PUSH
9653: LD_INT 0
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: PPUSH
9668: CALL_OW 446
9672: GO 9596
9674: POP
9675: POP
// end ;
9676: LD_VAR 0 3
9680: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9681: LD_INT 0
9683: PPUSH
9684: PPUSH
9685: PPUSH
9686: PPUSH
9687: PPUSH
9688: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9689: LD_VAR 0 1
9693: NOT
9694: PUSH
9695: LD_VAR 0 1
9699: PPUSH
9700: CALL_OW 263
9704: PUSH
9705: LD_INT 2
9707: NONEQUAL
9708: OR
9709: IFFALSE 9713
// exit ;
9711: GO 10029
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9713: LD_ADDR_VAR 0 6
9717: PUSH
9718: LD_INT 22
9720: PUSH
9721: LD_VAR 0 1
9725: PPUSH
9726: CALL_OW 255
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 36
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 34
9750: PUSH
9751: LD_INT 31
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 6
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 10029
// result := [ ] ;
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: EMPTY
9787: ST_TO_ADDR
// for i in tmp do
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: LD_VAR 0 6
9797: PUSH
9798: FOR_IN
9799: IFFALSE 9870
// begin t := UnitsInside ( i ) ;
9801: LD_ADDR_VAR 0 4
9805: PUSH
9806: LD_VAR 0 3
9810: PPUSH
9811: CALL_OW 313
9815: ST_TO_ADDR
// if t then
9816: LD_VAR 0 4
9820: IFFALSE 9868
// for j in t do
9822: LD_ADDR_VAR 0 7
9826: PUSH
9827: LD_VAR 0 4
9831: PUSH
9832: FOR_IN
9833: IFFALSE 9866
// result := Replace ( result , result + 1 , j ) ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: LD_VAR 0 2
9844: PPUSH
9845: LD_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: PLUS
9853: PPUSH
9854: LD_VAR 0 7
9858: PPUSH
9859: CALL_OW 1
9863: ST_TO_ADDR
9864: GO 9832
9866: POP
9867: POP
// end ;
9868: GO 9798
9870: POP
9871: POP
// if not result then
9872: LD_VAR 0 2
9876: NOT
9877: IFFALSE 9881
// exit ;
9879: GO 10029
// mech := result [ 1 ] ;
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: LD_VAR 0 2
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: ST_TO_ADDR
// if result > 1 then
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 1
9902: GREATER
9903: IFFALSE 10015
// begin for i = 2 to result do
9905: LD_ADDR_VAR 0 3
9909: PUSH
9910: DOUBLE
9911: LD_INT 2
9913: DEC
9914: ST_TO_ADDR
9915: LD_VAR 0 2
9919: PUSH
9920: FOR_TO
9921: IFFALSE 10013
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9923: LD_ADDR_VAR 0 4
9927: PUSH
9928: LD_VAR 0 2
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: LD_INT 3
9941: PPUSH
9942: CALL_OW 259
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_VAR 0 3
9956: ARRAY
9957: PPUSH
9958: CALL_OW 432
9962: MINUS
9963: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9964: LD_VAR 0 4
9968: PUSH
9969: LD_VAR 0 5
9973: PPUSH
9974: LD_INT 3
9976: PPUSH
9977: CALL_OW 259
9981: PUSH
9982: LD_VAR 0 5
9986: PPUSH
9987: CALL_OW 432
9991: MINUS
9992: GREATEREQUAL
9993: IFFALSE 10011
// mech := result [ i ] ;
9995: LD_ADDR_VAR 0 5
9999: PUSH
10000: LD_VAR 0 2
10004: PUSH
10005: LD_VAR 0 3
10009: ARRAY
10010: ST_TO_ADDR
// end ;
10011: GO 9920
10013: POP
10014: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10015: LD_VAR 0 1
10019: PPUSH
10020: LD_VAR 0 5
10024: PPUSH
10025: CALL_OW 135
// end ;
10029: LD_VAR 0 2
10033: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
10039: PPUSH
10040: PPUSH
10041: PPUSH
10042: PPUSH
10043: PPUSH
10044: PPUSH
10045: PPUSH
10046: PPUSH
10047: PPUSH
10048: PPUSH
// result := [ ] ;
10049: LD_ADDR_VAR 0 7
10053: PUSH
10054: EMPTY
10055: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 266
10065: PUSH
10066: LD_INT 0
10068: PUSH
10069: LD_INT 1
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: IN
10076: NOT
10077: IFFALSE 10081
// exit ;
10079: GO 11715
// if name then
10081: LD_VAR 0 3
10085: IFFALSE 10101
// SetBName ( base_dep , name ) ;
10087: LD_VAR 0 1
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: CALL_OW 500
// base := GetBase ( base_dep ) ;
10101: LD_ADDR_VAR 0 15
10105: PUSH
10106: LD_VAR 0 1
10110: PPUSH
10111: CALL_OW 274
10115: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10116: LD_ADDR_VAR 0 16
10120: PUSH
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 255
10130: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10131: LD_ADDR_VAR 0 17
10135: PUSH
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 248
10145: ST_TO_ADDR
// if sources then
10146: LD_VAR 0 5
10150: IFFALSE 10197
// for i = 1 to 3 do
10152: LD_ADDR_VAR 0 8
10156: PUSH
10157: DOUBLE
10158: LD_INT 1
10160: DEC
10161: ST_TO_ADDR
10162: LD_INT 3
10164: PUSH
10165: FOR_TO
10166: IFFALSE 10195
// AddResourceType ( base , i , sources [ i ] ) ;
10168: LD_VAR 0 15
10172: PPUSH
10173: LD_VAR 0 8
10177: PPUSH
10178: LD_VAR 0 5
10182: PUSH
10183: LD_VAR 0 8
10187: ARRAY
10188: PPUSH
10189: CALL_OW 276
10193: GO 10165
10195: POP
10196: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10197: LD_ADDR_VAR 0 18
10201: PUSH
10202: LD_VAR 0 15
10206: PPUSH
10207: LD_VAR 0 2
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL 9458 0 3
10219: ST_TO_ADDR
// InitHc ;
10220: CALL_OW 19
// InitUc ;
10224: CALL_OW 18
// uc_side := side ;
10228: LD_ADDR_OWVAR 20
10232: PUSH
10233: LD_VAR 0 16
10237: ST_TO_ADDR
// uc_nation := nation ;
10238: LD_ADDR_OWVAR 21
10242: PUSH
10243: LD_VAR 0 17
10247: ST_TO_ADDR
// if buildings then
10248: LD_VAR 0 18
10252: IFFALSE 11574
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10254: LD_ADDR_VAR 0 19
10258: PUSH
10259: LD_VAR 0 18
10263: PPUSH
10264: LD_INT 2
10266: PUSH
10267: LD_INT 30
10269: PUSH
10270: LD_INT 29
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 30
10279: PUSH
10280: LD_INT 30
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 72
10296: ST_TO_ADDR
// if tmp then
10297: LD_VAR 0 19
10301: IFFALSE 10349
// for i in tmp do
10303: LD_ADDR_VAR 0 8
10307: PUSH
10308: LD_VAR 0 19
10312: PUSH
10313: FOR_IN
10314: IFFALSE 10347
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10316: LD_VAR 0 8
10320: PPUSH
10321: CALL_OW 250
10325: PPUSH
10326: LD_VAR 0 8
10330: PPUSH
10331: CALL_OW 251
10335: PPUSH
10336: LD_VAR 0 16
10340: PPUSH
10341: CALL_OW 441
10345: GO 10313
10347: POP
10348: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10349: LD_VAR 0 18
10353: PPUSH
10354: LD_INT 2
10356: PUSH
10357: LD_INT 30
10359: PUSH
10360: LD_INT 32
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 30
10369: PUSH
10370: LD_INT 33
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 72
10386: IFFALSE 10474
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10388: LD_ADDR_VAR 0 8
10392: PUSH
10393: LD_VAR 0 18
10397: PPUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 30
10403: PUSH
10404: LD_INT 32
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 30
10413: PUSH
10414: LD_INT 33
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 72
10430: PUSH
10431: FOR_IN
10432: IFFALSE 10472
// begin if not GetBWeapon ( i ) then
10434: LD_VAR 0 8
10438: PPUSH
10439: CALL_OW 269
10443: NOT
10444: IFFALSE 10470
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10446: LD_VAR 0 8
10450: PPUSH
10451: LD_VAR 0 8
10455: PPUSH
10456: LD_VAR 0 2
10460: PPUSH
10461: CALL 11720 0 2
10465: PPUSH
10466: CALL_OW 431
// end ;
10470: GO 10431
10472: POP
10473: POP
// end ; for i = 1 to personel do
10474: LD_ADDR_VAR 0 8
10478: PUSH
10479: DOUBLE
10480: LD_INT 1
10482: DEC
10483: ST_TO_ADDR
10484: LD_VAR 0 6
10488: PUSH
10489: FOR_TO
10490: IFFALSE 11554
// begin if i > 4 then
10492: LD_VAR 0 8
10496: PUSH
10497: LD_INT 4
10499: GREATER
10500: IFFALSE 10504
// break ;
10502: GO 11554
// case i of 1 :
10504: LD_VAR 0 8
10508: PUSH
10509: LD_INT 1
10511: DOUBLE
10512: EQUAL
10513: IFTRUE 10517
10515: GO 10597
10517: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10518: LD_ADDR_VAR 0 12
10522: PUSH
10523: LD_VAR 0 18
10527: PPUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 16
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 58
10542: PUSH
10543: EMPTY
10544: LIST
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: LD_INT 32
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 30
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 30
10571: PUSH
10572: LD_INT 5
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 72
10594: ST_TO_ADDR
10595: GO 10819
10597: LD_INT 2
10599: DOUBLE
10600: EQUAL
10601: IFTRUE 10605
10603: GO 10667
10605: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10606: LD_ADDR_VAR 0 12
10610: PUSH
10611: LD_VAR 0 18
10615: PPUSH
10616: LD_INT 22
10618: PUSH
10619: LD_VAR 0 16
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: LD_INT 30
10633: PUSH
10634: LD_INT 0
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 30
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 72
10664: ST_TO_ADDR
10665: GO 10819
10667: LD_INT 3
10669: DOUBLE
10670: EQUAL
10671: IFTRUE 10675
10673: GO 10737
10675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10676: LD_ADDR_VAR 0 12
10680: PUSH
10681: LD_VAR 0 18
10685: PPUSH
10686: LD_INT 22
10688: PUSH
10689: LD_VAR 0 16
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 30
10703: PUSH
10704: LD_INT 2
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 30
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 72
10734: ST_TO_ADDR
10735: GO 10819
10737: LD_INT 4
10739: DOUBLE
10740: EQUAL
10741: IFTRUE 10745
10743: GO 10818
10745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10746: LD_ADDR_VAR 0 12
10750: PUSH
10751: LD_VAR 0 18
10755: PPUSH
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 16
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 30
10773: PUSH
10774: LD_INT 6
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 30
10783: PUSH
10784: LD_INT 7
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 30
10793: PUSH
10794: LD_INT 8
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 72
10815: ST_TO_ADDR
10816: GO 10819
10818: POP
// if i = 1 then
10819: LD_VAR 0 8
10823: PUSH
10824: LD_INT 1
10826: EQUAL
10827: IFFALSE 10938
// begin tmp := [ ] ;
10829: LD_ADDR_VAR 0 19
10833: PUSH
10834: EMPTY
10835: ST_TO_ADDR
// for j in f do
10836: LD_ADDR_VAR 0 9
10840: PUSH
10841: LD_VAR 0 12
10845: PUSH
10846: FOR_IN
10847: IFFALSE 10920
// if GetBType ( j ) = b_bunker then
10849: LD_VAR 0 9
10853: PPUSH
10854: CALL_OW 266
10858: PUSH
10859: LD_INT 32
10861: EQUAL
10862: IFFALSE 10889
// tmp := Insert ( tmp , 1 , j ) else
10864: LD_ADDR_VAR 0 19
10868: PUSH
10869: LD_VAR 0 19
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: LD_VAR 0 9
10881: PPUSH
10882: CALL_OW 2
10886: ST_TO_ADDR
10887: GO 10918
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10889: LD_ADDR_VAR 0 19
10893: PUSH
10894: LD_VAR 0 19
10898: PPUSH
10899: LD_VAR 0 19
10903: PUSH
10904: LD_INT 1
10906: PLUS
10907: PPUSH
10908: LD_VAR 0 9
10912: PPUSH
10913: CALL_OW 2
10917: ST_TO_ADDR
10918: GO 10846
10920: POP
10921: POP
// if tmp then
10922: LD_VAR 0 19
10926: IFFALSE 10938
// f := tmp ;
10928: LD_ADDR_VAR 0 12
10932: PUSH
10933: LD_VAR 0 19
10937: ST_TO_ADDR
// end ; x := personel [ i ] ;
10938: LD_ADDR_VAR 0 13
10942: PUSH
10943: LD_VAR 0 6
10947: PUSH
10948: LD_VAR 0 8
10952: ARRAY
10953: ST_TO_ADDR
// if x = - 1 then
10954: LD_VAR 0 13
10958: PUSH
10959: LD_INT 1
10961: NEG
10962: EQUAL
10963: IFFALSE 11172
// begin for j in f do
10965: LD_ADDR_VAR 0 9
10969: PUSH
10970: LD_VAR 0 12
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11168
// repeat InitHc ;
10978: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10982: LD_VAR 0 9
10986: PPUSH
10987: CALL_OW 266
10991: PUSH
10992: LD_INT 5
10994: EQUAL
10995: IFFALSE 11065
// begin if UnitsInside ( j ) < 3 then
10997: LD_VAR 0 9
11001: PPUSH
11002: CALL_OW 313
11006: PUSH
11007: LD_INT 3
11009: LESS
11010: IFFALSE 11046
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11012: LD_INT 0
11014: PPUSH
11015: LD_INT 5
11017: PUSH
11018: LD_INT 8
11020: PUSH
11021: LD_INT 9
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: LD_VAR 0 17
11033: ARRAY
11034: PPUSH
11035: LD_VAR 0 4
11039: PPUSH
11040: CALL_OW 380
11044: GO 11063
// PrepareHuman ( false , i , skill ) ;
11046: LD_INT 0
11048: PPUSH
11049: LD_VAR 0 8
11053: PPUSH
11054: LD_VAR 0 4
11058: PPUSH
11059: CALL_OW 380
// end else
11063: GO 11082
// PrepareHuman ( false , i , skill ) ;
11065: LD_INT 0
11067: PPUSH
11068: LD_VAR 0 8
11072: PPUSH
11073: LD_VAR 0 4
11077: PPUSH
11078: CALL_OW 380
// un := CreateHuman ;
11082: LD_ADDR_VAR 0 14
11086: PUSH
11087: CALL_OW 44
11091: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11092: LD_ADDR_VAR 0 7
11096: PUSH
11097: LD_VAR 0 7
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_VAR 0 14
11109: PPUSH
11110: CALL_OW 2
11114: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11115: LD_VAR 0 14
11119: PPUSH
11120: LD_VAR 0 9
11124: PPUSH
11125: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11129: LD_VAR 0 9
11133: PPUSH
11134: CALL_OW 313
11138: PUSH
11139: LD_INT 6
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 9
11147: PPUSH
11148: CALL_OW 266
11152: PUSH
11153: LD_INT 32
11155: PUSH
11156: LD_INT 31
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: IN
11163: OR
11164: IFFALSE 10978
11166: GO 10975
11168: POP
11169: POP
// end else
11170: GO 11552
// for j = 1 to x do
11172: LD_ADDR_VAR 0 9
11176: PUSH
11177: DOUBLE
11178: LD_INT 1
11180: DEC
11181: ST_TO_ADDR
11182: LD_VAR 0 13
11186: PUSH
11187: FOR_TO
11188: IFFALSE 11550
// begin InitHc ;
11190: CALL_OW 19
// if not f then
11194: LD_VAR 0 12
11198: NOT
11199: IFFALSE 11288
// begin PrepareHuman ( false , i , skill ) ;
11201: LD_INT 0
11203: PPUSH
11204: LD_VAR 0 8
11208: PPUSH
11209: LD_VAR 0 4
11213: PPUSH
11214: CALL_OW 380
// un := CreateHuman ;
11218: LD_ADDR_VAR 0 14
11222: PUSH
11223: CALL_OW 44
11227: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11228: LD_ADDR_VAR 0 7
11232: PUSH
11233: LD_VAR 0 7
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: LD_VAR 0 14
11245: PPUSH
11246: CALL_OW 2
11250: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11251: LD_VAR 0 14
11255: PPUSH
11256: LD_VAR 0 1
11260: PPUSH
11261: CALL_OW 250
11265: PPUSH
11266: LD_VAR 0 1
11270: PPUSH
11271: CALL_OW 251
11275: PPUSH
11276: LD_INT 10
11278: PPUSH
11279: LD_INT 0
11281: PPUSH
11282: CALL_OW 50
// continue ;
11286: GO 11187
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11288: LD_VAR 0 12
11292: PUSH
11293: LD_INT 1
11295: ARRAY
11296: PPUSH
11297: CALL_OW 313
11301: PUSH
11302: LD_VAR 0 12
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PPUSH
11311: CALL_OW 266
11315: PUSH
11316: LD_INT 32
11318: PUSH
11319: LD_INT 31
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: IN
11326: AND
11327: PUSH
11328: LD_VAR 0 12
11332: PUSH
11333: LD_INT 1
11335: ARRAY
11336: PPUSH
11337: CALL_OW 313
11341: PUSH
11342: LD_INT 6
11344: EQUAL
11345: OR
11346: IFFALSE 11366
// f := Delete ( f , 1 ) ;
11348: LD_ADDR_VAR 0 12
11352: PUSH
11353: LD_VAR 0 12
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 3
11365: ST_TO_ADDR
// if not f then
11366: LD_VAR 0 12
11370: NOT
11371: IFFALSE 11389
// begin x := x + 2 ;
11373: LD_ADDR_VAR 0 13
11377: PUSH
11378: LD_VAR 0 13
11382: PUSH
11383: LD_INT 2
11385: PLUS
11386: ST_TO_ADDR
// continue ;
11387: GO 11187
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11389: LD_VAR 0 12
11393: PUSH
11394: LD_INT 1
11396: ARRAY
11397: PPUSH
11398: CALL_OW 266
11402: PUSH
11403: LD_INT 5
11405: EQUAL
11406: IFFALSE 11480
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11408: LD_VAR 0 12
11412: PUSH
11413: LD_INT 1
11415: ARRAY
11416: PPUSH
11417: CALL_OW 313
11421: PUSH
11422: LD_INT 3
11424: LESS
11425: IFFALSE 11461
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11427: LD_INT 0
11429: PPUSH
11430: LD_INT 5
11432: PUSH
11433: LD_INT 8
11435: PUSH
11436: LD_INT 9
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_VAR 0 17
11448: ARRAY
11449: PPUSH
11450: LD_VAR 0 4
11454: PPUSH
11455: CALL_OW 380
11459: GO 11478
// PrepareHuman ( false , i , skill ) ;
11461: LD_INT 0
11463: PPUSH
11464: LD_VAR 0 8
11468: PPUSH
11469: LD_VAR 0 4
11473: PPUSH
11474: CALL_OW 380
// end else
11478: GO 11497
// PrepareHuman ( false , i , skill ) ;
11480: LD_INT 0
11482: PPUSH
11483: LD_VAR 0 8
11487: PPUSH
11488: LD_VAR 0 4
11492: PPUSH
11493: CALL_OW 380
// un := CreateHuman ;
11497: LD_ADDR_VAR 0 14
11501: PUSH
11502: CALL_OW 44
11506: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11507: LD_ADDR_VAR 0 7
11511: PUSH
11512: LD_VAR 0 7
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: LD_VAR 0 14
11524: PPUSH
11525: CALL_OW 2
11529: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11530: LD_VAR 0 14
11534: PPUSH
11535: LD_VAR 0 12
11539: PUSH
11540: LD_INT 1
11542: ARRAY
11543: PPUSH
11544: CALL_OW 52
// end ;
11548: GO 11187
11550: POP
11551: POP
// end ;
11552: GO 10489
11554: POP
11555: POP
// result := result ^ buildings ;
11556: LD_ADDR_VAR 0 7
11560: PUSH
11561: LD_VAR 0 7
11565: PUSH
11566: LD_VAR 0 18
11570: ADD
11571: ST_TO_ADDR
// end else
11572: GO 11715
// begin for i = 1 to personel do
11574: LD_ADDR_VAR 0 8
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_VAR 0 6
11588: PUSH
11589: FOR_TO
11590: IFFALSE 11713
// begin if i > 4 then
11592: LD_VAR 0 8
11596: PUSH
11597: LD_INT 4
11599: GREATER
11600: IFFALSE 11604
// break ;
11602: GO 11713
// x := personel [ i ] ;
11604: LD_ADDR_VAR 0 13
11608: PUSH
11609: LD_VAR 0 6
11613: PUSH
11614: LD_VAR 0 8
11618: ARRAY
11619: ST_TO_ADDR
// if x = - 1 then
11620: LD_VAR 0 13
11624: PUSH
11625: LD_INT 1
11627: NEG
11628: EQUAL
11629: IFFALSE 11633
// continue ;
11631: GO 11589
// PrepareHuman ( false , i , skill ) ;
11633: LD_INT 0
11635: PPUSH
11636: LD_VAR 0 8
11640: PPUSH
11641: LD_VAR 0 4
11645: PPUSH
11646: CALL_OW 380
// un := CreateHuman ;
11650: LD_ADDR_VAR 0 14
11654: PUSH
11655: CALL_OW 44
11659: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11660: LD_VAR 0 14
11664: PPUSH
11665: LD_VAR 0 1
11669: PPUSH
11670: CALL_OW 250
11674: PPUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 251
11684: PPUSH
11685: LD_INT 10
11687: PPUSH
11688: LD_INT 0
11690: PPUSH
11691: CALL_OW 50
// result := result ^ un ;
11695: LD_ADDR_VAR 0 7
11699: PUSH
11700: LD_VAR 0 7
11704: PUSH
11705: LD_VAR 0 14
11709: ADD
11710: ST_TO_ADDR
// end ;
11711: GO 11589
11713: POP
11714: POP
// end ; end ;
11715: LD_VAR 0 7
11719: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11720: LD_INT 0
11722: PPUSH
11723: PPUSH
11724: PPUSH
11725: PPUSH
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
// result := false ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11746: LD_VAR 0 1
11750: NOT
11751: PUSH
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL_OW 266
11761: PUSH
11762: LD_INT 32
11764: PUSH
11765: LD_INT 33
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: IN
11772: NOT
11773: OR
11774: IFFALSE 11778
// exit ;
11776: GO 12887
// nat := GetNation ( tower ) ;
11778: LD_ADDR_VAR 0 12
11782: PUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 248
11792: ST_TO_ADDR
// side := GetSide ( tower ) ;
11793: LD_ADDR_VAR 0 16
11797: PUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: CALL_OW 255
11807: ST_TO_ADDR
// x := GetX ( tower ) ;
11808: LD_ADDR_VAR 0 10
11812: PUSH
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 250
11822: ST_TO_ADDR
// y := GetY ( tower ) ;
11823: LD_ADDR_VAR 0 11
11827: PUSH
11828: LD_VAR 0 1
11832: PPUSH
11833: CALL_OW 251
11837: ST_TO_ADDR
// if not x or not y then
11838: LD_VAR 0 10
11842: NOT
11843: PUSH
11844: LD_VAR 0 11
11848: NOT
11849: OR
11850: IFFALSE 11854
// exit ;
11852: GO 12887
// weapon := 0 ;
11854: LD_ADDR_VAR 0 18
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// fac_list := [ ] ;
11862: LD_ADDR_VAR 0 17
11866: PUSH
11867: EMPTY
11868: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11869: LD_ADDR_VAR 0 6
11873: PUSH
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 274
11883: PPUSH
11884: LD_VAR 0 2
11888: PPUSH
11889: LD_INT 0
11891: PPUSH
11892: CALL 9458 0 3
11896: PPUSH
11897: LD_INT 30
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 72
11911: ST_TO_ADDR
// if not factories then
11912: LD_VAR 0 6
11916: NOT
11917: IFFALSE 11921
// exit ;
11919: GO 12887
// for i in factories do
11921: LD_ADDR_VAR 0 8
11925: PUSH
11926: LD_VAR 0 6
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11957
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11934: LD_ADDR_VAR 0 17
11938: PUSH
11939: LD_VAR 0 17
11943: PUSH
11944: LD_VAR 0 8
11948: PPUSH
11949: CALL_OW 478
11953: UNION
11954: ST_TO_ADDR
11955: GO 11931
11957: POP
11958: POP
// if not fac_list then
11959: LD_VAR 0 17
11963: NOT
11964: IFFALSE 11968
// exit ;
11966: GO 12887
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11968: LD_ADDR_VAR 0 5
11972: PUSH
11973: LD_INT 4
11975: PUSH
11976: LD_INT 5
11978: PUSH
11979: LD_INT 9
11981: PUSH
11982: LD_INT 10
11984: PUSH
11985: LD_INT 6
11987: PUSH
11988: LD_INT 7
11990: PUSH
11991: LD_INT 11
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 27
12005: PUSH
12006: LD_INT 28
12008: PUSH
12009: LD_INT 26
12011: PUSH
12012: LD_INT 30
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 43
12023: PUSH
12024: LD_INT 44
12026: PUSH
12027: LD_INT 46
12029: PUSH
12030: LD_INT 45
12032: PUSH
12033: LD_INT 47
12035: PUSH
12036: LD_INT 49
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: LD_VAR 0 12
12056: ARRAY
12057: ST_TO_ADDR
// list := list isect fac_list ;
12058: LD_ADDR_VAR 0 5
12062: PUSH
12063: LD_VAR 0 5
12067: PUSH
12068: LD_VAR 0 17
12072: ISECT
12073: ST_TO_ADDR
// if not list then
12074: LD_VAR 0 5
12078: NOT
12079: IFFALSE 12083
// exit ;
12081: GO 12887
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12083: LD_VAR 0 12
12087: PUSH
12088: LD_INT 3
12090: EQUAL
12091: PUSH
12092: LD_INT 49
12094: PUSH
12095: LD_VAR 0 5
12099: IN
12100: AND
12101: PUSH
12102: LD_INT 31
12104: PPUSH
12105: LD_VAR 0 16
12109: PPUSH
12110: CALL_OW 321
12114: PUSH
12115: LD_INT 2
12117: EQUAL
12118: AND
12119: IFFALSE 12179
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12121: LD_INT 22
12123: PUSH
12124: LD_VAR 0 16
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 35
12135: PUSH
12136: LD_INT 49
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 91
12145: PUSH
12146: LD_VAR 0 1
12150: PUSH
12151: LD_INT 10
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: NOT
12169: IFFALSE 12179
// weapon := ru_time_lapser ;
12171: LD_ADDR_VAR 0 18
12175: PUSH
12176: LD_INT 49
12178: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12179: LD_VAR 0 12
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: LD_INT 2
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: IN
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_VAR 0 5
12202: IN
12203: PUSH
12204: LD_INT 30
12206: PUSH
12207: LD_VAR 0 5
12211: IN
12212: OR
12213: AND
12214: PUSH
12215: LD_INT 6
12217: PPUSH
12218: LD_VAR 0 16
12222: PPUSH
12223: CALL_OW 321
12227: PUSH
12228: LD_INT 2
12230: EQUAL
12231: AND
12232: IFFALSE 12397
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12234: LD_INT 22
12236: PUSH
12237: LD_VAR 0 16
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: LD_INT 35
12251: PUSH
12252: LD_INT 11
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 35
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 91
12276: PUSH
12277: LD_VAR 0 1
12281: PUSH
12282: LD_INT 18
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: NOT
12300: PUSH
12301: LD_INT 22
12303: PUSH
12304: LD_VAR 0 16
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: LD_INT 30
12318: PUSH
12319: LD_INT 32
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 30
12328: PUSH
12329: LD_INT 33
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 91
12343: PUSH
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 12
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 2
12372: GREATER
12373: AND
12374: IFFALSE 12397
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12376: LD_ADDR_VAR 0 18
12380: PUSH
12381: LD_INT 11
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_VAR 0 12
12395: ARRAY
12396: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12397: LD_VAR 0 18
12401: NOT
12402: PUSH
12403: LD_INT 40
12405: PPUSH
12406: LD_VAR 0 16
12410: PPUSH
12411: CALL_OW 321
12415: PUSH
12416: LD_INT 2
12418: EQUAL
12419: AND
12420: PUSH
12421: LD_INT 7
12423: PUSH
12424: LD_VAR 0 5
12428: IN
12429: PUSH
12430: LD_INT 28
12432: PUSH
12433: LD_VAR 0 5
12437: IN
12438: OR
12439: PUSH
12440: LD_INT 45
12442: PUSH
12443: LD_VAR 0 5
12447: IN
12448: OR
12449: AND
12450: IFFALSE 12704
// begin hex := GetHexInfo ( x , y ) ;
12452: LD_ADDR_VAR 0 4
12456: PUSH
12457: LD_VAR 0 10
12461: PPUSH
12462: LD_VAR 0 11
12466: PPUSH
12467: CALL_OW 546
12471: ST_TO_ADDR
// if hex [ 1 ] then
12472: LD_VAR 0 4
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: IFFALSE 12484
// exit ;
12482: GO 12887
// height := hex [ 2 ] ;
12484: LD_ADDR_VAR 0 15
12488: PUSH
12489: LD_VAR 0 4
12493: PUSH
12494: LD_INT 2
12496: ARRAY
12497: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12498: LD_ADDR_VAR 0 14
12502: PUSH
12503: LD_INT 0
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: LD_INT 3
12511: PUSH
12512: LD_INT 5
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: ST_TO_ADDR
// for i in tmp do
12521: LD_ADDR_VAR 0 8
12525: PUSH
12526: LD_VAR 0 14
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12702
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12534: LD_ADDR_VAR 0 9
12538: PUSH
12539: LD_VAR 0 10
12543: PPUSH
12544: LD_VAR 0 8
12548: PPUSH
12549: LD_INT 5
12551: PPUSH
12552: CALL_OW 272
12556: PUSH
12557: LD_VAR 0 11
12561: PPUSH
12562: LD_VAR 0 8
12566: PPUSH
12567: LD_INT 5
12569: PPUSH
12570: CALL_OW 273
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12579: LD_VAR 0 9
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: LD_VAR 0 9
12592: PUSH
12593: LD_INT 2
12595: ARRAY
12596: PPUSH
12597: CALL_OW 488
12601: IFFALSE 12700
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12603: LD_ADDR_VAR 0 4
12607: PUSH
12608: LD_VAR 0 9
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: LD_VAR 0 9
12621: PUSH
12622: LD_INT 2
12624: ARRAY
12625: PPUSH
12626: CALL_OW 546
12630: ST_TO_ADDR
// if hex [ 1 ] then
12631: LD_VAR 0 4
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: IFFALSE 12643
// continue ;
12641: GO 12531
// h := hex [ 2 ] ;
12643: LD_ADDR_VAR 0 13
12647: PUSH
12648: LD_VAR 0 4
12652: PUSH
12653: LD_INT 2
12655: ARRAY
12656: ST_TO_ADDR
// if h + 7 < height then
12657: LD_VAR 0 13
12661: PUSH
12662: LD_INT 7
12664: PLUS
12665: PUSH
12666: LD_VAR 0 15
12670: LESS
12671: IFFALSE 12700
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12673: LD_ADDR_VAR 0 18
12677: PUSH
12678: LD_INT 7
12680: PUSH
12681: LD_INT 28
12683: PUSH
12684: LD_INT 45
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: LIST
12691: PUSH
12692: LD_VAR 0 12
12696: ARRAY
12697: ST_TO_ADDR
// break ;
12698: GO 12702
// end ; end ; end ;
12700: GO 12531
12702: POP
12703: POP
// end ; if not weapon then
12704: LD_VAR 0 18
12708: NOT
12709: IFFALSE 12769
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12711: LD_ADDR_VAR 0 5
12715: PUSH
12716: LD_VAR 0 5
12720: PUSH
12721: LD_INT 11
12723: PUSH
12724: LD_INT 30
12726: PUSH
12727: LD_INT 49
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: DIFF
12735: ST_TO_ADDR
// if not list then
12736: LD_VAR 0 5
12740: NOT
12741: IFFALSE 12745
// exit ;
12743: GO 12887
// weapon := list [ rand ( 1 , list ) ] ;
12745: LD_ADDR_VAR 0 18
12749: PUSH
12750: LD_VAR 0 5
12754: PUSH
12755: LD_INT 1
12757: PPUSH
12758: LD_VAR 0 5
12762: PPUSH
12763: CALL_OW 12
12767: ARRAY
12768: ST_TO_ADDR
// end ; if weapon then
12769: LD_VAR 0 18
12773: IFFALSE 12887
// begin tmp := CostOfWeapon ( weapon ) ;
12775: LD_ADDR_VAR 0 14
12779: PUSH
12780: LD_VAR 0 18
12784: PPUSH
12785: CALL_OW 451
12789: ST_TO_ADDR
// j := GetBase ( tower ) ;
12790: LD_ADDR_VAR 0 9
12794: PUSH
12795: LD_VAR 0 1
12799: PPUSH
12800: CALL_OW 274
12804: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12805: LD_VAR 0 9
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 275
12817: PUSH
12818: LD_VAR 0 14
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: GREATEREQUAL
12827: PUSH
12828: LD_VAR 0 9
12832: PPUSH
12833: LD_INT 2
12835: PPUSH
12836: CALL_OW 275
12840: PUSH
12841: LD_VAR 0 14
12845: PUSH
12846: LD_INT 2
12848: ARRAY
12849: GREATEREQUAL
12850: AND
12851: PUSH
12852: LD_VAR 0 9
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: CALL_OW 275
12864: PUSH
12865: LD_VAR 0 14
12869: PUSH
12870: LD_INT 3
12872: ARRAY
12873: GREATEREQUAL
12874: AND
12875: IFFALSE 12887
// result := weapon ;
12877: LD_ADDR_VAR 0 3
12881: PUSH
12882: LD_VAR 0 18
12886: ST_TO_ADDR
// end ; end ;
12887: LD_VAR 0 3
12891: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
// result := true ;
12896: LD_ADDR_VAR 0 3
12900: PUSH
12901: LD_INT 1
12903: ST_TO_ADDR
// if array1 = array2 then
12904: LD_VAR 0 1
12908: PUSH
12909: LD_VAR 0 2
12913: EQUAL
12914: IFFALSE 12974
// begin for i = 1 to array1 do
12916: LD_ADDR_VAR 0 4
12920: PUSH
12921: DOUBLE
12922: LD_INT 1
12924: DEC
12925: ST_TO_ADDR
12926: LD_VAR 0 1
12930: PUSH
12931: FOR_TO
12932: IFFALSE 12970
// if array1 [ i ] <> array2 [ i ] then
12934: LD_VAR 0 1
12938: PUSH
12939: LD_VAR 0 4
12943: ARRAY
12944: PUSH
12945: LD_VAR 0 2
12949: PUSH
12950: LD_VAR 0 4
12954: ARRAY
12955: NONEQUAL
12956: IFFALSE 12968
// begin result := false ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_INT 0
12965: ST_TO_ADDR
// break ;
12966: GO 12970
// end ;
12968: GO 12931
12970: POP
12971: POP
// end else
12972: GO 12982
// result := false ;
12974: LD_ADDR_VAR 0 3
12978: PUSH
12979: LD_INT 0
12981: ST_TO_ADDR
// end ;
12982: LD_VAR 0 3
12986: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12987: LD_INT 0
12989: PPUSH
12990: PPUSH
// if not array1 or not array2 then
12991: LD_VAR 0 1
12995: NOT
12996: PUSH
12997: LD_VAR 0 2
13001: NOT
13002: OR
13003: IFFALSE 13007
// exit ;
13005: GO 13071
// result := true ;
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// for i = 1 to array1 do
13015: LD_ADDR_VAR 0 4
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_VAR 0 1
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13069
// if array1 [ i ] <> array2 [ i ] then
13033: LD_VAR 0 1
13037: PUSH
13038: LD_VAR 0 4
13042: ARRAY
13043: PUSH
13044: LD_VAR 0 2
13048: PUSH
13049: LD_VAR 0 4
13053: ARRAY
13054: NONEQUAL
13055: IFFALSE 13067
// begin result := false ;
13057: LD_ADDR_VAR 0 3
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// break ;
13065: GO 13069
// end ;
13067: GO 13030
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 3
13075: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
// pom := GetBase ( fac ) ;
13081: LD_ADDR_VAR 0 5
13085: PUSH
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 274
13095: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13096: LD_ADDR_VAR 0 4
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: PPUSH
13110: LD_VAR 0 2
13114: PUSH
13115: LD_INT 2
13117: ARRAY
13118: PPUSH
13119: LD_VAR 0 2
13123: PUSH
13124: LD_INT 3
13126: ARRAY
13127: PPUSH
13128: LD_VAR 0 2
13132: PUSH
13133: LD_INT 4
13135: ARRAY
13136: PPUSH
13137: CALL_OW 449
13141: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13142: LD_ADDR_VAR 0 3
13146: PUSH
13147: LD_VAR 0 5
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: CALL_OW 275
13159: PUSH
13160: LD_VAR 0 4
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: GREATEREQUAL
13169: PUSH
13170: LD_VAR 0 5
13174: PPUSH
13175: LD_INT 2
13177: PPUSH
13178: CALL_OW 275
13182: PUSH
13183: LD_VAR 0 4
13187: PUSH
13188: LD_INT 2
13190: ARRAY
13191: GREATEREQUAL
13192: AND
13193: PUSH
13194: LD_VAR 0 5
13198: PPUSH
13199: LD_INT 3
13201: PPUSH
13202: CALL_OW 275
13206: PUSH
13207: LD_VAR 0 4
13211: PUSH
13212: LD_INT 3
13214: ARRAY
13215: GREATEREQUAL
13216: AND
13217: ST_TO_ADDR
// end ;
13218: LD_VAR 0 3
13222: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
13227: PPUSH
13228: PPUSH
// pom := GetBase ( building ) ;
13229: LD_ADDR_VAR 0 3
13233: PUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 274
13243: ST_TO_ADDR
// if not pom then
13244: LD_VAR 0 3
13248: NOT
13249: IFFALSE 13253
// exit ;
13251: GO 13423
// btype := GetBType ( building ) ;
13253: LD_ADDR_VAR 0 5
13257: PUSH
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 266
13267: ST_TO_ADDR
// if btype = b_armoury then
13268: LD_VAR 0 5
13272: PUSH
13273: LD_INT 4
13275: EQUAL
13276: IFFALSE 13286
// btype := b_barracks ;
13278: LD_ADDR_VAR 0 5
13282: PUSH
13283: LD_INT 5
13285: ST_TO_ADDR
// if btype = b_depot then
13286: LD_VAR 0 5
13290: PUSH
13291: LD_INT 0
13293: EQUAL
13294: IFFALSE 13304
// btype := b_warehouse ;
13296: LD_ADDR_VAR 0 5
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if btype = b_workshop then
13304: LD_VAR 0 5
13308: PUSH
13309: LD_INT 2
13311: EQUAL
13312: IFFALSE 13322
// btype := b_factory ;
13314: LD_ADDR_VAR 0 5
13318: PUSH
13319: LD_INT 3
13321: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13322: LD_ADDR_VAR 0 4
13326: PUSH
13327: LD_VAR 0 5
13331: PPUSH
13332: LD_VAR 0 1
13336: PPUSH
13337: CALL_OW 248
13341: PPUSH
13342: CALL_OW 450
13346: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13347: LD_ADDR_VAR 0 2
13351: PUSH
13352: LD_VAR 0 3
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 275
13364: PUSH
13365: LD_VAR 0 4
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: GREATEREQUAL
13374: PUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 2
13382: PPUSH
13383: CALL_OW 275
13387: PUSH
13388: LD_VAR 0 4
13392: PUSH
13393: LD_INT 2
13395: ARRAY
13396: GREATEREQUAL
13397: AND
13398: PUSH
13399: LD_VAR 0 3
13403: PPUSH
13404: LD_INT 3
13406: PPUSH
13407: CALL_OW 275
13411: PUSH
13412: LD_VAR 0 4
13416: PUSH
13417: LD_INT 3
13419: ARRAY
13420: GREATEREQUAL
13421: AND
13422: ST_TO_ADDR
// end ;
13423: LD_VAR 0 2
13427: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13428: LD_INT 0
13430: PPUSH
13431: PPUSH
13432: PPUSH
// pom := GetBase ( building ) ;
13433: LD_ADDR_VAR 0 4
13437: PUSH
13438: LD_VAR 0 1
13442: PPUSH
13443: CALL_OW 274
13447: ST_TO_ADDR
// if not pom then
13448: LD_VAR 0 4
13452: NOT
13453: IFFALSE 13457
// exit ;
13455: GO 13558
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13457: LD_ADDR_VAR 0 5
13461: PUSH
13462: LD_VAR 0 2
13466: PPUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 248
13476: PPUSH
13477: CALL_OW 450
13481: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: LD_VAR 0 4
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 275
13499: PUSH
13500: LD_VAR 0 5
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: GREATEREQUAL
13509: PUSH
13510: LD_VAR 0 4
13514: PPUSH
13515: LD_INT 2
13517: PPUSH
13518: CALL_OW 275
13522: PUSH
13523: LD_VAR 0 5
13527: PUSH
13528: LD_INT 2
13530: ARRAY
13531: GREATEREQUAL
13532: AND
13533: PUSH
13534: LD_VAR 0 4
13538: PPUSH
13539: LD_INT 3
13541: PPUSH
13542: CALL_OW 275
13546: PUSH
13547: LD_VAR 0 5
13551: PUSH
13552: LD_INT 3
13554: ARRAY
13555: GREATEREQUAL
13556: AND
13557: ST_TO_ADDR
// end ;
13558: LD_VAR 0 3
13562: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13563: LD_INT 0
13565: PPUSH
13566: PPUSH
13567: PPUSH
13568: PPUSH
13569: PPUSH
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
// result := false ;
13576: LD_ADDR_VAR 0 8
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13584: LD_VAR 0 5
13588: NOT
13589: PUSH
13590: LD_VAR 0 1
13594: NOT
13595: OR
13596: PUSH
13597: LD_VAR 0 2
13601: NOT
13602: OR
13603: PUSH
13604: LD_VAR 0 3
13608: NOT
13609: OR
13610: IFFALSE 13614
// exit ;
13612: GO 14428
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13614: LD_ADDR_VAR 0 14
13618: PUSH
13619: LD_VAR 0 1
13623: PPUSH
13624: LD_VAR 0 2
13628: PPUSH
13629: LD_VAR 0 3
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: LD_VAR 0 5
13643: PUSH
13644: LD_INT 1
13646: ARRAY
13647: PPUSH
13648: CALL_OW 248
13652: PPUSH
13653: LD_INT 0
13655: PPUSH
13656: CALL 15661 0 6
13660: ST_TO_ADDR
// if not hexes then
13661: LD_VAR 0 14
13665: NOT
13666: IFFALSE 13670
// exit ;
13668: GO 14428
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13670: LD_ADDR_VAR 0 17
13674: PUSH
13675: LD_VAR 0 5
13679: PPUSH
13680: LD_INT 22
13682: PUSH
13683: LD_VAR 0 13
13687: PPUSH
13688: CALL_OW 255
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 2
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 0
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 30
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PPUSH
13729: CALL_OW 72
13733: ST_TO_ADDR
// for i = 1 to hexes do
13734: LD_ADDR_VAR 0 9
13738: PUSH
13739: DOUBLE
13740: LD_INT 1
13742: DEC
13743: ST_TO_ADDR
13744: LD_VAR 0 14
13748: PUSH
13749: FOR_TO
13750: IFFALSE 14426
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13752: LD_ADDR_VAR 0 13
13756: PUSH
13757: LD_VAR 0 14
13761: PUSH
13762: LD_VAR 0 9
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: LD_VAR 0 14
13776: PUSH
13777: LD_VAR 0 9
13781: ARRAY
13782: PUSH
13783: LD_INT 2
13785: ARRAY
13786: PPUSH
13787: CALL_OW 428
13791: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13792: LD_VAR 0 14
13796: PUSH
13797: LD_VAR 0 9
13801: ARRAY
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: PPUSH
13807: LD_VAR 0 14
13811: PUSH
13812: LD_VAR 0 9
13816: ARRAY
13817: PUSH
13818: LD_INT 2
13820: ARRAY
13821: PPUSH
13822: CALL_OW 351
13826: PUSH
13827: LD_VAR 0 14
13831: PUSH
13832: LD_VAR 0 9
13836: ARRAY
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PPUSH
13842: LD_VAR 0 14
13846: PUSH
13847: LD_VAR 0 9
13851: ARRAY
13852: PUSH
13853: LD_INT 2
13855: ARRAY
13856: PPUSH
13857: CALL_OW 488
13861: NOT
13862: OR
13863: PUSH
13864: LD_VAR 0 13
13868: PPUSH
13869: CALL_OW 247
13873: PUSH
13874: LD_INT 3
13876: EQUAL
13877: OR
13878: IFFALSE 13884
// exit ;
13880: POP
13881: POP
13882: GO 14428
// if not tmp then
13884: LD_VAR 0 13
13888: NOT
13889: IFFALSE 13893
// continue ;
13891: GO 13749
// result := true ;
13893: LD_ADDR_VAR 0 8
13897: PUSH
13898: LD_INT 1
13900: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13901: LD_VAR 0 6
13905: PUSH
13906: LD_VAR 0 13
13910: PPUSH
13911: CALL_OW 247
13915: PUSH
13916: LD_INT 2
13918: EQUAL
13919: AND
13920: PUSH
13921: LD_VAR 0 13
13925: PPUSH
13926: CALL_OW 263
13930: PUSH
13931: LD_INT 1
13933: EQUAL
13934: AND
13935: IFFALSE 14099
// begin if IsDrivenBy ( tmp ) then
13937: LD_VAR 0 13
13941: PPUSH
13942: CALL_OW 311
13946: IFFALSE 13950
// continue ;
13948: GO 13749
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13950: LD_VAR 0 6
13954: PPUSH
13955: LD_INT 3
13957: PUSH
13958: LD_INT 60
13960: PUSH
13961: EMPTY
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 3
13970: PUSH
13971: LD_INT 55
13973: PUSH
13974: EMPTY
13975: LIST
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PPUSH
13985: CALL_OW 72
13989: IFFALSE 14097
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13991: LD_ADDR_VAR 0 18
13995: PUSH
13996: LD_VAR 0 6
14000: PPUSH
14001: LD_INT 3
14003: PUSH
14004: LD_INT 60
14006: PUSH
14007: EMPTY
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 3
14016: PUSH
14017: LD_INT 55
14019: PUSH
14020: EMPTY
14021: LIST
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 72
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: ST_TO_ADDR
// if IsInUnit ( driver ) then
14040: LD_VAR 0 18
14044: PPUSH
14045: CALL_OW 310
14049: IFFALSE 14060
// ComExit ( driver ) ;
14051: LD_VAR 0 18
14055: PPUSH
14056: CALL 39441 0 1
// AddComEnterUnit ( driver , tmp ) ;
14060: LD_VAR 0 18
14064: PPUSH
14065: LD_VAR 0 13
14069: PPUSH
14070: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14074: LD_VAR 0 18
14078: PPUSH
14079: LD_VAR 0 7
14083: PPUSH
14084: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14088: LD_VAR 0 18
14092: PPUSH
14093: CALL_OW 181
// end ; continue ;
14097: GO 13749
// end ; if not cleaners or not tmp in cleaners then
14099: LD_VAR 0 6
14103: NOT
14104: PUSH
14105: LD_VAR 0 13
14109: PUSH
14110: LD_VAR 0 6
14114: IN
14115: NOT
14116: OR
14117: IFFALSE 14424
// begin if dep then
14119: LD_VAR 0 17
14123: IFFALSE 14259
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14125: LD_ADDR_VAR 0 16
14129: PUSH
14130: LD_VAR 0 17
14134: PUSH
14135: LD_INT 1
14137: ARRAY
14138: PPUSH
14139: CALL_OW 250
14143: PPUSH
14144: LD_VAR 0 17
14148: PUSH
14149: LD_INT 1
14151: ARRAY
14152: PPUSH
14153: CALL_OW 254
14157: PPUSH
14158: LD_INT 5
14160: PPUSH
14161: CALL_OW 272
14165: PUSH
14166: LD_VAR 0 17
14170: PUSH
14171: LD_INT 1
14173: ARRAY
14174: PPUSH
14175: CALL_OW 251
14179: PPUSH
14180: LD_VAR 0 17
14184: PUSH
14185: LD_INT 1
14187: ARRAY
14188: PPUSH
14189: CALL_OW 254
14193: PPUSH
14194: LD_INT 5
14196: PPUSH
14197: CALL_OW 273
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14206: LD_VAR 0 16
14210: PUSH
14211: LD_INT 1
14213: ARRAY
14214: PPUSH
14215: LD_VAR 0 16
14219: PUSH
14220: LD_INT 2
14222: ARRAY
14223: PPUSH
14224: CALL_OW 488
14228: IFFALSE 14259
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14230: LD_VAR 0 13
14234: PPUSH
14235: LD_VAR 0 16
14239: PUSH
14240: LD_INT 1
14242: ARRAY
14243: PPUSH
14244: LD_VAR 0 16
14248: PUSH
14249: LD_INT 2
14251: ARRAY
14252: PPUSH
14253: CALL_OW 111
// continue ;
14257: GO 13749
// end ; end ; r := GetDir ( tmp ) ;
14259: LD_ADDR_VAR 0 15
14263: PUSH
14264: LD_VAR 0 13
14268: PPUSH
14269: CALL_OW 254
14273: ST_TO_ADDR
// if r = 5 then
14274: LD_VAR 0 15
14278: PUSH
14279: LD_INT 5
14281: EQUAL
14282: IFFALSE 14292
// r := 0 ;
14284: LD_ADDR_VAR 0 15
14288: PUSH
14289: LD_INT 0
14291: ST_TO_ADDR
// for j = r to 5 do
14292: LD_ADDR_VAR 0 10
14296: PUSH
14297: DOUBLE
14298: LD_VAR 0 15
14302: DEC
14303: ST_TO_ADDR
14304: LD_INT 5
14306: PUSH
14307: FOR_TO
14308: IFFALSE 14422
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14310: LD_ADDR_VAR 0 11
14314: PUSH
14315: LD_VAR 0 13
14319: PPUSH
14320: CALL_OW 250
14324: PPUSH
14325: LD_VAR 0 10
14329: PPUSH
14330: LD_INT 2
14332: PPUSH
14333: CALL_OW 272
14337: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14338: LD_ADDR_VAR 0 12
14342: PUSH
14343: LD_VAR 0 13
14347: PPUSH
14348: CALL_OW 251
14352: PPUSH
14353: LD_VAR 0 10
14357: PPUSH
14358: LD_INT 2
14360: PPUSH
14361: CALL_OW 273
14365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14366: LD_VAR 0 11
14370: PPUSH
14371: LD_VAR 0 12
14375: PPUSH
14376: CALL_OW 488
14380: PUSH
14381: LD_VAR 0 11
14385: PPUSH
14386: LD_VAR 0 12
14390: PPUSH
14391: CALL_OW 428
14395: NOT
14396: AND
14397: IFFALSE 14420
// begin ComMoveXY ( tmp , _x , _y ) ;
14399: LD_VAR 0 13
14403: PPUSH
14404: LD_VAR 0 11
14408: PPUSH
14409: LD_VAR 0 12
14413: PPUSH
14414: CALL_OW 111
// break ;
14418: GO 14422
// end ; end ;
14420: GO 14307
14422: POP
14423: POP
// end ; end ;
14424: GO 13749
14426: POP
14427: POP
// end ;
14428: LD_VAR 0 8
14432: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14433: LD_INT 0
14435: PPUSH
// result := true ;
14436: LD_ADDR_VAR 0 3
14440: PUSH
14441: LD_INT 1
14443: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14444: LD_VAR 0 2
14448: PUSH
14449: LD_INT 24
14451: DOUBLE
14452: EQUAL
14453: IFTRUE 14463
14455: LD_INT 33
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14488
14463: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 32
14471: PPUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 321
14481: PUSH
14482: LD_INT 2
14484: EQUAL
14485: ST_TO_ADDR
14486: GO 14804
14488: LD_INT 20
14490: DOUBLE
14491: EQUAL
14492: IFTRUE 14496
14494: GO 14521
14496: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14497: LD_ADDR_VAR 0 3
14501: PUSH
14502: LD_INT 6
14504: PPUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 321
14514: PUSH
14515: LD_INT 2
14517: EQUAL
14518: ST_TO_ADDR
14519: GO 14804
14521: LD_INT 22
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14535
14527: LD_INT 36
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14560
14535: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14536: LD_ADDR_VAR 0 3
14540: PUSH
14541: LD_INT 15
14543: PPUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 321
14553: PUSH
14554: LD_INT 2
14556: EQUAL
14557: ST_TO_ADDR
14558: GO 14804
14560: LD_INT 30
14562: DOUBLE
14563: EQUAL
14564: IFTRUE 14568
14566: GO 14593
14568: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: LD_INT 20
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 321
14586: PUSH
14587: LD_INT 2
14589: EQUAL
14590: ST_TO_ADDR
14591: GO 14804
14593: LD_INT 28
14595: DOUBLE
14596: EQUAL
14597: IFTRUE 14607
14599: LD_INT 21
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14632
14607: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_INT 21
14615: PPUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: CALL_OW 321
14625: PUSH
14626: LD_INT 2
14628: EQUAL
14629: ST_TO_ADDR
14630: GO 14804
14632: LD_INT 16
14634: DOUBLE
14635: EQUAL
14636: IFTRUE 14640
14638: GO 14665
14640: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14641: LD_ADDR_VAR 0 3
14645: PUSH
14646: LD_INT 84
14648: PPUSH
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 321
14658: PUSH
14659: LD_INT 2
14661: EQUAL
14662: ST_TO_ADDR
14663: GO 14804
14665: LD_INT 19
14667: DOUBLE
14668: EQUAL
14669: IFTRUE 14679
14671: LD_INT 23
14673: DOUBLE
14674: EQUAL
14675: IFTRUE 14679
14677: GO 14704
14679: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: LD_INT 83
14687: PPUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: CALL_OW 321
14697: PUSH
14698: LD_INT 2
14700: EQUAL
14701: ST_TO_ADDR
14702: GO 14804
14704: LD_INT 17
14706: DOUBLE
14707: EQUAL
14708: IFTRUE 14712
14710: GO 14737
14712: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: LD_INT 39
14720: PPUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 321
14730: PUSH
14731: LD_INT 2
14733: EQUAL
14734: ST_TO_ADDR
14735: GO 14804
14737: LD_INT 18
14739: DOUBLE
14740: EQUAL
14741: IFTRUE 14745
14743: GO 14770
14745: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14746: LD_ADDR_VAR 0 3
14750: PUSH
14751: LD_INT 40
14753: PPUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 321
14763: PUSH
14764: LD_INT 2
14766: EQUAL
14767: ST_TO_ADDR
14768: GO 14804
14770: LD_INT 27
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14803
14778: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 35
14786: PPUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 321
14796: PUSH
14797: LD_INT 2
14799: EQUAL
14800: ST_TO_ADDR
14801: GO 14804
14803: POP
// end ;
14804: LD_VAR 0 3
14808: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
14813: PPUSH
14814: PPUSH
14815: PPUSH
14816: PPUSH
14817: PPUSH
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
// result := false ;
14822: LD_ADDR_VAR 0 6
14826: PUSH
14827: LD_INT 0
14829: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14830: LD_VAR 0 1
14834: NOT
14835: PUSH
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 266
14845: PUSH
14846: LD_INT 0
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: IN
14856: NOT
14857: OR
14858: PUSH
14859: LD_VAR 0 2
14863: NOT
14864: OR
14865: PUSH
14866: LD_VAR 0 5
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: LD_INT 2
14879: PUSH
14880: LD_INT 3
14882: PUSH
14883: LD_INT 4
14885: PUSH
14886: LD_INT 5
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: IN
14897: NOT
14898: OR
14899: PUSH
14900: LD_VAR 0 3
14904: PPUSH
14905: LD_VAR 0 4
14909: PPUSH
14910: CALL_OW 488
14914: NOT
14915: OR
14916: IFFALSE 14920
// exit ;
14918: GO 15656
// side := GetSide ( depot ) ;
14920: LD_ADDR_VAR 0 9
14924: PUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 255
14934: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14935: LD_VAR 0 9
14939: PPUSH
14940: LD_VAR 0 2
14944: PPUSH
14945: CALL 14433 0 2
14949: NOT
14950: IFFALSE 14954
// exit ;
14952: GO 15656
// pom := GetBase ( depot ) ;
14954: LD_ADDR_VAR 0 10
14958: PUSH
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 274
14968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14969: LD_ADDR_VAR 0 11
14973: PUSH
14974: LD_VAR 0 2
14978: PPUSH
14979: LD_VAR 0 1
14983: PPUSH
14984: CALL_OW 248
14988: PPUSH
14989: CALL_OW 450
14993: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14994: LD_VAR 0 10
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 275
15006: PUSH
15007: LD_VAR 0 11
15011: PUSH
15012: LD_INT 1
15014: ARRAY
15015: GREATEREQUAL
15016: PUSH
15017: LD_VAR 0 10
15021: PPUSH
15022: LD_INT 2
15024: PPUSH
15025: CALL_OW 275
15029: PUSH
15030: LD_VAR 0 11
15034: PUSH
15035: LD_INT 2
15037: ARRAY
15038: GREATEREQUAL
15039: AND
15040: PUSH
15041: LD_VAR 0 10
15045: PPUSH
15046: LD_INT 3
15048: PPUSH
15049: CALL_OW 275
15053: PUSH
15054: LD_VAR 0 11
15058: PUSH
15059: LD_INT 3
15061: ARRAY
15062: GREATEREQUAL
15063: AND
15064: NOT
15065: IFFALSE 15069
// exit ;
15067: GO 15656
// if GetBType ( depot ) = b_depot then
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 266
15078: PUSH
15079: LD_INT 0
15081: EQUAL
15082: IFFALSE 15094
// dist := 28 else
15084: LD_ADDR_VAR 0 14
15088: PUSH
15089: LD_INT 28
15091: ST_TO_ADDR
15092: GO 15102
// dist := 36 ;
15094: LD_ADDR_VAR 0 14
15098: PUSH
15099: LD_INT 36
15101: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15102: LD_VAR 0 1
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_VAR 0 4
15116: PPUSH
15117: CALL_OW 297
15121: PUSH
15122: LD_VAR 0 14
15126: GREATER
15127: IFFALSE 15131
// exit ;
15129: GO 15656
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15131: LD_ADDR_VAR 0 12
15135: PUSH
15136: LD_VAR 0 2
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_VAR 0 4
15150: PPUSH
15151: LD_VAR 0 5
15155: PPUSH
15156: LD_VAR 0 1
15160: PPUSH
15161: CALL_OW 248
15165: PPUSH
15166: LD_INT 0
15168: PPUSH
15169: CALL 15661 0 6
15173: ST_TO_ADDR
// if not hexes then
15174: LD_VAR 0 12
15178: NOT
15179: IFFALSE 15183
// exit ;
15181: GO 15656
// hex := GetHexInfo ( x , y ) ;
15183: LD_ADDR_VAR 0 15
15187: PUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_VAR 0 4
15197: PPUSH
15198: CALL_OW 546
15202: ST_TO_ADDR
// if hex [ 1 ] then
15203: LD_VAR 0 15
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: IFFALSE 15215
// exit ;
15213: GO 15656
// height := hex [ 2 ] ;
15215: LD_ADDR_VAR 0 13
15219: PUSH
15220: LD_VAR 0 15
15224: PUSH
15225: LD_INT 2
15227: ARRAY
15228: ST_TO_ADDR
// for i = 1 to hexes do
15229: LD_ADDR_VAR 0 7
15233: PUSH
15234: DOUBLE
15235: LD_INT 1
15237: DEC
15238: ST_TO_ADDR
15239: LD_VAR 0 12
15243: PUSH
15244: FOR_TO
15245: IFFALSE 15575
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15247: LD_VAR 0 12
15251: PUSH
15252: LD_VAR 0 7
15256: ARRAY
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: LD_VAR 0 12
15266: PUSH
15267: LD_VAR 0 7
15271: ARRAY
15272: PUSH
15273: LD_INT 2
15275: ARRAY
15276: PPUSH
15277: CALL_OW 488
15281: NOT
15282: PUSH
15283: LD_VAR 0 12
15287: PUSH
15288: LD_VAR 0 7
15292: ARRAY
15293: PUSH
15294: LD_INT 1
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 12
15302: PUSH
15303: LD_VAR 0 7
15307: ARRAY
15308: PUSH
15309: LD_INT 2
15311: ARRAY
15312: PPUSH
15313: CALL_OW 428
15317: PUSH
15318: LD_INT 0
15320: GREATER
15321: OR
15322: PUSH
15323: LD_VAR 0 12
15327: PUSH
15328: LD_VAR 0 7
15332: ARRAY
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: LD_VAR 0 12
15342: PUSH
15343: LD_VAR 0 7
15347: ARRAY
15348: PUSH
15349: LD_INT 2
15351: ARRAY
15352: PPUSH
15353: CALL_OW 351
15357: OR
15358: IFFALSE 15364
// exit ;
15360: POP
15361: POP
15362: GO 15656
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15364: LD_ADDR_VAR 0 8
15368: PUSH
15369: LD_VAR 0 12
15373: PUSH
15374: LD_VAR 0 7
15378: ARRAY
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 12
15388: PUSH
15389: LD_VAR 0 7
15393: ARRAY
15394: PUSH
15395: LD_INT 2
15397: ARRAY
15398: PPUSH
15399: CALL_OW 546
15403: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15404: LD_VAR 0 8
15408: PUSH
15409: LD_INT 1
15411: ARRAY
15412: PUSH
15413: LD_VAR 0 8
15417: PUSH
15418: LD_INT 2
15420: ARRAY
15421: PUSH
15422: LD_VAR 0 13
15426: PUSH
15427: LD_INT 2
15429: PLUS
15430: GREATER
15431: OR
15432: PUSH
15433: LD_VAR 0 8
15437: PUSH
15438: LD_INT 2
15440: ARRAY
15441: PUSH
15442: LD_VAR 0 13
15446: PUSH
15447: LD_INT 2
15449: MINUS
15450: LESS
15451: OR
15452: PUSH
15453: LD_VAR 0 8
15457: PUSH
15458: LD_INT 3
15460: ARRAY
15461: PUSH
15462: LD_INT 0
15464: PUSH
15465: LD_INT 8
15467: PUSH
15468: LD_INT 9
15470: PUSH
15471: LD_INT 10
15473: PUSH
15474: LD_INT 11
15476: PUSH
15477: LD_INT 12
15479: PUSH
15480: LD_INT 13
15482: PUSH
15483: LD_INT 16
15485: PUSH
15486: LD_INT 17
15488: PUSH
15489: LD_INT 18
15491: PUSH
15492: LD_INT 19
15494: PUSH
15495: LD_INT 20
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: IN
15516: NOT
15517: OR
15518: PUSH
15519: LD_VAR 0 8
15523: PUSH
15524: LD_INT 5
15526: ARRAY
15527: NOT
15528: OR
15529: PUSH
15530: LD_VAR 0 8
15534: PUSH
15535: LD_INT 6
15537: ARRAY
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: LD_INT 2
15544: PUSH
15545: LD_INT 7
15547: PUSH
15548: LD_INT 9
15550: PUSH
15551: LD_INT 10
15553: PUSH
15554: LD_INT 11
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: IN
15565: NOT
15566: OR
15567: IFFALSE 15573
// exit ;
15569: POP
15570: POP
15571: GO 15656
// end ;
15573: GO 15244
15575: POP
15576: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15577: LD_VAR 0 9
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_VAR 0 4
15591: PPUSH
15592: LD_INT 20
15594: PPUSH
15595: CALL 7608 0 4
15599: PUSH
15600: LD_INT 4
15602: ARRAY
15603: IFFALSE 15607
// exit ;
15605: GO 15656
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15607: LD_VAR 0 2
15611: PUSH
15612: LD_INT 29
15614: PUSH
15615: LD_INT 30
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: IN
15622: PUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_VAR 0 4
15632: PPUSH
15633: LD_VAR 0 9
15637: PPUSH
15638: CALL_OW 440
15642: NOT
15643: AND
15644: IFFALSE 15648
// exit ;
15646: GO 15656
// result := true ;
15648: LD_ADDR_VAR 0 6
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// end ;
15656: LD_VAR 0 6
15660: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15661: LD_INT 0
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
15668: PPUSH
15669: PPUSH
15670: PPUSH
15671: PPUSH
15672: PPUSH
15673: PPUSH
15674: PPUSH
15675: PPUSH
15676: PPUSH
15677: PPUSH
15678: PPUSH
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
15690: PPUSH
15691: PPUSH
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
15699: PPUSH
15700: PPUSH
15701: PPUSH
15702: PPUSH
15703: PPUSH
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
15714: PPUSH
15715: PPUSH
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
// result = [ ] ;
15721: LD_ADDR_VAR 0 7
15725: PUSH
15726: EMPTY
15727: ST_TO_ADDR
// temp_list = [ ] ;
15728: LD_ADDR_VAR 0 9
15732: PUSH
15733: EMPTY
15734: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15735: LD_VAR 0 4
15739: PUSH
15740: LD_INT 0
15742: PUSH
15743: LD_INT 1
15745: PUSH
15746: LD_INT 2
15748: PUSH
15749: LD_INT 3
15751: PUSH
15752: LD_INT 4
15754: PUSH
15755: LD_INT 5
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: IN
15766: NOT
15767: PUSH
15768: LD_VAR 0 1
15772: PUSH
15773: LD_INT 0
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: IN
15783: PUSH
15784: LD_VAR 0 5
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: LD_INT 2
15794: PUSH
15795: LD_INT 3
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: IN
15803: NOT
15804: AND
15805: OR
15806: IFFALSE 15810
// exit ;
15808: GO 34201
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15810: LD_VAR 0 1
15814: PUSH
15815: LD_INT 6
15817: PUSH
15818: LD_INT 7
15820: PUSH
15821: LD_INT 8
15823: PUSH
15824: LD_INT 13
15826: PUSH
15827: LD_INT 12
15829: PUSH
15830: LD_INT 15
15832: PUSH
15833: LD_INT 11
15835: PUSH
15836: LD_INT 14
15838: PUSH
15839: LD_INT 10
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: IN
15853: IFFALSE 15863
// btype = b_lab ;
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_INT 6
15862: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15863: LD_VAR 0 6
15867: PUSH
15868: LD_INT 0
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: IN
15882: NOT
15883: PUSH
15884: LD_VAR 0 1
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: LD_INT 1
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: LD_INT 3
15900: PUSH
15901: LD_INT 6
15903: PUSH
15904: LD_INT 36
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: LD_INT 31
15915: PUSH
15916: LD_INT 32
15918: PUSH
15919: LD_INT 33
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: IN
15935: NOT
15936: PUSH
15937: LD_VAR 0 6
15941: PUSH
15942: LD_INT 1
15944: EQUAL
15945: AND
15946: OR
15947: PUSH
15948: LD_VAR 0 1
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: LD_INT 3
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: IN
15963: NOT
15964: PUSH
15965: LD_VAR 0 6
15969: PUSH
15970: LD_INT 2
15972: EQUAL
15973: AND
15974: OR
15975: IFFALSE 15985
// mode = 0 ;
15977: LD_ADDR_VAR 0 6
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// case mode of 0 :
15985: LD_VAR 0 6
15989: PUSH
15990: LD_INT 0
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 27451
15998: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15999: LD_ADDR_VAR 0 11
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: LD_INT 0
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 0
16016: PUSH
16017: LD_INT 1
16019: NEG
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: LD_INT 0
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: PUSH
16059: LD_INT 0
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 1
16068: NEG
16069: PUSH
16070: LD_INT 1
16072: NEG
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: LD_INT 2
16084: NEG
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: LD_INT 2
16095: NEG
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 1
16106: NEG
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 0
16124: PUSH
16125: LD_INT 2
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 1
16134: NEG
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 1
16165: NEG
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16192: LD_ADDR_VAR 0 12
16196: PUSH
16197: LD_INT 0
16199: PUSH
16200: LD_INT 0
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: NEG
16251: PUSH
16252: LD_INT 0
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 1
16261: NEG
16262: PUSH
16263: LD_INT 1
16265: NEG
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 1
16276: NEG
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 2
16315: NEG
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 2
16326: NEG
16327: PUSH
16328: LD_INT 1
16330: NEG
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: NEG
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 3
16349: NEG
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 3
16360: NEG
16361: PUSH
16362: LD_INT 1
16364: NEG
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16388: LD_ADDR_VAR 0 13
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: LD_INT 0
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: LD_INT 1
16408: NEG
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 1
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: LD_INT 1
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 1
16457: NEG
16458: PUSH
16459: LD_INT 1
16461: NEG
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 1
16469: NEG
16470: PUSH
16471: LD_INT 2
16473: NEG
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 2
16511: NEG
16512: PUSH
16513: LD_INT 1
16515: NEG
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 2
16523: NEG
16524: PUSH
16525: LD_INT 2
16527: NEG
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 2
16535: NEG
16536: PUSH
16537: LD_INT 3
16539: NEG
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 3
16547: NEG
16548: PUSH
16549: LD_INT 2
16551: NEG
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 3
16559: NEG
16560: PUSH
16561: LD_INT 3
16563: NEG
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16587: LD_ADDR_VAR 0 14
16591: PUSH
16592: LD_INT 0
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 0
16604: PUSH
16605: LD_INT 1
16607: NEG
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: LD_INT 0
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: NEG
16646: PUSH
16647: LD_INT 0
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: LD_INT 1
16660: NEG
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: LD_INT 2
16672: NEG
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: LD_INT 2
16683: NEG
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: LD_INT 1
16694: NEG
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: NEG
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 1
16733: NEG
16734: PUSH
16735: LD_INT 3
16737: NEG
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 0
16745: PUSH
16746: LD_INT 3
16748: NEG
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: LD_INT 2
16759: NEG
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16783: LD_ADDR_VAR 0 15
16787: PUSH
16788: LD_INT 0
16790: PUSH
16791: LD_INT 0
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 0
16800: PUSH
16801: LD_INT 1
16803: NEG
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 1
16841: NEG
16842: PUSH
16843: LD_INT 0
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 1
16852: NEG
16853: PUSH
16854: LD_INT 1
16856: NEG
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: LD_INT 1
16867: NEG
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 2
16875: PUSH
16876: LD_INT 0
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 2
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 2
16906: NEG
16907: PUSH
16908: LD_INT 0
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: NEG
16918: PUSH
16919: LD_INT 1
16921: NEG
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: LD_INT 1
16932: NEG
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 3
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 3
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16976: LD_ADDR_VAR 0 16
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: LD_INT 0
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 0
16993: PUSH
16994: LD_INT 1
16996: NEG
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 1
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 0
17024: PUSH
17025: LD_INT 1
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 1
17034: NEG
17035: PUSH
17036: LD_INT 0
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: NEG
17046: PUSH
17047: LD_INT 1
17049: NEG
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 1
17057: NEG
17058: PUSH
17059: LD_INT 2
17061: NEG
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 2
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: NEG
17100: PUSH
17101: LD_INT 1
17103: NEG
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: LD_INT 2
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 3
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 3
17133: PUSH
17134: LD_INT 3
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: LD_INT 3
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17169: LD_ADDR_VAR 0 17
17173: PUSH
17174: LD_INT 0
17176: PUSH
17177: LD_INT 0
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 0
17186: PUSH
17187: LD_INT 1
17189: NEG
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: LD_INT 0
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: LD_INT 1
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 1
17238: NEG
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 1
17250: NEG
17251: PUSH
17252: LD_INT 2
17254: NEG
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 2
17265: NEG
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: LD_INT 1
17276: NEG
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: LD_INT 2
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 0
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: NEG
17335: PUSH
17336: LD_INT 1
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: NEG
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 2
17356: NEG
17357: PUSH
17358: LD_INT 1
17360: NEG
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: NEG
17369: PUSH
17370: LD_INT 2
17372: NEG
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17399: LD_ADDR_VAR 0 18
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: LD_INT 0
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 1
17468: NEG
17469: PUSH
17470: LD_INT 1
17472: NEG
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 1
17480: NEG
17481: PUSH
17482: LD_INT 2
17484: NEG
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: LD_INT 2
17495: NEG
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 2
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 2
17575: NEG
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 2
17586: NEG
17587: PUSH
17588: LD_INT 1
17590: NEG
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 2
17598: NEG
17599: PUSH
17600: LD_INT 2
17602: NEG
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17629: LD_ADDR_VAR 0 19
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: LD_INT 0
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: LD_INT 1
17649: NEG
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 1
17698: NEG
17699: PUSH
17700: LD_INT 1
17702: NEG
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: LD_INT 2
17714: NEG
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: LD_INT 2
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: LD_INT 1
17736: NEG
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: LD_INT 1
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 0
17784: PUSH
17785: LD_INT 2
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 2
17805: NEG
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 2
17816: NEG
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 2
17828: NEG
17829: PUSH
17830: LD_INT 2
17832: NEG
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17859: LD_ADDR_VAR 0 20
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 1
17928: NEG
17929: PUSH
17930: LD_INT 1
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 1
17940: NEG
17941: PUSH
17942: LD_INT 2
17944: NEG
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: LD_INT 1
17966: NEG
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: LD_INT 1
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 2
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 2
18046: NEG
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 2
18058: NEG
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18089: LD_ADDR_VAR 0 21
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 1
18158: NEG
18159: PUSH
18160: LD_INT 1
18162: NEG
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: LD_INT 2
18174: NEG
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: LD_INT 2
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 1
18196: NEG
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 0
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 2
18265: NEG
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 2
18288: NEG
18289: PUSH
18290: LD_INT 2
18292: NEG
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18319: LD_ADDR_VAR 0 22
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: NEG
18401: PUSH
18402: LD_INT 2
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 2
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: LD_INT 1
18426: NEG
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: NEG
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: NEG
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: LD_INT 2
18522: NEG
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18549: LD_ADDR_VAR 0 23
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: LD_INT 2
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: LD_INT 1
18656: NEG
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 0
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: LD_INT 2
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: NEG
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 2
18736: NEG
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 2
18748: NEG
18749: PUSH
18750: LD_INT 2
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: LD_INT 3
18764: NEG
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: NEG
18773: PUSH
18774: LD_INT 3
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18829: LD_ADDR_VAR 0 24
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: LD_INT 1
18902: NEG
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: LD_INT 2
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: LD_INT 2
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: NEG
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 2
19016: NEG
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: NEG
19029: PUSH
19030: LD_INT 2
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 2
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 3
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 3
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19105: LD_ADDR_VAR 0 25
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: NEG
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 2
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: NEG
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 3
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 3
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 3
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 3
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19379: LD_ADDR_VAR 0 26
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: LD_INT 0
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: LD_INT 1
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: LD_INT 2
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: NEG
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: LD_INT 0
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 2
19566: NEG
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: NEG
19579: PUSH
19580: LD_INT 2
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 2
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19655: LD_ADDR_VAR 0 27
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: LD_INT 2
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: LD_INT 1
19762: NEG
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 2
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: LD_INT 0
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: NEG
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: LD_INT 2
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 3
19888: NEG
19889: PUSH
19890: LD_INT 1
19892: NEG
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 3
19900: NEG
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19935: LD_ADDR_VAR 0 28
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 2
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: NEG
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: NEG
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: NEG
20123: PUSH
20124: LD_INT 1
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: NEG
20135: PUSH
20136: LD_INT 2
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 3
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: LD_INT 3
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 3
20170: NEG
20171: PUSH
20172: LD_INT 1
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 3
20182: NEG
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20217: LD_ADDR_VAR 0 29
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: LD_INT 1
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: LD_INT 0
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: NEG
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: LD_INT 2
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: NEG
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: LD_INT 2
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: LD_INT 3
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 3
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 1
20450: NEG
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 3
20461: NEG
20462: PUSH
20463: LD_INT 2
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20496: LD_ADDR_VAR 0 30
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: NEG
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: NEG
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 2
20662: NEG
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 2
20673: NEG
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: LD_INT 3
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: LD_INT 2
20700: NEG
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 3
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: LD_INT 3
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 2
20728: NEG
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 3
20739: NEG
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20774: LD_ADDR_VAR 0 31
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: NEG
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: LD_INT 2
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: LD_INT 3
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 2
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 3
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: LD_INT 3
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 3
21017: NEG
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21052: LD_ADDR_VAR 0 32
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 0
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: NEG
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: NEG
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: PUSH
21243: LD_INT 3
21245: NEG
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: LD_INT 2
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 3
21295: NEG
21296: PUSH
21297: LD_INT 1
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21330: LD_ADDR_VAR 0 33
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 2
21485: NEG
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: NEG
21521: PUSH
21522: LD_INT 3
21524: NEG
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: LD_INT 3
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 3
21574: NEG
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21609: LD_ADDR_VAR 0 34
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 2
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: LD_INT 2
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 2
21765: NEG
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: LD_INT 3
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 2
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 3
21854: NEG
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21889: LD_ADDR_VAR 0 35
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: NEG
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22001: LD_ADDR_VAR 0 36
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: LD_INT 1
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22113: LD_ADDR_VAR 0 37
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 1
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22225: LD_ADDR_VAR 0 38
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22337: LD_ADDR_VAR 0 39
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 1
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22449: LD_ADDR_VAR 0 40
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 1
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22561: LD_ADDR_VAR 0 41
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 2
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 2
22716: NEG
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: NEG
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: NEG
22752: PUSH
22753: LD_INT 3
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: LD_INT 1
22766: NEG
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 3
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 3
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: LD_INT 3
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: NEG
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 3
22835: NEG
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 3
22846: NEG
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 3
22858: NEG
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 3
22870: NEG
22871: PUSH
22872: LD_INT 3
22874: NEG
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22911: LD_ADDR_VAR 0 42
22915: PUSH
22916: LD_INT 0
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: NEG
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: LD_INT 2
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 2
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: LD_INT 2
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: LD_INT 3
23105: NEG
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 3
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: LD_INT 3
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 2
23139: NEG
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: LD_INT 2
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 3
23157: PUSH
23158: LD_INT 3
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: LD_INT 3
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 3
23208: NEG
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: NEG
23221: PUSH
23222: LD_INT 3
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23261: LD_ADDR_VAR 0 43
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: LD_INT 2
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: LD_INT 2
23357: NEG
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: NEG
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: LD_INT 3
23454: NEG
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 3
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 3
23495: PUSH
23496: LD_INT 0
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 3
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 3
23557: NEG
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 3
23568: NEG
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23609: LD_ADDR_VAR 0 44
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 0
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: NEG
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: NEG
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: LD_INT 3
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 3
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 3
23852: PUSH
23853: LD_INT 3
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 3
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 2
23872: NEG
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 3
23883: NEG
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 3
23894: NEG
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 3
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 3
23918: NEG
23919: PUSH
23920: LD_INT 3
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23959: LD_ADDR_VAR 0 45
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: NEG
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 2
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: LD_INT 2
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: NEG
24138: PUSH
24139: LD_INT 2
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: LD_INT 3
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: LD_INT 3
24165: NEG
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 3
24176: NEG
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: LD_INT 2
24187: NEG
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 3
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: LD_INT 3
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: LD_INT 3
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 3
24256: NEG
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 3
24268: NEG
24269: PUSH
24270: LD_INT 3
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24309: LD_ADDR_VAR 0 46
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 2
24405: NEG
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 2
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: LD_INT 3
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 3
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 3
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 3
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 3
24605: NEG
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 3
24616: NEG
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24657: LD_ADDR_VAR 0 47
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: LD_INT 2
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 2
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: LD_INT 2
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24808: LD_ADDR_VAR 0 48
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24955: LD_ADDR_VAR 0 49
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25099: LD_ADDR_VAR 0 50
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 2
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 2
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25243: LD_ADDR_VAR 0 51
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 2
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 2
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25390: LD_ADDR_VAR 0 52
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 2
25517: NEG
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25541: LD_ADDR_VAR 0 53
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 2
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: LD_INT 2
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25771: LD_ADDR_VAR 0 54
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: LD_INT 2
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 2
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: NEG
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26001: LD_ADDR_VAR 0 55
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26231: LD_ADDR_VAR 0 56
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: NEG
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26461: LD_ADDR_VAR 0 57
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: NEG
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26691: LD_ADDR_VAR 0 58
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 2
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 2
26878: NEG
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: NEG
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26921: LD_ADDR_VAR 0 59
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27009: LD_ADDR_VAR 0 60
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27097: LD_ADDR_VAR 0 61
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27185: LD_ADDR_VAR 0 62
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27273: LD_ADDR_VAR 0 63
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27361: LD_ADDR_VAR 0 64
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// end ; 1 :
27449: GO 33346
27451: LD_INT 1
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 30082
27459: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27460: LD_ADDR_VAR 0 11
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 3
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 3
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27504: LD_ADDR_VAR 0 12
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 3
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: LIST
27544: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27545: LD_ADDR_VAR 0 13
27549: PUSH
27550: LD_INT 3
27552: PUSH
27553: LD_INT 2
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: LD_INT 3
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27585: LD_ADDR_VAR 0 14
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27626: LD_ADDR_VAR 0 15
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: NEG
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 3
27655: NEG
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27670: LD_ADDR_VAR 0 16
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 3
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 3
27689: NEG
27690: PUSH
27691: LD_INT 2
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 3
27701: NEG
27702: PUSH
27703: LD_INT 3
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27716: LD_ADDR_VAR 0 17
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 3
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 3
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27760: LD_ADDR_VAR 0 18
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 3
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 3
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27801: LD_ADDR_VAR 0 19
27805: PUSH
27806: LD_INT 3
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 3
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 2
27828: PUSH
27829: LD_INT 3
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27841: LD_ADDR_VAR 0 20
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27882: LD_ADDR_VAR 0 21
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 3
27900: NEG
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27926: LD_ADDR_VAR 0 22
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: LD_INT 3
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 3
27945: NEG
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: NEG
27958: PUSH
27959: LD_INT 3
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27972: LD_ADDR_VAR 0 23
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 3
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 4
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 3
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28016: LD_ADDR_VAR 0 24
28020: PUSH
28021: LD_INT 3
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 4
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28057: LD_ADDR_VAR 0 25
28061: PUSH
28062: LD_INT 3
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 4
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 3
28084: PUSH
28085: LD_INT 4
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28097: LD_ADDR_VAR 0 26
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 3
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 4
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 3
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28138: LD_ADDR_VAR 0 27
28142: PUSH
28143: LD_INT 3
28145: NEG
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 3
28156: NEG
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 4
28167: NEG
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28182: LD_ADDR_VAR 0 28
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: LD_INT 3
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: LD_INT 4
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 4
28213: NEG
28214: PUSH
28215: LD_INT 3
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28228: LD_ADDR_VAR 0 29
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 3
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 3
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 4
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 4
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 3
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 5
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 5
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 4
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 6
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 6
28352: NEG
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 5
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28383: LD_ADDR_VAR 0 30
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 3
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 3
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 3
28421: PUSH
28422: LD_INT 1
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 4
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 4
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 4
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 5
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 5
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 5
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 6
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 6
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28526: LD_ADDR_VAR 0 31
28530: PUSH
28531: LD_INT 3
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 3
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 4
28563: PUSH
28564: LD_INT 3
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 4
28573: PUSH
28574: LD_INT 4
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: LD_INT 4
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 5
28593: PUSH
28594: LD_INT 4
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 5
28603: PUSH
28604: LD_INT 5
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 4
28613: PUSH
28614: LD_INT 5
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 6
28623: PUSH
28624: LD_INT 5
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 6
28633: PUSH
28634: LD_INT 6
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 5
28643: PUSH
28644: LD_INT 6
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28665: LD_ADDR_VAR 0 32
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 3
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: LD_INT 4
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 4
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 5
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 5
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: LD_INT 4
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: LD_INT 6
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 6
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: LD_INT 5
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28808: LD_ADDR_VAR 0 33
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 3
28826: NEG
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 3
28837: NEG
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: NEG
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 4
28860: NEG
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 4
28871: NEG
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 4
28883: NEG
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 5
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 5
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 5
28917: NEG
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 6
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 6
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28963: LD_ADDR_VAR 0 34
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 3
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 3
28982: NEG
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: LD_INT 3
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 4
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 4
29018: NEG
29019: PUSH
29020: LD_INT 3
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 4
29030: NEG
29031: PUSH
29032: LD_INT 4
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 4
29042: NEG
29043: PUSH
29044: LD_INT 5
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 5
29054: NEG
29055: PUSH
29056: LD_INT 4
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 5
29066: NEG
29067: PUSH
29068: LD_INT 5
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 5
29078: NEG
29079: PUSH
29080: LD_INT 6
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 6
29090: NEG
29091: PUSH
29092: LD_INT 5
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 6
29102: NEG
29103: PUSH
29104: LD_INT 6
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29126: LD_ADDR_VAR 0 41
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 3
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 2
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29170: LD_ADDR_VAR 0 42
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 3
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29211: LD_ADDR_VAR 0 43
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 3
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29251: LD_ADDR_VAR 0 44
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29292: LD_ADDR_VAR 0 45
29296: PUSH
29297: LD_INT 2
29299: NEG
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 3
29321: NEG
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29336: LD_ADDR_VAR 0 46
29340: PUSH
29341: LD_INT 2
29343: NEG
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: LD_INT 3
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: NEG
29368: PUSH
29369: LD_INT 2
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29382: LD_ADDR_VAR 0 47
29386: PUSH
29387: LD_INT 2
29389: NEG
29390: PUSH
29391: LD_INT 3
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 3
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29415: LD_ADDR_VAR 0 48
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29446: LD_ADDR_VAR 0 49
29450: PUSH
29451: LD_INT 3
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29475: LD_ADDR_VAR 0 50
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: LD_INT 3
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29504: LD_ADDR_VAR 0 51
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29535: LD_ADDR_VAR 0 52
29539: PUSH
29540: LD_INT 3
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29568: LD_ADDR_VAR 0 53
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: LD_INT 3
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: LD_INT 3
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29612: LD_ADDR_VAR 0 54
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29653: LD_ADDR_VAR 0 55
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: LD_INT 2
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 3
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: LIST
29692: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29693: LD_ADDR_VAR 0 56
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 3
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29734: LD_ADDR_VAR 0 57
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 3
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29778: LD_ADDR_VAR 0 58
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: NEG
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29824: LD_ADDR_VAR 0 59
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29868: LD_ADDR_VAR 0 60
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29909: LD_ADDR_VAR 0 61
29913: PUSH
29914: LD_INT 2
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 2
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29949: LD_ADDR_VAR 0 62
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29990: LD_ADDR_VAR 0 63
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30034: LD_ADDR_VAR 0 64
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
// end ; 2 :
30080: GO 33346
30082: LD_INT 2
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 33345
30090: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30091: LD_ADDR_VAR 0 29
30095: PUSH
30096: LD_INT 4
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 4
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 5
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 5
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 4
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 2
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 5
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 3
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 4
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 4
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 4
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 5
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 5
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: LD_INT 4
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: LD_INT 3
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 5
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: NEG
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 3
30385: NEG
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 4
30430: NEG
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 4
30441: NEG
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: NEG
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 4
30476: NEG
30477: PUSH
30478: LD_INT 4
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 4
30488: NEG
30489: PUSH
30490: LD_INT 5
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: LD_INT 4
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 4
30524: NEG
30525: PUSH
30526: LD_INT 3
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 5
30536: NEG
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 5
30548: NEG
30549: PUSH
30550: LD_INT 5
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 3
30560: NEG
30561: PUSH
30562: LD_INT 5
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 5
30572: NEG
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30629: LD_ADDR_VAR 0 30
30633: PUSH
30634: LD_INT 4
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 4
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 5
30656: PUSH
30657: LD_INT 4
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: LD_INT 5
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 4
30676: PUSH
30677: LD_INT 5
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: LD_INT 4
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: LD_INT 5
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 3
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: LD_INT 3
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: LD_INT 4
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 4
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 4
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 4
30819: NEG
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 4
30830: NEG
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 4
30864: NEG
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 5
30875: NEG
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 5
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 5
30898: NEG
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 3
30921: NEG
30922: PUSH
30923: LD_INT 3
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: LD_INT 4
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: LD_INT 3
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 3
30969: NEG
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 4
30981: NEG
30982: PUSH
30983: LD_INT 3
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 4
30993: NEG
30994: PUSH
30995: LD_INT 4
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 2
31005: NEG
31006: PUSH
31007: LD_INT 4
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 4
31017: NEG
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 4
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 5
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 4
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 4
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: LD_INT 5
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: NEG
31120: PUSH
31121: LD_INT 5
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31176: LD_ADDR_VAR 0 31
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 4
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 4
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 5
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 5
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 4
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: LD_INT 5
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: NEG
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 4
31332: NEG
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 4
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 4
31378: NEG
31379: PUSH
31380: LD_INT 4
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 4
31390: NEG
31391: PUSH
31392: LD_INT 5
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: LD_INT 4
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: LD_INT 3
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 4
31426: NEG
31427: PUSH
31428: LD_INT 3
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 5
31438: NEG
31439: PUSH
31440: LD_INT 4
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 5
31450: NEG
31451: PUSH
31452: LD_INT 5
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 3
31462: NEG
31463: PUSH
31464: LD_INT 5
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 5
31474: NEG
31475: PUSH
31476: LD_INT 3
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 3
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 4
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 3
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 4
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: LD_INT 4
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 4
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 4
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 5
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 5
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 4
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 3
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31726: LD_ADDR_VAR 0 32
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 4
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: NEG
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 4
31778: NEG
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 5
31789: NEG
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 5
31800: NEG
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 5
31812: NEG
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 3
31824: NEG
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: NEG
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 4
31895: NEG
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 4
31907: NEG
31908: PUSH
31909: LD_INT 4
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: LD_INT 4
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 4
31931: NEG
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: LD_INT 4
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 5
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 3
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: LD_INT 3
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 4
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: LD_INT 5
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: LD_INT 5
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 4
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 2
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 4
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: LD_INT 4
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 5
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: LD_INT 5
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: PUSH
32219: LD_INT 5
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32273: LD_ADDR_VAR 0 33
32277: PUSH
32278: LD_INT 4
32280: NEG
32281: PUSH
32282: LD_INT 4
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: LD_INT 5
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 3
32304: NEG
32305: PUSH
32306: LD_INT 4
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: LD_INT 3
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 4
32328: NEG
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 5
32340: NEG
32341: PUSH
32342: LD_INT 4
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 5
32352: NEG
32353: PUSH
32354: LD_INT 5
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 3
32364: NEG
32365: PUSH
32366: LD_INT 5
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 5
32376: NEG
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 4
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 3
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 4
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: NEG
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 4
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 5
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 5
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 5
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 3
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 4
32613: PUSH
32614: LD_INT 4
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 4
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 4
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 4
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 4
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: LD_INT 5
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 5
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 5
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32811: LD_ADDR_VAR 0 34
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 4
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 5
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: LD_INT 4
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 3
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 4
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 5
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 5
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 4
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 4
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 4
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 5
33033: PUSH
33034: LD_INT 4
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: LD_INT 5
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: LD_INT 5
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: LD_INT 4
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 3
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 5
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: LD_INT 5
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 4
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 3
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 4
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 4
33196: NEG
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 4
33207: NEG
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 4
33241: NEG
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 5
33252: NEG
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 5
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 5
33275: NEG
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: NEG
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
// end ; end ;
33343: GO 33346
33345: POP
// case btype of b_depot , b_warehouse :
33346: LD_VAR 0 1
33350: PUSH
33351: LD_INT 0
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33365
33357: LD_INT 1
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33566
33365: POP
// case nation of nation_american :
33366: LD_VAR 0 5
33370: PUSH
33371: LD_INT 1
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33435
33379: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33380: LD_ADDR_VAR 0 9
33384: PUSH
33385: LD_VAR 0 11
33389: PUSH
33390: LD_VAR 0 12
33394: PUSH
33395: LD_VAR 0 13
33399: PUSH
33400: LD_VAR 0 14
33404: PUSH
33405: LD_VAR 0 15
33409: PUSH
33410: LD_VAR 0 16
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: PUSH
33423: LD_VAR 0 4
33427: PUSH
33428: LD_INT 1
33430: PLUS
33431: ARRAY
33432: ST_TO_ADDR
33433: GO 33564
33435: LD_INT 2
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33499
33443: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33444: LD_ADDR_VAR 0 9
33448: PUSH
33449: LD_VAR 0 17
33453: PUSH
33454: LD_VAR 0 18
33458: PUSH
33459: LD_VAR 0 19
33463: PUSH
33464: LD_VAR 0 20
33468: PUSH
33469: LD_VAR 0 21
33473: PUSH
33474: LD_VAR 0 22
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: PUSH
33487: LD_VAR 0 4
33491: PUSH
33492: LD_INT 1
33494: PLUS
33495: ARRAY
33496: ST_TO_ADDR
33497: GO 33564
33499: LD_INT 3
33501: DOUBLE
33502: EQUAL
33503: IFTRUE 33507
33505: GO 33563
33507: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33508: LD_ADDR_VAR 0 9
33512: PUSH
33513: LD_VAR 0 23
33517: PUSH
33518: LD_VAR 0 24
33522: PUSH
33523: LD_VAR 0 25
33527: PUSH
33528: LD_VAR 0 26
33532: PUSH
33533: LD_VAR 0 27
33537: PUSH
33538: LD_VAR 0 28
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: PUSH
33551: LD_VAR 0 4
33555: PUSH
33556: LD_INT 1
33558: PLUS
33559: ARRAY
33560: ST_TO_ADDR
33561: GO 33564
33563: POP
33564: GO 34119
33566: LD_INT 2
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33580
33572: LD_INT 3
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33636
33580: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33581: LD_ADDR_VAR 0 9
33585: PUSH
33586: LD_VAR 0 29
33590: PUSH
33591: LD_VAR 0 30
33595: PUSH
33596: LD_VAR 0 31
33600: PUSH
33601: LD_VAR 0 32
33605: PUSH
33606: LD_VAR 0 33
33610: PUSH
33611: LD_VAR 0 34
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: PUSH
33624: LD_VAR 0 4
33628: PUSH
33629: LD_INT 1
33631: PLUS
33632: ARRAY
33633: ST_TO_ADDR
33634: GO 34119
33636: LD_INT 16
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33698
33642: LD_INT 17
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33698
33648: LD_INT 18
33650: DOUBLE
33651: EQUAL
33652: IFTRUE 33698
33654: LD_INT 19
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33698
33660: LD_INT 22
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33698
33666: LD_INT 20
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33698
33672: LD_INT 21
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33698
33678: LD_INT 23
33680: DOUBLE
33681: EQUAL
33682: IFTRUE 33698
33684: LD_INT 24
33686: DOUBLE
33687: EQUAL
33688: IFTRUE 33698
33690: LD_INT 25
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33698
33696: GO 33754
33698: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33699: LD_ADDR_VAR 0 9
33703: PUSH
33704: LD_VAR 0 35
33708: PUSH
33709: LD_VAR 0 36
33713: PUSH
33714: LD_VAR 0 37
33718: PUSH
33719: LD_VAR 0 38
33723: PUSH
33724: LD_VAR 0 39
33728: PUSH
33729: LD_VAR 0 40
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: PUSH
33742: LD_VAR 0 4
33746: PUSH
33747: LD_INT 1
33749: PLUS
33750: ARRAY
33751: ST_TO_ADDR
33752: GO 34119
33754: LD_INT 6
33756: DOUBLE
33757: EQUAL
33758: IFTRUE 33810
33760: LD_INT 7
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33810
33766: LD_INT 8
33768: DOUBLE
33769: EQUAL
33770: IFTRUE 33810
33772: LD_INT 13
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33810
33778: LD_INT 12
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33810
33784: LD_INT 15
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33810
33790: LD_INT 11
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33810
33796: LD_INT 14
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33810
33802: LD_INT 10
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33866
33810: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33811: LD_ADDR_VAR 0 9
33815: PUSH
33816: LD_VAR 0 41
33820: PUSH
33821: LD_VAR 0 42
33825: PUSH
33826: LD_VAR 0 43
33830: PUSH
33831: LD_VAR 0 44
33835: PUSH
33836: LD_VAR 0 45
33840: PUSH
33841: LD_VAR 0 46
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: LD_VAR 0 4
33858: PUSH
33859: LD_INT 1
33861: PLUS
33862: ARRAY
33863: ST_TO_ADDR
33864: GO 34119
33866: LD_INT 36
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33874
33872: GO 33930
33874: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_VAR 0 47
33884: PUSH
33885: LD_VAR 0 48
33889: PUSH
33890: LD_VAR 0 49
33894: PUSH
33895: LD_VAR 0 50
33899: PUSH
33900: LD_VAR 0 51
33904: PUSH
33905: LD_VAR 0 52
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: PUSH
33918: LD_VAR 0 4
33922: PUSH
33923: LD_INT 1
33925: PLUS
33926: ARRAY
33927: ST_TO_ADDR
33928: GO 34119
33930: LD_INT 4
33932: DOUBLE
33933: EQUAL
33934: IFTRUE 33956
33936: LD_INT 5
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33956
33942: LD_INT 34
33944: DOUBLE
33945: EQUAL
33946: IFTRUE 33956
33948: LD_INT 37
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 34012
33956: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33957: LD_ADDR_VAR 0 9
33961: PUSH
33962: LD_VAR 0 53
33966: PUSH
33967: LD_VAR 0 54
33971: PUSH
33972: LD_VAR 0 55
33976: PUSH
33977: LD_VAR 0 56
33981: PUSH
33982: LD_VAR 0 57
33986: PUSH
33987: LD_VAR 0 58
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: PUSH
34000: LD_VAR 0 4
34004: PUSH
34005: LD_INT 1
34007: PLUS
34008: ARRAY
34009: ST_TO_ADDR
34010: GO 34119
34012: LD_INT 31
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34062
34018: LD_INT 32
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34062
34024: LD_INT 33
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34062
34030: LD_INT 27
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34062
34036: LD_INT 26
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34062
34042: LD_INT 28
34044: DOUBLE
34045: EQUAL
34046: IFTRUE 34062
34048: LD_INT 29
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34062
34054: LD_INT 30
34056: DOUBLE
34057: EQUAL
34058: IFTRUE 34062
34060: GO 34118
34062: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34063: LD_ADDR_VAR 0 9
34067: PUSH
34068: LD_VAR 0 59
34072: PUSH
34073: LD_VAR 0 60
34077: PUSH
34078: LD_VAR 0 61
34082: PUSH
34083: LD_VAR 0 62
34087: PUSH
34088: LD_VAR 0 63
34092: PUSH
34093: LD_VAR 0 64
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: PUSH
34106: LD_VAR 0 4
34110: PUSH
34111: LD_INT 1
34113: PLUS
34114: ARRAY
34115: ST_TO_ADDR
34116: GO 34119
34118: POP
// temp_list2 = [ ] ;
34119: LD_ADDR_VAR 0 10
34123: PUSH
34124: EMPTY
34125: ST_TO_ADDR
// for i in temp_list do
34126: LD_ADDR_VAR 0 8
34130: PUSH
34131: LD_VAR 0 9
34135: PUSH
34136: FOR_IN
34137: IFFALSE 34189
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34139: LD_ADDR_VAR 0 10
34143: PUSH
34144: LD_VAR 0 10
34148: PUSH
34149: LD_VAR 0 8
34153: PUSH
34154: LD_INT 1
34156: ARRAY
34157: PUSH
34158: LD_VAR 0 2
34162: PLUS
34163: PUSH
34164: LD_VAR 0 8
34168: PUSH
34169: LD_INT 2
34171: ARRAY
34172: PUSH
34173: LD_VAR 0 3
34177: PLUS
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: EMPTY
34184: LIST
34185: ADD
34186: ST_TO_ADDR
34187: GO 34136
34189: POP
34190: POP
// result = temp_list2 ;
34191: LD_ADDR_VAR 0 7
34195: PUSH
34196: LD_VAR 0 10
34200: ST_TO_ADDR
// end ;
34201: LD_VAR 0 7
34205: RET
// export function EnemyInRange ( unit , dist ) ; begin
34206: LD_INT 0
34208: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_VAR 0 1
34218: PPUSH
34219: CALL_OW 255
34223: PPUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 250
34233: PPUSH
34234: LD_VAR 0 1
34238: PPUSH
34239: CALL_OW 251
34243: PPUSH
34244: LD_VAR 0 2
34248: PPUSH
34249: CALL 7608 0 4
34253: PUSH
34254: LD_INT 4
34256: ARRAY
34257: ST_TO_ADDR
// end ;
34258: LD_VAR 0 3
34262: RET
// export function PlayerSeeMe ( unit ) ; begin
34263: LD_INT 0
34265: PPUSH
// result := See ( your_side , unit ) ;
34266: LD_ADDR_VAR 0 2
34270: PUSH
34271: LD_OWVAR 2
34275: PPUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: CALL_OW 292
34285: ST_TO_ADDR
// end ;
34286: LD_VAR 0 2
34290: RET
// export function ReverseDir ( unit ) ; begin
34291: LD_INT 0
34293: PPUSH
// if not unit then
34294: LD_VAR 0 1
34298: NOT
34299: IFFALSE 34303
// exit ;
34301: GO 34326
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34303: LD_ADDR_VAR 0 2
34307: PUSH
34308: LD_VAR 0 1
34312: PPUSH
34313: CALL_OW 254
34317: PUSH
34318: LD_INT 3
34320: PLUS
34321: PUSH
34322: LD_INT 6
34324: MOD
34325: ST_TO_ADDR
// end ;
34326: LD_VAR 0 2
34330: RET
// export function ReverseArray ( array ) ; var i ; begin
34331: LD_INT 0
34333: PPUSH
34334: PPUSH
// if not array then
34335: LD_VAR 0 1
34339: NOT
34340: IFFALSE 34344
// exit ;
34342: GO 34399
// result := [ ] ;
34344: LD_ADDR_VAR 0 2
34348: PUSH
34349: EMPTY
34350: ST_TO_ADDR
// for i := array downto 1 do
34351: LD_ADDR_VAR 0 3
34355: PUSH
34356: DOUBLE
34357: LD_VAR 0 1
34361: INC
34362: ST_TO_ADDR
34363: LD_INT 1
34365: PUSH
34366: FOR_DOWNTO
34367: IFFALSE 34397
// result := Join ( result , array [ i ] ) ;
34369: LD_ADDR_VAR 0 2
34373: PUSH
34374: LD_VAR 0 2
34378: PPUSH
34379: LD_VAR 0 1
34383: PUSH
34384: LD_VAR 0 3
34388: ARRAY
34389: PPUSH
34390: CALL 39043 0 2
34394: ST_TO_ADDR
34395: GO 34366
34397: POP
34398: POP
// end ;
34399: LD_VAR 0 2
34403: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34404: LD_INT 0
34406: PPUSH
34407: PPUSH
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
// if not unit or not hexes then
34412: LD_VAR 0 1
34416: NOT
34417: PUSH
34418: LD_VAR 0 2
34422: NOT
34423: OR
34424: IFFALSE 34428
// exit ;
34426: GO 34551
// dist := 9999 ;
34428: LD_ADDR_VAR 0 5
34432: PUSH
34433: LD_INT 9999
34435: ST_TO_ADDR
// for i = 1 to hexes do
34436: LD_ADDR_VAR 0 4
34440: PUSH
34441: DOUBLE
34442: LD_INT 1
34444: DEC
34445: ST_TO_ADDR
34446: LD_VAR 0 2
34450: PUSH
34451: FOR_TO
34452: IFFALSE 34539
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34454: LD_ADDR_VAR 0 6
34458: PUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_VAR 0 2
34468: PUSH
34469: LD_VAR 0 4
34473: ARRAY
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: PPUSH
34479: LD_VAR 0 2
34483: PUSH
34484: LD_VAR 0 4
34488: ARRAY
34489: PUSH
34490: LD_INT 2
34492: ARRAY
34493: PPUSH
34494: CALL_OW 297
34498: ST_TO_ADDR
// if tdist < dist then
34499: LD_VAR 0 6
34503: PUSH
34504: LD_VAR 0 5
34508: LESS
34509: IFFALSE 34537
// begin hex := hexes [ i ] ;
34511: LD_ADDR_VAR 0 8
34515: PUSH
34516: LD_VAR 0 2
34520: PUSH
34521: LD_VAR 0 4
34525: ARRAY
34526: ST_TO_ADDR
// dist := tdist ;
34527: LD_ADDR_VAR 0 5
34531: PUSH
34532: LD_VAR 0 6
34536: ST_TO_ADDR
// end ; end ;
34537: GO 34451
34539: POP
34540: POP
// result := hex ;
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: LD_VAR 0 8
34550: ST_TO_ADDR
// end ;
34551: LD_VAR 0 3
34555: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34556: LD_INT 0
34558: PPUSH
34559: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34560: LD_VAR 0 1
34564: NOT
34565: PUSH
34566: LD_VAR 0 1
34570: PUSH
34571: LD_INT 21
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 23
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PPUSH
34595: CALL_OW 69
34599: IN
34600: NOT
34601: OR
34602: IFFALSE 34606
// exit ;
34604: GO 34653
// for i = 1 to 3 do
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: DOUBLE
34612: LD_INT 1
34614: DEC
34615: ST_TO_ADDR
34616: LD_INT 3
34618: PUSH
34619: FOR_TO
34620: IFFALSE 34651
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34622: LD_VAR 0 1
34626: PPUSH
34627: CALL_OW 250
34631: PPUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 251
34641: PPUSH
34642: LD_INT 1
34644: PPUSH
34645: CALL_OW 453
34649: GO 34619
34651: POP
34652: POP
// end ;
34653: LD_VAR 0 2
34657: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34658: LD_INT 0
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
34665: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34666: LD_VAR 0 1
34670: NOT
34671: PUSH
34672: LD_VAR 0 2
34676: NOT
34677: OR
34678: PUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 314
34688: OR
34689: IFFALSE 34693
// exit ;
34691: GO 35160
// if GetLives ( i ) < 250 then
34693: LD_VAR 0 4
34697: PPUSH
34698: CALL_OW 256
34702: PUSH
34703: LD_INT 250
34705: LESS
34706: IFFALSE 34719
// begin ComAutodestruct ( i ) ;
34708: LD_VAR 0 4
34712: PPUSH
34713: CALL 34556 0 1
// exit ;
34717: GO 35160
// end ; x := GetX ( enemy_unit ) ;
34719: LD_ADDR_VAR 0 7
34723: PUSH
34724: LD_VAR 0 2
34728: PPUSH
34729: CALL_OW 250
34733: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34734: LD_ADDR_VAR 0 8
34738: PUSH
34739: LD_VAR 0 2
34743: PPUSH
34744: CALL_OW 251
34748: ST_TO_ADDR
// if not x or not y then
34749: LD_VAR 0 7
34753: NOT
34754: PUSH
34755: LD_VAR 0 8
34759: NOT
34760: OR
34761: IFFALSE 34765
// exit ;
34763: GO 35160
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34765: LD_ADDR_VAR 0 6
34769: PUSH
34770: LD_VAR 0 7
34774: PPUSH
34775: LD_INT 0
34777: PPUSH
34778: LD_INT 4
34780: PPUSH
34781: CALL_OW 272
34785: PUSH
34786: LD_VAR 0 8
34790: PPUSH
34791: LD_INT 0
34793: PPUSH
34794: LD_INT 4
34796: PPUSH
34797: CALL_OW 273
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_VAR 0 7
34810: PPUSH
34811: LD_INT 1
34813: PPUSH
34814: LD_INT 4
34816: PPUSH
34817: CALL_OW 272
34821: PUSH
34822: LD_VAR 0 8
34826: PPUSH
34827: LD_INT 1
34829: PPUSH
34830: LD_INT 4
34832: PPUSH
34833: CALL_OW 273
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_VAR 0 7
34846: PPUSH
34847: LD_INT 2
34849: PPUSH
34850: LD_INT 4
34852: PPUSH
34853: CALL_OW 272
34857: PUSH
34858: LD_VAR 0 8
34862: PPUSH
34863: LD_INT 2
34865: PPUSH
34866: LD_INT 4
34868: PPUSH
34869: CALL_OW 273
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 7
34882: PPUSH
34883: LD_INT 3
34885: PPUSH
34886: LD_INT 4
34888: PPUSH
34889: CALL_OW 272
34893: PUSH
34894: LD_VAR 0 8
34898: PPUSH
34899: LD_INT 3
34901: PPUSH
34902: LD_INT 4
34904: PPUSH
34905: CALL_OW 273
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_VAR 0 7
34918: PPUSH
34919: LD_INT 4
34921: PPUSH
34922: LD_INT 4
34924: PPUSH
34925: CALL_OW 272
34929: PUSH
34930: LD_VAR 0 8
34934: PPUSH
34935: LD_INT 4
34937: PPUSH
34938: LD_INT 4
34940: PPUSH
34941: CALL_OW 273
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_VAR 0 7
34954: PPUSH
34955: LD_INT 5
34957: PPUSH
34958: LD_INT 4
34960: PPUSH
34961: CALL_OW 272
34965: PUSH
34966: LD_VAR 0 8
34970: PPUSH
34971: LD_INT 5
34973: PPUSH
34974: LD_INT 4
34976: PPUSH
34977: CALL_OW 273
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// for i = tmp downto 1 do
34994: LD_ADDR_VAR 0 4
34998: PUSH
34999: DOUBLE
35000: LD_VAR 0 6
35004: INC
35005: ST_TO_ADDR
35006: LD_INT 1
35008: PUSH
35009: FOR_DOWNTO
35010: IFFALSE 35111
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35012: LD_VAR 0 6
35016: PUSH
35017: LD_VAR 0 4
35021: ARRAY
35022: PUSH
35023: LD_INT 1
35025: ARRAY
35026: PPUSH
35027: LD_VAR 0 6
35031: PUSH
35032: LD_VAR 0 4
35036: ARRAY
35037: PUSH
35038: LD_INT 2
35040: ARRAY
35041: PPUSH
35042: CALL_OW 488
35046: NOT
35047: PUSH
35048: LD_VAR 0 6
35052: PUSH
35053: LD_VAR 0 4
35057: ARRAY
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: PPUSH
35063: LD_VAR 0 6
35067: PUSH
35068: LD_VAR 0 4
35072: ARRAY
35073: PUSH
35074: LD_INT 2
35076: ARRAY
35077: PPUSH
35078: CALL_OW 428
35082: PUSH
35083: LD_INT 0
35085: NONEQUAL
35086: OR
35087: IFFALSE 35109
// tmp := Delete ( tmp , i ) ;
35089: LD_ADDR_VAR 0 6
35093: PUSH
35094: LD_VAR 0 6
35098: PPUSH
35099: LD_VAR 0 4
35103: PPUSH
35104: CALL_OW 3
35108: ST_TO_ADDR
35109: GO 35009
35111: POP
35112: POP
// j := GetClosestHex ( unit , tmp ) ;
35113: LD_ADDR_VAR 0 5
35117: PUSH
35118: LD_VAR 0 1
35122: PPUSH
35123: LD_VAR 0 6
35127: PPUSH
35128: CALL 34404 0 2
35132: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35133: LD_VAR 0 1
35137: PPUSH
35138: LD_VAR 0 5
35142: PUSH
35143: LD_INT 1
35145: ARRAY
35146: PPUSH
35147: LD_VAR 0 5
35151: PUSH
35152: LD_INT 2
35154: ARRAY
35155: PPUSH
35156: CALL_OW 111
// end ;
35160: LD_VAR 0 3
35164: RET
// export function PrepareApemanSoldier ( ) ; begin
35165: LD_INT 0
35167: PPUSH
// uc_nation := 0 ;
35168: LD_ADDR_OWVAR 21
35172: PUSH
35173: LD_INT 0
35175: ST_TO_ADDR
// hc_sex := sex_male ;
35176: LD_ADDR_OWVAR 27
35180: PUSH
35181: LD_INT 1
35183: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35184: LD_ADDR_OWVAR 28
35188: PUSH
35189: LD_INT 15
35191: ST_TO_ADDR
// hc_gallery :=  ;
35192: LD_ADDR_OWVAR 33
35196: PUSH
35197: LD_STRING 
35199: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35200: LD_ADDR_OWVAR 31
35204: PUSH
35205: LD_INT 0
35207: PPUSH
35208: LD_INT 3
35210: PPUSH
35211: CALL_OW 12
35215: PUSH
35216: LD_INT 0
35218: PPUSH
35219: LD_INT 3
35221: PPUSH
35222: CALL_OW 12
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: ST_TO_ADDR
// end ;
35239: LD_VAR 0 1
35243: RET
// export function PrepareApemanEngineer ( ) ; begin
35244: LD_INT 0
35246: PPUSH
// uc_nation := 0 ;
35247: LD_ADDR_OWVAR 21
35251: PUSH
35252: LD_INT 0
35254: ST_TO_ADDR
// hc_sex := sex_male ;
35255: LD_ADDR_OWVAR 27
35259: PUSH
35260: LD_INT 1
35262: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35263: LD_ADDR_OWVAR 28
35267: PUSH
35268: LD_INT 16
35270: ST_TO_ADDR
// hc_gallery :=  ;
35271: LD_ADDR_OWVAR 33
35275: PUSH
35276: LD_STRING 
35278: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35279: LD_ADDR_OWVAR 31
35283: PUSH
35284: LD_INT 0
35286: PPUSH
35287: LD_INT 3
35289: PPUSH
35290: CALL_OW 12
35294: PUSH
35295: LD_INT 0
35297: PPUSH
35298: LD_INT 3
35300: PPUSH
35301: CALL_OW 12
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: ST_TO_ADDR
// end ;
35318: LD_VAR 0 1
35322: RET
// export function PrepareApeman ( agressivity ) ; begin
35323: LD_INT 0
35325: PPUSH
// uc_side := 0 ;
35326: LD_ADDR_OWVAR 20
35330: PUSH
35331: LD_INT 0
35333: ST_TO_ADDR
// uc_nation := 0 ;
35334: LD_ADDR_OWVAR 21
35338: PUSH
35339: LD_INT 0
35341: ST_TO_ADDR
// hc_sex := sex_male ;
35342: LD_ADDR_OWVAR 27
35346: PUSH
35347: LD_INT 1
35349: ST_TO_ADDR
// hc_class := class_apeman ;
35350: LD_ADDR_OWVAR 28
35354: PUSH
35355: LD_INT 12
35357: ST_TO_ADDR
// hc_gallery :=  ;
35358: LD_ADDR_OWVAR 33
35362: PUSH
35363: LD_STRING 
35365: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35366: LD_ADDR_OWVAR 35
35370: PUSH
35371: LD_VAR 0 1
35375: NEG
35376: PPUSH
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 12
35386: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35387: LD_ADDR_OWVAR 31
35391: PUSH
35392: LD_INT 0
35394: PPUSH
35395: LD_INT 3
35397: PPUSH
35398: CALL_OW 12
35402: PUSH
35403: LD_INT 0
35405: PPUSH
35406: LD_INT 3
35408: PPUSH
35409: CALL_OW 12
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: ST_TO_ADDR
// end ;
35426: LD_VAR 0 2
35430: RET
// export function PrepareTiger ( agressivity ) ; begin
35431: LD_INT 0
35433: PPUSH
// uc_side := 0 ;
35434: LD_ADDR_OWVAR 20
35438: PUSH
35439: LD_INT 0
35441: ST_TO_ADDR
// uc_nation := 0 ;
35442: LD_ADDR_OWVAR 21
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// hc_class := class_tiger ;
35450: LD_ADDR_OWVAR 28
35454: PUSH
35455: LD_INT 14
35457: ST_TO_ADDR
// hc_gallery :=  ;
35458: LD_ADDR_OWVAR 33
35462: PUSH
35463: LD_STRING 
35465: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35466: LD_ADDR_OWVAR 35
35470: PUSH
35471: LD_VAR 0 1
35475: NEG
35476: PPUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 12
35486: ST_TO_ADDR
// end ;
35487: LD_VAR 0 2
35491: RET
// export function PrepareEnchidna ( ) ; begin
35492: LD_INT 0
35494: PPUSH
// uc_side := 0 ;
35495: LD_ADDR_OWVAR 20
35499: PUSH
35500: LD_INT 0
35502: ST_TO_ADDR
// uc_nation := 0 ;
35503: LD_ADDR_OWVAR 21
35507: PUSH
35508: LD_INT 0
35510: ST_TO_ADDR
// hc_class := class_baggie ;
35511: LD_ADDR_OWVAR 28
35515: PUSH
35516: LD_INT 13
35518: ST_TO_ADDR
// hc_gallery :=  ;
35519: LD_ADDR_OWVAR 33
35523: PUSH
35524: LD_STRING 
35526: ST_TO_ADDR
// end ;
35527: LD_VAR 0 1
35531: RET
// export function PrepareFrog ( ) ; begin
35532: LD_INT 0
35534: PPUSH
// uc_side := 0 ;
35535: LD_ADDR_OWVAR 20
35539: PUSH
35540: LD_INT 0
35542: ST_TO_ADDR
// uc_nation := 0 ;
35543: LD_ADDR_OWVAR 21
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
// hc_class := class_frog ;
35551: LD_ADDR_OWVAR 28
35555: PUSH
35556: LD_INT 19
35558: ST_TO_ADDR
// hc_gallery :=  ;
35559: LD_ADDR_OWVAR 33
35563: PUSH
35564: LD_STRING 
35566: ST_TO_ADDR
// end ;
35567: LD_VAR 0 1
35571: RET
// export function PrepareFish ( ) ; begin
35572: LD_INT 0
35574: PPUSH
// uc_side := 0 ;
35575: LD_ADDR_OWVAR 20
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// uc_nation := 0 ;
35583: LD_ADDR_OWVAR 21
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// hc_class := class_fish ;
35591: LD_ADDR_OWVAR 28
35595: PUSH
35596: LD_INT 20
35598: ST_TO_ADDR
// hc_gallery :=  ;
35599: LD_ADDR_OWVAR 33
35603: PUSH
35604: LD_STRING 
35606: ST_TO_ADDR
// end ;
35607: LD_VAR 0 1
35611: RET
// export function PrepareBird ( ) ; begin
35612: LD_INT 0
35614: PPUSH
// uc_side := 0 ;
35615: LD_ADDR_OWVAR 20
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// uc_nation := 0 ;
35623: LD_ADDR_OWVAR 21
35627: PUSH
35628: LD_INT 0
35630: ST_TO_ADDR
// hc_class := class_phororhacos ;
35631: LD_ADDR_OWVAR 28
35635: PUSH
35636: LD_INT 18
35638: ST_TO_ADDR
// hc_gallery :=  ;
35639: LD_ADDR_OWVAR 33
35643: PUSH
35644: LD_STRING 
35646: ST_TO_ADDR
// end ;
35647: LD_VAR 0 1
35651: RET
// export function PrepareHorse ( ) ; begin
35652: LD_INT 0
35654: PPUSH
// uc_side := 0 ;
35655: LD_ADDR_OWVAR 20
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// uc_nation := 0 ;
35663: LD_ADDR_OWVAR 21
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// hc_class := class_horse ;
35671: LD_ADDR_OWVAR 28
35675: PUSH
35676: LD_INT 21
35678: ST_TO_ADDR
// hc_gallery :=  ;
35679: LD_ADDR_OWVAR 33
35683: PUSH
35684: LD_STRING 
35686: ST_TO_ADDR
// end ;
35687: LD_VAR 0 1
35691: RET
// export function PrepareMastodont ( ) ; begin
35692: LD_INT 0
35694: PPUSH
// uc_side := 0 ;
35695: LD_ADDR_OWVAR 20
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// uc_nation := 0 ;
35703: LD_ADDR_OWVAR 21
35707: PUSH
35708: LD_INT 0
35710: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35711: LD_ADDR_OWVAR 37
35715: PUSH
35716: LD_INT 31
35718: ST_TO_ADDR
// vc_control := control_rider ;
35719: LD_ADDR_OWVAR 38
35723: PUSH
35724: LD_INT 4
35726: ST_TO_ADDR
// end ;
35727: LD_VAR 0 1
35731: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35732: LD_INT 0
35734: PPUSH
35735: PPUSH
35736: PPUSH
// uc_side = 0 ;
35737: LD_ADDR_OWVAR 20
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
// uc_nation = 0 ;
35745: LD_ADDR_OWVAR 21
35749: PUSH
35750: LD_INT 0
35752: ST_TO_ADDR
// InitHc_All ( ) ;
35753: CALL_OW 584
// InitVc ;
35757: CALL_OW 20
// if mastodonts then
35761: LD_VAR 0 6
35765: IFFALSE 35832
// for i = 1 to mastodonts do
35767: LD_ADDR_VAR 0 11
35771: PUSH
35772: DOUBLE
35773: LD_INT 1
35775: DEC
35776: ST_TO_ADDR
35777: LD_VAR 0 6
35781: PUSH
35782: FOR_TO
35783: IFFALSE 35830
// begin vc_chassis := 31 ;
35785: LD_ADDR_OWVAR 37
35789: PUSH
35790: LD_INT 31
35792: ST_TO_ADDR
// vc_control := control_rider ;
35793: LD_ADDR_OWVAR 38
35797: PUSH
35798: LD_INT 4
35800: ST_TO_ADDR
// animal := CreateVehicle ;
35801: LD_ADDR_VAR 0 12
35805: PUSH
35806: CALL_OW 45
35810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35811: LD_VAR 0 12
35815: PPUSH
35816: LD_VAR 0 8
35820: PPUSH
35821: LD_INT 0
35823: PPUSH
35824: CALL 37960 0 3
// end ;
35828: GO 35782
35830: POP
35831: POP
// if horses then
35832: LD_VAR 0 5
35836: IFFALSE 35903
// for i = 1 to horses do
35838: LD_ADDR_VAR 0 11
35842: PUSH
35843: DOUBLE
35844: LD_INT 1
35846: DEC
35847: ST_TO_ADDR
35848: LD_VAR 0 5
35852: PUSH
35853: FOR_TO
35854: IFFALSE 35901
// begin hc_class := 21 ;
35856: LD_ADDR_OWVAR 28
35860: PUSH
35861: LD_INT 21
35863: ST_TO_ADDR
// hc_gallery :=  ;
35864: LD_ADDR_OWVAR 33
35868: PUSH
35869: LD_STRING 
35871: ST_TO_ADDR
// animal := CreateHuman ;
35872: LD_ADDR_VAR 0 12
35876: PUSH
35877: CALL_OW 44
35881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35882: LD_VAR 0 12
35886: PPUSH
35887: LD_VAR 0 8
35891: PPUSH
35892: LD_INT 0
35894: PPUSH
35895: CALL 37960 0 3
// end ;
35899: GO 35853
35901: POP
35902: POP
// if birds then
35903: LD_VAR 0 1
35907: IFFALSE 35974
// for i = 1 to birds do
35909: LD_ADDR_VAR 0 11
35913: PUSH
35914: DOUBLE
35915: LD_INT 1
35917: DEC
35918: ST_TO_ADDR
35919: LD_VAR 0 1
35923: PUSH
35924: FOR_TO
35925: IFFALSE 35972
// begin hc_class = 18 ;
35927: LD_ADDR_OWVAR 28
35931: PUSH
35932: LD_INT 18
35934: ST_TO_ADDR
// hc_gallery =  ;
35935: LD_ADDR_OWVAR 33
35939: PUSH
35940: LD_STRING 
35942: ST_TO_ADDR
// animal := CreateHuman ;
35943: LD_ADDR_VAR 0 12
35947: PUSH
35948: CALL_OW 44
35952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35953: LD_VAR 0 12
35957: PPUSH
35958: LD_VAR 0 8
35962: PPUSH
35963: LD_INT 0
35965: PPUSH
35966: CALL 37960 0 3
// end ;
35970: GO 35924
35972: POP
35973: POP
// if tigers then
35974: LD_VAR 0 2
35978: IFFALSE 36062
// for i = 1 to tigers do
35980: LD_ADDR_VAR 0 11
35984: PUSH
35985: DOUBLE
35986: LD_INT 1
35988: DEC
35989: ST_TO_ADDR
35990: LD_VAR 0 2
35994: PUSH
35995: FOR_TO
35996: IFFALSE 36060
// begin hc_class = class_tiger ;
35998: LD_ADDR_OWVAR 28
36002: PUSH
36003: LD_INT 14
36005: ST_TO_ADDR
// hc_gallery =  ;
36006: LD_ADDR_OWVAR 33
36010: PUSH
36011: LD_STRING 
36013: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36014: LD_ADDR_OWVAR 35
36018: PUSH
36019: LD_INT 7
36021: NEG
36022: PPUSH
36023: LD_INT 7
36025: PPUSH
36026: CALL_OW 12
36030: ST_TO_ADDR
// animal := CreateHuman ;
36031: LD_ADDR_VAR 0 12
36035: PUSH
36036: CALL_OW 44
36040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36041: LD_VAR 0 12
36045: PPUSH
36046: LD_VAR 0 8
36050: PPUSH
36051: LD_INT 0
36053: PPUSH
36054: CALL 37960 0 3
// end ;
36058: GO 35995
36060: POP
36061: POP
// if apemans then
36062: LD_VAR 0 3
36066: IFFALSE 36189
// for i = 1 to apemans do
36068: LD_ADDR_VAR 0 11
36072: PUSH
36073: DOUBLE
36074: LD_INT 1
36076: DEC
36077: ST_TO_ADDR
36078: LD_VAR 0 3
36082: PUSH
36083: FOR_TO
36084: IFFALSE 36187
// begin hc_class = class_apeman ;
36086: LD_ADDR_OWVAR 28
36090: PUSH
36091: LD_INT 12
36093: ST_TO_ADDR
// hc_gallery =  ;
36094: LD_ADDR_OWVAR 33
36098: PUSH
36099: LD_STRING 
36101: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36102: LD_ADDR_OWVAR 35
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PPUSH
36111: LD_INT 2
36113: PPUSH
36114: CALL_OW 12
36118: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36119: LD_ADDR_OWVAR 31
36123: PUSH
36124: LD_INT 1
36126: PPUSH
36127: LD_INT 3
36129: PPUSH
36130: CALL_OW 12
36134: PUSH
36135: LD_INT 1
36137: PPUSH
36138: LD_INT 3
36140: PPUSH
36141: CALL_OW 12
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// animal := CreateHuman ;
36158: LD_ADDR_VAR 0 12
36162: PUSH
36163: CALL_OW 44
36167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36168: LD_VAR 0 12
36172: PPUSH
36173: LD_VAR 0 8
36177: PPUSH
36178: LD_INT 0
36180: PPUSH
36181: CALL 37960 0 3
// end ;
36185: GO 36083
36187: POP
36188: POP
// if enchidnas then
36189: LD_VAR 0 4
36193: IFFALSE 36260
// for i = 1 to enchidnas do
36195: LD_ADDR_VAR 0 11
36199: PUSH
36200: DOUBLE
36201: LD_INT 1
36203: DEC
36204: ST_TO_ADDR
36205: LD_VAR 0 4
36209: PUSH
36210: FOR_TO
36211: IFFALSE 36258
// begin hc_class = 13 ;
36213: LD_ADDR_OWVAR 28
36217: PUSH
36218: LD_INT 13
36220: ST_TO_ADDR
// hc_gallery =  ;
36221: LD_ADDR_OWVAR 33
36225: PUSH
36226: LD_STRING 
36228: ST_TO_ADDR
// animal := CreateHuman ;
36229: LD_ADDR_VAR 0 12
36233: PUSH
36234: CALL_OW 44
36238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36239: LD_VAR 0 12
36243: PPUSH
36244: LD_VAR 0 8
36248: PPUSH
36249: LD_INT 0
36251: PPUSH
36252: CALL 37960 0 3
// end ;
36256: GO 36210
36258: POP
36259: POP
// if fishes then
36260: LD_VAR 0 7
36264: IFFALSE 36331
// for i = 1 to fishes do
36266: LD_ADDR_VAR 0 11
36270: PUSH
36271: DOUBLE
36272: LD_INT 1
36274: DEC
36275: ST_TO_ADDR
36276: LD_VAR 0 7
36280: PUSH
36281: FOR_TO
36282: IFFALSE 36329
// begin hc_class = 20 ;
36284: LD_ADDR_OWVAR 28
36288: PUSH
36289: LD_INT 20
36291: ST_TO_ADDR
// hc_gallery =  ;
36292: LD_ADDR_OWVAR 33
36296: PUSH
36297: LD_STRING 
36299: ST_TO_ADDR
// animal := CreateHuman ;
36300: LD_ADDR_VAR 0 12
36304: PUSH
36305: CALL_OW 44
36309: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36310: LD_VAR 0 12
36314: PPUSH
36315: LD_VAR 0 9
36319: PPUSH
36320: LD_INT 0
36322: PPUSH
36323: CALL 37960 0 3
// end ;
36327: GO 36281
36329: POP
36330: POP
// end ;
36331: LD_VAR 0 10
36335: RET
// export function WantHeal ( sci , unit ) ; begin
36336: LD_INT 0
36338: PPUSH
// if GetTaskList ( sci ) > 0 then
36339: LD_VAR 0 1
36343: PPUSH
36344: CALL_OW 437
36348: PUSH
36349: LD_INT 0
36351: GREATER
36352: IFFALSE 36422
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36354: LD_VAR 0 1
36358: PPUSH
36359: CALL_OW 437
36363: PUSH
36364: LD_INT 1
36366: ARRAY
36367: PUSH
36368: LD_INT 1
36370: ARRAY
36371: PUSH
36372: LD_STRING l
36374: EQUAL
36375: PUSH
36376: LD_VAR 0 1
36380: PPUSH
36381: CALL_OW 437
36385: PUSH
36386: LD_INT 1
36388: ARRAY
36389: PUSH
36390: LD_INT 4
36392: ARRAY
36393: PUSH
36394: LD_VAR 0 2
36398: EQUAL
36399: AND
36400: IFFALSE 36412
// result := true else
36402: LD_ADDR_VAR 0 3
36406: PUSH
36407: LD_INT 1
36409: ST_TO_ADDR
36410: GO 36420
// result := false ;
36412: LD_ADDR_VAR 0 3
36416: PUSH
36417: LD_INT 0
36419: ST_TO_ADDR
// end else
36420: GO 36430
// result := false ;
36422: LD_ADDR_VAR 0 3
36426: PUSH
36427: LD_INT 0
36429: ST_TO_ADDR
// end ;
36430: LD_VAR 0 3
36434: RET
// export function HealTarget ( sci ) ; begin
36435: LD_INT 0
36437: PPUSH
// if not sci then
36438: LD_VAR 0 1
36442: NOT
36443: IFFALSE 36447
// exit ;
36445: GO 36512
// result := 0 ;
36447: LD_ADDR_VAR 0 2
36451: PUSH
36452: LD_INT 0
36454: ST_TO_ADDR
// if GetTaskList ( sci ) then
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL_OW 437
36464: IFFALSE 36512
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 437
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PUSH
36480: LD_INT 1
36482: ARRAY
36483: PUSH
36484: LD_STRING l
36486: EQUAL
36487: IFFALSE 36512
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36489: LD_ADDR_VAR 0 2
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 437
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: PUSH
36508: LD_INT 4
36510: ARRAY
36511: ST_TO_ADDR
// end ;
36512: LD_VAR 0 2
36516: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36517: LD_INT 0
36519: PPUSH
36520: PPUSH
36521: PPUSH
36522: PPUSH
// if not base_units then
36523: LD_VAR 0 1
36527: NOT
36528: IFFALSE 36532
// exit ;
36530: GO 36619
// result := false ;
36532: LD_ADDR_VAR 0 2
36536: PUSH
36537: LD_INT 0
36539: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: LD_INT 21
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PPUSH
36560: CALL_OW 72
36564: ST_TO_ADDR
// if not tmp then
36565: LD_VAR 0 5
36569: NOT
36570: IFFALSE 36574
// exit ;
36572: GO 36619
// for i in tmp do
36574: LD_ADDR_VAR 0 3
36578: PUSH
36579: LD_VAR 0 5
36583: PUSH
36584: FOR_IN
36585: IFFALSE 36617
// begin result := EnemyInRange ( i , 22 ) ;
36587: LD_ADDR_VAR 0 2
36591: PUSH
36592: LD_VAR 0 3
36596: PPUSH
36597: LD_INT 22
36599: PPUSH
36600: CALL 34206 0 2
36604: ST_TO_ADDR
// if result then
36605: LD_VAR 0 2
36609: IFFALSE 36615
// exit ;
36611: POP
36612: POP
36613: GO 36619
// end ;
36615: GO 36584
36617: POP
36618: POP
// end ;
36619: LD_VAR 0 2
36623: RET
// export function FilterByTag ( units , tag ) ; begin
36624: LD_INT 0
36626: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36627: LD_ADDR_VAR 0 3
36631: PUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: LD_INT 120
36639: PUSH
36640: LD_VAR 0 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PPUSH
36649: CALL_OW 72
36653: ST_TO_ADDR
// end ;
36654: LD_VAR 0 3
36658: RET
// export function IsDriver ( un ) ; begin
36659: LD_INT 0
36661: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36662: LD_ADDR_VAR 0 2
36666: PUSH
36667: LD_VAR 0 1
36671: PUSH
36672: LD_INT 55
36674: PUSH
36675: EMPTY
36676: LIST
36677: PPUSH
36678: CALL_OW 69
36682: IN
36683: ST_TO_ADDR
// end ;
36684: LD_VAR 0 2
36688: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36689: LD_INT 0
36691: PPUSH
36692: PPUSH
// list := [ ] ;
36693: LD_ADDR_VAR 0 5
36697: PUSH
36698: EMPTY
36699: ST_TO_ADDR
// case d of 0 :
36700: LD_VAR 0 3
36704: PUSH
36705: LD_INT 0
36707: DOUBLE
36708: EQUAL
36709: IFTRUE 36713
36711: GO 36846
36713: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36714: LD_ADDR_VAR 0 5
36718: PUSH
36719: LD_VAR 0 1
36723: PUSH
36724: LD_INT 4
36726: MINUS
36727: PUSH
36728: LD_VAR 0 2
36732: PUSH
36733: LD_INT 4
36735: MINUS
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: PUSH
36745: LD_VAR 0 1
36749: PUSH
36750: LD_INT 3
36752: MINUS
36753: PUSH
36754: LD_VAR 0 2
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PUSH
36767: LD_VAR 0 1
36771: PUSH
36772: LD_INT 4
36774: PLUS
36775: PUSH
36776: LD_VAR 0 2
36780: PUSH
36781: LD_INT 4
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_INT 3
36796: PLUS
36797: PUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 3
36805: PLUS
36806: PUSH
36807: LD_INT 5
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: LD_VAR 0 1
36819: PUSH
36820: LD_VAR 0 2
36824: PUSH
36825: LD_INT 4
36827: PLUS
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: ST_TO_ADDR
// end ; 1 :
36844: GO 37544
36846: LD_INT 1
36848: DOUBLE
36849: EQUAL
36850: IFTRUE 36854
36852: GO 36987
36854: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36855: LD_ADDR_VAR 0 5
36859: PUSH
36860: LD_VAR 0 1
36864: PUSH
36865: LD_VAR 0 2
36869: PUSH
36870: LD_INT 4
36872: MINUS
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: PUSH
36882: LD_VAR 0 1
36886: PUSH
36887: LD_INT 3
36889: MINUS
36890: PUSH
36891: LD_VAR 0 2
36895: PUSH
36896: LD_INT 3
36898: MINUS
36899: PUSH
36900: LD_INT 2
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: PUSH
36908: LD_VAR 0 1
36912: PUSH
36913: LD_INT 4
36915: MINUS
36916: PUSH
36917: LD_VAR 0 2
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: LD_VAR 0 1
36934: PUSH
36935: LD_VAR 0 2
36939: PUSH
36940: LD_INT 3
36942: PLUS
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: PUSH
36952: LD_VAR 0 1
36956: PUSH
36957: LD_INT 4
36959: PLUS
36960: PUSH
36961: LD_VAR 0 2
36965: PUSH
36966: LD_INT 4
36968: PLUS
36969: PUSH
36970: LD_INT 5
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// end ; 2 :
36985: GO 37544
36987: LD_INT 2
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37124
36995: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36996: LD_ADDR_VAR 0 5
37000: PUSH
37001: LD_VAR 0 1
37005: PUSH
37006: LD_VAR 0 2
37010: PUSH
37011: LD_INT 3
37013: MINUS
37014: PUSH
37015: LD_INT 3
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: PUSH
37023: LD_VAR 0 1
37027: PUSH
37028: LD_INT 4
37030: PLUS
37031: PUSH
37032: LD_VAR 0 2
37036: PUSH
37037: LD_INT 4
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: PUSH
37045: LD_VAR 0 1
37049: PUSH
37050: LD_VAR 0 2
37054: PUSH
37055: LD_INT 4
37057: PLUS
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: PUSH
37067: LD_VAR 0 1
37071: PUSH
37072: LD_INT 3
37074: MINUS
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: PUSH
37089: LD_VAR 0 1
37093: PUSH
37094: LD_INT 4
37096: MINUS
37097: PUSH
37098: LD_VAR 0 2
37102: PUSH
37103: LD_INT 4
37105: MINUS
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// end ; 3 :
37122: GO 37544
37124: LD_INT 3
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37132
37130: GO 37265
37132: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37133: LD_ADDR_VAR 0 5
37137: PUSH
37138: LD_VAR 0 1
37142: PUSH
37143: LD_INT 3
37145: PLUS
37146: PUSH
37147: LD_VAR 0 2
37151: PUSH
37152: LD_INT 4
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: PUSH
37160: LD_VAR 0 1
37164: PUSH
37165: LD_INT 4
37167: PLUS
37168: PUSH
37169: LD_VAR 0 2
37173: PUSH
37174: LD_INT 4
37176: PLUS
37177: PUSH
37178: LD_INT 5
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: PUSH
37186: LD_VAR 0 1
37190: PUSH
37191: LD_INT 4
37193: MINUS
37194: PUSH
37195: LD_VAR 0 2
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: PUSH
37208: LD_VAR 0 1
37212: PUSH
37213: LD_VAR 0 2
37217: PUSH
37218: LD_INT 4
37220: MINUS
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: PUSH
37230: LD_VAR 0 1
37234: PUSH
37235: LD_INT 3
37237: MINUS
37238: PUSH
37239: LD_VAR 0 2
37243: PUSH
37244: LD_INT 3
37246: MINUS
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
// end ; 4 :
37263: GO 37544
37265: LD_INT 4
37267: DOUBLE
37268: EQUAL
37269: IFTRUE 37273
37271: GO 37406
37273: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37274: LD_ADDR_VAR 0 5
37278: PUSH
37279: LD_VAR 0 1
37283: PUSH
37284: LD_VAR 0 2
37288: PUSH
37289: LD_INT 4
37291: PLUS
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: PUSH
37301: LD_VAR 0 1
37305: PUSH
37306: LD_INT 3
37308: PLUS
37309: PUSH
37310: LD_VAR 0 2
37314: PUSH
37315: LD_INT 3
37317: PLUS
37318: PUSH
37319: LD_INT 5
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: LD_INT 4
37334: PLUS
37335: PUSH
37336: LD_VAR 0 2
37340: PUSH
37341: LD_INT 4
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PUSH
37349: LD_VAR 0 1
37353: PUSH
37354: LD_VAR 0 2
37358: PUSH
37359: LD_INT 3
37361: MINUS
37362: PUSH
37363: LD_INT 3
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: PUSH
37371: LD_VAR 0 1
37375: PUSH
37376: LD_INT 4
37378: MINUS
37379: PUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_INT 4
37387: MINUS
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
// end ; 5 :
37404: GO 37544
37406: LD_INT 5
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37414
37412: GO 37543
37414: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37415: LD_ADDR_VAR 0 5
37419: PUSH
37420: LD_VAR 0 1
37424: PUSH
37425: LD_INT 4
37427: MINUS
37428: PUSH
37429: LD_VAR 0 2
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: LD_VAR 0 2
37451: PUSH
37452: LD_INT 4
37454: MINUS
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: PUSH
37464: LD_VAR 0 1
37468: PUSH
37469: LD_INT 4
37471: PLUS
37472: PUSH
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 4
37480: PLUS
37481: PUSH
37482: LD_INT 5
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: LD_VAR 0 1
37494: PUSH
37495: LD_INT 3
37497: PLUS
37498: PUSH
37499: LD_VAR 0 2
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: PUSH
37512: LD_VAR 0 1
37516: PUSH
37517: LD_VAR 0 2
37521: PUSH
37522: LD_INT 3
37524: PLUS
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: ST_TO_ADDR
// end ; end ;
37541: GO 37544
37543: POP
// result := list ;
37544: LD_ADDR_VAR 0 4
37548: PUSH
37549: LD_VAR 0 5
37553: ST_TO_ADDR
// end ;
37554: LD_VAR 0 4
37558: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37559: LD_INT 0
37561: PPUSH
37562: PPUSH
37563: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37564: LD_VAR 0 1
37568: NOT
37569: PUSH
37570: LD_VAR 0 2
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: LD_INT 3
37583: PUSH
37584: LD_INT 4
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: IN
37593: NOT
37594: OR
37595: IFFALSE 37599
// exit ;
37597: GO 37682
// tmp := [ ] ;
37599: LD_ADDR_VAR 0 5
37603: PUSH
37604: EMPTY
37605: ST_TO_ADDR
// for i in units do
37606: LD_ADDR_VAR 0 4
37610: PUSH
37611: LD_VAR 0 1
37615: PUSH
37616: FOR_IN
37617: IFFALSE 37651
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37619: LD_ADDR_VAR 0 5
37623: PUSH
37624: LD_VAR 0 5
37628: PPUSH
37629: LD_VAR 0 4
37633: PPUSH
37634: LD_VAR 0 2
37638: PPUSH
37639: CALL_OW 259
37643: PPUSH
37644: CALL 39043 0 2
37648: ST_TO_ADDR
37649: GO 37616
37651: POP
37652: POP
// if not tmp then
37653: LD_VAR 0 5
37657: NOT
37658: IFFALSE 37662
// exit ;
37660: GO 37682
// result := SortListByListDesc ( units , tmp ) ;
37662: LD_ADDR_VAR 0 3
37666: PUSH
37667: LD_VAR 0 1
37671: PPUSH
37672: LD_VAR 0 5
37676: PPUSH
37677: CALL_OW 77
37681: ST_TO_ADDR
// end ;
37682: LD_VAR 0 3
37686: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37687: LD_INT 0
37689: PPUSH
37690: PPUSH
37691: PPUSH
// result := false ;
37692: LD_ADDR_VAR 0 3
37696: PUSH
37697: LD_INT 0
37699: ST_TO_ADDR
// if not building then
37700: LD_VAR 0 2
37704: NOT
37705: IFFALSE 37709
// exit ;
37707: GO 37847
// x := GetX ( building ) ;
37709: LD_ADDR_VAR 0 4
37713: PUSH
37714: LD_VAR 0 2
37718: PPUSH
37719: CALL_OW 250
37723: ST_TO_ADDR
// y := GetY ( building ) ;
37724: LD_ADDR_VAR 0 5
37728: PUSH
37729: LD_VAR 0 2
37733: PPUSH
37734: CALL_OW 251
37738: ST_TO_ADDR
// if not x or not y then
37739: LD_VAR 0 4
37743: NOT
37744: PUSH
37745: LD_VAR 0 5
37749: NOT
37750: OR
37751: IFFALSE 37755
// exit ;
37753: GO 37847
// if GetTaskList ( unit ) then
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 437
37764: IFFALSE 37847
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37766: LD_STRING e
37768: PUSH
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL_OW 437
37778: PUSH
37779: LD_INT 1
37781: ARRAY
37782: PUSH
37783: LD_INT 1
37785: ARRAY
37786: EQUAL
37787: PUSH
37788: LD_VAR 0 4
37792: PUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 437
37802: PUSH
37803: LD_INT 1
37805: ARRAY
37806: PUSH
37807: LD_INT 2
37809: ARRAY
37810: EQUAL
37811: AND
37812: PUSH
37813: LD_VAR 0 5
37817: PUSH
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL_OW 437
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: PUSH
37832: LD_INT 3
37834: ARRAY
37835: EQUAL
37836: AND
37837: IFFALSE 37847
// result := true end ;
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 1
37846: ST_TO_ADDR
// end ;
37847: LD_VAR 0 3
37851: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37852: LD_INT 0
37854: PPUSH
// result := false ;
37855: LD_ADDR_VAR 0 4
37859: PUSH
37860: LD_INT 0
37862: ST_TO_ADDR
// if GetTaskList ( unit ) then
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 437
37872: IFFALSE 37955
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37874: LD_STRING M
37876: PUSH
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL_OW 437
37886: PUSH
37887: LD_INT 1
37889: ARRAY
37890: PUSH
37891: LD_INT 1
37893: ARRAY
37894: EQUAL
37895: PUSH
37896: LD_VAR 0 2
37900: PUSH
37901: LD_VAR 0 1
37905: PPUSH
37906: CALL_OW 437
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PUSH
37915: LD_INT 2
37917: ARRAY
37918: EQUAL
37919: AND
37920: PUSH
37921: LD_VAR 0 3
37925: PUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL_OW 437
37935: PUSH
37936: LD_INT 1
37938: ARRAY
37939: PUSH
37940: LD_INT 3
37942: ARRAY
37943: EQUAL
37944: AND
37945: IFFALSE 37955
// result := true ;
37947: LD_ADDR_VAR 0 4
37951: PUSH
37952: LD_INT 1
37954: ST_TO_ADDR
// end ; end ;
37955: LD_VAR 0 4
37959: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37960: LD_INT 0
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
// if not unit or not area then
37966: LD_VAR 0 1
37970: NOT
37971: PUSH
37972: LD_VAR 0 2
37976: NOT
37977: OR
37978: IFFALSE 37982
// exit ;
37980: GO 38146
// tmp := AreaToList ( area , i ) ;
37982: LD_ADDR_VAR 0 6
37986: PUSH
37987: LD_VAR 0 2
37991: PPUSH
37992: LD_VAR 0 5
37996: PPUSH
37997: CALL_OW 517
38001: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38002: LD_ADDR_VAR 0 5
38006: PUSH
38007: DOUBLE
38008: LD_INT 1
38010: DEC
38011: ST_TO_ADDR
38012: LD_VAR 0 6
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PUSH
38021: FOR_TO
38022: IFFALSE 38144
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38024: LD_ADDR_VAR 0 7
38028: PUSH
38029: LD_VAR 0 6
38033: PUSH
38034: LD_INT 1
38036: ARRAY
38037: PUSH
38038: LD_VAR 0 5
38042: ARRAY
38043: PUSH
38044: LD_VAR 0 6
38048: PUSH
38049: LD_INT 2
38051: ARRAY
38052: PUSH
38053: LD_VAR 0 5
38057: ARRAY
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38063: LD_VAR 0 7
38067: PUSH
38068: LD_INT 1
38070: ARRAY
38071: PPUSH
38072: LD_VAR 0 7
38076: PUSH
38077: LD_INT 2
38079: ARRAY
38080: PPUSH
38081: CALL_OW 428
38085: PUSH
38086: LD_INT 0
38088: EQUAL
38089: IFFALSE 38142
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38091: LD_VAR 0 1
38095: PPUSH
38096: LD_VAR 0 7
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PPUSH
38105: LD_VAR 0 7
38109: PUSH
38110: LD_INT 2
38112: ARRAY
38113: PPUSH
38114: LD_VAR 0 3
38118: PPUSH
38119: CALL_OW 48
// result := IsPlaced ( unit ) ;
38123: LD_ADDR_VAR 0 4
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 305
38137: ST_TO_ADDR
// exit ;
38138: POP
38139: POP
38140: GO 38146
// end ; end ;
38142: GO 38021
38144: POP
38145: POP
// end ;
38146: LD_VAR 0 4
38150: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38151: LD_INT 0
38153: PPUSH
38154: PPUSH
38155: PPUSH
// if not side or side > 8 then
38156: LD_VAR 0 1
38160: NOT
38161: PUSH
38162: LD_VAR 0 1
38166: PUSH
38167: LD_INT 8
38169: GREATER
38170: OR
38171: IFFALSE 38175
// exit ;
38173: GO 38362
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38175: LD_ADDR_VAR 0 4
38179: PUSH
38180: LD_INT 22
38182: PUSH
38183: LD_VAR 0 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 21
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 69
38210: ST_TO_ADDR
// if not tmp then
38211: LD_VAR 0 4
38215: NOT
38216: IFFALSE 38220
// exit ;
38218: GO 38362
// enable_addtolog := true ;
38220: LD_ADDR_OWVAR 81
38224: PUSH
38225: LD_INT 1
38227: ST_TO_ADDR
// AddToLog ( [ ) ;
38228: LD_STRING [
38230: PPUSH
38231: CALL_OW 561
// for i in tmp do
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_VAR 0 4
38244: PUSH
38245: FOR_IN
38246: IFFALSE 38353
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38248: LD_STRING [
38250: PUSH
38251: LD_VAR 0 3
38255: PPUSH
38256: CALL_OW 266
38260: STR
38261: PUSH
38262: LD_STRING , 
38264: STR
38265: PUSH
38266: LD_VAR 0 3
38270: PPUSH
38271: CALL_OW 250
38275: STR
38276: PUSH
38277: LD_STRING , 
38279: STR
38280: PUSH
38281: LD_VAR 0 3
38285: PPUSH
38286: CALL_OW 251
38290: STR
38291: PUSH
38292: LD_STRING , 
38294: STR
38295: PUSH
38296: LD_VAR 0 3
38300: PPUSH
38301: CALL_OW 254
38305: STR
38306: PUSH
38307: LD_STRING , 
38309: STR
38310: PUSH
38311: LD_VAR 0 3
38315: PPUSH
38316: LD_INT 1
38318: PPUSH
38319: CALL_OW 268
38323: STR
38324: PUSH
38325: LD_STRING , 
38327: STR
38328: PUSH
38329: LD_VAR 0 3
38333: PPUSH
38334: LD_INT 2
38336: PPUSH
38337: CALL_OW 268
38341: STR
38342: PUSH
38343: LD_STRING ],
38345: STR
38346: PPUSH
38347: CALL_OW 561
// end ;
38351: GO 38245
38353: POP
38354: POP
// AddToLog ( ]; ) ;
38355: LD_STRING ];
38357: PPUSH
38358: CALL_OW 561
// end ;
38362: LD_VAR 0 2
38366: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38367: LD_INT 0
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
// if not area or not rate or not max then
38374: LD_VAR 0 1
38378: NOT
38379: PUSH
38380: LD_VAR 0 2
38384: NOT
38385: OR
38386: PUSH
38387: LD_VAR 0 4
38391: NOT
38392: OR
38393: IFFALSE 38397
// exit ;
38395: GO 38586
// while 1 do
38397: LD_INT 1
38399: IFFALSE 38586
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38401: LD_ADDR_VAR 0 9
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: LD_INT 1
38413: PPUSH
38414: CALL_OW 287
38418: PUSH
38419: LD_INT 10
38421: MUL
38422: ST_TO_ADDR
// r := rate / 10 ;
38423: LD_ADDR_VAR 0 7
38427: PUSH
38428: LD_VAR 0 2
38432: PUSH
38433: LD_INT 10
38435: DIVREAL
38436: ST_TO_ADDR
// time := 1 1$00 ;
38437: LD_ADDR_VAR 0 8
38441: PUSH
38442: LD_INT 2100
38444: ST_TO_ADDR
// if amount < min then
38445: LD_VAR 0 9
38449: PUSH
38450: LD_VAR 0 3
38454: LESS
38455: IFFALSE 38473
// r := r * 2 else
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: LD_VAR 0 7
38466: PUSH
38467: LD_INT 2
38469: MUL
38470: ST_TO_ADDR
38471: GO 38499
// if amount > max then
38473: LD_VAR 0 9
38477: PUSH
38478: LD_VAR 0 4
38482: GREATER
38483: IFFALSE 38499
// r := r / 2 ;
38485: LD_ADDR_VAR 0 7
38489: PUSH
38490: LD_VAR 0 7
38494: PUSH
38495: LD_INT 2
38497: DIVREAL
38498: ST_TO_ADDR
// time := time / r ;
38499: LD_ADDR_VAR 0 8
38503: PUSH
38504: LD_VAR 0 8
38508: PUSH
38509: LD_VAR 0 7
38513: DIVREAL
38514: ST_TO_ADDR
// if time < 0 then
38515: LD_VAR 0 8
38519: PUSH
38520: LD_INT 0
38522: LESS
38523: IFFALSE 38540
// time := time * - 1 ;
38525: LD_ADDR_VAR 0 8
38529: PUSH
38530: LD_VAR 0 8
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: MUL
38539: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38540: LD_VAR 0 8
38544: PUSH
38545: LD_INT 35
38547: PPUSH
38548: LD_INT 875
38550: PPUSH
38551: CALL_OW 12
38555: PLUS
38556: PPUSH
38557: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38561: LD_INT 1
38563: PPUSH
38564: LD_INT 5
38566: PPUSH
38567: CALL_OW 12
38571: PPUSH
38572: LD_VAR 0 1
38576: PPUSH
38577: LD_INT 1
38579: PPUSH
38580: CALL_OW 55
// end ;
38584: GO 38397
// end ;
38586: LD_VAR 0 5
38590: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38591: LD_INT 0
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
// if not turrets or not factories then
38601: LD_VAR 0 1
38605: NOT
38606: PUSH
38607: LD_VAR 0 2
38611: NOT
38612: OR
38613: IFFALSE 38617
// exit ;
38615: GO 38924
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38617: LD_ADDR_VAR 0 10
38621: PUSH
38622: LD_INT 5
38624: PUSH
38625: LD_INT 6
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 4
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 5
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 24
38659: PUSH
38660: LD_INT 25
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 23
38669: PUSH
38670: LD_INT 27
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 42
38683: PUSH
38684: LD_INT 43
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 44
38693: PUSH
38694: LD_INT 46
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 45
38703: PUSH
38704: LD_INT 47
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: ST_TO_ADDR
// result := [ ] ;
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: EMPTY
38727: ST_TO_ADDR
// for i in turrets do
38728: LD_ADDR_VAR 0 4
38732: PUSH
38733: LD_VAR 0 1
38737: PUSH
38738: FOR_IN
38739: IFFALSE 38922
// begin nat := GetNation ( i ) ;
38741: LD_ADDR_VAR 0 7
38745: PUSH
38746: LD_VAR 0 4
38750: PPUSH
38751: CALL_OW 248
38755: ST_TO_ADDR
// weapon := 0 ;
38756: LD_ADDR_VAR 0 8
38760: PUSH
38761: LD_INT 0
38763: ST_TO_ADDR
// if not nat then
38764: LD_VAR 0 7
38768: NOT
38769: IFFALSE 38773
// continue ;
38771: GO 38738
// for j in list [ nat ] do
38773: LD_ADDR_VAR 0 5
38777: PUSH
38778: LD_VAR 0 10
38782: PUSH
38783: LD_VAR 0 7
38787: ARRAY
38788: PUSH
38789: FOR_IN
38790: IFFALSE 38831
// if GetBWeapon ( i ) = j [ 1 ] then
38792: LD_VAR 0 4
38796: PPUSH
38797: CALL_OW 269
38801: PUSH
38802: LD_VAR 0 5
38806: PUSH
38807: LD_INT 1
38809: ARRAY
38810: EQUAL
38811: IFFALSE 38829
// begin weapon := j [ 2 ] ;
38813: LD_ADDR_VAR 0 8
38817: PUSH
38818: LD_VAR 0 5
38822: PUSH
38823: LD_INT 2
38825: ARRAY
38826: ST_TO_ADDR
// break ;
38827: GO 38831
// end ;
38829: GO 38789
38831: POP
38832: POP
// if not weapon then
38833: LD_VAR 0 8
38837: NOT
38838: IFFALSE 38842
// continue ;
38840: GO 38738
// for k in factories do
38842: LD_ADDR_VAR 0 6
38846: PUSH
38847: LD_VAR 0 2
38851: PUSH
38852: FOR_IN
38853: IFFALSE 38918
// begin weapons := AvailableWeaponList ( k ) ;
38855: LD_ADDR_VAR 0 9
38859: PUSH
38860: LD_VAR 0 6
38864: PPUSH
38865: CALL_OW 478
38869: ST_TO_ADDR
// if not weapons then
38870: LD_VAR 0 9
38874: NOT
38875: IFFALSE 38879
// continue ;
38877: GO 38852
// if weapon in weapons then
38879: LD_VAR 0 8
38883: PUSH
38884: LD_VAR 0 9
38888: IN
38889: IFFALSE 38916
// begin result := [ i , weapon ] ;
38891: LD_ADDR_VAR 0 3
38895: PUSH
38896: LD_VAR 0 4
38900: PUSH
38901: LD_VAR 0 8
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: ST_TO_ADDR
// exit ;
38910: POP
38911: POP
38912: POP
38913: POP
38914: GO 38924
// end ; end ;
38916: GO 38852
38918: POP
38919: POP
// end ;
38920: GO 38738
38922: POP
38923: POP
// end ;
38924: LD_VAR 0 3
38928: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38929: LD_INT 0
38931: PPUSH
// if not side or side > 8 then
38932: LD_VAR 0 3
38936: NOT
38937: PUSH
38938: LD_VAR 0 3
38942: PUSH
38943: LD_INT 8
38945: GREATER
38946: OR
38947: IFFALSE 38951
// exit ;
38949: GO 39010
// if not range then
38951: LD_VAR 0 4
38955: NOT
38956: IFFALSE 38967
// range := - 12 ;
38958: LD_ADDR_VAR 0 4
38962: PUSH
38963: LD_INT 12
38965: NEG
38966: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38967: LD_VAR 0 1
38971: PPUSH
38972: LD_VAR 0 2
38976: PPUSH
38977: LD_VAR 0 3
38981: PPUSH
38982: LD_VAR 0 4
38986: PPUSH
38987: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38991: LD_VAR 0 1
38995: PPUSH
38996: LD_VAR 0 2
39000: PPUSH
39001: LD_VAR 0 3
39005: PPUSH
39006: CALL_OW 331
// end ;
39010: LD_VAR 0 5
39014: RET
// export function Video ( mode ) ; begin
39015: LD_INT 0
39017: PPUSH
// ingame_video = mode ;
39018: LD_ADDR_OWVAR 52
39022: PUSH
39023: LD_VAR 0 1
39027: ST_TO_ADDR
// interface_hidden = mode ;
39028: LD_ADDR_OWVAR 54
39032: PUSH
39033: LD_VAR 0 1
39037: ST_TO_ADDR
// end ;
39038: LD_VAR 0 2
39042: RET
// export function Join ( array , element ) ; begin
39043: LD_INT 0
39045: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39046: LD_ADDR_VAR 0 3
39050: PUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: LD_VAR 0 1
39060: PUSH
39061: LD_INT 1
39063: PLUS
39064: PPUSH
39065: LD_VAR 0 2
39069: PPUSH
39070: CALL_OW 1
39074: ST_TO_ADDR
// end ;
39075: LD_VAR 0 3
39079: RET
// export function JoinUnion ( array , element ) ; begin
39080: LD_INT 0
39082: PPUSH
// result := array union element ;
39083: LD_ADDR_VAR 0 3
39087: PUSH
39088: LD_VAR 0 1
39092: PUSH
39093: LD_VAR 0 2
39097: UNION
39098: ST_TO_ADDR
// end ;
39099: LD_VAR 0 3
39103: RET
// export function GetBehemoths ( side ) ; begin
39104: LD_INT 0
39106: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: LD_INT 22
39114: PUSH
39115: LD_VAR 0 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 31
39126: PUSH
39127: LD_INT 25
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PPUSH
39138: CALL_OW 69
39142: ST_TO_ADDR
// end ;
39143: LD_VAR 0 2
39147: RET
// export function Shuffle ( array ) ; var i , index ; begin
39148: LD_INT 0
39150: PPUSH
39151: PPUSH
39152: PPUSH
// result := [ ] ;
39153: LD_ADDR_VAR 0 2
39157: PUSH
39158: EMPTY
39159: ST_TO_ADDR
// if not array then
39160: LD_VAR 0 1
39164: NOT
39165: IFFALSE 39169
// exit ;
39167: GO 39268
// Randomize ;
39169: CALL_OW 10
// for i = array downto 1 do
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: DOUBLE
39179: LD_VAR 0 1
39183: INC
39184: ST_TO_ADDR
39185: LD_INT 1
39187: PUSH
39188: FOR_DOWNTO
39189: IFFALSE 39266
// begin index := rand ( 1 , array ) ;
39191: LD_ADDR_VAR 0 4
39195: PUSH
39196: LD_INT 1
39198: PPUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 12
39208: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39209: LD_ADDR_VAR 0 2
39213: PUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_INT 1
39226: PLUS
39227: PPUSH
39228: LD_VAR 0 1
39232: PUSH
39233: LD_VAR 0 4
39237: ARRAY
39238: PPUSH
39239: CALL_OW 2
39243: ST_TO_ADDR
// array := Delete ( array , index ) ;
39244: LD_ADDR_VAR 0 1
39248: PUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: LD_VAR 0 4
39258: PPUSH
39259: CALL_OW 3
39263: ST_TO_ADDR
// end ;
39264: GO 39188
39266: POP
39267: POP
// end ;
39268: LD_VAR 0 2
39272: RET
// export function GetBaseMaterials ( base ) ; begin
39273: LD_INT 0
39275: PPUSH
// result := [ 0 , 0 , 0 ] ;
39276: LD_ADDR_VAR 0 2
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: ST_TO_ADDR
// if not base then
39295: LD_VAR 0 1
39299: NOT
39300: IFFALSE 39304
// exit ;
39302: GO 39353
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39304: LD_ADDR_VAR 0 2
39308: PUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: LD_INT 1
39316: PPUSH
39317: CALL_OW 275
39321: PUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: LD_INT 2
39329: PPUSH
39330: CALL_OW 275
39334: PUSH
39335: LD_VAR 0 1
39339: PPUSH
39340: LD_INT 3
39342: PPUSH
39343: CALL_OW 275
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: ST_TO_ADDR
// end ;
39353: LD_VAR 0 2
39357: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39358: LD_INT 0
39360: PPUSH
39361: PPUSH
// result := array ;
39362: LD_ADDR_VAR 0 3
39366: PUSH
39367: LD_VAR 0 1
39371: ST_TO_ADDR
// if size >= result then
39372: LD_VAR 0 2
39376: PUSH
39377: LD_VAR 0 3
39381: GREATEREQUAL
39382: IFFALSE 39386
// exit ;
39384: GO 39436
// if size then
39386: LD_VAR 0 2
39390: IFFALSE 39436
// for i := array downto size do
39392: LD_ADDR_VAR 0 4
39396: PUSH
39397: DOUBLE
39398: LD_VAR 0 1
39402: INC
39403: ST_TO_ADDR
39404: LD_VAR 0 2
39408: PUSH
39409: FOR_DOWNTO
39410: IFFALSE 39434
// result := Delete ( result , result ) ;
39412: LD_ADDR_VAR 0 3
39416: PUSH
39417: LD_VAR 0 3
39421: PPUSH
39422: LD_VAR 0 3
39426: PPUSH
39427: CALL_OW 3
39431: ST_TO_ADDR
39432: GO 39409
39434: POP
39435: POP
// end ;
39436: LD_VAR 0 3
39440: RET
// export function ComExit ( unit ) ; var tmp ; begin
39441: LD_INT 0
39443: PPUSH
39444: PPUSH
// if not IsInUnit ( unit ) then
39445: LD_VAR 0 1
39449: PPUSH
39450: CALL_OW 310
39454: NOT
39455: IFFALSE 39459
// exit ;
39457: GO 39519
// tmp := IsInUnit ( unit ) ;
39459: LD_ADDR_VAR 0 3
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 310
39473: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39474: LD_VAR 0 3
39478: PPUSH
39479: CALL_OW 247
39483: PUSH
39484: LD_INT 2
39486: EQUAL
39487: IFFALSE 39500
// ComExitVehicle ( unit ) else
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 121
39498: GO 39509
// ComExitBuilding ( unit ) ;
39500: LD_VAR 0 1
39504: PPUSH
39505: CALL_OW 122
// result := tmp ;
39509: LD_ADDR_VAR 0 2
39513: PUSH
39514: LD_VAR 0 3
39518: ST_TO_ADDR
// end ;
39519: LD_VAR 0 2
39523: RET
// export function ComExitAll ( units ) ; var i ; begin
39524: LD_INT 0
39526: PPUSH
39527: PPUSH
// if not units then
39528: LD_VAR 0 1
39532: NOT
39533: IFFALSE 39537
// exit ;
39535: GO 39563
// for i in units do
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_VAR 0 1
39546: PUSH
39547: FOR_IN
39548: IFFALSE 39561
// ComExit ( i ) ;
39550: LD_VAR 0 3
39554: PPUSH
39555: CALL 39441 0 1
39559: GO 39547
39561: POP
39562: POP
// end ;
39563: LD_VAR 0 2
39567: RET
// export function ResetHc ; begin
39568: LD_INT 0
39570: PPUSH
// InitHc ;
39571: CALL_OW 19
// hc_importance := 0 ;
39575: LD_ADDR_OWVAR 32
39579: PUSH
39580: LD_INT 0
39582: ST_TO_ADDR
// end ;
39583: LD_VAR 0 1
39587: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39588: LD_INT 0
39590: PPUSH
39591: PPUSH
39592: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39593: LD_ADDR_VAR 0 6
39597: PUSH
39598: LD_VAR 0 1
39602: PUSH
39603: LD_VAR 0 3
39607: PLUS
39608: PUSH
39609: LD_INT 2
39611: DIV
39612: ST_TO_ADDR
// if _x < 0 then
39613: LD_VAR 0 6
39617: PUSH
39618: LD_INT 0
39620: LESS
39621: IFFALSE 39638
// _x := _x * - 1 ;
39623: LD_ADDR_VAR 0 6
39627: PUSH
39628: LD_VAR 0 6
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: MUL
39637: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39638: LD_ADDR_VAR 0 7
39642: PUSH
39643: LD_VAR 0 2
39647: PUSH
39648: LD_VAR 0 4
39652: PLUS
39653: PUSH
39654: LD_INT 2
39656: DIV
39657: ST_TO_ADDR
// if _y < 0 then
39658: LD_VAR 0 7
39662: PUSH
39663: LD_INT 0
39665: LESS
39666: IFFALSE 39683
// _y := _y * - 1 ;
39668: LD_ADDR_VAR 0 7
39672: PUSH
39673: LD_VAR 0 7
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: MUL
39682: ST_TO_ADDR
// result := [ _x , _y ] ;
39683: LD_ADDR_VAR 0 5
39687: PUSH
39688: LD_VAR 0 6
39692: PUSH
39693: LD_VAR 0 7
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// end ;
39702: LD_VAR 0 5
39706: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39707: LD_INT 0
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
// task := GetTaskList ( unit ) ;
39713: LD_ADDR_VAR 0 7
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 437
39727: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39728: LD_VAR 0 7
39732: NOT
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: CALL_OW 308
39748: NOT
39749: AND
39750: IFFALSE 39754
// exit ;
39752: GO 39872
// if IsInArea ( unit , area ) then
39754: LD_VAR 0 1
39758: PPUSH
39759: LD_VAR 0 2
39763: PPUSH
39764: CALL_OW 308
39768: IFFALSE 39786
// begin ComMoveToArea ( unit , goAway ) ;
39770: LD_VAR 0 1
39774: PPUSH
39775: LD_VAR 0 3
39779: PPUSH
39780: CALL_OW 113
// exit ;
39784: GO 39872
// end ; if task [ 1 ] [ 1 ] <> M then
39786: LD_VAR 0 7
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: PUSH
39795: LD_INT 1
39797: ARRAY
39798: PUSH
39799: LD_STRING M
39801: NONEQUAL
39802: IFFALSE 39806
// exit ;
39804: GO 39872
// x := task [ 1 ] [ 2 ] ;
39806: LD_ADDR_VAR 0 5
39810: PUSH
39811: LD_VAR 0 7
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: PUSH
39820: LD_INT 2
39822: ARRAY
39823: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39824: LD_ADDR_VAR 0 6
39828: PUSH
39829: LD_VAR 0 7
39833: PUSH
39834: LD_INT 1
39836: ARRAY
39837: PUSH
39838: LD_INT 3
39840: ARRAY
39841: ST_TO_ADDR
// if InArea ( x , y , area ) then
39842: LD_VAR 0 5
39846: PPUSH
39847: LD_VAR 0 6
39851: PPUSH
39852: LD_VAR 0 2
39856: PPUSH
39857: CALL_OW 309
39861: IFFALSE 39872
// ComStop ( unit ) ;
39863: LD_VAR 0 1
39867: PPUSH
39868: CALL_OW 141
// end ;
39872: LD_VAR 0 4
39876: RET
// export function Abs ( value ) ; begin
39877: LD_INT 0
39879: PPUSH
// result := value ;
39880: LD_ADDR_VAR 0 2
39884: PUSH
39885: LD_VAR 0 1
39889: ST_TO_ADDR
// if value < 0 then
39890: LD_VAR 0 1
39894: PUSH
39895: LD_INT 0
39897: LESS
39898: IFFALSE 39915
// result := value * - 1 ;
39900: LD_ADDR_VAR 0 2
39904: PUSH
39905: LD_VAR 0 1
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: MUL
39914: ST_TO_ADDR
// end ;
39915: LD_VAR 0 2
39919: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39920: LD_INT 0
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
// if not unit or not building then
39930: LD_VAR 0 1
39934: NOT
39935: PUSH
39936: LD_VAR 0 2
39940: NOT
39941: OR
39942: IFFALSE 39946
// exit ;
39944: GO 40172
// x := GetX ( building ) ;
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: LD_VAR 0 2
39955: PPUSH
39956: CALL_OW 250
39960: ST_TO_ADDR
// y := GetY ( building ) ;
39961: LD_ADDR_VAR 0 6
39965: PUSH
39966: LD_VAR 0 2
39970: PPUSH
39971: CALL_OW 251
39975: ST_TO_ADDR
// d := GetDir ( building ) ;
39976: LD_ADDR_VAR 0 8
39980: PUSH
39981: LD_VAR 0 2
39985: PPUSH
39986: CALL_OW 254
39990: ST_TO_ADDR
// r := 4 ;
39991: LD_ADDR_VAR 0 9
39995: PUSH
39996: LD_INT 4
39998: ST_TO_ADDR
// for i := 1 to 5 do
39999: LD_ADDR_VAR 0 10
40003: PUSH
40004: DOUBLE
40005: LD_INT 1
40007: DEC
40008: ST_TO_ADDR
40009: LD_INT 5
40011: PUSH
40012: FOR_TO
40013: IFFALSE 40170
// begin _x := ShiftX ( x , d , r + i ) ;
40015: LD_ADDR_VAR 0 5
40019: PUSH
40020: LD_VAR 0 4
40024: PPUSH
40025: LD_VAR 0 8
40029: PPUSH
40030: LD_VAR 0 9
40034: PUSH
40035: LD_VAR 0 10
40039: PLUS
40040: PPUSH
40041: CALL_OW 272
40045: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40046: LD_ADDR_VAR 0 7
40050: PUSH
40051: LD_VAR 0 6
40055: PPUSH
40056: LD_VAR 0 8
40060: PPUSH
40061: LD_VAR 0 9
40065: PUSH
40066: LD_VAR 0 10
40070: PLUS
40071: PPUSH
40072: CALL_OW 273
40076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40077: LD_VAR 0 5
40081: PPUSH
40082: LD_VAR 0 7
40086: PPUSH
40087: CALL_OW 488
40091: PUSH
40092: LD_VAR 0 5
40096: PPUSH
40097: LD_VAR 0 7
40101: PPUSH
40102: CALL_OW 428
40106: PPUSH
40107: CALL_OW 247
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: IN
40122: NOT
40123: AND
40124: IFFALSE 40168
// begin ComMoveXY ( unit , _x , _y ) ;
40126: LD_VAR 0 1
40130: PPUSH
40131: LD_VAR 0 5
40135: PPUSH
40136: LD_VAR 0 7
40140: PPUSH
40141: CALL_OW 111
// result := [ _x , _y ] ;
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_VAR 0 5
40154: PUSH
40155: LD_VAR 0 7
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// exit ;
40164: POP
40165: POP
40166: GO 40172
// end ; end ;
40168: GO 40012
40170: POP
40171: POP
// end ;
40172: LD_VAR 0 3
40176: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
40181: PPUSH
// result := 0 ;
40182: LD_ADDR_VAR 0 3
40186: PUSH
40187: LD_INT 0
40189: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40190: LD_VAR 0 1
40194: PUSH
40195: LD_INT 0
40197: LESS
40198: PUSH
40199: LD_VAR 0 1
40203: PUSH
40204: LD_INT 8
40206: GREATER
40207: OR
40208: PUSH
40209: LD_VAR 0 2
40213: PUSH
40214: LD_INT 0
40216: LESS
40217: OR
40218: PUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_INT 8
40226: GREATER
40227: OR
40228: IFFALSE 40232
// exit ;
40230: GO 40307
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40232: LD_ADDR_VAR 0 4
40236: PUSH
40237: LD_INT 22
40239: PUSH
40240: LD_VAR 0 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PPUSH
40249: CALL_OW 69
40253: PUSH
40254: FOR_IN
40255: IFFALSE 40305
// begin un := UnitShoot ( i ) ;
40257: LD_ADDR_VAR 0 5
40261: PUSH
40262: LD_VAR 0 4
40266: PPUSH
40267: CALL_OW 504
40271: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40272: LD_VAR 0 5
40276: PPUSH
40277: CALL_OW 255
40281: PUSH
40282: LD_VAR 0 1
40286: EQUAL
40287: IFFALSE 40303
// begin result := un ;
40289: LD_ADDR_VAR 0 3
40293: PUSH
40294: LD_VAR 0 5
40298: ST_TO_ADDR
// exit ;
40299: POP
40300: POP
40301: GO 40307
// end ; end ;
40303: GO 40254
40305: POP
40306: POP
// end ;
40307: LD_VAR 0 3
40311: RET
// export function GetCargoBay ( units ) ; begin
40312: LD_INT 0
40314: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40315: LD_ADDR_VAR 0 2
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 34
40330: PUSH
40331: LD_INT 12
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 34
40340: PUSH
40341: LD_INT 51
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 34
40350: PUSH
40351: LD_INT 32
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 34
40360: PUSH
40361: LD_INT 89
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 72
40379: ST_TO_ADDR
// end ;
40380: LD_VAR 0 2
40384: RET
// export function Negate ( value ) ; begin
40385: LD_INT 0
40387: PPUSH
// result := not value ;
40388: LD_ADDR_VAR 0 2
40392: PUSH
40393: LD_VAR 0 1
40397: NOT
40398: ST_TO_ADDR
// end ;
40399: LD_VAR 0 2
40403: RET
// export function Inc ( value ) ; begin
40404: LD_INT 0
40406: PPUSH
// result := value + 1 ;
40407: LD_ADDR_VAR 0 2
40411: PUSH
40412: LD_VAR 0 1
40416: PUSH
40417: LD_INT 1
40419: PLUS
40420: ST_TO_ADDR
// end ;
40421: LD_VAR 0 2
40425: RET
// export function Dec ( value ) ; begin
40426: LD_INT 0
40428: PPUSH
// result := value - 1 ;
40429: LD_ADDR_VAR 0 2
40433: PUSH
40434: LD_VAR 0 1
40438: PUSH
40439: LD_INT 1
40441: MINUS
40442: ST_TO_ADDR
// end ;
40443: LD_VAR 0 2
40447: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40448: LD_INT 0
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_VAR 0 2
40467: PPUSH
40468: CALL_OW 488
40472: NOT
40473: PUSH
40474: LD_VAR 0 3
40478: PPUSH
40479: LD_VAR 0 4
40483: PPUSH
40484: CALL_OW 488
40488: NOT
40489: OR
40490: IFFALSE 40503
// begin result := - 1 ;
40492: LD_ADDR_VAR 0 5
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: ST_TO_ADDR
// exit ;
40501: GO 40738
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40503: LD_ADDR_VAR 0 12
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: LD_VAR 0 2
40517: PPUSH
40518: LD_VAR 0 3
40522: PPUSH
40523: LD_VAR 0 4
40527: PPUSH
40528: CALL 39588 0 4
40532: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40533: LD_ADDR_VAR 0 11
40537: PUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: LD_VAR 0 2
40547: PPUSH
40548: LD_VAR 0 12
40552: PUSH
40553: LD_INT 1
40555: ARRAY
40556: PPUSH
40557: LD_VAR 0 12
40561: PUSH
40562: LD_INT 2
40564: ARRAY
40565: PPUSH
40566: CALL_OW 298
40570: ST_TO_ADDR
// distance := 9999 ;
40571: LD_ADDR_VAR 0 10
40575: PUSH
40576: LD_INT 9999
40578: ST_TO_ADDR
// for i := 0 to 5 do
40579: LD_ADDR_VAR 0 6
40583: PUSH
40584: DOUBLE
40585: LD_INT 0
40587: DEC
40588: ST_TO_ADDR
40589: LD_INT 5
40591: PUSH
40592: FOR_TO
40593: IFFALSE 40736
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40595: LD_ADDR_VAR 0 7
40599: PUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: LD_VAR 0 6
40609: PPUSH
40610: LD_VAR 0 11
40614: PPUSH
40615: CALL_OW 272
40619: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40620: LD_ADDR_VAR 0 8
40624: PUSH
40625: LD_VAR 0 2
40629: PPUSH
40630: LD_VAR 0 6
40634: PPUSH
40635: LD_VAR 0 11
40639: PPUSH
40640: CALL_OW 273
40644: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40645: LD_VAR 0 7
40649: PPUSH
40650: LD_VAR 0 8
40654: PPUSH
40655: CALL_OW 488
40659: NOT
40660: IFFALSE 40664
// continue ;
40662: GO 40592
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_VAR 0 12
40673: PUSH
40674: LD_INT 1
40676: ARRAY
40677: PPUSH
40678: LD_VAR 0 12
40682: PUSH
40683: LD_INT 2
40685: ARRAY
40686: PPUSH
40687: LD_VAR 0 7
40691: PPUSH
40692: LD_VAR 0 8
40696: PPUSH
40697: CALL_OW 298
40701: ST_TO_ADDR
// if tmp < distance then
40702: LD_VAR 0 9
40706: PUSH
40707: LD_VAR 0 10
40711: LESS
40712: IFFALSE 40734
// begin result := i ;
40714: LD_ADDR_VAR 0 5
40718: PUSH
40719: LD_VAR 0 6
40723: ST_TO_ADDR
// distance := tmp ;
40724: LD_ADDR_VAR 0 10
40728: PUSH
40729: LD_VAR 0 9
40733: ST_TO_ADDR
// end ; end ;
40734: GO 40592
40736: POP
40737: POP
// end ;
40738: LD_VAR 0 5
40742: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40743: LD_INT 0
40745: PPUSH
40746: PPUSH
// if not driver or not IsInUnit ( driver ) then
40747: LD_VAR 0 1
40751: NOT
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 310
40762: NOT
40763: OR
40764: IFFALSE 40768
// exit ;
40766: GO 40858
// vehicle := IsInUnit ( driver ) ;
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 310
40782: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_STRING \
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: PUSH
40818: LD_STRING E
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_VAR 0 3
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PPUSH
40854: CALL_OW 446
// end ;
40858: LD_VAR 0 2
40862: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40863: LD_INT 0
40865: PPUSH
40866: PPUSH
// if not driver or not IsInUnit ( driver ) then
40867: LD_VAR 0 1
40871: NOT
40872: PUSH
40873: LD_VAR 0 1
40877: PPUSH
40878: CALL_OW 310
40882: NOT
40883: OR
40884: IFFALSE 40888
// exit ;
40886: GO 40978
// vehicle := IsInUnit ( driver ) ;
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 310
40902: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40903: LD_VAR 0 1
40907: PPUSH
40908: LD_STRING \
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: PUSH
40938: LD_STRING E
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_VAR 0 3
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PPUSH
40974: CALL_OW 447
// end ;
40978: LD_VAR 0 2
40982: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40983: LD_INT 0
40985: PPUSH
40986: PPUSH
40987: PPUSH
// tmp := [ ] ;
40988: LD_ADDR_VAR 0 5
40992: PUSH
40993: EMPTY
40994: ST_TO_ADDR
// for i in units do
40995: LD_ADDR_VAR 0 4
40999: PUSH
41000: LD_VAR 0 1
41004: PUSH
41005: FOR_IN
41006: IFFALSE 41044
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41008: LD_ADDR_VAR 0 5
41012: PUSH
41013: LD_VAR 0 5
41017: PPUSH
41018: LD_VAR 0 5
41022: PUSH
41023: LD_INT 1
41025: PLUS
41026: PPUSH
41027: LD_VAR 0 4
41031: PPUSH
41032: CALL_OW 256
41036: PPUSH
41037: CALL_OW 2
41041: ST_TO_ADDR
41042: GO 41005
41044: POP
41045: POP
// if not tmp then
41046: LD_VAR 0 5
41050: NOT
41051: IFFALSE 41055
// exit ;
41053: GO 41103
// if asc then
41055: LD_VAR 0 2
41059: IFFALSE 41083
// result := SortListByListAsc ( units , tmp ) else
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: LD_VAR 0 5
41075: PPUSH
41076: CALL_OW 76
41080: ST_TO_ADDR
41081: GO 41103
// result := SortListByListDesc ( units , tmp ) ;
41083: LD_ADDR_VAR 0 3
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: LD_VAR 0 5
41097: PPUSH
41098: CALL_OW 77
41102: ST_TO_ADDR
// end ;
41103: LD_VAR 0 3
41107: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41108: LD_INT 0
41110: PPUSH
41111: PPUSH
// task := GetTaskList ( mech ) ;
41112: LD_ADDR_VAR 0 4
41116: PUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 437
41126: ST_TO_ADDR
// if not task then
41127: LD_VAR 0 4
41131: NOT
41132: IFFALSE 41136
// exit ;
41134: GO 41178
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41136: LD_ADDR_VAR 0 3
41140: PUSH
41141: LD_VAR 0 4
41145: PUSH
41146: LD_INT 1
41148: ARRAY
41149: PUSH
41150: LD_INT 1
41152: ARRAY
41153: PUSH
41154: LD_STRING r
41156: EQUAL
41157: PUSH
41158: LD_VAR 0 4
41162: PUSH
41163: LD_INT 1
41165: ARRAY
41166: PUSH
41167: LD_INT 4
41169: ARRAY
41170: PUSH
41171: LD_VAR 0 2
41175: EQUAL
41176: AND
41177: ST_TO_ADDR
// end ;
41178: LD_VAR 0 3
41182: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41183: LD_INT 0
41185: PPUSH
// SetDir ( unit , d ) ;
41186: LD_VAR 0 1
41190: PPUSH
41191: LD_VAR 0 4
41195: PPUSH
41196: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41200: LD_VAR 0 1
41204: PPUSH
41205: LD_VAR 0 2
41209: PPUSH
41210: LD_VAR 0 3
41214: PPUSH
41215: LD_VAR 0 5
41219: PPUSH
41220: CALL_OW 48
// end ;
41224: LD_VAR 0 6
41228: RET
// export function ToNaturalNumber ( number ) ; begin
41229: LD_INT 0
41231: PPUSH
// result := number div 1 ;
41232: LD_ADDR_VAR 0 2
41236: PUSH
41237: LD_VAR 0 1
41241: PUSH
41242: LD_INT 1
41244: DIV
41245: ST_TO_ADDR
// if number < 0 then
41246: LD_VAR 0 1
41250: PUSH
41251: LD_INT 0
41253: LESS
41254: IFFALSE 41264
// result := 0 ;
41256: LD_ADDR_VAR 0 2
41260: PUSH
41261: LD_INT 0
41263: ST_TO_ADDR
// end ;
41264: LD_VAR 0 2
41268: RET
// export function SortByClass ( units , class ) ; var un ; begin
41269: LD_INT 0
41271: PPUSH
41272: PPUSH
// if not units or not class then
41273: LD_VAR 0 1
41277: NOT
41278: PUSH
41279: LD_VAR 0 2
41283: NOT
41284: OR
41285: IFFALSE 41289
// exit ;
41287: GO 41384
// result := [ ] ;
41289: LD_ADDR_VAR 0 3
41293: PUSH
41294: EMPTY
41295: ST_TO_ADDR
// for un in units do
41296: LD_ADDR_VAR 0 4
41300: PUSH
41301: LD_VAR 0 1
41305: PUSH
41306: FOR_IN
41307: IFFALSE 41382
// if GetClass ( un ) = class then
41309: LD_VAR 0 4
41313: PPUSH
41314: CALL_OW 257
41318: PUSH
41319: LD_VAR 0 2
41323: EQUAL
41324: IFFALSE 41351
// result := Insert ( result , 1 , un ) else
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_VAR 0 3
41335: PPUSH
41336: LD_INT 1
41338: PPUSH
41339: LD_VAR 0 4
41343: PPUSH
41344: CALL_OW 2
41348: ST_TO_ADDR
41349: GO 41380
// result := Replace ( result , result + 1 , un ) ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_VAR 0 3
41360: PPUSH
41361: LD_VAR 0 3
41365: PUSH
41366: LD_INT 1
41368: PLUS
41369: PPUSH
41370: LD_VAR 0 4
41374: PPUSH
41375: CALL_OW 1
41379: ST_TO_ADDR
41380: GO 41306
41382: POP
41383: POP
// end ;
41384: LD_VAR 0 3
41388: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41389: LD_INT 0
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
// result := [ ] ;
41398: LD_ADDR_VAR 0 4
41402: PUSH
41403: EMPTY
41404: ST_TO_ADDR
// if x - r < 0 then
41405: LD_VAR 0 1
41409: PUSH
41410: LD_VAR 0 3
41414: MINUS
41415: PUSH
41416: LD_INT 0
41418: LESS
41419: IFFALSE 41431
// min_x := 0 else
41421: LD_ADDR_VAR 0 8
41425: PUSH
41426: LD_INT 0
41428: ST_TO_ADDR
41429: GO 41447
// min_x := x - r ;
41431: LD_ADDR_VAR 0 8
41435: PUSH
41436: LD_VAR 0 1
41440: PUSH
41441: LD_VAR 0 3
41445: MINUS
41446: ST_TO_ADDR
// if y - r < 0 then
41447: LD_VAR 0 2
41451: PUSH
41452: LD_VAR 0 3
41456: MINUS
41457: PUSH
41458: LD_INT 0
41460: LESS
41461: IFFALSE 41473
// min_y := 0 else
41463: LD_ADDR_VAR 0 7
41467: PUSH
41468: LD_INT 0
41470: ST_TO_ADDR
41471: GO 41489
// min_y := y - r ;
41473: LD_ADDR_VAR 0 7
41477: PUSH
41478: LD_VAR 0 2
41482: PUSH
41483: LD_VAR 0 3
41487: MINUS
41488: ST_TO_ADDR
// max_x := x + r ;
41489: LD_ADDR_VAR 0 9
41493: PUSH
41494: LD_VAR 0 1
41498: PUSH
41499: LD_VAR 0 3
41503: PLUS
41504: ST_TO_ADDR
// max_y := y + r ;
41505: LD_ADDR_VAR 0 10
41509: PUSH
41510: LD_VAR 0 2
41514: PUSH
41515: LD_VAR 0 3
41519: PLUS
41520: ST_TO_ADDR
// for _x = min_x to max_x do
41521: LD_ADDR_VAR 0 5
41525: PUSH
41526: DOUBLE
41527: LD_VAR 0 8
41531: DEC
41532: ST_TO_ADDR
41533: LD_VAR 0 9
41537: PUSH
41538: FOR_TO
41539: IFFALSE 41640
// for _y = min_y to max_y do
41541: LD_ADDR_VAR 0 6
41545: PUSH
41546: DOUBLE
41547: LD_VAR 0 7
41551: DEC
41552: ST_TO_ADDR
41553: LD_VAR 0 10
41557: PUSH
41558: FOR_TO
41559: IFFALSE 41636
// begin if not ValidHex ( _x , _y ) then
41561: LD_VAR 0 5
41565: PPUSH
41566: LD_VAR 0 6
41570: PPUSH
41571: CALL_OW 488
41575: NOT
41576: IFFALSE 41580
// continue ;
41578: GO 41558
// if GetResourceTypeXY ( _x , _y ) then
41580: LD_VAR 0 5
41584: PPUSH
41585: LD_VAR 0 6
41589: PPUSH
41590: CALL_OW 283
41594: IFFALSE 41634
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41596: LD_ADDR_VAR 0 4
41600: PUSH
41601: LD_VAR 0 4
41605: PPUSH
41606: LD_VAR 0 4
41610: PUSH
41611: LD_INT 1
41613: PLUS
41614: PPUSH
41615: LD_VAR 0 5
41619: PUSH
41620: LD_VAR 0 6
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PPUSH
41629: CALL_OW 1
41633: ST_TO_ADDR
// end ;
41634: GO 41558
41636: POP
41637: POP
41638: GO 41538
41640: POP
41641: POP
// end ;
41642: LD_VAR 0 4
41646: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41647: LD_INT 0
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
41656: PPUSH
// if not units then
41657: LD_VAR 0 1
41661: NOT
41662: IFFALSE 41666
// exit ;
41664: GO 42190
// result := UnitFilter ( units , [ f_ok ] ) ;
41666: LD_ADDR_VAR 0 3
41670: PUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: LD_INT 50
41678: PUSH
41679: EMPTY
41680: LIST
41681: PPUSH
41682: CALL_OW 72
41686: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41687: LD_ADDR_VAR 0 8
41691: PUSH
41692: LD_VAR 0 1
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: PPUSH
41701: CALL_OW 255
41705: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41706: LD_ADDR_VAR 0 10
41710: PUSH
41711: LD_INT 29
41713: PUSH
41714: LD_INT 91
41716: PUSH
41717: LD_INT 49
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
// if not result then
41725: LD_VAR 0 3
41729: NOT
41730: IFFALSE 41734
// exit ;
41732: GO 42190
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_INT 81
41741: PUSH
41742: LD_VAR 0 8
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PPUSH
41751: CALL_OW 69
41755: ST_TO_ADDR
// for i in result do
41756: LD_ADDR_VAR 0 4
41760: PUSH
41761: LD_VAR 0 3
41765: PUSH
41766: FOR_IN
41767: IFFALSE 42188
// begin tag := GetTag ( i ) + 1 ;
41769: LD_ADDR_VAR 0 9
41773: PUSH
41774: LD_VAR 0 4
41778: PPUSH
41779: CALL_OW 110
41783: PUSH
41784: LD_INT 1
41786: PLUS
41787: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41788: LD_ADDR_VAR 0 7
41792: PUSH
41793: LD_VAR 0 4
41797: PPUSH
41798: CALL_OW 250
41802: PPUSH
41803: LD_VAR 0 4
41807: PPUSH
41808: CALL_OW 251
41812: PPUSH
41813: LD_INT 6
41815: PPUSH
41816: CALL 41389 0 3
41820: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41821: LD_VAR 0 4
41825: PPUSH
41826: CALL_OW 247
41830: PUSH
41831: LD_INT 2
41833: EQUAL
41834: PUSH
41835: LD_VAR 0 7
41839: AND
41840: PUSH
41841: LD_VAR 0 4
41845: PPUSH
41846: CALL_OW 264
41850: PUSH
41851: LD_VAR 0 10
41855: IN
41856: NOT
41857: AND
41858: IFFALSE 41897
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41860: LD_VAR 0 4
41864: PPUSH
41865: LD_VAR 0 7
41869: PUSH
41870: LD_INT 1
41872: ARRAY
41873: PUSH
41874: LD_INT 1
41876: ARRAY
41877: PPUSH
41878: LD_VAR 0 7
41882: PUSH
41883: LD_INT 1
41885: ARRAY
41886: PUSH
41887: LD_INT 2
41889: ARRAY
41890: PPUSH
41891: CALL_OW 116
41895: GO 42186
// if path > tag then
41897: LD_VAR 0 2
41901: PUSH
41902: LD_VAR 0 9
41906: GREATER
41907: IFFALSE 42115
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41909: LD_ADDR_VAR 0 6
41913: PUSH
41914: LD_VAR 0 5
41918: PPUSH
41919: LD_INT 91
41921: PUSH
41922: LD_VAR 0 4
41926: PUSH
41927: LD_INT 8
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: PPUSH
41935: CALL_OW 72
41939: ST_TO_ADDR
// if nearEnemy then
41940: LD_VAR 0 6
41944: IFFALSE 42013
// begin if GetWeapon ( i ) = ru_time_lapser then
41946: LD_VAR 0 4
41950: PPUSH
41951: CALL_OW 264
41955: PUSH
41956: LD_INT 49
41958: EQUAL
41959: IFFALSE 41987
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41961: LD_VAR 0 4
41965: PPUSH
41966: LD_VAR 0 6
41970: PPUSH
41971: LD_VAR 0 4
41975: PPUSH
41976: CALL_OW 74
41980: PPUSH
41981: CALL_OW 112
41985: GO 42011
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41987: LD_VAR 0 4
41991: PPUSH
41992: LD_VAR 0 6
41996: PPUSH
41997: LD_VAR 0 4
42001: PPUSH
42002: CALL_OW 74
42006: PPUSH
42007: CALL_OW 115
// end else
42011: GO 42113
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42013: LD_VAR 0 4
42017: PPUSH
42018: LD_VAR 0 2
42022: PUSH
42023: LD_VAR 0 9
42027: ARRAY
42028: PUSH
42029: LD_INT 1
42031: ARRAY
42032: PPUSH
42033: LD_VAR 0 2
42037: PUSH
42038: LD_VAR 0 9
42042: ARRAY
42043: PUSH
42044: LD_INT 2
42046: ARRAY
42047: PPUSH
42048: CALL_OW 297
42052: PUSH
42053: LD_INT 6
42055: GREATER
42056: IFFALSE 42099
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42058: LD_VAR 0 4
42062: PPUSH
42063: LD_VAR 0 2
42067: PUSH
42068: LD_VAR 0 9
42072: ARRAY
42073: PUSH
42074: LD_INT 1
42076: ARRAY
42077: PPUSH
42078: LD_VAR 0 2
42082: PUSH
42083: LD_VAR 0 9
42087: ARRAY
42088: PUSH
42089: LD_INT 2
42091: ARRAY
42092: PPUSH
42093: CALL_OW 114
42097: GO 42113
// SetTag ( i , tag ) ;
42099: LD_VAR 0 4
42103: PPUSH
42104: LD_VAR 0 9
42108: PPUSH
42109: CALL_OW 109
// end else
42113: GO 42186
// if enemy then
42115: LD_VAR 0 5
42119: IFFALSE 42186
// begin if GetWeapon ( i ) = ru_time_lapser then
42121: LD_VAR 0 4
42125: PPUSH
42126: CALL_OW 264
42130: PUSH
42131: LD_INT 49
42133: EQUAL
42134: IFFALSE 42162
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42136: LD_VAR 0 4
42140: PPUSH
42141: LD_VAR 0 5
42145: PPUSH
42146: LD_VAR 0 4
42150: PPUSH
42151: CALL_OW 74
42155: PPUSH
42156: CALL_OW 112
42160: GO 42186
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42162: LD_VAR 0 4
42166: PPUSH
42167: LD_VAR 0 5
42171: PPUSH
42172: LD_VAR 0 4
42176: PPUSH
42177: CALL_OW 74
42181: PPUSH
42182: CALL_OW 115
// end ; end ;
42186: GO 41766
42188: POP
42189: POP
// end ;
42190: LD_VAR 0 3
42194: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
42199: PPUSH
// if not unit or IsInUnit ( unit ) then
42200: LD_VAR 0 1
42204: NOT
42205: PUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 310
42215: OR
42216: IFFALSE 42220
// exit ;
42218: GO 42311
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42220: LD_ADDR_VAR 0 4
42224: PUSH
42225: LD_VAR 0 1
42229: PPUSH
42230: CALL_OW 250
42234: PPUSH
42235: LD_VAR 0 2
42239: PPUSH
42240: LD_INT 1
42242: PPUSH
42243: CALL_OW 272
42247: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42248: LD_ADDR_VAR 0 5
42252: PUSH
42253: LD_VAR 0 1
42257: PPUSH
42258: CALL_OW 251
42262: PPUSH
42263: LD_VAR 0 2
42267: PPUSH
42268: LD_INT 1
42270: PPUSH
42271: CALL_OW 273
42275: ST_TO_ADDR
// if ValidHex ( x , y ) then
42276: LD_VAR 0 4
42280: PPUSH
42281: LD_VAR 0 5
42285: PPUSH
42286: CALL_OW 488
42290: IFFALSE 42311
// ComTurnXY ( unit , x , y ) ;
42292: LD_VAR 0 1
42296: PPUSH
42297: LD_VAR 0 4
42301: PPUSH
42302: LD_VAR 0 5
42306: PPUSH
42307: CALL_OW 118
// end ;
42311: LD_VAR 0 3
42315: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42316: LD_INT 0
42318: PPUSH
42319: PPUSH
// result := false ;
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: LD_INT 0
42327: ST_TO_ADDR
// if not units then
42328: LD_VAR 0 2
42332: NOT
42333: IFFALSE 42337
// exit ;
42335: GO 42382
// for i in units do
42337: LD_ADDR_VAR 0 4
42341: PUSH
42342: LD_VAR 0 2
42346: PUSH
42347: FOR_IN
42348: IFFALSE 42380
// if See ( side , i ) then
42350: LD_VAR 0 1
42354: PPUSH
42355: LD_VAR 0 4
42359: PPUSH
42360: CALL_OW 292
42364: IFFALSE 42378
// begin result := true ;
42366: LD_ADDR_VAR 0 3
42370: PUSH
42371: LD_INT 1
42373: ST_TO_ADDR
// exit ;
42374: POP
42375: POP
42376: GO 42382
// end ;
42378: GO 42347
42380: POP
42381: POP
// end ;
42382: LD_VAR 0 3
42386: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42387: LD_INT 0
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
// if not unit or not points then
42393: LD_VAR 0 1
42397: NOT
42398: PUSH
42399: LD_VAR 0 2
42403: NOT
42404: OR
42405: IFFALSE 42409
// exit ;
42407: GO 42499
// dist := 99999 ;
42409: LD_ADDR_VAR 0 5
42413: PUSH
42414: LD_INT 99999
42416: ST_TO_ADDR
// for i in points do
42417: LD_ADDR_VAR 0 4
42421: PUSH
42422: LD_VAR 0 2
42426: PUSH
42427: FOR_IN
42428: IFFALSE 42497
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42430: LD_ADDR_VAR 0 6
42434: PUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: LD_VAR 0 4
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: PPUSH
42449: LD_VAR 0 4
42453: PUSH
42454: LD_INT 2
42456: ARRAY
42457: PPUSH
42458: CALL_OW 297
42462: ST_TO_ADDR
// if tmpDist < dist then
42463: LD_VAR 0 6
42467: PUSH
42468: LD_VAR 0 5
42472: LESS
42473: IFFALSE 42495
// begin result := i ;
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: LD_VAR 0 4
42484: ST_TO_ADDR
// dist := tmpDist ;
42485: LD_ADDR_VAR 0 5
42489: PUSH
42490: LD_VAR 0 6
42494: ST_TO_ADDR
// end ; end ;
42495: GO 42427
42497: POP
42498: POP
// end ;
42499: LD_VAR 0 3
42503: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42504: LD_INT 0
42506: PPUSH
// uc_side := side ;
42507: LD_ADDR_OWVAR 20
42511: PUSH
42512: LD_VAR 0 1
42516: ST_TO_ADDR
// uc_nation := 3 ;
42517: LD_ADDR_OWVAR 21
42521: PUSH
42522: LD_INT 3
42524: ST_TO_ADDR
// vc_chassis := 25 ;
42525: LD_ADDR_OWVAR 37
42529: PUSH
42530: LD_INT 25
42532: ST_TO_ADDR
// vc_engine := engine_siberite ;
42533: LD_ADDR_OWVAR 39
42537: PUSH
42538: LD_INT 3
42540: ST_TO_ADDR
// vc_control := control_computer ;
42541: LD_ADDR_OWVAR 38
42545: PUSH
42546: LD_INT 3
42548: ST_TO_ADDR
// vc_weapon := 59 ;
42549: LD_ADDR_OWVAR 40
42553: PUSH
42554: LD_INT 59
42556: ST_TO_ADDR
// result := CreateVehicle ;
42557: LD_ADDR_VAR 0 5
42561: PUSH
42562: CALL_OW 45
42566: ST_TO_ADDR
// SetDir ( result , d ) ;
42567: LD_VAR 0 5
42571: PPUSH
42572: LD_VAR 0 4
42576: PPUSH
42577: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_VAR 0 2
42590: PPUSH
42591: LD_VAR 0 3
42595: PPUSH
42596: LD_INT 0
42598: PPUSH
42599: CALL_OW 48
// end ;
42603: LD_VAR 0 5
42607: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42608: LD_INT 0
42610: PPUSH
42611: PPUSH
42612: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42613: LD_ADDR_VAR 0 2
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42636: LD_VAR 0 1
42640: NOT
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 264
42651: PUSH
42652: LD_INT 12
42654: PUSH
42655: LD_INT 51
42657: PUSH
42658: LD_INT 32
42660: PUSH
42661: LD_INT 89
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: IN
42670: NOT
42671: OR
42672: IFFALSE 42676
// exit ;
42674: GO 42774
// for i := 1 to 3 do
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: DOUBLE
42682: LD_INT 1
42684: DEC
42685: ST_TO_ADDR
42686: LD_INT 3
42688: PUSH
42689: FOR_TO
42690: IFFALSE 42772
// begin tmp := GetCargo ( cargo , i ) ;
42692: LD_ADDR_VAR 0 4
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_VAR 0 3
42706: PPUSH
42707: CALL_OW 289
42711: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42712: LD_ADDR_VAR 0 2
42716: PUSH
42717: LD_VAR 0 2
42721: PPUSH
42722: LD_VAR 0 3
42726: PPUSH
42727: LD_VAR 0 4
42731: PPUSH
42732: CALL_OW 1
42736: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42737: LD_ADDR_VAR 0 2
42741: PUSH
42742: LD_VAR 0 2
42746: PPUSH
42747: LD_INT 4
42749: PPUSH
42750: LD_VAR 0 2
42754: PUSH
42755: LD_INT 4
42757: ARRAY
42758: PUSH
42759: LD_VAR 0 4
42763: PLUS
42764: PPUSH
42765: CALL_OW 1
42769: ST_TO_ADDR
// end ;
42770: GO 42689
42772: POP
42773: POP
// end ;
42774: LD_VAR 0 2
42778: RET
// export function Length ( array ) ; begin
42779: LD_INT 0
42781: PPUSH
// result := array + 0 ;
42782: LD_ADDR_VAR 0 2
42786: PUSH
42787: LD_VAR 0 1
42791: PUSH
42792: LD_INT 0
42794: PLUS
42795: ST_TO_ADDR
// end ;
42796: LD_VAR 0 2
42800: RET
// export function PrepareArray ( array ) ; begin
42801: LD_INT 0
42803: PPUSH
// result := array diff 0 ;
42804: LD_ADDR_VAR 0 2
42808: PUSH
42809: LD_VAR 0 1
42813: PUSH
42814: LD_INT 0
42816: DIFF
42817: ST_TO_ADDR
// if not result [ 1 ] then
42818: LD_VAR 0 2
42822: PUSH
42823: LD_INT 1
42825: ARRAY
42826: NOT
42827: IFFALSE 42847
// result := Delete ( result , 1 ) ;
42829: LD_ADDR_VAR 0 2
42833: PUSH
42834: LD_VAR 0 2
42838: PPUSH
42839: LD_INT 1
42841: PPUSH
42842: CALL_OW 3
42846: ST_TO_ADDR
// end ;
42847: LD_VAR 0 2
42851: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42852: LD_INT 0
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
// sibRocketRange := 25 ;
42858: LD_ADDR_VAR 0 6
42862: PUSH
42863: LD_INT 25
42865: ST_TO_ADDR
// result := false ;
42866: LD_ADDR_VAR 0 4
42870: PUSH
42871: LD_INT 0
42873: ST_TO_ADDR
// for i := 0 to 5 do
42874: LD_ADDR_VAR 0 5
42878: PUSH
42879: DOUBLE
42880: LD_INT 0
42882: DEC
42883: ST_TO_ADDR
42884: LD_INT 5
42886: PUSH
42887: FOR_TO
42888: IFFALSE 42955
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42890: LD_VAR 0 1
42894: PPUSH
42895: LD_VAR 0 5
42899: PPUSH
42900: LD_VAR 0 6
42904: PPUSH
42905: CALL_OW 272
42909: PPUSH
42910: LD_VAR 0 2
42914: PPUSH
42915: LD_VAR 0 5
42919: PPUSH
42920: LD_VAR 0 6
42924: PPUSH
42925: CALL_OW 273
42929: PPUSH
42930: LD_VAR 0 3
42934: PPUSH
42935: CALL_OW 309
42939: IFFALSE 42953
// begin result := true ;
42941: LD_ADDR_VAR 0 4
42945: PUSH
42946: LD_INT 1
42948: ST_TO_ADDR
// exit ;
42949: POP
42950: POP
42951: GO 42957
// end ;
42953: GO 42887
42955: POP
42956: POP
// end ;
42957: LD_VAR 0 4
42961: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42962: LD_INT 0
42964: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42965: LD_VAR 0 1
42969: PPUSH
42970: LD_VAR 0 2
42974: PPUSH
42975: LD_INT 0
42977: PPUSH
42978: LD_INT 0
42980: PPUSH
42981: LD_INT 1
42983: PPUSH
42984: LD_INT 0
42986: PPUSH
42987: CALL_OW 587
// end ;
42991: LD_VAR 0 3
42995: RET
