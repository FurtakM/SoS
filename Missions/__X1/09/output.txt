// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1562 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1562 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1562 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1562 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1562 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1562 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1562 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1562 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1562 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1562 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1562 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1562 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1562 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// music_nat := 2 ;
 635: LD_ADDR_OWVAR 71
 639: PUSH
 640: LD_INT 2
 642: ST_TO_ADDR
// Video ( true ) ;
 643: LD_INT 1
 645: PPUSH
 646: CALL 39002 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 650: LD_EXP 3
 654: PPUSH
 655: LD_INT 51
 657: PPUSH
 658: LD_INT 23
 660: PPUSH
 661: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 665: LD_OWVAR 3
 669: PUSH
 670: LD_EXP 3
 674: DIFF
 675: PPUSH
 676: LD_INT 53
 678: PPUSH
 679: LD_INT 27
 681: PPUSH
 682: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 686: LD_INT 52
 688: PPUSH
 689: LD_INT 25
 691: PPUSH
 692: CALL_OW 86
// wait ( 0 0$2 ) ;
 696: LD_INT 70
 698: PPUSH
 699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 703: LD_INT 35
 705: PPUSH
 706: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 51
 717: PPUSH
 718: LD_INT 23
 720: PPUSH
 721: CALL_OW 307
 725: PUSH
 726: LD_EXP 3
 730: PPUSH
 731: CALL_OW 314
 735: NOT
 736: OR
 737: IFFALSE 703
// ComTurnXY ( Heike , 53 , 26 ) ;
 739: LD_EXP 3
 743: PPUSH
 744: LD_INT 53
 746: PPUSH
 747: LD_INT 26
 749: PPUSH
 750: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 754: LD_INT 10
 756: PPUSH
 757: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_STRING DH-Intro-1
 768: PPUSH
 769: CALL_OW 88
// ComHold ( all_units ) ;
 773: LD_OWVAR 3
 777: PPUSH
 778: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 782: LD_OWVAR 3
 786: PUSH
 787: LD_EXP 3
 791: DIFF
 792: PPUSH
 793: LD_EXP 3
 797: PPUSH
 798: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 802: LD_EXP 17
 806: PUSH
 807: LD_STRING 08_DealWithDoug
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 30
 817: AND
 818: IFFALSE 930
// begin ComTurnUnit ( Heike , Doug ) ;
 820: LD_EXP 3
 824: PPUSH
 825: LD_EXP 17
 829: PPUSH
 830: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 834: LD_EXP 17
 838: PPUSH
 839: LD_STRING DCa-Intro-a-2
 841: PPUSH
 842: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_STRING DH-Intro-a-3
 853: PPUSH
 854: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 858: LD_EXP 17
 862: PPUSH
 863: LD_STRING DCa-Intro-a-4
 865: PPUSH
 866: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 870: LD_EXP 3
 874: PPUSH
 875: LD_STRING DH-Intro-a-5
 877: PPUSH
 878: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 882: LD_EXP 17
 886: PPUSH
 887: LD_STRING DCa-Intro-a-6
 889: PPUSH
 890: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 894: LD_EXP 16
 898: PUSH
 899: LD_EXP 17
 903: ADD
 904: PUSH
 905: LD_EXP 15
 909: ADD
 910: PPUSH
 911: LD_INT 5
 913: PPUSH
 914: LD_INT 7
 916: PPUSH
 917: CALL_OW 111
// wait ( 0 0$01 ) ;
 921: LD_INT 35
 923: PPUSH
 924: CALL_OW 67
// end else
 928: GO 1032
// if Harris then
 930: LD_EXP 16
 934: IFFALSE 1032
// begin ComTurnUnit ( Heike , Harris ) ;
 936: LD_EXP 3
 940: PPUSH
 941: LD_EXP 16
 945: PPUSH
 946: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 950: LD_EXP 16
 954: PPUSH
 955: LD_STRING DJ-Intro-2
 957: PPUSH
 958: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING DH-Intro-3
 969: PPUSH
 970: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 974: LD_EXP 3
 978: PPUSH
 979: LD_STRING DH-Intro-4
 981: PPUSH
 982: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 986: LD_EXP 16
 990: PPUSH
 991: LD_STRING DJ-Intro-5
 993: PPUSH
 994: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 998: LD_EXP 16
1002: PUSH
1003: LD_EXP 17
1007: ADD
1008: PUSH
1009: LD_EXP 15
1013: ADD
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: LD_INT 7
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$01 ) ;
1025: LD_INT 35
1027: PPUSH
1028: CALL_OW 67
// end ; if Givi then
1032: LD_EXP 4
1036: IFFALSE 1119
// begin ComMoveUnit ( Givi , Heike ) ;
1038: LD_EXP 4
1042: PPUSH
1043: LD_EXP 3
1047: PPUSH
1048: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
1052: LD_INT 35
1054: PPUSH
1055: CALL_OW 67
// until GetDistUnits ( Heike , Givi ) < 4 ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_EXP 4
1068: PPUSH
1069: CALL_OW 296
1073: PUSH
1074: LD_INT 4
1076: LESS
1077: IFFALSE 1052
// ComTurnUnit ( Givi , Heike ) ;
1079: LD_EXP 4
1083: PPUSH
1084: LD_EXP 3
1088: PPUSH
1089: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1093: LD_EXP 3
1097: PPUSH
1098: LD_EXP 4
1102: PPUSH
1103: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_STRING DG-Intro-7
1114: PPUSH
1115: CALL_OW 88
// end ; if not Givi then
1119: LD_EXP 4
1123: NOT
1124: IFFALSE 1141
// ComTurnXY ( Heike , 52 , 25 ) ;
1126: LD_EXP 3
1130: PPUSH
1131: LD_INT 52
1133: PPUSH
1134: LD_INT 25
1136: PPUSH
1137: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1141: LD_EXP 3
1145: PPUSH
1146: LD_STRING DH-Intro-7
1148: PPUSH
1149: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1153: LD_INT 22
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 69
1167: PPUSH
1168: LD_INT 48
1170: PPUSH
1171: LD_INT 4
1173: PPUSH
1174: CALL_OW 111
// wait ( 0 0$3 ) ;
1178: LD_INT 105
1180: PPUSH
1181: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1185: LD_INT 74
1187: PPUSH
1188: LD_INT 79
1190: PPUSH
1191: LD_INT 2
1193: PPUSH
1194: LD_INT 16
1196: NEG
1197: PPUSH
1198: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1202: LD_INT 74
1204: PPUSH
1205: LD_INT 79
1207: PPUSH
1208: CALL_OW 84
// uc_side := 3 ;
1212: LD_ADDR_OWVAR 20
1216: PUSH
1217: LD_INT 3
1219: ST_TO_ADDR
// uc_nation := nation_russian ;
1220: LD_ADDR_OWVAR 21
1224: PUSH
1225: LD_INT 3
1227: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1228: LD_INT 22
1230: PPUSH
1231: LD_INT 3
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 43
1239: PPUSH
1240: LD_INT 100
1242: PPUSH
1243: CALL 6577 0 5
// un := CreateVehicle ;
1247: LD_ADDR_VAR 0 3
1251: PUSH
1252: CALL_OW 45
1256: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 76
1264: PPUSH
1265: LD_INT 87
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1275: LD_INT 0
1277: PPUSH
1278: LD_INT 8
1280: PPUSH
1281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_VAR 0 3
1294: PPUSH
1295: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1299: LD_VAR 0 3
1303: PPUSH
1304: LD_INT 67
1306: PPUSH
1307: LD_INT 56
1309: PPUSH
1310: CALL_OW 111
// wait ( 0 0$1 ) ;
1314: LD_INT 35
1316: PPUSH
1317: CALL_OW 67
// for i := 1 to 3 do
1321: LD_ADDR_VAR 0 2
1325: PUSH
1326: DOUBLE
1327: LD_INT 1
1329: DEC
1330: ST_TO_ADDR
1331: LD_INT 3
1333: PUSH
1334: FOR_TO
1335: IFFALSE 1395
// begin PrepareSoldier ( false , 8 ) ;
1337: LD_INT 0
1339: PPUSH
1340: LD_INT 8
1342: PPUSH
1343: CALL_OW 381
// un := CreateHuman ;
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: CALL_OW 44
1356: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1357: LD_VAR 0 3
1361: PPUSH
1362: LD_INT 76
1364: PPUSH
1365: LD_INT 87
1367: PPUSH
1368: LD_INT 2
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1378: LD_VAR 0 3
1382: PPUSH
1383: LD_INT 67
1385: PPUSH
1386: LD_INT 56
1388: PPUSH
1389: CALL_OW 111
// end ;
1393: GO 1334
1395: POP
1396: POP
// wait ( 0 0$2 ) ;
1397: LD_INT 70
1399: PPUSH
1400: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1404: LD_INT 1
1406: PPUSH
1407: LD_STRING %_cont
1409: PPUSH
1410: CALL_OW 340
// Video ( false ) ;
1414: LD_INT 0
1416: PPUSH
1417: CALL 39002 0 1
// end ;
1421: LD_VAR 0 1
1425: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1426: LD_INT 5
1428: PPUSH
1429: LD_INT 22
1431: PUSH
1432: LD_INT 4
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PPUSH
1439: CALL_OW 70
1443: IFFALSE 1491
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
// begin enable ;
1451: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_INT 5
1459: PPUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 70
1474: PUSH
1475: FOR_IN
1476: IFFALSE 1489
// RemoveUnit ( i ) ;
1478: LD_VAR 0 1
1482: PPUSH
1483: CALL_OW 64
1487: GO 1475
1489: POP
1490: POP
// end ;
1491: PPOPN 1
1493: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1494: LD_INT 6
1496: PPUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 70
1511: IFFALSE 1559
1513: GO 1515
1515: DISABLE
1516: LD_INT 0
1518: PPUSH
// begin enable ;
1519: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1520: LD_ADDR_VAR 0 1
1524: PUSH
1525: LD_INT 6
1527: PPUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 2
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 70
1542: PUSH
1543: FOR_IN
1544: IFFALSE 1557
// RemoveUnit ( i ) ;
1546: LD_VAR 0 1
1550: PPUSH
1551: CALL_OW 64
1555: GO 1543
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 1
1561: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
// if exist_mode then
1566: LD_VAR 0 2
1570: IFFALSE 1595
// unit := CreateCharacter ( prefix & ident ) else
1572: LD_ADDR_VAR 0 5
1576: PUSH
1577: LD_VAR 0 3
1581: PUSH
1582: LD_VAR 0 1
1586: STR
1587: PPUSH
1588: CALL_OW 34
1592: ST_TO_ADDR
1593: GO 1610
// unit := NewCharacter ( ident ) ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 1
1604: PPUSH
1605: CALL_OW 25
1609: ST_TO_ADDR
// result := unit ;
1610: LD_ADDR_VAR 0 4
1614: PUSH
1615: LD_VAR 0 5
1619: ST_TO_ADDR
// end ;
1620: LD_VAR 0 4
1624: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1625: LD_INT 0
1627: PPUSH
1628: PPUSH
// if not side or not nation then
1629: LD_VAR 0 1
1633: NOT
1634: PUSH
1635: LD_VAR 0 2
1639: NOT
1640: OR
1641: IFFALSE 1645
// exit ;
1643: GO 2413
// case nation of nation_american :
1645: LD_VAR 0 2
1649: PUSH
1650: LD_INT 1
1652: DOUBLE
1653: EQUAL
1654: IFTRUE 1658
1656: GO 1872
1658: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1659: LD_ADDR_VAR 0 4
1663: PUSH
1664: LD_INT 35
1666: PUSH
1667: LD_INT 45
1669: PUSH
1670: LD_INT 46
1672: PUSH
1673: LD_INT 47
1675: PUSH
1676: LD_INT 82
1678: PUSH
1679: LD_INT 83
1681: PUSH
1682: LD_INT 84
1684: PUSH
1685: LD_INT 85
1687: PUSH
1688: LD_INT 86
1690: PUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 6
1699: PUSH
1700: LD_INT 15
1702: PUSH
1703: LD_INT 16
1705: PUSH
1706: LD_INT 7
1708: PUSH
1709: LD_INT 12
1711: PUSH
1712: LD_INT 13
1714: PUSH
1715: LD_INT 10
1717: PUSH
1718: LD_INT 14
1720: PUSH
1721: LD_INT 20
1723: PUSH
1724: LD_INT 21
1726: PUSH
1727: LD_INT 22
1729: PUSH
1730: LD_INT 25
1732: PUSH
1733: LD_INT 32
1735: PUSH
1736: LD_INT 27
1738: PUSH
1739: LD_INT 36
1741: PUSH
1742: LD_INT 69
1744: PUSH
1745: LD_INT 39
1747: PUSH
1748: LD_INT 34
1750: PUSH
1751: LD_INT 40
1753: PUSH
1754: LD_INT 48
1756: PUSH
1757: LD_INT 49
1759: PUSH
1760: LD_INT 50
1762: PUSH
1763: LD_INT 51
1765: PUSH
1766: LD_INT 52
1768: PUSH
1769: LD_INT 53
1771: PUSH
1772: LD_INT 54
1774: PUSH
1775: LD_INT 55
1777: PUSH
1778: LD_INT 56
1780: PUSH
1781: LD_INT 57
1783: PUSH
1784: LD_INT 58
1786: PUSH
1787: LD_INT 59
1789: PUSH
1790: LD_INT 60
1792: PUSH
1793: LD_INT 61
1795: PUSH
1796: LD_INT 62
1798: PUSH
1799: LD_INT 80
1801: PUSH
1802: LD_INT 82
1804: PUSH
1805: LD_INT 83
1807: PUSH
1808: LD_INT 84
1810: PUSH
1811: LD_INT 85
1813: PUSH
1814: LD_INT 86
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: ST_TO_ADDR
1870: GO 2337
1872: LD_INT 2
1874: DOUBLE
1875: EQUAL
1876: IFTRUE 1880
1878: GO 2106
1880: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1881: LD_ADDR_VAR 0 4
1885: PUSH
1886: LD_INT 35
1888: PUSH
1889: LD_INT 45
1891: PUSH
1892: LD_INT 46
1894: PUSH
1895: LD_INT 47
1897: PUSH
1898: LD_INT 82
1900: PUSH
1901: LD_INT 83
1903: PUSH
1904: LD_INT 84
1906: PUSH
1907: LD_INT 85
1909: PUSH
1910: LD_INT 87
1912: PUSH
1913: LD_INT 70
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 11
1921: PUSH
1922: LD_INT 3
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: LD_INT 6
1933: PUSH
1934: LD_INT 15
1936: PUSH
1937: LD_INT 18
1939: PUSH
1940: LD_INT 7
1942: PUSH
1943: LD_INT 17
1945: PUSH
1946: LD_INT 8
1948: PUSH
1949: LD_INT 20
1951: PUSH
1952: LD_INT 21
1954: PUSH
1955: LD_INT 22
1957: PUSH
1958: LD_INT 72
1960: PUSH
1961: LD_INT 26
1963: PUSH
1964: LD_INT 69
1966: PUSH
1967: LD_INT 39
1969: PUSH
1970: LD_INT 40
1972: PUSH
1973: LD_INT 41
1975: PUSH
1976: LD_INT 42
1978: PUSH
1979: LD_INT 43
1981: PUSH
1982: LD_INT 48
1984: PUSH
1985: LD_INT 49
1987: PUSH
1988: LD_INT 50
1990: PUSH
1991: LD_INT 51
1993: PUSH
1994: LD_INT 52
1996: PUSH
1997: LD_INT 53
1999: PUSH
2000: LD_INT 54
2002: PUSH
2003: LD_INT 55
2005: PUSH
2006: LD_INT 56
2008: PUSH
2009: LD_INT 60
2011: PUSH
2012: LD_INT 61
2014: PUSH
2015: LD_INT 62
2017: PUSH
2018: LD_INT 66
2020: PUSH
2021: LD_INT 67
2023: PUSH
2024: LD_INT 68
2026: PUSH
2027: LD_INT 81
2029: PUSH
2030: LD_INT 82
2032: PUSH
2033: LD_INT 83
2035: PUSH
2036: LD_INT 84
2038: PUSH
2039: LD_INT 85
2041: PUSH
2042: LD_INT 87
2044: PUSH
2045: LD_INT 88
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: ST_TO_ADDR
2104: GO 2337
2106: LD_INT 3
2108: DOUBLE
2109: EQUAL
2110: IFTRUE 2114
2112: GO 2336
2114: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: LD_INT 46
2122: PUSH
2123: LD_INT 47
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: LD_INT 2
2131: PUSH
2132: LD_INT 82
2134: PUSH
2135: LD_INT 83
2137: PUSH
2138: LD_INT 84
2140: PUSH
2141: LD_INT 85
2143: PUSH
2144: LD_INT 86
2146: PUSH
2147: LD_INT 11
2149: PUSH
2150: LD_INT 9
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: LD_INT 19
2158: PUSH
2159: LD_INT 21
2161: PUSH
2162: LD_INT 24
2164: PUSH
2165: LD_INT 22
2167: PUSH
2168: LD_INT 25
2170: PUSH
2171: LD_INT 28
2173: PUSH
2174: LD_INT 29
2176: PUSH
2177: LD_INT 30
2179: PUSH
2180: LD_INT 31
2182: PUSH
2183: LD_INT 37
2185: PUSH
2186: LD_INT 38
2188: PUSH
2189: LD_INT 32
2191: PUSH
2192: LD_INT 27
2194: PUSH
2195: LD_INT 33
2197: PUSH
2198: LD_INT 69
2200: PUSH
2201: LD_INT 39
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: LD_INT 40
2209: PUSH
2210: LD_INT 71
2212: PUSH
2213: LD_INT 23
2215: PUSH
2216: LD_INT 44
2218: PUSH
2219: LD_INT 48
2221: PUSH
2222: LD_INT 49
2224: PUSH
2225: LD_INT 50
2227: PUSH
2228: LD_INT 51
2230: PUSH
2231: LD_INT 52
2233: PUSH
2234: LD_INT 53
2236: PUSH
2237: LD_INT 54
2239: PUSH
2240: LD_INT 55
2242: PUSH
2243: LD_INT 56
2245: PUSH
2246: LD_INT 57
2248: PUSH
2249: LD_INT 58
2251: PUSH
2252: LD_INT 59
2254: PUSH
2255: LD_INT 63
2257: PUSH
2258: LD_INT 64
2260: PUSH
2261: LD_INT 65
2263: PUSH
2264: LD_INT 82
2266: PUSH
2267: LD_INT 83
2269: PUSH
2270: LD_INT 84
2272: PUSH
2273: LD_INT 85
2275: PUSH
2276: LD_INT 86
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: ST_TO_ADDR
2334: GO 2337
2336: POP
// if state > - 1 and state < 3 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 1
2344: NEG
2345: GREATER
2346: PUSH
2347: LD_VAR 0 3
2351: PUSH
2352: LD_INT 3
2354: LESS
2355: AND
2356: IFFALSE 2413
// for i in result do
2358: LD_ADDR_VAR 0 5
2362: PUSH
2363: LD_VAR 0 4
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2411
// if GetTech ( i , side ) <> state then
2371: LD_VAR 0 5
2375: PPUSH
2376: LD_VAR 0 1
2380: PPUSH
2381: CALL_OW 321
2385: PUSH
2386: LD_VAR 0 3
2390: NONEQUAL
2391: IFFALSE 2409
// result := result diff i ;
2393: LD_ADDR_VAR 0 4
2397: PUSH
2398: LD_VAR 0 4
2402: PUSH
2403: LD_VAR 0 5
2407: DIFF
2408: ST_TO_ADDR
2409: GO 2368
2411: POP
2412: POP
// end ;
2413: LD_VAR 0 4
2417: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2418: LD_INT 0
2420: PPUSH
2421: PPUSH
2422: PPUSH
// result := true ;
2423: LD_ADDR_VAR 0 3
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2431: LD_ADDR_VAR 0 5
2435: PUSH
2436: LD_VAR 0 2
2440: PPUSH
2441: CALL_OW 480
2445: ST_TO_ADDR
// if not tmp then
2446: LD_VAR 0 5
2450: NOT
2451: IFFALSE 2455
// exit ;
2453: GO 2504
// for i in tmp do
2455: LD_ADDR_VAR 0 4
2459: PUSH
2460: LD_VAR 0 5
2464: PUSH
2465: FOR_IN
2466: IFFALSE 2502
// if GetTech ( i , side ) <> state_researched then
2468: LD_VAR 0 4
2472: PPUSH
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 321
2482: PUSH
2483: LD_INT 2
2485: NONEQUAL
2486: IFFALSE 2500
// begin result := false ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: LD_INT 0
2495: ST_TO_ADDR
// exit ;
2496: POP
2497: POP
2498: GO 2504
// end ;
2500: GO 2465
2502: POP
2503: POP
// end ;
2504: LD_VAR 0 3
2508: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2509: LD_INT 0
2511: PPUSH
2512: PPUSH
2513: PPUSH
2514: PPUSH
2515: PPUSH
2516: PPUSH
2517: PPUSH
2518: PPUSH
2519: PPUSH
2520: PPUSH
2521: PPUSH
2522: PPUSH
2523: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2524: LD_VAR 0 1
2528: NOT
2529: PUSH
2530: LD_VAR 0 1
2534: PPUSH
2535: CALL_OW 257
2539: PUSH
2540: LD_INT 9
2542: NONEQUAL
2543: OR
2544: IFFALSE 2548
// exit ;
2546: GO 3121
// side := GetSide ( unit ) ;
2548: LD_ADDR_VAR 0 9
2552: PUSH
2553: LD_VAR 0 1
2557: PPUSH
2558: CALL_OW 255
2562: ST_TO_ADDR
// tech_space := tech_spacanom ;
2563: LD_ADDR_VAR 0 12
2567: PUSH
2568: LD_INT 29
2570: ST_TO_ADDR
// tech_time := tech_taurad ;
2571: LD_ADDR_VAR 0 13
2575: PUSH
2576: LD_INT 28
2578: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2579: LD_ADDR_VAR 0 11
2583: PUSH
2584: LD_VAR 0 1
2588: PPUSH
2589: CALL_OW 310
2593: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2594: LD_VAR 0 11
2598: PPUSH
2599: CALL_OW 247
2603: PUSH
2604: LD_INT 2
2606: EQUAL
2607: IFFALSE 2611
// exit ;
2609: GO 3121
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2611: LD_ADDR_VAR 0 8
2615: PUSH
2616: LD_INT 81
2618: PUSH
2619: LD_VAR 0 9
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: LD_INT 21
2633: PUSH
2634: LD_INT 3
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PPUSH
2649: CALL_OW 69
2653: ST_TO_ADDR
// if not tmp then
2654: LD_VAR 0 8
2658: NOT
2659: IFFALSE 2663
// exit ;
2661: GO 3121
// if in_unit then
2663: LD_VAR 0 11
2667: IFFALSE 2691
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2669: LD_ADDR_VAR 0 10
2673: PUSH
2674: LD_VAR 0 8
2678: PPUSH
2679: LD_VAR 0 11
2683: PPUSH
2684: CALL_OW 74
2688: ST_TO_ADDR
2689: GO 2711
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2691: LD_ADDR_VAR 0 10
2695: PUSH
2696: LD_VAR 0 8
2700: PPUSH
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL_OW 74
2710: ST_TO_ADDR
// if not enemy then
2711: LD_VAR 0 10
2715: NOT
2716: IFFALSE 2720
// exit ;
2718: GO 3121
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2720: LD_VAR 0 11
2724: PUSH
2725: LD_VAR 0 11
2729: PPUSH
2730: LD_VAR 0 10
2734: PPUSH
2735: CALL_OW 296
2739: PUSH
2740: LD_INT 13
2742: GREATER
2743: AND
2744: PUSH
2745: LD_VAR 0 1
2749: PPUSH
2750: LD_VAR 0 10
2754: PPUSH
2755: CALL_OW 296
2759: PUSH
2760: LD_INT 12
2762: GREATER
2763: OR
2764: IFFALSE 2768
// exit ;
2766: GO 3121
// missile := [ 1 ] ;
2768: LD_ADDR_VAR 0 14
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: EMPTY
2777: LIST
2778: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2779: LD_VAR 0 9
2783: PPUSH
2784: LD_VAR 0 12
2788: PPUSH
2789: CALL_OW 325
2793: IFFALSE 2822
// missile := Replace ( missile , missile + 1 , 2 ) ;
2795: LD_ADDR_VAR 0 14
2799: PUSH
2800: LD_VAR 0 14
2804: PPUSH
2805: LD_VAR 0 14
2809: PUSH
2810: LD_INT 1
2812: PLUS
2813: PPUSH
2814: LD_INT 2
2816: PPUSH
2817: CALL_OW 1
2821: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2822: LD_VAR 0 9
2826: PPUSH
2827: LD_VAR 0 13
2831: PPUSH
2832: CALL_OW 325
2836: PUSH
2837: LD_VAR 0 10
2841: PPUSH
2842: CALL_OW 255
2846: PPUSH
2847: LD_VAR 0 13
2851: PPUSH
2852: CALL_OW 325
2856: NOT
2857: AND
2858: IFFALSE 2887
// missile := Replace ( missile , missile + 1 , 3 ) ;
2860: LD_ADDR_VAR 0 14
2864: PUSH
2865: LD_VAR 0 14
2869: PPUSH
2870: LD_VAR 0 14
2874: PUSH
2875: LD_INT 1
2877: PLUS
2878: PPUSH
2879: LD_INT 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// if missile < 2 then
2887: LD_VAR 0 14
2891: PUSH
2892: LD_INT 2
2894: LESS
2895: IFFALSE 2899
// exit ;
2897: GO 3121
// x := GetX ( enemy ) ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_VAR 0 10
2908: PPUSH
2909: CALL_OW 250
2913: ST_TO_ADDR
// y := GetY ( enemy ) ;
2914: LD_ADDR_VAR 0 5
2918: PUSH
2919: LD_VAR 0 10
2923: PPUSH
2924: CALL_OW 251
2928: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2929: LD_ADDR_VAR 0 6
2933: PUSH
2934: LD_VAR 0 4
2938: PUSH
2939: LD_INT 1
2941: NEG
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: CALL_OW 12
2950: PLUS
2951: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2952: LD_ADDR_VAR 0 7
2956: PUSH
2957: LD_VAR 0 5
2961: PUSH
2962: LD_INT 1
2964: NEG
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 12
2973: PLUS
2974: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2975: LD_VAR 0 6
2979: PPUSH
2980: LD_VAR 0 7
2984: PPUSH
2985: CALL_OW 488
2989: NOT
2990: IFFALSE 3012
// begin _x := x ;
2992: LD_ADDR_VAR 0 6
2996: PUSH
2997: LD_VAR 0 4
3001: ST_TO_ADDR
// _y := y ;
3002: LD_ADDR_VAR 0 7
3006: PUSH
3007: LD_VAR 0 5
3011: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3012: LD_ADDR_VAR 0 3
3016: PUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_VAR 0 14
3024: PPUSH
3025: CALL_OW 12
3029: ST_TO_ADDR
// case i of 1 :
3030: LD_VAR 0 3
3034: PUSH
3035: LD_INT 1
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3060
3043: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3044: LD_VAR 0 1
3048: PPUSH
3049: LD_VAR 0 10
3053: PPUSH
3054: CALL_OW 115
3058: GO 3121
3060: LD_INT 2
3062: DOUBLE
3063: EQUAL
3064: IFTRUE 3068
3066: GO 3090
3068: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3069: LD_VAR 0 1
3073: PPUSH
3074: LD_VAR 0 6
3078: PPUSH
3079: LD_VAR 0 7
3083: PPUSH
3084: CALL_OW 153
3088: GO 3121
3090: LD_INT 3
3092: DOUBLE
3093: EQUAL
3094: IFTRUE 3098
3096: GO 3120
3098: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3099: LD_VAR 0 1
3103: PPUSH
3104: LD_VAR 0 6
3108: PPUSH
3109: LD_VAR 0 7
3113: PPUSH
3114: CALL_OW 154
3118: GO 3121
3120: POP
// end ;
3121: LD_VAR 0 2
3125: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3126: LD_INT 0
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
// if not unit or not building then
3134: LD_VAR 0 1
3138: NOT
3139: PUSH
3140: LD_VAR 0 2
3144: NOT
3145: OR
3146: IFFALSE 3150
// exit ;
3148: GO 3308
// x := GetX ( building ) ;
3150: LD_ADDR_VAR 0 5
3154: PUSH
3155: LD_VAR 0 2
3159: PPUSH
3160: CALL_OW 250
3164: ST_TO_ADDR
// y := GetY ( building ) ;
3165: LD_ADDR_VAR 0 6
3169: PUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: CALL_OW 251
3179: ST_TO_ADDR
// for i = 0 to 5 do
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: DOUBLE
3186: LD_INT 0
3188: DEC
3189: ST_TO_ADDR
3190: LD_INT 5
3192: PUSH
3193: FOR_TO
3194: IFFALSE 3306
// begin _x := ShiftX ( x , i , 3 ) ;
3196: LD_ADDR_VAR 0 7
3200: PUSH
3201: LD_VAR 0 5
3205: PPUSH
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_INT 3
3213: PPUSH
3214: CALL_OW 272
3218: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3219: LD_ADDR_VAR 0 8
3223: PUSH
3224: LD_VAR 0 6
3228: PPUSH
3229: LD_VAR 0 4
3233: PPUSH
3234: LD_INT 3
3236: PPUSH
3237: CALL_OW 273
3241: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3242: LD_VAR 0 7
3246: PPUSH
3247: LD_VAR 0 8
3251: PPUSH
3252: CALL_OW 488
3256: NOT
3257: IFFALSE 3261
// continue ;
3259: GO 3193
// if HexInfo ( _x , _y ) = 0 then
3261: LD_VAR 0 7
3265: PPUSH
3266: LD_VAR 0 8
3270: PPUSH
3271: CALL_OW 428
3275: PUSH
3276: LD_INT 0
3278: EQUAL
3279: IFFALSE 3304
// begin ComMoveXY ( unit , _x , _y ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: LD_VAR 0 7
3290: PPUSH
3291: LD_VAR 0 8
3295: PPUSH
3296: CALL_OW 111
// exit ;
3300: POP
3301: POP
3302: GO 3308
// end ; end ;
3304: GO 3193
3306: POP
3307: POP
// end ;
3308: LD_VAR 0 3
3312: RET
// export function ScanBase ( side , base_area ) ; begin
3313: LD_INT 0
3315: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3316: LD_ADDR_VAR 0 3
3320: PUSH
3321: LD_VAR 0 2
3325: PPUSH
3326: LD_INT 81
3328: PUSH
3329: LD_VAR 0 1
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 70
3342: ST_TO_ADDR
// end ;
3343: LD_VAR 0 3
3347: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3348: LD_INT 0
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// result := false ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// side := GetSide ( unit ) ;
3362: LD_ADDR_VAR 0 3
3366: PUSH
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 255
3376: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3377: LD_ADDR_VAR 0 4
3381: PUSH
3382: LD_VAR 0 1
3386: PPUSH
3387: CALL_OW 248
3391: ST_TO_ADDR
// case nat of 1 :
3392: LD_VAR 0 4
3396: PUSH
3397: LD_INT 1
3399: DOUBLE
3400: EQUAL
3401: IFTRUE 3405
3403: GO 3416
3405: POP
// tech := tech_lassight ; 2 :
3406: LD_ADDR_VAR 0 5
3410: PUSH
3411: LD_INT 12
3413: ST_TO_ADDR
3414: GO 3455
3416: LD_INT 2
3418: DOUBLE
3419: EQUAL
3420: IFTRUE 3424
3422: GO 3435
3424: POP
// tech := tech_mortar ; 3 :
3425: LD_ADDR_VAR 0 5
3429: PUSH
3430: LD_INT 41
3432: ST_TO_ADDR
3433: GO 3455
3435: LD_INT 3
3437: DOUBLE
3438: EQUAL
3439: IFTRUE 3443
3441: GO 3454
3443: POP
// tech := tech_bazooka ; end ;
3444: LD_ADDR_VAR 0 5
3448: PUSH
3449: LD_INT 44
3451: ST_TO_ADDR
3452: GO 3455
3454: POP
// if Researched ( side , tech ) then
3455: LD_VAR 0 3
3459: PPUSH
3460: LD_VAR 0 5
3464: PPUSH
3465: CALL_OW 325
3469: IFFALSE 3496
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 8
3481: PUSH
3482: LD_INT 9
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_VAR 0 4
3494: ARRAY
3495: ST_TO_ADDR
// end ;
3496: LD_VAR 0 2
3500: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3501: LD_INT 0
3503: PPUSH
3504: PPUSH
3505: PPUSH
// if not mines then
3506: LD_VAR 0 2
3510: NOT
3511: IFFALSE 3515
// exit ;
3513: GO 3659
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3515: LD_ADDR_VAR 0 5
3519: PUSH
3520: LD_INT 81
3522: PUSH
3523: LD_VAR 0 1
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PUSH
3532: LD_INT 3
3534: PUSH
3535: LD_INT 21
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PPUSH
3553: CALL_OW 69
3557: ST_TO_ADDR
// for i in mines do
3558: LD_ADDR_VAR 0 4
3562: PUSH
3563: LD_VAR 0 2
3567: PUSH
3568: FOR_IN
3569: IFFALSE 3657
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3571: LD_VAR 0 4
3575: PUSH
3576: LD_INT 1
3578: ARRAY
3579: PPUSH
3580: LD_VAR 0 4
3584: PUSH
3585: LD_INT 2
3587: ARRAY
3588: PPUSH
3589: CALL_OW 458
3593: NOT
3594: IFFALSE 3598
// continue ;
3596: GO 3568
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3598: LD_VAR 0 4
3602: PUSH
3603: LD_INT 1
3605: ARRAY
3606: PPUSH
3607: LD_VAR 0 4
3611: PUSH
3612: LD_INT 2
3614: ARRAY
3615: PPUSH
3616: CALL_OW 428
3620: PUSH
3621: LD_VAR 0 5
3625: IN
3626: IFFALSE 3655
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3628: LD_VAR 0 4
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: PPUSH
3637: LD_VAR 0 4
3641: PUSH
3642: LD_INT 2
3644: ARRAY
3645: PPUSH
3646: LD_VAR 0 1
3650: PPUSH
3651: CALL_OW 456
// end ;
3655: GO 3568
3657: POP
3658: POP
// end ;
3659: LD_VAR 0 3
3663: RET
// export function Count ( array ) ; var i ; begin
3664: LD_INT 0
3666: PPUSH
3667: PPUSH
// result := 0 ;
3668: LD_ADDR_VAR 0 2
3672: PUSH
3673: LD_INT 0
3675: ST_TO_ADDR
// for i in array do
3676: LD_ADDR_VAR 0 3
3680: PUSH
3681: LD_VAR 0 1
3685: PUSH
3686: FOR_IN
3687: IFFALSE 3711
// if i then
3689: LD_VAR 0 3
3693: IFFALSE 3709
// result := result + 1 ;
3695: LD_ADDR_VAR 0 2
3699: PUSH
3700: LD_VAR 0 2
3704: PUSH
3705: LD_INT 1
3707: PLUS
3708: ST_TO_ADDR
3709: GO 3686
3711: POP
3712: POP
// end ;
3713: LD_VAR 0 2
3717: RET
// export function IsEmpty ( building ) ; begin
3718: LD_INT 0
3720: PPUSH
// if not building then
3721: LD_VAR 0 1
3725: NOT
3726: IFFALSE 3730
// exit ;
3728: GO 3773
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_VAR 0 1
3739: PUSH
3740: LD_INT 22
3742: PUSH
3743: LD_VAR 0 1
3747: PPUSH
3748: CALL_OW 255
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: LD_INT 58
3759: PUSH
3760: EMPTY
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 69
3771: IN
3772: ST_TO_ADDR
// end ;
3773: LD_VAR 0 2
3777: RET
// export function IsNotFull ( building ) ; var places ; begin
3778: LD_INT 0
3780: PPUSH
3781: PPUSH
// if not building then
3782: LD_VAR 0 1
3786: NOT
3787: IFFALSE 3791
// exit ;
3789: GO 3962
// result := false ;
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: LD_INT 0
3798: ST_TO_ADDR
// places := 0 ;
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: LD_INT 0
3806: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3807: LD_VAR 0 1
3811: PPUSH
3812: CALL_OW 266
3816: PUSH
3817: LD_INT 0
3819: DOUBLE
3820: EQUAL
3821: IFTRUE 3879
3823: LD_INT 1
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3879
3829: LD_INT 6
3831: DOUBLE
3832: EQUAL
3833: IFTRUE 3879
3835: LD_INT 7
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3879
3841: LD_INT 8
3843: DOUBLE
3844: EQUAL
3845: IFTRUE 3879
3847: LD_INT 4
3849: DOUBLE
3850: EQUAL
3851: IFTRUE 3879
3853: LD_INT 5
3855: DOUBLE
3856: EQUAL
3857: IFTRUE 3879
3859: LD_INT 2
3861: DOUBLE
3862: EQUAL
3863: IFTRUE 3879
3865: LD_INT 3
3867: DOUBLE
3868: EQUAL
3869: IFTRUE 3879
3871: LD_INT 35
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3890
3879: POP
// places := 6 ; b_bunker , b_breastwork :
3880: LD_ADDR_VAR 0 3
3884: PUSH
3885: LD_INT 6
3887: ST_TO_ADDR
3888: GO 3935
3890: LD_INT 32
3892: DOUBLE
3893: EQUAL
3894: IFTRUE 3904
3896: LD_INT 31
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3915
3904: POP
// places := 1 ; b_control_tower :
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: LD_INT 1
3912: ST_TO_ADDR
3913: GO 3935
3915: LD_INT 36
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3934
3923: POP
// places := 3 ; end ;
3924: LD_ADDR_VAR 0 3
3928: PUSH
3929: LD_INT 3
3931: ST_TO_ADDR
3932: GO 3935
3934: POP
// if places then
3935: LD_VAR 0 3
3939: IFFALSE 3962
// result := UnitsInside ( building ) < places ;
3941: LD_ADDR_VAR 0 2
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 313
3955: PUSH
3956: LD_VAR 0 3
3960: LESS
3961: ST_TO_ADDR
// end ;
3962: LD_VAR 0 2
3966: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3967: LD_INT 0
3969: PPUSH
3970: PPUSH
3971: PPUSH
3972: PPUSH
// tmp := [ ] ;
3973: LD_ADDR_VAR 0 3
3977: PUSH
3978: EMPTY
3979: ST_TO_ADDR
// list := [ ] ;
3980: LD_ADDR_VAR 0 5
3984: PUSH
3985: EMPTY
3986: ST_TO_ADDR
// for i = 16 to 25 do
3987: LD_ADDR_VAR 0 4
3991: PUSH
3992: DOUBLE
3993: LD_INT 16
3995: DEC
3996: ST_TO_ADDR
3997: LD_INT 25
3999: PUSH
4000: FOR_TO
4001: IFFALSE 4074
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PUSH
4013: LD_INT 22
4015: PUSH
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 255
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 91
4032: PUSH
4033: LD_VAR 0 1
4037: PUSH
4038: LD_INT 6
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 30
4048: PUSH
4049: LD_VAR 0 4
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: PPUSH
4066: CALL_OW 69
4070: ADD
4071: ST_TO_ADDR
4072: GO 4000
4074: POP
4075: POP
// for i = 1 to tmp do
4076: LD_ADDR_VAR 0 4
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_VAR 0 3
4090: PUSH
4091: FOR_TO
4092: IFFALSE 4180
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4094: LD_ADDR_VAR 0 5
4098: PUSH
4099: LD_VAR 0 5
4103: PUSH
4104: LD_VAR 0 3
4108: PUSH
4109: LD_VAR 0 4
4113: ARRAY
4114: PPUSH
4115: CALL_OW 266
4119: PUSH
4120: LD_VAR 0 3
4124: PUSH
4125: LD_VAR 0 4
4129: ARRAY
4130: PPUSH
4131: CALL_OW 250
4135: PUSH
4136: LD_VAR 0 3
4140: PUSH
4141: LD_VAR 0 4
4145: ARRAY
4146: PPUSH
4147: CALL_OW 251
4151: PUSH
4152: LD_VAR 0 3
4156: PUSH
4157: LD_VAR 0 4
4161: ARRAY
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: PUSH
4174: EMPTY
4175: LIST
4176: ADD
4177: ST_TO_ADDR
4178: GO 4091
4180: POP
4181: POP
// result := list ;
4182: LD_ADDR_VAR 0 2
4186: PUSH
4187: LD_VAR 0 5
4191: ST_TO_ADDR
// end ;
4192: LD_VAR 0 2
4196: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4197: LD_INT 0
4199: PPUSH
4200: PPUSH
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
4205: PPUSH
// if not factory then
4206: LD_VAR 0 1
4210: NOT
4211: IFFALSE 4215
// exit ;
4213: GO 4808
// if control = control_apeman then
4215: LD_VAR 0 4
4219: PUSH
4220: LD_INT 5
4222: EQUAL
4223: IFFALSE 4332
// begin tmp := UnitsInside ( factory ) ;
4225: LD_ADDR_VAR 0 8
4229: PUSH
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 313
4239: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4240: LD_VAR 0 8
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 12
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: NOT
4260: IFFALSE 4270
// control := control_manual ;
4262: LD_ADDR_VAR 0 4
4266: PUSH
4267: LD_INT 1
4269: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4270: LD_ADDR_VAR 0 8
4274: PUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL 3967 0 1
4284: ST_TO_ADDR
// if tmp then
4285: LD_VAR 0 8
4289: IFFALSE 4332
// begin for i in tmp do
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_VAR 0 8
4300: PUSH
4301: FOR_IN
4302: IFFALSE 4330
// if i [ 1 ] = b_ext_radio then
4304: LD_VAR 0 7
4308: PUSH
4309: LD_INT 1
4311: ARRAY
4312: PUSH
4313: LD_INT 22
4315: EQUAL
4316: IFFALSE 4328
// begin control := control_remote ;
4318: LD_ADDR_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: ST_TO_ADDR
// break ;
4326: GO 4330
// end ;
4328: GO 4301
4330: POP
4331: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4332: LD_VAR 0 1
4336: PPUSH
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_VAR 0 5
4356: PPUSH
4357: CALL_OW 448
4361: IFFALSE 4396
// begin result := [ chassis , engine , control , weapon ] ;
4363: LD_ADDR_VAR 0 6
4367: PUSH
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: PUSH
4378: LD_VAR 0 4
4382: PUSH
4383: LD_VAR 0 5
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: ST_TO_ADDR
// exit ;
4394: GO 4808
// end ; _chassis := AvailableChassisList ( factory ) ;
4396: LD_ADDR_VAR 0 9
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 475
4410: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4411: LD_ADDR_VAR 0 11
4415: PUSH
4416: LD_VAR 0 1
4420: PPUSH
4421: CALL_OW 476
4425: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4426: LD_ADDR_VAR 0 12
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: CALL_OW 477
4440: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4441: LD_ADDR_VAR 0 10
4445: PUSH
4446: LD_VAR 0 1
4450: PPUSH
4451: CALL_OW 478
4455: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4456: LD_VAR 0 9
4460: NOT
4461: PUSH
4462: LD_VAR 0 11
4466: NOT
4467: OR
4468: PUSH
4469: LD_VAR 0 12
4473: NOT
4474: OR
4475: PUSH
4476: LD_VAR 0 10
4480: NOT
4481: OR
4482: IFFALSE 4517
// begin result := [ chassis , engine , control , weapon ] ;
4484: LD_ADDR_VAR 0 6
4488: PUSH
4489: LD_VAR 0 2
4493: PUSH
4494: LD_VAR 0 3
4498: PUSH
4499: LD_VAR 0 4
4503: PUSH
4504: LD_VAR 0 5
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// exit ;
4515: GO 4808
// end ; if not chassis in _chassis then
4517: LD_VAR 0 2
4521: PUSH
4522: LD_VAR 0 9
4526: IN
4527: NOT
4528: IFFALSE 4554
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4530: LD_ADDR_VAR 0 2
4534: PUSH
4535: LD_VAR 0 9
4539: PUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_VAR 0 9
4547: PPUSH
4548: CALL_OW 12
4552: ARRAY
4553: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4554: LD_VAR 0 2
4558: PPUSH
4559: LD_VAR 0 3
4563: PPUSH
4564: CALL 4813 0 2
4568: NOT
4569: IFFALSE 4628
// repeat engine := _engine [ 1 ] ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: LD_VAR 0 11
4580: PUSH
4581: LD_INT 1
4583: ARRAY
4584: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4585: LD_ADDR_VAR 0 11
4589: PUSH
4590: LD_VAR 0 11
4594: PPUSH
4595: LD_INT 1
4597: PPUSH
4598: CALL_OW 3
4602: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4603: LD_VAR 0 2
4607: PPUSH
4608: LD_VAR 0 3
4612: PPUSH
4613: CALL 4813 0 2
4617: PUSH
4618: LD_VAR 0 11
4622: PUSH
4623: EMPTY
4624: EQUAL
4625: OR
4626: IFFALSE 4571
// if not control in _control then
4628: LD_VAR 0 4
4632: PUSH
4633: LD_VAR 0 12
4637: IN
4638: NOT
4639: IFFALSE 4665
// control := _control [ rand ( 1 , _control ) ] ;
4641: LD_ADDR_VAR 0 4
4645: PUSH
4646: LD_VAR 0 12
4650: PUSH
4651: LD_INT 1
4653: PPUSH
4654: LD_VAR 0 12
4658: PPUSH
4659: CALL_OW 12
4663: ARRAY
4664: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4665: LD_VAR 0 2
4669: PPUSH
4670: LD_VAR 0 5
4674: PPUSH
4675: CALL 5033 0 2
4679: NOT
4680: IFFALSE 4739
// repeat weapon := _weapon [ 1 ] ;
4682: LD_ADDR_VAR 0 5
4686: PUSH
4687: LD_VAR 0 10
4691: PUSH
4692: LD_INT 1
4694: ARRAY
4695: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4696: LD_ADDR_VAR 0 10
4700: PUSH
4701: LD_VAR 0 10
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: CALL_OW 3
4713: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_VAR 0 5
4723: PPUSH
4724: CALL 5033 0 2
4728: PUSH
4729: LD_VAR 0 10
4733: PUSH
4734: EMPTY
4735: EQUAL
4736: OR
4737: IFFALSE 4682
// result := [ ] ;
4739: LD_ADDR_VAR 0 6
4743: PUSH
4744: EMPTY
4745: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4746: LD_VAR 0 1
4750: PPUSH
4751: LD_VAR 0 2
4755: PPUSH
4756: LD_VAR 0 3
4760: PPUSH
4761: LD_VAR 0 4
4765: PPUSH
4766: LD_VAR 0 5
4770: PPUSH
4771: CALL_OW 448
4775: IFFALSE 4808
// result := [ chassis , engine , control , weapon ] ;
4777: LD_ADDR_VAR 0 6
4781: PUSH
4782: LD_VAR 0 2
4786: PUSH
4787: LD_VAR 0 3
4791: PUSH
4792: LD_VAR 0 4
4796: PUSH
4797: LD_VAR 0 5
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: ST_TO_ADDR
// end ;
4808: LD_VAR 0 6
4812: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4813: LD_INT 0
4815: PPUSH
// if not chassis or not engine then
4816: LD_VAR 0 1
4820: NOT
4821: PUSH
4822: LD_VAR 0 2
4826: NOT
4827: OR
4828: IFFALSE 4832
// exit ;
4830: GO 5028
// case engine of engine_solar :
4832: LD_VAR 0 2
4836: PUSH
4837: LD_INT 2
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4883
4845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4846: LD_ADDR_VAR 0 3
4850: PUSH
4851: LD_INT 11
4853: PUSH
4854: LD_INT 12
4856: PUSH
4857: LD_INT 13
4859: PUSH
4860: LD_INT 14
4862: PUSH
4863: LD_INT 1
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: ST_TO_ADDR
4881: GO 5012
4883: LD_INT 1
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 4953
4891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4892: LD_ADDR_VAR 0 3
4896: PUSH
4897: LD_INT 11
4899: PUSH
4900: LD_INT 12
4902: PUSH
4903: LD_INT 13
4905: PUSH
4906: LD_INT 14
4908: PUSH
4909: LD_INT 1
4911: PUSH
4912: LD_INT 2
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 4
4920: PUSH
4921: LD_INT 5
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 23
4929: PUSH
4930: LD_INT 22
4932: PUSH
4933: LD_INT 24
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5012
4953: LD_INT 3
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 5011
4961: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 13
4969: PUSH
4970: LD_INT 14
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 22
4990: PUSH
4991: LD_INT 23
4993: PUSH
4994: LD_INT 24
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5012
5011: POP
// result := ( chassis in result ) ;
5012: LD_ADDR_VAR 0 3
5016: PUSH
5017: LD_VAR 0 1
5021: PUSH
5022: LD_VAR 0 3
5026: IN
5027: ST_TO_ADDR
// end ;
5028: LD_VAR 0 3
5032: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5033: LD_INT 0
5035: PPUSH
// if not chassis or not weapon then
5036: LD_VAR 0 1
5040: NOT
5041: PUSH
5042: LD_VAR 0 2
5046: NOT
5047: OR
5048: IFFALSE 5052
// exit ;
5050: GO 6112
// case weapon of us_machine_gun :
5052: LD_VAR 0 2
5056: PUSH
5057: LD_INT 2
5059: DOUBLE
5060: EQUAL
5061: IFTRUE 5065
5063: GO 5095
5065: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5066: LD_ADDR_VAR 0 3
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: LD_INT 3
5079: PUSH
5080: LD_INT 4
5082: PUSH
5083: LD_INT 5
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: ST_TO_ADDR
5093: GO 6096
5095: LD_INT 3
5097: DOUBLE
5098: EQUAL
5099: IFTRUE 5103
5101: GO 5133
5103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5104: LD_ADDR_VAR 0 3
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 3
5117: PUSH
5118: LD_INT 4
5120: PUSH
5121: LD_INT 5
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: ST_TO_ADDR
5131: GO 6096
5133: LD_INT 11
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5141
5139: GO 5171
5141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_INT 1
5149: PUSH
5150: LD_INT 2
5152: PUSH
5153: LD_INT 3
5155: PUSH
5156: LD_INT 4
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
5169: GO 6096
5171: LD_INT 4
5173: DOUBLE
5174: EQUAL
5175: IFTRUE 5179
5177: GO 5205
5179: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: LD_INT 4
5193: PUSH
5194: LD_INT 5
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: ST_TO_ADDR
5203: GO 6096
5205: LD_INT 5
5207: DOUBLE
5208: EQUAL
5209: IFTRUE 5213
5211: GO 5239
5213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5214: LD_ADDR_VAR 0 3
5218: PUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: ST_TO_ADDR
5237: GO 6096
5239: LD_INT 9
5241: DOUBLE
5242: EQUAL
5243: IFTRUE 5247
5245: GO 5273
5247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5248: LD_ADDR_VAR 0 3
5252: PUSH
5253: LD_INT 2
5255: PUSH
5256: LD_INT 3
5258: PUSH
5259: LD_INT 4
5261: PUSH
5262: LD_INT 5
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: ST_TO_ADDR
5271: GO 6096
5273: LD_INT 7
5275: DOUBLE
5276: EQUAL
5277: IFTRUE 5281
5279: GO 5307
5281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5282: LD_ADDR_VAR 0 3
5286: PUSH
5287: LD_INT 2
5289: PUSH
5290: LD_INT 3
5292: PUSH
5293: LD_INT 4
5295: PUSH
5296: LD_INT 5
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: ST_TO_ADDR
5305: GO 6096
5307: LD_INT 12
5309: DOUBLE
5310: EQUAL
5311: IFTRUE 5315
5313: GO 5341
5315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5316: LD_ADDR_VAR 0 3
5320: PUSH
5321: LD_INT 2
5323: PUSH
5324: LD_INT 3
5326: PUSH
5327: LD_INT 4
5329: PUSH
5330: LD_INT 5
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: ST_TO_ADDR
5339: GO 6096
5341: LD_INT 13
5343: DOUBLE
5344: EQUAL
5345: IFTRUE 5349
5347: GO 5375
5349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5350: LD_ADDR_VAR 0 3
5354: PUSH
5355: LD_INT 2
5357: PUSH
5358: LD_INT 3
5360: PUSH
5361: LD_INT 4
5363: PUSH
5364: LD_INT 5
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: ST_TO_ADDR
5373: GO 6096
5375: LD_INT 14
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5401
5383: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: LD_INT 4
5391: PUSH
5392: LD_INT 5
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: ST_TO_ADDR
5399: GO 6096
5401: LD_INT 6
5403: DOUBLE
5404: EQUAL
5405: IFTRUE 5409
5407: GO 5427
5409: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_INT 4
5417: PUSH
5418: LD_INT 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: ST_TO_ADDR
5425: GO 6096
5427: LD_INT 10
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5435
5433: GO 5453
5435: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: LD_INT 4
5443: PUSH
5444: LD_INT 5
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: ST_TO_ADDR
5451: GO 6096
5453: LD_INT 22
5455: DOUBLE
5456: EQUAL
5457: IFTRUE 5461
5459: GO 5487
5461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: LD_INT 11
5469: PUSH
5470: LD_INT 12
5472: PUSH
5473: LD_INT 13
5475: PUSH
5476: LD_INT 14
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: ST_TO_ADDR
5485: GO 6096
5487: LD_INT 23
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5521
5495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_INT 11
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 13
5509: PUSH
5510: LD_INT 14
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: ST_TO_ADDR
5519: GO 6096
5521: LD_INT 24
5523: DOUBLE
5524: EQUAL
5525: IFTRUE 5529
5527: GO 5555
5529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5530: LD_ADDR_VAR 0 3
5534: PUSH
5535: LD_INT 11
5537: PUSH
5538: LD_INT 12
5540: PUSH
5541: LD_INT 13
5543: PUSH
5544: LD_INT 14
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: ST_TO_ADDR
5553: GO 6096
5555: LD_INT 30
5557: DOUBLE
5558: EQUAL
5559: IFTRUE 5563
5561: GO 5589
5563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5564: LD_ADDR_VAR 0 3
5568: PUSH
5569: LD_INT 11
5571: PUSH
5572: LD_INT 12
5574: PUSH
5575: LD_INT 13
5577: PUSH
5578: LD_INT 14
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: ST_TO_ADDR
5587: GO 6096
5589: LD_INT 25
5591: DOUBLE
5592: EQUAL
5593: IFTRUE 5597
5595: GO 5615
5597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5598: LD_ADDR_VAR 0 3
5602: PUSH
5603: LD_INT 13
5605: PUSH
5606: LD_INT 14
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: ST_TO_ADDR
5613: GO 6096
5615: LD_INT 27
5617: DOUBLE
5618: EQUAL
5619: IFTRUE 5623
5621: GO 5641
5623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5624: LD_ADDR_VAR 0 3
5628: PUSH
5629: LD_INT 13
5631: PUSH
5632: LD_INT 14
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: ST_TO_ADDR
5639: GO 6096
5641: LD_INT 92
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5649
5647: GO 5675
5649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_INT 11
5657: PUSH
5658: LD_INT 12
5660: PUSH
5661: LD_INT 13
5663: PUSH
5664: LD_INT 14
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: ST_TO_ADDR
5673: GO 6096
5675: LD_INT 28
5677: DOUBLE
5678: EQUAL
5679: IFTRUE 5683
5681: GO 5701
5683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5684: LD_ADDR_VAR 0 3
5688: PUSH
5689: LD_INT 13
5691: PUSH
5692: LD_INT 14
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: ST_TO_ADDR
5699: GO 6096
5701: LD_INT 29
5703: DOUBLE
5704: EQUAL
5705: IFTRUE 5709
5707: GO 5727
5709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5710: LD_ADDR_VAR 0 3
5714: PUSH
5715: LD_INT 13
5717: PUSH
5718: LD_INT 14
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: ST_TO_ADDR
5725: GO 6096
5727: LD_INT 31
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5753
5735: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: LD_INT 13
5743: PUSH
5744: LD_INT 14
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: ST_TO_ADDR
5751: GO 6096
5753: LD_INT 26
5755: DOUBLE
5756: EQUAL
5757: IFTRUE 5761
5759: GO 5779
5761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_INT 13
5769: PUSH
5770: LD_INT 14
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 6096
5779: LD_INT 42
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5813
5787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5788: LD_ADDR_VAR 0 3
5792: PUSH
5793: LD_INT 21
5795: PUSH
5796: LD_INT 22
5798: PUSH
5799: LD_INT 23
5801: PUSH
5802: LD_INT 24
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: ST_TO_ADDR
5811: GO 6096
5813: LD_INT 43
5815: DOUBLE
5816: EQUAL
5817: IFTRUE 5821
5819: GO 5847
5821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 21
5829: PUSH
5830: LD_INT 22
5832: PUSH
5833: LD_INT 23
5835: PUSH
5836: LD_INT 24
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: ST_TO_ADDR
5845: GO 6096
5847: LD_INT 44
5849: DOUBLE
5850: EQUAL
5851: IFTRUE 5855
5853: GO 5881
5855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5856: LD_ADDR_VAR 0 3
5860: PUSH
5861: LD_INT 21
5863: PUSH
5864: LD_INT 22
5866: PUSH
5867: LD_INT 23
5869: PUSH
5870: LD_INT 24
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: ST_TO_ADDR
5879: GO 6096
5881: LD_INT 45
5883: DOUBLE
5884: EQUAL
5885: IFTRUE 5889
5887: GO 5915
5889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5890: LD_ADDR_VAR 0 3
5894: PUSH
5895: LD_INT 21
5897: PUSH
5898: LD_INT 22
5900: PUSH
5901: LD_INT 23
5903: PUSH
5904: LD_INT 24
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: ST_TO_ADDR
5913: GO 6096
5915: LD_INT 49
5917: DOUBLE
5918: EQUAL
5919: IFTRUE 5923
5921: GO 5949
5923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5924: LD_ADDR_VAR 0 3
5928: PUSH
5929: LD_INT 21
5931: PUSH
5932: LD_INT 22
5934: PUSH
5935: LD_INT 23
5937: PUSH
5938: LD_INT 24
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: ST_TO_ADDR
5947: GO 6096
5949: LD_INT 51
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 5983
5957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_INT 21
5965: PUSH
5966: LD_INT 22
5968: PUSH
5969: LD_INT 23
5971: PUSH
5972: LD_INT 24
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: ST_TO_ADDR
5981: GO 6096
5983: LD_INT 52
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5991
5989: GO 6017
5991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5992: LD_ADDR_VAR 0 3
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 22
6002: PUSH
6003: LD_INT 23
6005: PUSH
6006: LD_INT 24
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: ST_TO_ADDR
6015: GO 6096
6017: LD_INT 53
6019: DOUBLE
6020: EQUAL
6021: IFTRUE 6025
6023: GO 6043
6025: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: LD_INT 23
6033: PUSH
6034: LD_INT 24
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: ST_TO_ADDR
6041: GO 6096
6043: LD_INT 46
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6069
6051: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6052: LD_ADDR_VAR 0 3
6056: PUSH
6057: LD_INT 23
6059: PUSH
6060: LD_INT 24
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: ST_TO_ADDR
6067: GO 6096
6069: LD_INT 47
6071: DOUBLE
6072: EQUAL
6073: IFTRUE 6077
6075: GO 6095
6077: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_INT 23
6085: PUSH
6086: LD_INT 24
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: ST_TO_ADDR
6093: GO 6096
6095: POP
// result := ( chassis in result ) ;
6096: LD_ADDR_VAR 0 3
6100: PUSH
6101: LD_VAR 0 1
6105: PUSH
6106: LD_VAR 0 3
6110: IN
6111: ST_TO_ADDR
// end ;
6112: LD_VAR 0 3
6116: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// result := array ;
6126: LD_ADDR_VAR 0 5
6130: PUSH
6131: LD_VAR 0 1
6135: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6136: LD_VAR 0 1
6140: NOT
6141: PUSH
6142: LD_VAR 0 2
6146: NOT
6147: OR
6148: PUSH
6149: LD_VAR 0 3
6153: NOT
6154: OR
6155: PUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_VAR 0 1
6165: GREATER
6166: OR
6167: PUSH
6168: LD_VAR 0 3
6172: PUSH
6173: LD_VAR 0 1
6177: GREATER
6178: OR
6179: IFFALSE 6183
// exit ;
6181: GO 6479
// if direction then
6183: LD_VAR 0 4
6187: IFFALSE 6251
// begin d := 1 ;
6189: LD_ADDR_VAR 0 9
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if i_from > i_to then
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: GREATER
6207: IFFALSE 6233
// length := ( array - i_from ) + i_to else
6209: LD_ADDR_VAR 0 11
6213: PUSH
6214: LD_VAR 0 1
6218: PUSH
6219: LD_VAR 0 2
6223: MINUS
6224: PUSH
6225: LD_VAR 0 3
6229: PLUS
6230: ST_TO_ADDR
6231: GO 6249
// length := i_to - i_from ;
6233: LD_ADDR_VAR 0 11
6237: PUSH
6238: LD_VAR 0 3
6242: PUSH
6243: LD_VAR 0 2
6247: MINUS
6248: ST_TO_ADDR
// end else
6249: GO 6312
// begin d := - 1 ;
6251: LD_ADDR_VAR 0 9
6255: PUSH
6256: LD_INT 1
6258: NEG
6259: ST_TO_ADDR
// if i_from > i_to then
6260: LD_VAR 0 2
6264: PUSH
6265: LD_VAR 0 3
6269: GREATER
6270: IFFALSE 6290
// length := i_from - i_to else
6272: LD_ADDR_VAR 0 11
6276: PUSH
6277: LD_VAR 0 2
6281: PUSH
6282: LD_VAR 0 3
6286: MINUS
6287: ST_TO_ADDR
6288: GO 6312
// length := ( array - i_to ) + i_from ;
6290: LD_ADDR_VAR 0 11
6294: PUSH
6295: LD_VAR 0 1
6299: PUSH
6300: LD_VAR 0 3
6304: MINUS
6305: PUSH
6306: LD_VAR 0 2
6310: PLUS
6311: ST_TO_ADDR
// end ; if not length then
6312: LD_VAR 0 11
6316: NOT
6317: IFFALSE 6321
// exit ;
6319: GO 6479
// tmp := array ;
6321: LD_ADDR_VAR 0 10
6325: PUSH
6326: LD_VAR 0 1
6330: ST_TO_ADDR
// for i = 1 to length do
6331: LD_ADDR_VAR 0 6
6335: PUSH
6336: DOUBLE
6337: LD_INT 1
6339: DEC
6340: ST_TO_ADDR
6341: LD_VAR 0 11
6345: PUSH
6346: FOR_TO
6347: IFFALSE 6467
// begin for j = 1 to array do
6349: LD_ADDR_VAR 0 7
6353: PUSH
6354: DOUBLE
6355: LD_INT 1
6357: DEC
6358: ST_TO_ADDR
6359: LD_VAR 0 1
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6453
// begin k := j + d ;
6367: LD_ADDR_VAR 0 8
6371: PUSH
6372: LD_VAR 0 7
6376: PUSH
6377: LD_VAR 0 9
6381: PLUS
6382: ST_TO_ADDR
// if k > array then
6383: LD_VAR 0 8
6387: PUSH
6388: LD_VAR 0 1
6392: GREATER
6393: IFFALSE 6403
// k := 1 ;
6395: LD_ADDR_VAR 0 8
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// if not k then
6403: LD_VAR 0 8
6407: NOT
6408: IFFALSE 6420
// k := array ;
6410: LD_ADDR_VAR 0 8
6414: PUSH
6415: LD_VAR 0 1
6419: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6420: LD_ADDR_VAR 0 10
6424: PUSH
6425: LD_VAR 0 10
6429: PPUSH
6430: LD_VAR 0 8
6434: PPUSH
6435: LD_VAR 0 1
6439: PUSH
6440: LD_VAR 0 7
6444: ARRAY
6445: PPUSH
6446: CALL_OW 1
6450: ST_TO_ADDR
// end ;
6451: GO 6364
6453: POP
6454: POP
// array := tmp ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_VAR 0 10
6464: ST_TO_ADDR
// end ;
6465: GO 6346
6467: POP
6468: POP
// result := array ;
6469: LD_ADDR_VAR 0 5
6473: PUSH
6474: LD_VAR 0 1
6478: ST_TO_ADDR
// end ;
6479: LD_VAR 0 5
6483: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6484: LD_INT 0
6486: PPUSH
6487: PPUSH
// result := 0 ;
6488: LD_ADDR_VAR 0 3
6492: PUSH
6493: LD_INT 0
6495: ST_TO_ADDR
// if not array or not value in array then
6496: LD_VAR 0 1
6500: NOT
6501: PUSH
6502: LD_VAR 0 2
6506: PUSH
6507: LD_VAR 0 1
6511: IN
6512: NOT
6513: OR
6514: IFFALSE 6518
// exit ;
6516: GO 6572
// for i = 1 to array do
6518: LD_ADDR_VAR 0 4
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_VAR 0 1
6532: PUSH
6533: FOR_TO
6534: IFFALSE 6570
// if value = array [ i ] then
6536: LD_VAR 0 2
6540: PUSH
6541: LD_VAR 0 1
6545: PUSH
6546: LD_VAR 0 4
6550: ARRAY
6551: EQUAL
6552: IFFALSE 6568
// begin result := i ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_VAR 0 4
6563: ST_TO_ADDR
// exit ;
6564: POP
6565: POP
6566: GO 6572
// end ;
6568: GO 6533
6570: POP
6571: POP
// end ;
6572: LD_VAR 0 3
6576: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6577: LD_INT 0
6579: PPUSH
// vc_chassis := chassis ;
6580: LD_ADDR_OWVAR 37
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// vc_engine := engine ;
6590: LD_ADDR_OWVAR 39
6594: PUSH
6595: LD_VAR 0 2
6599: ST_TO_ADDR
// vc_control := control ;
6600: LD_ADDR_OWVAR 38
6604: PUSH
6605: LD_VAR 0 3
6609: ST_TO_ADDR
// vc_weapon := weapon ;
6610: LD_ADDR_OWVAR 40
6614: PUSH
6615: LD_VAR 0 4
6619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6620: LD_ADDR_OWVAR 41
6624: PUSH
6625: LD_VAR 0 5
6629: ST_TO_ADDR
// end ;
6630: LD_VAR 0 6
6634: RET
// export function WantPlant ( unit ) ; var task ; begin
6635: LD_INT 0
6637: PPUSH
6638: PPUSH
// result := false ;
6639: LD_ADDR_VAR 0 2
6643: PUSH
6644: LD_INT 0
6646: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 437
6661: ST_TO_ADDR
// if task then
6662: LD_VAR 0 3
6666: IFFALSE 6694
// if task [ 1 ] [ 1 ] = p then
6668: LD_VAR 0 3
6672: PUSH
6673: LD_INT 1
6675: ARRAY
6676: PUSH
6677: LD_INT 1
6679: ARRAY
6680: PUSH
6681: LD_STRING p
6683: EQUAL
6684: IFFALSE 6694
// result := true ;
6686: LD_ADDR_VAR 0 2
6690: PUSH
6691: LD_INT 1
6693: ST_TO_ADDR
// end ;
6694: LD_VAR 0 2
6698: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6699: LD_INT 0
6701: PPUSH
6702: PPUSH
6703: PPUSH
6704: PPUSH
// if pos < 1 then
6705: LD_VAR 0 2
6709: PUSH
6710: LD_INT 1
6712: LESS
6713: IFFALSE 6717
// exit ;
6715: GO 7020
// if pos = 1 then
6717: LD_VAR 0 2
6721: PUSH
6722: LD_INT 1
6724: EQUAL
6725: IFFALSE 6758
// result := Replace ( arr , pos [ 1 ] , value ) else
6727: LD_ADDR_VAR 0 4
6731: PUSH
6732: LD_VAR 0 1
6736: PPUSH
6737: LD_VAR 0 2
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 3
6750: PPUSH
6751: CALL_OW 1
6755: ST_TO_ADDR
6756: GO 7020
// begin tmp := arr ;
6758: LD_ADDR_VAR 0 6
6762: PUSH
6763: LD_VAR 0 1
6767: ST_TO_ADDR
// s_arr := [ tmp ] ;
6768: LD_ADDR_VAR 0 7
6772: PUSH
6773: LD_VAR 0 6
6777: PUSH
6778: EMPTY
6779: LIST
6780: ST_TO_ADDR
// for i = 1 to pos - 1 do
6781: LD_ADDR_VAR 0 5
6785: PUSH
6786: DOUBLE
6787: LD_INT 1
6789: DEC
6790: ST_TO_ADDR
6791: LD_VAR 0 2
6795: PUSH
6796: LD_INT 1
6798: MINUS
6799: PUSH
6800: FOR_TO
6801: IFFALSE 6846
// begin tmp := tmp [ pos [ i ] ] ;
6803: LD_ADDR_VAR 0 6
6807: PUSH
6808: LD_VAR 0 6
6812: PUSH
6813: LD_VAR 0 2
6817: PUSH
6818: LD_VAR 0 5
6822: ARRAY
6823: ARRAY
6824: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6825: LD_ADDR_VAR 0 7
6829: PUSH
6830: LD_VAR 0 7
6834: PUSH
6835: LD_VAR 0 6
6839: PUSH
6840: EMPTY
6841: LIST
6842: ADD
6843: ST_TO_ADDR
// end ;
6844: GO 6800
6846: POP
6847: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6848: LD_ADDR_VAR 0 6
6852: PUSH
6853: LD_VAR 0 6
6857: PPUSH
6858: LD_VAR 0 2
6862: PUSH
6863: LD_VAR 0 2
6867: ARRAY
6868: PPUSH
6869: LD_VAR 0 3
6873: PPUSH
6874: CALL_OW 1
6878: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6879: LD_ADDR_VAR 0 7
6883: PUSH
6884: LD_VAR 0 7
6888: PPUSH
6889: LD_VAR 0 7
6893: PPUSH
6894: LD_VAR 0 6
6898: PPUSH
6899: CALL_OW 1
6903: ST_TO_ADDR
// for i = s_arr downto 2 do
6904: LD_ADDR_VAR 0 5
6908: PUSH
6909: DOUBLE
6910: LD_VAR 0 7
6914: INC
6915: ST_TO_ADDR
6916: LD_INT 2
6918: PUSH
6919: FOR_DOWNTO
6920: IFFALSE 7004
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6922: LD_ADDR_VAR 0 6
6926: PUSH
6927: LD_VAR 0 7
6931: PUSH
6932: LD_VAR 0 5
6936: PUSH
6937: LD_INT 1
6939: MINUS
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 2
6946: PUSH
6947: LD_VAR 0 5
6951: PUSH
6952: LD_INT 1
6954: MINUS
6955: ARRAY
6956: PPUSH
6957: LD_VAR 0 7
6961: PUSH
6962: LD_VAR 0 5
6966: ARRAY
6967: PPUSH
6968: CALL_OW 1
6972: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6973: LD_ADDR_VAR 0 7
6977: PUSH
6978: LD_VAR 0 7
6982: PPUSH
6983: LD_VAR 0 5
6987: PUSH
6988: LD_INT 1
6990: MINUS
6991: PPUSH
6992: LD_VAR 0 6
6996: PPUSH
6997: CALL_OW 1
7001: ST_TO_ADDR
// end ;
7002: GO 6919
7004: POP
7005: POP
// result := s_arr [ 1 ] ;
7006: LD_ADDR_VAR 0 4
7010: PUSH
7011: LD_VAR 0 7
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: ST_TO_ADDR
// end ; end ;
7020: LD_VAR 0 4
7024: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7025: LD_INT 0
7027: PPUSH
7028: PPUSH
// if not list then
7029: LD_VAR 0 1
7033: NOT
7034: IFFALSE 7038
// exit ;
7036: GO 7129
// i := list [ pos1 ] ;
7038: LD_ADDR_VAR 0 5
7042: PUSH
7043: LD_VAR 0 1
7047: PUSH
7048: LD_VAR 0 2
7052: ARRAY
7053: ST_TO_ADDR
// if not i then
7054: LD_VAR 0 5
7058: NOT
7059: IFFALSE 7063
// exit ;
7061: GO 7129
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7063: LD_ADDR_VAR 0 1
7067: PUSH
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_VAR 0 2
7077: PPUSH
7078: LD_VAR 0 1
7082: PUSH
7083: LD_VAR 0 3
7087: ARRAY
7088: PPUSH
7089: CALL_OW 1
7093: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7094: LD_ADDR_VAR 0 1
7098: PUSH
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_VAR 0 3
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 1
7118: ST_TO_ADDR
// result := list ;
7119: LD_ADDR_VAR 0 4
7123: PUSH
7124: LD_VAR 0 1
7128: ST_TO_ADDR
// end ;
7129: LD_VAR 0 4
7133: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7134: LD_INT 0
7136: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7137: LD_ADDR_VAR 0 5
7141: PUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 250
7151: PPUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 251
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: LD_VAR 0 3
7171: PPUSH
7172: LD_VAR 0 4
7176: PPUSH
7177: CALL 7187 0 5
7181: ST_TO_ADDR
// end ;
7182: LD_VAR 0 5
7186: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7187: LD_INT 0
7189: PPUSH
7190: PPUSH
7191: PPUSH
7192: PPUSH
// if not list then
7193: LD_VAR 0 3
7197: NOT
7198: IFFALSE 7202
// exit ;
7200: GO 7590
// result := [ ] ;
7202: LD_ADDR_VAR 0 6
7206: PUSH
7207: EMPTY
7208: ST_TO_ADDR
// for i in list do
7209: LD_ADDR_VAR 0 7
7213: PUSH
7214: LD_VAR 0 3
7218: PUSH
7219: FOR_IN
7220: IFFALSE 7422
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7222: LD_ADDR_VAR 0 9
7226: PUSH
7227: LD_VAR 0 7
7231: PPUSH
7232: LD_VAR 0 1
7236: PPUSH
7237: LD_VAR 0 2
7241: PPUSH
7242: CALL_OW 297
7246: ST_TO_ADDR
// if not result then
7247: LD_VAR 0 6
7251: NOT
7252: IFFALSE 7278
// result := [ [ i , tmp ] ] else
7254: LD_ADDR_VAR 0 6
7258: PUSH
7259: LD_VAR 0 7
7263: PUSH
7264: LD_VAR 0 9
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: ST_TO_ADDR
7276: GO 7420
// begin if result [ result ] [ 2 ] < tmp then
7278: LD_VAR 0 6
7282: PUSH
7283: LD_VAR 0 6
7287: ARRAY
7288: PUSH
7289: LD_INT 2
7291: ARRAY
7292: PUSH
7293: LD_VAR 0 9
7297: LESS
7298: IFFALSE 7340
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7300: LD_ADDR_VAR 0 6
7304: PUSH
7305: LD_VAR 0 6
7309: PPUSH
7310: LD_VAR 0 6
7314: PUSH
7315: LD_INT 1
7317: PLUS
7318: PPUSH
7319: LD_VAR 0 7
7323: PUSH
7324: LD_VAR 0 9
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 2
7337: ST_TO_ADDR
7338: GO 7420
// for j = 1 to result do
7340: LD_ADDR_VAR 0 8
7344: PUSH
7345: DOUBLE
7346: LD_INT 1
7348: DEC
7349: ST_TO_ADDR
7350: LD_VAR 0 6
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7418
// begin if tmp < result [ j ] [ 2 ] then
7358: LD_VAR 0 9
7362: PUSH
7363: LD_VAR 0 6
7367: PUSH
7368: LD_VAR 0 8
7372: ARRAY
7373: PUSH
7374: LD_INT 2
7376: ARRAY
7377: LESS
7378: IFFALSE 7416
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7380: LD_ADDR_VAR 0 6
7384: PUSH
7385: LD_VAR 0 6
7389: PPUSH
7390: LD_VAR 0 8
7394: PPUSH
7395: LD_VAR 0 7
7399: PUSH
7400: LD_VAR 0 9
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 2
7413: ST_TO_ADDR
// break ;
7414: GO 7418
// end ; end ;
7416: GO 7355
7418: POP
7419: POP
// end ; end ;
7420: GO 7219
7422: POP
7423: POP
// if result and not asc then
7424: LD_VAR 0 6
7428: PUSH
7429: LD_VAR 0 4
7433: NOT
7434: AND
7435: IFFALSE 7510
// begin tmp := result ;
7437: LD_ADDR_VAR 0 9
7441: PUSH
7442: LD_VAR 0 6
7446: ST_TO_ADDR
// for i = tmp downto 1 do
7447: LD_ADDR_VAR 0 7
7451: PUSH
7452: DOUBLE
7453: LD_VAR 0 9
7457: INC
7458: ST_TO_ADDR
7459: LD_INT 1
7461: PUSH
7462: FOR_DOWNTO
7463: IFFALSE 7508
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7465: LD_ADDR_VAR 0 6
7469: PUSH
7470: LD_VAR 0 6
7474: PPUSH
7475: LD_VAR 0 9
7479: PUSH
7480: LD_VAR 0 7
7484: MINUS
7485: PUSH
7486: LD_INT 1
7488: PLUS
7489: PPUSH
7490: LD_VAR 0 9
7494: PUSH
7495: LD_VAR 0 7
7499: ARRAY
7500: PPUSH
7501: CALL_OW 1
7505: ST_TO_ADDR
7506: GO 7462
7508: POP
7509: POP
// end ; tmp := [ ] ;
7510: LD_ADDR_VAR 0 9
7514: PUSH
7515: EMPTY
7516: ST_TO_ADDR
// if mode then
7517: LD_VAR 0 5
7521: IFFALSE 7590
// begin for i = 1 to result do
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: DOUBLE
7529: LD_INT 1
7531: DEC
7532: ST_TO_ADDR
7533: LD_VAR 0 6
7537: PUSH
7538: FOR_TO
7539: IFFALSE 7578
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7541: LD_ADDR_VAR 0 9
7545: PUSH
7546: LD_VAR 0 9
7550: PPUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: LD_VAR 0 6
7560: PUSH
7561: LD_VAR 0 7
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: CALL_OW 1
7575: ST_TO_ADDR
7576: GO 7538
7578: POP
7579: POP
// result := tmp ;
7580: LD_ADDR_VAR 0 6
7584: PUSH
7585: LD_VAR 0 9
7589: ST_TO_ADDR
// end ; end ;
7590: LD_VAR 0 6
7594: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7595: LD_INT 0
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7603: LD_ADDR_VAR 0 5
7607: PUSH
7608: LD_INT 0
7610: PUSH
7611: LD_INT 0
7613: PUSH
7614: LD_INT 0
7616: PUSH
7617: EMPTY
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: ST_TO_ADDR
// if not x or not y then
7625: LD_VAR 0 2
7629: NOT
7630: PUSH
7631: LD_VAR 0 3
7635: NOT
7636: OR
7637: IFFALSE 7641
// exit ;
7639: GO 9291
// if not range then
7641: LD_VAR 0 4
7645: NOT
7646: IFFALSE 7656
// range := 10 ;
7648: LD_ADDR_VAR 0 4
7652: PUSH
7653: LD_INT 10
7655: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7656: LD_ADDR_VAR 0 8
7660: PUSH
7661: LD_INT 81
7663: PUSH
7664: LD_VAR 0 1
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 92
7675: PUSH
7676: LD_VAR 0 2
7680: PUSH
7681: LD_VAR 0 3
7685: PUSH
7686: LD_VAR 0 4
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 21
7702: PUSH
7703: LD_INT 3
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: PPUSH
7719: CALL_OW 69
7723: ST_TO_ADDR
// if not tmp then
7724: LD_VAR 0 8
7728: NOT
7729: IFFALSE 7733
// exit ;
7731: GO 9291
// for i in tmp do
7733: LD_ADDR_VAR 0 6
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: FOR_IN
7744: IFFALSE 9266
// begin points := [ 0 , 0 , 0 ] ;
7746: LD_ADDR_VAR 0 9
7750: PUSH
7751: LD_INT 0
7753: PUSH
7754: LD_INT 0
7756: PUSH
7757: LD_INT 0
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: ST_TO_ADDR
// bpoints := 1 ;
7765: LD_ADDR_VAR 0 10
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7773: LD_VAR 0 6
7777: PPUSH
7778: CALL_OW 247
7782: PUSH
7783: LD_INT 1
7785: DOUBLE
7786: EQUAL
7787: IFTRUE 7791
7789: GO 8369
7791: POP
// begin if GetClass ( i ) = 1 then
7792: LD_VAR 0 6
7796: PPUSH
7797: CALL_OW 257
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: IFFALSE 7826
// points := [ 10 , 5 , 3 ] ;
7807: LD_ADDR_VAR 0 9
7811: PUSH
7812: LD_INT 10
7814: PUSH
7815: LD_INT 5
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7826: LD_VAR 0 6
7830: PPUSH
7831: CALL_OW 257
7835: PUSH
7836: LD_INT 2
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 4
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: IN
7850: IFFALSE 7871
// points := [ 3 , 2 , 1 ] ;
7852: LD_ADDR_VAR 0 9
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 2
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 257
7880: PUSH
7881: LD_INT 5
7883: EQUAL
7884: IFFALSE 7905
// points := [ 130 , 5 , 2 ] ;
7886: LD_ADDR_VAR 0 9
7890: PUSH
7891: LD_INT 130
7893: PUSH
7894: LD_INT 5
7896: PUSH
7897: LD_INT 2
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7905: LD_VAR 0 6
7909: PPUSH
7910: CALL_OW 257
7914: PUSH
7915: LD_INT 8
7917: EQUAL
7918: IFFALSE 7939
// points := [ 35 , 35 , 30 ] ;
7920: LD_ADDR_VAR 0 9
7924: PUSH
7925: LD_INT 35
7927: PUSH
7928: LD_INT 35
7930: PUSH
7931: LD_INT 30
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7939: LD_VAR 0 6
7943: PPUSH
7944: CALL_OW 257
7948: PUSH
7949: LD_INT 9
7951: EQUAL
7952: IFFALSE 7973
// points := [ 20 , 55 , 40 ] ;
7954: LD_ADDR_VAR 0 9
7958: PUSH
7959: LD_INT 20
7961: PUSH
7962: LD_INT 55
7964: PUSH
7965: LD_INT 40
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7973: LD_VAR 0 6
7977: PPUSH
7978: CALL_OW 257
7982: PUSH
7983: LD_INT 12
7985: PUSH
7986: LD_INT 16
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: IN
7993: IFFALSE 8014
// points := [ 5 , 3 , 2 ] ;
7995: LD_ADDR_VAR 0 9
7999: PUSH
8000: LD_INT 5
8002: PUSH
8003: LD_INT 3
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8014: LD_VAR 0 6
8018: PPUSH
8019: CALL_OW 257
8023: PUSH
8024: LD_INT 17
8026: EQUAL
8027: IFFALSE 8048
// points := [ 100 , 50 , 75 ] ;
8029: LD_ADDR_VAR 0 9
8033: PUSH
8034: LD_INT 100
8036: PUSH
8037: LD_INT 50
8039: PUSH
8040: LD_INT 75
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8048: LD_VAR 0 6
8052: PPUSH
8053: CALL_OW 257
8057: PUSH
8058: LD_INT 15
8060: EQUAL
8061: IFFALSE 8082
// points := [ 10 , 5 , 3 ] ;
8063: LD_ADDR_VAR 0 9
8067: PUSH
8068: LD_INT 10
8070: PUSH
8071: LD_INT 5
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8082: LD_VAR 0 6
8086: PPUSH
8087: CALL_OW 257
8091: PUSH
8092: LD_INT 14
8094: EQUAL
8095: IFFALSE 8116
// points := [ 10 , 0 , 0 ] ;
8097: LD_ADDR_VAR 0 9
8101: PUSH
8102: LD_INT 10
8104: PUSH
8105: LD_INT 0
8107: PUSH
8108: LD_INT 0
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8116: LD_VAR 0 6
8120: PPUSH
8121: CALL_OW 257
8125: PUSH
8126: LD_INT 11
8128: EQUAL
8129: IFFALSE 8150
// points := [ 30 , 10 , 5 ] ;
8131: LD_ADDR_VAR 0 9
8135: PUSH
8136: LD_INT 30
8138: PUSH
8139: LD_INT 10
8141: PUSH
8142: LD_INT 5
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 5
8157: PPUSH
8158: CALL_OW 321
8162: PUSH
8163: LD_INT 2
8165: EQUAL
8166: IFFALSE 8183
// bpoints := bpoints * 1.8 ;
8168: LD_ADDR_VAR 0 10
8172: PUSH
8173: LD_VAR 0 10
8177: PUSH
8178: LD_REAL  1.80000000000000E+0000
8181: MUL
8182: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8183: LD_VAR 0 6
8187: PPUSH
8188: CALL_OW 257
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: IN
8211: PUSH
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 51
8219: PPUSH
8220: CALL_OW 321
8224: PUSH
8225: LD_INT 2
8227: EQUAL
8228: AND
8229: IFFALSE 8246
// bpoints := bpoints * 1.2 ;
8231: LD_ADDR_VAR 0 10
8235: PUSH
8236: LD_VAR 0 10
8240: PUSH
8241: LD_REAL  1.20000000000000E+0000
8244: MUL
8245: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8246: LD_VAR 0 6
8250: PPUSH
8251: CALL_OW 257
8255: PUSH
8256: LD_INT 5
8258: PUSH
8259: LD_INT 7
8261: PUSH
8262: LD_INT 9
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: IN
8270: PUSH
8271: LD_VAR 0 1
8275: PPUSH
8276: LD_INT 52
8278: PPUSH
8279: CALL_OW 321
8283: PUSH
8284: LD_INT 2
8286: EQUAL
8287: AND
8288: IFFALSE 8305
// bpoints := bpoints * 1.5 ;
8290: LD_ADDR_VAR 0 10
8294: PUSH
8295: LD_VAR 0 10
8299: PUSH
8300: LD_REAL  1.50000000000000E+0000
8303: MUL
8304: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8305: LD_VAR 0 1
8309: PPUSH
8310: LD_INT 66
8312: PPUSH
8313: CALL_OW 321
8317: PUSH
8318: LD_INT 2
8320: EQUAL
8321: IFFALSE 8338
// bpoints := bpoints * 1.1 ;
8323: LD_ADDR_VAR 0 10
8327: PUSH
8328: LD_VAR 0 10
8332: PUSH
8333: LD_REAL  1.10000000000000E+0000
8336: MUL
8337: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8338: LD_ADDR_VAR 0 10
8342: PUSH
8343: LD_VAR 0 10
8347: PUSH
8348: LD_VAR 0 6
8352: PPUSH
8353: LD_INT 1
8355: PPUSH
8356: CALL_OW 259
8360: PUSH
8361: LD_REAL  1.15000000000000E+0000
8364: MUL
8365: MUL
8366: ST_TO_ADDR
// end ; unit_vehicle :
8367: GO 9195
8369: LD_INT 2
8371: DOUBLE
8372: EQUAL
8373: IFTRUE 8377
8375: GO 9183
8377: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8378: LD_VAR 0 6
8382: PPUSH
8383: CALL_OW 264
8387: PUSH
8388: LD_INT 2
8390: PUSH
8391: LD_INT 42
8393: PUSH
8394: LD_INT 24
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: IN
8402: IFFALSE 8423
// points := [ 25 , 5 , 3 ] ;
8404: LD_ADDR_VAR 0 9
8408: PUSH
8409: LD_INT 25
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8423: LD_VAR 0 6
8427: PPUSH
8428: CALL_OW 264
8432: PUSH
8433: LD_INT 4
8435: PUSH
8436: LD_INT 43
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: IN
8447: IFFALSE 8468
// points := [ 40 , 15 , 5 ] ;
8449: LD_ADDR_VAR 0 9
8453: PUSH
8454: LD_INT 40
8456: PUSH
8457: LD_INT 15
8459: PUSH
8460: LD_INT 5
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8468: LD_VAR 0 6
8472: PPUSH
8473: CALL_OW 264
8477: PUSH
8478: LD_INT 3
8480: PUSH
8481: LD_INT 23
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: IN
8488: IFFALSE 8509
// points := [ 7 , 25 , 8 ] ;
8490: LD_ADDR_VAR 0 9
8494: PUSH
8495: LD_INT 7
8497: PUSH
8498: LD_INT 25
8500: PUSH
8501: LD_INT 8
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 264
8518: PUSH
8519: LD_INT 5
8521: PUSH
8522: LD_INT 27
8524: PUSH
8525: LD_INT 44
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: IN
8533: IFFALSE 8554
// points := [ 14 , 50 , 16 ] ;
8535: LD_ADDR_VAR 0 9
8539: PUSH
8540: LD_INT 14
8542: PUSH
8543: LD_INT 50
8545: PUSH
8546: LD_INT 16
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8554: LD_VAR 0 6
8558: PPUSH
8559: CALL_OW 264
8563: PUSH
8564: LD_INT 6
8566: PUSH
8567: LD_INT 46
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: IN
8574: IFFALSE 8595
// points := [ 32 , 120 , 70 ] ;
8576: LD_ADDR_VAR 0 9
8580: PUSH
8581: LD_INT 32
8583: PUSH
8584: LD_INT 120
8586: PUSH
8587: LD_INT 70
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8595: LD_VAR 0 6
8599: PPUSH
8600: CALL_OW 264
8604: PUSH
8605: LD_INT 7
8607: PUSH
8608: LD_INT 28
8610: PUSH
8611: LD_INT 45
8613: PUSH
8614: LD_INT 92
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: IN
8623: IFFALSE 8644
// points := [ 35 , 20 , 45 ] ;
8625: LD_ADDR_VAR 0 9
8629: PUSH
8630: LD_INT 35
8632: PUSH
8633: LD_INT 20
8635: PUSH
8636: LD_INT 45
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8644: LD_VAR 0 6
8648: PPUSH
8649: CALL_OW 264
8653: PUSH
8654: LD_INT 47
8656: PUSH
8657: EMPTY
8658: LIST
8659: IN
8660: IFFALSE 8681
// points := [ 67 , 45 , 75 ] ;
8662: LD_ADDR_VAR 0 9
8666: PUSH
8667: LD_INT 67
8669: PUSH
8670: LD_INT 45
8672: PUSH
8673: LD_INT 75
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8681: LD_VAR 0 6
8685: PPUSH
8686: CALL_OW 264
8690: PUSH
8691: LD_INT 26
8693: PUSH
8694: EMPTY
8695: LIST
8696: IN
8697: IFFALSE 8718
// points := [ 120 , 30 , 80 ] ;
8699: LD_ADDR_VAR 0 9
8703: PUSH
8704: LD_INT 120
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 80
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8718: LD_VAR 0 6
8722: PPUSH
8723: CALL_OW 264
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: EMPTY
8732: LIST
8733: IN
8734: IFFALSE 8755
// points := [ 40 , 1 , 1 ] ;
8736: LD_ADDR_VAR 0 9
8740: PUSH
8741: LD_INT 40
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8755: LD_VAR 0 6
8759: PPUSH
8760: CALL_OW 264
8764: PUSH
8765: LD_INT 29
8767: PUSH
8768: EMPTY
8769: LIST
8770: IN
8771: IFFALSE 8792
// points := [ 70 , 200 , 400 ] ;
8773: LD_ADDR_VAR 0 9
8777: PUSH
8778: LD_INT 70
8780: PUSH
8781: LD_INT 200
8783: PUSH
8784: LD_INT 400
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8792: LD_VAR 0 6
8796: PPUSH
8797: CALL_OW 264
8801: PUSH
8802: LD_INT 14
8804: PUSH
8805: LD_INT 53
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: IN
8812: IFFALSE 8833
// points := [ 40 , 10 , 20 ] ;
8814: LD_ADDR_VAR 0 9
8818: PUSH
8819: LD_INT 40
8821: PUSH
8822: LD_INT 10
8824: PUSH
8825: LD_INT 20
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8833: LD_VAR 0 6
8837: PPUSH
8838: CALL_OW 264
8842: PUSH
8843: LD_INT 9
8845: PUSH
8846: EMPTY
8847: LIST
8848: IN
8849: IFFALSE 8870
// points := [ 5 , 70 , 20 ] ;
8851: LD_ADDR_VAR 0 9
8855: PUSH
8856: LD_INT 5
8858: PUSH
8859: LD_INT 70
8861: PUSH
8862: LD_INT 20
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8870: LD_VAR 0 6
8874: PPUSH
8875: CALL_OW 264
8879: PUSH
8880: LD_INT 10
8882: PUSH
8883: EMPTY
8884: LIST
8885: IN
8886: IFFALSE 8907
// points := [ 35 , 110 , 70 ] ;
8888: LD_ADDR_VAR 0 9
8892: PUSH
8893: LD_INT 35
8895: PUSH
8896: LD_INT 110
8898: PUSH
8899: LD_INT 70
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8907: LD_VAR 0 6
8911: PPUSH
8912: CALL_OW 265
8916: PUSH
8917: LD_INT 25
8919: EQUAL
8920: IFFALSE 8941
// points := [ 80 , 65 , 100 ] ;
8922: LD_ADDR_VAR 0 9
8926: PUSH
8927: LD_INT 80
8929: PUSH
8930: LD_INT 65
8932: PUSH
8933: LD_INT 100
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8941: LD_VAR 0 6
8945: PPUSH
8946: CALL_OW 263
8950: PUSH
8951: LD_INT 1
8953: EQUAL
8954: IFFALSE 8989
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8956: LD_ADDR_VAR 0 10
8960: PUSH
8961: LD_VAR 0 10
8965: PUSH
8966: LD_VAR 0 6
8970: PPUSH
8971: CALL_OW 311
8975: PPUSH
8976: LD_INT 3
8978: PPUSH
8979: CALL_OW 259
8983: PUSH
8984: LD_INT 4
8986: MUL
8987: MUL
8988: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8989: LD_VAR 0 6
8993: PPUSH
8994: CALL_OW 263
8998: PUSH
8999: LD_INT 2
9001: EQUAL
9002: IFFALSE 9053
// begin j := IsControledBy ( i ) ;
9004: LD_ADDR_VAR 0 7
9008: PUSH
9009: LD_VAR 0 6
9013: PPUSH
9014: CALL_OW 312
9018: ST_TO_ADDR
// if j then
9019: LD_VAR 0 7
9023: IFFALSE 9053
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9025: LD_ADDR_VAR 0 10
9029: PUSH
9030: LD_VAR 0 10
9034: PUSH
9035: LD_VAR 0 7
9039: PPUSH
9040: LD_INT 3
9042: PPUSH
9043: CALL_OW 259
9047: PUSH
9048: LD_INT 3
9050: MUL
9051: MUL
9052: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9053: LD_VAR 0 6
9057: PPUSH
9058: CALL_OW 264
9062: PUSH
9063: LD_INT 5
9065: PUSH
9066: LD_INT 6
9068: PUSH
9069: LD_INT 46
9071: PUSH
9072: LD_INT 44
9074: PUSH
9075: LD_INT 47
9077: PUSH
9078: LD_INT 45
9080: PUSH
9081: LD_INT 28
9083: PUSH
9084: LD_INT 7
9086: PUSH
9087: LD_INT 27
9089: PUSH
9090: LD_INT 29
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: IN
9105: PUSH
9106: LD_VAR 0 1
9110: PPUSH
9111: LD_INT 52
9113: PPUSH
9114: CALL_OW 321
9118: PUSH
9119: LD_INT 2
9121: EQUAL
9122: AND
9123: IFFALSE 9140
// bpoints := bpoints * 1.2 ;
9125: LD_ADDR_VAR 0 10
9129: PUSH
9130: LD_VAR 0 10
9134: PUSH
9135: LD_REAL  1.20000000000000E+0000
9138: MUL
9139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9140: LD_VAR 0 6
9144: PPUSH
9145: CALL_OW 264
9149: PUSH
9150: LD_INT 6
9152: PUSH
9153: LD_INT 46
9155: PUSH
9156: LD_INT 47
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: IN
9164: IFFALSE 9181
// bpoints := bpoints * 1.2 ;
9166: LD_ADDR_VAR 0 10
9170: PUSH
9171: LD_VAR 0 10
9175: PUSH
9176: LD_REAL  1.20000000000000E+0000
9179: MUL
9180: ST_TO_ADDR
// end ; unit_building :
9181: GO 9195
9183: LD_INT 3
9185: DOUBLE
9186: EQUAL
9187: IFTRUE 9191
9189: GO 9194
9191: POP
// ; end ;
9192: GO 9195
9194: POP
// for j = 1 to 3 do
9195: LD_ADDR_VAR 0 7
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_INT 3
9207: PUSH
9208: FOR_TO
9209: IFFALSE 9262
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9211: LD_ADDR_VAR 0 5
9215: PUSH
9216: LD_VAR 0 5
9220: PPUSH
9221: LD_VAR 0 7
9225: PPUSH
9226: LD_VAR 0 5
9230: PUSH
9231: LD_VAR 0 7
9235: ARRAY
9236: PUSH
9237: LD_VAR 0 9
9241: PUSH
9242: LD_VAR 0 7
9246: ARRAY
9247: PUSH
9248: LD_VAR 0 10
9252: MUL
9253: PLUS
9254: PPUSH
9255: CALL_OW 1
9259: ST_TO_ADDR
9260: GO 9208
9262: POP
9263: POP
// end ;
9264: GO 7743
9266: POP
9267: POP
// result := Replace ( result , 4 , tmp ) ;
9268: LD_ADDR_VAR 0 5
9272: PUSH
9273: LD_VAR 0 5
9277: PPUSH
9278: LD_INT 4
9280: PPUSH
9281: LD_VAR 0 8
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end ;
9291: LD_VAR 0 5
9295: RET
// export function DangerAtRange ( unit , range ) ; begin
9296: LD_INT 0
9298: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 255
9313: PPUSH
9314: LD_VAR 0 1
9318: PPUSH
9319: CALL_OW 250
9323: PPUSH
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 251
9333: PPUSH
9334: LD_VAR 0 2
9338: PPUSH
9339: CALL 7595 0 4
9343: ST_TO_ADDR
// end ;
9344: LD_VAR 0 3
9348: RET
// export function DangerInArea ( side , area ) ; begin
9349: LD_INT 0
9351: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9352: LD_ADDR_VAR 0 3
9356: PUSH
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 81
9364: PUSH
9365: LD_VAR 0 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 70
9378: ST_TO_ADDR
// end ;
9379: LD_VAR 0 3
9383: RET
// export function IsExtension ( b ) ; begin
9384: LD_INT 0
9386: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: LD_VAR 0 1
9396: PUSH
9397: LD_INT 23
9399: PUSH
9400: LD_INT 20
9402: PUSH
9403: LD_INT 22
9405: PUSH
9406: LD_INT 17
9408: PUSH
9409: LD_INT 24
9411: PUSH
9412: LD_INT 21
9414: PUSH
9415: LD_INT 19
9417: PUSH
9418: LD_INT 16
9420: PUSH
9421: LD_INT 25
9423: PUSH
9424: LD_INT 18
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: IN
9439: ST_TO_ADDR
// end ;
9440: LD_VAR 0 2
9444: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9445: LD_INT 0
9447: PPUSH
9448: PPUSH
9449: PPUSH
// result := [ ] ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: EMPTY
9456: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9457: LD_ADDR_VAR 0 5
9461: PUSH
9462: LD_VAR 0 2
9466: PPUSH
9467: LD_INT 21
9469: PUSH
9470: LD_INT 3
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 70
9481: ST_TO_ADDR
// if not tmp then
9482: LD_VAR 0 5
9486: NOT
9487: IFFALSE 9491
// exit ;
9489: GO 9555
// if checkLink then
9491: LD_VAR 0 3
9495: IFFALSE 9545
// begin for i in tmp do
9497: LD_ADDR_VAR 0 6
9501: PUSH
9502: LD_VAR 0 5
9506: PUSH
9507: FOR_IN
9508: IFFALSE 9543
// if GetBase ( i ) <> base then
9510: LD_VAR 0 6
9514: PPUSH
9515: CALL_OW 274
9519: PUSH
9520: LD_VAR 0 1
9524: NONEQUAL
9525: IFFALSE 9541
// ComLinkToBase ( base , i ) ;
9527: LD_VAR 0 1
9531: PPUSH
9532: LD_VAR 0 6
9536: PPUSH
9537: CALL_OW 169
9541: GO 9507
9543: POP
9544: POP
// end ; result := tmp ;
9545: LD_ADDR_VAR 0 4
9549: PUSH
9550: LD_VAR 0 5
9554: ST_TO_ADDR
// end ;
9555: LD_VAR 0 4
9559: RET
// export function ComComplete ( units , b ) ; var i ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
// if not units then
9564: LD_VAR 0 1
9568: NOT
9569: IFFALSE 9573
// exit ;
9571: GO 9663
// for i in units do
9573: LD_ADDR_VAR 0 4
9577: PUSH
9578: LD_VAR 0 1
9582: PUSH
9583: FOR_IN
9584: IFFALSE 9661
// if BuildingStatus ( b ) = bs_build then
9586: LD_VAR 0 2
9590: PPUSH
9591: CALL_OW 461
9595: PUSH
9596: LD_INT 1
9598: EQUAL
9599: IFFALSE 9659
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9601: LD_VAR 0 4
9605: PPUSH
9606: LD_STRING h
9608: PUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: CALL_OW 250
9618: PUSH
9619: LD_VAR 0 2
9623: PPUSH
9624: CALL_OW 251
9628: PUSH
9629: LD_VAR 0 2
9633: PUSH
9634: LD_INT 0
9636: PUSH
9637: LD_INT 0
9639: PUSH
9640: LD_INT 0
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: PPUSH
9655: CALL_OW 446
9659: GO 9583
9661: POP
9662: POP
// end ;
9663: LD_VAR 0 3
9667: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9668: LD_INT 0
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
9674: PPUSH
9675: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9676: LD_VAR 0 1
9680: NOT
9681: PUSH
9682: LD_VAR 0 1
9686: PPUSH
9687: CALL_OW 263
9691: PUSH
9692: LD_INT 2
9694: NONEQUAL
9695: OR
9696: IFFALSE 9700
// exit ;
9698: GO 10016
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9700: LD_ADDR_VAR 0 6
9704: PUSH
9705: LD_INT 22
9707: PUSH
9708: LD_VAR 0 1
9712: PPUSH
9713: CALL_OW 255
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: LD_INT 30
9727: PUSH
9728: LD_INT 36
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 34
9737: PUSH
9738: LD_INT 31
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 69
9758: ST_TO_ADDR
// if not tmp then
9759: LD_VAR 0 6
9763: NOT
9764: IFFALSE 9768
// exit ;
9766: GO 10016
// result := [ ] ;
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: EMPTY
9774: ST_TO_ADDR
// for i in tmp do
9775: LD_ADDR_VAR 0 3
9779: PUSH
9780: LD_VAR 0 6
9784: PUSH
9785: FOR_IN
9786: IFFALSE 9857
// begin t := UnitsInside ( i ) ;
9788: LD_ADDR_VAR 0 4
9792: PUSH
9793: LD_VAR 0 3
9797: PPUSH
9798: CALL_OW 313
9802: ST_TO_ADDR
// if t then
9803: LD_VAR 0 4
9807: IFFALSE 9855
// for j in t do
9809: LD_ADDR_VAR 0 7
9813: PUSH
9814: LD_VAR 0 4
9818: PUSH
9819: FOR_IN
9820: IFFALSE 9853
// result := Replace ( result , result + 1 , j ) ;
9822: LD_ADDR_VAR 0 2
9826: PUSH
9827: LD_VAR 0 2
9831: PPUSH
9832: LD_VAR 0 2
9836: PUSH
9837: LD_INT 1
9839: PLUS
9840: PPUSH
9841: LD_VAR 0 7
9845: PPUSH
9846: CALL_OW 1
9850: ST_TO_ADDR
9851: GO 9819
9853: POP
9854: POP
// end ;
9855: GO 9785
9857: POP
9858: POP
// if not result then
9859: LD_VAR 0 2
9863: NOT
9864: IFFALSE 9868
// exit ;
9866: GO 10016
// mech := result [ 1 ] ;
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: LD_VAR 0 2
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: ST_TO_ADDR
// if result > 1 then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_INT 1
9889: GREATER
9890: IFFALSE 10002
// begin for i = 2 to result do
9892: LD_ADDR_VAR 0 3
9896: PUSH
9897: DOUBLE
9898: LD_INT 2
9900: DEC
9901: ST_TO_ADDR
9902: LD_VAR 0 2
9906: PUSH
9907: FOR_TO
9908: IFFALSE 10000
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9910: LD_ADDR_VAR 0 4
9914: PUSH
9915: LD_VAR 0 2
9919: PUSH
9920: LD_VAR 0 3
9924: ARRAY
9925: PPUSH
9926: LD_INT 3
9928: PPUSH
9929: CALL_OW 259
9933: PUSH
9934: LD_VAR 0 2
9938: PUSH
9939: LD_VAR 0 3
9943: ARRAY
9944: PPUSH
9945: CALL_OW 432
9949: MINUS
9950: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9951: LD_VAR 0 4
9955: PUSH
9956: LD_VAR 0 5
9960: PPUSH
9961: LD_INT 3
9963: PPUSH
9964: CALL_OW 259
9968: PUSH
9969: LD_VAR 0 5
9973: PPUSH
9974: CALL_OW 432
9978: MINUS
9979: GREATEREQUAL
9980: IFFALSE 9998
// mech := result [ i ] ;
9982: LD_ADDR_VAR 0 5
9986: PUSH
9987: LD_VAR 0 2
9991: PUSH
9992: LD_VAR 0 3
9996: ARRAY
9997: ST_TO_ADDR
// end ;
9998: GO 9907
10000: POP
10001: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10002: LD_VAR 0 1
10006: PPUSH
10007: LD_VAR 0 5
10011: PPUSH
10012: CALL_OW 135
// end ;
10016: LD_VAR 0 2
10020: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
10035: PPUSH
// result := [ ] ;
10036: LD_ADDR_VAR 0 7
10040: PUSH
10041: EMPTY
10042: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 266
10052: PUSH
10053: LD_INT 0
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: IN
10063: NOT
10064: IFFALSE 10068
// exit ;
10066: GO 11702
// if name then
10068: LD_VAR 0 3
10072: IFFALSE 10088
// SetBName ( base_dep , name ) ;
10074: LD_VAR 0 1
10078: PPUSH
10079: LD_VAR 0 3
10083: PPUSH
10084: CALL_OW 500
// base := GetBase ( base_dep ) ;
10088: LD_ADDR_VAR 0 15
10092: PUSH
10093: LD_VAR 0 1
10097: PPUSH
10098: CALL_OW 274
10102: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10103: LD_ADDR_VAR 0 16
10107: PUSH
10108: LD_VAR 0 1
10112: PPUSH
10113: CALL_OW 255
10117: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10118: LD_ADDR_VAR 0 17
10122: PUSH
10123: LD_VAR 0 1
10127: PPUSH
10128: CALL_OW 248
10132: ST_TO_ADDR
// if sources then
10133: LD_VAR 0 5
10137: IFFALSE 10184
// for i = 1 to 3 do
10139: LD_ADDR_VAR 0 8
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_INT 3
10151: PUSH
10152: FOR_TO
10153: IFFALSE 10182
// AddResourceType ( base , i , sources [ i ] ) ;
10155: LD_VAR 0 15
10159: PPUSH
10160: LD_VAR 0 8
10164: PPUSH
10165: LD_VAR 0 5
10169: PUSH
10170: LD_VAR 0 8
10174: ARRAY
10175: PPUSH
10176: CALL_OW 276
10180: GO 10152
10182: POP
10183: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10184: LD_ADDR_VAR 0 18
10188: PUSH
10189: LD_VAR 0 15
10193: PPUSH
10194: LD_VAR 0 2
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL 9445 0 3
10206: ST_TO_ADDR
// InitHc ;
10207: CALL_OW 19
// InitUc ;
10211: CALL_OW 18
// uc_side := side ;
10215: LD_ADDR_OWVAR 20
10219: PUSH
10220: LD_VAR 0 16
10224: ST_TO_ADDR
// uc_nation := nation ;
10225: LD_ADDR_OWVAR 21
10229: PUSH
10230: LD_VAR 0 17
10234: ST_TO_ADDR
// if buildings then
10235: LD_VAR 0 18
10239: IFFALSE 11561
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10241: LD_ADDR_VAR 0 19
10245: PUSH
10246: LD_VAR 0 18
10250: PPUSH
10251: LD_INT 2
10253: PUSH
10254: LD_INT 30
10256: PUSH
10257: LD_INT 29
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 30
10266: PUSH
10267: LD_INT 30
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: PPUSH
10279: CALL_OW 72
10283: ST_TO_ADDR
// if tmp then
10284: LD_VAR 0 19
10288: IFFALSE 10336
// for i in tmp do
10290: LD_ADDR_VAR 0 8
10294: PUSH
10295: LD_VAR 0 19
10299: PUSH
10300: FOR_IN
10301: IFFALSE 10334
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10303: LD_VAR 0 8
10307: PPUSH
10308: CALL_OW 250
10312: PPUSH
10313: LD_VAR 0 8
10317: PPUSH
10318: CALL_OW 251
10322: PPUSH
10323: LD_VAR 0 16
10327: PPUSH
10328: CALL_OW 441
10332: GO 10300
10334: POP
10335: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10336: LD_VAR 0 18
10340: PPUSH
10341: LD_INT 2
10343: PUSH
10344: LD_INT 30
10346: PUSH
10347: LD_INT 32
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 30
10356: PUSH
10357: LD_INT 33
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 72
10373: IFFALSE 10461
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10375: LD_ADDR_VAR 0 8
10379: PUSH
10380: LD_VAR 0 18
10384: PPUSH
10385: LD_INT 2
10387: PUSH
10388: LD_INT 30
10390: PUSH
10391: LD_INT 32
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: LD_INT 33
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: PPUSH
10413: CALL_OW 72
10417: PUSH
10418: FOR_IN
10419: IFFALSE 10459
// begin if not GetBWeapon ( i ) then
10421: LD_VAR 0 8
10425: PPUSH
10426: CALL_OW 269
10430: NOT
10431: IFFALSE 10457
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10433: LD_VAR 0 8
10437: PPUSH
10438: LD_VAR 0 8
10442: PPUSH
10443: LD_VAR 0 2
10447: PPUSH
10448: CALL 11707 0 2
10452: PPUSH
10453: CALL_OW 431
// end ;
10457: GO 10418
10459: POP
10460: POP
// end ; for i = 1 to personel do
10461: LD_ADDR_VAR 0 8
10465: PUSH
10466: DOUBLE
10467: LD_INT 1
10469: DEC
10470: ST_TO_ADDR
10471: LD_VAR 0 6
10475: PUSH
10476: FOR_TO
10477: IFFALSE 11541
// begin if i > 4 then
10479: LD_VAR 0 8
10483: PUSH
10484: LD_INT 4
10486: GREATER
10487: IFFALSE 10491
// break ;
10489: GO 11541
// case i of 1 :
10491: LD_VAR 0 8
10495: PUSH
10496: LD_INT 1
10498: DOUBLE
10499: EQUAL
10500: IFTRUE 10504
10502: GO 10584
10504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10505: LD_ADDR_VAR 0 12
10509: PUSH
10510: LD_VAR 0 18
10514: PPUSH
10515: LD_INT 22
10517: PUSH
10518: LD_VAR 0 16
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 58
10529: PUSH
10530: EMPTY
10531: LIST
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 30
10538: PUSH
10539: LD_INT 32
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 30
10558: PUSH
10559: LD_INT 5
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 72
10581: ST_TO_ADDR
10582: GO 10806
10584: LD_INT 2
10586: DOUBLE
10587: EQUAL
10588: IFTRUE 10592
10590: GO 10654
10592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10593: LD_ADDR_VAR 0 12
10597: PUSH
10598: LD_VAR 0 18
10602: PPUSH
10603: LD_INT 22
10605: PUSH
10606: LD_VAR 0 16
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 0
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 72
10651: ST_TO_ADDR
10652: GO 10806
10654: LD_INT 3
10656: DOUBLE
10657: EQUAL
10658: IFTRUE 10662
10660: GO 10724
10662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10663: LD_ADDR_VAR 0 12
10667: PUSH
10668: LD_VAR 0 18
10672: PPUSH
10673: LD_INT 22
10675: PUSH
10676: LD_VAR 0 16
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 30
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PPUSH
10717: CALL_OW 72
10721: ST_TO_ADDR
10722: GO 10806
10724: LD_INT 4
10726: DOUBLE
10727: EQUAL
10728: IFTRUE 10732
10730: GO 10805
10732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10733: LD_ADDR_VAR 0 12
10737: PUSH
10738: LD_VAR 0 18
10742: PPUSH
10743: LD_INT 22
10745: PUSH
10746: LD_VAR 0 16
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: LD_INT 30
10760: PUSH
10761: LD_INT 6
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 30
10770: PUSH
10771: LD_INT 7
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 30
10780: PUSH
10781: LD_INT 8
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 72
10802: ST_TO_ADDR
10803: GO 10806
10805: POP
// if i = 1 then
10806: LD_VAR 0 8
10810: PUSH
10811: LD_INT 1
10813: EQUAL
10814: IFFALSE 10925
// begin tmp := [ ] ;
10816: LD_ADDR_VAR 0 19
10820: PUSH
10821: EMPTY
10822: ST_TO_ADDR
// for j in f do
10823: LD_ADDR_VAR 0 9
10827: PUSH
10828: LD_VAR 0 12
10832: PUSH
10833: FOR_IN
10834: IFFALSE 10907
// if GetBType ( j ) = b_bunker then
10836: LD_VAR 0 9
10840: PPUSH
10841: CALL_OW 266
10845: PUSH
10846: LD_INT 32
10848: EQUAL
10849: IFFALSE 10876
// tmp := Insert ( tmp , 1 , j ) else
10851: LD_ADDR_VAR 0 19
10855: PUSH
10856: LD_VAR 0 19
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: LD_VAR 0 9
10868: PPUSH
10869: CALL_OW 2
10873: ST_TO_ADDR
10874: GO 10905
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10876: LD_ADDR_VAR 0 19
10880: PUSH
10881: LD_VAR 0 19
10885: PPUSH
10886: LD_VAR 0 19
10890: PUSH
10891: LD_INT 1
10893: PLUS
10894: PPUSH
10895: LD_VAR 0 9
10899: PPUSH
10900: CALL_OW 2
10904: ST_TO_ADDR
10905: GO 10833
10907: POP
10908: POP
// if tmp then
10909: LD_VAR 0 19
10913: IFFALSE 10925
// f := tmp ;
10915: LD_ADDR_VAR 0 12
10919: PUSH
10920: LD_VAR 0 19
10924: ST_TO_ADDR
// end ; x := personel [ i ] ;
10925: LD_ADDR_VAR 0 13
10929: PUSH
10930: LD_VAR 0 6
10934: PUSH
10935: LD_VAR 0 8
10939: ARRAY
10940: ST_TO_ADDR
// if x = - 1 then
10941: LD_VAR 0 13
10945: PUSH
10946: LD_INT 1
10948: NEG
10949: EQUAL
10950: IFFALSE 11159
// begin for j in f do
10952: LD_ADDR_VAR 0 9
10956: PUSH
10957: LD_VAR 0 12
10961: PUSH
10962: FOR_IN
10963: IFFALSE 11155
// repeat InitHc ;
10965: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10969: LD_VAR 0 9
10973: PPUSH
10974: CALL_OW 266
10978: PUSH
10979: LD_INT 5
10981: EQUAL
10982: IFFALSE 11052
// begin if UnitsInside ( j ) < 3 then
10984: LD_VAR 0 9
10988: PPUSH
10989: CALL_OW 313
10993: PUSH
10994: LD_INT 3
10996: LESS
10997: IFFALSE 11033
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10999: LD_INT 0
11001: PPUSH
11002: LD_INT 5
11004: PUSH
11005: LD_INT 8
11007: PUSH
11008: LD_INT 9
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: PUSH
11016: LD_VAR 0 17
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 4
11026: PPUSH
11027: CALL_OW 380
11031: GO 11050
// PrepareHuman ( false , i , skill ) ;
11033: LD_INT 0
11035: PPUSH
11036: LD_VAR 0 8
11040: PPUSH
11041: LD_VAR 0 4
11045: PPUSH
11046: CALL_OW 380
// end else
11050: GO 11069
// PrepareHuman ( false , i , skill ) ;
11052: LD_INT 0
11054: PPUSH
11055: LD_VAR 0 8
11059: PPUSH
11060: LD_VAR 0 4
11064: PPUSH
11065: CALL_OW 380
// un := CreateHuman ;
11069: LD_ADDR_VAR 0 14
11073: PUSH
11074: CALL_OW 44
11078: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11079: LD_ADDR_VAR 0 7
11083: PUSH
11084: LD_VAR 0 7
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: LD_VAR 0 14
11096: PPUSH
11097: CALL_OW 2
11101: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11102: LD_VAR 0 14
11106: PPUSH
11107: LD_VAR 0 9
11111: PPUSH
11112: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11116: LD_VAR 0 9
11120: PPUSH
11121: CALL_OW 313
11125: PUSH
11126: LD_INT 6
11128: EQUAL
11129: PUSH
11130: LD_VAR 0 9
11134: PPUSH
11135: CALL_OW 266
11139: PUSH
11140: LD_INT 32
11142: PUSH
11143: LD_INT 31
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: IN
11150: OR
11151: IFFALSE 10965
11153: GO 10962
11155: POP
11156: POP
// end else
11157: GO 11539
// for j = 1 to x do
11159: LD_ADDR_VAR 0 9
11163: PUSH
11164: DOUBLE
11165: LD_INT 1
11167: DEC
11168: ST_TO_ADDR
11169: LD_VAR 0 13
11173: PUSH
11174: FOR_TO
11175: IFFALSE 11537
// begin InitHc ;
11177: CALL_OW 19
// if not f then
11181: LD_VAR 0 12
11185: NOT
11186: IFFALSE 11275
// begin PrepareHuman ( false , i , skill ) ;
11188: LD_INT 0
11190: PPUSH
11191: LD_VAR 0 8
11195: PPUSH
11196: LD_VAR 0 4
11200: PPUSH
11201: CALL_OW 380
// un := CreateHuman ;
11205: LD_ADDR_VAR 0 14
11209: PUSH
11210: CALL_OW 44
11214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11215: LD_ADDR_VAR 0 7
11219: PUSH
11220: LD_VAR 0 7
11224: PPUSH
11225: LD_INT 1
11227: PPUSH
11228: LD_VAR 0 14
11232: PPUSH
11233: CALL_OW 2
11237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11238: LD_VAR 0 14
11242: PPUSH
11243: LD_VAR 0 1
11247: PPUSH
11248: CALL_OW 250
11252: PPUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 251
11262: PPUSH
11263: LD_INT 10
11265: PPUSH
11266: LD_INT 0
11268: PPUSH
11269: CALL_OW 50
// continue ;
11273: GO 11174
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11275: LD_VAR 0 12
11279: PUSH
11280: LD_INT 1
11282: ARRAY
11283: PPUSH
11284: CALL_OW 313
11288: PUSH
11289: LD_VAR 0 12
11293: PUSH
11294: LD_INT 1
11296: ARRAY
11297: PPUSH
11298: CALL_OW 266
11302: PUSH
11303: LD_INT 32
11305: PUSH
11306: LD_INT 31
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: IN
11313: AND
11314: PUSH
11315: LD_VAR 0 12
11319: PUSH
11320: LD_INT 1
11322: ARRAY
11323: PPUSH
11324: CALL_OW 313
11328: PUSH
11329: LD_INT 6
11331: EQUAL
11332: OR
11333: IFFALSE 11353
// f := Delete ( f , 1 ) ;
11335: LD_ADDR_VAR 0 12
11339: PUSH
11340: LD_VAR 0 12
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 3
11352: ST_TO_ADDR
// if not f then
11353: LD_VAR 0 12
11357: NOT
11358: IFFALSE 11376
// begin x := x + 2 ;
11360: LD_ADDR_VAR 0 13
11364: PUSH
11365: LD_VAR 0 13
11369: PUSH
11370: LD_INT 2
11372: PLUS
11373: ST_TO_ADDR
// continue ;
11374: GO 11174
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11376: LD_VAR 0 12
11380: PUSH
11381: LD_INT 1
11383: ARRAY
11384: PPUSH
11385: CALL_OW 266
11389: PUSH
11390: LD_INT 5
11392: EQUAL
11393: IFFALSE 11467
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11395: LD_VAR 0 12
11399: PUSH
11400: LD_INT 1
11402: ARRAY
11403: PPUSH
11404: CALL_OW 313
11408: PUSH
11409: LD_INT 3
11411: LESS
11412: IFFALSE 11448
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11414: LD_INT 0
11416: PPUSH
11417: LD_INT 5
11419: PUSH
11420: LD_INT 8
11422: PUSH
11423: LD_INT 9
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_VAR 0 17
11435: ARRAY
11436: PPUSH
11437: LD_VAR 0 4
11441: PPUSH
11442: CALL_OW 380
11446: GO 11465
// PrepareHuman ( false , i , skill ) ;
11448: LD_INT 0
11450: PPUSH
11451: LD_VAR 0 8
11455: PPUSH
11456: LD_VAR 0 4
11460: PPUSH
11461: CALL_OW 380
// end else
11465: GO 11484
// PrepareHuman ( false , i , skill ) ;
11467: LD_INT 0
11469: PPUSH
11470: LD_VAR 0 8
11474: PPUSH
11475: LD_VAR 0 4
11479: PPUSH
11480: CALL_OW 380
// un := CreateHuman ;
11484: LD_ADDR_VAR 0 14
11488: PUSH
11489: CALL_OW 44
11493: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11494: LD_ADDR_VAR 0 7
11498: PUSH
11499: LD_VAR 0 7
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: LD_VAR 0 14
11511: PPUSH
11512: CALL_OW 2
11516: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11517: LD_VAR 0 14
11521: PPUSH
11522: LD_VAR 0 12
11526: PUSH
11527: LD_INT 1
11529: ARRAY
11530: PPUSH
11531: CALL_OW 52
// end ;
11535: GO 11174
11537: POP
11538: POP
// end ;
11539: GO 10476
11541: POP
11542: POP
// result := result ^ buildings ;
11543: LD_ADDR_VAR 0 7
11547: PUSH
11548: LD_VAR 0 7
11552: PUSH
11553: LD_VAR 0 18
11557: ADD
11558: ST_TO_ADDR
// end else
11559: GO 11702
// begin for i = 1 to personel do
11561: LD_ADDR_VAR 0 8
11565: PUSH
11566: DOUBLE
11567: LD_INT 1
11569: DEC
11570: ST_TO_ADDR
11571: LD_VAR 0 6
11575: PUSH
11576: FOR_TO
11577: IFFALSE 11700
// begin if i > 4 then
11579: LD_VAR 0 8
11583: PUSH
11584: LD_INT 4
11586: GREATER
11587: IFFALSE 11591
// break ;
11589: GO 11700
// x := personel [ i ] ;
11591: LD_ADDR_VAR 0 13
11595: PUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_VAR 0 8
11605: ARRAY
11606: ST_TO_ADDR
// if x = - 1 then
11607: LD_VAR 0 13
11611: PUSH
11612: LD_INT 1
11614: NEG
11615: EQUAL
11616: IFFALSE 11620
// continue ;
11618: GO 11576
// PrepareHuman ( false , i , skill ) ;
11620: LD_INT 0
11622: PPUSH
11623: LD_VAR 0 8
11627: PPUSH
11628: LD_VAR 0 4
11632: PPUSH
11633: CALL_OW 380
// un := CreateHuman ;
11637: LD_ADDR_VAR 0 14
11641: PUSH
11642: CALL_OW 44
11646: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11647: LD_VAR 0 14
11651: PPUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: CALL_OW 250
11661: PPUSH
11662: LD_VAR 0 1
11666: PPUSH
11667: CALL_OW 251
11671: PPUSH
11672: LD_INT 10
11674: PPUSH
11675: LD_INT 0
11677: PPUSH
11678: CALL_OW 50
// result := result ^ un ;
11682: LD_ADDR_VAR 0 7
11686: PUSH
11687: LD_VAR 0 7
11691: PUSH
11692: LD_VAR 0 14
11696: ADD
11697: ST_TO_ADDR
// end ;
11698: GO 11576
11700: POP
11701: POP
// end ; end ;
11702: LD_VAR 0 7
11706: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
11711: PPUSH
11712: PPUSH
11713: PPUSH
11714: PPUSH
11715: PPUSH
11716: PPUSH
11717: PPUSH
11718: PPUSH
11719: PPUSH
11720: PPUSH
11721: PPUSH
11722: PPUSH
11723: PPUSH
11724: PPUSH
// result := false ;
11725: LD_ADDR_VAR 0 3
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11733: LD_VAR 0 1
11737: NOT
11738: PUSH
11739: LD_VAR 0 1
11743: PPUSH
11744: CALL_OW 266
11748: PUSH
11749: LD_INT 32
11751: PUSH
11752: LD_INT 33
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: IN
11759: NOT
11760: OR
11761: IFFALSE 11765
// exit ;
11763: GO 12874
// nat := GetNation ( tower ) ;
11765: LD_ADDR_VAR 0 12
11769: PUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 248
11779: ST_TO_ADDR
// side := GetSide ( tower ) ;
11780: LD_ADDR_VAR 0 16
11784: PUSH
11785: LD_VAR 0 1
11789: PPUSH
11790: CALL_OW 255
11794: ST_TO_ADDR
// x := GetX ( tower ) ;
11795: LD_ADDR_VAR 0 10
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 250
11809: ST_TO_ADDR
// y := GetY ( tower ) ;
11810: LD_ADDR_VAR 0 11
11814: PUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL_OW 251
11824: ST_TO_ADDR
// if not x or not y then
11825: LD_VAR 0 10
11829: NOT
11830: PUSH
11831: LD_VAR 0 11
11835: NOT
11836: OR
11837: IFFALSE 11841
// exit ;
11839: GO 12874
// weapon := 0 ;
11841: LD_ADDR_VAR 0 18
11845: PUSH
11846: LD_INT 0
11848: ST_TO_ADDR
// fac_list := [ ] ;
11849: LD_ADDR_VAR 0 17
11853: PUSH
11854: EMPTY
11855: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11856: LD_ADDR_VAR 0 6
11860: PUSH
11861: LD_VAR 0 1
11865: PPUSH
11866: CALL_OW 274
11870: PPUSH
11871: LD_VAR 0 2
11875: PPUSH
11876: LD_INT 0
11878: PPUSH
11879: CALL 9445 0 3
11883: PPUSH
11884: LD_INT 30
11886: PUSH
11887: LD_INT 3
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 72
11898: ST_TO_ADDR
// if not factories then
11899: LD_VAR 0 6
11903: NOT
11904: IFFALSE 11908
// exit ;
11906: GO 12874
// for i in factories do
11908: LD_ADDR_VAR 0 8
11912: PUSH
11913: LD_VAR 0 6
11917: PUSH
11918: FOR_IN
11919: IFFALSE 11944
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11921: LD_ADDR_VAR 0 17
11925: PUSH
11926: LD_VAR 0 17
11930: PUSH
11931: LD_VAR 0 8
11935: PPUSH
11936: CALL_OW 478
11940: UNION
11941: ST_TO_ADDR
11942: GO 11918
11944: POP
11945: POP
// if not fac_list then
11946: LD_VAR 0 17
11950: NOT
11951: IFFALSE 11955
// exit ;
11953: GO 12874
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11955: LD_ADDR_VAR 0 5
11959: PUSH
11960: LD_INT 4
11962: PUSH
11963: LD_INT 5
11965: PUSH
11966: LD_INT 9
11968: PUSH
11969: LD_INT 10
11971: PUSH
11972: LD_INT 6
11974: PUSH
11975: LD_INT 7
11977: PUSH
11978: LD_INT 11
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 27
11992: PUSH
11993: LD_INT 28
11995: PUSH
11996: LD_INT 26
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 43
12010: PUSH
12011: LD_INT 44
12013: PUSH
12014: LD_INT 46
12016: PUSH
12017: LD_INT 45
12019: PUSH
12020: LD_INT 47
12022: PUSH
12023: LD_INT 49
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: PUSH
12039: LD_VAR 0 12
12043: ARRAY
12044: ST_TO_ADDR
// list := list isect fac_list ;
12045: LD_ADDR_VAR 0 5
12049: PUSH
12050: LD_VAR 0 5
12054: PUSH
12055: LD_VAR 0 17
12059: ISECT
12060: ST_TO_ADDR
// if not list then
12061: LD_VAR 0 5
12065: NOT
12066: IFFALSE 12070
// exit ;
12068: GO 12874
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12070: LD_VAR 0 12
12074: PUSH
12075: LD_INT 3
12077: EQUAL
12078: PUSH
12079: LD_INT 49
12081: PUSH
12082: LD_VAR 0 5
12086: IN
12087: AND
12088: PUSH
12089: LD_INT 31
12091: PPUSH
12092: LD_VAR 0 16
12096: PPUSH
12097: CALL_OW 321
12101: PUSH
12102: LD_INT 2
12104: EQUAL
12105: AND
12106: IFFALSE 12166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12108: LD_INT 22
12110: PUSH
12111: LD_VAR 0 16
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 35
12122: PUSH
12123: LD_INT 49
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 91
12132: PUSH
12133: LD_VAR 0 1
12137: PUSH
12138: LD_INT 10
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: NOT
12156: IFFALSE 12166
// weapon := ru_time_lapser ;
12158: LD_ADDR_VAR 0 18
12162: PUSH
12163: LD_INT 49
12165: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12166: LD_VAR 0 12
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: IN
12181: PUSH
12182: LD_INT 11
12184: PUSH
12185: LD_VAR 0 5
12189: IN
12190: PUSH
12191: LD_INT 30
12193: PUSH
12194: LD_VAR 0 5
12198: IN
12199: OR
12200: AND
12201: PUSH
12202: LD_INT 6
12204: PPUSH
12205: LD_VAR 0 16
12209: PPUSH
12210: CALL_OW 321
12214: PUSH
12215: LD_INT 2
12217: EQUAL
12218: AND
12219: IFFALSE 12384
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12221: LD_INT 22
12223: PUSH
12224: LD_VAR 0 16
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 2
12235: PUSH
12236: LD_INT 35
12238: PUSH
12239: LD_INT 11
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 35
12248: PUSH
12249: LD_INT 30
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 91
12263: PUSH
12264: LD_VAR 0 1
12268: PUSH
12269: LD_INT 18
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: NOT
12287: PUSH
12288: LD_INT 22
12290: PUSH
12291: LD_VAR 0 16
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 30
12305: PUSH
12306: LD_INT 32
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 33
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 91
12330: PUSH
12331: LD_VAR 0 1
12335: PUSH
12336: LD_INT 12
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: PUSH
12357: LD_INT 2
12359: GREATER
12360: AND
12361: IFFALSE 12384
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12363: LD_ADDR_VAR 0 18
12367: PUSH
12368: LD_INT 11
12370: PUSH
12371: LD_INT 30
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_VAR 0 12
12382: ARRAY
12383: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12384: LD_VAR 0 18
12388: NOT
12389: PUSH
12390: LD_INT 40
12392: PPUSH
12393: LD_VAR 0 16
12397: PPUSH
12398: CALL_OW 321
12402: PUSH
12403: LD_INT 2
12405: EQUAL
12406: AND
12407: PUSH
12408: LD_INT 7
12410: PUSH
12411: LD_VAR 0 5
12415: IN
12416: PUSH
12417: LD_INT 28
12419: PUSH
12420: LD_VAR 0 5
12424: IN
12425: OR
12426: PUSH
12427: LD_INT 45
12429: PUSH
12430: LD_VAR 0 5
12434: IN
12435: OR
12436: AND
12437: IFFALSE 12691
// begin hex := GetHexInfo ( x , y ) ;
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: LD_VAR 0 10
12448: PPUSH
12449: LD_VAR 0 11
12453: PPUSH
12454: CALL_OW 546
12458: ST_TO_ADDR
// if hex [ 1 ] then
12459: LD_VAR 0 4
12463: PUSH
12464: LD_INT 1
12466: ARRAY
12467: IFFALSE 12471
// exit ;
12469: GO 12874
// height := hex [ 2 ] ;
12471: LD_ADDR_VAR 0 15
12475: PUSH
12476: LD_VAR 0 4
12480: PUSH
12481: LD_INT 2
12483: ARRAY
12484: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12485: LD_ADDR_VAR 0 14
12489: PUSH
12490: LD_INT 0
12492: PUSH
12493: LD_INT 2
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: LD_INT 5
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: ST_TO_ADDR
// for i in tmp do
12508: LD_ADDR_VAR 0 8
12512: PUSH
12513: LD_VAR 0 14
12517: PUSH
12518: FOR_IN
12519: IFFALSE 12689
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12521: LD_ADDR_VAR 0 9
12525: PUSH
12526: LD_VAR 0 10
12530: PPUSH
12531: LD_VAR 0 8
12535: PPUSH
12536: LD_INT 5
12538: PPUSH
12539: CALL_OW 272
12543: PUSH
12544: LD_VAR 0 11
12548: PPUSH
12549: LD_VAR 0 8
12553: PPUSH
12554: LD_INT 5
12556: PPUSH
12557: CALL_OW 273
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12566: LD_VAR 0 9
12570: PUSH
12571: LD_INT 1
12573: ARRAY
12574: PPUSH
12575: LD_VAR 0 9
12579: PUSH
12580: LD_INT 2
12582: ARRAY
12583: PPUSH
12584: CALL_OW 488
12588: IFFALSE 12687
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12590: LD_ADDR_VAR 0 4
12594: PUSH
12595: LD_VAR 0 9
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 9
12608: PUSH
12609: LD_INT 2
12611: ARRAY
12612: PPUSH
12613: CALL_OW 546
12617: ST_TO_ADDR
// if hex [ 1 ] then
12618: LD_VAR 0 4
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: IFFALSE 12630
// continue ;
12628: GO 12518
// h := hex [ 2 ] ;
12630: LD_ADDR_VAR 0 13
12634: PUSH
12635: LD_VAR 0 4
12639: PUSH
12640: LD_INT 2
12642: ARRAY
12643: ST_TO_ADDR
// if h + 7 < height then
12644: LD_VAR 0 13
12648: PUSH
12649: LD_INT 7
12651: PLUS
12652: PUSH
12653: LD_VAR 0 15
12657: LESS
12658: IFFALSE 12687
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12660: LD_ADDR_VAR 0 18
12664: PUSH
12665: LD_INT 7
12667: PUSH
12668: LD_INT 28
12670: PUSH
12671: LD_INT 45
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: PUSH
12679: LD_VAR 0 12
12683: ARRAY
12684: ST_TO_ADDR
// break ;
12685: GO 12689
// end ; end ; end ;
12687: GO 12518
12689: POP
12690: POP
// end ; if not weapon then
12691: LD_VAR 0 18
12695: NOT
12696: IFFALSE 12756
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12698: LD_ADDR_VAR 0 5
12702: PUSH
12703: LD_VAR 0 5
12707: PUSH
12708: LD_INT 11
12710: PUSH
12711: LD_INT 30
12713: PUSH
12714: LD_INT 49
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: DIFF
12722: ST_TO_ADDR
// if not list then
12723: LD_VAR 0 5
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 12874
// weapon := list [ rand ( 1 , list ) ] ;
12732: LD_ADDR_VAR 0 18
12736: PUSH
12737: LD_VAR 0 5
12741: PUSH
12742: LD_INT 1
12744: PPUSH
12745: LD_VAR 0 5
12749: PPUSH
12750: CALL_OW 12
12754: ARRAY
12755: ST_TO_ADDR
// end ; if weapon then
12756: LD_VAR 0 18
12760: IFFALSE 12874
// begin tmp := CostOfWeapon ( weapon ) ;
12762: LD_ADDR_VAR 0 14
12766: PUSH
12767: LD_VAR 0 18
12771: PPUSH
12772: CALL_OW 451
12776: ST_TO_ADDR
// j := GetBase ( tower ) ;
12777: LD_ADDR_VAR 0 9
12781: PUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 274
12791: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12792: LD_VAR 0 9
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 275
12804: PUSH
12805: LD_VAR 0 14
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: GREATEREQUAL
12814: PUSH
12815: LD_VAR 0 9
12819: PPUSH
12820: LD_INT 2
12822: PPUSH
12823: CALL_OW 275
12827: PUSH
12828: LD_VAR 0 14
12832: PUSH
12833: LD_INT 2
12835: ARRAY
12836: GREATEREQUAL
12837: AND
12838: PUSH
12839: LD_VAR 0 9
12843: PPUSH
12844: LD_INT 3
12846: PPUSH
12847: CALL_OW 275
12851: PUSH
12852: LD_VAR 0 14
12856: PUSH
12857: LD_INT 3
12859: ARRAY
12860: GREATEREQUAL
12861: AND
12862: IFFALSE 12874
// result := weapon ;
12864: LD_ADDR_VAR 0 3
12868: PUSH
12869: LD_VAR 0 18
12873: ST_TO_ADDR
// end ; end ;
12874: LD_VAR 0 3
12878: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
// result := true ;
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if array1 = array2 then
12891: LD_VAR 0 1
12895: PUSH
12896: LD_VAR 0 2
12900: EQUAL
12901: IFFALSE 12961
// begin for i = 1 to array1 do
12903: LD_ADDR_VAR 0 4
12907: PUSH
12908: DOUBLE
12909: LD_INT 1
12911: DEC
12912: ST_TO_ADDR
12913: LD_VAR 0 1
12917: PUSH
12918: FOR_TO
12919: IFFALSE 12957
// if array1 [ i ] <> array2 [ i ] then
12921: LD_VAR 0 1
12925: PUSH
12926: LD_VAR 0 4
12930: ARRAY
12931: PUSH
12932: LD_VAR 0 2
12936: PUSH
12937: LD_VAR 0 4
12941: ARRAY
12942: NONEQUAL
12943: IFFALSE 12955
// begin result := false ;
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// break ;
12953: GO 12957
// end ;
12955: GO 12918
12957: POP
12958: POP
// end else
12959: GO 12969
// result := false ;
12961: LD_ADDR_VAR 0 3
12965: PUSH
12966: LD_INT 0
12968: ST_TO_ADDR
// end ;
12969: LD_VAR 0 3
12973: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
// if not array1 or not array2 then
12978: LD_VAR 0 1
12982: NOT
12983: PUSH
12984: LD_VAR 0 2
12988: NOT
12989: OR
12990: IFFALSE 12994
// exit ;
12992: GO 13058
// result := true ;
12994: LD_ADDR_VAR 0 3
12998: PUSH
12999: LD_INT 1
13001: ST_TO_ADDR
// for i = 1 to array1 do
13002: LD_ADDR_VAR 0 4
13006: PUSH
13007: DOUBLE
13008: LD_INT 1
13010: DEC
13011: ST_TO_ADDR
13012: LD_VAR 0 1
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13056
// if array1 [ i ] <> array2 [ i ] then
13020: LD_VAR 0 1
13024: PUSH
13025: LD_VAR 0 4
13029: ARRAY
13030: PUSH
13031: LD_VAR 0 2
13035: PUSH
13036: LD_VAR 0 4
13040: ARRAY
13041: NONEQUAL
13042: IFFALSE 13054
// begin result := false ;
13044: LD_ADDR_VAR 0 3
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// break ;
13052: GO 13056
// end ;
13054: GO 13017
13056: POP
13057: POP
// end ;
13058: LD_VAR 0 3
13062: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13063: LD_INT 0
13065: PPUSH
13066: PPUSH
13067: PPUSH
// pom := GetBase ( fac ) ;
13068: LD_ADDR_VAR 0 5
13072: PUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 274
13082: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13083: LD_ADDR_VAR 0 4
13087: PUSH
13088: LD_VAR 0 2
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: PPUSH
13097: LD_VAR 0 2
13101: PUSH
13102: LD_INT 2
13104: ARRAY
13105: PPUSH
13106: LD_VAR 0 2
13110: PUSH
13111: LD_INT 3
13113: ARRAY
13114: PPUSH
13115: LD_VAR 0 2
13119: PUSH
13120: LD_INT 4
13122: ARRAY
13123: PPUSH
13124: CALL_OW 449
13128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13129: LD_ADDR_VAR 0 3
13133: PUSH
13134: LD_VAR 0 5
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 275
13146: PUSH
13147: LD_VAR 0 4
13151: PUSH
13152: LD_INT 1
13154: ARRAY
13155: GREATEREQUAL
13156: PUSH
13157: LD_VAR 0 5
13161: PPUSH
13162: LD_INT 2
13164: PPUSH
13165: CALL_OW 275
13169: PUSH
13170: LD_VAR 0 4
13174: PUSH
13175: LD_INT 2
13177: ARRAY
13178: GREATEREQUAL
13179: AND
13180: PUSH
13181: LD_VAR 0 5
13185: PPUSH
13186: LD_INT 3
13188: PPUSH
13189: CALL_OW 275
13193: PUSH
13194: LD_VAR 0 4
13198: PUSH
13199: LD_INT 3
13201: ARRAY
13202: GREATEREQUAL
13203: AND
13204: ST_TO_ADDR
// end ;
13205: LD_VAR 0 3
13209: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13210: LD_INT 0
13212: PPUSH
13213: PPUSH
13214: PPUSH
13215: PPUSH
// pom := GetBase ( building ) ;
13216: LD_ADDR_VAR 0 3
13220: PUSH
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 274
13230: ST_TO_ADDR
// if not pom then
13231: LD_VAR 0 3
13235: NOT
13236: IFFALSE 13240
// exit ;
13238: GO 13410
// btype := GetBType ( building ) ;
13240: LD_ADDR_VAR 0 5
13244: PUSH
13245: LD_VAR 0 1
13249: PPUSH
13250: CALL_OW 266
13254: ST_TO_ADDR
// if btype = b_armoury then
13255: LD_VAR 0 5
13259: PUSH
13260: LD_INT 4
13262: EQUAL
13263: IFFALSE 13273
// btype := b_barracks ;
13265: LD_ADDR_VAR 0 5
13269: PUSH
13270: LD_INT 5
13272: ST_TO_ADDR
// if btype = b_depot then
13273: LD_VAR 0 5
13277: PUSH
13278: LD_INT 0
13280: EQUAL
13281: IFFALSE 13291
// btype := b_warehouse ;
13283: LD_ADDR_VAR 0 5
13287: PUSH
13288: LD_INT 1
13290: ST_TO_ADDR
// if btype = b_workshop then
13291: LD_VAR 0 5
13295: PUSH
13296: LD_INT 2
13298: EQUAL
13299: IFFALSE 13309
// btype := b_factory ;
13301: LD_ADDR_VAR 0 5
13305: PUSH
13306: LD_INT 3
13308: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13309: LD_ADDR_VAR 0 4
13313: PUSH
13314: LD_VAR 0 5
13318: PPUSH
13319: LD_VAR 0 1
13323: PPUSH
13324: CALL_OW 248
13328: PPUSH
13329: CALL_OW 450
13333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13334: LD_ADDR_VAR 0 2
13338: PUSH
13339: LD_VAR 0 3
13343: PPUSH
13344: LD_INT 1
13346: PPUSH
13347: CALL_OW 275
13351: PUSH
13352: LD_VAR 0 4
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: GREATEREQUAL
13361: PUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: LD_INT 2
13369: PPUSH
13370: CALL_OW 275
13374: PUSH
13375: LD_VAR 0 4
13379: PUSH
13380: LD_INT 2
13382: ARRAY
13383: GREATEREQUAL
13384: AND
13385: PUSH
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 3
13393: PPUSH
13394: CALL_OW 275
13398: PUSH
13399: LD_VAR 0 4
13403: PUSH
13404: LD_INT 3
13406: ARRAY
13407: GREATEREQUAL
13408: AND
13409: ST_TO_ADDR
// end ;
13410: LD_VAR 0 2
13414: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13415: LD_INT 0
13417: PPUSH
13418: PPUSH
13419: PPUSH
// pom := GetBase ( building ) ;
13420: LD_ADDR_VAR 0 4
13424: PUSH
13425: LD_VAR 0 1
13429: PPUSH
13430: CALL_OW 274
13434: ST_TO_ADDR
// if not pom then
13435: LD_VAR 0 4
13439: NOT
13440: IFFALSE 13444
// exit ;
13442: GO 13545
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13444: LD_ADDR_VAR 0 5
13448: PUSH
13449: LD_VAR 0 2
13453: PPUSH
13454: LD_VAR 0 1
13458: PPUSH
13459: CALL_OW 248
13463: PPUSH
13464: CALL_OW 450
13468: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13469: LD_ADDR_VAR 0 3
13473: PUSH
13474: LD_VAR 0 4
13478: PPUSH
13479: LD_INT 1
13481: PPUSH
13482: CALL_OW 275
13486: PUSH
13487: LD_VAR 0 5
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: GREATEREQUAL
13496: PUSH
13497: LD_VAR 0 4
13501: PPUSH
13502: LD_INT 2
13504: PPUSH
13505: CALL_OW 275
13509: PUSH
13510: LD_VAR 0 5
13514: PUSH
13515: LD_INT 2
13517: ARRAY
13518: GREATEREQUAL
13519: AND
13520: PUSH
13521: LD_VAR 0 4
13525: PPUSH
13526: LD_INT 3
13528: PPUSH
13529: CALL_OW 275
13533: PUSH
13534: LD_VAR 0 5
13538: PUSH
13539: LD_INT 3
13541: ARRAY
13542: GREATEREQUAL
13543: AND
13544: ST_TO_ADDR
// end ;
13545: LD_VAR 0 3
13549: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13550: LD_INT 0
13552: PPUSH
13553: PPUSH
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
13560: PPUSH
13561: PPUSH
13562: PPUSH
// result := false ;
13563: LD_ADDR_VAR 0 8
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13571: LD_VAR 0 5
13575: NOT
13576: PUSH
13577: LD_VAR 0 1
13581: NOT
13582: OR
13583: PUSH
13584: LD_VAR 0 2
13588: NOT
13589: OR
13590: PUSH
13591: LD_VAR 0 3
13595: NOT
13596: OR
13597: IFFALSE 13601
// exit ;
13599: GO 14415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13601: LD_ADDR_VAR 0 14
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: LD_VAR 0 2
13615: PPUSH
13616: LD_VAR 0 3
13620: PPUSH
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 5
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 248
13639: PPUSH
13640: LD_INT 0
13642: PPUSH
13643: CALL 15648 0 6
13647: ST_TO_ADDR
// if not hexes then
13648: LD_VAR 0 14
13652: NOT
13653: IFFALSE 13657
// exit ;
13655: GO 14415
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13657: LD_ADDR_VAR 0 17
13661: PUSH
13662: LD_VAR 0 5
13666: PPUSH
13667: LD_INT 22
13669: PUSH
13670: LD_VAR 0 13
13674: PPUSH
13675: CALL_OW 255
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 0
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 30
13699: PUSH
13700: LD_INT 1
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 72
13720: ST_TO_ADDR
// for i = 1 to hexes do
13721: LD_ADDR_VAR 0 9
13725: PUSH
13726: DOUBLE
13727: LD_INT 1
13729: DEC
13730: ST_TO_ADDR
13731: LD_VAR 0 14
13735: PUSH
13736: FOR_TO
13737: IFFALSE 14413
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13739: LD_ADDR_VAR 0 13
13743: PUSH
13744: LD_VAR 0 14
13748: PUSH
13749: LD_VAR 0 9
13753: ARRAY
13754: PUSH
13755: LD_INT 1
13757: ARRAY
13758: PPUSH
13759: LD_VAR 0 14
13763: PUSH
13764: LD_VAR 0 9
13768: ARRAY
13769: PUSH
13770: LD_INT 2
13772: ARRAY
13773: PPUSH
13774: CALL_OW 428
13778: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13779: LD_VAR 0 14
13783: PUSH
13784: LD_VAR 0 9
13788: ARRAY
13789: PUSH
13790: LD_INT 1
13792: ARRAY
13793: PPUSH
13794: LD_VAR 0 14
13798: PUSH
13799: LD_VAR 0 9
13803: ARRAY
13804: PUSH
13805: LD_INT 2
13807: ARRAY
13808: PPUSH
13809: CALL_OW 351
13813: PUSH
13814: LD_VAR 0 14
13818: PUSH
13819: LD_VAR 0 9
13823: ARRAY
13824: PUSH
13825: LD_INT 1
13827: ARRAY
13828: PPUSH
13829: LD_VAR 0 14
13833: PUSH
13834: LD_VAR 0 9
13838: ARRAY
13839: PUSH
13840: LD_INT 2
13842: ARRAY
13843: PPUSH
13844: CALL_OW 488
13848: NOT
13849: OR
13850: PUSH
13851: LD_VAR 0 13
13855: PPUSH
13856: CALL_OW 247
13860: PUSH
13861: LD_INT 3
13863: EQUAL
13864: OR
13865: IFFALSE 13871
// exit ;
13867: POP
13868: POP
13869: GO 14415
// if not tmp then
13871: LD_VAR 0 13
13875: NOT
13876: IFFALSE 13880
// continue ;
13878: GO 13736
// result := true ;
13880: LD_ADDR_VAR 0 8
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13888: LD_VAR 0 6
13892: PUSH
13893: LD_VAR 0 13
13897: PPUSH
13898: CALL_OW 247
13902: PUSH
13903: LD_INT 2
13905: EQUAL
13906: AND
13907: PUSH
13908: LD_VAR 0 13
13912: PPUSH
13913: CALL_OW 263
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: AND
13922: IFFALSE 14086
// begin if IsDrivenBy ( tmp ) then
13924: LD_VAR 0 13
13928: PPUSH
13929: CALL_OW 311
13933: IFFALSE 13937
// continue ;
13935: GO 13736
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13937: LD_VAR 0 6
13941: PPUSH
13942: LD_INT 3
13944: PUSH
13945: LD_INT 60
13947: PUSH
13948: EMPTY
13949: LIST
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 3
13957: PUSH
13958: LD_INT 55
13960: PUSH
13961: EMPTY
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 72
13976: IFFALSE 14084
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13978: LD_ADDR_VAR 0 18
13982: PUSH
13983: LD_VAR 0 6
13987: PPUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 60
13993: PUSH
13994: EMPTY
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 3
14003: PUSH
14004: LD_INT 55
14006: PUSH
14007: EMPTY
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 72
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: ST_TO_ADDR
// if IsInUnit ( driver ) then
14027: LD_VAR 0 18
14031: PPUSH
14032: CALL_OW 310
14036: IFFALSE 14047
// ComExit ( driver ) ;
14038: LD_VAR 0 18
14042: PPUSH
14043: CALL 39428 0 1
// AddComEnterUnit ( driver , tmp ) ;
14047: LD_VAR 0 18
14051: PPUSH
14052: LD_VAR 0 13
14056: PPUSH
14057: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14061: LD_VAR 0 18
14065: PPUSH
14066: LD_VAR 0 7
14070: PPUSH
14071: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14075: LD_VAR 0 18
14079: PPUSH
14080: CALL_OW 181
// end ; continue ;
14084: GO 13736
// end ; if not cleaners or not tmp in cleaners then
14086: LD_VAR 0 6
14090: NOT
14091: PUSH
14092: LD_VAR 0 13
14096: PUSH
14097: LD_VAR 0 6
14101: IN
14102: NOT
14103: OR
14104: IFFALSE 14411
// begin if dep then
14106: LD_VAR 0 17
14110: IFFALSE 14246
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14112: LD_ADDR_VAR 0 16
14116: PUSH
14117: LD_VAR 0 17
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: CALL_OW 250
14130: PPUSH
14131: LD_VAR 0 17
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PPUSH
14140: CALL_OW 254
14144: PPUSH
14145: LD_INT 5
14147: PPUSH
14148: CALL_OW 272
14152: PUSH
14153: LD_VAR 0 17
14157: PUSH
14158: LD_INT 1
14160: ARRAY
14161: PPUSH
14162: CALL_OW 251
14166: PPUSH
14167: LD_VAR 0 17
14171: PUSH
14172: LD_INT 1
14174: ARRAY
14175: PPUSH
14176: CALL_OW 254
14180: PPUSH
14181: LD_INT 5
14183: PPUSH
14184: CALL_OW 273
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14193: LD_VAR 0 16
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: PPUSH
14202: LD_VAR 0 16
14206: PUSH
14207: LD_INT 2
14209: ARRAY
14210: PPUSH
14211: CALL_OW 488
14215: IFFALSE 14246
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14217: LD_VAR 0 13
14221: PPUSH
14222: LD_VAR 0 16
14226: PUSH
14227: LD_INT 1
14229: ARRAY
14230: PPUSH
14231: LD_VAR 0 16
14235: PUSH
14236: LD_INT 2
14238: ARRAY
14239: PPUSH
14240: CALL_OW 111
// continue ;
14244: GO 13736
// end ; end ; r := GetDir ( tmp ) ;
14246: LD_ADDR_VAR 0 15
14250: PUSH
14251: LD_VAR 0 13
14255: PPUSH
14256: CALL_OW 254
14260: ST_TO_ADDR
// if r = 5 then
14261: LD_VAR 0 15
14265: PUSH
14266: LD_INT 5
14268: EQUAL
14269: IFFALSE 14279
// r := 0 ;
14271: LD_ADDR_VAR 0 15
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// for j = r to 5 do
14279: LD_ADDR_VAR 0 10
14283: PUSH
14284: DOUBLE
14285: LD_VAR 0 15
14289: DEC
14290: ST_TO_ADDR
14291: LD_INT 5
14293: PUSH
14294: FOR_TO
14295: IFFALSE 14409
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14297: LD_ADDR_VAR 0 11
14301: PUSH
14302: LD_VAR 0 13
14306: PPUSH
14307: CALL_OW 250
14311: PPUSH
14312: LD_VAR 0 10
14316: PPUSH
14317: LD_INT 2
14319: PPUSH
14320: CALL_OW 272
14324: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14325: LD_ADDR_VAR 0 12
14329: PUSH
14330: LD_VAR 0 13
14334: PPUSH
14335: CALL_OW 251
14339: PPUSH
14340: LD_VAR 0 10
14344: PPUSH
14345: LD_INT 2
14347: PPUSH
14348: CALL_OW 273
14352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14353: LD_VAR 0 11
14357: PPUSH
14358: LD_VAR 0 12
14362: PPUSH
14363: CALL_OW 488
14367: PUSH
14368: LD_VAR 0 11
14372: PPUSH
14373: LD_VAR 0 12
14377: PPUSH
14378: CALL_OW 428
14382: NOT
14383: AND
14384: IFFALSE 14407
// begin ComMoveXY ( tmp , _x , _y ) ;
14386: LD_VAR 0 13
14390: PPUSH
14391: LD_VAR 0 11
14395: PPUSH
14396: LD_VAR 0 12
14400: PPUSH
14401: CALL_OW 111
// break ;
14405: GO 14409
// end ; end ;
14407: GO 14294
14409: POP
14410: POP
// end ; end ;
14411: GO 13736
14413: POP
14414: POP
// end ;
14415: LD_VAR 0 8
14419: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14420: LD_INT 0
14422: PPUSH
// result := true ;
14423: LD_ADDR_VAR 0 3
14427: PUSH
14428: LD_INT 1
14430: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14431: LD_VAR 0 2
14435: PUSH
14436: LD_INT 24
14438: DOUBLE
14439: EQUAL
14440: IFTRUE 14450
14442: LD_INT 33
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14475
14450: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_INT 32
14458: PPUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 321
14468: PUSH
14469: LD_INT 2
14471: EQUAL
14472: ST_TO_ADDR
14473: GO 14791
14475: LD_INT 20
14477: DOUBLE
14478: EQUAL
14479: IFTRUE 14483
14481: GO 14508
14483: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14484: LD_ADDR_VAR 0 3
14488: PUSH
14489: LD_INT 6
14491: PPUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 321
14501: PUSH
14502: LD_INT 2
14504: EQUAL
14505: ST_TO_ADDR
14506: GO 14791
14508: LD_INT 22
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14522
14514: LD_INT 36
14516: DOUBLE
14517: EQUAL
14518: IFTRUE 14522
14520: GO 14547
14522: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14523: LD_ADDR_VAR 0 3
14527: PUSH
14528: LD_INT 15
14530: PPUSH
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 321
14540: PUSH
14541: LD_INT 2
14543: EQUAL
14544: ST_TO_ADDR
14545: GO 14791
14547: LD_INT 30
14549: DOUBLE
14550: EQUAL
14551: IFTRUE 14555
14553: GO 14580
14555: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14556: LD_ADDR_VAR 0 3
14560: PUSH
14561: LD_INT 20
14563: PPUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 321
14573: PUSH
14574: LD_INT 2
14576: EQUAL
14577: ST_TO_ADDR
14578: GO 14791
14580: LD_INT 28
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14594
14586: LD_INT 21
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14619
14594: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14595: LD_ADDR_VAR 0 3
14599: PUSH
14600: LD_INT 21
14602: PPUSH
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 321
14612: PUSH
14613: LD_INT 2
14615: EQUAL
14616: ST_TO_ADDR
14617: GO 14791
14619: LD_INT 16
14621: DOUBLE
14622: EQUAL
14623: IFTRUE 14627
14625: GO 14652
14627: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_INT 84
14635: PPUSH
14636: LD_VAR 0 1
14640: PPUSH
14641: CALL_OW 321
14645: PUSH
14646: LD_INT 2
14648: EQUAL
14649: ST_TO_ADDR
14650: GO 14791
14652: LD_INT 19
14654: DOUBLE
14655: EQUAL
14656: IFTRUE 14666
14658: LD_INT 23
14660: DOUBLE
14661: EQUAL
14662: IFTRUE 14666
14664: GO 14691
14666: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14667: LD_ADDR_VAR 0 3
14671: PUSH
14672: LD_INT 83
14674: PPUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 321
14684: PUSH
14685: LD_INT 2
14687: EQUAL
14688: ST_TO_ADDR
14689: GO 14791
14691: LD_INT 17
14693: DOUBLE
14694: EQUAL
14695: IFTRUE 14699
14697: GO 14724
14699: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_INT 39
14707: PPUSH
14708: LD_VAR 0 1
14712: PPUSH
14713: CALL_OW 321
14717: PUSH
14718: LD_INT 2
14720: EQUAL
14721: ST_TO_ADDR
14722: GO 14791
14724: LD_INT 18
14726: DOUBLE
14727: EQUAL
14728: IFTRUE 14732
14730: GO 14757
14732: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14733: LD_ADDR_VAR 0 3
14737: PUSH
14738: LD_INT 40
14740: PPUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 321
14750: PUSH
14751: LD_INT 2
14753: EQUAL
14754: ST_TO_ADDR
14755: GO 14791
14757: LD_INT 27
14759: DOUBLE
14760: EQUAL
14761: IFTRUE 14765
14763: GO 14790
14765: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14766: LD_ADDR_VAR 0 3
14770: PUSH
14771: LD_INT 35
14773: PPUSH
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 321
14783: PUSH
14784: LD_INT 2
14786: EQUAL
14787: ST_TO_ADDR
14788: GO 14791
14790: POP
// end ;
14791: LD_VAR 0 3
14795: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14796: LD_INT 0
14798: PPUSH
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
14805: PPUSH
14806: PPUSH
14807: PPUSH
14808: PPUSH
// result := false ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: LD_INT 0
14816: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14817: LD_VAR 0 1
14821: NOT
14822: PUSH
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 266
14832: PUSH
14833: LD_INT 0
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: IN
14843: NOT
14844: OR
14845: PUSH
14846: LD_VAR 0 2
14850: NOT
14851: OR
14852: PUSH
14853: LD_VAR 0 5
14857: PUSH
14858: LD_INT 0
14860: PUSH
14861: LD_INT 1
14863: PUSH
14864: LD_INT 2
14866: PUSH
14867: LD_INT 3
14869: PUSH
14870: LD_INT 4
14872: PUSH
14873: LD_INT 5
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: IN
14884: NOT
14885: OR
14886: PUSH
14887: LD_VAR 0 3
14891: PPUSH
14892: LD_VAR 0 4
14896: PPUSH
14897: CALL_OW 488
14901: NOT
14902: OR
14903: IFFALSE 14907
// exit ;
14905: GO 15643
// side := GetSide ( depot ) ;
14907: LD_ADDR_VAR 0 9
14911: PUSH
14912: LD_VAR 0 1
14916: PPUSH
14917: CALL_OW 255
14921: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14922: LD_VAR 0 9
14926: PPUSH
14927: LD_VAR 0 2
14931: PPUSH
14932: CALL 14420 0 2
14936: NOT
14937: IFFALSE 14941
// exit ;
14939: GO 15643
// pom := GetBase ( depot ) ;
14941: LD_ADDR_VAR 0 10
14945: PUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 274
14955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14956: LD_ADDR_VAR 0 11
14960: PUSH
14961: LD_VAR 0 2
14965: PPUSH
14966: LD_VAR 0 1
14970: PPUSH
14971: CALL_OW 248
14975: PPUSH
14976: CALL_OW 450
14980: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14981: LD_VAR 0 10
14985: PPUSH
14986: LD_INT 1
14988: PPUSH
14989: CALL_OW 275
14993: PUSH
14994: LD_VAR 0 11
14998: PUSH
14999: LD_INT 1
15001: ARRAY
15002: GREATEREQUAL
15003: PUSH
15004: LD_VAR 0 10
15008: PPUSH
15009: LD_INT 2
15011: PPUSH
15012: CALL_OW 275
15016: PUSH
15017: LD_VAR 0 11
15021: PUSH
15022: LD_INT 2
15024: ARRAY
15025: GREATEREQUAL
15026: AND
15027: PUSH
15028: LD_VAR 0 10
15032: PPUSH
15033: LD_INT 3
15035: PPUSH
15036: CALL_OW 275
15040: PUSH
15041: LD_VAR 0 11
15045: PUSH
15046: LD_INT 3
15048: ARRAY
15049: GREATEREQUAL
15050: AND
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15643
// if GetBType ( depot ) = b_depot then
15056: LD_VAR 0 1
15060: PPUSH
15061: CALL_OW 266
15065: PUSH
15066: LD_INT 0
15068: EQUAL
15069: IFFALSE 15081
// dist := 28 else
15071: LD_ADDR_VAR 0 14
15075: PUSH
15076: LD_INT 28
15078: ST_TO_ADDR
15079: GO 15089
// dist := 36 ;
15081: LD_ADDR_VAR 0 14
15085: PUSH
15086: LD_INT 36
15088: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_VAR 0 3
15098: PPUSH
15099: LD_VAR 0 4
15103: PPUSH
15104: CALL_OW 297
15108: PUSH
15109: LD_VAR 0 14
15113: GREATER
15114: IFFALSE 15118
// exit ;
15116: GO 15643
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15118: LD_ADDR_VAR 0 12
15122: PUSH
15123: LD_VAR 0 2
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: LD_VAR 0 4
15137: PPUSH
15138: LD_VAR 0 5
15142: PPUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 248
15152: PPUSH
15153: LD_INT 0
15155: PPUSH
15156: CALL 15648 0 6
15160: ST_TO_ADDR
// if not hexes then
15161: LD_VAR 0 12
15165: NOT
15166: IFFALSE 15170
// exit ;
15168: GO 15643
// hex := GetHexInfo ( x , y ) ;
15170: LD_ADDR_VAR 0 15
15174: PUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: LD_VAR 0 4
15184: PPUSH
15185: CALL_OW 546
15189: ST_TO_ADDR
// if hex [ 1 ] then
15190: LD_VAR 0 15
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: IFFALSE 15202
// exit ;
15200: GO 15643
// height := hex [ 2 ] ;
15202: LD_ADDR_VAR 0 13
15206: PUSH
15207: LD_VAR 0 15
15211: PUSH
15212: LD_INT 2
15214: ARRAY
15215: ST_TO_ADDR
// for i = 1 to hexes do
15216: LD_ADDR_VAR 0 7
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 12
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15562
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15234: LD_VAR 0 12
15238: PUSH
15239: LD_VAR 0 7
15243: ARRAY
15244: PUSH
15245: LD_INT 1
15247: ARRAY
15248: PPUSH
15249: LD_VAR 0 12
15253: PUSH
15254: LD_VAR 0 7
15258: ARRAY
15259: PUSH
15260: LD_INT 2
15262: ARRAY
15263: PPUSH
15264: CALL_OW 488
15268: NOT
15269: PUSH
15270: LD_VAR 0 12
15274: PUSH
15275: LD_VAR 0 7
15279: ARRAY
15280: PUSH
15281: LD_INT 1
15283: ARRAY
15284: PPUSH
15285: LD_VAR 0 12
15289: PUSH
15290: LD_VAR 0 7
15294: ARRAY
15295: PUSH
15296: LD_INT 2
15298: ARRAY
15299: PPUSH
15300: CALL_OW 428
15304: PUSH
15305: LD_INT 0
15307: GREATER
15308: OR
15309: PUSH
15310: LD_VAR 0 12
15314: PUSH
15315: LD_VAR 0 7
15319: ARRAY
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: LD_VAR 0 12
15329: PUSH
15330: LD_VAR 0 7
15334: ARRAY
15335: PUSH
15336: LD_INT 2
15338: ARRAY
15339: PPUSH
15340: CALL_OW 351
15344: OR
15345: IFFALSE 15351
// exit ;
15347: POP
15348: POP
15349: GO 15643
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15351: LD_ADDR_VAR 0 8
15355: PUSH
15356: LD_VAR 0 12
15360: PUSH
15361: LD_VAR 0 7
15365: ARRAY
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: PPUSH
15371: LD_VAR 0 12
15375: PUSH
15376: LD_VAR 0 7
15380: ARRAY
15381: PUSH
15382: LD_INT 2
15384: ARRAY
15385: PPUSH
15386: CALL_OW 546
15390: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15391: LD_VAR 0 8
15395: PUSH
15396: LD_INT 1
15398: ARRAY
15399: PUSH
15400: LD_VAR 0 8
15404: PUSH
15405: LD_INT 2
15407: ARRAY
15408: PUSH
15409: LD_VAR 0 13
15413: PUSH
15414: LD_INT 2
15416: PLUS
15417: GREATER
15418: OR
15419: PUSH
15420: LD_VAR 0 8
15424: PUSH
15425: LD_INT 2
15427: ARRAY
15428: PUSH
15429: LD_VAR 0 13
15433: PUSH
15434: LD_INT 2
15436: MINUS
15437: LESS
15438: OR
15439: PUSH
15440: LD_VAR 0 8
15444: PUSH
15445: LD_INT 3
15447: ARRAY
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: LD_INT 8
15454: PUSH
15455: LD_INT 9
15457: PUSH
15458: LD_INT 10
15460: PUSH
15461: LD_INT 11
15463: PUSH
15464: LD_INT 12
15466: PUSH
15467: LD_INT 13
15469: PUSH
15470: LD_INT 16
15472: PUSH
15473: LD_INT 17
15475: PUSH
15476: LD_INT 18
15478: PUSH
15479: LD_INT 19
15481: PUSH
15482: LD_INT 20
15484: PUSH
15485: LD_INT 21
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: IN
15503: NOT
15504: OR
15505: PUSH
15506: LD_VAR 0 8
15510: PUSH
15511: LD_INT 5
15513: ARRAY
15514: NOT
15515: OR
15516: PUSH
15517: LD_VAR 0 8
15521: PUSH
15522: LD_INT 6
15524: ARRAY
15525: PUSH
15526: LD_INT 1
15528: PUSH
15529: LD_INT 2
15531: PUSH
15532: LD_INT 7
15534: PUSH
15535: LD_INT 9
15537: PUSH
15538: LD_INT 10
15540: PUSH
15541: LD_INT 11
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: IN
15552: NOT
15553: OR
15554: IFFALSE 15560
// exit ;
15556: POP
15557: POP
15558: GO 15643
// end ;
15560: GO 15231
15562: POP
15563: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15564: LD_VAR 0 9
15568: PPUSH
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: LD_INT 20
15581: PPUSH
15582: CALL 7595 0 4
15586: PUSH
15587: LD_INT 4
15589: ARRAY
15590: IFFALSE 15594
// exit ;
15592: GO 15643
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15594: LD_VAR 0 2
15598: PUSH
15599: LD_INT 29
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: IN
15609: PUSH
15610: LD_VAR 0 3
15614: PPUSH
15615: LD_VAR 0 4
15619: PPUSH
15620: LD_VAR 0 9
15624: PPUSH
15625: CALL_OW 440
15629: NOT
15630: AND
15631: IFFALSE 15635
// exit ;
15633: GO 15643
// result := true ;
15635: LD_ADDR_VAR 0 6
15639: PUSH
15640: LD_INT 1
15642: ST_TO_ADDR
// end ;
15643: LD_VAR 0 6
15647: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
15658: PPUSH
15659: PPUSH
15660: PPUSH
15661: PPUSH
15662: PPUSH
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
15668: PPUSH
15669: PPUSH
15670: PPUSH
15671: PPUSH
15672: PPUSH
15673: PPUSH
15674: PPUSH
15675: PPUSH
15676: PPUSH
15677: PPUSH
15678: PPUSH
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
15690: PPUSH
15691: PPUSH
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
15699: PPUSH
15700: PPUSH
15701: PPUSH
15702: PPUSH
15703: PPUSH
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
// result = [ ] ;
15708: LD_ADDR_VAR 0 7
15712: PUSH
15713: EMPTY
15714: ST_TO_ADDR
// temp_list = [ ] ;
15715: LD_ADDR_VAR 0 9
15719: PUSH
15720: EMPTY
15721: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15722: LD_VAR 0 4
15726: PUSH
15727: LD_INT 0
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: LD_INT 2
15735: PUSH
15736: LD_INT 3
15738: PUSH
15739: LD_INT 4
15741: PUSH
15742: LD_INT 5
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: IN
15753: NOT
15754: PUSH
15755: LD_VAR 0 1
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: IN
15770: PUSH
15771: LD_VAR 0 5
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: LD_INT 3
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: IN
15790: NOT
15791: AND
15792: OR
15793: IFFALSE 15797
// exit ;
15795: GO 34188
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15797: LD_VAR 0 1
15801: PUSH
15802: LD_INT 6
15804: PUSH
15805: LD_INT 7
15807: PUSH
15808: LD_INT 8
15810: PUSH
15811: LD_INT 13
15813: PUSH
15814: LD_INT 12
15816: PUSH
15817: LD_INT 15
15819: PUSH
15820: LD_INT 11
15822: PUSH
15823: LD_INT 14
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: IN
15840: IFFALSE 15850
// btype = b_lab ;
15842: LD_ADDR_VAR 0 1
15846: PUSH
15847: LD_INT 6
15849: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15850: LD_VAR 0 6
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: LD_INT 2
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: IN
15869: NOT
15870: PUSH
15871: LD_VAR 0 1
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: LD_INT 1
15881: PUSH
15882: LD_INT 2
15884: PUSH
15885: LD_INT 3
15887: PUSH
15888: LD_INT 6
15890: PUSH
15891: LD_INT 36
15893: PUSH
15894: LD_INT 4
15896: PUSH
15897: LD_INT 5
15899: PUSH
15900: LD_INT 31
15902: PUSH
15903: LD_INT 32
15905: PUSH
15906: LD_INT 33
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: IN
15922: NOT
15923: PUSH
15924: LD_VAR 0 6
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: AND
15933: OR
15934: PUSH
15935: LD_VAR 0 1
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: IN
15950: NOT
15951: PUSH
15952: LD_VAR 0 6
15956: PUSH
15957: LD_INT 2
15959: EQUAL
15960: AND
15961: OR
15962: IFFALSE 15972
// mode = 0 ;
15964: LD_ADDR_VAR 0 6
15968: PUSH
15969: LD_INT 0
15971: ST_TO_ADDR
// case mode of 0 :
15972: LD_VAR 0 6
15976: PUSH
15977: LD_INT 0
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 27438
15985: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15986: LD_ADDR_VAR 0 11
15990: PUSH
15991: LD_INT 0
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: LD_INT 1
16006: NEG
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 1
16014: PUSH
16015: LD_INT 0
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 1
16044: NEG
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 1
16055: NEG
16056: PUSH
16057: LD_INT 1
16059: NEG
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 1
16067: NEG
16068: PUSH
16069: LD_INT 2
16071: NEG
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 0
16079: PUSH
16080: LD_INT 2
16082: NEG
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: LD_INT 1
16093: NEG
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 0
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 1
16121: NEG
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 0
16142: PUSH
16143: LD_INT 3
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 1
16152: NEG
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16179: LD_ADDR_VAR 0 12
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: LD_INT 0
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: LD_INT 1
16199: NEG
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 1
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 0
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 1
16237: NEG
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: LD_INT 1
16252: NEG
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: PUSH
16261: LD_INT 1
16263: NEG
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: LD_INT 0
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 1
16291: NEG
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 2
16302: NEG
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 2
16313: NEG
16314: PUSH
16315: LD_INT 1
16317: NEG
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 2
16325: NEG
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 3
16336: NEG
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 3
16347: NEG
16348: PUSH
16349: LD_INT 1
16351: NEG
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16375: LD_ADDR_VAR 0 13
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: LD_INT 0
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 0
16392: PUSH
16393: LD_INT 1
16395: NEG
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: LD_INT 0
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: LD_INT 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 1
16444: NEG
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: NEG
16457: PUSH
16458: LD_INT 2
16460: NEG
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 2
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 2
16498: NEG
16499: PUSH
16500: LD_INT 1
16502: NEG
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 2
16510: NEG
16511: PUSH
16512: LD_INT 2
16514: NEG
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 2
16522: NEG
16523: PUSH
16524: LD_INT 3
16526: NEG
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 3
16534: NEG
16535: PUSH
16536: LD_INT 2
16538: NEG
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 3
16546: NEG
16547: PUSH
16548: LD_INT 3
16550: NEG
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16574: LD_ADDR_VAR 0 14
16578: PUSH
16579: LD_INT 0
16581: PUSH
16582: LD_INT 0
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: LD_INT 1
16594: NEG
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 0
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 0
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 1
16632: NEG
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: NEG
16644: PUSH
16645: LD_INT 1
16647: NEG
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 1
16655: NEG
16656: PUSH
16657: LD_INT 2
16659: NEG
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 0
16667: PUSH
16668: LD_INT 2
16670: NEG
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: LD_INT 1
16681: NEG
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 1
16709: NEG
16710: PUSH
16711: LD_INT 1
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 1
16720: NEG
16721: PUSH
16722: LD_INT 3
16724: NEG
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 0
16732: PUSH
16733: LD_INT 3
16735: NEG
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: LD_INT 2
16746: NEG
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16770: LD_ADDR_VAR 0 15
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 0
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PUSH
16841: LD_INT 1
16843: NEG
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: LD_INT 1
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: LD_INT 1
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 1
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: LD_INT 1
16908: NEG
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 1
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 3
16927: PUSH
16928: LD_INT 0
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 3
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16963: LD_ADDR_VAR 0 16
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: LD_INT 0
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 0
17011: PUSH
17012: LD_INT 1
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 1
17044: NEG
17045: PUSH
17046: LD_INT 2
17048: NEG
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 2
17086: NEG
17087: PUSH
17088: LD_INT 1
17090: NEG
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: NEG
17099: PUSH
17100: LD_INT 2
17102: NEG
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: LD_INT 2
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 3
17120: PUSH
17121: LD_INT 3
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: LD_INT 3
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17156: LD_ADDR_VAR 0 17
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: LD_INT 1
17176: NEG
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: LD_INT 0
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 1
17225: NEG
17226: PUSH
17227: LD_INT 1
17229: NEG
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 1
17237: NEG
17238: PUSH
17239: LD_INT 2
17241: NEG
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 0
17249: PUSH
17250: LD_INT 2
17252: NEG
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 2
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 2
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 1
17321: NEG
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 2
17332: NEG
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 2
17343: NEG
17344: PUSH
17345: LD_INT 1
17347: NEG
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 2
17355: NEG
17356: PUSH
17357: LD_INT 2
17359: NEG
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17386: LD_ADDR_VAR 0 18
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 0
17403: PUSH
17404: LD_INT 1
17406: NEG
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: NEG
17456: PUSH
17457: LD_INT 1
17459: NEG
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 1
17467: NEG
17468: PUSH
17469: LD_INT 2
17471: NEG
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 0
17479: PUSH
17480: LD_INT 2
17482: NEG
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 2
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 2
17562: NEG
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 2
17573: NEG
17574: PUSH
17575: LD_INT 1
17577: NEG
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 2
17585: NEG
17586: PUSH
17587: LD_INT 2
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17616: LD_ADDR_VAR 0 19
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 0
17633: PUSH
17634: LD_INT 1
17636: NEG
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: LD_INT 0
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 1
17685: NEG
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 1
17697: NEG
17698: PUSH
17699: LD_INT 2
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 2
17712: NEG
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 2
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 2
17792: NEG
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: NEG
17804: PUSH
17805: LD_INT 1
17807: NEG
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 2
17815: NEG
17816: PUSH
17817: LD_INT 2
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17846: LD_ADDR_VAR 0 20
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: LD_INT 1
17866: NEG
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 1
17915: NEG
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: NEG
17928: PUSH
17929: LD_INT 2
17931: NEG
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: LD_INT 2
17942: NEG
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: LD_INT 2
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: LD_INT 2
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 2
18022: NEG
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 2
18033: NEG
18034: PUSH
18035: LD_INT 1
18037: NEG
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 2
18045: NEG
18046: PUSH
18047: LD_INT 2
18049: NEG
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18076: LD_ADDR_VAR 0 21
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: NEG
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: LD_INT 2
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 2
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 2
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 2
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: NEG
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 2
18263: NEG
18264: PUSH
18265: LD_INT 1
18267: NEG
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: NEG
18276: PUSH
18277: LD_INT 2
18279: NEG
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18306: LD_ADDR_VAR 0 22
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: NEG
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: LD_INT 2
18391: NEG
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: LD_INT 2
18402: NEG
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 2
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 2
18482: NEG
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18536: LD_ADDR_VAR 0 23
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: LD_INT 0
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: NEG
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: NEG
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: LD_INT 2
18621: NEG
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: LD_INT 2
18632: NEG
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: LD_INT 2
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: NEG
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: LD_INT 1
18727: NEG
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 2
18735: NEG
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 2
18747: NEG
18748: PUSH
18749: LD_INT 3
18751: NEG
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 3
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: LD_INT 2
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18816: LD_ADDR_VAR 0 24
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 1
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: NEG
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: NEG
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 3
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 3
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19092: LD_ADDR_VAR 0 25
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 1
19112: NEG
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 1
19173: NEG
19174: PUSH
19175: LD_INT 2
19177: NEG
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 0
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 2
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: NEG
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: NEG
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 2
19291: NEG
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 3
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 3
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 3
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 3
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19366: LD_ADDR_VAR 0 26
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: NEG
19448: PUSH
19449: LD_INT 2
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 2
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: LD_INT 1
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: LD_INT 2
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 3
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 3
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19642: LD_ADDR_VAR 0 27
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 2
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 2
19841: NEG
19842: PUSH
19843: LD_INT 2
19845: NEG
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 2
19864: NEG
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 3
19875: NEG
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 3
19887: NEG
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19922: LD_ADDR_VAR 0 28
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 1
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: NEG
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: NEG
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: NEG
20134: PUSH
20135: LD_INT 3
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: LD_INT 3
20149: NEG
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 3
20157: NEG
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 3
20169: NEG
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20204: LD_ADDR_VAR 0 29
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 0
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: LD_INT 0
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: NEG
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: LD_INT 2
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 2
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 2
20382: NEG
20383: PUSH
20384: LD_INT 2
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: NEG
20395: PUSH
20396: LD_INT 3
20398: NEG
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: LD_INT 1
20409: NEG
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 3
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: LD_INT 3
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 3
20448: NEG
20449: PUSH
20450: LD_INT 2
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20483: LD_ADDR_VAR 0 30
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: NEG
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: NEG
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: NEG
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 3
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 3
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 3
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 3
20726: NEG
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20761: LD_ADDR_VAR 0 31
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 1
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: NEG
20843: PUSH
20844: LD_INT 2
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 1
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 2
20926: NEG
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: LD_INT 2
20942: NEG
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 2
20950: NEG
20951: PUSH
20952: LD_INT 3
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 1
20965: NEG
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 3
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 3
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: NEG
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 3
21004: NEG
21005: PUSH
21006: LD_INT 2
21008: NEG
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21039: LD_ADDR_VAR 0 32
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: LD_INT 2
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 2
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: NEG
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 2
21216: NEG
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 3
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 3
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: NEG
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 3
21282: NEG
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21317: LD_ADDR_VAR 0 33
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: LD_INT 2
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 2
21472: NEG
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 2
21483: NEG
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: LD_INT 2
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: LD_INT 3
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 3
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 3
21561: NEG
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21596: LD_ADDR_VAR 0 34
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 2
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 2
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 2
21763: NEG
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: NEG
21776: PUSH
21777: LD_INT 2
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: LD_INT 3
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 3
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 2
21830: NEG
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21876: LD_ADDR_VAR 0 35
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21988: LD_ADDR_VAR 0 36
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 0
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22100: LD_ADDR_VAR 0 37
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 0
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22212: LD_ADDR_VAR 0 38
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: LD_INT 1
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: PUSH
22283: LD_INT 1
22285: NEG
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 2
22303: NEG
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22324: LD_ADDR_VAR 0 39
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: LD_INT 1
22344: NEG
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22436: LD_ADDR_VAR 0 40
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22548: LD_ADDR_VAR 0 41
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: LD_INT 1
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: LD_INT 2
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: NEG
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 2
22738: NEG
22739: PUSH
22740: LD_INT 3
22742: NEG
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 3
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 3
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 2
22811: NEG
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 3
22822: NEG
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 3
22845: NEG
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 3
22857: NEG
22858: PUSH
22859: LD_INT 3
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22898: LD_ADDR_VAR 0 42
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: NEG
22980: PUSH
22981: LD_INT 2
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: LD_INT 1
23005: NEG
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 2
23076: NEG
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 2
23088: NEG
23089: PUSH
23090: LD_INT 3
23092: NEG
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 3
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 3
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 3
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 2
23154: PUSH
23155: LD_INT 3
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: LD_INT 3
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 3
23195: NEG
23196: PUSH
23197: LD_INT 2
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 3
23207: NEG
23208: PUSH
23209: LD_INT 3
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23248: LD_ADDR_VAR 0 43
23252: PUSH
23253: LD_INT 0
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: LD_INT 1
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 2
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: LD_INT 3
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: LD_INT 3
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: LD_INT 1
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 1
23522: NEG
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: NEG
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 3
23555: NEG
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23596: LD_ADDR_VAR 0 44
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 2
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 1
23740: NEG
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 2
23751: NEG
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: NEG
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: NEG
23775: PUSH
23776: LD_INT 2
23778: NEG
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: NEG
23787: PUSH
23788: LD_INT 3
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 3
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: LD_INT 2
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 3
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 3
23870: NEG
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 3
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 3
23893: NEG
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 3
23905: NEG
23906: PUSH
23907: LD_INT 3
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23946: LD_ADDR_VAR 0 45
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 2
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 2
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: NEG
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: LD_INT 3
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 3
24152: NEG
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 3
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 2
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 3
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 3
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 2
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 3
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 3
24243: NEG
24244: PUSH
24245: LD_INT 2
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 3
24255: NEG
24256: PUSH
24257: LD_INT 3
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24296: LD_ADDR_VAR 0 46
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: LD_INT 2
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 2
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 2
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 2
24473: NEG
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 3
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 3
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 3
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 3
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 3
24592: NEG
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 3
24603: NEG
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24644: LD_ADDR_VAR 0 47
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: LD_INT 2
24729: NEG
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 2
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 2
24759: NEG
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 2
24771: NEG
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24795: LD_ADDR_VAR 0 48
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 1
24853: NEG
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 2
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: LD_INT 1
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24942: LD_ADDR_VAR 0 49
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 2
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25086: LD_ADDR_VAR 0 50
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 2
25177: PUSH
25178: LD_INT 2
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25230: LD_ADDR_VAR 0 51
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25377: LD_ADDR_VAR 0 52
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 2
25481: NEG
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: LD_INT 2
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25528: LD_ADDR_VAR 0 53
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: NEG
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: NEG
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25758: LD_ADDR_VAR 0 54
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: LD_INT 2
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: LD_INT 2
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25988: LD_ADDR_VAR 0 55
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 2
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 2
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 2
26164: NEG
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 2
26175: NEG
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: LD_INT 2
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26218: LD_ADDR_VAR 0 56
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: NEG
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: NEG
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 2
26417: NEG
26418: PUSH
26419: LD_INT 2
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26448: LD_ADDR_VAR 0 57
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 2
26624: NEG
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 2
26635: NEG
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: NEG
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26678: LD_ADDR_VAR 0 58
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 2
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 2
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: NEG
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: NEG
26878: PUSH
26879: LD_INT 2
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26908: LD_ADDR_VAR 0 59
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26996: LD_ADDR_VAR 0 60
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27084: LD_ADDR_VAR 0 61
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27172: LD_ADDR_VAR 0 62
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27260: LD_ADDR_VAR 0 63
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27348: LD_ADDR_VAR 0 64
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: ST_TO_ADDR
// end ; 1 :
27436: GO 33333
27438: LD_INT 1
27440: DOUBLE
27441: EQUAL
27442: IFTRUE 27446
27444: GO 30069
27446: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27447: LD_ADDR_VAR 0 11
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: LD_INT 3
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 3
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27491: LD_ADDR_VAR 0 12
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 3
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27532: LD_ADDR_VAR 0 13
27536: PUSH
27537: LD_INT 3
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 3
27549: PUSH
27550: LD_INT 3
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27572: LD_ADDR_VAR 0 14
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27613: LD_ADDR_VAR 0 15
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 3
27631: NEG
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27657: LD_ADDR_VAR 0 16
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 3
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 3
27676: NEG
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 3
27688: NEG
27689: PUSH
27690: LD_INT 3
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27703: LD_ADDR_VAR 0 17
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: LD_INT 3
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 3
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27747: LD_ADDR_VAR 0 18
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 3
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 3
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27788: LD_ADDR_VAR 0 19
27792: PUSH
27793: LD_INT 3
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 3
27805: PUSH
27806: LD_INT 3
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 3
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27828: LD_ADDR_VAR 0 20
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 3
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 3
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27869: LD_ADDR_VAR 0 21
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 3
27887: NEG
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 3
27898: NEG
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27913: LD_ADDR_VAR 0 22
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: LD_INT 3
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 3
27932: NEG
27933: PUSH
27934: LD_INT 2
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 3
27944: NEG
27945: PUSH
27946: LD_INT 3
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27959: LD_ADDR_VAR 0 23
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 3
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: LD_INT 4
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 3
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28003: LD_ADDR_VAR 0 24
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 3
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 4
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28044: LD_ADDR_VAR 0 25
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: LD_INT 3
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 4
28061: PUSH
28062: LD_INT 3
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: LD_INT 4
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28084: LD_ADDR_VAR 0 26
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 3
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 4
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: LD_INT 3
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28125: LD_ADDR_VAR 0 27
28129: PUSH
28130: LD_INT 3
28132: NEG
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 3
28143: NEG
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 4
28154: NEG
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28169: LD_ADDR_VAR 0 28
28173: PUSH
28174: LD_INT 3
28176: NEG
28177: PUSH
28178: LD_INT 3
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: NEG
28189: PUSH
28190: LD_INT 4
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 4
28200: NEG
28201: PUSH
28202: LD_INT 3
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28215: LD_ADDR_VAR 0 29
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 3
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 3
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 4
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 4
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 5
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: LD_INT 5
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: LD_INT 4
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 6
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 6
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 5
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28370: LD_ADDR_VAR 0 30
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 3
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 4
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 4
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 5
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 5
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 5
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 6
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 6
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28513: LD_ADDR_VAR 0 31
28517: PUSH
28518: LD_INT 3
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 3
28530: PUSH
28531: LD_INT 3
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: LD_INT 3
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 4
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 4
28560: PUSH
28561: LD_INT 4
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: LD_INT 4
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 5
28580: PUSH
28581: LD_INT 4
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 5
28590: PUSH
28591: LD_INT 5
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 4
28600: PUSH
28601: LD_INT 5
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 6
28610: PUSH
28611: LD_INT 5
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 6
28620: PUSH
28621: LD_INT 6
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 5
28630: PUSH
28631: LD_INT 6
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28652: LD_ADDR_VAR 0 32
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: LD_INT 4
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: LD_INT 4
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 5
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 5
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 4
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 6
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 6
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 5
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28795: LD_ADDR_VAR 0 33
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 3
28813: NEG
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 3
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 3
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 4
28847: NEG
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 4
28858: NEG
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 4
28870: NEG
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 5
28881: NEG
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 5
28892: NEG
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 5
28904: NEG
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 6
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 6
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28950: LD_ADDR_VAR 0 34
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: LD_INT 3
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 3
28969: NEG
28970: PUSH
28971: LD_INT 2
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: LD_INT 3
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: LD_INT 4
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 4
29005: NEG
29006: PUSH
29007: LD_INT 3
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 4
29017: NEG
29018: PUSH
29019: LD_INT 4
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 4
29029: NEG
29030: PUSH
29031: LD_INT 5
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 5
29041: NEG
29042: PUSH
29043: LD_INT 4
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 5
29053: NEG
29054: PUSH
29055: LD_INT 5
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 5
29065: NEG
29066: PUSH
29067: LD_INT 6
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 6
29077: NEG
29078: PUSH
29079: LD_INT 5
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 6
29089: NEG
29090: PUSH
29091: LD_INT 6
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29113: LD_ADDR_VAR 0 41
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: LD_INT 3
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 2
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29157: LD_ADDR_VAR 0 42
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 3
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29198: LD_ADDR_VAR 0 43
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29238: LD_ADDR_VAR 0 44
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: LD_INT 3
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29279: LD_ADDR_VAR 0 45
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 3
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29323: LD_ADDR_VAR 0 46
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 3
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29369: LD_ADDR_VAR 0 47
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: LD_INT 3
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 3
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29402: LD_ADDR_VAR 0 48
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29433: LD_ADDR_VAR 0 49
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29462: LD_ADDR_VAR 0 50
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29491: LD_ADDR_VAR 0 51
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29522: LD_ADDR_VAR 0 52
29526: PUSH
29527: LD_INT 3
29529: NEG
29530: PUSH
29531: LD_INT 1
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 3
29541: NEG
29542: PUSH
29543: LD_INT 2
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29555: LD_ADDR_VAR 0 53
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 3
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 3
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29599: LD_ADDR_VAR 0 54
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29640: LD_ADDR_VAR 0 55
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 3
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29680: LD_ADDR_VAR 0 56
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29721: LD_ADDR_VAR 0 57
29725: PUSH
29726: LD_INT 2
29728: NEG
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 3
29739: NEG
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29765: LD_ADDR_VAR 0 58
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 3
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 3
29784: NEG
29785: PUSH
29786: LD_INT 2
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: NEG
29797: PUSH
29798: LD_INT 3
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29811: LD_ADDR_VAR 0 59
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: LD_INT 2
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29855: LD_ADDR_VAR 0 60
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29896: LD_ADDR_VAR 0 61
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 2
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29936: LD_ADDR_VAR 0 62
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 2
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29977: LD_ADDR_VAR 0 63
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: NEG
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 2
30006: NEG
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30021: LD_ADDR_VAR 0 64
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: NEG
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// end ; 2 :
30067: GO 33333
30069: LD_INT 2
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 33332
30077: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30078: LD_ADDR_VAR 0 29
30082: PUSH
30083: LD_INT 4
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 4
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 5
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 5
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 4
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 3
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 5
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 3
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 3
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 4
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 4
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 4
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: LD_INT 4
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 4
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: LD_INT 5
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: LD_INT 5
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 4
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: LD_INT 5
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 2
30350: NEG
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 3
30361: NEG
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 3
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: NEG
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 3
30406: NEG
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 4
30417: NEG
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 4
30428: NEG
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 4
30440: NEG
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 4
30463: NEG
30464: PUSH
30465: LD_INT 4
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 4
30475: NEG
30476: PUSH
30477: LD_INT 5
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 3
30487: NEG
30488: PUSH
30489: LD_INT 4
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: NEG
30500: PUSH
30501: LD_INT 3
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 4
30511: NEG
30512: PUSH
30513: LD_INT 3
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 5
30523: NEG
30524: PUSH
30525: LD_INT 4
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 5
30535: NEG
30536: PUSH
30537: LD_INT 5
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: LD_INT 5
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 5
30559: NEG
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30616: LD_ADDR_VAR 0 30
30620: PUSH
30621: LD_INT 4
30623: PUSH
30624: LD_INT 4
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 4
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 5
30643: PUSH
30644: LD_INT 4
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 5
30653: PUSH
30654: LD_INT 5
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: LD_INT 4
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 3
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 5
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 4
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: NEG
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 4
30806: NEG
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 4
30817: NEG
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 3
30829: NEG
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: NEG
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 5
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 5
30885: NEG
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 3
30897: NEG
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 3
30908: NEG
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 3
30920: NEG
30921: PUSH
30922: LD_INT 4
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 3
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 4
30980: NEG
30981: PUSH
30982: LD_INT 4
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: LD_INT 4
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 4
31004: NEG
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 5
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 4
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 4
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: LD_INT 5
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: LD_INT 5
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31163: LD_ADDR_VAR 0 31
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 4
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: LD_INT 3
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: LD_INT 4
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: LD_INT 5
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: LD_INT 5
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: LD_INT 4
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 1
31231: NEG
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 4
31319: NEG
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 4
31330: NEG
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 4
31342: NEG
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 4
31365: NEG
31366: PUSH
31367: LD_INT 4
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 4
31377: NEG
31378: PUSH
31379: LD_INT 5
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: LD_INT 4
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 3
31401: NEG
31402: PUSH
31403: LD_INT 3
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 4
31413: NEG
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 5
31425: NEG
31426: PUSH
31427: LD_INT 4
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 5
31437: NEG
31438: PUSH
31439: LD_INT 5
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: LD_INT 5
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 5
31461: NEG
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 4
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: LD_INT 3
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 4
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: LD_INT 4
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 4
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 4
31585: PUSH
31586: LD_INT 1
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 5
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 5
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 4
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 3
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31713: LD_ADDR_VAR 0 32
31717: PUSH
31718: LD_INT 4
31720: NEG
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 4
31731: NEG
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: NEG
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 4
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 5
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 5
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 5
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 3
31822: NEG
31823: PUSH
31824: LD_INT 3
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 3
31834: NEG
31835: PUSH
31836: LD_INT 4
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 2
31846: NEG
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: LD_INT 2
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 3
31870: NEG
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 4
31882: NEG
31883: PUSH
31884: LD_INT 3
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 4
31894: NEG
31895: PUSH
31896: LD_INT 4
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: NEG
31907: PUSH
31908: LD_INT 4
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 4
31918: NEG
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: LD_INT 4
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 5
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 4
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 3
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: LD_INT 3
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: LD_INT 4
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 5
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 5
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 3
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 4
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 4
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 4
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 4
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 5
32145: PUSH
32146: LD_INT 4
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 5
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: LD_INT 5
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32260: LD_ADDR_VAR 0 33
32264: PUSH
32265: LD_INT 4
32267: NEG
32268: PUSH
32269: LD_INT 4
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 4
32279: NEG
32280: PUSH
32281: LD_INT 5
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: LD_INT 4
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: LD_INT 3
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 4
32315: NEG
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 5
32327: NEG
32328: PUSH
32329: LD_INT 4
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 5
32339: NEG
32340: PUSH
32341: LD_INT 5
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 5
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 5
32363: NEG
32364: PUSH
32365: LD_INT 3
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: LD_INT 3
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 3
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 2
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: LD_INT 4
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: LD_INT 4
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 4
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 4
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 5
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 5
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 4
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 3
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: LD_INT 3
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 4
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 4
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 3
32610: PUSH
32611: LD_INT 4
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 4
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 4
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 4
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 3
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 4
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 5
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 5
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: LD_INT 4
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 5
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32798: LD_ADDR_VAR 0 34
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: LD_INT 4
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 5
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 4
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: LD_INT 4
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: LD_INT 5
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 3
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 5
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 4
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 4
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 4
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 4
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 5
33020: PUSH
33021: LD_INT 4
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 5
33030: PUSH
33031: LD_INT 5
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 5
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 3
33080: PUSH
33081: LD_INT 5
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 4
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 4
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 4
33183: NEG
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 4
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 5
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 5
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 5
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 3
33274: NEG
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: ST_TO_ADDR
// end ; end ;
33330: GO 33333
33332: POP
// case btype of b_depot , b_warehouse :
33333: LD_VAR 0 1
33337: PUSH
33338: LD_INT 0
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33352
33344: LD_INT 1
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33553
33352: POP
// case nation of nation_american :
33353: LD_VAR 0 5
33357: PUSH
33358: LD_INT 1
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33422
33366: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33367: LD_ADDR_VAR 0 9
33371: PUSH
33372: LD_VAR 0 11
33376: PUSH
33377: LD_VAR 0 12
33381: PUSH
33382: LD_VAR 0 13
33386: PUSH
33387: LD_VAR 0 14
33391: PUSH
33392: LD_VAR 0 15
33396: PUSH
33397: LD_VAR 0 16
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: PUSH
33410: LD_VAR 0 4
33414: PUSH
33415: LD_INT 1
33417: PLUS
33418: ARRAY
33419: ST_TO_ADDR
33420: GO 33551
33422: LD_INT 2
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33486
33430: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33431: LD_ADDR_VAR 0 9
33435: PUSH
33436: LD_VAR 0 17
33440: PUSH
33441: LD_VAR 0 18
33445: PUSH
33446: LD_VAR 0 19
33450: PUSH
33451: LD_VAR 0 20
33455: PUSH
33456: LD_VAR 0 21
33460: PUSH
33461: LD_VAR 0 22
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: PUSH
33474: LD_VAR 0 4
33478: PUSH
33479: LD_INT 1
33481: PLUS
33482: ARRAY
33483: ST_TO_ADDR
33484: GO 33551
33486: LD_INT 3
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33550
33494: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33495: LD_ADDR_VAR 0 9
33499: PUSH
33500: LD_VAR 0 23
33504: PUSH
33505: LD_VAR 0 24
33509: PUSH
33510: LD_VAR 0 25
33514: PUSH
33515: LD_VAR 0 26
33519: PUSH
33520: LD_VAR 0 27
33524: PUSH
33525: LD_VAR 0 28
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: PUSH
33538: LD_VAR 0 4
33542: PUSH
33543: LD_INT 1
33545: PLUS
33546: ARRAY
33547: ST_TO_ADDR
33548: GO 33551
33550: POP
33551: GO 34106
33553: LD_INT 2
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33567
33559: LD_INT 3
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33623
33567: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33568: LD_ADDR_VAR 0 9
33572: PUSH
33573: LD_VAR 0 29
33577: PUSH
33578: LD_VAR 0 30
33582: PUSH
33583: LD_VAR 0 31
33587: PUSH
33588: LD_VAR 0 32
33592: PUSH
33593: LD_VAR 0 33
33597: PUSH
33598: LD_VAR 0 34
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: PUSH
33611: LD_VAR 0 4
33615: PUSH
33616: LD_INT 1
33618: PLUS
33619: ARRAY
33620: ST_TO_ADDR
33621: GO 34106
33623: LD_INT 16
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33685
33629: LD_INT 17
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33685
33635: LD_INT 18
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33685
33641: LD_INT 19
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33685
33647: LD_INT 22
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33685
33653: LD_INT 20
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33685
33659: LD_INT 21
33661: DOUBLE
33662: EQUAL
33663: IFTRUE 33685
33665: LD_INT 23
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33685
33671: LD_INT 24
33673: DOUBLE
33674: EQUAL
33675: IFTRUE 33685
33677: LD_INT 25
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33741
33685: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: LD_VAR 0 35
33695: PUSH
33696: LD_VAR 0 36
33700: PUSH
33701: LD_VAR 0 37
33705: PUSH
33706: LD_VAR 0 38
33710: PUSH
33711: LD_VAR 0 39
33715: PUSH
33716: LD_VAR 0 40
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: PUSH
33729: LD_VAR 0 4
33733: PUSH
33734: LD_INT 1
33736: PLUS
33737: ARRAY
33738: ST_TO_ADDR
33739: GO 34106
33741: LD_INT 6
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33797
33747: LD_INT 7
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33797
33753: LD_INT 8
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33797
33759: LD_INT 13
33761: DOUBLE
33762: EQUAL
33763: IFTRUE 33797
33765: LD_INT 12
33767: DOUBLE
33768: EQUAL
33769: IFTRUE 33797
33771: LD_INT 15
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33797
33777: LD_INT 11
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33797
33783: LD_INT 14
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33797
33789: LD_INT 10
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33853
33797: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33798: LD_ADDR_VAR 0 9
33802: PUSH
33803: LD_VAR 0 41
33807: PUSH
33808: LD_VAR 0 42
33812: PUSH
33813: LD_VAR 0 43
33817: PUSH
33818: LD_VAR 0 44
33822: PUSH
33823: LD_VAR 0 45
33827: PUSH
33828: LD_VAR 0 46
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: PUSH
33841: LD_VAR 0 4
33845: PUSH
33846: LD_INT 1
33848: PLUS
33849: ARRAY
33850: ST_TO_ADDR
33851: GO 34106
33853: LD_INT 36
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 33917
33861: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33862: LD_ADDR_VAR 0 9
33866: PUSH
33867: LD_VAR 0 47
33871: PUSH
33872: LD_VAR 0 48
33876: PUSH
33877: LD_VAR 0 49
33881: PUSH
33882: LD_VAR 0 50
33886: PUSH
33887: LD_VAR 0 51
33891: PUSH
33892: LD_VAR 0 52
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: PUSH
33905: LD_VAR 0 4
33909: PUSH
33910: LD_INT 1
33912: PLUS
33913: ARRAY
33914: ST_TO_ADDR
33915: GO 34106
33917: LD_INT 4
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33943
33923: LD_INT 5
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33943
33929: LD_INT 34
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33943
33935: LD_INT 37
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 33999
33943: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_VAR 0 53
33953: PUSH
33954: LD_VAR 0 54
33958: PUSH
33959: LD_VAR 0 55
33963: PUSH
33964: LD_VAR 0 56
33968: PUSH
33969: LD_VAR 0 57
33973: PUSH
33974: LD_VAR 0 58
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: PUSH
33987: LD_VAR 0 4
33991: PUSH
33992: LD_INT 1
33994: PLUS
33995: ARRAY
33996: ST_TO_ADDR
33997: GO 34106
33999: LD_INT 31
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34049
34005: LD_INT 32
34007: DOUBLE
34008: EQUAL
34009: IFTRUE 34049
34011: LD_INT 33
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34049
34017: LD_INT 27
34019: DOUBLE
34020: EQUAL
34021: IFTRUE 34049
34023: LD_INT 26
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34049
34029: LD_INT 28
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34049
34035: LD_INT 29
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34049
34041: LD_INT 30
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34105
34049: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34050: LD_ADDR_VAR 0 9
34054: PUSH
34055: LD_VAR 0 59
34059: PUSH
34060: LD_VAR 0 60
34064: PUSH
34065: LD_VAR 0 61
34069: PUSH
34070: LD_VAR 0 62
34074: PUSH
34075: LD_VAR 0 63
34079: PUSH
34080: LD_VAR 0 64
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: PUSH
34093: LD_VAR 0 4
34097: PUSH
34098: LD_INT 1
34100: PLUS
34101: ARRAY
34102: ST_TO_ADDR
34103: GO 34106
34105: POP
// temp_list2 = [ ] ;
34106: LD_ADDR_VAR 0 10
34110: PUSH
34111: EMPTY
34112: ST_TO_ADDR
// for i in temp_list do
34113: LD_ADDR_VAR 0 8
34117: PUSH
34118: LD_VAR 0 9
34122: PUSH
34123: FOR_IN
34124: IFFALSE 34176
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34126: LD_ADDR_VAR 0 10
34130: PUSH
34131: LD_VAR 0 10
34135: PUSH
34136: LD_VAR 0 8
34140: PUSH
34141: LD_INT 1
34143: ARRAY
34144: PUSH
34145: LD_VAR 0 2
34149: PLUS
34150: PUSH
34151: LD_VAR 0 8
34155: PUSH
34156: LD_INT 2
34158: ARRAY
34159: PUSH
34160: LD_VAR 0 3
34164: PLUS
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: ADD
34173: ST_TO_ADDR
34174: GO 34123
34176: POP
34177: POP
// result = temp_list2 ;
34178: LD_ADDR_VAR 0 7
34182: PUSH
34183: LD_VAR 0 10
34187: ST_TO_ADDR
// end ;
34188: LD_VAR 0 7
34192: RET
// export function EnemyInRange ( unit , dist ) ; begin
34193: LD_INT 0
34195: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34196: LD_ADDR_VAR 0 3
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 255
34210: PPUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL_OW 250
34220: PPUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL_OW 251
34230: PPUSH
34231: LD_VAR 0 2
34235: PPUSH
34236: CALL 7595 0 4
34240: PUSH
34241: LD_INT 4
34243: ARRAY
34244: ST_TO_ADDR
// end ;
34245: LD_VAR 0 3
34249: RET
// export function PlayerSeeMe ( unit ) ; begin
34250: LD_INT 0
34252: PPUSH
// result := See ( your_side , unit ) ;
34253: LD_ADDR_VAR 0 2
34257: PUSH
34258: LD_OWVAR 2
34262: PPUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 292
34272: ST_TO_ADDR
// end ;
34273: LD_VAR 0 2
34277: RET
// export function ReverseDir ( unit ) ; begin
34278: LD_INT 0
34280: PPUSH
// if not unit then
34281: LD_VAR 0 1
34285: NOT
34286: IFFALSE 34290
// exit ;
34288: GO 34313
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34290: LD_ADDR_VAR 0 2
34294: PUSH
34295: LD_VAR 0 1
34299: PPUSH
34300: CALL_OW 254
34304: PUSH
34305: LD_INT 3
34307: PLUS
34308: PUSH
34309: LD_INT 6
34311: MOD
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 2
34317: RET
// export function ReverseArray ( array ) ; var i ; begin
34318: LD_INT 0
34320: PPUSH
34321: PPUSH
// if not array then
34322: LD_VAR 0 1
34326: NOT
34327: IFFALSE 34331
// exit ;
34329: GO 34386
// result := [ ] ;
34331: LD_ADDR_VAR 0 2
34335: PUSH
34336: EMPTY
34337: ST_TO_ADDR
// for i := array downto 1 do
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: DOUBLE
34344: LD_VAR 0 1
34348: INC
34349: ST_TO_ADDR
34350: LD_INT 1
34352: PUSH
34353: FOR_DOWNTO
34354: IFFALSE 34384
// result := Join ( result , array [ i ] ) ;
34356: LD_ADDR_VAR 0 2
34360: PUSH
34361: LD_VAR 0 2
34365: PPUSH
34366: LD_VAR 0 1
34370: PUSH
34371: LD_VAR 0 3
34375: ARRAY
34376: PPUSH
34377: CALL 39030 0 2
34381: ST_TO_ADDR
34382: GO 34353
34384: POP
34385: POP
// end ;
34386: LD_VAR 0 2
34390: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34391: LD_INT 0
34393: PPUSH
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
34398: PPUSH
// if not unit or not hexes then
34399: LD_VAR 0 1
34403: NOT
34404: PUSH
34405: LD_VAR 0 2
34409: NOT
34410: OR
34411: IFFALSE 34415
// exit ;
34413: GO 34538
// dist := 9999 ;
34415: LD_ADDR_VAR 0 5
34419: PUSH
34420: LD_INT 9999
34422: ST_TO_ADDR
// for i = 1 to hexes do
34423: LD_ADDR_VAR 0 4
34427: PUSH
34428: DOUBLE
34429: LD_INT 1
34431: DEC
34432: ST_TO_ADDR
34433: LD_VAR 0 2
34437: PUSH
34438: FOR_TO
34439: IFFALSE 34526
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34441: LD_ADDR_VAR 0 6
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: LD_VAR 0 2
34455: PUSH
34456: LD_VAR 0 4
34460: ARRAY
34461: PUSH
34462: LD_INT 1
34464: ARRAY
34465: PPUSH
34466: LD_VAR 0 2
34470: PUSH
34471: LD_VAR 0 4
34475: ARRAY
34476: PUSH
34477: LD_INT 2
34479: ARRAY
34480: PPUSH
34481: CALL_OW 297
34485: ST_TO_ADDR
// if tdist < dist then
34486: LD_VAR 0 6
34490: PUSH
34491: LD_VAR 0 5
34495: LESS
34496: IFFALSE 34524
// begin hex := hexes [ i ] ;
34498: LD_ADDR_VAR 0 8
34502: PUSH
34503: LD_VAR 0 2
34507: PUSH
34508: LD_VAR 0 4
34512: ARRAY
34513: ST_TO_ADDR
// dist := tdist ;
34514: LD_ADDR_VAR 0 5
34518: PUSH
34519: LD_VAR 0 6
34523: ST_TO_ADDR
// end ; end ;
34524: GO 34438
34526: POP
34527: POP
// result := hex ;
34528: LD_ADDR_VAR 0 3
34532: PUSH
34533: LD_VAR 0 8
34537: ST_TO_ADDR
// end ;
34538: LD_VAR 0 3
34542: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34543: LD_INT 0
34545: PPUSH
34546: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34547: LD_VAR 0 1
34551: NOT
34552: PUSH
34553: LD_VAR 0 1
34557: PUSH
34558: LD_INT 21
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 23
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PPUSH
34582: CALL_OW 69
34586: IN
34587: NOT
34588: OR
34589: IFFALSE 34593
// exit ;
34591: GO 34640
// for i = 1 to 3 do
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: DOUBLE
34599: LD_INT 1
34601: DEC
34602: ST_TO_ADDR
34603: LD_INT 3
34605: PUSH
34606: FOR_TO
34607: IFFALSE 34638
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 250
34618: PPUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: CALL_OW 251
34628: PPUSH
34629: LD_INT 1
34631: PPUSH
34632: CALL_OW 453
34636: GO 34606
34638: POP
34639: POP
// end ;
34640: LD_VAR 0 2
34644: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34645: LD_INT 0
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34653: LD_VAR 0 1
34657: NOT
34658: PUSH
34659: LD_VAR 0 2
34663: NOT
34664: OR
34665: PUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 314
34675: OR
34676: IFFALSE 34680
// exit ;
34678: GO 35147
// if GetLives ( i ) < 250 then
34680: LD_VAR 0 4
34684: PPUSH
34685: CALL_OW 256
34689: PUSH
34690: LD_INT 250
34692: LESS
34693: IFFALSE 34706
// begin ComAutodestruct ( i ) ;
34695: LD_VAR 0 4
34699: PPUSH
34700: CALL 34543 0 1
// exit ;
34704: GO 35147
// end ; x := GetX ( enemy_unit ) ;
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: LD_VAR 0 2
34715: PPUSH
34716: CALL_OW 250
34720: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34721: LD_ADDR_VAR 0 8
34725: PUSH
34726: LD_VAR 0 2
34730: PPUSH
34731: CALL_OW 251
34735: ST_TO_ADDR
// if not x or not y then
34736: LD_VAR 0 7
34740: NOT
34741: PUSH
34742: LD_VAR 0 8
34746: NOT
34747: OR
34748: IFFALSE 34752
// exit ;
34750: GO 35147
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34752: LD_ADDR_VAR 0 6
34756: PUSH
34757: LD_VAR 0 7
34761: PPUSH
34762: LD_INT 0
34764: PPUSH
34765: LD_INT 4
34767: PPUSH
34768: CALL_OW 272
34772: PUSH
34773: LD_VAR 0 8
34777: PPUSH
34778: LD_INT 0
34780: PPUSH
34781: LD_INT 4
34783: PPUSH
34784: CALL_OW 273
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_VAR 0 7
34797: PPUSH
34798: LD_INT 1
34800: PPUSH
34801: LD_INT 4
34803: PPUSH
34804: CALL_OW 272
34808: PUSH
34809: LD_VAR 0 8
34813: PPUSH
34814: LD_INT 1
34816: PPUSH
34817: LD_INT 4
34819: PPUSH
34820: CALL_OW 273
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_VAR 0 7
34833: PPUSH
34834: LD_INT 2
34836: PPUSH
34837: LD_INT 4
34839: PPUSH
34840: CALL_OW 272
34844: PUSH
34845: LD_VAR 0 8
34849: PPUSH
34850: LD_INT 2
34852: PPUSH
34853: LD_INT 4
34855: PPUSH
34856: CALL_OW 273
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_VAR 0 7
34869: PPUSH
34870: LD_INT 3
34872: PPUSH
34873: LD_INT 4
34875: PPUSH
34876: CALL_OW 272
34880: PUSH
34881: LD_VAR 0 8
34885: PPUSH
34886: LD_INT 3
34888: PPUSH
34889: LD_INT 4
34891: PPUSH
34892: CALL_OW 273
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_VAR 0 7
34905: PPUSH
34906: LD_INT 4
34908: PPUSH
34909: LD_INT 4
34911: PPUSH
34912: CALL_OW 272
34916: PUSH
34917: LD_VAR 0 8
34921: PPUSH
34922: LD_INT 4
34924: PPUSH
34925: LD_INT 4
34927: PPUSH
34928: CALL_OW 273
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_VAR 0 7
34941: PPUSH
34942: LD_INT 5
34944: PPUSH
34945: LD_INT 4
34947: PPUSH
34948: CALL_OW 272
34952: PUSH
34953: LD_VAR 0 8
34957: PPUSH
34958: LD_INT 5
34960: PPUSH
34961: LD_INT 4
34963: PPUSH
34964: CALL_OW 273
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: ST_TO_ADDR
// for i = tmp downto 1 do
34981: LD_ADDR_VAR 0 4
34985: PUSH
34986: DOUBLE
34987: LD_VAR 0 6
34991: INC
34992: ST_TO_ADDR
34993: LD_INT 1
34995: PUSH
34996: FOR_DOWNTO
34997: IFFALSE 35098
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34999: LD_VAR 0 6
35003: PUSH
35004: LD_VAR 0 4
35008: ARRAY
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PPUSH
35014: LD_VAR 0 6
35018: PUSH
35019: LD_VAR 0 4
35023: ARRAY
35024: PUSH
35025: LD_INT 2
35027: ARRAY
35028: PPUSH
35029: CALL_OW 488
35033: NOT
35034: PUSH
35035: LD_VAR 0 6
35039: PUSH
35040: LD_VAR 0 4
35044: ARRAY
35045: PUSH
35046: LD_INT 1
35048: ARRAY
35049: PPUSH
35050: LD_VAR 0 6
35054: PUSH
35055: LD_VAR 0 4
35059: ARRAY
35060: PUSH
35061: LD_INT 2
35063: ARRAY
35064: PPUSH
35065: CALL_OW 428
35069: PUSH
35070: LD_INT 0
35072: NONEQUAL
35073: OR
35074: IFFALSE 35096
// tmp := Delete ( tmp , i ) ;
35076: LD_ADDR_VAR 0 6
35080: PUSH
35081: LD_VAR 0 6
35085: PPUSH
35086: LD_VAR 0 4
35090: PPUSH
35091: CALL_OW 3
35095: ST_TO_ADDR
35096: GO 34996
35098: POP
35099: POP
// j := GetClosestHex ( unit , tmp ) ;
35100: LD_ADDR_VAR 0 5
35104: PUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: LD_VAR 0 6
35114: PPUSH
35115: CALL 34391 0 2
35119: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35120: LD_VAR 0 1
35124: PPUSH
35125: LD_VAR 0 5
35129: PUSH
35130: LD_INT 1
35132: ARRAY
35133: PPUSH
35134: LD_VAR 0 5
35138: PUSH
35139: LD_INT 2
35141: ARRAY
35142: PPUSH
35143: CALL_OW 111
// end ;
35147: LD_VAR 0 3
35151: RET
// export function PrepareApemanSoldier ( ) ; begin
35152: LD_INT 0
35154: PPUSH
// uc_nation := 0 ;
35155: LD_ADDR_OWVAR 21
35159: PUSH
35160: LD_INT 0
35162: ST_TO_ADDR
// hc_sex := sex_male ;
35163: LD_ADDR_OWVAR 27
35167: PUSH
35168: LD_INT 1
35170: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35171: LD_ADDR_OWVAR 28
35175: PUSH
35176: LD_INT 15
35178: ST_TO_ADDR
// hc_gallery :=  ;
35179: LD_ADDR_OWVAR 33
35183: PUSH
35184: LD_STRING 
35186: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35187: LD_ADDR_OWVAR 31
35191: PUSH
35192: LD_INT 0
35194: PPUSH
35195: LD_INT 3
35197: PPUSH
35198: CALL_OW 12
35202: PUSH
35203: LD_INT 0
35205: PPUSH
35206: LD_INT 3
35208: PPUSH
35209: CALL_OW 12
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: ST_TO_ADDR
// end ;
35226: LD_VAR 0 1
35230: RET
// export function PrepareApemanEngineer ( ) ; begin
35231: LD_INT 0
35233: PPUSH
// uc_nation := 0 ;
35234: LD_ADDR_OWVAR 21
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// hc_sex := sex_male ;
35242: LD_ADDR_OWVAR 27
35246: PUSH
35247: LD_INT 1
35249: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35250: LD_ADDR_OWVAR 28
35254: PUSH
35255: LD_INT 16
35257: ST_TO_ADDR
// hc_gallery :=  ;
35258: LD_ADDR_OWVAR 33
35262: PUSH
35263: LD_STRING 
35265: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35266: LD_ADDR_OWVAR 31
35270: PUSH
35271: LD_INT 0
35273: PPUSH
35274: LD_INT 3
35276: PPUSH
35277: CALL_OW 12
35281: PUSH
35282: LD_INT 0
35284: PPUSH
35285: LD_INT 3
35287: PPUSH
35288: CALL_OW 12
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// end ;
35305: LD_VAR 0 1
35309: RET
// export function PrepareApeman ( agressivity ) ; begin
35310: LD_INT 0
35312: PPUSH
// uc_side := 0 ;
35313: LD_ADDR_OWVAR 20
35317: PUSH
35318: LD_INT 0
35320: ST_TO_ADDR
// uc_nation := 0 ;
35321: LD_ADDR_OWVAR 21
35325: PUSH
35326: LD_INT 0
35328: ST_TO_ADDR
// hc_sex := sex_male ;
35329: LD_ADDR_OWVAR 27
35333: PUSH
35334: LD_INT 1
35336: ST_TO_ADDR
// hc_class := class_apeman ;
35337: LD_ADDR_OWVAR 28
35341: PUSH
35342: LD_INT 12
35344: ST_TO_ADDR
// hc_gallery :=  ;
35345: LD_ADDR_OWVAR 33
35349: PUSH
35350: LD_STRING 
35352: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35353: LD_ADDR_OWVAR 35
35357: PUSH
35358: LD_VAR 0 1
35362: NEG
35363: PPUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 12
35373: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35374: LD_ADDR_OWVAR 31
35378: PUSH
35379: LD_INT 0
35381: PPUSH
35382: LD_INT 3
35384: PPUSH
35385: CALL_OW 12
35389: PUSH
35390: LD_INT 0
35392: PPUSH
35393: LD_INT 3
35395: PPUSH
35396: CALL_OW 12
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// end ;
35413: LD_VAR 0 2
35417: RET
// export function PrepareTiger ( agressivity ) ; begin
35418: LD_INT 0
35420: PPUSH
// uc_side := 0 ;
35421: LD_ADDR_OWVAR 20
35425: PUSH
35426: LD_INT 0
35428: ST_TO_ADDR
// uc_nation := 0 ;
35429: LD_ADDR_OWVAR 21
35433: PUSH
35434: LD_INT 0
35436: ST_TO_ADDR
// hc_class := class_tiger ;
35437: LD_ADDR_OWVAR 28
35441: PUSH
35442: LD_INT 14
35444: ST_TO_ADDR
// hc_gallery :=  ;
35445: LD_ADDR_OWVAR 33
35449: PUSH
35450: LD_STRING 
35452: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35453: LD_ADDR_OWVAR 35
35457: PUSH
35458: LD_VAR 0 1
35462: NEG
35463: PPUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL_OW 12
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 2
35478: RET
// export function PrepareEnchidna ( ) ; begin
35479: LD_INT 0
35481: PPUSH
// uc_side := 0 ;
35482: LD_ADDR_OWVAR 20
35486: PUSH
35487: LD_INT 0
35489: ST_TO_ADDR
// uc_nation := 0 ;
35490: LD_ADDR_OWVAR 21
35494: PUSH
35495: LD_INT 0
35497: ST_TO_ADDR
// hc_class := class_baggie ;
35498: LD_ADDR_OWVAR 28
35502: PUSH
35503: LD_INT 13
35505: ST_TO_ADDR
// hc_gallery :=  ;
35506: LD_ADDR_OWVAR 33
35510: PUSH
35511: LD_STRING 
35513: ST_TO_ADDR
// end ;
35514: LD_VAR 0 1
35518: RET
// export function PrepareFrog ( ) ; begin
35519: LD_INT 0
35521: PPUSH
// uc_side := 0 ;
35522: LD_ADDR_OWVAR 20
35526: PUSH
35527: LD_INT 0
35529: ST_TO_ADDR
// uc_nation := 0 ;
35530: LD_ADDR_OWVAR 21
35534: PUSH
35535: LD_INT 0
35537: ST_TO_ADDR
// hc_class := class_frog ;
35538: LD_ADDR_OWVAR 28
35542: PUSH
35543: LD_INT 19
35545: ST_TO_ADDR
// hc_gallery :=  ;
35546: LD_ADDR_OWVAR 33
35550: PUSH
35551: LD_STRING 
35553: ST_TO_ADDR
// end ;
35554: LD_VAR 0 1
35558: RET
// export function PrepareFish ( ) ; begin
35559: LD_INT 0
35561: PPUSH
// uc_side := 0 ;
35562: LD_ADDR_OWVAR 20
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// uc_nation := 0 ;
35570: LD_ADDR_OWVAR 21
35574: PUSH
35575: LD_INT 0
35577: ST_TO_ADDR
// hc_class := class_fish ;
35578: LD_ADDR_OWVAR 28
35582: PUSH
35583: LD_INT 20
35585: ST_TO_ADDR
// hc_gallery :=  ;
35586: LD_ADDR_OWVAR 33
35590: PUSH
35591: LD_STRING 
35593: ST_TO_ADDR
// end ;
35594: LD_VAR 0 1
35598: RET
// export function PrepareBird ( ) ; begin
35599: LD_INT 0
35601: PPUSH
// uc_side := 0 ;
35602: LD_ADDR_OWVAR 20
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// uc_nation := 0 ;
35610: LD_ADDR_OWVAR 21
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// hc_class := class_phororhacos ;
35618: LD_ADDR_OWVAR 28
35622: PUSH
35623: LD_INT 18
35625: ST_TO_ADDR
// hc_gallery :=  ;
35626: LD_ADDR_OWVAR 33
35630: PUSH
35631: LD_STRING 
35633: ST_TO_ADDR
// end ;
35634: LD_VAR 0 1
35638: RET
// export function PrepareHorse ( ) ; begin
35639: LD_INT 0
35641: PPUSH
// uc_side := 0 ;
35642: LD_ADDR_OWVAR 20
35646: PUSH
35647: LD_INT 0
35649: ST_TO_ADDR
// uc_nation := 0 ;
35650: LD_ADDR_OWVAR 21
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// hc_class := class_horse ;
35658: LD_ADDR_OWVAR 28
35662: PUSH
35663: LD_INT 21
35665: ST_TO_ADDR
// hc_gallery :=  ;
35666: LD_ADDR_OWVAR 33
35670: PUSH
35671: LD_STRING 
35673: ST_TO_ADDR
// end ;
35674: LD_VAR 0 1
35678: RET
// export function PrepareMastodont ( ) ; begin
35679: LD_INT 0
35681: PPUSH
// uc_side := 0 ;
35682: LD_ADDR_OWVAR 20
35686: PUSH
35687: LD_INT 0
35689: ST_TO_ADDR
// uc_nation := 0 ;
35690: LD_ADDR_OWVAR 21
35694: PUSH
35695: LD_INT 0
35697: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35698: LD_ADDR_OWVAR 37
35702: PUSH
35703: LD_INT 31
35705: ST_TO_ADDR
// vc_control := control_rider ;
35706: LD_ADDR_OWVAR 38
35710: PUSH
35711: LD_INT 4
35713: ST_TO_ADDR
// end ;
35714: LD_VAR 0 1
35718: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35719: LD_INT 0
35721: PPUSH
35722: PPUSH
35723: PPUSH
// uc_side = 0 ;
35724: LD_ADDR_OWVAR 20
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// uc_nation = 0 ;
35732: LD_ADDR_OWVAR 21
35736: PUSH
35737: LD_INT 0
35739: ST_TO_ADDR
// InitHc_All ( ) ;
35740: CALL_OW 584
// InitVc ;
35744: CALL_OW 20
// if mastodonts then
35748: LD_VAR 0 6
35752: IFFALSE 35819
// for i = 1 to mastodonts do
35754: LD_ADDR_VAR 0 11
35758: PUSH
35759: DOUBLE
35760: LD_INT 1
35762: DEC
35763: ST_TO_ADDR
35764: LD_VAR 0 6
35768: PUSH
35769: FOR_TO
35770: IFFALSE 35817
// begin vc_chassis := 31 ;
35772: LD_ADDR_OWVAR 37
35776: PUSH
35777: LD_INT 31
35779: ST_TO_ADDR
// vc_control := control_rider ;
35780: LD_ADDR_OWVAR 38
35784: PUSH
35785: LD_INT 4
35787: ST_TO_ADDR
// animal := CreateVehicle ;
35788: LD_ADDR_VAR 0 12
35792: PUSH
35793: CALL_OW 45
35797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35798: LD_VAR 0 12
35802: PPUSH
35803: LD_VAR 0 8
35807: PPUSH
35808: LD_INT 0
35810: PPUSH
35811: CALL 37947 0 3
// end ;
35815: GO 35769
35817: POP
35818: POP
// if horses then
35819: LD_VAR 0 5
35823: IFFALSE 35890
// for i = 1 to horses do
35825: LD_ADDR_VAR 0 11
35829: PUSH
35830: DOUBLE
35831: LD_INT 1
35833: DEC
35834: ST_TO_ADDR
35835: LD_VAR 0 5
35839: PUSH
35840: FOR_TO
35841: IFFALSE 35888
// begin hc_class := 21 ;
35843: LD_ADDR_OWVAR 28
35847: PUSH
35848: LD_INT 21
35850: ST_TO_ADDR
// hc_gallery :=  ;
35851: LD_ADDR_OWVAR 33
35855: PUSH
35856: LD_STRING 
35858: ST_TO_ADDR
// animal := CreateHuman ;
35859: LD_ADDR_VAR 0 12
35863: PUSH
35864: CALL_OW 44
35868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35869: LD_VAR 0 12
35873: PPUSH
35874: LD_VAR 0 8
35878: PPUSH
35879: LD_INT 0
35881: PPUSH
35882: CALL 37947 0 3
// end ;
35886: GO 35840
35888: POP
35889: POP
// if birds then
35890: LD_VAR 0 1
35894: IFFALSE 35961
// for i = 1 to birds do
35896: LD_ADDR_VAR 0 11
35900: PUSH
35901: DOUBLE
35902: LD_INT 1
35904: DEC
35905: ST_TO_ADDR
35906: LD_VAR 0 1
35910: PUSH
35911: FOR_TO
35912: IFFALSE 35959
// begin hc_class = 18 ;
35914: LD_ADDR_OWVAR 28
35918: PUSH
35919: LD_INT 18
35921: ST_TO_ADDR
// hc_gallery =  ;
35922: LD_ADDR_OWVAR 33
35926: PUSH
35927: LD_STRING 
35929: ST_TO_ADDR
// animal := CreateHuman ;
35930: LD_ADDR_VAR 0 12
35934: PUSH
35935: CALL_OW 44
35939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35940: LD_VAR 0 12
35944: PPUSH
35945: LD_VAR 0 8
35949: PPUSH
35950: LD_INT 0
35952: PPUSH
35953: CALL 37947 0 3
// end ;
35957: GO 35911
35959: POP
35960: POP
// if tigers then
35961: LD_VAR 0 2
35965: IFFALSE 36049
// for i = 1 to tigers do
35967: LD_ADDR_VAR 0 11
35971: PUSH
35972: DOUBLE
35973: LD_INT 1
35975: DEC
35976: ST_TO_ADDR
35977: LD_VAR 0 2
35981: PUSH
35982: FOR_TO
35983: IFFALSE 36047
// begin hc_class = class_tiger ;
35985: LD_ADDR_OWVAR 28
35989: PUSH
35990: LD_INT 14
35992: ST_TO_ADDR
// hc_gallery =  ;
35993: LD_ADDR_OWVAR 33
35997: PUSH
35998: LD_STRING 
36000: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36001: LD_ADDR_OWVAR 35
36005: PUSH
36006: LD_INT 7
36008: NEG
36009: PPUSH
36010: LD_INT 7
36012: PPUSH
36013: CALL_OW 12
36017: ST_TO_ADDR
// animal := CreateHuman ;
36018: LD_ADDR_VAR 0 12
36022: PUSH
36023: CALL_OW 44
36027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36028: LD_VAR 0 12
36032: PPUSH
36033: LD_VAR 0 8
36037: PPUSH
36038: LD_INT 0
36040: PPUSH
36041: CALL 37947 0 3
// end ;
36045: GO 35982
36047: POP
36048: POP
// if apemans then
36049: LD_VAR 0 3
36053: IFFALSE 36176
// for i = 1 to apemans do
36055: LD_ADDR_VAR 0 11
36059: PUSH
36060: DOUBLE
36061: LD_INT 1
36063: DEC
36064: ST_TO_ADDR
36065: LD_VAR 0 3
36069: PUSH
36070: FOR_TO
36071: IFFALSE 36174
// begin hc_class = class_apeman ;
36073: LD_ADDR_OWVAR 28
36077: PUSH
36078: LD_INT 12
36080: ST_TO_ADDR
// hc_gallery =  ;
36081: LD_ADDR_OWVAR 33
36085: PUSH
36086: LD_STRING 
36088: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36089: LD_ADDR_OWVAR 35
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PPUSH
36098: LD_INT 2
36100: PPUSH
36101: CALL_OW 12
36105: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36106: LD_ADDR_OWVAR 31
36110: PUSH
36111: LD_INT 1
36113: PPUSH
36114: LD_INT 3
36116: PPUSH
36117: CALL_OW 12
36121: PUSH
36122: LD_INT 1
36124: PPUSH
36125: LD_INT 3
36127: PPUSH
36128: CALL_OW 12
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// animal := CreateHuman ;
36145: LD_ADDR_VAR 0 12
36149: PUSH
36150: CALL_OW 44
36154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36155: LD_VAR 0 12
36159: PPUSH
36160: LD_VAR 0 8
36164: PPUSH
36165: LD_INT 0
36167: PPUSH
36168: CALL 37947 0 3
// end ;
36172: GO 36070
36174: POP
36175: POP
// if enchidnas then
36176: LD_VAR 0 4
36180: IFFALSE 36247
// for i = 1 to enchidnas do
36182: LD_ADDR_VAR 0 11
36186: PUSH
36187: DOUBLE
36188: LD_INT 1
36190: DEC
36191: ST_TO_ADDR
36192: LD_VAR 0 4
36196: PUSH
36197: FOR_TO
36198: IFFALSE 36245
// begin hc_class = 13 ;
36200: LD_ADDR_OWVAR 28
36204: PUSH
36205: LD_INT 13
36207: ST_TO_ADDR
// hc_gallery =  ;
36208: LD_ADDR_OWVAR 33
36212: PUSH
36213: LD_STRING 
36215: ST_TO_ADDR
// animal := CreateHuman ;
36216: LD_ADDR_VAR 0 12
36220: PUSH
36221: CALL_OW 44
36225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36226: LD_VAR 0 12
36230: PPUSH
36231: LD_VAR 0 8
36235: PPUSH
36236: LD_INT 0
36238: PPUSH
36239: CALL 37947 0 3
// end ;
36243: GO 36197
36245: POP
36246: POP
// if fishes then
36247: LD_VAR 0 7
36251: IFFALSE 36318
// for i = 1 to fishes do
36253: LD_ADDR_VAR 0 11
36257: PUSH
36258: DOUBLE
36259: LD_INT 1
36261: DEC
36262: ST_TO_ADDR
36263: LD_VAR 0 7
36267: PUSH
36268: FOR_TO
36269: IFFALSE 36316
// begin hc_class = 20 ;
36271: LD_ADDR_OWVAR 28
36275: PUSH
36276: LD_INT 20
36278: ST_TO_ADDR
// hc_gallery =  ;
36279: LD_ADDR_OWVAR 33
36283: PUSH
36284: LD_STRING 
36286: ST_TO_ADDR
// animal := CreateHuman ;
36287: LD_ADDR_VAR 0 12
36291: PUSH
36292: CALL_OW 44
36296: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36297: LD_VAR 0 12
36301: PPUSH
36302: LD_VAR 0 9
36306: PPUSH
36307: LD_INT 0
36309: PPUSH
36310: CALL 37947 0 3
// end ;
36314: GO 36268
36316: POP
36317: POP
// end ;
36318: LD_VAR 0 10
36322: RET
// export function WantHeal ( sci , unit ) ; begin
36323: LD_INT 0
36325: PPUSH
// if GetTaskList ( sci ) > 0 then
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 437
36335: PUSH
36336: LD_INT 0
36338: GREATER
36339: IFFALSE 36409
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36341: LD_VAR 0 1
36345: PPUSH
36346: CALL_OW 437
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: PUSH
36355: LD_INT 1
36357: ARRAY
36358: PUSH
36359: LD_STRING l
36361: EQUAL
36362: PUSH
36363: LD_VAR 0 1
36367: PPUSH
36368: CALL_OW 437
36372: PUSH
36373: LD_INT 1
36375: ARRAY
36376: PUSH
36377: LD_INT 4
36379: ARRAY
36380: PUSH
36381: LD_VAR 0 2
36385: EQUAL
36386: AND
36387: IFFALSE 36399
// result := true else
36389: LD_ADDR_VAR 0 3
36393: PUSH
36394: LD_INT 1
36396: ST_TO_ADDR
36397: GO 36407
// result := false ;
36399: LD_ADDR_VAR 0 3
36403: PUSH
36404: LD_INT 0
36406: ST_TO_ADDR
// end else
36407: GO 36417
// result := false ;
36409: LD_ADDR_VAR 0 3
36413: PUSH
36414: LD_INT 0
36416: ST_TO_ADDR
// end ;
36417: LD_VAR 0 3
36421: RET
// export function HealTarget ( sci ) ; begin
36422: LD_INT 0
36424: PPUSH
// if not sci then
36425: LD_VAR 0 1
36429: NOT
36430: IFFALSE 36434
// exit ;
36432: GO 36499
// result := 0 ;
36434: LD_ADDR_VAR 0 2
36438: PUSH
36439: LD_INT 0
36441: ST_TO_ADDR
// if GetTaskList ( sci ) then
36442: LD_VAR 0 1
36446: PPUSH
36447: CALL_OW 437
36451: IFFALSE 36499
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 437
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PUSH
36467: LD_INT 1
36469: ARRAY
36470: PUSH
36471: LD_STRING l
36473: EQUAL
36474: IFFALSE 36499
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36476: LD_ADDR_VAR 0 2
36480: PUSH
36481: LD_VAR 0 1
36485: PPUSH
36486: CALL_OW 437
36490: PUSH
36491: LD_INT 1
36493: ARRAY
36494: PUSH
36495: LD_INT 4
36497: ARRAY
36498: ST_TO_ADDR
// end ;
36499: LD_VAR 0 2
36503: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36504: LD_INT 0
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
// if not base_units then
36510: LD_VAR 0 1
36514: NOT
36515: IFFALSE 36519
// exit ;
36517: GO 36606
// result := false ;
36519: LD_ADDR_VAR 0 2
36523: PUSH
36524: LD_INT 0
36526: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36527: LD_ADDR_VAR 0 5
36531: PUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: LD_INT 21
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PPUSH
36547: CALL_OW 72
36551: ST_TO_ADDR
// if not tmp then
36552: LD_VAR 0 5
36556: NOT
36557: IFFALSE 36561
// exit ;
36559: GO 36606
// for i in tmp do
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_VAR 0 5
36570: PUSH
36571: FOR_IN
36572: IFFALSE 36604
// begin result := EnemyInRange ( i , 22 ) ;
36574: LD_ADDR_VAR 0 2
36578: PUSH
36579: LD_VAR 0 3
36583: PPUSH
36584: LD_INT 22
36586: PPUSH
36587: CALL 34193 0 2
36591: ST_TO_ADDR
// if result then
36592: LD_VAR 0 2
36596: IFFALSE 36602
// exit ;
36598: POP
36599: POP
36600: GO 36606
// end ;
36602: GO 36571
36604: POP
36605: POP
// end ;
36606: LD_VAR 0 2
36610: RET
// export function FilterByTag ( units , tag ) ; begin
36611: LD_INT 0
36613: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36614: LD_ADDR_VAR 0 3
36618: PUSH
36619: LD_VAR 0 1
36623: PPUSH
36624: LD_INT 120
36626: PUSH
36627: LD_VAR 0 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PPUSH
36636: CALL_OW 72
36640: ST_TO_ADDR
// end ;
36641: LD_VAR 0 3
36645: RET
// export function IsDriver ( un ) ; begin
36646: LD_INT 0
36648: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36649: LD_ADDR_VAR 0 2
36653: PUSH
36654: LD_VAR 0 1
36658: PUSH
36659: LD_INT 55
36661: PUSH
36662: EMPTY
36663: LIST
36664: PPUSH
36665: CALL_OW 69
36669: IN
36670: ST_TO_ADDR
// end ;
36671: LD_VAR 0 2
36675: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36676: LD_INT 0
36678: PPUSH
36679: PPUSH
// list := [ ] ;
36680: LD_ADDR_VAR 0 5
36684: PUSH
36685: EMPTY
36686: ST_TO_ADDR
// case d of 0 :
36687: LD_VAR 0 3
36691: PUSH
36692: LD_INT 0
36694: DOUBLE
36695: EQUAL
36696: IFTRUE 36700
36698: GO 36833
36700: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36701: LD_ADDR_VAR 0 5
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_INT 4
36713: MINUS
36714: PUSH
36715: LD_VAR 0 2
36719: PUSH
36720: LD_INT 4
36722: MINUS
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: PUSH
36732: LD_VAR 0 1
36736: PUSH
36737: LD_INT 3
36739: MINUS
36740: PUSH
36741: LD_VAR 0 2
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PUSH
36754: LD_VAR 0 1
36758: PUSH
36759: LD_INT 4
36761: PLUS
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_INT 4
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: PUSH
36776: LD_VAR 0 1
36780: PUSH
36781: LD_INT 3
36783: PLUS
36784: PUSH
36785: LD_VAR 0 2
36789: PUSH
36790: LD_INT 3
36792: PLUS
36793: PUSH
36794: LD_INT 5
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PUSH
36802: LD_VAR 0 1
36806: PUSH
36807: LD_VAR 0 2
36811: PUSH
36812: LD_INT 4
36814: PLUS
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// end ; 1 :
36831: GO 37531
36833: LD_INT 1
36835: DOUBLE
36836: EQUAL
36837: IFTRUE 36841
36839: GO 36974
36841: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36842: LD_ADDR_VAR 0 5
36846: PUSH
36847: LD_VAR 0 1
36851: PUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_INT 4
36859: MINUS
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: PUSH
36869: LD_VAR 0 1
36873: PUSH
36874: LD_INT 3
36876: MINUS
36877: PUSH
36878: LD_VAR 0 2
36882: PUSH
36883: LD_INT 3
36885: MINUS
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: PUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_INT 4
36902: MINUS
36903: PUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: PUSH
36917: LD_VAR 0 1
36921: PUSH
36922: LD_VAR 0 2
36926: PUSH
36927: LD_INT 3
36929: PLUS
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: PUSH
36939: LD_VAR 0 1
36943: PUSH
36944: LD_INT 4
36946: PLUS
36947: PUSH
36948: LD_VAR 0 2
36952: PUSH
36953: LD_INT 4
36955: PLUS
36956: PUSH
36957: LD_INT 5
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
// end ; 2 :
36972: GO 37531
36974: LD_INT 2
36976: DOUBLE
36977: EQUAL
36978: IFTRUE 36982
36980: GO 37111
36982: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36983: LD_ADDR_VAR 0 5
36987: PUSH
36988: LD_VAR 0 1
36992: PUSH
36993: LD_VAR 0 2
36997: PUSH
36998: LD_INT 3
37000: MINUS
37001: PUSH
37002: LD_INT 3
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: PUSH
37010: LD_VAR 0 1
37014: PUSH
37015: LD_INT 4
37017: PLUS
37018: PUSH
37019: LD_VAR 0 2
37023: PUSH
37024: LD_INT 4
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_VAR 0 1
37036: PUSH
37037: LD_VAR 0 2
37041: PUSH
37042: LD_INT 4
37044: PLUS
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_VAR 0 1
37058: PUSH
37059: LD_INT 3
37061: MINUS
37062: PUSH
37063: LD_VAR 0 2
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PUSH
37076: LD_VAR 0 1
37080: PUSH
37081: LD_INT 4
37083: MINUS
37084: PUSH
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 4
37092: MINUS
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// end ; 3 :
37109: GO 37531
37111: LD_INT 3
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37252
37119: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37120: LD_ADDR_VAR 0 5
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 3
37132: PLUS
37133: PUSH
37134: LD_VAR 0 2
37138: PUSH
37139: LD_INT 4
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_INT 4
37154: PLUS
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_INT 4
37163: PLUS
37164: PUSH
37165: LD_INT 5
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_INT 4
37180: MINUS
37181: PUSH
37182: LD_VAR 0 2
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_VAR 0 1
37199: PUSH
37200: LD_VAR 0 2
37204: PUSH
37205: LD_INT 4
37207: MINUS
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: PUSH
37217: LD_VAR 0 1
37221: PUSH
37222: LD_INT 3
37224: MINUS
37225: PUSH
37226: LD_VAR 0 2
37230: PUSH
37231: LD_INT 3
37233: MINUS
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: ST_TO_ADDR
// end ; 4 :
37250: GO 37531
37252: LD_INT 4
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37393
37260: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37261: LD_ADDR_VAR 0 5
37265: PUSH
37266: LD_VAR 0 1
37270: PUSH
37271: LD_VAR 0 2
37275: PUSH
37276: LD_INT 4
37278: PLUS
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: PUSH
37288: LD_VAR 0 1
37292: PUSH
37293: LD_INT 3
37295: PLUS
37296: PUSH
37297: LD_VAR 0 2
37301: PUSH
37302: LD_INT 3
37304: PLUS
37305: PUSH
37306: LD_INT 5
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: PUSH
37314: LD_VAR 0 1
37318: PUSH
37319: LD_INT 4
37321: PLUS
37322: PUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 4
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_VAR 0 2
37345: PUSH
37346: LD_INT 3
37348: MINUS
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: LD_VAR 0 1
37362: PUSH
37363: LD_INT 4
37365: MINUS
37366: PUSH
37367: LD_VAR 0 2
37371: PUSH
37372: LD_INT 4
37374: MINUS
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// end ; 5 :
37391: GO 37531
37393: LD_INT 5
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 37530
37401: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37402: LD_ADDR_VAR 0 5
37406: PUSH
37407: LD_VAR 0 1
37411: PUSH
37412: LD_INT 4
37414: MINUS
37415: PUSH
37416: LD_VAR 0 2
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: PUSH
37429: LD_VAR 0 1
37433: PUSH
37434: LD_VAR 0 2
37438: PUSH
37439: LD_INT 4
37441: MINUS
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: LD_VAR 0 1
37455: PUSH
37456: LD_INT 4
37458: PLUS
37459: PUSH
37460: LD_VAR 0 2
37464: PUSH
37465: LD_INT 4
37467: PLUS
37468: PUSH
37469: LD_INT 5
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: PUSH
37477: LD_VAR 0 1
37481: PUSH
37482: LD_INT 3
37484: PLUS
37485: PUSH
37486: LD_VAR 0 2
37490: PUSH
37491: LD_INT 4
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: PUSH
37499: LD_VAR 0 1
37503: PUSH
37504: LD_VAR 0 2
37508: PUSH
37509: LD_INT 3
37511: PLUS
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: ST_TO_ADDR
// end ; end ;
37528: GO 37531
37530: POP
// result := list ;
37531: LD_ADDR_VAR 0 4
37535: PUSH
37536: LD_VAR 0 5
37540: ST_TO_ADDR
// end ;
37541: LD_VAR 0 4
37545: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37546: LD_INT 0
37548: PPUSH
37549: PPUSH
37550: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37551: LD_VAR 0 1
37555: NOT
37556: PUSH
37557: LD_VAR 0 2
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: LD_INT 4
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: IN
37580: NOT
37581: OR
37582: IFFALSE 37586
// exit ;
37584: GO 37669
// tmp := [ ] ;
37586: LD_ADDR_VAR 0 5
37590: PUSH
37591: EMPTY
37592: ST_TO_ADDR
// for i in units do
37593: LD_ADDR_VAR 0 4
37597: PUSH
37598: LD_VAR 0 1
37602: PUSH
37603: FOR_IN
37604: IFFALSE 37638
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37606: LD_ADDR_VAR 0 5
37610: PUSH
37611: LD_VAR 0 5
37615: PPUSH
37616: LD_VAR 0 4
37620: PPUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: CALL_OW 259
37630: PPUSH
37631: CALL 39030 0 2
37635: ST_TO_ADDR
37636: GO 37603
37638: POP
37639: POP
// if not tmp then
37640: LD_VAR 0 5
37644: NOT
37645: IFFALSE 37649
// exit ;
37647: GO 37669
// result := SortListByListDesc ( units , tmp ) ;
37649: LD_ADDR_VAR 0 3
37653: PUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: LD_VAR 0 5
37663: PPUSH
37664: CALL_OW 77
37668: ST_TO_ADDR
// end ;
37669: LD_VAR 0 3
37673: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37674: LD_INT 0
37676: PPUSH
37677: PPUSH
37678: PPUSH
// result := false ;
37679: LD_ADDR_VAR 0 3
37683: PUSH
37684: LD_INT 0
37686: ST_TO_ADDR
// if not building then
37687: LD_VAR 0 2
37691: NOT
37692: IFFALSE 37696
// exit ;
37694: GO 37834
// x := GetX ( building ) ;
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: LD_VAR 0 2
37705: PPUSH
37706: CALL_OW 250
37710: ST_TO_ADDR
// y := GetY ( building ) ;
37711: LD_ADDR_VAR 0 5
37715: PUSH
37716: LD_VAR 0 2
37720: PPUSH
37721: CALL_OW 251
37725: ST_TO_ADDR
// if not x or not y then
37726: LD_VAR 0 4
37730: NOT
37731: PUSH
37732: LD_VAR 0 5
37736: NOT
37737: OR
37738: IFFALSE 37742
// exit ;
37740: GO 37834
// if GetTaskList ( unit ) then
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 437
37751: IFFALSE 37834
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37753: LD_STRING e
37755: PUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 437
37765: PUSH
37766: LD_INT 1
37768: ARRAY
37769: PUSH
37770: LD_INT 1
37772: ARRAY
37773: EQUAL
37774: PUSH
37775: LD_VAR 0 4
37779: PUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 437
37789: PUSH
37790: LD_INT 1
37792: ARRAY
37793: PUSH
37794: LD_INT 2
37796: ARRAY
37797: EQUAL
37798: AND
37799: PUSH
37800: LD_VAR 0 5
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 437
37814: PUSH
37815: LD_INT 1
37817: ARRAY
37818: PUSH
37819: LD_INT 3
37821: ARRAY
37822: EQUAL
37823: AND
37824: IFFALSE 37834
// result := true end ;
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_INT 1
37833: ST_TO_ADDR
// end ;
37834: LD_VAR 0 3
37838: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37839: LD_INT 0
37841: PPUSH
// result := false ;
37842: LD_ADDR_VAR 0 4
37846: PUSH
37847: LD_INT 0
37849: ST_TO_ADDR
// if GetTaskList ( unit ) then
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 437
37859: IFFALSE 37942
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37861: LD_STRING M
37863: PUSH
37864: LD_VAR 0 1
37868: PPUSH
37869: CALL_OW 437
37873: PUSH
37874: LD_INT 1
37876: ARRAY
37877: PUSH
37878: LD_INT 1
37880: ARRAY
37881: EQUAL
37882: PUSH
37883: LD_VAR 0 2
37887: PUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 437
37897: PUSH
37898: LD_INT 1
37900: ARRAY
37901: PUSH
37902: LD_INT 2
37904: ARRAY
37905: EQUAL
37906: AND
37907: PUSH
37908: LD_VAR 0 3
37912: PUSH
37913: LD_VAR 0 1
37917: PPUSH
37918: CALL_OW 437
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PUSH
37927: LD_INT 3
37929: ARRAY
37930: EQUAL
37931: AND
37932: IFFALSE 37942
// result := true ;
37934: LD_ADDR_VAR 0 4
37938: PUSH
37939: LD_INT 1
37941: ST_TO_ADDR
// end ; end ;
37942: LD_VAR 0 4
37946: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
37951: PPUSH
37952: PPUSH
// if not unit or not area then
37953: LD_VAR 0 1
37957: NOT
37958: PUSH
37959: LD_VAR 0 2
37963: NOT
37964: OR
37965: IFFALSE 37969
// exit ;
37967: GO 38133
// tmp := AreaToList ( area , i ) ;
37969: LD_ADDR_VAR 0 6
37973: PUSH
37974: LD_VAR 0 2
37978: PPUSH
37979: LD_VAR 0 5
37983: PPUSH
37984: CALL_OW 517
37988: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37989: LD_ADDR_VAR 0 5
37993: PUSH
37994: DOUBLE
37995: LD_INT 1
37997: DEC
37998: ST_TO_ADDR
37999: LD_VAR 0 6
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: FOR_TO
38009: IFFALSE 38131
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38011: LD_ADDR_VAR 0 7
38015: PUSH
38016: LD_VAR 0 6
38020: PUSH
38021: LD_INT 1
38023: ARRAY
38024: PUSH
38025: LD_VAR 0 5
38029: ARRAY
38030: PUSH
38031: LD_VAR 0 6
38035: PUSH
38036: LD_INT 2
38038: ARRAY
38039: PUSH
38040: LD_VAR 0 5
38044: ARRAY
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38050: LD_VAR 0 7
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 7
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: PPUSH
38068: CALL_OW 428
38072: PUSH
38073: LD_INT 0
38075: EQUAL
38076: IFFALSE 38129
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38078: LD_VAR 0 1
38082: PPUSH
38083: LD_VAR 0 7
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: PPUSH
38092: LD_VAR 0 7
38096: PUSH
38097: LD_INT 2
38099: ARRAY
38100: PPUSH
38101: LD_VAR 0 3
38105: PPUSH
38106: CALL_OW 48
// result := IsPlaced ( unit ) ;
38110: LD_ADDR_VAR 0 4
38114: PUSH
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL_OW 305
38124: ST_TO_ADDR
// exit ;
38125: POP
38126: POP
38127: GO 38133
// end ; end ;
38129: GO 38008
38131: POP
38132: POP
// end ;
38133: LD_VAR 0 4
38137: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38138: LD_INT 0
38140: PPUSH
38141: PPUSH
38142: PPUSH
// if not side or side > 8 then
38143: LD_VAR 0 1
38147: NOT
38148: PUSH
38149: LD_VAR 0 1
38153: PUSH
38154: LD_INT 8
38156: GREATER
38157: OR
38158: IFFALSE 38162
// exit ;
38160: GO 38349
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38162: LD_ADDR_VAR 0 4
38166: PUSH
38167: LD_INT 22
38169: PUSH
38170: LD_VAR 0 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 21
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PPUSH
38193: CALL_OW 69
38197: ST_TO_ADDR
// if not tmp then
38198: LD_VAR 0 4
38202: NOT
38203: IFFALSE 38207
// exit ;
38205: GO 38349
// enable_addtolog := true ;
38207: LD_ADDR_OWVAR 81
38211: PUSH
38212: LD_INT 1
38214: ST_TO_ADDR
// AddToLog ( [ ) ;
38215: LD_STRING [
38217: PPUSH
38218: CALL_OW 561
// for i in tmp do
38222: LD_ADDR_VAR 0 3
38226: PUSH
38227: LD_VAR 0 4
38231: PUSH
38232: FOR_IN
38233: IFFALSE 38340
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38235: LD_STRING [
38237: PUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: CALL_OW 266
38247: STR
38248: PUSH
38249: LD_STRING , 
38251: STR
38252: PUSH
38253: LD_VAR 0 3
38257: PPUSH
38258: CALL_OW 250
38262: STR
38263: PUSH
38264: LD_STRING , 
38266: STR
38267: PUSH
38268: LD_VAR 0 3
38272: PPUSH
38273: CALL_OW 251
38277: STR
38278: PUSH
38279: LD_STRING , 
38281: STR
38282: PUSH
38283: LD_VAR 0 3
38287: PPUSH
38288: CALL_OW 254
38292: STR
38293: PUSH
38294: LD_STRING , 
38296: STR
38297: PUSH
38298: LD_VAR 0 3
38302: PPUSH
38303: LD_INT 1
38305: PPUSH
38306: CALL_OW 268
38310: STR
38311: PUSH
38312: LD_STRING , 
38314: STR
38315: PUSH
38316: LD_VAR 0 3
38320: PPUSH
38321: LD_INT 2
38323: PPUSH
38324: CALL_OW 268
38328: STR
38329: PUSH
38330: LD_STRING ],
38332: STR
38333: PPUSH
38334: CALL_OW 561
// end ;
38338: GO 38232
38340: POP
38341: POP
// AddToLog ( ]; ) ;
38342: LD_STRING ];
38344: PPUSH
38345: CALL_OW 561
// end ;
38349: LD_VAR 0 2
38353: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38354: LD_INT 0
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
// if not area or not rate or not max then
38361: LD_VAR 0 1
38365: NOT
38366: PUSH
38367: LD_VAR 0 2
38371: NOT
38372: OR
38373: PUSH
38374: LD_VAR 0 4
38378: NOT
38379: OR
38380: IFFALSE 38384
// exit ;
38382: GO 38573
// while 1 do
38384: LD_INT 1
38386: IFFALSE 38573
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38388: LD_ADDR_VAR 0 9
38392: PUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: LD_INT 1
38400: PPUSH
38401: CALL_OW 287
38405: PUSH
38406: LD_INT 10
38408: MUL
38409: ST_TO_ADDR
// r := rate / 10 ;
38410: LD_ADDR_VAR 0 7
38414: PUSH
38415: LD_VAR 0 2
38419: PUSH
38420: LD_INT 10
38422: DIVREAL
38423: ST_TO_ADDR
// time := 1 1$00 ;
38424: LD_ADDR_VAR 0 8
38428: PUSH
38429: LD_INT 2100
38431: ST_TO_ADDR
// if amount < min then
38432: LD_VAR 0 9
38436: PUSH
38437: LD_VAR 0 3
38441: LESS
38442: IFFALSE 38460
// r := r * 2 else
38444: LD_ADDR_VAR 0 7
38448: PUSH
38449: LD_VAR 0 7
38453: PUSH
38454: LD_INT 2
38456: MUL
38457: ST_TO_ADDR
38458: GO 38486
// if amount > max then
38460: LD_VAR 0 9
38464: PUSH
38465: LD_VAR 0 4
38469: GREATER
38470: IFFALSE 38486
// r := r / 2 ;
38472: LD_ADDR_VAR 0 7
38476: PUSH
38477: LD_VAR 0 7
38481: PUSH
38482: LD_INT 2
38484: DIVREAL
38485: ST_TO_ADDR
// time := time / r ;
38486: LD_ADDR_VAR 0 8
38490: PUSH
38491: LD_VAR 0 8
38495: PUSH
38496: LD_VAR 0 7
38500: DIVREAL
38501: ST_TO_ADDR
// if time < 0 then
38502: LD_VAR 0 8
38506: PUSH
38507: LD_INT 0
38509: LESS
38510: IFFALSE 38527
// time := time * - 1 ;
38512: LD_ADDR_VAR 0 8
38516: PUSH
38517: LD_VAR 0 8
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: MUL
38526: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38527: LD_VAR 0 8
38531: PUSH
38532: LD_INT 35
38534: PPUSH
38535: LD_INT 875
38537: PPUSH
38538: CALL_OW 12
38542: PLUS
38543: PPUSH
38544: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38548: LD_INT 1
38550: PPUSH
38551: LD_INT 5
38553: PPUSH
38554: CALL_OW 12
38558: PPUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: LD_INT 1
38566: PPUSH
38567: CALL_OW 55
// end ;
38571: GO 38384
// end ;
38573: LD_VAR 0 5
38577: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38578: LD_INT 0
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
// if not turrets or not factories then
38588: LD_VAR 0 1
38592: NOT
38593: PUSH
38594: LD_VAR 0 2
38598: NOT
38599: OR
38600: IFFALSE 38604
// exit ;
38602: GO 38911
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38604: LD_ADDR_VAR 0 10
38608: PUSH
38609: LD_INT 5
38611: PUSH
38612: LD_INT 6
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 4
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: LD_INT 5
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 24
38646: PUSH
38647: LD_INT 25
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 23
38656: PUSH
38657: LD_INT 27
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 42
38670: PUSH
38671: LD_INT 43
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 44
38680: PUSH
38681: LD_INT 46
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 45
38690: PUSH
38691: LD_INT 47
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: ST_TO_ADDR
// result := [ ] ;
38708: LD_ADDR_VAR 0 3
38712: PUSH
38713: EMPTY
38714: ST_TO_ADDR
// for i in turrets do
38715: LD_ADDR_VAR 0 4
38719: PUSH
38720: LD_VAR 0 1
38724: PUSH
38725: FOR_IN
38726: IFFALSE 38909
// begin nat := GetNation ( i ) ;
38728: LD_ADDR_VAR 0 7
38732: PUSH
38733: LD_VAR 0 4
38737: PPUSH
38738: CALL_OW 248
38742: ST_TO_ADDR
// weapon := 0 ;
38743: LD_ADDR_VAR 0 8
38747: PUSH
38748: LD_INT 0
38750: ST_TO_ADDR
// if not nat then
38751: LD_VAR 0 7
38755: NOT
38756: IFFALSE 38760
// continue ;
38758: GO 38725
// for j in list [ nat ] do
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: LD_VAR 0 10
38769: PUSH
38770: LD_VAR 0 7
38774: ARRAY
38775: PUSH
38776: FOR_IN
38777: IFFALSE 38818
// if GetBWeapon ( i ) = j [ 1 ] then
38779: LD_VAR 0 4
38783: PPUSH
38784: CALL_OW 269
38788: PUSH
38789: LD_VAR 0 5
38793: PUSH
38794: LD_INT 1
38796: ARRAY
38797: EQUAL
38798: IFFALSE 38816
// begin weapon := j [ 2 ] ;
38800: LD_ADDR_VAR 0 8
38804: PUSH
38805: LD_VAR 0 5
38809: PUSH
38810: LD_INT 2
38812: ARRAY
38813: ST_TO_ADDR
// break ;
38814: GO 38818
// end ;
38816: GO 38776
38818: POP
38819: POP
// if not weapon then
38820: LD_VAR 0 8
38824: NOT
38825: IFFALSE 38829
// continue ;
38827: GO 38725
// for k in factories do
38829: LD_ADDR_VAR 0 6
38833: PUSH
38834: LD_VAR 0 2
38838: PUSH
38839: FOR_IN
38840: IFFALSE 38905
// begin weapons := AvailableWeaponList ( k ) ;
38842: LD_ADDR_VAR 0 9
38846: PUSH
38847: LD_VAR 0 6
38851: PPUSH
38852: CALL_OW 478
38856: ST_TO_ADDR
// if not weapons then
38857: LD_VAR 0 9
38861: NOT
38862: IFFALSE 38866
// continue ;
38864: GO 38839
// if weapon in weapons then
38866: LD_VAR 0 8
38870: PUSH
38871: LD_VAR 0 9
38875: IN
38876: IFFALSE 38903
// begin result := [ i , weapon ] ;
38878: LD_ADDR_VAR 0 3
38882: PUSH
38883: LD_VAR 0 4
38887: PUSH
38888: LD_VAR 0 8
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: ST_TO_ADDR
// exit ;
38897: POP
38898: POP
38899: POP
38900: POP
38901: GO 38911
// end ; end ;
38903: GO 38839
38905: POP
38906: POP
// end ;
38907: GO 38725
38909: POP
38910: POP
// end ;
38911: LD_VAR 0 3
38915: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38916: LD_INT 0
38918: PPUSH
// if not side or side > 8 then
38919: LD_VAR 0 3
38923: NOT
38924: PUSH
38925: LD_VAR 0 3
38929: PUSH
38930: LD_INT 8
38932: GREATER
38933: OR
38934: IFFALSE 38938
// exit ;
38936: GO 38997
// if not range then
38938: LD_VAR 0 4
38942: NOT
38943: IFFALSE 38954
// range := - 12 ;
38945: LD_ADDR_VAR 0 4
38949: PUSH
38950: LD_INT 12
38952: NEG
38953: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38954: LD_VAR 0 1
38958: PPUSH
38959: LD_VAR 0 2
38963: PPUSH
38964: LD_VAR 0 3
38968: PPUSH
38969: LD_VAR 0 4
38973: PPUSH
38974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38978: LD_VAR 0 1
38982: PPUSH
38983: LD_VAR 0 2
38987: PPUSH
38988: LD_VAR 0 3
38992: PPUSH
38993: CALL_OW 331
// end ;
38997: LD_VAR 0 5
39001: RET
// export function Video ( mode ) ; begin
39002: LD_INT 0
39004: PPUSH
// ingame_video = mode ;
39005: LD_ADDR_OWVAR 52
39009: PUSH
39010: LD_VAR 0 1
39014: ST_TO_ADDR
// interface_hidden = mode ;
39015: LD_ADDR_OWVAR 54
39019: PUSH
39020: LD_VAR 0 1
39024: ST_TO_ADDR
// end ;
39025: LD_VAR 0 2
39029: RET
// export function Join ( array , element ) ; begin
39030: LD_INT 0
39032: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39033: LD_ADDR_VAR 0 3
39037: PUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: LD_VAR 0 1
39047: PUSH
39048: LD_INT 1
39050: PLUS
39051: PPUSH
39052: LD_VAR 0 2
39056: PPUSH
39057: CALL_OW 1
39061: ST_TO_ADDR
// end ;
39062: LD_VAR 0 3
39066: RET
// export function JoinUnion ( array , element ) ; begin
39067: LD_INT 0
39069: PPUSH
// result := array union element ;
39070: LD_ADDR_VAR 0 3
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_VAR 0 2
39084: UNION
39085: ST_TO_ADDR
// end ;
39086: LD_VAR 0 3
39090: RET
// export function GetBehemoths ( side ) ; begin
39091: LD_INT 0
39093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39094: LD_ADDR_VAR 0 2
39098: PUSH
39099: LD_INT 22
39101: PUSH
39102: LD_VAR 0 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 31
39113: PUSH
39114: LD_INT 25
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PPUSH
39125: CALL_OW 69
39129: ST_TO_ADDR
// end ;
39130: LD_VAR 0 2
39134: RET
// export function Shuffle ( array ) ; var i , index ; begin
39135: LD_INT 0
39137: PPUSH
39138: PPUSH
39139: PPUSH
// result := [ ] ;
39140: LD_ADDR_VAR 0 2
39144: PUSH
39145: EMPTY
39146: ST_TO_ADDR
// if not array then
39147: LD_VAR 0 1
39151: NOT
39152: IFFALSE 39156
// exit ;
39154: GO 39255
// Randomize ;
39156: CALL_OW 10
// for i = array downto 1 do
39160: LD_ADDR_VAR 0 3
39164: PUSH
39165: DOUBLE
39166: LD_VAR 0 1
39170: INC
39171: ST_TO_ADDR
39172: LD_INT 1
39174: PUSH
39175: FOR_DOWNTO
39176: IFFALSE 39253
// begin index := rand ( 1 , array ) ;
39178: LD_ADDR_VAR 0 4
39182: PUSH
39183: LD_INT 1
39185: PPUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 12
39195: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39196: LD_ADDR_VAR 0 2
39200: PUSH
39201: LD_VAR 0 2
39205: PPUSH
39206: LD_VAR 0 2
39210: PUSH
39211: LD_INT 1
39213: PLUS
39214: PPUSH
39215: LD_VAR 0 1
39219: PUSH
39220: LD_VAR 0 4
39224: ARRAY
39225: PPUSH
39226: CALL_OW 2
39230: ST_TO_ADDR
// array := Delete ( array , index ) ;
39231: LD_ADDR_VAR 0 1
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: LD_VAR 0 4
39245: PPUSH
39246: CALL_OW 3
39250: ST_TO_ADDR
// end ;
39251: GO 39175
39253: POP
39254: POP
// end ;
39255: LD_VAR 0 2
39259: RET
// export function GetBaseMaterials ( base ) ; begin
39260: LD_INT 0
39262: PPUSH
// result := [ 0 , 0 , 0 ] ;
39263: LD_ADDR_VAR 0 2
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: ST_TO_ADDR
// if not base then
39282: LD_VAR 0 1
39286: NOT
39287: IFFALSE 39291
// exit ;
39289: GO 39340
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39291: LD_ADDR_VAR 0 2
39295: PUSH
39296: LD_VAR 0 1
39300: PPUSH
39301: LD_INT 1
39303: PPUSH
39304: CALL_OW 275
39308: PUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: LD_INT 2
39316: PPUSH
39317: CALL_OW 275
39321: PUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: LD_INT 3
39329: PPUSH
39330: CALL_OW 275
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
// end ;
39340: LD_VAR 0 2
39344: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39345: LD_INT 0
39347: PPUSH
39348: PPUSH
// result := array ;
39349: LD_ADDR_VAR 0 3
39353: PUSH
39354: LD_VAR 0 1
39358: ST_TO_ADDR
// if size >= result then
39359: LD_VAR 0 2
39363: PUSH
39364: LD_VAR 0 3
39368: GREATEREQUAL
39369: IFFALSE 39373
// exit ;
39371: GO 39423
// if size then
39373: LD_VAR 0 2
39377: IFFALSE 39423
// for i := array downto size do
39379: LD_ADDR_VAR 0 4
39383: PUSH
39384: DOUBLE
39385: LD_VAR 0 1
39389: INC
39390: ST_TO_ADDR
39391: LD_VAR 0 2
39395: PUSH
39396: FOR_DOWNTO
39397: IFFALSE 39421
// result := Delete ( result , result ) ;
39399: LD_ADDR_VAR 0 3
39403: PUSH
39404: LD_VAR 0 3
39408: PPUSH
39409: LD_VAR 0 3
39413: PPUSH
39414: CALL_OW 3
39418: ST_TO_ADDR
39419: GO 39396
39421: POP
39422: POP
// end ;
39423: LD_VAR 0 3
39427: RET
// export function ComExit ( unit ) ; var tmp ; begin
39428: LD_INT 0
39430: PPUSH
39431: PPUSH
// if not IsInUnit ( unit ) then
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 310
39441: NOT
39442: IFFALSE 39446
// exit ;
39444: GO 39506
// tmp := IsInUnit ( unit ) ;
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 310
39460: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39461: LD_VAR 0 3
39465: PPUSH
39466: CALL_OW 247
39470: PUSH
39471: LD_INT 2
39473: EQUAL
39474: IFFALSE 39487
// ComExitVehicle ( unit ) else
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 121
39485: GO 39496
// ComExitBuilding ( unit ) ;
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 122
// result := tmp ;
39496: LD_ADDR_VAR 0 2
39500: PUSH
39501: LD_VAR 0 3
39505: ST_TO_ADDR
// end ;
39506: LD_VAR 0 2
39510: RET
// export function ComExitAll ( units ) ; var i ; begin
39511: LD_INT 0
39513: PPUSH
39514: PPUSH
// if not units then
39515: LD_VAR 0 1
39519: NOT
39520: IFFALSE 39524
// exit ;
39522: GO 39550
// for i in units do
39524: LD_ADDR_VAR 0 3
39528: PUSH
39529: LD_VAR 0 1
39533: PUSH
39534: FOR_IN
39535: IFFALSE 39548
// ComExit ( i ) ;
39537: LD_VAR 0 3
39541: PPUSH
39542: CALL 39428 0 1
39546: GO 39534
39548: POP
39549: POP
// end ;
39550: LD_VAR 0 2
39554: RET
// export function ResetHc ; begin
39555: LD_INT 0
39557: PPUSH
// InitHc ;
39558: CALL_OW 19
// hc_importance := 0 ;
39562: LD_ADDR_OWVAR 32
39566: PUSH
39567: LD_INT 0
39569: ST_TO_ADDR
// end ;
39570: LD_VAR 0 1
39574: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39575: LD_INT 0
39577: PPUSH
39578: PPUSH
39579: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39580: LD_ADDR_VAR 0 6
39584: PUSH
39585: LD_VAR 0 1
39589: PUSH
39590: LD_VAR 0 3
39594: PLUS
39595: PUSH
39596: LD_INT 2
39598: DIV
39599: ST_TO_ADDR
// if _x < 0 then
39600: LD_VAR 0 6
39604: PUSH
39605: LD_INT 0
39607: LESS
39608: IFFALSE 39625
// _x := _x * - 1 ;
39610: LD_ADDR_VAR 0 6
39614: PUSH
39615: LD_VAR 0 6
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: MUL
39624: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39625: LD_ADDR_VAR 0 7
39629: PUSH
39630: LD_VAR 0 2
39634: PUSH
39635: LD_VAR 0 4
39639: PLUS
39640: PUSH
39641: LD_INT 2
39643: DIV
39644: ST_TO_ADDR
// if _y < 0 then
39645: LD_VAR 0 7
39649: PUSH
39650: LD_INT 0
39652: LESS
39653: IFFALSE 39670
// _y := _y * - 1 ;
39655: LD_ADDR_VAR 0 7
39659: PUSH
39660: LD_VAR 0 7
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: MUL
39669: ST_TO_ADDR
// result := [ _x , _y ] ;
39670: LD_ADDR_VAR 0 5
39674: PUSH
39675: LD_VAR 0 6
39679: PUSH
39680: LD_VAR 0 7
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: ST_TO_ADDR
// end ;
39689: LD_VAR 0 5
39693: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
// task := GetTaskList ( unit ) ;
39700: LD_ADDR_VAR 0 7
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 437
39714: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39715: LD_VAR 0 7
39719: NOT
39720: PUSH
39721: LD_VAR 0 1
39725: PPUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: CALL_OW 308
39735: NOT
39736: AND
39737: IFFALSE 39741
// exit ;
39739: GO 39859
// if IsInArea ( unit , area ) then
39741: LD_VAR 0 1
39745: PPUSH
39746: LD_VAR 0 2
39750: PPUSH
39751: CALL_OW 308
39755: IFFALSE 39773
// begin ComMoveToArea ( unit , goAway ) ;
39757: LD_VAR 0 1
39761: PPUSH
39762: LD_VAR 0 3
39766: PPUSH
39767: CALL_OW 113
// exit ;
39771: GO 39859
// end ; if task [ 1 ] [ 1 ] <> M then
39773: LD_VAR 0 7
39777: PUSH
39778: LD_INT 1
39780: ARRAY
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: PUSH
39786: LD_STRING M
39788: NONEQUAL
39789: IFFALSE 39793
// exit ;
39791: GO 39859
// x := task [ 1 ] [ 2 ] ;
39793: LD_ADDR_VAR 0 5
39797: PUSH
39798: LD_VAR 0 7
39802: PUSH
39803: LD_INT 1
39805: ARRAY
39806: PUSH
39807: LD_INT 2
39809: ARRAY
39810: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39811: LD_ADDR_VAR 0 6
39815: PUSH
39816: LD_VAR 0 7
39820: PUSH
39821: LD_INT 1
39823: ARRAY
39824: PUSH
39825: LD_INT 3
39827: ARRAY
39828: ST_TO_ADDR
// if InArea ( x , y , area ) then
39829: LD_VAR 0 5
39833: PPUSH
39834: LD_VAR 0 6
39838: PPUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: CALL_OW 309
39848: IFFALSE 39859
// ComStop ( unit ) ;
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 141
// end ;
39859: LD_VAR 0 4
39863: RET
// export function Abs ( value ) ; begin
39864: LD_INT 0
39866: PPUSH
// result := value ;
39867: LD_ADDR_VAR 0 2
39871: PUSH
39872: LD_VAR 0 1
39876: ST_TO_ADDR
// if value < 0 then
39877: LD_VAR 0 1
39881: PUSH
39882: LD_INT 0
39884: LESS
39885: IFFALSE 39902
// result := value * - 1 ;
39887: LD_ADDR_VAR 0 2
39891: PUSH
39892: LD_VAR 0 1
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: MUL
39901: ST_TO_ADDR
// end ;
39902: LD_VAR 0 2
39906: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39907: LD_INT 0
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
// if not unit or not building then
39917: LD_VAR 0 1
39921: NOT
39922: PUSH
39923: LD_VAR 0 2
39927: NOT
39928: OR
39929: IFFALSE 39933
// exit ;
39931: GO 40159
// x := GetX ( building ) ;
39933: LD_ADDR_VAR 0 4
39937: PUSH
39938: LD_VAR 0 2
39942: PPUSH
39943: CALL_OW 250
39947: ST_TO_ADDR
// y := GetY ( building ) ;
39948: LD_ADDR_VAR 0 6
39952: PUSH
39953: LD_VAR 0 2
39957: PPUSH
39958: CALL_OW 251
39962: ST_TO_ADDR
// d := GetDir ( building ) ;
39963: LD_ADDR_VAR 0 8
39967: PUSH
39968: LD_VAR 0 2
39972: PPUSH
39973: CALL_OW 254
39977: ST_TO_ADDR
// r := 4 ;
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_INT 4
39985: ST_TO_ADDR
// for i := 1 to 5 do
39986: LD_ADDR_VAR 0 10
39990: PUSH
39991: DOUBLE
39992: LD_INT 1
39994: DEC
39995: ST_TO_ADDR
39996: LD_INT 5
39998: PUSH
39999: FOR_TO
40000: IFFALSE 40157
// begin _x := ShiftX ( x , d , r + i ) ;
40002: LD_ADDR_VAR 0 5
40006: PUSH
40007: LD_VAR 0 4
40011: PPUSH
40012: LD_VAR 0 8
40016: PPUSH
40017: LD_VAR 0 9
40021: PUSH
40022: LD_VAR 0 10
40026: PLUS
40027: PPUSH
40028: CALL_OW 272
40032: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40033: LD_ADDR_VAR 0 7
40037: PUSH
40038: LD_VAR 0 6
40042: PPUSH
40043: LD_VAR 0 8
40047: PPUSH
40048: LD_VAR 0 9
40052: PUSH
40053: LD_VAR 0 10
40057: PLUS
40058: PPUSH
40059: CALL_OW 273
40063: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40064: LD_VAR 0 5
40068: PPUSH
40069: LD_VAR 0 7
40073: PPUSH
40074: CALL_OW 488
40078: PUSH
40079: LD_VAR 0 5
40083: PPUSH
40084: LD_VAR 0 7
40088: PPUSH
40089: CALL_OW 428
40093: PPUSH
40094: CALL_OW 247
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: IN
40109: NOT
40110: AND
40111: IFFALSE 40155
// begin ComMoveXY ( unit , _x , _y ) ;
40113: LD_VAR 0 1
40117: PPUSH
40118: LD_VAR 0 5
40122: PPUSH
40123: LD_VAR 0 7
40127: PPUSH
40128: CALL_OW 111
// result := [ _x , _y ] ;
40132: LD_ADDR_VAR 0 3
40136: PUSH
40137: LD_VAR 0 5
40141: PUSH
40142: LD_VAR 0 7
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: ST_TO_ADDR
// exit ;
40151: POP
40152: POP
40153: GO 40159
// end ; end ;
40155: GO 39999
40157: POP
40158: POP
// end ;
40159: LD_VAR 0 3
40163: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40164: LD_INT 0
40166: PPUSH
40167: PPUSH
40168: PPUSH
// result := 0 ;
40169: LD_ADDR_VAR 0 3
40173: PUSH
40174: LD_INT 0
40176: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40177: LD_VAR 0 1
40181: PUSH
40182: LD_INT 0
40184: LESS
40185: PUSH
40186: LD_VAR 0 1
40190: PUSH
40191: LD_INT 8
40193: GREATER
40194: OR
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: LD_INT 0
40203: LESS
40204: OR
40205: PUSH
40206: LD_VAR 0 2
40210: PUSH
40211: LD_INT 8
40213: GREATER
40214: OR
40215: IFFALSE 40219
// exit ;
40217: GO 40294
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40219: LD_ADDR_VAR 0 4
40223: PUSH
40224: LD_INT 22
40226: PUSH
40227: LD_VAR 0 2
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PPUSH
40236: CALL_OW 69
40240: PUSH
40241: FOR_IN
40242: IFFALSE 40292
// begin un := UnitShoot ( i ) ;
40244: LD_ADDR_VAR 0 5
40248: PUSH
40249: LD_VAR 0 4
40253: PPUSH
40254: CALL_OW 504
40258: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40259: LD_VAR 0 5
40263: PPUSH
40264: CALL_OW 255
40268: PUSH
40269: LD_VAR 0 1
40273: EQUAL
40274: IFFALSE 40290
// begin result := un ;
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_VAR 0 5
40285: ST_TO_ADDR
// exit ;
40286: POP
40287: POP
40288: GO 40294
// end ; end ;
40290: GO 40241
40292: POP
40293: POP
// end ;
40294: LD_VAR 0 3
40298: RET
// export function GetCargoBay ( units ) ; begin
40299: LD_INT 0
40301: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40302: LD_ADDR_VAR 0 2
40306: PUSH
40307: LD_VAR 0 1
40311: PPUSH
40312: LD_INT 2
40314: PUSH
40315: LD_INT 34
40317: PUSH
40318: LD_INT 12
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 34
40327: PUSH
40328: LD_INT 51
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 34
40337: PUSH
40338: LD_INT 32
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 34
40347: PUSH
40348: LD_INT 89
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: PPUSH
40362: CALL_OW 72
40366: ST_TO_ADDR
// end ;
40367: LD_VAR 0 2
40371: RET
// export function Negate ( value ) ; begin
40372: LD_INT 0
40374: PPUSH
// result := not value ;
40375: LD_ADDR_VAR 0 2
40379: PUSH
40380: LD_VAR 0 1
40384: NOT
40385: ST_TO_ADDR
// end ;
40386: LD_VAR 0 2
40390: RET
// export function Inc ( value ) ; begin
40391: LD_INT 0
40393: PPUSH
// result := value + 1 ;
40394: LD_ADDR_VAR 0 2
40398: PUSH
40399: LD_VAR 0 1
40403: PUSH
40404: LD_INT 1
40406: PLUS
40407: ST_TO_ADDR
// end ;
40408: LD_VAR 0 2
40412: RET
// export function Dec ( value ) ; begin
40413: LD_INT 0
40415: PPUSH
// result := value - 1 ;
40416: LD_ADDR_VAR 0 2
40420: PUSH
40421: LD_VAR 0 1
40425: PUSH
40426: LD_INT 1
40428: MINUS
40429: ST_TO_ADDR
// end ;
40430: LD_VAR 0 2
40434: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40435: LD_INT 0
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_VAR 0 2
40454: PPUSH
40455: CALL_OW 488
40459: NOT
40460: PUSH
40461: LD_VAR 0 3
40465: PPUSH
40466: LD_VAR 0 4
40470: PPUSH
40471: CALL_OW 488
40475: NOT
40476: OR
40477: IFFALSE 40490
// begin result := - 1 ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: ST_TO_ADDR
// exit ;
40488: GO 40725
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40490: LD_ADDR_VAR 0 12
40494: PUSH
40495: LD_VAR 0 1
40499: PPUSH
40500: LD_VAR 0 2
40504: PPUSH
40505: LD_VAR 0 3
40509: PPUSH
40510: LD_VAR 0 4
40514: PPUSH
40515: CALL 39575 0 4
40519: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40520: LD_ADDR_VAR 0 11
40524: PUSH
40525: LD_VAR 0 1
40529: PPUSH
40530: LD_VAR 0 2
40534: PPUSH
40535: LD_VAR 0 12
40539: PUSH
40540: LD_INT 1
40542: ARRAY
40543: PPUSH
40544: LD_VAR 0 12
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: PPUSH
40553: CALL_OW 298
40557: ST_TO_ADDR
// distance := 9999 ;
40558: LD_ADDR_VAR 0 10
40562: PUSH
40563: LD_INT 9999
40565: ST_TO_ADDR
// for i := 0 to 5 do
40566: LD_ADDR_VAR 0 6
40570: PUSH
40571: DOUBLE
40572: LD_INT 0
40574: DEC
40575: ST_TO_ADDR
40576: LD_INT 5
40578: PUSH
40579: FOR_TO
40580: IFFALSE 40723
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40582: LD_ADDR_VAR 0 7
40586: PUSH
40587: LD_VAR 0 1
40591: PPUSH
40592: LD_VAR 0 6
40596: PPUSH
40597: LD_VAR 0 11
40601: PPUSH
40602: CALL_OW 272
40606: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40607: LD_ADDR_VAR 0 8
40611: PUSH
40612: LD_VAR 0 2
40616: PPUSH
40617: LD_VAR 0 6
40621: PPUSH
40622: LD_VAR 0 11
40626: PPUSH
40627: CALL_OW 273
40631: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40632: LD_VAR 0 7
40636: PPUSH
40637: LD_VAR 0 8
40641: PPUSH
40642: CALL_OW 488
40646: NOT
40647: IFFALSE 40651
// continue ;
40649: GO 40579
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40651: LD_ADDR_VAR 0 9
40655: PUSH
40656: LD_VAR 0 12
40660: PUSH
40661: LD_INT 1
40663: ARRAY
40664: PPUSH
40665: LD_VAR 0 12
40669: PUSH
40670: LD_INT 2
40672: ARRAY
40673: PPUSH
40674: LD_VAR 0 7
40678: PPUSH
40679: LD_VAR 0 8
40683: PPUSH
40684: CALL_OW 298
40688: ST_TO_ADDR
// if tmp < distance then
40689: LD_VAR 0 9
40693: PUSH
40694: LD_VAR 0 10
40698: LESS
40699: IFFALSE 40721
// begin result := i ;
40701: LD_ADDR_VAR 0 5
40705: PUSH
40706: LD_VAR 0 6
40710: ST_TO_ADDR
// distance := tmp ;
40711: LD_ADDR_VAR 0 10
40715: PUSH
40716: LD_VAR 0 9
40720: ST_TO_ADDR
// end ; end ;
40721: GO 40579
40723: POP
40724: POP
// end ;
40725: LD_VAR 0 5
40729: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40730: LD_INT 0
40732: PPUSH
40733: PPUSH
// if not driver or not IsInUnit ( driver ) then
40734: LD_VAR 0 1
40738: NOT
40739: PUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: CALL_OW 310
40749: NOT
40750: OR
40751: IFFALSE 40755
// exit ;
40753: GO 40845
// vehicle := IsInUnit ( driver ) ;
40755: LD_ADDR_VAR 0 3
40759: PUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: CALL_OW 310
40769: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40770: LD_VAR 0 1
40774: PPUSH
40775: LD_STRING \
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: PUSH
40805: LD_STRING E
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_VAR 0 3
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PPUSH
40841: CALL_OW 446
// end ;
40845: LD_VAR 0 2
40849: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40850: LD_INT 0
40852: PPUSH
40853: PPUSH
// if not driver or not IsInUnit ( driver ) then
40854: LD_VAR 0 1
40858: NOT
40859: PUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 310
40869: NOT
40870: OR
40871: IFFALSE 40875
// exit ;
40873: GO 40965
// vehicle := IsInUnit ( driver ) ;
40875: LD_ADDR_VAR 0 3
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 310
40889: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40890: LD_VAR 0 1
40894: PPUSH
40895: LD_STRING \
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: PUSH
40925: LD_STRING E
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_VAR 0 3
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PPUSH
40961: CALL_OW 447
// end ;
40965: LD_VAR 0 2
40969: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40970: LD_INT 0
40972: PPUSH
40973: PPUSH
40974: PPUSH
// tmp := [ ] ;
40975: LD_ADDR_VAR 0 5
40979: PUSH
40980: EMPTY
40981: ST_TO_ADDR
// for i in units do
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 1
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41031
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40995: LD_ADDR_VAR 0 5
40999: PUSH
41000: LD_VAR 0 5
41004: PPUSH
41005: LD_VAR 0 5
41009: PUSH
41010: LD_INT 1
41012: PLUS
41013: PPUSH
41014: LD_VAR 0 4
41018: PPUSH
41019: CALL_OW 256
41023: PPUSH
41024: CALL_OW 2
41028: ST_TO_ADDR
41029: GO 40992
41031: POP
41032: POP
// if not tmp then
41033: LD_VAR 0 5
41037: NOT
41038: IFFALSE 41042
// exit ;
41040: GO 41090
// if asc then
41042: LD_VAR 0 2
41046: IFFALSE 41070
// result := SortListByListAsc ( units , tmp ) else
41048: LD_ADDR_VAR 0 3
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: LD_VAR 0 5
41062: PPUSH
41063: CALL_OW 76
41067: ST_TO_ADDR
41068: GO 41090
// result := SortListByListDesc ( units , tmp ) ;
41070: LD_ADDR_VAR 0 3
41074: PUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: LD_VAR 0 5
41084: PPUSH
41085: CALL_OW 77
41089: ST_TO_ADDR
// end ;
41090: LD_VAR 0 3
41094: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41095: LD_INT 0
41097: PPUSH
41098: PPUSH
// task := GetTaskList ( mech ) ;
41099: LD_ADDR_VAR 0 4
41103: PUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: CALL_OW 437
41113: ST_TO_ADDR
// if not task then
41114: LD_VAR 0 4
41118: NOT
41119: IFFALSE 41123
// exit ;
41121: GO 41165
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41123: LD_ADDR_VAR 0 3
41127: PUSH
41128: LD_VAR 0 4
41132: PUSH
41133: LD_INT 1
41135: ARRAY
41136: PUSH
41137: LD_INT 1
41139: ARRAY
41140: PUSH
41141: LD_STRING r
41143: EQUAL
41144: PUSH
41145: LD_VAR 0 4
41149: PUSH
41150: LD_INT 1
41152: ARRAY
41153: PUSH
41154: LD_INT 4
41156: ARRAY
41157: PUSH
41158: LD_VAR 0 2
41162: EQUAL
41163: AND
41164: ST_TO_ADDR
// end ;
41165: LD_VAR 0 3
41169: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41170: LD_INT 0
41172: PPUSH
// SetDir ( unit , d ) ;
41173: LD_VAR 0 1
41177: PPUSH
41178: LD_VAR 0 4
41182: PPUSH
41183: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41187: LD_VAR 0 1
41191: PPUSH
41192: LD_VAR 0 2
41196: PPUSH
41197: LD_VAR 0 3
41201: PPUSH
41202: LD_VAR 0 5
41206: PPUSH
41207: CALL_OW 48
// end ;
41211: LD_VAR 0 6
41215: RET
// export function ToNaturalNumber ( number ) ; begin
41216: LD_INT 0
41218: PPUSH
// result := number div 1 ;
41219: LD_ADDR_VAR 0 2
41223: PUSH
41224: LD_VAR 0 1
41228: PUSH
41229: LD_INT 1
41231: DIV
41232: ST_TO_ADDR
// if number < 0 then
41233: LD_VAR 0 1
41237: PUSH
41238: LD_INT 0
41240: LESS
41241: IFFALSE 41251
// result := 0 ;
41243: LD_ADDR_VAR 0 2
41247: PUSH
41248: LD_INT 0
41250: ST_TO_ADDR
// end ;
41251: LD_VAR 0 2
41255: RET
// export function SortByClass ( units , class ) ; var un ; begin
41256: LD_INT 0
41258: PPUSH
41259: PPUSH
// if not units or not class then
41260: LD_VAR 0 1
41264: NOT
41265: PUSH
41266: LD_VAR 0 2
41270: NOT
41271: OR
41272: IFFALSE 41276
// exit ;
41274: GO 41371
// result := [ ] ;
41276: LD_ADDR_VAR 0 3
41280: PUSH
41281: EMPTY
41282: ST_TO_ADDR
// for un in units do
41283: LD_ADDR_VAR 0 4
41287: PUSH
41288: LD_VAR 0 1
41292: PUSH
41293: FOR_IN
41294: IFFALSE 41369
// if GetClass ( un ) = class then
41296: LD_VAR 0 4
41300: PPUSH
41301: CALL_OW 257
41305: PUSH
41306: LD_VAR 0 2
41310: EQUAL
41311: IFFALSE 41338
// result := Insert ( result , 1 , un ) else
41313: LD_ADDR_VAR 0 3
41317: PUSH
41318: LD_VAR 0 3
41322: PPUSH
41323: LD_INT 1
41325: PPUSH
41326: LD_VAR 0 4
41330: PPUSH
41331: CALL_OW 2
41335: ST_TO_ADDR
41336: GO 41367
// result := Replace ( result , result + 1 , un ) ;
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_VAR 0 3
41347: PPUSH
41348: LD_VAR 0 3
41352: PUSH
41353: LD_INT 1
41355: PLUS
41356: PPUSH
41357: LD_VAR 0 4
41361: PPUSH
41362: CALL_OW 1
41366: ST_TO_ADDR
41367: GO 41293
41369: POP
41370: POP
// end ;
41371: LD_VAR 0 3
41375: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41376: LD_INT 0
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
// result := [ ] ;
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: EMPTY
41391: ST_TO_ADDR
// if x - r < 0 then
41392: LD_VAR 0 1
41396: PUSH
41397: LD_VAR 0 3
41401: MINUS
41402: PUSH
41403: LD_INT 0
41405: LESS
41406: IFFALSE 41418
// min_x := 0 else
41408: LD_ADDR_VAR 0 8
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
41416: GO 41434
// min_x := x - r ;
41418: LD_ADDR_VAR 0 8
41422: PUSH
41423: LD_VAR 0 1
41427: PUSH
41428: LD_VAR 0 3
41432: MINUS
41433: ST_TO_ADDR
// if y - r < 0 then
41434: LD_VAR 0 2
41438: PUSH
41439: LD_VAR 0 3
41443: MINUS
41444: PUSH
41445: LD_INT 0
41447: LESS
41448: IFFALSE 41460
// min_y := 0 else
41450: LD_ADDR_VAR 0 7
41454: PUSH
41455: LD_INT 0
41457: ST_TO_ADDR
41458: GO 41476
// min_y := y - r ;
41460: LD_ADDR_VAR 0 7
41464: PUSH
41465: LD_VAR 0 2
41469: PUSH
41470: LD_VAR 0 3
41474: MINUS
41475: ST_TO_ADDR
// max_x := x + r ;
41476: LD_ADDR_VAR 0 9
41480: PUSH
41481: LD_VAR 0 1
41485: PUSH
41486: LD_VAR 0 3
41490: PLUS
41491: ST_TO_ADDR
// max_y := y + r ;
41492: LD_ADDR_VAR 0 10
41496: PUSH
41497: LD_VAR 0 2
41501: PUSH
41502: LD_VAR 0 3
41506: PLUS
41507: ST_TO_ADDR
// for _x = min_x to max_x do
41508: LD_ADDR_VAR 0 5
41512: PUSH
41513: DOUBLE
41514: LD_VAR 0 8
41518: DEC
41519: ST_TO_ADDR
41520: LD_VAR 0 9
41524: PUSH
41525: FOR_TO
41526: IFFALSE 41627
// for _y = min_y to max_y do
41528: LD_ADDR_VAR 0 6
41532: PUSH
41533: DOUBLE
41534: LD_VAR 0 7
41538: DEC
41539: ST_TO_ADDR
41540: LD_VAR 0 10
41544: PUSH
41545: FOR_TO
41546: IFFALSE 41623
// begin if not ValidHex ( _x , _y ) then
41548: LD_VAR 0 5
41552: PPUSH
41553: LD_VAR 0 6
41557: PPUSH
41558: CALL_OW 488
41562: NOT
41563: IFFALSE 41567
// continue ;
41565: GO 41545
// if GetResourceTypeXY ( _x , _y ) then
41567: LD_VAR 0 5
41571: PPUSH
41572: LD_VAR 0 6
41576: PPUSH
41577: CALL_OW 283
41581: IFFALSE 41621
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41583: LD_ADDR_VAR 0 4
41587: PUSH
41588: LD_VAR 0 4
41592: PPUSH
41593: LD_VAR 0 4
41597: PUSH
41598: LD_INT 1
41600: PLUS
41601: PPUSH
41602: LD_VAR 0 5
41606: PUSH
41607: LD_VAR 0 6
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PPUSH
41616: CALL_OW 1
41620: ST_TO_ADDR
// end ;
41621: GO 41545
41623: POP
41624: POP
41625: GO 41525
41627: POP
41628: POP
// end ;
41629: LD_VAR 0 4
41633: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41634: LD_INT 0
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
// if not units then
41644: LD_VAR 0 1
41648: NOT
41649: IFFALSE 41653
// exit ;
41651: GO 42177
// result := UnitFilter ( units , [ f_ok ] ) ;
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: LD_INT 50
41665: PUSH
41666: EMPTY
41667: LIST
41668: PPUSH
41669: CALL_OW 72
41673: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41674: LD_ADDR_VAR 0 8
41678: PUSH
41679: LD_VAR 0 1
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PPUSH
41688: CALL_OW 255
41692: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41693: LD_ADDR_VAR 0 10
41697: PUSH
41698: LD_INT 29
41700: PUSH
41701: LD_INT 91
41703: PUSH
41704: LD_INT 49
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: ST_TO_ADDR
// if not result then
41712: LD_VAR 0 3
41716: NOT
41717: IFFALSE 41721
// exit ;
41719: GO 42177
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41721: LD_ADDR_VAR 0 5
41725: PUSH
41726: LD_INT 81
41728: PUSH
41729: LD_VAR 0 8
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PPUSH
41738: CALL_OW 69
41742: ST_TO_ADDR
// for i in result do
41743: LD_ADDR_VAR 0 4
41747: PUSH
41748: LD_VAR 0 3
41752: PUSH
41753: FOR_IN
41754: IFFALSE 42175
// begin tag := GetTag ( i ) + 1 ;
41756: LD_ADDR_VAR 0 9
41760: PUSH
41761: LD_VAR 0 4
41765: PPUSH
41766: CALL_OW 110
41770: PUSH
41771: LD_INT 1
41773: PLUS
41774: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41775: LD_ADDR_VAR 0 7
41779: PUSH
41780: LD_VAR 0 4
41784: PPUSH
41785: CALL_OW 250
41789: PPUSH
41790: LD_VAR 0 4
41794: PPUSH
41795: CALL_OW 251
41799: PPUSH
41800: LD_INT 6
41802: PPUSH
41803: CALL 41376 0 3
41807: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41808: LD_VAR 0 4
41812: PPUSH
41813: CALL_OW 247
41817: PUSH
41818: LD_INT 2
41820: EQUAL
41821: PUSH
41822: LD_VAR 0 7
41826: AND
41827: PUSH
41828: LD_VAR 0 4
41832: PPUSH
41833: CALL_OW 264
41837: PUSH
41838: LD_VAR 0 10
41842: IN
41843: NOT
41844: AND
41845: IFFALSE 41884
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41847: LD_VAR 0 4
41851: PPUSH
41852: LD_VAR 0 7
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PUSH
41861: LD_INT 1
41863: ARRAY
41864: PPUSH
41865: LD_VAR 0 7
41869: PUSH
41870: LD_INT 1
41872: ARRAY
41873: PUSH
41874: LD_INT 2
41876: ARRAY
41877: PPUSH
41878: CALL_OW 116
41882: GO 42173
// if path > tag then
41884: LD_VAR 0 2
41888: PUSH
41889: LD_VAR 0 9
41893: GREATER
41894: IFFALSE 42102
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41896: LD_ADDR_VAR 0 6
41900: PUSH
41901: LD_VAR 0 5
41905: PPUSH
41906: LD_INT 91
41908: PUSH
41909: LD_VAR 0 4
41913: PUSH
41914: LD_INT 8
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: PPUSH
41922: CALL_OW 72
41926: ST_TO_ADDR
// if nearEnemy then
41927: LD_VAR 0 6
41931: IFFALSE 42000
// begin if GetWeapon ( i ) = ru_time_lapser then
41933: LD_VAR 0 4
41937: PPUSH
41938: CALL_OW 264
41942: PUSH
41943: LD_INT 49
41945: EQUAL
41946: IFFALSE 41974
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41948: LD_VAR 0 4
41952: PPUSH
41953: LD_VAR 0 6
41957: PPUSH
41958: LD_VAR 0 4
41962: PPUSH
41963: CALL_OW 74
41967: PPUSH
41968: CALL_OW 112
41972: GO 41998
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41974: LD_VAR 0 4
41978: PPUSH
41979: LD_VAR 0 6
41983: PPUSH
41984: LD_VAR 0 4
41988: PPUSH
41989: CALL_OW 74
41993: PPUSH
41994: CALL_OW 115
// end else
41998: GO 42100
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42000: LD_VAR 0 4
42004: PPUSH
42005: LD_VAR 0 2
42009: PUSH
42010: LD_VAR 0 9
42014: ARRAY
42015: PUSH
42016: LD_INT 1
42018: ARRAY
42019: PPUSH
42020: LD_VAR 0 2
42024: PUSH
42025: LD_VAR 0 9
42029: ARRAY
42030: PUSH
42031: LD_INT 2
42033: ARRAY
42034: PPUSH
42035: CALL_OW 297
42039: PUSH
42040: LD_INT 6
42042: GREATER
42043: IFFALSE 42086
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42045: LD_VAR 0 4
42049: PPUSH
42050: LD_VAR 0 2
42054: PUSH
42055: LD_VAR 0 9
42059: ARRAY
42060: PUSH
42061: LD_INT 1
42063: ARRAY
42064: PPUSH
42065: LD_VAR 0 2
42069: PUSH
42070: LD_VAR 0 9
42074: ARRAY
42075: PUSH
42076: LD_INT 2
42078: ARRAY
42079: PPUSH
42080: CALL_OW 114
42084: GO 42100
// SetTag ( i , tag ) ;
42086: LD_VAR 0 4
42090: PPUSH
42091: LD_VAR 0 9
42095: PPUSH
42096: CALL_OW 109
// end else
42100: GO 42173
// if enemy then
42102: LD_VAR 0 5
42106: IFFALSE 42173
// begin if GetWeapon ( i ) = ru_time_lapser then
42108: LD_VAR 0 4
42112: PPUSH
42113: CALL_OW 264
42117: PUSH
42118: LD_INT 49
42120: EQUAL
42121: IFFALSE 42149
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42123: LD_VAR 0 4
42127: PPUSH
42128: LD_VAR 0 5
42132: PPUSH
42133: LD_VAR 0 4
42137: PPUSH
42138: CALL_OW 74
42142: PPUSH
42143: CALL_OW 112
42147: GO 42173
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42149: LD_VAR 0 4
42153: PPUSH
42154: LD_VAR 0 5
42158: PPUSH
42159: LD_VAR 0 4
42163: PPUSH
42164: CALL_OW 74
42168: PPUSH
42169: CALL_OW 115
// end ; end ;
42173: GO 41753
42175: POP
42176: POP
// end ;
42177: LD_VAR 0 3
42181: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42182: LD_INT 0
42184: PPUSH
42185: PPUSH
42186: PPUSH
// if not unit or IsInUnit ( unit ) then
42187: LD_VAR 0 1
42191: NOT
42192: PUSH
42193: LD_VAR 0 1
42197: PPUSH
42198: CALL_OW 310
42202: OR
42203: IFFALSE 42207
// exit ;
42205: GO 42298
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42207: LD_ADDR_VAR 0 4
42211: PUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: CALL_OW 250
42221: PPUSH
42222: LD_VAR 0 2
42226: PPUSH
42227: LD_INT 1
42229: PPUSH
42230: CALL_OW 272
42234: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42235: LD_ADDR_VAR 0 5
42239: PUSH
42240: LD_VAR 0 1
42244: PPUSH
42245: CALL_OW 251
42249: PPUSH
42250: LD_VAR 0 2
42254: PPUSH
42255: LD_INT 1
42257: PPUSH
42258: CALL_OW 273
42262: ST_TO_ADDR
// if ValidHex ( x , y ) then
42263: LD_VAR 0 4
42267: PPUSH
42268: LD_VAR 0 5
42272: PPUSH
42273: CALL_OW 488
42277: IFFALSE 42298
// ComTurnXY ( unit , x , y ) ;
42279: LD_VAR 0 1
42283: PPUSH
42284: LD_VAR 0 4
42288: PPUSH
42289: LD_VAR 0 5
42293: PPUSH
42294: CALL_OW 118
// end ;
42298: LD_VAR 0 3
42302: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42303: LD_INT 0
42305: PPUSH
42306: PPUSH
// result := false ;
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_INT 0
42314: ST_TO_ADDR
// if not units then
42315: LD_VAR 0 2
42319: NOT
42320: IFFALSE 42324
// exit ;
42322: GO 42369
// for i in units do
42324: LD_ADDR_VAR 0 4
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: FOR_IN
42335: IFFALSE 42367
// if See ( side , i ) then
42337: LD_VAR 0 1
42341: PPUSH
42342: LD_VAR 0 4
42346: PPUSH
42347: CALL_OW 292
42351: IFFALSE 42365
// begin result := true ;
42353: LD_ADDR_VAR 0 3
42357: PUSH
42358: LD_INT 1
42360: ST_TO_ADDR
// exit ;
42361: POP
42362: POP
42363: GO 42369
// end ;
42365: GO 42334
42367: POP
42368: POP
// end ;
42369: LD_VAR 0 3
42373: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42374: LD_INT 0
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
// if not unit or not points then
42380: LD_VAR 0 1
42384: NOT
42385: PUSH
42386: LD_VAR 0 2
42390: NOT
42391: OR
42392: IFFALSE 42396
// exit ;
42394: GO 42486
// dist := 99999 ;
42396: LD_ADDR_VAR 0 5
42400: PUSH
42401: LD_INT 99999
42403: ST_TO_ADDR
// for i in points do
42404: LD_ADDR_VAR 0 4
42408: PUSH
42409: LD_VAR 0 2
42413: PUSH
42414: FOR_IN
42415: IFFALSE 42484
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42417: LD_ADDR_VAR 0 6
42421: PUSH
42422: LD_VAR 0 1
42426: PPUSH
42427: LD_VAR 0 4
42431: PUSH
42432: LD_INT 1
42434: ARRAY
42435: PPUSH
42436: LD_VAR 0 4
42440: PUSH
42441: LD_INT 2
42443: ARRAY
42444: PPUSH
42445: CALL_OW 297
42449: ST_TO_ADDR
// if tmpDist < dist then
42450: LD_VAR 0 6
42454: PUSH
42455: LD_VAR 0 5
42459: LESS
42460: IFFALSE 42482
// begin result := i ;
42462: LD_ADDR_VAR 0 3
42466: PUSH
42467: LD_VAR 0 4
42471: ST_TO_ADDR
// dist := tmpDist ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_VAR 0 6
42481: ST_TO_ADDR
// end ; end ;
42482: GO 42414
42484: POP
42485: POP
// end ;
42486: LD_VAR 0 3
42490: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42491: LD_INT 0
42493: PPUSH
// uc_side := side ;
42494: LD_ADDR_OWVAR 20
42498: PUSH
42499: LD_VAR 0 1
42503: ST_TO_ADDR
// uc_nation := 3 ;
42504: LD_ADDR_OWVAR 21
42508: PUSH
42509: LD_INT 3
42511: ST_TO_ADDR
// vc_chassis := 25 ;
42512: LD_ADDR_OWVAR 37
42516: PUSH
42517: LD_INT 25
42519: ST_TO_ADDR
// vc_engine := engine_siberite ;
42520: LD_ADDR_OWVAR 39
42524: PUSH
42525: LD_INT 3
42527: ST_TO_ADDR
// vc_control := control_computer ;
42528: LD_ADDR_OWVAR 38
42532: PUSH
42533: LD_INT 3
42535: ST_TO_ADDR
// vc_weapon := 59 ;
42536: LD_ADDR_OWVAR 40
42540: PUSH
42541: LD_INT 59
42543: ST_TO_ADDR
// result := CreateVehicle ;
42544: LD_ADDR_VAR 0 5
42548: PUSH
42549: CALL_OW 45
42553: ST_TO_ADDR
// SetDir ( result , d ) ;
42554: LD_VAR 0 5
42558: PPUSH
42559: LD_VAR 0 4
42563: PPUSH
42564: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42568: LD_VAR 0 5
42572: PPUSH
42573: LD_VAR 0 2
42577: PPUSH
42578: LD_VAR 0 3
42582: PPUSH
42583: LD_INT 0
42585: PPUSH
42586: CALL_OW 48
// end ;
42590: LD_VAR 0 5
42594: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42595: LD_INT 0
42597: PPUSH
42598: PPUSH
42599: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42600: LD_ADDR_VAR 0 2
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42623: LD_VAR 0 1
42627: NOT
42628: PUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 264
42638: PUSH
42639: LD_INT 12
42641: PUSH
42642: LD_INT 51
42644: PUSH
42645: LD_INT 32
42647: PUSH
42648: LD_INT 89
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: IN
42657: NOT
42658: OR
42659: IFFALSE 42663
// exit ;
42661: GO 42761
// for i := 1 to 3 do
42663: LD_ADDR_VAR 0 3
42667: PUSH
42668: DOUBLE
42669: LD_INT 1
42671: DEC
42672: ST_TO_ADDR
42673: LD_INT 3
42675: PUSH
42676: FOR_TO
42677: IFFALSE 42759
// begin tmp := GetCargo ( cargo , i ) ;
42679: LD_ADDR_VAR 0 4
42683: PUSH
42684: LD_VAR 0 1
42688: PPUSH
42689: LD_VAR 0 3
42693: PPUSH
42694: CALL_OW 289
42698: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42699: LD_ADDR_VAR 0 2
42703: PUSH
42704: LD_VAR 0 2
42708: PPUSH
42709: LD_VAR 0 3
42713: PPUSH
42714: LD_VAR 0 4
42718: PPUSH
42719: CALL_OW 1
42723: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42724: LD_ADDR_VAR 0 2
42728: PUSH
42729: LD_VAR 0 2
42733: PPUSH
42734: LD_INT 4
42736: PPUSH
42737: LD_VAR 0 2
42741: PUSH
42742: LD_INT 4
42744: ARRAY
42745: PUSH
42746: LD_VAR 0 4
42750: PLUS
42751: PPUSH
42752: CALL_OW 1
42756: ST_TO_ADDR
// end ;
42757: GO 42676
42759: POP
42760: POP
// end ;
42761: LD_VAR 0 2
42765: RET
// export function Length ( array ) ; begin
42766: LD_INT 0
42768: PPUSH
// result := array + 0 ;
42769: LD_ADDR_VAR 0 2
42773: PUSH
42774: LD_VAR 0 1
42778: PUSH
42779: LD_INT 0
42781: PLUS
42782: ST_TO_ADDR
// end ;
42783: LD_VAR 0 2
42787: RET
// export function PrepareArray ( array ) ; begin
42788: LD_INT 0
42790: PPUSH
// result := array diff 0 ;
42791: LD_ADDR_VAR 0 2
42795: PUSH
42796: LD_VAR 0 1
42800: PUSH
42801: LD_INT 0
42803: DIFF
42804: ST_TO_ADDR
// if not result [ 1 ] then
42805: LD_VAR 0 2
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: NOT
42814: IFFALSE 42834
// result := Delete ( result , 1 ) ;
42816: LD_ADDR_VAR 0 2
42820: PUSH
42821: LD_VAR 0 2
42825: PPUSH
42826: LD_INT 1
42828: PPUSH
42829: CALL_OW 3
42833: ST_TO_ADDR
// end ;
42834: LD_VAR 0 2
42838: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42839: LD_INT 0
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
// sibRocketRange := 25 ;
42845: LD_ADDR_VAR 0 6
42849: PUSH
42850: LD_INT 25
42852: ST_TO_ADDR
// result := false ;
42853: LD_ADDR_VAR 0 4
42857: PUSH
42858: LD_INT 0
42860: ST_TO_ADDR
// for i := 0 to 5 do
42861: LD_ADDR_VAR 0 5
42865: PUSH
42866: DOUBLE
42867: LD_INT 0
42869: DEC
42870: ST_TO_ADDR
42871: LD_INT 5
42873: PUSH
42874: FOR_TO
42875: IFFALSE 42942
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42877: LD_VAR 0 1
42881: PPUSH
42882: LD_VAR 0 5
42886: PPUSH
42887: LD_VAR 0 6
42891: PPUSH
42892: CALL_OW 272
42896: PPUSH
42897: LD_VAR 0 2
42901: PPUSH
42902: LD_VAR 0 5
42906: PPUSH
42907: LD_VAR 0 6
42911: PPUSH
42912: CALL_OW 273
42916: PPUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: CALL_OW 309
42926: IFFALSE 42940
// begin result := true ;
42928: LD_ADDR_VAR 0 4
42932: PUSH
42933: LD_INT 1
42935: ST_TO_ADDR
// exit ;
42936: POP
42937: POP
42938: GO 42944
// end ;
42940: GO 42874
42942: POP
42943: POP
// end ;
42944: LD_VAR 0 4
42948: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42949: LD_INT 0
42951: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42952: LD_VAR 0 1
42956: PPUSH
42957: LD_VAR 0 2
42961: PPUSH
42962: LD_INT 0
42964: PPUSH
42965: LD_INT 0
42967: PPUSH
42968: LD_INT 1
42970: PPUSH
42971: LD_INT 0
42973: PPUSH
42974: CALL_OW 587
// end ;
42978: LD_VAR 0 3
42982: RET
