// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1705 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnitForce ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1705 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnitForce ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1705 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnitForce ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1705 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1705 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnitForce ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1705 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnitForce ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1705 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnitForce ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1705 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnitForce ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1705 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnitForce ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1705 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnitForce ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1705 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnitForce ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1705 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnitForce ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1705 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un , p ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
 635: PPUSH
// music_nat := 2 ;
 636: LD_ADDR_OWVAR 71
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// Video ( true ) ;
 644: LD_INT 1
 646: PPUSH
 647: CALL 39388 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 51
 658: PPUSH
 659: LD_INT 23
 661: PPUSH
 662: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 666: LD_OWVAR 3
 670: PUSH
 671: LD_EXP 3
 675: DIFF
 676: PPUSH
 677: LD_INT 53
 679: PPUSH
 680: LD_INT 27
 682: PPUSH
 683: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 687: LD_INT 52
 689: PPUSH
 690: LD_INT 25
 692: PPUSH
 693: CALL_OW 86
// wait ( 0 0$2 ) ;
 697: LD_INT 70
 699: PPUSH
 700: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 704: LD_INT 35
 706: PPUSH
 707: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 711: LD_EXP 3
 715: PPUSH
 716: LD_INT 51
 718: PPUSH
 719: LD_INT 23
 721: PPUSH
 722: CALL_OW 307
 726: PUSH
 727: LD_EXP 3
 731: PPUSH
 732: CALL_OW 314
 736: NOT
 737: OR
 738: IFFALSE 704
// ComTurnXY ( Heike , 53 , 26 ) ;
 740: LD_EXP 3
 744: PPUSH
 745: LD_INT 53
 747: PPUSH
 748: LD_INT 26
 750: PPUSH
 751: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 755: LD_INT 10
 757: PPUSH
 758: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_STRING DH-Intro-1
 769: PPUSH
 770: CALL_OW 88
// ComHold ( all_units ) ;
 774: LD_OWVAR 3
 778: PPUSH
 779: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 783: LD_OWVAR 3
 787: PUSH
 788: LD_EXP 3
 792: DIFF
 793: PPUSH
 794: LD_EXP 3
 798: PPUSH
 799: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 803: LD_EXP 17
 807: PUSH
 808: LD_STRING 08_DealWithDoug
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 30
 818: AND
 819: IFFALSE 931
// begin ComTurnUnit ( Heike , Doug ) ;
 821: LD_EXP 3
 825: PPUSH
 826: LD_EXP 17
 830: PPUSH
 831: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 835: LD_EXP 17
 839: PPUSH
 840: LD_STRING DCa-Intro-a-2
 842: PPUSH
 843: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 847: LD_EXP 3
 851: PPUSH
 852: LD_STRING DH-Intro-a-3
 854: PPUSH
 855: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 859: LD_EXP 17
 863: PPUSH
 864: LD_STRING DCa-Intro-a-4
 866: PPUSH
 867: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 871: LD_EXP 3
 875: PPUSH
 876: LD_STRING DH-Intro-a-5
 878: PPUSH
 879: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 883: LD_EXP 17
 887: PPUSH
 888: LD_STRING DCa-Intro-a-6
 890: PPUSH
 891: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 895: LD_EXP 16
 899: PUSH
 900: LD_EXP 17
 904: ADD
 905: PUSH
 906: LD_EXP 15
 910: ADD
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 7
 917: PPUSH
 918: CALL_OW 111
// wait ( 0 0$01 ) ;
 922: LD_INT 35
 924: PPUSH
 925: CALL_OW 67
// end else
 929: GO 1033
// if Harris then
 931: LD_EXP 16
 935: IFFALSE 1033
// begin ComTurnUnit ( Heike , Harris ) ;
 937: LD_EXP 3
 941: PPUSH
 942: LD_EXP 16
 946: PPUSH
 947: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 951: LD_EXP 16
 955: PPUSH
 956: LD_STRING DJ-Intro-2
 958: PPUSH
 959: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 963: LD_EXP 3
 967: PPUSH
 968: LD_STRING DH-Intro-3
 970: PPUSH
 971: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 975: LD_EXP 3
 979: PPUSH
 980: LD_STRING DH-Intro-4
 982: PPUSH
 983: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 987: LD_EXP 16
 991: PPUSH
 992: LD_STRING DJ-Intro-5
 994: PPUSH
 995: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 999: LD_EXP 16
1003: PUSH
1004: LD_EXP 17
1008: ADD
1009: PUSH
1010: LD_EXP 15
1014: ADD
1015: PPUSH
1016: LD_INT 5
1018: PPUSH
1019: LD_INT 7
1021: PPUSH
1022: CALL_OW 111
// wait ( 0 0$01 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// end ; if Givi then
1033: LD_EXP 4
1037: IFFALSE 1165
// begin ComMoveUnit ( Givi , Heike ) ;
1039: LD_EXP 4
1043: PPUSH
1044: LD_EXP 3
1048: PPUSH
1049: CALL_OW 112
// p := 0 ;
1053: LD_ADDR_VAR 0 4
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1061: LD_INT 35
1063: PPUSH
1064: CALL_OW 67
// p := Inc ( p ) ;
1068: LD_ADDR_VAR 0 4
1072: PUSH
1073: LD_VAR 0 4
1077: PPUSH
1078: CALL 40777 0 1
1082: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) or p > 8 ;
1083: LD_EXP 3
1087: PPUSH
1088: LD_EXP 4
1092: PPUSH
1093: CALL_OW 296
1097: PUSH
1098: LD_INT 4
1100: LESS
1101: PUSH
1102: LD_EXP 4
1106: PPUSH
1107: CALL_OW 314
1111: NOT
1112: OR
1113: PUSH
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 8
1121: GREATER
1122: OR
1123: IFFALSE 1061
// ComTurnUnit ( Givi , Heike ) ;
1125: LD_EXP 4
1129: PPUSH
1130: LD_EXP 3
1134: PPUSH
1135: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1139: LD_EXP 3
1143: PPUSH
1144: LD_EXP 4
1148: PPUSH
1149: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1153: LD_EXP 4
1157: PPUSH
1158: LD_STRING DG-Intro-7
1160: PPUSH
1161: CALL_OW 88
// end ; if not Givi then
1165: LD_EXP 4
1169: NOT
1170: IFFALSE 1187
// ComTurnXY ( Heike , 52 , 25 ) ;
1172: LD_EXP 3
1176: PPUSH
1177: LD_INT 52
1179: PPUSH
1180: LD_INT 25
1182: PPUSH
1183: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1187: LD_EXP 3
1191: PPUSH
1192: LD_STRING DH-Intro-7
1194: PPUSH
1195: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1199: LD_INT 22
1201: PUSH
1202: LD_INT 2
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PPUSH
1209: CALL_OW 69
1213: PPUSH
1214: LD_INT 48
1216: PPUSH
1217: LD_INT 4
1219: PPUSH
1220: CALL_OW 111
// wait ( 0 0$3 ) ;
1224: LD_INT 105
1226: PPUSH
1227: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1231: LD_INT 74
1233: PPUSH
1234: LD_INT 79
1236: PPUSH
1237: LD_INT 2
1239: PPUSH
1240: LD_INT 16
1242: NEG
1243: PPUSH
1244: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1248: LD_INT 74
1250: PPUSH
1251: LD_INT 79
1253: PPUSH
1254: CALL_OW 84
// uc_side := 3 ;
1258: LD_ADDR_OWVAR 20
1262: PUSH
1263: LD_INT 3
1265: ST_TO_ADDR
// uc_nation := nation_russian ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 3
1273: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1274: LD_INT 22
1276: PPUSH
1277: LD_INT 3
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_INT 43
1285: PPUSH
1286: LD_INT 100
1288: PPUSH
1289: CALL 6545 0 5
// un := CreateVehicle ;
1293: LD_ADDR_VAR 0 3
1297: PUSH
1298: CALL_OW 45
1302: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1303: LD_VAR 0 3
1307: PPUSH
1308: LD_INT 76
1310: PPUSH
1311: LD_INT 87
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1321: LD_INT 0
1323: PPUSH
1324: LD_INT 8
1326: PPUSH
1327: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1331: CALL_OW 44
1335: PPUSH
1336: LD_VAR 0 3
1340: PPUSH
1341: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 67
1352: PPUSH
1353: LD_INT 56
1355: PPUSH
1356: CALL_OW 111
// wait ( 0 0$1 ) ;
1360: LD_INT 35
1362: PPUSH
1363: CALL_OW 67
// for i := 1 to 3 do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: DOUBLE
1373: LD_INT 1
1375: DEC
1376: ST_TO_ADDR
1377: LD_INT 3
1379: PUSH
1380: FOR_TO
1381: IFFALSE 1441
// begin PrepareSoldier ( false , 8 ) ;
1383: LD_INT 0
1385: PPUSH
1386: LD_INT 8
1388: PPUSH
1389: CALL_OW 381
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1403: LD_VAR 0 3
1407: PPUSH
1408: LD_INT 76
1410: PPUSH
1411: LD_INT 87
1413: PPUSH
1414: LD_INT 2
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 67
1431: PPUSH
1432: LD_INT 56
1434: PPUSH
1435: CALL_OW 111
// end ;
1439: GO 1380
1441: POP
1442: POP
// wait ( 0 0$2 ) ;
1443: LD_INT 70
1445: PPUSH
1446: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1450: LD_INT 1
1452: PPUSH
1453: LD_STRING %_cont
1455: PPUSH
1456: CALL_OW 340
// Video ( false ) ;
1460: LD_INT 0
1462: PPUSH
1463: CALL 39388 0 1
// end ;
1467: LD_VAR 0 1
1471: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1472: LD_INT 5
1474: PPUSH
1475: LD_INT 22
1477: PUSH
1478: LD_INT 4
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: PPUSH
1485: CALL_OW 70
1489: IFFALSE 1537
1491: GO 1493
1493: DISABLE
1494: LD_INT 0
1496: PPUSH
// begin enable ;
1497: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1498: LD_ADDR_VAR 0 1
1502: PUSH
1503: LD_INT 5
1505: PPUSH
1506: LD_INT 22
1508: PUSH
1509: LD_INT 4
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 70
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1535
// RemoveUnit ( i ) ;
1524: LD_VAR 0 1
1528: PPUSH
1529: CALL_OW 64
1533: GO 1521
1535: POP
1536: POP
// end ;
1537: PPOPN 1
1539: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1540: LD_INT 6
1542: PPUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PPUSH
1553: CALL_OW 70
1557: IFFALSE 1605
1559: GO 1561
1561: DISABLE
1562: LD_INT 0
1564: PPUSH
// begin enable ;
1565: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1566: LD_ADDR_VAR 0 1
1570: PUSH
1571: LD_INT 6
1573: PPUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 70
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1603
// RemoveUnit ( i ) ;
1592: LD_VAR 0 1
1596: PPUSH
1597: CALL_OW 64
1601: GO 1589
1603: POP
1604: POP
// end ; end_of_file
1605: PPOPN 1
1607: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1608: LD_INT 1
1610: PPUSH
1611: LD_STRING %_cont
1613: PPUSH
1614: CALL_OW 340
// end ; end_of_file
1618: PPOPN 1
1620: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1621: LD_INT 0
1623: PPUSH
1624: PPUSH
// if exist_mode then
1625: LD_VAR 0 2
1629: IFFALSE 1675
// begin unit := CreateCharacter ( prefix & ident ) ;
1631: LD_ADDR_VAR 0 5
1635: PUSH
1636: LD_VAR 0 3
1640: PUSH
1641: LD_VAR 0 1
1645: STR
1646: PPUSH
1647: CALL_OW 34
1651: ST_TO_ADDR
// if unit then
1652: LD_VAR 0 5
1656: IFFALSE 1673
// DeleteCharacters ( prefix & ident ) ;
1658: LD_VAR 0 3
1662: PUSH
1663: LD_VAR 0 1
1667: STR
1668: PPUSH
1669: CALL_OW 40
// end else
1673: GO 1690
// unit := NewCharacter ( ident ) ;
1675: LD_ADDR_VAR 0 5
1679: PUSH
1680: LD_VAR 0 1
1684: PPUSH
1685: CALL_OW 25
1689: ST_TO_ADDR
// result := unit ;
1690: LD_ADDR_VAR 0 4
1694: PUSH
1695: LD_VAR 0 5
1699: ST_TO_ADDR
// end ;
1700: LD_VAR 0 4
1704: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
// if exist_mode then
1709: LD_VAR 0 2
1713: IFFALSE 1738
// unit := CreateCharacter ( prefix & ident ) else
1715: LD_ADDR_VAR 0 5
1719: PUSH
1720: LD_VAR 0 3
1724: PUSH
1725: LD_VAR 0 1
1729: STR
1730: PPUSH
1731: CALL_OW 34
1735: ST_TO_ADDR
1736: GO 1753
// unit := NewCharacter ( ident ) ;
1738: LD_ADDR_VAR 0 5
1742: PUSH
1743: LD_VAR 0 1
1747: PPUSH
1748: CALL_OW 25
1752: ST_TO_ADDR
// result := unit ;
1753: LD_ADDR_VAR 0 4
1757: PUSH
1758: LD_VAR 0 5
1762: ST_TO_ADDR
// end ;
1763: LD_VAR 0 4
1767: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
// if not side or not nation then
1772: LD_VAR 0 1
1776: NOT
1777: PUSH
1778: LD_VAR 0 2
1782: NOT
1783: OR
1784: IFFALSE 1788
// exit ;
1786: GO 2556
// case nation of nation_american :
1788: LD_VAR 0 2
1792: PUSH
1793: LD_INT 1
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 2015
1801: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: LD_INT 35
1809: PUSH
1810: LD_INT 45
1812: PUSH
1813: LD_INT 46
1815: PUSH
1816: LD_INT 47
1818: PUSH
1819: LD_INT 82
1821: PUSH
1822: LD_INT 83
1824: PUSH
1825: LD_INT 84
1827: PUSH
1828: LD_INT 85
1830: PUSH
1831: LD_INT 86
1833: PUSH
1834: LD_INT 1
1836: PUSH
1837: LD_INT 2
1839: PUSH
1840: LD_INT 6
1842: PUSH
1843: LD_INT 15
1845: PUSH
1846: LD_INT 16
1848: PUSH
1849: LD_INT 7
1851: PUSH
1852: LD_INT 12
1854: PUSH
1855: LD_INT 13
1857: PUSH
1858: LD_INT 10
1860: PUSH
1861: LD_INT 14
1863: PUSH
1864: LD_INT 20
1866: PUSH
1867: LD_INT 21
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 25
1875: PUSH
1876: LD_INT 32
1878: PUSH
1879: LD_INT 27
1881: PUSH
1882: LD_INT 36
1884: PUSH
1885: LD_INT 69
1887: PUSH
1888: LD_INT 39
1890: PUSH
1891: LD_INT 34
1893: PUSH
1894: LD_INT 40
1896: PUSH
1897: LD_INT 48
1899: PUSH
1900: LD_INT 49
1902: PUSH
1903: LD_INT 50
1905: PUSH
1906: LD_INT 51
1908: PUSH
1909: LD_INT 52
1911: PUSH
1912: LD_INT 53
1914: PUSH
1915: LD_INT 54
1917: PUSH
1918: LD_INT 55
1920: PUSH
1921: LD_INT 56
1923: PUSH
1924: LD_INT 57
1926: PUSH
1927: LD_INT 58
1929: PUSH
1930: LD_INT 59
1932: PUSH
1933: LD_INT 60
1935: PUSH
1936: LD_INT 61
1938: PUSH
1939: LD_INT 62
1941: PUSH
1942: LD_INT 80
1944: PUSH
1945: LD_INT 82
1947: PUSH
1948: LD_INT 83
1950: PUSH
1951: LD_INT 84
1953: PUSH
1954: LD_INT 85
1956: PUSH
1957: LD_INT 86
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: ST_TO_ADDR
2013: GO 2480
2015: LD_INT 2
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2249
2023: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2024: LD_ADDR_VAR 0 4
2028: PUSH
2029: LD_INT 35
2031: PUSH
2032: LD_INT 45
2034: PUSH
2035: LD_INT 46
2037: PUSH
2038: LD_INT 47
2040: PUSH
2041: LD_INT 82
2043: PUSH
2044: LD_INT 83
2046: PUSH
2047: LD_INT 84
2049: PUSH
2050: LD_INT 85
2052: PUSH
2053: LD_INT 87
2055: PUSH
2056: LD_INT 70
2058: PUSH
2059: LD_INT 1
2061: PUSH
2062: LD_INT 11
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: LD_INT 4
2070: PUSH
2071: LD_INT 5
2073: PUSH
2074: LD_INT 6
2076: PUSH
2077: LD_INT 15
2079: PUSH
2080: LD_INT 18
2082: PUSH
2083: LD_INT 7
2085: PUSH
2086: LD_INT 17
2088: PUSH
2089: LD_INT 8
2091: PUSH
2092: LD_INT 20
2094: PUSH
2095: LD_INT 21
2097: PUSH
2098: LD_INT 22
2100: PUSH
2101: LD_INT 72
2103: PUSH
2104: LD_INT 26
2106: PUSH
2107: LD_INT 69
2109: PUSH
2110: LD_INT 39
2112: PUSH
2113: LD_INT 40
2115: PUSH
2116: LD_INT 41
2118: PUSH
2119: LD_INT 42
2121: PUSH
2122: LD_INT 43
2124: PUSH
2125: LD_INT 48
2127: PUSH
2128: LD_INT 49
2130: PUSH
2131: LD_INT 50
2133: PUSH
2134: LD_INT 51
2136: PUSH
2137: LD_INT 52
2139: PUSH
2140: LD_INT 53
2142: PUSH
2143: LD_INT 54
2145: PUSH
2146: LD_INT 55
2148: PUSH
2149: LD_INT 56
2151: PUSH
2152: LD_INT 60
2154: PUSH
2155: LD_INT 61
2157: PUSH
2158: LD_INT 62
2160: PUSH
2161: LD_INT 66
2163: PUSH
2164: LD_INT 67
2166: PUSH
2167: LD_INT 68
2169: PUSH
2170: LD_INT 81
2172: PUSH
2173: LD_INT 82
2175: PUSH
2176: LD_INT 83
2178: PUSH
2179: LD_INT 84
2181: PUSH
2182: LD_INT 85
2184: PUSH
2185: LD_INT 87
2187: PUSH
2188: LD_INT 88
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: ST_TO_ADDR
2247: GO 2480
2249: LD_INT 3
2251: DOUBLE
2252: EQUAL
2253: IFTRUE 2257
2255: GO 2479
2257: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2258: LD_ADDR_VAR 0 4
2262: PUSH
2263: LD_INT 46
2265: PUSH
2266: LD_INT 47
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: LD_INT 2
2274: PUSH
2275: LD_INT 82
2277: PUSH
2278: LD_INT 83
2280: PUSH
2281: LD_INT 84
2283: PUSH
2284: LD_INT 85
2286: PUSH
2287: LD_INT 86
2289: PUSH
2290: LD_INT 11
2292: PUSH
2293: LD_INT 9
2295: PUSH
2296: LD_INT 20
2298: PUSH
2299: LD_INT 19
2301: PUSH
2302: LD_INT 21
2304: PUSH
2305: LD_INT 24
2307: PUSH
2308: LD_INT 22
2310: PUSH
2311: LD_INT 25
2313: PUSH
2314: LD_INT 28
2316: PUSH
2317: LD_INT 29
2319: PUSH
2320: LD_INT 30
2322: PUSH
2323: LD_INT 31
2325: PUSH
2326: LD_INT 37
2328: PUSH
2329: LD_INT 38
2331: PUSH
2332: LD_INT 32
2334: PUSH
2335: LD_INT 27
2337: PUSH
2338: LD_INT 33
2340: PUSH
2341: LD_INT 69
2343: PUSH
2344: LD_INT 39
2346: PUSH
2347: LD_INT 34
2349: PUSH
2350: LD_INT 40
2352: PUSH
2353: LD_INT 71
2355: PUSH
2356: LD_INT 23
2358: PUSH
2359: LD_INT 44
2361: PUSH
2362: LD_INT 48
2364: PUSH
2365: LD_INT 49
2367: PUSH
2368: LD_INT 50
2370: PUSH
2371: LD_INT 51
2373: PUSH
2374: LD_INT 52
2376: PUSH
2377: LD_INT 53
2379: PUSH
2380: LD_INT 54
2382: PUSH
2383: LD_INT 55
2385: PUSH
2386: LD_INT 56
2388: PUSH
2389: LD_INT 57
2391: PUSH
2392: LD_INT 58
2394: PUSH
2395: LD_INT 59
2397: PUSH
2398: LD_INT 63
2400: PUSH
2401: LD_INT 64
2403: PUSH
2404: LD_INT 65
2406: PUSH
2407: LD_INT 82
2409: PUSH
2410: LD_INT 83
2412: PUSH
2413: LD_INT 84
2415: PUSH
2416: LD_INT 85
2418: PUSH
2419: LD_INT 86
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: ST_TO_ADDR
2477: GO 2480
2479: POP
// if state > - 1 and state < 3 then
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 1
2487: NEG
2488: GREATER
2489: PUSH
2490: LD_VAR 0 3
2494: PUSH
2495: LD_INT 3
2497: LESS
2498: AND
2499: IFFALSE 2556
// for i in result do
2501: LD_ADDR_VAR 0 5
2505: PUSH
2506: LD_VAR 0 4
2510: PUSH
2511: FOR_IN
2512: IFFALSE 2554
// if GetTech ( i , side ) <> state then
2514: LD_VAR 0 5
2518: PPUSH
2519: LD_VAR 0 1
2523: PPUSH
2524: CALL_OW 321
2528: PUSH
2529: LD_VAR 0 3
2533: NONEQUAL
2534: IFFALSE 2552
// result := result diff i ;
2536: LD_ADDR_VAR 0 4
2540: PUSH
2541: LD_VAR 0 4
2545: PUSH
2546: LD_VAR 0 5
2550: DIFF
2551: ST_TO_ADDR
2552: GO 2511
2554: POP
2555: POP
// end ;
2556: LD_VAR 0 4
2560: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2561: LD_INT 0
2563: PPUSH
2564: PPUSH
2565: PPUSH
// result := true ;
2566: LD_ADDR_VAR 0 3
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2574: LD_ADDR_VAR 0 5
2578: PUSH
2579: LD_VAR 0 2
2583: PPUSH
2584: CALL_OW 480
2588: ST_TO_ADDR
// if not tmp then
2589: LD_VAR 0 5
2593: NOT
2594: IFFALSE 2598
// exit ;
2596: GO 2647
// for i in tmp do
2598: LD_ADDR_VAR 0 4
2602: PUSH
2603: LD_VAR 0 5
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2645
// if GetTech ( i , side ) <> state_researched then
2611: LD_VAR 0 4
2615: PPUSH
2616: LD_VAR 0 1
2620: PPUSH
2621: CALL_OW 321
2625: PUSH
2626: LD_INT 2
2628: NONEQUAL
2629: IFFALSE 2643
// begin result := false ;
2631: LD_ADDR_VAR 0 3
2635: PUSH
2636: LD_INT 0
2638: ST_TO_ADDR
// exit ;
2639: POP
2640: POP
2641: GO 2647
// end ;
2643: GO 2608
2645: POP
2646: POP
// end ;
2647: LD_VAR 0 3
2651: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2652: LD_INT 0
2654: PPUSH
2655: PPUSH
2656: PPUSH
2657: PPUSH
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
2663: PPUSH
2664: PPUSH
2665: PPUSH
2666: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2667: LD_VAR 0 1
2671: NOT
2672: PUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 257
2682: PUSH
2683: LD_INT 9
2685: NONEQUAL
2686: OR
2687: IFFALSE 2691
// exit ;
2689: GO 3264
// side := GetSide ( unit ) ;
2691: LD_ADDR_VAR 0 9
2695: PUSH
2696: LD_VAR 0 1
2700: PPUSH
2701: CALL_OW 255
2705: ST_TO_ADDR
// tech_space := tech_spacanom ;
2706: LD_ADDR_VAR 0 12
2710: PUSH
2711: LD_INT 29
2713: ST_TO_ADDR
// tech_time := tech_taurad ;
2714: LD_ADDR_VAR 0 13
2718: PUSH
2719: LD_INT 28
2721: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2722: LD_ADDR_VAR 0 11
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 310
2736: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2737: LD_VAR 0 11
2741: PPUSH
2742: CALL_OW 247
2746: PUSH
2747: LD_INT 2
2749: EQUAL
2750: IFFALSE 2754
// exit ;
2752: GO 3264
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2754: LD_ADDR_VAR 0 8
2758: PUSH
2759: LD_INT 81
2761: PUSH
2762: LD_VAR 0 9
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: ST_TO_ADDR
// if not tmp then
2797: LD_VAR 0 8
2801: NOT
2802: IFFALSE 2806
// exit ;
2804: GO 3264
// if in_unit then
2806: LD_VAR 0 11
2810: IFFALSE 2834
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2812: LD_ADDR_VAR 0 10
2816: PUSH
2817: LD_VAR 0 8
2821: PPUSH
2822: LD_VAR 0 11
2826: PPUSH
2827: CALL_OW 74
2831: ST_TO_ADDR
2832: GO 2854
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2834: LD_ADDR_VAR 0 10
2838: PUSH
2839: LD_VAR 0 8
2843: PPUSH
2844: LD_VAR 0 1
2848: PPUSH
2849: CALL_OW 74
2853: ST_TO_ADDR
// if not enemy then
2854: LD_VAR 0 10
2858: NOT
2859: IFFALSE 2863
// exit ;
2861: GO 3264
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2863: LD_VAR 0 11
2867: PUSH
2868: LD_VAR 0 11
2872: PPUSH
2873: LD_VAR 0 10
2877: PPUSH
2878: CALL_OW 296
2882: PUSH
2883: LD_INT 13
2885: GREATER
2886: AND
2887: PUSH
2888: LD_VAR 0 1
2892: PPUSH
2893: LD_VAR 0 10
2897: PPUSH
2898: CALL_OW 296
2902: PUSH
2903: LD_INT 12
2905: GREATER
2906: OR
2907: IFFALSE 2911
// exit ;
2909: GO 3264
// missile := [ 1 ] ;
2911: LD_ADDR_VAR 0 14
2915: PUSH
2916: LD_INT 1
2918: PUSH
2919: EMPTY
2920: LIST
2921: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2922: LD_VAR 0 9
2926: PPUSH
2927: LD_VAR 0 12
2931: PPUSH
2932: CALL_OW 325
2936: IFFALSE 2965
// missile := Replace ( missile , missile + 1 , 2 ) ;
2938: LD_ADDR_VAR 0 14
2942: PUSH
2943: LD_VAR 0 14
2947: PPUSH
2948: LD_VAR 0 14
2952: PUSH
2953: LD_INT 1
2955: PLUS
2956: PPUSH
2957: LD_INT 2
2959: PPUSH
2960: CALL_OW 1
2964: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2965: LD_VAR 0 9
2969: PPUSH
2970: LD_VAR 0 13
2974: PPUSH
2975: CALL_OW 325
2979: PUSH
2980: LD_VAR 0 10
2984: PPUSH
2985: CALL_OW 255
2989: PPUSH
2990: LD_VAR 0 13
2994: PPUSH
2995: CALL_OW 325
2999: NOT
3000: AND
3001: IFFALSE 3030
// missile := Replace ( missile , missile + 1 , 3 ) ;
3003: LD_ADDR_VAR 0 14
3007: PUSH
3008: LD_VAR 0 14
3012: PPUSH
3013: LD_VAR 0 14
3017: PUSH
3018: LD_INT 1
3020: PLUS
3021: PPUSH
3022: LD_INT 3
3024: PPUSH
3025: CALL_OW 1
3029: ST_TO_ADDR
// if missile < 2 then
3030: LD_VAR 0 14
3034: PUSH
3035: LD_INT 2
3037: LESS
3038: IFFALSE 3042
// exit ;
3040: GO 3264
// x := GetX ( enemy ) ;
3042: LD_ADDR_VAR 0 4
3046: PUSH
3047: LD_VAR 0 10
3051: PPUSH
3052: CALL_OW 250
3056: ST_TO_ADDR
// y := GetY ( enemy ) ;
3057: LD_ADDR_VAR 0 5
3061: PUSH
3062: LD_VAR 0 10
3066: PPUSH
3067: CALL_OW 251
3071: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3072: LD_ADDR_VAR 0 6
3076: PUSH
3077: LD_VAR 0 4
3081: PUSH
3082: LD_INT 1
3084: NEG
3085: PPUSH
3086: LD_INT 1
3088: PPUSH
3089: CALL_OW 12
3093: PLUS
3094: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3095: LD_ADDR_VAR 0 7
3099: PUSH
3100: LD_VAR 0 5
3104: PUSH
3105: LD_INT 1
3107: NEG
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: CALL_OW 12
3116: PLUS
3117: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3118: LD_VAR 0 6
3122: PPUSH
3123: LD_VAR 0 7
3127: PPUSH
3128: CALL_OW 488
3132: NOT
3133: IFFALSE 3155
// begin _x := x ;
3135: LD_ADDR_VAR 0 6
3139: PUSH
3140: LD_VAR 0 4
3144: ST_TO_ADDR
// _y := y ;
3145: LD_ADDR_VAR 0 7
3149: PUSH
3150: LD_VAR 0 5
3154: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3155: LD_ADDR_VAR 0 3
3159: PUSH
3160: LD_INT 1
3162: PPUSH
3163: LD_VAR 0 14
3167: PPUSH
3168: CALL_OW 12
3172: ST_TO_ADDR
// case i of 1 :
3173: LD_VAR 0 3
3177: PUSH
3178: LD_INT 1
3180: DOUBLE
3181: EQUAL
3182: IFTRUE 3186
3184: GO 3203
3186: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3187: LD_VAR 0 1
3191: PPUSH
3192: LD_VAR 0 10
3196: PPUSH
3197: CALL_OW 115
3201: GO 3264
3203: LD_INT 2
3205: DOUBLE
3206: EQUAL
3207: IFTRUE 3211
3209: GO 3233
3211: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3212: LD_VAR 0 1
3216: PPUSH
3217: LD_VAR 0 6
3221: PPUSH
3222: LD_VAR 0 7
3226: PPUSH
3227: CALL_OW 153
3231: GO 3264
3233: LD_INT 3
3235: DOUBLE
3236: EQUAL
3237: IFTRUE 3241
3239: GO 3263
3241: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3242: LD_VAR 0 1
3246: PPUSH
3247: LD_VAR 0 6
3251: PPUSH
3252: LD_VAR 0 7
3256: PPUSH
3257: CALL_OW 154
3261: GO 3264
3263: POP
// end ;
3264: LD_VAR 0 2
3268: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3269: LD_INT 0
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
3275: PPUSH
3276: PPUSH
// if not unit or not building then
3277: LD_VAR 0 1
3281: NOT
3282: PUSH
3283: LD_VAR 0 2
3287: NOT
3288: OR
3289: IFFALSE 3293
// exit ;
3291: GO 3451
// x := GetX ( building ) ;
3293: LD_ADDR_VAR 0 5
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: CALL_OW 250
3307: ST_TO_ADDR
// y := GetY ( building ) ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: LD_VAR 0 2
3317: PPUSH
3318: CALL_OW 251
3322: ST_TO_ADDR
// for i = 0 to 5 do
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: DOUBLE
3329: LD_INT 0
3331: DEC
3332: ST_TO_ADDR
3333: LD_INT 5
3335: PUSH
3336: FOR_TO
3337: IFFALSE 3449
// begin _x := ShiftX ( x , i , 3 ) ;
3339: LD_ADDR_VAR 0 7
3343: PUSH
3344: LD_VAR 0 5
3348: PPUSH
3349: LD_VAR 0 4
3353: PPUSH
3354: LD_INT 3
3356: PPUSH
3357: CALL_OW 272
3361: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3362: LD_ADDR_VAR 0 8
3366: PUSH
3367: LD_VAR 0 6
3371: PPUSH
3372: LD_VAR 0 4
3376: PPUSH
3377: LD_INT 3
3379: PPUSH
3380: CALL_OW 273
3384: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3385: LD_VAR 0 7
3389: PPUSH
3390: LD_VAR 0 8
3394: PPUSH
3395: CALL_OW 488
3399: NOT
3400: IFFALSE 3404
// continue ;
3402: GO 3336
// if HexInfo ( _x , _y ) = 0 then
3404: LD_VAR 0 7
3408: PPUSH
3409: LD_VAR 0 8
3413: PPUSH
3414: CALL_OW 428
3418: PUSH
3419: LD_INT 0
3421: EQUAL
3422: IFFALSE 3447
// begin ComMoveXY ( unit , _x , _y ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_VAR 0 7
3433: PPUSH
3434: LD_VAR 0 8
3438: PPUSH
3439: CALL_OW 111
// exit ;
3443: POP
3444: POP
3445: GO 3451
// end ; end ;
3447: GO 3336
3449: POP
3450: POP
// end ;
3451: LD_VAR 0 3
3455: RET
// export function ScanBase ( side , base_area ) ; begin
3456: LD_INT 0
3458: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3459: LD_ADDR_VAR 0 3
3463: PUSH
3464: LD_VAR 0 2
3468: PPUSH
3469: LD_INT 81
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PPUSH
3481: CALL_OW 70
3485: ST_TO_ADDR
// end ;
3486: LD_VAR 0 3
3490: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3491: LD_INT 0
3493: PPUSH
3494: PPUSH
3495: PPUSH
3496: PPUSH
// result := false ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 0
3504: ST_TO_ADDR
// side := GetSide ( unit ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 255
3519: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3520: LD_ADDR_VAR 0 4
3524: PUSH
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 248
3534: ST_TO_ADDR
// case nat of 1 :
3535: LD_VAR 0 4
3539: PUSH
3540: LD_INT 1
3542: DOUBLE
3543: EQUAL
3544: IFTRUE 3548
3546: GO 3559
3548: POP
// tech := tech_lassight ; 2 :
3549: LD_ADDR_VAR 0 5
3553: PUSH
3554: LD_INT 12
3556: ST_TO_ADDR
3557: GO 3598
3559: LD_INT 2
3561: DOUBLE
3562: EQUAL
3563: IFTRUE 3567
3565: GO 3578
3567: POP
// tech := tech_mortar ; 3 :
3568: LD_ADDR_VAR 0 5
3572: PUSH
3573: LD_INT 41
3575: ST_TO_ADDR
3576: GO 3598
3578: LD_INT 3
3580: DOUBLE
3581: EQUAL
3582: IFTRUE 3586
3584: GO 3597
3586: POP
// tech := tech_bazooka ; end ;
3587: LD_ADDR_VAR 0 5
3591: PUSH
3592: LD_INT 44
3594: ST_TO_ADDR
3595: GO 3598
3597: POP
// if Researched ( side , tech ) then
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_VAR 0 5
3607: PPUSH
3608: CALL_OW 325
3612: IFFALSE 3639
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: LD_INT 5
3621: PUSH
3622: LD_INT 8
3624: PUSH
3625: LD_INT 9
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_VAR 0 4
3637: ARRAY
3638: ST_TO_ADDR
// end ;
3639: LD_VAR 0 2
3643: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3644: LD_INT 0
3646: PPUSH
3647: PPUSH
3648: PPUSH
// if not mines then
3649: LD_VAR 0 2
3653: NOT
3654: IFFALSE 3658
// exit ;
3656: GO 3802
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3658: LD_ADDR_VAR 0 5
3662: PUSH
3663: LD_INT 81
3665: PUSH
3666: LD_VAR 0 1
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 21
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PPUSH
3696: CALL_OW 69
3700: ST_TO_ADDR
// for i in mines do
3701: LD_ADDR_VAR 0 4
3705: PUSH
3706: LD_VAR 0 2
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3800
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 4
3727: PUSH
3728: LD_INT 2
3730: ARRAY
3731: PPUSH
3732: CALL_OW 458
3736: NOT
3737: IFFALSE 3741
// continue ;
3739: GO 3711
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3741: LD_VAR 0 4
3745: PUSH
3746: LD_INT 1
3748: ARRAY
3749: PPUSH
3750: LD_VAR 0 4
3754: PUSH
3755: LD_INT 2
3757: ARRAY
3758: PPUSH
3759: CALL_OW 428
3763: PUSH
3764: LD_VAR 0 5
3768: IN
3769: IFFALSE 3798
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3771: LD_VAR 0 4
3775: PUSH
3776: LD_INT 1
3778: ARRAY
3779: PPUSH
3780: LD_VAR 0 4
3784: PUSH
3785: LD_INT 2
3787: ARRAY
3788: PPUSH
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 456
// end ;
3798: GO 3711
3800: POP
3801: POP
// end ;
3802: LD_VAR 0 3
3806: RET
// export function Count ( array ) ; begin
3807: LD_INT 0
3809: PPUSH
// result := array + 0 ;
3810: LD_ADDR_VAR 0 2
3814: PUSH
3815: LD_VAR 0 1
3819: PUSH
3820: LD_INT 0
3822: PLUS
3823: ST_TO_ADDR
// end ;
3824: LD_VAR 0 2
3828: RET
// export function IsEmpty ( building ) ; begin
3829: LD_INT 0
3831: PPUSH
// if not building then
3832: LD_VAR 0 1
3836: NOT
3837: IFFALSE 3841
// exit ;
3839: GO 3884
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3841: LD_ADDR_VAR 0 2
3845: PUSH
3846: LD_VAR 0 1
3850: PUSH
3851: LD_INT 22
3853: PUSH
3854: LD_VAR 0 1
3858: PPUSH
3859: CALL_OW 255
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 58
3870: PUSH
3871: EMPTY
3872: LIST
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PPUSH
3878: CALL_OW 69
3882: IN
3883: ST_TO_ADDR
// end ;
3884: LD_VAR 0 2
3888: RET
// export function IsNotFull ( building ) ; var places ; begin
3889: LD_INT 0
3891: PPUSH
3892: PPUSH
// if not building then
3893: LD_VAR 0 1
3897: NOT
3898: IFFALSE 3902
// exit ;
3900: GO 3930
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3902: LD_ADDR_VAR 0 2
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: LD_INT 3
3914: PUSH
3915: LD_INT 62
3917: PUSH
3918: EMPTY
3919: LIST
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PPUSH
3925: CALL_OW 72
3929: ST_TO_ADDR
// end ;
3930: LD_VAR 0 2
3934: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3935: LD_INT 0
3937: PPUSH
3938: PPUSH
3939: PPUSH
3940: PPUSH
// tmp := [ ] ;
3941: LD_ADDR_VAR 0 3
3945: PUSH
3946: EMPTY
3947: ST_TO_ADDR
// list := [ ] ;
3948: LD_ADDR_VAR 0 5
3952: PUSH
3953: EMPTY
3954: ST_TO_ADDR
// for i = 16 to 25 do
3955: LD_ADDR_VAR 0 4
3959: PUSH
3960: DOUBLE
3961: LD_INT 16
3963: DEC
3964: ST_TO_ADDR
3965: LD_INT 25
3967: PUSH
3968: FOR_TO
3969: IFFALSE 4042
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: LD_VAR 0 3
3980: PUSH
3981: LD_INT 22
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 255
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 91
4000: PUSH
4001: LD_VAR 0 1
4005: PUSH
4006: LD_INT 6
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 30
4016: PUSH
4017: LD_VAR 0 4
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: PUSH
4031: EMPTY
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: ADD
4039: ST_TO_ADDR
4040: GO 3968
4042: POP
4043: POP
// for i = 1 to tmp do
4044: LD_ADDR_VAR 0 4
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_VAR 0 3
4058: PUSH
4059: FOR_TO
4060: IFFALSE 4148
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4062: LD_ADDR_VAR 0 5
4066: PUSH
4067: LD_VAR 0 5
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: ARRAY
4082: PPUSH
4083: CALL_OW 266
4087: PUSH
4088: LD_VAR 0 3
4092: PUSH
4093: LD_VAR 0 4
4097: ARRAY
4098: PPUSH
4099: CALL_OW 250
4103: PUSH
4104: LD_VAR 0 3
4108: PUSH
4109: LD_VAR 0 4
4113: ARRAY
4114: PPUSH
4115: CALL_OW 251
4119: PUSH
4120: LD_VAR 0 3
4124: PUSH
4125: LD_VAR 0 4
4129: ARRAY
4130: PPUSH
4131: CALL_OW 254
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: ADD
4145: ST_TO_ADDR
4146: GO 4059
4148: POP
4149: POP
// result := list ;
4150: LD_ADDR_VAR 0 2
4154: PUSH
4155: LD_VAR 0 5
4159: ST_TO_ADDR
// end ;
4160: LD_VAR 0 2
4164: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
4169: PPUSH
4170: PPUSH
4171: PPUSH
4172: PPUSH
4173: PPUSH
// if not factory then
4174: LD_VAR 0 1
4178: NOT
4179: IFFALSE 4183
// exit ;
4181: GO 4776
// if control = control_apeman then
4183: LD_VAR 0 4
4187: PUSH
4188: LD_INT 5
4190: EQUAL
4191: IFFALSE 4300
// begin tmp := UnitsInside ( factory ) ;
4193: LD_ADDR_VAR 0 8
4197: PUSH
4198: LD_VAR 0 1
4202: PPUSH
4203: CALL_OW 313
4207: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4208: LD_VAR 0 8
4212: PPUSH
4213: LD_INT 25
4215: PUSH
4216: LD_INT 12
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PPUSH
4223: CALL_OW 72
4227: NOT
4228: IFFALSE 4238
// control := control_manual ;
4230: LD_ADDR_VAR 0 4
4234: PUSH
4235: LD_INT 1
4237: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4238: LD_ADDR_VAR 0 8
4242: PUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL 3935 0 1
4252: ST_TO_ADDR
// if tmp then
4253: LD_VAR 0 8
4257: IFFALSE 4300
// begin for i in tmp do
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_VAR 0 8
4268: PUSH
4269: FOR_IN
4270: IFFALSE 4298
// if i [ 1 ] = b_ext_radio then
4272: LD_VAR 0 7
4276: PUSH
4277: LD_INT 1
4279: ARRAY
4280: PUSH
4281: LD_INT 22
4283: EQUAL
4284: IFFALSE 4296
// begin control := control_remote ;
4286: LD_ADDR_VAR 0 4
4290: PUSH
4291: LD_INT 2
4293: ST_TO_ADDR
// break ;
4294: GO 4298
// end ;
4296: GO 4269
4298: POP
4299: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4300: LD_VAR 0 1
4304: PPUSH
4305: LD_VAR 0 2
4309: PPUSH
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: CALL_OW 448
4329: IFFALSE 4364
// begin result := [ chassis , engine , control , weapon ] ;
4331: LD_ADDR_VAR 0 6
4335: PUSH
4336: LD_VAR 0 2
4340: PUSH
4341: LD_VAR 0 3
4345: PUSH
4346: LD_VAR 0 4
4350: PUSH
4351: LD_VAR 0 5
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: ST_TO_ADDR
// exit ;
4362: GO 4776
// end ; _chassis := AvailableChassisList ( factory ) ;
4364: LD_ADDR_VAR 0 9
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 475
4378: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4379: LD_ADDR_VAR 0 11
4383: PUSH
4384: LD_VAR 0 1
4388: PPUSH
4389: CALL_OW 476
4393: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4394: LD_ADDR_VAR 0 12
4398: PUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 477
4408: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4409: LD_ADDR_VAR 0 10
4413: PUSH
4414: LD_VAR 0 1
4418: PPUSH
4419: CALL_OW 478
4423: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4424: LD_VAR 0 9
4428: NOT
4429: PUSH
4430: LD_VAR 0 11
4434: NOT
4435: OR
4436: PUSH
4437: LD_VAR 0 12
4441: NOT
4442: OR
4443: PUSH
4444: LD_VAR 0 10
4448: NOT
4449: OR
4450: IFFALSE 4485
// begin result := [ chassis , engine , control , weapon ] ;
4452: LD_ADDR_VAR 0 6
4456: PUSH
4457: LD_VAR 0 2
4461: PUSH
4462: LD_VAR 0 3
4466: PUSH
4467: LD_VAR 0 4
4471: PUSH
4472: LD_VAR 0 5
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: ST_TO_ADDR
// exit ;
4483: GO 4776
// end ; if not chassis in _chassis then
4485: LD_VAR 0 2
4489: PUSH
4490: LD_VAR 0 9
4494: IN
4495: NOT
4496: IFFALSE 4522
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_VAR 0 9
4507: PUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 9
4515: PPUSH
4516: CALL_OW 12
4520: ARRAY
4521: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4522: LD_VAR 0 2
4526: PPUSH
4527: LD_VAR 0 3
4531: PPUSH
4532: CALL 4781 0 2
4536: NOT
4537: IFFALSE 4596
// repeat engine := _engine [ 1 ] ;
4539: LD_ADDR_VAR 0 3
4543: PUSH
4544: LD_VAR 0 11
4548: PUSH
4549: LD_INT 1
4551: ARRAY
4552: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4553: LD_ADDR_VAR 0 11
4557: PUSH
4558: LD_VAR 0 11
4562: PPUSH
4563: LD_INT 1
4565: PPUSH
4566: CALL_OW 3
4570: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4571: LD_VAR 0 2
4575: PPUSH
4576: LD_VAR 0 3
4580: PPUSH
4581: CALL 4781 0 2
4585: PUSH
4586: LD_VAR 0 11
4590: PUSH
4591: EMPTY
4592: EQUAL
4593: OR
4594: IFFALSE 4539
// if not control in _control then
4596: LD_VAR 0 4
4600: PUSH
4601: LD_VAR 0 12
4605: IN
4606: NOT
4607: IFFALSE 4633
// control := _control [ rand ( 1 , _control ) ] ;
4609: LD_ADDR_VAR 0 4
4613: PUSH
4614: LD_VAR 0 12
4618: PUSH
4619: LD_INT 1
4621: PPUSH
4622: LD_VAR 0 12
4626: PPUSH
4627: CALL_OW 12
4631: ARRAY
4632: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4633: LD_VAR 0 2
4637: PPUSH
4638: LD_VAR 0 5
4642: PPUSH
4643: CALL 5001 0 2
4647: NOT
4648: IFFALSE 4707
// repeat weapon := _weapon [ 1 ] ;
4650: LD_ADDR_VAR 0 5
4654: PUSH
4655: LD_VAR 0 10
4659: PUSH
4660: LD_INT 1
4662: ARRAY
4663: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 10
4673: PPUSH
4674: LD_INT 1
4676: PPUSH
4677: CALL_OW 3
4681: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4682: LD_VAR 0 2
4686: PPUSH
4687: LD_VAR 0 5
4691: PPUSH
4692: CALL 5001 0 2
4696: PUSH
4697: LD_VAR 0 10
4701: PUSH
4702: EMPTY
4703: EQUAL
4704: OR
4705: IFFALSE 4650
// result := [ ] ;
4707: LD_ADDR_VAR 0 6
4711: PUSH
4712: EMPTY
4713: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4714: LD_VAR 0 1
4718: PPUSH
4719: LD_VAR 0 2
4723: PPUSH
4724: LD_VAR 0 3
4728: PPUSH
4729: LD_VAR 0 4
4733: PPUSH
4734: LD_VAR 0 5
4738: PPUSH
4739: CALL_OW 448
4743: IFFALSE 4776
// result := [ chassis , engine , control , weapon ] ;
4745: LD_ADDR_VAR 0 6
4749: PUSH
4750: LD_VAR 0 2
4754: PUSH
4755: LD_VAR 0 3
4759: PUSH
4760: LD_VAR 0 4
4764: PUSH
4765: LD_VAR 0 5
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
// end ;
4776: LD_VAR 0 6
4780: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4781: LD_INT 0
4783: PPUSH
// if not chassis or not engine then
4784: LD_VAR 0 1
4788: NOT
4789: PUSH
4790: LD_VAR 0 2
4794: NOT
4795: OR
4796: IFFALSE 4800
// exit ;
4798: GO 4996
// case engine of engine_solar :
4800: LD_VAR 0 2
4804: PUSH
4805: LD_INT 2
4807: DOUBLE
4808: EQUAL
4809: IFTRUE 4813
4811: GO 4851
4813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_INT 11
4821: PUSH
4822: LD_INT 12
4824: PUSH
4825: LD_INT 13
4827: PUSH
4828: LD_INT 14
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: LD_INT 2
4836: PUSH
4837: LD_INT 3
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 4980
4851: LD_INT 1
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4921
4859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 11
4867: PUSH
4868: LD_INT 12
4870: PUSH
4871: LD_INT 13
4873: PUSH
4874: LD_INT 14
4876: PUSH
4877: LD_INT 1
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: LD_INT 4
4888: PUSH
4889: LD_INT 5
4891: PUSH
4892: LD_INT 21
4894: PUSH
4895: LD_INT 23
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 24
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: ST_TO_ADDR
4919: GO 4980
4921: LD_INT 3
4923: DOUBLE
4924: EQUAL
4925: IFTRUE 4929
4927: GO 4979
4929: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4930: LD_ADDR_VAR 0 3
4934: PUSH
4935: LD_INT 13
4937: PUSH
4938: LD_INT 14
4940: PUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 3
4946: PUSH
4947: LD_INT 4
4949: PUSH
4950: LD_INT 5
4952: PUSH
4953: LD_INT 21
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 23
4961: PUSH
4962: LD_INT 24
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 4980
4979: POP
// result := ( chassis in result ) ;
4980: LD_ADDR_VAR 0 3
4984: PUSH
4985: LD_VAR 0 1
4989: PUSH
4990: LD_VAR 0 3
4994: IN
4995: ST_TO_ADDR
// end ;
4996: LD_VAR 0 3
5000: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5001: LD_INT 0
5003: PPUSH
// if not chassis or not weapon then
5004: LD_VAR 0 1
5008: NOT
5009: PUSH
5010: LD_VAR 0 2
5014: NOT
5015: OR
5016: IFFALSE 5020
// exit ;
5018: GO 6080
// case weapon of us_machine_gun :
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 2
5027: DOUBLE
5028: EQUAL
5029: IFTRUE 5033
5031: GO 5063
5033: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5034: LD_ADDR_VAR 0 3
5038: PUSH
5039: LD_INT 1
5041: PUSH
5042: LD_INT 2
5044: PUSH
5045: LD_INT 3
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 5
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: ST_TO_ADDR
5061: GO 6064
5063: LD_INT 3
5065: DOUBLE
5066: EQUAL
5067: IFTRUE 5071
5069: GO 5101
5071: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5072: LD_ADDR_VAR 0 3
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: LD_INT 3
5085: PUSH
5086: LD_INT 4
5088: PUSH
5089: LD_INT 5
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: ST_TO_ADDR
5099: GO 6064
5101: LD_INT 11
5103: DOUBLE
5104: EQUAL
5105: IFTRUE 5109
5107: GO 5139
5109: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5110: LD_ADDR_VAR 0 3
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: LD_INT 3
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ST_TO_ADDR
5137: GO 6064
5139: LD_INT 4
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5147
5145: GO 5173
5147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_INT 2
5155: PUSH
5156: LD_INT 3
5158: PUSH
5159: LD_INT 4
5161: PUSH
5162: LD_INT 5
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: ST_TO_ADDR
5171: GO 6064
5173: LD_INT 5
5175: DOUBLE
5176: EQUAL
5177: IFTRUE 5181
5179: GO 5207
5181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5182: LD_ADDR_VAR 0 3
5186: PUSH
5187: LD_INT 2
5189: PUSH
5190: LD_INT 3
5192: PUSH
5193: LD_INT 4
5195: PUSH
5196: LD_INT 5
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
5205: GO 6064
5207: LD_INT 9
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5241
5215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: LD_INT 2
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: ST_TO_ADDR
5239: GO 6064
5241: LD_INT 7
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5275
5249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5250: LD_ADDR_VAR 0 3
5254: PUSH
5255: LD_INT 2
5257: PUSH
5258: LD_INT 3
5260: PUSH
5261: LD_INT 4
5263: PUSH
5264: LD_INT 5
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: ST_TO_ADDR
5273: GO 6064
5275: LD_INT 12
5277: DOUBLE
5278: EQUAL
5279: IFTRUE 5283
5281: GO 5309
5283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: LD_INT 2
5291: PUSH
5292: LD_INT 3
5294: PUSH
5295: LD_INT 4
5297: PUSH
5298: LD_INT 5
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: ST_TO_ADDR
5307: GO 6064
5309: LD_INT 13
5311: DOUBLE
5312: EQUAL
5313: IFTRUE 5317
5315: GO 5343
5317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_INT 2
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: LD_INT 4
5331: PUSH
5332: LD_INT 5
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: ST_TO_ADDR
5341: GO 6064
5343: LD_INT 14
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5369
5351: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_INT 4
5359: PUSH
5360: LD_INT 5
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: ST_TO_ADDR
5367: GO 6064
5369: LD_INT 6
5371: DOUBLE
5372: EQUAL
5373: IFTRUE 5377
5375: GO 5395
5377: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: LD_INT 5
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: ST_TO_ADDR
5393: GO 6064
5395: LD_INT 10
5397: DOUBLE
5398: EQUAL
5399: IFTRUE 5403
5401: GO 5421
5403: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_INT 4
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: ST_TO_ADDR
5419: GO 6064
5421: LD_INT 22
5423: DOUBLE
5424: EQUAL
5425: IFTRUE 5429
5427: GO 5455
5429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5430: LD_ADDR_VAR 0 3
5434: PUSH
5435: LD_INT 11
5437: PUSH
5438: LD_INT 12
5440: PUSH
5441: LD_INT 13
5443: PUSH
5444: LD_INT 14
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: ST_TO_ADDR
5453: GO 6064
5455: LD_INT 23
5457: DOUBLE
5458: EQUAL
5459: IFTRUE 5463
5461: GO 5489
5463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5464: LD_ADDR_VAR 0 3
5468: PUSH
5469: LD_INT 11
5471: PUSH
5472: LD_INT 12
5474: PUSH
5475: LD_INT 13
5477: PUSH
5478: LD_INT 14
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: ST_TO_ADDR
5487: GO 6064
5489: LD_INT 24
5491: DOUBLE
5492: EQUAL
5493: IFTRUE 5497
5495: GO 5523
5497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5498: LD_ADDR_VAR 0 3
5502: PUSH
5503: LD_INT 11
5505: PUSH
5506: LD_INT 12
5508: PUSH
5509: LD_INT 13
5511: PUSH
5512: LD_INT 14
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: ST_TO_ADDR
5521: GO 6064
5523: LD_INT 30
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5557
5531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_INT 11
5539: PUSH
5540: LD_INT 12
5542: PUSH
5543: LD_INT 13
5545: PUSH
5546: LD_INT 14
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: ST_TO_ADDR
5555: GO 6064
5557: LD_INT 25
5559: DOUBLE
5560: EQUAL
5561: IFTRUE 5565
5563: GO 5583
5565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5566: LD_ADDR_VAR 0 3
5570: PUSH
5571: LD_INT 13
5573: PUSH
5574: LD_INT 14
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: ST_TO_ADDR
5581: GO 6064
5583: LD_INT 27
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5609
5591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: LD_INT 13
5599: PUSH
5600: LD_INT 14
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: ST_TO_ADDR
5607: GO 6064
5609: LD_INT 92
5611: DOUBLE
5612: EQUAL
5613: IFTRUE 5617
5615: GO 5643
5617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_INT 11
5625: PUSH
5626: LD_INT 12
5628: PUSH
5629: LD_INT 13
5631: PUSH
5632: LD_INT 14
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: ST_TO_ADDR
5641: GO 6064
5643: LD_INT 28
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5651
5649: GO 5669
5651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5652: LD_ADDR_VAR 0 3
5656: PUSH
5657: LD_INT 13
5659: PUSH
5660: LD_INT 14
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: ST_TO_ADDR
5667: GO 6064
5669: LD_INT 29
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5695
5677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: LD_INT 13
5685: PUSH
5686: LD_INT 14
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: ST_TO_ADDR
5693: GO 6064
5695: LD_INT 31
5697: DOUBLE
5698: EQUAL
5699: IFTRUE 5703
5701: GO 5721
5703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5704: LD_ADDR_VAR 0 3
5708: PUSH
5709: LD_INT 13
5711: PUSH
5712: LD_INT 14
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: ST_TO_ADDR
5719: GO 6064
5721: LD_INT 26
5723: DOUBLE
5724: EQUAL
5725: IFTRUE 5729
5727: GO 5747
5729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5730: LD_ADDR_VAR 0 3
5734: PUSH
5735: LD_INT 13
5737: PUSH
5738: LD_INT 14
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: ST_TO_ADDR
5745: GO 6064
5747: LD_INT 42
5749: DOUBLE
5750: EQUAL
5751: IFTRUE 5755
5753: GO 5781
5755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5756: LD_ADDR_VAR 0 3
5760: PUSH
5761: LD_INT 21
5763: PUSH
5764: LD_INT 22
5766: PUSH
5767: LD_INT 23
5769: PUSH
5770: LD_INT 24
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: ST_TO_ADDR
5779: GO 6064
5781: LD_INT 43
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5789
5787: GO 5815
5789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5790: LD_ADDR_VAR 0 3
5794: PUSH
5795: LD_INT 21
5797: PUSH
5798: LD_INT 22
5800: PUSH
5801: LD_INT 23
5803: PUSH
5804: LD_INT 24
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: ST_TO_ADDR
5813: GO 6064
5815: LD_INT 44
5817: DOUBLE
5818: EQUAL
5819: IFTRUE 5823
5821: GO 5849
5823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: LD_INT 21
5831: PUSH
5832: LD_INT 22
5834: PUSH
5835: LD_INT 23
5837: PUSH
5838: LD_INT 24
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: ST_TO_ADDR
5847: GO 6064
5849: LD_INT 45
5851: DOUBLE
5852: EQUAL
5853: IFTRUE 5857
5855: GO 5883
5857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5858: LD_ADDR_VAR 0 3
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 22
5868: PUSH
5869: LD_INT 23
5871: PUSH
5872: LD_INT 24
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: ST_TO_ADDR
5881: GO 6064
5883: LD_INT 49
5885: DOUBLE
5886: EQUAL
5887: IFTRUE 5891
5889: GO 5917
5891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5892: LD_ADDR_VAR 0 3
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 22
5902: PUSH
5903: LD_INT 23
5905: PUSH
5906: LD_INT 24
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: ST_TO_ADDR
5915: GO 6064
5917: LD_INT 51
5919: DOUBLE
5920: EQUAL
5921: IFTRUE 5925
5923: GO 5951
5925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_INT 21
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_INT 23
5939: PUSH
5940: LD_INT 24
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
5949: GO 6064
5951: LD_INT 52
5953: DOUBLE
5954: EQUAL
5955: IFTRUE 5959
5957: GO 5985
5959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5960: LD_ADDR_VAR 0 3
5964: PUSH
5965: LD_INT 21
5967: PUSH
5968: LD_INT 22
5970: PUSH
5971: LD_INT 23
5973: PUSH
5974: LD_INT 24
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: ST_TO_ADDR
5983: GO 6064
5985: LD_INT 53
5987: DOUBLE
5988: EQUAL
5989: IFTRUE 5993
5991: GO 6011
5993: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5994: LD_ADDR_VAR 0 3
5998: PUSH
5999: LD_INT 23
6001: PUSH
6002: LD_INT 24
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: ST_TO_ADDR
6009: GO 6064
6011: LD_INT 46
6013: DOUBLE
6014: EQUAL
6015: IFTRUE 6019
6017: GO 6037
6019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_INT 23
6027: PUSH
6028: LD_INT 24
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: ST_TO_ADDR
6035: GO 6064
6037: LD_INT 47
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6063
6045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6046: LD_ADDR_VAR 0 3
6050: PUSH
6051: LD_INT 23
6053: PUSH
6054: LD_INT 24
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: ST_TO_ADDR
6061: GO 6064
6063: POP
// result := ( chassis in result ) ;
6064: LD_ADDR_VAR 0 3
6068: PUSH
6069: LD_VAR 0 1
6073: PUSH
6074: LD_VAR 0 3
6078: IN
6079: ST_TO_ADDR
// end ;
6080: LD_VAR 0 3
6084: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6085: LD_INT 0
6087: PPUSH
6088: PPUSH
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
6093: PPUSH
// result := array ;
6094: LD_ADDR_VAR 0 5
6098: PUSH
6099: LD_VAR 0 1
6103: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6104: LD_VAR 0 1
6108: NOT
6109: PUSH
6110: LD_VAR 0 2
6114: NOT
6115: OR
6116: PUSH
6117: LD_VAR 0 3
6121: NOT
6122: OR
6123: PUSH
6124: LD_VAR 0 2
6128: PUSH
6129: LD_VAR 0 1
6133: GREATER
6134: OR
6135: PUSH
6136: LD_VAR 0 3
6140: PUSH
6141: LD_VAR 0 1
6145: GREATER
6146: OR
6147: IFFALSE 6151
// exit ;
6149: GO 6447
// if direction then
6151: LD_VAR 0 4
6155: IFFALSE 6219
// begin d := 1 ;
6157: LD_ADDR_VAR 0 9
6161: PUSH
6162: LD_INT 1
6164: ST_TO_ADDR
// if i_from > i_to then
6165: LD_VAR 0 2
6169: PUSH
6170: LD_VAR 0 3
6174: GREATER
6175: IFFALSE 6201
// length := ( array - i_from ) + i_to else
6177: LD_ADDR_VAR 0 11
6181: PUSH
6182: LD_VAR 0 1
6186: PUSH
6187: LD_VAR 0 2
6191: MINUS
6192: PUSH
6193: LD_VAR 0 3
6197: PLUS
6198: ST_TO_ADDR
6199: GO 6217
// length := i_to - i_from ;
6201: LD_ADDR_VAR 0 11
6205: PUSH
6206: LD_VAR 0 3
6210: PUSH
6211: LD_VAR 0 2
6215: MINUS
6216: ST_TO_ADDR
// end else
6217: GO 6280
// begin d := - 1 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 1
6226: NEG
6227: ST_TO_ADDR
// if i_from > i_to then
6228: LD_VAR 0 2
6232: PUSH
6233: LD_VAR 0 3
6237: GREATER
6238: IFFALSE 6258
// length := i_from - i_to else
6240: LD_ADDR_VAR 0 11
6244: PUSH
6245: LD_VAR 0 2
6249: PUSH
6250: LD_VAR 0 3
6254: MINUS
6255: ST_TO_ADDR
6256: GO 6280
// length := ( array - i_to ) + i_from ;
6258: LD_ADDR_VAR 0 11
6262: PUSH
6263: LD_VAR 0 1
6267: PUSH
6268: LD_VAR 0 3
6272: MINUS
6273: PUSH
6274: LD_VAR 0 2
6278: PLUS
6279: ST_TO_ADDR
// end ; if not length then
6280: LD_VAR 0 11
6284: NOT
6285: IFFALSE 6289
// exit ;
6287: GO 6447
// tmp := array ;
6289: LD_ADDR_VAR 0 10
6293: PUSH
6294: LD_VAR 0 1
6298: ST_TO_ADDR
// for i = 1 to length do
6299: LD_ADDR_VAR 0 6
6303: PUSH
6304: DOUBLE
6305: LD_INT 1
6307: DEC
6308: ST_TO_ADDR
6309: LD_VAR 0 11
6313: PUSH
6314: FOR_TO
6315: IFFALSE 6435
// begin for j = 1 to array do
6317: LD_ADDR_VAR 0 7
6321: PUSH
6322: DOUBLE
6323: LD_INT 1
6325: DEC
6326: ST_TO_ADDR
6327: LD_VAR 0 1
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6421
// begin k := j + d ;
6335: LD_ADDR_VAR 0 8
6339: PUSH
6340: LD_VAR 0 7
6344: PUSH
6345: LD_VAR 0 9
6349: PLUS
6350: ST_TO_ADDR
// if k > array then
6351: LD_VAR 0 8
6355: PUSH
6356: LD_VAR 0 1
6360: GREATER
6361: IFFALSE 6371
// k := 1 ;
6363: LD_ADDR_VAR 0 8
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// if not k then
6371: LD_VAR 0 8
6375: NOT
6376: IFFALSE 6388
// k := array ;
6378: LD_ADDR_VAR 0 8
6382: PUSH
6383: LD_VAR 0 1
6387: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6388: LD_ADDR_VAR 0 10
6392: PUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 8
6402: PPUSH
6403: LD_VAR 0 1
6407: PUSH
6408: LD_VAR 0 7
6412: ARRAY
6413: PPUSH
6414: CALL_OW 1
6418: ST_TO_ADDR
// end ;
6419: GO 6332
6421: POP
6422: POP
// array := tmp ;
6423: LD_ADDR_VAR 0 1
6427: PUSH
6428: LD_VAR 0 10
6432: ST_TO_ADDR
// end ;
6433: GO 6314
6435: POP
6436: POP
// result := array ;
6437: LD_ADDR_VAR 0 5
6441: PUSH
6442: LD_VAR 0 1
6446: ST_TO_ADDR
// end ;
6447: LD_VAR 0 5
6451: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
// result := 0 ;
6456: LD_ADDR_VAR 0 3
6460: PUSH
6461: LD_INT 0
6463: ST_TO_ADDR
// if not array or not value in array then
6464: LD_VAR 0 1
6468: NOT
6469: PUSH
6470: LD_VAR 0 2
6474: PUSH
6475: LD_VAR 0 1
6479: IN
6480: NOT
6481: OR
6482: IFFALSE 6486
// exit ;
6484: GO 6540
// for i = 1 to array do
6486: LD_ADDR_VAR 0 4
6490: PUSH
6491: DOUBLE
6492: LD_INT 1
6494: DEC
6495: ST_TO_ADDR
6496: LD_VAR 0 1
6500: PUSH
6501: FOR_TO
6502: IFFALSE 6538
// if value = array [ i ] then
6504: LD_VAR 0 2
6508: PUSH
6509: LD_VAR 0 1
6513: PUSH
6514: LD_VAR 0 4
6518: ARRAY
6519: EQUAL
6520: IFFALSE 6536
// begin result := i ;
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: LD_VAR 0 4
6531: ST_TO_ADDR
// exit ;
6532: POP
6533: POP
6534: GO 6540
// end ;
6536: GO 6501
6538: POP
6539: POP
// end ;
6540: LD_VAR 0 3
6544: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6545: LD_INT 0
6547: PPUSH
// vc_chassis := chassis ;
6548: LD_ADDR_OWVAR 37
6552: PUSH
6553: LD_VAR 0 1
6557: ST_TO_ADDR
// vc_engine := engine ;
6558: LD_ADDR_OWVAR 39
6562: PUSH
6563: LD_VAR 0 2
6567: ST_TO_ADDR
// vc_control := control ;
6568: LD_ADDR_OWVAR 38
6572: PUSH
6573: LD_VAR 0 3
6577: ST_TO_ADDR
// vc_weapon := weapon ;
6578: LD_ADDR_OWVAR 40
6582: PUSH
6583: LD_VAR 0 4
6587: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6588: LD_ADDR_OWVAR 41
6592: PUSH
6593: LD_VAR 0 5
6597: ST_TO_ADDR
// end ;
6598: LD_VAR 0 6
6602: RET
// export function WantPlant ( unit ) ; var task ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
// result := false ;
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 0
6614: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6615: LD_ADDR_VAR 0 3
6619: PUSH
6620: LD_VAR 0 1
6624: PPUSH
6625: CALL_OW 437
6629: ST_TO_ADDR
// if task then
6630: LD_VAR 0 3
6634: IFFALSE 6662
// if task [ 1 ] [ 1 ] = p then
6636: LD_VAR 0 3
6640: PUSH
6641: LD_INT 1
6643: ARRAY
6644: PUSH
6645: LD_INT 1
6647: ARRAY
6648: PUSH
6649: LD_STRING p
6651: EQUAL
6652: IFFALSE 6662
// result := true ;
6654: LD_ADDR_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// end ;
6662: LD_VAR 0 2
6666: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
6671: PPUSH
6672: PPUSH
// if pos < 1 then
6673: LD_VAR 0 2
6677: PUSH
6678: LD_INT 1
6680: LESS
6681: IFFALSE 6685
// exit ;
6683: GO 6988
// if pos = 1 then
6685: LD_VAR 0 2
6689: PUSH
6690: LD_INT 1
6692: EQUAL
6693: IFFALSE 6726
// result := Replace ( arr , pos [ 1 ] , value ) else
6695: LD_ADDR_VAR 0 4
6699: PUSH
6700: LD_VAR 0 1
6704: PPUSH
6705: LD_VAR 0 2
6709: PUSH
6710: LD_INT 1
6712: ARRAY
6713: PPUSH
6714: LD_VAR 0 3
6718: PPUSH
6719: CALL_OW 1
6723: ST_TO_ADDR
6724: GO 6988
// begin tmp := arr ;
6726: LD_ADDR_VAR 0 6
6730: PUSH
6731: LD_VAR 0 1
6735: ST_TO_ADDR
// s_arr := [ tmp ] ;
6736: LD_ADDR_VAR 0 7
6740: PUSH
6741: LD_VAR 0 6
6745: PUSH
6746: EMPTY
6747: LIST
6748: ST_TO_ADDR
// for i = 1 to pos - 1 do
6749: LD_ADDR_VAR 0 5
6753: PUSH
6754: DOUBLE
6755: LD_INT 1
6757: DEC
6758: ST_TO_ADDR
6759: LD_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: MINUS
6767: PUSH
6768: FOR_TO
6769: IFFALSE 6814
// begin tmp := tmp [ pos [ i ] ] ;
6771: LD_ADDR_VAR 0 6
6775: PUSH
6776: LD_VAR 0 6
6780: PUSH
6781: LD_VAR 0 2
6785: PUSH
6786: LD_VAR 0 5
6790: ARRAY
6791: ARRAY
6792: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6793: LD_ADDR_VAR 0 7
6797: PUSH
6798: LD_VAR 0 7
6802: PUSH
6803: LD_VAR 0 6
6807: PUSH
6808: EMPTY
6809: LIST
6810: ADD
6811: ST_TO_ADDR
// end ;
6812: GO 6768
6814: POP
6815: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6816: LD_ADDR_VAR 0 6
6820: PUSH
6821: LD_VAR 0 6
6825: PPUSH
6826: LD_VAR 0 2
6830: PUSH
6831: LD_VAR 0 2
6835: ARRAY
6836: PPUSH
6837: LD_VAR 0 3
6841: PPUSH
6842: CALL_OW 1
6846: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6847: LD_ADDR_VAR 0 7
6851: PUSH
6852: LD_VAR 0 7
6856: PPUSH
6857: LD_VAR 0 7
6861: PPUSH
6862: LD_VAR 0 6
6866: PPUSH
6867: CALL_OW 1
6871: ST_TO_ADDR
// for i = s_arr downto 2 do
6872: LD_ADDR_VAR 0 5
6876: PUSH
6877: DOUBLE
6878: LD_VAR 0 7
6882: INC
6883: ST_TO_ADDR
6884: LD_INT 2
6886: PUSH
6887: FOR_DOWNTO
6888: IFFALSE 6972
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6890: LD_ADDR_VAR 0 6
6894: PUSH
6895: LD_VAR 0 7
6899: PUSH
6900: LD_VAR 0 5
6904: PUSH
6905: LD_INT 1
6907: MINUS
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 2
6914: PUSH
6915: LD_VAR 0 5
6919: PUSH
6920: LD_INT 1
6922: MINUS
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 7
6929: PUSH
6930: LD_VAR 0 5
6934: ARRAY
6935: PPUSH
6936: CALL_OW 1
6940: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6941: LD_ADDR_VAR 0 7
6945: PUSH
6946: LD_VAR 0 7
6950: PPUSH
6951: LD_VAR 0 5
6955: PUSH
6956: LD_INT 1
6958: MINUS
6959: PPUSH
6960: LD_VAR 0 6
6964: PPUSH
6965: CALL_OW 1
6969: ST_TO_ADDR
// end ;
6970: GO 6887
6972: POP
6973: POP
// result := s_arr [ 1 ] ;
6974: LD_ADDR_VAR 0 4
6978: PUSH
6979: LD_VAR 0 7
6983: PUSH
6984: LD_INT 1
6986: ARRAY
6987: ST_TO_ADDR
// end ; end ;
6988: LD_VAR 0 4
6992: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6993: LD_INT 0
6995: PPUSH
6996: PPUSH
// if not list then
6997: LD_VAR 0 1
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7097
// i := list [ pos1 ] ;
7006: LD_ADDR_VAR 0 5
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: LD_VAR 0 2
7020: ARRAY
7021: ST_TO_ADDR
// if not i then
7022: LD_VAR 0 5
7026: NOT
7027: IFFALSE 7031
// exit ;
7029: GO 7097
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7031: LD_ADDR_VAR 0 1
7035: PUSH
7036: LD_VAR 0 1
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: LD_VAR 0 1
7050: PUSH
7051: LD_VAR 0 3
7055: ARRAY
7056: PPUSH
7057: CALL_OW 1
7061: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: LD_VAR 0 1
7071: PPUSH
7072: LD_VAR 0 3
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 1
7086: ST_TO_ADDR
// result := list ;
7087: LD_ADDR_VAR 0 4
7091: PUSH
7092: LD_VAR 0 1
7096: ST_TO_ADDR
// end ;
7097: LD_VAR 0 4
7101: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7102: LD_INT 0
7104: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7105: LD_ADDR_VAR 0 5
7109: PUSH
7110: LD_VAR 0 1
7114: PPUSH
7115: CALL_OW 250
7119: PPUSH
7120: LD_VAR 0 1
7124: PPUSH
7125: CALL_OW 251
7129: PPUSH
7130: LD_VAR 0 2
7134: PPUSH
7135: LD_VAR 0 3
7139: PPUSH
7140: LD_VAR 0 4
7144: PPUSH
7145: CALL 7523 0 5
7149: ST_TO_ADDR
// end ;
7150: LD_VAR 0 5
7154: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7155: LD_INT 0
7157: PPUSH
7158: PPUSH
7159: PPUSH
7160: PPUSH
// if not list or not unit then
7161: LD_VAR 0 2
7165: NOT
7166: PUSH
7167: LD_VAR 0 1
7171: NOT
7172: OR
7173: IFFALSE 7177
// exit ;
7175: GO 7518
// result := [ ] ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: EMPTY
7183: ST_TO_ADDR
// for i in list do
7184: LD_ADDR_VAR 0 6
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: FOR_IN
7195: IFFALSE 7413
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7197: LD_ADDR_VAR 0 8
7201: PUSH
7202: LD_VAR 0 1
7206: PPUSH
7207: LD_VAR 0 6
7211: PUSH
7212: LD_INT 1
7214: ARRAY
7215: PPUSH
7216: LD_VAR 0 6
7220: PUSH
7221: LD_INT 2
7223: ARRAY
7224: PPUSH
7225: CALL_OW 297
7229: ST_TO_ADDR
// if not Count ( result ) then
7230: LD_VAR 0 5
7234: PPUSH
7235: CALL 3807 0 1
7239: NOT
7240: IFFALSE 7273
// begin result := Join ( result , [ i , tmp ] ) ;
7242: LD_ADDR_VAR 0 5
7246: PUSH
7247: LD_VAR 0 5
7251: PPUSH
7252: LD_VAR 0 6
7256: PUSH
7257: LD_VAR 0 8
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PPUSH
7266: CALL 39416 0 2
7270: ST_TO_ADDR
// continue ;
7271: GO 7194
// end ; if result [ result ] [ 2 ] <= tmp then
7273: LD_VAR 0 5
7277: PUSH
7278: LD_VAR 0 5
7282: ARRAY
7283: PUSH
7284: LD_INT 2
7286: ARRAY
7287: PUSH
7288: LD_VAR 0 8
7292: LESSEQUAL
7293: IFFALSE 7326
// result := Join ( result , [ i , tmp ] ) else
7295: LD_ADDR_VAR 0 5
7299: PUSH
7300: LD_VAR 0 5
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_VAR 0 8
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PPUSH
7319: CALL 39416 0 2
7323: ST_TO_ADDR
7324: GO 7411
// begin for j := 1 to Count ( result ) do
7326: LD_ADDR_VAR 0 7
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_VAR 0 5
7340: PPUSH
7341: CALL 3807 0 1
7345: PUSH
7346: FOR_TO
7347: IFFALSE 7409
// begin if tmp < result [ j ] [ 2 ] then
7349: LD_VAR 0 8
7353: PUSH
7354: LD_VAR 0 5
7358: PUSH
7359: LD_VAR 0 7
7363: ARRAY
7364: PUSH
7365: LD_INT 2
7367: ARRAY
7368: LESS
7369: IFFALSE 7407
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7371: LD_ADDR_VAR 0 5
7375: PUSH
7376: LD_VAR 0 5
7380: PPUSH
7381: LD_VAR 0 7
7385: PPUSH
7386: LD_VAR 0 6
7390: PUSH
7391: LD_VAR 0 8
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 2
7404: ST_TO_ADDR
// break ;
7405: GO 7409
// end ; end ;
7407: GO 7346
7409: POP
7410: POP
// end ; end ;
7411: GO 7194
7413: POP
7414: POP
// if result and not asc then
7415: LD_VAR 0 5
7419: PUSH
7420: LD_VAR 0 3
7424: NOT
7425: AND
7426: IFFALSE 7443
// result := ReverseArray ( result ) ;
7428: LD_ADDR_VAR 0 5
7432: PUSH
7433: LD_VAR 0 5
7437: PPUSH
7438: CALL 34683 0 1
7442: ST_TO_ADDR
// tmp := [ ] ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: EMPTY
7449: ST_TO_ADDR
// if mode then
7450: LD_VAR 0 4
7454: IFFALSE 7518
// begin for i := 1 to result do
7456: LD_ADDR_VAR 0 6
7460: PUSH
7461: DOUBLE
7462: LD_INT 1
7464: DEC
7465: ST_TO_ADDR
7466: LD_VAR 0 5
7470: PUSH
7471: FOR_TO
7472: IFFALSE 7506
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7474: LD_ADDR_VAR 0 8
7478: PUSH
7479: LD_VAR 0 8
7483: PPUSH
7484: LD_VAR 0 5
7488: PUSH
7489: LD_VAR 0 6
7493: ARRAY
7494: PUSH
7495: LD_INT 1
7497: ARRAY
7498: PPUSH
7499: CALL 39416 0 2
7503: ST_TO_ADDR
7504: GO 7471
7506: POP
7507: POP
// result := tmp ;
7508: LD_ADDR_VAR 0 5
7512: PUSH
7513: LD_VAR 0 8
7517: ST_TO_ADDR
// end ; end ;
7518: LD_VAR 0 5
7522: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7523: LD_INT 0
7525: PPUSH
7526: PPUSH
7527: PPUSH
7528: PPUSH
// if not list then
7529: LD_VAR 0 3
7533: NOT
7534: IFFALSE 7538
// exit ;
7536: GO 7926
// result := [ ] ;
7538: LD_ADDR_VAR 0 6
7542: PUSH
7543: EMPTY
7544: ST_TO_ADDR
// for i in list do
7545: LD_ADDR_VAR 0 7
7549: PUSH
7550: LD_VAR 0 3
7554: PUSH
7555: FOR_IN
7556: IFFALSE 7758
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7558: LD_ADDR_VAR 0 9
7562: PUSH
7563: LD_VAR 0 7
7567: PPUSH
7568: LD_VAR 0 1
7572: PPUSH
7573: LD_VAR 0 2
7577: PPUSH
7578: CALL_OW 297
7582: ST_TO_ADDR
// if not result then
7583: LD_VAR 0 6
7587: NOT
7588: IFFALSE 7614
// result := [ [ i , tmp ] ] else
7590: LD_ADDR_VAR 0 6
7594: PUSH
7595: LD_VAR 0 7
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: ST_TO_ADDR
7612: GO 7756
// begin if result [ result ] [ 2 ] <= tmp then
7614: LD_VAR 0 6
7618: PUSH
7619: LD_VAR 0 6
7623: ARRAY
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: PUSH
7629: LD_VAR 0 9
7633: LESSEQUAL
7634: IFFALSE 7676
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7636: LD_ADDR_VAR 0 6
7640: PUSH
7641: LD_VAR 0 6
7645: PPUSH
7646: LD_VAR 0 6
7650: PUSH
7651: LD_INT 1
7653: PLUS
7654: PPUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_VAR 0 9
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PPUSH
7669: CALL_OW 2
7673: ST_TO_ADDR
7674: GO 7756
// for j := 1 to result do
7676: LD_ADDR_VAR 0 8
7680: PUSH
7681: DOUBLE
7682: LD_INT 1
7684: DEC
7685: ST_TO_ADDR
7686: LD_VAR 0 6
7690: PUSH
7691: FOR_TO
7692: IFFALSE 7754
// begin if tmp < result [ j ] [ 2 ] then
7694: LD_VAR 0 9
7698: PUSH
7699: LD_VAR 0 6
7703: PUSH
7704: LD_VAR 0 8
7708: ARRAY
7709: PUSH
7710: LD_INT 2
7712: ARRAY
7713: LESS
7714: IFFALSE 7752
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7716: LD_ADDR_VAR 0 6
7720: PUSH
7721: LD_VAR 0 6
7725: PPUSH
7726: LD_VAR 0 8
7730: PPUSH
7731: LD_VAR 0 7
7735: PUSH
7736: LD_VAR 0 9
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PPUSH
7745: CALL_OW 2
7749: ST_TO_ADDR
// break ;
7750: GO 7754
// end ; end ;
7752: GO 7691
7754: POP
7755: POP
// end ; end ;
7756: GO 7555
7758: POP
7759: POP
// if result and not asc then
7760: LD_VAR 0 6
7764: PUSH
7765: LD_VAR 0 4
7769: NOT
7770: AND
7771: IFFALSE 7846
// begin tmp := result ;
7773: LD_ADDR_VAR 0 9
7777: PUSH
7778: LD_VAR 0 6
7782: ST_TO_ADDR
// for i = tmp downto 1 do
7783: LD_ADDR_VAR 0 7
7787: PUSH
7788: DOUBLE
7789: LD_VAR 0 9
7793: INC
7794: ST_TO_ADDR
7795: LD_INT 1
7797: PUSH
7798: FOR_DOWNTO
7799: IFFALSE 7844
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7801: LD_ADDR_VAR 0 6
7805: PUSH
7806: LD_VAR 0 6
7810: PPUSH
7811: LD_VAR 0 9
7815: PUSH
7816: LD_VAR 0 7
7820: MINUS
7821: PUSH
7822: LD_INT 1
7824: PLUS
7825: PPUSH
7826: LD_VAR 0 9
7830: PUSH
7831: LD_VAR 0 7
7835: ARRAY
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
7842: GO 7798
7844: POP
7845: POP
// end ; tmp := [ ] ;
7846: LD_ADDR_VAR 0 9
7850: PUSH
7851: EMPTY
7852: ST_TO_ADDR
// if mode then
7853: LD_VAR 0 5
7857: IFFALSE 7926
// begin for i = 1 to result do
7859: LD_ADDR_VAR 0 7
7863: PUSH
7864: DOUBLE
7865: LD_INT 1
7867: DEC
7868: ST_TO_ADDR
7869: LD_VAR 0 6
7873: PUSH
7874: FOR_TO
7875: IFFALSE 7914
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7877: LD_ADDR_VAR 0 9
7881: PUSH
7882: LD_VAR 0 9
7886: PPUSH
7887: LD_VAR 0 7
7891: PPUSH
7892: LD_VAR 0 6
7896: PUSH
7897: LD_VAR 0 7
7901: ARRAY
7902: PUSH
7903: LD_INT 1
7905: ARRAY
7906: PPUSH
7907: CALL_OW 1
7911: ST_TO_ADDR
7912: GO 7874
7914: POP
7915: POP
// result := tmp ;
7916: LD_ADDR_VAR 0 6
7920: PUSH
7921: LD_VAR 0 9
7925: ST_TO_ADDR
// end ; end ;
7926: LD_VAR 0 6
7930: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7931: LD_INT 0
7933: PPUSH
7934: PPUSH
7935: PPUSH
7936: PPUSH
7937: PPUSH
7938: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7939: LD_ADDR_VAR 0 5
7943: PUSH
7944: LD_INT 0
7946: PUSH
7947: LD_INT 0
7949: PUSH
7950: LD_INT 0
7952: PUSH
7953: EMPTY
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
// if not x or not y then
7961: LD_VAR 0 2
7965: NOT
7966: PUSH
7967: LD_VAR 0 3
7971: NOT
7972: OR
7973: IFFALSE 7977
// exit ;
7975: GO 9627
// if not range then
7977: LD_VAR 0 4
7981: NOT
7982: IFFALSE 7992
// range := 10 ;
7984: LD_ADDR_VAR 0 4
7988: PUSH
7989: LD_INT 10
7991: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7992: LD_ADDR_VAR 0 8
7996: PUSH
7997: LD_INT 81
7999: PUSH
8000: LD_VAR 0 1
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 92
8011: PUSH
8012: LD_VAR 0 2
8016: PUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_VAR 0 4
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 3
8035: PUSH
8036: LD_INT 21
8038: PUSH
8039: LD_INT 3
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: ST_TO_ADDR
// if not tmp then
8060: LD_VAR 0 8
8064: NOT
8065: IFFALSE 8069
// exit ;
8067: GO 9627
// for i in tmp do
8069: LD_ADDR_VAR 0 6
8073: PUSH
8074: LD_VAR 0 8
8078: PUSH
8079: FOR_IN
8080: IFFALSE 9602
// begin points := [ 0 , 0 , 0 ] ;
8082: LD_ADDR_VAR 0 9
8086: PUSH
8087: LD_INT 0
8089: PUSH
8090: LD_INT 0
8092: PUSH
8093: LD_INT 0
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: ST_TO_ADDR
// bpoints := 1 ;
8101: LD_ADDR_VAR 0 10
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8109: LD_VAR 0 6
8113: PPUSH
8114: CALL_OW 247
8118: PUSH
8119: LD_INT 1
8121: DOUBLE
8122: EQUAL
8123: IFTRUE 8127
8125: GO 8705
8127: POP
// begin if GetClass ( i ) = 1 then
8128: LD_VAR 0 6
8132: PPUSH
8133: CALL_OW 257
8137: PUSH
8138: LD_INT 1
8140: EQUAL
8141: IFFALSE 8162
// points := [ 10 , 5 , 3 ] ;
8143: LD_ADDR_VAR 0 9
8147: PUSH
8148: LD_INT 10
8150: PUSH
8151: LD_INT 5
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8162: LD_VAR 0 6
8166: PPUSH
8167: CALL_OW 257
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: IN
8186: IFFALSE 8207
// points := [ 3 , 2 , 1 ] ;
8188: LD_ADDR_VAR 0 9
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8207: LD_VAR 0 6
8211: PPUSH
8212: CALL_OW 257
8216: PUSH
8217: LD_INT 5
8219: EQUAL
8220: IFFALSE 8241
// points := [ 130 , 5 , 2 ] ;
8222: LD_ADDR_VAR 0 9
8226: PUSH
8227: LD_INT 130
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: LD_INT 2
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8241: LD_VAR 0 6
8245: PPUSH
8246: CALL_OW 257
8250: PUSH
8251: LD_INT 8
8253: EQUAL
8254: IFFALSE 8275
// points := [ 35 , 35 , 30 ] ;
8256: LD_ADDR_VAR 0 9
8260: PUSH
8261: LD_INT 35
8263: PUSH
8264: LD_INT 35
8266: PUSH
8267: LD_INT 30
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8275: LD_VAR 0 6
8279: PPUSH
8280: CALL_OW 257
8284: PUSH
8285: LD_INT 9
8287: EQUAL
8288: IFFALSE 8309
// points := [ 20 , 55 , 40 ] ;
8290: LD_ADDR_VAR 0 9
8294: PUSH
8295: LD_INT 20
8297: PUSH
8298: LD_INT 55
8300: PUSH
8301: LD_INT 40
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8309: LD_VAR 0 6
8313: PPUSH
8314: CALL_OW 257
8318: PUSH
8319: LD_INT 12
8321: PUSH
8322: LD_INT 16
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: IN
8329: IFFALSE 8350
// points := [ 5 , 3 , 2 ] ;
8331: LD_ADDR_VAR 0 9
8335: PUSH
8336: LD_INT 5
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8350: LD_VAR 0 6
8354: PPUSH
8355: CALL_OW 257
8359: PUSH
8360: LD_INT 17
8362: EQUAL
8363: IFFALSE 8384
// points := [ 100 , 50 , 75 ] ;
8365: LD_ADDR_VAR 0 9
8369: PUSH
8370: LD_INT 100
8372: PUSH
8373: LD_INT 50
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8384: LD_VAR 0 6
8388: PPUSH
8389: CALL_OW 257
8393: PUSH
8394: LD_INT 15
8396: EQUAL
8397: IFFALSE 8418
// points := [ 10 , 5 , 3 ] ;
8399: LD_ADDR_VAR 0 9
8403: PUSH
8404: LD_INT 10
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8418: LD_VAR 0 6
8422: PPUSH
8423: CALL_OW 257
8427: PUSH
8428: LD_INT 14
8430: EQUAL
8431: IFFALSE 8452
// points := [ 10 , 0 , 0 ] ;
8433: LD_ADDR_VAR 0 9
8437: PUSH
8438: LD_INT 10
8440: PUSH
8441: LD_INT 0
8443: PUSH
8444: LD_INT 0
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8452: LD_VAR 0 6
8456: PPUSH
8457: CALL_OW 257
8461: PUSH
8462: LD_INT 11
8464: EQUAL
8465: IFFALSE 8486
// points := [ 30 , 10 , 5 ] ;
8467: LD_ADDR_VAR 0 9
8471: PUSH
8472: LD_INT 30
8474: PUSH
8475: LD_INT 10
8477: PUSH
8478: LD_INT 5
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8486: LD_VAR 0 1
8490: PPUSH
8491: LD_INT 5
8493: PPUSH
8494: CALL_OW 321
8498: PUSH
8499: LD_INT 2
8501: EQUAL
8502: IFFALSE 8519
// bpoints := bpoints * 1.8 ;
8504: LD_ADDR_VAR 0 10
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: LD_REAL  1.80000000000000E+0000
8517: MUL
8518: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8519: LD_VAR 0 6
8523: PPUSH
8524: CALL_OW 257
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 4
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: IN
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: LD_INT 51
8555: PPUSH
8556: CALL_OW 321
8560: PUSH
8561: LD_INT 2
8563: EQUAL
8564: AND
8565: IFFALSE 8582
// bpoints := bpoints * 1.2 ;
8567: LD_ADDR_VAR 0 10
8571: PUSH
8572: LD_VAR 0 10
8576: PUSH
8577: LD_REAL  1.20000000000000E+0000
8580: MUL
8581: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8582: LD_VAR 0 6
8586: PPUSH
8587: CALL_OW 257
8591: PUSH
8592: LD_INT 5
8594: PUSH
8595: LD_INT 7
8597: PUSH
8598: LD_INT 9
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: IN
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: LD_INT 52
8614: PPUSH
8615: CALL_OW 321
8619: PUSH
8620: LD_INT 2
8622: EQUAL
8623: AND
8624: IFFALSE 8641
// bpoints := bpoints * 1.5 ;
8626: LD_ADDR_VAR 0 10
8630: PUSH
8631: LD_VAR 0 10
8635: PUSH
8636: LD_REAL  1.50000000000000E+0000
8639: MUL
8640: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8641: LD_VAR 0 1
8645: PPUSH
8646: LD_INT 66
8648: PPUSH
8649: CALL_OW 321
8653: PUSH
8654: LD_INT 2
8656: EQUAL
8657: IFFALSE 8674
// bpoints := bpoints * 1.1 ;
8659: LD_ADDR_VAR 0 10
8663: PUSH
8664: LD_VAR 0 10
8668: PUSH
8669: LD_REAL  1.10000000000000E+0000
8672: MUL
8673: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8674: LD_ADDR_VAR 0 10
8678: PUSH
8679: LD_VAR 0 10
8683: PUSH
8684: LD_VAR 0 6
8688: PPUSH
8689: LD_INT 1
8691: PPUSH
8692: CALL_OW 259
8696: PUSH
8697: LD_REAL  1.15000000000000E+0000
8700: MUL
8701: MUL
8702: ST_TO_ADDR
// end ; unit_vehicle :
8703: GO 9531
8705: LD_INT 2
8707: DOUBLE
8708: EQUAL
8709: IFTRUE 8713
8711: GO 9519
8713: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8714: LD_VAR 0 6
8718: PPUSH
8719: CALL_OW 264
8723: PUSH
8724: LD_INT 2
8726: PUSH
8727: LD_INT 42
8729: PUSH
8730: LD_INT 24
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: IN
8738: IFFALSE 8759
// points := [ 25 , 5 , 3 ] ;
8740: LD_ADDR_VAR 0 9
8744: PUSH
8745: LD_INT 25
8747: PUSH
8748: LD_INT 5
8750: PUSH
8751: LD_INT 3
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8759: LD_VAR 0 6
8763: PPUSH
8764: CALL_OW 264
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: LD_INT 43
8774: PUSH
8775: LD_INT 25
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: IN
8783: IFFALSE 8804
// points := [ 40 , 15 , 5 ] ;
8785: LD_ADDR_VAR 0 9
8789: PUSH
8790: LD_INT 40
8792: PUSH
8793: LD_INT 15
8795: PUSH
8796: LD_INT 5
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8804: LD_VAR 0 6
8808: PPUSH
8809: CALL_OW 264
8813: PUSH
8814: LD_INT 3
8816: PUSH
8817: LD_INT 23
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: IN
8824: IFFALSE 8845
// points := [ 7 , 25 , 8 ] ;
8826: LD_ADDR_VAR 0 9
8830: PUSH
8831: LD_INT 7
8833: PUSH
8834: LD_INT 25
8836: PUSH
8837: LD_INT 8
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: LIST
8844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8845: LD_VAR 0 6
8849: PPUSH
8850: CALL_OW 264
8854: PUSH
8855: LD_INT 5
8857: PUSH
8858: LD_INT 27
8860: PUSH
8861: LD_INT 44
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: IN
8869: IFFALSE 8890
// points := [ 14 , 50 , 16 ] ;
8871: LD_ADDR_VAR 0 9
8875: PUSH
8876: LD_INT 14
8878: PUSH
8879: LD_INT 50
8881: PUSH
8882: LD_INT 16
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8890: LD_VAR 0 6
8894: PPUSH
8895: CALL_OW 264
8899: PUSH
8900: LD_INT 6
8902: PUSH
8903: LD_INT 46
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: IN
8910: IFFALSE 8931
// points := [ 32 , 120 , 70 ] ;
8912: LD_ADDR_VAR 0 9
8916: PUSH
8917: LD_INT 32
8919: PUSH
8920: LD_INT 120
8922: PUSH
8923: LD_INT 70
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8931: LD_VAR 0 6
8935: PPUSH
8936: CALL_OW 264
8940: PUSH
8941: LD_INT 7
8943: PUSH
8944: LD_INT 28
8946: PUSH
8947: LD_INT 45
8949: PUSH
8950: LD_INT 92
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: IN
8959: IFFALSE 8980
// points := [ 35 , 20 , 45 ] ;
8961: LD_ADDR_VAR 0 9
8965: PUSH
8966: LD_INT 35
8968: PUSH
8969: LD_INT 20
8971: PUSH
8972: LD_INT 45
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8980: LD_VAR 0 6
8984: PPUSH
8985: CALL_OW 264
8989: PUSH
8990: LD_INT 47
8992: PUSH
8993: EMPTY
8994: LIST
8995: IN
8996: IFFALSE 9017
// points := [ 67 , 45 , 75 ] ;
8998: LD_ADDR_VAR 0 9
9002: PUSH
9003: LD_INT 67
9005: PUSH
9006: LD_INT 45
9008: PUSH
9009: LD_INT 75
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9017: LD_VAR 0 6
9021: PPUSH
9022: CALL_OW 264
9026: PUSH
9027: LD_INT 26
9029: PUSH
9030: EMPTY
9031: LIST
9032: IN
9033: IFFALSE 9054
// points := [ 120 , 30 , 80 ] ;
9035: LD_ADDR_VAR 0 9
9039: PUSH
9040: LD_INT 120
9042: PUSH
9043: LD_INT 30
9045: PUSH
9046: LD_INT 80
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9054: LD_VAR 0 6
9058: PPUSH
9059: CALL_OW 264
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: EMPTY
9068: LIST
9069: IN
9070: IFFALSE 9091
// points := [ 40 , 1 , 1 ] ;
9072: LD_ADDR_VAR 0 9
9076: PUSH
9077: LD_INT 40
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9091: LD_VAR 0 6
9095: PPUSH
9096: CALL_OW 264
9100: PUSH
9101: LD_INT 29
9103: PUSH
9104: EMPTY
9105: LIST
9106: IN
9107: IFFALSE 9128
// points := [ 70 , 200 , 400 ] ;
9109: LD_ADDR_VAR 0 9
9113: PUSH
9114: LD_INT 70
9116: PUSH
9117: LD_INT 200
9119: PUSH
9120: LD_INT 400
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9128: LD_VAR 0 6
9132: PPUSH
9133: CALL_OW 264
9137: PUSH
9138: LD_INT 14
9140: PUSH
9141: LD_INT 53
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: IN
9148: IFFALSE 9169
// points := [ 40 , 10 , 20 ] ;
9150: LD_ADDR_VAR 0 9
9154: PUSH
9155: LD_INT 40
9157: PUSH
9158: LD_INT 10
9160: PUSH
9161: LD_INT 20
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9169: LD_VAR 0 6
9173: PPUSH
9174: CALL_OW 264
9178: PUSH
9179: LD_INT 9
9181: PUSH
9182: EMPTY
9183: LIST
9184: IN
9185: IFFALSE 9206
// points := [ 5 , 70 , 20 ] ;
9187: LD_ADDR_VAR 0 9
9191: PUSH
9192: LD_INT 5
9194: PUSH
9195: LD_INT 70
9197: PUSH
9198: LD_INT 20
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9206: LD_VAR 0 6
9210: PPUSH
9211: CALL_OW 264
9215: PUSH
9216: LD_INT 10
9218: PUSH
9219: EMPTY
9220: LIST
9221: IN
9222: IFFALSE 9243
// points := [ 35 , 110 , 70 ] ;
9224: LD_ADDR_VAR 0 9
9228: PUSH
9229: LD_INT 35
9231: PUSH
9232: LD_INT 110
9234: PUSH
9235: LD_INT 70
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9243: LD_VAR 0 6
9247: PPUSH
9248: CALL_OW 265
9252: PUSH
9253: LD_INT 25
9255: EQUAL
9256: IFFALSE 9277
// points := [ 80 , 65 , 100 ] ;
9258: LD_ADDR_VAR 0 9
9262: PUSH
9263: LD_INT 80
9265: PUSH
9266: LD_INT 65
9268: PUSH
9269: LD_INT 100
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9277: LD_VAR 0 6
9281: PPUSH
9282: CALL_OW 263
9286: PUSH
9287: LD_INT 1
9289: EQUAL
9290: IFFALSE 9325
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9292: LD_ADDR_VAR 0 10
9296: PUSH
9297: LD_VAR 0 10
9301: PUSH
9302: LD_VAR 0 6
9306: PPUSH
9307: CALL_OW 311
9311: PPUSH
9312: LD_INT 3
9314: PPUSH
9315: CALL_OW 259
9319: PUSH
9320: LD_INT 4
9322: MUL
9323: MUL
9324: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9325: LD_VAR 0 6
9329: PPUSH
9330: CALL_OW 263
9334: PUSH
9335: LD_INT 2
9337: EQUAL
9338: IFFALSE 9389
// begin j := IsControledBy ( i ) ;
9340: LD_ADDR_VAR 0 7
9344: PUSH
9345: LD_VAR 0 6
9349: PPUSH
9350: CALL_OW 312
9354: ST_TO_ADDR
// if j then
9355: LD_VAR 0 7
9359: IFFALSE 9389
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9361: LD_ADDR_VAR 0 10
9365: PUSH
9366: LD_VAR 0 10
9370: PUSH
9371: LD_VAR 0 7
9375: PPUSH
9376: LD_INT 3
9378: PPUSH
9379: CALL_OW 259
9383: PUSH
9384: LD_INT 3
9386: MUL
9387: MUL
9388: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9389: LD_VAR 0 6
9393: PPUSH
9394: CALL_OW 264
9398: PUSH
9399: LD_INT 5
9401: PUSH
9402: LD_INT 6
9404: PUSH
9405: LD_INT 46
9407: PUSH
9408: LD_INT 44
9410: PUSH
9411: LD_INT 47
9413: PUSH
9414: LD_INT 45
9416: PUSH
9417: LD_INT 28
9419: PUSH
9420: LD_INT 7
9422: PUSH
9423: LD_INT 27
9425: PUSH
9426: LD_INT 29
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: IN
9441: PUSH
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 52
9449: PPUSH
9450: CALL_OW 321
9454: PUSH
9455: LD_INT 2
9457: EQUAL
9458: AND
9459: IFFALSE 9476
// bpoints := bpoints * 1.2 ;
9461: LD_ADDR_VAR 0 10
9465: PUSH
9466: LD_VAR 0 10
9470: PUSH
9471: LD_REAL  1.20000000000000E+0000
9474: MUL
9475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9476: LD_VAR 0 6
9480: PPUSH
9481: CALL_OW 264
9485: PUSH
9486: LD_INT 6
9488: PUSH
9489: LD_INT 46
9491: PUSH
9492: LD_INT 47
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: IN
9500: IFFALSE 9517
// bpoints := bpoints * 1.2 ;
9502: LD_ADDR_VAR 0 10
9506: PUSH
9507: LD_VAR 0 10
9511: PUSH
9512: LD_REAL  1.20000000000000E+0000
9515: MUL
9516: ST_TO_ADDR
// end ; unit_building :
9517: GO 9531
9519: LD_INT 3
9521: DOUBLE
9522: EQUAL
9523: IFTRUE 9527
9525: GO 9530
9527: POP
// ; end ;
9528: GO 9531
9530: POP
// for j = 1 to 3 do
9531: LD_ADDR_VAR 0 7
9535: PUSH
9536: DOUBLE
9537: LD_INT 1
9539: DEC
9540: ST_TO_ADDR
9541: LD_INT 3
9543: PUSH
9544: FOR_TO
9545: IFFALSE 9598
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9547: LD_ADDR_VAR 0 5
9551: PUSH
9552: LD_VAR 0 5
9556: PPUSH
9557: LD_VAR 0 7
9561: PPUSH
9562: LD_VAR 0 5
9566: PUSH
9567: LD_VAR 0 7
9571: ARRAY
9572: PUSH
9573: LD_VAR 0 9
9577: PUSH
9578: LD_VAR 0 7
9582: ARRAY
9583: PUSH
9584: LD_VAR 0 10
9588: MUL
9589: PLUS
9590: PPUSH
9591: CALL_OW 1
9595: ST_TO_ADDR
9596: GO 9544
9598: POP
9599: POP
// end ;
9600: GO 8079
9602: POP
9603: POP
// result := Replace ( result , 4 , tmp ) ;
9604: LD_ADDR_VAR 0 5
9608: PUSH
9609: LD_VAR 0 5
9613: PPUSH
9614: LD_INT 4
9616: PPUSH
9617: LD_VAR 0 8
9621: PPUSH
9622: CALL_OW 1
9626: ST_TO_ADDR
// end ;
9627: LD_VAR 0 5
9631: RET
// export function DangerAtRange ( unit , range ) ; begin
9632: LD_INT 0
9634: PPUSH
// if not unit then
9635: LD_VAR 0 1
9639: NOT
9640: IFFALSE 9644
// exit ;
9642: GO 9689
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9644: LD_ADDR_VAR 0 3
9648: PUSH
9649: LD_VAR 0 1
9653: PPUSH
9654: CALL_OW 255
9658: PPUSH
9659: LD_VAR 0 1
9663: PPUSH
9664: CALL_OW 250
9668: PPUSH
9669: LD_VAR 0 1
9673: PPUSH
9674: CALL_OW 251
9678: PPUSH
9679: LD_VAR 0 2
9683: PPUSH
9684: CALL 7931 0 4
9688: ST_TO_ADDR
// end ;
9689: LD_VAR 0 3
9693: RET
// export function DangerInArea ( side , area ) ; begin
9694: LD_INT 0
9696: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: LD_VAR 0 2
9706: PPUSH
9707: LD_INT 81
9709: PUSH
9710: LD_VAR 0 1
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PPUSH
9719: CALL_OW 70
9723: ST_TO_ADDR
// end ;
9724: LD_VAR 0 3
9728: RET
// export function IsExtension ( b ) ; begin
9729: LD_INT 0
9731: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9732: LD_ADDR_VAR 0 2
9736: PUSH
9737: LD_VAR 0 1
9741: PUSH
9742: LD_INT 23
9744: PUSH
9745: LD_INT 20
9747: PUSH
9748: LD_INT 22
9750: PUSH
9751: LD_INT 17
9753: PUSH
9754: LD_INT 24
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 19
9762: PUSH
9763: LD_INT 16
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 18
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: IN
9784: ST_TO_ADDR
// end ;
9785: LD_VAR 0 2
9789: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9790: LD_INT 0
9792: PPUSH
9793: PPUSH
9794: PPUSH
// result := [ ] ;
9795: LD_ADDR_VAR 0 4
9799: PUSH
9800: EMPTY
9801: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9802: LD_ADDR_VAR 0 5
9806: PUSH
9807: LD_VAR 0 2
9811: PPUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 3
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PPUSH
9822: CALL_OW 70
9826: ST_TO_ADDR
// if not tmp then
9827: LD_VAR 0 5
9831: NOT
9832: IFFALSE 9836
// exit ;
9834: GO 9900
// if checkLink then
9836: LD_VAR 0 3
9840: IFFALSE 9890
// begin for i in tmp do
9842: LD_ADDR_VAR 0 6
9846: PUSH
9847: LD_VAR 0 5
9851: PUSH
9852: FOR_IN
9853: IFFALSE 9888
// if GetBase ( i ) <> base then
9855: LD_VAR 0 6
9859: PPUSH
9860: CALL_OW 274
9864: PUSH
9865: LD_VAR 0 1
9869: NONEQUAL
9870: IFFALSE 9886
// ComLinkToBase ( base , i ) ;
9872: LD_VAR 0 1
9876: PPUSH
9877: LD_VAR 0 6
9881: PPUSH
9882: CALL_OW 169
9886: GO 9852
9888: POP
9889: POP
// end ; result := tmp ;
9890: LD_ADDR_VAR 0 4
9894: PUSH
9895: LD_VAR 0 5
9899: ST_TO_ADDR
// end ;
9900: LD_VAR 0 4
9904: RET
// export function ComComplete ( units , b ) ; var i ; begin
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// if not units then
9909: LD_VAR 0 1
9913: NOT
9914: IFFALSE 9918
// exit ;
9916: GO 10008
// for i in units do
9918: LD_ADDR_VAR 0 4
9922: PUSH
9923: LD_VAR 0 1
9927: PUSH
9928: FOR_IN
9929: IFFALSE 10006
// if BuildingStatus ( b ) = bs_build then
9931: LD_VAR 0 2
9935: PPUSH
9936: CALL_OW 461
9940: PUSH
9941: LD_INT 1
9943: EQUAL
9944: IFFALSE 10004
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9946: LD_VAR 0 4
9950: PPUSH
9951: LD_STRING h
9953: PUSH
9954: LD_VAR 0 2
9958: PPUSH
9959: CALL_OW 250
9963: PUSH
9964: LD_VAR 0 2
9968: PPUSH
9969: CALL_OW 251
9973: PUSH
9974: LD_VAR 0 2
9978: PUSH
9979: LD_INT 0
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: LD_INT 0
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: PPUSH
10000: CALL_OW 446
10004: GO 9928
10006: POP
10007: POP
// end ;
10008: LD_VAR 0 3
10012: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10021: LD_VAR 0 1
10025: NOT
10026: PUSH
10027: LD_VAR 0 1
10031: PPUSH
10032: CALL_OW 263
10036: PUSH
10037: LD_INT 2
10039: NONEQUAL
10040: OR
10041: IFFALSE 10045
// exit ;
10043: GO 10361
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10045: LD_ADDR_VAR 0 6
10049: PUSH
10050: LD_INT 22
10052: PUSH
10053: LD_VAR 0 1
10057: PPUSH
10058: CALL_OW 255
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 2
10069: PUSH
10070: LD_INT 30
10072: PUSH
10073: LD_INT 36
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 34
10082: PUSH
10083: LD_INT 31
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: ST_TO_ADDR
// if not tmp then
10104: LD_VAR 0 6
10108: NOT
10109: IFFALSE 10113
// exit ;
10111: GO 10361
// result := [ ] ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: EMPTY
10119: ST_TO_ADDR
// for i in tmp do
10120: LD_ADDR_VAR 0 3
10124: PUSH
10125: LD_VAR 0 6
10129: PUSH
10130: FOR_IN
10131: IFFALSE 10202
// begin t := UnitsInside ( i ) ;
10133: LD_ADDR_VAR 0 4
10137: PUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: CALL_OW 313
10147: ST_TO_ADDR
// if t then
10148: LD_VAR 0 4
10152: IFFALSE 10200
// for j in t do
10154: LD_ADDR_VAR 0 7
10158: PUSH
10159: LD_VAR 0 4
10163: PUSH
10164: FOR_IN
10165: IFFALSE 10198
// result := Replace ( result , result + 1 , j ) ;
10167: LD_ADDR_VAR 0 2
10171: PUSH
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_VAR 0 2
10181: PUSH
10182: LD_INT 1
10184: PLUS
10185: PPUSH
10186: LD_VAR 0 7
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
10196: GO 10164
10198: POP
10199: POP
// end ;
10200: GO 10130
10202: POP
10203: POP
// if not result then
10204: LD_VAR 0 2
10208: NOT
10209: IFFALSE 10213
// exit ;
10211: GO 10361
// mech := result [ 1 ] ;
10213: LD_ADDR_VAR 0 5
10217: PUSH
10218: LD_VAR 0 2
10222: PUSH
10223: LD_INT 1
10225: ARRAY
10226: ST_TO_ADDR
// if result > 1 then
10227: LD_VAR 0 2
10231: PUSH
10232: LD_INT 1
10234: GREATER
10235: IFFALSE 10347
// begin for i = 2 to result do
10237: LD_ADDR_VAR 0 3
10241: PUSH
10242: DOUBLE
10243: LD_INT 2
10245: DEC
10246: ST_TO_ADDR
10247: LD_VAR 0 2
10251: PUSH
10252: FOR_TO
10253: IFFALSE 10345
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10255: LD_ADDR_VAR 0 4
10259: PUSH
10260: LD_VAR 0 2
10264: PUSH
10265: LD_VAR 0 3
10269: ARRAY
10270: PPUSH
10271: LD_INT 3
10273: PPUSH
10274: CALL_OW 259
10278: PUSH
10279: LD_VAR 0 2
10283: PUSH
10284: LD_VAR 0 3
10288: ARRAY
10289: PPUSH
10290: CALL_OW 432
10294: MINUS
10295: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10296: LD_VAR 0 4
10300: PUSH
10301: LD_VAR 0 5
10305: PPUSH
10306: LD_INT 3
10308: PPUSH
10309: CALL_OW 259
10313: PUSH
10314: LD_VAR 0 5
10318: PPUSH
10319: CALL_OW 432
10323: MINUS
10324: GREATEREQUAL
10325: IFFALSE 10343
// mech := result [ i ] ;
10327: LD_ADDR_VAR 0 5
10331: PUSH
10332: LD_VAR 0 2
10336: PUSH
10337: LD_VAR 0 3
10341: ARRAY
10342: ST_TO_ADDR
// end ;
10343: GO 10252
10345: POP
10346: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10347: LD_VAR 0 1
10351: PPUSH
10352: LD_VAR 0 5
10356: PPUSH
10357: CALL_OW 135
// end ;
10361: LD_VAR 0 2
10365: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10366: LD_INT 0
10368: PPUSH
10369: PPUSH
10370: PPUSH
10371: PPUSH
10372: PPUSH
10373: PPUSH
10374: PPUSH
10375: PPUSH
10376: PPUSH
10377: PPUSH
10378: PPUSH
10379: PPUSH
10380: PPUSH
// result := [ ] ;
10381: LD_ADDR_VAR 0 7
10385: PUSH
10386: EMPTY
10387: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10388: LD_VAR 0 1
10392: PPUSH
10393: CALL_OW 266
10397: PUSH
10398: LD_INT 0
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: IN
10408: NOT
10409: IFFALSE 10413
// exit ;
10411: GO 12047
// if name then
10413: LD_VAR 0 3
10417: IFFALSE 10433
// SetBName ( base_dep , name ) ;
10419: LD_VAR 0 1
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: CALL_OW 500
// base := GetBase ( base_dep ) ;
10433: LD_ADDR_VAR 0 15
10437: PUSH
10438: LD_VAR 0 1
10442: PPUSH
10443: CALL_OW 274
10447: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10448: LD_ADDR_VAR 0 16
10452: PUSH
10453: LD_VAR 0 1
10457: PPUSH
10458: CALL_OW 255
10462: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10463: LD_ADDR_VAR 0 17
10467: PUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 248
10477: ST_TO_ADDR
// if sources then
10478: LD_VAR 0 5
10482: IFFALSE 10529
// for i = 1 to 3 do
10484: LD_ADDR_VAR 0 8
10488: PUSH
10489: DOUBLE
10490: LD_INT 1
10492: DEC
10493: ST_TO_ADDR
10494: LD_INT 3
10496: PUSH
10497: FOR_TO
10498: IFFALSE 10527
// AddResourceType ( base , i , sources [ i ] ) ;
10500: LD_VAR 0 15
10504: PPUSH
10505: LD_VAR 0 8
10509: PPUSH
10510: LD_VAR 0 5
10514: PUSH
10515: LD_VAR 0 8
10519: ARRAY
10520: PPUSH
10521: CALL_OW 276
10525: GO 10497
10527: POP
10528: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10529: LD_ADDR_VAR 0 18
10533: PUSH
10534: LD_VAR 0 15
10538: PPUSH
10539: LD_VAR 0 2
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL 9790 0 3
10551: ST_TO_ADDR
// InitHc ;
10552: CALL_OW 19
// InitUc ;
10556: CALL_OW 18
// uc_side := side ;
10560: LD_ADDR_OWVAR 20
10564: PUSH
10565: LD_VAR 0 16
10569: ST_TO_ADDR
// uc_nation := nation ;
10570: LD_ADDR_OWVAR 21
10574: PUSH
10575: LD_VAR 0 17
10579: ST_TO_ADDR
// if buildings then
10580: LD_VAR 0 18
10584: IFFALSE 11906
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10586: LD_ADDR_VAR 0 19
10590: PUSH
10591: LD_VAR 0 18
10595: PPUSH
10596: LD_INT 2
10598: PUSH
10599: LD_INT 30
10601: PUSH
10602: LD_INT 29
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 30
10611: PUSH
10612: LD_INT 30
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: PPUSH
10624: CALL_OW 72
10628: ST_TO_ADDR
// if tmp then
10629: LD_VAR 0 19
10633: IFFALSE 10681
// for i in tmp do
10635: LD_ADDR_VAR 0 8
10639: PUSH
10640: LD_VAR 0 19
10644: PUSH
10645: FOR_IN
10646: IFFALSE 10679
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10648: LD_VAR 0 8
10652: PPUSH
10653: CALL_OW 250
10657: PPUSH
10658: LD_VAR 0 8
10662: PPUSH
10663: CALL_OW 251
10667: PPUSH
10668: LD_VAR 0 16
10672: PPUSH
10673: CALL_OW 441
10677: GO 10645
10679: POP
10680: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10681: LD_VAR 0 18
10685: PPUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 30
10691: PUSH
10692: LD_INT 32
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 33
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 72
10718: IFFALSE 10806
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10720: LD_ADDR_VAR 0 8
10724: PUSH
10725: LD_VAR 0 18
10729: PPUSH
10730: LD_INT 2
10732: PUSH
10733: LD_INT 30
10735: PUSH
10736: LD_INT 32
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 30
10745: PUSH
10746: LD_INT 33
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PPUSH
10758: CALL_OW 72
10762: PUSH
10763: FOR_IN
10764: IFFALSE 10804
// begin if not GetBWeapon ( i ) then
10766: LD_VAR 0 8
10770: PPUSH
10771: CALL_OW 269
10775: NOT
10776: IFFALSE 10802
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10778: LD_VAR 0 8
10782: PPUSH
10783: LD_VAR 0 8
10787: PPUSH
10788: LD_VAR 0 2
10792: PPUSH
10793: CALL 12052 0 2
10797: PPUSH
10798: CALL_OW 431
// end ;
10802: GO 10763
10804: POP
10805: POP
// end ; for i = 1 to personel do
10806: LD_ADDR_VAR 0 8
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_VAR 0 6
10820: PUSH
10821: FOR_TO
10822: IFFALSE 11886
// begin if i > 4 then
10824: LD_VAR 0 8
10828: PUSH
10829: LD_INT 4
10831: GREATER
10832: IFFALSE 10836
// break ;
10834: GO 11886
// case i of 1 :
10836: LD_VAR 0 8
10840: PUSH
10841: LD_INT 1
10843: DOUBLE
10844: EQUAL
10845: IFTRUE 10849
10847: GO 10929
10849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10850: LD_ADDR_VAR 0 12
10854: PUSH
10855: LD_VAR 0 18
10859: PPUSH
10860: LD_INT 22
10862: PUSH
10863: LD_VAR 0 16
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: LD_INT 58
10874: PUSH
10875: EMPTY
10876: LIST
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: LD_INT 30
10883: PUSH
10884: LD_INT 32
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 30
10893: PUSH
10894: LD_INT 4
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 30
10903: PUSH
10904: LD_INT 5
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 72
10926: ST_TO_ADDR
10927: GO 11151
10929: LD_INT 2
10931: DOUBLE
10932: EQUAL
10933: IFTRUE 10937
10935: GO 10999
10937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10938: LD_ADDR_VAR 0 12
10942: PUSH
10943: LD_VAR 0 18
10947: PPUSH
10948: LD_INT 22
10950: PUSH
10951: LD_VAR 0 16
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: LD_INT 30
10965: PUSH
10966: LD_INT 0
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 30
10975: PUSH
10976: LD_INT 1
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 72
10996: ST_TO_ADDR
10997: GO 11151
10999: LD_INT 3
11001: DOUBLE
11002: EQUAL
11003: IFTRUE 11007
11005: GO 11069
11007: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11008: LD_ADDR_VAR 0 12
11012: PUSH
11013: LD_VAR 0 18
11017: PPUSH
11018: LD_INT 22
11020: PUSH
11021: LD_VAR 0 16
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 3
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 72
11066: ST_TO_ADDR
11067: GO 11151
11069: LD_INT 4
11071: DOUBLE
11072: EQUAL
11073: IFTRUE 11077
11075: GO 11150
11077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11078: LD_ADDR_VAR 0 12
11082: PUSH
11083: LD_VAR 0 18
11087: PPUSH
11088: LD_INT 22
11090: PUSH
11091: LD_VAR 0 16
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: LD_INT 30
11105: PUSH
11106: LD_INT 6
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 30
11115: PUSH
11116: LD_INT 7
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 30
11125: PUSH
11126: LD_INT 8
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 72
11147: ST_TO_ADDR
11148: GO 11151
11150: POP
// if i = 1 then
11151: LD_VAR 0 8
11155: PUSH
11156: LD_INT 1
11158: EQUAL
11159: IFFALSE 11270
// begin tmp := [ ] ;
11161: LD_ADDR_VAR 0 19
11165: PUSH
11166: EMPTY
11167: ST_TO_ADDR
// for j in f do
11168: LD_ADDR_VAR 0 9
11172: PUSH
11173: LD_VAR 0 12
11177: PUSH
11178: FOR_IN
11179: IFFALSE 11252
// if GetBType ( j ) = b_bunker then
11181: LD_VAR 0 9
11185: PPUSH
11186: CALL_OW 266
11190: PUSH
11191: LD_INT 32
11193: EQUAL
11194: IFFALSE 11221
// tmp := Insert ( tmp , 1 , j ) else
11196: LD_ADDR_VAR 0 19
11200: PUSH
11201: LD_VAR 0 19
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: LD_VAR 0 9
11213: PPUSH
11214: CALL_OW 2
11218: ST_TO_ADDR
11219: GO 11250
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11221: LD_ADDR_VAR 0 19
11225: PUSH
11226: LD_VAR 0 19
11230: PPUSH
11231: LD_VAR 0 19
11235: PUSH
11236: LD_INT 1
11238: PLUS
11239: PPUSH
11240: LD_VAR 0 9
11244: PPUSH
11245: CALL_OW 2
11249: ST_TO_ADDR
11250: GO 11178
11252: POP
11253: POP
// if tmp then
11254: LD_VAR 0 19
11258: IFFALSE 11270
// f := tmp ;
11260: LD_ADDR_VAR 0 12
11264: PUSH
11265: LD_VAR 0 19
11269: ST_TO_ADDR
// end ; x := personel [ i ] ;
11270: LD_ADDR_VAR 0 13
11274: PUSH
11275: LD_VAR 0 6
11279: PUSH
11280: LD_VAR 0 8
11284: ARRAY
11285: ST_TO_ADDR
// if x = - 1 then
11286: LD_VAR 0 13
11290: PUSH
11291: LD_INT 1
11293: NEG
11294: EQUAL
11295: IFFALSE 11504
// begin for j in f do
11297: LD_ADDR_VAR 0 9
11301: PUSH
11302: LD_VAR 0 12
11306: PUSH
11307: FOR_IN
11308: IFFALSE 11500
// repeat InitHc ;
11310: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11314: LD_VAR 0 9
11318: PPUSH
11319: CALL_OW 266
11323: PUSH
11324: LD_INT 5
11326: EQUAL
11327: IFFALSE 11397
// begin if UnitsInside ( j ) < 3 then
11329: LD_VAR 0 9
11333: PPUSH
11334: CALL_OW 313
11338: PUSH
11339: LD_INT 3
11341: LESS
11342: IFFALSE 11378
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11344: LD_INT 0
11346: PPUSH
11347: LD_INT 5
11349: PUSH
11350: LD_INT 8
11352: PUSH
11353: LD_INT 9
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PUSH
11361: LD_VAR 0 17
11365: ARRAY
11366: PPUSH
11367: LD_VAR 0 4
11371: PPUSH
11372: CALL_OW 380
11376: GO 11395
// PrepareHuman ( false , i , skill ) ;
11378: LD_INT 0
11380: PPUSH
11381: LD_VAR 0 8
11385: PPUSH
11386: LD_VAR 0 4
11390: PPUSH
11391: CALL_OW 380
// end else
11395: GO 11414
// PrepareHuman ( false , i , skill ) ;
11397: LD_INT 0
11399: PPUSH
11400: LD_VAR 0 8
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: CALL_OW 380
// un := CreateHuman ;
11414: LD_ADDR_VAR 0 14
11418: PUSH
11419: CALL_OW 44
11423: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11424: LD_ADDR_VAR 0 7
11428: PUSH
11429: LD_VAR 0 7
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: LD_VAR 0 14
11441: PPUSH
11442: CALL_OW 2
11446: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11447: LD_VAR 0 14
11451: PPUSH
11452: LD_VAR 0 9
11456: PPUSH
11457: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11461: LD_VAR 0 9
11465: PPUSH
11466: CALL_OW 313
11470: PUSH
11471: LD_INT 6
11473: EQUAL
11474: PUSH
11475: LD_VAR 0 9
11479: PPUSH
11480: CALL_OW 266
11484: PUSH
11485: LD_INT 32
11487: PUSH
11488: LD_INT 31
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: IN
11495: OR
11496: IFFALSE 11310
11498: GO 11307
11500: POP
11501: POP
// end else
11502: GO 11884
// for j = 1 to x do
11504: LD_ADDR_VAR 0 9
11508: PUSH
11509: DOUBLE
11510: LD_INT 1
11512: DEC
11513: ST_TO_ADDR
11514: LD_VAR 0 13
11518: PUSH
11519: FOR_TO
11520: IFFALSE 11882
// begin InitHc ;
11522: CALL_OW 19
// if not f then
11526: LD_VAR 0 12
11530: NOT
11531: IFFALSE 11620
// begin PrepareHuman ( false , i , skill ) ;
11533: LD_INT 0
11535: PPUSH
11536: LD_VAR 0 8
11540: PPUSH
11541: LD_VAR 0 4
11545: PPUSH
11546: CALL_OW 380
// un := CreateHuman ;
11550: LD_ADDR_VAR 0 14
11554: PUSH
11555: CALL_OW 44
11559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11560: LD_ADDR_VAR 0 7
11564: PUSH
11565: LD_VAR 0 7
11569: PPUSH
11570: LD_INT 1
11572: PPUSH
11573: LD_VAR 0 14
11577: PPUSH
11578: CALL_OW 2
11582: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11583: LD_VAR 0 14
11587: PPUSH
11588: LD_VAR 0 1
11592: PPUSH
11593: CALL_OW 250
11597: PPUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 251
11607: PPUSH
11608: LD_INT 10
11610: PPUSH
11611: LD_INT 0
11613: PPUSH
11614: CALL_OW 50
// continue ;
11618: GO 11519
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11620: LD_VAR 0 12
11624: PUSH
11625: LD_INT 1
11627: ARRAY
11628: PPUSH
11629: CALL_OW 313
11633: PUSH
11634: LD_VAR 0 12
11638: PUSH
11639: LD_INT 1
11641: ARRAY
11642: PPUSH
11643: CALL_OW 266
11647: PUSH
11648: LD_INT 32
11650: PUSH
11651: LD_INT 31
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: IN
11658: AND
11659: PUSH
11660: LD_VAR 0 12
11664: PUSH
11665: LD_INT 1
11667: ARRAY
11668: PPUSH
11669: CALL_OW 313
11673: PUSH
11674: LD_INT 6
11676: EQUAL
11677: OR
11678: IFFALSE 11698
// f := Delete ( f , 1 ) ;
11680: LD_ADDR_VAR 0 12
11684: PUSH
11685: LD_VAR 0 12
11689: PPUSH
11690: LD_INT 1
11692: PPUSH
11693: CALL_OW 3
11697: ST_TO_ADDR
// if not f then
11698: LD_VAR 0 12
11702: NOT
11703: IFFALSE 11721
// begin x := x + 2 ;
11705: LD_ADDR_VAR 0 13
11709: PUSH
11710: LD_VAR 0 13
11714: PUSH
11715: LD_INT 2
11717: PLUS
11718: ST_TO_ADDR
// continue ;
11719: GO 11519
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11721: LD_VAR 0 12
11725: PUSH
11726: LD_INT 1
11728: ARRAY
11729: PPUSH
11730: CALL_OW 266
11734: PUSH
11735: LD_INT 5
11737: EQUAL
11738: IFFALSE 11812
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11740: LD_VAR 0 12
11744: PUSH
11745: LD_INT 1
11747: ARRAY
11748: PPUSH
11749: CALL_OW 313
11753: PUSH
11754: LD_INT 3
11756: LESS
11757: IFFALSE 11793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11759: LD_INT 0
11761: PPUSH
11762: LD_INT 5
11764: PUSH
11765: LD_INT 8
11767: PUSH
11768: LD_INT 9
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: PUSH
11776: LD_VAR 0 17
11780: ARRAY
11781: PPUSH
11782: LD_VAR 0 4
11786: PPUSH
11787: CALL_OW 380
11791: GO 11810
// PrepareHuman ( false , i , skill ) ;
11793: LD_INT 0
11795: PPUSH
11796: LD_VAR 0 8
11800: PPUSH
11801: LD_VAR 0 4
11805: PPUSH
11806: CALL_OW 380
// end else
11810: GO 11829
// PrepareHuman ( false , i , skill ) ;
11812: LD_INT 0
11814: PPUSH
11815: LD_VAR 0 8
11819: PPUSH
11820: LD_VAR 0 4
11824: PPUSH
11825: CALL_OW 380
// un := CreateHuman ;
11829: LD_ADDR_VAR 0 14
11833: PUSH
11834: CALL_OW 44
11838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11839: LD_ADDR_VAR 0 7
11843: PUSH
11844: LD_VAR 0 7
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: LD_VAR 0 14
11856: PPUSH
11857: CALL_OW 2
11861: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11862: LD_VAR 0 14
11866: PPUSH
11867: LD_VAR 0 12
11871: PUSH
11872: LD_INT 1
11874: ARRAY
11875: PPUSH
11876: CALL_OW 52
// end ;
11880: GO 11519
11882: POP
11883: POP
// end ;
11884: GO 10821
11886: POP
11887: POP
// result := result ^ buildings ;
11888: LD_ADDR_VAR 0 7
11892: PUSH
11893: LD_VAR 0 7
11897: PUSH
11898: LD_VAR 0 18
11902: ADD
11903: ST_TO_ADDR
// end else
11904: GO 12047
// begin for i = 1 to personel do
11906: LD_ADDR_VAR 0 8
11910: PUSH
11911: DOUBLE
11912: LD_INT 1
11914: DEC
11915: ST_TO_ADDR
11916: LD_VAR 0 6
11920: PUSH
11921: FOR_TO
11922: IFFALSE 12045
// begin if i > 4 then
11924: LD_VAR 0 8
11928: PUSH
11929: LD_INT 4
11931: GREATER
11932: IFFALSE 11936
// break ;
11934: GO 12045
// x := personel [ i ] ;
11936: LD_ADDR_VAR 0 13
11940: PUSH
11941: LD_VAR 0 6
11945: PUSH
11946: LD_VAR 0 8
11950: ARRAY
11951: ST_TO_ADDR
// if x = - 1 then
11952: LD_VAR 0 13
11956: PUSH
11957: LD_INT 1
11959: NEG
11960: EQUAL
11961: IFFALSE 11965
// continue ;
11963: GO 11921
// PrepareHuman ( false , i , skill ) ;
11965: LD_INT 0
11967: PPUSH
11968: LD_VAR 0 8
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: CALL_OW 380
// un := CreateHuman ;
11982: LD_ADDR_VAR 0 14
11986: PUSH
11987: CALL_OW 44
11991: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11992: LD_VAR 0 14
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 250
12006: PPUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 251
12016: PPUSH
12017: LD_INT 10
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 50
// result := result ^ un ;
12027: LD_ADDR_VAR 0 7
12031: PUSH
12032: LD_VAR 0 7
12036: PUSH
12037: LD_VAR 0 14
12041: ADD
12042: ST_TO_ADDR
// end ;
12043: GO 11921
12045: POP
12046: POP
// end ; end ;
12047: LD_VAR 0 7
12051: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12052: LD_INT 0
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
12058: PPUSH
12059: PPUSH
12060: PPUSH
12061: PPUSH
12062: PPUSH
12063: PPUSH
12064: PPUSH
12065: PPUSH
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
// result := false ;
12070: LD_ADDR_VAR 0 3
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12078: LD_VAR 0 1
12082: NOT
12083: PUSH
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 266
12093: PUSH
12094: LD_INT 32
12096: PUSH
12097: LD_INT 33
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: IN
12104: NOT
12105: OR
12106: IFFALSE 12110
// exit ;
12108: GO 13219
// nat := GetNation ( tower ) ;
12110: LD_ADDR_VAR 0 12
12114: PUSH
12115: LD_VAR 0 1
12119: PPUSH
12120: CALL_OW 248
12124: ST_TO_ADDR
// side := GetSide ( tower ) ;
12125: LD_ADDR_VAR 0 16
12129: PUSH
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL_OW 255
12139: ST_TO_ADDR
// x := GetX ( tower ) ;
12140: LD_ADDR_VAR 0 10
12144: PUSH
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 250
12154: ST_TO_ADDR
// y := GetY ( tower ) ;
12155: LD_ADDR_VAR 0 11
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 251
12169: ST_TO_ADDR
// if not x or not y then
12170: LD_VAR 0 10
12174: NOT
12175: PUSH
12176: LD_VAR 0 11
12180: NOT
12181: OR
12182: IFFALSE 12186
// exit ;
12184: GO 13219
// weapon := 0 ;
12186: LD_ADDR_VAR 0 18
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// fac_list := [ ] ;
12194: LD_ADDR_VAR 0 17
12198: PUSH
12199: EMPTY
12200: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12201: LD_ADDR_VAR 0 6
12205: PUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 274
12215: PPUSH
12216: LD_VAR 0 2
12220: PPUSH
12221: LD_INT 0
12223: PPUSH
12224: CALL 9790 0 3
12228: PPUSH
12229: LD_INT 30
12231: PUSH
12232: LD_INT 3
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 72
12243: ST_TO_ADDR
// if not factories then
12244: LD_VAR 0 6
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 13219
// for i in factories do
12253: LD_ADDR_VAR 0 8
12257: PUSH
12258: LD_VAR 0 6
12262: PUSH
12263: FOR_IN
12264: IFFALSE 12289
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12266: LD_ADDR_VAR 0 17
12270: PUSH
12271: LD_VAR 0 17
12275: PUSH
12276: LD_VAR 0 8
12280: PPUSH
12281: CALL_OW 478
12285: UNION
12286: ST_TO_ADDR
12287: GO 12263
12289: POP
12290: POP
// if not fac_list then
12291: LD_VAR 0 17
12295: NOT
12296: IFFALSE 12300
// exit ;
12298: GO 13219
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12300: LD_ADDR_VAR 0 5
12304: PUSH
12305: LD_INT 4
12307: PUSH
12308: LD_INT 5
12310: PUSH
12311: LD_INT 9
12313: PUSH
12314: LD_INT 10
12316: PUSH
12317: LD_INT 6
12319: PUSH
12320: LD_INT 7
12322: PUSH
12323: LD_INT 11
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 27
12337: PUSH
12338: LD_INT 28
12340: PUSH
12341: LD_INT 26
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 43
12355: PUSH
12356: LD_INT 44
12358: PUSH
12359: LD_INT 46
12361: PUSH
12362: LD_INT 45
12364: PUSH
12365: LD_INT 47
12367: PUSH
12368: LD_INT 49
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_VAR 0 12
12388: ARRAY
12389: ST_TO_ADDR
// list := list isect fac_list ;
12390: LD_ADDR_VAR 0 5
12394: PUSH
12395: LD_VAR 0 5
12399: PUSH
12400: LD_VAR 0 17
12404: ISECT
12405: ST_TO_ADDR
// if not list then
12406: LD_VAR 0 5
12410: NOT
12411: IFFALSE 12415
// exit ;
12413: GO 13219
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12415: LD_VAR 0 12
12419: PUSH
12420: LD_INT 3
12422: EQUAL
12423: PUSH
12424: LD_INT 49
12426: PUSH
12427: LD_VAR 0 5
12431: IN
12432: AND
12433: PUSH
12434: LD_INT 31
12436: PPUSH
12437: LD_VAR 0 16
12441: PPUSH
12442: CALL_OW 321
12446: PUSH
12447: LD_INT 2
12449: EQUAL
12450: AND
12451: IFFALSE 12511
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12453: LD_INT 22
12455: PUSH
12456: LD_VAR 0 16
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 35
12467: PUSH
12468: LD_INT 49
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 91
12477: PUSH
12478: LD_VAR 0 1
12482: PUSH
12483: LD_INT 10
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 69
12500: NOT
12501: IFFALSE 12511
// weapon := ru_time_lapser ;
12503: LD_ADDR_VAR 0 18
12507: PUSH
12508: LD_INT 49
12510: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12511: LD_VAR 0 12
12515: PUSH
12516: LD_INT 1
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: IN
12526: PUSH
12527: LD_INT 11
12529: PUSH
12530: LD_VAR 0 5
12534: IN
12535: PUSH
12536: LD_INT 30
12538: PUSH
12539: LD_VAR 0 5
12543: IN
12544: OR
12545: AND
12546: PUSH
12547: LD_INT 6
12549: PPUSH
12550: LD_VAR 0 16
12554: PPUSH
12555: CALL_OW 321
12559: PUSH
12560: LD_INT 2
12562: EQUAL
12563: AND
12564: IFFALSE 12729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12566: LD_INT 22
12568: PUSH
12569: LD_VAR 0 16
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: LD_INT 35
12583: PUSH
12584: LD_INT 11
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 35
12593: PUSH
12594: LD_INT 30
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 91
12608: PUSH
12609: LD_VAR 0 1
12613: PUSH
12614: LD_INT 18
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 69
12631: NOT
12632: PUSH
12633: LD_INT 22
12635: PUSH
12636: LD_VAR 0 16
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: LD_INT 30
12650: PUSH
12651: LD_INT 32
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 30
12660: PUSH
12661: LD_INT 33
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 91
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 12
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: PUSH
12702: LD_INT 2
12704: GREATER
12705: AND
12706: IFFALSE 12729
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12708: LD_ADDR_VAR 0 18
12712: PUSH
12713: LD_INT 11
12715: PUSH
12716: LD_INT 30
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_VAR 0 12
12727: ARRAY
12728: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12729: LD_VAR 0 18
12733: NOT
12734: PUSH
12735: LD_INT 40
12737: PPUSH
12738: LD_VAR 0 16
12742: PPUSH
12743: CALL_OW 321
12747: PUSH
12748: LD_INT 2
12750: EQUAL
12751: AND
12752: PUSH
12753: LD_INT 7
12755: PUSH
12756: LD_VAR 0 5
12760: IN
12761: PUSH
12762: LD_INT 28
12764: PUSH
12765: LD_VAR 0 5
12769: IN
12770: OR
12771: PUSH
12772: LD_INT 45
12774: PUSH
12775: LD_VAR 0 5
12779: IN
12780: OR
12781: AND
12782: IFFALSE 13036
// begin hex := GetHexInfo ( x , y ) ;
12784: LD_ADDR_VAR 0 4
12788: PUSH
12789: LD_VAR 0 10
12793: PPUSH
12794: LD_VAR 0 11
12798: PPUSH
12799: CALL_OW 546
12803: ST_TO_ADDR
// if hex [ 1 ] then
12804: LD_VAR 0 4
12808: PUSH
12809: LD_INT 1
12811: ARRAY
12812: IFFALSE 12816
// exit ;
12814: GO 13219
// height := hex [ 2 ] ;
12816: LD_ADDR_VAR 0 15
12820: PUSH
12821: LD_VAR 0 4
12825: PUSH
12826: LD_INT 2
12828: ARRAY
12829: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12830: LD_ADDR_VAR 0 14
12834: PUSH
12835: LD_INT 0
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: LD_INT 3
12843: PUSH
12844: LD_INT 5
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: ST_TO_ADDR
// for i in tmp do
12853: LD_ADDR_VAR 0 8
12857: PUSH
12858: LD_VAR 0 14
12862: PUSH
12863: FOR_IN
12864: IFFALSE 13034
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12866: LD_ADDR_VAR 0 9
12870: PUSH
12871: LD_VAR 0 10
12875: PPUSH
12876: LD_VAR 0 8
12880: PPUSH
12881: LD_INT 5
12883: PPUSH
12884: CALL_OW 272
12888: PUSH
12889: LD_VAR 0 11
12893: PPUSH
12894: LD_VAR 0 8
12898: PPUSH
12899: LD_INT 5
12901: PPUSH
12902: CALL_OW 273
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12911: LD_VAR 0 9
12915: PUSH
12916: LD_INT 1
12918: ARRAY
12919: PPUSH
12920: LD_VAR 0 9
12924: PUSH
12925: LD_INT 2
12927: ARRAY
12928: PPUSH
12929: CALL_OW 488
12933: IFFALSE 13032
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12935: LD_ADDR_VAR 0 4
12939: PUSH
12940: LD_VAR 0 9
12944: PUSH
12945: LD_INT 1
12947: ARRAY
12948: PPUSH
12949: LD_VAR 0 9
12953: PUSH
12954: LD_INT 2
12956: ARRAY
12957: PPUSH
12958: CALL_OW 546
12962: ST_TO_ADDR
// if hex [ 1 ] then
12963: LD_VAR 0 4
12967: PUSH
12968: LD_INT 1
12970: ARRAY
12971: IFFALSE 12975
// continue ;
12973: GO 12863
// h := hex [ 2 ] ;
12975: LD_ADDR_VAR 0 13
12979: PUSH
12980: LD_VAR 0 4
12984: PUSH
12985: LD_INT 2
12987: ARRAY
12988: ST_TO_ADDR
// if h + 7 < height then
12989: LD_VAR 0 13
12993: PUSH
12994: LD_INT 7
12996: PLUS
12997: PUSH
12998: LD_VAR 0 15
13002: LESS
13003: IFFALSE 13032
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13005: LD_ADDR_VAR 0 18
13009: PUSH
13010: LD_INT 7
13012: PUSH
13013: LD_INT 28
13015: PUSH
13016: LD_INT 45
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_VAR 0 12
13028: ARRAY
13029: ST_TO_ADDR
// break ;
13030: GO 13034
// end ; end ; end ;
13032: GO 12863
13034: POP
13035: POP
// end ; if not weapon then
13036: LD_VAR 0 18
13040: NOT
13041: IFFALSE 13101
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13043: LD_ADDR_VAR 0 5
13047: PUSH
13048: LD_VAR 0 5
13052: PUSH
13053: LD_INT 11
13055: PUSH
13056: LD_INT 30
13058: PUSH
13059: LD_INT 49
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: DIFF
13067: ST_TO_ADDR
// if not list then
13068: LD_VAR 0 5
13072: NOT
13073: IFFALSE 13077
// exit ;
13075: GO 13219
// weapon := list [ rand ( 1 , list ) ] ;
13077: LD_ADDR_VAR 0 18
13081: PUSH
13082: LD_VAR 0 5
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_VAR 0 5
13094: PPUSH
13095: CALL_OW 12
13099: ARRAY
13100: ST_TO_ADDR
// end ; if weapon then
13101: LD_VAR 0 18
13105: IFFALSE 13219
// begin tmp := CostOfWeapon ( weapon ) ;
13107: LD_ADDR_VAR 0 14
13111: PUSH
13112: LD_VAR 0 18
13116: PPUSH
13117: CALL_OW 451
13121: ST_TO_ADDR
// j := GetBase ( tower ) ;
13122: LD_ADDR_VAR 0 9
13126: PUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 274
13136: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13137: LD_VAR 0 9
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 275
13149: PUSH
13150: LD_VAR 0 14
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: GREATEREQUAL
13159: PUSH
13160: LD_VAR 0 9
13164: PPUSH
13165: LD_INT 2
13167: PPUSH
13168: CALL_OW 275
13172: PUSH
13173: LD_VAR 0 14
13177: PUSH
13178: LD_INT 2
13180: ARRAY
13181: GREATEREQUAL
13182: AND
13183: PUSH
13184: LD_VAR 0 9
13188: PPUSH
13189: LD_INT 3
13191: PPUSH
13192: CALL_OW 275
13196: PUSH
13197: LD_VAR 0 14
13201: PUSH
13202: LD_INT 3
13204: ARRAY
13205: GREATEREQUAL
13206: AND
13207: IFFALSE 13219
// result := weapon ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_VAR 0 18
13218: ST_TO_ADDR
// end ; end ;
13219: LD_VAR 0 3
13223: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13224: LD_INT 0
13226: PPUSH
13227: PPUSH
// result := true ;
13228: LD_ADDR_VAR 0 3
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// if array1 = array2 then
13236: LD_VAR 0 1
13240: PUSH
13241: LD_VAR 0 2
13245: EQUAL
13246: IFFALSE 13306
// begin for i = 1 to array1 do
13248: LD_ADDR_VAR 0 4
13252: PUSH
13253: DOUBLE
13254: LD_INT 1
13256: DEC
13257: ST_TO_ADDR
13258: LD_VAR 0 1
13262: PUSH
13263: FOR_TO
13264: IFFALSE 13302
// if array1 [ i ] <> array2 [ i ] then
13266: LD_VAR 0 1
13270: PUSH
13271: LD_VAR 0 4
13275: ARRAY
13276: PUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_VAR 0 4
13286: ARRAY
13287: NONEQUAL
13288: IFFALSE 13300
// begin result := false ;
13290: LD_ADDR_VAR 0 3
13294: PUSH
13295: LD_INT 0
13297: ST_TO_ADDR
// break ;
13298: GO 13302
// end ;
13300: GO 13263
13302: POP
13303: POP
// end else
13304: GO 13314
// result := false ;
13306: LD_ADDR_VAR 0 3
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// end ;
13314: LD_VAR 0 3
13318: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13319: LD_INT 0
13321: PPUSH
13322: PPUSH
// if not array1 or not array2 then
13323: LD_VAR 0 1
13327: NOT
13328: PUSH
13329: LD_VAR 0 2
13333: NOT
13334: OR
13335: IFFALSE 13339
// exit ;
13337: GO 13403
// result := true ;
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// for i = 1 to array1 do
13347: LD_ADDR_VAR 0 4
13351: PUSH
13352: DOUBLE
13353: LD_INT 1
13355: DEC
13356: ST_TO_ADDR
13357: LD_VAR 0 1
13361: PUSH
13362: FOR_TO
13363: IFFALSE 13401
// if array1 [ i ] <> array2 [ i ] then
13365: LD_VAR 0 1
13369: PUSH
13370: LD_VAR 0 4
13374: ARRAY
13375: PUSH
13376: LD_VAR 0 2
13380: PUSH
13381: LD_VAR 0 4
13385: ARRAY
13386: NONEQUAL
13387: IFFALSE 13399
// begin result := false ;
13389: LD_ADDR_VAR 0 3
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// break ;
13397: GO 13401
// end ;
13399: GO 13362
13401: POP
13402: POP
// end ;
13403: LD_VAR 0 3
13407: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13408: LD_INT 0
13410: PPUSH
13411: PPUSH
13412: PPUSH
// pom := GetBase ( fac ) ;
13413: LD_ADDR_VAR 0 5
13417: PUSH
13418: LD_VAR 0 1
13422: PPUSH
13423: CALL_OW 274
13427: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13428: LD_ADDR_VAR 0 4
13432: PUSH
13433: LD_VAR 0 2
13437: PUSH
13438: LD_INT 1
13440: ARRAY
13441: PPUSH
13442: LD_VAR 0 2
13446: PUSH
13447: LD_INT 2
13449: ARRAY
13450: PPUSH
13451: LD_VAR 0 2
13455: PUSH
13456: LD_INT 3
13458: ARRAY
13459: PPUSH
13460: LD_VAR 0 2
13464: PUSH
13465: LD_INT 4
13467: ARRAY
13468: PPUSH
13469: CALL_OW 449
13473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_VAR 0 5
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 275
13491: PUSH
13492: LD_VAR 0 4
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: GREATEREQUAL
13501: PUSH
13502: LD_VAR 0 5
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 275
13514: PUSH
13515: LD_VAR 0 4
13519: PUSH
13520: LD_INT 2
13522: ARRAY
13523: GREATEREQUAL
13524: AND
13525: PUSH
13526: LD_VAR 0 5
13530: PPUSH
13531: LD_INT 3
13533: PPUSH
13534: CALL_OW 275
13538: PUSH
13539: LD_VAR 0 4
13543: PUSH
13544: LD_INT 3
13546: ARRAY
13547: GREATEREQUAL
13548: AND
13549: ST_TO_ADDR
// end ;
13550: LD_VAR 0 3
13554: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13555: LD_INT 0
13557: PPUSH
13558: PPUSH
13559: PPUSH
13560: PPUSH
// pom := GetBase ( building ) ;
13561: LD_ADDR_VAR 0 3
13565: PUSH
13566: LD_VAR 0 1
13570: PPUSH
13571: CALL_OW 274
13575: ST_TO_ADDR
// if not pom then
13576: LD_VAR 0 3
13580: NOT
13581: IFFALSE 13585
// exit ;
13583: GO 13755
// btype := GetBType ( building ) ;
13585: LD_ADDR_VAR 0 5
13589: PUSH
13590: LD_VAR 0 1
13594: PPUSH
13595: CALL_OW 266
13599: ST_TO_ADDR
// if btype = b_armoury then
13600: LD_VAR 0 5
13604: PUSH
13605: LD_INT 4
13607: EQUAL
13608: IFFALSE 13618
// btype := b_barracks ;
13610: LD_ADDR_VAR 0 5
13614: PUSH
13615: LD_INT 5
13617: ST_TO_ADDR
// if btype = b_depot then
13618: LD_VAR 0 5
13622: PUSH
13623: LD_INT 0
13625: EQUAL
13626: IFFALSE 13636
// btype := b_warehouse ;
13628: LD_ADDR_VAR 0 5
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// if btype = b_workshop then
13636: LD_VAR 0 5
13640: PUSH
13641: LD_INT 2
13643: EQUAL
13644: IFFALSE 13654
// btype := b_factory ;
13646: LD_ADDR_VAR 0 5
13650: PUSH
13651: LD_INT 3
13653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13654: LD_ADDR_VAR 0 4
13658: PUSH
13659: LD_VAR 0 5
13663: PPUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 248
13673: PPUSH
13674: CALL_OW 450
13678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13679: LD_ADDR_VAR 0 2
13683: PUSH
13684: LD_VAR 0 3
13688: PPUSH
13689: LD_INT 1
13691: PPUSH
13692: CALL_OW 275
13696: PUSH
13697: LD_VAR 0 4
13701: PUSH
13702: LD_INT 1
13704: ARRAY
13705: GREATEREQUAL
13706: PUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: LD_INT 2
13714: PPUSH
13715: CALL_OW 275
13719: PUSH
13720: LD_VAR 0 4
13724: PUSH
13725: LD_INT 2
13727: ARRAY
13728: GREATEREQUAL
13729: AND
13730: PUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 3
13738: PPUSH
13739: CALL_OW 275
13743: PUSH
13744: LD_VAR 0 4
13748: PUSH
13749: LD_INT 3
13751: ARRAY
13752: GREATEREQUAL
13753: AND
13754: ST_TO_ADDR
// end ;
13755: LD_VAR 0 2
13759: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13760: LD_INT 0
13762: PPUSH
13763: PPUSH
13764: PPUSH
// pom := GetBase ( building ) ;
13765: LD_ADDR_VAR 0 4
13769: PUSH
13770: LD_VAR 0 1
13774: PPUSH
13775: CALL_OW 274
13779: ST_TO_ADDR
// if not pom then
13780: LD_VAR 0 4
13784: NOT
13785: IFFALSE 13789
// exit ;
13787: GO 13890
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13789: LD_ADDR_VAR 0 5
13793: PUSH
13794: LD_VAR 0 2
13798: PPUSH
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 248
13808: PPUSH
13809: CALL_OW 450
13813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13814: LD_ADDR_VAR 0 3
13818: PUSH
13819: LD_VAR 0 4
13823: PPUSH
13824: LD_INT 1
13826: PPUSH
13827: CALL_OW 275
13831: PUSH
13832: LD_VAR 0 5
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: GREATEREQUAL
13841: PUSH
13842: LD_VAR 0 4
13846: PPUSH
13847: LD_INT 2
13849: PPUSH
13850: CALL_OW 275
13854: PUSH
13855: LD_VAR 0 5
13859: PUSH
13860: LD_INT 2
13862: ARRAY
13863: GREATEREQUAL
13864: AND
13865: PUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: LD_INT 3
13873: PPUSH
13874: CALL_OW 275
13878: PUSH
13879: LD_VAR 0 5
13883: PUSH
13884: LD_INT 3
13886: ARRAY
13887: GREATEREQUAL
13888: AND
13889: ST_TO_ADDR
// end ;
13890: LD_VAR 0 3
13894: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13895: LD_INT 0
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
13906: PPUSH
13907: PPUSH
// result := false ;
13908: LD_ADDR_VAR 0 8
13912: PUSH
13913: LD_INT 0
13915: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13916: LD_VAR 0 5
13920: NOT
13921: PUSH
13922: LD_VAR 0 1
13926: NOT
13927: OR
13928: PUSH
13929: LD_VAR 0 2
13933: NOT
13934: OR
13935: PUSH
13936: LD_VAR 0 3
13940: NOT
13941: OR
13942: IFFALSE 13946
// exit ;
13944: GO 14760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13946: LD_ADDR_VAR 0 14
13950: PUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: LD_VAR 0 2
13960: PPUSH
13961: LD_VAR 0 3
13965: PPUSH
13966: LD_VAR 0 4
13970: PPUSH
13971: LD_VAR 0 5
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: CALL_OW 248
13984: PPUSH
13985: LD_INT 0
13987: PPUSH
13988: CALL 16013 0 6
13992: ST_TO_ADDR
// if not hexes then
13993: LD_VAR 0 14
13997: NOT
13998: IFFALSE 14002
// exit ;
14000: GO 14760
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14002: LD_ADDR_VAR 0 17
14006: PUSH
14007: LD_VAR 0 5
14011: PPUSH
14012: LD_INT 22
14014: PUSH
14015: LD_VAR 0 13
14019: PPUSH
14020: CALL_OW 255
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 30
14034: PUSH
14035: LD_INT 0
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 30
14044: PUSH
14045: LD_INT 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 72
14065: ST_TO_ADDR
// for i = 1 to hexes do
14066: LD_ADDR_VAR 0 9
14070: PUSH
14071: DOUBLE
14072: LD_INT 1
14074: DEC
14075: ST_TO_ADDR
14076: LD_VAR 0 14
14080: PUSH
14081: FOR_TO
14082: IFFALSE 14758
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14084: LD_ADDR_VAR 0 13
14088: PUSH
14089: LD_VAR 0 14
14093: PUSH
14094: LD_VAR 0 9
14098: ARRAY
14099: PUSH
14100: LD_INT 1
14102: ARRAY
14103: PPUSH
14104: LD_VAR 0 14
14108: PUSH
14109: LD_VAR 0 9
14113: ARRAY
14114: PUSH
14115: LD_INT 2
14117: ARRAY
14118: PPUSH
14119: CALL_OW 428
14123: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14124: LD_VAR 0 14
14128: PUSH
14129: LD_VAR 0 9
14133: ARRAY
14134: PUSH
14135: LD_INT 1
14137: ARRAY
14138: PPUSH
14139: LD_VAR 0 14
14143: PUSH
14144: LD_VAR 0 9
14148: ARRAY
14149: PUSH
14150: LD_INT 2
14152: ARRAY
14153: PPUSH
14154: CALL_OW 351
14158: PUSH
14159: LD_VAR 0 14
14163: PUSH
14164: LD_VAR 0 9
14168: ARRAY
14169: PUSH
14170: LD_INT 1
14172: ARRAY
14173: PPUSH
14174: LD_VAR 0 14
14178: PUSH
14179: LD_VAR 0 9
14183: ARRAY
14184: PUSH
14185: LD_INT 2
14187: ARRAY
14188: PPUSH
14189: CALL_OW 488
14193: NOT
14194: OR
14195: PUSH
14196: LD_VAR 0 13
14200: PPUSH
14201: CALL_OW 247
14205: PUSH
14206: LD_INT 3
14208: EQUAL
14209: OR
14210: IFFALSE 14216
// exit ;
14212: POP
14213: POP
14214: GO 14760
// if not tmp then
14216: LD_VAR 0 13
14220: NOT
14221: IFFALSE 14225
// continue ;
14223: GO 14081
// result := true ;
14225: LD_ADDR_VAR 0 8
14229: PUSH
14230: LD_INT 1
14232: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14233: LD_VAR 0 6
14237: PUSH
14238: LD_VAR 0 13
14242: PPUSH
14243: CALL_OW 247
14247: PUSH
14248: LD_INT 2
14250: EQUAL
14251: AND
14252: PUSH
14253: LD_VAR 0 13
14257: PPUSH
14258: CALL_OW 263
14262: PUSH
14263: LD_INT 1
14265: EQUAL
14266: AND
14267: IFFALSE 14431
// begin if IsDrivenBy ( tmp ) then
14269: LD_VAR 0 13
14273: PPUSH
14274: CALL_OW 311
14278: IFFALSE 14282
// continue ;
14280: GO 14081
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14282: LD_VAR 0 6
14286: PPUSH
14287: LD_INT 3
14289: PUSH
14290: LD_INT 60
14292: PUSH
14293: EMPTY
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: LD_INT 55
14305: PUSH
14306: EMPTY
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 72
14321: IFFALSE 14429
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14323: LD_ADDR_VAR 0 18
14327: PUSH
14328: LD_VAR 0 6
14332: PPUSH
14333: LD_INT 3
14335: PUSH
14336: LD_INT 60
14338: PUSH
14339: EMPTY
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 3
14348: PUSH
14349: LD_INT 55
14351: PUSH
14352: EMPTY
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 72
14367: PUSH
14368: LD_INT 1
14370: ARRAY
14371: ST_TO_ADDR
// if IsInUnit ( driver ) then
14372: LD_VAR 0 18
14376: PPUSH
14377: CALL_OW 310
14381: IFFALSE 14392
// ComExit ( driver ) ;
14383: LD_VAR 0 18
14387: PPUSH
14388: CALL 39814 0 1
// AddComEnterUnit ( driver , tmp ) ;
14392: LD_VAR 0 18
14396: PPUSH
14397: LD_VAR 0 13
14401: PPUSH
14402: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14406: LD_VAR 0 18
14410: PPUSH
14411: LD_VAR 0 7
14415: PPUSH
14416: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14420: LD_VAR 0 18
14424: PPUSH
14425: CALL_OW 181
// end ; continue ;
14429: GO 14081
// end ; if not cleaners or not tmp in cleaners then
14431: LD_VAR 0 6
14435: NOT
14436: PUSH
14437: LD_VAR 0 13
14441: PUSH
14442: LD_VAR 0 6
14446: IN
14447: NOT
14448: OR
14449: IFFALSE 14756
// begin if dep then
14451: LD_VAR 0 17
14455: IFFALSE 14591
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14457: LD_ADDR_VAR 0 16
14461: PUSH
14462: LD_VAR 0 17
14466: PUSH
14467: LD_INT 1
14469: ARRAY
14470: PPUSH
14471: CALL_OW 250
14475: PPUSH
14476: LD_VAR 0 17
14480: PUSH
14481: LD_INT 1
14483: ARRAY
14484: PPUSH
14485: CALL_OW 254
14489: PPUSH
14490: LD_INT 5
14492: PPUSH
14493: CALL_OW 272
14497: PUSH
14498: LD_VAR 0 17
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PPUSH
14507: CALL_OW 251
14511: PPUSH
14512: LD_VAR 0 17
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: CALL_OW 254
14525: PPUSH
14526: LD_INT 5
14528: PPUSH
14529: CALL_OW 273
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14538: LD_VAR 0 16
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PPUSH
14547: LD_VAR 0 16
14551: PUSH
14552: LD_INT 2
14554: ARRAY
14555: PPUSH
14556: CALL_OW 488
14560: IFFALSE 14591
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14562: LD_VAR 0 13
14566: PPUSH
14567: LD_VAR 0 16
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PPUSH
14576: LD_VAR 0 16
14580: PUSH
14581: LD_INT 2
14583: ARRAY
14584: PPUSH
14585: CALL_OW 111
// continue ;
14589: GO 14081
// end ; end ; r := GetDir ( tmp ) ;
14591: LD_ADDR_VAR 0 15
14595: PUSH
14596: LD_VAR 0 13
14600: PPUSH
14601: CALL_OW 254
14605: ST_TO_ADDR
// if r = 5 then
14606: LD_VAR 0 15
14610: PUSH
14611: LD_INT 5
14613: EQUAL
14614: IFFALSE 14624
// r := 0 ;
14616: LD_ADDR_VAR 0 15
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
// for j = r to 5 do
14624: LD_ADDR_VAR 0 10
14628: PUSH
14629: DOUBLE
14630: LD_VAR 0 15
14634: DEC
14635: ST_TO_ADDR
14636: LD_INT 5
14638: PUSH
14639: FOR_TO
14640: IFFALSE 14754
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14642: LD_ADDR_VAR 0 11
14646: PUSH
14647: LD_VAR 0 13
14651: PPUSH
14652: CALL_OW 250
14656: PPUSH
14657: LD_VAR 0 10
14661: PPUSH
14662: LD_INT 2
14664: PPUSH
14665: CALL_OW 272
14669: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14670: LD_ADDR_VAR 0 12
14674: PUSH
14675: LD_VAR 0 13
14679: PPUSH
14680: CALL_OW 251
14684: PPUSH
14685: LD_VAR 0 10
14689: PPUSH
14690: LD_INT 2
14692: PPUSH
14693: CALL_OW 273
14697: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14698: LD_VAR 0 11
14702: PPUSH
14703: LD_VAR 0 12
14707: PPUSH
14708: CALL_OW 488
14712: PUSH
14713: LD_VAR 0 11
14717: PPUSH
14718: LD_VAR 0 12
14722: PPUSH
14723: CALL_OW 428
14727: NOT
14728: AND
14729: IFFALSE 14752
// begin ComMoveXY ( tmp , _x , _y ) ;
14731: LD_VAR 0 13
14735: PPUSH
14736: LD_VAR 0 11
14740: PPUSH
14741: LD_VAR 0 12
14745: PPUSH
14746: CALL_OW 111
// break ;
14750: GO 14754
// end ; end ;
14752: GO 14639
14754: POP
14755: POP
// end ; end ;
14756: GO 14081
14758: POP
14759: POP
// end ;
14760: LD_VAR 0 8
14764: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14765: LD_INT 0
14767: PPUSH
// result := true ;
14768: LD_ADDR_VAR 0 3
14772: PUSH
14773: LD_INT 1
14775: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14776: LD_VAR 0 2
14780: PUSH
14781: LD_INT 24
14783: DOUBLE
14784: EQUAL
14785: IFTRUE 14795
14787: LD_INT 33
14789: DOUBLE
14790: EQUAL
14791: IFTRUE 14795
14793: GO 14820
14795: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14796: LD_ADDR_VAR 0 3
14800: PUSH
14801: LD_INT 32
14803: PPUSH
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 321
14813: PUSH
14814: LD_INT 2
14816: EQUAL
14817: ST_TO_ADDR
14818: GO 15136
14820: LD_INT 20
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 14853
14828: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14829: LD_ADDR_VAR 0 3
14833: PUSH
14834: LD_INT 6
14836: PPUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 321
14846: PUSH
14847: LD_INT 2
14849: EQUAL
14850: ST_TO_ADDR
14851: GO 15136
14853: LD_INT 22
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14867
14859: LD_INT 36
14861: DOUBLE
14862: EQUAL
14863: IFTRUE 14867
14865: GO 14892
14867: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14868: LD_ADDR_VAR 0 3
14872: PUSH
14873: LD_INT 15
14875: PPUSH
14876: LD_VAR 0 1
14880: PPUSH
14881: CALL_OW 321
14885: PUSH
14886: LD_INT 2
14888: EQUAL
14889: ST_TO_ADDR
14890: GO 15136
14892: LD_INT 30
14894: DOUBLE
14895: EQUAL
14896: IFTRUE 14900
14898: GO 14925
14900: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: LD_INT 20
14908: PPUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 321
14918: PUSH
14919: LD_INT 2
14921: EQUAL
14922: ST_TO_ADDR
14923: GO 15136
14925: LD_INT 28
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14939
14931: LD_INT 21
14933: DOUBLE
14934: EQUAL
14935: IFTRUE 14939
14937: GO 14964
14939: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14940: LD_ADDR_VAR 0 3
14944: PUSH
14945: LD_INT 21
14947: PPUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 321
14957: PUSH
14958: LD_INT 2
14960: EQUAL
14961: ST_TO_ADDR
14962: GO 15136
14964: LD_INT 16
14966: DOUBLE
14967: EQUAL
14968: IFTRUE 14972
14970: GO 14997
14972: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14973: LD_ADDR_VAR 0 3
14977: PUSH
14978: LD_INT 84
14980: PPUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 321
14990: PUSH
14991: LD_INT 2
14993: EQUAL
14994: ST_TO_ADDR
14995: GO 15136
14997: LD_INT 19
14999: DOUBLE
15000: EQUAL
15001: IFTRUE 15011
15003: LD_INT 23
15005: DOUBLE
15006: EQUAL
15007: IFTRUE 15011
15009: GO 15036
15011: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15012: LD_ADDR_VAR 0 3
15016: PUSH
15017: LD_INT 83
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 321
15029: PUSH
15030: LD_INT 2
15032: EQUAL
15033: ST_TO_ADDR
15034: GO 15136
15036: LD_INT 17
15038: DOUBLE
15039: EQUAL
15040: IFTRUE 15044
15042: GO 15069
15044: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_INT 39
15052: PPUSH
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 321
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: ST_TO_ADDR
15067: GO 15136
15069: LD_INT 18
15071: DOUBLE
15072: EQUAL
15073: IFTRUE 15077
15075: GO 15102
15077: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 40
15085: PPUSH
15086: LD_VAR 0 1
15090: PPUSH
15091: CALL_OW 321
15095: PUSH
15096: LD_INT 2
15098: EQUAL
15099: ST_TO_ADDR
15100: GO 15136
15102: LD_INT 27
15104: DOUBLE
15105: EQUAL
15106: IFTRUE 15110
15108: GO 15135
15110: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15111: LD_ADDR_VAR 0 3
15115: PUSH
15116: LD_INT 35
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 321
15128: PUSH
15129: LD_INT 2
15131: EQUAL
15132: ST_TO_ADDR
15133: GO 15136
15135: POP
// end ;
15136: LD_VAR 0 3
15140: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15141: LD_INT 0
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
// result := false ;
15154: LD_ADDR_VAR 0 6
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// if btype = b_depot then
15162: LD_VAR 0 2
15166: PUSH
15167: LD_INT 0
15169: EQUAL
15170: IFFALSE 15182
// begin result := true ;
15172: LD_ADDR_VAR 0 6
15176: PUSH
15177: LD_INT 1
15179: ST_TO_ADDR
// exit ;
15180: GO 16008
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15182: LD_VAR 0 1
15186: NOT
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 266
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: IN
15208: NOT
15209: OR
15210: PUSH
15211: LD_VAR 0 2
15215: NOT
15216: OR
15217: PUSH
15218: LD_VAR 0 5
15222: PUSH
15223: LD_INT 0
15225: PUSH
15226: LD_INT 1
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 3
15234: PUSH
15235: LD_INT 4
15237: PUSH
15238: LD_INT 5
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: IN
15249: NOT
15250: OR
15251: PUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_VAR 0 4
15261: PPUSH
15262: CALL_OW 488
15266: NOT
15267: OR
15268: IFFALSE 15272
// exit ;
15270: GO 16008
// side := GetSide ( depot ) ;
15272: LD_ADDR_VAR 0 9
15276: PUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 255
15286: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15287: LD_VAR 0 9
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL 14765 0 2
15301: NOT
15302: IFFALSE 15306
// exit ;
15304: GO 16008
// pom := GetBase ( depot ) ;
15306: LD_ADDR_VAR 0 10
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 274
15320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15321: LD_ADDR_VAR 0 11
15325: PUSH
15326: LD_VAR 0 2
15330: PPUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 248
15340: PPUSH
15341: CALL_OW 450
15345: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15346: LD_VAR 0 10
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: CALL_OW 275
15358: PUSH
15359: LD_VAR 0 11
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: GREATEREQUAL
15368: PUSH
15369: LD_VAR 0 10
15373: PPUSH
15374: LD_INT 2
15376: PPUSH
15377: CALL_OW 275
15381: PUSH
15382: LD_VAR 0 11
15386: PUSH
15387: LD_INT 2
15389: ARRAY
15390: GREATEREQUAL
15391: AND
15392: PUSH
15393: LD_VAR 0 10
15397: PPUSH
15398: LD_INT 3
15400: PPUSH
15401: CALL_OW 275
15405: PUSH
15406: LD_VAR 0 11
15410: PUSH
15411: LD_INT 3
15413: ARRAY
15414: GREATEREQUAL
15415: AND
15416: NOT
15417: IFFALSE 15421
// exit ;
15419: GO 16008
// if GetBType ( depot ) = b_depot then
15421: LD_VAR 0 1
15425: PPUSH
15426: CALL_OW 266
15430: PUSH
15431: LD_INT 0
15433: EQUAL
15434: IFFALSE 15446
// dist := 28 else
15436: LD_ADDR_VAR 0 14
15440: PUSH
15441: LD_INT 28
15443: ST_TO_ADDR
15444: GO 15454
// dist := 36 ;
15446: LD_ADDR_VAR 0 14
15450: PUSH
15451: LD_INT 36
15453: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15454: LD_VAR 0 1
15458: PPUSH
15459: LD_VAR 0 3
15463: PPUSH
15464: LD_VAR 0 4
15468: PPUSH
15469: CALL_OW 297
15473: PUSH
15474: LD_VAR 0 14
15478: GREATER
15479: IFFALSE 15483
// exit ;
15481: GO 16008
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15483: LD_ADDR_VAR 0 12
15487: PUSH
15488: LD_VAR 0 2
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_VAR 0 5
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 248
15517: PPUSH
15518: LD_INT 0
15520: PPUSH
15521: CALL 16013 0 6
15525: ST_TO_ADDR
// if not hexes then
15526: LD_VAR 0 12
15530: NOT
15531: IFFALSE 15535
// exit ;
15533: GO 16008
// hex := GetHexInfo ( x , y ) ;
15535: LD_ADDR_VAR 0 15
15539: PUSH
15540: LD_VAR 0 3
15544: PPUSH
15545: LD_VAR 0 4
15549: PPUSH
15550: CALL_OW 546
15554: ST_TO_ADDR
// if hex [ 1 ] then
15555: LD_VAR 0 15
15559: PUSH
15560: LD_INT 1
15562: ARRAY
15563: IFFALSE 15567
// exit ;
15565: GO 16008
// height := hex [ 2 ] ;
15567: LD_ADDR_VAR 0 13
15571: PUSH
15572: LD_VAR 0 15
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: ST_TO_ADDR
// for i = 1 to hexes do
15581: LD_ADDR_VAR 0 7
15585: PUSH
15586: DOUBLE
15587: LD_INT 1
15589: DEC
15590: ST_TO_ADDR
15591: LD_VAR 0 12
15595: PUSH
15596: FOR_TO
15597: IFFALSE 15927
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15599: LD_VAR 0 12
15603: PUSH
15604: LD_VAR 0 7
15608: ARRAY
15609: PUSH
15610: LD_INT 1
15612: ARRAY
15613: PPUSH
15614: LD_VAR 0 12
15618: PUSH
15619: LD_VAR 0 7
15623: ARRAY
15624: PUSH
15625: LD_INT 2
15627: ARRAY
15628: PPUSH
15629: CALL_OW 488
15633: NOT
15634: PUSH
15635: LD_VAR 0 12
15639: PUSH
15640: LD_VAR 0 7
15644: ARRAY
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 12
15654: PUSH
15655: LD_VAR 0 7
15659: ARRAY
15660: PUSH
15661: LD_INT 2
15663: ARRAY
15664: PPUSH
15665: CALL_OW 428
15669: PUSH
15670: LD_INT 0
15672: GREATER
15673: OR
15674: PUSH
15675: LD_VAR 0 12
15679: PUSH
15680: LD_VAR 0 7
15684: ARRAY
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_VAR 0 12
15694: PUSH
15695: LD_VAR 0 7
15699: ARRAY
15700: PUSH
15701: LD_INT 2
15703: ARRAY
15704: PPUSH
15705: CALL_OW 351
15709: OR
15710: IFFALSE 15716
// exit ;
15712: POP
15713: POP
15714: GO 16008
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15716: LD_ADDR_VAR 0 8
15720: PUSH
15721: LD_VAR 0 12
15725: PUSH
15726: LD_VAR 0 7
15730: ARRAY
15731: PUSH
15732: LD_INT 1
15734: ARRAY
15735: PPUSH
15736: LD_VAR 0 12
15740: PUSH
15741: LD_VAR 0 7
15745: ARRAY
15746: PUSH
15747: LD_INT 2
15749: ARRAY
15750: PPUSH
15751: CALL_OW 546
15755: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15756: LD_VAR 0 8
15760: PUSH
15761: LD_INT 1
15763: ARRAY
15764: PUSH
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 2
15772: ARRAY
15773: PUSH
15774: LD_VAR 0 13
15778: PUSH
15779: LD_INT 2
15781: PLUS
15782: GREATER
15783: OR
15784: PUSH
15785: LD_VAR 0 8
15789: PUSH
15790: LD_INT 2
15792: ARRAY
15793: PUSH
15794: LD_VAR 0 13
15798: PUSH
15799: LD_INT 2
15801: MINUS
15802: LESS
15803: OR
15804: PUSH
15805: LD_VAR 0 8
15809: PUSH
15810: LD_INT 3
15812: ARRAY
15813: PUSH
15814: LD_INT 0
15816: PUSH
15817: LD_INT 8
15819: PUSH
15820: LD_INT 9
15822: PUSH
15823: LD_INT 10
15825: PUSH
15826: LD_INT 11
15828: PUSH
15829: LD_INT 12
15831: PUSH
15832: LD_INT 13
15834: PUSH
15835: LD_INT 16
15837: PUSH
15838: LD_INT 17
15840: PUSH
15841: LD_INT 18
15843: PUSH
15844: LD_INT 19
15846: PUSH
15847: LD_INT 20
15849: PUSH
15850: LD_INT 21
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: IN
15868: NOT
15869: OR
15870: PUSH
15871: LD_VAR 0 8
15875: PUSH
15876: LD_INT 5
15878: ARRAY
15879: NOT
15880: OR
15881: PUSH
15882: LD_VAR 0 8
15886: PUSH
15887: LD_INT 6
15889: ARRAY
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 7
15899: PUSH
15900: LD_INT 9
15902: PUSH
15903: LD_INT 10
15905: PUSH
15906: LD_INT 11
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: IN
15917: NOT
15918: OR
15919: IFFALSE 15925
// exit ;
15921: POP
15922: POP
15923: GO 16008
// end ;
15925: GO 15596
15927: POP
15928: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15929: LD_VAR 0 9
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_VAR 0 4
15943: PPUSH
15944: LD_INT 20
15946: PPUSH
15947: CALL 7931 0 4
15951: PUSH
15952: LD_INT 4
15954: ARRAY
15955: IFFALSE 15959
// exit ;
15957: GO 16008
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15959: LD_VAR 0 2
15963: PUSH
15964: LD_INT 29
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: IN
15974: PUSH
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_VAR 0 4
15984: PPUSH
15985: LD_VAR 0 9
15989: PPUSH
15990: CALL_OW 440
15994: NOT
15995: AND
15996: IFFALSE 16000
// exit ;
15998: GO 16008
// result := true ;
16000: LD_ADDR_VAR 0 6
16004: PUSH
16005: LD_INT 1
16007: ST_TO_ADDR
// end ;
16008: LD_VAR 0 6
16012: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16013: LD_INT 0
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
16028: PPUSH
16029: PPUSH
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
16072: PPUSH
// result = [ ] ;
16073: LD_ADDR_VAR 0 7
16077: PUSH
16078: EMPTY
16079: ST_TO_ADDR
// temp_list = [ ] ;
16080: LD_ADDR_VAR 0 9
16084: PUSH
16085: EMPTY
16086: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16087: LD_VAR 0 4
16091: PUSH
16092: LD_INT 0
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: LD_INT 4
16106: PUSH
16107: LD_INT 5
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: IN
16118: NOT
16119: PUSH
16120: LD_VAR 0 1
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: IN
16135: PUSH
16136: LD_VAR 0 5
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: LD_INT 3
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: IN
16155: NOT
16156: AND
16157: OR
16158: IFFALSE 16162
// exit ;
16160: GO 34553
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16162: LD_VAR 0 1
16166: PUSH
16167: LD_INT 6
16169: PUSH
16170: LD_INT 7
16172: PUSH
16173: LD_INT 8
16175: PUSH
16176: LD_INT 13
16178: PUSH
16179: LD_INT 12
16181: PUSH
16182: LD_INT 15
16184: PUSH
16185: LD_INT 11
16187: PUSH
16188: LD_INT 14
16190: PUSH
16191: LD_INT 10
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: IN
16205: IFFALSE 16215
// btype = b_lab ;
16207: LD_ADDR_VAR 0 1
16211: PUSH
16212: LD_INT 6
16214: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16215: LD_VAR 0 6
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: LD_INT 1
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: LIST
16233: IN
16234: NOT
16235: PUSH
16236: LD_VAR 0 1
16240: PUSH
16241: LD_INT 0
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: LD_INT 2
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: LD_INT 6
16255: PUSH
16256: LD_INT 36
16258: PUSH
16259: LD_INT 4
16261: PUSH
16262: LD_INT 5
16264: PUSH
16265: LD_INT 31
16267: PUSH
16268: LD_INT 32
16270: PUSH
16271: LD_INT 33
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: IN
16287: NOT
16288: PUSH
16289: LD_VAR 0 6
16293: PUSH
16294: LD_INT 1
16296: EQUAL
16297: AND
16298: OR
16299: PUSH
16300: LD_VAR 0 1
16304: PUSH
16305: LD_INT 2
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: IN
16315: NOT
16316: PUSH
16317: LD_VAR 0 6
16321: PUSH
16322: LD_INT 2
16324: EQUAL
16325: AND
16326: OR
16327: IFFALSE 16337
// mode = 0 ;
16329: LD_ADDR_VAR 0 6
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// case mode of 0 :
16337: LD_VAR 0 6
16341: PUSH
16342: LD_INT 0
16344: DOUBLE
16345: EQUAL
16346: IFTRUE 16350
16348: GO 27803
16350: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16351: LD_ADDR_VAR 0 11
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: LD_INT 0
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: LD_INT 1
16371: NEG
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 1
16409: NEG
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 1
16420: NEG
16421: PUSH
16422: LD_INT 1
16424: NEG
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: LD_INT 2
16436: NEG
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: LD_INT 2
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: LD_INT 2
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 0
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: LD_INT 2
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16544: LD_ADDR_VAR 0 12
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 0
16561: PUSH
16562: LD_INT 1
16564: NEG
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: LD_INT 0
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: NEG
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 1
16613: NEG
16614: PUSH
16615: LD_INT 1
16617: NEG
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 1
16628: NEG
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: LD_INT 0
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 2
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 2
16667: NEG
16668: PUSH
16669: LD_INT 0
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 2
16678: NEG
16679: PUSH
16680: LD_INT 1
16682: NEG
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 2
16690: NEG
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 3
16701: NEG
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 3
16712: NEG
16713: PUSH
16714: LD_INT 1
16716: NEG
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16740: LD_ADDR_VAR 0 13
16744: PUSH
16745: LD_INT 0
16747: PUSH
16748: LD_INT 0
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 1
16760: NEG
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 0
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: NEG
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 1
16809: NEG
16810: PUSH
16811: LD_INT 1
16813: NEG
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 1
16821: NEG
16822: PUSH
16823: LD_INT 2
16825: NEG
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 2
16863: NEG
16864: PUSH
16865: LD_INT 1
16867: NEG
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 2
16875: NEG
16876: PUSH
16877: LD_INT 2
16879: NEG
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 2
16887: NEG
16888: PUSH
16889: LD_INT 3
16891: NEG
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 3
16899: NEG
16900: PUSH
16901: LD_INT 2
16903: NEG
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 3
16911: NEG
16912: PUSH
16913: LD_INT 3
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16939: LD_ADDR_VAR 0 14
16943: PUSH
16944: LD_INT 0
16946: PUSH
16947: LD_INT 0
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 0
16956: PUSH
16957: LD_INT 1
16959: NEG
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: LD_INT 1
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 1
16997: NEG
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: NEG
17009: PUSH
17010: LD_INT 1
17012: NEG
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 1
17020: NEG
17021: PUSH
17022: LD_INT 2
17024: NEG
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: LD_INT 2
17035: NEG
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: LD_INT 1
17046: NEG
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: LD_INT 2
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: NEG
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 1
17085: NEG
17086: PUSH
17087: LD_INT 3
17089: NEG
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: LD_INT 3
17100: NEG
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17135: LD_ADDR_VAR 0 15
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 0
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: NEG
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 2
17227: PUSH
17228: LD_INT 0
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 1
17247: NEG
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 2
17258: NEG
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 2
17269: NEG
17270: PUSH
17271: LD_INT 1
17273: NEG
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 2
17281: PUSH
17282: LD_INT 1
17284: NEG
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17328: LD_ADDR_VAR 0 16
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: LD_INT 0
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 1
17348: NEG
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: NEG
17387: PUSH
17388: LD_INT 0
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: NEG
17398: PUSH
17399: LD_INT 1
17401: NEG
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: LD_INT 2
17413: NEG
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 2
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: NEG
17452: PUSH
17453: LD_INT 1
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 2
17463: NEG
17464: PUSH
17465: LD_INT 2
17467: NEG
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 3
17475: PUSH
17476: LD_INT 2
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 3
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: LD_INT 3
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17521: LD_ADDR_VAR 0 17
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: NEG
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: NEG
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: NEG
17603: PUSH
17604: LD_INT 2
17606: NEG
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: LD_INT 2
17617: NEG
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: LD_INT 1
17628: NEG
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: LD_INT 0
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 0
17676: PUSH
17677: LD_INT 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: NEG
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: NEG
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 2
17708: NEG
17709: PUSH
17710: LD_INT 1
17712: NEG
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 2
17720: NEG
17721: PUSH
17722: LD_INT 2
17724: NEG
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17751: LD_ADDR_VAR 0 18
17755: PUSH
17756: LD_INT 0
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 0
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: NEG
17833: PUSH
17834: LD_INT 2
17836: NEG
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: LD_INT 2
17847: NEG
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 1
17858: NEG
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 2
17927: NEG
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 2
17938: NEG
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 2
17950: NEG
17951: PUSH
17952: LD_INT 2
17954: NEG
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17981: LD_ADDR_VAR 0 19
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 2
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 2
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: LD_INT 2
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: LD_INT 2
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 2
18157: NEG
18158: PUSH
18159: LD_INT 0
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: NEG
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: NEG
18181: PUSH
18182: LD_INT 2
18184: NEG
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18211: LD_ADDR_VAR 0 20
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 1
18231: NEG
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: NEG
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: LD_INT 2
18307: NEG
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 2
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: NEG
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 2
18398: NEG
18399: PUSH
18400: LD_INT 1
18402: NEG
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 2
18410: NEG
18411: PUSH
18412: LD_INT 2
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18441: LD_ADDR_VAR 0 21
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 1
18522: NEG
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: NEG
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: LD_INT 1
18632: NEG
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 2
18640: NEG
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18671: LD_ADDR_VAR 0 22
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: LD_INT 2
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 2
18767: NEG
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 2
18858: NEG
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: NEG
18871: PUSH
18872: LD_INT 2
18874: NEG
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18901: LD_ADDR_VAR 0 23
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: LD_INT 1
18921: NEG
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 2
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 2
19088: NEG
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: NEG
19101: PUSH
19102: LD_INT 2
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: LD_INT 3
19116: NEG
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: LD_INT 3
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 2
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19181: LD_ADDR_VAR 0 24
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: LD_INT 1
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: LD_INT 2
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 2
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 2
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 3
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 3
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19457: LD_ADDR_VAR 0 25
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 1
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 2
19633: NEG
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: NEG
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 2
19656: NEG
19657: PUSH
19658: LD_INT 2
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 3
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 3
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19731: LD_ADDR_VAR 0 26
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: NEG
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: NEG
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 2
19827: NEG
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: LD_INT 1
19838: NEG
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 2
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: NEG
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: NEG
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: NEG
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 2
19930: NEG
19931: PUSH
19932: LD_INT 2
19934: NEG
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 3
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: PUSH
19953: LD_INT 3
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20007: LD_ADDR_VAR 0 27
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 2
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 2
20183: NEG
20184: PUSH
20185: LD_INT 0
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: NEG
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: LD_INT 2
20210: NEG
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 3
20240: NEG
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 3
20252: NEG
20253: PUSH
20254: LD_INT 2
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20287: LD_ADDR_VAR 0 28
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: LD_INT 2
20383: NEG
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 0
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: NEG
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 2
20474: NEG
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 2
20486: NEG
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 3
20502: NEG
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: LD_INT 3
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 3
20522: NEG
20523: PUSH
20524: LD_INT 1
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 3
20534: NEG
20535: PUSH
20536: LD_INT 2
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20569: LD_ADDR_VAR 0 29
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 2
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 2
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: NEG
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: LD_INT 3
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 3
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: LD_INT 3
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 3
20813: NEG
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20848: LD_ADDR_VAR 0 30
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: LD_INT 2
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 1
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 2
21025: NEG
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: LD_INT 3
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: LD_INT 2
21052: NEG
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 3
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: LD_INT 3
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: NEG
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 3
21091: NEG
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21126: LD_ADDR_VAR 0 31
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 2
21303: NEG
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 2
21315: NEG
21316: PUSH
21317: LD_INT 3
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 3
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 3
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 3
21369: NEG
21370: PUSH
21371: LD_INT 2
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21404: LD_ADDR_VAR 0 32
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 1
21424: NEG
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: NEG
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: LD_INT 2
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 3
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 3
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 3
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 2
21636: NEG
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 3
21647: NEG
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21682: LD_ADDR_VAR 0 33
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 2
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 2
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: LD_INT 3
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 3
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 3
21926: NEG
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21961: LD_ADDR_VAR 0 34
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: NEG
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 2
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: NEG
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: NEG
22153: PUSH
22154: LD_INT 3
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 2
22195: NEG
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 3
22206: NEG
22207: PUSH
22208: LD_INT 1
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22241: LD_ADDR_VAR 0 35
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22353: LD_ADDR_VAR 0 36
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: LD_INT 1
22426: NEG
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22465: LD_ADDR_VAR 0 37
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22577: LD_ADDR_VAR 0 38
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22689: LD_ADDR_VAR 0 39
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: LD_INT 2
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22801: LD_ADDR_VAR 0 40
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 1
22870: NEG
22871: PUSH
22872: LD_INT 1
22874: NEG
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22913: LD_ADDR_VAR 0 41
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 0
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: NEG
23104: PUSH
23105: LD_INT 3
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 3
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 3
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 3
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 3
23187: NEG
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 3
23198: NEG
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 3
23210: NEG
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: NEG
23223: PUSH
23224: LD_INT 3
23226: NEG
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23263: LD_ADDR_VAR 0 42
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 1
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 1
23321: NEG
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: LD_INT 2
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 2
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 2
23429: NEG
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 2
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: NEG
23454: PUSH
23455: LD_INT 3
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: LD_INT 3
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 3
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: LD_INT 2
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 3
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 3
23560: NEG
23561: PUSH
23562: LD_INT 2
23564: NEG
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 3
23572: NEG
23573: PUSH
23574: LD_INT 3
23576: NEG
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23613: LD_ADDR_VAR 0 43
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 0
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: LD_INT 2
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: LD_INT 2
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: NEG
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 2
23779: NEG
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 2
23790: NEG
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 1
23802: NEG
23803: PUSH
23804: LD_INT 3
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 3
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 3
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 3
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 0
23877: PUSH
23878: LD_INT 3
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 2
23898: NEG
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 3
23909: NEG
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 3
23920: NEG
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23961: LD_ADDR_VAR 0 44
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: LD_INT 2
24046: NEG
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 2
24116: NEG
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 2
24127: NEG
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: LD_INT 3
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 2
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 3
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 2
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 3
24204: PUSH
24205: LD_INT 3
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 3
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 3
24235: NEG
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 3
24246: NEG
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: NEG
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: NEG
24271: PUSH
24272: LD_INT 3
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24311: LD_ADDR_VAR 0 45
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: LD_INT 2
24396: NEG
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 2
24489: NEG
24490: PUSH
24491: LD_INT 2
24493: NEG
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: NEG
24502: PUSH
24503: LD_INT 3
24505: NEG
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 3
24517: NEG
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 3
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 3
24547: PUSH
24548: LD_INT 2
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 3
24557: PUSH
24558: LD_INT 3
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: PUSH
24568: LD_INT 3
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 3
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 3
24608: NEG
24609: PUSH
24610: LD_INT 2
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 3
24620: NEG
24621: PUSH
24622: LD_INT 3
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24661: LD_ADDR_VAR 0 46
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: LD_INT 2
24746: NEG
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: NEG
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 2
24838: NEG
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 3
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 3
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: NEG
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 3
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 3
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 3
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 3
24957: NEG
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 3
24968: NEG
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25009: LD_ADDR_VAR 0 47
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: LD_INT 2
25094: NEG
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25160: LD_ADDR_VAR 0 48
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 2
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25307: LD_ADDR_VAR 0 49
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25451: LD_ADDR_VAR 0 50
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: NEG
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25595: LD_ADDR_VAR 0 51
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 2
25707: NEG
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25742: LD_ADDR_VAR 0 52
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 2
25846: NEG
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25893: LD_ADDR_VAR 0 53
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 2
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: NEG
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 2
26092: NEG
26093: PUSH
26094: LD_INT 2
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26123: LD_ADDR_VAR 0 54
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 2
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: LD_INT 2
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26353: LD_ADDR_VAR 0 55
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: NEG
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: NEG
26553: PUSH
26554: LD_INT 2
26556: NEG
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26583: LD_ADDR_VAR 0 56
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 2
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: NEG
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26813: LD_ADDR_VAR 0 57
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 2
27000: NEG
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 2
27012: NEG
27013: PUSH
27014: LD_INT 2
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27043: LD_ADDR_VAR 0 58
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: LD_INT 2
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 2
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27273: LD_ADDR_VAR 0 59
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27361: LD_ADDR_VAR 0 60
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27449: LD_ADDR_VAR 0 61
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27537: LD_ADDR_VAR 0 62
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27625: LD_ADDR_VAR 0 63
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27713: LD_ADDR_VAR 0 64
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: ST_TO_ADDR
// end ; 1 :
27801: GO 33698
27803: LD_INT 1
27805: DOUBLE
27806: EQUAL
27807: IFTRUE 27811
27809: GO 30434
27811: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27812: LD_ADDR_VAR 0 11
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: LD_INT 3
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 3
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27856: LD_ADDR_VAR 0 12
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 3
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 3
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27897: LD_ADDR_VAR 0 13
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: LD_INT 3
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: LD_INT 3
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27937: LD_ADDR_VAR 0 14
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 3
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27978: LD_ADDR_VAR 0 15
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 3
27996: NEG
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 3
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28022: LD_ADDR_VAR 0 16
28026: PUSH
28027: LD_INT 2
28029: NEG
28030: PUSH
28031: LD_INT 3
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 3
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 3
28053: NEG
28054: PUSH
28055: LD_INT 3
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28068: LD_ADDR_VAR 0 17
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: LD_INT 3
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 3
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 2
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28112: LD_ADDR_VAR 0 18
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28153: LD_ADDR_VAR 0 19
28157: PUSH
28158: LD_INT 3
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 3
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28193: LD_ADDR_VAR 0 20
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 3
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28234: LD_ADDR_VAR 0 21
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 3
28252: NEG
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 3
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28278: LD_ADDR_VAR 0 22
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: LD_INT 3
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 3
28297: NEG
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 3
28309: NEG
28310: PUSH
28311: LD_INT 3
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28324: LD_ADDR_VAR 0 23
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: LD_INT 3
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 4
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 3
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28368: LD_ADDR_VAR 0 24
28372: PUSH
28373: LD_INT 3
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 4
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28409: LD_ADDR_VAR 0 25
28413: PUSH
28414: LD_INT 3
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 4
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 3
28436: PUSH
28437: LD_INT 4
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28449: LD_ADDR_VAR 0 26
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: LD_INT 3
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: LD_INT 4
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28490: LD_ADDR_VAR 0 27
28494: PUSH
28495: LD_INT 3
28497: NEG
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 3
28508: NEG
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 4
28519: NEG
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28534: LD_ADDR_VAR 0 28
28538: PUSH
28539: LD_INT 3
28541: NEG
28542: PUSH
28543: LD_INT 3
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 3
28553: NEG
28554: PUSH
28555: LD_INT 4
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 4
28565: NEG
28566: PUSH
28567: LD_INT 3
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28580: LD_ADDR_VAR 0 29
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: LD_INT 3
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 3
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 4
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 4
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 3
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: LD_INT 5
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 5
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 4
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 6
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 6
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: LD_INT 5
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28735: LD_ADDR_VAR 0 30
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 4
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 4
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 4
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 5
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 5
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 5
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 6
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 6
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28878: LD_ADDR_VAR 0 31
28882: PUSH
28883: LD_INT 3
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 3
28895: PUSH
28896: LD_INT 3
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 4
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 4
28925: PUSH
28926: LD_INT 4
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 3
28935: PUSH
28936: LD_INT 4
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 5
28945: PUSH
28946: LD_INT 4
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 5
28955: PUSH
28956: LD_INT 5
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 4
28965: PUSH
28966: LD_INT 5
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 6
28975: PUSH
28976: LD_INT 5
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 6
28985: PUSH
28986: LD_INT 6
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 5
28995: PUSH
28996: LD_INT 6
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29017: LD_ADDR_VAR 0 32
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: LD_INT 3
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 4
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 4
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 5
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 5
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 4
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 6
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 6
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: LD_INT 5
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29160: LD_ADDR_VAR 0 33
29164: PUSH
29165: LD_INT 2
29167: NEG
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: NEG
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 3
29189: NEG
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 3
29201: NEG
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 4
29212: NEG
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 4
29223: NEG
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 4
29235: NEG
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 5
29246: NEG
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 5
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 5
29269: NEG
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 6
29280: NEG
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 6
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29315: LD_ADDR_VAR 0 34
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 3
29334: NEG
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: NEG
29347: PUSH
29348: LD_INT 3
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: LD_INT 4
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 4
29370: NEG
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 4
29382: NEG
29383: PUSH
29384: LD_INT 4
29386: NEG
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 4
29394: NEG
29395: PUSH
29396: LD_INT 5
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 5
29406: NEG
29407: PUSH
29408: LD_INT 4
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 5
29418: NEG
29419: PUSH
29420: LD_INT 5
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 5
29430: NEG
29431: PUSH
29432: LD_INT 6
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 6
29442: NEG
29443: PUSH
29444: LD_INT 5
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 6
29454: NEG
29455: PUSH
29456: LD_INT 6
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29478: LD_ADDR_VAR 0 41
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29522: LD_ADDR_VAR 0 42
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29563: LD_ADDR_VAR 0 43
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 3
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29603: LD_ADDR_VAR 0 44
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29644: LD_ADDR_VAR 0 45
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29688: LD_ADDR_VAR 0 46
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 2
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: LD_INT 3
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: NEG
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29734: LD_ADDR_VAR 0 47
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29767: LD_ADDR_VAR 0 48
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29798: LD_ADDR_VAR 0 49
29802: PUSH
29803: LD_INT 3
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: LD_INT 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29827: LD_ADDR_VAR 0 50
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 3
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29856: LD_ADDR_VAR 0 51
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29887: LD_ADDR_VAR 0 52
29891: PUSH
29892: LD_INT 3
29894: NEG
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 3
29906: NEG
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29920: LD_ADDR_VAR 0 53
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 3
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 2
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29964: LD_ADDR_VAR 0 54
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 3
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: LIST
30004: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30005: LD_ADDR_VAR 0 55
30009: PUSH
30010: LD_INT 3
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 3
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30045: LD_ADDR_VAR 0 56
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 3
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 2
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30086: LD_ADDR_VAR 0 57
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 3
30104: NEG
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: NEG
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30130: LD_ADDR_VAR 0 58
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 3
30149: NEG
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: LD_INT 3
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: LIST
30175: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30176: LD_ADDR_VAR 0 59
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30220: LD_ADDR_VAR 0 60
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30261: LD_ADDR_VAR 0 61
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: LIST
30300: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30301: LD_ADDR_VAR 0 62
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30342: LD_ADDR_VAR 0 63
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30386: LD_ADDR_VAR 0 64
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 2
30417: NEG
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
// end ; 2 :
30432: GO 33698
30434: LD_INT 2
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 33697
30442: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30443: LD_ADDR_VAR 0 29
30447: PUSH
30448: LD_INT 4
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 5
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 4
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 5
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 4
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 4
30573: PUSH
30574: LD_INT 4
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 4
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 2
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 4
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 4
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: LD_INT 5
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: LD_INT 4
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: LD_INT 5
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 3
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 4
30782: NEG
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 4
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 4
30805: NEG
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: NEG
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 4
30828: NEG
30829: PUSH
30830: LD_INT 4
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 4
30840: NEG
30841: PUSH
30842: LD_INT 5
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: LD_INT 4
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: LD_INT 3
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 5
30888: NEG
30889: PUSH
30890: LD_INT 4
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 5
30900: NEG
30901: PUSH
30902: LD_INT 5
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: LD_INT 5
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 5
30924: NEG
30925: PUSH
30926: LD_INT 3
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30981: LD_ADDR_VAR 0 30
30985: PUSH
30986: LD_INT 4
30988: PUSH
30989: LD_INT 4
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 4
30998: PUSH
30999: LD_INT 3
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 5
31008: PUSH
31009: LD_INT 4
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: LD_INT 5
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 4
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: LD_INT 4
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: LD_INT 3
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 5
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: LD_INT 5
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 3
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: LD_INT 3
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: LD_INT 4
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 2
31160: NEG
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 4
31171: NEG
31172: PUSH
31173: LD_INT 0
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 4
31182: NEG
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 3
31205: NEG
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 4
31216: NEG
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 5
31227: NEG
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 5
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 5
31250: NEG
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 3
31262: NEG
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: LD_INT 3
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: LD_INT 4
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 4
31333: NEG
31334: PUSH
31335: LD_INT 3
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 4
31345: NEG
31346: PUSH
31347: LD_INT 4
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: LD_INT 4
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 4
31369: NEG
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: LD_INT 4
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 5
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 4
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: LD_INT 3
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 4
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 5
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: LD_INT 5
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31528: LD_ADDR_VAR 0 31
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 4
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 5
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 5
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: LD_INT 4
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: LD_INT 3
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: LD_INT 5
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 3
31628: NEG
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 3
31673: NEG
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 4
31684: NEG
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 4
31695: NEG
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 4
31707: NEG
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 4
31730: NEG
31731: PUSH
31732: LD_INT 4
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 4
31742: NEG
31743: PUSH
31744: LD_INT 5
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: LD_INT 4
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 4
31778: NEG
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 5
31790: NEG
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 5
31802: NEG
31803: PUSH
31804: LD_INT 5
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 3
31814: NEG
31815: PUSH
31816: LD_INT 5
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 5
31826: NEG
31827: PUSH
31828: LD_INT 3
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 3
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 4
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: LD_INT 4
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: LD_INT 4
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 4
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 4
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 5
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 4
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32078: LD_ADDR_VAR 0 32
32082: PUSH
32083: LD_INT 4
32085: NEG
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: NEG
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 3
32108: NEG
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 3
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 4
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 5
32141: NEG
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 5
32152: NEG
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 5
32164: NEG
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: NEG
32188: PUSH
32189: LD_INT 3
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 3
32199: NEG
32200: PUSH
32201: LD_INT 4
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: NEG
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: NEG
32236: PUSH
32237: LD_INT 2
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 4
32259: NEG
32260: PUSH
32261: LD_INT 4
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: LD_INT 4
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 4
32283: NEG
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 4
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 5
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 3
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 3
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 4
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: LD_INT 5
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: LD_INT 5
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 3
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 3
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 4
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: LD_INT 2
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 4
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 4
32490: PUSH
32491: LD_INT 4
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 5
32510: PUSH
32511: LD_INT 4
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 5
32520: PUSH
32521: LD_INT 5
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 4
32530: PUSH
32531: LD_INT 5
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: LD_INT 4
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 3
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: LD_INT 3
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: LD_INT 5
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32625: LD_ADDR_VAR 0 33
32629: PUSH
32630: LD_INT 4
32632: NEG
32633: PUSH
32634: LD_INT 4
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 4
32644: NEG
32645: PUSH
32646: LD_INT 5
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 3
32656: NEG
32657: PUSH
32658: LD_INT 4
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: NEG
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 4
32680: NEG
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 5
32692: NEG
32693: PUSH
32694: LD_INT 4
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 5
32704: NEG
32705: PUSH
32706: LD_INT 5
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 5
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 5
32728: NEG
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 3
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: LD_INT 3
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: LD_INT 4
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: LD_INT 4
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 4
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 4
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 5
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 5
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 3
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 4
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: LD_INT 4
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 4
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 3
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 4
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 4
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 5
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 5
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 5
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33163: LD_ADDR_VAR 0 34
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 4
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 5
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 4
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 4
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 5
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 5
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 3
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 4
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: LD_INT 4
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 4
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: LD_INT 4
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: LD_INT 5
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 4
33405: PUSH
33406: LD_INT 5
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 3
33415: PUSH
33416: LD_INT 4
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: LD_INT 3
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 5
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: LD_INT 5
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 4
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 4
33548: NEG
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 4
33559: NEG
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 3
33571: NEG
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 3
33582: NEG
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 4
33593: NEG
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 5
33604: NEG
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 5
33615: NEG
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 5
33627: NEG
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 3
33639: NEG
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: ST_TO_ADDR
// end ; end ;
33695: GO 33698
33697: POP
// case btype of b_depot , b_warehouse :
33698: LD_VAR 0 1
33702: PUSH
33703: LD_INT 0
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33717
33709: LD_INT 1
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33918
33717: POP
// case nation of nation_american :
33718: LD_VAR 0 5
33722: PUSH
33723: LD_INT 1
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33731
33729: GO 33787
33731: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33732: LD_ADDR_VAR 0 9
33736: PUSH
33737: LD_VAR 0 11
33741: PUSH
33742: LD_VAR 0 12
33746: PUSH
33747: LD_VAR 0 13
33751: PUSH
33752: LD_VAR 0 14
33756: PUSH
33757: LD_VAR 0 15
33761: PUSH
33762: LD_VAR 0 16
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: PUSH
33775: LD_VAR 0 4
33779: PUSH
33780: LD_INT 1
33782: PLUS
33783: ARRAY
33784: ST_TO_ADDR
33785: GO 33916
33787: LD_INT 2
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33851
33795: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_VAR 0 17
33805: PUSH
33806: LD_VAR 0 18
33810: PUSH
33811: LD_VAR 0 19
33815: PUSH
33816: LD_VAR 0 20
33820: PUSH
33821: LD_VAR 0 21
33825: PUSH
33826: LD_VAR 0 22
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: PUSH
33839: LD_VAR 0 4
33843: PUSH
33844: LD_INT 1
33846: PLUS
33847: ARRAY
33848: ST_TO_ADDR
33849: GO 33916
33851: LD_INT 3
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33915
33859: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_VAR 0 23
33869: PUSH
33870: LD_VAR 0 24
33874: PUSH
33875: LD_VAR 0 25
33879: PUSH
33880: LD_VAR 0 26
33884: PUSH
33885: LD_VAR 0 27
33889: PUSH
33890: LD_VAR 0 28
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: PUSH
33903: LD_VAR 0 4
33907: PUSH
33908: LD_INT 1
33910: PLUS
33911: ARRAY
33912: ST_TO_ADDR
33913: GO 33916
33915: POP
33916: GO 34471
33918: LD_INT 2
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33932
33924: LD_INT 3
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33988
33932: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33933: LD_ADDR_VAR 0 9
33937: PUSH
33938: LD_VAR 0 29
33942: PUSH
33943: LD_VAR 0 30
33947: PUSH
33948: LD_VAR 0 31
33952: PUSH
33953: LD_VAR 0 32
33957: PUSH
33958: LD_VAR 0 33
33962: PUSH
33963: LD_VAR 0 34
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: PUSH
33976: LD_VAR 0 4
33980: PUSH
33981: LD_INT 1
33983: PLUS
33984: ARRAY
33985: ST_TO_ADDR
33986: GO 34471
33988: LD_INT 16
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 34050
33994: LD_INT 17
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34050
34000: LD_INT 18
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34050
34006: LD_INT 19
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34050
34012: LD_INT 22
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34050
34018: LD_INT 20
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34050
34024: LD_INT 21
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34050
34030: LD_INT 23
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34050
34036: LD_INT 24
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34050
34042: LD_INT 25
34044: DOUBLE
34045: EQUAL
34046: IFTRUE 34050
34048: GO 34106
34050: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34051: LD_ADDR_VAR 0 9
34055: PUSH
34056: LD_VAR 0 35
34060: PUSH
34061: LD_VAR 0 36
34065: PUSH
34066: LD_VAR 0 37
34070: PUSH
34071: LD_VAR 0 38
34075: PUSH
34076: LD_VAR 0 39
34080: PUSH
34081: LD_VAR 0 40
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: PUSH
34094: LD_VAR 0 4
34098: PUSH
34099: LD_INT 1
34101: PLUS
34102: ARRAY
34103: ST_TO_ADDR
34104: GO 34471
34106: LD_INT 6
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34162
34112: LD_INT 7
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34162
34118: LD_INT 8
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34162
34124: LD_INT 13
34126: DOUBLE
34127: EQUAL
34128: IFTRUE 34162
34130: LD_INT 12
34132: DOUBLE
34133: EQUAL
34134: IFTRUE 34162
34136: LD_INT 15
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34162
34142: LD_INT 11
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34162
34148: LD_INT 14
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34162
34154: LD_INT 10
34156: DOUBLE
34157: EQUAL
34158: IFTRUE 34162
34160: GO 34218
34162: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34163: LD_ADDR_VAR 0 9
34167: PUSH
34168: LD_VAR 0 41
34172: PUSH
34173: LD_VAR 0 42
34177: PUSH
34178: LD_VAR 0 43
34182: PUSH
34183: LD_VAR 0 44
34187: PUSH
34188: LD_VAR 0 45
34192: PUSH
34193: LD_VAR 0 46
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: PUSH
34206: LD_VAR 0 4
34210: PUSH
34211: LD_INT 1
34213: PLUS
34214: ARRAY
34215: ST_TO_ADDR
34216: GO 34471
34218: LD_INT 36
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34282
34226: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34227: LD_ADDR_VAR 0 9
34231: PUSH
34232: LD_VAR 0 47
34236: PUSH
34237: LD_VAR 0 48
34241: PUSH
34242: LD_VAR 0 49
34246: PUSH
34247: LD_VAR 0 50
34251: PUSH
34252: LD_VAR 0 51
34256: PUSH
34257: LD_VAR 0 52
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: PUSH
34270: LD_VAR 0 4
34274: PUSH
34275: LD_INT 1
34277: PLUS
34278: ARRAY
34279: ST_TO_ADDR
34280: GO 34471
34282: LD_INT 4
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34308
34288: LD_INT 5
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34308
34294: LD_INT 34
34296: DOUBLE
34297: EQUAL
34298: IFTRUE 34308
34300: LD_INT 37
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34364
34308: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34309: LD_ADDR_VAR 0 9
34313: PUSH
34314: LD_VAR 0 53
34318: PUSH
34319: LD_VAR 0 54
34323: PUSH
34324: LD_VAR 0 55
34328: PUSH
34329: LD_VAR 0 56
34333: PUSH
34334: LD_VAR 0 57
34338: PUSH
34339: LD_VAR 0 58
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: PUSH
34352: LD_VAR 0 4
34356: PUSH
34357: LD_INT 1
34359: PLUS
34360: ARRAY
34361: ST_TO_ADDR
34362: GO 34471
34364: LD_INT 31
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34414
34370: LD_INT 32
34372: DOUBLE
34373: EQUAL
34374: IFTRUE 34414
34376: LD_INT 33
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34414
34382: LD_INT 27
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34414
34388: LD_INT 26
34390: DOUBLE
34391: EQUAL
34392: IFTRUE 34414
34394: LD_INT 28
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34414
34400: LD_INT 29
34402: DOUBLE
34403: EQUAL
34404: IFTRUE 34414
34406: LD_INT 30
34408: DOUBLE
34409: EQUAL
34410: IFTRUE 34414
34412: GO 34470
34414: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34415: LD_ADDR_VAR 0 9
34419: PUSH
34420: LD_VAR 0 59
34424: PUSH
34425: LD_VAR 0 60
34429: PUSH
34430: LD_VAR 0 61
34434: PUSH
34435: LD_VAR 0 62
34439: PUSH
34440: LD_VAR 0 63
34444: PUSH
34445: LD_VAR 0 64
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: PUSH
34458: LD_VAR 0 4
34462: PUSH
34463: LD_INT 1
34465: PLUS
34466: ARRAY
34467: ST_TO_ADDR
34468: GO 34471
34470: POP
// temp_list2 = [ ] ;
34471: LD_ADDR_VAR 0 10
34475: PUSH
34476: EMPTY
34477: ST_TO_ADDR
// for i in temp_list do
34478: LD_ADDR_VAR 0 8
34482: PUSH
34483: LD_VAR 0 9
34487: PUSH
34488: FOR_IN
34489: IFFALSE 34541
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34491: LD_ADDR_VAR 0 10
34495: PUSH
34496: LD_VAR 0 10
34500: PUSH
34501: LD_VAR 0 8
34505: PUSH
34506: LD_INT 1
34508: ARRAY
34509: PUSH
34510: LD_VAR 0 2
34514: PLUS
34515: PUSH
34516: LD_VAR 0 8
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PUSH
34525: LD_VAR 0 3
34529: PLUS
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: EMPTY
34536: LIST
34537: ADD
34538: ST_TO_ADDR
34539: GO 34488
34541: POP
34542: POP
// result = temp_list2 ;
34543: LD_ADDR_VAR 0 7
34547: PUSH
34548: LD_VAR 0 10
34552: ST_TO_ADDR
// end ;
34553: LD_VAR 0 7
34557: RET
// export function EnemyInRange ( unit , dist ) ; begin
34558: LD_INT 0
34560: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34561: LD_ADDR_VAR 0 3
34565: PUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 255
34575: PPUSH
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL_OW 250
34585: PPUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL_OW 251
34595: PPUSH
34596: LD_VAR 0 2
34600: PPUSH
34601: CALL 7931 0 4
34605: PUSH
34606: LD_INT 4
34608: ARRAY
34609: ST_TO_ADDR
// end ;
34610: LD_VAR 0 3
34614: RET
// export function PlayerSeeMe ( unit ) ; begin
34615: LD_INT 0
34617: PPUSH
// result := See ( your_side , unit ) ;
34618: LD_ADDR_VAR 0 2
34622: PUSH
34623: LD_OWVAR 2
34627: PPUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 292
34637: ST_TO_ADDR
// end ;
34638: LD_VAR 0 2
34642: RET
// export function ReverseDir ( unit ) ; begin
34643: LD_INT 0
34645: PPUSH
// if not unit then
34646: LD_VAR 0 1
34650: NOT
34651: IFFALSE 34655
// exit ;
34653: GO 34678
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34655: LD_ADDR_VAR 0 2
34659: PUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: CALL_OW 254
34669: PUSH
34670: LD_INT 3
34672: PLUS
34673: PUSH
34674: LD_INT 6
34676: MOD
34677: ST_TO_ADDR
// end ;
34678: LD_VAR 0 2
34682: RET
// export function ReverseArray ( array ) ; var i ; begin
34683: LD_INT 0
34685: PPUSH
34686: PPUSH
// if not array then
34687: LD_VAR 0 1
34691: NOT
34692: IFFALSE 34696
// exit ;
34694: GO 34751
// result := [ ] ;
34696: LD_ADDR_VAR 0 2
34700: PUSH
34701: EMPTY
34702: ST_TO_ADDR
// for i := array downto 1 do
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: DOUBLE
34709: LD_VAR 0 1
34713: INC
34714: ST_TO_ADDR
34715: LD_INT 1
34717: PUSH
34718: FOR_DOWNTO
34719: IFFALSE 34749
// result := Join ( result , array [ i ] ) ;
34721: LD_ADDR_VAR 0 2
34725: PUSH
34726: LD_VAR 0 2
34730: PPUSH
34731: LD_VAR 0 1
34735: PUSH
34736: LD_VAR 0 3
34740: ARRAY
34741: PPUSH
34742: CALL 39416 0 2
34746: ST_TO_ADDR
34747: GO 34718
34749: POP
34750: POP
// end ;
34751: LD_VAR 0 2
34755: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34756: LD_INT 0
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
// if not unit or not hexes then
34764: LD_VAR 0 1
34768: NOT
34769: PUSH
34770: LD_VAR 0 2
34774: NOT
34775: OR
34776: IFFALSE 34780
// exit ;
34778: GO 34903
// dist := 9999 ;
34780: LD_ADDR_VAR 0 5
34784: PUSH
34785: LD_INT 9999
34787: ST_TO_ADDR
// for i = 1 to hexes do
34788: LD_ADDR_VAR 0 4
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_VAR 0 2
34802: PUSH
34803: FOR_TO
34804: IFFALSE 34891
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34806: LD_ADDR_VAR 0 6
34810: PUSH
34811: LD_VAR 0 1
34815: PPUSH
34816: LD_VAR 0 2
34820: PUSH
34821: LD_VAR 0 4
34825: ARRAY
34826: PUSH
34827: LD_INT 1
34829: ARRAY
34830: PPUSH
34831: LD_VAR 0 2
34835: PUSH
34836: LD_VAR 0 4
34840: ARRAY
34841: PUSH
34842: LD_INT 2
34844: ARRAY
34845: PPUSH
34846: CALL_OW 297
34850: ST_TO_ADDR
// if tdist < dist then
34851: LD_VAR 0 6
34855: PUSH
34856: LD_VAR 0 5
34860: LESS
34861: IFFALSE 34889
// begin hex := hexes [ i ] ;
34863: LD_ADDR_VAR 0 8
34867: PUSH
34868: LD_VAR 0 2
34872: PUSH
34873: LD_VAR 0 4
34877: ARRAY
34878: ST_TO_ADDR
// dist := tdist ;
34879: LD_ADDR_VAR 0 5
34883: PUSH
34884: LD_VAR 0 6
34888: ST_TO_ADDR
// end ; end ;
34889: GO 34803
34891: POP
34892: POP
// result := hex ;
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_VAR 0 8
34902: ST_TO_ADDR
// end ;
34903: LD_VAR 0 3
34907: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34908: LD_INT 0
34910: PPUSH
34911: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34912: LD_VAR 0 1
34916: NOT
34917: PUSH
34918: LD_VAR 0 1
34922: PUSH
34923: LD_INT 21
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 23
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PPUSH
34947: CALL_OW 69
34951: IN
34952: NOT
34953: OR
34954: IFFALSE 34958
// exit ;
34956: GO 35005
// for i = 1 to 3 do
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: DOUBLE
34964: LD_INT 1
34966: DEC
34967: ST_TO_ADDR
34968: LD_INT 3
34970: PUSH
34971: FOR_TO
34972: IFFALSE 35003
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 250
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 251
34993: PPUSH
34994: LD_INT 1
34996: PPUSH
34997: CALL_OW 453
35001: GO 34971
35003: POP
35004: POP
// end ;
35005: LD_VAR 0 2
35009: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35010: LD_INT 0
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
// if not unit or not enemy_unit then
35018: LD_VAR 0 1
35022: NOT
35023: PUSH
35024: LD_VAR 0 2
35028: NOT
35029: OR
35030: IFFALSE 35034
// exit ;
35032: GO 35501
// if GetLives ( i ) < 250 then
35034: LD_VAR 0 4
35038: PPUSH
35039: CALL_OW 256
35043: PUSH
35044: LD_INT 250
35046: LESS
35047: IFFALSE 35060
// begin ComAutodestruct ( i ) ;
35049: LD_VAR 0 4
35053: PPUSH
35054: CALL 34908 0 1
// exit ;
35058: GO 35501
// end ; x := GetX ( enemy_unit ) ;
35060: LD_ADDR_VAR 0 7
35064: PUSH
35065: LD_VAR 0 2
35069: PPUSH
35070: CALL_OW 250
35074: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35075: LD_ADDR_VAR 0 8
35079: PUSH
35080: LD_VAR 0 2
35084: PPUSH
35085: CALL_OW 251
35089: ST_TO_ADDR
// if not x or not y then
35090: LD_VAR 0 7
35094: NOT
35095: PUSH
35096: LD_VAR 0 8
35100: NOT
35101: OR
35102: IFFALSE 35106
// exit ;
35104: GO 35501
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35106: LD_ADDR_VAR 0 6
35110: PUSH
35111: LD_VAR 0 7
35115: PPUSH
35116: LD_INT 0
35118: PPUSH
35119: LD_INT 4
35121: PPUSH
35122: CALL_OW 272
35126: PUSH
35127: LD_VAR 0 8
35131: PPUSH
35132: LD_INT 0
35134: PPUSH
35135: LD_INT 4
35137: PPUSH
35138: CALL_OW 273
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_VAR 0 7
35151: PPUSH
35152: LD_INT 1
35154: PPUSH
35155: LD_INT 4
35157: PPUSH
35158: CALL_OW 272
35162: PUSH
35163: LD_VAR 0 8
35167: PPUSH
35168: LD_INT 1
35170: PPUSH
35171: LD_INT 4
35173: PPUSH
35174: CALL_OW 273
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_VAR 0 7
35187: PPUSH
35188: LD_INT 2
35190: PPUSH
35191: LD_INT 4
35193: PPUSH
35194: CALL_OW 272
35198: PUSH
35199: LD_VAR 0 8
35203: PPUSH
35204: LD_INT 2
35206: PPUSH
35207: LD_INT 4
35209: PPUSH
35210: CALL_OW 273
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_VAR 0 7
35223: PPUSH
35224: LD_INT 3
35226: PPUSH
35227: LD_INT 4
35229: PPUSH
35230: CALL_OW 272
35234: PUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 3
35242: PPUSH
35243: LD_INT 4
35245: PPUSH
35246: CALL_OW 273
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_VAR 0 7
35259: PPUSH
35260: LD_INT 4
35262: PPUSH
35263: LD_INT 4
35265: PPUSH
35266: CALL_OW 272
35270: PUSH
35271: LD_VAR 0 8
35275: PPUSH
35276: LD_INT 4
35278: PPUSH
35279: LD_INT 4
35281: PPUSH
35282: CALL_OW 273
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_VAR 0 7
35295: PPUSH
35296: LD_INT 5
35298: PPUSH
35299: LD_INT 4
35301: PPUSH
35302: CALL_OW 272
35306: PUSH
35307: LD_VAR 0 8
35311: PPUSH
35312: LD_INT 5
35314: PPUSH
35315: LD_INT 4
35317: PPUSH
35318: CALL_OW 273
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// for i = tmp downto 1 do
35335: LD_ADDR_VAR 0 4
35339: PUSH
35340: DOUBLE
35341: LD_VAR 0 6
35345: INC
35346: ST_TO_ADDR
35347: LD_INT 1
35349: PUSH
35350: FOR_DOWNTO
35351: IFFALSE 35452
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35353: LD_VAR 0 6
35357: PUSH
35358: LD_VAR 0 4
35362: ARRAY
35363: PUSH
35364: LD_INT 1
35366: ARRAY
35367: PPUSH
35368: LD_VAR 0 6
35372: PUSH
35373: LD_VAR 0 4
35377: ARRAY
35378: PUSH
35379: LD_INT 2
35381: ARRAY
35382: PPUSH
35383: CALL_OW 488
35387: NOT
35388: PUSH
35389: LD_VAR 0 6
35393: PUSH
35394: LD_VAR 0 4
35398: ARRAY
35399: PUSH
35400: LD_INT 1
35402: ARRAY
35403: PPUSH
35404: LD_VAR 0 6
35408: PUSH
35409: LD_VAR 0 4
35413: ARRAY
35414: PUSH
35415: LD_INT 2
35417: ARRAY
35418: PPUSH
35419: CALL_OW 428
35423: PUSH
35424: LD_INT 0
35426: NONEQUAL
35427: OR
35428: IFFALSE 35450
// tmp := Delete ( tmp , i ) ;
35430: LD_ADDR_VAR 0 6
35434: PUSH
35435: LD_VAR 0 6
35439: PPUSH
35440: LD_VAR 0 4
35444: PPUSH
35445: CALL_OW 3
35449: ST_TO_ADDR
35450: GO 35350
35452: POP
35453: POP
// j := GetClosestHex ( unit , tmp ) ;
35454: LD_ADDR_VAR 0 5
35458: PUSH
35459: LD_VAR 0 1
35463: PPUSH
35464: LD_VAR 0 6
35468: PPUSH
35469: CALL 34756 0 2
35473: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35474: LD_VAR 0 1
35478: PPUSH
35479: LD_VAR 0 5
35483: PUSH
35484: LD_INT 1
35486: ARRAY
35487: PPUSH
35488: LD_VAR 0 5
35492: PUSH
35493: LD_INT 2
35495: ARRAY
35496: PPUSH
35497: CALL_OW 111
// end ;
35501: LD_VAR 0 3
35505: RET
// export function PrepareApemanSoldier ( ) ; begin
35506: LD_INT 0
35508: PPUSH
// uc_nation := 0 ;
35509: LD_ADDR_OWVAR 21
35513: PUSH
35514: LD_INT 0
35516: ST_TO_ADDR
// hc_sex := sex_male ;
35517: LD_ADDR_OWVAR 27
35521: PUSH
35522: LD_INT 1
35524: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35525: LD_ADDR_OWVAR 28
35529: PUSH
35530: LD_INT 15
35532: ST_TO_ADDR
// hc_gallery :=  ;
35533: LD_ADDR_OWVAR 33
35537: PUSH
35538: LD_STRING 
35540: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35541: LD_ADDR_OWVAR 31
35545: PUSH
35546: LD_INT 0
35548: PPUSH
35549: LD_INT 3
35551: PPUSH
35552: CALL_OW 12
35556: PUSH
35557: LD_INT 0
35559: PPUSH
35560: LD_INT 3
35562: PPUSH
35563: CALL_OW 12
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: ST_TO_ADDR
// end ;
35580: LD_VAR 0 1
35584: RET
// export function PrepareApemanEngineer ( ) ; begin
35585: LD_INT 0
35587: PPUSH
// uc_nation := 0 ;
35588: LD_ADDR_OWVAR 21
35592: PUSH
35593: LD_INT 0
35595: ST_TO_ADDR
// hc_sex := sex_male ;
35596: LD_ADDR_OWVAR 27
35600: PUSH
35601: LD_INT 1
35603: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35604: LD_ADDR_OWVAR 28
35608: PUSH
35609: LD_INT 16
35611: ST_TO_ADDR
// hc_gallery :=  ;
35612: LD_ADDR_OWVAR 33
35616: PUSH
35617: LD_STRING 
35619: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35620: LD_ADDR_OWVAR 31
35624: PUSH
35625: LD_INT 0
35627: PPUSH
35628: LD_INT 3
35630: PPUSH
35631: CALL_OW 12
35635: PUSH
35636: LD_INT 0
35638: PPUSH
35639: LD_INT 3
35641: PPUSH
35642: CALL_OW 12
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// end ;
35659: LD_VAR 0 1
35663: RET
// export function PrepareApeman ( agressivity ) ; begin
35664: LD_INT 0
35666: PPUSH
// uc_side := 0 ;
35667: LD_ADDR_OWVAR 20
35671: PUSH
35672: LD_INT 0
35674: ST_TO_ADDR
// uc_nation := 0 ;
35675: LD_ADDR_OWVAR 21
35679: PUSH
35680: LD_INT 0
35682: ST_TO_ADDR
// hc_sex := sex_male ;
35683: LD_ADDR_OWVAR 27
35687: PUSH
35688: LD_INT 1
35690: ST_TO_ADDR
// hc_class := class_apeman ;
35691: LD_ADDR_OWVAR 28
35695: PUSH
35696: LD_INT 12
35698: ST_TO_ADDR
// hc_gallery :=  ;
35699: LD_ADDR_OWVAR 33
35703: PUSH
35704: LD_STRING 
35706: ST_TO_ADDR
// if agressivity = 0 then
35707: LD_VAR 0 1
35711: PUSH
35712: LD_INT 0
35714: EQUAL
35715: IFFALSE 35727
// hc_agressivity := 0 else
35717: LD_ADDR_OWVAR 35
35721: PUSH
35722: LD_INT 0
35724: ST_TO_ADDR
35725: GO 35748
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35727: LD_ADDR_OWVAR 35
35731: PUSH
35732: LD_VAR 0 1
35736: NEG
35737: PPUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: CALL_OW 12
35747: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35748: LD_ADDR_OWVAR 31
35752: PUSH
35753: LD_INT 0
35755: PPUSH
35756: LD_INT 3
35758: PPUSH
35759: CALL_OW 12
35763: PUSH
35764: LD_INT 0
35766: PPUSH
35767: LD_INT 3
35769: PPUSH
35770: CALL_OW 12
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
// end ;
35787: LD_VAR 0 2
35791: RET
// export function PrepareTiger ( agressivity ) ; begin
35792: LD_INT 0
35794: PPUSH
// uc_side := 0 ;
35795: LD_ADDR_OWVAR 20
35799: PUSH
35800: LD_INT 0
35802: ST_TO_ADDR
// uc_nation := 0 ;
35803: LD_ADDR_OWVAR 21
35807: PUSH
35808: LD_INT 0
35810: ST_TO_ADDR
// hc_class := class_tiger ;
35811: LD_ADDR_OWVAR 28
35815: PUSH
35816: LD_INT 14
35818: ST_TO_ADDR
// hc_gallery :=  ;
35819: LD_ADDR_OWVAR 33
35823: PUSH
35824: LD_STRING 
35826: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35827: LD_ADDR_OWVAR 35
35831: PUSH
35832: LD_VAR 0 1
35836: NEG
35837: PPUSH
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 12
35847: ST_TO_ADDR
// end ;
35848: LD_VAR 0 2
35852: RET
// export function PrepareEnchidna ( ) ; begin
35853: LD_INT 0
35855: PPUSH
// uc_side := 0 ;
35856: LD_ADDR_OWVAR 20
35860: PUSH
35861: LD_INT 0
35863: ST_TO_ADDR
// uc_nation := 0 ;
35864: LD_ADDR_OWVAR 21
35868: PUSH
35869: LD_INT 0
35871: ST_TO_ADDR
// hc_class := class_baggie ;
35872: LD_ADDR_OWVAR 28
35876: PUSH
35877: LD_INT 13
35879: ST_TO_ADDR
// hc_gallery :=  ;
35880: LD_ADDR_OWVAR 33
35884: PUSH
35885: LD_STRING 
35887: ST_TO_ADDR
// end ;
35888: LD_VAR 0 1
35892: RET
// export function PrepareFrog ( ) ; begin
35893: LD_INT 0
35895: PPUSH
// uc_side := 0 ;
35896: LD_ADDR_OWVAR 20
35900: PUSH
35901: LD_INT 0
35903: ST_TO_ADDR
// uc_nation := 0 ;
35904: LD_ADDR_OWVAR 21
35908: PUSH
35909: LD_INT 0
35911: ST_TO_ADDR
// hc_class := class_frog ;
35912: LD_ADDR_OWVAR 28
35916: PUSH
35917: LD_INT 19
35919: ST_TO_ADDR
// hc_gallery :=  ;
35920: LD_ADDR_OWVAR 33
35924: PUSH
35925: LD_STRING 
35927: ST_TO_ADDR
// end ;
35928: LD_VAR 0 1
35932: RET
// export function PrepareFish ( ) ; begin
35933: LD_INT 0
35935: PPUSH
// uc_side := 0 ;
35936: LD_ADDR_OWVAR 20
35940: PUSH
35941: LD_INT 0
35943: ST_TO_ADDR
// uc_nation := 0 ;
35944: LD_ADDR_OWVAR 21
35948: PUSH
35949: LD_INT 0
35951: ST_TO_ADDR
// hc_class := class_fish ;
35952: LD_ADDR_OWVAR 28
35956: PUSH
35957: LD_INT 20
35959: ST_TO_ADDR
// hc_gallery :=  ;
35960: LD_ADDR_OWVAR 33
35964: PUSH
35965: LD_STRING 
35967: ST_TO_ADDR
// end ;
35968: LD_VAR 0 1
35972: RET
// export function PrepareBird ( ) ; begin
35973: LD_INT 0
35975: PPUSH
// uc_side := 0 ;
35976: LD_ADDR_OWVAR 20
35980: PUSH
35981: LD_INT 0
35983: ST_TO_ADDR
// uc_nation := 0 ;
35984: LD_ADDR_OWVAR 21
35988: PUSH
35989: LD_INT 0
35991: ST_TO_ADDR
// hc_class := class_phororhacos ;
35992: LD_ADDR_OWVAR 28
35996: PUSH
35997: LD_INT 18
35999: ST_TO_ADDR
// hc_gallery :=  ;
36000: LD_ADDR_OWVAR 33
36004: PUSH
36005: LD_STRING 
36007: ST_TO_ADDR
// end ;
36008: LD_VAR 0 1
36012: RET
// export function PrepareHorse ( ) ; begin
36013: LD_INT 0
36015: PPUSH
// uc_side := 0 ;
36016: LD_ADDR_OWVAR 20
36020: PUSH
36021: LD_INT 0
36023: ST_TO_ADDR
// uc_nation := 0 ;
36024: LD_ADDR_OWVAR 21
36028: PUSH
36029: LD_INT 0
36031: ST_TO_ADDR
// hc_class := class_horse ;
36032: LD_ADDR_OWVAR 28
36036: PUSH
36037: LD_INT 21
36039: ST_TO_ADDR
// hc_gallery :=  ;
36040: LD_ADDR_OWVAR 33
36044: PUSH
36045: LD_STRING 
36047: ST_TO_ADDR
// end ;
36048: LD_VAR 0 1
36052: RET
// export function PrepareMastodont ( ) ; begin
36053: LD_INT 0
36055: PPUSH
// uc_side := 0 ;
36056: LD_ADDR_OWVAR 20
36060: PUSH
36061: LD_INT 0
36063: ST_TO_ADDR
// uc_nation := 0 ;
36064: LD_ADDR_OWVAR 21
36068: PUSH
36069: LD_INT 0
36071: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36072: LD_ADDR_OWVAR 37
36076: PUSH
36077: LD_INT 31
36079: ST_TO_ADDR
// vc_control := control_rider ;
36080: LD_ADDR_OWVAR 38
36084: PUSH
36085: LD_INT 4
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 1
36092: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36093: LD_INT 0
36095: PPUSH
36096: PPUSH
36097: PPUSH
// uc_side = 0 ;
36098: LD_ADDR_OWVAR 20
36102: PUSH
36103: LD_INT 0
36105: ST_TO_ADDR
// uc_nation = 0 ;
36106: LD_ADDR_OWVAR 21
36110: PUSH
36111: LD_INT 0
36113: ST_TO_ADDR
// InitHc_All ( ) ;
36114: CALL_OW 584
// InitVc ;
36118: CALL_OW 20
// if mastodonts then
36122: LD_VAR 0 6
36126: IFFALSE 36193
// for i = 1 to mastodonts do
36128: LD_ADDR_VAR 0 11
36132: PUSH
36133: DOUBLE
36134: LD_INT 1
36136: DEC
36137: ST_TO_ADDR
36138: LD_VAR 0 6
36142: PUSH
36143: FOR_TO
36144: IFFALSE 36191
// begin vc_chassis := 31 ;
36146: LD_ADDR_OWVAR 37
36150: PUSH
36151: LD_INT 31
36153: ST_TO_ADDR
// vc_control := control_rider ;
36154: LD_ADDR_OWVAR 38
36158: PUSH
36159: LD_INT 4
36161: ST_TO_ADDR
// animal := CreateVehicle ;
36162: LD_ADDR_VAR 0 12
36166: PUSH
36167: CALL_OW 45
36171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36172: LD_VAR 0 12
36176: PPUSH
36177: LD_VAR 0 8
36181: PPUSH
36182: LD_INT 0
36184: PPUSH
36185: CALL 38321 0 3
// end ;
36189: GO 36143
36191: POP
36192: POP
// if horses then
36193: LD_VAR 0 5
36197: IFFALSE 36264
// for i = 1 to horses do
36199: LD_ADDR_VAR 0 11
36203: PUSH
36204: DOUBLE
36205: LD_INT 1
36207: DEC
36208: ST_TO_ADDR
36209: LD_VAR 0 5
36213: PUSH
36214: FOR_TO
36215: IFFALSE 36262
// begin hc_class := 21 ;
36217: LD_ADDR_OWVAR 28
36221: PUSH
36222: LD_INT 21
36224: ST_TO_ADDR
// hc_gallery :=  ;
36225: LD_ADDR_OWVAR 33
36229: PUSH
36230: LD_STRING 
36232: ST_TO_ADDR
// animal := CreateHuman ;
36233: LD_ADDR_VAR 0 12
36237: PUSH
36238: CALL_OW 44
36242: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36243: LD_VAR 0 12
36247: PPUSH
36248: LD_VAR 0 8
36252: PPUSH
36253: LD_INT 0
36255: PPUSH
36256: CALL 38321 0 3
// end ;
36260: GO 36214
36262: POP
36263: POP
// if birds then
36264: LD_VAR 0 1
36268: IFFALSE 36335
// for i = 1 to birds do
36270: LD_ADDR_VAR 0 11
36274: PUSH
36275: DOUBLE
36276: LD_INT 1
36278: DEC
36279: ST_TO_ADDR
36280: LD_VAR 0 1
36284: PUSH
36285: FOR_TO
36286: IFFALSE 36333
// begin hc_class := 18 ;
36288: LD_ADDR_OWVAR 28
36292: PUSH
36293: LD_INT 18
36295: ST_TO_ADDR
// hc_gallery =  ;
36296: LD_ADDR_OWVAR 33
36300: PUSH
36301: LD_STRING 
36303: ST_TO_ADDR
// animal := CreateHuman ;
36304: LD_ADDR_VAR 0 12
36308: PUSH
36309: CALL_OW 44
36313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36314: LD_VAR 0 12
36318: PPUSH
36319: LD_VAR 0 8
36323: PPUSH
36324: LD_INT 0
36326: PPUSH
36327: CALL 38321 0 3
// end ;
36331: GO 36285
36333: POP
36334: POP
// if tigers then
36335: LD_VAR 0 2
36339: IFFALSE 36423
// for i = 1 to tigers do
36341: LD_ADDR_VAR 0 11
36345: PUSH
36346: DOUBLE
36347: LD_INT 1
36349: DEC
36350: ST_TO_ADDR
36351: LD_VAR 0 2
36355: PUSH
36356: FOR_TO
36357: IFFALSE 36421
// begin hc_class = class_tiger ;
36359: LD_ADDR_OWVAR 28
36363: PUSH
36364: LD_INT 14
36366: ST_TO_ADDR
// hc_gallery =  ;
36367: LD_ADDR_OWVAR 33
36371: PUSH
36372: LD_STRING 
36374: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36375: LD_ADDR_OWVAR 35
36379: PUSH
36380: LD_INT 7
36382: NEG
36383: PPUSH
36384: LD_INT 7
36386: PPUSH
36387: CALL_OW 12
36391: ST_TO_ADDR
// animal := CreateHuman ;
36392: LD_ADDR_VAR 0 12
36396: PUSH
36397: CALL_OW 44
36401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36402: LD_VAR 0 12
36406: PPUSH
36407: LD_VAR 0 8
36411: PPUSH
36412: LD_INT 0
36414: PPUSH
36415: CALL 38321 0 3
// end ;
36419: GO 36356
36421: POP
36422: POP
// if apemans then
36423: LD_VAR 0 3
36427: IFFALSE 36550
// for i = 1 to apemans do
36429: LD_ADDR_VAR 0 11
36433: PUSH
36434: DOUBLE
36435: LD_INT 1
36437: DEC
36438: ST_TO_ADDR
36439: LD_VAR 0 3
36443: PUSH
36444: FOR_TO
36445: IFFALSE 36548
// begin hc_class = class_apeman ;
36447: LD_ADDR_OWVAR 28
36451: PUSH
36452: LD_INT 12
36454: ST_TO_ADDR
// hc_gallery =  ;
36455: LD_ADDR_OWVAR 33
36459: PUSH
36460: LD_STRING 
36462: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36463: LD_ADDR_OWVAR 35
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PPUSH
36472: LD_INT 2
36474: PPUSH
36475: CALL_OW 12
36479: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36480: LD_ADDR_OWVAR 31
36484: PUSH
36485: LD_INT 1
36487: PPUSH
36488: LD_INT 3
36490: PPUSH
36491: CALL_OW 12
36495: PUSH
36496: LD_INT 1
36498: PPUSH
36499: LD_INT 3
36501: PPUSH
36502: CALL_OW 12
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
// animal := CreateHuman ;
36519: LD_ADDR_VAR 0 12
36523: PUSH
36524: CALL_OW 44
36528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36529: LD_VAR 0 12
36533: PPUSH
36534: LD_VAR 0 8
36538: PPUSH
36539: LD_INT 0
36541: PPUSH
36542: CALL 38321 0 3
// end ;
36546: GO 36444
36548: POP
36549: POP
// if enchidnas then
36550: LD_VAR 0 4
36554: IFFALSE 36621
// for i = 1 to enchidnas do
36556: LD_ADDR_VAR 0 11
36560: PUSH
36561: DOUBLE
36562: LD_INT 1
36564: DEC
36565: ST_TO_ADDR
36566: LD_VAR 0 4
36570: PUSH
36571: FOR_TO
36572: IFFALSE 36619
// begin hc_class = 13 ;
36574: LD_ADDR_OWVAR 28
36578: PUSH
36579: LD_INT 13
36581: ST_TO_ADDR
// hc_gallery =  ;
36582: LD_ADDR_OWVAR 33
36586: PUSH
36587: LD_STRING 
36589: ST_TO_ADDR
// animal := CreateHuman ;
36590: LD_ADDR_VAR 0 12
36594: PUSH
36595: CALL_OW 44
36599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36600: LD_VAR 0 12
36604: PPUSH
36605: LD_VAR 0 8
36609: PPUSH
36610: LD_INT 0
36612: PPUSH
36613: CALL 38321 0 3
// end ;
36617: GO 36571
36619: POP
36620: POP
// if fishes then
36621: LD_VAR 0 7
36625: IFFALSE 36692
// for i = 1 to fishes do
36627: LD_ADDR_VAR 0 11
36631: PUSH
36632: DOUBLE
36633: LD_INT 1
36635: DEC
36636: ST_TO_ADDR
36637: LD_VAR 0 7
36641: PUSH
36642: FOR_TO
36643: IFFALSE 36690
// begin hc_class = 20 ;
36645: LD_ADDR_OWVAR 28
36649: PUSH
36650: LD_INT 20
36652: ST_TO_ADDR
// hc_gallery =  ;
36653: LD_ADDR_OWVAR 33
36657: PUSH
36658: LD_STRING 
36660: ST_TO_ADDR
// animal := CreateHuman ;
36661: LD_ADDR_VAR 0 12
36665: PUSH
36666: CALL_OW 44
36670: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36671: LD_VAR 0 12
36675: PPUSH
36676: LD_VAR 0 9
36680: PPUSH
36681: LD_INT 0
36683: PPUSH
36684: CALL 38321 0 3
// end ;
36688: GO 36642
36690: POP
36691: POP
// end ;
36692: LD_VAR 0 10
36696: RET
// export function WantHeal ( sci , unit ) ; begin
36697: LD_INT 0
36699: PPUSH
// if GetTaskList ( sci ) > 0 then
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 437
36709: PUSH
36710: LD_INT 0
36712: GREATER
36713: IFFALSE 36783
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36715: LD_VAR 0 1
36719: PPUSH
36720: CALL_OW 437
36724: PUSH
36725: LD_INT 1
36727: ARRAY
36728: PUSH
36729: LD_INT 1
36731: ARRAY
36732: PUSH
36733: LD_STRING l
36735: EQUAL
36736: PUSH
36737: LD_VAR 0 1
36741: PPUSH
36742: CALL_OW 437
36746: PUSH
36747: LD_INT 1
36749: ARRAY
36750: PUSH
36751: LD_INT 4
36753: ARRAY
36754: PUSH
36755: LD_VAR 0 2
36759: EQUAL
36760: AND
36761: IFFALSE 36773
// result := true else
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: LD_INT 1
36770: ST_TO_ADDR
36771: GO 36781
// result := false ;
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_INT 0
36780: ST_TO_ADDR
// end else
36781: GO 36791
// result := false ;
36783: LD_ADDR_VAR 0 3
36787: PUSH
36788: LD_INT 0
36790: ST_TO_ADDR
// end ;
36791: LD_VAR 0 3
36795: RET
// export function HealTarget ( sci ) ; begin
36796: LD_INT 0
36798: PPUSH
// if not sci then
36799: LD_VAR 0 1
36803: NOT
36804: IFFALSE 36808
// exit ;
36806: GO 36873
// result := 0 ;
36808: LD_ADDR_VAR 0 2
36812: PUSH
36813: LD_INT 0
36815: ST_TO_ADDR
// if GetTaskList ( sci ) then
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL_OW 437
36825: IFFALSE 36873
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL_OW 437
36836: PUSH
36837: LD_INT 1
36839: ARRAY
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PUSH
36845: LD_STRING l
36847: EQUAL
36848: IFFALSE 36873
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36850: LD_ADDR_VAR 0 2
36854: PUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 437
36864: PUSH
36865: LD_INT 1
36867: ARRAY
36868: PUSH
36869: LD_INT 4
36871: ARRAY
36872: ST_TO_ADDR
// end ;
36873: LD_VAR 0 2
36877: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36878: LD_INT 0
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
// if not base_units then
36884: LD_VAR 0 1
36888: NOT
36889: IFFALSE 36893
// exit ;
36891: GO 36980
// result := false ;
36893: LD_ADDR_VAR 0 2
36897: PUSH
36898: LD_INT 0
36900: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36901: LD_ADDR_VAR 0 5
36905: PUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: LD_INT 21
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PPUSH
36921: CALL_OW 72
36925: ST_TO_ADDR
// if not tmp then
36926: LD_VAR 0 5
36930: NOT
36931: IFFALSE 36935
// exit ;
36933: GO 36980
// for i in tmp do
36935: LD_ADDR_VAR 0 3
36939: PUSH
36940: LD_VAR 0 5
36944: PUSH
36945: FOR_IN
36946: IFFALSE 36978
// begin result := EnemyInRange ( i , 22 ) ;
36948: LD_ADDR_VAR 0 2
36952: PUSH
36953: LD_VAR 0 3
36957: PPUSH
36958: LD_INT 22
36960: PPUSH
36961: CALL 34558 0 2
36965: ST_TO_ADDR
// if result then
36966: LD_VAR 0 2
36970: IFFALSE 36976
// exit ;
36972: POP
36973: POP
36974: GO 36980
// end ;
36976: GO 36945
36978: POP
36979: POP
// end ;
36980: LD_VAR 0 2
36984: RET
// export function FilterByTag ( units , tag ) ; begin
36985: LD_INT 0
36987: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36988: LD_ADDR_VAR 0 3
36992: PUSH
36993: LD_VAR 0 1
36997: PPUSH
36998: LD_INT 120
37000: PUSH
37001: LD_VAR 0 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL_OW 72
37014: ST_TO_ADDR
// end ;
37015: LD_VAR 0 3
37019: RET
// export function IsDriver ( un ) ; begin
37020: LD_INT 0
37022: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37023: LD_ADDR_VAR 0 2
37027: PUSH
37028: LD_VAR 0 1
37032: PUSH
37033: LD_INT 55
37035: PUSH
37036: EMPTY
37037: LIST
37038: PPUSH
37039: CALL_OW 69
37043: IN
37044: ST_TO_ADDR
// end ;
37045: LD_VAR 0 2
37049: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37050: LD_INT 0
37052: PPUSH
37053: PPUSH
// list := [ ] ;
37054: LD_ADDR_VAR 0 5
37058: PUSH
37059: EMPTY
37060: ST_TO_ADDR
// case d of 0 :
37061: LD_VAR 0 3
37065: PUSH
37066: LD_INT 0
37068: DOUBLE
37069: EQUAL
37070: IFTRUE 37074
37072: GO 37207
37074: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37075: LD_ADDR_VAR 0 5
37079: PUSH
37080: LD_VAR 0 1
37084: PUSH
37085: LD_INT 4
37087: MINUS
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_INT 4
37096: MINUS
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: PUSH
37106: LD_VAR 0 1
37110: PUSH
37111: LD_INT 3
37113: MINUS
37114: PUSH
37115: LD_VAR 0 2
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: PUSH
37128: LD_VAR 0 1
37132: PUSH
37133: LD_INT 4
37135: PLUS
37136: PUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_INT 4
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: PUSH
37150: LD_VAR 0 1
37154: PUSH
37155: LD_INT 3
37157: PLUS
37158: PUSH
37159: LD_VAR 0 2
37163: PUSH
37164: LD_INT 3
37166: PLUS
37167: PUSH
37168: LD_INT 5
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: PUSH
37176: LD_VAR 0 1
37180: PUSH
37181: LD_VAR 0 2
37185: PUSH
37186: LD_INT 4
37188: PLUS
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// end ; 1 :
37205: GO 37905
37207: LD_INT 1
37209: DOUBLE
37210: EQUAL
37211: IFTRUE 37215
37213: GO 37348
37215: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37216: LD_ADDR_VAR 0 5
37220: PUSH
37221: LD_VAR 0 1
37225: PUSH
37226: LD_VAR 0 2
37230: PUSH
37231: LD_INT 4
37233: MINUS
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: LD_VAR 0 1
37247: PUSH
37248: LD_INT 3
37250: MINUS
37251: PUSH
37252: LD_VAR 0 2
37256: PUSH
37257: LD_INT 3
37259: MINUS
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: PUSH
37269: LD_VAR 0 1
37273: PUSH
37274: LD_INT 4
37276: MINUS
37277: PUSH
37278: LD_VAR 0 2
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: PUSH
37291: LD_VAR 0 1
37295: PUSH
37296: LD_VAR 0 2
37300: PUSH
37301: LD_INT 3
37303: PLUS
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: PUSH
37313: LD_VAR 0 1
37317: PUSH
37318: LD_INT 4
37320: PLUS
37321: PUSH
37322: LD_VAR 0 2
37326: PUSH
37327: LD_INT 4
37329: PLUS
37330: PUSH
37331: LD_INT 5
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: ST_TO_ADDR
// end ; 2 :
37346: GO 37905
37348: LD_INT 2
37350: DOUBLE
37351: EQUAL
37352: IFTRUE 37356
37354: GO 37485
37356: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: LD_VAR 0 1
37366: PUSH
37367: LD_VAR 0 2
37371: PUSH
37372: LD_INT 3
37374: MINUS
37375: PUSH
37376: LD_INT 3
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: PUSH
37384: LD_VAR 0 1
37388: PUSH
37389: LD_INT 4
37391: PLUS
37392: PUSH
37393: LD_VAR 0 2
37397: PUSH
37398: LD_INT 4
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: PUSH
37406: LD_VAR 0 1
37410: PUSH
37411: LD_VAR 0 2
37415: PUSH
37416: LD_INT 4
37418: PLUS
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: PUSH
37428: LD_VAR 0 1
37432: PUSH
37433: LD_INT 3
37435: MINUS
37436: PUSH
37437: LD_VAR 0 2
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: PUSH
37450: LD_VAR 0 1
37454: PUSH
37455: LD_INT 4
37457: MINUS
37458: PUSH
37459: LD_VAR 0 2
37463: PUSH
37464: LD_INT 4
37466: MINUS
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// end ; 3 :
37483: GO 37905
37485: LD_INT 3
37487: DOUBLE
37488: EQUAL
37489: IFTRUE 37493
37491: GO 37626
37493: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37494: LD_ADDR_VAR 0 5
37498: PUSH
37499: LD_VAR 0 1
37503: PUSH
37504: LD_INT 3
37506: PLUS
37507: PUSH
37508: LD_VAR 0 2
37512: PUSH
37513: LD_INT 4
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PUSH
37521: LD_VAR 0 1
37525: PUSH
37526: LD_INT 4
37528: PLUS
37529: PUSH
37530: LD_VAR 0 2
37534: PUSH
37535: LD_INT 4
37537: PLUS
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: PUSH
37547: LD_VAR 0 1
37551: PUSH
37552: LD_INT 4
37554: MINUS
37555: PUSH
37556: LD_VAR 0 2
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: PUSH
37569: LD_VAR 0 1
37573: PUSH
37574: LD_VAR 0 2
37578: PUSH
37579: LD_INT 4
37581: MINUS
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: PUSH
37591: LD_VAR 0 1
37595: PUSH
37596: LD_INT 3
37598: MINUS
37599: PUSH
37600: LD_VAR 0 2
37604: PUSH
37605: LD_INT 3
37607: MINUS
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// end ; 4 :
37624: GO 37905
37626: LD_INT 4
37628: DOUBLE
37629: EQUAL
37630: IFTRUE 37634
37632: GO 37767
37634: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37635: LD_ADDR_VAR 0 5
37639: PUSH
37640: LD_VAR 0 1
37644: PUSH
37645: LD_VAR 0 2
37649: PUSH
37650: LD_INT 4
37652: PLUS
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: PUSH
37662: LD_VAR 0 1
37666: PUSH
37667: LD_INT 3
37669: PLUS
37670: PUSH
37671: LD_VAR 0 2
37675: PUSH
37676: LD_INT 3
37678: PLUS
37679: PUSH
37680: LD_INT 5
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: LD_VAR 0 1
37692: PUSH
37693: LD_INT 4
37695: PLUS
37696: PUSH
37697: LD_VAR 0 2
37701: PUSH
37702: LD_INT 4
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: PUSH
37710: LD_VAR 0 1
37714: PUSH
37715: LD_VAR 0 2
37719: PUSH
37720: LD_INT 3
37722: MINUS
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: PUSH
37732: LD_VAR 0 1
37736: PUSH
37737: LD_INT 4
37739: MINUS
37740: PUSH
37741: LD_VAR 0 2
37745: PUSH
37746: LD_INT 4
37748: MINUS
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// end ; 5 :
37765: GO 37905
37767: LD_INT 5
37769: DOUBLE
37770: EQUAL
37771: IFTRUE 37775
37773: GO 37904
37775: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37776: LD_ADDR_VAR 0 5
37780: PUSH
37781: LD_VAR 0 1
37785: PUSH
37786: LD_INT 4
37788: MINUS
37789: PUSH
37790: LD_VAR 0 2
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: PUSH
37803: LD_VAR 0 1
37807: PUSH
37808: LD_VAR 0 2
37812: PUSH
37813: LD_INT 4
37815: MINUS
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: PUSH
37825: LD_VAR 0 1
37829: PUSH
37830: LD_INT 4
37832: PLUS
37833: PUSH
37834: LD_VAR 0 2
37838: PUSH
37839: LD_INT 4
37841: PLUS
37842: PUSH
37843: LD_INT 5
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: PUSH
37851: LD_VAR 0 1
37855: PUSH
37856: LD_INT 3
37858: PLUS
37859: PUSH
37860: LD_VAR 0 2
37864: PUSH
37865: LD_INT 4
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: PUSH
37873: LD_VAR 0 1
37877: PUSH
37878: LD_VAR 0 2
37882: PUSH
37883: LD_INT 3
37885: PLUS
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// end ; end ;
37902: GO 37905
37904: POP
// result := list ;
37905: LD_ADDR_VAR 0 4
37909: PUSH
37910: LD_VAR 0 5
37914: ST_TO_ADDR
// end ;
37915: LD_VAR 0 4
37919: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37920: LD_INT 0
37922: PPUSH
37923: PPUSH
37924: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37925: LD_VAR 0 1
37929: NOT
37930: PUSH
37931: LD_VAR 0 2
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: LD_INT 4
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: IN
37954: NOT
37955: OR
37956: IFFALSE 37960
// exit ;
37958: GO 38043
// tmp := [ ] ;
37960: LD_ADDR_VAR 0 5
37964: PUSH
37965: EMPTY
37966: ST_TO_ADDR
// for i in units do
37967: LD_ADDR_VAR 0 4
37971: PUSH
37972: LD_VAR 0 1
37976: PUSH
37977: FOR_IN
37978: IFFALSE 38012
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37980: LD_ADDR_VAR 0 5
37984: PUSH
37985: LD_VAR 0 5
37989: PPUSH
37990: LD_VAR 0 4
37994: PPUSH
37995: LD_VAR 0 2
37999: PPUSH
38000: CALL_OW 259
38004: PPUSH
38005: CALL 39416 0 2
38009: ST_TO_ADDR
38010: GO 37977
38012: POP
38013: POP
// if not tmp then
38014: LD_VAR 0 5
38018: NOT
38019: IFFALSE 38023
// exit ;
38021: GO 38043
// result := SortListByListDesc ( units , tmp ) ;
38023: LD_ADDR_VAR 0 3
38027: PUSH
38028: LD_VAR 0 1
38032: PPUSH
38033: LD_VAR 0 5
38037: PPUSH
38038: CALL_OW 77
38042: ST_TO_ADDR
// end ;
38043: LD_VAR 0 3
38047: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38048: LD_INT 0
38050: PPUSH
38051: PPUSH
38052: PPUSH
// result := false ;
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_INT 0
38060: ST_TO_ADDR
// if not building then
38061: LD_VAR 0 2
38065: NOT
38066: IFFALSE 38070
// exit ;
38068: GO 38208
// x := GetX ( building ) ;
38070: LD_ADDR_VAR 0 4
38074: PUSH
38075: LD_VAR 0 2
38079: PPUSH
38080: CALL_OW 250
38084: ST_TO_ADDR
// y := GetY ( building ) ;
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: LD_VAR 0 2
38094: PPUSH
38095: CALL_OW 251
38099: ST_TO_ADDR
// if not x or not y then
38100: LD_VAR 0 4
38104: NOT
38105: PUSH
38106: LD_VAR 0 5
38110: NOT
38111: OR
38112: IFFALSE 38116
// exit ;
38114: GO 38208
// if GetTaskList ( unit ) then
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL_OW 437
38125: IFFALSE 38208
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38127: LD_STRING e
38129: PUSH
38130: LD_VAR 0 1
38134: PPUSH
38135: CALL_OW 437
38139: PUSH
38140: LD_INT 1
38142: ARRAY
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: EQUAL
38148: PUSH
38149: LD_VAR 0 4
38153: PUSH
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 437
38163: PUSH
38164: LD_INT 1
38166: ARRAY
38167: PUSH
38168: LD_INT 2
38170: ARRAY
38171: EQUAL
38172: AND
38173: PUSH
38174: LD_VAR 0 5
38178: PUSH
38179: LD_VAR 0 1
38183: PPUSH
38184: CALL_OW 437
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: PUSH
38193: LD_INT 3
38195: ARRAY
38196: EQUAL
38197: AND
38198: IFFALSE 38208
// result := true end ;
38200: LD_ADDR_VAR 0 3
38204: PUSH
38205: LD_INT 1
38207: ST_TO_ADDR
// end ;
38208: LD_VAR 0 3
38212: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38213: LD_INT 0
38215: PPUSH
// result := false ;
38216: LD_ADDR_VAR 0 4
38220: PUSH
38221: LD_INT 0
38223: ST_TO_ADDR
// if GetTaskList ( unit ) then
38224: LD_VAR 0 1
38228: PPUSH
38229: CALL_OW 437
38233: IFFALSE 38316
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38235: LD_STRING M
38237: PUSH
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 437
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: PUSH
38252: LD_INT 1
38254: ARRAY
38255: EQUAL
38256: PUSH
38257: LD_VAR 0 2
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 437
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: PUSH
38276: LD_INT 2
38278: ARRAY
38279: EQUAL
38280: AND
38281: PUSH
38282: LD_VAR 0 3
38286: PUSH
38287: LD_VAR 0 1
38291: PPUSH
38292: CALL_OW 437
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PUSH
38301: LD_INT 3
38303: ARRAY
38304: EQUAL
38305: AND
38306: IFFALSE 38316
// result := true ;
38308: LD_ADDR_VAR 0 4
38312: PUSH
38313: LD_INT 1
38315: ST_TO_ADDR
// end ; end ;
38316: LD_VAR 0 4
38320: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38321: LD_INT 0
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
// if not unit or not area then
38327: LD_VAR 0 1
38331: NOT
38332: PUSH
38333: LD_VAR 0 2
38337: NOT
38338: OR
38339: IFFALSE 38343
// exit ;
38341: GO 38519
// tmp := AreaToList ( area , i ) ;
38343: LD_ADDR_VAR 0 6
38347: PUSH
38348: LD_VAR 0 2
38352: PPUSH
38353: LD_VAR 0 5
38357: PPUSH
38358: CALL_OW 517
38362: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: DOUBLE
38369: LD_INT 1
38371: DEC
38372: ST_TO_ADDR
38373: LD_VAR 0 6
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PUSH
38382: FOR_TO
38383: IFFALSE 38517
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38385: LD_ADDR_VAR 0 7
38389: PUSH
38390: LD_VAR 0 6
38394: PUSH
38395: LD_INT 1
38397: ARRAY
38398: PUSH
38399: LD_VAR 0 5
38403: ARRAY
38404: PUSH
38405: LD_VAR 0 6
38409: PUSH
38410: LD_INT 2
38412: ARRAY
38413: PUSH
38414: LD_VAR 0 5
38418: ARRAY
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38424: LD_INT 92
38426: PUSH
38427: LD_VAR 0 7
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PUSH
38436: LD_VAR 0 7
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: PPUSH
38454: CALL_OW 69
38458: PUSH
38459: LD_INT 0
38461: EQUAL
38462: IFFALSE 38515
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_VAR 0 7
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PPUSH
38478: LD_VAR 0 7
38482: PUSH
38483: LD_INT 2
38485: ARRAY
38486: PPUSH
38487: LD_VAR 0 3
38491: PPUSH
38492: CALL_OW 48
// result := IsPlaced ( unit ) ;
38496: LD_ADDR_VAR 0 4
38500: PUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: CALL_OW 305
38510: ST_TO_ADDR
// exit ;
38511: POP
38512: POP
38513: GO 38519
// end ; end ;
38515: GO 38382
38517: POP
38518: POP
// end ;
38519: LD_VAR 0 4
38523: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38524: LD_INT 0
38526: PPUSH
38527: PPUSH
38528: PPUSH
// if not side or side > 8 then
38529: LD_VAR 0 1
38533: NOT
38534: PUSH
38535: LD_VAR 0 1
38539: PUSH
38540: LD_INT 8
38542: GREATER
38543: OR
38544: IFFALSE 38548
// exit ;
38546: GO 38735
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38548: LD_ADDR_VAR 0 4
38552: PUSH
38553: LD_INT 22
38555: PUSH
38556: LD_VAR 0 1
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 21
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PPUSH
38579: CALL_OW 69
38583: ST_TO_ADDR
// if not tmp then
38584: LD_VAR 0 4
38588: NOT
38589: IFFALSE 38593
// exit ;
38591: GO 38735
// enable_addtolog := true ;
38593: LD_ADDR_OWVAR 81
38597: PUSH
38598: LD_INT 1
38600: ST_TO_ADDR
// AddToLog ( [ ) ;
38601: LD_STRING [
38603: PPUSH
38604: CALL_OW 561
// for i in tmp do
38608: LD_ADDR_VAR 0 3
38612: PUSH
38613: LD_VAR 0 4
38617: PUSH
38618: FOR_IN
38619: IFFALSE 38726
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38621: LD_STRING [
38623: PUSH
38624: LD_VAR 0 3
38628: PPUSH
38629: CALL_OW 266
38633: STR
38634: PUSH
38635: LD_STRING , 
38637: STR
38638: PUSH
38639: LD_VAR 0 3
38643: PPUSH
38644: CALL_OW 250
38648: STR
38649: PUSH
38650: LD_STRING , 
38652: STR
38653: PUSH
38654: LD_VAR 0 3
38658: PPUSH
38659: CALL_OW 251
38663: STR
38664: PUSH
38665: LD_STRING , 
38667: STR
38668: PUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: CALL_OW 254
38678: STR
38679: PUSH
38680: LD_STRING , 
38682: STR
38683: PUSH
38684: LD_VAR 0 3
38688: PPUSH
38689: LD_INT 1
38691: PPUSH
38692: CALL_OW 268
38696: STR
38697: PUSH
38698: LD_STRING , 
38700: STR
38701: PUSH
38702: LD_VAR 0 3
38706: PPUSH
38707: LD_INT 2
38709: PPUSH
38710: CALL_OW 268
38714: STR
38715: PUSH
38716: LD_STRING ],
38718: STR
38719: PPUSH
38720: CALL_OW 561
// end ;
38724: GO 38618
38726: POP
38727: POP
// AddToLog ( ]; ) ;
38728: LD_STRING ];
38730: PPUSH
38731: CALL_OW 561
// end ;
38735: LD_VAR 0 2
38739: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38740: LD_INT 0
38742: PPUSH
38743: PPUSH
38744: PPUSH
38745: PPUSH
38746: PPUSH
// if not area or not rate or not max then
38747: LD_VAR 0 1
38751: NOT
38752: PUSH
38753: LD_VAR 0 2
38757: NOT
38758: OR
38759: PUSH
38760: LD_VAR 0 4
38764: NOT
38765: OR
38766: IFFALSE 38770
// exit ;
38768: GO 38959
// while 1 do
38770: LD_INT 1
38772: IFFALSE 38959
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38774: LD_ADDR_VAR 0 9
38778: PUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: LD_INT 1
38786: PPUSH
38787: CALL_OW 287
38791: PUSH
38792: LD_INT 10
38794: MUL
38795: ST_TO_ADDR
// r := rate / 10 ;
38796: LD_ADDR_VAR 0 7
38800: PUSH
38801: LD_VAR 0 2
38805: PUSH
38806: LD_INT 10
38808: DIVREAL
38809: ST_TO_ADDR
// time := 1 1$00 ;
38810: LD_ADDR_VAR 0 8
38814: PUSH
38815: LD_INT 2100
38817: ST_TO_ADDR
// if amount < min then
38818: LD_VAR 0 9
38822: PUSH
38823: LD_VAR 0 3
38827: LESS
38828: IFFALSE 38846
// r := r * 2 else
38830: LD_ADDR_VAR 0 7
38834: PUSH
38835: LD_VAR 0 7
38839: PUSH
38840: LD_INT 2
38842: MUL
38843: ST_TO_ADDR
38844: GO 38872
// if amount > max then
38846: LD_VAR 0 9
38850: PUSH
38851: LD_VAR 0 4
38855: GREATER
38856: IFFALSE 38872
// r := r / 2 ;
38858: LD_ADDR_VAR 0 7
38862: PUSH
38863: LD_VAR 0 7
38867: PUSH
38868: LD_INT 2
38870: DIVREAL
38871: ST_TO_ADDR
// time := time / r ;
38872: LD_ADDR_VAR 0 8
38876: PUSH
38877: LD_VAR 0 8
38881: PUSH
38882: LD_VAR 0 7
38886: DIVREAL
38887: ST_TO_ADDR
// if time < 0 then
38888: LD_VAR 0 8
38892: PUSH
38893: LD_INT 0
38895: LESS
38896: IFFALSE 38913
// time := time * - 1 ;
38898: LD_ADDR_VAR 0 8
38902: PUSH
38903: LD_VAR 0 8
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: MUL
38912: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38913: LD_VAR 0 8
38917: PUSH
38918: LD_INT 35
38920: PPUSH
38921: LD_INT 875
38923: PPUSH
38924: CALL_OW 12
38928: PLUS
38929: PPUSH
38930: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38934: LD_INT 1
38936: PPUSH
38937: LD_INT 5
38939: PPUSH
38940: CALL_OW 12
38944: PPUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: LD_INT 1
38952: PPUSH
38953: CALL_OW 55
// end ;
38957: GO 38770
// end ;
38959: LD_VAR 0 5
38963: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38964: LD_INT 0
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
// if not turrets or not factories then
38974: LD_VAR 0 1
38978: NOT
38979: PUSH
38980: LD_VAR 0 2
38984: NOT
38985: OR
38986: IFFALSE 38990
// exit ;
38988: GO 39297
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38990: LD_ADDR_VAR 0 10
38994: PUSH
38995: LD_INT 5
38997: PUSH
38998: LD_INT 6
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: LD_INT 4
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: LD_INT 5
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 24
39032: PUSH
39033: LD_INT 25
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 23
39042: PUSH
39043: LD_INT 27
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 42
39056: PUSH
39057: LD_INT 43
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 44
39066: PUSH
39067: LD_INT 46
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 45
39076: PUSH
39077: LD_INT 47
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// result := [ ] ;
39094: LD_ADDR_VAR 0 3
39098: PUSH
39099: EMPTY
39100: ST_TO_ADDR
// for i in turrets do
39101: LD_ADDR_VAR 0 4
39105: PUSH
39106: LD_VAR 0 1
39110: PUSH
39111: FOR_IN
39112: IFFALSE 39295
// begin nat := GetNation ( i ) ;
39114: LD_ADDR_VAR 0 7
39118: PUSH
39119: LD_VAR 0 4
39123: PPUSH
39124: CALL_OW 248
39128: ST_TO_ADDR
// weapon := 0 ;
39129: LD_ADDR_VAR 0 8
39133: PUSH
39134: LD_INT 0
39136: ST_TO_ADDR
// if not nat then
39137: LD_VAR 0 7
39141: NOT
39142: IFFALSE 39146
// continue ;
39144: GO 39111
// for j in list [ nat ] do
39146: LD_ADDR_VAR 0 5
39150: PUSH
39151: LD_VAR 0 10
39155: PUSH
39156: LD_VAR 0 7
39160: ARRAY
39161: PUSH
39162: FOR_IN
39163: IFFALSE 39204
// if GetBWeapon ( i ) = j [ 1 ] then
39165: LD_VAR 0 4
39169: PPUSH
39170: CALL_OW 269
39174: PUSH
39175: LD_VAR 0 5
39179: PUSH
39180: LD_INT 1
39182: ARRAY
39183: EQUAL
39184: IFFALSE 39202
// begin weapon := j [ 2 ] ;
39186: LD_ADDR_VAR 0 8
39190: PUSH
39191: LD_VAR 0 5
39195: PUSH
39196: LD_INT 2
39198: ARRAY
39199: ST_TO_ADDR
// break ;
39200: GO 39204
// end ;
39202: GO 39162
39204: POP
39205: POP
// if not weapon then
39206: LD_VAR 0 8
39210: NOT
39211: IFFALSE 39215
// continue ;
39213: GO 39111
// for k in factories do
39215: LD_ADDR_VAR 0 6
39219: PUSH
39220: LD_VAR 0 2
39224: PUSH
39225: FOR_IN
39226: IFFALSE 39291
// begin weapons := AvailableWeaponList ( k ) ;
39228: LD_ADDR_VAR 0 9
39232: PUSH
39233: LD_VAR 0 6
39237: PPUSH
39238: CALL_OW 478
39242: ST_TO_ADDR
// if not weapons then
39243: LD_VAR 0 9
39247: NOT
39248: IFFALSE 39252
// continue ;
39250: GO 39225
// if weapon in weapons then
39252: LD_VAR 0 8
39256: PUSH
39257: LD_VAR 0 9
39261: IN
39262: IFFALSE 39289
// begin result := [ i , weapon ] ;
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_VAR 0 4
39273: PUSH
39274: LD_VAR 0 8
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// exit ;
39283: POP
39284: POP
39285: POP
39286: POP
39287: GO 39297
// end ; end ;
39289: GO 39225
39291: POP
39292: POP
// end ;
39293: GO 39111
39295: POP
39296: POP
// end ;
39297: LD_VAR 0 3
39301: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39302: LD_INT 0
39304: PPUSH
// if not side or side > 8 then
39305: LD_VAR 0 3
39309: NOT
39310: PUSH
39311: LD_VAR 0 3
39315: PUSH
39316: LD_INT 8
39318: GREATER
39319: OR
39320: IFFALSE 39324
// exit ;
39322: GO 39383
// if not range then
39324: LD_VAR 0 4
39328: NOT
39329: IFFALSE 39340
// range := - 12 ;
39331: LD_ADDR_VAR 0 4
39335: PUSH
39336: LD_INT 12
39338: NEG
39339: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39340: LD_VAR 0 1
39344: PPUSH
39345: LD_VAR 0 2
39349: PPUSH
39350: LD_VAR 0 3
39354: PPUSH
39355: LD_VAR 0 4
39359: PPUSH
39360: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39364: LD_VAR 0 1
39368: PPUSH
39369: LD_VAR 0 2
39373: PPUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: CALL_OW 331
// end ;
39383: LD_VAR 0 5
39387: RET
// export function Video ( mode ) ; begin
39388: LD_INT 0
39390: PPUSH
// ingame_video = mode ;
39391: LD_ADDR_OWVAR 52
39395: PUSH
39396: LD_VAR 0 1
39400: ST_TO_ADDR
// interface_hidden = mode ;
39401: LD_ADDR_OWVAR 54
39405: PUSH
39406: LD_VAR 0 1
39410: ST_TO_ADDR
// end ;
39411: LD_VAR 0 2
39415: RET
// export function Join ( array , element ) ; begin
39416: LD_INT 0
39418: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: LD_VAR 0 1
39433: PUSH
39434: LD_INT 1
39436: PLUS
39437: PPUSH
39438: LD_VAR 0 2
39442: PPUSH
39443: CALL_OW 1
39447: ST_TO_ADDR
// end ;
39448: LD_VAR 0 3
39452: RET
// export function JoinUnion ( array , element ) ; begin
39453: LD_INT 0
39455: PPUSH
// result := array union element ;
39456: LD_ADDR_VAR 0 3
39460: PUSH
39461: LD_VAR 0 1
39465: PUSH
39466: LD_VAR 0 2
39470: UNION
39471: ST_TO_ADDR
// end ;
39472: LD_VAR 0 3
39476: RET
// export function GetBehemoths ( side ) ; begin
39477: LD_INT 0
39479: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39480: LD_ADDR_VAR 0 2
39484: PUSH
39485: LD_INT 22
39487: PUSH
39488: LD_VAR 0 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 31
39499: PUSH
39500: LD_INT 25
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PPUSH
39511: CALL_OW 69
39515: ST_TO_ADDR
// end ;
39516: LD_VAR 0 2
39520: RET
// export function Shuffle ( array ) ; var i , index ; begin
39521: LD_INT 0
39523: PPUSH
39524: PPUSH
39525: PPUSH
// result := [ ] ;
39526: LD_ADDR_VAR 0 2
39530: PUSH
39531: EMPTY
39532: ST_TO_ADDR
// if not array then
39533: LD_VAR 0 1
39537: NOT
39538: IFFALSE 39542
// exit ;
39540: GO 39641
// Randomize ;
39542: CALL_OW 10
// for i = array downto 1 do
39546: LD_ADDR_VAR 0 3
39550: PUSH
39551: DOUBLE
39552: LD_VAR 0 1
39556: INC
39557: ST_TO_ADDR
39558: LD_INT 1
39560: PUSH
39561: FOR_DOWNTO
39562: IFFALSE 39639
// begin index := rand ( 1 , array ) ;
39564: LD_ADDR_VAR 0 4
39568: PUSH
39569: LD_INT 1
39571: PPUSH
39572: LD_VAR 0 1
39576: PPUSH
39577: CALL_OW 12
39581: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39582: LD_ADDR_VAR 0 2
39586: PUSH
39587: LD_VAR 0 2
39591: PPUSH
39592: LD_VAR 0 2
39596: PUSH
39597: LD_INT 1
39599: PLUS
39600: PPUSH
39601: LD_VAR 0 1
39605: PUSH
39606: LD_VAR 0 4
39610: ARRAY
39611: PPUSH
39612: CALL_OW 2
39616: ST_TO_ADDR
// array := Delete ( array , index ) ;
39617: LD_ADDR_VAR 0 1
39621: PUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: LD_VAR 0 4
39631: PPUSH
39632: CALL_OW 3
39636: ST_TO_ADDR
// end ;
39637: GO 39561
39639: POP
39640: POP
// end ;
39641: LD_VAR 0 2
39645: RET
// export function GetBaseMaterials ( base ) ; begin
39646: LD_INT 0
39648: PPUSH
// result := [ 0 , 0 , 0 ] ;
39649: LD_ADDR_VAR 0 2
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
// if not base then
39668: LD_VAR 0 1
39672: NOT
39673: IFFALSE 39677
// exit ;
39675: GO 39726
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39677: LD_ADDR_VAR 0 2
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: LD_INT 1
39689: PPUSH
39690: CALL_OW 275
39694: PUSH
39695: LD_VAR 0 1
39699: PPUSH
39700: LD_INT 2
39702: PPUSH
39703: CALL_OW 275
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: LD_INT 3
39715: PPUSH
39716: CALL_OW 275
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: ST_TO_ADDR
// end ;
39726: LD_VAR 0 2
39730: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39731: LD_INT 0
39733: PPUSH
39734: PPUSH
// result := array ;
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_VAR 0 1
39744: ST_TO_ADDR
// if size >= result then
39745: LD_VAR 0 2
39749: PUSH
39750: LD_VAR 0 3
39754: GREATEREQUAL
39755: IFFALSE 39759
// exit ;
39757: GO 39809
// if size then
39759: LD_VAR 0 2
39763: IFFALSE 39809
// for i := array downto size do
39765: LD_ADDR_VAR 0 4
39769: PUSH
39770: DOUBLE
39771: LD_VAR 0 1
39775: INC
39776: ST_TO_ADDR
39777: LD_VAR 0 2
39781: PUSH
39782: FOR_DOWNTO
39783: IFFALSE 39807
// result := Delete ( result , result ) ;
39785: LD_ADDR_VAR 0 3
39789: PUSH
39790: LD_VAR 0 3
39794: PPUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: CALL_OW 3
39804: ST_TO_ADDR
39805: GO 39782
39807: POP
39808: POP
// end ;
39809: LD_VAR 0 3
39813: RET
// export function ComExit ( unit ) ; var tmp ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
// if not IsInUnit ( unit ) then
39818: LD_VAR 0 1
39822: PPUSH
39823: CALL_OW 310
39827: NOT
39828: IFFALSE 39832
// exit ;
39830: GO 39892
// tmp := IsInUnit ( unit ) ;
39832: LD_ADDR_VAR 0 3
39836: PUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL_OW 310
39846: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39847: LD_VAR 0 3
39851: PPUSH
39852: CALL_OW 247
39856: PUSH
39857: LD_INT 2
39859: EQUAL
39860: IFFALSE 39873
// ComExitVehicle ( unit ) else
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 121
39871: GO 39882
// ComExitBuilding ( unit ) ;
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 122
// result := tmp ;
39882: LD_ADDR_VAR 0 2
39886: PUSH
39887: LD_VAR 0 3
39891: ST_TO_ADDR
// end ;
39892: LD_VAR 0 2
39896: RET
// export function ComExitAll ( units ) ; var i ; begin
39897: LD_INT 0
39899: PPUSH
39900: PPUSH
// if not units then
39901: LD_VAR 0 1
39905: NOT
39906: IFFALSE 39910
// exit ;
39908: GO 39936
// for i in units do
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_VAR 0 1
39919: PUSH
39920: FOR_IN
39921: IFFALSE 39934
// ComExit ( i ) ;
39923: LD_VAR 0 3
39927: PPUSH
39928: CALL 39814 0 1
39932: GO 39920
39934: POP
39935: POP
// end ;
39936: LD_VAR 0 2
39940: RET
// export function ResetHc ; begin
39941: LD_INT 0
39943: PPUSH
// InitHc ;
39944: CALL_OW 19
// hc_importance := 0 ;
39948: LD_ADDR_OWVAR 32
39952: PUSH
39953: LD_INT 0
39955: ST_TO_ADDR
// end ;
39956: LD_VAR 0 1
39960: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39961: LD_INT 0
39963: PPUSH
39964: PPUSH
39965: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39966: LD_ADDR_VAR 0 6
39970: PUSH
39971: LD_VAR 0 1
39975: PUSH
39976: LD_VAR 0 3
39980: PLUS
39981: PUSH
39982: LD_INT 2
39984: DIV
39985: ST_TO_ADDR
// if _x < 0 then
39986: LD_VAR 0 6
39990: PUSH
39991: LD_INT 0
39993: LESS
39994: IFFALSE 40011
// _x := _x * - 1 ;
39996: LD_ADDR_VAR 0 6
40000: PUSH
40001: LD_VAR 0 6
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: MUL
40010: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40011: LD_ADDR_VAR 0 7
40015: PUSH
40016: LD_VAR 0 2
40020: PUSH
40021: LD_VAR 0 4
40025: PLUS
40026: PUSH
40027: LD_INT 2
40029: DIV
40030: ST_TO_ADDR
// if _y < 0 then
40031: LD_VAR 0 7
40035: PUSH
40036: LD_INT 0
40038: LESS
40039: IFFALSE 40056
// _y := _y * - 1 ;
40041: LD_ADDR_VAR 0 7
40045: PUSH
40046: LD_VAR 0 7
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: MUL
40055: ST_TO_ADDR
// result := [ _x , _y ] ;
40056: LD_ADDR_VAR 0 5
40060: PUSH
40061: LD_VAR 0 6
40065: PUSH
40066: LD_VAR 0 7
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: ST_TO_ADDR
// end ;
40075: LD_VAR 0 5
40079: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40080: LD_INT 0
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
// task := GetTaskList ( unit ) ;
40086: LD_ADDR_VAR 0 7
40090: PUSH
40091: LD_VAR 0 1
40095: PPUSH
40096: CALL_OW 437
40100: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40101: LD_VAR 0 7
40105: NOT
40106: PUSH
40107: LD_VAR 0 1
40111: PPUSH
40112: LD_VAR 0 2
40116: PPUSH
40117: CALL_OW 308
40121: NOT
40122: AND
40123: IFFALSE 40127
// exit ;
40125: GO 40245
// if IsInArea ( unit , area ) then
40127: LD_VAR 0 1
40131: PPUSH
40132: LD_VAR 0 2
40136: PPUSH
40137: CALL_OW 308
40141: IFFALSE 40159
// begin ComMoveToArea ( unit , goAway ) ;
40143: LD_VAR 0 1
40147: PPUSH
40148: LD_VAR 0 3
40152: PPUSH
40153: CALL_OW 113
// exit ;
40157: GO 40245
// end ; if task [ 1 ] [ 1 ] <> M then
40159: LD_VAR 0 7
40163: PUSH
40164: LD_INT 1
40166: ARRAY
40167: PUSH
40168: LD_INT 1
40170: ARRAY
40171: PUSH
40172: LD_STRING M
40174: NONEQUAL
40175: IFFALSE 40179
// exit ;
40177: GO 40245
// x := task [ 1 ] [ 2 ] ;
40179: LD_ADDR_VAR 0 5
40183: PUSH
40184: LD_VAR 0 7
40188: PUSH
40189: LD_INT 1
40191: ARRAY
40192: PUSH
40193: LD_INT 2
40195: ARRAY
40196: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40197: LD_ADDR_VAR 0 6
40201: PUSH
40202: LD_VAR 0 7
40206: PUSH
40207: LD_INT 1
40209: ARRAY
40210: PUSH
40211: LD_INT 3
40213: ARRAY
40214: ST_TO_ADDR
// if InArea ( x , y , area ) then
40215: LD_VAR 0 5
40219: PPUSH
40220: LD_VAR 0 6
40224: PPUSH
40225: LD_VAR 0 2
40229: PPUSH
40230: CALL_OW 309
40234: IFFALSE 40245
// ComStop ( unit ) ;
40236: LD_VAR 0 1
40240: PPUSH
40241: CALL_OW 141
// end ;
40245: LD_VAR 0 4
40249: RET
// export function Abs ( value ) ; begin
40250: LD_INT 0
40252: PPUSH
// result := value ;
40253: LD_ADDR_VAR 0 2
40257: PUSH
40258: LD_VAR 0 1
40262: ST_TO_ADDR
// if value < 0 then
40263: LD_VAR 0 1
40267: PUSH
40268: LD_INT 0
40270: LESS
40271: IFFALSE 40288
// result := value * - 1 ;
40273: LD_ADDR_VAR 0 2
40277: PUSH
40278: LD_VAR 0 1
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: MUL
40287: ST_TO_ADDR
// end ;
40288: LD_VAR 0 2
40292: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40293: LD_INT 0
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
// if not unit or not building then
40303: LD_VAR 0 1
40307: NOT
40308: PUSH
40309: LD_VAR 0 2
40313: NOT
40314: OR
40315: IFFALSE 40319
// exit ;
40317: GO 40545
// x := GetX ( building ) ;
40319: LD_ADDR_VAR 0 4
40323: PUSH
40324: LD_VAR 0 2
40328: PPUSH
40329: CALL_OW 250
40333: ST_TO_ADDR
// y := GetY ( building ) ;
40334: LD_ADDR_VAR 0 6
40338: PUSH
40339: LD_VAR 0 2
40343: PPUSH
40344: CALL_OW 251
40348: ST_TO_ADDR
// d := GetDir ( building ) ;
40349: LD_ADDR_VAR 0 8
40353: PUSH
40354: LD_VAR 0 2
40358: PPUSH
40359: CALL_OW 254
40363: ST_TO_ADDR
// r := 4 ;
40364: LD_ADDR_VAR 0 9
40368: PUSH
40369: LD_INT 4
40371: ST_TO_ADDR
// for i := 1 to 5 do
40372: LD_ADDR_VAR 0 10
40376: PUSH
40377: DOUBLE
40378: LD_INT 1
40380: DEC
40381: ST_TO_ADDR
40382: LD_INT 5
40384: PUSH
40385: FOR_TO
40386: IFFALSE 40543
// begin _x := ShiftX ( x , d , r + i ) ;
40388: LD_ADDR_VAR 0 5
40392: PUSH
40393: LD_VAR 0 4
40397: PPUSH
40398: LD_VAR 0 8
40402: PPUSH
40403: LD_VAR 0 9
40407: PUSH
40408: LD_VAR 0 10
40412: PLUS
40413: PPUSH
40414: CALL_OW 272
40418: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40419: LD_ADDR_VAR 0 7
40423: PUSH
40424: LD_VAR 0 6
40428: PPUSH
40429: LD_VAR 0 8
40433: PPUSH
40434: LD_VAR 0 9
40438: PUSH
40439: LD_VAR 0 10
40443: PLUS
40444: PPUSH
40445: CALL_OW 273
40449: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40450: LD_VAR 0 5
40454: PPUSH
40455: LD_VAR 0 7
40459: PPUSH
40460: CALL_OW 488
40464: PUSH
40465: LD_VAR 0 5
40469: PPUSH
40470: LD_VAR 0 7
40474: PPUSH
40475: CALL_OW 428
40479: PPUSH
40480: CALL_OW 247
40484: PUSH
40485: LD_INT 3
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: IN
40495: NOT
40496: AND
40497: IFFALSE 40541
// begin ComMoveXY ( unit , _x , _y ) ;
40499: LD_VAR 0 1
40503: PPUSH
40504: LD_VAR 0 5
40508: PPUSH
40509: LD_VAR 0 7
40513: PPUSH
40514: CALL_OW 111
// result := [ _x , _y ] ;
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_VAR 0 5
40527: PUSH
40528: LD_VAR 0 7
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: ST_TO_ADDR
// exit ;
40537: POP
40538: POP
40539: GO 40545
// end ; end ;
40541: GO 40385
40543: POP
40544: POP
// end ;
40545: LD_VAR 0 3
40549: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40550: LD_INT 0
40552: PPUSH
40553: PPUSH
40554: PPUSH
// result := 0 ;
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_INT 0
40562: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40563: LD_VAR 0 1
40567: PUSH
40568: LD_INT 0
40570: LESS
40571: PUSH
40572: LD_VAR 0 1
40576: PUSH
40577: LD_INT 8
40579: GREATER
40580: OR
40581: PUSH
40582: LD_VAR 0 2
40586: PUSH
40587: LD_INT 0
40589: LESS
40590: OR
40591: PUSH
40592: LD_VAR 0 2
40596: PUSH
40597: LD_INT 8
40599: GREATER
40600: OR
40601: IFFALSE 40605
// exit ;
40603: GO 40680
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40605: LD_ADDR_VAR 0 4
40609: PUSH
40610: LD_INT 22
40612: PUSH
40613: LD_VAR 0 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PPUSH
40622: CALL_OW 69
40626: PUSH
40627: FOR_IN
40628: IFFALSE 40678
// begin un := UnitShoot ( i ) ;
40630: LD_ADDR_VAR 0 5
40634: PUSH
40635: LD_VAR 0 4
40639: PPUSH
40640: CALL_OW 504
40644: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40645: LD_VAR 0 5
40649: PPUSH
40650: CALL_OW 255
40654: PUSH
40655: LD_VAR 0 1
40659: EQUAL
40660: IFFALSE 40676
// begin result := un ;
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_VAR 0 5
40671: ST_TO_ADDR
// exit ;
40672: POP
40673: POP
40674: GO 40680
// end ; end ;
40676: GO 40627
40678: POP
40679: POP
// end ;
40680: LD_VAR 0 3
40684: RET
// export function GetCargoBay ( units ) ; begin
40685: LD_INT 0
40687: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40688: LD_ADDR_VAR 0 2
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 34
40703: PUSH
40704: LD_INT 12
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 34
40713: PUSH
40714: LD_INT 51
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 34
40723: PUSH
40724: LD_INT 32
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 34
40733: PUSH
40734: LD_INT 89
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 72
40752: ST_TO_ADDR
// end ;
40753: LD_VAR 0 2
40757: RET
// export function Negate ( value ) ; begin
40758: LD_INT 0
40760: PPUSH
// result := not value ;
40761: LD_ADDR_VAR 0 2
40765: PUSH
40766: LD_VAR 0 1
40770: NOT
40771: ST_TO_ADDR
// end ;
40772: LD_VAR 0 2
40776: RET
// export function Inc ( value ) ; begin
40777: LD_INT 0
40779: PPUSH
// result := value + 1 ;
40780: LD_ADDR_VAR 0 2
40784: PUSH
40785: LD_VAR 0 1
40789: PUSH
40790: LD_INT 1
40792: PLUS
40793: ST_TO_ADDR
// end ;
40794: LD_VAR 0 2
40798: RET
// export function Dec ( value ) ; begin
40799: LD_INT 0
40801: PPUSH
// result := value - 1 ;
40802: LD_ADDR_VAR 0 2
40806: PUSH
40807: LD_VAR 0 1
40811: PUSH
40812: LD_INT 1
40814: MINUS
40815: ST_TO_ADDR
// end ;
40816: LD_VAR 0 2
40820: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40821: LD_INT 0
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40831: LD_VAR 0 1
40835: PPUSH
40836: LD_VAR 0 2
40840: PPUSH
40841: CALL_OW 488
40845: NOT
40846: PUSH
40847: LD_VAR 0 3
40851: PPUSH
40852: LD_VAR 0 4
40856: PPUSH
40857: CALL_OW 488
40861: NOT
40862: OR
40863: IFFALSE 40876
// begin result := - 1 ;
40865: LD_ADDR_VAR 0 5
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: ST_TO_ADDR
// exit ;
40874: GO 41111
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40876: LD_ADDR_VAR 0 12
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: LD_VAR 0 2
40890: PPUSH
40891: LD_VAR 0 3
40895: PPUSH
40896: LD_VAR 0 4
40900: PPUSH
40901: CALL 39961 0 4
40905: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40906: LD_ADDR_VAR 0 11
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_VAR 0 2
40920: PPUSH
40921: LD_VAR 0 12
40925: PUSH
40926: LD_INT 1
40928: ARRAY
40929: PPUSH
40930: LD_VAR 0 12
40934: PUSH
40935: LD_INT 2
40937: ARRAY
40938: PPUSH
40939: CALL_OW 298
40943: ST_TO_ADDR
// distance := 9999 ;
40944: LD_ADDR_VAR 0 10
40948: PUSH
40949: LD_INT 9999
40951: ST_TO_ADDR
// for i := 0 to 5 do
40952: LD_ADDR_VAR 0 6
40956: PUSH
40957: DOUBLE
40958: LD_INT 0
40960: DEC
40961: ST_TO_ADDR
40962: LD_INT 5
40964: PUSH
40965: FOR_TO
40966: IFFALSE 41109
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40968: LD_ADDR_VAR 0 7
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: LD_VAR 0 6
40982: PPUSH
40983: LD_VAR 0 11
40987: PPUSH
40988: CALL_OW 272
40992: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40993: LD_ADDR_VAR 0 8
40997: PUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: LD_VAR 0 6
41007: PPUSH
41008: LD_VAR 0 11
41012: PPUSH
41013: CALL_OW 273
41017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41018: LD_VAR 0 7
41022: PPUSH
41023: LD_VAR 0 8
41027: PPUSH
41028: CALL_OW 488
41032: NOT
41033: IFFALSE 41037
// continue ;
41035: GO 40965
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41037: LD_ADDR_VAR 0 9
41041: PUSH
41042: LD_VAR 0 12
41046: PUSH
41047: LD_INT 1
41049: ARRAY
41050: PPUSH
41051: LD_VAR 0 12
41055: PUSH
41056: LD_INT 2
41058: ARRAY
41059: PPUSH
41060: LD_VAR 0 7
41064: PPUSH
41065: LD_VAR 0 8
41069: PPUSH
41070: CALL_OW 298
41074: ST_TO_ADDR
// if tmp < distance then
41075: LD_VAR 0 9
41079: PUSH
41080: LD_VAR 0 10
41084: LESS
41085: IFFALSE 41107
// begin result := i ;
41087: LD_ADDR_VAR 0 5
41091: PUSH
41092: LD_VAR 0 6
41096: ST_TO_ADDR
// distance := tmp ;
41097: LD_ADDR_VAR 0 10
41101: PUSH
41102: LD_VAR 0 9
41106: ST_TO_ADDR
// end ; end ;
41107: GO 40965
41109: POP
41110: POP
// end ;
41111: LD_VAR 0 5
41115: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41116: LD_INT 0
41118: PPUSH
41119: PPUSH
// if not driver or not IsInUnit ( driver ) then
41120: LD_VAR 0 1
41124: NOT
41125: PUSH
41126: LD_VAR 0 1
41130: PPUSH
41131: CALL_OW 310
41135: NOT
41136: OR
41137: IFFALSE 41141
// exit ;
41139: GO 41231
// vehicle := IsInUnit ( driver ) ;
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_VAR 0 1
41150: PPUSH
41151: CALL_OW 310
41155: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41156: LD_VAR 0 1
41160: PPUSH
41161: LD_STRING \
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: PUSH
41191: LD_STRING E
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_VAR 0 3
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PPUSH
41227: CALL_OW 446
// end ;
41231: LD_VAR 0 2
41235: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41236: LD_INT 0
41238: PPUSH
41239: PPUSH
// if not driver or not IsInUnit ( driver ) then
41240: LD_VAR 0 1
41244: NOT
41245: PUSH
41246: LD_VAR 0 1
41250: PPUSH
41251: CALL_OW 310
41255: NOT
41256: OR
41257: IFFALSE 41261
// exit ;
41259: GO 41351
// vehicle := IsInUnit ( driver ) ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 310
41275: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41276: LD_VAR 0 1
41280: PPUSH
41281: LD_STRING \
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: PUSH
41311: LD_STRING E
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_VAR 0 3
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PPUSH
41347: CALL_OW 447
// end ;
41351: LD_VAR 0 2
41355: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41356: LD_INT 0
41358: PPUSH
41359: PPUSH
41360: PPUSH
// tmp := [ ] ;
41361: LD_ADDR_VAR 0 5
41365: PUSH
41366: EMPTY
41367: ST_TO_ADDR
// for i in units do
41368: LD_ADDR_VAR 0 4
41372: PUSH
41373: LD_VAR 0 1
41377: PUSH
41378: FOR_IN
41379: IFFALSE 41417
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41381: LD_ADDR_VAR 0 5
41385: PUSH
41386: LD_VAR 0 5
41390: PPUSH
41391: LD_VAR 0 5
41395: PUSH
41396: LD_INT 1
41398: PLUS
41399: PPUSH
41400: LD_VAR 0 4
41404: PPUSH
41405: CALL_OW 256
41409: PPUSH
41410: CALL_OW 2
41414: ST_TO_ADDR
41415: GO 41378
41417: POP
41418: POP
// if not tmp then
41419: LD_VAR 0 5
41423: NOT
41424: IFFALSE 41428
// exit ;
41426: GO 41476
// if asc then
41428: LD_VAR 0 2
41432: IFFALSE 41456
// result := SortListByListAsc ( units , tmp ) else
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: LD_VAR 0 5
41448: PPUSH
41449: CALL_OW 76
41453: ST_TO_ADDR
41454: GO 41476
// result := SortListByListDesc ( units , tmp ) ;
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: LD_VAR 0 5
41470: PPUSH
41471: CALL_OW 77
41475: ST_TO_ADDR
// end ;
41476: LD_VAR 0 3
41480: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
// task := GetTaskList ( mech ) ;
41485: LD_ADDR_VAR 0 4
41489: PUSH
41490: LD_VAR 0 1
41494: PPUSH
41495: CALL_OW 437
41499: ST_TO_ADDR
// if not task then
41500: LD_VAR 0 4
41504: NOT
41505: IFFALSE 41509
// exit ;
41507: GO 41551
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: LD_INT 1
41521: ARRAY
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: PUSH
41527: LD_STRING r
41529: EQUAL
41530: PUSH
41531: LD_VAR 0 4
41535: PUSH
41536: LD_INT 1
41538: ARRAY
41539: PUSH
41540: LD_INT 4
41542: ARRAY
41543: PUSH
41544: LD_VAR 0 2
41548: EQUAL
41549: AND
41550: ST_TO_ADDR
// end ;
41551: LD_VAR 0 3
41555: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41556: LD_INT 0
41558: PPUSH
// SetDir ( unit , d ) ;
41559: LD_VAR 0 1
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41573: LD_ADDR_VAR 0 6
41577: PUSH
41578: LD_VAR 0 1
41582: PPUSH
41583: LD_VAR 0 2
41587: PPUSH
41588: LD_VAR 0 3
41592: PPUSH
41593: LD_VAR 0 5
41597: PPUSH
41598: CALL_OW 48
41602: ST_TO_ADDR
// end ;
41603: LD_VAR 0 6
41607: RET
// export function ToNaturalNumber ( number ) ; begin
41608: LD_INT 0
41610: PPUSH
// result := number div 1 ;
41611: LD_ADDR_VAR 0 2
41615: PUSH
41616: LD_VAR 0 1
41620: PUSH
41621: LD_INT 1
41623: DIV
41624: ST_TO_ADDR
// if number < 0 then
41625: LD_VAR 0 1
41629: PUSH
41630: LD_INT 0
41632: LESS
41633: IFFALSE 41643
// result := 0 ;
41635: LD_ADDR_VAR 0 2
41639: PUSH
41640: LD_INT 0
41642: ST_TO_ADDR
// end ;
41643: LD_VAR 0 2
41647: RET
// export function SortByClass ( units , class ) ; var un ; begin
41648: LD_INT 0
41650: PPUSH
41651: PPUSH
// if not units or not class then
41652: LD_VAR 0 1
41656: NOT
41657: PUSH
41658: LD_VAR 0 2
41662: NOT
41663: OR
41664: IFFALSE 41668
// exit ;
41666: GO 41763
// result := [ ] ;
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: EMPTY
41674: ST_TO_ADDR
// for un in units do
41675: LD_ADDR_VAR 0 4
41679: PUSH
41680: LD_VAR 0 1
41684: PUSH
41685: FOR_IN
41686: IFFALSE 41761
// if GetClass ( un ) = class then
41688: LD_VAR 0 4
41692: PPUSH
41693: CALL_OW 257
41697: PUSH
41698: LD_VAR 0 2
41702: EQUAL
41703: IFFALSE 41730
// result := Insert ( result , 1 , un ) else
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_VAR 0 3
41714: PPUSH
41715: LD_INT 1
41717: PPUSH
41718: LD_VAR 0 4
41722: PPUSH
41723: CALL_OW 2
41727: ST_TO_ADDR
41728: GO 41759
// result := Replace ( result , result + 1 , un ) ;
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_VAR 0 3
41739: PPUSH
41740: LD_VAR 0 3
41744: PUSH
41745: LD_INT 1
41747: PLUS
41748: PPUSH
41749: LD_VAR 0 4
41753: PPUSH
41754: CALL_OW 1
41758: ST_TO_ADDR
41759: GO 41685
41761: POP
41762: POP
// end ;
41763: LD_VAR 0 3
41767: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41768: LD_INT 0
41770: PPUSH
41771: PPUSH
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
// result := [ ] ;
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: EMPTY
41783: ST_TO_ADDR
// if x - r < 0 then
41784: LD_VAR 0 1
41788: PUSH
41789: LD_VAR 0 3
41793: MINUS
41794: PUSH
41795: LD_INT 0
41797: LESS
41798: IFFALSE 41810
// min_x := 0 else
41800: LD_ADDR_VAR 0 8
41804: PUSH
41805: LD_INT 0
41807: ST_TO_ADDR
41808: GO 41826
// min_x := x - r ;
41810: LD_ADDR_VAR 0 8
41814: PUSH
41815: LD_VAR 0 1
41819: PUSH
41820: LD_VAR 0 3
41824: MINUS
41825: ST_TO_ADDR
// if y - r < 0 then
41826: LD_VAR 0 2
41830: PUSH
41831: LD_VAR 0 3
41835: MINUS
41836: PUSH
41837: LD_INT 0
41839: LESS
41840: IFFALSE 41852
// min_y := 0 else
41842: LD_ADDR_VAR 0 7
41846: PUSH
41847: LD_INT 0
41849: ST_TO_ADDR
41850: GO 41868
// min_y := y - r ;
41852: LD_ADDR_VAR 0 7
41856: PUSH
41857: LD_VAR 0 2
41861: PUSH
41862: LD_VAR 0 3
41866: MINUS
41867: ST_TO_ADDR
// max_x := x + r ;
41868: LD_ADDR_VAR 0 9
41872: PUSH
41873: LD_VAR 0 1
41877: PUSH
41878: LD_VAR 0 3
41882: PLUS
41883: ST_TO_ADDR
// max_y := y + r ;
41884: LD_ADDR_VAR 0 10
41888: PUSH
41889: LD_VAR 0 2
41893: PUSH
41894: LD_VAR 0 3
41898: PLUS
41899: ST_TO_ADDR
// for _x = min_x to max_x do
41900: LD_ADDR_VAR 0 5
41904: PUSH
41905: DOUBLE
41906: LD_VAR 0 8
41910: DEC
41911: ST_TO_ADDR
41912: LD_VAR 0 9
41916: PUSH
41917: FOR_TO
41918: IFFALSE 42019
// for _y = min_y to max_y do
41920: LD_ADDR_VAR 0 6
41924: PUSH
41925: DOUBLE
41926: LD_VAR 0 7
41930: DEC
41931: ST_TO_ADDR
41932: LD_VAR 0 10
41936: PUSH
41937: FOR_TO
41938: IFFALSE 42015
// begin if not ValidHex ( _x , _y ) then
41940: LD_VAR 0 5
41944: PPUSH
41945: LD_VAR 0 6
41949: PPUSH
41950: CALL_OW 488
41954: NOT
41955: IFFALSE 41959
// continue ;
41957: GO 41937
// if GetResourceTypeXY ( _x , _y ) then
41959: LD_VAR 0 5
41963: PPUSH
41964: LD_VAR 0 6
41968: PPUSH
41969: CALL_OW 283
41973: IFFALSE 42013
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41975: LD_ADDR_VAR 0 4
41979: PUSH
41980: LD_VAR 0 4
41984: PPUSH
41985: LD_VAR 0 4
41989: PUSH
41990: LD_INT 1
41992: PLUS
41993: PPUSH
41994: LD_VAR 0 5
41998: PUSH
41999: LD_VAR 0 6
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PPUSH
42008: CALL_OW 1
42012: ST_TO_ADDR
// end ;
42013: GO 41937
42015: POP
42016: POP
42017: GO 41917
42019: POP
42020: POP
// end ;
42021: LD_VAR 0 4
42025: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42026: LD_INT 0
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
// if not units then
42036: LD_VAR 0 1
42040: NOT
42041: IFFALSE 42045
// exit ;
42043: GO 42573
// result := UnitFilter ( units , [ f_ok ] ) ;
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_VAR 0 1
42054: PPUSH
42055: LD_INT 50
42057: PUSH
42058: EMPTY
42059: LIST
42060: PPUSH
42061: CALL_OW 72
42065: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42066: LD_ADDR_VAR 0 8
42070: PUSH
42071: LD_VAR 0 1
42075: PUSH
42076: LD_INT 1
42078: ARRAY
42079: PPUSH
42080: CALL_OW 255
42084: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42085: LD_ADDR_VAR 0 10
42089: PUSH
42090: LD_INT 29
42092: PUSH
42093: LD_INT 91
42095: PUSH
42096: LD_INT 49
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// if not result then
42104: LD_VAR 0 3
42108: NOT
42109: IFFALSE 42113
// exit ;
42111: GO 42573
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42113: LD_ADDR_VAR 0 5
42117: PUSH
42118: LD_INT 81
42120: PUSH
42121: LD_VAR 0 8
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PPUSH
42130: CALL_OW 69
42134: ST_TO_ADDR
// for i in result do
42135: LD_ADDR_VAR 0 4
42139: PUSH
42140: LD_VAR 0 3
42144: PUSH
42145: FOR_IN
42146: IFFALSE 42571
// begin tag := GetTag ( i ) + 1 ;
42148: LD_ADDR_VAR 0 9
42152: PUSH
42153: LD_VAR 0 4
42157: PPUSH
42158: CALL_OW 110
42162: PUSH
42163: LD_INT 1
42165: PLUS
42166: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42167: LD_ADDR_VAR 0 7
42171: PUSH
42172: LD_VAR 0 4
42176: PPUSH
42177: CALL_OW 250
42181: PPUSH
42182: LD_VAR 0 4
42186: PPUSH
42187: CALL_OW 251
42191: PPUSH
42192: LD_INT 4
42194: PPUSH
42195: CALL 41768 0 3
42199: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42200: LD_VAR 0 4
42204: PPUSH
42205: CALL_OW 247
42209: PUSH
42210: LD_INT 2
42212: EQUAL
42213: PUSH
42214: LD_VAR 0 7
42218: PUSH
42219: LD_INT 2
42221: GREATER
42222: AND
42223: PUSH
42224: LD_VAR 0 4
42228: PPUSH
42229: CALL_OW 264
42233: PUSH
42234: LD_VAR 0 10
42238: IN
42239: NOT
42240: AND
42241: IFFALSE 42280
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42243: LD_VAR 0 4
42247: PPUSH
42248: LD_VAR 0 7
42252: PUSH
42253: LD_INT 1
42255: ARRAY
42256: PUSH
42257: LD_INT 1
42259: ARRAY
42260: PPUSH
42261: LD_VAR 0 7
42265: PUSH
42266: LD_INT 1
42268: ARRAY
42269: PUSH
42270: LD_INT 2
42272: ARRAY
42273: PPUSH
42274: CALL_OW 116
42278: GO 42569
// if path > tag then
42280: LD_VAR 0 2
42284: PUSH
42285: LD_VAR 0 9
42289: GREATER
42290: IFFALSE 42498
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42292: LD_ADDR_VAR 0 6
42296: PUSH
42297: LD_VAR 0 5
42301: PPUSH
42302: LD_INT 91
42304: PUSH
42305: LD_VAR 0 4
42309: PUSH
42310: LD_INT 8
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: PPUSH
42318: CALL_OW 72
42322: ST_TO_ADDR
// if nearEnemy then
42323: LD_VAR 0 6
42327: IFFALSE 42396
// begin if GetWeapon ( i ) = ru_time_lapser then
42329: LD_VAR 0 4
42333: PPUSH
42334: CALL_OW 264
42338: PUSH
42339: LD_INT 49
42341: EQUAL
42342: IFFALSE 42370
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42344: LD_VAR 0 4
42348: PPUSH
42349: LD_VAR 0 6
42353: PPUSH
42354: LD_VAR 0 4
42358: PPUSH
42359: CALL_OW 74
42363: PPUSH
42364: CALL_OW 112
42368: GO 42394
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42370: LD_VAR 0 4
42374: PPUSH
42375: LD_VAR 0 6
42379: PPUSH
42380: LD_VAR 0 4
42384: PPUSH
42385: CALL_OW 74
42389: PPUSH
42390: CALL 43644 0 2
// end else
42394: GO 42496
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42396: LD_VAR 0 4
42400: PPUSH
42401: LD_VAR 0 2
42405: PUSH
42406: LD_VAR 0 9
42410: ARRAY
42411: PUSH
42412: LD_INT 1
42414: ARRAY
42415: PPUSH
42416: LD_VAR 0 2
42420: PUSH
42421: LD_VAR 0 9
42425: ARRAY
42426: PUSH
42427: LD_INT 2
42429: ARRAY
42430: PPUSH
42431: CALL_OW 297
42435: PUSH
42436: LD_INT 6
42438: GREATER
42439: IFFALSE 42482
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42441: LD_VAR 0 4
42445: PPUSH
42446: LD_VAR 0 2
42450: PUSH
42451: LD_VAR 0 9
42455: ARRAY
42456: PUSH
42457: LD_INT 1
42459: ARRAY
42460: PPUSH
42461: LD_VAR 0 2
42465: PUSH
42466: LD_VAR 0 9
42470: ARRAY
42471: PUSH
42472: LD_INT 2
42474: ARRAY
42475: PPUSH
42476: CALL_OW 114
42480: GO 42496
// SetTag ( i , tag ) ;
42482: LD_VAR 0 4
42486: PPUSH
42487: LD_VAR 0 9
42491: PPUSH
42492: CALL_OW 109
// end else
42496: GO 42569
// if enemy then
42498: LD_VAR 0 5
42502: IFFALSE 42569
// begin if GetWeapon ( i ) = ru_time_lapser then
42504: LD_VAR 0 4
42508: PPUSH
42509: CALL_OW 264
42513: PUSH
42514: LD_INT 49
42516: EQUAL
42517: IFFALSE 42545
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42519: LD_VAR 0 4
42523: PPUSH
42524: LD_VAR 0 5
42528: PPUSH
42529: LD_VAR 0 4
42533: PPUSH
42534: CALL_OW 74
42538: PPUSH
42539: CALL_OW 112
42543: GO 42569
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42545: LD_VAR 0 4
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: LD_VAR 0 4
42559: PPUSH
42560: CALL_OW 74
42564: PPUSH
42565: CALL 43644 0 2
// end ; end ;
42569: GO 42145
42571: POP
42572: POP
// end ;
42573: LD_VAR 0 3
42577: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42578: LD_INT 0
42580: PPUSH
42581: PPUSH
42582: PPUSH
// if not unit or IsInUnit ( unit ) then
42583: LD_VAR 0 1
42587: NOT
42588: PUSH
42589: LD_VAR 0 1
42593: PPUSH
42594: CALL_OW 310
42598: OR
42599: IFFALSE 42603
// exit ;
42601: GO 42694
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42603: LD_ADDR_VAR 0 4
42607: PUSH
42608: LD_VAR 0 1
42612: PPUSH
42613: CALL_OW 250
42617: PPUSH
42618: LD_VAR 0 2
42622: PPUSH
42623: LD_INT 1
42625: PPUSH
42626: CALL_OW 272
42630: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42631: LD_ADDR_VAR 0 5
42635: PUSH
42636: LD_VAR 0 1
42640: PPUSH
42641: CALL_OW 251
42645: PPUSH
42646: LD_VAR 0 2
42650: PPUSH
42651: LD_INT 1
42653: PPUSH
42654: CALL_OW 273
42658: ST_TO_ADDR
// if ValidHex ( x , y ) then
42659: LD_VAR 0 4
42663: PPUSH
42664: LD_VAR 0 5
42668: PPUSH
42669: CALL_OW 488
42673: IFFALSE 42694
// ComTurnXY ( unit , x , y ) ;
42675: LD_VAR 0 1
42679: PPUSH
42680: LD_VAR 0 4
42684: PPUSH
42685: LD_VAR 0 5
42689: PPUSH
42690: CALL_OW 118
// end ;
42694: LD_VAR 0 3
42698: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42699: LD_INT 0
42701: PPUSH
42702: PPUSH
// result := false ;
42703: LD_ADDR_VAR 0 3
42707: PUSH
42708: LD_INT 0
42710: ST_TO_ADDR
// if not units then
42711: LD_VAR 0 2
42715: NOT
42716: IFFALSE 42720
// exit ;
42718: GO 42765
// for i in units do
42720: LD_ADDR_VAR 0 4
42724: PUSH
42725: LD_VAR 0 2
42729: PUSH
42730: FOR_IN
42731: IFFALSE 42763
// if See ( side , i ) then
42733: LD_VAR 0 1
42737: PPUSH
42738: LD_VAR 0 4
42742: PPUSH
42743: CALL_OW 292
42747: IFFALSE 42761
// begin result := true ;
42749: LD_ADDR_VAR 0 3
42753: PUSH
42754: LD_INT 1
42756: ST_TO_ADDR
// exit ;
42757: POP
42758: POP
42759: GO 42765
// end ;
42761: GO 42730
42763: POP
42764: POP
// end ;
42765: LD_VAR 0 3
42769: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42770: LD_INT 0
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
// if not unit or not points then
42776: LD_VAR 0 1
42780: NOT
42781: PUSH
42782: LD_VAR 0 2
42786: NOT
42787: OR
42788: IFFALSE 42792
// exit ;
42790: GO 42882
// dist := 99999 ;
42792: LD_ADDR_VAR 0 5
42796: PUSH
42797: LD_INT 99999
42799: ST_TO_ADDR
// for i in points do
42800: LD_ADDR_VAR 0 4
42804: PUSH
42805: LD_VAR 0 2
42809: PUSH
42810: FOR_IN
42811: IFFALSE 42880
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42813: LD_ADDR_VAR 0 6
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: LD_VAR 0 4
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: PPUSH
42832: LD_VAR 0 4
42836: PUSH
42837: LD_INT 2
42839: ARRAY
42840: PPUSH
42841: CALL_OW 297
42845: ST_TO_ADDR
// if tmpDist < dist then
42846: LD_VAR 0 6
42850: PUSH
42851: LD_VAR 0 5
42855: LESS
42856: IFFALSE 42878
// begin result := i ;
42858: LD_ADDR_VAR 0 3
42862: PUSH
42863: LD_VAR 0 4
42867: ST_TO_ADDR
// dist := tmpDist ;
42868: LD_ADDR_VAR 0 5
42872: PUSH
42873: LD_VAR 0 6
42877: ST_TO_ADDR
// end ; end ;
42878: GO 42810
42880: POP
42881: POP
// end ;
42882: LD_VAR 0 3
42886: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42887: LD_INT 0
42889: PPUSH
// uc_side := side ;
42890: LD_ADDR_OWVAR 20
42894: PUSH
42895: LD_VAR 0 1
42899: ST_TO_ADDR
// uc_nation := 3 ;
42900: LD_ADDR_OWVAR 21
42904: PUSH
42905: LD_INT 3
42907: ST_TO_ADDR
// vc_chassis := 25 ;
42908: LD_ADDR_OWVAR 37
42912: PUSH
42913: LD_INT 25
42915: ST_TO_ADDR
// vc_engine := engine_siberite ;
42916: LD_ADDR_OWVAR 39
42920: PUSH
42921: LD_INT 3
42923: ST_TO_ADDR
// vc_control := control_computer ;
42924: LD_ADDR_OWVAR 38
42928: PUSH
42929: LD_INT 3
42931: ST_TO_ADDR
// vc_weapon := 59 ;
42932: LD_ADDR_OWVAR 40
42936: PUSH
42937: LD_INT 59
42939: ST_TO_ADDR
// result := CreateVehicle ;
42940: LD_ADDR_VAR 0 5
42944: PUSH
42945: CALL_OW 45
42949: ST_TO_ADDR
// SetDir ( result , d ) ;
42950: LD_VAR 0 5
42954: PPUSH
42955: LD_VAR 0 4
42959: PPUSH
42960: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42964: LD_VAR 0 5
42968: PPUSH
42969: LD_VAR 0 2
42973: PPUSH
42974: LD_VAR 0 3
42978: PPUSH
42979: LD_INT 0
42981: PPUSH
42982: CALL_OW 48
// end ;
42986: LD_VAR 0 5
42990: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42991: LD_INT 0
42993: PPUSH
42994: PPUSH
42995: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42996: LD_ADDR_VAR 0 2
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43019: LD_VAR 0 1
43023: NOT
43024: PUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 264
43034: PUSH
43035: LD_INT 12
43037: PUSH
43038: LD_INT 51
43040: PUSH
43041: LD_INT 32
43043: PUSH
43044: LD_INT 89
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: IN
43053: NOT
43054: OR
43055: IFFALSE 43059
// exit ;
43057: GO 43157
// for i := 1 to 3 do
43059: LD_ADDR_VAR 0 3
43063: PUSH
43064: DOUBLE
43065: LD_INT 1
43067: DEC
43068: ST_TO_ADDR
43069: LD_INT 3
43071: PUSH
43072: FOR_TO
43073: IFFALSE 43155
// begin tmp := GetCargo ( cargo , i ) ;
43075: LD_ADDR_VAR 0 4
43079: PUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: LD_VAR 0 3
43089: PPUSH
43090: CALL_OW 289
43094: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43095: LD_ADDR_VAR 0 2
43099: PUSH
43100: LD_VAR 0 2
43104: PPUSH
43105: LD_VAR 0 3
43109: PPUSH
43110: LD_VAR 0 4
43114: PPUSH
43115: CALL_OW 1
43119: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43120: LD_ADDR_VAR 0 2
43124: PUSH
43125: LD_VAR 0 2
43129: PPUSH
43130: LD_INT 4
43132: PPUSH
43133: LD_VAR 0 2
43137: PUSH
43138: LD_INT 4
43140: ARRAY
43141: PUSH
43142: LD_VAR 0 4
43146: PLUS
43147: PPUSH
43148: CALL_OW 1
43152: ST_TO_ADDR
// end ;
43153: GO 43072
43155: POP
43156: POP
// end ;
43157: LD_VAR 0 2
43161: RET
// export function Length ( array ) ; begin
43162: LD_INT 0
43164: PPUSH
// result := array + 0 ;
43165: LD_ADDR_VAR 0 2
43169: PUSH
43170: LD_VAR 0 1
43174: PUSH
43175: LD_INT 0
43177: PLUS
43178: ST_TO_ADDR
// end ;
43179: LD_VAR 0 2
43183: RET
// export function PrepareArray ( array ) ; begin
43184: LD_INT 0
43186: PPUSH
// result := array diff 0 ;
43187: LD_ADDR_VAR 0 2
43191: PUSH
43192: LD_VAR 0 1
43196: PUSH
43197: LD_INT 0
43199: DIFF
43200: ST_TO_ADDR
// if not result [ 1 ] then
43201: LD_VAR 0 2
43205: PUSH
43206: LD_INT 1
43208: ARRAY
43209: NOT
43210: IFFALSE 43230
// result := Delete ( result , 1 ) ;
43212: LD_ADDR_VAR 0 2
43216: PUSH
43217: LD_VAR 0 2
43221: PPUSH
43222: LD_INT 1
43224: PPUSH
43225: CALL_OW 3
43229: ST_TO_ADDR
// end ;
43230: LD_VAR 0 2
43234: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43235: LD_INT 0
43237: PPUSH
43238: PPUSH
43239: PPUSH
43240: PPUSH
// sibRocketRange := 25 ;
43241: LD_ADDR_VAR 0 6
43245: PUSH
43246: LD_INT 25
43248: ST_TO_ADDR
// result := false ;
43249: LD_ADDR_VAR 0 4
43253: PUSH
43254: LD_INT 0
43256: ST_TO_ADDR
// for i := 0 to 5 do
43257: LD_ADDR_VAR 0 5
43261: PUSH
43262: DOUBLE
43263: LD_INT 0
43265: DEC
43266: ST_TO_ADDR
43267: LD_INT 5
43269: PUSH
43270: FOR_TO
43271: IFFALSE 43338
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43273: LD_VAR 0 1
43277: PPUSH
43278: LD_VAR 0 5
43282: PPUSH
43283: LD_VAR 0 6
43287: PPUSH
43288: CALL_OW 272
43292: PPUSH
43293: LD_VAR 0 2
43297: PPUSH
43298: LD_VAR 0 5
43302: PPUSH
43303: LD_VAR 0 6
43307: PPUSH
43308: CALL_OW 273
43312: PPUSH
43313: LD_VAR 0 3
43317: PPUSH
43318: CALL_OW 309
43322: IFFALSE 43336
// begin result := true ;
43324: LD_ADDR_VAR 0 4
43328: PUSH
43329: LD_INT 1
43331: ST_TO_ADDR
// exit ;
43332: POP
43333: POP
43334: GO 43340
// end ;
43336: GO 43270
43338: POP
43339: POP
// end ;
43340: LD_VAR 0 4
43344: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43345: LD_INT 0
43347: PPUSH
43348: PPUSH
43349: PPUSH
// if btype = b_depot then
43350: LD_VAR 0 2
43354: PUSH
43355: LD_INT 0
43357: EQUAL
43358: IFFALSE 43370
// begin result := true ;
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_INT 1
43367: ST_TO_ADDR
// exit ;
43368: GO 43486
// end ; pom := GetBase ( depot ) ;
43370: LD_ADDR_VAR 0 4
43374: PUSH
43375: LD_VAR 0 1
43379: PPUSH
43380: CALL_OW 274
43384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43385: LD_ADDR_VAR 0 5
43389: PUSH
43390: LD_VAR 0 2
43394: PPUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL_OW 248
43404: PPUSH
43405: CALL_OW 450
43409: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_VAR 0 4
43419: PPUSH
43420: LD_INT 1
43422: PPUSH
43423: CALL_OW 275
43427: PUSH
43428: LD_VAR 0 5
43432: PUSH
43433: LD_INT 1
43435: ARRAY
43436: GREATEREQUAL
43437: PUSH
43438: LD_VAR 0 4
43442: PPUSH
43443: LD_INT 2
43445: PPUSH
43446: CALL_OW 275
43450: PUSH
43451: LD_VAR 0 5
43455: PUSH
43456: LD_INT 2
43458: ARRAY
43459: GREATEREQUAL
43460: AND
43461: PUSH
43462: LD_VAR 0 4
43466: PPUSH
43467: LD_INT 3
43469: PPUSH
43470: CALL_OW 275
43474: PUSH
43475: LD_VAR 0 5
43479: PUSH
43480: LD_INT 3
43482: ARRAY
43483: GREATEREQUAL
43484: AND
43485: ST_TO_ADDR
// end ;
43486: LD_VAR 0 3
43490: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43491: LD_INT 0
43493: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43494: LD_VAR 0 1
43498: PPUSH
43499: LD_VAR 0 2
43503: PPUSH
43504: LD_INT 0
43506: PPUSH
43507: LD_INT 0
43509: PPUSH
43510: LD_INT 1
43512: PPUSH
43513: LD_INT 0
43515: PPUSH
43516: CALL_OW 587
// end ;
43520: LD_VAR 0 3
43524: RET
// export function CenterOnNow ( unit ) ; begin
43525: LD_INT 0
43527: PPUSH
// result := IsInUnit ( unit ) ;
43528: LD_ADDR_VAR 0 2
43532: PUSH
43533: LD_VAR 0 1
43537: PPUSH
43538: CALL_OW 310
43542: ST_TO_ADDR
// if not result then
43543: LD_VAR 0 2
43547: NOT
43548: IFFALSE 43560
// result := unit ;
43550: LD_ADDR_VAR 0 2
43554: PUSH
43555: LD_VAR 0 1
43559: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 87
// end ;
43569: LD_VAR 0 2
43573: RET
// export function ComMoveHex ( unit , hex ) ; begin
43574: LD_INT 0
43576: PPUSH
// if not hex then
43577: LD_VAR 0 2
43581: NOT
43582: IFFALSE 43586
// exit ;
43584: GO 43639
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43586: LD_VAR 0 2
43590: PUSH
43591: LD_INT 1
43593: ARRAY
43594: PPUSH
43595: LD_VAR 0 2
43599: PUSH
43600: LD_INT 2
43602: ARRAY
43603: PPUSH
43604: CALL_OW 428
43608: IFFALSE 43612
// exit ;
43610: GO 43639
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43612: LD_VAR 0 1
43616: PPUSH
43617: LD_VAR 0 2
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PPUSH
43626: LD_VAR 0 2
43630: PUSH
43631: LD_INT 2
43633: ARRAY
43634: PPUSH
43635: CALL_OW 111
// end ;
43639: LD_VAR 0 3
43643: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43644: LD_INT 0
43646: PPUSH
43647: PPUSH
43648: PPUSH
// if not unit or not enemy then
43649: LD_VAR 0 1
43653: NOT
43654: PUSH
43655: LD_VAR 0 2
43659: NOT
43660: OR
43661: IFFALSE 43665
// exit ;
43663: GO 43789
// x := GetX ( enemy ) ;
43665: LD_ADDR_VAR 0 4
43669: PUSH
43670: LD_VAR 0 2
43674: PPUSH
43675: CALL_OW 250
43679: ST_TO_ADDR
// y := GetY ( enemy ) ;
43680: LD_ADDR_VAR 0 5
43684: PUSH
43685: LD_VAR 0 2
43689: PPUSH
43690: CALL_OW 251
43694: ST_TO_ADDR
// if ValidHex ( x , y ) then
43695: LD_VAR 0 4
43699: PPUSH
43700: LD_VAR 0 5
43704: PPUSH
43705: CALL_OW 488
43709: IFFALSE 43789
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43711: LD_VAR 0 2
43715: PPUSH
43716: CALL_OW 247
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: IN
43731: PUSH
43732: LD_VAR 0 1
43736: PPUSH
43737: CALL_OW 255
43741: PPUSH
43742: LD_VAR 0 2
43746: PPUSH
43747: CALL_OW 292
43751: OR
43752: IFFALSE 43770
// ComAttackUnit ( unit , enemy ) else
43754: LD_VAR 0 1
43758: PPUSH
43759: LD_VAR 0 2
43763: PPUSH
43764: CALL_OW 115
43768: GO 43789
// ComAgressiveMove ( unit , x , y ) ;
43770: LD_VAR 0 1
43774: PPUSH
43775: LD_VAR 0 4
43779: PPUSH
43780: LD_VAR 0 5
43784: PPUSH
43785: CALL_OW 114
// end ;
43789: LD_VAR 0 3
43793: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43794: LD_INT 0
43796: PPUSH
43797: PPUSH
43798: PPUSH
// list := AreaToList ( area , 0 ) ;
43799: LD_ADDR_VAR 0 5
43803: PUSH
43804: LD_VAR 0 1
43808: PPUSH
43809: LD_INT 0
43811: PPUSH
43812: CALL_OW 517
43816: ST_TO_ADDR
// if not list then
43817: LD_VAR 0 5
43821: NOT
43822: IFFALSE 43826
// exit ;
43824: GO 43956
// if all then
43826: LD_VAR 0 2
43830: IFFALSE 43918
// begin for i := 1 to list [ 1 ] do
43832: LD_ADDR_VAR 0 4
43836: PUSH
43837: DOUBLE
43838: LD_INT 1
43840: DEC
43841: ST_TO_ADDR
43842: LD_VAR 0 5
43846: PUSH
43847: LD_INT 1
43849: ARRAY
43850: PUSH
43851: FOR_TO
43852: IFFALSE 43914
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_VAR 0 3
43863: PPUSH
43864: LD_VAR 0 3
43868: PUSH
43869: LD_INT 1
43871: PLUS
43872: PPUSH
43873: LD_VAR 0 5
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: PUSH
43882: LD_VAR 0 4
43886: ARRAY
43887: PUSH
43888: LD_VAR 0 5
43892: PUSH
43893: LD_INT 2
43895: ARRAY
43896: PUSH
43897: LD_VAR 0 4
43901: ARRAY
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PPUSH
43907: CALL_OW 1
43911: ST_TO_ADDR
43912: GO 43851
43914: POP
43915: POP
// exit ;
43916: GO 43956
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43918: LD_ADDR_VAR 0 3
43922: PUSH
43923: LD_VAR 0 5
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: PUSH
43936: LD_VAR 0 5
43940: PUSH
43941: LD_INT 2
43943: ARRAY
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: ST_TO_ADDR
// end ;
43956: LD_VAR 0 3
43960: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43961: LD_INT 0
43963: PPUSH
43964: PPUSH
// list := AreaToList ( area , 0 ) ;
43965: LD_ADDR_VAR 0 4
43969: PUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: LD_INT 0
43977: PPUSH
43978: CALL_OW 517
43982: ST_TO_ADDR
// if not list then
43983: LD_VAR 0 4
43987: NOT
43988: IFFALSE 43992
// exit ;
43990: GO 44033
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: LD_VAR 0 4
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: PUSH
44006: LD_INT 1
44008: ARRAY
44009: PUSH
44010: LD_VAR 0 4
44014: PUSH
44015: LD_INT 2
44017: ARRAY
44018: PUSH
44019: LD_INT 1
44021: ARRAY
44022: PUSH
44023: LD_VAR 0 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: ST_TO_ADDR
// end ;
44033: LD_VAR 0 3
44037: RET
// export function First ( array ) ; begin
44038: LD_INT 0
44040: PPUSH
// if not array then
44041: LD_VAR 0 1
44045: NOT
44046: IFFALSE 44050
// exit ;
44048: GO 44064
// result := array [ 1 ] ;
44050: LD_ADDR_VAR 0 2
44054: PUSH
44055: LD_VAR 0 1
44059: PUSH
44060: LD_INT 1
44062: ARRAY
44063: ST_TO_ADDR
// end ;
44064: LD_VAR 0 2
44068: RET
// export function Last ( array ) ; begin
44069: LD_INT 0
44071: PPUSH
// if not array then
44072: LD_VAR 0 1
44076: NOT
44077: IFFALSE 44081
// exit ;
44079: GO 44097
// result := array [ array ] ;
44081: LD_ADDR_VAR 0 2
44085: PUSH
44086: LD_VAR 0 1
44090: PUSH
44091: LD_VAR 0 1
44095: ARRAY
44096: ST_TO_ADDR
// end ;
44097: LD_VAR 0 2
44101: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44102: LD_INT 0
44104: PPUSH
44105: PPUSH
// result := [ ] ;
44106: LD_ADDR_VAR 0 5
44110: PUSH
44111: EMPTY
44112: ST_TO_ADDR
// if not array then
44113: LD_VAR 0 1
44117: NOT
44118: IFFALSE 44122
// exit ;
44120: GO 44234
// for i := 1 to array do
44122: LD_ADDR_VAR 0 6
44126: PUSH
44127: DOUBLE
44128: LD_INT 1
44130: DEC
44131: ST_TO_ADDR
44132: LD_VAR 0 1
44136: PUSH
44137: FOR_TO
44138: IFFALSE 44232
// if array [ i ] [ index ] = value then
44140: LD_VAR 0 1
44144: PUSH
44145: LD_VAR 0 6
44149: ARRAY
44150: PUSH
44151: LD_VAR 0 2
44155: ARRAY
44156: PUSH
44157: LD_VAR 0 3
44161: EQUAL
44162: IFFALSE 44230
// begin if indexColumn then
44164: LD_VAR 0 4
44168: IFFALSE 44204
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44170: LD_ADDR_VAR 0 5
44174: PUSH
44175: LD_VAR 0 5
44179: PPUSH
44180: LD_VAR 0 1
44184: PUSH
44185: LD_VAR 0 6
44189: ARRAY
44190: PUSH
44191: LD_VAR 0 4
44195: ARRAY
44196: PPUSH
44197: CALL 39416 0 2
44201: ST_TO_ADDR
44202: GO 44230
// result := Join ( result , array [ i ] ) ;
44204: LD_ADDR_VAR 0 5
44208: PUSH
44209: LD_VAR 0 5
44213: PPUSH
44214: LD_VAR 0 1
44218: PUSH
44219: LD_VAR 0 6
44223: ARRAY
44224: PPUSH
44225: CALL 39416 0 2
44229: ST_TO_ADDR
// end ;
44230: GO 44137
44232: POP
44233: POP
// end ;
44234: LD_VAR 0 5
44238: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44239: LD_INT 0
44241: PPUSH
// if not vehicles or not parkingPoint then
44242: LD_VAR 0 1
44246: NOT
44247: PUSH
44248: LD_VAR 0 2
44252: NOT
44253: OR
44254: IFFALSE 44258
// exit ;
44256: GO 44356
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44258: LD_ADDR_VAR 0 1
44262: PUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: LD_INT 50
44270: PUSH
44271: EMPTY
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 92
44279: PUSH
44280: LD_VAR 0 2
44284: PUSH
44285: LD_INT 1
44287: ARRAY
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_INT 2
44296: ARRAY
44297: PUSH
44298: LD_INT 8
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PPUSH
44315: CALL_OW 72
44319: ST_TO_ADDR
// if not vehicles then
44320: LD_VAR 0 1
44324: NOT
44325: IFFALSE 44329
// exit ;
44327: GO 44356
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44329: LD_VAR 0 1
44333: PPUSH
44334: LD_VAR 0 2
44338: PUSH
44339: LD_INT 1
44341: ARRAY
44342: PPUSH
44343: LD_VAR 0 2
44347: PUSH
44348: LD_INT 2
44350: ARRAY
44351: PPUSH
44352: CALL_OW 111
// end ;
44356: LD_VAR 0 3
44360: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44361: LD_INT 0
44363: PPUSH
44364: PPUSH
44365: PPUSH
// if not side or not area then
44366: LD_VAR 0 1
44370: NOT
44371: PUSH
44372: LD_VAR 0 2
44376: NOT
44377: OR
44378: IFFALSE 44382
// exit ;
44380: GO 44501
// tmp := AreaToList ( area , 0 ) ;
44382: LD_ADDR_VAR 0 5
44386: PUSH
44387: LD_VAR 0 2
44391: PPUSH
44392: LD_INT 0
44394: PPUSH
44395: CALL_OW 517
44399: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44400: LD_ADDR_VAR 0 4
44404: PUSH
44405: DOUBLE
44406: LD_INT 1
44408: DEC
44409: ST_TO_ADDR
44410: LD_VAR 0 5
44414: PUSH
44415: LD_INT 1
44417: ARRAY
44418: PUSH
44419: FOR_TO
44420: IFFALSE 44499
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44422: LD_VAR 0 5
44426: PUSH
44427: LD_INT 1
44429: ARRAY
44430: PUSH
44431: LD_VAR 0 4
44435: ARRAY
44436: PPUSH
44437: LD_VAR 0 5
44441: PUSH
44442: LD_INT 2
44444: ARRAY
44445: PUSH
44446: LD_VAR 0 4
44450: ARRAY
44451: PPUSH
44452: CALL_OW 351
44456: IFFALSE 44497
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44458: LD_VAR 0 5
44462: PUSH
44463: LD_INT 1
44465: ARRAY
44466: PUSH
44467: LD_VAR 0 4
44471: ARRAY
44472: PPUSH
44473: LD_VAR 0 5
44477: PUSH
44478: LD_INT 2
44480: ARRAY
44481: PUSH
44482: LD_VAR 0 4
44486: ARRAY
44487: PPUSH
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 244
// end ;
44497: GO 44419
44499: POP
44500: POP
// end ;
44501: LD_VAR 0 3
44505: RET
