// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1713 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnitForce ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1713 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnitForce ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1713 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnitForce ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1713 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1713 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnitForce ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1713 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnitForce ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1713 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnitForce ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1713 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnitForce ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1713 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnitForce ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1713 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnitForce ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1713 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnitForce ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1713 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnitForce ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1713 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un , p ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
 635: PPUSH
// music_nat := 2 ;
 636: LD_ADDR_OWVAR 71
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// Video ( true ) ;
 644: LD_INT 1
 646: PPUSH
 647: CALL 39801 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 51
 658: PPUSH
 659: LD_INT 23
 661: PPUSH
 662: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 666: LD_OWVAR 3
 670: PUSH
 671: LD_EXP 3
 675: DIFF
 676: PPUSH
 677: LD_INT 53
 679: PPUSH
 680: LD_INT 27
 682: PPUSH
 683: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 687: LD_INT 52
 689: PPUSH
 690: LD_INT 25
 692: PPUSH
 693: CALL_OW 86
// wait ( 0 0$2 ) ;
 697: LD_INT 70
 699: PPUSH
 700: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 704: LD_INT 35
 706: PPUSH
 707: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 711: LD_EXP 3
 715: PPUSH
 716: LD_INT 51
 718: PPUSH
 719: LD_INT 23
 721: PPUSH
 722: CALL_OW 307
 726: IFTRUE 740
 728: PUSH
 729: LD_EXP 3
 733: PPUSH
 734: CALL_OW 314
 738: NOT
 739: OR
 740: IFFALSE 704
// ComTurnXY ( Heike , 53 , 26 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 53
 749: PPUSH
 750: LD_INT 26
 752: PPUSH
 753: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 757: LD_INT 10
 759: PPUSH
 760: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 764: LD_EXP 3
 768: PPUSH
 769: LD_STRING DH-Intro-1
 771: PPUSH
 772: CALL_OW 88
// ComHold ( all_units ) ;
 776: LD_OWVAR 3
 780: PPUSH
 781: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 785: LD_OWVAR 3
 789: PUSH
 790: LD_EXP 3
 794: DIFF
 795: PPUSH
 796: LD_EXP 3
 800: PPUSH
 801: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 805: LD_EXP 17
 809: IFFALSE 823
 811: PUSH
 812: LD_STRING 08_DealWithDoug
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: AND
 823: IFFALSE 935
// begin ComTurnUnit ( Heike , Doug ) ;
 825: LD_EXP 3
 829: PPUSH
 830: LD_EXP 17
 834: PPUSH
 835: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 839: LD_EXP 17
 843: PPUSH
 844: LD_STRING DCa-Intro-a-2
 846: PPUSH
 847: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 851: LD_EXP 3
 855: PPUSH
 856: LD_STRING DH-Intro-a-3
 858: PPUSH
 859: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 863: LD_EXP 17
 867: PPUSH
 868: LD_STRING DCa-Intro-a-4
 870: PPUSH
 871: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 875: LD_EXP 3
 879: PPUSH
 880: LD_STRING DH-Intro-a-5
 882: PPUSH
 883: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 887: LD_EXP 17
 891: PPUSH
 892: LD_STRING DCa-Intro-a-6
 894: PPUSH
 895: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 899: LD_EXP 16
 903: PUSH
 904: LD_EXP 17
 908: ADD
 909: PUSH
 910: LD_EXP 15
 914: ADD
 915: PPUSH
 916: LD_INT 5
 918: PPUSH
 919: LD_INT 7
 921: PPUSH
 922: CALL_OW 111
// wait ( 0 0$01 ) ;
 926: LD_INT 35
 928: PPUSH
 929: CALL_OW 67
// end else
 933: GO 1037
// if Harris then
 935: LD_EXP 16
 939: IFFALSE 1037
// begin ComTurnUnit ( Heike , Harris ) ;
 941: LD_EXP 3
 945: PPUSH
 946: LD_EXP 16
 950: PPUSH
 951: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 955: LD_EXP 16
 959: PPUSH
 960: LD_STRING DJ-Intro-2
 962: PPUSH
 963: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 967: LD_EXP 3
 971: PPUSH
 972: LD_STRING DH-Intro-3
 974: PPUSH
 975: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 979: LD_EXP 3
 983: PPUSH
 984: LD_STRING DH-Intro-4
 986: PPUSH
 987: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 991: LD_EXP 16
 995: PPUSH
 996: LD_STRING DJ-Intro-5
 998: PPUSH
 999: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
1003: LD_EXP 16
1007: PUSH
1008: LD_EXP 17
1012: ADD
1013: PUSH
1014: LD_EXP 15
1018: ADD
1019: PPUSH
1020: LD_INT 5
1022: PPUSH
1023: LD_INT 7
1025: PPUSH
1026: CALL_OW 111
// wait ( 0 0$01 ) ;
1030: LD_INT 35
1032: PPUSH
1033: CALL_OW 67
// end ; if Givi then
1037: LD_EXP 4
1041: IFFALSE 1173
// begin ComMoveUnit ( Givi , Heike ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_EXP 3
1052: PPUSH
1053: CALL_OW 112
// p := 0 ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1065: LD_INT 35
1067: PPUSH
1068: CALL_OW 67
// p := Inc ( p ) ;
1072: LD_ADDR_VAR 0 4
1076: PUSH
1077: LD_VAR 0 4
1081: PPUSH
1082: CALL 41202 0 1
1086: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) or p > 8 ;
1087: LD_EXP 3
1091: PPUSH
1092: LD_EXP 4
1096: PPUSH
1097: CALL_OW 296
1101: PUSH
1102: LD_INT 4
1104: LESS
1105: IFTRUE 1119
1107: PUSH
1108: LD_EXP 4
1112: PPUSH
1113: CALL_OW 314
1117: NOT
1118: OR
1119: IFTRUE 1131
1121: PUSH
1122: LD_VAR 0 4
1126: PUSH
1127: LD_INT 8
1129: GREATER
1130: OR
1131: IFFALSE 1065
// ComTurnUnit ( Givi , Heike ) ;
1133: LD_EXP 4
1137: PPUSH
1138: LD_EXP 3
1142: PPUSH
1143: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1147: LD_EXP 3
1151: PPUSH
1152: LD_EXP 4
1156: PPUSH
1157: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_STRING DG-Intro-7
1168: PPUSH
1169: CALL_OW 88
// end ; if not Givi then
1173: LD_EXP 4
1177: NOT
1178: IFFALSE 1195
// ComTurnXY ( Heike , 52 , 25 ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_INT 52
1187: PPUSH
1188: LD_INT 25
1190: PPUSH
1191: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1195: LD_EXP 3
1199: PPUSH
1200: LD_STRING DH-Intro-7
1202: PPUSH
1203: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1207: LD_INT 22
1209: PUSH
1210: LD_INT 2
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PPUSH
1217: CALL_OW 69
1221: PPUSH
1222: LD_INT 48
1224: PPUSH
1225: LD_INT 4
1227: PPUSH
1228: CALL_OW 111
// wait ( 0 0$3 ) ;
1232: LD_INT 105
1234: PPUSH
1235: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1239: LD_INT 74
1241: PPUSH
1242: LD_INT 79
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: LD_INT 16
1250: NEG
1251: PPUSH
1252: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1256: LD_INT 74
1258: PPUSH
1259: LD_INT 79
1261: PPUSH
1262: CALL_OW 84
// uc_side := 3 ;
1266: LD_ADDR_OWVAR 20
1270: PUSH
1271: LD_INT 3
1273: ST_TO_ADDR
// uc_nation := nation_russian ;
1274: LD_ADDR_OWVAR 21
1278: PUSH
1279: LD_INT 3
1281: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1282: LD_INT 22
1284: PPUSH
1285: LD_INT 3
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 43
1293: PPUSH
1294: LD_INT 100
1296: PPUSH
1297: CALL 6649 0 5
// un := CreateVehicle ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: CALL_OW 45
1310: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 76
1318: PPUSH
1319: LD_INT 87
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 8
1334: PPUSH
1335: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1339: CALL_OW 44
1343: PPUSH
1344: LD_VAR 0 3
1348: PPUSH
1349: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1353: LD_VAR 0 3
1357: PPUSH
1358: LD_INT 67
1360: PPUSH
1361: LD_INT 56
1363: PPUSH
1364: CALL_OW 111
// wait ( 0 0$1 ) ;
1368: LD_INT 35
1370: PPUSH
1371: CALL_OW 67
// for i := 1 to 3 do
1375: LD_ADDR_VAR 0 2
1379: PUSH
1380: DOUBLE
1381: LD_INT 1
1383: DEC
1384: ST_TO_ADDR
1385: LD_INT 3
1387: PUSH
1388: FOR_TO
1389: IFFALSE 1449
// begin PrepareSoldier ( false , 8 ) ;
1391: LD_INT 0
1393: PPUSH
1394: LD_INT 8
1396: PPUSH
1397: CALL_OW 381
// un := CreateHuman ;
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: CALL_OW 44
1410: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1411: LD_VAR 0 3
1415: PPUSH
1416: LD_INT 76
1418: PPUSH
1419: LD_INT 87
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1432: LD_VAR 0 3
1436: PPUSH
1437: LD_INT 67
1439: PPUSH
1440: LD_INT 56
1442: PPUSH
1443: CALL_OW 111
// end ;
1447: GO 1388
1449: POP
1450: POP
// wait ( 0 0$2 ) ;
1451: LD_INT 70
1453: PPUSH
1454: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1458: LD_INT 1
1460: PPUSH
1461: LD_STRING %_cont
1463: PPUSH
1464: CALL_OW 340
// Video ( false ) ;
1468: LD_INT 0
1470: PPUSH
1471: CALL 39801 0 1
// end ;
1475: LD_VAR 0 1
1479: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1480: LD_INT 5
1482: PPUSH
1483: LD_INT 22
1485: PUSH
1486: LD_INT 4
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PPUSH
1493: CALL_OW 70
1497: IFFALSE 1545
1499: GO 1501
1501: DISABLE
1502: LD_INT 0
1504: PPUSH
// begin enable ;
1505: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: LD_INT 5
1513: PPUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 70
1528: PUSH
1529: FOR_IN
1530: IFFALSE 1543
// RemoveUnit ( i ) ;
1532: LD_VAR 0 1
1536: PPUSH
1537: CALL_OW 64
1541: GO 1529
1543: POP
1544: POP
// end ;
1545: PPOPN 1
1547: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1548: LD_INT 6
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 2
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PPUSH
1561: CALL_OW 70
1565: IFFALSE 1613
1567: GO 1569
1569: DISABLE
1570: LD_INT 0
1572: PPUSH
// begin enable ;
1573: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1574: LD_ADDR_VAR 0 1
1578: PUSH
1579: LD_INT 6
1581: PPUSH
1582: LD_INT 22
1584: PUSH
1585: LD_INT 2
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PPUSH
1592: CALL_OW 70
1596: PUSH
1597: FOR_IN
1598: IFFALSE 1611
// RemoveUnit ( i ) ;
1600: LD_VAR 0 1
1604: PPUSH
1605: CALL_OW 64
1609: GO 1597
1611: POP
1612: POP
// end ; end_of_file
1613: PPOPN 1
1615: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1616: LD_INT 1
1618: PPUSH
1619: LD_STRING %_cont
1621: PPUSH
1622: CALL_OW 340
// end ; end_of_file
1626: PPOPN 1
1628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
// if exist_mode then
1633: LD_VAR 0 2
1637: IFFALSE 1683
// begin unit := CreateCharacter ( prefix & ident ) ;
1639: LD_ADDR_VAR 0 5
1643: PUSH
1644: LD_VAR 0 3
1648: PUSH
1649: LD_VAR 0 1
1653: STR
1654: PPUSH
1655: CALL_OW 34
1659: ST_TO_ADDR
// if unit then
1660: LD_VAR 0 5
1664: IFFALSE 1681
// DeleteCharacters ( prefix & ident ) ;
1666: LD_VAR 0 3
1670: PUSH
1671: LD_VAR 0 1
1675: STR
1676: PPUSH
1677: CALL_OW 40
// end else
1681: GO 1698
// unit := NewCharacter ( ident ) ;
1683: LD_ADDR_VAR 0 5
1687: PUSH
1688: LD_VAR 0 1
1692: PPUSH
1693: CALL_OW 25
1697: ST_TO_ADDR
// result := unit ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 5
1707: ST_TO_ADDR
// end ;
1708: LD_VAR 0 4
1712: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1713: LD_INT 0
1715: PPUSH
1716: PPUSH
// if exist_mode then
1717: LD_VAR 0 2
1721: IFFALSE 1746
// unit := CreateCharacter ( prefix & ident ) else
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 3
1732: PUSH
1733: LD_VAR 0 1
1737: STR
1738: PPUSH
1739: CALL_OW 34
1743: ST_TO_ADDR
1744: GO 1761
// unit := NewCharacter ( ident ) ;
1746: LD_ADDR_VAR 0 5
1750: PUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: CALL_OW 25
1760: ST_TO_ADDR
// result := unit ;
1761: LD_ADDR_VAR 0 4
1765: PUSH
1766: LD_VAR 0 5
1770: ST_TO_ADDR
// end ;
1771: LD_VAR 0 4
1775: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// if not side or not nation then
1780: LD_VAR 0 1
1784: NOT
1785: IFTRUE 1794
1787: PUSH
1788: LD_VAR 0 2
1792: NOT
1793: OR
1794: IFFALSE 1798
// exit ;
1796: GO 2592
// case nation of nation_american :
1798: LD_VAR 0 2
1802: PUSH
1803: LD_INT 1
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 2033
1811: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1812: LD_ADDR_VAR 0 4
1816: PUSH
1817: LD_INT 35
1819: PUSH
1820: LD_INT 45
1822: PUSH
1823: LD_INT 46
1825: PUSH
1826: LD_INT 47
1828: PUSH
1829: LD_INT 82
1831: PUSH
1832: LD_INT 83
1834: PUSH
1835: LD_INT 84
1837: PUSH
1838: LD_INT 85
1840: PUSH
1841: LD_INT 86
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 6
1852: PUSH
1853: LD_INT 15
1855: PUSH
1856: LD_INT 16
1858: PUSH
1859: LD_INT 7
1861: PUSH
1862: LD_INT 12
1864: PUSH
1865: LD_INT 13
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: LD_INT 14
1873: PUSH
1874: LD_INT 20
1876: PUSH
1877: LD_INT 21
1879: PUSH
1880: LD_INT 22
1882: PUSH
1883: LD_INT 25
1885: PUSH
1886: LD_INT 32
1888: PUSH
1889: LD_INT 27
1891: PUSH
1892: LD_INT 36
1894: PUSH
1895: LD_INT 69
1897: PUSH
1898: LD_INT 39
1900: PUSH
1901: LD_INT 34
1903: PUSH
1904: LD_INT 40
1906: PUSH
1907: LD_INT 48
1909: PUSH
1910: LD_INT 49
1912: PUSH
1913: LD_INT 50
1915: PUSH
1916: LD_INT 51
1918: PUSH
1919: LD_INT 52
1921: PUSH
1922: LD_INT 53
1924: PUSH
1925: LD_INT 54
1927: PUSH
1928: LD_INT 55
1930: PUSH
1931: LD_INT 56
1933: PUSH
1934: LD_INT 57
1936: PUSH
1937: LD_INT 58
1939: PUSH
1940: LD_INT 59
1942: PUSH
1943: LD_INT 60
1945: PUSH
1946: LD_INT 61
1948: PUSH
1949: LD_INT 62
1951: PUSH
1952: LD_INT 80
1954: PUSH
1955: LD_INT 82
1957: PUSH
1958: LD_INT 83
1960: PUSH
1961: LD_INT 84
1963: PUSH
1964: LD_INT 85
1966: PUSH
1967: LD_INT 86
1969: PUSH
1970: LD_INT 90
1972: PUSH
1973: LD_INT 93
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: ST_TO_ADDR
2031: GO 2514
2033: LD_INT 2
2035: DOUBLE
2036: EQUAL
2037: IFTRUE 2041
2039: GO 2275
2041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
2042: LD_ADDR_VAR 0 4
2046: PUSH
2047: LD_INT 35
2049: PUSH
2050: LD_INT 45
2052: PUSH
2053: LD_INT 46
2055: PUSH
2056: LD_INT 47
2058: PUSH
2059: LD_INT 82
2061: PUSH
2062: LD_INT 83
2064: PUSH
2065: LD_INT 84
2067: PUSH
2068: LD_INT 85
2070: PUSH
2071: LD_INT 87
2073: PUSH
2074: LD_INT 70
2076: PUSH
2077: LD_INT 1
2079: PUSH
2080: LD_INT 11
2082: PUSH
2083: LD_INT 3
2085: PUSH
2086: LD_INT 4
2088: PUSH
2089: LD_INT 5
2091: PUSH
2092: LD_INT 6
2094: PUSH
2095: LD_INT 15
2097: PUSH
2098: LD_INT 18
2100: PUSH
2101: LD_INT 7
2103: PUSH
2104: LD_INT 17
2106: PUSH
2107: LD_INT 8
2109: PUSH
2110: LD_INT 20
2112: PUSH
2113: LD_INT 21
2115: PUSH
2116: LD_INT 22
2118: PUSH
2119: LD_INT 72
2121: PUSH
2122: LD_INT 26
2124: PUSH
2125: LD_INT 69
2127: PUSH
2128: LD_INT 39
2130: PUSH
2131: LD_INT 40
2133: PUSH
2134: LD_INT 41
2136: PUSH
2137: LD_INT 42
2139: PUSH
2140: LD_INT 43
2142: PUSH
2143: LD_INT 48
2145: PUSH
2146: LD_INT 49
2148: PUSH
2149: LD_INT 50
2151: PUSH
2152: LD_INT 51
2154: PUSH
2155: LD_INT 52
2157: PUSH
2158: LD_INT 53
2160: PUSH
2161: LD_INT 54
2163: PUSH
2164: LD_INT 55
2166: PUSH
2167: LD_INT 56
2169: PUSH
2170: LD_INT 60
2172: PUSH
2173: LD_INT 61
2175: PUSH
2176: LD_INT 62
2178: PUSH
2179: LD_INT 66
2181: PUSH
2182: LD_INT 67
2184: PUSH
2185: LD_INT 68
2187: PUSH
2188: LD_INT 81
2190: PUSH
2191: LD_INT 82
2193: PUSH
2194: LD_INT 83
2196: PUSH
2197: LD_INT 84
2199: PUSH
2200: LD_INT 85
2202: PUSH
2203: LD_INT 87
2205: PUSH
2206: LD_INT 88
2208: PUSH
2209: LD_INT 92
2211: PUSH
2212: LD_INT 94
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: ST_TO_ADDR
2273: GO 2514
2275: LD_INT 3
2277: DOUBLE
2278: EQUAL
2279: IFTRUE 2283
2281: GO 2513
2283: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2284: LD_ADDR_VAR 0 4
2288: PUSH
2289: LD_INT 46
2291: PUSH
2292: LD_INT 47
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: LD_INT 2
2300: PUSH
2301: LD_INT 82
2303: PUSH
2304: LD_INT 83
2306: PUSH
2307: LD_INT 84
2309: PUSH
2310: LD_INT 85
2312: PUSH
2313: LD_INT 86
2315: PUSH
2316: LD_INT 11
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_INT 20
2324: PUSH
2325: LD_INT 19
2327: PUSH
2328: LD_INT 21
2330: PUSH
2331: LD_INT 24
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_INT 25
2339: PUSH
2340: LD_INT 28
2342: PUSH
2343: LD_INT 29
2345: PUSH
2346: LD_INT 30
2348: PUSH
2349: LD_INT 31
2351: PUSH
2352: LD_INT 37
2354: PUSH
2355: LD_INT 38
2357: PUSH
2358: LD_INT 32
2360: PUSH
2361: LD_INT 27
2363: PUSH
2364: LD_INT 33
2366: PUSH
2367: LD_INT 69
2369: PUSH
2370: LD_INT 39
2372: PUSH
2373: LD_INT 34
2375: PUSH
2376: LD_INT 40
2378: PUSH
2379: LD_INT 71
2381: PUSH
2382: LD_INT 23
2384: PUSH
2385: LD_INT 44
2387: PUSH
2388: LD_INT 48
2390: PUSH
2391: LD_INT 49
2393: PUSH
2394: LD_INT 50
2396: PUSH
2397: LD_INT 51
2399: PUSH
2400: LD_INT 52
2402: PUSH
2403: LD_INT 53
2405: PUSH
2406: LD_INT 54
2408: PUSH
2409: LD_INT 55
2411: PUSH
2412: LD_INT 56
2414: PUSH
2415: LD_INT 57
2417: PUSH
2418: LD_INT 58
2420: PUSH
2421: LD_INT 59
2423: PUSH
2424: LD_INT 63
2426: PUSH
2427: LD_INT 64
2429: PUSH
2430: LD_INT 65
2432: PUSH
2433: LD_INT 82
2435: PUSH
2436: LD_INT 83
2438: PUSH
2439: LD_INT 84
2441: PUSH
2442: LD_INT 85
2444: PUSH
2445: LD_INT 86
2447: PUSH
2448: LD_INT 89
2450: PUSH
2451: LD_INT 91
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: ST_TO_ADDR
2511: GO 2514
2513: POP
// if state > - 1 and state < 3 then
2514: LD_VAR 0 3
2518: PUSH
2519: LD_INT 1
2521: NEG
2522: GREATER
2523: IFFALSE 2535
2525: PUSH
2526: LD_VAR 0 3
2530: PUSH
2531: LD_INT 3
2533: LESS
2534: AND
2535: IFFALSE 2592
// for i in result do
2537: LD_ADDR_VAR 0 5
2541: PUSH
2542: LD_VAR 0 4
2546: PUSH
2547: FOR_IN
2548: IFFALSE 2590
// if GetTech ( i , side ) <> state then
2550: LD_VAR 0 5
2554: PPUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 321
2564: PUSH
2565: LD_VAR 0 3
2569: NONEQUAL
2570: IFFALSE 2588
// result := result diff i ;
2572: LD_ADDR_VAR 0 4
2576: PUSH
2577: LD_VAR 0 4
2581: PUSH
2582: LD_VAR 0 5
2586: DIFF
2587: ST_TO_ADDR
2588: GO 2547
2590: POP
2591: POP
// end ;
2592: LD_VAR 0 4
2596: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2597: LD_INT 0
2599: PPUSH
2600: PPUSH
2601: PPUSH
// result := true ;
2602: LD_ADDR_VAR 0 3
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2610: LD_ADDR_VAR 0 5
2614: PUSH
2615: LD_VAR 0 2
2619: PPUSH
2620: CALL_OW 480
2624: ST_TO_ADDR
// if not tmp then
2625: LD_VAR 0 5
2629: NOT
2630: IFFALSE 2634
// exit ;
2632: GO 2683
// for i in tmp do
2634: LD_ADDR_VAR 0 4
2638: PUSH
2639: LD_VAR 0 5
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2681
// if GetTech ( i , side ) <> state_researched then
2647: LD_VAR 0 4
2651: PPUSH
2652: LD_VAR 0 1
2656: PPUSH
2657: CALL_OW 321
2661: PUSH
2662: LD_INT 2
2664: NONEQUAL
2665: IFFALSE 2679
// begin result := false ;
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// exit ;
2675: POP
2676: POP
2677: GO 2683
// end ;
2679: GO 2644
2681: POP
2682: POP
// end ;
2683: LD_VAR 0 3
2687: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2688: LD_INT 0
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2703: LD_VAR 0 1
2707: NOT
2708: IFTRUE 2725
2710: PUSH
2711: LD_VAR 0 1
2715: PPUSH
2716: CALL_OW 257
2720: PUSH
2721: LD_INT 9
2723: NONEQUAL
2724: OR
2725: IFFALSE 2729
// exit ;
2727: GO 3308
// side := GetSide ( unit ) ;
2729: LD_ADDR_VAR 0 9
2733: PUSH
2734: LD_VAR 0 1
2738: PPUSH
2739: CALL_OW 255
2743: ST_TO_ADDR
// tech_space := tech_spacanom ;
2744: LD_ADDR_VAR 0 12
2748: PUSH
2749: LD_INT 29
2751: ST_TO_ADDR
// tech_time := tech_taurad ;
2752: LD_ADDR_VAR 0 13
2756: PUSH
2757: LD_INT 28
2759: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2760: LD_ADDR_VAR 0 11
2764: PUSH
2765: LD_VAR 0 1
2769: PPUSH
2770: CALL_OW 310
2774: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2775: LD_VAR 0 11
2779: PPUSH
2780: CALL_OW 247
2784: PUSH
2785: LD_INT 2
2787: EQUAL
2788: IFFALSE 2792
// exit ;
2790: GO 3308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2792: LD_ADDR_VAR 0 8
2796: PUSH
2797: LD_INT 81
2799: PUSH
2800: LD_VAR 0 9
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 3
2811: PUSH
2812: LD_INT 21
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: ST_TO_ADDR
// if not tmp then
2835: LD_VAR 0 8
2839: NOT
2840: IFFALSE 2844
// exit ;
2842: GO 3308
// if in_unit then
2844: LD_VAR 0 11
2848: IFFALSE 2872
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2850: LD_ADDR_VAR 0 10
2854: PUSH
2855: LD_VAR 0 8
2859: PPUSH
2860: LD_VAR 0 11
2864: PPUSH
2865: CALL_OW 74
2869: ST_TO_ADDR
2870: GO 2892
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2872: LD_ADDR_VAR 0 10
2876: PUSH
2877: LD_VAR 0 8
2881: PPUSH
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL_OW 74
2891: ST_TO_ADDR
// if not enemy then
2892: LD_VAR 0 10
2896: NOT
2897: IFFALSE 2901
// exit ;
2899: GO 3308
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2901: LD_VAR 0 11
2905: IFFALSE 2927
2907: PUSH
2908: LD_VAR 0 11
2912: PPUSH
2913: LD_VAR 0 10
2917: PPUSH
2918: CALL_OW 296
2922: PUSH
2923: LD_INT 13
2925: GREATER
2926: AND
2927: IFTRUE 2949
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: LD_VAR 0 10
2939: PPUSH
2940: CALL_OW 296
2944: PUSH
2945: LD_INT 12
2947: GREATER
2948: OR
2949: IFFALSE 2953
// exit ;
2951: GO 3308
// missile := [ 1 ] ;
2953: LD_ADDR_VAR 0 14
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: EMPTY
2962: LIST
2963: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2964: LD_VAR 0 9
2968: PPUSH
2969: LD_VAR 0 12
2973: PPUSH
2974: CALL_OW 325
2978: IFFALSE 3007
// missile := Replace ( missile , missile + 1 , 2 ) ;
2980: LD_ADDR_VAR 0 14
2984: PUSH
2985: LD_VAR 0 14
2989: PPUSH
2990: LD_VAR 0 14
2994: PUSH
2995: LD_INT 1
2997: PLUS
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 1
3006: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3007: LD_VAR 0 9
3011: PPUSH
3012: LD_VAR 0 13
3016: PPUSH
3017: CALL_OW 325
3021: IFFALSE 3045
3023: PUSH
3024: LD_VAR 0 10
3028: PPUSH
3029: CALL_OW 255
3033: PPUSH
3034: LD_VAR 0 13
3038: PPUSH
3039: CALL_OW 325
3043: NOT
3044: AND
3045: IFFALSE 3074
// missile := Replace ( missile , missile + 1 , 3 ) ;
3047: LD_ADDR_VAR 0 14
3051: PUSH
3052: LD_VAR 0 14
3056: PPUSH
3057: LD_VAR 0 14
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: CALL_OW 1
3073: ST_TO_ADDR
// if missile < 2 then
3074: LD_VAR 0 14
3078: PUSH
3079: LD_INT 2
3081: LESS
3082: IFFALSE 3086
// exit ;
3084: GO 3308
// x := GetX ( enemy ) ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: LD_VAR 0 10
3095: PPUSH
3096: CALL_OW 250
3100: ST_TO_ADDR
// y := GetY ( enemy ) ;
3101: LD_ADDR_VAR 0 5
3105: PUSH
3106: LD_VAR 0 10
3110: PPUSH
3111: CALL_OW 251
3115: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3116: LD_ADDR_VAR 0 6
3120: PUSH
3121: LD_VAR 0 4
3125: PUSH
3126: LD_INT 1
3128: NEG
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 12
3137: PLUS
3138: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3139: LD_ADDR_VAR 0 7
3143: PUSH
3144: LD_VAR 0 5
3148: PUSH
3149: LD_INT 1
3151: NEG
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: CALL_OW 12
3160: PLUS
3161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3162: LD_VAR 0 6
3166: PPUSH
3167: LD_VAR 0 7
3171: PPUSH
3172: CALL_OW 488
3176: NOT
3177: IFFALSE 3199
// begin _x := x ;
3179: LD_ADDR_VAR 0 6
3183: PUSH
3184: LD_VAR 0 4
3188: ST_TO_ADDR
// _y := y ;
3189: LD_ADDR_VAR 0 7
3193: PUSH
3194: LD_VAR 0 5
3198: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3199: LD_ADDR_VAR 0 3
3203: PUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_VAR 0 14
3211: PPUSH
3212: CALL_OW 12
3216: ST_TO_ADDR
// case i of 1 :
3217: LD_VAR 0 3
3221: PUSH
3222: LD_INT 1
3224: DOUBLE
3225: EQUAL
3226: IFTRUE 3230
3228: GO 3247
3230: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3231: LD_VAR 0 1
3235: PPUSH
3236: LD_VAR 0 10
3240: PPUSH
3241: CALL_OW 115
3245: GO 3308
3247: LD_INT 2
3249: DOUBLE
3250: EQUAL
3251: IFTRUE 3255
3253: GO 3277
3255: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3256: LD_VAR 0 1
3260: PPUSH
3261: LD_VAR 0 6
3265: PPUSH
3266: LD_VAR 0 7
3270: PPUSH
3271: CALL_OW 153
3275: GO 3308
3277: LD_INT 3
3279: DOUBLE
3280: EQUAL
3281: IFTRUE 3285
3283: GO 3307
3285: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 6
3295: PPUSH
3296: LD_VAR 0 7
3300: PPUSH
3301: CALL_OW 154
3305: GO 3308
3307: POP
// end ;
3308: LD_VAR 0 2
3312: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3313: LD_INT 0
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// if not unit or not building then
3321: LD_VAR 0 1
3325: NOT
3326: IFTRUE 3335
3328: PUSH
3329: LD_VAR 0 2
3333: NOT
3334: OR
3335: IFFALSE 3339
// exit ;
3337: GO 3497
// x := GetX ( building ) ;
3339: LD_ADDR_VAR 0 5
3343: PUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: CALL_OW 250
3353: ST_TO_ADDR
// y := GetY ( building ) ;
3354: LD_ADDR_VAR 0 6
3358: PUSH
3359: LD_VAR 0 2
3363: PPUSH
3364: CALL_OW 251
3368: ST_TO_ADDR
// for i := 0 to 5 do
3369: LD_ADDR_VAR 0 4
3373: PUSH
3374: DOUBLE
3375: LD_INT 0
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 5
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3495
// begin _x := ShiftX ( x , i , 3 ) ;
3385: LD_ADDR_VAR 0 7
3389: PUSH
3390: LD_VAR 0 5
3394: PPUSH
3395: LD_VAR 0 4
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: CALL_OW 272
3407: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3408: LD_ADDR_VAR 0 8
3412: PUSH
3413: LD_VAR 0 6
3417: PPUSH
3418: LD_VAR 0 4
3422: PPUSH
3423: LD_INT 3
3425: PPUSH
3426: CALL_OW 273
3430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3431: LD_VAR 0 7
3435: PPUSH
3436: LD_VAR 0 8
3440: PPUSH
3441: CALL_OW 488
3445: NOT
3446: IFFALSE 3450
// continue ;
3448: GO 3382
// if HexInfo ( _x , _y ) = 0 then
3450: LD_VAR 0 7
3454: PPUSH
3455: LD_VAR 0 8
3459: PPUSH
3460: CALL_OW 428
3464: PUSH
3465: LD_INT 0
3467: EQUAL
3468: IFFALSE 3493
// begin ComMoveXY ( unit , _x , _y ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: LD_VAR 0 7
3479: PPUSH
3480: LD_VAR 0 8
3484: PPUSH
3485: CALL_OW 111
// exit ;
3489: POP
3490: POP
3491: GO 3497
// end ; end ;
3493: GO 3382
3495: POP
3496: POP
// end ;
3497: LD_VAR 0 3
3501: RET
// export function ScanBase ( side , base_area ) ; begin
3502: LD_INT 0
3504: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 2
3514: PPUSH
3515: LD_INT 81
3517: PUSH
3518: LD_VAR 0 1
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 70
3531: ST_TO_ADDR
// end ;
3532: LD_VAR 0 3
3536: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3537: LD_INT 0
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
// result := false ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// side := GetSide ( unit ) ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 255
3565: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: CALL_OW 248
3580: ST_TO_ADDR
// case nat of 1 :
3581: LD_VAR 0 4
3585: PUSH
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3605
3594: POP
// tech := tech_lassight ; 2 :
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_INT 12
3602: ST_TO_ADDR
3603: GO 3644
3605: LD_INT 2
3607: DOUBLE
3608: EQUAL
3609: IFTRUE 3613
3611: GO 3624
3613: POP
// tech := tech_mortar ; 3 :
3614: LD_ADDR_VAR 0 5
3618: PUSH
3619: LD_INT 41
3621: ST_TO_ADDR
3622: GO 3644
3624: LD_INT 3
3626: DOUBLE
3627: EQUAL
3628: IFTRUE 3632
3630: GO 3643
3632: POP
// tech := tech_bazooka ; end ;
3633: LD_ADDR_VAR 0 5
3637: PUSH
3638: LD_INT 44
3640: ST_TO_ADDR
3641: GO 3644
3643: POP
// if Researched ( side , tech ) then
3644: LD_VAR 0 3
3648: PPUSH
3649: LD_VAR 0 5
3653: PPUSH
3654: CALL_OW 325
3658: IFFALSE 3685
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: LD_INT 5
3667: PUSH
3668: LD_INT 8
3670: PUSH
3671: LD_INT 9
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_VAR 0 4
3683: ARRAY
3684: ST_TO_ADDR
// end ;
3685: LD_VAR 0 2
3689: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3690: LD_INT 0
3692: PPUSH
3693: PPUSH
3694: PPUSH
// if not mines then
3695: LD_VAR 0 2
3699: NOT
3700: IFFALSE 3704
// exit ;
3702: GO 3848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3704: LD_ADDR_VAR 0 5
3708: PUSH
3709: LD_INT 81
3711: PUSH
3712: LD_VAR 0 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 3
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PPUSH
3742: CALL_OW 69
3746: ST_TO_ADDR
// for i in mines do
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_VAR 0 2
3756: PUSH
3757: FOR_IN
3758: IFFALSE 3846
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3760: LD_VAR 0 4
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PPUSH
3769: LD_VAR 0 4
3773: PUSH
3774: LD_INT 2
3776: ARRAY
3777: PPUSH
3778: CALL_OW 458
3782: NOT
3783: IFFALSE 3787
// continue ;
3785: GO 3757
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3787: LD_VAR 0 4
3791: PUSH
3792: LD_INT 1
3794: ARRAY
3795: PPUSH
3796: LD_VAR 0 4
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: CALL_OW 428
3809: PUSH
3810: LD_VAR 0 5
3814: IN
3815: IFFALSE 3844
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3817: LD_VAR 0 4
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 456
// end ;
3844: GO 3757
3846: POP
3847: POP
// end ;
3848: LD_VAR 0 3
3852: RET
// export function Count ( array ) ; begin
3853: LD_INT 0
3855: PPUSH
// result := array + 0 ;
3856: LD_ADDR_VAR 0 2
3860: PUSH
3861: LD_VAR 0 1
3865: PUSH
3866: LD_INT 0
3868: PLUS
3869: ST_TO_ADDR
// end ;
3870: LD_VAR 0 2
3874: RET
// export function IsEmpty ( building ) ; begin
3875: LD_INT 0
3877: PPUSH
// if not building then
3878: LD_VAR 0 1
3882: NOT
3883: IFFALSE 3887
// exit ;
3885: GO 3930
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3887: LD_ADDR_VAR 0 2
3891: PUSH
3892: LD_VAR 0 1
3896: PUSH
3897: LD_INT 22
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 255
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 58
3916: PUSH
3917: EMPTY
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: IN
3929: ST_TO_ADDR
// end ;
3930: LD_VAR 0 2
3934: RET
// export function IsNotFull ( building ) ; var places ; begin
3935: LD_INT 0
3937: PPUSH
3938: PPUSH
// if not building then
3939: LD_VAR 0 1
3943: NOT
3944: IFFALSE 3948
// exit ;
3946: GO 3976
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 62
3963: PUSH
3964: EMPTY
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PPUSH
3971: CALL_OW 72
3975: ST_TO_ADDR
// end ;
3976: LD_VAR 0 2
3980: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3981: LD_INT 0
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
// tmp := [ ] ;
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: EMPTY
3993: ST_TO_ADDR
// list := [ ] ;
3994: LD_ADDR_VAR 0 5
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i = 16 to 25 do
4001: LD_ADDR_VAR 0 4
4005: PUSH
4006: DOUBLE
4007: LD_INT 16
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 25
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4088
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: LD_VAR 0 3
4026: PUSH
4027: LD_INT 22
4029: PUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 255
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 91
4046: PUSH
4047: LD_VAR 0 1
4051: PUSH
4052: LD_INT 6
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 30
4062: PUSH
4063: LD_VAR 0 4
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: EMPTY
4078: LIST
4079: PPUSH
4080: CALL_OW 69
4084: ADD
4085: ST_TO_ADDR
4086: GO 4014
4088: POP
4089: POP
// for i = 1 to tmp do
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: DOUBLE
4096: LD_INT 1
4098: DEC
4099: ST_TO_ADDR
4100: LD_VAR 0 3
4104: PUSH
4105: FOR_TO
4106: IFFALSE 4194
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4108: LD_ADDR_VAR 0 5
4112: PUSH
4113: LD_VAR 0 5
4117: PUSH
4118: LD_VAR 0 3
4122: PUSH
4123: LD_VAR 0 4
4127: ARRAY
4128: PPUSH
4129: CALL_OW 266
4133: PUSH
4134: LD_VAR 0 3
4138: PUSH
4139: LD_VAR 0 4
4143: ARRAY
4144: PPUSH
4145: CALL_OW 250
4149: PUSH
4150: LD_VAR 0 3
4154: PUSH
4155: LD_VAR 0 4
4159: ARRAY
4160: PPUSH
4161: CALL_OW 251
4165: PUSH
4166: LD_VAR 0 3
4170: PUSH
4171: LD_VAR 0 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 254
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: ADD
4191: ST_TO_ADDR
4192: GO 4105
4194: POP
4195: POP
// result := list ;
4196: LD_ADDR_VAR 0 2
4200: PUSH
4201: LD_VAR 0 5
4205: ST_TO_ADDR
// end ;
4206: LD_VAR 0 2
4210: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4211: LD_INT 0
4213: PPUSH
4214: PPUSH
4215: PPUSH
4216: PPUSH
4217: PPUSH
4218: PPUSH
4219: PPUSH
// if not factory then
4220: LD_VAR 0 1
4224: NOT
4225: IFFALSE 4229
// exit ;
4227: GO 4832
// if control = control_apeman then
4229: LD_VAR 0 4
4233: PUSH
4234: LD_INT 5
4236: EQUAL
4237: IFFALSE 4346
// begin tmp := UnitsInside ( factory ) ;
4239: LD_ADDR_VAR 0 8
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 313
4253: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4254: LD_VAR 0 8
4258: PPUSH
4259: LD_INT 25
4261: PUSH
4262: LD_INT 12
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PPUSH
4269: CALL_OW 72
4273: NOT
4274: IFFALSE 4284
// control := control_manual ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 1
4283: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4284: LD_ADDR_VAR 0 8
4288: PUSH
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL 3981 0 1
4298: ST_TO_ADDR
// if tmp then
4299: LD_VAR 0 8
4303: IFFALSE 4346
// begin for i in tmp do
4305: LD_ADDR_VAR 0 7
4309: PUSH
4310: LD_VAR 0 8
4314: PUSH
4315: FOR_IN
4316: IFFALSE 4344
// if i [ 1 ] = b_ext_radio then
4318: LD_VAR 0 7
4322: PUSH
4323: LD_INT 1
4325: ARRAY
4326: PUSH
4327: LD_INT 22
4329: EQUAL
4330: IFFALSE 4342
// begin control := control_remote ;
4332: LD_ADDR_VAR 0 4
4336: PUSH
4337: LD_INT 2
4339: ST_TO_ADDR
// break ;
4340: GO 4344
// end ;
4342: GO 4315
4344: POP
4345: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4346: LD_VAR 0 1
4350: PPUSH
4351: LD_VAR 0 2
4355: PPUSH
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_VAR 0 4
4365: PPUSH
4366: LD_VAR 0 5
4370: PPUSH
4371: CALL_OW 448
4375: IFFALSE 4410
// begin result := [ chassis , engine , control , weapon ] ;
4377: LD_ADDR_VAR 0 6
4381: PUSH
4382: LD_VAR 0 2
4386: PUSH
4387: LD_VAR 0 3
4391: PUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_VAR 0 5
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// exit ;
4408: GO 4832
// end ; _chassis := AvailableChassisList ( factory ) ;
4410: LD_ADDR_VAR 0 9
4414: PUSH
4415: LD_VAR 0 1
4419: PPUSH
4420: CALL_OW 475
4424: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4425: LD_ADDR_VAR 0 11
4429: PUSH
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 476
4439: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4440: LD_ADDR_VAR 0 12
4444: PUSH
4445: LD_VAR 0 1
4449: PPUSH
4450: CALL_OW 477
4454: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4455: LD_ADDR_VAR 0 10
4459: PUSH
4460: LD_VAR 0 1
4464: PPUSH
4465: CALL_OW 478
4469: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4470: LD_VAR 0 9
4474: NOT
4475: IFTRUE 4484
4477: PUSH
4478: LD_VAR 0 11
4482: NOT
4483: OR
4484: IFTRUE 4493
4486: PUSH
4487: LD_VAR 0 12
4491: NOT
4492: OR
4493: IFTRUE 4502
4495: PUSH
4496: LD_VAR 0 10
4500: NOT
4501: OR
4502: IFFALSE 4537
// begin result := [ chassis , engine , control , weapon ] ;
4504: LD_ADDR_VAR 0 6
4508: PUSH
4509: LD_VAR 0 2
4513: PUSH
4514: LD_VAR 0 3
4518: PUSH
4519: LD_VAR 0 4
4523: PUSH
4524: LD_VAR 0 5
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: ST_TO_ADDR
// exit ;
4535: GO 4832
// end ; if not chassis in _chassis then
4537: LD_VAR 0 2
4541: PUSH
4542: LD_VAR 0 9
4546: IN
4547: NOT
4548: IFFALSE 4574
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_VAR 0 9
4559: PUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 12
4572: ARRAY
4573: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_VAR 0 3
4583: PPUSH
4584: CALL 4837 0 2
4588: NOT
4589: IFFALSE 4650
// repeat engine := _engine [ 1 ] ;
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: LD_VAR 0 11
4600: PUSH
4601: LD_INT 1
4603: ARRAY
4604: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4605: LD_ADDR_VAR 0 11
4609: PUSH
4610: LD_VAR 0 11
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: CALL_OW 3
4622: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4623: LD_VAR 0 2
4627: PPUSH
4628: LD_VAR 0 3
4632: PPUSH
4633: CALL 4837 0 2
4637: IFTRUE 4648
4639: PUSH
4640: LD_VAR 0 11
4644: PUSH
4645: EMPTY
4646: EQUAL
4647: OR
4648: IFFALSE 4591
// if not control in _control then
4650: LD_VAR 0 4
4654: PUSH
4655: LD_VAR 0 12
4659: IN
4660: NOT
4661: IFFALSE 4687
// control := _control [ rand ( 1 , _control ) ] ;
4663: LD_ADDR_VAR 0 4
4667: PUSH
4668: LD_VAR 0 12
4672: PUSH
4673: LD_INT 1
4675: PPUSH
4676: LD_VAR 0 12
4680: PPUSH
4681: CALL_OW 12
4685: ARRAY
4686: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4687: LD_VAR 0 2
4691: PPUSH
4692: LD_VAR 0 5
4696: PPUSH
4697: CALL 5059 0 2
4701: NOT
4702: IFFALSE 4763
// repeat weapon := _weapon [ 1 ] ;
4704: LD_ADDR_VAR 0 5
4708: PUSH
4709: LD_VAR 0 10
4713: PUSH
4714: LD_INT 1
4716: ARRAY
4717: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4718: LD_ADDR_VAR 0 10
4722: PUSH
4723: LD_VAR 0 10
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 3
4735: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_VAR 0 5
4745: PPUSH
4746: CALL 5059 0 2
4750: IFTRUE 4761
4752: PUSH
4753: LD_VAR 0 10
4757: PUSH
4758: EMPTY
4759: EQUAL
4760: OR
4761: IFFALSE 4704
// result := [ ] ;
4763: LD_ADDR_VAR 0 6
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4770: LD_VAR 0 1
4774: PPUSH
4775: LD_VAR 0 2
4779: PPUSH
4780: LD_VAR 0 3
4784: PPUSH
4785: LD_VAR 0 4
4789: PPUSH
4790: LD_VAR 0 5
4794: PPUSH
4795: CALL_OW 448
4799: IFFALSE 4832
// result := [ chassis , engine , control , weapon ] ;
4801: LD_ADDR_VAR 0 6
4805: PUSH
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 3
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_VAR 0 5
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: ST_TO_ADDR
// end ;
4832: LD_VAR 0 6
4836: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4837: LD_INT 0
4839: PPUSH
// if not chassis or not engine then
4840: LD_VAR 0 1
4844: NOT
4845: IFTRUE 4854
4847: PUSH
4848: LD_VAR 0 2
4852: NOT
4853: OR
4854: IFFALSE 4858
// exit ;
4856: GO 5054
// case engine of engine_solar :
4858: LD_VAR 0 2
4862: PUSH
4863: LD_INT 2
4865: DOUBLE
4866: EQUAL
4867: IFTRUE 4871
4869: GO 4909
4871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 11
4879: PUSH
4880: LD_INT 12
4882: PUSH
4883: LD_INT 13
4885: PUSH
4886: LD_INT 14
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
4907: GO 5038
4909: LD_INT 1
4911: DOUBLE
4912: EQUAL
4913: IFTRUE 4917
4915: GO 4979
4917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4918: LD_ADDR_VAR 0 3
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: LD_INT 12
4928: PUSH
4929: LD_INT 13
4931: PUSH
4932: LD_INT 14
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: LD_INT 2
4940: PUSH
4941: LD_INT 3
4943: PUSH
4944: LD_INT 4
4946: PUSH
4947: LD_INT 5
4949: PUSH
4950: LD_INT 21
4952: PUSH
4953: LD_INT 23
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 24
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5038
4979: LD_INT 3
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5037
4987: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 13
4995: PUSH
4996: LD_INT 14
4998: PUSH
4999: LD_INT 2
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: LD_INT 4
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: LD_INT 21
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 23
5019: PUSH
5020: LD_INT 24
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: ST_TO_ADDR
5035: GO 5038
5037: POP
// result := ( chassis in result ) ;
5038: LD_ADDR_VAR 0 3
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: LD_VAR 0 3
5052: IN
5053: ST_TO_ADDR
// end ;
5054: LD_VAR 0 3
5058: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5059: LD_INT 0
5061: PPUSH
// if not chassis or not weapon then
5062: LD_VAR 0 1
5066: NOT
5067: IFTRUE 5076
5069: PUSH
5070: LD_VAR 0 2
5074: NOT
5075: OR
5076: IFFALSE 5080
// exit ;
5078: GO 6174
// case weapon of us_machine_gun :
5080: LD_VAR 0 2
5084: PUSH
5085: LD_INT 2
5087: DOUBLE
5088: EQUAL
5089: IFTRUE 5093
5091: GO 5123
5093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_INT 1
5101: PUSH
5102: LD_INT 2
5104: PUSH
5105: LD_INT 3
5107: PUSH
5108: LD_INT 4
5110: PUSH
5111: LD_INT 5
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 6158
5123: LD_INT 3
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5161
5131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 1
5139: PUSH
5140: LD_INT 2
5142: PUSH
5143: LD_INT 3
5145: PUSH
5146: LD_INT 4
5148: PUSH
5149: LD_INT 5
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: ST_TO_ADDR
5159: GO 6158
5161: LD_INT 11
5163: DOUBLE
5164: EQUAL
5165: IFTRUE 5169
5167: GO 5199
5169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5170: LD_ADDR_VAR 0 3
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: LD_INT 2
5180: PUSH
5181: LD_INT 3
5183: PUSH
5184: LD_INT 4
5186: PUSH
5187: LD_INT 5
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
5197: GO 6158
5199: LD_INT 4
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5233
5207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 2
5215: PUSH
5216: LD_INT 3
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: LD_INT 5
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: ST_TO_ADDR
5231: GO 6158
5233: LD_INT 5
5235: DOUBLE
5236: EQUAL
5237: IFTRUE 5241
5239: GO 5267
5241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5242: LD_ADDR_VAR 0 3
5246: PUSH
5247: LD_INT 2
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 4
5255: PUSH
5256: LD_INT 5
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: ST_TO_ADDR
5265: GO 6158
5267: LD_INT 9
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5301
5275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: LD_INT 2
5283: PUSH
5284: LD_INT 3
5286: PUSH
5287: LD_INT 4
5289: PUSH
5290: LD_INT 5
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: ST_TO_ADDR
5299: GO 6158
5301: LD_INT 7
5303: DOUBLE
5304: EQUAL
5305: IFTRUE 5309
5307: GO 5335
5309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5310: LD_ADDR_VAR 0 3
5314: PUSH
5315: LD_INT 2
5317: PUSH
5318: LD_INT 3
5320: PUSH
5321: LD_INT 4
5323: PUSH
5324: LD_INT 5
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: ST_TO_ADDR
5333: GO 6158
5335: LD_INT 12
5337: DOUBLE
5338: EQUAL
5339: IFTRUE 5343
5341: GO 5369
5343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_INT 2
5351: PUSH
5352: LD_INT 3
5354: PUSH
5355: LD_INT 4
5357: PUSH
5358: LD_INT 5
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: ST_TO_ADDR
5367: GO 6158
5369: LD_INT 13
5371: DOUBLE
5372: EQUAL
5373: IFTRUE 5377
5375: GO 5403
5377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 3
5388: PUSH
5389: LD_INT 4
5391: PUSH
5392: LD_INT 5
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: ST_TO_ADDR
5401: GO 6158
5403: LD_INT 14
5405: DOUBLE
5406: EQUAL
5407: IFTRUE 5411
5409: GO 5429
5411: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5412: LD_ADDR_VAR 0 3
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: LD_INT 5
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: ST_TO_ADDR
5427: GO 6158
5429: LD_INT 6
5431: DOUBLE
5432: EQUAL
5433: IFTRUE 5437
5435: GO 5455
5437: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5438: LD_ADDR_VAR 0 3
5442: PUSH
5443: LD_INT 4
5445: PUSH
5446: LD_INT 5
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: ST_TO_ADDR
5453: GO 6158
5455: LD_INT 10
5457: DOUBLE
5458: EQUAL
5459: IFTRUE 5463
5461: GO 5481
5463: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5464: LD_ADDR_VAR 0 3
5468: PUSH
5469: LD_INT 4
5471: PUSH
5472: LD_INT 5
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: ST_TO_ADDR
5479: GO 6158
5481: LD_INT 22
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5515
5489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5490: LD_ADDR_VAR 0 3
5494: PUSH
5495: LD_INT 11
5497: PUSH
5498: LD_INT 12
5500: PUSH
5501: LD_INT 13
5503: PUSH
5504: LD_INT 14
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: ST_TO_ADDR
5513: GO 6158
5515: LD_INT 23
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5549
5523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_INT 11
5531: PUSH
5532: LD_INT 12
5534: PUSH
5535: LD_INT 13
5537: PUSH
5538: LD_INT 14
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: ST_TO_ADDR
5547: GO 6158
5549: LD_INT 24
5551: DOUBLE
5552: EQUAL
5553: IFTRUE 5557
5555: GO 5583
5557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5558: LD_ADDR_VAR 0 3
5562: PUSH
5563: LD_INT 11
5565: PUSH
5566: LD_INT 12
5568: PUSH
5569: LD_INT 13
5571: PUSH
5572: LD_INT 14
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
5581: GO 6158
5583: LD_INT 30
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5617
5591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: LD_INT 11
5599: PUSH
5600: LD_INT 12
5602: PUSH
5603: LD_INT 13
5605: PUSH
5606: LD_INT 14
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
5615: GO 6158
5617: LD_INT 25
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5625
5623: GO 5643
5625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5626: LD_ADDR_VAR 0 3
5630: PUSH
5631: LD_INT 13
5633: PUSH
5634: LD_INT 14
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: ST_TO_ADDR
5641: GO 6158
5643: LD_INT 27
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5651
5649: GO 5669
5651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5652: LD_ADDR_VAR 0 3
5656: PUSH
5657: LD_INT 13
5659: PUSH
5660: LD_INT 14
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: ST_TO_ADDR
5667: GO 6158
5669: LD_INT 92
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5703
5677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: LD_INT 11
5685: PUSH
5686: LD_INT 12
5688: PUSH
5689: LD_INT 13
5691: PUSH
5692: LD_INT 14
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: ST_TO_ADDR
5701: GO 6158
5703: LD_INT 28
5705: DOUBLE
5706: EQUAL
5707: IFTRUE 5711
5709: GO 5729
5711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 13
5719: PUSH
5720: LD_INT 14
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: ST_TO_ADDR
5727: GO 6158
5729: LD_INT 29
5731: DOUBLE
5732: EQUAL
5733: IFTRUE 5737
5735: GO 5755
5737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_INT 13
5745: PUSH
5746: LD_INT 14
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: ST_TO_ADDR
5753: GO 6158
5755: LD_INT 31
5757: DOUBLE
5758: EQUAL
5759: IFTRUE 5763
5761: GO 5781
5763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5764: LD_ADDR_VAR 0 3
5768: PUSH
5769: LD_INT 13
5771: PUSH
5772: LD_INT 14
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: ST_TO_ADDR
5779: GO 6158
5781: LD_INT 26
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5789
5787: GO 5807
5789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5790: LD_ADDR_VAR 0 3
5794: PUSH
5795: LD_INT 13
5797: PUSH
5798: LD_INT 14
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: ST_TO_ADDR
5805: GO 6158
5807: LD_INT 42
5809: DOUBLE
5810: EQUAL
5811: IFTRUE 5815
5813: GO 5841
5815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 22
5826: PUSH
5827: LD_INT 23
5829: PUSH
5830: LD_INT 24
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: ST_TO_ADDR
5839: GO 6158
5841: LD_INT 43
5843: DOUBLE
5844: EQUAL
5845: IFTRUE 5849
5847: GO 5875
5849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5850: LD_ADDR_VAR 0 3
5854: PUSH
5855: LD_INT 21
5857: PUSH
5858: LD_INT 22
5860: PUSH
5861: LD_INT 23
5863: PUSH
5864: LD_INT 24
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: ST_TO_ADDR
5873: GO 6158
5875: LD_INT 44
5877: DOUBLE
5878: EQUAL
5879: IFTRUE 5883
5881: GO 5909
5883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5884: LD_ADDR_VAR 0 3
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_INT 23
5897: PUSH
5898: LD_INT 24
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: ST_TO_ADDR
5907: GO 6158
5909: LD_INT 45
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5943
5917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5918: LD_ADDR_VAR 0 3
5922: PUSH
5923: LD_INT 21
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_INT 23
5931: PUSH
5932: LD_INT 24
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: ST_TO_ADDR
5941: GO 6158
5943: LD_INT 49
5945: DOUBLE
5946: EQUAL
5947: IFTRUE 5951
5949: GO 5977
5951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5952: LD_ADDR_VAR 0 3
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_INT 23
5965: PUSH
5966: LD_INT 24
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: ST_TO_ADDR
5975: GO 6158
5977: LD_INT 51
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5985
5983: GO 6011
5985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5986: LD_ADDR_VAR 0 3
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 23
5999: PUSH
6000: LD_INT 24
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: ST_TO_ADDR
6009: GO 6158
6011: LD_INT 52
6013: DOUBLE
6014: EQUAL
6015: IFTRUE 6019
6017: GO 6045
6019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_INT 21
6027: PUSH
6028: LD_INT 22
6030: PUSH
6031: LD_INT 23
6033: PUSH
6034: LD_INT 24
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: ST_TO_ADDR
6043: GO 6158
6045: LD_INT 53
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6071
6053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 23
6061: PUSH
6062: LD_INT 24
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: ST_TO_ADDR
6069: GO 6158
6071: LD_INT 46
6073: DOUBLE
6074: EQUAL
6075: IFTRUE 6079
6077: GO 6097
6079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6080: LD_ADDR_VAR 0 3
6084: PUSH
6085: LD_INT 23
6087: PUSH
6088: LD_INT 24
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: ST_TO_ADDR
6095: GO 6158
6097: LD_INT 47
6099: DOUBLE
6100: EQUAL
6101: IFTRUE 6105
6103: GO 6123
6105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: ST_TO_ADDR
6121: GO 6158
6123: LD_INT 98
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6157
6131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_INT 21
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 23
6145: PUSH
6146: LD_INT 24
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: ST_TO_ADDR
6155: GO 6158
6157: POP
// result := ( chassis in result ) ;
6158: LD_ADDR_VAR 0 3
6162: PUSH
6163: LD_VAR 0 1
6167: PUSH
6168: LD_VAR 0 3
6172: IN
6173: ST_TO_ADDR
// end ;
6174: LD_VAR 0 3
6178: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6179: LD_INT 0
6181: PPUSH
6182: PPUSH
6183: PPUSH
6184: PPUSH
6185: PPUSH
6186: PPUSH
6187: PPUSH
// result := array ;
6188: LD_ADDR_VAR 0 5
6192: PUSH
6193: LD_VAR 0 1
6197: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6198: LD_VAR 0 1
6202: NOT
6203: IFTRUE 6212
6205: PUSH
6206: LD_VAR 0 2
6210: NOT
6211: OR
6212: IFTRUE 6221
6214: PUSH
6215: LD_VAR 0 3
6219: NOT
6220: OR
6221: IFTRUE 6235
6223: PUSH
6224: LD_VAR 0 2
6228: PUSH
6229: LD_VAR 0 1
6233: GREATER
6234: OR
6235: IFTRUE 6249
6237: PUSH
6238: LD_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: GREATER
6248: OR
6249: IFFALSE 6253
// exit ;
6251: GO 6549
// if direction then
6253: LD_VAR 0 4
6257: IFFALSE 6321
// begin d := 1 ;
6259: LD_ADDR_VAR 0 9
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// if i_from > i_to then
6267: LD_VAR 0 2
6271: PUSH
6272: LD_VAR 0 3
6276: GREATER
6277: IFFALSE 6303
// length := ( array - i_from ) + i_to else
6279: LD_ADDR_VAR 0 11
6283: PUSH
6284: LD_VAR 0 1
6288: PUSH
6289: LD_VAR 0 2
6293: MINUS
6294: PUSH
6295: LD_VAR 0 3
6299: PLUS
6300: ST_TO_ADDR
6301: GO 6319
// length := i_to - i_from ;
6303: LD_ADDR_VAR 0 11
6307: PUSH
6308: LD_VAR 0 3
6312: PUSH
6313: LD_VAR 0 2
6317: MINUS
6318: ST_TO_ADDR
// end else
6319: GO 6382
// begin d := - 1 ;
6321: LD_ADDR_VAR 0 9
6325: PUSH
6326: LD_INT 1
6328: NEG
6329: ST_TO_ADDR
// if i_from > i_to then
6330: LD_VAR 0 2
6334: PUSH
6335: LD_VAR 0 3
6339: GREATER
6340: IFFALSE 6360
// length := i_from - i_to else
6342: LD_ADDR_VAR 0 11
6346: PUSH
6347: LD_VAR 0 2
6351: PUSH
6352: LD_VAR 0 3
6356: MINUS
6357: ST_TO_ADDR
6358: GO 6382
// length := ( array - i_to ) + i_from ;
6360: LD_ADDR_VAR 0 11
6364: PUSH
6365: LD_VAR 0 1
6369: PUSH
6370: LD_VAR 0 3
6374: MINUS
6375: PUSH
6376: LD_VAR 0 2
6380: PLUS
6381: ST_TO_ADDR
// end ; if not length then
6382: LD_VAR 0 11
6386: NOT
6387: IFFALSE 6391
// exit ;
6389: GO 6549
// tmp := array ;
6391: LD_ADDR_VAR 0 10
6395: PUSH
6396: LD_VAR 0 1
6400: ST_TO_ADDR
// for i = 1 to length do
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: DOUBLE
6407: LD_INT 1
6409: DEC
6410: ST_TO_ADDR
6411: LD_VAR 0 11
6415: PUSH
6416: FOR_TO
6417: IFFALSE 6537
// begin for j = 1 to array do
6419: LD_ADDR_VAR 0 7
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 1
6433: PUSH
6434: FOR_TO
6435: IFFALSE 6523
// begin k := j + d ;
6437: LD_ADDR_VAR 0 8
6441: PUSH
6442: LD_VAR 0 7
6446: PUSH
6447: LD_VAR 0 9
6451: PLUS
6452: ST_TO_ADDR
// if k > array then
6453: LD_VAR 0 8
6457: PUSH
6458: LD_VAR 0 1
6462: GREATER
6463: IFFALSE 6473
// k := 1 ;
6465: LD_ADDR_VAR 0 8
6469: PUSH
6470: LD_INT 1
6472: ST_TO_ADDR
// if not k then
6473: LD_VAR 0 8
6477: NOT
6478: IFFALSE 6490
// k := array ;
6480: LD_ADDR_VAR 0 8
6484: PUSH
6485: LD_VAR 0 1
6489: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6490: LD_ADDR_VAR 0 10
6494: PUSH
6495: LD_VAR 0 10
6499: PPUSH
6500: LD_VAR 0 8
6504: PPUSH
6505: LD_VAR 0 1
6509: PUSH
6510: LD_VAR 0 7
6514: ARRAY
6515: PPUSH
6516: CALL_OW 1
6520: ST_TO_ADDR
// end ;
6521: GO 6434
6523: POP
6524: POP
// array := tmp ;
6525: LD_ADDR_VAR 0 1
6529: PUSH
6530: LD_VAR 0 10
6534: ST_TO_ADDR
// end ;
6535: GO 6416
6537: POP
6538: POP
// result := array ;
6539: LD_ADDR_VAR 0 5
6543: PUSH
6544: LD_VAR 0 1
6548: ST_TO_ADDR
// end ;
6549: LD_VAR 0 5
6553: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6554: LD_INT 0
6556: PPUSH
6557: PPUSH
// result := 0 ;
6558: LD_ADDR_VAR 0 3
6562: PUSH
6563: LD_INT 0
6565: ST_TO_ADDR
// if not array or not value in array then
6566: LD_VAR 0 1
6570: NOT
6571: IFTRUE 6586
6573: PUSH
6574: LD_VAR 0 2
6578: PUSH
6579: LD_VAR 0 1
6583: IN
6584: NOT
6585: OR
6586: IFFALSE 6590
// exit ;
6588: GO 6644
// for i = 1 to array do
6590: LD_ADDR_VAR 0 4
6594: PUSH
6595: DOUBLE
6596: LD_INT 1
6598: DEC
6599: ST_TO_ADDR
6600: LD_VAR 0 1
6604: PUSH
6605: FOR_TO
6606: IFFALSE 6642
// if value = array [ i ] then
6608: LD_VAR 0 2
6612: PUSH
6613: LD_VAR 0 1
6617: PUSH
6618: LD_VAR 0 4
6622: ARRAY
6623: EQUAL
6624: IFFALSE 6640
// begin result := i ;
6626: LD_ADDR_VAR 0 3
6630: PUSH
6631: LD_VAR 0 4
6635: ST_TO_ADDR
// exit ;
6636: POP
6637: POP
6638: GO 6644
// end ;
6640: GO 6605
6642: POP
6643: POP
// end ;
6644: LD_VAR 0 3
6648: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6649: LD_INT 0
6651: PPUSH
// vc_chassis := chassis ;
6652: LD_ADDR_OWVAR 37
6656: PUSH
6657: LD_VAR 0 1
6661: ST_TO_ADDR
// vc_engine := engine ;
6662: LD_ADDR_OWVAR 39
6666: PUSH
6667: LD_VAR 0 2
6671: ST_TO_ADDR
// vc_control := control ;
6672: LD_ADDR_OWVAR 38
6676: PUSH
6677: LD_VAR 0 3
6681: ST_TO_ADDR
// vc_weapon := weapon ;
6682: LD_ADDR_OWVAR 40
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6692: LD_ADDR_OWVAR 41
6696: PUSH
6697: LD_VAR 0 5
6701: ST_TO_ADDR
// end ;
6702: LD_VAR 0 6
6706: RET
// export function WantPlant ( unit ) ; var task ; begin
6707: LD_INT 0
6709: PPUSH
6710: PPUSH
// result := false ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_INT 0
6718: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_VAR 0 1
6728: PPUSH
6729: CALL_OW 437
6733: ST_TO_ADDR
// if task then
6734: LD_VAR 0 3
6738: IFFALSE 6766
// if task [ 1 ] [ 1 ] = p then
6740: LD_VAR 0 3
6744: PUSH
6745: LD_INT 1
6747: ARRAY
6748: PUSH
6749: LD_INT 1
6751: ARRAY
6752: PUSH
6753: LD_STRING p
6755: EQUAL
6756: IFFALSE 6766
// result := true ;
6758: LD_ADDR_VAR 0 2
6762: PUSH
6763: LD_INT 1
6765: ST_TO_ADDR
// end ;
6766: LD_VAR 0 2
6770: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
6776: PPUSH
// if pos < 1 then
6777: LD_VAR 0 2
6781: PUSH
6782: LD_INT 1
6784: LESS
6785: IFFALSE 6789
// exit ;
6787: GO 7092
// if pos = 1 then
6789: LD_VAR 0 2
6793: PUSH
6794: LD_INT 1
6796: EQUAL
6797: IFFALSE 6830
// result := Replace ( arr , pos [ 1 ] , value ) else
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: LD_VAR 0 1
6808: PPUSH
6809: LD_VAR 0 2
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: LD_VAR 0 3
6822: PPUSH
6823: CALL_OW 1
6827: ST_TO_ADDR
6828: GO 7092
// begin tmp := arr ;
6830: LD_ADDR_VAR 0 6
6834: PUSH
6835: LD_VAR 0 1
6839: ST_TO_ADDR
// s_arr := [ tmp ] ;
6840: LD_ADDR_VAR 0 7
6844: PUSH
6845: LD_VAR 0 6
6849: PUSH
6850: EMPTY
6851: LIST
6852: ST_TO_ADDR
// for i = 1 to pos - 1 do
6853: LD_ADDR_VAR 0 5
6857: PUSH
6858: DOUBLE
6859: LD_INT 1
6861: DEC
6862: ST_TO_ADDR
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 1
6870: MINUS
6871: PUSH
6872: FOR_TO
6873: IFFALSE 6918
// begin tmp := tmp [ pos [ i ] ] ;
6875: LD_ADDR_VAR 0 6
6879: PUSH
6880: LD_VAR 0 6
6884: PUSH
6885: LD_VAR 0 2
6889: PUSH
6890: LD_VAR 0 5
6894: ARRAY
6895: ARRAY
6896: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6897: LD_ADDR_VAR 0 7
6901: PUSH
6902: LD_VAR 0 7
6906: PUSH
6907: LD_VAR 0 6
6911: PUSH
6912: EMPTY
6913: LIST
6914: ADD
6915: ST_TO_ADDR
// end ;
6916: GO 6872
6918: POP
6919: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6920: LD_ADDR_VAR 0 6
6924: PUSH
6925: LD_VAR 0 6
6929: PPUSH
6930: LD_VAR 0 2
6934: PUSH
6935: LD_VAR 0 2
6939: ARRAY
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL_OW 1
6950: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6951: LD_ADDR_VAR 0 7
6955: PUSH
6956: LD_VAR 0 7
6960: PPUSH
6961: LD_VAR 0 7
6965: PPUSH
6966: LD_VAR 0 6
6970: PPUSH
6971: CALL_OW 1
6975: ST_TO_ADDR
// for i = s_arr downto 2 do
6976: LD_ADDR_VAR 0 5
6980: PUSH
6981: DOUBLE
6982: LD_VAR 0 7
6986: INC
6987: ST_TO_ADDR
6988: LD_INT 2
6990: PUSH
6991: FOR_DOWNTO
6992: IFFALSE 7076
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6994: LD_ADDR_VAR 0 6
6998: PUSH
6999: LD_VAR 0 7
7003: PUSH
7004: LD_VAR 0 5
7008: PUSH
7009: LD_INT 1
7011: MINUS
7012: ARRAY
7013: PPUSH
7014: LD_VAR 0 2
7018: PUSH
7019: LD_VAR 0 5
7023: PUSH
7024: LD_INT 1
7026: MINUS
7027: ARRAY
7028: PPUSH
7029: LD_VAR 0 7
7033: PUSH
7034: LD_VAR 0 5
7038: ARRAY
7039: PPUSH
7040: CALL_OW 1
7044: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7045: LD_ADDR_VAR 0 7
7049: PUSH
7050: LD_VAR 0 7
7054: PPUSH
7055: LD_VAR 0 5
7059: PUSH
7060: LD_INT 1
7062: MINUS
7063: PPUSH
7064: LD_VAR 0 6
7068: PPUSH
7069: CALL_OW 1
7073: ST_TO_ADDR
// end ;
7074: GO 6991
7076: POP
7077: POP
// result := s_arr [ 1 ] ;
7078: LD_ADDR_VAR 0 4
7082: PUSH
7083: LD_VAR 0 7
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: ST_TO_ADDR
// end ; end ;
7092: LD_VAR 0 4
7096: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7097: LD_INT 0
7099: PPUSH
7100: PPUSH
// if not list then
7101: LD_VAR 0 1
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7201
// i := list [ pos1 ] ;
7110: LD_ADDR_VAR 0 5
7114: PUSH
7115: LD_VAR 0 1
7119: PUSH
7120: LD_VAR 0 2
7124: ARRAY
7125: ST_TO_ADDR
// if not i then
7126: LD_VAR 0 5
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 7201
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_VAR 0 1
7144: PPUSH
7145: LD_VAR 0 2
7149: PPUSH
7150: LD_VAR 0 1
7154: PUSH
7155: LD_VAR 0 3
7159: ARRAY
7160: PPUSH
7161: CALL_OW 1
7165: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7166: LD_ADDR_VAR 0 1
7170: PUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 3
7180: PPUSH
7181: LD_VAR 0 5
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// result := list ;
7191: LD_ADDR_VAR 0 4
7195: PUSH
7196: LD_VAR 0 1
7200: ST_TO_ADDR
// end ;
7201: LD_VAR 0 4
7205: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7206: LD_INT 0
7208: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7209: LD_ADDR_VAR 0 5
7213: PUSH
7214: LD_VAR 0 1
7218: PPUSH
7219: CALL_OW 250
7223: PPUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 251
7233: PPUSH
7234: LD_VAR 0 2
7238: PPUSH
7239: LD_VAR 0 3
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 7631 0 5
7253: ST_TO_ADDR
// end ;
7254: LD_VAR 0 5
7258: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7259: LD_INT 0
7261: PPUSH
7262: PPUSH
7263: PPUSH
7264: PPUSH
// if not list or not unit then
7265: LD_VAR 0 2
7269: NOT
7270: IFTRUE 7279
7272: PUSH
7273: LD_VAR 0 1
7277: NOT
7278: OR
7279: IFFALSE 7283
// exit ;
7281: GO 7626
// result := [ ] ;
7283: LD_ADDR_VAR 0 5
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// for i in list do
7290: LD_ADDR_VAR 0 6
7294: PUSH
7295: LD_VAR 0 2
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7519
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7303: LD_ADDR_VAR 0 8
7307: PUSH
7308: LD_VAR 0 1
7312: PPUSH
7313: LD_VAR 0 6
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: LD_VAR 0 6
7326: PUSH
7327: LD_INT 2
7329: ARRAY
7330: PPUSH
7331: CALL_OW 297
7335: ST_TO_ADDR
// if not Count ( result ) then
7336: LD_VAR 0 5
7340: PPUSH
7341: CALL 3853 0 1
7345: NOT
7346: IFFALSE 7379
// begin result := Join ( result , [ i , tmp ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 5
7357: PPUSH
7358: LD_VAR 0 6
7362: PUSH
7363: LD_VAR 0 8
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PPUSH
7372: CALL 39829 0 2
7376: ST_TO_ADDR
// continue ;
7377: GO 7300
// end ; if result [ result ] [ 2 ] <= tmp then
7379: LD_VAR 0 5
7383: PUSH
7384: LD_VAR 0 5
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PUSH
7394: LD_VAR 0 8
7398: LESSEQUAL
7399: IFFALSE 7432
// result := Join ( result , [ i , tmp ] ) else
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_VAR 0 5
7410: PPUSH
7411: LD_VAR 0 6
7415: PUSH
7416: LD_VAR 0 8
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL 39829 0 2
7429: ST_TO_ADDR
7430: GO 7517
// begin for j := 1 to Count ( result ) do
7432: LD_ADDR_VAR 0 7
7436: PUSH
7437: DOUBLE
7438: LD_INT 1
7440: DEC
7441: ST_TO_ADDR
7442: LD_VAR 0 5
7446: PPUSH
7447: CALL 3853 0 1
7451: PUSH
7452: FOR_TO
7453: IFFALSE 7515
// begin if tmp < result [ j ] [ 2 ] then
7455: LD_VAR 0 8
7459: PUSH
7460: LD_VAR 0 5
7464: PUSH
7465: LD_VAR 0 7
7469: ARRAY
7470: PUSH
7471: LD_INT 2
7473: ARRAY
7474: LESS
7475: IFFALSE 7513
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7477: LD_ADDR_VAR 0 5
7481: PUSH
7482: LD_VAR 0 5
7486: PPUSH
7487: LD_VAR 0 7
7491: PPUSH
7492: LD_VAR 0 6
7496: PUSH
7497: LD_VAR 0 8
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 2
7510: ST_TO_ADDR
// break ;
7511: GO 7515
// end ; end ;
7513: GO 7452
7515: POP
7516: POP
// end ; end ;
7517: GO 7300
7519: POP
7520: POP
// if result and not asc then
7521: LD_VAR 0 5
7525: IFFALSE 7534
7527: PUSH
7528: LD_VAR 0 3
7532: NOT
7533: AND
7534: IFFALSE 7551
// result := ReverseArray ( result ) ;
7536: LD_ADDR_VAR 0 5
7540: PUSH
7541: LD_VAR 0 5
7545: PPUSH
7546: CALL 34909 0 1
7550: ST_TO_ADDR
// tmp := [ ] ;
7551: LD_ADDR_VAR 0 8
7555: PUSH
7556: EMPTY
7557: ST_TO_ADDR
// if mode then
7558: LD_VAR 0 4
7562: IFFALSE 7626
// begin for i := 1 to result do
7564: LD_ADDR_VAR 0 6
7568: PUSH
7569: DOUBLE
7570: LD_INT 1
7572: DEC
7573: ST_TO_ADDR
7574: LD_VAR 0 5
7578: PUSH
7579: FOR_TO
7580: IFFALSE 7614
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7582: LD_ADDR_VAR 0 8
7586: PUSH
7587: LD_VAR 0 8
7591: PPUSH
7592: LD_VAR 0 5
7596: PUSH
7597: LD_VAR 0 6
7601: ARRAY
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: CALL 39829 0 2
7611: ST_TO_ADDR
7612: GO 7579
7614: POP
7615: POP
// result := tmp ;
7616: LD_ADDR_VAR 0 5
7620: PUSH
7621: LD_VAR 0 8
7625: ST_TO_ADDR
// end ; end ;
7626: LD_VAR 0 5
7630: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7631: LD_INT 0
7633: PPUSH
7634: PPUSH
7635: PPUSH
7636: PPUSH
// if not list then
7637: LD_VAR 0 3
7641: NOT
7642: IFFALSE 7646
// exit ;
7644: GO 8036
// result := [ ] ;
7646: LD_ADDR_VAR 0 6
7650: PUSH
7651: EMPTY
7652: ST_TO_ADDR
// for i in list do
7653: LD_ADDR_VAR 0 7
7657: PUSH
7658: LD_VAR 0 3
7662: PUSH
7663: FOR_IN
7664: IFFALSE 7866
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7666: LD_ADDR_VAR 0 9
7670: PUSH
7671: LD_VAR 0 7
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: LD_VAR 0 2
7685: PPUSH
7686: CALL_OW 297
7690: ST_TO_ADDR
// if not result then
7691: LD_VAR 0 6
7695: NOT
7696: IFFALSE 7722
// result := [ [ i , tmp ] ] else
7698: LD_ADDR_VAR 0 6
7702: PUSH
7703: LD_VAR 0 7
7707: PUSH
7708: LD_VAR 0 9
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: ST_TO_ADDR
7720: GO 7864
// begin if result [ result ] [ 2 ] <= tmp then
7722: LD_VAR 0 6
7726: PUSH
7727: LD_VAR 0 6
7731: ARRAY
7732: PUSH
7733: LD_INT 2
7735: ARRAY
7736: PUSH
7737: LD_VAR 0 9
7741: LESSEQUAL
7742: IFFALSE 7784
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7744: LD_ADDR_VAR 0 6
7748: PUSH
7749: LD_VAR 0 6
7753: PPUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: PPUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 9
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PPUSH
7777: CALL_OW 2
7781: ST_TO_ADDR
7782: GO 7864
// for j := 1 to result do
7784: LD_ADDR_VAR 0 8
7788: PUSH
7789: DOUBLE
7790: LD_INT 1
7792: DEC
7793: ST_TO_ADDR
7794: LD_VAR 0 6
7798: PUSH
7799: FOR_TO
7800: IFFALSE 7862
// begin if tmp < result [ j ] [ 2 ] then
7802: LD_VAR 0 9
7806: PUSH
7807: LD_VAR 0 6
7811: PUSH
7812: LD_VAR 0 8
7816: ARRAY
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: LESS
7822: IFFALSE 7860
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7824: LD_ADDR_VAR 0 6
7828: PUSH
7829: LD_VAR 0 6
7833: PPUSH
7834: LD_VAR 0 8
7838: PPUSH
7839: LD_VAR 0 7
7843: PUSH
7844: LD_VAR 0 9
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 2
7857: ST_TO_ADDR
// break ;
7858: GO 7862
// end ; end ;
7860: GO 7799
7862: POP
7863: POP
// end ; end ;
7864: GO 7663
7866: POP
7867: POP
// if result and not asc then
7868: LD_VAR 0 6
7872: IFFALSE 7881
7874: PUSH
7875: LD_VAR 0 4
7879: NOT
7880: AND
7881: IFFALSE 7956
// begin tmp := result ;
7883: LD_ADDR_VAR 0 9
7887: PUSH
7888: LD_VAR 0 6
7892: ST_TO_ADDR
// for i = tmp downto 1 do
7893: LD_ADDR_VAR 0 7
7897: PUSH
7898: DOUBLE
7899: LD_VAR 0 9
7903: INC
7904: ST_TO_ADDR
7905: LD_INT 1
7907: PUSH
7908: FOR_DOWNTO
7909: IFFALSE 7954
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7911: LD_ADDR_VAR 0 6
7915: PUSH
7916: LD_VAR 0 6
7920: PPUSH
7921: LD_VAR 0 9
7925: PUSH
7926: LD_VAR 0 7
7930: MINUS
7931: PUSH
7932: LD_INT 1
7934: PLUS
7935: PPUSH
7936: LD_VAR 0 9
7940: PUSH
7941: LD_VAR 0 7
7945: ARRAY
7946: PPUSH
7947: CALL_OW 1
7951: ST_TO_ADDR
7952: GO 7908
7954: POP
7955: POP
// end ; tmp := [ ] ;
7956: LD_ADDR_VAR 0 9
7960: PUSH
7961: EMPTY
7962: ST_TO_ADDR
// if mode then
7963: LD_VAR 0 5
7967: IFFALSE 8036
// begin for i = 1 to result do
7969: LD_ADDR_VAR 0 7
7973: PUSH
7974: DOUBLE
7975: LD_INT 1
7977: DEC
7978: ST_TO_ADDR
7979: LD_VAR 0 6
7983: PUSH
7984: FOR_TO
7985: IFFALSE 8024
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7987: LD_ADDR_VAR 0 9
7991: PUSH
7992: LD_VAR 0 9
7996: PPUSH
7997: LD_VAR 0 7
8001: PPUSH
8002: LD_VAR 0 6
8006: PUSH
8007: LD_VAR 0 7
8011: ARRAY
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: CALL_OW 1
8021: ST_TO_ADDR
8022: GO 7984
8024: POP
8025: POP
// result := tmp ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_VAR 0 9
8035: ST_TO_ADDR
// end ; end ;
8036: LD_VAR 0 6
8040: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8041: LD_INT 0
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
8048: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8049: LD_ADDR_VAR 0 5
8053: PUSH
8054: LD_INT 0
8056: PUSH
8057: LD_INT 0
8059: PUSH
8060: LD_INT 0
8062: PUSH
8063: EMPTY
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: ST_TO_ADDR
// if not x or not y then
8071: LD_VAR 0 2
8075: NOT
8076: IFTRUE 8085
8078: PUSH
8079: LD_VAR 0 3
8083: NOT
8084: OR
8085: IFFALSE 8089
// exit ;
8087: GO 9745
// if not range then
8089: LD_VAR 0 4
8093: NOT
8094: IFFALSE 8104
// range := 10 ;
8096: LD_ADDR_VAR 0 4
8100: PUSH
8101: LD_INT 10
8103: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8104: LD_ADDR_VAR 0 8
8108: PUSH
8109: LD_INT 81
8111: PUSH
8112: LD_VAR 0 1
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 92
8123: PUSH
8124: LD_VAR 0 2
8128: PUSH
8129: LD_VAR 0 3
8133: PUSH
8134: LD_VAR 0 4
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: LD_INT 21
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: ST_TO_ADDR
// if not tmp then
8172: LD_VAR 0 8
8176: NOT
8177: IFFALSE 8181
// exit ;
8179: GO 9745
// for i in tmp do
8181: LD_ADDR_VAR 0 6
8185: PUSH
8186: LD_VAR 0 8
8190: PUSH
8191: FOR_IN
8192: IFFALSE 9720
// begin points := [ 0 , 0 , 0 ] ;
8194: LD_ADDR_VAR 0 9
8198: PUSH
8199: LD_INT 0
8201: PUSH
8202: LD_INT 0
8204: PUSH
8205: LD_INT 0
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: ST_TO_ADDR
// bpoints := 1 ;
8213: LD_ADDR_VAR 0 10
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 247
8230: PUSH
8231: LD_INT 1
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8821
8239: POP
// begin if GetClass ( i ) = 1 then
8240: LD_VAR 0 6
8244: PPUSH
8245: CALL_OW 257
8249: PUSH
8250: LD_INT 1
8252: EQUAL
8253: IFFALSE 8274
// points := [ 10 , 5 , 3 ] ;
8255: LD_ADDR_VAR 0 9
8259: PUSH
8260: LD_INT 10
8262: PUSH
8263: LD_INT 5
8265: PUSH
8266: LD_INT 3
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8274: LD_VAR 0 6
8278: PPUSH
8279: CALL_OW 257
8283: PUSH
8284: LD_INT 2
8286: PUSH
8287: LD_INT 3
8289: PUSH
8290: LD_INT 4
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: IN
8298: IFFALSE 8319
// points := [ 3 , 2 , 1 ] ;
8300: LD_ADDR_VAR 0 9
8304: PUSH
8305: LD_INT 3
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: LD_INT 1
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8319: LD_VAR 0 6
8323: PPUSH
8324: CALL_OW 257
8328: PUSH
8329: LD_INT 5
8331: EQUAL
8332: IFFALSE 8353
// points := [ 130 , 5 , 2 ] ;
8334: LD_ADDR_VAR 0 9
8338: PUSH
8339: LD_INT 130
8341: PUSH
8342: LD_INT 5
8344: PUSH
8345: LD_INT 2
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8353: LD_VAR 0 6
8357: PPUSH
8358: CALL_OW 257
8362: PUSH
8363: LD_INT 8
8365: EQUAL
8366: IFFALSE 8387
// points := [ 35 , 35 , 30 ] ;
8368: LD_ADDR_VAR 0 9
8372: PUSH
8373: LD_INT 35
8375: PUSH
8376: LD_INT 35
8378: PUSH
8379: LD_INT 30
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: LIST
8386: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8387: LD_VAR 0 6
8391: PPUSH
8392: CALL_OW 257
8396: PUSH
8397: LD_INT 9
8399: EQUAL
8400: IFFALSE 8421
// points := [ 20 , 55 , 40 ] ;
8402: LD_ADDR_VAR 0 9
8406: PUSH
8407: LD_INT 20
8409: PUSH
8410: LD_INT 55
8412: PUSH
8413: LD_INT 40
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8421: LD_VAR 0 6
8425: PPUSH
8426: CALL_OW 257
8430: PUSH
8431: LD_INT 12
8433: PUSH
8434: LD_INT 16
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: IN
8441: IFFALSE 8462
// points := [ 5 , 3 , 2 ] ;
8443: LD_ADDR_VAR 0 9
8447: PUSH
8448: LD_INT 5
8450: PUSH
8451: LD_INT 3
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8462: LD_VAR 0 6
8466: PPUSH
8467: CALL_OW 257
8471: PUSH
8472: LD_INT 17
8474: EQUAL
8475: IFFALSE 8496
// points := [ 100 , 50 , 75 ] ;
8477: LD_ADDR_VAR 0 9
8481: PUSH
8482: LD_INT 100
8484: PUSH
8485: LD_INT 50
8487: PUSH
8488: LD_INT 75
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8496: LD_VAR 0 6
8500: PPUSH
8501: CALL_OW 257
8505: PUSH
8506: LD_INT 15
8508: EQUAL
8509: IFFALSE 8530
// points := [ 10 , 5 , 3 ] ;
8511: LD_ADDR_VAR 0 9
8515: PUSH
8516: LD_INT 10
8518: PUSH
8519: LD_INT 5
8521: PUSH
8522: LD_INT 3
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8530: LD_VAR 0 6
8534: PPUSH
8535: CALL_OW 257
8539: PUSH
8540: LD_INT 14
8542: EQUAL
8543: IFFALSE 8564
// points := [ 10 , 0 , 0 ] ;
8545: LD_ADDR_VAR 0 9
8549: PUSH
8550: LD_INT 10
8552: PUSH
8553: LD_INT 0
8555: PUSH
8556: LD_INT 0
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8564: LD_VAR 0 6
8568: PPUSH
8569: CALL_OW 257
8573: PUSH
8574: LD_INT 11
8576: EQUAL
8577: IFFALSE 8598
// points := [ 30 , 10 , 5 ] ;
8579: LD_ADDR_VAR 0 9
8583: PUSH
8584: LD_INT 30
8586: PUSH
8587: LD_INT 10
8589: PUSH
8590: LD_INT 5
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8598: LD_VAR 0 1
8602: PPUSH
8603: LD_INT 5
8605: PPUSH
8606: CALL_OW 321
8610: PUSH
8611: LD_INT 2
8613: EQUAL
8614: IFFALSE 8631
// bpoints := bpoints * 1.8 ;
8616: LD_ADDR_VAR 0 10
8620: PUSH
8621: LD_VAR 0 10
8625: PUSH
8626: LD_REAL  1.80000000000000E+0000
8629: MUL
8630: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8631: LD_VAR 0 6
8635: PPUSH
8636: CALL_OW 257
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 3
8649: PUSH
8650: LD_INT 4
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: IN
8659: IFFALSE 8679
8661: PUSH
8662: LD_VAR 0 1
8666: PPUSH
8667: LD_INT 51
8669: PPUSH
8670: CALL_OW 321
8674: PUSH
8675: LD_INT 2
8677: EQUAL
8678: AND
8679: IFFALSE 8696
// bpoints := bpoints * 1.2 ;
8681: LD_ADDR_VAR 0 10
8685: PUSH
8686: LD_VAR 0 10
8690: PUSH
8691: LD_REAL  1.20000000000000E+0000
8694: MUL
8695: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8696: LD_VAR 0 6
8700: PPUSH
8701: CALL_OW 257
8705: PUSH
8706: LD_INT 5
8708: PUSH
8709: LD_INT 7
8711: PUSH
8712: LD_INT 9
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: IN
8720: IFFALSE 8740
8722: PUSH
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_INT 52
8730: PPUSH
8731: CALL_OW 321
8735: PUSH
8736: LD_INT 2
8738: EQUAL
8739: AND
8740: IFFALSE 8757
// bpoints := bpoints * 1.5 ;
8742: LD_ADDR_VAR 0 10
8746: PUSH
8747: LD_VAR 0 10
8751: PUSH
8752: LD_REAL  1.50000000000000E+0000
8755: MUL
8756: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_INT 66
8764: PPUSH
8765: CALL_OW 321
8769: PUSH
8770: LD_INT 2
8772: EQUAL
8773: IFFALSE 8790
// bpoints := bpoints * 1.1 ;
8775: LD_ADDR_VAR 0 10
8779: PUSH
8780: LD_VAR 0 10
8784: PUSH
8785: LD_REAL  1.10000000000000E+0000
8788: MUL
8789: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8790: LD_ADDR_VAR 0 10
8794: PUSH
8795: LD_VAR 0 10
8799: PUSH
8800: LD_VAR 0 6
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: CALL_OW 259
8812: PUSH
8813: LD_REAL  1.15000000000000E+0000
8816: MUL
8817: MUL
8818: ST_TO_ADDR
// end ; unit_vehicle :
8819: GO 9649
8821: LD_INT 2
8823: DOUBLE
8824: EQUAL
8825: IFTRUE 8829
8827: GO 9637
8829: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8830: LD_VAR 0 6
8834: PPUSH
8835: CALL_OW 264
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: LD_INT 42
8845: PUSH
8846: LD_INT 24
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: IN
8854: IFFALSE 8875
// points := [ 25 , 5 , 3 ] ;
8856: LD_ADDR_VAR 0 9
8860: PUSH
8861: LD_INT 25
8863: PUSH
8864: LD_INT 5
8866: PUSH
8867: LD_INT 3
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8875: LD_VAR 0 6
8879: PPUSH
8880: CALL_OW 264
8884: PUSH
8885: LD_INT 4
8887: PUSH
8888: LD_INT 43
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: IN
8899: IFFALSE 8920
// points := [ 40 , 15 , 5 ] ;
8901: LD_ADDR_VAR 0 9
8905: PUSH
8906: LD_INT 40
8908: PUSH
8909: LD_INT 15
8911: PUSH
8912: LD_INT 5
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8920: LD_VAR 0 6
8924: PPUSH
8925: CALL_OW 264
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: IN
8940: IFFALSE 8961
// points := [ 7 , 25 , 8 ] ;
8942: LD_ADDR_VAR 0 9
8946: PUSH
8947: LD_INT 7
8949: PUSH
8950: LD_INT 25
8952: PUSH
8953: LD_INT 8
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: LIST
8960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8961: LD_VAR 0 6
8965: PPUSH
8966: CALL_OW 264
8970: PUSH
8971: LD_INT 5
8973: PUSH
8974: LD_INT 27
8976: PUSH
8977: LD_INT 44
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: IN
8985: IFFALSE 9006
// points := [ 14 , 50 , 16 ] ;
8987: LD_ADDR_VAR 0 9
8991: PUSH
8992: LD_INT 14
8994: PUSH
8995: LD_INT 50
8997: PUSH
8998: LD_INT 16
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9006: LD_VAR 0 6
9010: PPUSH
9011: CALL_OW 264
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 46
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: IN
9026: IFFALSE 9047
// points := [ 32 , 120 , 70 ] ;
9028: LD_ADDR_VAR 0 9
9032: PUSH
9033: LD_INT 32
9035: PUSH
9036: LD_INT 120
9038: PUSH
9039: LD_INT 70
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9047: LD_VAR 0 6
9051: PPUSH
9052: CALL_OW 264
9056: PUSH
9057: LD_INT 7
9059: PUSH
9060: LD_INT 28
9062: PUSH
9063: LD_INT 45
9065: PUSH
9066: LD_INT 92
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: IN
9075: IFFALSE 9096
// points := [ 35 , 20 , 45 ] ;
9077: LD_ADDR_VAR 0 9
9081: PUSH
9082: LD_INT 35
9084: PUSH
9085: LD_INT 20
9087: PUSH
9088: LD_INT 45
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9096: LD_VAR 0 6
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 47
9108: PUSH
9109: EMPTY
9110: LIST
9111: IN
9112: IFFALSE 9133
// points := [ 67 , 45 , 75 ] ;
9114: LD_ADDR_VAR 0 9
9118: PUSH
9119: LD_INT 67
9121: PUSH
9122: LD_INT 45
9124: PUSH
9125: LD_INT 75
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9133: LD_VAR 0 6
9137: PPUSH
9138: CALL_OW 264
9142: PUSH
9143: LD_INT 26
9145: PUSH
9146: EMPTY
9147: LIST
9148: IN
9149: IFFALSE 9170
// points := [ 120 , 30 , 80 ] ;
9151: LD_ADDR_VAR 0 9
9155: PUSH
9156: LD_INT 120
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 80
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9170: LD_VAR 0 6
9174: PPUSH
9175: CALL_OW 264
9179: PUSH
9180: LD_INT 22
9182: PUSH
9183: EMPTY
9184: LIST
9185: IN
9186: IFFALSE 9207
// points := [ 40 , 1 , 1 ] ;
9188: LD_ADDR_VAR 0 9
9192: PUSH
9193: LD_INT 40
9195: PUSH
9196: LD_INT 1
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 264
9216: PUSH
9217: LD_INT 29
9219: PUSH
9220: EMPTY
9221: LIST
9222: IN
9223: IFFALSE 9244
// points := [ 70 , 200 , 400 ] ;
9225: LD_ADDR_VAR 0 9
9229: PUSH
9230: LD_INT 70
9232: PUSH
9233: LD_INT 200
9235: PUSH
9236: LD_INT 400
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9244: LD_VAR 0 6
9248: PPUSH
9249: CALL_OW 264
9253: PUSH
9254: LD_INT 14
9256: PUSH
9257: LD_INT 53
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: IN
9264: IFFALSE 9285
// points := [ 40 , 10 , 20 ] ;
9266: LD_ADDR_VAR 0 9
9270: PUSH
9271: LD_INT 40
9273: PUSH
9274: LD_INT 10
9276: PUSH
9277: LD_INT 20
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9285: LD_VAR 0 6
9289: PPUSH
9290: CALL_OW 264
9294: PUSH
9295: LD_INT 9
9297: PUSH
9298: EMPTY
9299: LIST
9300: IN
9301: IFFALSE 9322
// points := [ 5 , 70 , 20 ] ;
9303: LD_ADDR_VAR 0 9
9307: PUSH
9308: LD_INT 5
9310: PUSH
9311: LD_INT 70
9313: PUSH
9314: LD_INT 20
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9322: LD_VAR 0 6
9326: PPUSH
9327: CALL_OW 264
9331: PUSH
9332: LD_INT 10
9334: PUSH
9335: EMPTY
9336: LIST
9337: IN
9338: IFFALSE 9359
// points := [ 35 , 110 , 70 ] ;
9340: LD_ADDR_VAR 0 9
9344: PUSH
9345: LD_INT 35
9347: PUSH
9348: LD_INT 110
9350: PUSH
9351: LD_INT 70
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9359: LD_VAR 0 6
9363: PPUSH
9364: CALL_OW 265
9368: PUSH
9369: LD_INT 25
9371: EQUAL
9372: IFFALSE 9393
// points := [ 80 , 65 , 100 ] ;
9374: LD_ADDR_VAR 0 9
9378: PUSH
9379: LD_INT 80
9381: PUSH
9382: LD_INT 65
9384: PUSH
9385: LD_INT 100
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9393: LD_VAR 0 6
9397: PPUSH
9398: CALL_OW 263
9402: PUSH
9403: LD_INT 1
9405: EQUAL
9406: IFFALSE 9441
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9408: LD_ADDR_VAR 0 10
9412: PUSH
9413: LD_VAR 0 10
9417: PUSH
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 311
9427: PPUSH
9428: LD_INT 3
9430: PPUSH
9431: CALL_OW 259
9435: PUSH
9436: LD_INT 4
9438: MUL
9439: MUL
9440: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9441: LD_VAR 0 6
9445: PPUSH
9446: CALL_OW 263
9450: PUSH
9451: LD_INT 2
9453: EQUAL
9454: IFFALSE 9505
// begin j := IsControledBy ( i ) ;
9456: LD_ADDR_VAR 0 7
9460: PUSH
9461: LD_VAR 0 6
9465: PPUSH
9466: CALL_OW 312
9470: ST_TO_ADDR
// if j then
9471: LD_VAR 0 7
9475: IFFALSE 9505
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9477: LD_ADDR_VAR 0 10
9481: PUSH
9482: LD_VAR 0 10
9486: PUSH
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_INT 3
9494: PPUSH
9495: CALL_OW 259
9499: PUSH
9500: LD_INT 3
9502: MUL
9503: MUL
9504: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9505: LD_VAR 0 6
9509: PPUSH
9510: CALL_OW 264
9514: PUSH
9515: LD_INT 5
9517: PUSH
9518: LD_INT 6
9520: PUSH
9521: LD_INT 46
9523: PUSH
9524: LD_INT 44
9526: PUSH
9527: LD_INT 47
9529: PUSH
9530: LD_INT 45
9532: PUSH
9533: LD_INT 28
9535: PUSH
9536: LD_INT 7
9538: PUSH
9539: LD_INT 27
9541: PUSH
9542: LD_INT 29
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: IN
9557: IFFALSE 9577
9559: PUSH
9560: LD_VAR 0 1
9564: PPUSH
9565: LD_INT 52
9567: PPUSH
9568: CALL_OW 321
9572: PUSH
9573: LD_INT 2
9575: EQUAL
9576: AND
9577: IFFALSE 9594
// bpoints := bpoints * 1.2 ;
9579: LD_ADDR_VAR 0 10
9583: PUSH
9584: LD_VAR 0 10
9588: PUSH
9589: LD_REAL  1.20000000000000E+0000
9592: MUL
9593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 264
9603: PUSH
9604: LD_INT 6
9606: PUSH
9607: LD_INT 46
9609: PUSH
9610: LD_INT 47
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: IN
9618: IFFALSE 9635
// bpoints := bpoints * 1.2 ;
9620: LD_ADDR_VAR 0 10
9624: PUSH
9625: LD_VAR 0 10
9629: PUSH
9630: LD_REAL  1.20000000000000E+0000
9633: MUL
9634: ST_TO_ADDR
// end ; unit_building :
9635: GO 9649
9637: LD_INT 3
9639: DOUBLE
9640: EQUAL
9641: IFTRUE 9645
9643: GO 9648
9645: POP
// ; end ;
9646: GO 9649
9648: POP
// for j = 1 to 3 do
9649: LD_ADDR_VAR 0 7
9653: PUSH
9654: DOUBLE
9655: LD_INT 1
9657: DEC
9658: ST_TO_ADDR
9659: LD_INT 3
9661: PUSH
9662: FOR_TO
9663: IFFALSE 9716
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9665: LD_ADDR_VAR 0 5
9669: PUSH
9670: LD_VAR 0 5
9674: PPUSH
9675: LD_VAR 0 7
9679: PPUSH
9680: LD_VAR 0 5
9684: PUSH
9685: LD_VAR 0 7
9689: ARRAY
9690: PUSH
9691: LD_VAR 0 9
9695: PUSH
9696: LD_VAR 0 7
9700: ARRAY
9701: PUSH
9702: LD_VAR 0 10
9706: MUL
9707: PLUS
9708: PPUSH
9709: CALL_OW 1
9713: ST_TO_ADDR
9714: GO 9662
9716: POP
9717: POP
// end ;
9718: GO 8191
9720: POP
9721: POP
// result := Replace ( result , 4 , tmp ) ;
9722: LD_ADDR_VAR 0 5
9726: PUSH
9727: LD_VAR 0 5
9731: PPUSH
9732: LD_INT 4
9734: PPUSH
9735: LD_VAR 0 8
9739: PPUSH
9740: CALL_OW 1
9744: ST_TO_ADDR
// end ;
9745: LD_VAR 0 5
9749: RET
// export function DangerAtRange ( unit , range ) ; begin
9750: LD_INT 0
9752: PPUSH
// if not unit then
9753: LD_VAR 0 1
9757: NOT
9758: IFFALSE 9762
// exit ;
9760: GO 9807
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9762: LD_ADDR_VAR 0 3
9766: PUSH
9767: LD_VAR 0 1
9771: PPUSH
9772: CALL_OW 255
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 250
9786: PPUSH
9787: LD_VAR 0 1
9791: PPUSH
9792: CALL_OW 251
9796: PPUSH
9797: LD_VAR 0 2
9801: PPUSH
9802: CALL 8041 0 4
9806: ST_TO_ADDR
// end ;
9807: LD_VAR 0 3
9811: RET
// export function DangerInArea ( side , area ) ; begin
9812: LD_INT 0
9814: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9815: LD_ADDR_VAR 0 3
9819: PUSH
9820: LD_VAR 0 2
9824: PPUSH
9825: LD_INT 81
9827: PUSH
9828: LD_VAR 0 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PPUSH
9837: CALL_OW 70
9841: ST_TO_ADDR
// end ;
9842: LD_VAR 0 3
9846: RET
// export function IsExtension ( b ) ; begin
9847: LD_INT 0
9849: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9850: LD_ADDR_VAR 0 2
9854: PUSH
9855: LD_VAR 0 1
9859: PUSH
9860: LD_INT 23
9862: PUSH
9863: LD_INT 20
9865: PUSH
9866: LD_INT 22
9868: PUSH
9869: LD_INT 17
9871: PUSH
9872: LD_INT 24
9874: PUSH
9875: LD_INT 21
9877: PUSH
9878: LD_INT 19
9880: PUSH
9881: LD_INT 16
9883: PUSH
9884: LD_INT 25
9886: PUSH
9887: LD_INT 18
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: IN
9902: ST_TO_ADDR
// end ;
9903: LD_VAR 0 2
9907: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9908: LD_INT 0
9910: PPUSH
9911: PPUSH
9912: PPUSH
// result := [ ] ;
9913: LD_ADDR_VAR 0 4
9917: PUSH
9918: EMPTY
9919: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9920: LD_ADDR_VAR 0 5
9924: PUSH
9925: LD_VAR 0 2
9929: PPUSH
9930: LD_INT 21
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PPUSH
9940: CALL_OW 70
9944: ST_TO_ADDR
// if not tmp then
9945: LD_VAR 0 5
9949: NOT
9950: IFFALSE 9954
// exit ;
9952: GO 10018
// if checkLink then
9954: LD_VAR 0 3
9958: IFFALSE 10008
// begin for i in tmp do
9960: LD_ADDR_VAR 0 6
9964: PUSH
9965: LD_VAR 0 5
9969: PUSH
9970: FOR_IN
9971: IFFALSE 10006
// if GetBase ( i ) <> base then
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 274
9982: PUSH
9983: LD_VAR 0 1
9987: NONEQUAL
9988: IFFALSE 10004
// ComLinkToBase ( base , i ) ;
9990: LD_VAR 0 1
9994: PPUSH
9995: LD_VAR 0 6
9999: PPUSH
10000: CALL_OW 169
10004: GO 9970
10006: POP
10007: POP
// end ; result := tmp ;
10008: LD_ADDR_VAR 0 4
10012: PUSH
10013: LD_VAR 0 5
10017: ST_TO_ADDR
// end ;
10018: LD_VAR 0 4
10022: RET
// export function ComComplete ( units , b ) ; var i ; begin
10023: LD_INT 0
10025: PPUSH
10026: PPUSH
// if not units then
10027: LD_VAR 0 1
10031: NOT
10032: IFFALSE 10036
// exit ;
10034: GO 10126
// for i in units do
10036: LD_ADDR_VAR 0 4
10040: PUSH
10041: LD_VAR 0 1
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10124
// if BuildingStatus ( b ) = bs_build then
10049: LD_VAR 0 2
10053: PPUSH
10054: CALL_OW 461
10058: PUSH
10059: LD_INT 1
10061: EQUAL
10062: IFFALSE 10122
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10064: LD_VAR 0 4
10068: PPUSH
10069: LD_STRING h
10071: PUSH
10072: LD_VAR 0 2
10076: PPUSH
10077: CALL_OW 250
10081: PUSH
10082: LD_VAR 0 2
10086: PPUSH
10087: CALL_OW 251
10091: PUSH
10092: LD_VAR 0 2
10096: PUSH
10097: LD_INT 0
10099: PUSH
10100: LD_INT 0
10102: PUSH
10103: LD_INT 0
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: PPUSH
10118: CALL_OW 446
10122: GO 10046
10124: POP
10125: POP
// end ;
10126: LD_VAR 0 3
10130: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10131: LD_INT 0
10133: PPUSH
10134: PPUSH
10135: PPUSH
10136: PPUSH
10137: PPUSH
10138: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10139: LD_VAR 0 1
10143: NOT
10144: IFTRUE 10161
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 263
10156: PUSH
10157: LD_INT 2
10159: NONEQUAL
10160: OR
10161: IFFALSE 10165
// exit ;
10163: GO 10481
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10165: LD_ADDR_VAR 0 6
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 255
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 2
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: LD_INT 36
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 31
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 69
10223: ST_TO_ADDR
// if not tmp then
10224: LD_VAR 0 6
10228: NOT
10229: IFFALSE 10233
// exit ;
10231: GO 10481
// result := [ ] ;
10233: LD_ADDR_VAR 0 2
10237: PUSH
10238: EMPTY
10239: ST_TO_ADDR
// for i in tmp do
10240: LD_ADDR_VAR 0 3
10244: PUSH
10245: LD_VAR 0 6
10249: PUSH
10250: FOR_IN
10251: IFFALSE 10322
// begin t := UnitsInside ( i ) ;
10253: LD_ADDR_VAR 0 4
10257: PUSH
10258: LD_VAR 0 3
10262: PPUSH
10263: CALL_OW 313
10267: ST_TO_ADDR
// if t then
10268: LD_VAR 0 4
10272: IFFALSE 10320
// for j in t do
10274: LD_ADDR_VAR 0 7
10278: PUSH
10279: LD_VAR 0 4
10283: PUSH
10284: FOR_IN
10285: IFFALSE 10318
// result := Replace ( result , result + 1 , j ) ;
10287: LD_ADDR_VAR 0 2
10291: PUSH
10292: LD_VAR 0 2
10296: PPUSH
10297: LD_VAR 0 2
10301: PUSH
10302: LD_INT 1
10304: PLUS
10305: PPUSH
10306: LD_VAR 0 7
10310: PPUSH
10311: CALL_OW 1
10315: ST_TO_ADDR
10316: GO 10284
10318: POP
10319: POP
// end ;
10320: GO 10250
10322: POP
10323: POP
// if not result then
10324: LD_VAR 0 2
10328: NOT
10329: IFFALSE 10333
// exit ;
10331: GO 10481
// mech := result [ 1 ] ;
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: LD_VAR 0 2
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: ST_TO_ADDR
// if result > 1 then
10347: LD_VAR 0 2
10351: PUSH
10352: LD_INT 1
10354: GREATER
10355: IFFALSE 10467
// begin for i = 2 to result do
10357: LD_ADDR_VAR 0 3
10361: PUSH
10362: DOUBLE
10363: LD_INT 2
10365: DEC
10366: ST_TO_ADDR
10367: LD_VAR 0 2
10371: PUSH
10372: FOR_TO
10373: IFFALSE 10465
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10375: LD_ADDR_VAR 0 4
10379: PUSH
10380: LD_VAR 0 2
10384: PUSH
10385: LD_VAR 0 3
10389: ARRAY
10390: PPUSH
10391: LD_INT 3
10393: PPUSH
10394: CALL_OW 259
10398: PUSH
10399: LD_VAR 0 2
10403: PUSH
10404: LD_VAR 0 3
10408: ARRAY
10409: PPUSH
10410: CALL_OW 432
10414: MINUS
10415: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10416: LD_VAR 0 4
10420: PUSH
10421: LD_VAR 0 5
10425: PPUSH
10426: LD_INT 3
10428: PPUSH
10429: CALL_OW 259
10433: PUSH
10434: LD_VAR 0 5
10438: PPUSH
10439: CALL_OW 432
10443: MINUS
10444: GREATEREQUAL
10445: IFFALSE 10463
// mech := result [ i ] ;
10447: LD_ADDR_VAR 0 5
10451: PUSH
10452: LD_VAR 0 2
10456: PUSH
10457: LD_VAR 0 3
10461: ARRAY
10462: ST_TO_ADDR
// end ;
10463: GO 10372
10465: POP
10466: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_VAR 0 5
10476: PPUSH
10477: CALL_OW 135
// end ;
10481: LD_VAR 0 2
10485: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10486: LD_INT 0
10488: PPUSH
10489: PPUSH
10490: PPUSH
10491: PPUSH
10492: PPUSH
10493: PPUSH
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
// result := [ ] ;
10501: LD_ADDR_VAR 0 7
10505: PUSH
10506: EMPTY
10507: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10508: LD_VAR 0 1
10512: PPUSH
10513: CALL_OW 266
10517: PUSH
10518: LD_INT 0
10520: PUSH
10521: LD_INT 1
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: IN
10528: NOT
10529: IFFALSE 10533
// exit ;
10531: GO 12173
// if name then
10533: LD_VAR 0 3
10537: IFFALSE 10553
// SetBName ( base_dep , name ) ;
10539: LD_VAR 0 1
10543: PPUSH
10544: LD_VAR 0 3
10548: PPUSH
10549: CALL_OW 500
// base := GetBase ( base_dep ) ;
10553: LD_ADDR_VAR 0 15
10557: PUSH
10558: LD_VAR 0 1
10562: PPUSH
10563: CALL_OW 274
10567: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10568: LD_ADDR_VAR 0 16
10572: PUSH
10573: LD_VAR 0 1
10577: PPUSH
10578: CALL_OW 255
10582: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10583: LD_ADDR_VAR 0 17
10587: PUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 248
10597: ST_TO_ADDR
// if sources then
10598: LD_VAR 0 5
10602: IFFALSE 10649
// for i = 1 to 3 do
10604: LD_ADDR_VAR 0 8
10608: PUSH
10609: DOUBLE
10610: LD_INT 1
10612: DEC
10613: ST_TO_ADDR
10614: LD_INT 3
10616: PUSH
10617: FOR_TO
10618: IFFALSE 10647
// AddResourceType ( base , i , sources [ i ] ) ;
10620: LD_VAR 0 15
10624: PPUSH
10625: LD_VAR 0 8
10629: PPUSH
10630: LD_VAR 0 5
10634: PUSH
10635: LD_VAR 0 8
10639: ARRAY
10640: PPUSH
10641: CALL_OW 276
10645: GO 10617
10647: POP
10648: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10649: LD_ADDR_VAR 0 18
10653: PUSH
10654: LD_VAR 0 15
10658: PPUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL 9908 0 3
10671: ST_TO_ADDR
// InitHc ;
10672: CALL_OW 19
// InitUc ;
10676: CALL_OW 18
// uc_side := side ;
10680: LD_ADDR_OWVAR 20
10684: PUSH
10685: LD_VAR 0 16
10689: ST_TO_ADDR
// uc_nation := nation ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_VAR 0 17
10699: ST_TO_ADDR
// if buildings then
10700: LD_VAR 0 18
10704: IFFALSE 12032
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10706: LD_ADDR_VAR 0 19
10710: PUSH
10711: LD_VAR 0 18
10715: PPUSH
10716: LD_INT 2
10718: PUSH
10719: LD_INT 30
10721: PUSH
10722: LD_INT 29
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 30
10731: PUSH
10732: LD_INT 30
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: PPUSH
10744: CALL_OW 72
10748: ST_TO_ADDR
// if tmp then
10749: LD_VAR 0 19
10753: IFFALSE 10801
// for i in tmp do
10755: LD_ADDR_VAR 0 8
10759: PUSH
10760: LD_VAR 0 19
10764: PUSH
10765: FOR_IN
10766: IFFALSE 10799
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10768: LD_VAR 0 8
10772: PPUSH
10773: CALL_OW 250
10777: PPUSH
10778: LD_VAR 0 8
10782: PPUSH
10783: CALL_OW 251
10787: PPUSH
10788: LD_VAR 0 16
10792: PPUSH
10793: CALL_OW 441
10797: GO 10765
10799: POP
10800: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10801: LD_VAR 0 18
10805: PPUSH
10806: LD_INT 2
10808: PUSH
10809: LD_INT 30
10811: PUSH
10812: LD_INT 32
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 33
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PPUSH
10834: CALL_OW 72
10838: IFFALSE 10926
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10840: LD_ADDR_VAR 0 8
10844: PUSH
10845: LD_VAR 0 18
10849: PPUSH
10850: LD_INT 2
10852: PUSH
10853: LD_INT 30
10855: PUSH
10856: LD_INT 32
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 30
10865: PUSH
10866: LD_INT 33
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 72
10882: PUSH
10883: FOR_IN
10884: IFFALSE 10924
// begin if not GetBWeapon ( i ) then
10886: LD_VAR 0 8
10890: PPUSH
10891: CALL_OW 269
10895: NOT
10896: IFFALSE 10922
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10898: LD_VAR 0 8
10902: PPUSH
10903: LD_VAR 0 8
10907: PPUSH
10908: LD_VAR 0 2
10912: PPUSH
10913: CALL 12178 0 2
10917: PPUSH
10918: CALL_OW 431
// end ;
10922: GO 10883
10924: POP
10925: POP
// end ; for i = 1 to personel do
10926: LD_ADDR_VAR 0 8
10930: PUSH
10931: DOUBLE
10932: LD_INT 1
10934: DEC
10935: ST_TO_ADDR
10936: LD_VAR 0 6
10940: PUSH
10941: FOR_TO
10942: IFFALSE 12012
// begin if i > 4 then
10944: LD_VAR 0 8
10948: PUSH
10949: LD_INT 4
10951: GREATER
10952: IFFALSE 10956
// break ;
10954: GO 12012
// case i of 1 :
10956: LD_VAR 0 8
10960: PUSH
10961: LD_INT 1
10963: DOUBLE
10964: EQUAL
10965: IFTRUE 10969
10967: GO 11049
10969: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10970: LD_ADDR_VAR 0 12
10974: PUSH
10975: LD_VAR 0 18
10979: PPUSH
10980: LD_INT 22
10982: PUSH
10983: LD_VAR 0 16
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 58
10994: PUSH
10995: EMPTY
10996: LIST
10997: PUSH
10998: LD_INT 2
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: LD_INT 32
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: LD_INT 4
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 30
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 72
11046: ST_TO_ADDR
11047: GO 11271
11049: LD_INT 2
11051: DOUBLE
11052: EQUAL
11053: IFTRUE 11057
11055: GO 11119
11057: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11058: LD_ADDR_VAR 0 12
11062: PUSH
11063: LD_VAR 0 18
11067: PPUSH
11068: LD_INT 22
11070: PUSH
11071: LD_VAR 0 16
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 30
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 30
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 72
11116: ST_TO_ADDR
11117: GO 11271
11119: LD_INT 3
11121: DOUBLE
11122: EQUAL
11123: IFTRUE 11127
11125: GO 11189
11127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11128: LD_ADDR_VAR 0 12
11132: PUSH
11133: LD_VAR 0 18
11137: PPUSH
11138: LD_INT 22
11140: PUSH
11141: LD_VAR 0 16
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 30
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 30
11165: PUSH
11166: LD_INT 3
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 72
11186: ST_TO_ADDR
11187: GO 11271
11189: LD_INT 4
11191: DOUBLE
11192: EQUAL
11193: IFTRUE 11197
11195: GO 11270
11197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11198: LD_ADDR_VAR 0 12
11202: PUSH
11203: LD_VAR 0 18
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_VAR 0 16
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 6
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: LD_INT 7
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 30
11245: PUSH
11246: LD_INT 8
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 72
11267: ST_TO_ADDR
11268: GO 11271
11270: POP
// if i = 1 then
11271: LD_VAR 0 8
11275: PUSH
11276: LD_INT 1
11278: EQUAL
11279: IFFALSE 11390
// begin tmp := [ ] ;
11281: LD_ADDR_VAR 0 19
11285: PUSH
11286: EMPTY
11287: ST_TO_ADDR
// for j in f do
11288: LD_ADDR_VAR 0 9
11292: PUSH
11293: LD_VAR 0 12
11297: PUSH
11298: FOR_IN
11299: IFFALSE 11372
// if GetBType ( j ) = b_bunker then
11301: LD_VAR 0 9
11305: PPUSH
11306: CALL_OW 266
11310: PUSH
11311: LD_INT 32
11313: EQUAL
11314: IFFALSE 11341
// tmp := Insert ( tmp , 1 , j ) else
11316: LD_ADDR_VAR 0 19
11320: PUSH
11321: LD_VAR 0 19
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: LD_VAR 0 9
11333: PPUSH
11334: CALL_OW 2
11338: ST_TO_ADDR
11339: GO 11370
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11341: LD_ADDR_VAR 0 19
11345: PUSH
11346: LD_VAR 0 19
11350: PPUSH
11351: LD_VAR 0 19
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: PPUSH
11360: LD_VAR 0 9
11364: PPUSH
11365: CALL_OW 2
11369: ST_TO_ADDR
11370: GO 11298
11372: POP
11373: POP
// if tmp then
11374: LD_VAR 0 19
11378: IFFALSE 11390
// f := tmp ;
11380: LD_ADDR_VAR 0 12
11384: PUSH
11385: LD_VAR 0 19
11389: ST_TO_ADDR
// end ; x := personel [ i ] ;
11390: LD_ADDR_VAR 0 13
11394: PUSH
11395: LD_VAR 0 6
11399: PUSH
11400: LD_VAR 0 8
11404: ARRAY
11405: ST_TO_ADDR
// if x = - 1 then
11406: LD_VAR 0 13
11410: PUSH
11411: LD_INT 1
11413: NEG
11414: EQUAL
11415: IFFALSE 11626
// begin for j in f do
11417: LD_ADDR_VAR 0 9
11421: PUSH
11422: LD_VAR 0 12
11426: PUSH
11427: FOR_IN
11428: IFFALSE 11622
// repeat InitHc ;
11430: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11434: LD_VAR 0 9
11438: PPUSH
11439: CALL_OW 266
11443: PUSH
11444: LD_INT 5
11446: EQUAL
11447: IFFALSE 11517
// begin if UnitsInside ( j ) < 3 then
11449: LD_VAR 0 9
11453: PPUSH
11454: CALL_OW 313
11458: PUSH
11459: LD_INT 3
11461: LESS
11462: IFFALSE 11498
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11464: LD_INT 0
11466: PPUSH
11467: LD_INT 5
11469: PUSH
11470: LD_INT 8
11472: PUSH
11473: LD_INT 9
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: PUSH
11481: LD_VAR 0 17
11485: ARRAY
11486: PPUSH
11487: LD_VAR 0 4
11491: PPUSH
11492: CALL_OW 380
11496: GO 11515
// PrepareHuman ( false , i , skill ) ;
11498: LD_INT 0
11500: PPUSH
11501: LD_VAR 0 8
11505: PPUSH
11506: LD_VAR 0 4
11510: PPUSH
11511: CALL_OW 380
// end else
11515: GO 11534
// PrepareHuman ( false , i , skill ) ;
11517: LD_INT 0
11519: PPUSH
11520: LD_VAR 0 8
11524: PPUSH
11525: LD_VAR 0 4
11529: PPUSH
11530: CALL_OW 380
// un := CreateHuman ;
11534: LD_ADDR_VAR 0 14
11538: PUSH
11539: CALL_OW 44
11543: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11544: LD_ADDR_VAR 0 7
11548: PUSH
11549: LD_VAR 0 7
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: LD_VAR 0 14
11561: PPUSH
11562: CALL_OW 2
11566: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11567: LD_VAR 0 14
11571: PPUSH
11572: LD_VAR 0 9
11576: PPUSH
11577: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11581: LD_VAR 0 9
11585: PPUSH
11586: CALL_OW 313
11590: PUSH
11591: LD_INT 6
11593: EQUAL
11594: IFTRUE 11618
11596: PUSH
11597: LD_VAR 0 9
11601: PPUSH
11602: CALL_OW 266
11606: PUSH
11607: LD_INT 32
11609: PUSH
11610: LD_INT 31
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: IN
11617: OR
11618: IFFALSE 11430
11620: GO 11427
11622: POP
11623: POP
// end else
11624: GO 12010
// for j = 1 to x do
11626: LD_ADDR_VAR 0 9
11630: PUSH
11631: DOUBLE
11632: LD_INT 1
11634: DEC
11635: ST_TO_ADDR
11636: LD_VAR 0 13
11640: PUSH
11641: FOR_TO
11642: IFFALSE 12008
// begin InitHc ;
11644: CALL_OW 19
// if not f then
11648: LD_VAR 0 12
11652: NOT
11653: IFFALSE 11742
// begin PrepareHuman ( false , i , skill ) ;
11655: LD_INT 0
11657: PPUSH
11658: LD_VAR 0 8
11662: PPUSH
11663: LD_VAR 0 4
11667: PPUSH
11668: CALL_OW 380
// un := CreateHuman ;
11672: LD_ADDR_VAR 0 14
11676: PUSH
11677: CALL_OW 44
11681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11682: LD_ADDR_VAR 0 7
11686: PUSH
11687: LD_VAR 0 7
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: LD_VAR 0 14
11699: PPUSH
11700: CALL_OW 2
11704: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11705: LD_VAR 0 14
11709: PPUSH
11710: LD_VAR 0 1
11714: PPUSH
11715: CALL_OW 250
11719: PPUSH
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 251
11729: PPUSH
11730: LD_INT 10
11732: PPUSH
11733: LD_INT 0
11735: PPUSH
11736: CALL_OW 50
// continue ;
11740: GO 11641
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11742: LD_VAR 0 12
11746: PUSH
11747: LD_INT 1
11749: ARRAY
11750: PPUSH
11751: CALL_OW 313
11755: IFFALSE 11783
11757: PUSH
11758: LD_VAR 0 12
11762: PUSH
11763: LD_INT 1
11765: ARRAY
11766: PPUSH
11767: CALL_OW 266
11771: PUSH
11772: LD_INT 32
11774: PUSH
11775: LD_INT 31
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: IN
11782: AND
11783: IFTRUE 11804
11785: PUSH
11786: LD_VAR 0 12
11790: PUSH
11791: LD_INT 1
11793: ARRAY
11794: PPUSH
11795: CALL_OW 313
11799: PUSH
11800: LD_INT 6
11802: EQUAL
11803: OR
11804: IFFALSE 11824
// f := Delete ( f , 1 ) ;
11806: LD_ADDR_VAR 0 12
11810: PUSH
11811: LD_VAR 0 12
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 3
11823: ST_TO_ADDR
// if not f then
11824: LD_VAR 0 12
11828: NOT
11829: IFFALSE 11847
// begin x := x + 2 ;
11831: LD_ADDR_VAR 0 13
11835: PUSH
11836: LD_VAR 0 13
11840: PUSH
11841: LD_INT 2
11843: PLUS
11844: ST_TO_ADDR
// continue ;
11845: GO 11641
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11847: LD_VAR 0 12
11851: PUSH
11852: LD_INT 1
11854: ARRAY
11855: PPUSH
11856: CALL_OW 266
11860: PUSH
11861: LD_INT 5
11863: EQUAL
11864: IFFALSE 11938
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11866: LD_VAR 0 12
11870: PUSH
11871: LD_INT 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 313
11879: PUSH
11880: LD_INT 3
11882: LESS
11883: IFFALSE 11919
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11885: LD_INT 0
11887: PPUSH
11888: LD_INT 5
11890: PUSH
11891: LD_INT 8
11893: PUSH
11894: LD_INT 9
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: PUSH
11902: LD_VAR 0 17
11906: ARRAY
11907: PPUSH
11908: LD_VAR 0 4
11912: PPUSH
11913: CALL_OW 380
11917: GO 11936
// PrepareHuman ( false , i , skill ) ;
11919: LD_INT 0
11921: PPUSH
11922: LD_VAR 0 8
11926: PPUSH
11927: LD_VAR 0 4
11931: PPUSH
11932: CALL_OW 380
// end else
11936: GO 11955
// PrepareHuman ( false , i , skill ) ;
11938: LD_INT 0
11940: PPUSH
11941: LD_VAR 0 8
11945: PPUSH
11946: LD_VAR 0 4
11950: PPUSH
11951: CALL_OW 380
// un := CreateHuman ;
11955: LD_ADDR_VAR 0 14
11959: PUSH
11960: CALL_OW 44
11964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11965: LD_ADDR_VAR 0 7
11969: PUSH
11970: LD_VAR 0 7
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_VAR 0 14
11982: PPUSH
11983: CALL_OW 2
11987: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11988: LD_VAR 0 14
11992: PPUSH
11993: LD_VAR 0 12
11997: PUSH
11998: LD_INT 1
12000: ARRAY
12001: PPUSH
12002: CALL_OW 52
// end ;
12006: GO 11641
12008: POP
12009: POP
// end ;
12010: GO 10941
12012: POP
12013: POP
// result := result ^ buildings ;
12014: LD_ADDR_VAR 0 7
12018: PUSH
12019: LD_VAR 0 7
12023: PUSH
12024: LD_VAR 0 18
12028: ADD
12029: ST_TO_ADDR
// end else
12030: GO 12173
// begin for i = 1 to personel do
12032: LD_ADDR_VAR 0 8
12036: PUSH
12037: DOUBLE
12038: LD_INT 1
12040: DEC
12041: ST_TO_ADDR
12042: LD_VAR 0 6
12046: PUSH
12047: FOR_TO
12048: IFFALSE 12171
// begin if i > 4 then
12050: LD_VAR 0 8
12054: PUSH
12055: LD_INT 4
12057: GREATER
12058: IFFALSE 12062
// break ;
12060: GO 12171
// x := personel [ i ] ;
12062: LD_ADDR_VAR 0 13
12066: PUSH
12067: LD_VAR 0 6
12071: PUSH
12072: LD_VAR 0 8
12076: ARRAY
12077: ST_TO_ADDR
// if x = - 1 then
12078: LD_VAR 0 13
12082: PUSH
12083: LD_INT 1
12085: NEG
12086: EQUAL
12087: IFFALSE 12091
// continue ;
12089: GO 12047
// PrepareHuman ( false , i , skill ) ;
12091: LD_INT 0
12093: PPUSH
12094: LD_VAR 0 8
12098: PPUSH
12099: LD_VAR 0 4
12103: PPUSH
12104: CALL_OW 380
// un := CreateHuman ;
12108: LD_ADDR_VAR 0 14
12112: PUSH
12113: CALL_OW 44
12117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12118: LD_VAR 0 14
12122: PPUSH
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 250
12132: PPUSH
12133: LD_VAR 0 1
12137: PPUSH
12138: CALL_OW 251
12142: PPUSH
12143: LD_INT 10
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 50
// result := result ^ un ;
12153: LD_ADDR_VAR 0 7
12157: PUSH
12158: LD_VAR 0 7
12162: PUSH
12163: LD_VAR 0 14
12167: ADD
12168: ST_TO_ADDR
// end ;
12169: GO 12047
12171: POP
12172: POP
// end ; end ;
12173: LD_VAR 0 7
12177: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12178: LD_INT 0
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
12195: PPUSH
// result := false ;
12196: LD_ADDR_VAR 0 3
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12204: LD_VAR 0 1
12208: NOT
12209: IFTRUE 12234
12211: PUSH
12212: LD_VAR 0 1
12216: PPUSH
12217: CALL_OW 266
12221: PUSH
12222: LD_INT 32
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: IN
12232: NOT
12233: OR
12234: IFFALSE 12238
// exit ;
12236: GO 13373
// nat := GetNation ( tower ) ;
12238: LD_ADDR_VAR 0 12
12242: PUSH
12243: LD_VAR 0 1
12247: PPUSH
12248: CALL_OW 248
12252: ST_TO_ADDR
// side := GetSide ( tower ) ;
12253: LD_ADDR_VAR 0 16
12257: PUSH
12258: LD_VAR 0 1
12262: PPUSH
12263: CALL_OW 255
12267: ST_TO_ADDR
// x := GetX ( tower ) ;
12268: LD_ADDR_VAR 0 10
12272: PUSH
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL_OW 250
12282: ST_TO_ADDR
// y := GetY ( tower ) ;
12283: LD_ADDR_VAR 0 11
12287: PUSH
12288: LD_VAR 0 1
12292: PPUSH
12293: CALL_OW 251
12297: ST_TO_ADDR
// if not x or not y then
12298: LD_VAR 0 10
12302: NOT
12303: IFTRUE 12312
12305: PUSH
12306: LD_VAR 0 11
12310: NOT
12311: OR
12312: IFFALSE 12316
// exit ;
12314: GO 13373
// weapon := 0 ;
12316: LD_ADDR_VAR 0 18
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// fac_list := [ ] ;
12324: LD_ADDR_VAR 0 17
12328: PUSH
12329: EMPTY
12330: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12331: LD_ADDR_VAR 0 6
12335: PUSH
12336: LD_VAR 0 1
12340: PPUSH
12341: CALL_OW 274
12345: PPUSH
12346: LD_VAR 0 2
12350: PPUSH
12351: LD_INT 0
12353: PPUSH
12354: CALL 9908 0 3
12358: PPUSH
12359: LD_INT 30
12361: PUSH
12362: LD_INT 3
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PPUSH
12369: CALL_OW 72
12373: ST_TO_ADDR
// if not factories then
12374: LD_VAR 0 6
12378: NOT
12379: IFFALSE 12383
// exit ;
12381: GO 13373
// for i in factories do
12383: LD_ADDR_VAR 0 8
12387: PUSH
12388: LD_VAR 0 6
12392: PUSH
12393: FOR_IN
12394: IFFALSE 12419
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12396: LD_ADDR_VAR 0 17
12400: PUSH
12401: LD_VAR 0 17
12405: PUSH
12406: LD_VAR 0 8
12410: PPUSH
12411: CALL_OW 478
12415: UNION
12416: ST_TO_ADDR
12417: GO 12393
12419: POP
12420: POP
// if not fac_list then
12421: LD_VAR 0 17
12425: NOT
12426: IFFALSE 12430
// exit ;
12428: GO 13373
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12430: LD_ADDR_VAR 0 5
12434: PUSH
12435: LD_INT 4
12437: PUSH
12438: LD_INT 5
12440: PUSH
12441: LD_INT 9
12443: PUSH
12444: LD_INT 10
12446: PUSH
12447: LD_INT 6
12449: PUSH
12450: LD_INT 7
12452: PUSH
12453: LD_INT 11
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 27
12467: PUSH
12468: LD_INT 28
12470: PUSH
12471: LD_INT 26
12473: PUSH
12474: LD_INT 30
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 43
12485: PUSH
12486: LD_INT 44
12488: PUSH
12489: LD_INT 46
12491: PUSH
12492: LD_INT 45
12494: PUSH
12495: LD_INT 47
12497: PUSH
12498: LD_INT 49
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_VAR 0 12
12518: ARRAY
12519: ST_TO_ADDR
// list := list isect fac_list ;
12520: LD_ADDR_VAR 0 5
12524: PUSH
12525: LD_VAR 0 5
12529: PUSH
12530: LD_VAR 0 17
12534: ISECT
12535: ST_TO_ADDR
// if not list then
12536: LD_VAR 0 5
12540: NOT
12541: IFFALSE 12545
// exit ;
12543: GO 13373
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12545: LD_VAR 0 12
12549: PUSH
12550: LD_INT 3
12552: EQUAL
12553: IFFALSE 12565
12555: PUSH
12556: LD_INT 49
12558: PUSH
12559: LD_VAR 0 5
12563: IN
12564: AND
12565: IFFALSE 12585
12567: PUSH
12568: LD_INT 31
12570: PPUSH
12571: LD_VAR 0 16
12575: PPUSH
12576: CALL_OW 321
12580: PUSH
12581: LD_INT 2
12583: EQUAL
12584: AND
12585: IFFALSE 12645
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12587: LD_INT 22
12589: PUSH
12590: LD_VAR 0 16
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 35
12601: PUSH
12602: LD_INT 49
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 91
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: LD_INT 10
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 69
12634: NOT
12635: IFFALSE 12645
// weapon := ru_time_lapser ;
12637: LD_ADDR_VAR 0 18
12641: PUSH
12642: LD_INT 49
12644: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12645: LD_VAR 0 12
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: IN
12660: IFFALSE 12684
12662: PUSH
12663: LD_INT 11
12665: PUSH
12666: LD_VAR 0 5
12670: IN
12671: IFTRUE 12683
12673: PUSH
12674: LD_INT 30
12676: PUSH
12677: LD_VAR 0 5
12681: IN
12682: OR
12683: AND
12684: IFFALSE 12704
12686: PUSH
12687: LD_INT 6
12689: PPUSH
12690: LD_VAR 0 16
12694: PPUSH
12695: CALL_OW 321
12699: PUSH
12700: LD_INT 2
12702: EQUAL
12703: AND
12704: IFFALSE 12871
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12706: LD_INT 22
12708: PUSH
12709: LD_VAR 0 16
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: LD_INT 35
12723: PUSH
12724: LD_INT 11
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 35
12733: PUSH
12734: LD_INT 30
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 91
12748: PUSH
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 18
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: LIST
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: NOT
12772: IFFALSE 12848
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_VAR 0 16
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: LD_INT 30
12792: PUSH
12793: LD_INT 32
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 30
12802: PUSH
12803: LD_INT 33
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 91
12817: PUSH
12818: LD_VAR 0 1
12822: PUSH
12823: LD_INT 12
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: EMPTY
12837: LIST
12838: PPUSH
12839: CALL_OW 69
12843: PUSH
12844: LD_INT 2
12846: GREATER
12847: AND
12848: IFFALSE 12871
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12850: LD_ADDR_VAR 0 18
12854: PUSH
12855: LD_INT 11
12857: PUSH
12858: LD_INT 30
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_VAR 0 12
12869: ARRAY
12870: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12871: LD_VAR 0 18
12875: NOT
12876: IFFALSE 12896
12878: PUSH
12879: LD_INT 40
12881: PPUSH
12882: LD_VAR 0 16
12886: PPUSH
12887: CALL_OW 321
12891: PUSH
12892: LD_INT 2
12894: EQUAL
12895: AND
12896: IFFALSE 12932
12898: PUSH
12899: LD_INT 7
12901: PUSH
12902: LD_VAR 0 5
12906: IN
12907: IFTRUE 12919
12909: PUSH
12910: LD_INT 28
12912: PUSH
12913: LD_VAR 0 5
12917: IN
12918: OR
12919: IFTRUE 12931
12921: PUSH
12922: LD_INT 45
12924: PUSH
12925: LD_VAR 0 5
12929: IN
12930: OR
12931: AND
12932: IFFALSE 13186
// begin hex := GetHexInfo ( x , y ) ;
12934: LD_ADDR_VAR 0 4
12938: PUSH
12939: LD_VAR 0 10
12943: PPUSH
12944: LD_VAR 0 11
12948: PPUSH
12949: CALL_OW 546
12953: ST_TO_ADDR
// if hex [ 1 ] then
12954: LD_VAR 0 4
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: IFFALSE 12966
// exit ;
12964: GO 13373
// height := hex [ 2 ] ;
12966: LD_ADDR_VAR 0 15
12970: PUSH
12971: LD_VAR 0 4
12975: PUSH
12976: LD_INT 2
12978: ARRAY
12979: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12980: LD_ADDR_VAR 0 14
12984: PUSH
12985: LD_INT 0
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: LD_INT 3
12993: PUSH
12994: LD_INT 5
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: ST_TO_ADDR
// for i in tmp do
13003: LD_ADDR_VAR 0 8
13007: PUSH
13008: LD_VAR 0 14
13012: PUSH
13013: FOR_IN
13014: IFFALSE 13184
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13016: LD_ADDR_VAR 0 9
13020: PUSH
13021: LD_VAR 0 10
13025: PPUSH
13026: LD_VAR 0 8
13030: PPUSH
13031: LD_INT 5
13033: PPUSH
13034: CALL_OW 272
13038: PUSH
13039: LD_VAR 0 11
13043: PPUSH
13044: LD_VAR 0 8
13048: PPUSH
13049: LD_INT 5
13051: PPUSH
13052: CALL_OW 273
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13061: LD_VAR 0 9
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PPUSH
13070: LD_VAR 0 9
13074: PUSH
13075: LD_INT 2
13077: ARRAY
13078: PPUSH
13079: CALL_OW 488
13083: IFFALSE 13182
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13085: LD_ADDR_VAR 0 4
13089: PUSH
13090: LD_VAR 0 9
13094: PUSH
13095: LD_INT 1
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 9
13103: PUSH
13104: LD_INT 2
13106: ARRAY
13107: PPUSH
13108: CALL_OW 546
13112: ST_TO_ADDR
// if hex [ 1 ] then
13113: LD_VAR 0 4
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: IFFALSE 13125
// continue ;
13123: GO 13013
// h := hex [ 2 ] ;
13125: LD_ADDR_VAR 0 13
13129: PUSH
13130: LD_VAR 0 4
13134: PUSH
13135: LD_INT 2
13137: ARRAY
13138: ST_TO_ADDR
// if h + 7 < height then
13139: LD_VAR 0 13
13143: PUSH
13144: LD_INT 7
13146: PLUS
13147: PUSH
13148: LD_VAR 0 15
13152: LESS
13153: IFFALSE 13182
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13155: LD_ADDR_VAR 0 18
13159: PUSH
13160: LD_INT 7
13162: PUSH
13163: LD_INT 28
13165: PUSH
13166: LD_INT 45
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: LD_VAR 0 12
13178: ARRAY
13179: ST_TO_ADDR
// break ;
13180: GO 13184
// end ; end ; end ;
13182: GO 13013
13184: POP
13185: POP
// end ; if not weapon then
13186: LD_VAR 0 18
13190: NOT
13191: IFFALSE 13251
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13193: LD_ADDR_VAR 0 5
13197: PUSH
13198: LD_VAR 0 5
13202: PUSH
13203: LD_INT 11
13205: PUSH
13206: LD_INT 30
13208: PUSH
13209: LD_INT 49
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: DIFF
13217: ST_TO_ADDR
// if not list then
13218: LD_VAR 0 5
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13373
// weapon := list [ rand ( 1 , list ) ] ;
13227: LD_ADDR_VAR 0 18
13231: PUSH
13232: LD_VAR 0 5
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 5
13244: PPUSH
13245: CALL_OW 12
13249: ARRAY
13250: ST_TO_ADDR
// end ; if weapon then
13251: LD_VAR 0 18
13255: IFFALSE 13373
// begin tmp := CostOfWeapon ( weapon ) ;
13257: LD_ADDR_VAR 0 14
13261: PUSH
13262: LD_VAR 0 18
13266: PPUSH
13267: CALL_OW 451
13271: ST_TO_ADDR
// j := GetBase ( tower ) ;
13272: LD_ADDR_VAR 0 9
13276: PUSH
13277: LD_VAR 0 1
13281: PPUSH
13282: CALL_OW 274
13286: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13287: LD_VAR 0 9
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 275
13299: PUSH
13300: LD_VAR 0 14
13304: PUSH
13305: LD_INT 1
13307: ARRAY
13308: GREATEREQUAL
13309: IFFALSE 13335
13311: PUSH
13312: LD_VAR 0 9
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL_OW 275
13324: PUSH
13325: LD_VAR 0 14
13329: PUSH
13330: LD_INT 2
13332: ARRAY
13333: GREATEREQUAL
13334: AND
13335: IFFALSE 13361
13337: PUSH
13338: LD_VAR 0 9
13342: PPUSH
13343: LD_INT 3
13345: PPUSH
13346: CALL_OW 275
13350: PUSH
13351: LD_VAR 0 14
13355: PUSH
13356: LD_INT 3
13358: ARRAY
13359: GREATEREQUAL
13360: AND
13361: IFFALSE 13373
// result := weapon ;
13363: LD_ADDR_VAR 0 3
13367: PUSH
13368: LD_VAR 0 18
13372: ST_TO_ADDR
// end ; end ;
13373: LD_VAR 0 3
13377: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13378: LD_INT 0
13380: PPUSH
13381: PPUSH
// result := true ;
13382: LD_ADDR_VAR 0 3
13386: PUSH
13387: LD_INT 1
13389: ST_TO_ADDR
// if array1 = array2 then
13390: LD_VAR 0 1
13394: PUSH
13395: LD_VAR 0 2
13399: EQUAL
13400: IFFALSE 13460
// begin for i = 1 to array1 do
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_VAR 0 1
13416: PUSH
13417: FOR_TO
13418: IFFALSE 13456
// if array1 [ i ] <> array2 [ i ] then
13420: LD_VAR 0 1
13424: PUSH
13425: LD_VAR 0 4
13429: ARRAY
13430: PUSH
13431: LD_VAR 0 2
13435: PUSH
13436: LD_VAR 0 4
13440: ARRAY
13441: NONEQUAL
13442: IFFALSE 13454
// begin result := false ;
13444: LD_ADDR_VAR 0 3
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// break ;
13452: GO 13456
// end ;
13454: GO 13417
13456: POP
13457: POP
// end else
13458: GO 13468
// result := false ;
13460: LD_ADDR_VAR 0 3
13464: PUSH
13465: LD_INT 0
13467: ST_TO_ADDR
// end ;
13468: LD_VAR 0 3
13472: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
// if not array1 or not array2 then
13477: LD_VAR 0 1
13481: NOT
13482: IFTRUE 13491
13484: PUSH
13485: LD_VAR 0 2
13489: NOT
13490: OR
13491: IFFALSE 13495
// exit ;
13493: GO 13559
// result := true ;
13495: LD_ADDR_VAR 0 3
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// for i = 1 to array1 do
13503: LD_ADDR_VAR 0 4
13507: PUSH
13508: DOUBLE
13509: LD_INT 1
13511: DEC
13512: ST_TO_ADDR
13513: LD_VAR 0 1
13517: PUSH
13518: FOR_TO
13519: IFFALSE 13557
// if array1 [ i ] <> array2 [ i ] then
13521: LD_VAR 0 1
13525: PUSH
13526: LD_VAR 0 4
13530: ARRAY
13531: PUSH
13532: LD_VAR 0 2
13536: PUSH
13537: LD_VAR 0 4
13541: ARRAY
13542: NONEQUAL
13543: IFFALSE 13555
// begin result := false ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: LD_INT 0
13552: ST_TO_ADDR
// break ;
13553: GO 13557
// end ;
13555: GO 13518
13557: POP
13558: POP
// end ;
13559: LD_VAR 0 3
13563: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13564: LD_INT 0
13566: PPUSH
13567: PPUSH
13568: PPUSH
// pom := GetBase ( fac ) ;
13569: LD_ADDR_VAR 0 5
13573: PUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 274
13583: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13584: LD_ADDR_VAR 0 4
13588: PUSH
13589: LD_VAR 0 2
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 2
13605: ARRAY
13606: PPUSH
13607: LD_VAR 0 2
13611: PUSH
13612: LD_INT 3
13614: ARRAY
13615: PPUSH
13616: LD_VAR 0 2
13620: PUSH
13621: LD_INT 4
13623: ARRAY
13624: PPUSH
13625: CALL_OW 449
13629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: LD_VAR 0 5
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 275
13647: PUSH
13648: LD_VAR 0 4
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: GREATEREQUAL
13657: IFFALSE 13683
13659: PUSH
13660: LD_VAR 0 5
13664: PPUSH
13665: LD_INT 2
13667: PPUSH
13668: CALL_OW 275
13672: PUSH
13673: LD_VAR 0 4
13677: PUSH
13678: LD_INT 2
13680: ARRAY
13681: GREATEREQUAL
13682: AND
13683: IFFALSE 13709
13685: PUSH
13686: LD_VAR 0 5
13690: PPUSH
13691: LD_INT 3
13693: PPUSH
13694: CALL_OW 275
13698: PUSH
13699: LD_VAR 0 4
13703: PUSH
13704: LD_INT 3
13706: ARRAY
13707: GREATEREQUAL
13708: AND
13709: ST_TO_ADDR
// end ;
13710: LD_VAR 0 3
13714: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13715: LD_INT 0
13717: PPUSH
13718: PPUSH
13719: PPUSH
13720: PPUSH
// pom := GetBase ( building ) ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 274
13735: ST_TO_ADDR
// if not pom then
13736: LD_VAR 0 3
13740: NOT
13741: IFFALSE 13745
// exit ;
13743: GO 13919
// btype := GetBType ( building ) ;
13745: LD_ADDR_VAR 0 5
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 266
13759: ST_TO_ADDR
// if btype = b_armoury then
13760: LD_VAR 0 5
13764: PUSH
13765: LD_INT 4
13767: EQUAL
13768: IFFALSE 13778
// btype := b_barracks ;
13770: LD_ADDR_VAR 0 5
13774: PUSH
13775: LD_INT 5
13777: ST_TO_ADDR
// if btype = b_depot then
13778: LD_VAR 0 5
13782: PUSH
13783: LD_INT 0
13785: EQUAL
13786: IFFALSE 13796
// btype := b_warehouse ;
13788: LD_ADDR_VAR 0 5
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// if btype = b_workshop then
13796: LD_VAR 0 5
13800: PUSH
13801: LD_INT 2
13803: EQUAL
13804: IFFALSE 13814
// btype := b_factory ;
13806: LD_ADDR_VAR 0 5
13810: PUSH
13811: LD_INT 3
13813: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13814: LD_ADDR_VAR 0 4
13818: PUSH
13819: LD_VAR 0 5
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 248
13833: PPUSH
13834: CALL_OW 450
13838: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13839: LD_ADDR_VAR 0 2
13843: PUSH
13844: LD_VAR 0 3
13848: PPUSH
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 275
13856: PUSH
13857: LD_VAR 0 4
13861: PUSH
13862: LD_INT 1
13864: ARRAY
13865: GREATEREQUAL
13866: IFFALSE 13892
13868: PUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 2
13876: PPUSH
13877: CALL_OW 275
13881: PUSH
13882: LD_VAR 0 4
13886: PUSH
13887: LD_INT 2
13889: ARRAY
13890: GREATEREQUAL
13891: AND
13892: IFFALSE 13918
13894: PUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 3
13902: PPUSH
13903: CALL_OW 275
13907: PUSH
13908: LD_VAR 0 4
13912: PUSH
13913: LD_INT 3
13915: ARRAY
13916: GREATEREQUAL
13917: AND
13918: ST_TO_ADDR
// end ;
13919: LD_VAR 0 2
13923: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
13928: PPUSH
// pom := GetBase ( building ) ;
13929: LD_ADDR_VAR 0 4
13933: PUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 274
13943: ST_TO_ADDR
// if not pom then
13944: LD_VAR 0 4
13948: NOT
13949: IFFALSE 13953
// exit ;
13951: GO 14058
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13953: LD_ADDR_VAR 0 5
13957: PUSH
13958: LD_VAR 0 2
13962: PPUSH
13963: LD_VAR 0 1
13967: PPUSH
13968: CALL_OW 248
13972: PPUSH
13973: CALL_OW 450
13977: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13978: LD_ADDR_VAR 0 3
13982: PUSH
13983: LD_VAR 0 4
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: CALL_OW 275
13995: PUSH
13996: LD_VAR 0 5
14000: PUSH
14001: LD_INT 1
14003: ARRAY
14004: GREATEREQUAL
14005: IFFALSE 14031
14007: PUSH
14008: LD_VAR 0 4
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: CALL_OW 275
14020: PUSH
14021: LD_VAR 0 5
14025: PUSH
14026: LD_INT 2
14028: ARRAY
14029: GREATEREQUAL
14030: AND
14031: IFFALSE 14057
14033: PUSH
14034: LD_VAR 0 4
14038: PPUSH
14039: LD_INT 3
14041: PPUSH
14042: CALL_OW 275
14046: PUSH
14047: LD_VAR 0 5
14051: PUSH
14052: LD_INT 3
14054: ARRAY
14055: GREATEREQUAL
14056: AND
14057: ST_TO_ADDR
// end ;
14058: LD_VAR 0 3
14062: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14063: LD_INT 0
14065: PPUSH
14066: PPUSH
14067: PPUSH
14068: PPUSH
14069: PPUSH
14070: PPUSH
14071: PPUSH
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
// result := false ;
14076: LD_ADDR_VAR 0 8
14080: PUSH
14081: LD_INT 0
14083: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14084: LD_VAR 0 5
14088: NOT
14089: IFTRUE 14098
14091: PUSH
14092: LD_VAR 0 1
14096: NOT
14097: OR
14098: IFTRUE 14107
14100: PUSH
14101: LD_VAR 0 2
14105: NOT
14106: OR
14107: IFTRUE 14116
14109: PUSH
14110: LD_VAR 0 3
14114: NOT
14115: OR
14116: IFFALSE 14120
// exit ;
14118: GO 14946
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14120: LD_ADDR_VAR 0 14
14124: PUSH
14125: LD_VAR 0 1
14129: PPUSH
14130: LD_VAR 0 2
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_VAR 0 4
14144: PPUSH
14145: LD_VAR 0 5
14149: PUSH
14150: LD_INT 1
14152: ARRAY
14153: PPUSH
14154: CALL_OW 248
14158: PPUSH
14159: LD_INT 0
14161: PPUSH
14162: CALL 16227 0 6
14166: ST_TO_ADDR
// if not hexes then
14167: LD_VAR 0 14
14171: NOT
14172: IFFALSE 14176
// exit ;
14174: GO 14946
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14176: LD_ADDR_VAR 0 17
14180: PUSH
14181: LD_VAR 0 5
14185: PPUSH
14186: LD_INT 22
14188: PUSH
14189: LD_VAR 0 13
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 2
14205: PUSH
14206: LD_INT 30
14208: PUSH
14209: LD_INT 0
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 30
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 72
14239: ST_TO_ADDR
// for i = 1 to hexes do
14240: LD_ADDR_VAR 0 9
14244: PUSH
14245: DOUBLE
14246: LD_INT 1
14248: DEC
14249: ST_TO_ADDR
14250: LD_VAR 0 14
14254: PUSH
14255: FOR_TO
14256: IFFALSE 14944
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14258: LD_ADDR_VAR 0 13
14262: PUSH
14263: LD_VAR 0 14
14267: PUSH
14268: LD_VAR 0 9
14272: ARRAY
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: LD_VAR 0 14
14282: PUSH
14283: LD_VAR 0 9
14287: ARRAY
14288: PUSH
14289: LD_INT 2
14291: ARRAY
14292: PPUSH
14293: CALL_OW 428
14297: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14298: LD_VAR 0 14
14302: PUSH
14303: LD_VAR 0 9
14307: ARRAY
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 14
14317: PUSH
14318: LD_VAR 0 9
14322: ARRAY
14323: PUSH
14324: LD_INT 2
14326: ARRAY
14327: PPUSH
14328: CALL_OW 351
14332: IFTRUE 14371
14334: PUSH
14335: LD_VAR 0 14
14339: PUSH
14340: LD_VAR 0 9
14344: ARRAY
14345: PUSH
14346: LD_INT 1
14348: ARRAY
14349: PPUSH
14350: LD_VAR 0 14
14354: PUSH
14355: LD_VAR 0 9
14359: ARRAY
14360: PUSH
14361: LD_INT 2
14363: ARRAY
14364: PPUSH
14365: CALL_OW 488
14369: NOT
14370: OR
14371: IFTRUE 14388
14373: PUSH
14374: LD_VAR 0 13
14378: PPUSH
14379: CALL_OW 247
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: OR
14388: IFFALSE 14394
// exit ;
14390: POP
14391: POP
14392: GO 14946
// if not tmp then
14394: LD_VAR 0 13
14398: NOT
14399: IFFALSE 14403
// continue ;
14401: GO 14255
// result := true ;
14403: LD_ADDR_VAR 0 8
14407: PUSH
14408: LD_INT 1
14410: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14411: LD_VAR 0 6
14415: IFFALSE 14432
14417: PUSH
14418: LD_VAR 0 13
14422: PPUSH
14423: CALL_OW 247
14427: PUSH
14428: LD_INT 2
14430: EQUAL
14431: AND
14432: IFFALSE 14449
14434: PUSH
14435: LD_VAR 0 13
14439: PPUSH
14440: CALL_OW 263
14444: PUSH
14445: LD_INT 1
14447: EQUAL
14448: AND
14449: IFFALSE 14613
// begin if IsDrivenBy ( tmp ) then
14451: LD_VAR 0 13
14455: PPUSH
14456: CALL_OW 311
14460: IFFALSE 14464
// continue ;
14462: GO 14255
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14464: LD_VAR 0 6
14468: PPUSH
14469: LD_INT 3
14471: PUSH
14472: LD_INT 60
14474: PUSH
14475: EMPTY
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 3
14484: PUSH
14485: LD_INT 55
14487: PUSH
14488: EMPTY
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PPUSH
14499: CALL_OW 72
14503: IFFALSE 14611
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14505: LD_ADDR_VAR 0 18
14509: PUSH
14510: LD_VAR 0 6
14514: PPUSH
14515: LD_INT 3
14517: PUSH
14518: LD_INT 60
14520: PUSH
14521: EMPTY
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 3
14530: PUSH
14531: LD_INT 55
14533: PUSH
14534: EMPTY
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 72
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: ST_TO_ADDR
// if IsInUnit ( driver ) then
14554: LD_VAR 0 18
14558: PPUSH
14559: CALL_OW 310
14563: IFFALSE 14574
// ComExit ( driver ) ;
14565: LD_VAR 0 18
14569: PPUSH
14570: CALL 40227 0 1
// AddComEnterUnit ( driver , tmp ) ;
14574: LD_VAR 0 18
14578: PPUSH
14579: LD_VAR 0 13
14583: PPUSH
14584: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14588: LD_VAR 0 18
14592: PPUSH
14593: LD_VAR 0 7
14597: PPUSH
14598: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14602: LD_VAR 0 18
14606: PPUSH
14607: CALL_OW 181
// end ; continue ;
14611: GO 14255
// end ; if not cleaners or not tmp in cleaners then
14613: LD_VAR 0 6
14617: NOT
14618: IFTRUE 14633
14620: PUSH
14621: LD_VAR 0 13
14625: PUSH
14626: LD_VAR 0 6
14630: IN
14631: NOT
14632: OR
14633: IFFALSE 14942
// begin if dep then
14635: LD_VAR 0 17
14639: IFFALSE 14775
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14641: LD_ADDR_VAR 0 16
14645: PUSH
14646: LD_VAR 0 17
14650: PUSH
14651: LD_INT 1
14653: ARRAY
14654: PPUSH
14655: CALL_OW 250
14659: PPUSH
14660: LD_VAR 0 17
14664: PUSH
14665: LD_INT 1
14667: ARRAY
14668: PPUSH
14669: CALL_OW 254
14673: PPUSH
14674: LD_INT 5
14676: PPUSH
14677: CALL_OW 272
14681: PUSH
14682: LD_VAR 0 17
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: CALL_OW 251
14695: PPUSH
14696: LD_VAR 0 17
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: CALL_OW 254
14709: PPUSH
14710: LD_INT 5
14712: PPUSH
14713: CALL_OW 273
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14722: LD_VAR 0 16
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 16
14735: PUSH
14736: LD_INT 2
14738: ARRAY
14739: PPUSH
14740: CALL_OW 488
14744: IFFALSE 14775
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14746: LD_VAR 0 13
14750: PPUSH
14751: LD_VAR 0 16
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PPUSH
14760: LD_VAR 0 16
14764: PUSH
14765: LD_INT 2
14767: ARRAY
14768: PPUSH
14769: CALL_OW 111
// continue ;
14773: GO 14255
// end ; end ; r := GetDir ( tmp ) ;
14775: LD_ADDR_VAR 0 15
14779: PUSH
14780: LD_VAR 0 13
14784: PPUSH
14785: CALL_OW 254
14789: ST_TO_ADDR
// if r = 5 then
14790: LD_VAR 0 15
14794: PUSH
14795: LD_INT 5
14797: EQUAL
14798: IFFALSE 14808
// r := 0 ;
14800: LD_ADDR_VAR 0 15
14804: PUSH
14805: LD_INT 0
14807: ST_TO_ADDR
// for j = r to 5 do
14808: LD_ADDR_VAR 0 10
14812: PUSH
14813: DOUBLE
14814: LD_VAR 0 15
14818: DEC
14819: ST_TO_ADDR
14820: LD_INT 5
14822: PUSH
14823: FOR_TO
14824: IFFALSE 14940
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14826: LD_ADDR_VAR 0 11
14830: PUSH
14831: LD_VAR 0 13
14835: PPUSH
14836: CALL_OW 250
14840: PPUSH
14841: LD_VAR 0 10
14845: PPUSH
14846: LD_INT 2
14848: PPUSH
14849: CALL_OW 272
14853: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14854: LD_ADDR_VAR 0 12
14858: PUSH
14859: LD_VAR 0 13
14863: PPUSH
14864: CALL_OW 251
14868: PPUSH
14869: LD_VAR 0 10
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 273
14881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14882: LD_VAR 0 11
14886: PPUSH
14887: LD_VAR 0 12
14891: PPUSH
14892: CALL_OW 488
14896: IFFALSE 14915
14898: PUSH
14899: LD_VAR 0 11
14903: PPUSH
14904: LD_VAR 0 12
14908: PPUSH
14909: CALL_OW 428
14913: NOT
14914: AND
14915: IFFALSE 14938
// begin ComMoveXY ( tmp , _x , _y ) ;
14917: LD_VAR 0 13
14921: PPUSH
14922: LD_VAR 0 11
14926: PPUSH
14927: LD_VAR 0 12
14931: PPUSH
14932: CALL_OW 111
// break ;
14936: GO 14940
// end ; end ;
14938: GO 14823
14940: POP
14941: POP
// end ; end ;
14942: GO 14255
14944: POP
14945: POP
// end ;
14946: LD_VAR 0 8
14950: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14951: LD_INT 0
14953: PPUSH
// result := true ;
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14962: LD_VAR 0 2
14966: PUSH
14967: LD_INT 24
14969: DOUBLE
14970: EQUAL
14971: IFTRUE 14981
14973: LD_INT 33
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15006
14981: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_INT 32
14989: PPUSH
14990: LD_VAR 0 1
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: ST_TO_ADDR
15004: GO 15322
15006: LD_INT 20
15008: DOUBLE
15009: EQUAL
15010: IFTRUE 15014
15012: GO 15039
15014: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: LD_INT 6
15022: PPUSH
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 321
15032: PUSH
15033: LD_INT 2
15035: EQUAL
15036: ST_TO_ADDR
15037: GO 15322
15039: LD_INT 22
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15053
15045: LD_INT 36
15047: DOUBLE
15048: EQUAL
15049: IFTRUE 15053
15051: GO 15078
15053: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15054: LD_ADDR_VAR 0 3
15058: PUSH
15059: LD_INT 15
15061: PPUSH
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 321
15071: PUSH
15072: LD_INT 2
15074: EQUAL
15075: ST_TO_ADDR
15076: GO 15322
15078: LD_INT 30
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15111
15086: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15087: LD_ADDR_VAR 0 3
15091: PUSH
15092: LD_INT 20
15094: PPUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 321
15104: PUSH
15105: LD_INT 2
15107: EQUAL
15108: ST_TO_ADDR
15109: GO 15322
15111: LD_INT 28
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15125
15117: LD_INT 21
15119: DOUBLE
15120: EQUAL
15121: IFTRUE 15125
15123: GO 15150
15125: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_INT 21
15133: PPUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 321
15143: PUSH
15144: LD_INT 2
15146: EQUAL
15147: ST_TO_ADDR
15148: GO 15322
15150: LD_INT 16
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15183
15158: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15159: LD_ADDR_VAR 0 3
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 321
15176: PUSH
15177: LD_INT 2
15179: EQUAL
15180: ST_TO_ADDR
15181: GO 15322
15183: LD_INT 19
15185: DOUBLE
15186: EQUAL
15187: IFTRUE 15197
15189: LD_INT 23
15191: DOUBLE
15192: EQUAL
15193: IFTRUE 15197
15195: GO 15222
15197: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15198: LD_ADDR_VAR 0 3
15202: PUSH
15203: LD_INT 83
15205: PPUSH
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 321
15215: PUSH
15216: LD_INT 2
15218: EQUAL
15219: ST_TO_ADDR
15220: GO 15322
15222: LD_INT 17
15224: DOUBLE
15225: EQUAL
15226: IFTRUE 15230
15228: GO 15255
15230: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15231: LD_ADDR_VAR 0 3
15235: PUSH
15236: LD_INT 39
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 321
15248: PUSH
15249: LD_INT 2
15251: EQUAL
15252: ST_TO_ADDR
15253: GO 15322
15255: LD_INT 18
15257: DOUBLE
15258: EQUAL
15259: IFTRUE 15263
15261: GO 15288
15263: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: LD_INT 40
15271: PPUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 321
15281: PUSH
15282: LD_INT 2
15284: EQUAL
15285: ST_TO_ADDR
15286: GO 15322
15288: LD_INT 27
15290: DOUBLE
15291: EQUAL
15292: IFTRUE 15296
15294: GO 15321
15296: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15297: LD_ADDR_VAR 0 3
15301: PUSH
15302: LD_INT 35
15304: PPUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 321
15314: PUSH
15315: LD_INT 2
15317: EQUAL
15318: ST_TO_ADDR
15319: GO 15322
15321: POP
// end ;
15322: LD_VAR 0 3
15326: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
15332: PPUSH
15333: PPUSH
15334: PPUSH
15335: PPUSH
15336: PPUSH
15337: PPUSH
15338: PPUSH
15339: PPUSH
// result := false ;
15340: LD_ADDR_VAR 0 6
15344: PUSH
15345: LD_INT 0
15347: ST_TO_ADDR
// if btype = b_depot then
15348: LD_VAR 0 2
15352: PUSH
15353: LD_INT 0
15355: EQUAL
15356: IFFALSE 15368
// begin result := true ;
15358: LD_ADDR_VAR 0 6
15362: PUSH
15363: LD_INT 1
15365: ST_TO_ADDR
// exit ;
15366: GO 16222
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15368: LD_VAR 0 1
15372: NOT
15373: IFTRUE 15398
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 266
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: IN
15396: NOT
15397: OR
15398: IFTRUE 15407
15400: PUSH
15401: LD_VAR 0 2
15405: NOT
15406: OR
15407: IFTRUE 15443
15409: PUSH
15410: LD_VAR 0 5
15414: PUSH
15415: LD_INT 0
15417: PUSH
15418: LD_INT 1
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: LD_INT 3
15426: PUSH
15427: LD_INT 4
15429: PUSH
15430: LD_INT 5
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: IN
15441: NOT
15442: OR
15443: IFTRUE 15462
15445: PUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: LD_VAR 0 4
15455: PPUSH
15456: CALL_OW 488
15460: NOT
15461: OR
15462: IFFALSE 15466
// exit ;
15464: GO 16222
// side := GetSide ( depot ) ;
15466: LD_ADDR_VAR 0 9
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 255
15480: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15481: LD_VAR 0 9
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: CALL 14951 0 2
15495: NOT
15496: IFFALSE 15500
// exit ;
15498: GO 16222
// pom := GetBase ( depot ) ;
15500: LD_ADDR_VAR 0 10
15504: PUSH
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 274
15514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15515: LD_ADDR_VAR 0 11
15519: PUSH
15520: LD_VAR 0 2
15524: PPUSH
15525: LD_VAR 0 1
15529: PPUSH
15530: CALL_OW 248
15534: PPUSH
15535: CALL_OW 450
15539: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15540: LD_VAR 0 10
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 275
15552: PUSH
15553: LD_VAR 0 11
15557: PUSH
15558: LD_INT 1
15560: ARRAY
15561: GREATEREQUAL
15562: IFFALSE 15588
15564: PUSH
15565: LD_VAR 0 10
15569: PPUSH
15570: LD_INT 2
15572: PPUSH
15573: CALL_OW 275
15577: PUSH
15578: LD_VAR 0 11
15582: PUSH
15583: LD_INT 2
15585: ARRAY
15586: GREATEREQUAL
15587: AND
15588: IFFALSE 15614
15590: PUSH
15591: LD_VAR 0 10
15595: PPUSH
15596: LD_INT 3
15598: PPUSH
15599: CALL_OW 275
15603: PUSH
15604: LD_VAR 0 11
15608: PUSH
15609: LD_INT 3
15611: ARRAY
15612: GREATEREQUAL
15613: AND
15614: NOT
15615: IFFALSE 15619
// exit ;
15617: GO 16222
// if GetBType ( depot ) = b_depot then
15619: LD_VAR 0 1
15623: PPUSH
15624: CALL_OW 266
15628: PUSH
15629: LD_INT 0
15631: EQUAL
15632: IFFALSE 15644
// dist := 28 else
15634: LD_ADDR_VAR 0 14
15638: PUSH
15639: LD_INT 28
15641: ST_TO_ADDR
15642: GO 15652
// dist := 36 ;
15644: LD_ADDR_VAR 0 14
15648: PUSH
15649: LD_INT 36
15651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_VAR 0 4
15666: PPUSH
15667: CALL_OW 297
15671: PUSH
15672: LD_VAR 0 14
15676: GREATER
15677: IFFALSE 15681
// exit ;
15679: GO 16222
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15681: LD_ADDR_VAR 0 12
15685: PUSH
15686: LD_VAR 0 2
15690: PPUSH
15691: LD_VAR 0 3
15695: PPUSH
15696: LD_VAR 0 4
15700: PPUSH
15701: LD_VAR 0 5
15705: PPUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 248
15715: PPUSH
15716: LD_INT 0
15718: PPUSH
15719: CALL 16227 0 6
15723: ST_TO_ADDR
// if not hexes then
15724: LD_VAR 0 12
15728: NOT
15729: IFFALSE 15733
// exit ;
15731: GO 16222
// hex := GetHexInfo ( x , y ) ;
15733: LD_ADDR_VAR 0 15
15737: PUSH
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_VAR 0 4
15747: PPUSH
15748: CALL_OW 546
15752: ST_TO_ADDR
// if hex [ 1 ] then
15753: LD_VAR 0 15
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: IFFALSE 15765
// exit ;
15763: GO 16222
// height := hex [ 2 ] ;
15765: LD_ADDR_VAR 0 13
15769: PUSH
15770: LD_VAR 0 15
15774: PUSH
15775: LD_INT 2
15777: ARRAY
15778: ST_TO_ADDR
// for i = 1 to hexes do
15779: LD_ADDR_VAR 0 7
15783: PUSH
15784: DOUBLE
15785: LD_INT 1
15787: DEC
15788: ST_TO_ADDR
15789: LD_VAR 0 12
15793: PUSH
15794: FOR_TO
15795: IFFALSE 16139
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15797: LD_VAR 0 12
15801: PUSH
15802: LD_VAR 0 7
15806: ARRAY
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_VAR 0 12
15816: PUSH
15817: LD_VAR 0 7
15821: ARRAY
15822: PUSH
15823: LD_INT 2
15825: ARRAY
15826: PPUSH
15827: CALL_OW 488
15831: NOT
15832: IFTRUE 15874
15834: PUSH
15835: LD_VAR 0 12
15839: PUSH
15840: LD_VAR 0 7
15844: ARRAY
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: LD_VAR 0 12
15854: PUSH
15855: LD_VAR 0 7
15859: ARRAY
15860: PUSH
15861: LD_INT 2
15863: ARRAY
15864: PPUSH
15865: CALL_OW 428
15869: PUSH
15870: LD_INT 0
15872: GREATER
15873: OR
15874: IFTRUE 15912
15876: PUSH
15877: LD_VAR 0 12
15881: PUSH
15882: LD_VAR 0 7
15886: ARRAY
15887: PUSH
15888: LD_INT 1
15890: ARRAY
15891: PPUSH
15892: LD_VAR 0 12
15896: PUSH
15897: LD_VAR 0 7
15901: ARRAY
15902: PUSH
15903: LD_INT 2
15905: ARRAY
15906: PPUSH
15907: CALL_OW 351
15911: OR
15912: IFFALSE 15918
// exit ;
15914: POP
15915: POP
15916: GO 16222
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15918: LD_ADDR_VAR 0 8
15922: PUSH
15923: LD_VAR 0 12
15927: PUSH
15928: LD_VAR 0 7
15932: ARRAY
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: LD_VAR 0 12
15942: PUSH
15943: LD_VAR 0 7
15947: ARRAY
15948: PUSH
15949: LD_INT 2
15951: ARRAY
15952: PPUSH
15953: CALL_OW 546
15957: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15958: LD_VAR 0 8
15962: PUSH
15963: LD_INT 1
15965: ARRAY
15966: IFTRUE 15988
15968: PUSH
15969: LD_VAR 0 8
15973: PUSH
15974: LD_INT 2
15976: ARRAY
15977: PUSH
15978: LD_VAR 0 13
15982: PUSH
15983: LD_INT 2
15985: PLUS
15986: GREATER
15987: OR
15988: IFTRUE 16010
15990: PUSH
15991: LD_VAR 0 8
15995: PUSH
15996: LD_INT 2
15998: ARRAY
15999: PUSH
16000: LD_VAR 0 13
16004: PUSH
16005: LD_INT 2
16007: MINUS
16008: LESS
16009: OR
16010: IFTRUE 16078
16012: PUSH
16013: LD_VAR 0 8
16017: PUSH
16018: LD_INT 3
16020: ARRAY
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: LD_INT 8
16027: PUSH
16028: LD_INT 9
16030: PUSH
16031: LD_INT 10
16033: PUSH
16034: LD_INT 11
16036: PUSH
16037: LD_INT 12
16039: PUSH
16040: LD_INT 13
16042: PUSH
16043: LD_INT 16
16045: PUSH
16046: LD_INT 17
16048: PUSH
16049: LD_INT 18
16051: PUSH
16052: LD_INT 19
16054: PUSH
16055: LD_INT 20
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: IN
16076: NOT
16077: OR
16078: IFTRUE 16091
16080: PUSH
16081: LD_VAR 0 8
16085: PUSH
16086: LD_INT 5
16088: ARRAY
16089: NOT
16090: OR
16091: IFTRUE 16131
16093: PUSH
16094: LD_VAR 0 8
16098: PUSH
16099: LD_INT 6
16101: ARRAY
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: LD_INT 7
16111: PUSH
16112: LD_INT 9
16114: PUSH
16115: LD_INT 10
16117: PUSH
16118: LD_INT 11
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: IN
16129: NOT
16130: OR
16131: IFFALSE 16137
// exit ;
16133: POP
16134: POP
16135: GO 16222
// end ;
16137: GO 15794
16139: POP
16140: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16141: LD_VAR 0 9
16145: PPUSH
16146: LD_VAR 0 3
16150: PPUSH
16151: LD_VAR 0 4
16155: PPUSH
16156: LD_INT 20
16158: PPUSH
16159: CALL 8041 0 4
16163: PUSH
16164: LD_INT 4
16166: ARRAY
16167: IFFALSE 16171
// exit ;
16169: GO 16222
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16171: LD_VAR 0 2
16175: PUSH
16176: LD_INT 29
16178: PUSH
16179: LD_INT 30
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: IN
16186: IFFALSE 16210
16188: PUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_VAR 0 4
16198: PPUSH
16199: LD_VAR 0 9
16203: PPUSH
16204: CALL_OW 440
16208: NOT
16209: AND
16210: IFFALSE 16214
// exit ;
16212: GO 16222
// result := true ;
16214: LD_ADDR_VAR 0 6
16218: PUSH
16219: LD_INT 1
16221: ST_TO_ADDR
// end ;
16222: LD_VAR 0 6
16226: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16227: LD_INT 0
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
16237: PPUSH
16238: PPUSH
16239: PPUSH
16240: PPUSH
16241: PPUSH
16242: PPUSH
16243: PPUSH
16244: PPUSH
16245: PPUSH
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
16258: PPUSH
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
16263: PPUSH
16264: PPUSH
16265: PPUSH
16266: PPUSH
16267: PPUSH
16268: PPUSH
16269: PPUSH
16270: PPUSH
16271: PPUSH
16272: PPUSH
16273: PPUSH
16274: PPUSH
16275: PPUSH
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
// result = [ ] ;
16287: LD_ADDR_VAR 0 7
16291: PUSH
16292: EMPTY
16293: ST_TO_ADDR
// temp_list = [ ] ;
16294: LD_ADDR_VAR 0 9
16298: PUSH
16299: EMPTY
16300: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16301: LD_VAR 0 4
16305: PUSH
16306: LD_INT 0
16308: PUSH
16309: LD_INT 1
16311: PUSH
16312: LD_INT 2
16314: PUSH
16315: LD_INT 3
16317: PUSH
16318: LD_INT 4
16320: PUSH
16321: LD_INT 5
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: IN
16332: NOT
16333: IFTRUE 16376
16335: PUSH
16336: LD_VAR 0 1
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: IN
16351: IFFALSE 16375
16353: PUSH
16354: LD_VAR 0 5
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: IN
16373: NOT
16374: AND
16375: OR
16376: IFFALSE 16380
// exit ;
16378: GO 34779
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 6
16387: PUSH
16388: LD_INT 7
16390: PUSH
16391: LD_INT 8
16393: PUSH
16394: LD_INT 13
16396: PUSH
16397: LD_INT 12
16399: PUSH
16400: LD_INT 15
16402: PUSH
16403: LD_INT 11
16405: PUSH
16406: LD_INT 14
16408: PUSH
16409: LD_INT 10
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: IN
16423: IFFALSE 16433
// btype = b_lab ;
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_INT 6
16432: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16433: LD_VAR 0 6
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: LD_INT 2
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: IN
16452: NOT
16453: IFTRUE 16521
16455: PUSH
16456: LD_VAR 0 1
16460: PUSH
16461: LD_INT 0
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 3
16472: PUSH
16473: LD_INT 6
16475: PUSH
16476: LD_INT 36
16478: PUSH
16479: LD_INT 4
16481: PUSH
16482: LD_INT 5
16484: PUSH
16485: LD_INT 31
16487: PUSH
16488: LD_INT 32
16490: PUSH
16491: LD_INT 33
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: IN
16507: NOT
16508: IFFALSE 16520
16510: PUSH
16511: LD_VAR 0 6
16515: PUSH
16516: LD_INT 1
16518: EQUAL
16519: AND
16520: OR
16521: IFTRUE 16553
16523: PUSH
16524: LD_VAR 0 1
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: LD_INT 3
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: IN
16539: NOT
16540: IFFALSE 16552
16542: PUSH
16543: LD_VAR 0 6
16547: PUSH
16548: LD_INT 2
16550: EQUAL
16551: AND
16552: OR
16553: IFFALSE 16563
// mode = 0 ;
16555: LD_ADDR_VAR 0 6
16559: PUSH
16560: LD_INT 0
16562: ST_TO_ADDR
// case mode of 0 :
16563: LD_VAR 0 6
16567: PUSH
16568: LD_INT 0
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 28029
16576: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16577: LD_ADDR_VAR 0 11
16581: PUSH
16582: LD_INT 0
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 0
16594: PUSH
16595: LD_INT 1
16597: NEG
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 0
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 1
16635: NEG
16636: PUSH
16637: LD_INT 0
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 1
16646: NEG
16647: PUSH
16648: LD_INT 1
16650: NEG
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: NEG
16659: PUSH
16660: LD_INT 2
16662: NEG
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: LD_INT 2
16673: NEG
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 1
16681: PUSH
16682: LD_INT 1
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: LD_INT 2
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 1
16712: NEG
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: LD_INT 3
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 1
16743: NEG
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16770: LD_ADDR_VAR 0 12
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 0
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PUSH
16841: LD_INT 1
16843: NEG
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: LD_INT 1
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: LD_INT 1
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 1
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: LD_INT 1
16908: NEG
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: NEG
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 3
16927: NEG
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 3
16938: NEG
16939: PUSH
16940: LD_INT 1
16942: NEG
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16966: LD_ADDR_VAR 0 13
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: LD_INT 1
16986: NEG
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 1
17024: NEG
17025: PUSH
17026: LD_INT 0
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 1
17035: NEG
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: LD_INT 2
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: LD_INT 2
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: NEG
17090: PUSH
17091: LD_INT 1
17093: NEG
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: NEG
17102: PUSH
17103: LD_INT 2
17105: NEG
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 2
17113: NEG
17114: PUSH
17115: LD_INT 3
17117: NEG
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 3
17125: NEG
17126: PUSH
17127: LD_INT 2
17129: NEG
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 3
17137: NEG
17138: PUSH
17139: LD_INT 3
17141: NEG
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17165: LD_ADDR_VAR 0 14
17169: PUSH
17170: LD_INT 0
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: PUSH
17225: LD_INT 0
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: LD_INT 1
17238: NEG
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 1
17246: NEG
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: LD_INT 3
17315: NEG
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: LD_INT 3
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 2
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17361: LD_ADDR_VAR 0 15
17365: PUSH
17366: LD_INT 0
17368: PUSH
17369: LD_INT 0
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 0
17378: PUSH
17379: LD_INT 1
17381: NEG
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 1
17430: NEG
17431: PUSH
17432: LD_INT 1
17434: NEG
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 2
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 2
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: NEG
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 2
17484: NEG
17485: PUSH
17486: LD_INT 0
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 2
17495: NEG
17496: PUSH
17497: LD_INT 1
17499: NEG
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 2
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 3
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17554: LD_ADDR_VAR 0 16
17558: PUSH
17559: LD_INT 0
17561: PUSH
17562: LD_INT 0
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: LD_INT 1
17574: NEG
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 1
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 0
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: NEG
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 1
17623: NEG
17624: PUSH
17625: LD_INT 1
17627: NEG
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: LD_INT 2
17639: NEG
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 2
17677: NEG
17678: PUSH
17679: LD_INT 1
17681: NEG
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 2
17689: NEG
17690: PUSH
17691: LD_INT 2
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 3
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: LD_INT 3
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17747: LD_ADDR_VAR 0 17
17751: PUSH
17752: LD_INT 0
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: LD_INT 1
17767: NEG
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: NEG
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: NEG
17829: PUSH
17830: LD_INT 2
17832: NEG
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: LD_INT 2
17843: NEG
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: LD_INT 1
17854: NEG
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 2
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: NEG
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 2
17934: NEG
17935: PUSH
17936: LD_INT 1
17938: NEG
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: NEG
17947: PUSH
17948: LD_INT 2
17950: NEG
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17977: LD_ADDR_VAR 0 18
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 1
18058: NEG
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: LD_INT 2
18073: NEG
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 2
18102: PUSH
18103: LD_INT 1
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 2
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: LD_INT 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 0
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 2
18153: NEG
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 2
18164: NEG
18165: PUSH
18166: LD_INT 1
18168: NEG
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 2
18176: NEG
18177: PUSH
18178: LD_INT 2
18180: NEG
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18207: LD_ADDR_VAR 0 19
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 1
18227: NEG
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 1
18265: NEG
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: LD_INT 2
18292: NEG
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: LD_INT 2
18303: NEG
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 2
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 2
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 2
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 1
18372: NEG
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: NEG
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: LD_INT 2
18410: NEG
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18437: LD_ADDR_VAR 0 20
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 0
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: LD_INT 1
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 1
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: NEG
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: LD_INT 2
18522: NEG
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: LD_INT 1
18544: NEG
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: NEG
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 2
18613: NEG
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 2
18624: NEG
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 2
18636: NEG
18637: PUSH
18638: LD_INT 2
18640: NEG
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18667: LD_ADDR_VAR 0 21
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 1
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 2
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: LD_INT 2
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 2
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 2
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 0
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: NEG
18867: PUSH
18868: LD_INT 2
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18897: LD_ADDR_VAR 0 22
18901: PUSH
18902: LD_INT 0
18904: PUSH
18905: LD_INT 0
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 1
18917: NEG
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: NEG
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: NEG
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: LD_INT 2
18982: NEG
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: LD_INT 2
18993: NEG
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: LD_INT 1
19004: NEG
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: NEG
19085: PUSH
19086: LD_INT 1
19088: NEG
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 2
19096: NEG
19097: PUSH
19098: LD_INT 2
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19127: LD_ADDR_VAR 0 23
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: NEG
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 2
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: NEG
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: NEG
19339: PUSH
19340: LD_INT 3
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: LD_INT 3
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: LD_INT 2
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: LD_INT 1
19376: NEG
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19407: LD_ADDR_VAR 0 24
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: LD_INT 0
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: LD_INT 2
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 2
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 2
19606: NEG
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 3
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19683: LD_ADDR_VAR 0 25
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 3
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 3
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 3
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: PUSH
19925: LD_INT 3
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19957: LD_ADDR_VAR 0 26
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: LD_INT 1
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: LD_INT 0
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: NEG
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: LD_INT 2
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: LD_INT 2
20053: NEG
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 1
20064: NEG
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: NEG
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: NEG
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 2
20144: NEG
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: NEG
20157: PUSH
20158: LD_INT 2
20160: NEG
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 3
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 3
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 2
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20233: LD_ADDR_VAR 0 27
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: LD_INT 2
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 0
20326: PUSH
20327: LD_INT 2
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 0
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 2
20409: NEG
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: NEG
20421: PUSH
20422: LD_INT 1
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 2
20432: NEG
20433: PUSH
20434: LD_INT 2
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 3
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 3
20478: NEG
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20513: LD_ADDR_VAR 0 28
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: LD_INT 1
20533: NEG
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 0
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: LD_INT 2
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 1
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: NEG
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 2
20712: NEG
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: NEG
20725: PUSH
20726: LD_INT 3
20728: NEG
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: LD_INT 3
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 3
20748: NEG
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 3
20760: NEG
20761: PUSH
20762: LD_INT 2
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20795: LD_ADDR_VAR 0 29
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 1
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: LD_INT 2
20880: NEG
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: LD_INT 2
20891: NEG
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 0
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: NEG
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: LD_INT 1
20965: NEG
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 2
20973: NEG
20974: PUSH
20975: LD_INT 2
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: NEG
20986: PUSH
20987: LD_INT 3
20989: NEG
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 1
21000: NEG
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 3
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: LD_INT 3
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 3
21039: NEG
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21074: LD_ADDR_VAR 0 30
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 0
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: LD_INT 2
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: LD_INT 2
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: NEG
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: LD_INT 3
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: NEG
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 3
21317: NEG
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21352: LD_ADDR_VAR 0 31
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 2
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: NEG
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 3
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 3
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 3
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 3
21595: NEG
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21630: LD_ADDR_VAR 0 32
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: LD_INT 1
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 0
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: NEG
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: LD_INT 2
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: LD_INT 2
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: NEG
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: LD_INT 3
21823: NEG
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: LD_INT 2
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 3
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 3
21873: NEG
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21908: LD_ADDR_VAR 0 33
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 2
22063: NEG
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: NEG
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: LD_INT 3
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 1
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 3
22152: NEG
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22187: LD_ADDR_VAR 0 34
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 0
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 2
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: NEG
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 2
22366: NEG
22367: PUSH
22368: LD_INT 2
22370: NEG
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 3
22382: NEG
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: PUSH
22391: LD_INT 2
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: LD_INT 3
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 3
22432: NEG
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22467: LD_ADDR_VAR 0 35
22471: PUSH
22472: LD_INT 0
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 1
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 1
22536: NEG
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22579: LD_ADDR_VAR 0 36
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 2
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22691: LD_ADDR_VAR 0 37
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: LD_INT 1
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22803: LD_ADDR_VAR 0 38
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: NEG
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22915: LD_ADDR_VAR 0 39
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: LD_INT 2
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23027: LD_ADDR_VAR 0 40
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23139: LD_ADDR_VAR 0 41
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 1
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: NEG
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 3
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 3
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 3
23382: PUSH
23383: LD_INT 3
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 3
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 3
23413: NEG
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 3
23424: NEG
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 3
23436: NEG
23437: PUSH
23438: LD_INT 2
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: LD_INT 3
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23489: LD_ADDR_VAR 0 42
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: LD_INT 2
23585: NEG
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 2
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: NEG
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 2
23655: NEG
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: LD_INT 2
23671: NEG
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: LD_INT 3
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 3
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 3
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 2
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 3
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 3
23735: PUSH
23736: LD_INT 3
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: LD_INT 3
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 3
23786: NEG
23787: PUSH
23788: LD_INT 2
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 3
23798: NEG
23799: PUSH
23800: LD_INT 3
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23839: LD_ADDR_VAR 0 43
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: LD_INT 2
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 2
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 0
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: NEG
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 2
24016: NEG
24017: PUSH
24018: LD_INT 1
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: NEG
24029: PUSH
24030: LD_INT 3
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 3
24043: NEG
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 2
24054: NEG
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 3
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: LD_INT 3
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: NEG
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 3
24135: NEG
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 3
24146: NEG
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24187: LD_ADDR_VAR 0 44
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: NEG
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: LD_INT 2
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: NEG
24378: PUSH
24379: LD_INT 3
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 3
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 3
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 2
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: LD_INT 3
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: LD_INT 3
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: NEG
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 3
24461: NEG
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 3
24472: NEG
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 3
24484: NEG
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 3
24496: NEG
24497: PUSH
24498: LD_INT 3
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24537: LD_ADDR_VAR 0 45
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: NEG
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: NEG
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 2
24715: NEG
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 2
24727: NEG
24728: PUSH
24729: LD_INT 3
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 3
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 3
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 2
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 3
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 3
24834: NEG
24835: PUSH
24836: LD_INT 2
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 3
24846: NEG
24847: PUSH
24848: LD_INT 3
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24887: LD_ADDR_VAR 0 46
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: LD_INT 2
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: LD_INT 2
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 2
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 3
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: LD_INT 3
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: LD_INT 3
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 2
25172: NEG
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 3
25183: NEG
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 3
25194: NEG
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25235: LD_ADDR_VAR 0 47
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: LD_INT 2
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: LD_INT 2
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 2
25350: NEG
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: NEG
25363: PUSH
25364: LD_INT 2
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25386: LD_ADDR_VAR 0 48
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 2
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25533: LD_ADDR_VAR 0 49
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25677: LD_ADDR_VAR 0 50
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25821: LD_ADDR_VAR 0 51
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 2
25933: NEG
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25968: LD_ADDR_VAR 0 52
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: NEG
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26119: LD_ADDR_VAR 0 53
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: LD_INT 2
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: NEG
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26349: LD_ADDR_VAR 0 54
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: LD_INT 2
26552: NEG
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26579: LD_ADDR_VAR 0 55
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: NEG
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26809: LD_ADDR_VAR 0 56
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 2
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: NEG
27009: PUSH
27010: LD_INT 2
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27039: LD_ADDR_VAR 0 57
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 2
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: NEG
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27269: LD_ADDR_VAR 0 58
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: NEG
27469: PUSH
27470: LD_INT 2
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27499: LD_ADDR_VAR 0 59
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27587: LD_ADDR_VAR 0 60
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27675: LD_ADDR_VAR 0 61
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27763: LD_ADDR_VAR 0 62
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27851: LD_ADDR_VAR 0 63
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27939: LD_ADDR_VAR 0 64
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 0
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: ST_TO_ADDR
// end ; 1 :
28027: GO 33924
28029: LD_INT 1
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 30660
28037: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28038: LD_ADDR_VAR 0 11
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: LD_INT 3
28060: NEG
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: LD_INT 2
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28082: LD_ADDR_VAR 0 12
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 3
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 3
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28123: LD_ADDR_VAR 0 13
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: LD_INT 3
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28163: LD_ADDR_VAR 0 14
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28204: LD_ADDR_VAR 0 15
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 3
28222: NEG
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 3
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28248: LD_ADDR_VAR 0 16
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 3
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: NEG
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 3
28279: NEG
28280: PUSH
28281: LD_INT 3
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28294: LD_ADDR_VAR 0 17
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: LD_INT 3
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 3
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 2
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28338: LD_ADDR_VAR 0 18
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28379: LD_ADDR_VAR 0 19
28383: PUSH
28384: LD_INT 3
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 3
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: LIST
28418: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28419: LD_ADDR_VAR 0 20
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28460: LD_ADDR_VAR 0 21
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 3
28478: NEG
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 3
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28504: LD_ADDR_VAR 0 22
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 3
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 3
28523: NEG
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 3
28535: NEG
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28550: LD_ADDR_VAR 0 23
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 3
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: LD_INT 4
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 3
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28594: LD_ADDR_VAR 0 24
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 4
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28635: LD_ADDR_VAR 0 25
28639: PUSH
28640: LD_INT 3
28642: PUSH
28643: LD_INT 3
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 4
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: LD_INT 4
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28675: LD_ADDR_VAR 0 26
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: LD_INT 3
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28716: LD_ADDR_VAR 0 27
28720: PUSH
28721: LD_INT 3
28723: NEG
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 3
28734: NEG
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 4
28745: NEG
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28760: LD_ADDR_VAR 0 28
28764: PUSH
28765: LD_INT 3
28767: NEG
28768: PUSH
28769: LD_INT 3
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 3
28779: NEG
28780: PUSH
28781: LD_INT 4
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 4
28791: NEG
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28806: LD_ADDR_VAR 0 29
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 3
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: LD_INT 3
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 2
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 4
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 4
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 3
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: LD_INT 5
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 5
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: LD_INT 4
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 6
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 6
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: LD_INT 5
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28961: LD_ADDR_VAR 0 30
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 4
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 4
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 4
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 5
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 5
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 5
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 6
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 6
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29104: LD_ADDR_VAR 0 31
29108: PUSH
29109: LD_INT 3
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 4
29141: PUSH
29142: LD_INT 3
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 4
29151: PUSH
29152: LD_INT 4
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 4
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 5
29171: PUSH
29172: LD_INT 4
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 5
29181: PUSH
29182: LD_INT 5
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 4
29191: PUSH
29192: LD_INT 5
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 6
29201: PUSH
29202: LD_INT 5
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 6
29211: PUSH
29212: LD_INT 6
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 5
29221: PUSH
29222: LD_INT 6
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29243: LD_ADDR_VAR 0 32
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: LD_INT 4
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: LD_INT 4
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: LD_INT 5
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 5
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: LD_INT 4
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 6
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 6
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 5
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29386: LD_ADDR_VAR 0 33
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 3
29404: NEG
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: NEG
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 4
29438: NEG
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 4
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 4
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 5
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 5
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 5
29495: NEG
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 6
29506: NEG
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 6
29517: NEG
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29541: LD_ADDR_VAR 0 34
29545: PUSH
29546: LD_INT 2
29548: NEG
29549: PUSH
29550: LD_INT 3
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 3
29560: NEG
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 3
29572: NEG
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: LD_INT 4
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 4
29596: NEG
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 4
29608: NEG
29609: PUSH
29610: LD_INT 4
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 4
29620: NEG
29621: PUSH
29622: LD_INT 5
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 5
29632: NEG
29633: PUSH
29634: LD_INT 4
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 5
29644: NEG
29645: PUSH
29646: LD_INT 5
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 5
29656: NEG
29657: PUSH
29658: LD_INT 6
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 6
29668: NEG
29669: PUSH
29670: LD_INT 5
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 6
29680: NEG
29681: PUSH
29682: LD_INT 6
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29704: LD_ADDR_VAR 0 41
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 2
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29748: LD_ADDR_VAR 0 42
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29789: LD_ADDR_VAR 0 43
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29829: LD_ADDR_VAR 0 44
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29870: LD_ADDR_VAR 0 45
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 3
29899: NEG
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29914: LD_ADDR_VAR 0 46
29918: PUSH
29919: LD_INT 2
29921: NEG
29922: PUSH
29923: LD_INT 2
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: LD_INT 3
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: NEG
29946: PUSH
29947: LD_INT 2
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29960: LD_ADDR_VAR 0 47
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: LD_INT 3
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29993: LD_ADDR_VAR 0 48
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30024: LD_ADDR_VAR 0 49
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 3
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30053: LD_ADDR_VAR 0 50
30057: PUSH
30058: LD_INT 2
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30082: LD_ADDR_VAR 0 51
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30113: LD_ADDR_VAR 0 52
30117: PUSH
30118: LD_INT 3
30120: NEG
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 3
30132: NEG
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30146: LD_ADDR_VAR 0 53
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 2
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30190: LD_ADDR_VAR 0 54
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30231: LD_ADDR_VAR 0 55
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30271: LD_ADDR_VAR 0 56
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30312: LD_ADDR_VAR 0 57
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 3
30330: NEG
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30356: LD_ADDR_VAR 0 58
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: LD_INT 3
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 3
30375: NEG
30376: PUSH
30377: LD_INT 2
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: LD_INT 3
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30402: LD_ADDR_VAR 0 59
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30446: LD_ADDR_VAR 0 60
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30487: LD_ADDR_VAR 0 61
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30527: LD_ADDR_VAR 0 62
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30568: LD_ADDR_VAR 0 63
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30612: LD_ADDR_VAR 0 64
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 2
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 2
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// end ; 2 :
30658: GO 33924
30660: LD_INT 2
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 33923
30668: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30669: LD_ADDR_VAR 0 29
30673: PUSH
30674: LD_INT 4
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 4
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 5
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 5
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 5
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 4
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 4
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 3
30809: PUSH
30810: LD_INT 4
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 4
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: LD_INT 4
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: LD_INT 4
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: LD_INT 4
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 5
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 5
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: LD_INT 4
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 3
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 3
30952: NEG
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 4
31008: NEG
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 4
31031: NEG
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 4
31054: NEG
31055: PUSH
31056: LD_INT 4
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 4
31066: NEG
31067: PUSH
31068: LD_INT 5
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: LD_INT 4
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 3
31090: NEG
31091: PUSH
31092: LD_INT 3
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 4
31102: NEG
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 5
31114: NEG
31115: PUSH
31116: LD_INT 4
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 5
31126: NEG
31127: PUSH
31128: LD_INT 5
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 3
31138: NEG
31139: PUSH
31140: LD_INT 5
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 5
31150: NEG
31151: PUSH
31152: LD_INT 3
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31207: LD_ADDR_VAR 0 30
31211: PUSH
31212: LD_INT 4
31214: PUSH
31215: LD_INT 4
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 4
31224: PUSH
31225: LD_INT 3
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 5
31234: PUSH
31235: LD_INT 4
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 5
31244: PUSH
31245: LD_INT 5
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 4
31254: PUSH
31255: LD_INT 5
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 4
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 5
31284: PUSH
31285: LD_INT 3
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 5
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 3
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 4
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: NEG
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 2
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 4
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 4
31397: NEG
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 4
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 4
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 5
31453: NEG
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 5
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 5
31476: NEG
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 3
31499: NEG
31500: PUSH
31501: LD_INT 3
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: LD_INT 4
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: NEG
31524: PUSH
31525: LD_INT 3
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 2
31535: NEG
31536: PUSH
31537: LD_INT 2
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 3
31547: NEG
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 4
31559: NEG
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 4
31571: NEG
31572: PUSH
31573: LD_INT 4
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: LD_INT 4
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 4
31595: NEG
31596: PUSH
31597: LD_INT 2
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: LD_INT 4
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: LD_INT 5
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 3
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 3
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: LD_INT 4
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 5
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: LD_INT 5
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31754: LD_ADDR_VAR 0 31
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 4
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 5
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 5
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: LD_INT 3
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 3
31854: NEG
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 4
31910: NEG
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 4
31921: NEG
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 4
31933: NEG
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 4
31956: NEG
31957: PUSH
31958: LD_INT 4
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: LD_INT 5
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 3
31980: NEG
31981: PUSH
31982: LD_INT 4
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: LD_INT 3
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 4
32004: NEG
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 5
32016: NEG
32017: PUSH
32018: LD_INT 4
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 5
32028: NEG
32029: PUSH
32030: LD_INT 5
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: NEG
32041: PUSH
32042: LD_INT 5
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 5
32052: NEG
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 3
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 4
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 4
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: LD_INT 4
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 4
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 5
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 5
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 4
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 3
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 5
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32304: LD_ADDR_VAR 0 32
32308: PUSH
32309: LD_INT 4
32311: NEG
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 4
32322: NEG
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 3
32334: NEG
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 4
32356: NEG
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 5
32367: NEG
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 5
32378: NEG
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 5
32390: NEG
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: LD_INT 3
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: LD_INT 4
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: NEG
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 4
32473: NEG
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 4
32485: NEG
32486: PUSH
32487: LD_INT 4
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 4
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: NEG
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 4
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: LD_INT 5
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: LD_INT 4
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: LD_INT 3
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 3
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: LD_INT 4
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 5
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: LD_INT 5
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 4
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 4
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 4
32716: PUSH
32717: LD_INT 4
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 4
32726: PUSH
32727: LD_INT 3
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 5
32736: PUSH
32737: LD_INT 4
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 5
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 4
32756: PUSH
32757: LD_INT 5
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 5
32786: PUSH
32787: LD_INT 3
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32851: LD_ADDR_VAR 0 33
32855: PUSH
32856: LD_INT 4
32858: NEG
32859: PUSH
32860: LD_INT 4
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 4
32870: NEG
32871: PUSH
32872: LD_INT 5
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 3
32882: NEG
32883: PUSH
32884: LD_INT 4
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 4
32906: NEG
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 5
32918: NEG
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 5
32930: NEG
32931: PUSH
32932: LD_INT 5
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 3
32942: NEG
32943: PUSH
32944: LD_INT 5
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 5
32954: NEG
32955: PUSH
32956: LD_INT 3
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 3
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 4
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: LD_INT 3
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 4
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: LD_INT 4
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 4
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 4
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 3
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 4
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 4
33191: PUSH
33192: LD_INT 4
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 3
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 4
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 4
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 4
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 4
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 5
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 5
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: LD_INT 3
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33389: LD_ADDR_VAR 0 34
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 4
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 5
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 4
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 3
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 3
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: LD_INT 4
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 5
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 3
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: LD_INT 5
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 4
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 4
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 4
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 4
33591: PUSH
33592: LD_INT 4
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 4
33601: PUSH
33602: LD_INT 3
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 5
33611: PUSH
33612: LD_INT 4
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 5
33621: PUSH
33622: LD_INT 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 4
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 3
33641: PUSH
33642: LD_INT 4
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 5
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 3
33671: PUSH
33672: LD_INT 5
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 3
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 4
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 4
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: LD_INT 3
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 4
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 2
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 4
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 5
33830: NEG
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 5
33841: NEG
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 5
33853: NEG
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: ST_TO_ADDR
// end ; end ;
33921: GO 33924
33923: POP
// case btype of b_depot , b_warehouse :
33924: LD_VAR 0 1
33928: PUSH
33929: LD_INT 0
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33943
33935: LD_INT 1
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 34144
33943: POP
// case nation of nation_american :
33944: LD_VAR 0 5
33948: PUSH
33949: LD_INT 1
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 34013
33957: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33958: LD_ADDR_VAR 0 9
33962: PUSH
33963: LD_VAR 0 11
33967: PUSH
33968: LD_VAR 0 12
33972: PUSH
33973: LD_VAR 0 13
33977: PUSH
33978: LD_VAR 0 14
33982: PUSH
33983: LD_VAR 0 15
33987: PUSH
33988: LD_VAR 0 16
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: PUSH
34001: LD_VAR 0 4
34005: PUSH
34006: LD_INT 1
34008: PLUS
34009: ARRAY
34010: ST_TO_ADDR
34011: GO 34142
34013: LD_INT 2
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34021
34019: GO 34077
34021: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34022: LD_ADDR_VAR 0 9
34026: PUSH
34027: LD_VAR 0 17
34031: PUSH
34032: LD_VAR 0 18
34036: PUSH
34037: LD_VAR 0 19
34041: PUSH
34042: LD_VAR 0 20
34046: PUSH
34047: LD_VAR 0 21
34051: PUSH
34052: LD_VAR 0 22
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: PUSH
34065: LD_VAR 0 4
34069: PUSH
34070: LD_INT 1
34072: PLUS
34073: ARRAY
34074: ST_TO_ADDR
34075: GO 34142
34077: LD_INT 3
34079: DOUBLE
34080: EQUAL
34081: IFTRUE 34085
34083: GO 34141
34085: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34086: LD_ADDR_VAR 0 9
34090: PUSH
34091: LD_VAR 0 23
34095: PUSH
34096: LD_VAR 0 24
34100: PUSH
34101: LD_VAR 0 25
34105: PUSH
34106: LD_VAR 0 26
34110: PUSH
34111: LD_VAR 0 27
34115: PUSH
34116: LD_VAR 0 28
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: PUSH
34129: LD_VAR 0 4
34133: PUSH
34134: LD_INT 1
34136: PLUS
34137: ARRAY
34138: ST_TO_ADDR
34139: GO 34142
34141: POP
34142: GO 34697
34144: LD_INT 2
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34158
34150: LD_INT 3
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34214
34158: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34159: LD_ADDR_VAR 0 9
34163: PUSH
34164: LD_VAR 0 29
34168: PUSH
34169: LD_VAR 0 30
34173: PUSH
34174: LD_VAR 0 31
34178: PUSH
34179: LD_VAR 0 32
34183: PUSH
34184: LD_VAR 0 33
34188: PUSH
34189: LD_VAR 0 34
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: PUSH
34202: LD_VAR 0 4
34206: PUSH
34207: LD_INT 1
34209: PLUS
34210: ARRAY
34211: ST_TO_ADDR
34212: GO 34697
34214: LD_INT 16
34216: DOUBLE
34217: EQUAL
34218: IFTRUE 34276
34220: LD_INT 17
34222: DOUBLE
34223: EQUAL
34224: IFTRUE 34276
34226: LD_INT 18
34228: DOUBLE
34229: EQUAL
34230: IFTRUE 34276
34232: LD_INT 19
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34276
34238: LD_INT 22
34240: DOUBLE
34241: EQUAL
34242: IFTRUE 34276
34244: LD_INT 20
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34276
34250: LD_INT 21
34252: DOUBLE
34253: EQUAL
34254: IFTRUE 34276
34256: LD_INT 23
34258: DOUBLE
34259: EQUAL
34260: IFTRUE 34276
34262: LD_INT 24
34264: DOUBLE
34265: EQUAL
34266: IFTRUE 34276
34268: LD_INT 25
34270: DOUBLE
34271: EQUAL
34272: IFTRUE 34276
34274: GO 34332
34276: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34277: LD_ADDR_VAR 0 9
34281: PUSH
34282: LD_VAR 0 35
34286: PUSH
34287: LD_VAR 0 36
34291: PUSH
34292: LD_VAR 0 37
34296: PUSH
34297: LD_VAR 0 38
34301: PUSH
34302: LD_VAR 0 39
34306: PUSH
34307: LD_VAR 0 40
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: PUSH
34320: LD_VAR 0 4
34324: PUSH
34325: LD_INT 1
34327: PLUS
34328: ARRAY
34329: ST_TO_ADDR
34330: GO 34697
34332: LD_INT 6
34334: DOUBLE
34335: EQUAL
34336: IFTRUE 34388
34338: LD_INT 7
34340: DOUBLE
34341: EQUAL
34342: IFTRUE 34388
34344: LD_INT 8
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34388
34350: LD_INT 13
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34388
34356: LD_INT 12
34358: DOUBLE
34359: EQUAL
34360: IFTRUE 34388
34362: LD_INT 15
34364: DOUBLE
34365: EQUAL
34366: IFTRUE 34388
34368: LD_INT 11
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34388
34374: LD_INT 14
34376: DOUBLE
34377: EQUAL
34378: IFTRUE 34388
34380: LD_INT 10
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34388
34386: GO 34444
34388: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34389: LD_ADDR_VAR 0 9
34393: PUSH
34394: LD_VAR 0 41
34398: PUSH
34399: LD_VAR 0 42
34403: PUSH
34404: LD_VAR 0 43
34408: PUSH
34409: LD_VAR 0 44
34413: PUSH
34414: LD_VAR 0 45
34418: PUSH
34419: LD_VAR 0 46
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: PUSH
34432: LD_VAR 0 4
34436: PUSH
34437: LD_INT 1
34439: PLUS
34440: ARRAY
34441: ST_TO_ADDR
34442: GO 34697
34444: LD_INT 36
34446: DOUBLE
34447: EQUAL
34448: IFTRUE 34452
34450: GO 34508
34452: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34453: LD_ADDR_VAR 0 9
34457: PUSH
34458: LD_VAR 0 47
34462: PUSH
34463: LD_VAR 0 48
34467: PUSH
34468: LD_VAR 0 49
34472: PUSH
34473: LD_VAR 0 50
34477: PUSH
34478: LD_VAR 0 51
34482: PUSH
34483: LD_VAR 0 52
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: PUSH
34496: LD_VAR 0 4
34500: PUSH
34501: LD_INT 1
34503: PLUS
34504: ARRAY
34505: ST_TO_ADDR
34506: GO 34697
34508: LD_INT 4
34510: DOUBLE
34511: EQUAL
34512: IFTRUE 34534
34514: LD_INT 5
34516: DOUBLE
34517: EQUAL
34518: IFTRUE 34534
34520: LD_INT 34
34522: DOUBLE
34523: EQUAL
34524: IFTRUE 34534
34526: LD_INT 37
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34590
34534: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34535: LD_ADDR_VAR 0 9
34539: PUSH
34540: LD_VAR 0 53
34544: PUSH
34545: LD_VAR 0 54
34549: PUSH
34550: LD_VAR 0 55
34554: PUSH
34555: LD_VAR 0 56
34559: PUSH
34560: LD_VAR 0 57
34564: PUSH
34565: LD_VAR 0 58
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: PUSH
34578: LD_VAR 0 4
34582: PUSH
34583: LD_INT 1
34585: PLUS
34586: ARRAY
34587: ST_TO_ADDR
34588: GO 34697
34590: LD_INT 31
34592: DOUBLE
34593: EQUAL
34594: IFTRUE 34640
34596: LD_INT 32
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34640
34602: LD_INT 33
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34640
34608: LD_INT 27
34610: DOUBLE
34611: EQUAL
34612: IFTRUE 34640
34614: LD_INT 26
34616: DOUBLE
34617: EQUAL
34618: IFTRUE 34640
34620: LD_INT 28
34622: DOUBLE
34623: EQUAL
34624: IFTRUE 34640
34626: LD_INT 29
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34640
34632: LD_INT 30
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34696
34640: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34641: LD_ADDR_VAR 0 9
34645: PUSH
34646: LD_VAR 0 59
34650: PUSH
34651: LD_VAR 0 60
34655: PUSH
34656: LD_VAR 0 61
34660: PUSH
34661: LD_VAR 0 62
34665: PUSH
34666: LD_VAR 0 63
34670: PUSH
34671: LD_VAR 0 64
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: PUSH
34684: LD_VAR 0 4
34688: PUSH
34689: LD_INT 1
34691: PLUS
34692: ARRAY
34693: ST_TO_ADDR
34694: GO 34697
34696: POP
// temp_list2 = [ ] ;
34697: LD_ADDR_VAR 0 10
34701: PUSH
34702: EMPTY
34703: ST_TO_ADDR
// for i in temp_list do
34704: LD_ADDR_VAR 0 8
34708: PUSH
34709: LD_VAR 0 9
34713: PUSH
34714: FOR_IN
34715: IFFALSE 34767
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34717: LD_ADDR_VAR 0 10
34721: PUSH
34722: LD_VAR 0 10
34726: PUSH
34727: LD_VAR 0 8
34731: PUSH
34732: LD_INT 1
34734: ARRAY
34735: PUSH
34736: LD_VAR 0 2
34740: PLUS
34741: PUSH
34742: LD_VAR 0 8
34746: PUSH
34747: LD_INT 2
34749: ARRAY
34750: PUSH
34751: LD_VAR 0 3
34755: PLUS
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: EMPTY
34762: LIST
34763: ADD
34764: ST_TO_ADDR
34765: GO 34714
34767: POP
34768: POP
// result = temp_list2 ;
34769: LD_ADDR_VAR 0 7
34773: PUSH
34774: LD_VAR 0 10
34778: ST_TO_ADDR
// end ;
34779: LD_VAR 0 7
34783: RET
// export function EnemyInRange ( unit , dist ) ; begin
34784: LD_INT 0
34786: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34787: LD_ADDR_VAR 0 3
34791: PUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: CALL_OW 255
34801: PPUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 250
34811: PPUSH
34812: LD_VAR 0 1
34816: PPUSH
34817: CALL_OW 251
34821: PPUSH
34822: LD_VAR 0 2
34826: PPUSH
34827: CALL 8041 0 4
34831: PUSH
34832: LD_INT 4
34834: ARRAY
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 3
34840: RET
// export function PlayerSeeMe ( unit ) ; begin
34841: LD_INT 0
34843: PPUSH
// result := See ( your_side , unit ) ;
34844: LD_ADDR_VAR 0 2
34848: PUSH
34849: LD_OWVAR 2
34853: PPUSH
34854: LD_VAR 0 1
34858: PPUSH
34859: CALL_OW 292
34863: ST_TO_ADDR
// end ;
34864: LD_VAR 0 2
34868: RET
// export function ReverseDir ( unit ) ; begin
34869: LD_INT 0
34871: PPUSH
// if not unit then
34872: LD_VAR 0 1
34876: NOT
34877: IFFALSE 34881
// exit ;
34879: GO 34904
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34881: LD_ADDR_VAR 0 2
34885: PUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 254
34895: PUSH
34896: LD_INT 3
34898: PLUS
34899: PUSH
34900: LD_INT 6
34902: MOD
34903: ST_TO_ADDR
// end ;
34904: LD_VAR 0 2
34908: RET
// export function ReverseArray ( array ) ; var i ; begin
34909: LD_INT 0
34911: PPUSH
34912: PPUSH
// if not array then
34913: LD_VAR 0 1
34917: NOT
34918: IFFALSE 34922
// exit ;
34920: GO 34977
// result := [ ] ;
34922: LD_ADDR_VAR 0 2
34926: PUSH
34927: EMPTY
34928: ST_TO_ADDR
// for i := array downto 1 do
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: DOUBLE
34935: LD_VAR 0 1
34939: INC
34940: ST_TO_ADDR
34941: LD_INT 1
34943: PUSH
34944: FOR_DOWNTO
34945: IFFALSE 34975
// result := Join ( result , array [ i ] ) ;
34947: LD_ADDR_VAR 0 2
34951: PUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 1
34961: PUSH
34962: LD_VAR 0 3
34966: ARRAY
34967: PPUSH
34968: CALL 39829 0 2
34972: ST_TO_ADDR
34973: GO 34944
34975: POP
34976: POP
// end ;
34977: LD_VAR 0 2
34981: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34982: LD_INT 0
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
// if not unit or not hexes then
34990: LD_VAR 0 1
34994: NOT
34995: IFTRUE 35004
34997: PUSH
34998: LD_VAR 0 2
35002: NOT
35003: OR
35004: IFFALSE 35008
// exit ;
35006: GO 35131
// dist := 9999 ;
35008: LD_ADDR_VAR 0 5
35012: PUSH
35013: LD_INT 9999
35015: ST_TO_ADDR
// for i = 1 to hexes do
35016: LD_ADDR_VAR 0 4
35020: PUSH
35021: DOUBLE
35022: LD_INT 1
35024: DEC
35025: ST_TO_ADDR
35026: LD_VAR 0 2
35030: PUSH
35031: FOR_TO
35032: IFFALSE 35119
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35034: LD_ADDR_VAR 0 6
35038: PUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: LD_VAR 0 2
35048: PUSH
35049: LD_VAR 0 4
35053: ARRAY
35054: PUSH
35055: LD_INT 1
35057: ARRAY
35058: PPUSH
35059: LD_VAR 0 2
35063: PUSH
35064: LD_VAR 0 4
35068: ARRAY
35069: PUSH
35070: LD_INT 2
35072: ARRAY
35073: PPUSH
35074: CALL_OW 297
35078: ST_TO_ADDR
// if tdist < dist then
35079: LD_VAR 0 6
35083: PUSH
35084: LD_VAR 0 5
35088: LESS
35089: IFFALSE 35117
// begin hex := hexes [ i ] ;
35091: LD_ADDR_VAR 0 8
35095: PUSH
35096: LD_VAR 0 2
35100: PUSH
35101: LD_VAR 0 4
35105: ARRAY
35106: ST_TO_ADDR
// dist := tdist ;
35107: LD_ADDR_VAR 0 5
35111: PUSH
35112: LD_VAR 0 6
35116: ST_TO_ADDR
// end ; end ;
35117: GO 35031
35119: POP
35120: POP
// result := hex ;
35121: LD_ADDR_VAR 0 3
35125: PUSH
35126: LD_VAR 0 8
35130: ST_TO_ADDR
// end ;
35131: LD_VAR 0 3
35135: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35136: LD_INT 0
35138: PPUSH
35139: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35140: LD_VAR 0 1
35144: NOT
35145: IFTRUE 35184
35147: PUSH
35148: LD_VAR 0 1
35152: PUSH
35153: LD_INT 21
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 23
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PPUSH
35177: CALL_OW 69
35181: IN
35182: NOT
35183: OR
35184: IFFALSE 35188
// exit ;
35186: GO 35235
// for i = 1 to 3 do
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: DOUBLE
35194: LD_INT 1
35196: DEC
35197: ST_TO_ADDR
35198: LD_INT 3
35200: PUSH
35201: FOR_TO
35202: IFFALSE 35233
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35204: LD_VAR 0 1
35208: PPUSH
35209: CALL_OW 250
35213: PPUSH
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 251
35223: PPUSH
35224: LD_INT 1
35226: PPUSH
35227: CALL_OW 453
35231: GO 35201
35233: POP
35234: POP
// end ;
35235: LD_VAR 0 2
35239: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35240: LD_INT 0
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
// if not unit or not enemy_unit then
35248: LD_VAR 0 1
35252: NOT
35253: IFTRUE 35262
35255: PUSH
35256: LD_VAR 0 2
35260: NOT
35261: OR
35262: IFFALSE 35266
// exit ;
35264: GO 35747
// if GetLives ( i ) < 250 then
35266: LD_VAR 0 4
35270: PPUSH
35271: CALL_OW 256
35275: PUSH
35276: LD_INT 250
35278: LESS
35279: IFFALSE 35292
// begin ComAutodestruct ( i ) ;
35281: LD_VAR 0 4
35285: PPUSH
35286: CALL 35136 0 1
// exit ;
35290: GO 35747
// end ; x := GetX ( enemy_unit ) ;
35292: LD_ADDR_VAR 0 7
35296: PUSH
35297: LD_VAR 0 2
35301: PPUSH
35302: CALL_OW 250
35306: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35307: LD_ADDR_VAR 0 8
35311: PUSH
35312: LD_VAR 0 2
35316: PPUSH
35317: CALL_OW 251
35321: ST_TO_ADDR
// if not x or not y then
35322: LD_VAR 0 7
35326: NOT
35327: IFTRUE 35336
35329: PUSH
35330: LD_VAR 0 8
35334: NOT
35335: OR
35336: IFFALSE 35340
// exit ;
35338: GO 35747
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35340: LD_ADDR_VAR 0 6
35344: PUSH
35345: LD_VAR 0 7
35349: PPUSH
35350: LD_INT 0
35352: PPUSH
35353: LD_INT 4
35355: PPUSH
35356: CALL_OW 272
35360: PUSH
35361: LD_VAR 0 8
35365: PPUSH
35366: LD_INT 0
35368: PPUSH
35369: LD_INT 4
35371: PPUSH
35372: CALL_OW 273
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_VAR 0 7
35385: PPUSH
35386: LD_INT 1
35388: PPUSH
35389: LD_INT 4
35391: PPUSH
35392: CALL_OW 272
35396: PUSH
35397: LD_VAR 0 8
35401: PPUSH
35402: LD_INT 1
35404: PPUSH
35405: LD_INT 4
35407: PPUSH
35408: CALL_OW 273
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_VAR 0 7
35421: PPUSH
35422: LD_INT 2
35424: PPUSH
35425: LD_INT 4
35427: PPUSH
35428: CALL_OW 272
35432: PUSH
35433: LD_VAR 0 8
35437: PPUSH
35438: LD_INT 2
35440: PPUSH
35441: LD_INT 4
35443: PPUSH
35444: CALL_OW 273
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_VAR 0 7
35457: PPUSH
35458: LD_INT 3
35460: PPUSH
35461: LD_INT 4
35463: PPUSH
35464: CALL_OW 272
35468: PUSH
35469: LD_VAR 0 8
35473: PPUSH
35474: LD_INT 3
35476: PPUSH
35477: LD_INT 4
35479: PPUSH
35480: CALL_OW 273
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_VAR 0 7
35493: PPUSH
35494: LD_INT 4
35496: PPUSH
35497: LD_INT 4
35499: PPUSH
35500: CALL_OW 272
35504: PUSH
35505: LD_VAR 0 8
35509: PPUSH
35510: LD_INT 4
35512: PPUSH
35513: LD_INT 4
35515: PPUSH
35516: CALL_OW 273
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_VAR 0 7
35529: PPUSH
35530: LD_INT 5
35532: PPUSH
35533: LD_INT 4
35535: PPUSH
35536: CALL_OW 272
35540: PUSH
35541: LD_VAR 0 8
35545: PPUSH
35546: LD_INT 5
35548: PPUSH
35549: LD_INT 4
35551: PPUSH
35552: CALL_OW 273
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// for i = tmp downto 1 do
35569: LD_ADDR_VAR 0 4
35573: PUSH
35574: DOUBLE
35575: LD_VAR 0 6
35579: INC
35580: ST_TO_ADDR
35581: LD_INT 1
35583: PUSH
35584: FOR_DOWNTO
35585: IFFALSE 35688
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35587: LD_VAR 0 6
35591: PUSH
35592: LD_VAR 0 4
35596: ARRAY
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: LD_VAR 0 6
35606: PUSH
35607: LD_VAR 0 4
35611: ARRAY
35612: PUSH
35613: LD_INT 2
35615: ARRAY
35616: PPUSH
35617: CALL_OW 488
35621: NOT
35622: IFTRUE 35664
35624: PUSH
35625: LD_VAR 0 6
35629: PUSH
35630: LD_VAR 0 4
35634: ARRAY
35635: PUSH
35636: LD_INT 1
35638: ARRAY
35639: PPUSH
35640: LD_VAR 0 6
35644: PUSH
35645: LD_VAR 0 4
35649: ARRAY
35650: PUSH
35651: LD_INT 2
35653: ARRAY
35654: PPUSH
35655: CALL_OW 428
35659: PUSH
35660: LD_INT 0
35662: NONEQUAL
35663: OR
35664: IFFALSE 35686
// tmp := Delete ( tmp , i ) ;
35666: LD_ADDR_VAR 0 6
35670: PUSH
35671: LD_VAR 0 6
35675: PPUSH
35676: LD_VAR 0 4
35680: PPUSH
35681: CALL_OW 3
35685: ST_TO_ADDR
35686: GO 35584
35688: POP
35689: POP
// j := GetClosestHex ( unit , tmp ) ;
35690: LD_ADDR_VAR 0 5
35694: PUSH
35695: LD_VAR 0 1
35699: PPUSH
35700: LD_VAR 0 6
35704: PPUSH
35705: CALL 34982 0 2
35709: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35710: LD_VAR 0 1
35714: PPUSH
35715: LD_VAR 0 5
35719: PUSH
35720: LD_INT 1
35722: ARRAY
35723: PPUSH
35724: LD_VAR 0 5
35728: PUSH
35729: LD_INT 2
35731: ARRAY
35732: PPUSH
35733: CALL_OW 111
// result := j ;
35737: LD_ADDR_VAR 0 3
35741: PUSH
35742: LD_VAR 0 5
35746: ST_TO_ADDR
// end ;
35747: LD_VAR 0 3
35751: RET
// export function PrepareApemanSoldier ( ) ; begin
35752: LD_INT 0
35754: PPUSH
// uc_nation := 0 ;
35755: LD_ADDR_OWVAR 21
35759: PUSH
35760: LD_INT 0
35762: ST_TO_ADDR
// hc_sex := sex_male ;
35763: LD_ADDR_OWVAR 27
35767: PUSH
35768: LD_INT 1
35770: ST_TO_ADDR
// hc_name :=  ;
35771: LD_ADDR_OWVAR 26
35775: PUSH
35776: LD_STRING 
35778: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35779: LD_ADDR_OWVAR 28
35783: PUSH
35784: LD_INT 15
35786: ST_TO_ADDR
// hc_gallery :=  ;
35787: LD_ADDR_OWVAR 33
35791: PUSH
35792: LD_STRING 
35794: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35795: LD_ADDR_OWVAR 31
35799: PUSH
35800: LD_INT 0
35802: PPUSH
35803: LD_INT 3
35805: PPUSH
35806: CALL_OW 12
35810: PUSH
35811: LD_INT 0
35813: PPUSH
35814: LD_INT 3
35816: PPUSH
35817: CALL_OW 12
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35834: LD_ADDR_OWVAR 29
35838: PUSH
35839: LD_INT 10
35841: PUSH
35842: LD_INT 12
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: ST_TO_ADDR
// end ;
35849: LD_VAR 0 1
35853: RET
// export function PrepareApemanEngineer ( ) ; begin
35854: LD_INT 0
35856: PPUSH
// uc_nation := 0 ;
35857: LD_ADDR_OWVAR 21
35861: PUSH
35862: LD_INT 0
35864: ST_TO_ADDR
// hc_sex := sex_male ;
35865: LD_ADDR_OWVAR 27
35869: PUSH
35870: LD_INT 1
35872: ST_TO_ADDR
// hc_name :=  ;
35873: LD_ADDR_OWVAR 26
35877: PUSH
35878: LD_STRING 
35880: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35881: LD_ADDR_OWVAR 28
35885: PUSH
35886: LD_INT 16
35888: ST_TO_ADDR
// hc_gallery :=  ;
35889: LD_ADDR_OWVAR 33
35893: PUSH
35894: LD_STRING 
35896: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35897: LD_ADDR_OWVAR 31
35901: PUSH
35902: LD_INT 0
35904: PPUSH
35905: LD_INT 3
35907: PPUSH
35908: CALL_OW 12
35912: PUSH
35913: LD_INT 0
35915: PPUSH
35916: LD_INT 3
35918: PPUSH
35919: CALL_OW 12
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35936: LD_ADDR_OWVAR 29
35940: PUSH
35941: LD_INT 10
35943: PUSH
35944: LD_INT 12
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: ST_TO_ADDR
// end ;
35951: LD_VAR 0 1
35955: RET
// export function PrepareApeman ( agressivity ) ; begin
35956: LD_INT 0
35958: PPUSH
// uc_side := 0 ;
35959: LD_ADDR_OWVAR 20
35963: PUSH
35964: LD_INT 0
35966: ST_TO_ADDR
// uc_nation := 0 ;
35967: LD_ADDR_OWVAR 21
35971: PUSH
35972: LD_INT 0
35974: ST_TO_ADDR
// hc_sex := sex_male ;
35975: LD_ADDR_OWVAR 27
35979: PUSH
35980: LD_INT 1
35982: ST_TO_ADDR
// hc_class := class_apeman ;
35983: LD_ADDR_OWVAR 28
35987: PUSH
35988: LD_INT 12
35990: ST_TO_ADDR
// hc_gallery :=  ;
35991: LD_ADDR_OWVAR 33
35995: PUSH
35996: LD_STRING 
35998: ST_TO_ADDR
// hc_name :=  ;
35999: LD_ADDR_OWVAR 26
36003: PUSH
36004: LD_STRING 
36006: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36007: LD_ADDR_OWVAR 29
36011: PUSH
36012: LD_INT 10
36014: PUSH
36015: LD_INT 12
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: ST_TO_ADDR
// if agressivity = 0 then
36022: LD_VAR 0 1
36026: PUSH
36027: LD_INT 0
36029: EQUAL
36030: IFFALSE 36042
// hc_agressivity := 0 else
36032: LD_ADDR_OWVAR 35
36036: PUSH
36037: LD_INT 0
36039: ST_TO_ADDR
36040: GO 36063
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36042: LD_ADDR_OWVAR 35
36046: PUSH
36047: LD_VAR 0 1
36051: NEG
36052: PPUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: CALL_OW 12
36062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36063: LD_ADDR_OWVAR 31
36067: PUSH
36068: LD_INT 0
36070: PPUSH
36071: LD_INT 3
36073: PPUSH
36074: CALL_OW 12
36078: PUSH
36079: LD_INT 0
36081: PPUSH
36082: LD_INT 3
36084: PPUSH
36085: CALL_OW 12
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// end ;
36102: LD_VAR 0 2
36106: RET
// export function PrepareTiger ( agressivity ) ; begin
36107: LD_INT 0
36109: PPUSH
// uc_side := 0 ;
36110: LD_ADDR_OWVAR 20
36114: PUSH
36115: LD_INT 0
36117: ST_TO_ADDR
// uc_nation := 0 ;
36118: LD_ADDR_OWVAR 21
36122: PUSH
36123: LD_INT 0
36125: ST_TO_ADDR
// InitHc ;
36126: CALL_OW 19
// hc_class := class_tiger ;
36130: LD_ADDR_OWVAR 28
36134: PUSH
36135: LD_INT 14
36137: ST_TO_ADDR
// hc_gallery :=  ;
36138: LD_ADDR_OWVAR 33
36142: PUSH
36143: LD_STRING 
36145: ST_TO_ADDR
// hc_name :=  ;
36146: LD_ADDR_OWVAR 26
36150: PUSH
36151: LD_STRING 
36153: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36154: LD_ADDR_OWVAR 35
36158: PUSH
36159: LD_VAR 0 1
36163: NEG
36164: PPUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 12
36174: ST_TO_ADDR
// end ;
36175: LD_VAR 0 2
36179: RET
// export function PrepareEnchidna ( ) ; begin
36180: LD_INT 0
36182: PPUSH
// uc_side := 0 ;
36183: LD_ADDR_OWVAR 20
36187: PUSH
36188: LD_INT 0
36190: ST_TO_ADDR
// uc_nation := 0 ;
36191: LD_ADDR_OWVAR 21
36195: PUSH
36196: LD_INT 0
36198: ST_TO_ADDR
// InitHc ;
36199: CALL_OW 19
// hc_class := class_baggie ;
36203: LD_ADDR_OWVAR 28
36207: PUSH
36208: LD_INT 13
36210: ST_TO_ADDR
// hc_gallery :=  ;
36211: LD_ADDR_OWVAR 33
36215: PUSH
36216: LD_STRING 
36218: ST_TO_ADDR
// hc_name :=  ;
36219: LD_ADDR_OWVAR 26
36223: PUSH
36224: LD_STRING 
36226: ST_TO_ADDR
// end ;
36227: LD_VAR 0 1
36231: RET
// export function PrepareFrog ( ) ; begin
36232: LD_INT 0
36234: PPUSH
// uc_side := 0 ;
36235: LD_ADDR_OWVAR 20
36239: PUSH
36240: LD_INT 0
36242: ST_TO_ADDR
// uc_nation := 0 ;
36243: LD_ADDR_OWVAR 21
36247: PUSH
36248: LD_INT 0
36250: ST_TO_ADDR
// InitHc ;
36251: CALL_OW 19
// hc_class := class_frog ;
36255: LD_ADDR_OWVAR 28
36259: PUSH
36260: LD_INT 19
36262: ST_TO_ADDR
// hc_gallery :=  ;
36263: LD_ADDR_OWVAR 33
36267: PUSH
36268: LD_STRING 
36270: ST_TO_ADDR
// hc_name :=  ;
36271: LD_ADDR_OWVAR 26
36275: PUSH
36276: LD_STRING 
36278: ST_TO_ADDR
// end ;
36279: LD_VAR 0 1
36283: RET
// export function PrepareFish ( ) ; begin
36284: LD_INT 0
36286: PPUSH
// uc_side := 0 ;
36287: LD_ADDR_OWVAR 20
36291: PUSH
36292: LD_INT 0
36294: ST_TO_ADDR
// uc_nation := 0 ;
36295: LD_ADDR_OWVAR 21
36299: PUSH
36300: LD_INT 0
36302: ST_TO_ADDR
// InitHc ;
36303: CALL_OW 19
// hc_class := class_fish ;
36307: LD_ADDR_OWVAR 28
36311: PUSH
36312: LD_INT 20
36314: ST_TO_ADDR
// hc_gallery :=  ;
36315: LD_ADDR_OWVAR 33
36319: PUSH
36320: LD_STRING 
36322: ST_TO_ADDR
// hc_name :=  ;
36323: LD_ADDR_OWVAR 26
36327: PUSH
36328: LD_STRING 
36330: ST_TO_ADDR
// end ;
36331: LD_VAR 0 1
36335: RET
// export function PrepareBird ( ) ; begin
36336: LD_INT 0
36338: PPUSH
// uc_side := 0 ;
36339: LD_ADDR_OWVAR 20
36343: PUSH
36344: LD_INT 0
36346: ST_TO_ADDR
// uc_nation := 0 ;
36347: LD_ADDR_OWVAR 21
36351: PUSH
36352: LD_INT 0
36354: ST_TO_ADDR
// InitHc ;
36355: CALL_OW 19
// hc_class := class_phororhacos ;
36359: LD_ADDR_OWVAR 28
36363: PUSH
36364: LD_INT 18
36366: ST_TO_ADDR
// hc_gallery :=  ;
36367: LD_ADDR_OWVAR 33
36371: PUSH
36372: LD_STRING 
36374: ST_TO_ADDR
// hc_name :=  ;
36375: LD_ADDR_OWVAR 26
36379: PUSH
36380: LD_STRING 
36382: ST_TO_ADDR
// end ;
36383: LD_VAR 0 1
36387: RET
// export function PrepareHorse ( ) ; begin
36388: LD_INT 0
36390: PPUSH
// uc_side := 0 ;
36391: LD_ADDR_OWVAR 20
36395: PUSH
36396: LD_INT 0
36398: ST_TO_ADDR
// uc_nation := 0 ;
36399: LD_ADDR_OWVAR 21
36403: PUSH
36404: LD_INT 0
36406: ST_TO_ADDR
// InitHc ;
36407: CALL_OW 19
// hc_class := class_horse ;
36411: LD_ADDR_OWVAR 28
36415: PUSH
36416: LD_INT 21
36418: ST_TO_ADDR
// hc_gallery :=  ;
36419: LD_ADDR_OWVAR 33
36423: PUSH
36424: LD_STRING 
36426: ST_TO_ADDR
// hc_name :=  ;
36427: LD_ADDR_OWVAR 26
36431: PUSH
36432: LD_STRING 
36434: ST_TO_ADDR
// end ;
36435: LD_VAR 0 1
36439: RET
// export function PrepareMastodont ( ) ; begin
36440: LD_INT 0
36442: PPUSH
// uc_side := 0 ;
36443: LD_ADDR_OWVAR 20
36447: PUSH
36448: LD_INT 0
36450: ST_TO_ADDR
// uc_nation := 0 ;
36451: LD_ADDR_OWVAR 21
36455: PUSH
36456: LD_INT 0
36458: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36459: LD_ADDR_OWVAR 37
36463: PUSH
36464: LD_INT 31
36466: ST_TO_ADDR
// vc_control := control_rider ;
36467: LD_ADDR_OWVAR 38
36471: PUSH
36472: LD_INT 4
36474: ST_TO_ADDR
// end ;
36475: LD_VAR 0 1
36479: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36480: LD_INT 0
36482: PPUSH
36483: PPUSH
36484: PPUSH
// uc_side = 0 ;
36485: LD_ADDR_OWVAR 20
36489: PUSH
36490: LD_INT 0
36492: ST_TO_ADDR
// uc_nation = 0 ;
36493: LD_ADDR_OWVAR 21
36497: PUSH
36498: LD_INT 0
36500: ST_TO_ADDR
// InitHc_All ( ) ;
36501: CALL_OW 584
// InitVc ;
36505: CALL_OW 20
// if mastodonts then
36509: LD_VAR 0 6
36513: IFFALSE 36580
// for i = 1 to mastodonts do
36515: LD_ADDR_VAR 0 11
36519: PUSH
36520: DOUBLE
36521: LD_INT 1
36523: DEC
36524: ST_TO_ADDR
36525: LD_VAR 0 6
36529: PUSH
36530: FOR_TO
36531: IFFALSE 36578
// begin vc_chassis := 31 ;
36533: LD_ADDR_OWVAR 37
36537: PUSH
36538: LD_INT 31
36540: ST_TO_ADDR
// vc_control := control_rider ;
36541: LD_ADDR_OWVAR 38
36545: PUSH
36546: LD_INT 4
36548: ST_TO_ADDR
// animal := CreateVehicle ;
36549: LD_ADDR_VAR 0 12
36553: PUSH
36554: CALL_OW 45
36558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36559: LD_VAR 0 12
36563: PPUSH
36564: LD_VAR 0 8
36568: PPUSH
36569: LD_INT 0
36571: PPUSH
36572: CALL 38722 0 3
// end ;
36576: GO 36530
36578: POP
36579: POP
// if horses then
36580: LD_VAR 0 5
36584: IFFALSE 36651
// for i = 1 to horses do
36586: LD_ADDR_VAR 0 11
36590: PUSH
36591: DOUBLE
36592: LD_INT 1
36594: DEC
36595: ST_TO_ADDR
36596: LD_VAR 0 5
36600: PUSH
36601: FOR_TO
36602: IFFALSE 36649
// begin hc_class := 21 ;
36604: LD_ADDR_OWVAR 28
36608: PUSH
36609: LD_INT 21
36611: ST_TO_ADDR
// hc_gallery :=  ;
36612: LD_ADDR_OWVAR 33
36616: PUSH
36617: LD_STRING 
36619: ST_TO_ADDR
// animal := CreateHuman ;
36620: LD_ADDR_VAR 0 12
36624: PUSH
36625: CALL_OW 44
36629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36630: LD_VAR 0 12
36634: PPUSH
36635: LD_VAR 0 8
36639: PPUSH
36640: LD_INT 0
36642: PPUSH
36643: CALL 38722 0 3
// end ;
36647: GO 36601
36649: POP
36650: POP
// if birds then
36651: LD_VAR 0 1
36655: IFFALSE 36722
// for i = 1 to birds do
36657: LD_ADDR_VAR 0 11
36661: PUSH
36662: DOUBLE
36663: LD_INT 1
36665: DEC
36666: ST_TO_ADDR
36667: LD_VAR 0 1
36671: PUSH
36672: FOR_TO
36673: IFFALSE 36720
// begin hc_class := 18 ;
36675: LD_ADDR_OWVAR 28
36679: PUSH
36680: LD_INT 18
36682: ST_TO_ADDR
// hc_gallery =  ;
36683: LD_ADDR_OWVAR 33
36687: PUSH
36688: LD_STRING 
36690: ST_TO_ADDR
// animal := CreateHuman ;
36691: LD_ADDR_VAR 0 12
36695: PUSH
36696: CALL_OW 44
36700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36701: LD_VAR 0 12
36705: PPUSH
36706: LD_VAR 0 8
36710: PPUSH
36711: LD_INT 0
36713: PPUSH
36714: CALL 38722 0 3
// end ;
36718: GO 36672
36720: POP
36721: POP
// if tigers then
36722: LD_VAR 0 2
36726: IFFALSE 36810
// for i = 1 to tigers do
36728: LD_ADDR_VAR 0 11
36732: PUSH
36733: DOUBLE
36734: LD_INT 1
36736: DEC
36737: ST_TO_ADDR
36738: LD_VAR 0 2
36742: PUSH
36743: FOR_TO
36744: IFFALSE 36808
// begin hc_class = class_tiger ;
36746: LD_ADDR_OWVAR 28
36750: PUSH
36751: LD_INT 14
36753: ST_TO_ADDR
// hc_gallery =  ;
36754: LD_ADDR_OWVAR 33
36758: PUSH
36759: LD_STRING 
36761: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36762: LD_ADDR_OWVAR 35
36766: PUSH
36767: LD_INT 7
36769: NEG
36770: PPUSH
36771: LD_INT 7
36773: PPUSH
36774: CALL_OW 12
36778: ST_TO_ADDR
// animal := CreateHuman ;
36779: LD_ADDR_VAR 0 12
36783: PUSH
36784: CALL_OW 44
36788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36789: LD_VAR 0 12
36793: PPUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: LD_INT 0
36801: PPUSH
36802: CALL 38722 0 3
// end ;
36806: GO 36743
36808: POP
36809: POP
// if apemans then
36810: LD_VAR 0 3
36814: IFFALSE 36937
// for i = 1 to apemans do
36816: LD_ADDR_VAR 0 11
36820: PUSH
36821: DOUBLE
36822: LD_INT 1
36824: DEC
36825: ST_TO_ADDR
36826: LD_VAR 0 3
36830: PUSH
36831: FOR_TO
36832: IFFALSE 36935
// begin hc_class = class_apeman ;
36834: LD_ADDR_OWVAR 28
36838: PUSH
36839: LD_INT 12
36841: ST_TO_ADDR
// hc_gallery =  ;
36842: LD_ADDR_OWVAR 33
36846: PUSH
36847: LD_STRING 
36849: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36850: LD_ADDR_OWVAR 35
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PPUSH
36859: LD_INT 2
36861: PPUSH
36862: CALL_OW 12
36866: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36867: LD_ADDR_OWVAR 31
36871: PUSH
36872: LD_INT 1
36874: PPUSH
36875: LD_INT 3
36877: PPUSH
36878: CALL_OW 12
36882: PUSH
36883: LD_INT 1
36885: PPUSH
36886: LD_INT 3
36888: PPUSH
36889: CALL_OW 12
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: ST_TO_ADDR
// animal := CreateHuman ;
36906: LD_ADDR_VAR 0 12
36910: PUSH
36911: CALL_OW 44
36915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36916: LD_VAR 0 12
36920: PPUSH
36921: LD_VAR 0 8
36925: PPUSH
36926: LD_INT 0
36928: PPUSH
36929: CALL 38722 0 3
// end ;
36933: GO 36831
36935: POP
36936: POP
// if enchidnas then
36937: LD_VAR 0 4
36941: IFFALSE 37008
// for i = 1 to enchidnas do
36943: LD_ADDR_VAR 0 11
36947: PUSH
36948: DOUBLE
36949: LD_INT 1
36951: DEC
36952: ST_TO_ADDR
36953: LD_VAR 0 4
36957: PUSH
36958: FOR_TO
36959: IFFALSE 37006
// begin hc_class = 13 ;
36961: LD_ADDR_OWVAR 28
36965: PUSH
36966: LD_INT 13
36968: ST_TO_ADDR
// hc_gallery =  ;
36969: LD_ADDR_OWVAR 33
36973: PUSH
36974: LD_STRING 
36976: ST_TO_ADDR
// animal := CreateHuman ;
36977: LD_ADDR_VAR 0 12
36981: PUSH
36982: CALL_OW 44
36986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36987: LD_VAR 0 12
36991: PPUSH
36992: LD_VAR 0 8
36996: PPUSH
36997: LD_INT 0
36999: PPUSH
37000: CALL 38722 0 3
// end ;
37004: GO 36958
37006: POP
37007: POP
// if fishes then
37008: LD_VAR 0 7
37012: IFFALSE 37079
// for i = 1 to fishes do
37014: LD_ADDR_VAR 0 11
37018: PUSH
37019: DOUBLE
37020: LD_INT 1
37022: DEC
37023: ST_TO_ADDR
37024: LD_VAR 0 7
37028: PUSH
37029: FOR_TO
37030: IFFALSE 37077
// begin hc_class = 20 ;
37032: LD_ADDR_OWVAR 28
37036: PUSH
37037: LD_INT 20
37039: ST_TO_ADDR
// hc_gallery =  ;
37040: LD_ADDR_OWVAR 33
37044: PUSH
37045: LD_STRING 
37047: ST_TO_ADDR
// animal := CreateHuman ;
37048: LD_ADDR_VAR 0 12
37052: PUSH
37053: CALL_OW 44
37057: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37058: LD_VAR 0 12
37062: PPUSH
37063: LD_VAR 0 9
37067: PPUSH
37068: LD_INT 0
37070: PPUSH
37071: CALL 38722 0 3
// end ;
37075: GO 37029
37077: POP
37078: POP
// end ;
37079: LD_VAR 0 10
37083: RET
// export function WantHeal ( sci , unit ) ; begin
37084: LD_INT 0
37086: PPUSH
// if GetTaskList ( sci ) > 0 then
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 437
37096: PUSH
37097: LD_INT 0
37099: GREATER
37100: IFFALSE 37172
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL_OW 437
37111: PUSH
37112: LD_INT 1
37114: ARRAY
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: PUSH
37120: LD_STRING l
37122: EQUAL
37123: IFFALSE 37150
37125: PUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 437
37135: PUSH
37136: LD_INT 1
37138: ARRAY
37139: PUSH
37140: LD_INT 4
37142: ARRAY
37143: PUSH
37144: LD_VAR 0 2
37148: EQUAL
37149: AND
37150: IFFALSE 37162
// result := true else
37152: LD_ADDR_VAR 0 3
37156: PUSH
37157: LD_INT 1
37159: ST_TO_ADDR
37160: GO 37170
// result := false ;
37162: LD_ADDR_VAR 0 3
37166: PUSH
37167: LD_INT 0
37169: ST_TO_ADDR
// end else
37170: GO 37180
// result := false ;
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: LD_INT 0
37179: ST_TO_ADDR
// end ;
37180: LD_VAR 0 3
37184: RET
// export function HealTarget ( sci ) ; begin
37185: LD_INT 0
37187: PPUSH
// if not sci then
37188: LD_VAR 0 1
37192: NOT
37193: IFFALSE 37197
// exit ;
37195: GO 37262
// result := 0 ;
37197: LD_ADDR_VAR 0 2
37201: PUSH
37202: LD_INT 0
37204: ST_TO_ADDR
// if GetTaskList ( sci ) then
37205: LD_VAR 0 1
37209: PPUSH
37210: CALL_OW 437
37214: IFFALSE 37262
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 437
37225: PUSH
37226: LD_INT 1
37228: ARRAY
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: PUSH
37234: LD_STRING l
37236: EQUAL
37237: IFFALSE 37262
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37239: LD_ADDR_VAR 0 2
37243: PUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 437
37253: PUSH
37254: LD_INT 1
37256: ARRAY
37257: PUSH
37258: LD_INT 4
37260: ARRAY
37261: ST_TO_ADDR
// end ;
37262: LD_VAR 0 2
37266: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37267: LD_INT 0
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// if not base_units then
37273: LD_VAR 0 1
37277: NOT
37278: IFFALSE 37282
// exit ;
37280: GO 37369
// result := false ;
37282: LD_ADDR_VAR 0 2
37286: PUSH
37287: LD_INT 0
37289: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37290: LD_ADDR_VAR 0 5
37294: PUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_INT 21
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PPUSH
37310: CALL_OW 72
37314: ST_TO_ADDR
// if not tmp then
37315: LD_VAR 0 5
37319: NOT
37320: IFFALSE 37324
// exit ;
37322: GO 37369
// for i in tmp do
37324: LD_ADDR_VAR 0 3
37328: PUSH
37329: LD_VAR 0 5
37333: PUSH
37334: FOR_IN
37335: IFFALSE 37367
// begin result := EnemyInRange ( i , 22 ) ;
37337: LD_ADDR_VAR 0 2
37341: PUSH
37342: LD_VAR 0 3
37346: PPUSH
37347: LD_INT 22
37349: PPUSH
37350: CALL 34784 0 2
37354: ST_TO_ADDR
// if result then
37355: LD_VAR 0 2
37359: IFFALSE 37365
// exit ;
37361: POP
37362: POP
37363: GO 37369
// end ;
37365: GO 37334
37367: POP
37368: POP
// end ;
37369: LD_VAR 0 2
37373: RET
// export function FilterByTag ( units , tag ) ; begin
37374: LD_INT 0
37376: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37377: LD_ADDR_VAR 0 3
37381: PUSH
37382: LD_VAR 0 1
37386: PPUSH
37387: LD_INT 120
37389: PUSH
37390: LD_VAR 0 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PPUSH
37399: CALL_OW 72
37403: ST_TO_ADDR
// end ;
37404: LD_VAR 0 3
37408: RET
// export function IsDriver ( un ) ; begin
37409: LD_INT 0
37411: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37412: LD_ADDR_VAR 0 2
37416: PUSH
37417: LD_VAR 0 1
37421: PUSH
37422: LD_INT 55
37424: PUSH
37425: EMPTY
37426: LIST
37427: PPUSH
37428: CALL_OW 69
37432: IN
37433: ST_TO_ADDR
// end ;
37434: LD_VAR 0 2
37438: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37439: LD_INT 0
37441: PPUSH
37442: PPUSH
// list := [ ] ;
37443: LD_ADDR_VAR 0 5
37447: PUSH
37448: EMPTY
37449: ST_TO_ADDR
// case d of 0 :
37450: LD_VAR 0 3
37454: PUSH
37455: LD_INT 0
37457: DOUBLE
37458: EQUAL
37459: IFTRUE 37463
37461: GO 37596
37463: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_VAR 0 1
37473: PUSH
37474: LD_INT 4
37476: MINUS
37477: PUSH
37478: LD_VAR 0 2
37482: PUSH
37483: LD_INT 4
37485: MINUS
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: LD_VAR 0 1
37499: PUSH
37500: LD_INT 3
37502: MINUS
37503: PUSH
37504: LD_VAR 0 2
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: PUSH
37517: LD_VAR 0 1
37521: PUSH
37522: LD_INT 4
37524: PLUS
37525: PUSH
37526: LD_VAR 0 2
37530: PUSH
37531: LD_INT 4
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: PUSH
37539: LD_VAR 0 1
37543: PUSH
37544: LD_INT 3
37546: PLUS
37547: PUSH
37548: LD_VAR 0 2
37552: PUSH
37553: LD_INT 3
37555: PLUS
37556: PUSH
37557: LD_INT 5
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: PUSH
37565: LD_VAR 0 1
37569: PUSH
37570: LD_VAR 0 2
37574: PUSH
37575: LD_INT 4
37577: PLUS
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: ST_TO_ADDR
// end ; 1 :
37594: GO 38294
37596: LD_INT 1
37598: DOUBLE
37599: EQUAL
37600: IFTRUE 37604
37602: GO 37737
37604: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37605: LD_ADDR_VAR 0 5
37609: PUSH
37610: LD_VAR 0 1
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_INT 4
37622: MINUS
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: PUSH
37632: LD_VAR 0 1
37636: PUSH
37637: LD_INT 3
37639: MINUS
37640: PUSH
37641: LD_VAR 0 2
37645: PUSH
37646: LD_INT 3
37648: MINUS
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PUSH
37658: LD_VAR 0 1
37662: PUSH
37663: LD_INT 4
37665: MINUS
37666: PUSH
37667: LD_VAR 0 2
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: PUSH
37680: LD_VAR 0 1
37684: PUSH
37685: LD_VAR 0 2
37689: PUSH
37690: LD_INT 3
37692: PLUS
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: PUSH
37702: LD_VAR 0 1
37706: PUSH
37707: LD_INT 4
37709: PLUS
37710: PUSH
37711: LD_VAR 0 2
37715: PUSH
37716: LD_INT 4
37718: PLUS
37719: PUSH
37720: LD_INT 5
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: ST_TO_ADDR
// end ; 2 :
37735: GO 38294
37737: LD_INT 2
37739: DOUBLE
37740: EQUAL
37741: IFTRUE 37745
37743: GO 37874
37745: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37746: LD_ADDR_VAR 0 5
37750: PUSH
37751: LD_VAR 0 1
37755: PUSH
37756: LD_VAR 0 2
37760: PUSH
37761: LD_INT 3
37763: MINUS
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: PUSH
37773: LD_VAR 0 1
37777: PUSH
37778: LD_INT 4
37780: PLUS
37781: PUSH
37782: LD_VAR 0 2
37786: PUSH
37787: LD_INT 4
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: PUSH
37795: LD_VAR 0 1
37799: PUSH
37800: LD_VAR 0 2
37804: PUSH
37805: LD_INT 4
37807: PLUS
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: PUSH
37817: LD_VAR 0 1
37821: PUSH
37822: LD_INT 3
37824: MINUS
37825: PUSH
37826: LD_VAR 0 2
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: PUSH
37839: LD_VAR 0 1
37843: PUSH
37844: LD_INT 4
37846: MINUS
37847: PUSH
37848: LD_VAR 0 2
37852: PUSH
37853: LD_INT 4
37855: MINUS
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// end ; 3 :
37872: GO 38294
37874: LD_INT 3
37876: DOUBLE
37877: EQUAL
37878: IFTRUE 37882
37880: GO 38015
37882: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37883: LD_ADDR_VAR 0 5
37887: PUSH
37888: LD_VAR 0 1
37892: PUSH
37893: LD_INT 3
37895: PLUS
37896: PUSH
37897: LD_VAR 0 2
37901: PUSH
37902: LD_INT 4
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: LD_VAR 0 1
37914: PUSH
37915: LD_INT 4
37917: PLUS
37918: PUSH
37919: LD_VAR 0 2
37923: PUSH
37924: LD_INT 4
37926: PLUS
37927: PUSH
37928: LD_INT 5
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: PUSH
37936: LD_VAR 0 1
37940: PUSH
37941: LD_INT 4
37943: MINUS
37944: PUSH
37945: LD_VAR 0 2
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: PUSH
37958: LD_VAR 0 1
37962: PUSH
37963: LD_VAR 0 2
37967: PUSH
37968: LD_INT 4
37970: MINUS
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: PUSH
37980: LD_VAR 0 1
37984: PUSH
37985: LD_INT 3
37987: MINUS
37988: PUSH
37989: LD_VAR 0 2
37993: PUSH
37994: LD_INT 3
37996: MINUS
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: ST_TO_ADDR
// end ; 4 :
38013: GO 38294
38015: LD_INT 4
38017: DOUBLE
38018: EQUAL
38019: IFTRUE 38023
38021: GO 38156
38023: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38024: LD_ADDR_VAR 0 5
38028: PUSH
38029: LD_VAR 0 1
38033: PUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 4
38041: PLUS
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: PUSH
38051: LD_VAR 0 1
38055: PUSH
38056: LD_INT 3
38058: PLUS
38059: PUSH
38060: LD_VAR 0 2
38064: PUSH
38065: LD_INT 3
38067: PLUS
38068: PUSH
38069: LD_INT 5
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: LD_VAR 0 1
38081: PUSH
38082: LD_INT 4
38084: PLUS
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_INT 4
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: PUSH
38099: LD_VAR 0 1
38103: PUSH
38104: LD_VAR 0 2
38108: PUSH
38109: LD_INT 3
38111: MINUS
38112: PUSH
38113: LD_INT 3
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: PUSH
38121: LD_VAR 0 1
38125: PUSH
38126: LD_INT 4
38128: MINUS
38129: PUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 4
38137: MINUS
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// end ; 5 :
38154: GO 38294
38156: LD_INT 5
38158: DOUBLE
38159: EQUAL
38160: IFTRUE 38164
38162: GO 38293
38164: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38165: LD_ADDR_VAR 0 5
38169: PUSH
38170: LD_VAR 0 1
38174: PUSH
38175: LD_INT 4
38177: MINUS
38178: PUSH
38179: LD_VAR 0 2
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: PUSH
38192: LD_VAR 0 1
38196: PUSH
38197: LD_VAR 0 2
38201: PUSH
38202: LD_INT 4
38204: MINUS
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: PUSH
38214: LD_VAR 0 1
38218: PUSH
38219: LD_INT 4
38221: PLUS
38222: PUSH
38223: LD_VAR 0 2
38227: PUSH
38228: LD_INT 4
38230: PLUS
38231: PUSH
38232: LD_INT 5
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: LD_VAR 0 1
38244: PUSH
38245: LD_INT 3
38247: PLUS
38248: PUSH
38249: LD_VAR 0 2
38253: PUSH
38254: LD_INT 4
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: PUSH
38262: LD_VAR 0 1
38266: PUSH
38267: LD_VAR 0 2
38271: PUSH
38272: LD_INT 3
38274: PLUS
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
// end ; end ;
38291: GO 38294
38293: POP
// result := list ;
38294: LD_ADDR_VAR 0 4
38298: PUSH
38299: LD_VAR 0 5
38303: ST_TO_ADDR
// end ;
38304: LD_VAR 0 4
38308: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
38313: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38314: LD_VAR 0 1
38318: NOT
38319: IFTRUE 38347
38321: PUSH
38322: LD_VAR 0 2
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 4
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: IN
38345: NOT
38346: OR
38347: IFFALSE 38351
// exit ;
38349: GO 38434
// tmp := [ ] ;
38351: LD_ADDR_VAR 0 5
38355: PUSH
38356: EMPTY
38357: ST_TO_ADDR
// for i in units do
38358: LD_ADDR_VAR 0 4
38362: PUSH
38363: LD_VAR 0 1
38367: PUSH
38368: FOR_IN
38369: IFFALSE 38403
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_VAR 0 5
38380: PPUSH
38381: LD_VAR 0 4
38385: PPUSH
38386: LD_VAR 0 2
38390: PPUSH
38391: CALL_OW 259
38395: PPUSH
38396: CALL 39829 0 2
38400: ST_TO_ADDR
38401: GO 38368
38403: POP
38404: POP
// if not tmp then
38405: LD_VAR 0 5
38409: NOT
38410: IFFALSE 38414
// exit ;
38412: GO 38434
// result := SortListByListDesc ( units , tmp ) ;
38414: LD_ADDR_VAR 0 3
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: LD_VAR 0 5
38428: PPUSH
38429: CALL_OW 77
38433: ST_TO_ADDR
// end ;
38434: LD_VAR 0 3
38438: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38439: LD_INT 0
38441: PPUSH
38442: PPUSH
38443: PPUSH
// result := false ;
38444: LD_ADDR_VAR 0 3
38448: PUSH
38449: LD_INT 0
38451: ST_TO_ADDR
// if not building then
38452: LD_VAR 0 2
38456: NOT
38457: IFFALSE 38461
// exit ;
38459: GO 38605
// x := GetX ( building ) ;
38461: LD_ADDR_VAR 0 4
38465: PUSH
38466: LD_VAR 0 2
38470: PPUSH
38471: CALL_OW 250
38475: ST_TO_ADDR
// y := GetY ( building ) ;
38476: LD_ADDR_VAR 0 5
38480: PUSH
38481: LD_VAR 0 2
38485: PPUSH
38486: CALL_OW 251
38490: ST_TO_ADDR
// if not x or not y then
38491: LD_VAR 0 4
38495: NOT
38496: IFTRUE 38505
38498: PUSH
38499: LD_VAR 0 5
38503: NOT
38504: OR
38505: IFFALSE 38509
// exit ;
38507: GO 38605
// if GetTaskList ( unit ) then
38509: LD_VAR 0 1
38513: PPUSH
38514: CALL_OW 437
38518: IFFALSE 38605
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38520: LD_STRING e
38522: PUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL_OW 437
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PUSH
38537: LD_INT 1
38539: ARRAY
38540: EQUAL
38541: IFFALSE 38568
38543: PUSH
38544: LD_VAR 0 4
38548: PUSH
38549: LD_VAR 0 1
38553: PPUSH
38554: CALL_OW 437
38558: PUSH
38559: LD_INT 1
38561: ARRAY
38562: PUSH
38563: LD_INT 2
38565: ARRAY
38566: EQUAL
38567: AND
38568: IFFALSE 38595
38570: PUSH
38571: LD_VAR 0 5
38575: PUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 437
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: PUSH
38590: LD_INT 3
38592: ARRAY
38593: EQUAL
38594: AND
38595: IFFALSE 38605
// result := true end ;
38597: LD_ADDR_VAR 0 3
38601: PUSH
38602: LD_INT 1
38604: ST_TO_ADDR
// end ;
38605: LD_VAR 0 3
38609: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38610: LD_INT 0
38612: PPUSH
// result := false ;
38613: LD_ADDR_VAR 0 4
38617: PUSH
38618: LD_INT 0
38620: ST_TO_ADDR
// if GetTaskList ( unit ) then
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 437
38630: IFFALSE 38717
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38632: LD_STRING M
38634: PUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 437
38644: PUSH
38645: LD_INT 1
38647: ARRAY
38648: PUSH
38649: LD_INT 1
38651: ARRAY
38652: EQUAL
38653: IFFALSE 38680
38655: PUSH
38656: LD_VAR 0 2
38660: PUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 437
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: PUSH
38675: LD_INT 2
38677: ARRAY
38678: EQUAL
38679: AND
38680: IFFALSE 38707
38682: PUSH
38683: LD_VAR 0 3
38687: PUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 437
38697: PUSH
38698: LD_INT 1
38700: ARRAY
38701: PUSH
38702: LD_INT 3
38704: ARRAY
38705: EQUAL
38706: AND
38707: IFFALSE 38717
// result := true ;
38709: LD_ADDR_VAR 0 4
38713: PUSH
38714: LD_INT 1
38716: ST_TO_ADDR
// end ; end ;
38717: LD_VAR 0 4
38721: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38722: LD_INT 0
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
// if not unit or not area then
38728: LD_VAR 0 1
38732: NOT
38733: IFTRUE 38742
38735: PUSH
38736: LD_VAR 0 2
38740: NOT
38741: OR
38742: IFFALSE 38746
// exit ;
38744: GO 38922
// tmp := AreaToList ( area , i ) ;
38746: LD_ADDR_VAR 0 6
38750: PUSH
38751: LD_VAR 0 2
38755: PPUSH
38756: LD_VAR 0 5
38760: PPUSH
38761: CALL_OW 517
38765: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: DOUBLE
38772: LD_INT 1
38774: DEC
38775: ST_TO_ADDR
38776: LD_VAR 0 6
38780: PUSH
38781: LD_INT 1
38783: ARRAY
38784: PUSH
38785: FOR_TO
38786: IFFALSE 38920
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38788: LD_ADDR_VAR 0 7
38792: PUSH
38793: LD_VAR 0 6
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PUSH
38802: LD_VAR 0 5
38806: ARRAY
38807: PUSH
38808: LD_VAR 0 6
38812: PUSH
38813: LD_INT 2
38815: ARRAY
38816: PUSH
38817: LD_VAR 0 5
38821: ARRAY
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38827: LD_INT 92
38829: PUSH
38830: LD_VAR 0 7
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PUSH
38839: LD_VAR 0 7
38843: PUSH
38844: LD_INT 2
38846: ARRAY
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: PPUSH
38857: CALL_OW 69
38861: PUSH
38862: LD_INT 0
38864: EQUAL
38865: IFFALSE 38918
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38867: LD_VAR 0 1
38871: PPUSH
38872: LD_VAR 0 7
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 7
38885: PUSH
38886: LD_INT 2
38888: ARRAY
38889: PPUSH
38890: LD_VAR 0 3
38894: PPUSH
38895: CALL_OW 48
// result := IsPlaced ( unit ) ;
38899: LD_ADDR_VAR 0 4
38903: PUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL_OW 305
38913: ST_TO_ADDR
// exit ;
38914: POP
38915: POP
38916: GO 38922
// end ; end ;
38918: GO 38785
38920: POP
38921: POP
// end ;
38922: LD_VAR 0 4
38926: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38927: LD_INT 0
38929: PPUSH
38930: PPUSH
38931: PPUSH
// if not side or side > 8 then
38932: LD_VAR 0 1
38936: NOT
38937: IFTRUE 38949
38939: PUSH
38940: LD_VAR 0 1
38944: PUSH
38945: LD_INT 8
38947: GREATER
38948: OR
38949: IFFALSE 38953
// exit ;
38951: GO 39140
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38953: LD_ADDR_VAR 0 4
38957: PUSH
38958: LD_INT 22
38960: PUSH
38961: LD_VAR 0 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 21
38972: PUSH
38973: LD_INT 3
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PPUSH
38984: CALL_OW 69
38988: ST_TO_ADDR
// if not tmp then
38989: LD_VAR 0 4
38993: NOT
38994: IFFALSE 38998
// exit ;
38996: GO 39140
// enable_addtolog := true ;
38998: LD_ADDR_OWVAR 81
39002: PUSH
39003: LD_INT 1
39005: ST_TO_ADDR
// AddToLog ( [ ) ;
39006: LD_STRING [
39008: PPUSH
39009: CALL_OW 561
// for i in tmp do
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_VAR 0 4
39022: PUSH
39023: FOR_IN
39024: IFFALSE 39131
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39026: LD_STRING [
39028: PUSH
39029: LD_VAR 0 3
39033: PPUSH
39034: CALL_OW 266
39038: STR
39039: PUSH
39040: LD_STRING , 
39042: STR
39043: PUSH
39044: LD_VAR 0 3
39048: PPUSH
39049: CALL_OW 250
39053: STR
39054: PUSH
39055: LD_STRING , 
39057: STR
39058: PUSH
39059: LD_VAR 0 3
39063: PPUSH
39064: CALL_OW 251
39068: STR
39069: PUSH
39070: LD_STRING , 
39072: STR
39073: PUSH
39074: LD_VAR 0 3
39078: PPUSH
39079: CALL_OW 254
39083: STR
39084: PUSH
39085: LD_STRING , 
39087: STR
39088: PUSH
39089: LD_VAR 0 3
39093: PPUSH
39094: LD_INT 1
39096: PPUSH
39097: CALL_OW 268
39101: STR
39102: PUSH
39103: LD_STRING , 
39105: STR
39106: PUSH
39107: LD_VAR 0 3
39111: PPUSH
39112: LD_INT 2
39114: PPUSH
39115: CALL_OW 268
39119: STR
39120: PUSH
39121: LD_STRING ],
39123: STR
39124: PPUSH
39125: CALL_OW 561
// end ;
39129: GO 39023
39131: POP
39132: POP
// AddToLog ( ]; ) ;
39133: LD_STRING ];
39135: PPUSH
39136: CALL_OW 561
// end ;
39140: LD_VAR 0 2
39144: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39145: LD_INT 0
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
// if not area or not rate or not max then
39152: LD_VAR 0 1
39156: NOT
39157: IFTRUE 39166
39159: PUSH
39160: LD_VAR 0 2
39164: NOT
39165: OR
39166: IFTRUE 39175
39168: PUSH
39169: LD_VAR 0 4
39173: NOT
39174: OR
39175: IFFALSE 39179
// exit ;
39177: GO 39368
// while 1 do
39179: LD_INT 1
39181: IFFALSE 39368
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39183: LD_ADDR_VAR 0 9
39187: PUSH
39188: LD_VAR 0 1
39192: PPUSH
39193: LD_INT 1
39195: PPUSH
39196: CALL_OW 287
39200: PUSH
39201: LD_INT 10
39203: MUL
39204: ST_TO_ADDR
// r := rate / 10 ;
39205: LD_ADDR_VAR 0 7
39209: PUSH
39210: LD_VAR 0 2
39214: PUSH
39215: LD_INT 10
39217: DIVREAL
39218: ST_TO_ADDR
// time := 1 1$00 ;
39219: LD_ADDR_VAR 0 8
39223: PUSH
39224: LD_INT 2100
39226: ST_TO_ADDR
// if amount < min then
39227: LD_VAR 0 9
39231: PUSH
39232: LD_VAR 0 3
39236: LESS
39237: IFFALSE 39255
// r := r * 2 else
39239: LD_ADDR_VAR 0 7
39243: PUSH
39244: LD_VAR 0 7
39248: PUSH
39249: LD_INT 2
39251: MUL
39252: ST_TO_ADDR
39253: GO 39281
// if amount > max then
39255: LD_VAR 0 9
39259: PUSH
39260: LD_VAR 0 4
39264: GREATER
39265: IFFALSE 39281
// r := r / 2 ;
39267: LD_ADDR_VAR 0 7
39271: PUSH
39272: LD_VAR 0 7
39276: PUSH
39277: LD_INT 2
39279: DIVREAL
39280: ST_TO_ADDR
// time := time / r ;
39281: LD_ADDR_VAR 0 8
39285: PUSH
39286: LD_VAR 0 8
39290: PUSH
39291: LD_VAR 0 7
39295: DIVREAL
39296: ST_TO_ADDR
// if time < 0 then
39297: LD_VAR 0 8
39301: PUSH
39302: LD_INT 0
39304: LESS
39305: IFFALSE 39322
// time := time * - 1 ;
39307: LD_ADDR_VAR 0 8
39311: PUSH
39312: LD_VAR 0 8
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: MUL
39321: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39322: LD_VAR 0 8
39326: PUSH
39327: LD_INT 35
39329: PPUSH
39330: LD_INT 875
39332: PPUSH
39333: CALL_OW 12
39337: PLUS
39338: PPUSH
39339: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39343: LD_INT 1
39345: PPUSH
39346: LD_INT 5
39348: PPUSH
39349: CALL_OW 12
39353: PPUSH
39354: LD_VAR 0 1
39358: PPUSH
39359: LD_INT 1
39361: PPUSH
39362: CALL_OW 55
// end ;
39366: GO 39179
// end ;
39368: LD_VAR 0 5
39372: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39373: LD_INT 0
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
// if not turrets or not factories then
39383: LD_VAR 0 1
39387: NOT
39388: IFTRUE 39397
39390: PUSH
39391: LD_VAR 0 2
39395: NOT
39396: OR
39397: IFFALSE 39401
// exit ;
39399: GO 39708
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39401: LD_ADDR_VAR 0 10
39405: PUSH
39406: LD_INT 5
39408: PUSH
39409: LD_INT 6
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 4
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: LD_INT 5
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 24
39443: PUSH
39444: LD_INT 25
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 23
39453: PUSH
39454: LD_INT 27
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 42
39467: PUSH
39468: LD_INT 43
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 44
39477: PUSH
39478: LD_INT 46
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 45
39487: PUSH
39488: LD_INT 47
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: ST_TO_ADDR
// result := [ ] ;
39505: LD_ADDR_VAR 0 3
39509: PUSH
39510: EMPTY
39511: ST_TO_ADDR
// for i in turrets do
39512: LD_ADDR_VAR 0 4
39516: PUSH
39517: LD_VAR 0 1
39521: PUSH
39522: FOR_IN
39523: IFFALSE 39706
// begin nat := GetNation ( i ) ;
39525: LD_ADDR_VAR 0 7
39529: PUSH
39530: LD_VAR 0 4
39534: PPUSH
39535: CALL_OW 248
39539: ST_TO_ADDR
// weapon := 0 ;
39540: LD_ADDR_VAR 0 8
39544: PUSH
39545: LD_INT 0
39547: ST_TO_ADDR
// if not nat then
39548: LD_VAR 0 7
39552: NOT
39553: IFFALSE 39557
// continue ;
39555: GO 39522
// for j in list [ nat ] do
39557: LD_ADDR_VAR 0 5
39561: PUSH
39562: LD_VAR 0 10
39566: PUSH
39567: LD_VAR 0 7
39571: ARRAY
39572: PUSH
39573: FOR_IN
39574: IFFALSE 39615
// if GetBWeapon ( i ) = j [ 1 ] then
39576: LD_VAR 0 4
39580: PPUSH
39581: CALL_OW 269
39585: PUSH
39586: LD_VAR 0 5
39590: PUSH
39591: LD_INT 1
39593: ARRAY
39594: EQUAL
39595: IFFALSE 39613
// begin weapon := j [ 2 ] ;
39597: LD_ADDR_VAR 0 8
39601: PUSH
39602: LD_VAR 0 5
39606: PUSH
39607: LD_INT 2
39609: ARRAY
39610: ST_TO_ADDR
// break ;
39611: GO 39615
// end ;
39613: GO 39573
39615: POP
39616: POP
// if not weapon then
39617: LD_VAR 0 8
39621: NOT
39622: IFFALSE 39626
// continue ;
39624: GO 39522
// for k in factories do
39626: LD_ADDR_VAR 0 6
39630: PUSH
39631: LD_VAR 0 2
39635: PUSH
39636: FOR_IN
39637: IFFALSE 39702
// begin weapons := AvailableWeaponList ( k ) ;
39639: LD_ADDR_VAR 0 9
39643: PUSH
39644: LD_VAR 0 6
39648: PPUSH
39649: CALL_OW 478
39653: ST_TO_ADDR
// if not weapons then
39654: LD_VAR 0 9
39658: NOT
39659: IFFALSE 39663
// continue ;
39661: GO 39636
// if weapon in weapons then
39663: LD_VAR 0 8
39667: PUSH
39668: LD_VAR 0 9
39672: IN
39673: IFFALSE 39700
// begin result := [ i , weapon ] ;
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_VAR 0 4
39684: PUSH
39685: LD_VAR 0 8
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: ST_TO_ADDR
// exit ;
39694: POP
39695: POP
39696: POP
39697: POP
39698: GO 39708
// end ; end ;
39700: GO 39636
39702: POP
39703: POP
// end ;
39704: GO 39522
39706: POP
39707: POP
// end ;
39708: LD_VAR 0 3
39712: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39713: LD_INT 0
39715: PPUSH
// if not side or side > 8 then
39716: LD_VAR 0 3
39720: NOT
39721: IFTRUE 39733
39723: PUSH
39724: LD_VAR 0 3
39728: PUSH
39729: LD_INT 8
39731: GREATER
39732: OR
39733: IFFALSE 39737
// exit ;
39735: GO 39796
// if not range then
39737: LD_VAR 0 4
39741: NOT
39742: IFFALSE 39753
// range := - 12 ;
39744: LD_ADDR_VAR 0 4
39748: PUSH
39749: LD_INT 12
39751: NEG
39752: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39753: LD_VAR 0 1
39757: PPUSH
39758: LD_VAR 0 2
39762: PPUSH
39763: LD_VAR 0 3
39767: PPUSH
39768: LD_VAR 0 4
39772: PPUSH
39773: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39777: LD_VAR 0 1
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_VAR 0 3
39791: PPUSH
39792: CALL_OW 331
// end ;
39796: LD_VAR 0 5
39800: RET
// export function Video ( mode ) ; begin
39801: LD_INT 0
39803: PPUSH
// ingame_video = mode ;
39804: LD_ADDR_OWVAR 52
39808: PUSH
39809: LD_VAR 0 1
39813: ST_TO_ADDR
// interface_hidden = mode ;
39814: LD_ADDR_OWVAR 54
39818: PUSH
39819: LD_VAR 0 1
39823: ST_TO_ADDR
// end ;
39824: LD_VAR 0 2
39828: RET
// export function Join ( array , element ) ; begin
39829: LD_INT 0
39831: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39832: LD_ADDR_VAR 0 3
39836: PUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: LD_VAR 0 1
39846: PUSH
39847: LD_INT 1
39849: PLUS
39850: PPUSH
39851: LD_VAR 0 2
39855: PPUSH
39856: CALL_OW 1
39860: ST_TO_ADDR
// end ;
39861: LD_VAR 0 3
39865: RET
// export function JoinUnion ( array , element ) ; begin
39866: LD_INT 0
39868: PPUSH
// result := array union element ;
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_VAR 0 1
39878: PUSH
39879: LD_VAR 0 2
39883: UNION
39884: ST_TO_ADDR
// end ;
39885: LD_VAR 0 3
39889: RET
// export function GetBehemoths ( side ) ; begin
39890: LD_INT 0
39892: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39893: LD_ADDR_VAR 0 2
39897: PUSH
39898: LD_INT 22
39900: PUSH
39901: LD_VAR 0 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 31
39912: PUSH
39913: LD_INT 25
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PPUSH
39924: CALL_OW 69
39928: ST_TO_ADDR
// end ;
39929: LD_VAR 0 2
39933: RET
// export function Shuffle ( array ) ; var i , index ; begin
39934: LD_INT 0
39936: PPUSH
39937: PPUSH
39938: PPUSH
// result := [ ] ;
39939: LD_ADDR_VAR 0 2
39943: PUSH
39944: EMPTY
39945: ST_TO_ADDR
// if not array then
39946: LD_VAR 0 1
39950: NOT
39951: IFFALSE 39955
// exit ;
39953: GO 40054
// Randomize ;
39955: CALL_OW 10
// for i = array downto 1 do
39959: LD_ADDR_VAR 0 3
39963: PUSH
39964: DOUBLE
39965: LD_VAR 0 1
39969: INC
39970: ST_TO_ADDR
39971: LD_INT 1
39973: PUSH
39974: FOR_DOWNTO
39975: IFFALSE 40052
// begin index := rand ( 1 , array ) ;
39977: LD_ADDR_VAR 0 4
39981: PUSH
39982: LD_INT 1
39984: PPUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 12
39994: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39995: LD_ADDR_VAR 0 2
39999: PUSH
40000: LD_VAR 0 2
40004: PPUSH
40005: LD_VAR 0 2
40009: PUSH
40010: LD_INT 1
40012: PLUS
40013: PPUSH
40014: LD_VAR 0 1
40018: PUSH
40019: LD_VAR 0 4
40023: ARRAY
40024: PPUSH
40025: CALL_OW 2
40029: ST_TO_ADDR
// array := Delete ( array , index ) ;
40030: LD_ADDR_VAR 0 1
40034: PUSH
40035: LD_VAR 0 1
40039: PPUSH
40040: LD_VAR 0 4
40044: PPUSH
40045: CALL_OW 3
40049: ST_TO_ADDR
// end ;
40050: GO 39974
40052: POP
40053: POP
// end ;
40054: LD_VAR 0 2
40058: RET
// export function GetBaseMaterials ( base ) ; begin
40059: LD_INT 0
40061: PPUSH
// result := [ 0 , 0 , 0 ] ;
40062: LD_ADDR_VAR 0 2
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: ST_TO_ADDR
// if not base then
40081: LD_VAR 0 1
40085: NOT
40086: IFFALSE 40090
// exit ;
40088: GO 40139
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40090: LD_ADDR_VAR 0 2
40094: PUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 1
40102: PPUSH
40103: CALL_OW 275
40107: PUSH
40108: LD_VAR 0 1
40112: PPUSH
40113: LD_INT 2
40115: PPUSH
40116: CALL_OW 275
40120: PUSH
40121: LD_VAR 0 1
40125: PPUSH
40126: LD_INT 3
40128: PPUSH
40129: CALL_OW 275
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
// end ;
40139: LD_VAR 0 2
40143: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40144: LD_INT 0
40146: PPUSH
40147: PPUSH
// result := array ;
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_VAR 0 1
40157: ST_TO_ADDR
// if size >= result then
40158: LD_VAR 0 2
40162: PUSH
40163: LD_VAR 0 3
40167: GREATEREQUAL
40168: IFFALSE 40172
// exit ;
40170: GO 40222
// if size then
40172: LD_VAR 0 2
40176: IFFALSE 40222
// for i := array downto size do
40178: LD_ADDR_VAR 0 4
40182: PUSH
40183: DOUBLE
40184: LD_VAR 0 1
40188: INC
40189: ST_TO_ADDR
40190: LD_VAR 0 2
40194: PUSH
40195: FOR_DOWNTO
40196: IFFALSE 40220
// result := Delete ( result , result ) ;
40198: LD_ADDR_VAR 0 3
40202: PUSH
40203: LD_VAR 0 3
40207: PPUSH
40208: LD_VAR 0 3
40212: PPUSH
40213: CALL_OW 3
40217: ST_TO_ADDR
40218: GO 40195
40220: POP
40221: POP
// end ;
40222: LD_VAR 0 3
40226: RET
// export function ComExit ( unit ) ; var tmp ; begin
40227: LD_INT 0
40229: PPUSH
40230: PPUSH
// if not IsInUnit ( unit ) then
40231: LD_VAR 0 1
40235: PPUSH
40236: CALL_OW 310
40240: NOT
40241: IFFALSE 40245
// exit ;
40243: GO 40305
// tmp := IsInUnit ( unit ) ;
40245: LD_ADDR_VAR 0 3
40249: PUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 310
40259: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40260: LD_VAR 0 3
40264: PPUSH
40265: CALL_OW 247
40269: PUSH
40270: LD_INT 2
40272: EQUAL
40273: IFFALSE 40286
// ComExitVehicle ( unit ) else
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 121
40284: GO 40295
// ComExitBuilding ( unit ) ;
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 122
// result := tmp ;
40295: LD_ADDR_VAR 0 2
40299: PUSH
40300: LD_VAR 0 3
40304: ST_TO_ADDR
// end ;
40305: LD_VAR 0 2
40309: RET
// export function ComExitAll ( units ) ; var i ; begin
40310: LD_INT 0
40312: PPUSH
40313: PPUSH
// if not units then
40314: LD_VAR 0 1
40318: NOT
40319: IFFALSE 40323
// exit ;
40321: GO 40349
// for i in units do
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_VAR 0 1
40332: PUSH
40333: FOR_IN
40334: IFFALSE 40347
// ComExit ( i ) ;
40336: LD_VAR 0 3
40340: PPUSH
40341: CALL 40227 0 1
40345: GO 40333
40347: POP
40348: POP
// end ;
40349: LD_VAR 0 2
40353: RET
// export function ResetHc ; begin
40354: LD_INT 0
40356: PPUSH
// InitHc ;
40357: CALL_OW 19
// hc_importance := 0 ;
40361: LD_ADDR_OWVAR 32
40365: PUSH
40366: LD_INT 0
40368: ST_TO_ADDR
// end ;
40369: LD_VAR 0 1
40373: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40374: LD_INT 0
40376: PPUSH
40377: PPUSH
40378: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40379: LD_ADDR_VAR 0 6
40383: PUSH
40384: LD_VAR 0 1
40388: PUSH
40389: LD_VAR 0 3
40393: PLUS
40394: PUSH
40395: LD_INT 2
40397: DIV
40398: ST_TO_ADDR
// if _x < 0 then
40399: LD_VAR 0 6
40403: PUSH
40404: LD_INT 0
40406: LESS
40407: IFFALSE 40424
// _x := _x * - 1 ;
40409: LD_ADDR_VAR 0 6
40413: PUSH
40414: LD_VAR 0 6
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: MUL
40423: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40424: LD_ADDR_VAR 0 7
40428: PUSH
40429: LD_VAR 0 2
40433: PUSH
40434: LD_VAR 0 4
40438: PLUS
40439: PUSH
40440: LD_INT 2
40442: DIV
40443: ST_TO_ADDR
// if _y < 0 then
40444: LD_VAR 0 7
40448: PUSH
40449: LD_INT 0
40451: LESS
40452: IFFALSE 40469
// _y := _y * - 1 ;
40454: LD_ADDR_VAR 0 7
40458: PUSH
40459: LD_VAR 0 7
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: MUL
40468: ST_TO_ADDR
// result := [ _x , _y ] ;
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: LD_VAR 0 6
40478: PUSH
40479: LD_VAR 0 7
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// end ;
40488: LD_VAR 0 5
40492: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40493: LD_INT 0
40495: PPUSH
40496: PPUSH
40497: PPUSH
40498: PPUSH
// task := GetTaskList ( unit ) ;
40499: LD_ADDR_VAR 0 7
40503: PUSH
40504: LD_VAR 0 1
40508: PPUSH
40509: CALL_OW 437
40513: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40514: LD_VAR 0 7
40518: NOT
40519: IFFALSE 40538
40521: PUSH
40522: LD_VAR 0 1
40526: PPUSH
40527: LD_VAR 0 2
40531: PPUSH
40532: CALL_OW 308
40536: NOT
40537: AND
40538: IFFALSE 40542
// exit ;
40540: GO 40660
// if IsInArea ( unit , area ) then
40542: LD_VAR 0 1
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: CALL_OW 308
40556: IFFALSE 40574
// begin ComMoveToArea ( unit , goAway ) ;
40558: LD_VAR 0 1
40562: PPUSH
40563: LD_VAR 0 3
40567: PPUSH
40568: CALL_OW 113
// exit ;
40572: GO 40660
// end ; if task [ 1 ] [ 1 ] <> M then
40574: LD_VAR 0 7
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: PUSH
40583: LD_INT 1
40585: ARRAY
40586: PUSH
40587: LD_STRING M
40589: NONEQUAL
40590: IFFALSE 40594
// exit ;
40592: GO 40660
// x := task [ 1 ] [ 2 ] ;
40594: LD_ADDR_VAR 0 5
40598: PUSH
40599: LD_VAR 0 7
40603: PUSH
40604: LD_INT 1
40606: ARRAY
40607: PUSH
40608: LD_INT 2
40610: ARRAY
40611: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40612: LD_ADDR_VAR 0 6
40616: PUSH
40617: LD_VAR 0 7
40621: PUSH
40622: LD_INT 1
40624: ARRAY
40625: PUSH
40626: LD_INT 3
40628: ARRAY
40629: ST_TO_ADDR
// if InArea ( x , y , area ) then
40630: LD_VAR 0 5
40634: PPUSH
40635: LD_VAR 0 6
40639: PPUSH
40640: LD_VAR 0 2
40644: PPUSH
40645: CALL_OW 309
40649: IFFALSE 40660
// ComStop ( unit ) ;
40651: LD_VAR 0 1
40655: PPUSH
40656: CALL_OW 141
// end ;
40660: LD_VAR 0 4
40664: RET
// export function Abs ( value ) ; begin
40665: LD_INT 0
40667: PPUSH
// result := value ;
40668: LD_ADDR_VAR 0 2
40672: PUSH
40673: LD_VAR 0 1
40677: ST_TO_ADDR
// if value < 0 then
40678: LD_VAR 0 1
40682: PUSH
40683: LD_INT 0
40685: LESS
40686: IFFALSE 40703
// result := value * - 1 ;
40688: LD_ADDR_VAR 0 2
40692: PUSH
40693: LD_VAR 0 1
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: MUL
40702: ST_TO_ADDR
// end ;
40703: LD_VAR 0 2
40707: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40708: LD_INT 0
40710: PPUSH
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
// if not unit or not building then
40718: LD_VAR 0 1
40722: NOT
40723: IFTRUE 40732
40725: PUSH
40726: LD_VAR 0 2
40730: NOT
40731: OR
40732: IFFALSE 40736
// exit ;
40734: GO 40964
// x := GetX ( building ) ;
40736: LD_ADDR_VAR 0 4
40740: PUSH
40741: LD_VAR 0 2
40745: PPUSH
40746: CALL_OW 250
40750: ST_TO_ADDR
// y := GetY ( building ) ;
40751: LD_ADDR_VAR 0 6
40755: PUSH
40756: LD_VAR 0 2
40760: PPUSH
40761: CALL_OW 251
40765: ST_TO_ADDR
// d := GetDir ( building ) ;
40766: LD_ADDR_VAR 0 8
40770: PUSH
40771: LD_VAR 0 2
40775: PPUSH
40776: CALL_OW 254
40780: ST_TO_ADDR
// r := 4 ;
40781: LD_ADDR_VAR 0 9
40785: PUSH
40786: LD_INT 4
40788: ST_TO_ADDR
// for i := 1 to 5 do
40789: LD_ADDR_VAR 0 10
40793: PUSH
40794: DOUBLE
40795: LD_INT 1
40797: DEC
40798: ST_TO_ADDR
40799: LD_INT 5
40801: PUSH
40802: FOR_TO
40803: IFFALSE 40962
// begin _x := ShiftX ( x , d , r + i ) ;
40805: LD_ADDR_VAR 0 5
40809: PUSH
40810: LD_VAR 0 4
40814: PPUSH
40815: LD_VAR 0 8
40819: PPUSH
40820: LD_VAR 0 9
40824: PUSH
40825: LD_VAR 0 10
40829: PLUS
40830: PPUSH
40831: CALL_OW 272
40835: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40836: LD_ADDR_VAR 0 7
40840: PUSH
40841: LD_VAR 0 6
40845: PPUSH
40846: LD_VAR 0 8
40850: PPUSH
40851: LD_VAR 0 9
40855: PUSH
40856: LD_VAR 0 10
40860: PLUS
40861: PPUSH
40862: CALL_OW 273
40866: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40867: LD_VAR 0 5
40871: PPUSH
40872: LD_VAR 0 7
40876: PPUSH
40877: CALL_OW 488
40881: IFFALSE 40916
40883: PUSH
40884: LD_VAR 0 5
40888: PPUSH
40889: LD_VAR 0 7
40893: PPUSH
40894: CALL_OW 428
40898: PPUSH
40899: CALL_OW 247
40903: PUSH
40904: LD_INT 3
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: IN
40914: NOT
40915: AND
40916: IFFALSE 40960
// begin ComMoveXY ( unit , _x , _y ) ;
40918: LD_VAR 0 1
40922: PPUSH
40923: LD_VAR 0 5
40927: PPUSH
40928: LD_VAR 0 7
40932: PPUSH
40933: CALL_OW 111
// result := [ _x , _y ] ;
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: LD_VAR 0 5
40946: PUSH
40947: LD_VAR 0 7
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: ST_TO_ADDR
// exit ;
40956: POP
40957: POP
40958: GO 40964
// end ; end ;
40960: GO 40802
40962: POP
40963: POP
// end ;
40964: LD_VAR 0 3
40968: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40969: LD_INT 0
40971: PPUSH
40972: PPUSH
40973: PPUSH
// result := 0 ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_INT 0
40981: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40982: LD_VAR 0 1
40986: PUSH
40987: LD_INT 0
40989: LESS
40990: IFTRUE 41002
40992: PUSH
40993: LD_VAR 0 1
40997: PUSH
40998: LD_INT 8
41000: GREATER
41001: OR
41002: IFTRUE 41014
41004: PUSH
41005: LD_VAR 0 2
41009: PUSH
41010: LD_INT 0
41012: LESS
41013: OR
41014: IFTRUE 41026
41016: PUSH
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 8
41024: GREATER
41025: OR
41026: IFFALSE 41030
// exit ;
41028: GO 41105
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41030: LD_ADDR_VAR 0 4
41034: PUSH
41035: LD_INT 22
41037: PUSH
41038: LD_VAR 0 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PPUSH
41047: CALL_OW 69
41051: PUSH
41052: FOR_IN
41053: IFFALSE 41103
// begin un := UnitShoot ( i ) ;
41055: LD_ADDR_VAR 0 5
41059: PUSH
41060: LD_VAR 0 4
41064: PPUSH
41065: CALL_OW 504
41069: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41070: LD_VAR 0 5
41074: PPUSH
41075: CALL_OW 255
41079: PUSH
41080: LD_VAR 0 1
41084: EQUAL
41085: IFFALSE 41101
// begin result := un ;
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_VAR 0 5
41096: ST_TO_ADDR
// exit ;
41097: POP
41098: POP
41099: GO 41105
// end ; end ;
41101: GO 41052
41103: POP
41104: POP
// end ;
41105: LD_VAR 0 3
41109: RET
// export function GetCargoBay ( units ) ; begin
41110: LD_INT 0
41112: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41113: LD_ADDR_VAR 0 2
41117: PUSH
41118: LD_VAR 0 1
41122: PPUSH
41123: LD_INT 2
41125: PUSH
41126: LD_INT 34
41128: PUSH
41129: LD_INT 12
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 34
41138: PUSH
41139: LD_INT 51
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 34
41148: PUSH
41149: LD_INT 32
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 34
41158: PUSH
41159: LD_INT 89
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: PPUSH
41173: CALL_OW 72
41177: ST_TO_ADDR
// end ;
41178: LD_VAR 0 2
41182: RET
// export function Negate ( value ) ; begin
41183: LD_INT 0
41185: PPUSH
// result := not value ;
41186: LD_ADDR_VAR 0 2
41190: PUSH
41191: LD_VAR 0 1
41195: NOT
41196: ST_TO_ADDR
// end ;
41197: LD_VAR 0 2
41201: RET
// export function Inc ( value ) ; begin
41202: LD_INT 0
41204: PPUSH
// result := value + 1 ;
41205: LD_ADDR_VAR 0 2
41209: PUSH
41210: LD_VAR 0 1
41214: PUSH
41215: LD_INT 1
41217: PLUS
41218: ST_TO_ADDR
// end ;
41219: LD_VAR 0 2
41223: RET
// export function Dec ( value ) ; begin
41224: LD_INT 0
41226: PPUSH
// result := value - 1 ;
41227: LD_ADDR_VAR 0 2
41231: PUSH
41232: LD_VAR 0 1
41236: PUSH
41237: LD_INT 1
41239: MINUS
41240: ST_TO_ADDR
// end ;
41241: LD_VAR 0 2
41245: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41246: LD_INT 0
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41256: LD_VAR 0 1
41260: PPUSH
41261: LD_VAR 0 2
41265: PPUSH
41266: CALL_OW 488
41270: NOT
41271: IFTRUE 41290
41273: PUSH
41274: LD_VAR 0 3
41278: PPUSH
41279: LD_VAR 0 4
41283: PPUSH
41284: CALL_OW 488
41288: NOT
41289: OR
41290: IFFALSE 41303
// begin result := - 1 ;
41292: LD_ADDR_VAR 0 5
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: ST_TO_ADDR
// exit ;
41301: GO 41538
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41303: LD_ADDR_VAR 0 12
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_VAR 0 2
41317: PPUSH
41318: LD_VAR 0 3
41322: PPUSH
41323: LD_VAR 0 4
41327: PPUSH
41328: CALL 40374 0 4
41332: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41333: LD_ADDR_VAR 0 11
41337: PUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: LD_VAR 0 2
41347: PPUSH
41348: LD_VAR 0 12
41352: PUSH
41353: LD_INT 1
41355: ARRAY
41356: PPUSH
41357: LD_VAR 0 12
41361: PUSH
41362: LD_INT 2
41364: ARRAY
41365: PPUSH
41366: CALL_OW 298
41370: ST_TO_ADDR
// distance := 9999 ;
41371: LD_ADDR_VAR 0 10
41375: PUSH
41376: LD_INT 9999
41378: ST_TO_ADDR
// for i := 0 to 5 do
41379: LD_ADDR_VAR 0 6
41383: PUSH
41384: DOUBLE
41385: LD_INT 0
41387: DEC
41388: ST_TO_ADDR
41389: LD_INT 5
41391: PUSH
41392: FOR_TO
41393: IFFALSE 41536
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41395: LD_ADDR_VAR 0 7
41399: PUSH
41400: LD_VAR 0 1
41404: PPUSH
41405: LD_VAR 0 6
41409: PPUSH
41410: LD_VAR 0 11
41414: PPUSH
41415: CALL_OW 272
41419: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41420: LD_ADDR_VAR 0 8
41424: PUSH
41425: LD_VAR 0 2
41429: PPUSH
41430: LD_VAR 0 6
41434: PPUSH
41435: LD_VAR 0 11
41439: PPUSH
41440: CALL_OW 273
41444: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41445: LD_VAR 0 7
41449: PPUSH
41450: LD_VAR 0 8
41454: PPUSH
41455: CALL_OW 488
41459: NOT
41460: IFFALSE 41464
// continue ;
41462: GO 41392
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41464: LD_ADDR_VAR 0 9
41468: PUSH
41469: LD_VAR 0 12
41473: PUSH
41474: LD_INT 1
41476: ARRAY
41477: PPUSH
41478: LD_VAR 0 12
41482: PUSH
41483: LD_INT 2
41485: ARRAY
41486: PPUSH
41487: LD_VAR 0 7
41491: PPUSH
41492: LD_VAR 0 8
41496: PPUSH
41497: CALL_OW 298
41501: ST_TO_ADDR
// if tmp < distance then
41502: LD_VAR 0 9
41506: PUSH
41507: LD_VAR 0 10
41511: LESS
41512: IFFALSE 41534
// begin result := i ;
41514: LD_ADDR_VAR 0 5
41518: PUSH
41519: LD_VAR 0 6
41523: ST_TO_ADDR
// distance := tmp ;
41524: LD_ADDR_VAR 0 10
41528: PUSH
41529: LD_VAR 0 9
41533: ST_TO_ADDR
// end ; end ;
41534: GO 41392
41536: POP
41537: POP
// end ;
41538: LD_VAR 0 5
41542: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41543: LD_INT 0
41545: PPUSH
41546: PPUSH
// if not driver or not IsInUnit ( driver ) then
41547: LD_VAR 0 1
41551: NOT
41552: IFTRUE 41566
41554: PUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: CALL_OW 310
41564: NOT
41565: OR
41566: IFFALSE 41570
// exit ;
41568: GO 41660
// vehicle := IsInUnit ( driver ) ;
41570: LD_ADDR_VAR 0 3
41574: PUSH
41575: LD_VAR 0 1
41579: PPUSH
41580: CALL_OW 310
41584: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41585: LD_VAR 0 1
41589: PPUSH
41590: LD_STRING \
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: PUSH
41620: LD_STRING E
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_VAR 0 3
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PPUSH
41656: CALL_OW 446
// end ;
41660: LD_VAR 0 2
41664: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41665: LD_INT 0
41667: PPUSH
41668: PPUSH
// if not driver or not IsInUnit ( driver ) then
41669: LD_VAR 0 1
41673: NOT
41674: IFTRUE 41688
41676: PUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: CALL_OW 310
41686: NOT
41687: OR
41688: IFFALSE 41692
// exit ;
41690: GO 41782
// vehicle := IsInUnit ( driver ) ;
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 310
41706: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_STRING \
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: PUSH
41742: LD_STRING E
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_VAR 0 3
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PPUSH
41778: CALL_OW 447
// end ;
41782: LD_VAR 0 2
41786: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41787: LD_INT 0
41789: PPUSH
41790: PPUSH
41791: PPUSH
// tmp := [ ] ;
41792: LD_ADDR_VAR 0 5
41796: PUSH
41797: EMPTY
41798: ST_TO_ADDR
// for i in units do
41799: LD_ADDR_VAR 0 4
41803: PUSH
41804: LD_VAR 0 1
41808: PUSH
41809: FOR_IN
41810: IFFALSE 41848
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41812: LD_ADDR_VAR 0 5
41816: PUSH
41817: LD_VAR 0 5
41821: PPUSH
41822: LD_VAR 0 5
41826: PUSH
41827: LD_INT 1
41829: PLUS
41830: PPUSH
41831: LD_VAR 0 4
41835: PPUSH
41836: CALL_OW 256
41840: PPUSH
41841: CALL_OW 2
41845: ST_TO_ADDR
41846: GO 41809
41848: POP
41849: POP
// if not tmp then
41850: LD_VAR 0 5
41854: NOT
41855: IFFALSE 41859
// exit ;
41857: GO 41907
// if asc then
41859: LD_VAR 0 2
41863: IFFALSE 41887
// result := SortListByListAsc ( units , tmp ) else
41865: LD_ADDR_VAR 0 3
41869: PUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: LD_VAR 0 5
41879: PPUSH
41880: CALL_OW 76
41884: ST_TO_ADDR
41885: GO 41907
// result := SortListByListDesc ( units , tmp ) ;
41887: LD_ADDR_VAR 0 3
41891: PUSH
41892: LD_VAR 0 1
41896: PPUSH
41897: LD_VAR 0 5
41901: PPUSH
41902: CALL_OW 77
41906: ST_TO_ADDR
// end ;
41907: LD_VAR 0 3
41911: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41912: LD_INT 0
41914: PPUSH
41915: PPUSH
// task := GetTaskList ( mech ) ;
41916: LD_ADDR_VAR 0 4
41920: PUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 437
41930: ST_TO_ADDR
// if not task then
41931: LD_VAR 0 4
41935: NOT
41936: IFFALSE 41940
// exit ;
41938: GO 41984
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41940: LD_ADDR_VAR 0 3
41944: PUSH
41945: LD_VAR 0 4
41949: PUSH
41950: LD_INT 1
41952: ARRAY
41953: PUSH
41954: LD_INT 1
41956: ARRAY
41957: PUSH
41958: LD_STRING r
41960: EQUAL
41961: IFFALSE 41983
41963: PUSH
41964: LD_VAR 0 4
41968: PUSH
41969: LD_INT 1
41971: ARRAY
41972: PUSH
41973: LD_INT 4
41975: ARRAY
41976: PUSH
41977: LD_VAR 0 2
41981: EQUAL
41982: AND
41983: ST_TO_ADDR
// end ;
41984: LD_VAR 0 3
41988: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41989: LD_INT 0
41991: PPUSH
// SetDir ( unit , d ) ;
41992: LD_VAR 0 1
41996: PPUSH
41997: LD_VAR 0 4
42001: PPUSH
42002: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42006: LD_ADDR_VAR 0 6
42010: PUSH
42011: LD_VAR 0 1
42015: PPUSH
42016: LD_VAR 0 2
42020: PPUSH
42021: LD_VAR 0 3
42025: PPUSH
42026: LD_VAR 0 5
42030: PPUSH
42031: CALL_OW 48
42035: ST_TO_ADDR
// end ;
42036: LD_VAR 0 6
42040: RET
// export function ToNaturalNumber ( number ) ; begin
42041: LD_INT 0
42043: PPUSH
// result := number div 1 ;
42044: LD_ADDR_VAR 0 2
42048: PUSH
42049: LD_VAR 0 1
42053: PUSH
42054: LD_INT 1
42056: DIV
42057: ST_TO_ADDR
// if number < 0 then
42058: LD_VAR 0 1
42062: PUSH
42063: LD_INT 0
42065: LESS
42066: IFFALSE 42076
// result := 0 ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_INT 0
42075: ST_TO_ADDR
// end ;
42076: LD_VAR 0 2
42080: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
42085: PPUSH
// if not buildings then
42086: LD_VAR 0 1
42090: NOT
42091: IFFALSE 42095
// exit ;
42093: GO 42210
// tmp := [ ] ;
42095: LD_ADDR_VAR 0 5
42099: PUSH
42100: EMPTY
42101: ST_TO_ADDR
// for b in buildings do
42102: LD_ADDR_VAR 0 4
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: FOR_IN
42113: IFFALSE 42151
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42115: LD_ADDR_VAR 0 5
42119: PUSH
42120: LD_VAR 0 5
42124: PPUSH
42125: LD_VAR 0 5
42129: PUSH
42130: LD_INT 1
42132: PLUS
42133: PPUSH
42134: LD_VAR 0 4
42138: PPUSH
42139: CALL_OW 266
42143: PPUSH
42144: CALL_OW 1
42148: ST_TO_ADDR
42149: GO 42112
42151: POP
42152: POP
// if not tmp then
42153: LD_VAR 0 5
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42210
// if asc then
42162: LD_VAR 0 2
42166: IFFALSE 42190
// result := SortListByListAsc ( buildings , tmp ) else
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_VAR 0 1
42177: PPUSH
42178: LD_VAR 0 5
42182: PPUSH
42183: CALL_OW 76
42187: ST_TO_ADDR
42188: GO 42210
// result := SortListByListDesc ( buildings , tmp ) ;
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_VAR 0 1
42199: PPUSH
42200: LD_VAR 0 5
42204: PPUSH
42205: CALL_OW 77
42209: ST_TO_ADDR
// end ;
42210: LD_VAR 0 3
42214: RET
// export function SortByClass ( units , class ) ; var un ; begin
42215: LD_INT 0
42217: PPUSH
42218: PPUSH
// if not units or not class then
42219: LD_VAR 0 1
42223: NOT
42224: IFTRUE 42233
42226: PUSH
42227: LD_VAR 0 2
42231: NOT
42232: OR
42233: IFFALSE 42237
// exit ;
42235: GO 42332
// result := [ ] ;
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: EMPTY
42243: ST_TO_ADDR
// for un in units do
42244: LD_ADDR_VAR 0 4
42248: PUSH
42249: LD_VAR 0 1
42253: PUSH
42254: FOR_IN
42255: IFFALSE 42330
// if GetClass ( un ) = class then
42257: LD_VAR 0 4
42261: PPUSH
42262: CALL_OW 257
42266: PUSH
42267: LD_VAR 0 2
42271: EQUAL
42272: IFFALSE 42299
// result := Insert ( result , 1 , un ) else
42274: LD_ADDR_VAR 0 3
42278: PUSH
42279: LD_VAR 0 3
42283: PPUSH
42284: LD_INT 1
42286: PPUSH
42287: LD_VAR 0 4
42291: PPUSH
42292: CALL_OW 2
42296: ST_TO_ADDR
42297: GO 42328
// result := Replace ( result , result + 1 , un ) ;
42299: LD_ADDR_VAR 0 3
42303: PUSH
42304: LD_VAR 0 3
42308: PPUSH
42309: LD_VAR 0 3
42313: PUSH
42314: LD_INT 1
42316: PLUS
42317: PPUSH
42318: LD_VAR 0 4
42322: PPUSH
42323: CALL_OW 1
42327: ST_TO_ADDR
42328: GO 42254
42330: POP
42331: POP
// end ;
42332: LD_VAR 0 3
42336: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
// result := [ ] ;
42346: LD_ADDR_VAR 0 4
42350: PUSH
42351: EMPTY
42352: ST_TO_ADDR
// if x - r < 0 then
42353: LD_VAR 0 1
42357: PUSH
42358: LD_VAR 0 3
42362: MINUS
42363: PUSH
42364: LD_INT 0
42366: LESS
42367: IFFALSE 42379
// min_x := 0 else
42369: LD_ADDR_VAR 0 8
42373: PUSH
42374: LD_INT 0
42376: ST_TO_ADDR
42377: GO 42395
// min_x := x - r ;
42379: LD_ADDR_VAR 0 8
42383: PUSH
42384: LD_VAR 0 1
42388: PUSH
42389: LD_VAR 0 3
42393: MINUS
42394: ST_TO_ADDR
// if y - r < 0 then
42395: LD_VAR 0 2
42399: PUSH
42400: LD_VAR 0 3
42404: MINUS
42405: PUSH
42406: LD_INT 0
42408: LESS
42409: IFFALSE 42421
// min_y := 0 else
42411: LD_ADDR_VAR 0 7
42415: PUSH
42416: LD_INT 0
42418: ST_TO_ADDR
42419: GO 42437
// min_y := y - r ;
42421: LD_ADDR_VAR 0 7
42425: PUSH
42426: LD_VAR 0 2
42430: PUSH
42431: LD_VAR 0 3
42435: MINUS
42436: ST_TO_ADDR
// max_x := x + r ;
42437: LD_ADDR_VAR 0 9
42441: PUSH
42442: LD_VAR 0 1
42446: PUSH
42447: LD_VAR 0 3
42451: PLUS
42452: ST_TO_ADDR
// max_y := y + r ;
42453: LD_ADDR_VAR 0 10
42457: PUSH
42458: LD_VAR 0 2
42462: PUSH
42463: LD_VAR 0 3
42467: PLUS
42468: ST_TO_ADDR
// for _x = min_x to max_x do
42469: LD_ADDR_VAR 0 5
42473: PUSH
42474: DOUBLE
42475: LD_VAR 0 8
42479: DEC
42480: ST_TO_ADDR
42481: LD_VAR 0 9
42485: PUSH
42486: FOR_TO
42487: IFFALSE 42588
// for _y = min_y to max_y do
42489: LD_ADDR_VAR 0 6
42493: PUSH
42494: DOUBLE
42495: LD_VAR 0 7
42499: DEC
42500: ST_TO_ADDR
42501: LD_VAR 0 10
42505: PUSH
42506: FOR_TO
42507: IFFALSE 42584
// begin if not ValidHex ( _x , _y ) then
42509: LD_VAR 0 5
42513: PPUSH
42514: LD_VAR 0 6
42518: PPUSH
42519: CALL_OW 488
42523: NOT
42524: IFFALSE 42528
// continue ;
42526: GO 42506
// if GetResourceTypeXY ( _x , _y ) then
42528: LD_VAR 0 5
42532: PPUSH
42533: LD_VAR 0 6
42537: PPUSH
42538: CALL_OW 283
42542: IFFALSE 42582
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42544: LD_ADDR_VAR 0 4
42548: PUSH
42549: LD_VAR 0 4
42553: PPUSH
42554: LD_VAR 0 4
42558: PUSH
42559: LD_INT 1
42561: PLUS
42562: PPUSH
42563: LD_VAR 0 5
42567: PUSH
42568: LD_VAR 0 6
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PPUSH
42577: CALL_OW 1
42581: ST_TO_ADDR
// end ;
42582: GO 42506
42584: POP
42585: POP
42586: GO 42486
42588: POP
42589: POP
// end ;
42590: LD_VAR 0 4
42594: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42595: LD_INT 0
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
// if not units then
42605: LD_VAR 0 1
42609: NOT
42610: IFFALSE 42614
// exit ;
42612: GO 43146
// result := UnitFilter ( units , [ f_ok ] ) ;
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: LD_INT 50
42626: PUSH
42627: EMPTY
42628: LIST
42629: PPUSH
42630: CALL_OW 72
42634: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42635: LD_ADDR_VAR 0 8
42639: PUSH
42640: LD_VAR 0 1
42644: PUSH
42645: LD_INT 1
42647: ARRAY
42648: PPUSH
42649: CALL_OW 255
42653: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42654: LD_ADDR_VAR 0 10
42658: PUSH
42659: LD_INT 29
42661: PUSH
42662: LD_INT 91
42664: PUSH
42665: LD_INT 49
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
// if not result then
42673: LD_VAR 0 3
42677: NOT
42678: IFFALSE 42682
// exit ;
42680: GO 43146
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42682: LD_ADDR_VAR 0 5
42686: PUSH
42687: LD_INT 81
42689: PUSH
42690: LD_VAR 0 8
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PPUSH
42699: CALL_OW 69
42703: ST_TO_ADDR
// for i in result do
42704: LD_ADDR_VAR 0 4
42708: PUSH
42709: LD_VAR 0 3
42713: PUSH
42714: FOR_IN
42715: IFFALSE 43144
// begin tag := GetTag ( i ) + 1 ;
42717: LD_ADDR_VAR 0 9
42721: PUSH
42722: LD_VAR 0 4
42726: PPUSH
42727: CALL_OW 110
42731: PUSH
42732: LD_INT 1
42734: PLUS
42735: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42736: LD_ADDR_VAR 0 7
42740: PUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: CALL_OW 250
42750: PPUSH
42751: LD_VAR 0 4
42755: PPUSH
42756: CALL_OW 251
42760: PPUSH
42761: LD_INT 4
42763: PPUSH
42764: CALL 42337 0 3
42768: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42769: LD_VAR 0 4
42773: PPUSH
42774: CALL_OW 247
42778: PUSH
42779: LD_INT 2
42781: EQUAL
42782: IFFALSE 42794
42784: PUSH
42785: LD_VAR 0 7
42789: PUSH
42790: LD_INT 2
42792: GREATER
42793: AND
42794: IFFALSE 42814
42796: PUSH
42797: LD_VAR 0 4
42801: PPUSH
42802: CALL_OW 264
42806: PUSH
42807: LD_VAR 0 10
42811: IN
42812: NOT
42813: AND
42814: IFFALSE 42853
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42816: LD_VAR 0 4
42820: PPUSH
42821: LD_VAR 0 7
42825: PUSH
42826: LD_INT 1
42828: ARRAY
42829: PUSH
42830: LD_INT 1
42832: ARRAY
42833: PPUSH
42834: LD_VAR 0 7
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: PUSH
42843: LD_INT 2
42845: ARRAY
42846: PPUSH
42847: CALL_OW 116
42851: GO 43142
// if path > tag then
42853: LD_VAR 0 2
42857: PUSH
42858: LD_VAR 0 9
42862: GREATER
42863: IFFALSE 43071
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42865: LD_ADDR_VAR 0 6
42869: PUSH
42870: LD_VAR 0 5
42874: PPUSH
42875: LD_INT 91
42877: PUSH
42878: LD_VAR 0 4
42882: PUSH
42883: LD_INT 8
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: PPUSH
42891: CALL_OW 72
42895: ST_TO_ADDR
// if nearEnemy then
42896: LD_VAR 0 6
42900: IFFALSE 42969
// begin if GetWeapon ( i ) = ru_time_lapser then
42902: LD_VAR 0 4
42906: PPUSH
42907: CALL_OW 264
42911: PUSH
42912: LD_INT 49
42914: EQUAL
42915: IFFALSE 42943
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42917: LD_VAR 0 4
42921: PPUSH
42922: LD_VAR 0 6
42926: PPUSH
42927: LD_VAR 0 4
42931: PPUSH
42932: CALL_OW 74
42936: PPUSH
42937: CALL_OW 112
42941: GO 42967
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42943: LD_VAR 0 4
42947: PPUSH
42948: LD_VAR 0 6
42952: PPUSH
42953: LD_VAR 0 4
42957: PPUSH
42958: CALL_OW 74
42962: PPUSH
42963: CALL 44227 0 2
// end else
42967: GO 43069
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42969: LD_VAR 0 4
42973: PPUSH
42974: LD_VAR 0 2
42978: PUSH
42979: LD_VAR 0 9
42983: ARRAY
42984: PUSH
42985: LD_INT 1
42987: ARRAY
42988: PPUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_VAR 0 9
42998: ARRAY
42999: PUSH
43000: LD_INT 2
43002: ARRAY
43003: PPUSH
43004: CALL_OW 297
43008: PUSH
43009: LD_INT 6
43011: GREATER
43012: IFFALSE 43055
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43014: LD_VAR 0 4
43018: PPUSH
43019: LD_VAR 0 2
43023: PUSH
43024: LD_VAR 0 9
43028: ARRAY
43029: PUSH
43030: LD_INT 1
43032: ARRAY
43033: PPUSH
43034: LD_VAR 0 2
43038: PUSH
43039: LD_VAR 0 9
43043: ARRAY
43044: PUSH
43045: LD_INT 2
43047: ARRAY
43048: PPUSH
43049: CALL_OW 114
43053: GO 43069
// SetTag ( i , tag ) ;
43055: LD_VAR 0 4
43059: PPUSH
43060: LD_VAR 0 9
43064: PPUSH
43065: CALL_OW 109
// end else
43069: GO 43142
// if enemy then
43071: LD_VAR 0 5
43075: IFFALSE 43142
// begin if GetWeapon ( i ) = ru_time_lapser then
43077: LD_VAR 0 4
43081: PPUSH
43082: CALL_OW 264
43086: PUSH
43087: LD_INT 49
43089: EQUAL
43090: IFFALSE 43118
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43092: LD_VAR 0 4
43096: PPUSH
43097: LD_VAR 0 5
43101: PPUSH
43102: LD_VAR 0 4
43106: PPUSH
43107: CALL_OW 74
43111: PPUSH
43112: CALL_OW 112
43116: GO 43142
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43118: LD_VAR 0 4
43122: PPUSH
43123: LD_VAR 0 5
43127: PPUSH
43128: LD_VAR 0 4
43132: PPUSH
43133: CALL_OW 74
43137: PPUSH
43138: CALL 44227 0 2
// end ; end ;
43142: GO 42714
43144: POP
43145: POP
// end ;
43146: LD_VAR 0 3
43150: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43151: LD_INT 0
43153: PPUSH
43154: PPUSH
43155: PPUSH
// if not unit or IsInUnit ( unit ) then
43156: LD_VAR 0 1
43160: NOT
43161: IFTRUE 43174
43163: PUSH
43164: LD_VAR 0 1
43168: PPUSH
43169: CALL_OW 310
43173: OR
43174: IFFALSE 43178
// exit ;
43176: GO 43269
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43178: LD_ADDR_VAR 0 4
43182: PUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 250
43192: PPUSH
43193: LD_VAR 0 2
43197: PPUSH
43198: LD_INT 1
43200: PPUSH
43201: CALL_OW 272
43205: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43206: LD_ADDR_VAR 0 5
43210: PUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 251
43220: PPUSH
43221: LD_VAR 0 2
43225: PPUSH
43226: LD_INT 1
43228: PPUSH
43229: CALL_OW 273
43233: ST_TO_ADDR
// if ValidHex ( x , y ) then
43234: LD_VAR 0 4
43238: PPUSH
43239: LD_VAR 0 5
43243: PPUSH
43244: CALL_OW 488
43248: IFFALSE 43269
// ComTurnXY ( unit , x , y ) ;
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_VAR 0 4
43259: PPUSH
43260: LD_VAR 0 5
43264: PPUSH
43265: CALL_OW 118
// end ;
43269: LD_VAR 0 3
43273: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43274: LD_INT 0
43276: PPUSH
43277: PPUSH
// result := false ;
43278: LD_ADDR_VAR 0 3
43282: PUSH
43283: LD_INT 0
43285: ST_TO_ADDR
// if not units then
43286: LD_VAR 0 2
43290: NOT
43291: IFFALSE 43295
// exit ;
43293: GO 43340
// for i in units do
43295: LD_ADDR_VAR 0 4
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: FOR_IN
43306: IFFALSE 43338
// if See ( side , i ) then
43308: LD_VAR 0 1
43312: PPUSH
43313: LD_VAR 0 4
43317: PPUSH
43318: CALL_OW 292
43322: IFFALSE 43336
// begin result := true ;
43324: LD_ADDR_VAR 0 3
43328: PUSH
43329: LD_INT 1
43331: ST_TO_ADDR
// exit ;
43332: POP
43333: POP
43334: GO 43340
// end ;
43336: GO 43305
43338: POP
43339: POP
// end ;
43340: LD_VAR 0 3
43344: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43345: LD_INT 0
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
// if not unit or not points then
43351: LD_VAR 0 1
43355: NOT
43356: IFTRUE 43365
43358: PUSH
43359: LD_VAR 0 2
43363: NOT
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 43459
// dist := 99999 ;
43369: LD_ADDR_VAR 0 5
43373: PUSH
43374: LD_INT 99999
43376: ST_TO_ADDR
// for i in points do
43377: LD_ADDR_VAR 0 4
43381: PUSH
43382: LD_VAR 0 2
43386: PUSH
43387: FOR_IN
43388: IFFALSE 43457
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43390: LD_ADDR_VAR 0 6
43394: PUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: LD_VAR 0 4
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PPUSH
43409: LD_VAR 0 4
43413: PUSH
43414: LD_INT 2
43416: ARRAY
43417: PPUSH
43418: CALL_OW 297
43422: ST_TO_ADDR
// if tmpDist < dist then
43423: LD_VAR 0 6
43427: PUSH
43428: LD_VAR 0 5
43432: LESS
43433: IFFALSE 43455
// begin result := i ;
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_VAR 0 4
43444: ST_TO_ADDR
// dist := tmpDist ;
43445: LD_ADDR_VAR 0 5
43449: PUSH
43450: LD_VAR 0 6
43454: ST_TO_ADDR
// end ; end ;
43455: GO 43387
43457: POP
43458: POP
// end ;
43459: LD_VAR 0 3
43463: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43464: LD_INT 0
43466: PPUSH
// uc_side := side ;
43467: LD_ADDR_OWVAR 20
43471: PUSH
43472: LD_VAR 0 1
43476: ST_TO_ADDR
// uc_nation := 3 ;
43477: LD_ADDR_OWVAR 21
43481: PUSH
43482: LD_INT 3
43484: ST_TO_ADDR
// vc_chassis := 25 ;
43485: LD_ADDR_OWVAR 37
43489: PUSH
43490: LD_INT 25
43492: ST_TO_ADDR
// vc_engine := engine_siberite ;
43493: LD_ADDR_OWVAR 39
43497: PUSH
43498: LD_INT 3
43500: ST_TO_ADDR
// vc_control := control_computer ;
43501: LD_ADDR_OWVAR 38
43505: PUSH
43506: LD_INT 3
43508: ST_TO_ADDR
// vc_weapon := 59 ;
43509: LD_ADDR_OWVAR 40
43513: PUSH
43514: LD_INT 59
43516: ST_TO_ADDR
// result := CreateVehicle ;
43517: LD_ADDR_VAR 0 5
43521: PUSH
43522: CALL_OW 45
43526: ST_TO_ADDR
// SetDir ( result , d ) ;
43527: LD_VAR 0 5
43531: PPUSH
43532: LD_VAR 0 4
43536: PPUSH
43537: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43541: LD_VAR 0 5
43545: PPUSH
43546: LD_VAR 0 2
43550: PPUSH
43551: LD_VAR 0 3
43555: PPUSH
43556: LD_INT 0
43558: PPUSH
43559: CALL_OW 48
// end ;
43563: LD_VAR 0 5
43567: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43568: LD_INT 0
43570: PPUSH
43571: PPUSH
43572: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43573: LD_ADDR_VAR 0 2
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43596: LD_VAR 0 1
43600: NOT
43601: IFTRUE 43634
43603: PUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 264
43613: PUSH
43614: LD_INT 12
43616: PUSH
43617: LD_INT 51
43619: PUSH
43620: LD_INT 32
43622: PUSH
43623: LD_INT 89
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: IN
43632: NOT
43633: OR
43634: IFFALSE 43638
// exit ;
43636: GO 43736
// for i := 1 to 3 do
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: DOUBLE
43644: LD_INT 1
43646: DEC
43647: ST_TO_ADDR
43648: LD_INT 3
43650: PUSH
43651: FOR_TO
43652: IFFALSE 43734
// begin tmp := GetCargo ( cargo , i ) ;
43654: LD_ADDR_VAR 0 4
43658: PUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: LD_VAR 0 3
43668: PPUSH
43669: CALL_OW 289
43673: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43674: LD_ADDR_VAR 0 2
43678: PUSH
43679: LD_VAR 0 2
43683: PPUSH
43684: LD_VAR 0 3
43688: PPUSH
43689: LD_VAR 0 4
43693: PPUSH
43694: CALL_OW 1
43698: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43699: LD_ADDR_VAR 0 2
43703: PUSH
43704: LD_VAR 0 2
43708: PPUSH
43709: LD_INT 4
43711: PPUSH
43712: LD_VAR 0 2
43716: PUSH
43717: LD_INT 4
43719: ARRAY
43720: PUSH
43721: LD_VAR 0 4
43725: PLUS
43726: PPUSH
43727: CALL_OW 1
43731: ST_TO_ADDR
// end ;
43732: GO 43651
43734: POP
43735: POP
// end ;
43736: LD_VAR 0 2
43740: RET
// export function Length ( array ) ; begin
43741: LD_INT 0
43743: PPUSH
// result := array + 0 ;
43744: LD_ADDR_VAR 0 2
43748: PUSH
43749: LD_VAR 0 1
43753: PUSH
43754: LD_INT 0
43756: PLUS
43757: ST_TO_ADDR
// end ;
43758: LD_VAR 0 2
43762: RET
// export function PrepareArray ( array ) ; begin
43763: LD_INT 0
43765: PPUSH
// result := array diff 0 ;
43766: LD_ADDR_VAR 0 2
43770: PUSH
43771: LD_VAR 0 1
43775: PUSH
43776: LD_INT 0
43778: DIFF
43779: ST_TO_ADDR
// if not result [ 1 ] then
43780: LD_VAR 0 2
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: NOT
43789: IFFALSE 43809
// result := Delete ( result , 1 ) ;
43791: LD_ADDR_VAR 0 2
43795: PUSH
43796: LD_VAR 0 2
43800: PPUSH
43801: LD_INT 1
43803: PPUSH
43804: CALL_OW 3
43808: ST_TO_ADDR
// end ;
43809: LD_VAR 0 2
43813: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43814: LD_INT 0
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
// sibRocketRange := 25 ;
43820: LD_ADDR_VAR 0 6
43824: PUSH
43825: LD_INT 25
43827: ST_TO_ADDR
// result := false ;
43828: LD_ADDR_VAR 0 4
43832: PUSH
43833: LD_INT 0
43835: ST_TO_ADDR
// for i := 0 to 5 do
43836: LD_ADDR_VAR 0 5
43840: PUSH
43841: DOUBLE
43842: LD_INT 0
43844: DEC
43845: ST_TO_ADDR
43846: LD_INT 5
43848: PUSH
43849: FOR_TO
43850: IFFALSE 43917
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43852: LD_VAR 0 1
43856: PPUSH
43857: LD_VAR 0 5
43861: PPUSH
43862: LD_VAR 0 6
43866: PPUSH
43867: CALL_OW 272
43871: PPUSH
43872: LD_VAR 0 2
43876: PPUSH
43877: LD_VAR 0 5
43881: PPUSH
43882: LD_VAR 0 6
43886: PPUSH
43887: CALL_OW 273
43891: PPUSH
43892: LD_VAR 0 3
43896: PPUSH
43897: CALL_OW 309
43901: IFFALSE 43915
// begin result := true ;
43903: LD_ADDR_VAR 0 4
43907: PUSH
43908: LD_INT 1
43910: ST_TO_ADDR
// exit ;
43911: POP
43912: POP
43913: GO 43919
// end ;
43915: GO 43849
43917: POP
43918: POP
// end ;
43919: LD_VAR 0 4
43923: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43924: LD_INT 0
43926: PPUSH
43927: PPUSH
43928: PPUSH
// if btype = b_depot then
43929: LD_VAR 0 2
43933: PUSH
43934: LD_INT 0
43936: EQUAL
43937: IFFALSE 43949
// begin result := true ;
43939: LD_ADDR_VAR 0 3
43943: PUSH
43944: LD_INT 1
43946: ST_TO_ADDR
// exit ;
43947: GO 44069
// end ; pom := GetBase ( depot ) ;
43949: LD_ADDR_VAR 0 4
43953: PUSH
43954: LD_VAR 0 1
43958: PPUSH
43959: CALL_OW 274
43963: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43964: LD_ADDR_VAR 0 5
43968: PUSH
43969: LD_VAR 0 2
43973: PPUSH
43974: LD_VAR 0 1
43978: PPUSH
43979: CALL_OW 248
43983: PPUSH
43984: CALL_OW 450
43988: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43989: LD_ADDR_VAR 0 3
43993: PUSH
43994: LD_VAR 0 4
43998: PPUSH
43999: LD_INT 1
44001: PPUSH
44002: CALL_OW 275
44006: PUSH
44007: LD_VAR 0 5
44011: PUSH
44012: LD_INT 1
44014: ARRAY
44015: GREATEREQUAL
44016: IFFALSE 44042
44018: PUSH
44019: LD_VAR 0 4
44023: PPUSH
44024: LD_INT 2
44026: PPUSH
44027: CALL_OW 275
44031: PUSH
44032: LD_VAR 0 5
44036: PUSH
44037: LD_INT 2
44039: ARRAY
44040: GREATEREQUAL
44041: AND
44042: IFFALSE 44068
44044: PUSH
44045: LD_VAR 0 4
44049: PPUSH
44050: LD_INT 3
44052: PPUSH
44053: CALL_OW 275
44057: PUSH
44058: LD_VAR 0 5
44062: PUSH
44063: LD_INT 3
44065: ARRAY
44066: GREATEREQUAL
44067: AND
44068: ST_TO_ADDR
// end ;
44069: LD_VAR 0 3
44073: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44074: LD_INT 0
44076: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44077: LD_VAR 0 1
44081: PPUSH
44082: LD_VAR 0 2
44086: PPUSH
44087: LD_INT 0
44089: PPUSH
44090: LD_INT 0
44092: PPUSH
44093: LD_INT 1
44095: PPUSH
44096: LD_INT 0
44098: PPUSH
44099: CALL_OW 587
// end ;
44103: LD_VAR 0 3
44107: RET
// export function CenterOnNow ( unit ) ; begin
44108: LD_INT 0
44110: PPUSH
// result := IsInUnit ( unit ) ;
44111: LD_ADDR_VAR 0 2
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: CALL_OW 310
44125: ST_TO_ADDR
// if not result then
44126: LD_VAR 0 2
44130: NOT
44131: IFFALSE 44143
// result := unit ;
44133: LD_ADDR_VAR 0 2
44137: PUSH
44138: LD_VAR 0 1
44142: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 87
// end ;
44152: LD_VAR 0 2
44156: RET
// export function ComMoveHex ( unit , hex ) ; begin
44157: LD_INT 0
44159: PPUSH
// if not hex then
44160: LD_VAR 0 2
44164: NOT
44165: IFFALSE 44169
// exit ;
44167: GO 44222
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44169: LD_VAR 0 2
44173: PUSH
44174: LD_INT 1
44176: ARRAY
44177: PPUSH
44178: LD_VAR 0 2
44182: PUSH
44183: LD_INT 2
44185: ARRAY
44186: PPUSH
44187: CALL_OW 428
44191: IFFALSE 44195
// exit ;
44193: GO 44222
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44195: LD_VAR 0 1
44199: PPUSH
44200: LD_VAR 0 2
44204: PUSH
44205: LD_INT 1
44207: ARRAY
44208: PPUSH
44209: LD_VAR 0 2
44213: PUSH
44214: LD_INT 2
44216: ARRAY
44217: PPUSH
44218: CALL_OW 111
// end ;
44222: LD_VAR 0 3
44226: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44227: LD_INT 0
44229: PPUSH
44230: PPUSH
44231: PPUSH
// if not unit or not enemy then
44232: LD_VAR 0 1
44236: NOT
44237: IFTRUE 44246
44239: PUSH
44240: LD_VAR 0 2
44244: NOT
44245: OR
44246: IFFALSE 44250
// exit ;
44248: GO 44376
// x := GetX ( enemy ) ;
44250: LD_ADDR_VAR 0 4
44254: PUSH
44255: LD_VAR 0 2
44259: PPUSH
44260: CALL_OW 250
44264: ST_TO_ADDR
// y := GetY ( enemy ) ;
44265: LD_ADDR_VAR 0 5
44269: PUSH
44270: LD_VAR 0 2
44274: PPUSH
44275: CALL_OW 251
44279: ST_TO_ADDR
// if ValidHex ( x , y ) then
44280: LD_VAR 0 4
44284: PPUSH
44285: LD_VAR 0 5
44289: PPUSH
44290: CALL_OW 488
44294: IFFALSE 44376
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44296: LD_VAR 0 2
44300: PPUSH
44301: CALL_OW 247
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: IN
44316: IFTRUE 44339
44318: PUSH
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 255
44328: PPUSH
44329: LD_VAR 0 2
44333: PPUSH
44334: CALL_OW 292
44338: OR
44339: IFFALSE 44357
// ComAttackUnit ( unit , enemy ) else
44341: LD_VAR 0 1
44345: PPUSH
44346: LD_VAR 0 2
44350: PPUSH
44351: CALL_OW 115
44355: GO 44376
// ComAgressiveMove ( unit , x , y ) ;
44357: LD_VAR 0 1
44361: PPUSH
44362: LD_VAR 0 4
44366: PPUSH
44367: LD_VAR 0 5
44371: PPUSH
44372: CALL_OW 114
// end ;
44376: LD_VAR 0 3
44380: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44381: LD_INT 0
44383: PPUSH
44384: PPUSH
44385: PPUSH
// list := AreaToList ( area , 0 ) ;
44386: LD_ADDR_VAR 0 5
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: LD_INT 0
44398: PPUSH
44399: CALL_OW 517
44403: ST_TO_ADDR
// if not list then
44404: LD_VAR 0 5
44408: NOT
44409: IFFALSE 44413
// exit ;
44411: GO 44543
// if all then
44413: LD_VAR 0 2
44417: IFFALSE 44505
// begin for i := 1 to list [ 1 ] do
44419: LD_ADDR_VAR 0 4
44423: PUSH
44424: DOUBLE
44425: LD_INT 1
44427: DEC
44428: ST_TO_ADDR
44429: LD_VAR 0 5
44433: PUSH
44434: LD_INT 1
44436: ARRAY
44437: PUSH
44438: FOR_TO
44439: IFFALSE 44501
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44441: LD_ADDR_VAR 0 3
44445: PUSH
44446: LD_VAR 0 3
44450: PPUSH
44451: LD_VAR 0 3
44455: PUSH
44456: LD_INT 1
44458: PLUS
44459: PPUSH
44460: LD_VAR 0 5
44464: PUSH
44465: LD_INT 1
44467: ARRAY
44468: PUSH
44469: LD_VAR 0 4
44473: ARRAY
44474: PUSH
44475: LD_VAR 0 5
44479: PUSH
44480: LD_INT 2
44482: ARRAY
44483: PUSH
44484: LD_VAR 0 4
44488: ARRAY
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 1
44498: ST_TO_ADDR
44499: GO 44438
44501: POP
44502: POP
// exit ;
44503: GO 44543
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_VAR 0 5
44514: PUSH
44515: LD_INT 1
44517: ARRAY
44518: PUSH
44519: LD_INT 1
44521: ARRAY
44522: PUSH
44523: LD_VAR 0 5
44527: PUSH
44528: LD_INT 2
44530: ARRAY
44531: PUSH
44532: LD_INT 1
44534: ARRAY
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: ST_TO_ADDR
// end ;
44543: LD_VAR 0 3
44547: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
// list := AreaToList ( area , 0 ) ;
44552: LD_ADDR_VAR 0 4
44556: PUSH
44557: LD_VAR 0 1
44561: PPUSH
44562: LD_INT 0
44564: PPUSH
44565: CALL_OW 517
44569: ST_TO_ADDR
// if not list then
44570: LD_VAR 0 4
44574: NOT
44575: IFFALSE 44579
// exit ;
44577: GO 44620
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_VAR 0 4
44588: PUSH
44589: LD_INT 1
44591: ARRAY
44592: PUSH
44593: LD_INT 1
44595: ARRAY
44596: PUSH
44597: LD_VAR 0 4
44601: PUSH
44602: LD_INT 2
44604: ARRAY
44605: PUSH
44606: LD_INT 1
44608: ARRAY
44609: PUSH
44610: LD_VAR 0 2
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// end ;
44620: LD_VAR 0 3
44624: RET
// export function First ( array ) ; begin
44625: LD_INT 0
44627: PPUSH
// if not array then
44628: LD_VAR 0 1
44632: NOT
44633: IFFALSE 44637
// exit ;
44635: GO 44651
// result := array [ 1 ] ;
44637: LD_ADDR_VAR 0 2
44641: PUSH
44642: LD_VAR 0 1
44646: PUSH
44647: LD_INT 1
44649: ARRAY
44650: ST_TO_ADDR
// end ;
44651: LD_VAR 0 2
44655: RET
// export function Last ( array ) ; begin
44656: LD_INT 0
44658: PPUSH
// if not array then
44659: LD_VAR 0 1
44663: NOT
44664: IFFALSE 44668
// exit ;
44666: GO 44684
// result := array [ array ] ;
44668: LD_ADDR_VAR 0 2
44672: PUSH
44673: LD_VAR 0 1
44677: PUSH
44678: LD_VAR 0 1
44682: ARRAY
44683: ST_TO_ADDR
// end ;
44684: LD_VAR 0 2
44688: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44689: LD_INT 0
44691: PPUSH
44692: PPUSH
// result := [ ] ;
44693: LD_ADDR_VAR 0 5
44697: PUSH
44698: EMPTY
44699: ST_TO_ADDR
// if not array then
44700: LD_VAR 0 1
44704: NOT
44705: IFFALSE 44709
// exit ;
44707: GO 44821
// for i := 1 to array do
44709: LD_ADDR_VAR 0 6
44713: PUSH
44714: DOUBLE
44715: LD_INT 1
44717: DEC
44718: ST_TO_ADDR
44719: LD_VAR 0 1
44723: PUSH
44724: FOR_TO
44725: IFFALSE 44819
// if array [ i ] [ index ] = value then
44727: LD_VAR 0 1
44731: PUSH
44732: LD_VAR 0 6
44736: ARRAY
44737: PUSH
44738: LD_VAR 0 2
44742: ARRAY
44743: PUSH
44744: LD_VAR 0 3
44748: EQUAL
44749: IFFALSE 44817
// begin if indexColumn then
44751: LD_VAR 0 4
44755: IFFALSE 44791
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44757: LD_ADDR_VAR 0 5
44761: PUSH
44762: LD_VAR 0 5
44766: PPUSH
44767: LD_VAR 0 1
44771: PUSH
44772: LD_VAR 0 6
44776: ARRAY
44777: PUSH
44778: LD_VAR 0 4
44782: ARRAY
44783: PPUSH
44784: CALL 39829 0 2
44788: ST_TO_ADDR
44789: GO 44817
// result := Join ( result , array [ i ] ) ;
44791: LD_ADDR_VAR 0 5
44795: PUSH
44796: LD_VAR 0 5
44800: PPUSH
44801: LD_VAR 0 1
44805: PUSH
44806: LD_VAR 0 6
44810: ARRAY
44811: PPUSH
44812: CALL 39829 0 2
44816: ST_TO_ADDR
// end ;
44817: GO 44724
44819: POP
44820: POP
// end ;
44821: LD_VAR 0 5
44825: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44826: LD_INT 0
44828: PPUSH
// if not vehicles or not parkingPoint then
44829: LD_VAR 0 1
44833: NOT
44834: IFTRUE 44843
44836: PUSH
44837: LD_VAR 0 2
44841: NOT
44842: OR
44843: IFFALSE 44847
// exit ;
44845: GO 44945
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44847: LD_ADDR_VAR 0 1
44851: PUSH
44852: LD_VAR 0 1
44856: PPUSH
44857: LD_INT 50
44859: PUSH
44860: EMPTY
44861: LIST
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: LD_INT 92
44868: PUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 2
44885: ARRAY
44886: PUSH
44887: LD_INT 8
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PPUSH
44904: CALL_OW 72
44908: ST_TO_ADDR
// if not vehicles then
44909: LD_VAR 0 1
44913: NOT
44914: IFFALSE 44918
// exit ;
44916: GO 44945
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44918: LD_VAR 0 1
44922: PPUSH
44923: LD_VAR 0 2
44927: PUSH
44928: LD_INT 1
44930: ARRAY
44931: PPUSH
44932: LD_VAR 0 2
44936: PUSH
44937: LD_INT 2
44939: ARRAY
44940: PPUSH
44941: CALL_OW 111
// end ;
44945: LD_VAR 0 3
44949: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44950: LD_INT 0
44952: PPUSH
44953: PPUSH
44954: PPUSH
// if not side or not area then
44955: LD_VAR 0 1
44959: NOT
44960: IFTRUE 44969
44962: PUSH
44963: LD_VAR 0 2
44967: NOT
44968: OR
44969: IFFALSE 44973
// exit ;
44971: GO 45092
// tmp := AreaToList ( area , 0 ) ;
44973: LD_ADDR_VAR 0 5
44977: PUSH
44978: LD_VAR 0 2
44982: PPUSH
44983: LD_INT 0
44985: PPUSH
44986: CALL_OW 517
44990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44991: LD_ADDR_VAR 0 4
44995: PUSH
44996: DOUBLE
44997: LD_INT 1
44999: DEC
45000: ST_TO_ADDR
45001: LD_VAR 0 5
45005: PUSH
45006: LD_INT 1
45008: ARRAY
45009: PUSH
45010: FOR_TO
45011: IFFALSE 45090
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45013: LD_VAR 0 5
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: PUSH
45022: LD_VAR 0 4
45026: ARRAY
45027: PPUSH
45028: LD_VAR 0 5
45032: PUSH
45033: LD_INT 2
45035: ARRAY
45036: PUSH
45037: LD_VAR 0 4
45041: ARRAY
45042: PPUSH
45043: CALL_OW 351
45047: IFFALSE 45088
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45049: LD_VAR 0 5
45053: PUSH
45054: LD_INT 1
45056: ARRAY
45057: PUSH
45058: LD_VAR 0 4
45062: ARRAY
45063: PPUSH
45064: LD_VAR 0 5
45068: PUSH
45069: LD_INT 2
45071: ARRAY
45072: PUSH
45073: LD_VAR 0 4
45077: ARRAY
45078: PPUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: CALL_OW 244
// end ;
45088: GO 45010
45090: POP
45091: POP
// end ;
45092: LD_VAR 0 3
45096: RET
// export function UniqueArray ( array ) ; var i ; begin
45097: LD_INT 0
45099: PPUSH
45100: PPUSH
// result := [ ] ;
45101: LD_ADDR_VAR 0 2
45105: PUSH
45106: EMPTY
45107: ST_TO_ADDR
// if not array then
45108: LD_VAR 0 1
45112: NOT
45113: IFFALSE 45117
// exit ;
45115: GO 45178
// for i := 1 to array do
45117: LD_ADDR_VAR 0 3
45121: PUSH
45122: DOUBLE
45123: LD_INT 1
45125: DEC
45126: ST_TO_ADDR
45127: LD_VAR 0 1
45131: PUSH
45132: FOR_TO
45133: IFFALSE 45176
// if not array [ i ] in result then
45135: LD_VAR 0 1
45139: PUSH
45140: LD_VAR 0 3
45144: ARRAY
45145: PUSH
45146: LD_VAR 0 2
45150: IN
45151: NOT
45152: IFFALSE 45174
// result := Join ( result , i ) ;
45154: LD_ADDR_VAR 0 2
45158: PUSH
45159: LD_VAR 0 2
45163: PPUSH
45164: LD_VAR 0 3
45168: PPUSH
45169: CALL 39829 0 2
45173: ST_TO_ADDR
45174: GO 45132
45176: POP
45177: POP
// end ;
45178: LD_VAR 0 2
45182: RET
