// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1621 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1621 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1621 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1621 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1621 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1621 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1621 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1621 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1621 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1621 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1621 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1621 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1621 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un , p ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
 635: PPUSH
// music_nat := 2 ;
 636: LD_ADDR_OWVAR 71
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// Video ( true ) ;
 644: LD_INT 1
 646: PPUSH
 647: CALL 39325 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 51
 658: PPUSH
 659: LD_INT 23
 661: PPUSH
 662: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 666: LD_OWVAR 3
 670: PUSH
 671: LD_EXP 3
 675: DIFF
 676: PPUSH
 677: LD_INT 53
 679: PPUSH
 680: LD_INT 27
 682: PPUSH
 683: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 687: LD_INT 52
 689: PPUSH
 690: LD_INT 25
 692: PPUSH
 693: CALL_OW 86
// wait ( 0 0$2 ) ;
 697: LD_INT 70
 699: PPUSH
 700: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 704: LD_INT 35
 706: PPUSH
 707: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 711: LD_EXP 3
 715: PPUSH
 716: LD_INT 51
 718: PPUSH
 719: LD_INT 23
 721: PPUSH
 722: CALL_OW 307
 726: PUSH
 727: LD_EXP 3
 731: PPUSH
 732: CALL_OW 314
 736: NOT
 737: OR
 738: IFFALSE 704
// ComTurnXY ( Heike , 53 , 26 ) ;
 740: LD_EXP 3
 744: PPUSH
 745: LD_INT 53
 747: PPUSH
 748: LD_INT 26
 750: PPUSH
 751: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 755: LD_INT 10
 757: PPUSH
 758: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_STRING DH-Intro-1
 769: PPUSH
 770: CALL_OW 88
// ComHold ( all_units ) ;
 774: LD_OWVAR 3
 778: PPUSH
 779: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 783: LD_OWVAR 3
 787: PUSH
 788: LD_EXP 3
 792: DIFF
 793: PPUSH
 794: LD_EXP 3
 798: PPUSH
 799: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 803: LD_EXP 17
 807: PUSH
 808: LD_STRING 08_DealWithDoug
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 30
 818: AND
 819: IFFALSE 931
// begin ComTurnUnit ( Heike , Doug ) ;
 821: LD_EXP 3
 825: PPUSH
 826: LD_EXP 17
 830: PPUSH
 831: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 835: LD_EXP 17
 839: PPUSH
 840: LD_STRING DCa-Intro-a-2
 842: PPUSH
 843: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 847: LD_EXP 3
 851: PPUSH
 852: LD_STRING DH-Intro-a-3
 854: PPUSH
 855: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 859: LD_EXP 17
 863: PPUSH
 864: LD_STRING DCa-Intro-a-4
 866: PPUSH
 867: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 871: LD_EXP 3
 875: PPUSH
 876: LD_STRING DH-Intro-a-5
 878: PPUSH
 879: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 883: LD_EXP 17
 887: PPUSH
 888: LD_STRING DCa-Intro-a-6
 890: PPUSH
 891: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 895: LD_EXP 16
 899: PUSH
 900: LD_EXP 17
 904: ADD
 905: PUSH
 906: LD_EXP 15
 910: ADD
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 7
 917: PPUSH
 918: CALL_OW 111
// wait ( 0 0$01 ) ;
 922: LD_INT 35
 924: PPUSH
 925: CALL_OW 67
// end else
 929: GO 1033
// if Harris then
 931: LD_EXP 16
 935: IFFALSE 1033
// begin ComTurnUnit ( Heike , Harris ) ;
 937: LD_EXP 3
 941: PPUSH
 942: LD_EXP 16
 946: PPUSH
 947: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 951: LD_EXP 16
 955: PPUSH
 956: LD_STRING DJ-Intro-2
 958: PPUSH
 959: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 963: LD_EXP 3
 967: PPUSH
 968: LD_STRING DH-Intro-3
 970: PPUSH
 971: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 975: LD_EXP 3
 979: PPUSH
 980: LD_STRING DH-Intro-4
 982: PPUSH
 983: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 987: LD_EXP 16
 991: PPUSH
 992: LD_STRING DJ-Intro-5
 994: PPUSH
 995: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 999: LD_EXP 16
1003: PUSH
1004: LD_EXP 17
1008: ADD
1009: PUSH
1010: LD_EXP 15
1014: ADD
1015: PPUSH
1016: LD_INT 5
1018: PPUSH
1019: LD_INT 7
1021: PPUSH
1022: CALL_OW 111
// wait ( 0 0$01 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// end ; if Givi then
1033: LD_EXP 4
1037: IFFALSE 1165
// begin ComMoveUnit ( Givi , Heike ) ;
1039: LD_EXP 4
1043: PPUSH
1044: LD_EXP 3
1048: PPUSH
1049: CALL_OW 112
// p := 0 ;
1053: LD_ADDR_VAR 0 4
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1061: LD_INT 35
1063: PPUSH
1064: CALL_OW 67
// p := Inc ( p ) ;
1068: LD_ADDR_VAR 0 4
1072: PUSH
1073: LD_VAR 0 4
1077: PPUSH
1078: CALL 40714 0 1
1082: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) or p > 8 ;
1083: LD_EXP 3
1087: PPUSH
1088: LD_EXP 4
1092: PPUSH
1093: CALL_OW 296
1097: PUSH
1098: LD_INT 4
1100: LESS
1101: PUSH
1102: LD_EXP 4
1106: PPUSH
1107: CALL_OW 314
1111: NOT
1112: OR
1113: PUSH
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 8
1121: GREATER
1122: OR
1123: IFFALSE 1061
// ComTurnUnit ( Givi , Heike ) ;
1125: LD_EXP 4
1129: PPUSH
1130: LD_EXP 3
1134: PPUSH
1135: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1139: LD_EXP 3
1143: PPUSH
1144: LD_EXP 4
1148: PPUSH
1149: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1153: LD_EXP 4
1157: PPUSH
1158: LD_STRING DG-Intro-7
1160: PPUSH
1161: CALL_OW 88
// end ; if not Givi then
1165: LD_EXP 4
1169: NOT
1170: IFFALSE 1187
// ComTurnXY ( Heike , 52 , 25 ) ;
1172: LD_EXP 3
1176: PPUSH
1177: LD_INT 52
1179: PPUSH
1180: LD_INT 25
1182: PPUSH
1183: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1187: LD_EXP 3
1191: PPUSH
1192: LD_STRING DH-Intro-7
1194: PPUSH
1195: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1199: LD_INT 22
1201: PUSH
1202: LD_INT 2
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PPUSH
1209: CALL_OW 69
1213: PPUSH
1214: LD_INT 48
1216: PPUSH
1217: LD_INT 4
1219: PPUSH
1220: CALL_OW 111
// wait ( 0 0$3 ) ;
1224: LD_INT 105
1226: PPUSH
1227: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1231: LD_INT 74
1233: PPUSH
1234: LD_INT 79
1236: PPUSH
1237: LD_INT 2
1239: PPUSH
1240: LD_INT 16
1242: NEG
1243: PPUSH
1244: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1248: LD_INT 74
1250: PPUSH
1251: LD_INT 79
1253: PPUSH
1254: CALL_OW 84
// uc_side := 3 ;
1258: LD_ADDR_OWVAR 20
1262: PUSH
1263: LD_INT 3
1265: ST_TO_ADDR
// uc_nation := nation_russian ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 3
1273: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1274: LD_INT 22
1276: PPUSH
1277: LD_INT 3
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_INT 43
1285: PPUSH
1286: LD_INT 100
1288: PPUSH
1289: CALL 6482 0 5
// un := CreateVehicle ;
1293: LD_ADDR_VAR 0 3
1297: PUSH
1298: CALL_OW 45
1302: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1303: LD_VAR 0 3
1307: PPUSH
1308: LD_INT 76
1310: PPUSH
1311: LD_INT 87
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1321: LD_INT 0
1323: PPUSH
1324: LD_INT 8
1326: PPUSH
1327: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1331: CALL_OW 44
1335: PPUSH
1336: LD_VAR 0 3
1340: PPUSH
1341: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 67
1352: PPUSH
1353: LD_INT 56
1355: PPUSH
1356: CALL_OW 111
// wait ( 0 0$1 ) ;
1360: LD_INT 35
1362: PPUSH
1363: CALL_OW 67
// for i := 1 to 3 do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: DOUBLE
1373: LD_INT 1
1375: DEC
1376: ST_TO_ADDR
1377: LD_INT 3
1379: PUSH
1380: FOR_TO
1381: IFFALSE 1441
// begin PrepareSoldier ( false , 8 ) ;
1383: LD_INT 0
1385: PPUSH
1386: LD_INT 8
1388: PPUSH
1389: CALL_OW 381
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1403: LD_VAR 0 3
1407: PPUSH
1408: LD_INT 76
1410: PPUSH
1411: LD_INT 87
1413: PPUSH
1414: LD_INT 2
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 67
1431: PPUSH
1432: LD_INT 56
1434: PPUSH
1435: CALL_OW 111
// end ;
1439: GO 1380
1441: POP
1442: POP
// wait ( 0 0$2 ) ;
1443: LD_INT 70
1445: PPUSH
1446: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1450: LD_INT 1
1452: PPUSH
1453: LD_STRING %_cont
1455: PPUSH
1456: CALL_OW 340
// Video ( false ) ;
1460: LD_INT 0
1462: PPUSH
1463: CALL 39325 0 1
// end ;
1467: LD_VAR 0 1
1471: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1472: LD_INT 5
1474: PPUSH
1475: LD_INT 22
1477: PUSH
1478: LD_INT 4
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: PPUSH
1485: CALL_OW 70
1489: IFFALSE 1537
1491: GO 1493
1493: DISABLE
1494: LD_INT 0
1496: PPUSH
// begin enable ;
1497: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1498: LD_ADDR_VAR 0 1
1502: PUSH
1503: LD_INT 5
1505: PPUSH
1506: LD_INT 22
1508: PUSH
1509: LD_INT 4
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 70
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1535
// RemoveUnit ( i ) ;
1524: LD_VAR 0 1
1528: PPUSH
1529: CALL_OW 64
1533: GO 1521
1535: POP
1536: POP
// end ;
1537: PPOPN 1
1539: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1540: LD_INT 6
1542: PPUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PPUSH
1553: CALL_OW 70
1557: IFFALSE 1605
1559: GO 1561
1561: DISABLE
1562: LD_INT 0
1564: PPUSH
// begin enable ;
1565: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1566: LD_ADDR_VAR 0 1
1570: PUSH
1571: LD_INT 6
1573: PPUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 70
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1603
// RemoveUnit ( i ) ;
1592: LD_VAR 0 1
1596: PPUSH
1597: CALL_OW 64
1601: GO 1589
1603: POP
1604: POP
// end ; end_of_file
1605: PPOPN 1
1607: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1608: LD_INT 1
1610: PPUSH
1611: LD_STRING %_cont
1613: PPUSH
1614: CALL_OW 340
// end ; end_of_file
1618: PPOPN 1
1620: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1621: LD_INT 0
1623: PPUSH
1624: PPUSH
// if exist_mode then
1625: LD_VAR 0 2
1629: IFFALSE 1675
// begin unit := CreateCharacter ( prefix & ident ) ;
1631: LD_ADDR_VAR 0 5
1635: PUSH
1636: LD_VAR 0 3
1640: PUSH
1641: LD_VAR 0 1
1645: STR
1646: PPUSH
1647: CALL_OW 34
1651: ST_TO_ADDR
// if unit then
1652: LD_VAR 0 5
1656: IFFALSE 1673
// DeleteCharacters ( prefix & ident ) ;
1658: LD_VAR 0 3
1662: PUSH
1663: LD_VAR 0 1
1667: STR
1668: PPUSH
1669: CALL_OW 40
// end else
1673: GO 1690
// unit := NewCharacter ( ident ) ;
1675: LD_ADDR_VAR 0 5
1679: PUSH
1680: LD_VAR 0 1
1684: PPUSH
1685: CALL_OW 25
1689: ST_TO_ADDR
// result := unit ;
1690: LD_ADDR_VAR 0 4
1694: PUSH
1695: LD_VAR 0 5
1699: ST_TO_ADDR
// end ;
1700: LD_VAR 0 4
1704: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
// if not side or not nation then
1709: LD_VAR 0 1
1713: NOT
1714: PUSH
1715: LD_VAR 0 2
1719: NOT
1720: OR
1721: IFFALSE 1725
// exit ;
1723: GO 2493
// case nation of nation_american :
1725: LD_VAR 0 2
1729: PUSH
1730: LD_INT 1
1732: DOUBLE
1733: EQUAL
1734: IFTRUE 1738
1736: GO 1952
1738: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1739: LD_ADDR_VAR 0 4
1743: PUSH
1744: LD_INT 35
1746: PUSH
1747: LD_INT 45
1749: PUSH
1750: LD_INT 46
1752: PUSH
1753: LD_INT 47
1755: PUSH
1756: LD_INT 82
1758: PUSH
1759: LD_INT 83
1761: PUSH
1762: LD_INT 84
1764: PUSH
1765: LD_INT 85
1767: PUSH
1768: LD_INT 86
1770: PUSH
1771: LD_INT 1
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 6
1779: PUSH
1780: LD_INT 15
1782: PUSH
1783: LD_INT 16
1785: PUSH
1786: LD_INT 7
1788: PUSH
1789: LD_INT 12
1791: PUSH
1792: LD_INT 13
1794: PUSH
1795: LD_INT 10
1797: PUSH
1798: LD_INT 14
1800: PUSH
1801: LD_INT 20
1803: PUSH
1804: LD_INT 21
1806: PUSH
1807: LD_INT 22
1809: PUSH
1810: LD_INT 25
1812: PUSH
1813: LD_INT 32
1815: PUSH
1816: LD_INT 27
1818: PUSH
1819: LD_INT 36
1821: PUSH
1822: LD_INT 69
1824: PUSH
1825: LD_INT 39
1827: PUSH
1828: LD_INT 34
1830: PUSH
1831: LD_INT 40
1833: PUSH
1834: LD_INT 48
1836: PUSH
1837: LD_INT 49
1839: PUSH
1840: LD_INT 50
1842: PUSH
1843: LD_INT 51
1845: PUSH
1846: LD_INT 52
1848: PUSH
1849: LD_INT 53
1851: PUSH
1852: LD_INT 54
1854: PUSH
1855: LD_INT 55
1857: PUSH
1858: LD_INT 56
1860: PUSH
1861: LD_INT 57
1863: PUSH
1864: LD_INT 58
1866: PUSH
1867: LD_INT 59
1869: PUSH
1870: LD_INT 60
1872: PUSH
1873: LD_INT 61
1875: PUSH
1876: LD_INT 62
1878: PUSH
1879: LD_INT 80
1881: PUSH
1882: LD_INT 82
1884: PUSH
1885: LD_INT 83
1887: PUSH
1888: LD_INT 84
1890: PUSH
1891: LD_INT 85
1893: PUSH
1894: LD_INT 86
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
1950: GO 2417
1952: LD_INT 2
1954: DOUBLE
1955: EQUAL
1956: IFTRUE 1960
1958: GO 2186
1960: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1961: LD_ADDR_VAR 0 4
1965: PUSH
1966: LD_INT 35
1968: PUSH
1969: LD_INT 45
1971: PUSH
1972: LD_INT 46
1974: PUSH
1975: LD_INT 47
1977: PUSH
1978: LD_INT 82
1980: PUSH
1981: LD_INT 83
1983: PUSH
1984: LD_INT 84
1986: PUSH
1987: LD_INT 85
1989: PUSH
1990: LD_INT 87
1992: PUSH
1993: LD_INT 70
1995: PUSH
1996: LD_INT 1
1998: PUSH
1999: LD_INT 11
2001: PUSH
2002: LD_INT 3
2004: PUSH
2005: LD_INT 4
2007: PUSH
2008: LD_INT 5
2010: PUSH
2011: LD_INT 6
2013: PUSH
2014: LD_INT 15
2016: PUSH
2017: LD_INT 18
2019: PUSH
2020: LD_INT 7
2022: PUSH
2023: LD_INT 17
2025: PUSH
2026: LD_INT 8
2028: PUSH
2029: LD_INT 20
2031: PUSH
2032: LD_INT 21
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 72
2040: PUSH
2041: LD_INT 26
2043: PUSH
2044: LD_INT 69
2046: PUSH
2047: LD_INT 39
2049: PUSH
2050: LD_INT 40
2052: PUSH
2053: LD_INT 41
2055: PUSH
2056: LD_INT 42
2058: PUSH
2059: LD_INT 43
2061: PUSH
2062: LD_INT 48
2064: PUSH
2065: LD_INT 49
2067: PUSH
2068: LD_INT 50
2070: PUSH
2071: LD_INT 51
2073: PUSH
2074: LD_INT 52
2076: PUSH
2077: LD_INT 53
2079: PUSH
2080: LD_INT 54
2082: PUSH
2083: LD_INT 55
2085: PUSH
2086: LD_INT 56
2088: PUSH
2089: LD_INT 60
2091: PUSH
2092: LD_INT 61
2094: PUSH
2095: LD_INT 62
2097: PUSH
2098: LD_INT 66
2100: PUSH
2101: LD_INT 67
2103: PUSH
2104: LD_INT 68
2106: PUSH
2107: LD_INT 81
2109: PUSH
2110: LD_INT 82
2112: PUSH
2113: LD_INT 83
2115: PUSH
2116: LD_INT 84
2118: PUSH
2119: LD_INT 85
2121: PUSH
2122: LD_INT 87
2124: PUSH
2125: LD_INT 88
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: ST_TO_ADDR
2184: GO 2417
2186: LD_INT 3
2188: DOUBLE
2189: EQUAL
2190: IFTRUE 2194
2192: GO 2416
2194: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: LD_INT 46
2202: PUSH
2203: LD_INT 47
2205: PUSH
2206: LD_INT 1
2208: PUSH
2209: LD_INT 2
2211: PUSH
2212: LD_INT 82
2214: PUSH
2215: LD_INT 83
2217: PUSH
2218: LD_INT 84
2220: PUSH
2221: LD_INT 85
2223: PUSH
2224: LD_INT 86
2226: PUSH
2227: LD_INT 11
2229: PUSH
2230: LD_INT 9
2232: PUSH
2233: LD_INT 20
2235: PUSH
2236: LD_INT 19
2238: PUSH
2239: LD_INT 21
2241: PUSH
2242: LD_INT 24
2244: PUSH
2245: LD_INT 22
2247: PUSH
2248: LD_INT 25
2250: PUSH
2251: LD_INT 28
2253: PUSH
2254: LD_INT 29
2256: PUSH
2257: LD_INT 30
2259: PUSH
2260: LD_INT 31
2262: PUSH
2263: LD_INT 37
2265: PUSH
2266: LD_INT 38
2268: PUSH
2269: LD_INT 32
2271: PUSH
2272: LD_INT 27
2274: PUSH
2275: LD_INT 33
2277: PUSH
2278: LD_INT 69
2280: PUSH
2281: LD_INT 39
2283: PUSH
2284: LD_INT 34
2286: PUSH
2287: LD_INT 40
2289: PUSH
2290: LD_INT 71
2292: PUSH
2293: LD_INT 23
2295: PUSH
2296: LD_INT 44
2298: PUSH
2299: LD_INT 48
2301: PUSH
2302: LD_INT 49
2304: PUSH
2305: LD_INT 50
2307: PUSH
2308: LD_INT 51
2310: PUSH
2311: LD_INT 52
2313: PUSH
2314: LD_INT 53
2316: PUSH
2317: LD_INT 54
2319: PUSH
2320: LD_INT 55
2322: PUSH
2323: LD_INT 56
2325: PUSH
2326: LD_INT 57
2328: PUSH
2329: LD_INT 58
2331: PUSH
2332: LD_INT 59
2334: PUSH
2335: LD_INT 63
2337: PUSH
2338: LD_INT 64
2340: PUSH
2341: LD_INT 65
2343: PUSH
2344: LD_INT 82
2346: PUSH
2347: LD_INT 83
2349: PUSH
2350: LD_INT 84
2352: PUSH
2353: LD_INT 85
2355: PUSH
2356: LD_INT 86
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: ST_TO_ADDR
2414: GO 2417
2416: POP
// if state > - 1 and state < 3 then
2417: LD_VAR 0 3
2421: PUSH
2422: LD_INT 1
2424: NEG
2425: GREATER
2426: PUSH
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 3
2434: LESS
2435: AND
2436: IFFALSE 2493
// for i in result do
2438: LD_ADDR_VAR 0 5
2442: PUSH
2443: LD_VAR 0 4
2447: PUSH
2448: FOR_IN
2449: IFFALSE 2491
// if GetTech ( i , side ) <> state then
2451: LD_VAR 0 5
2455: PPUSH
2456: LD_VAR 0 1
2460: PPUSH
2461: CALL_OW 321
2465: PUSH
2466: LD_VAR 0 3
2470: NONEQUAL
2471: IFFALSE 2489
// result := result diff i ;
2473: LD_ADDR_VAR 0 4
2477: PUSH
2478: LD_VAR 0 4
2482: PUSH
2483: LD_VAR 0 5
2487: DIFF
2488: ST_TO_ADDR
2489: GO 2448
2491: POP
2492: POP
// end ;
2493: LD_VAR 0 4
2497: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
// result := true ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: LD_VAR 0 2
2520: PPUSH
2521: CALL_OW 480
2525: ST_TO_ADDR
// if not tmp then
2526: LD_VAR 0 5
2530: NOT
2531: IFFALSE 2535
// exit ;
2533: GO 2584
// for i in tmp do
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_VAR 0 5
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2582
// if GetTech ( i , side ) <> state_researched then
2548: LD_VAR 0 4
2552: PPUSH
2553: LD_VAR 0 1
2557: PPUSH
2558: CALL_OW 321
2562: PUSH
2563: LD_INT 2
2565: NONEQUAL
2566: IFFALSE 2580
// begin result := false ;
2568: LD_ADDR_VAR 0 3
2572: PUSH
2573: LD_INT 0
2575: ST_TO_ADDR
// exit ;
2576: POP
2577: POP
2578: GO 2584
// end ;
2580: GO 2545
2582: POP
2583: POP
// end ;
2584: LD_VAR 0 3
2588: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2589: LD_INT 0
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
2595: PPUSH
2596: PPUSH
2597: PPUSH
2598: PPUSH
2599: PPUSH
2600: PPUSH
2601: PPUSH
2602: PPUSH
2603: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2604: LD_VAR 0 1
2608: NOT
2609: PUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 257
2619: PUSH
2620: LD_INT 9
2622: NONEQUAL
2623: OR
2624: IFFALSE 2628
// exit ;
2626: GO 3201
// side := GetSide ( unit ) ;
2628: LD_ADDR_VAR 0 9
2632: PUSH
2633: LD_VAR 0 1
2637: PPUSH
2638: CALL_OW 255
2642: ST_TO_ADDR
// tech_space := tech_spacanom ;
2643: LD_ADDR_VAR 0 12
2647: PUSH
2648: LD_INT 29
2650: ST_TO_ADDR
// tech_time := tech_taurad ;
2651: LD_ADDR_VAR 0 13
2655: PUSH
2656: LD_INT 28
2658: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2659: LD_ADDR_VAR 0 11
2663: PUSH
2664: LD_VAR 0 1
2668: PPUSH
2669: CALL_OW 310
2673: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2674: LD_VAR 0 11
2678: PPUSH
2679: CALL_OW 247
2683: PUSH
2684: LD_INT 2
2686: EQUAL
2687: IFFALSE 2691
// exit ;
2689: GO 3201
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2691: LD_ADDR_VAR 0 8
2695: PUSH
2696: LD_INT 81
2698: PUSH
2699: LD_VAR 0 9
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 3
2710: PUSH
2711: LD_INT 21
2713: PUSH
2714: LD_INT 3
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// if not tmp then
2734: LD_VAR 0 8
2738: NOT
2739: IFFALSE 2743
// exit ;
2741: GO 3201
// if in_unit then
2743: LD_VAR 0 11
2747: IFFALSE 2771
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2749: LD_ADDR_VAR 0 10
2753: PUSH
2754: LD_VAR 0 8
2758: PPUSH
2759: LD_VAR 0 11
2763: PPUSH
2764: CALL_OW 74
2768: ST_TO_ADDR
2769: GO 2791
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2771: LD_ADDR_VAR 0 10
2775: PUSH
2776: LD_VAR 0 8
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: CALL_OW 74
2790: ST_TO_ADDR
// if not enemy then
2791: LD_VAR 0 10
2795: NOT
2796: IFFALSE 2800
// exit ;
2798: GO 3201
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2800: LD_VAR 0 11
2804: PUSH
2805: LD_VAR 0 11
2809: PPUSH
2810: LD_VAR 0 10
2814: PPUSH
2815: CALL_OW 296
2819: PUSH
2820: LD_INT 13
2822: GREATER
2823: AND
2824: PUSH
2825: LD_VAR 0 1
2829: PPUSH
2830: LD_VAR 0 10
2834: PPUSH
2835: CALL_OW 296
2839: PUSH
2840: LD_INT 12
2842: GREATER
2843: OR
2844: IFFALSE 2848
// exit ;
2846: GO 3201
// missile := [ 1 ] ;
2848: LD_ADDR_VAR 0 14
2852: PUSH
2853: LD_INT 1
2855: PUSH
2856: EMPTY
2857: LIST
2858: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2859: LD_VAR 0 9
2863: PPUSH
2864: LD_VAR 0 12
2868: PPUSH
2869: CALL_OW 325
2873: IFFALSE 2902
// missile := Replace ( missile , missile + 1 , 2 ) ;
2875: LD_ADDR_VAR 0 14
2879: PUSH
2880: LD_VAR 0 14
2884: PPUSH
2885: LD_VAR 0 14
2889: PUSH
2890: LD_INT 1
2892: PLUS
2893: PPUSH
2894: LD_INT 2
2896: PPUSH
2897: CALL_OW 1
2901: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2902: LD_VAR 0 9
2906: PPUSH
2907: LD_VAR 0 13
2911: PPUSH
2912: CALL_OW 325
2916: PUSH
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 255
2926: PPUSH
2927: LD_VAR 0 13
2931: PPUSH
2932: CALL_OW 325
2936: NOT
2937: AND
2938: IFFALSE 2967
// missile := Replace ( missile , missile + 1 , 3 ) ;
2940: LD_ADDR_VAR 0 14
2944: PUSH
2945: LD_VAR 0 14
2949: PPUSH
2950: LD_VAR 0 14
2954: PUSH
2955: LD_INT 1
2957: PLUS
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 1
2966: ST_TO_ADDR
// if missile < 2 then
2967: LD_VAR 0 14
2971: PUSH
2972: LD_INT 2
2974: LESS
2975: IFFALSE 2979
// exit ;
2977: GO 3201
// x := GetX ( enemy ) ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: LD_VAR 0 10
2988: PPUSH
2989: CALL_OW 250
2993: ST_TO_ADDR
// y := GetY ( enemy ) ;
2994: LD_ADDR_VAR 0 5
2998: PUSH
2999: LD_VAR 0 10
3003: PPUSH
3004: CALL_OW 251
3008: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3009: LD_ADDR_VAR 0 6
3013: PUSH
3014: LD_VAR 0 4
3018: PUSH
3019: LD_INT 1
3021: NEG
3022: PPUSH
3023: LD_INT 1
3025: PPUSH
3026: CALL_OW 12
3030: PLUS
3031: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3032: LD_ADDR_VAR 0 7
3036: PUSH
3037: LD_VAR 0 5
3041: PUSH
3042: LD_INT 1
3044: NEG
3045: PPUSH
3046: LD_INT 1
3048: PPUSH
3049: CALL_OW 12
3053: PLUS
3054: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3055: LD_VAR 0 6
3059: PPUSH
3060: LD_VAR 0 7
3064: PPUSH
3065: CALL_OW 488
3069: NOT
3070: IFFALSE 3092
// begin _x := x ;
3072: LD_ADDR_VAR 0 6
3076: PUSH
3077: LD_VAR 0 4
3081: ST_TO_ADDR
// _y := y ;
3082: LD_ADDR_VAR 0 7
3086: PUSH
3087: LD_VAR 0 5
3091: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3092: LD_ADDR_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: PPUSH
3100: LD_VAR 0 14
3104: PPUSH
3105: CALL_OW 12
3109: ST_TO_ADDR
// case i of 1 :
3110: LD_VAR 0 3
3114: PUSH
3115: LD_INT 1
3117: DOUBLE
3118: EQUAL
3119: IFTRUE 3123
3121: GO 3140
3123: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 10
3133: PPUSH
3134: CALL_OW 115
3138: GO 3201
3140: LD_INT 2
3142: DOUBLE
3143: EQUAL
3144: IFTRUE 3148
3146: GO 3170
3148: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3149: LD_VAR 0 1
3153: PPUSH
3154: LD_VAR 0 6
3158: PPUSH
3159: LD_VAR 0 7
3163: PPUSH
3164: CALL_OW 153
3168: GO 3201
3170: LD_INT 3
3172: DOUBLE
3173: EQUAL
3174: IFTRUE 3178
3176: GO 3200
3178: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3179: LD_VAR 0 1
3183: PPUSH
3184: LD_VAR 0 6
3188: PPUSH
3189: LD_VAR 0 7
3193: PPUSH
3194: CALL_OW 154
3198: GO 3201
3200: POP
// end ;
3201: LD_VAR 0 2
3205: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
3213: PPUSH
// if not unit or not building then
3214: LD_VAR 0 1
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: NOT
3225: OR
3226: IFFALSE 3230
// exit ;
3228: GO 3388
// x := GetX ( building ) ;
3230: LD_ADDR_VAR 0 5
3234: PUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: CALL_OW 250
3244: ST_TO_ADDR
// y := GetY ( building ) ;
3245: LD_ADDR_VAR 0 6
3249: PUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: CALL_OW 251
3259: ST_TO_ADDR
// for i = 0 to 5 do
3260: LD_ADDR_VAR 0 4
3264: PUSH
3265: DOUBLE
3266: LD_INT 0
3268: DEC
3269: ST_TO_ADDR
3270: LD_INT 5
3272: PUSH
3273: FOR_TO
3274: IFFALSE 3386
// begin _x := ShiftX ( x , i , 3 ) ;
3276: LD_ADDR_VAR 0 7
3280: PUSH
3281: LD_VAR 0 5
3285: PPUSH
3286: LD_VAR 0 4
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: CALL_OW 272
3298: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3299: LD_ADDR_VAR 0 8
3303: PUSH
3304: LD_VAR 0 6
3308: PPUSH
3309: LD_VAR 0 4
3313: PPUSH
3314: LD_INT 3
3316: PPUSH
3317: CALL_OW 273
3321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3322: LD_VAR 0 7
3326: PPUSH
3327: LD_VAR 0 8
3331: PPUSH
3332: CALL_OW 488
3336: NOT
3337: IFFALSE 3341
// continue ;
3339: GO 3273
// if HexInfo ( _x , _y ) = 0 then
3341: LD_VAR 0 7
3345: PPUSH
3346: LD_VAR 0 8
3350: PPUSH
3351: CALL_OW 428
3355: PUSH
3356: LD_INT 0
3358: EQUAL
3359: IFFALSE 3384
// begin ComMoveXY ( unit , _x , _y ) ;
3361: LD_VAR 0 1
3365: PPUSH
3366: LD_VAR 0 7
3370: PPUSH
3371: LD_VAR 0 8
3375: PPUSH
3376: CALL_OW 111
// exit ;
3380: POP
3381: POP
3382: GO 3388
// end ; end ;
3384: GO 3273
3386: POP
3387: POP
// end ;
3388: LD_VAR 0 3
3392: RET
// export function ScanBase ( side , base_area ) ; begin
3393: LD_INT 0
3395: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3396: LD_ADDR_VAR 0 3
3400: PUSH
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 81
3408: PUSH
3409: LD_VAR 0 1
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PPUSH
3418: CALL_OW 70
3422: ST_TO_ADDR
// end ;
3423: LD_VAR 0 3
3427: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3428: LD_INT 0
3430: PPUSH
3431: PPUSH
3432: PPUSH
3433: PPUSH
// result := false ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// side := GetSide ( unit ) ;
3442: LD_ADDR_VAR 0 3
3446: PUSH
3447: LD_VAR 0 1
3451: PPUSH
3452: CALL_OW 255
3456: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3457: LD_ADDR_VAR 0 4
3461: PUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 248
3471: ST_TO_ADDR
// case nat of 1 :
3472: LD_VAR 0 4
3476: PUSH
3477: LD_INT 1
3479: DOUBLE
3480: EQUAL
3481: IFTRUE 3485
3483: GO 3496
3485: POP
// tech := tech_lassight ; 2 :
3486: LD_ADDR_VAR 0 5
3490: PUSH
3491: LD_INT 12
3493: ST_TO_ADDR
3494: GO 3535
3496: LD_INT 2
3498: DOUBLE
3499: EQUAL
3500: IFTRUE 3504
3502: GO 3515
3504: POP
// tech := tech_mortar ; 3 :
3505: LD_ADDR_VAR 0 5
3509: PUSH
3510: LD_INT 41
3512: ST_TO_ADDR
3513: GO 3535
3515: LD_INT 3
3517: DOUBLE
3518: EQUAL
3519: IFTRUE 3523
3521: GO 3534
3523: POP
// tech := tech_bazooka ; end ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_INT 44
3531: ST_TO_ADDR
3532: GO 3535
3534: POP
// if Researched ( side , tech ) then
3535: LD_VAR 0 3
3539: PPUSH
3540: LD_VAR 0 5
3544: PPUSH
3545: CALL_OW 325
3549: IFFALSE 3576
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3551: LD_ADDR_VAR 0 2
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: LD_INT 8
3561: PUSH
3562: LD_INT 9
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_VAR 0 4
3574: ARRAY
3575: ST_TO_ADDR
// end ;
3576: LD_VAR 0 2
3580: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3581: LD_INT 0
3583: PPUSH
3584: PPUSH
3585: PPUSH
// if not mines then
3586: LD_VAR 0 2
3590: NOT
3591: IFFALSE 3595
// exit ;
3593: GO 3739
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_INT 81
3602: PUSH
3603: LD_VAR 0 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 3
3614: PUSH
3615: LD_INT 21
3617: PUSH
3618: LD_INT 3
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PPUSH
3633: CALL_OW 69
3637: ST_TO_ADDR
// for i in mines do
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: LD_VAR 0 2
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3737
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3651: LD_VAR 0 4
3655: PUSH
3656: LD_INT 1
3658: ARRAY
3659: PPUSH
3660: LD_VAR 0 4
3664: PUSH
3665: LD_INT 2
3667: ARRAY
3668: PPUSH
3669: CALL_OW 458
3673: NOT
3674: IFFALSE 3678
// continue ;
3676: GO 3648
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3678: LD_VAR 0 4
3682: PUSH
3683: LD_INT 1
3685: ARRAY
3686: PPUSH
3687: LD_VAR 0 4
3691: PUSH
3692: LD_INT 2
3694: ARRAY
3695: PPUSH
3696: CALL_OW 428
3700: PUSH
3701: LD_VAR 0 5
3705: IN
3706: IFFALSE 3735
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3708: LD_VAR 0 4
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: LD_VAR 0 4
3721: PUSH
3722: LD_INT 2
3724: ARRAY
3725: PPUSH
3726: LD_VAR 0 1
3730: PPUSH
3731: CALL_OW 456
// end ;
3735: GO 3648
3737: POP
3738: POP
// end ;
3739: LD_VAR 0 3
3743: RET
// export function Count ( array ) ; begin
3744: LD_INT 0
3746: PPUSH
// result := array + 0 ;
3747: LD_ADDR_VAR 0 2
3751: PUSH
3752: LD_VAR 0 1
3756: PUSH
3757: LD_INT 0
3759: PLUS
3760: ST_TO_ADDR
// end ;
3761: LD_VAR 0 2
3765: RET
// export function IsEmpty ( building ) ; begin
3766: LD_INT 0
3768: PPUSH
// if not building then
3769: LD_VAR 0 1
3773: NOT
3774: IFFALSE 3778
// exit ;
3776: GO 3821
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3778: LD_ADDR_VAR 0 2
3782: PUSH
3783: LD_VAR 0 1
3787: PUSH
3788: LD_INT 22
3790: PUSH
3791: LD_VAR 0 1
3795: PPUSH
3796: CALL_OW 255
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 58
3807: PUSH
3808: EMPTY
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PPUSH
3815: CALL_OW 69
3819: IN
3820: ST_TO_ADDR
// end ;
3821: LD_VAR 0 2
3825: RET
// export function IsNotFull ( building ) ; var places ; begin
3826: LD_INT 0
3828: PPUSH
3829: PPUSH
// if not building then
3830: LD_VAR 0 1
3834: NOT
3835: IFFALSE 3839
// exit ;
3837: GO 3867
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3839: LD_ADDR_VAR 0 2
3843: PUSH
3844: LD_VAR 0 1
3848: PPUSH
3849: LD_INT 3
3851: PUSH
3852: LD_INT 62
3854: PUSH
3855: EMPTY
3856: LIST
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PPUSH
3862: CALL_OW 72
3866: ST_TO_ADDR
// end ;
3867: LD_VAR 0 2
3871: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
3876: PPUSH
3877: PPUSH
// tmp := [ ] ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: EMPTY
3884: ST_TO_ADDR
// list := [ ] ;
3885: LD_ADDR_VAR 0 5
3889: PUSH
3890: EMPTY
3891: ST_TO_ADDR
// for i = 16 to 25 do
3892: LD_ADDR_VAR 0 4
3896: PUSH
3897: DOUBLE
3898: LD_INT 16
3900: DEC
3901: ST_TO_ADDR
3902: LD_INT 25
3904: PUSH
3905: FOR_TO
3906: IFFALSE 3979
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3908: LD_ADDR_VAR 0 3
3912: PUSH
3913: LD_VAR 0 3
3917: PUSH
3918: LD_INT 22
3920: PUSH
3921: LD_VAR 0 1
3925: PPUSH
3926: CALL_OW 255
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PUSH
3935: LD_INT 91
3937: PUSH
3938: LD_VAR 0 1
3942: PUSH
3943: LD_INT 6
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 30
3953: PUSH
3954: LD_VAR 0 4
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: PPUSH
3971: CALL_OW 69
3975: ADD
3976: ST_TO_ADDR
3977: GO 3905
3979: POP
3980: POP
// for i = 1 to tmp do
3981: LD_ADDR_VAR 0 4
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_VAR 0 3
3995: PUSH
3996: FOR_TO
3997: IFFALSE 4085
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3999: LD_ADDR_VAR 0 5
4003: PUSH
4004: LD_VAR 0 5
4008: PUSH
4009: LD_VAR 0 3
4013: PUSH
4014: LD_VAR 0 4
4018: ARRAY
4019: PPUSH
4020: CALL_OW 266
4024: PUSH
4025: LD_VAR 0 3
4029: PUSH
4030: LD_VAR 0 4
4034: ARRAY
4035: PPUSH
4036: CALL_OW 250
4040: PUSH
4041: LD_VAR 0 3
4045: PUSH
4046: LD_VAR 0 4
4050: ARRAY
4051: PPUSH
4052: CALL_OW 251
4056: PUSH
4057: LD_VAR 0 3
4061: PUSH
4062: LD_VAR 0 4
4066: ARRAY
4067: PPUSH
4068: CALL_OW 254
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: ADD
4082: ST_TO_ADDR
4083: GO 3996
4085: POP
4086: POP
// result := list ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_VAR 0 5
4096: ST_TO_ADDR
// end ;
4097: LD_VAR 0 2
4101: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4102: LD_INT 0
4104: PPUSH
4105: PPUSH
4106: PPUSH
4107: PPUSH
4108: PPUSH
4109: PPUSH
4110: PPUSH
// if not factory then
4111: LD_VAR 0 1
4115: NOT
4116: IFFALSE 4120
// exit ;
4118: GO 4713
// if control = control_apeman then
4120: LD_VAR 0 4
4124: PUSH
4125: LD_INT 5
4127: EQUAL
4128: IFFALSE 4237
// begin tmp := UnitsInside ( factory ) ;
4130: LD_ADDR_VAR 0 8
4134: PUSH
4135: LD_VAR 0 1
4139: PPUSH
4140: CALL_OW 313
4144: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4145: LD_VAR 0 8
4149: PPUSH
4150: LD_INT 25
4152: PUSH
4153: LD_INT 12
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: CALL_OW 72
4164: NOT
4165: IFFALSE 4175
// control := control_manual ;
4167: LD_ADDR_VAR 0 4
4171: PUSH
4172: LD_INT 1
4174: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4175: LD_ADDR_VAR 0 8
4179: PUSH
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL 3872 0 1
4189: ST_TO_ADDR
// if tmp then
4190: LD_VAR 0 8
4194: IFFALSE 4237
// begin for i in tmp do
4196: LD_ADDR_VAR 0 7
4200: PUSH
4201: LD_VAR 0 8
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4235
// if i [ 1 ] = b_ext_radio then
4209: LD_VAR 0 7
4213: PUSH
4214: LD_INT 1
4216: ARRAY
4217: PUSH
4218: LD_INT 22
4220: EQUAL
4221: IFFALSE 4233
// begin control := control_remote ;
4223: LD_ADDR_VAR 0 4
4227: PUSH
4228: LD_INT 2
4230: ST_TO_ADDR
// break ;
4231: GO 4235
// end ;
4233: GO 4206
4235: POP
4236: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_VAR 0 2
4246: PPUSH
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_VAR 0 4
4256: PPUSH
4257: LD_VAR 0 5
4261: PPUSH
4262: CALL_OW 448
4266: IFFALSE 4301
// begin result := [ chassis , engine , control , weapon ] ;
4268: LD_ADDR_VAR 0 6
4272: PUSH
4273: LD_VAR 0 2
4277: PUSH
4278: LD_VAR 0 3
4282: PUSH
4283: LD_VAR 0 4
4287: PUSH
4288: LD_VAR 0 5
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// exit ;
4299: GO 4713
// end ; _chassis := AvailableChassisList ( factory ) ;
4301: LD_ADDR_VAR 0 9
4305: PUSH
4306: LD_VAR 0 1
4310: PPUSH
4311: CALL_OW 475
4315: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4316: LD_ADDR_VAR 0 11
4320: PUSH
4321: LD_VAR 0 1
4325: PPUSH
4326: CALL_OW 476
4330: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4331: LD_ADDR_VAR 0 12
4335: PUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 477
4345: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4346: LD_ADDR_VAR 0 10
4350: PUSH
4351: LD_VAR 0 1
4355: PPUSH
4356: CALL_OW 478
4360: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4361: LD_VAR 0 9
4365: NOT
4366: PUSH
4367: LD_VAR 0 11
4371: NOT
4372: OR
4373: PUSH
4374: LD_VAR 0 12
4378: NOT
4379: OR
4380: PUSH
4381: LD_VAR 0 10
4385: NOT
4386: OR
4387: IFFALSE 4422
// begin result := [ chassis , engine , control , weapon ] ;
4389: LD_ADDR_VAR 0 6
4393: PUSH
4394: LD_VAR 0 2
4398: PUSH
4399: LD_VAR 0 3
4403: PUSH
4404: LD_VAR 0 4
4408: PUSH
4409: LD_VAR 0 5
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: ST_TO_ADDR
// exit ;
4420: GO 4713
// end ; if not chassis in _chassis then
4422: LD_VAR 0 2
4426: PUSH
4427: LD_VAR 0 9
4431: IN
4432: NOT
4433: IFFALSE 4459
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4435: LD_ADDR_VAR 0 2
4439: PUSH
4440: LD_VAR 0 9
4444: PUSH
4445: LD_INT 1
4447: PPUSH
4448: LD_VAR 0 9
4452: PPUSH
4453: CALL_OW 12
4457: ARRAY
4458: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4459: LD_VAR 0 2
4463: PPUSH
4464: LD_VAR 0 3
4468: PPUSH
4469: CALL 4718 0 2
4473: NOT
4474: IFFALSE 4533
// repeat engine := _engine [ 1 ] ;
4476: LD_ADDR_VAR 0 3
4480: PUSH
4481: LD_VAR 0 11
4485: PUSH
4486: LD_INT 1
4488: ARRAY
4489: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4490: LD_ADDR_VAR 0 11
4494: PUSH
4495: LD_VAR 0 11
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: CALL_OW 3
4507: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4508: LD_VAR 0 2
4512: PPUSH
4513: LD_VAR 0 3
4517: PPUSH
4518: CALL 4718 0 2
4522: PUSH
4523: LD_VAR 0 11
4527: PUSH
4528: EMPTY
4529: EQUAL
4530: OR
4531: IFFALSE 4476
// if not control in _control then
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 12
4542: IN
4543: NOT
4544: IFFALSE 4570
// control := _control [ rand ( 1 , _control ) ] ;
4546: LD_ADDR_VAR 0 4
4550: PUSH
4551: LD_VAR 0 12
4555: PUSH
4556: LD_INT 1
4558: PPUSH
4559: LD_VAR 0 12
4563: PPUSH
4564: CALL_OW 12
4568: ARRAY
4569: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4570: LD_VAR 0 2
4574: PPUSH
4575: LD_VAR 0 5
4579: PPUSH
4580: CALL 4938 0 2
4584: NOT
4585: IFFALSE 4644
// repeat weapon := _weapon [ 1 ] ;
4587: LD_ADDR_VAR 0 5
4591: PUSH
4592: LD_VAR 0 10
4596: PUSH
4597: LD_INT 1
4599: ARRAY
4600: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4601: LD_ADDR_VAR 0 10
4605: PUSH
4606: LD_VAR 0 10
4610: PPUSH
4611: LD_INT 1
4613: PPUSH
4614: CALL_OW 3
4618: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4619: LD_VAR 0 2
4623: PPUSH
4624: LD_VAR 0 5
4628: PPUSH
4629: CALL 4938 0 2
4633: PUSH
4634: LD_VAR 0 10
4638: PUSH
4639: EMPTY
4640: EQUAL
4641: OR
4642: IFFALSE 4587
// result := [ ] ;
4644: LD_ADDR_VAR 0 6
4648: PUSH
4649: EMPTY
4650: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4651: LD_VAR 0 1
4655: PPUSH
4656: LD_VAR 0 2
4660: PPUSH
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_VAR 0 4
4670: PPUSH
4671: LD_VAR 0 5
4675: PPUSH
4676: CALL_OW 448
4680: IFFALSE 4713
// result := [ chassis , engine , control , weapon ] ;
4682: LD_ADDR_VAR 0 6
4686: PUSH
4687: LD_VAR 0 2
4691: PUSH
4692: LD_VAR 0 3
4696: PUSH
4697: LD_VAR 0 4
4701: PUSH
4702: LD_VAR 0 5
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: ST_TO_ADDR
// end ;
4713: LD_VAR 0 6
4717: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4718: LD_INT 0
4720: PPUSH
// if not chassis or not engine then
4721: LD_VAR 0 1
4725: NOT
4726: PUSH
4727: LD_VAR 0 2
4731: NOT
4732: OR
4733: IFFALSE 4737
// exit ;
4735: GO 4933
// case engine of engine_solar :
4737: LD_VAR 0 2
4741: PUSH
4742: LD_INT 2
4744: DOUBLE
4745: EQUAL
4746: IFTRUE 4750
4748: GO 4788
4750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4751: LD_ADDR_VAR 0 3
4755: PUSH
4756: LD_INT 11
4758: PUSH
4759: LD_INT 12
4761: PUSH
4762: LD_INT 13
4764: PUSH
4765: LD_INT 14
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: LD_INT 2
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: ST_TO_ADDR
4786: GO 4917
4788: LD_INT 1
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4858
4796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_INT 11
4804: PUSH
4805: LD_INT 12
4807: PUSH
4808: LD_INT 13
4810: PUSH
4811: LD_INT 14
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 3
4822: PUSH
4823: LD_INT 4
4825: PUSH
4826: LD_INT 5
4828: PUSH
4829: LD_INT 21
4831: PUSH
4832: LD_INT 23
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 24
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: ST_TO_ADDR
4856: GO 4917
4858: LD_INT 3
4860: DOUBLE
4861: EQUAL
4862: IFTRUE 4866
4864: GO 4916
4866: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4867: LD_ADDR_VAR 0 3
4871: PUSH
4872: LD_INT 13
4874: PUSH
4875: LD_INT 14
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: LD_INT 3
4883: PUSH
4884: LD_INT 4
4886: PUSH
4887: LD_INT 5
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: LD_INT 22
4895: PUSH
4896: LD_INT 23
4898: PUSH
4899: LD_INT 24
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: ST_TO_ADDR
4914: GO 4917
4916: POP
// result := ( chassis in result ) ;
4917: LD_ADDR_VAR 0 3
4921: PUSH
4922: LD_VAR 0 1
4926: PUSH
4927: LD_VAR 0 3
4931: IN
4932: ST_TO_ADDR
// end ;
4933: LD_VAR 0 3
4937: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4938: LD_INT 0
4940: PPUSH
// if not chassis or not weapon then
4941: LD_VAR 0 1
4945: NOT
4946: PUSH
4947: LD_VAR 0 2
4951: NOT
4952: OR
4953: IFFALSE 4957
// exit ;
4955: GO 6017
// case weapon of us_machine_gun :
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 2
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 5000
4970: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: LD_INT 2
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: LD_INT 4
4987: PUSH
4988: LD_INT 5
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
4998: GO 6001
5000: LD_INT 3
5002: DOUBLE
5003: EQUAL
5004: IFTRUE 5008
5006: GO 5038
5008: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: LD_INT 3
5022: PUSH
5023: LD_INT 4
5025: PUSH
5026: LD_INT 5
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: ST_TO_ADDR
5036: GO 6001
5038: LD_INT 11
5040: DOUBLE
5041: EQUAL
5042: IFTRUE 5046
5044: GO 5076
5046: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5047: LD_ADDR_VAR 0 3
5051: PUSH
5052: LD_INT 1
5054: PUSH
5055: LD_INT 2
5057: PUSH
5058: LD_INT 3
5060: PUSH
5061: LD_INT 4
5063: PUSH
5064: LD_INT 5
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: ST_TO_ADDR
5074: GO 6001
5076: LD_INT 4
5078: DOUBLE
5079: EQUAL
5080: IFTRUE 5084
5082: GO 5110
5084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_INT 2
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: LD_INT 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: ST_TO_ADDR
5108: GO 6001
5110: LD_INT 5
5112: DOUBLE
5113: EQUAL
5114: IFTRUE 5118
5116: GO 5144
5118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 3
5129: PUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: ST_TO_ADDR
5142: GO 6001
5144: LD_INT 9
5146: DOUBLE
5147: EQUAL
5148: IFTRUE 5152
5150: GO 5178
5152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5153: LD_ADDR_VAR 0 3
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 3
5163: PUSH
5164: LD_INT 4
5166: PUSH
5167: LD_INT 5
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: ST_TO_ADDR
5176: GO 6001
5178: LD_INT 7
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5212
5186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: LD_INT 2
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: LD_INT 5
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: ST_TO_ADDR
5210: GO 6001
5212: LD_INT 12
5214: DOUBLE
5215: EQUAL
5216: IFTRUE 5220
5218: GO 5246
5220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5221: LD_ADDR_VAR 0 3
5225: PUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: ST_TO_ADDR
5244: GO 6001
5246: LD_INT 13
5248: DOUBLE
5249: EQUAL
5250: IFTRUE 5254
5252: GO 5280
5254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5255: LD_ADDR_VAR 0 3
5259: PUSH
5260: LD_INT 2
5262: PUSH
5263: LD_INT 3
5265: PUSH
5266: LD_INT 4
5268: PUSH
5269: LD_INT 5
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: ST_TO_ADDR
5278: GO 6001
5280: LD_INT 14
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5288
5286: GO 5306
5288: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 5
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: ST_TO_ADDR
5304: GO 6001
5306: LD_INT 6
5308: DOUBLE
5309: EQUAL
5310: IFTRUE 5314
5312: GO 5332
5314: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_INT 4
5322: PUSH
5323: LD_INT 5
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: ST_TO_ADDR
5330: GO 6001
5332: LD_INT 10
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5358
5340: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5341: LD_ADDR_VAR 0 3
5345: PUSH
5346: LD_INT 4
5348: PUSH
5349: LD_INT 5
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: ST_TO_ADDR
5356: GO 6001
5358: LD_INT 22
5360: DOUBLE
5361: EQUAL
5362: IFTRUE 5366
5364: GO 5392
5366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: LD_INT 11
5374: PUSH
5375: LD_INT 12
5377: PUSH
5378: LD_INT 13
5380: PUSH
5381: LD_INT 14
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 6001
5392: LD_INT 23
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5426
5400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5401: LD_ADDR_VAR 0 3
5405: PUSH
5406: LD_INT 11
5408: PUSH
5409: LD_INT 12
5411: PUSH
5412: LD_INT 13
5414: PUSH
5415: LD_INT 14
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 6001
5426: LD_INT 24
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5460
5434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_INT 11
5442: PUSH
5443: LD_INT 12
5445: PUSH
5446: LD_INT 13
5448: PUSH
5449: LD_INT 14
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: ST_TO_ADDR
5458: GO 6001
5460: LD_INT 30
5462: DOUBLE
5463: EQUAL
5464: IFTRUE 5468
5466: GO 5494
5468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5469: LD_ADDR_VAR 0 3
5473: PUSH
5474: LD_INT 11
5476: PUSH
5477: LD_INT 12
5479: PUSH
5480: LD_INT 13
5482: PUSH
5483: LD_INT 14
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: ST_TO_ADDR
5492: GO 6001
5494: LD_INT 25
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5520
5502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5503: LD_ADDR_VAR 0 3
5507: PUSH
5508: LD_INT 13
5510: PUSH
5511: LD_INT 14
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: ST_TO_ADDR
5518: GO 6001
5520: LD_INT 27
5522: DOUBLE
5523: EQUAL
5524: IFTRUE 5528
5526: GO 5546
5528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5529: LD_ADDR_VAR 0 3
5533: PUSH
5534: LD_INT 13
5536: PUSH
5537: LD_INT 14
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: ST_TO_ADDR
5544: GO 6001
5546: LD_INT 92
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5580
5554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_INT 11
5562: PUSH
5563: LD_INT 12
5565: PUSH
5566: LD_INT 13
5568: PUSH
5569: LD_INT 14
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: ST_TO_ADDR
5578: GO 6001
5580: LD_INT 28
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5588
5586: GO 5606
5588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_INT 13
5596: PUSH
5597: LD_INT 14
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: ST_TO_ADDR
5604: GO 6001
5606: LD_INT 29
5608: DOUBLE
5609: EQUAL
5610: IFTRUE 5614
5612: GO 5632
5614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5615: LD_ADDR_VAR 0 3
5619: PUSH
5620: LD_INT 13
5622: PUSH
5623: LD_INT 14
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: ST_TO_ADDR
5630: GO 6001
5632: LD_INT 31
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5658
5640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5641: LD_ADDR_VAR 0 3
5645: PUSH
5646: LD_INT 13
5648: PUSH
5649: LD_INT 14
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: ST_TO_ADDR
5656: GO 6001
5658: LD_INT 26
5660: DOUBLE
5661: EQUAL
5662: IFTRUE 5666
5664: GO 5684
5666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: LD_INT 13
5674: PUSH
5675: LD_INT 14
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: ST_TO_ADDR
5682: GO 6001
5684: LD_INT 42
5686: DOUBLE
5687: EQUAL
5688: IFTRUE 5692
5690: GO 5718
5692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_INT 21
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 24
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: ST_TO_ADDR
5716: GO 6001
5718: LD_INT 43
5720: DOUBLE
5721: EQUAL
5722: IFTRUE 5726
5724: GO 5752
5726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5727: LD_ADDR_VAR 0 3
5731: PUSH
5732: LD_INT 21
5734: PUSH
5735: LD_INT 22
5737: PUSH
5738: LD_INT 23
5740: PUSH
5741: LD_INT 24
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: ST_TO_ADDR
5750: GO 6001
5752: LD_INT 44
5754: DOUBLE
5755: EQUAL
5756: IFTRUE 5760
5758: GO 5786
5760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5761: LD_ADDR_VAR 0 3
5765: PUSH
5766: LD_INT 21
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 23
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: ST_TO_ADDR
5784: GO 6001
5786: LD_INT 45
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5820
5794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_INT 21
5802: PUSH
5803: LD_INT 22
5805: PUSH
5806: LD_INT 23
5808: PUSH
5809: LD_INT 24
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: ST_TO_ADDR
5818: GO 6001
5820: LD_INT 49
5822: DOUBLE
5823: EQUAL
5824: IFTRUE 5828
5826: GO 5854
5828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_INT 21
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 23
5842: PUSH
5843: LD_INT 24
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: ST_TO_ADDR
5852: GO 6001
5854: LD_INT 51
5856: DOUBLE
5857: EQUAL
5858: IFTRUE 5862
5860: GO 5888
5862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_INT 21
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 23
5876: PUSH
5877: LD_INT 24
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: ST_TO_ADDR
5886: GO 6001
5888: LD_INT 52
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5896
5894: GO 5922
5896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5897: LD_ADDR_VAR 0 3
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 23
5910: PUSH
5911: LD_INT 24
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: ST_TO_ADDR
5920: GO 6001
5922: LD_INT 53
5924: DOUBLE
5925: EQUAL
5926: IFTRUE 5930
5928: GO 5948
5930: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5931: LD_ADDR_VAR 0 3
5935: PUSH
5936: LD_INT 23
5938: PUSH
5939: LD_INT 24
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: ST_TO_ADDR
5946: GO 6001
5948: LD_INT 46
5950: DOUBLE
5951: EQUAL
5952: IFTRUE 5956
5954: GO 5974
5956: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5957: LD_ADDR_VAR 0 3
5961: PUSH
5962: LD_INT 23
5964: PUSH
5965: LD_INT 24
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: ST_TO_ADDR
5972: GO 6001
5974: LD_INT 47
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 5982
5980: GO 6000
5982: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5983: LD_ADDR_VAR 0 3
5987: PUSH
5988: LD_INT 23
5990: PUSH
5991: LD_INT 24
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: ST_TO_ADDR
5998: GO 6001
6000: POP
// result := ( chassis in result ) ;
6001: LD_ADDR_VAR 0 3
6005: PUSH
6006: LD_VAR 0 1
6010: PUSH
6011: LD_VAR 0 3
6015: IN
6016: ST_TO_ADDR
// end ;
6017: LD_VAR 0 3
6021: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6022: LD_INT 0
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
6029: PPUSH
6030: PPUSH
// result := array ;
6031: LD_ADDR_VAR 0 5
6035: PUSH
6036: LD_VAR 0 1
6040: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6041: LD_VAR 0 1
6045: NOT
6046: PUSH
6047: LD_VAR 0 2
6051: NOT
6052: OR
6053: PUSH
6054: LD_VAR 0 3
6058: NOT
6059: OR
6060: PUSH
6061: LD_VAR 0 2
6065: PUSH
6066: LD_VAR 0 1
6070: GREATER
6071: OR
6072: PUSH
6073: LD_VAR 0 3
6077: PUSH
6078: LD_VAR 0 1
6082: GREATER
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6384
// if direction then
6088: LD_VAR 0 4
6092: IFFALSE 6156
// begin d := 1 ;
6094: LD_ADDR_VAR 0 9
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if i_from > i_to then
6102: LD_VAR 0 2
6106: PUSH
6107: LD_VAR 0 3
6111: GREATER
6112: IFFALSE 6138
// length := ( array - i_from ) + i_to else
6114: LD_ADDR_VAR 0 11
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: LD_VAR 0 2
6128: MINUS
6129: PUSH
6130: LD_VAR 0 3
6134: PLUS
6135: ST_TO_ADDR
6136: GO 6154
// length := i_to - i_from ;
6138: LD_ADDR_VAR 0 11
6142: PUSH
6143: LD_VAR 0 3
6147: PUSH
6148: LD_VAR 0 2
6152: MINUS
6153: ST_TO_ADDR
// end else
6154: GO 6217
// begin d := - 1 ;
6156: LD_ADDR_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: NEG
6164: ST_TO_ADDR
// if i_from > i_to then
6165: LD_VAR 0 2
6169: PUSH
6170: LD_VAR 0 3
6174: GREATER
6175: IFFALSE 6195
// length := i_from - i_to else
6177: LD_ADDR_VAR 0 11
6181: PUSH
6182: LD_VAR 0 2
6186: PUSH
6187: LD_VAR 0 3
6191: MINUS
6192: ST_TO_ADDR
6193: GO 6217
// length := ( array - i_to ) + i_from ;
6195: LD_ADDR_VAR 0 11
6199: PUSH
6200: LD_VAR 0 1
6204: PUSH
6205: LD_VAR 0 3
6209: MINUS
6210: PUSH
6211: LD_VAR 0 2
6215: PLUS
6216: ST_TO_ADDR
// end ; if not length then
6217: LD_VAR 0 11
6221: NOT
6222: IFFALSE 6226
// exit ;
6224: GO 6384
// tmp := array ;
6226: LD_ADDR_VAR 0 10
6230: PUSH
6231: LD_VAR 0 1
6235: ST_TO_ADDR
// for i = 1 to length do
6236: LD_ADDR_VAR 0 6
6240: PUSH
6241: DOUBLE
6242: LD_INT 1
6244: DEC
6245: ST_TO_ADDR
6246: LD_VAR 0 11
6250: PUSH
6251: FOR_TO
6252: IFFALSE 6372
// begin for j = 1 to array do
6254: LD_ADDR_VAR 0 7
6258: PUSH
6259: DOUBLE
6260: LD_INT 1
6262: DEC
6263: ST_TO_ADDR
6264: LD_VAR 0 1
6268: PUSH
6269: FOR_TO
6270: IFFALSE 6358
// begin k := j + d ;
6272: LD_ADDR_VAR 0 8
6276: PUSH
6277: LD_VAR 0 7
6281: PUSH
6282: LD_VAR 0 9
6286: PLUS
6287: ST_TO_ADDR
// if k > array then
6288: LD_VAR 0 8
6292: PUSH
6293: LD_VAR 0 1
6297: GREATER
6298: IFFALSE 6308
// k := 1 ;
6300: LD_ADDR_VAR 0 8
6304: PUSH
6305: LD_INT 1
6307: ST_TO_ADDR
// if not k then
6308: LD_VAR 0 8
6312: NOT
6313: IFFALSE 6325
// k := array ;
6315: LD_ADDR_VAR 0 8
6319: PUSH
6320: LD_VAR 0 1
6324: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6325: LD_ADDR_VAR 0 10
6329: PUSH
6330: LD_VAR 0 10
6334: PPUSH
6335: LD_VAR 0 8
6339: PPUSH
6340: LD_VAR 0 1
6344: PUSH
6345: LD_VAR 0 7
6349: ARRAY
6350: PPUSH
6351: CALL_OW 1
6355: ST_TO_ADDR
// end ;
6356: GO 6269
6358: POP
6359: POP
// array := tmp ;
6360: LD_ADDR_VAR 0 1
6364: PUSH
6365: LD_VAR 0 10
6369: ST_TO_ADDR
// end ;
6370: GO 6251
6372: POP
6373: POP
// result := array ;
6374: LD_ADDR_VAR 0 5
6378: PUSH
6379: LD_VAR 0 1
6383: ST_TO_ADDR
// end ;
6384: LD_VAR 0 5
6388: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6389: LD_INT 0
6391: PPUSH
6392: PPUSH
// result := 0 ;
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// if not array or not value in array then
6401: LD_VAR 0 1
6405: NOT
6406: PUSH
6407: LD_VAR 0 2
6411: PUSH
6412: LD_VAR 0 1
6416: IN
6417: NOT
6418: OR
6419: IFFALSE 6423
// exit ;
6421: GO 6477
// for i = 1 to array do
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_VAR 0 1
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6475
// if value = array [ i ] then
6441: LD_VAR 0 2
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_VAR 0 4
6455: ARRAY
6456: EQUAL
6457: IFFALSE 6473
// begin result := i ;
6459: LD_ADDR_VAR 0 3
6463: PUSH
6464: LD_VAR 0 4
6468: ST_TO_ADDR
// exit ;
6469: POP
6470: POP
6471: GO 6477
// end ;
6473: GO 6438
6475: POP
6476: POP
// end ;
6477: LD_VAR 0 3
6481: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6482: LD_INT 0
6484: PPUSH
// vc_chassis := chassis ;
6485: LD_ADDR_OWVAR 37
6489: PUSH
6490: LD_VAR 0 1
6494: ST_TO_ADDR
// vc_engine := engine ;
6495: LD_ADDR_OWVAR 39
6499: PUSH
6500: LD_VAR 0 2
6504: ST_TO_ADDR
// vc_control := control ;
6505: LD_ADDR_OWVAR 38
6509: PUSH
6510: LD_VAR 0 3
6514: ST_TO_ADDR
// vc_weapon := weapon ;
6515: LD_ADDR_OWVAR 40
6519: PUSH
6520: LD_VAR 0 4
6524: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6525: LD_ADDR_OWVAR 41
6529: PUSH
6530: LD_VAR 0 5
6534: ST_TO_ADDR
// end ;
6535: LD_VAR 0 6
6539: RET
// export function WantPlant ( unit ) ; var task ; begin
6540: LD_INT 0
6542: PPUSH
6543: PPUSH
// result := false ;
6544: LD_ADDR_VAR 0 2
6548: PUSH
6549: LD_INT 0
6551: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_VAR 0 1
6561: PPUSH
6562: CALL_OW 437
6566: ST_TO_ADDR
// if task then
6567: LD_VAR 0 3
6571: IFFALSE 6599
// if task [ 1 ] [ 1 ] = p then
6573: LD_VAR 0 3
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: PUSH
6586: LD_STRING p
6588: EQUAL
6589: IFFALSE 6599
// result := true ;
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// end ;
6599: LD_VAR 0 2
6603: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6604: LD_INT 0
6606: PPUSH
6607: PPUSH
6608: PPUSH
6609: PPUSH
// if pos < 1 then
6610: LD_VAR 0 2
6614: PUSH
6615: LD_INT 1
6617: LESS
6618: IFFALSE 6622
// exit ;
6620: GO 6925
// if pos = 1 then
6622: LD_VAR 0 2
6626: PUSH
6627: LD_INT 1
6629: EQUAL
6630: IFFALSE 6663
// result := Replace ( arr , pos [ 1 ] , value ) else
6632: LD_ADDR_VAR 0 4
6636: PUSH
6637: LD_VAR 0 1
6641: PPUSH
6642: LD_VAR 0 2
6646: PUSH
6647: LD_INT 1
6649: ARRAY
6650: PPUSH
6651: LD_VAR 0 3
6655: PPUSH
6656: CALL_OW 1
6660: ST_TO_ADDR
6661: GO 6925
// begin tmp := arr ;
6663: LD_ADDR_VAR 0 6
6667: PUSH
6668: LD_VAR 0 1
6672: ST_TO_ADDR
// s_arr := [ tmp ] ;
6673: LD_ADDR_VAR 0 7
6677: PUSH
6678: LD_VAR 0 6
6682: PUSH
6683: EMPTY
6684: LIST
6685: ST_TO_ADDR
// for i = 1 to pos - 1 do
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: DOUBLE
6692: LD_INT 1
6694: DEC
6695: ST_TO_ADDR
6696: LD_VAR 0 2
6700: PUSH
6701: LD_INT 1
6703: MINUS
6704: PUSH
6705: FOR_TO
6706: IFFALSE 6751
// begin tmp := tmp [ pos [ i ] ] ;
6708: LD_ADDR_VAR 0 6
6712: PUSH
6713: LD_VAR 0 6
6717: PUSH
6718: LD_VAR 0 2
6722: PUSH
6723: LD_VAR 0 5
6727: ARRAY
6728: ARRAY
6729: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6730: LD_ADDR_VAR 0 7
6734: PUSH
6735: LD_VAR 0 7
6739: PUSH
6740: LD_VAR 0 6
6744: PUSH
6745: EMPTY
6746: LIST
6747: ADD
6748: ST_TO_ADDR
// end ;
6749: GO 6705
6751: POP
6752: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6753: LD_ADDR_VAR 0 6
6757: PUSH
6758: LD_VAR 0 6
6762: PPUSH
6763: LD_VAR 0 2
6767: PUSH
6768: LD_VAR 0 2
6772: ARRAY
6773: PPUSH
6774: LD_VAR 0 3
6778: PPUSH
6779: CALL_OW 1
6783: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6784: LD_ADDR_VAR 0 7
6788: PUSH
6789: LD_VAR 0 7
6793: PPUSH
6794: LD_VAR 0 7
6798: PPUSH
6799: LD_VAR 0 6
6803: PPUSH
6804: CALL_OW 1
6808: ST_TO_ADDR
// for i = s_arr downto 2 do
6809: LD_ADDR_VAR 0 5
6813: PUSH
6814: DOUBLE
6815: LD_VAR 0 7
6819: INC
6820: ST_TO_ADDR
6821: LD_INT 2
6823: PUSH
6824: FOR_DOWNTO
6825: IFFALSE 6909
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6827: LD_ADDR_VAR 0 6
6831: PUSH
6832: LD_VAR 0 7
6836: PUSH
6837: LD_VAR 0 5
6841: PUSH
6842: LD_INT 1
6844: MINUS
6845: ARRAY
6846: PPUSH
6847: LD_VAR 0 2
6851: PUSH
6852: LD_VAR 0 5
6856: PUSH
6857: LD_INT 1
6859: MINUS
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 7
6866: PUSH
6867: LD_VAR 0 5
6871: ARRAY
6872: PPUSH
6873: CALL_OW 1
6877: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6878: LD_ADDR_VAR 0 7
6882: PUSH
6883: LD_VAR 0 7
6887: PPUSH
6888: LD_VAR 0 5
6892: PUSH
6893: LD_INT 1
6895: MINUS
6896: PPUSH
6897: LD_VAR 0 6
6901: PPUSH
6902: CALL_OW 1
6906: ST_TO_ADDR
// end ;
6907: GO 6824
6909: POP
6910: POP
// result := s_arr [ 1 ] ;
6911: LD_ADDR_VAR 0 4
6915: PUSH
6916: LD_VAR 0 7
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: ST_TO_ADDR
// end ; end ;
6925: LD_VAR 0 4
6929: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6930: LD_INT 0
6932: PPUSH
6933: PPUSH
// if not list then
6934: LD_VAR 0 1
6938: NOT
6939: IFFALSE 6943
// exit ;
6941: GO 7034
// i := list [ pos1 ] ;
6943: LD_ADDR_VAR 0 5
6947: PUSH
6948: LD_VAR 0 1
6952: PUSH
6953: LD_VAR 0 2
6957: ARRAY
6958: ST_TO_ADDR
// if not i then
6959: LD_VAR 0 5
6963: NOT
6964: IFFALSE 6968
// exit ;
6966: GO 7034
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6968: LD_ADDR_VAR 0 1
6972: PUSH
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_VAR 0 1
6987: PUSH
6988: LD_VAR 0 3
6992: ARRAY
6993: PPUSH
6994: CALL_OW 1
6998: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6999: LD_ADDR_VAR 0 1
7003: PUSH
7004: LD_VAR 0 1
7008: PPUSH
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_VAR 0 5
7018: PPUSH
7019: CALL_OW 1
7023: ST_TO_ADDR
// result := list ;
7024: LD_ADDR_VAR 0 4
7028: PUSH
7029: LD_VAR 0 1
7033: ST_TO_ADDR
// end ;
7034: LD_VAR 0 4
7038: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7039: LD_INT 0
7041: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7042: LD_ADDR_VAR 0 5
7046: PUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 250
7056: PPUSH
7057: LD_VAR 0 1
7061: PPUSH
7062: CALL_OW 251
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 3
7076: PPUSH
7077: LD_VAR 0 4
7081: PPUSH
7082: CALL 7460 0 5
7086: ST_TO_ADDR
// end ;
7087: LD_VAR 0 5
7091: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7092: LD_INT 0
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// if not list or not unit then
7098: LD_VAR 0 2
7102: NOT
7103: PUSH
7104: LD_VAR 0 1
7108: NOT
7109: OR
7110: IFFALSE 7114
// exit ;
7112: GO 7455
// result := [ ] ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: EMPTY
7120: ST_TO_ADDR
// for i in list do
7121: LD_ADDR_VAR 0 6
7125: PUSH
7126: LD_VAR 0 2
7130: PUSH
7131: FOR_IN
7132: IFFALSE 7350
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7134: LD_ADDR_VAR 0 8
7138: PUSH
7139: LD_VAR 0 1
7143: PPUSH
7144: LD_VAR 0 6
7148: PUSH
7149: LD_INT 1
7151: ARRAY
7152: PPUSH
7153: LD_VAR 0 6
7157: PUSH
7158: LD_INT 2
7160: ARRAY
7161: PPUSH
7162: CALL_OW 297
7166: ST_TO_ADDR
// if not Count ( result ) then
7167: LD_VAR 0 5
7171: PPUSH
7172: CALL 3744 0 1
7176: NOT
7177: IFFALSE 7210
// begin result := Join ( result , [ i , tmp ] ) ;
7179: LD_ADDR_VAR 0 5
7183: PUSH
7184: LD_VAR 0 5
7188: PPUSH
7189: LD_VAR 0 6
7193: PUSH
7194: LD_VAR 0 8
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL 39353 0 2
7207: ST_TO_ADDR
// continue ;
7208: GO 7131
// end ; if result [ result ] [ 2 ] <= tmp then
7210: LD_VAR 0 5
7214: PUSH
7215: LD_VAR 0 5
7219: ARRAY
7220: PUSH
7221: LD_INT 2
7223: ARRAY
7224: PUSH
7225: LD_VAR 0 8
7229: LESSEQUAL
7230: IFFALSE 7263
// result := Join ( result , [ i , tmp ] ) else
7232: LD_ADDR_VAR 0 5
7236: PUSH
7237: LD_VAR 0 5
7241: PPUSH
7242: LD_VAR 0 6
7246: PUSH
7247: LD_VAR 0 8
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL 39353 0 2
7260: ST_TO_ADDR
7261: GO 7348
// begin for j := 1 to Count ( result ) do
7263: LD_ADDR_VAR 0 7
7267: PUSH
7268: DOUBLE
7269: LD_INT 1
7271: DEC
7272: ST_TO_ADDR
7273: LD_VAR 0 5
7277: PPUSH
7278: CALL 3744 0 1
7282: PUSH
7283: FOR_TO
7284: IFFALSE 7346
// begin if tmp < result [ j ] [ 2 ] then
7286: LD_VAR 0 8
7290: PUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_VAR 0 7
7300: ARRAY
7301: PUSH
7302: LD_INT 2
7304: ARRAY
7305: LESS
7306: IFFALSE 7344
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7308: LD_ADDR_VAR 0 5
7312: PUSH
7313: LD_VAR 0 5
7317: PPUSH
7318: LD_VAR 0 7
7322: PPUSH
7323: LD_VAR 0 6
7327: PUSH
7328: LD_VAR 0 8
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PPUSH
7337: CALL_OW 2
7341: ST_TO_ADDR
// break ;
7342: GO 7346
// end ; end ;
7344: GO 7283
7346: POP
7347: POP
// end ; end ;
7348: GO 7131
7350: POP
7351: POP
// if result and not asc then
7352: LD_VAR 0 5
7356: PUSH
7357: LD_VAR 0 3
7361: NOT
7362: AND
7363: IFFALSE 7380
// result := ReverseArray ( result ) ;
7365: LD_ADDR_VAR 0 5
7369: PUSH
7370: LD_VAR 0 5
7374: PPUSH
7375: CALL 34620 0 1
7379: ST_TO_ADDR
// tmp := [ ] ;
7380: LD_ADDR_VAR 0 8
7384: PUSH
7385: EMPTY
7386: ST_TO_ADDR
// if mode then
7387: LD_VAR 0 4
7391: IFFALSE 7455
// begin for i := 1 to result do
7393: LD_ADDR_VAR 0 6
7397: PUSH
7398: DOUBLE
7399: LD_INT 1
7401: DEC
7402: ST_TO_ADDR
7403: LD_VAR 0 5
7407: PUSH
7408: FOR_TO
7409: IFFALSE 7443
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7411: LD_ADDR_VAR 0 8
7415: PUSH
7416: LD_VAR 0 8
7420: PPUSH
7421: LD_VAR 0 5
7425: PUSH
7426: LD_VAR 0 6
7430: ARRAY
7431: PUSH
7432: LD_INT 1
7434: ARRAY
7435: PPUSH
7436: CALL 39353 0 2
7440: ST_TO_ADDR
7441: GO 7408
7443: POP
7444: POP
// result := tmp ;
7445: LD_ADDR_VAR 0 5
7449: PUSH
7450: LD_VAR 0 8
7454: ST_TO_ADDR
// end ; end ;
7455: LD_VAR 0 5
7459: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7460: LD_INT 0
7462: PPUSH
7463: PPUSH
7464: PPUSH
7465: PPUSH
// if not list then
7466: LD_VAR 0 3
7470: NOT
7471: IFFALSE 7475
// exit ;
7473: GO 7863
// result := [ ] ;
7475: LD_ADDR_VAR 0 6
7479: PUSH
7480: EMPTY
7481: ST_TO_ADDR
// for i in list do
7482: LD_ADDR_VAR 0 7
7486: PUSH
7487: LD_VAR 0 3
7491: PUSH
7492: FOR_IN
7493: IFFALSE 7695
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7495: LD_ADDR_VAR 0 9
7499: PUSH
7500: LD_VAR 0 7
7504: PPUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_VAR 0 2
7514: PPUSH
7515: CALL_OW 297
7519: ST_TO_ADDR
// if not result then
7520: LD_VAR 0 6
7524: NOT
7525: IFFALSE 7551
// result := [ [ i , tmp ] ] else
7527: LD_ADDR_VAR 0 6
7531: PUSH
7532: LD_VAR 0 7
7536: PUSH
7537: LD_VAR 0 9
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: ST_TO_ADDR
7549: GO 7693
// begin if result [ result ] [ 2 ] <= tmp then
7551: LD_VAR 0 6
7555: PUSH
7556: LD_VAR 0 6
7560: ARRAY
7561: PUSH
7562: LD_INT 2
7564: ARRAY
7565: PUSH
7566: LD_VAR 0 9
7570: LESSEQUAL
7571: IFFALSE 7613
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7573: LD_ADDR_VAR 0 6
7577: PUSH
7578: LD_VAR 0 6
7582: PPUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PLUS
7591: PPUSH
7592: LD_VAR 0 7
7596: PUSH
7597: LD_VAR 0 9
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 2
7610: ST_TO_ADDR
7611: GO 7693
// for j := 1 to result do
7613: LD_ADDR_VAR 0 8
7617: PUSH
7618: DOUBLE
7619: LD_INT 1
7621: DEC
7622: ST_TO_ADDR
7623: LD_VAR 0 6
7627: PUSH
7628: FOR_TO
7629: IFFALSE 7691
// begin if tmp < result [ j ] [ 2 ] then
7631: LD_VAR 0 9
7635: PUSH
7636: LD_VAR 0 6
7640: PUSH
7641: LD_VAR 0 8
7645: ARRAY
7646: PUSH
7647: LD_INT 2
7649: ARRAY
7650: LESS
7651: IFFALSE 7689
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 6
7662: PPUSH
7663: LD_VAR 0 8
7667: PPUSH
7668: LD_VAR 0 7
7672: PUSH
7673: LD_VAR 0 9
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 2
7686: ST_TO_ADDR
// break ;
7687: GO 7691
// end ; end ;
7689: GO 7628
7691: POP
7692: POP
// end ; end ;
7693: GO 7492
7695: POP
7696: POP
// if result and not asc then
7697: LD_VAR 0 6
7701: PUSH
7702: LD_VAR 0 4
7706: NOT
7707: AND
7708: IFFALSE 7783
// begin tmp := result ;
7710: LD_ADDR_VAR 0 9
7714: PUSH
7715: LD_VAR 0 6
7719: ST_TO_ADDR
// for i = tmp downto 1 do
7720: LD_ADDR_VAR 0 7
7724: PUSH
7725: DOUBLE
7726: LD_VAR 0 9
7730: INC
7731: ST_TO_ADDR
7732: LD_INT 1
7734: PUSH
7735: FOR_DOWNTO
7736: IFFALSE 7781
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7738: LD_ADDR_VAR 0 6
7742: PUSH
7743: LD_VAR 0 6
7747: PPUSH
7748: LD_VAR 0 9
7752: PUSH
7753: LD_VAR 0 7
7757: MINUS
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: PPUSH
7763: LD_VAR 0 9
7767: PUSH
7768: LD_VAR 0 7
7772: ARRAY
7773: PPUSH
7774: CALL_OW 1
7778: ST_TO_ADDR
7779: GO 7735
7781: POP
7782: POP
// end ; tmp := [ ] ;
7783: LD_ADDR_VAR 0 9
7787: PUSH
7788: EMPTY
7789: ST_TO_ADDR
// if mode then
7790: LD_VAR 0 5
7794: IFFALSE 7863
// begin for i = 1 to result do
7796: LD_ADDR_VAR 0 7
7800: PUSH
7801: DOUBLE
7802: LD_INT 1
7804: DEC
7805: ST_TO_ADDR
7806: LD_VAR 0 6
7810: PUSH
7811: FOR_TO
7812: IFFALSE 7851
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7814: LD_ADDR_VAR 0 9
7818: PUSH
7819: LD_VAR 0 9
7823: PPUSH
7824: LD_VAR 0 7
7828: PPUSH
7829: LD_VAR 0 6
7833: PUSH
7834: LD_VAR 0 7
7838: ARRAY
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: CALL_OW 1
7848: ST_TO_ADDR
7849: GO 7811
7851: POP
7852: POP
// result := tmp ;
7853: LD_ADDR_VAR 0 6
7857: PUSH
7858: LD_VAR 0 9
7862: ST_TO_ADDR
// end ; end ;
7863: LD_VAR 0 6
7867: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7876: LD_ADDR_VAR 0 5
7880: PUSH
7881: LD_INT 0
7883: PUSH
7884: LD_INT 0
7886: PUSH
7887: LD_INT 0
7889: PUSH
7890: EMPTY
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// if not x or not y then
7898: LD_VAR 0 2
7902: NOT
7903: PUSH
7904: LD_VAR 0 3
7908: NOT
7909: OR
7910: IFFALSE 7914
// exit ;
7912: GO 9564
// if not range then
7914: LD_VAR 0 4
7918: NOT
7919: IFFALSE 7929
// range := 10 ;
7921: LD_ADDR_VAR 0 4
7925: PUSH
7926: LD_INT 10
7928: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7929: LD_ADDR_VAR 0 8
7933: PUSH
7934: LD_INT 81
7936: PUSH
7937: LD_VAR 0 1
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 92
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_VAR 0 3
7958: PUSH
7959: LD_VAR 0 4
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: LD_INT 21
7975: PUSH
7976: LD_INT 3
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: PPUSH
7992: CALL_OW 69
7996: ST_TO_ADDR
// if not tmp then
7997: LD_VAR 0 8
8001: NOT
8002: IFFALSE 8006
// exit ;
8004: GO 9564
// for i in tmp do
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_VAR 0 8
8015: PUSH
8016: FOR_IN
8017: IFFALSE 9539
// begin points := [ 0 , 0 , 0 ] ;
8019: LD_ADDR_VAR 0 9
8023: PUSH
8024: LD_INT 0
8026: PUSH
8027: LD_INT 0
8029: PUSH
8030: LD_INT 0
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: ST_TO_ADDR
// bpoints := 1 ;
8038: LD_ADDR_VAR 0 10
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8046: LD_VAR 0 6
8050: PPUSH
8051: CALL_OW 247
8055: PUSH
8056: LD_INT 1
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8642
8064: POP
// begin if GetClass ( i ) = 1 then
8065: LD_VAR 0 6
8069: PPUSH
8070: CALL_OW 257
8074: PUSH
8075: LD_INT 1
8077: EQUAL
8078: IFFALSE 8099
// points := [ 10 , 5 , 3 ] ;
8080: LD_ADDR_VAR 0 9
8084: PUSH
8085: LD_INT 10
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 3
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8099: LD_VAR 0 6
8103: PPUSH
8104: CALL_OW 257
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: IN
8123: IFFALSE 8144
// points := [ 3 , 2 , 1 ] ;
8125: LD_ADDR_VAR 0 9
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 2
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8144: LD_VAR 0 6
8148: PPUSH
8149: CALL_OW 257
8153: PUSH
8154: LD_INT 5
8156: EQUAL
8157: IFFALSE 8178
// points := [ 130 , 5 , 2 ] ;
8159: LD_ADDR_VAR 0 9
8163: PUSH
8164: LD_INT 130
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: LD_INT 2
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8178: LD_VAR 0 6
8182: PPUSH
8183: CALL_OW 257
8187: PUSH
8188: LD_INT 8
8190: EQUAL
8191: IFFALSE 8212
// points := [ 35 , 35 , 30 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 35
8200: PUSH
8201: LD_INT 35
8203: PUSH
8204: LD_INT 30
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8212: LD_VAR 0 6
8216: PPUSH
8217: CALL_OW 257
8221: PUSH
8222: LD_INT 9
8224: EQUAL
8225: IFFALSE 8246
// points := [ 20 , 55 , 40 ] ;
8227: LD_ADDR_VAR 0 9
8231: PUSH
8232: LD_INT 20
8234: PUSH
8235: LD_INT 55
8237: PUSH
8238: LD_INT 40
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8246: LD_VAR 0 6
8250: PPUSH
8251: CALL_OW 257
8255: PUSH
8256: LD_INT 12
8258: PUSH
8259: LD_INT 16
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: IN
8266: IFFALSE 8287
// points := [ 5 , 3 , 2 ] ;
8268: LD_ADDR_VAR 0 9
8272: PUSH
8273: LD_INT 5
8275: PUSH
8276: LD_INT 3
8278: PUSH
8279: LD_INT 2
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8287: LD_VAR 0 6
8291: PPUSH
8292: CALL_OW 257
8296: PUSH
8297: LD_INT 17
8299: EQUAL
8300: IFFALSE 8321
// points := [ 100 , 50 , 75 ] ;
8302: LD_ADDR_VAR 0 9
8306: PUSH
8307: LD_INT 100
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: LD_INT 75
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8321: LD_VAR 0 6
8325: PPUSH
8326: CALL_OW 257
8330: PUSH
8331: LD_INT 15
8333: EQUAL
8334: IFFALSE 8355
// points := [ 10 , 5 , 3 ] ;
8336: LD_ADDR_VAR 0 9
8340: PUSH
8341: LD_INT 10
8343: PUSH
8344: LD_INT 5
8346: PUSH
8347: LD_INT 3
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8355: LD_VAR 0 6
8359: PPUSH
8360: CALL_OW 257
8364: PUSH
8365: LD_INT 14
8367: EQUAL
8368: IFFALSE 8389
// points := [ 10 , 0 , 0 ] ;
8370: LD_ADDR_VAR 0 9
8374: PUSH
8375: LD_INT 10
8377: PUSH
8378: LD_INT 0
8380: PUSH
8381: LD_INT 0
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8389: LD_VAR 0 6
8393: PPUSH
8394: CALL_OW 257
8398: PUSH
8399: LD_INT 11
8401: EQUAL
8402: IFFALSE 8423
// points := [ 30 , 10 , 5 ] ;
8404: LD_ADDR_VAR 0 9
8408: PUSH
8409: LD_INT 30
8411: PUSH
8412: LD_INT 10
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_INT 5
8430: PPUSH
8431: CALL_OW 321
8435: PUSH
8436: LD_INT 2
8438: EQUAL
8439: IFFALSE 8456
// bpoints := bpoints * 1.8 ;
8441: LD_ADDR_VAR 0 10
8445: PUSH
8446: LD_VAR 0 10
8450: PUSH
8451: LD_REAL  1.80000000000000E+0000
8454: MUL
8455: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8456: LD_VAR 0 6
8460: PPUSH
8461: CALL_OW 257
8465: PUSH
8466: LD_INT 1
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: LD_INT 3
8474: PUSH
8475: LD_INT 4
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: IN
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 51
8492: PPUSH
8493: CALL_OW 321
8497: PUSH
8498: LD_INT 2
8500: EQUAL
8501: AND
8502: IFFALSE 8519
// bpoints := bpoints * 1.2 ;
8504: LD_ADDR_VAR 0 10
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: LD_REAL  1.20000000000000E+0000
8517: MUL
8518: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8519: LD_VAR 0 6
8523: PPUSH
8524: CALL_OW 257
8528: PUSH
8529: LD_INT 5
8531: PUSH
8532: LD_INT 7
8534: PUSH
8535: LD_INT 9
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: IN
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 52
8551: PPUSH
8552: CALL_OW 321
8556: PUSH
8557: LD_INT 2
8559: EQUAL
8560: AND
8561: IFFALSE 8578
// bpoints := bpoints * 1.5 ;
8563: LD_ADDR_VAR 0 10
8567: PUSH
8568: LD_VAR 0 10
8572: PUSH
8573: LD_REAL  1.50000000000000E+0000
8576: MUL
8577: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8578: LD_VAR 0 1
8582: PPUSH
8583: LD_INT 66
8585: PPUSH
8586: CALL_OW 321
8590: PUSH
8591: LD_INT 2
8593: EQUAL
8594: IFFALSE 8611
// bpoints := bpoints * 1.1 ;
8596: LD_ADDR_VAR 0 10
8600: PUSH
8601: LD_VAR 0 10
8605: PUSH
8606: LD_REAL  1.10000000000000E+0000
8609: MUL
8610: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8611: LD_ADDR_VAR 0 10
8615: PUSH
8616: LD_VAR 0 10
8620: PUSH
8621: LD_VAR 0 6
8625: PPUSH
8626: LD_INT 1
8628: PPUSH
8629: CALL_OW 259
8633: PUSH
8634: LD_REAL  1.15000000000000E+0000
8637: MUL
8638: MUL
8639: ST_TO_ADDR
// end ; unit_vehicle :
8640: GO 9468
8642: LD_INT 2
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 9456
8650: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8651: LD_VAR 0 6
8655: PPUSH
8656: CALL_OW 264
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: LD_INT 42
8666: PUSH
8667: LD_INT 24
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: IN
8675: IFFALSE 8696
// points := [ 25 , 5 , 3 ] ;
8677: LD_ADDR_VAR 0 9
8681: PUSH
8682: LD_INT 25
8684: PUSH
8685: LD_INT 5
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8696: LD_VAR 0 6
8700: PPUSH
8701: CALL_OW 264
8705: PUSH
8706: LD_INT 4
8708: PUSH
8709: LD_INT 43
8711: PUSH
8712: LD_INT 25
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: IN
8720: IFFALSE 8741
// points := [ 40 , 15 , 5 ] ;
8722: LD_ADDR_VAR 0 9
8726: PUSH
8727: LD_INT 40
8729: PUSH
8730: LD_INT 15
8732: PUSH
8733: LD_INT 5
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8741: LD_VAR 0 6
8745: PPUSH
8746: CALL_OW 264
8750: PUSH
8751: LD_INT 3
8753: PUSH
8754: LD_INT 23
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: IN
8761: IFFALSE 8782
// points := [ 7 , 25 , 8 ] ;
8763: LD_ADDR_VAR 0 9
8767: PUSH
8768: LD_INT 7
8770: PUSH
8771: LD_INT 25
8773: PUSH
8774: LD_INT 8
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8782: LD_VAR 0 6
8786: PPUSH
8787: CALL_OW 264
8791: PUSH
8792: LD_INT 5
8794: PUSH
8795: LD_INT 27
8797: PUSH
8798: LD_INT 44
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: IN
8806: IFFALSE 8827
// points := [ 14 , 50 , 16 ] ;
8808: LD_ADDR_VAR 0 9
8812: PUSH
8813: LD_INT 14
8815: PUSH
8816: LD_INT 50
8818: PUSH
8819: LD_INT 16
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8827: LD_VAR 0 6
8831: PPUSH
8832: CALL_OW 264
8836: PUSH
8837: LD_INT 6
8839: PUSH
8840: LD_INT 46
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: IN
8847: IFFALSE 8868
// points := [ 32 , 120 , 70 ] ;
8849: LD_ADDR_VAR 0 9
8853: PUSH
8854: LD_INT 32
8856: PUSH
8857: LD_INT 120
8859: PUSH
8860: LD_INT 70
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8868: LD_VAR 0 6
8872: PPUSH
8873: CALL_OW 264
8877: PUSH
8878: LD_INT 7
8880: PUSH
8881: LD_INT 28
8883: PUSH
8884: LD_INT 45
8886: PUSH
8887: LD_INT 92
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: IN
8896: IFFALSE 8917
// points := [ 35 , 20 , 45 ] ;
8898: LD_ADDR_VAR 0 9
8902: PUSH
8903: LD_INT 35
8905: PUSH
8906: LD_INT 20
8908: PUSH
8909: LD_INT 45
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: LIST
8916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8917: LD_VAR 0 6
8921: PPUSH
8922: CALL_OW 264
8926: PUSH
8927: LD_INT 47
8929: PUSH
8930: EMPTY
8931: LIST
8932: IN
8933: IFFALSE 8954
// points := [ 67 , 45 , 75 ] ;
8935: LD_ADDR_VAR 0 9
8939: PUSH
8940: LD_INT 67
8942: PUSH
8943: LD_INT 45
8945: PUSH
8946: LD_INT 75
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8954: LD_VAR 0 6
8958: PPUSH
8959: CALL_OW 264
8963: PUSH
8964: LD_INT 26
8966: PUSH
8967: EMPTY
8968: LIST
8969: IN
8970: IFFALSE 8991
// points := [ 120 , 30 , 80 ] ;
8972: LD_ADDR_VAR 0 9
8976: PUSH
8977: LD_INT 120
8979: PUSH
8980: LD_INT 30
8982: PUSH
8983: LD_INT 80
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8991: LD_VAR 0 6
8995: PPUSH
8996: CALL_OW 264
9000: PUSH
9001: LD_INT 22
9003: PUSH
9004: EMPTY
9005: LIST
9006: IN
9007: IFFALSE 9028
// points := [ 40 , 1 , 1 ] ;
9009: LD_ADDR_VAR 0 9
9013: PUSH
9014: LD_INT 40
9016: PUSH
9017: LD_INT 1
9019: PUSH
9020: LD_INT 1
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: LIST
9027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9028: LD_VAR 0 6
9032: PPUSH
9033: CALL_OW 264
9037: PUSH
9038: LD_INT 29
9040: PUSH
9041: EMPTY
9042: LIST
9043: IN
9044: IFFALSE 9065
// points := [ 70 , 200 , 400 ] ;
9046: LD_ADDR_VAR 0 9
9050: PUSH
9051: LD_INT 70
9053: PUSH
9054: LD_INT 200
9056: PUSH
9057: LD_INT 400
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9065: LD_VAR 0 6
9069: PPUSH
9070: CALL_OW 264
9074: PUSH
9075: LD_INT 14
9077: PUSH
9078: LD_INT 53
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: IN
9085: IFFALSE 9106
// points := [ 40 , 10 , 20 ] ;
9087: LD_ADDR_VAR 0 9
9091: PUSH
9092: LD_INT 40
9094: PUSH
9095: LD_INT 10
9097: PUSH
9098: LD_INT 20
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9106: LD_VAR 0 6
9110: PPUSH
9111: CALL_OW 264
9115: PUSH
9116: LD_INT 9
9118: PUSH
9119: EMPTY
9120: LIST
9121: IN
9122: IFFALSE 9143
// points := [ 5 , 70 , 20 ] ;
9124: LD_ADDR_VAR 0 9
9128: PUSH
9129: LD_INT 5
9131: PUSH
9132: LD_INT 70
9134: PUSH
9135: LD_INT 20
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9143: LD_VAR 0 6
9147: PPUSH
9148: CALL_OW 264
9152: PUSH
9153: LD_INT 10
9155: PUSH
9156: EMPTY
9157: LIST
9158: IN
9159: IFFALSE 9180
// points := [ 35 , 110 , 70 ] ;
9161: LD_ADDR_VAR 0 9
9165: PUSH
9166: LD_INT 35
9168: PUSH
9169: LD_INT 110
9171: PUSH
9172: LD_INT 70
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9180: LD_VAR 0 6
9184: PPUSH
9185: CALL_OW 265
9189: PUSH
9190: LD_INT 25
9192: EQUAL
9193: IFFALSE 9214
// points := [ 80 , 65 , 100 ] ;
9195: LD_ADDR_VAR 0 9
9199: PUSH
9200: LD_INT 80
9202: PUSH
9203: LD_INT 65
9205: PUSH
9206: LD_INT 100
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9214: LD_VAR 0 6
9218: PPUSH
9219: CALL_OW 263
9223: PUSH
9224: LD_INT 1
9226: EQUAL
9227: IFFALSE 9262
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9229: LD_ADDR_VAR 0 10
9233: PUSH
9234: LD_VAR 0 10
9238: PUSH
9239: LD_VAR 0 6
9243: PPUSH
9244: CALL_OW 311
9248: PPUSH
9249: LD_INT 3
9251: PPUSH
9252: CALL_OW 259
9256: PUSH
9257: LD_INT 4
9259: MUL
9260: MUL
9261: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9262: LD_VAR 0 6
9266: PPUSH
9267: CALL_OW 263
9271: PUSH
9272: LD_INT 2
9274: EQUAL
9275: IFFALSE 9326
// begin j := IsControledBy ( i ) ;
9277: LD_ADDR_VAR 0 7
9281: PUSH
9282: LD_VAR 0 6
9286: PPUSH
9287: CALL_OW 312
9291: ST_TO_ADDR
// if j then
9292: LD_VAR 0 7
9296: IFFALSE 9326
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9298: LD_ADDR_VAR 0 10
9302: PUSH
9303: LD_VAR 0 10
9307: PUSH
9308: LD_VAR 0 7
9312: PPUSH
9313: LD_INT 3
9315: PPUSH
9316: CALL_OW 259
9320: PUSH
9321: LD_INT 3
9323: MUL
9324: MUL
9325: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9326: LD_VAR 0 6
9330: PPUSH
9331: CALL_OW 264
9335: PUSH
9336: LD_INT 5
9338: PUSH
9339: LD_INT 6
9341: PUSH
9342: LD_INT 46
9344: PUSH
9345: LD_INT 44
9347: PUSH
9348: LD_INT 47
9350: PUSH
9351: LD_INT 45
9353: PUSH
9354: LD_INT 28
9356: PUSH
9357: LD_INT 7
9359: PUSH
9360: LD_INT 27
9362: PUSH
9363: LD_INT 29
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: IN
9378: PUSH
9379: LD_VAR 0 1
9383: PPUSH
9384: LD_INT 52
9386: PPUSH
9387: CALL_OW 321
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: AND
9396: IFFALSE 9413
// bpoints := bpoints * 1.2 ;
9398: LD_ADDR_VAR 0 10
9402: PUSH
9403: LD_VAR 0 10
9407: PUSH
9408: LD_REAL  1.20000000000000E+0000
9411: MUL
9412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9413: LD_VAR 0 6
9417: PPUSH
9418: CALL_OW 264
9422: PUSH
9423: LD_INT 6
9425: PUSH
9426: LD_INT 46
9428: PUSH
9429: LD_INT 47
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: IN
9437: IFFALSE 9454
// bpoints := bpoints * 1.2 ;
9439: LD_ADDR_VAR 0 10
9443: PUSH
9444: LD_VAR 0 10
9448: PUSH
9449: LD_REAL  1.20000000000000E+0000
9452: MUL
9453: ST_TO_ADDR
// end ; unit_building :
9454: GO 9468
9456: LD_INT 3
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9467
9464: POP
// ; end ;
9465: GO 9468
9467: POP
// for j = 1 to 3 do
9468: LD_ADDR_VAR 0 7
9472: PUSH
9473: DOUBLE
9474: LD_INT 1
9476: DEC
9477: ST_TO_ADDR
9478: LD_INT 3
9480: PUSH
9481: FOR_TO
9482: IFFALSE 9535
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9484: LD_ADDR_VAR 0 5
9488: PUSH
9489: LD_VAR 0 5
9493: PPUSH
9494: LD_VAR 0 7
9498: PPUSH
9499: LD_VAR 0 5
9503: PUSH
9504: LD_VAR 0 7
9508: ARRAY
9509: PUSH
9510: LD_VAR 0 9
9514: PUSH
9515: LD_VAR 0 7
9519: ARRAY
9520: PUSH
9521: LD_VAR 0 10
9525: MUL
9526: PLUS
9527: PPUSH
9528: CALL_OW 1
9532: ST_TO_ADDR
9533: GO 9481
9535: POP
9536: POP
// end ;
9537: GO 8016
9539: POP
9540: POP
// result := Replace ( result , 4 , tmp ) ;
9541: LD_ADDR_VAR 0 5
9545: PUSH
9546: LD_VAR 0 5
9550: PPUSH
9551: LD_INT 4
9553: PPUSH
9554: LD_VAR 0 8
9558: PPUSH
9559: CALL_OW 1
9563: ST_TO_ADDR
// end ;
9564: LD_VAR 0 5
9568: RET
// export function DangerAtRange ( unit , range ) ; begin
9569: LD_INT 0
9571: PPUSH
// if not unit then
9572: LD_VAR 0 1
9576: NOT
9577: IFFALSE 9581
// exit ;
9579: GO 9626
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9581: LD_ADDR_VAR 0 3
9585: PUSH
9586: LD_VAR 0 1
9590: PPUSH
9591: CALL_OW 255
9595: PPUSH
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 250
9605: PPUSH
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 251
9615: PPUSH
9616: LD_VAR 0 2
9620: PPUSH
9621: CALL 7868 0 4
9625: ST_TO_ADDR
// end ;
9626: LD_VAR 0 3
9630: RET
// export function DangerInArea ( side , area ) ; begin
9631: LD_INT 0
9633: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9634: LD_ADDR_VAR 0 3
9638: PUSH
9639: LD_VAR 0 2
9643: PPUSH
9644: LD_INT 81
9646: PUSH
9647: LD_VAR 0 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PPUSH
9656: CALL_OW 70
9660: ST_TO_ADDR
// end ;
9661: LD_VAR 0 3
9665: RET
// export function IsExtension ( b ) ; begin
9666: LD_INT 0
9668: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 1
9678: PUSH
9679: LD_INT 23
9681: PUSH
9682: LD_INT 20
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 17
9690: PUSH
9691: LD_INT 24
9693: PUSH
9694: LD_INT 21
9696: PUSH
9697: LD_INT 19
9699: PUSH
9700: LD_INT 16
9702: PUSH
9703: LD_INT 25
9705: PUSH
9706: LD_INT 18
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: IN
9721: ST_TO_ADDR
// end ;
9722: LD_VAR 0 2
9726: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9727: LD_INT 0
9729: PPUSH
9730: PPUSH
9731: PPUSH
// result := [ ] ;
9732: LD_ADDR_VAR 0 4
9736: PUSH
9737: EMPTY
9738: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9739: LD_ADDR_VAR 0 5
9743: PUSH
9744: LD_VAR 0 2
9748: PPUSH
9749: LD_INT 21
9751: PUSH
9752: LD_INT 3
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PPUSH
9759: CALL_OW 70
9763: ST_TO_ADDR
// if not tmp then
9764: LD_VAR 0 5
9768: NOT
9769: IFFALSE 9773
// exit ;
9771: GO 9837
// if checkLink then
9773: LD_VAR 0 3
9777: IFFALSE 9827
// begin for i in tmp do
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_VAR 0 5
9788: PUSH
9789: FOR_IN
9790: IFFALSE 9825
// if GetBase ( i ) <> base then
9792: LD_VAR 0 6
9796: PPUSH
9797: CALL_OW 274
9801: PUSH
9802: LD_VAR 0 1
9806: NONEQUAL
9807: IFFALSE 9823
// ComLinkToBase ( base , i ) ;
9809: LD_VAR 0 1
9813: PPUSH
9814: LD_VAR 0 6
9818: PPUSH
9819: CALL_OW 169
9823: GO 9789
9825: POP
9826: POP
// end ; result := tmp ;
9827: LD_ADDR_VAR 0 4
9831: PUSH
9832: LD_VAR 0 5
9836: ST_TO_ADDR
// end ;
9837: LD_VAR 0 4
9841: RET
// export function ComComplete ( units , b ) ; var i ; begin
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
// if not units then
9846: LD_VAR 0 1
9850: NOT
9851: IFFALSE 9855
// exit ;
9853: GO 9945
// for i in units do
9855: LD_ADDR_VAR 0 4
9859: PUSH
9860: LD_VAR 0 1
9864: PUSH
9865: FOR_IN
9866: IFFALSE 9943
// if BuildingStatus ( b ) = bs_build then
9868: LD_VAR 0 2
9872: PPUSH
9873: CALL_OW 461
9877: PUSH
9878: LD_INT 1
9880: EQUAL
9881: IFFALSE 9941
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9883: LD_VAR 0 4
9887: PPUSH
9888: LD_STRING h
9890: PUSH
9891: LD_VAR 0 2
9895: PPUSH
9896: CALL_OW 250
9900: PUSH
9901: LD_VAR 0 2
9905: PPUSH
9906: CALL_OW 251
9910: PUSH
9911: LD_VAR 0 2
9915: PUSH
9916: LD_INT 0
9918: PUSH
9919: LD_INT 0
9921: PUSH
9922: LD_INT 0
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: PPUSH
9937: CALL_OW 446
9941: GO 9865
9943: POP
9944: POP
// end ;
9945: LD_VAR 0 3
9949: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
9956: PPUSH
9957: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9958: LD_VAR 0 1
9962: NOT
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 263
9973: PUSH
9974: LD_INT 2
9976: NONEQUAL
9977: OR
9978: IFFALSE 9982
// exit ;
9980: GO 10298
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9982: LD_ADDR_VAR 0 6
9986: PUSH
9987: LD_INT 22
9989: PUSH
9990: LD_VAR 0 1
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 2
10006: PUSH
10007: LD_INT 30
10009: PUSH
10010: LD_INT 36
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 34
10019: PUSH
10020: LD_INT 31
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 69
10040: ST_TO_ADDR
// if not tmp then
10041: LD_VAR 0 6
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10298
// result := [ ] ;
10050: LD_ADDR_VAR 0 2
10054: PUSH
10055: EMPTY
10056: ST_TO_ADDR
// for i in tmp do
10057: LD_ADDR_VAR 0 3
10061: PUSH
10062: LD_VAR 0 6
10066: PUSH
10067: FOR_IN
10068: IFFALSE 10139
// begin t := UnitsInside ( i ) ;
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_VAR 0 3
10079: PPUSH
10080: CALL_OW 313
10084: ST_TO_ADDR
// if t then
10085: LD_VAR 0 4
10089: IFFALSE 10137
// for j in t do
10091: LD_ADDR_VAR 0 7
10095: PUSH
10096: LD_VAR 0 4
10100: PUSH
10101: FOR_IN
10102: IFFALSE 10135
// result := Replace ( result , result + 1 , j ) ;
10104: LD_ADDR_VAR 0 2
10108: PUSH
10109: LD_VAR 0 2
10113: PPUSH
10114: LD_VAR 0 2
10118: PUSH
10119: LD_INT 1
10121: PLUS
10122: PPUSH
10123: LD_VAR 0 7
10127: PPUSH
10128: CALL_OW 1
10132: ST_TO_ADDR
10133: GO 10101
10135: POP
10136: POP
// end ;
10137: GO 10067
10139: POP
10140: POP
// if not result then
10141: LD_VAR 0 2
10145: NOT
10146: IFFALSE 10150
// exit ;
10148: GO 10298
// mech := result [ 1 ] ;
10150: LD_ADDR_VAR 0 5
10154: PUSH
10155: LD_VAR 0 2
10159: PUSH
10160: LD_INT 1
10162: ARRAY
10163: ST_TO_ADDR
// if result > 1 then
10164: LD_VAR 0 2
10168: PUSH
10169: LD_INT 1
10171: GREATER
10172: IFFALSE 10284
// begin for i = 2 to result do
10174: LD_ADDR_VAR 0 3
10178: PUSH
10179: DOUBLE
10180: LD_INT 2
10182: DEC
10183: ST_TO_ADDR
10184: LD_VAR 0 2
10188: PUSH
10189: FOR_TO
10190: IFFALSE 10282
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10192: LD_ADDR_VAR 0 4
10196: PUSH
10197: LD_VAR 0 2
10201: PUSH
10202: LD_VAR 0 3
10206: ARRAY
10207: PPUSH
10208: LD_INT 3
10210: PPUSH
10211: CALL_OW 259
10215: PUSH
10216: LD_VAR 0 2
10220: PUSH
10221: LD_VAR 0 3
10225: ARRAY
10226: PPUSH
10227: CALL_OW 432
10231: MINUS
10232: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10233: LD_VAR 0 4
10237: PUSH
10238: LD_VAR 0 5
10242: PPUSH
10243: LD_INT 3
10245: PPUSH
10246: CALL_OW 259
10250: PUSH
10251: LD_VAR 0 5
10255: PPUSH
10256: CALL_OW 432
10260: MINUS
10261: GREATEREQUAL
10262: IFFALSE 10280
// mech := result [ i ] ;
10264: LD_ADDR_VAR 0 5
10268: PUSH
10269: LD_VAR 0 2
10273: PUSH
10274: LD_VAR 0 3
10278: ARRAY
10279: ST_TO_ADDR
// end ;
10280: GO 10189
10282: POP
10283: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10284: LD_VAR 0 1
10288: PPUSH
10289: LD_VAR 0 5
10293: PPUSH
10294: CALL_OW 135
// end ;
10298: LD_VAR 0 2
10302: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10303: LD_INT 0
10305: PPUSH
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
10310: PPUSH
10311: PPUSH
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// result := [ ] ;
10318: LD_ADDR_VAR 0 7
10322: PUSH
10323: EMPTY
10324: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10325: LD_VAR 0 1
10329: PPUSH
10330: CALL_OW 266
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: IN
10345: NOT
10346: IFFALSE 10350
// exit ;
10348: GO 11984
// if name then
10350: LD_VAR 0 3
10354: IFFALSE 10370
// SetBName ( base_dep , name ) ;
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_VAR 0 3
10365: PPUSH
10366: CALL_OW 500
// base := GetBase ( base_dep ) ;
10370: LD_ADDR_VAR 0 15
10374: PUSH
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 274
10384: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10385: LD_ADDR_VAR 0 16
10389: PUSH
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 255
10399: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10400: LD_ADDR_VAR 0 17
10404: PUSH
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 248
10414: ST_TO_ADDR
// if sources then
10415: LD_VAR 0 5
10419: IFFALSE 10466
// for i = 1 to 3 do
10421: LD_ADDR_VAR 0 8
10425: PUSH
10426: DOUBLE
10427: LD_INT 1
10429: DEC
10430: ST_TO_ADDR
10431: LD_INT 3
10433: PUSH
10434: FOR_TO
10435: IFFALSE 10464
// AddResourceType ( base , i , sources [ i ] ) ;
10437: LD_VAR 0 15
10441: PPUSH
10442: LD_VAR 0 8
10446: PPUSH
10447: LD_VAR 0 5
10451: PUSH
10452: LD_VAR 0 8
10456: ARRAY
10457: PPUSH
10458: CALL_OW 276
10462: GO 10434
10464: POP
10465: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10466: LD_ADDR_VAR 0 18
10470: PUSH
10471: LD_VAR 0 15
10475: PPUSH
10476: LD_VAR 0 2
10480: PPUSH
10481: LD_INT 1
10483: PPUSH
10484: CALL 9727 0 3
10488: ST_TO_ADDR
// InitHc ;
10489: CALL_OW 19
// InitUc ;
10493: CALL_OW 18
// uc_side := side ;
10497: LD_ADDR_OWVAR 20
10501: PUSH
10502: LD_VAR 0 16
10506: ST_TO_ADDR
// uc_nation := nation ;
10507: LD_ADDR_OWVAR 21
10511: PUSH
10512: LD_VAR 0 17
10516: ST_TO_ADDR
// if buildings then
10517: LD_VAR 0 18
10521: IFFALSE 11843
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10523: LD_ADDR_VAR 0 19
10527: PUSH
10528: LD_VAR 0 18
10532: PPUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 30
10538: PUSH
10539: LD_INT 29
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: PPUSH
10561: CALL_OW 72
10565: ST_TO_ADDR
// if tmp then
10566: LD_VAR 0 19
10570: IFFALSE 10618
// for i in tmp do
10572: LD_ADDR_VAR 0 8
10576: PUSH
10577: LD_VAR 0 19
10581: PUSH
10582: FOR_IN
10583: IFFALSE 10616
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10585: LD_VAR 0 8
10589: PPUSH
10590: CALL_OW 250
10594: PPUSH
10595: LD_VAR 0 8
10599: PPUSH
10600: CALL_OW 251
10604: PPUSH
10605: LD_VAR 0 16
10609: PPUSH
10610: CALL_OW 441
10614: GO 10582
10616: POP
10617: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10618: LD_VAR 0 18
10622: PPUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 30
10628: PUSH
10629: LD_INT 32
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 30
10638: PUSH
10639: LD_INT 33
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 72
10655: IFFALSE 10743
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10657: LD_ADDR_VAR 0 8
10661: PUSH
10662: LD_VAR 0 18
10666: PPUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 30
10672: PUSH
10673: LD_INT 32
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_INT 33
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: PPUSH
10695: CALL_OW 72
10699: PUSH
10700: FOR_IN
10701: IFFALSE 10741
// begin if not GetBWeapon ( i ) then
10703: LD_VAR 0 8
10707: PPUSH
10708: CALL_OW 269
10712: NOT
10713: IFFALSE 10739
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10715: LD_VAR 0 8
10719: PPUSH
10720: LD_VAR 0 8
10724: PPUSH
10725: LD_VAR 0 2
10729: PPUSH
10730: CALL 11989 0 2
10734: PPUSH
10735: CALL_OW 431
// end ;
10739: GO 10700
10741: POP
10742: POP
// end ; for i = 1 to personel do
10743: LD_ADDR_VAR 0 8
10747: PUSH
10748: DOUBLE
10749: LD_INT 1
10751: DEC
10752: ST_TO_ADDR
10753: LD_VAR 0 6
10757: PUSH
10758: FOR_TO
10759: IFFALSE 11823
// begin if i > 4 then
10761: LD_VAR 0 8
10765: PUSH
10766: LD_INT 4
10768: GREATER
10769: IFFALSE 10773
// break ;
10771: GO 11823
// case i of 1 :
10773: LD_VAR 0 8
10777: PUSH
10778: LD_INT 1
10780: DOUBLE
10781: EQUAL
10782: IFTRUE 10786
10784: GO 10866
10786: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10787: LD_ADDR_VAR 0 12
10791: PUSH
10792: LD_VAR 0 18
10796: PPUSH
10797: LD_INT 22
10799: PUSH
10800: LD_VAR 0 16
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 58
10811: PUSH
10812: EMPTY
10813: LIST
10814: PUSH
10815: LD_INT 2
10817: PUSH
10818: LD_INT 30
10820: PUSH
10821: LD_INT 32
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 30
10830: PUSH
10831: LD_INT 4
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 30
10840: PUSH
10841: LD_INT 5
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 72
10863: ST_TO_ADDR
10864: GO 11088
10866: LD_INT 2
10868: DOUBLE
10869: EQUAL
10870: IFTRUE 10874
10872: GO 10936
10874: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10875: LD_ADDR_VAR 0 12
10879: PUSH
10880: LD_VAR 0 18
10884: PPUSH
10885: LD_INT 22
10887: PUSH
10888: LD_VAR 0 16
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 2
10899: PUSH
10900: LD_INT 30
10902: PUSH
10903: LD_INT 0
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 30
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 72
10933: ST_TO_ADDR
10934: GO 11088
10936: LD_INT 3
10938: DOUBLE
10939: EQUAL
10940: IFTRUE 10944
10942: GO 11006
10944: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10945: LD_ADDR_VAR 0 12
10949: PUSH
10950: LD_VAR 0 18
10954: PPUSH
10955: LD_INT 22
10957: PUSH
10958: LD_VAR 0 16
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 2
10969: PUSH
10970: LD_INT 30
10972: PUSH
10973: LD_INT 2
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 30
10982: PUSH
10983: LD_INT 3
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 72
11003: ST_TO_ADDR
11004: GO 11088
11006: LD_INT 4
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11087
11014: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11015: LD_ADDR_VAR 0 12
11019: PUSH
11020: LD_VAR 0 18
11024: PPUSH
11025: LD_INT 22
11027: PUSH
11028: LD_VAR 0 16
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 6
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 30
11052: PUSH
11053: LD_INT 7
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 8
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 72
11084: ST_TO_ADDR
11085: GO 11088
11087: POP
// if i = 1 then
11088: LD_VAR 0 8
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11207
// begin tmp := [ ] ;
11098: LD_ADDR_VAR 0 19
11102: PUSH
11103: EMPTY
11104: ST_TO_ADDR
// for j in f do
11105: LD_ADDR_VAR 0 9
11109: PUSH
11110: LD_VAR 0 12
11114: PUSH
11115: FOR_IN
11116: IFFALSE 11189
// if GetBType ( j ) = b_bunker then
11118: LD_VAR 0 9
11122: PPUSH
11123: CALL_OW 266
11127: PUSH
11128: LD_INT 32
11130: EQUAL
11131: IFFALSE 11158
// tmp := Insert ( tmp , 1 , j ) else
11133: LD_ADDR_VAR 0 19
11137: PUSH
11138: LD_VAR 0 19
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: LD_VAR 0 9
11150: PPUSH
11151: CALL_OW 2
11155: ST_TO_ADDR
11156: GO 11187
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11158: LD_ADDR_VAR 0 19
11162: PUSH
11163: LD_VAR 0 19
11167: PPUSH
11168: LD_VAR 0 19
11172: PUSH
11173: LD_INT 1
11175: PLUS
11176: PPUSH
11177: LD_VAR 0 9
11181: PPUSH
11182: CALL_OW 2
11186: ST_TO_ADDR
11187: GO 11115
11189: POP
11190: POP
// if tmp then
11191: LD_VAR 0 19
11195: IFFALSE 11207
// f := tmp ;
11197: LD_ADDR_VAR 0 12
11201: PUSH
11202: LD_VAR 0 19
11206: ST_TO_ADDR
// end ; x := personel [ i ] ;
11207: LD_ADDR_VAR 0 13
11211: PUSH
11212: LD_VAR 0 6
11216: PUSH
11217: LD_VAR 0 8
11221: ARRAY
11222: ST_TO_ADDR
// if x = - 1 then
11223: LD_VAR 0 13
11227: PUSH
11228: LD_INT 1
11230: NEG
11231: EQUAL
11232: IFFALSE 11441
// begin for j in f do
11234: LD_ADDR_VAR 0 9
11238: PUSH
11239: LD_VAR 0 12
11243: PUSH
11244: FOR_IN
11245: IFFALSE 11437
// repeat InitHc ;
11247: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11251: LD_VAR 0 9
11255: PPUSH
11256: CALL_OW 266
11260: PUSH
11261: LD_INT 5
11263: EQUAL
11264: IFFALSE 11334
// begin if UnitsInside ( j ) < 3 then
11266: LD_VAR 0 9
11270: PPUSH
11271: CALL_OW 313
11275: PUSH
11276: LD_INT 3
11278: LESS
11279: IFFALSE 11315
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11281: LD_INT 0
11283: PPUSH
11284: LD_INT 5
11286: PUSH
11287: LD_INT 8
11289: PUSH
11290: LD_INT 9
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: PUSH
11298: LD_VAR 0 17
11302: ARRAY
11303: PPUSH
11304: LD_VAR 0 4
11308: PPUSH
11309: CALL_OW 380
11313: GO 11332
// PrepareHuman ( false , i , skill ) ;
11315: LD_INT 0
11317: PPUSH
11318: LD_VAR 0 8
11322: PPUSH
11323: LD_VAR 0 4
11327: PPUSH
11328: CALL_OW 380
// end else
11332: GO 11351
// PrepareHuman ( false , i , skill ) ;
11334: LD_INT 0
11336: PPUSH
11337: LD_VAR 0 8
11341: PPUSH
11342: LD_VAR 0 4
11346: PPUSH
11347: CALL_OW 380
// un := CreateHuman ;
11351: LD_ADDR_VAR 0 14
11355: PUSH
11356: CALL_OW 44
11360: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11361: LD_ADDR_VAR 0 7
11365: PUSH
11366: LD_VAR 0 7
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: LD_VAR 0 14
11378: PPUSH
11379: CALL_OW 2
11383: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11384: LD_VAR 0 14
11388: PPUSH
11389: LD_VAR 0 9
11393: PPUSH
11394: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11398: LD_VAR 0 9
11402: PPUSH
11403: CALL_OW 313
11407: PUSH
11408: LD_INT 6
11410: EQUAL
11411: PUSH
11412: LD_VAR 0 9
11416: PPUSH
11417: CALL_OW 266
11421: PUSH
11422: LD_INT 32
11424: PUSH
11425: LD_INT 31
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: IN
11432: OR
11433: IFFALSE 11247
11435: GO 11244
11437: POP
11438: POP
// end else
11439: GO 11821
// for j = 1 to x do
11441: LD_ADDR_VAR 0 9
11445: PUSH
11446: DOUBLE
11447: LD_INT 1
11449: DEC
11450: ST_TO_ADDR
11451: LD_VAR 0 13
11455: PUSH
11456: FOR_TO
11457: IFFALSE 11819
// begin InitHc ;
11459: CALL_OW 19
// if not f then
11463: LD_VAR 0 12
11467: NOT
11468: IFFALSE 11557
// begin PrepareHuman ( false , i , skill ) ;
11470: LD_INT 0
11472: PPUSH
11473: LD_VAR 0 8
11477: PPUSH
11478: LD_VAR 0 4
11482: PPUSH
11483: CALL_OW 380
// un := CreateHuman ;
11487: LD_ADDR_VAR 0 14
11491: PUSH
11492: CALL_OW 44
11496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11497: LD_ADDR_VAR 0 7
11501: PUSH
11502: LD_VAR 0 7
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: LD_VAR 0 14
11514: PPUSH
11515: CALL_OW 2
11519: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11520: LD_VAR 0 14
11524: PPUSH
11525: LD_VAR 0 1
11529: PPUSH
11530: CALL_OW 250
11534: PPUSH
11535: LD_VAR 0 1
11539: PPUSH
11540: CALL_OW 251
11544: PPUSH
11545: LD_INT 10
11547: PPUSH
11548: LD_INT 0
11550: PPUSH
11551: CALL_OW 50
// continue ;
11555: GO 11456
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11557: LD_VAR 0 12
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: CALL_OW 313
11570: PUSH
11571: LD_VAR 0 12
11575: PUSH
11576: LD_INT 1
11578: ARRAY
11579: PPUSH
11580: CALL_OW 266
11584: PUSH
11585: LD_INT 32
11587: PUSH
11588: LD_INT 31
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: IN
11595: AND
11596: PUSH
11597: LD_VAR 0 12
11601: PUSH
11602: LD_INT 1
11604: ARRAY
11605: PPUSH
11606: CALL_OW 313
11610: PUSH
11611: LD_INT 6
11613: EQUAL
11614: OR
11615: IFFALSE 11635
// f := Delete ( f , 1 ) ;
11617: LD_ADDR_VAR 0 12
11621: PUSH
11622: LD_VAR 0 12
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 3
11634: ST_TO_ADDR
// if not f then
11635: LD_VAR 0 12
11639: NOT
11640: IFFALSE 11658
// begin x := x + 2 ;
11642: LD_ADDR_VAR 0 13
11646: PUSH
11647: LD_VAR 0 13
11651: PUSH
11652: LD_INT 2
11654: PLUS
11655: ST_TO_ADDR
// continue ;
11656: GO 11456
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11658: LD_VAR 0 12
11662: PUSH
11663: LD_INT 1
11665: ARRAY
11666: PPUSH
11667: CALL_OW 266
11671: PUSH
11672: LD_INT 5
11674: EQUAL
11675: IFFALSE 11749
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11677: LD_VAR 0 12
11681: PUSH
11682: LD_INT 1
11684: ARRAY
11685: PPUSH
11686: CALL_OW 313
11690: PUSH
11691: LD_INT 3
11693: LESS
11694: IFFALSE 11730
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11696: LD_INT 0
11698: PPUSH
11699: LD_INT 5
11701: PUSH
11702: LD_INT 8
11704: PUSH
11705: LD_INT 9
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_VAR 0 17
11717: ARRAY
11718: PPUSH
11719: LD_VAR 0 4
11723: PPUSH
11724: CALL_OW 380
11728: GO 11747
// PrepareHuman ( false , i , skill ) ;
11730: LD_INT 0
11732: PPUSH
11733: LD_VAR 0 8
11737: PPUSH
11738: LD_VAR 0 4
11742: PPUSH
11743: CALL_OW 380
// end else
11747: GO 11766
// PrepareHuman ( false , i , skill ) ;
11749: LD_INT 0
11751: PPUSH
11752: LD_VAR 0 8
11756: PPUSH
11757: LD_VAR 0 4
11761: PPUSH
11762: CALL_OW 380
// un := CreateHuman ;
11766: LD_ADDR_VAR 0 14
11770: PUSH
11771: CALL_OW 44
11775: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_VAR 0 7
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: LD_VAR 0 14
11793: PPUSH
11794: CALL_OW 2
11798: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11799: LD_VAR 0 14
11803: PPUSH
11804: LD_VAR 0 12
11808: PUSH
11809: LD_INT 1
11811: ARRAY
11812: PPUSH
11813: CALL_OW 52
// end ;
11817: GO 11456
11819: POP
11820: POP
// end ;
11821: GO 10758
11823: POP
11824: POP
// result := result ^ buildings ;
11825: LD_ADDR_VAR 0 7
11829: PUSH
11830: LD_VAR 0 7
11834: PUSH
11835: LD_VAR 0 18
11839: ADD
11840: ST_TO_ADDR
// end else
11841: GO 11984
// begin for i = 1 to personel do
11843: LD_ADDR_VAR 0 8
11847: PUSH
11848: DOUBLE
11849: LD_INT 1
11851: DEC
11852: ST_TO_ADDR
11853: LD_VAR 0 6
11857: PUSH
11858: FOR_TO
11859: IFFALSE 11982
// begin if i > 4 then
11861: LD_VAR 0 8
11865: PUSH
11866: LD_INT 4
11868: GREATER
11869: IFFALSE 11873
// break ;
11871: GO 11982
// x := personel [ i ] ;
11873: LD_ADDR_VAR 0 13
11877: PUSH
11878: LD_VAR 0 6
11882: PUSH
11883: LD_VAR 0 8
11887: ARRAY
11888: ST_TO_ADDR
// if x = - 1 then
11889: LD_VAR 0 13
11893: PUSH
11894: LD_INT 1
11896: NEG
11897: EQUAL
11898: IFFALSE 11902
// continue ;
11900: GO 11858
// PrepareHuman ( false , i , skill ) ;
11902: LD_INT 0
11904: PPUSH
11905: LD_VAR 0 8
11909: PPUSH
11910: LD_VAR 0 4
11914: PPUSH
11915: CALL_OW 380
// un := CreateHuman ;
11919: LD_ADDR_VAR 0 14
11923: PUSH
11924: CALL_OW 44
11928: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11929: LD_VAR 0 14
11933: PPUSH
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 250
11943: PPUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: CALL_OW 251
11953: PPUSH
11954: LD_INT 10
11956: PPUSH
11957: LD_INT 0
11959: PPUSH
11960: CALL_OW 50
// result := result ^ un ;
11964: LD_ADDR_VAR 0 7
11968: PUSH
11969: LD_VAR 0 7
11973: PUSH
11974: LD_VAR 0 14
11978: ADD
11979: ST_TO_ADDR
// end ;
11980: GO 11858
11982: POP
11983: POP
// end ; end ;
11984: LD_VAR 0 7
11988: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11989: LD_INT 0
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
12000: PPUSH
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
12006: PPUSH
// result := false ;
12007: LD_ADDR_VAR 0 3
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12015: LD_VAR 0 1
12019: NOT
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 266
12030: PUSH
12031: LD_INT 32
12033: PUSH
12034: LD_INT 33
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: IN
12041: NOT
12042: OR
12043: IFFALSE 12047
// exit ;
12045: GO 13156
// nat := GetNation ( tower ) ;
12047: LD_ADDR_VAR 0 12
12051: PUSH
12052: LD_VAR 0 1
12056: PPUSH
12057: CALL_OW 248
12061: ST_TO_ADDR
// side := GetSide ( tower ) ;
12062: LD_ADDR_VAR 0 16
12066: PUSH
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 255
12076: ST_TO_ADDR
// x := GetX ( tower ) ;
12077: LD_ADDR_VAR 0 10
12081: PUSH
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 250
12091: ST_TO_ADDR
// y := GetY ( tower ) ;
12092: LD_ADDR_VAR 0 11
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 251
12106: ST_TO_ADDR
// if not x or not y then
12107: LD_VAR 0 10
12111: NOT
12112: PUSH
12113: LD_VAR 0 11
12117: NOT
12118: OR
12119: IFFALSE 12123
// exit ;
12121: GO 13156
// weapon := 0 ;
12123: LD_ADDR_VAR 0 18
12127: PUSH
12128: LD_INT 0
12130: ST_TO_ADDR
// fac_list := [ ] ;
12131: LD_ADDR_VAR 0 17
12135: PUSH
12136: EMPTY
12137: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12138: LD_ADDR_VAR 0 6
12142: PUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 274
12152: PPUSH
12153: LD_VAR 0 2
12157: PPUSH
12158: LD_INT 0
12160: PPUSH
12161: CALL 9727 0 3
12165: PPUSH
12166: LD_INT 30
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 72
12180: ST_TO_ADDR
// if not factories then
12181: LD_VAR 0 6
12185: NOT
12186: IFFALSE 12190
// exit ;
12188: GO 13156
// for i in factories do
12190: LD_ADDR_VAR 0 8
12194: PUSH
12195: LD_VAR 0 6
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12226
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12203: LD_ADDR_VAR 0 17
12207: PUSH
12208: LD_VAR 0 17
12212: PUSH
12213: LD_VAR 0 8
12217: PPUSH
12218: CALL_OW 478
12222: UNION
12223: ST_TO_ADDR
12224: GO 12200
12226: POP
12227: POP
// if not fac_list then
12228: LD_VAR 0 17
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 13156
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12237: LD_ADDR_VAR 0 5
12241: PUSH
12242: LD_INT 4
12244: PUSH
12245: LD_INT 5
12247: PUSH
12248: LD_INT 9
12250: PUSH
12251: LD_INT 10
12253: PUSH
12254: LD_INT 6
12256: PUSH
12257: LD_INT 7
12259: PUSH
12260: LD_INT 11
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 27
12274: PUSH
12275: LD_INT 28
12277: PUSH
12278: LD_INT 26
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 43
12292: PUSH
12293: LD_INT 44
12295: PUSH
12296: LD_INT 46
12298: PUSH
12299: LD_INT 45
12301: PUSH
12302: LD_INT 47
12304: PUSH
12305: LD_INT 49
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: LD_VAR 0 12
12325: ARRAY
12326: ST_TO_ADDR
// list := list isect fac_list ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_VAR 0 5
12336: PUSH
12337: LD_VAR 0 17
12341: ISECT
12342: ST_TO_ADDR
// if not list then
12343: LD_VAR 0 5
12347: NOT
12348: IFFALSE 12352
// exit ;
12350: GO 13156
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12352: LD_VAR 0 12
12356: PUSH
12357: LD_INT 3
12359: EQUAL
12360: PUSH
12361: LD_INT 49
12363: PUSH
12364: LD_VAR 0 5
12368: IN
12369: AND
12370: PUSH
12371: LD_INT 31
12373: PPUSH
12374: LD_VAR 0 16
12378: PPUSH
12379: CALL_OW 321
12383: PUSH
12384: LD_INT 2
12386: EQUAL
12387: AND
12388: IFFALSE 12448
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12390: LD_INT 22
12392: PUSH
12393: LD_VAR 0 16
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 35
12404: PUSH
12405: LD_INT 49
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 91
12414: PUSH
12415: LD_VAR 0 1
12419: PUSH
12420: LD_INT 10
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: PPUSH
12433: CALL_OW 69
12437: NOT
12438: IFFALSE 12448
// weapon := ru_time_lapser ;
12440: LD_ADDR_VAR 0 18
12444: PUSH
12445: LD_INT 49
12447: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12448: LD_VAR 0 12
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: LD_INT 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: IN
12463: PUSH
12464: LD_INT 11
12466: PUSH
12467: LD_VAR 0 5
12471: IN
12472: PUSH
12473: LD_INT 30
12475: PUSH
12476: LD_VAR 0 5
12480: IN
12481: OR
12482: AND
12483: PUSH
12484: LD_INT 6
12486: PPUSH
12487: LD_VAR 0 16
12491: PPUSH
12492: CALL_OW 321
12496: PUSH
12497: LD_INT 2
12499: EQUAL
12500: AND
12501: IFFALSE 12666
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12503: LD_INT 22
12505: PUSH
12506: LD_VAR 0 16
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 2
12517: PUSH
12518: LD_INT 35
12520: PUSH
12521: LD_INT 11
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 35
12530: PUSH
12531: LD_INT 30
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 91
12545: PUSH
12546: LD_VAR 0 1
12550: PUSH
12551: LD_INT 18
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: NOT
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_VAR 0 16
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 30
12587: PUSH
12588: LD_INT 32
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 30
12597: PUSH
12598: LD_INT 33
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 91
12612: PUSH
12613: LD_VAR 0 1
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: PPUSH
12634: CALL_OW 69
12638: PUSH
12639: LD_INT 2
12641: GREATER
12642: AND
12643: IFFALSE 12666
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12645: LD_ADDR_VAR 0 18
12649: PUSH
12650: LD_INT 11
12652: PUSH
12653: LD_INT 30
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_VAR 0 12
12664: ARRAY
12665: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12666: LD_VAR 0 18
12670: NOT
12671: PUSH
12672: LD_INT 40
12674: PPUSH
12675: LD_VAR 0 16
12679: PPUSH
12680: CALL_OW 321
12684: PUSH
12685: LD_INT 2
12687: EQUAL
12688: AND
12689: PUSH
12690: LD_INT 7
12692: PUSH
12693: LD_VAR 0 5
12697: IN
12698: PUSH
12699: LD_INT 28
12701: PUSH
12702: LD_VAR 0 5
12706: IN
12707: OR
12708: PUSH
12709: LD_INT 45
12711: PUSH
12712: LD_VAR 0 5
12716: IN
12717: OR
12718: AND
12719: IFFALSE 12973
// begin hex := GetHexInfo ( x , y ) ;
12721: LD_ADDR_VAR 0 4
12725: PUSH
12726: LD_VAR 0 10
12730: PPUSH
12731: LD_VAR 0 11
12735: PPUSH
12736: CALL_OW 546
12740: ST_TO_ADDR
// if hex [ 1 ] then
12741: LD_VAR 0 4
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: IFFALSE 12753
// exit ;
12751: GO 13156
// height := hex [ 2 ] ;
12753: LD_ADDR_VAR 0 15
12757: PUSH
12758: LD_VAR 0 4
12762: PUSH
12763: LD_INT 2
12765: ARRAY
12766: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12767: LD_ADDR_VAR 0 14
12771: PUSH
12772: LD_INT 0
12774: PUSH
12775: LD_INT 2
12777: PUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 5
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: ST_TO_ADDR
// for i in tmp do
12790: LD_ADDR_VAR 0 8
12794: PUSH
12795: LD_VAR 0 14
12799: PUSH
12800: FOR_IN
12801: IFFALSE 12971
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12803: LD_ADDR_VAR 0 9
12807: PUSH
12808: LD_VAR 0 10
12812: PPUSH
12813: LD_VAR 0 8
12817: PPUSH
12818: LD_INT 5
12820: PPUSH
12821: CALL_OW 272
12825: PUSH
12826: LD_VAR 0 11
12830: PPUSH
12831: LD_VAR 0 8
12835: PPUSH
12836: LD_INT 5
12838: PPUSH
12839: CALL_OW 273
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12848: LD_VAR 0 9
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PPUSH
12857: LD_VAR 0 9
12861: PUSH
12862: LD_INT 2
12864: ARRAY
12865: PPUSH
12866: CALL_OW 488
12870: IFFALSE 12969
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12872: LD_ADDR_VAR 0 4
12876: PUSH
12877: LD_VAR 0 9
12881: PUSH
12882: LD_INT 1
12884: ARRAY
12885: PPUSH
12886: LD_VAR 0 9
12890: PUSH
12891: LD_INT 2
12893: ARRAY
12894: PPUSH
12895: CALL_OW 546
12899: ST_TO_ADDR
// if hex [ 1 ] then
12900: LD_VAR 0 4
12904: PUSH
12905: LD_INT 1
12907: ARRAY
12908: IFFALSE 12912
// continue ;
12910: GO 12800
// h := hex [ 2 ] ;
12912: LD_ADDR_VAR 0 13
12916: PUSH
12917: LD_VAR 0 4
12921: PUSH
12922: LD_INT 2
12924: ARRAY
12925: ST_TO_ADDR
// if h + 7 < height then
12926: LD_VAR 0 13
12930: PUSH
12931: LD_INT 7
12933: PLUS
12934: PUSH
12935: LD_VAR 0 15
12939: LESS
12940: IFFALSE 12969
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12942: LD_ADDR_VAR 0 18
12946: PUSH
12947: LD_INT 7
12949: PUSH
12950: LD_INT 28
12952: PUSH
12953: LD_INT 45
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: PUSH
12961: LD_VAR 0 12
12965: ARRAY
12966: ST_TO_ADDR
// break ;
12967: GO 12971
// end ; end ; end ;
12969: GO 12800
12971: POP
12972: POP
// end ; if not weapon then
12973: LD_VAR 0 18
12977: NOT
12978: IFFALSE 13038
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12980: LD_ADDR_VAR 0 5
12984: PUSH
12985: LD_VAR 0 5
12989: PUSH
12990: LD_INT 11
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 49
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: DIFF
13004: ST_TO_ADDR
// if not list then
13005: LD_VAR 0 5
13009: NOT
13010: IFFALSE 13014
// exit ;
13012: GO 13156
// weapon := list [ rand ( 1 , list ) ] ;
13014: LD_ADDR_VAR 0 18
13018: PUSH
13019: LD_VAR 0 5
13023: PUSH
13024: LD_INT 1
13026: PPUSH
13027: LD_VAR 0 5
13031: PPUSH
13032: CALL_OW 12
13036: ARRAY
13037: ST_TO_ADDR
// end ; if weapon then
13038: LD_VAR 0 18
13042: IFFALSE 13156
// begin tmp := CostOfWeapon ( weapon ) ;
13044: LD_ADDR_VAR 0 14
13048: PUSH
13049: LD_VAR 0 18
13053: PPUSH
13054: CALL_OW 451
13058: ST_TO_ADDR
// j := GetBase ( tower ) ;
13059: LD_ADDR_VAR 0 9
13063: PUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 274
13073: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13074: LD_VAR 0 9
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 275
13086: PUSH
13087: LD_VAR 0 14
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: GREATEREQUAL
13096: PUSH
13097: LD_VAR 0 9
13101: PPUSH
13102: LD_INT 2
13104: PPUSH
13105: CALL_OW 275
13109: PUSH
13110: LD_VAR 0 14
13114: PUSH
13115: LD_INT 2
13117: ARRAY
13118: GREATEREQUAL
13119: AND
13120: PUSH
13121: LD_VAR 0 9
13125: PPUSH
13126: LD_INT 3
13128: PPUSH
13129: CALL_OW 275
13133: PUSH
13134: LD_VAR 0 14
13138: PUSH
13139: LD_INT 3
13141: ARRAY
13142: GREATEREQUAL
13143: AND
13144: IFFALSE 13156
// result := weapon ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_VAR 0 18
13155: ST_TO_ADDR
// end ; end ;
13156: LD_VAR 0 3
13160: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13161: LD_INT 0
13163: PPUSH
13164: PPUSH
// result := true ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: LD_INT 1
13172: ST_TO_ADDR
// if array1 = array2 then
13173: LD_VAR 0 1
13177: PUSH
13178: LD_VAR 0 2
13182: EQUAL
13183: IFFALSE 13243
// begin for i = 1 to array1 do
13185: LD_ADDR_VAR 0 4
13189: PUSH
13190: DOUBLE
13191: LD_INT 1
13193: DEC
13194: ST_TO_ADDR
13195: LD_VAR 0 1
13199: PUSH
13200: FOR_TO
13201: IFFALSE 13239
// if array1 [ i ] <> array2 [ i ] then
13203: LD_VAR 0 1
13207: PUSH
13208: LD_VAR 0 4
13212: ARRAY
13213: PUSH
13214: LD_VAR 0 2
13218: PUSH
13219: LD_VAR 0 4
13223: ARRAY
13224: NONEQUAL
13225: IFFALSE 13237
// begin result := false ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// break ;
13235: GO 13239
// end ;
13237: GO 13200
13239: POP
13240: POP
// end else
13241: GO 13251
// result := false ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// end ;
13251: LD_VAR 0 3
13255: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
// if not array1 or not array2 then
13260: LD_VAR 0 1
13264: NOT
13265: PUSH
13266: LD_VAR 0 2
13270: NOT
13271: OR
13272: IFFALSE 13276
// exit ;
13274: GO 13340
// result := true ;
13276: LD_ADDR_VAR 0 3
13280: PUSH
13281: LD_INT 1
13283: ST_TO_ADDR
// for i = 1 to array1 do
13284: LD_ADDR_VAR 0 4
13288: PUSH
13289: DOUBLE
13290: LD_INT 1
13292: DEC
13293: ST_TO_ADDR
13294: LD_VAR 0 1
13298: PUSH
13299: FOR_TO
13300: IFFALSE 13338
// if array1 [ i ] <> array2 [ i ] then
13302: LD_VAR 0 1
13306: PUSH
13307: LD_VAR 0 4
13311: ARRAY
13312: PUSH
13313: LD_VAR 0 2
13317: PUSH
13318: LD_VAR 0 4
13322: ARRAY
13323: NONEQUAL
13324: IFFALSE 13336
// begin result := false ;
13326: LD_ADDR_VAR 0 3
13330: PUSH
13331: LD_INT 0
13333: ST_TO_ADDR
// break ;
13334: GO 13338
// end ;
13336: GO 13299
13338: POP
13339: POP
// end ;
13340: LD_VAR 0 3
13344: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13345: LD_INT 0
13347: PPUSH
13348: PPUSH
13349: PPUSH
// pom := GetBase ( fac ) ;
13350: LD_ADDR_VAR 0 5
13354: PUSH
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 274
13364: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: LD_VAR 0 2
13374: PUSH
13375: LD_INT 1
13377: ARRAY
13378: PPUSH
13379: LD_VAR 0 2
13383: PUSH
13384: LD_INT 2
13386: ARRAY
13387: PPUSH
13388: LD_VAR 0 2
13392: PUSH
13393: LD_INT 3
13395: ARRAY
13396: PPUSH
13397: LD_VAR 0 2
13401: PUSH
13402: LD_INT 4
13404: ARRAY
13405: PPUSH
13406: CALL_OW 449
13410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13411: LD_ADDR_VAR 0 3
13415: PUSH
13416: LD_VAR 0 5
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 275
13428: PUSH
13429: LD_VAR 0 4
13433: PUSH
13434: LD_INT 1
13436: ARRAY
13437: GREATEREQUAL
13438: PUSH
13439: LD_VAR 0 5
13443: PPUSH
13444: LD_INT 2
13446: PPUSH
13447: CALL_OW 275
13451: PUSH
13452: LD_VAR 0 4
13456: PUSH
13457: LD_INT 2
13459: ARRAY
13460: GREATEREQUAL
13461: AND
13462: PUSH
13463: LD_VAR 0 5
13467: PPUSH
13468: LD_INT 3
13470: PPUSH
13471: CALL_OW 275
13475: PUSH
13476: LD_VAR 0 4
13480: PUSH
13481: LD_INT 3
13483: ARRAY
13484: GREATEREQUAL
13485: AND
13486: ST_TO_ADDR
// end ;
13487: LD_VAR 0 3
13491: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13492: LD_INT 0
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
// pom := GetBase ( building ) ;
13498: LD_ADDR_VAR 0 3
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 274
13512: ST_TO_ADDR
// if not pom then
13513: LD_VAR 0 3
13517: NOT
13518: IFFALSE 13522
// exit ;
13520: GO 13692
// btype := GetBType ( building ) ;
13522: LD_ADDR_VAR 0 5
13526: PUSH
13527: LD_VAR 0 1
13531: PPUSH
13532: CALL_OW 266
13536: ST_TO_ADDR
// if btype = b_armoury then
13537: LD_VAR 0 5
13541: PUSH
13542: LD_INT 4
13544: EQUAL
13545: IFFALSE 13555
// btype := b_barracks ;
13547: LD_ADDR_VAR 0 5
13551: PUSH
13552: LD_INT 5
13554: ST_TO_ADDR
// if btype = b_depot then
13555: LD_VAR 0 5
13559: PUSH
13560: LD_INT 0
13562: EQUAL
13563: IFFALSE 13573
// btype := b_warehouse ;
13565: LD_ADDR_VAR 0 5
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// if btype = b_workshop then
13573: LD_VAR 0 5
13577: PUSH
13578: LD_INT 2
13580: EQUAL
13581: IFFALSE 13591
// btype := b_factory ;
13583: LD_ADDR_VAR 0 5
13587: PUSH
13588: LD_INT 3
13590: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13591: LD_ADDR_VAR 0 4
13595: PUSH
13596: LD_VAR 0 5
13600: PPUSH
13601: LD_VAR 0 1
13605: PPUSH
13606: CALL_OW 248
13610: PPUSH
13611: CALL_OW 450
13615: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13616: LD_ADDR_VAR 0 2
13620: PUSH
13621: LD_VAR 0 3
13625: PPUSH
13626: LD_INT 1
13628: PPUSH
13629: CALL_OW 275
13633: PUSH
13634: LD_VAR 0 4
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: GREATEREQUAL
13643: PUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: LD_INT 2
13651: PPUSH
13652: CALL_OW 275
13656: PUSH
13657: LD_VAR 0 4
13661: PUSH
13662: LD_INT 2
13664: ARRAY
13665: GREATEREQUAL
13666: AND
13667: PUSH
13668: LD_VAR 0 3
13672: PPUSH
13673: LD_INT 3
13675: PPUSH
13676: CALL_OW 275
13680: PUSH
13681: LD_VAR 0 4
13685: PUSH
13686: LD_INT 3
13688: ARRAY
13689: GREATEREQUAL
13690: AND
13691: ST_TO_ADDR
// end ;
13692: LD_VAR 0 2
13696: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13697: LD_INT 0
13699: PPUSH
13700: PPUSH
13701: PPUSH
// pom := GetBase ( building ) ;
13702: LD_ADDR_VAR 0 4
13706: PUSH
13707: LD_VAR 0 1
13711: PPUSH
13712: CALL_OW 274
13716: ST_TO_ADDR
// if not pom then
13717: LD_VAR 0 4
13721: NOT
13722: IFFALSE 13726
// exit ;
13724: GO 13827
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13726: LD_ADDR_VAR 0 5
13730: PUSH
13731: LD_VAR 0 2
13735: PPUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 248
13745: PPUSH
13746: CALL_OW 450
13750: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13751: LD_ADDR_VAR 0 3
13755: PUSH
13756: LD_VAR 0 4
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: CALL_OW 275
13768: PUSH
13769: LD_VAR 0 5
13773: PUSH
13774: LD_INT 1
13776: ARRAY
13777: GREATEREQUAL
13778: PUSH
13779: LD_VAR 0 4
13783: PPUSH
13784: LD_INT 2
13786: PPUSH
13787: CALL_OW 275
13791: PUSH
13792: LD_VAR 0 5
13796: PUSH
13797: LD_INT 2
13799: ARRAY
13800: GREATEREQUAL
13801: AND
13802: PUSH
13803: LD_VAR 0 4
13807: PPUSH
13808: LD_INT 3
13810: PPUSH
13811: CALL_OW 275
13815: PUSH
13816: LD_VAR 0 5
13820: PUSH
13821: LD_INT 3
13823: ARRAY
13824: GREATEREQUAL
13825: AND
13826: ST_TO_ADDR
// end ;
13827: LD_VAR 0 3
13831: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13832: LD_INT 0
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
13839: PPUSH
13840: PPUSH
13841: PPUSH
13842: PPUSH
13843: PPUSH
13844: PPUSH
// result := false ;
13845: LD_ADDR_VAR 0 8
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13853: LD_VAR 0 5
13857: NOT
13858: PUSH
13859: LD_VAR 0 1
13863: NOT
13864: OR
13865: PUSH
13866: LD_VAR 0 2
13870: NOT
13871: OR
13872: PUSH
13873: LD_VAR 0 3
13877: NOT
13878: OR
13879: IFFALSE 13883
// exit ;
13881: GO 14697
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13883: LD_ADDR_VAR 0 14
13887: PUSH
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_VAR 0 2
13897: PPUSH
13898: LD_VAR 0 3
13902: PPUSH
13903: LD_VAR 0 4
13907: PPUSH
13908: LD_VAR 0 5
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: CALL_OW 248
13921: PPUSH
13922: LD_INT 0
13924: PPUSH
13925: CALL 15950 0 6
13929: ST_TO_ADDR
// if not hexes then
13930: LD_VAR 0 14
13934: NOT
13935: IFFALSE 13939
// exit ;
13937: GO 14697
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13939: LD_ADDR_VAR 0 17
13943: PUSH
13944: LD_VAR 0 5
13948: PPUSH
13949: LD_INT 22
13951: PUSH
13952: LD_VAR 0 13
13956: PPUSH
13957: CALL_OW 255
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 30
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 1
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 72
14002: ST_TO_ADDR
// for i = 1 to hexes do
14003: LD_ADDR_VAR 0 9
14007: PUSH
14008: DOUBLE
14009: LD_INT 1
14011: DEC
14012: ST_TO_ADDR
14013: LD_VAR 0 14
14017: PUSH
14018: FOR_TO
14019: IFFALSE 14695
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14021: LD_ADDR_VAR 0 13
14025: PUSH
14026: LD_VAR 0 14
14030: PUSH
14031: LD_VAR 0 9
14035: ARRAY
14036: PUSH
14037: LD_INT 1
14039: ARRAY
14040: PPUSH
14041: LD_VAR 0 14
14045: PUSH
14046: LD_VAR 0 9
14050: ARRAY
14051: PUSH
14052: LD_INT 2
14054: ARRAY
14055: PPUSH
14056: CALL_OW 428
14060: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14061: LD_VAR 0 14
14065: PUSH
14066: LD_VAR 0 9
14070: ARRAY
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PPUSH
14076: LD_VAR 0 14
14080: PUSH
14081: LD_VAR 0 9
14085: ARRAY
14086: PUSH
14087: LD_INT 2
14089: ARRAY
14090: PPUSH
14091: CALL_OW 351
14095: PUSH
14096: LD_VAR 0 14
14100: PUSH
14101: LD_VAR 0 9
14105: ARRAY
14106: PUSH
14107: LD_INT 1
14109: ARRAY
14110: PPUSH
14111: LD_VAR 0 14
14115: PUSH
14116: LD_VAR 0 9
14120: ARRAY
14121: PUSH
14122: LD_INT 2
14124: ARRAY
14125: PPUSH
14126: CALL_OW 488
14130: NOT
14131: OR
14132: PUSH
14133: LD_VAR 0 13
14137: PPUSH
14138: CALL_OW 247
14142: PUSH
14143: LD_INT 3
14145: EQUAL
14146: OR
14147: IFFALSE 14153
// exit ;
14149: POP
14150: POP
14151: GO 14697
// if not tmp then
14153: LD_VAR 0 13
14157: NOT
14158: IFFALSE 14162
// continue ;
14160: GO 14018
// result := true ;
14162: LD_ADDR_VAR 0 8
14166: PUSH
14167: LD_INT 1
14169: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14170: LD_VAR 0 6
14174: PUSH
14175: LD_VAR 0 13
14179: PPUSH
14180: CALL_OW 247
14184: PUSH
14185: LD_INT 2
14187: EQUAL
14188: AND
14189: PUSH
14190: LD_VAR 0 13
14194: PPUSH
14195: CALL_OW 263
14199: PUSH
14200: LD_INT 1
14202: EQUAL
14203: AND
14204: IFFALSE 14368
// begin if IsDrivenBy ( tmp ) then
14206: LD_VAR 0 13
14210: PPUSH
14211: CALL_OW 311
14215: IFFALSE 14219
// continue ;
14217: GO 14018
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14219: LD_VAR 0 6
14223: PPUSH
14224: LD_INT 3
14226: PUSH
14227: LD_INT 60
14229: PUSH
14230: EMPTY
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 3
14239: PUSH
14240: LD_INT 55
14242: PUSH
14243: EMPTY
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 72
14258: IFFALSE 14366
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14260: LD_ADDR_VAR 0 18
14264: PUSH
14265: LD_VAR 0 6
14269: PPUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 60
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 3
14285: PUSH
14286: LD_INT 55
14288: PUSH
14289: EMPTY
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 72
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: ST_TO_ADDR
// if IsInUnit ( driver ) then
14309: LD_VAR 0 18
14313: PPUSH
14314: CALL_OW 310
14318: IFFALSE 14329
// ComExit ( driver ) ;
14320: LD_VAR 0 18
14324: PPUSH
14325: CALL 39751 0 1
// AddComEnterUnit ( driver , tmp ) ;
14329: LD_VAR 0 18
14333: PPUSH
14334: LD_VAR 0 13
14338: PPUSH
14339: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14343: LD_VAR 0 18
14347: PPUSH
14348: LD_VAR 0 7
14352: PPUSH
14353: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14357: LD_VAR 0 18
14361: PPUSH
14362: CALL_OW 181
// end ; continue ;
14366: GO 14018
// end ; if not cleaners or not tmp in cleaners then
14368: LD_VAR 0 6
14372: NOT
14373: PUSH
14374: LD_VAR 0 13
14378: PUSH
14379: LD_VAR 0 6
14383: IN
14384: NOT
14385: OR
14386: IFFALSE 14693
// begin if dep then
14388: LD_VAR 0 17
14392: IFFALSE 14528
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14394: LD_ADDR_VAR 0 16
14398: PUSH
14399: LD_VAR 0 17
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PPUSH
14408: CALL_OW 250
14412: PPUSH
14413: LD_VAR 0 17
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: CALL_OW 254
14426: PPUSH
14427: LD_INT 5
14429: PPUSH
14430: CALL_OW 272
14434: PUSH
14435: LD_VAR 0 17
14439: PUSH
14440: LD_INT 1
14442: ARRAY
14443: PPUSH
14444: CALL_OW 251
14448: PPUSH
14449: LD_VAR 0 17
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PPUSH
14458: CALL_OW 254
14462: PPUSH
14463: LD_INT 5
14465: PPUSH
14466: CALL_OW 273
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14475: LD_VAR 0 16
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PPUSH
14484: LD_VAR 0 16
14488: PUSH
14489: LD_INT 2
14491: ARRAY
14492: PPUSH
14493: CALL_OW 488
14497: IFFALSE 14528
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14499: LD_VAR 0 13
14503: PPUSH
14504: LD_VAR 0 16
14508: PUSH
14509: LD_INT 1
14511: ARRAY
14512: PPUSH
14513: LD_VAR 0 16
14517: PUSH
14518: LD_INT 2
14520: ARRAY
14521: PPUSH
14522: CALL_OW 111
// continue ;
14526: GO 14018
// end ; end ; r := GetDir ( tmp ) ;
14528: LD_ADDR_VAR 0 15
14532: PUSH
14533: LD_VAR 0 13
14537: PPUSH
14538: CALL_OW 254
14542: ST_TO_ADDR
// if r = 5 then
14543: LD_VAR 0 15
14547: PUSH
14548: LD_INT 5
14550: EQUAL
14551: IFFALSE 14561
// r := 0 ;
14553: LD_ADDR_VAR 0 15
14557: PUSH
14558: LD_INT 0
14560: ST_TO_ADDR
// for j = r to 5 do
14561: LD_ADDR_VAR 0 10
14565: PUSH
14566: DOUBLE
14567: LD_VAR 0 15
14571: DEC
14572: ST_TO_ADDR
14573: LD_INT 5
14575: PUSH
14576: FOR_TO
14577: IFFALSE 14691
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14579: LD_ADDR_VAR 0 11
14583: PUSH
14584: LD_VAR 0 13
14588: PPUSH
14589: CALL_OW 250
14593: PPUSH
14594: LD_VAR 0 10
14598: PPUSH
14599: LD_INT 2
14601: PPUSH
14602: CALL_OW 272
14606: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14607: LD_ADDR_VAR 0 12
14611: PUSH
14612: LD_VAR 0 13
14616: PPUSH
14617: CALL_OW 251
14621: PPUSH
14622: LD_VAR 0 10
14626: PPUSH
14627: LD_INT 2
14629: PPUSH
14630: CALL_OW 273
14634: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14635: LD_VAR 0 11
14639: PPUSH
14640: LD_VAR 0 12
14644: PPUSH
14645: CALL_OW 488
14649: PUSH
14650: LD_VAR 0 11
14654: PPUSH
14655: LD_VAR 0 12
14659: PPUSH
14660: CALL_OW 428
14664: NOT
14665: AND
14666: IFFALSE 14689
// begin ComMoveXY ( tmp , _x , _y ) ;
14668: LD_VAR 0 13
14672: PPUSH
14673: LD_VAR 0 11
14677: PPUSH
14678: LD_VAR 0 12
14682: PPUSH
14683: CALL_OW 111
// break ;
14687: GO 14691
// end ; end ;
14689: GO 14576
14691: POP
14692: POP
// end ; end ;
14693: GO 14018
14695: POP
14696: POP
// end ;
14697: LD_VAR 0 8
14701: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14702: LD_INT 0
14704: PPUSH
// result := true ;
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_INT 1
14712: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14713: LD_VAR 0 2
14717: PUSH
14718: LD_INT 24
14720: DOUBLE
14721: EQUAL
14722: IFTRUE 14732
14724: LD_INT 33
14726: DOUBLE
14727: EQUAL
14728: IFTRUE 14732
14730: GO 14757
14732: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14733: LD_ADDR_VAR 0 3
14737: PUSH
14738: LD_INT 32
14740: PPUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 321
14750: PUSH
14751: LD_INT 2
14753: EQUAL
14754: ST_TO_ADDR
14755: GO 15073
14757: LD_INT 20
14759: DOUBLE
14760: EQUAL
14761: IFTRUE 14765
14763: GO 14790
14765: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14766: LD_ADDR_VAR 0 3
14770: PUSH
14771: LD_INT 6
14773: PPUSH
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 321
14783: PUSH
14784: LD_INT 2
14786: EQUAL
14787: ST_TO_ADDR
14788: GO 15073
14790: LD_INT 22
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14804
14796: LD_INT 36
14798: DOUBLE
14799: EQUAL
14800: IFTRUE 14804
14802: GO 14829
14804: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: LD_INT 15
14812: PPUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 321
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: ST_TO_ADDR
14827: GO 15073
14829: LD_INT 30
14831: DOUBLE
14832: EQUAL
14833: IFTRUE 14837
14835: GO 14862
14837: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14838: LD_ADDR_VAR 0 3
14842: PUSH
14843: LD_INT 20
14845: PPUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 321
14855: PUSH
14856: LD_INT 2
14858: EQUAL
14859: ST_TO_ADDR
14860: GO 15073
14862: LD_INT 28
14864: DOUBLE
14865: EQUAL
14866: IFTRUE 14876
14868: LD_INT 21
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 14901
14876: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_INT 21
14884: PPUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 321
14894: PUSH
14895: LD_INT 2
14897: EQUAL
14898: ST_TO_ADDR
14899: GO 15073
14901: LD_INT 16
14903: DOUBLE
14904: EQUAL
14905: IFTRUE 14909
14907: GO 14934
14909: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14910: LD_ADDR_VAR 0 3
14914: PUSH
14915: LD_INT 84
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 321
14927: PUSH
14928: LD_INT 2
14930: EQUAL
14931: ST_TO_ADDR
14932: GO 15073
14934: LD_INT 19
14936: DOUBLE
14937: EQUAL
14938: IFTRUE 14948
14940: LD_INT 23
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 14973
14948: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 83
14956: PPUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 321
14966: PUSH
14967: LD_INT 2
14969: EQUAL
14970: ST_TO_ADDR
14971: GO 15073
14973: LD_INT 17
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15006
14981: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_INT 39
14989: PPUSH
14990: LD_VAR 0 1
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: ST_TO_ADDR
15004: GO 15073
15006: LD_INT 18
15008: DOUBLE
15009: EQUAL
15010: IFTRUE 15014
15012: GO 15039
15014: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: LD_INT 40
15022: PPUSH
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 321
15032: PUSH
15033: LD_INT 2
15035: EQUAL
15036: ST_TO_ADDR
15037: GO 15073
15039: LD_INT 27
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15072
15047: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15048: LD_ADDR_VAR 0 3
15052: PUSH
15053: LD_INT 35
15055: PPUSH
15056: LD_VAR 0 1
15060: PPUSH
15061: CALL_OW 321
15065: PUSH
15066: LD_INT 2
15068: EQUAL
15069: ST_TO_ADDR
15070: GO 15073
15072: POP
// end ;
15073: LD_VAR 0 3
15077: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15078: LD_INT 0
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
// result := false ;
15091: LD_ADDR_VAR 0 6
15095: PUSH
15096: LD_INT 0
15098: ST_TO_ADDR
// if btype = b_depot then
15099: LD_VAR 0 2
15103: PUSH
15104: LD_INT 0
15106: EQUAL
15107: IFFALSE 15119
// begin result := true ;
15109: LD_ADDR_VAR 0 6
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// exit ;
15117: GO 15945
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15119: LD_VAR 0 1
15123: NOT
15124: PUSH
15125: LD_VAR 0 1
15129: PPUSH
15130: CALL_OW 266
15134: PUSH
15135: LD_INT 0
15137: PUSH
15138: LD_INT 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: IN
15145: NOT
15146: OR
15147: PUSH
15148: LD_VAR 0 2
15152: NOT
15153: OR
15154: PUSH
15155: LD_VAR 0 5
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: LD_INT 3
15171: PUSH
15172: LD_INT 4
15174: PUSH
15175: LD_INT 5
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: IN
15186: NOT
15187: OR
15188: PUSH
15189: LD_VAR 0 3
15193: PPUSH
15194: LD_VAR 0 4
15198: PPUSH
15199: CALL_OW 488
15203: NOT
15204: OR
15205: IFFALSE 15209
// exit ;
15207: GO 15945
// side := GetSide ( depot ) ;
15209: LD_ADDR_VAR 0 9
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 255
15223: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15224: LD_VAR 0 9
15228: PPUSH
15229: LD_VAR 0 2
15233: PPUSH
15234: CALL 14702 0 2
15238: NOT
15239: IFFALSE 15243
// exit ;
15241: GO 15945
// pom := GetBase ( depot ) ;
15243: LD_ADDR_VAR 0 10
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 274
15257: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15258: LD_ADDR_VAR 0 11
15262: PUSH
15263: LD_VAR 0 2
15267: PPUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 248
15277: PPUSH
15278: CALL_OW 450
15282: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15283: LD_VAR 0 10
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 275
15295: PUSH
15296: LD_VAR 0 11
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: GREATEREQUAL
15305: PUSH
15306: LD_VAR 0 10
15310: PPUSH
15311: LD_INT 2
15313: PPUSH
15314: CALL_OW 275
15318: PUSH
15319: LD_VAR 0 11
15323: PUSH
15324: LD_INT 2
15326: ARRAY
15327: GREATEREQUAL
15328: AND
15329: PUSH
15330: LD_VAR 0 10
15334: PPUSH
15335: LD_INT 3
15337: PPUSH
15338: CALL_OW 275
15342: PUSH
15343: LD_VAR 0 11
15347: PUSH
15348: LD_INT 3
15350: ARRAY
15351: GREATEREQUAL
15352: AND
15353: NOT
15354: IFFALSE 15358
// exit ;
15356: GO 15945
// if GetBType ( depot ) = b_depot then
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 266
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: IFFALSE 15383
// dist := 28 else
15373: LD_ADDR_VAR 0 14
15377: PUSH
15378: LD_INT 28
15380: ST_TO_ADDR
15381: GO 15391
// dist := 36 ;
15383: LD_ADDR_VAR 0 14
15387: PUSH
15388: LD_INT 36
15390: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15391: LD_VAR 0 1
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_VAR 0 4
15405: PPUSH
15406: CALL_OW 297
15410: PUSH
15411: LD_VAR 0 14
15415: GREATER
15416: IFFALSE 15420
// exit ;
15418: GO 15945
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15420: LD_ADDR_VAR 0 12
15424: PUSH
15425: LD_VAR 0 2
15429: PPUSH
15430: LD_VAR 0 3
15434: PPUSH
15435: LD_VAR 0 4
15439: PPUSH
15440: LD_VAR 0 5
15444: PPUSH
15445: LD_VAR 0 1
15449: PPUSH
15450: CALL_OW 248
15454: PPUSH
15455: LD_INT 0
15457: PPUSH
15458: CALL 15950 0 6
15462: ST_TO_ADDR
// if not hexes then
15463: LD_VAR 0 12
15467: NOT
15468: IFFALSE 15472
// exit ;
15470: GO 15945
// hex := GetHexInfo ( x , y ) ;
15472: LD_ADDR_VAR 0 15
15476: PUSH
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_VAR 0 4
15486: PPUSH
15487: CALL_OW 546
15491: ST_TO_ADDR
// if hex [ 1 ] then
15492: LD_VAR 0 15
15496: PUSH
15497: LD_INT 1
15499: ARRAY
15500: IFFALSE 15504
// exit ;
15502: GO 15945
// height := hex [ 2 ] ;
15504: LD_ADDR_VAR 0 13
15508: PUSH
15509: LD_VAR 0 15
15513: PUSH
15514: LD_INT 2
15516: ARRAY
15517: ST_TO_ADDR
// for i = 1 to hexes do
15518: LD_ADDR_VAR 0 7
15522: PUSH
15523: DOUBLE
15524: LD_INT 1
15526: DEC
15527: ST_TO_ADDR
15528: LD_VAR 0 12
15532: PUSH
15533: FOR_TO
15534: IFFALSE 15864
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15536: LD_VAR 0 12
15540: PUSH
15541: LD_VAR 0 7
15545: ARRAY
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: LD_VAR 0 12
15555: PUSH
15556: LD_VAR 0 7
15560: ARRAY
15561: PUSH
15562: LD_INT 2
15564: ARRAY
15565: PPUSH
15566: CALL_OW 488
15570: NOT
15571: PUSH
15572: LD_VAR 0 12
15576: PUSH
15577: LD_VAR 0 7
15581: ARRAY
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: PPUSH
15587: LD_VAR 0 12
15591: PUSH
15592: LD_VAR 0 7
15596: ARRAY
15597: PUSH
15598: LD_INT 2
15600: ARRAY
15601: PPUSH
15602: CALL_OW 428
15606: PUSH
15607: LD_INT 0
15609: GREATER
15610: OR
15611: PUSH
15612: LD_VAR 0 12
15616: PUSH
15617: LD_VAR 0 7
15621: ARRAY
15622: PUSH
15623: LD_INT 1
15625: ARRAY
15626: PPUSH
15627: LD_VAR 0 12
15631: PUSH
15632: LD_VAR 0 7
15636: ARRAY
15637: PUSH
15638: LD_INT 2
15640: ARRAY
15641: PPUSH
15642: CALL_OW 351
15646: OR
15647: IFFALSE 15653
// exit ;
15649: POP
15650: POP
15651: GO 15945
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15653: LD_ADDR_VAR 0 8
15657: PUSH
15658: LD_VAR 0 12
15662: PUSH
15663: LD_VAR 0 7
15667: ARRAY
15668: PUSH
15669: LD_INT 1
15671: ARRAY
15672: PPUSH
15673: LD_VAR 0 12
15677: PUSH
15678: LD_VAR 0 7
15682: ARRAY
15683: PUSH
15684: LD_INT 2
15686: ARRAY
15687: PPUSH
15688: CALL_OW 546
15692: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15693: LD_VAR 0 8
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PUSH
15702: LD_VAR 0 8
15706: PUSH
15707: LD_INT 2
15709: ARRAY
15710: PUSH
15711: LD_VAR 0 13
15715: PUSH
15716: LD_INT 2
15718: PLUS
15719: GREATER
15720: OR
15721: PUSH
15722: LD_VAR 0 8
15726: PUSH
15727: LD_INT 2
15729: ARRAY
15730: PUSH
15731: LD_VAR 0 13
15735: PUSH
15736: LD_INT 2
15738: MINUS
15739: LESS
15740: OR
15741: PUSH
15742: LD_VAR 0 8
15746: PUSH
15747: LD_INT 3
15749: ARRAY
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: LD_INT 8
15756: PUSH
15757: LD_INT 9
15759: PUSH
15760: LD_INT 10
15762: PUSH
15763: LD_INT 11
15765: PUSH
15766: LD_INT 12
15768: PUSH
15769: LD_INT 13
15771: PUSH
15772: LD_INT 16
15774: PUSH
15775: LD_INT 17
15777: PUSH
15778: LD_INT 18
15780: PUSH
15781: LD_INT 19
15783: PUSH
15784: LD_INT 20
15786: PUSH
15787: LD_INT 21
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: IN
15805: NOT
15806: OR
15807: PUSH
15808: LD_VAR 0 8
15812: PUSH
15813: LD_INT 5
15815: ARRAY
15816: NOT
15817: OR
15818: PUSH
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 6
15826: ARRAY
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: LD_INT 2
15833: PUSH
15834: LD_INT 7
15836: PUSH
15837: LD_INT 9
15839: PUSH
15840: LD_INT 10
15842: PUSH
15843: LD_INT 11
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: IN
15854: NOT
15855: OR
15856: IFFALSE 15862
// exit ;
15858: POP
15859: POP
15860: GO 15945
// end ;
15862: GO 15533
15864: POP
15865: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15866: LD_VAR 0 9
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: LD_VAR 0 4
15880: PPUSH
15881: LD_INT 20
15883: PPUSH
15884: CALL 7868 0 4
15888: PUSH
15889: LD_INT 4
15891: ARRAY
15892: IFFALSE 15896
// exit ;
15894: GO 15945
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15896: LD_VAR 0 2
15900: PUSH
15901: LD_INT 29
15903: PUSH
15904: LD_INT 30
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: IN
15911: PUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_VAR 0 4
15921: PPUSH
15922: LD_VAR 0 9
15926: PPUSH
15927: CALL_OW 440
15931: NOT
15932: AND
15933: IFFALSE 15937
// exit ;
15935: GO 15945
// result := true ;
15937: LD_ADDR_VAR 0 6
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// end ;
15945: LD_VAR 0 6
15949: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15950: LD_INT 0
15952: PPUSH
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
15959: PPUSH
15960: PPUSH
15961: PPUSH
15962: PPUSH
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
15967: PPUSH
15968: PPUSH
15969: PPUSH
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
15985: PPUSH
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
15991: PPUSH
15992: PPUSH
15993: PPUSH
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
15998: PPUSH
15999: PPUSH
16000: PPUSH
16001: PPUSH
16002: PPUSH
16003: PPUSH
16004: PPUSH
16005: PPUSH
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
// result = [ ] ;
16010: LD_ADDR_VAR 0 7
16014: PUSH
16015: EMPTY
16016: ST_TO_ADDR
// temp_list = [ ] ;
16017: LD_ADDR_VAR 0 9
16021: PUSH
16022: EMPTY
16023: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16024: LD_VAR 0 4
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: LD_INT 3
16040: PUSH
16041: LD_INT 4
16043: PUSH
16044: LD_INT 5
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: IN
16055: NOT
16056: PUSH
16057: LD_VAR 0 1
16061: PUSH
16062: LD_INT 0
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: IN
16072: PUSH
16073: LD_VAR 0 5
16077: PUSH
16078: LD_INT 1
16080: PUSH
16081: LD_INT 2
16083: PUSH
16084: LD_INT 3
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: IN
16092: NOT
16093: AND
16094: OR
16095: IFFALSE 16099
// exit ;
16097: GO 34490
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16099: LD_VAR 0 1
16103: PUSH
16104: LD_INT 6
16106: PUSH
16107: LD_INT 7
16109: PUSH
16110: LD_INT 8
16112: PUSH
16113: LD_INT 13
16115: PUSH
16116: LD_INT 12
16118: PUSH
16119: LD_INT 15
16121: PUSH
16122: LD_INT 11
16124: PUSH
16125: LD_INT 14
16127: PUSH
16128: LD_INT 10
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: IN
16142: IFFALSE 16152
// btype = b_lab ;
16144: LD_ADDR_VAR 0 1
16148: PUSH
16149: LD_INT 6
16151: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16152: LD_VAR 0 6
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: IN
16171: NOT
16172: PUSH
16173: LD_VAR 0 1
16177: PUSH
16178: LD_INT 0
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: LD_INT 3
16189: PUSH
16190: LD_INT 6
16192: PUSH
16193: LD_INT 36
16195: PUSH
16196: LD_INT 4
16198: PUSH
16199: LD_INT 5
16201: PUSH
16202: LD_INT 31
16204: PUSH
16205: LD_INT 32
16207: PUSH
16208: LD_INT 33
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: IN
16224: NOT
16225: PUSH
16226: LD_VAR 0 6
16230: PUSH
16231: LD_INT 1
16233: EQUAL
16234: AND
16235: OR
16236: PUSH
16237: LD_VAR 0 1
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: IN
16252: NOT
16253: PUSH
16254: LD_VAR 0 6
16258: PUSH
16259: LD_INT 2
16261: EQUAL
16262: AND
16263: OR
16264: IFFALSE 16274
// mode = 0 ;
16266: LD_ADDR_VAR 0 6
16270: PUSH
16271: LD_INT 0
16273: ST_TO_ADDR
// case mode of 0 :
16274: LD_VAR 0 6
16278: PUSH
16279: LD_INT 0
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 27740
16287: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16288: LD_ADDR_VAR 0 11
16292: PUSH
16293: LD_INT 0
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 1
16346: NEG
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: LD_INT 1
16361: NEG
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 1
16369: NEG
16370: PUSH
16371: LD_INT 2
16373: NEG
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: LD_INT 2
16384: NEG
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: LD_INT 1
16395: NEG
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 2
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 1
16423: NEG
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 3
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: LD_INT 3
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: LD_INT 2
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16481: LD_ADDR_VAR 0 12
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: LD_INT 0
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 1
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: NEG
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 1
16550: NEG
16551: PUSH
16552: LD_INT 1
16554: NEG
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 2
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 2
16604: NEG
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 2
16615: NEG
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 2
16627: NEG
16628: PUSH
16629: LD_INT 1
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 3
16638: NEG
16639: PUSH
16640: LD_INT 0
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 3
16649: NEG
16650: PUSH
16651: LD_INT 1
16653: NEG
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16677: LD_ADDR_VAR 0 13
16681: PUSH
16682: LD_INT 0
16684: PUSH
16685: LD_INT 0
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 0
16694: PUSH
16695: LD_INT 1
16697: NEG
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 1
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 1
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 1
16735: NEG
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 1
16746: NEG
16747: PUSH
16748: LD_INT 1
16750: NEG
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 1
16758: NEG
16759: PUSH
16760: LD_INT 2
16762: NEG
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 2
16800: NEG
16801: PUSH
16802: LD_INT 1
16804: NEG
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 2
16812: NEG
16813: PUSH
16814: LD_INT 2
16816: NEG
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 2
16824: NEG
16825: PUSH
16826: LD_INT 3
16828: NEG
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 3
16836: NEG
16837: PUSH
16838: LD_INT 2
16840: NEG
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 3
16848: NEG
16849: PUSH
16850: LD_INT 3
16852: NEG
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16876: LD_ADDR_VAR 0 14
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: LD_INT 0
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 0
16893: PUSH
16894: LD_INT 1
16896: NEG
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: LD_INT 0
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 0
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: NEG
16935: PUSH
16936: LD_INT 0
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 1
16945: NEG
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: LD_INT 2
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 1
17011: NEG
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 1
17022: NEG
17023: PUSH
17024: LD_INT 3
17026: NEG
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 0
17034: PUSH
17035: LD_INT 3
17037: NEG
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: PUSH
17046: LD_INT 2
17048: NEG
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17072: LD_ADDR_VAR 0 15
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 0
17089: PUSH
17090: LD_INT 1
17092: NEG
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: NEG
17131: PUSH
17132: LD_INT 0
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 1
17141: NEG
17142: PUSH
17143: LD_INT 1
17145: NEG
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: LD_INT 1
17156: NEG
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 2
17195: NEG
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: NEG
17207: PUSH
17208: LD_INT 1
17210: NEG
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 2
17218: PUSH
17219: LD_INT 1
17221: NEG
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 3
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17265: LD_ADDR_VAR 0 16
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 0
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: NEG
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: NEG
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: LD_INT 2
17350: NEG
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: LD_INT 2
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 2
17388: NEG
17389: PUSH
17390: LD_INT 1
17392: NEG
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 2
17400: NEG
17401: PUSH
17402: LD_INT 2
17404: NEG
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: LD_INT 3
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17458: LD_ADDR_VAR 0 17
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 0
17475: PUSH
17476: LD_INT 1
17478: NEG
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: NEG
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: PUSH
17541: LD_INT 2
17543: NEG
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 2
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 1
17565: NEG
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: LD_INT 2
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: LD_INT 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 1
17623: NEG
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: LD_INT 0
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 2
17645: NEG
17646: PUSH
17647: LD_INT 1
17649: NEG
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: LD_INT 2
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17688: LD_ADDR_VAR 0 18
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 1
17708: NEG
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: NEG
17747: PUSH
17748: LD_INT 0
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: NEG
17770: PUSH
17771: LD_INT 2
17773: NEG
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: LD_INT 2
17784: NEG
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 1
17795: NEG
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 2
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 2
17864: NEG
17865: PUSH
17866: LD_INT 0
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 2
17875: NEG
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 2
17887: NEG
17888: PUSH
17889: LD_INT 2
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17918: LD_ADDR_VAR 0 19
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: LD_INT 1
17938: NEG
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: NEG
17977: PUSH
17978: LD_INT 0
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 2
18014: NEG
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: LD_INT 1
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 2
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 2
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: NEG
18095: PUSH
18096: LD_INT 0
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 2
18105: NEG
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: NEG
18118: PUSH
18119: LD_INT 2
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18148: LD_ADDR_VAR 0 20
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: LD_INT 0
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 0
18165: PUSH
18166: LD_INT 1
18168: NEG
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: LD_INT 0
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 1
18313: NEG
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: NEG
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 2
18335: NEG
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18378: LD_ADDR_VAR 0 21
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 1
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 2
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 2
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: NEG
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 2
18554: NEG
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 2
18565: NEG
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18608: LD_ADDR_VAR 0 22
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: NEG
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: LD_INT 1
18681: NEG
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 2
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: NEG
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: LD_INT 2
18811: NEG
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18838: LD_ADDR_VAR 0 23
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: NEG
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 2
19049: NEG
19050: PUSH
19051: LD_INT 3
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: LD_INT 3
19065: NEG
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 2
19076: NEG
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19118: LD_ADDR_VAR 0 24
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 0
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 0
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 1
19176: NEG
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 1
19187: NEG
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: NEG
19295: PUSH
19296: LD_INT 0
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: LD_INT 2
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: LD_INT 1
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: LD_INT 2
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19394: LD_ADDR_VAR 0 25
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: LD_INT 1
19414: NEG
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 1
19463: NEG
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: LD_INT 2
19479: NEG
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 2
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 2
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: LD_INT 2
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: NEG
19571: PUSH
19572: LD_INT 0
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: NEG
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: NEG
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 3
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 3
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: LD_INT 3
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19668: LD_ADDR_VAR 0 26
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: LD_INT 2
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 3
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 3
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 2
19910: NEG
19911: PUSH
19912: LD_INT 1
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19944: LD_ADDR_VAR 0 27
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 2
20069: PUSH
20070: LD_INT 1
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: NEG
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: NEG
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: LD_INT 2
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 3
20177: NEG
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 3
20189: NEG
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20224: LD_ADDR_VAR 0 28
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 1
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 1
20293: NEG
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: LD_INT 2
20309: NEG
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 2
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 2
20400: NEG
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: NEG
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: NEG
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: NEG
20436: PUSH
20437: LD_INT 3
20439: NEG
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: LD_INT 3
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 3
20459: NEG
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 3
20471: NEG
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20506: LD_ADDR_VAR 0 29
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: LD_INT 1
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: NEG
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 2
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 2
20672: NEG
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: NEG
20685: PUSH
20686: LD_INT 2
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: LD_INT 3
20700: NEG
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: LD_INT 3
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: NEG
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20785: LD_ADDR_VAR 0 30
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: LD_INT 3
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 2
20989: NEG
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 3
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 3
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21063: LD_ADDR_VAR 0 31
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: NEG
21241: PUSH
21242: LD_INT 2
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 2
21252: NEG
21253: PUSH
21254: LD_INT 3
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 3
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: LD_INT 3
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 3
21306: NEG
21307: PUSH
21308: LD_INT 2
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21341: LD_ADDR_VAR 0 32
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: LD_INT 1
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: LD_INT 2
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: LD_INT 3
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 3
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: LD_INT 3
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 2
21573: NEG
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 3
21584: NEG
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21619: LD_ADDR_VAR 0 33
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: NEG
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: NEG
21701: PUSH
21702: LD_INT 2
21704: NEG
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: NEG
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: NEG
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 2
21797: NEG
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: LD_INT 3
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: LD_INT 3
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 3
21863: NEG
21864: PUSH
21865: LD_INT 2
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21898: LD_ADDR_VAR 0 34
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 0
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 1
21956: NEG
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: LD_INT 2
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: LD_INT 2
21994: NEG
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: LD_INT 2
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: LD_INT 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 2
22065: NEG
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 2
22077: NEG
22078: PUSH
22079: LD_INT 2
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: LD_INT 3
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 3
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 3
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 3
22143: NEG
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22178: LD_ADDR_VAR 0 35
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: NEG
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: NEG
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22290: LD_ADDR_VAR 0 36
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: NEG
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22402: LD_ADDR_VAR 0 37
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22514: LD_ADDR_VAR 0 38
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22626: LD_ADDR_VAR 0 39
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22738: LD_ADDR_VAR 0 40
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: LD_INT 0
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22850: LD_ADDR_VAR 0 41
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: LD_INT 1
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: NEG
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 2
23005: NEG
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: NEG
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 2
23040: NEG
23041: PUSH
23042: LD_INT 3
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: LD_INT 0
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 2
23113: NEG
23114: PUSH
23115: LD_INT 1
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 3
23124: NEG
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 3
23135: NEG
23136: PUSH
23137: LD_INT 1
23139: NEG
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 3
23147: NEG
23148: PUSH
23149: LD_INT 2
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 3
23159: NEG
23160: PUSH
23161: LD_INT 3
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23200: LD_ADDR_VAR 0 42
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 0
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 1
23258: NEG
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: LD_INT 1
23273: NEG
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: LD_INT 2
23296: NEG
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 2
23366: NEG
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: NEG
23379: PUSH
23380: LD_INT 2
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: LD_INT 3
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 3
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: LD_INT 3
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 3
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 3
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 3
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: LD_INT 3
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 3
23497: NEG
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 3
23509: NEG
23510: PUSH
23511: LD_INT 3
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23550: LD_ADDR_VAR 0 43
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: NEG
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: NEG
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: LD_INT 3
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: LD_INT 3
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 3
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 3
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 3
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: NEG
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 3
23857: NEG
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23898: LD_ADDR_VAR 0 44
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: LD_INT 2
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 0
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 2
24053: NEG
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 2
24064: NEG
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: LD_INT 2
24080: NEG
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 3
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 3
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: NEG
24162: PUSH
24163: LD_INT 1
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 3
24172: NEG
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 3
24183: NEG
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 3
24195: NEG
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 3
24207: NEG
24208: PUSH
24209: LD_INT 3
24211: NEG
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24248: LD_ADDR_VAR 0 45
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 2
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: LD_INT 2
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 3
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: LD_INT 3
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 3
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 3
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 3
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 3
24545: NEG
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 3
24557: NEG
24558: PUSH
24559: LD_INT 3
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24598: LD_ADDR_VAR 0 46
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: LD_INT 0
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: LD_INT 2
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 2
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 3
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: LD_INT 3
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 3
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 3
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 3
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: NEG
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 3
24894: NEG
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 3
24905: NEG
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24946: LD_ADDR_VAR 0 47
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 2
25061: NEG
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: LD_INT 2
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25097: LD_ADDR_VAR 0 48
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: LD_INT 2
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25244: LD_ADDR_VAR 0 49
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 2
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25388: LD_ADDR_VAR 0 50
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: LD_INT 1
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 2
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25532: LD_ADDR_VAR 0 51
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25679: LD_ADDR_VAR 0 52
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25830: LD_ADDR_VAR 0 53
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 2
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 2
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 2
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 2
26017: NEG
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: LD_INT 2
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26060: LD_ADDR_VAR 0 54
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 2
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26290: LD_ADDR_VAR 0 55
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 2
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: NEG
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26520: LD_ADDR_VAR 0 56
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 2
26696: NEG
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 2
26707: NEG
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26750: LD_ADDR_VAR 0 57
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 2
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 2
26937: NEG
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 2
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26980: LD_ADDR_VAR 0 58
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27210: LD_ADDR_VAR 0 59
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27298: LD_ADDR_VAR 0 60
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27386: LD_ADDR_VAR 0 61
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27474: LD_ADDR_VAR 0 62
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27562: LD_ADDR_VAR 0 63
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27650: LD_ADDR_VAR 0 64
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// end ; 1 :
27738: GO 33635
27740: LD_INT 1
27742: DOUBLE
27743: EQUAL
27744: IFTRUE 27748
27746: GO 30371
27748: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27749: LD_ADDR_VAR 0 11
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: LD_INT 3
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 3
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27793: LD_ADDR_VAR 0 12
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27834: LD_ADDR_VAR 0 13
27838: PUSH
27839: LD_INT 3
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27874: LD_ADDR_VAR 0 14
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 3
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27915: LD_ADDR_VAR 0 15
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 3
27933: NEG
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 3
27944: NEG
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27959: LD_ADDR_VAR 0 16
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: LD_INT 3
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 3
27978: NEG
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 3
27990: NEG
27991: PUSH
27992: LD_INT 3
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28005: LD_ADDR_VAR 0 17
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 3
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: LD_INT 3
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28049: LD_ADDR_VAR 0 18
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28090: LD_ADDR_VAR 0 19
28094: PUSH
28095: LD_INT 3
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 3
28107: PUSH
28108: LD_INT 3
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 3
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28130: LD_ADDR_VAR 0 20
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 3
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28171: LD_ADDR_VAR 0 21
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28215: LD_ADDR_VAR 0 22
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: LD_INT 3
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 3
28234: NEG
28235: PUSH
28236: LD_INT 2
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 3
28246: NEG
28247: PUSH
28248: LD_INT 3
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28261: LD_ADDR_VAR 0 23
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 3
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 4
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 3
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28305: LD_ADDR_VAR 0 24
28309: PUSH
28310: LD_INT 3
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 3
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28346: LD_ADDR_VAR 0 25
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 4
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: LD_INT 4
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28386: LD_ADDR_VAR 0 26
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 3
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: LD_INT 4
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: LD_INT 3
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28427: LD_ADDR_VAR 0 27
28431: PUSH
28432: LD_INT 3
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 3
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 4
28456: NEG
28457: PUSH
28458: LD_INT 1
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28471: LD_ADDR_VAR 0 28
28475: PUSH
28476: LD_INT 3
28478: NEG
28479: PUSH
28480: LD_INT 3
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 3
28490: NEG
28491: PUSH
28492: LD_INT 4
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 4
28502: NEG
28503: PUSH
28504: LD_INT 3
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28517: LD_ADDR_VAR 0 29
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: LD_INT 3
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 2
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 4
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: LD_INT 4
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: LD_INT 3
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: LD_INT 5
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 5
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: LD_INT 4
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: LD_INT 6
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: LD_INT 6
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 5
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28672: LD_ADDR_VAR 0 30
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 3
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 3
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 4
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 4
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 5
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 5
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 5
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 6
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 6
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28815: LD_ADDR_VAR 0 31
28819: PUSH
28820: LD_INT 3
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 3
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 4
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 4
28862: PUSH
28863: LD_INT 4
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 3
28872: PUSH
28873: LD_INT 4
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 5
28882: PUSH
28883: LD_INT 4
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 5
28892: PUSH
28893: LD_INT 5
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 4
28902: PUSH
28903: LD_INT 5
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 6
28912: PUSH
28913: LD_INT 5
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 6
28922: PUSH
28923: LD_INT 6
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 5
28932: PUSH
28933: LD_INT 6
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28954: LD_ADDR_VAR 0 32
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 3
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 3
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 4
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 4
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: LD_INT 5
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 5
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: LD_INT 4
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 6
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: LD_INT 6
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: LD_INT 5
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29097: LD_ADDR_VAR 0 33
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 3
29115: NEG
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 4
29149: NEG
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 4
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 4
29172: NEG
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 5
29183: NEG
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 5
29194: NEG
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 5
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 6
29217: NEG
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 6
29228: NEG
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29252: LD_ADDR_VAR 0 34
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: LD_INT 3
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: NEG
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: NEG
29284: PUSH
29285: LD_INT 3
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: LD_INT 4
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 4
29307: NEG
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 4
29319: NEG
29320: PUSH
29321: LD_INT 4
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 4
29331: NEG
29332: PUSH
29333: LD_INT 5
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 5
29343: NEG
29344: PUSH
29345: LD_INT 4
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 5
29355: NEG
29356: PUSH
29357: LD_INT 5
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 5
29367: NEG
29368: PUSH
29369: LD_INT 6
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 6
29379: NEG
29380: PUSH
29381: LD_INT 5
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 6
29391: NEG
29392: PUSH
29393: LD_INT 6
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29415: LD_ADDR_VAR 0 41
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: NEG
29434: PUSH
29435: LD_INT 3
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29459: LD_ADDR_VAR 0 42
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 3
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29500: LD_ADDR_VAR 0 43
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29540: LD_ADDR_VAR 0 44
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29581: LD_ADDR_VAR 0 45
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29625: LD_ADDR_VAR 0 46
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29671: LD_ADDR_VAR 0 47
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: LD_INT 3
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 3
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29704: LD_ADDR_VAR 0 48
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 2
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29735: LD_ADDR_VAR 0 49
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29764: LD_ADDR_VAR 0 50
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: LD_INT 3
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29793: LD_ADDR_VAR 0 51
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29824: LD_ADDR_VAR 0 52
29828: PUSH
29829: LD_INT 3
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 3
29843: NEG
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29857: LD_ADDR_VAR 0 53
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: LD_INT 3
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29901: LD_ADDR_VAR 0 54
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29942: LD_ADDR_VAR 0 55
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 3
29959: PUSH
29960: LD_INT 3
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 3
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29982: LD_ADDR_VAR 0 56
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: LD_INT 3
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 3
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30023: LD_ADDR_VAR 0 57
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 3
30041: NEG
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 3
30052: NEG
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30067: LD_ADDR_VAR 0 58
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 3
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: LD_INT 3
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30113: LD_ADDR_VAR 0 59
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 2
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30157: LD_ADDR_VAR 0 60
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 2
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30198: LD_ADDR_VAR 0 61
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30238: LD_ADDR_VAR 0 62
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30279: LD_ADDR_VAR 0 63
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 2
30308: NEG
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30323: LD_ADDR_VAR 0 64
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: LD_INT 2
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: NEG
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: LD_INT 2
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: ST_TO_ADDR
// end ; 2 :
30369: GO 33635
30371: LD_INT 2
30373: DOUBLE
30374: EQUAL
30375: IFTRUE 30379
30377: GO 33634
30379: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30380: LD_ADDR_VAR 0 29
30384: PUSH
30385: LD_INT 4
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 5
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 5
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 4
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 4
30510: PUSH
30511: LD_INT 4
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 3
30520: PUSH
30521: LD_INT 4
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 4
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 4
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 4
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: LD_INT 4
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 1
30600: PUSH
30601: LD_INT 5
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: LD_INT 4
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 3
30674: NEG
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 2
30697: NEG
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 4
30719: NEG
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 4
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 4
30742: NEG
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 4
30765: NEG
30766: PUSH
30767: LD_INT 4
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 4
30777: NEG
30778: PUSH
30779: LD_INT 5
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: LD_INT 4
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: LD_INT 3
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 4
30813: NEG
30814: PUSH
30815: LD_INT 3
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 5
30825: NEG
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 5
30837: NEG
30838: PUSH
30839: LD_INT 5
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 3
30849: NEG
30850: PUSH
30851: LD_INT 5
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 5
30861: NEG
30862: PUSH
30863: LD_INT 3
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30918: LD_ADDR_VAR 0 30
30922: PUSH
30923: LD_INT 4
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 4
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: LD_INT 4
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 5
30955: PUSH
30956: LD_INT 5
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 4
30965: PUSH
30966: LD_INT 5
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: LD_INT 4
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 5
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 5
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: LD_INT 3
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 4
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 4
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 4
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 4
31108: NEG
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 4
31119: NEG
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 4
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 5
31164: NEG
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 5
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 5
31187: NEG
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 3
31199: NEG
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: LD_INT 3
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 3
31222: NEG
31223: PUSH
31224: LD_INT 4
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: LD_INT 3
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: LD_INT 2
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 4
31270: NEG
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 4
31282: NEG
31283: PUSH
31284: LD_INT 4
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: LD_INT 4
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 4
31306: NEG
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: LD_INT 4
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 5
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 4
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 4
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 5
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: LD_INT 5
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31465: LD_ADDR_VAR 0 31
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: LD_INT 4
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 4
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 5
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: LD_INT 5
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: LD_INT 5
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 3
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: NEG
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 4
31621: NEG
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 4
31644: NEG
31645: PUSH
31646: LD_INT 2
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 4
31667: NEG
31668: PUSH
31669: LD_INT 4
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 4
31679: NEG
31680: PUSH
31681: LD_INT 5
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 3
31691: NEG
31692: PUSH
31693: LD_INT 4
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 4
31715: NEG
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 5
31727: NEG
31728: PUSH
31729: LD_INT 4
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 5
31739: NEG
31740: PUSH
31741: LD_INT 5
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 3
31751: NEG
31752: PUSH
31753: LD_INT 5
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 5
31763: NEG
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: LD_INT 3
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 4
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 3
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 3
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: LD_INT 4
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: LD_INT 4
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 4
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 4
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 5
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 3
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 5
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32015: LD_ADDR_VAR 0 32
32019: PUSH
32020: LD_INT 4
32022: NEG
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 4
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 4
32067: NEG
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 5
32078: NEG
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 5
32089: NEG
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 5
32101: NEG
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: NEG
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 3
32136: NEG
32137: PUSH
32138: LD_INT 4
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 3
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 4
32184: NEG
32185: PUSH
32186: LD_INT 3
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 4
32196: NEG
32197: PUSH
32198: LD_INT 4
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: LD_INT 4
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 4
32220: NEG
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 4
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 5
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: LD_INT 4
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: LD_INT 4
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 5
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 3
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: LD_INT 5
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 3
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 4
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 4
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 3
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 4
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: LD_INT 4
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 5
32447: PUSH
32448: LD_INT 4
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 5
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 4
32467: PUSH
32468: LD_INT 5
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: LD_INT 4
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 5
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 3
32507: PUSH
32508: LD_INT 5
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32562: LD_ADDR_VAR 0 33
32566: PUSH
32567: LD_INT 4
32569: NEG
32570: PUSH
32571: LD_INT 4
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 4
32581: NEG
32582: PUSH
32583: LD_INT 5
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 3
32593: NEG
32594: PUSH
32595: LD_INT 4
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 3
32605: NEG
32606: PUSH
32607: LD_INT 3
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 4
32617: NEG
32618: PUSH
32619: LD_INT 3
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 5
32629: NEG
32630: PUSH
32631: LD_INT 4
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 5
32641: NEG
32642: PUSH
32643: LD_INT 5
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: LD_INT 5
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 5
32665: NEG
32666: PUSH
32667: LD_INT 3
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 3
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 4
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 3
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 2
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 3
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: LD_INT 4
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: LD_INT 4
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 5
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 4
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 4
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 4
32902: PUSH
32903: LD_INT 4
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 3
32912: PUSH
32913: LD_INT 4
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 4
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 4
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 5
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 5
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: NEG
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 3
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33100: LD_ADDR_VAR 0 34
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 4
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 5
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 4
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 3
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 4
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 5
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: LD_INT 5
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 4
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 2
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 4
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: PUSH
33313: LD_INT 3
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: LD_INT 4
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 5
33332: PUSH
33333: LD_INT 5
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 4
33342: PUSH
33343: LD_INT 5
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: LD_INT 4
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: LD_INT 3
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 5
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: LD_INT 3
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 4
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 4
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: LD_INT 4
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 4
33485: NEG
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 4
33530: NEG
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 5
33541: NEG
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 5
33552: NEG
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 5
33564: NEG
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 3
33576: NEG
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: ST_TO_ADDR
// end ; end ;
33632: GO 33635
33634: POP
// case btype of b_depot , b_warehouse :
33635: LD_VAR 0 1
33639: PUSH
33640: LD_INT 0
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33654
33646: LD_INT 1
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 33855
33654: POP
// case nation of nation_american :
33655: LD_VAR 0 5
33659: PUSH
33660: LD_INT 1
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33724
33668: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33669: LD_ADDR_VAR 0 9
33673: PUSH
33674: LD_VAR 0 11
33678: PUSH
33679: LD_VAR 0 12
33683: PUSH
33684: LD_VAR 0 13
33688: PUSH
33689: LD_VAR 0 14
33693: PUSH
33694: LD_VAR 0 15
33698: PUSH
33699: LD_VAR 0 16
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: PUSH
33712: LD_VAR 0 4
33716: PUSH
33717: LD_INT 1
33719: PLUS
33720: ARRAY
33721: ST_TO_ADDR
33722: GO 33853
33724: LD_INT 2
33726: DOUBLE
33727: EQUAL
33728: IFTRUE 33732
33730: GO 33788
33732: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33733: LD_ADDR_VAR 0 9
33737: PUSH
33738: LD_VAR 0 17
33742: PUSH
33743: LD_VAR 0 18
33747: PUSH
33748: LD_VAR 0 19
33752: PUSH
33753: LD_VAR 0 20
33757: PUSH
33758: LD_VAR 0 21
33762: PUSH
33763: LD_VAR 0 22
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: PUSH
33776: LD_VAR 0 4
33780: PUSH
33781: LD_INT 1
33783: PLUS
33784: ARRAY
33785: ST_TO_ADDR
33786: GO 33853
33788: LD_INT 3
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33796
33794: GO 33852
33796: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33797: LD_ADDR_VAR 0 9
33801: PUSH
33802: LD_VAR 0 23
33806: PUSH
33807: LD_VAR 0 24
33811: PUSH
33812: LD_VAR 0 25
33816: PUSH
33817: LD_VAR 0 26
33821: PUSH
33822: LD_VAR 0 27
33826: PUSH
33827: LD_VAR 0 28
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: PUSH
33840: LD_VAR 0 4
33844: PUSH
33845: LD_INT 1
33847: PLUS
33848: ARRAY
33849: ST_TO_ADDR
33850: GO 33853
33852: POP
33853: GO 34408
33855: LD_INT 2
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33869
33861: LD_INT 3
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33869
33867: GO 33925
33869: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33870: LD_ADDR_VAR 0 9
33874: PUSH
33875: LD_VAR 0 29
33879: PUSH
33880: LD_VAR 0 30
33884: PUSH
33885: LD_VAR 0 31
33889: PUSH
33890: LD_VAR 0 32
33894: PUSH
33895: LD_VAR 0 33
33899: PUSH
33900: LD_VAR 0 34
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: PUSH
33913: LD_VAR 0 4
33917: PUSH
33918: LD_INT 1
33920: PLUS
33921: ARRAY
33922: ST_TO_ADDR
33923: GO 34408
33925: LD_INT 16
33927: DOUBLE
33928: EQUAL
33929: IFTRUE 33987
33931: LD_INT 17
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33987
33937: LD_INT 18
33939: DOUBLE
33940: EQUAL
33941: IFTRUE 33987
33943: LD_INT 19
33945: DOUBLE
33946: EQUAL
33947: IFTRUE 33987
33949: LD_INT 22
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33987
33955: LD_INT 20
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33987
33961: LD_INT 21
33963: DOUBLE
33964: EQUAL
33965: IFTRUE 33987
33967: LD_INT 23
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33987
33973: LD_INT 24
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33987
33979: LD_INT 25
33981: DOUBLE
33982: EQUAL
33983: IFTRUE 33987
33985: GO 34043
33987: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33988: LD_ADDR_VAR 0 9
33992: PUSH
33993: LD_VAR 0 35
33997: PUSH
33998: LD_VAR 0 36
34002: PUSH
34003: LD_VAR 0 37
34007: PUSH
34008: LD_VAR 0 38
34012: PUSH
34013: LD_VAR 0 39
34017: PUSH
34018: LD_VAR 0 40
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: PUSH
34031: LD_VAR 0 4
34035: PUSH
34036: LD_INT 1
34038: PLUS
34039: ARRAY
34040: ST_TO_ADDR
34041: GO 34408
34043: LD_INT 6
34045: DOUBLE
34046: EQUAL
34047: IFTRUE 34099
34049: LD_INT 7
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34099
34055: LD_INT 8
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34099
34061: LD_INT 13
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34099
34067: LD_INT 12
34069: DOUBLE
34070: EQUAL
34071: IFTRUE 34099
34073: LD_INT 15
34075: DOUBLE
34076: EQUAL
34077: IFTRUE 34099
34079: LD_INT 11
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34099
34085: LD_INT 14
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34099
34091: LD_INT 10
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34155
34099: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34100: LD_ADDR_VAR 0 9
34104: PUSH
34105: LD_VAR 0 41
34109: PUSH
34110: LD_VAR 0 42
34114: PUSH
34115: LD_VAR 0 43
34119: PUSH
34120: LD_VAR 0 44
34124: PUSH
34125: LD_VAR 0 45
34129: PUSH
34130: LD_VAR 0 46
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: PUSH
34143: LD_VAR 0 4
34147: PUSH
34148: LD_INT 1
34150: PLUS
34151: ARRAY
34152: ST_TO_ADDR
34153: GO 34408
34155: LD_INT 36
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34219
34163: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34164: LD_ADDR_VAR 0 9
34168: PUSH
34169: LD_VAR 0 47
34173: PUSH
34174: LD_VAR 0 48
34178: PUSH
34179: LD_VAR 0 49
34183: PUSH
34184: LD_VAR 0 50
34188: PUSH
34189: LD_VAR 0 51
34193: PUSH
34194: LD_VAR 0 52
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: PUSH
34207: LD_VAR 0 4
34211: PUSH
34212: LD_INT 1
34214: PLUS
34215: ARRAY
34216: ST_TO_ADDR
34217: GO 34408
34219: LD_INT 4
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34245
34225: LD_INT 5
34227: DOUBLE
34228: EQUAL
34229: IFTRUE 34245
34231: LD_INT 34
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34245
34237: LD_INT 37
34239: DOUBLE
34240: EQUAL
34241: IFTRUE 34245
34243: GO 34301
34245: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: LD_VAR 0 53
34255: PUSH
34256: LD_VAR 0 54
34260: PUSH
34261: LD_VAR 0 55
34265: PUSH
34266: LD_VAR 0 56
34270: PUSH
34271: LD_VAR 0 57
34275: PUSH
34276: LD_VAR 0 58
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: PUSH
34289: LD_VAR 0 4
34293: PUSH
34294: LD_INT 1
34296: PLUS
34297: ARRAY
34298: ST_TO_ADDR
34299: GO 34408
34301: LD_INT 31
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34351
34307: LD_INT 32
34309: DOUBLE
34310: EQUAL
34311: IFTRUE 34351
34313: LD_INT 33
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34351
34319: LD_INT 27
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34351
34325: LD_INT 26
34327: DOUBLE
34328: EQUAL
34329: IFTRUE 34351
34331: LD_INT 28
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34351
34337: LD_INT 29
34339: DOUBLE
34340: EQUAL
34341: IFTRUE 34351
34343: LD_INT 30
34345: DOUBLE
34346: EQUAL
34347: IFTRUE 34351
34349: GO 34407
34351: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34352: LD_ADDR_VAR 0 9
34356: PUSH
34357: LD_VAR 0 59
34361: PUSH
34362: LD_VAR 0 60
34366: PUSH
34367: LD_VAR 0 61
34371: PUSH
34372: LD_VAR 0 62
34376: PUSH
34377: LD_VAR 0 63
34381: PUSH
34382: LD_VAR 0 64
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: PUSH
34395: LD_VAR 0 4
34399: PUSH
34400: LD_INT 1
34402: PLUS
34403: ARRAY
34404: ST_TO_ADDR
34405: GO 34408
34407: POP
// temp_list2 = [ ] ;
34408: LD_ADDR_VAR 0 10
34412: PUSH
34413: EMPTY
34414: ST_TO_ADDR
// for i in temp_list do
34415: LD_ADDR_VAR 0 8
34419: PUSH
34420: LD_VAR 0 9
34424: PUSH
34425: FOR_IN
34426: IFFALSE 34478
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34428: LD_ADDR_VAR 0 10
34432: PUSH
34433: LD_VAR 0 10
34437: PUSH
34438: LD_VAR 0 8
34442: PUSH
34443: LD_INT 1
34445: ARRAY
34446: PUSH
34447: LD_VAR 0 2
34451: PLUS
34452: PUSH
34453: LD_VAR 0 8
34457: PUSH
34458: LD_INT 2
34460: ARRAY
34461: PUSH
34462: LD_VAR 0 3
34466: PLUS
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: EMPTY
34473: LIST
34474: ADD
34475: ST_TO_ADDR
34476: GO 34425
34478: POP
34479: POP
// result = temp_list2 ;
34480: LD_ADDR_VAR 0 7
34484: PUSH
34485: LD_VAR 0 10
34489: ST_TO_ADDR
// end ;
34490: LD_VAR 0 7
34494: RET
// export function EnemyInRange ( unit , dist ) ; begin
34495: LD_INT 0
34497: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 255
34512: PPUSH
34513: LD_VAR 0 1
34517: PPUSH
34518: CALL_OW 250
34522: PPUSH
34523: LD_VAR 0 1
34527: PPUSH
34528: CALL_OW 251
34532: PPUSH
34533: LD_VAR 0 2
34537: PPUSH
34538: CALL 7868 0 4
34542: PUSH
34543: LD_INT 4
34545: ARRAY
34546: ST_TO_ADDR
// end ;
34547: LD_VAR 0 3
34551: RET
// export function PlayerSeeMe ( unit ) ; begin
34552: LD_INT 0
34554: PPUSH
// result := See ( your_side , unit ) ;
34555: LD_ADDR_VAR 0 2
34559: PUSH
34560: LD_OWVAR 2
34564: PPUSH
34565: LD_VAR 0 1
34569: PPUSH
34570: CALL_OW 292
34574: ST_TO_ADDR
// end ;
34575: LD_VAR 0 2
34579: RET
// export function ReverseDir ( unit ) ; begin
34580: LD_INT 0
34582: PPUSH
// if not unit then
34583: LD_VAR 0 1
34587: NOT
34588: IFFALSE 34592
// exit ;
34590: GO 34615
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34592: LD_ADDR_VAR 0 2
34596: PUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 254
34606: PUSH
34607: LD_INT 3
34609: PLUS
34610: PUSH
34611: LD_INT 6
34613: MOD
34614: ST_TO_ADDR
// end ;
34615: LD_VAR 0 2
34619: RET
// export function ReverseArray ( array ) ; var i ; begin
34620: LD_INT 0
34622: PPUSH
34623: PPUSH
// if not array then
34624: LD_VAR 0 1
34628: NOT
34629: IFFALSE 34633
// exit ;
34631: GO 34688
// result := [ ] ;
34633: LD_ADDR_VAR 0 2
34637: PUSH
34638: EMPTY
34639: ST_TO_ADDR
// for i := array downto 1 do
34640: LD_ADDR_VAR 0 3
34644: PUSH
34645: DOUBLE
34646: LD_VAR 0 1
34650: INC
34651: ST_TO_ADDR
34652: LD_INT 1
34654: PUSH
34655: FOR_DOWNTO
34656: IFFALSE 34686
// result := Join ( result , array [ i ] ) ;
34658: LD_ADDR_VAR 0 2
34662: PUSH
34663: LD_VAR 0 2
34667: PPUSH
34668: LD_VAR 0 1
34672: PUSH
34673: LD_VAR 0 3
34677: ARRAY
34678: PPUSH
34679: CALL 39353 0 2
34683: ST_TO_ADDR
34684: GO 34655
34686: POP
34687: POP
// end ;
34688: LD_VAR 0 2
34692: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34693: LD_INT 0
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
// if not unit or not hexes then
34701: LD_VAR 0 1
34705: NOT
34706: PUSH
34707: LD_VAR 0 2
34711: NOT
34712: OR
34713: IFFALSE 34717
// exit ;
34715: GO 34840
// dist := 9999 ;
34717: LD_ADDR_VAR 0 5
34721: PUSH
34722: LD_INT 9999
34724: ST_TO_ADDR
// for i = 1 to hexes do
34725: LD_ADDR_VAR 0 4
34729: PUSH
34730: DOUBLE
34731: LD_INT 1
34733: DEC
34734: ST_TO_ADDR
34735: LD_VAR 0 2
34739: PUSH
34740: FOR_TO
34741: IFFALSE 34828
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34743: LD_ADDR_VAR 0 6
34747: PUSH
34748: LD_VAR 0 1
34752: PPUSH
34753: LD_VAR 0 2
34757: PUSH
34758: LD_VAR 0 4
34762: ARRAY
34763: PUSH
34764: LD_INT 1
34766: ARRAY
34767: PPUSH
34768: LD_VAR 0 2
34772: PUSH
34773: LD_VAR 0 4
34777: ARRAY
34778: PUSH
34779: LD_INT 2
34781: ARRAY
34782: PPUSH
34783: CALL_OW 297
34787: ST_TO_ADDR
// if tdist < dist then
34788: LD_VAR 0 6
34792: PUSH
34793: LD_VAR 0 5
34797: LESS
34798: IFFALSE 34826
// begin hex := hexes [ i ] ;
34800: LD_ADDR_VAR 0 8
34804: PUSH
34805: LD_VAR 0 2
34809: PUSH
34810: LD_VAR 0 4
34814: ARRAY
34815: ST_TO_ADDR
// dist := tdist ;
34816: LD_ADDR_VAR 0 5
34820: PUSH
34821: LD_VAR 0 6
34825: ST_TO_ADDR
// end ; end ;
34826: GO 34740
34828: POP
34829: POP
// result := hex ;
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_VAR 0 8
34839: ST_TO_ADDR
// end ;
34840: LD_VAR 0 3
34844: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34845: LD_INT 0
34847: PPUSH
34848: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34849: LD_VAR 0 1
34853: NOT
34854: PUSH
34855: LD_VAR 0 1
34859: PUSH
34860: LD_INT 21
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 23
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PPUSH
34884: CALL_OW 69
34888: IN
34889: NOT
34890: OR
34891: IFFALSE 34895
// exit ;
34893: GO 34942
// for i = 1 to 3 do
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: DOUBLE
34901: LD_INT 1
34903: DEC
34904: ST_TO_ADDR
34905: LD_INT 3
34907: PUSH
34908: FOR_TO
34909: IFFALSE 34940
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 250
34920: PPUSH
34921: LD_VAR 0 1
34925: PPUSH
34926: CALL_OW 251
34930: PPUSH
34931: LD_INT 1
34933: PPUSH
34934: CALL_OW 453
34938: GO 34908
34940: POP
34941: POP
// end ;
34942: LD_VAR 0 2
34946: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
// if not unit or not enemy_unit then
34955: LD_VAR 0 1
34959: NOT
34960: PUSH
34961: LD_VAR 0 2
34965: NOT
34966: OR
34967: IFFALSE 34971
// exit ;
34969: GO 35438
// if GetLives ( i ) < 250 then
34971: LD_VAR 0 4
34975: PPUSH
34976: CALL_OW 256
34980: PUSH
34981: LD_INT 250
34983: LESS
34984: IFFALSE 34997
// begin ComAutodestruct ( i ) ;
34986: LD_VAR 0 4
34990: PPUSH
34991: CALL 34845 0 1
// exit ;
34995: GO 35438
// end ; x := GetX ( enemy_unit ) ;
34997: LD_ADDR_VAR 0 7
35001: PUSH
35002: LD_VAR 0 2
35006: PPUSH
35007: CALL_OW 250
35011: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35012: LD_ADDR_VAR 0 8
35016: PUSH
35017: LD_VAR 0 2
35021: PPUSH
35022: CALL_OW 251
35026: ST_TO_ADDR
// if not x or not y then
35027: LD_VAR 0 7
35031: NOT
35032: PUSH
35033: LD_VAR 0 8
35037: NOT
35038: OR
35039: IFFALSE 35043
// exit ;
35041: GO 35438
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35043: LD_ADDR_VAR 0 6
35047: PUSH
35048: LD_VAR 0 7
35052: PPUSH
35053: LD_INT 0
35055: PPUSH
35056: LD_INT 4
35058: PPUSH
35059: CALL_OW 272
35063: PUSH
35064: LD_VAR 0 8
35068: PPUSH
35069: LD_INT 0
35071: PPUSH
35072: LD_INT 4
35074: PPUSH
35075: CALL_OW 273
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_VAR 0 7
35088: PPUSH
35089: LD_INT 1
35091: PPUSH
35092: LD_INT 4
35094: PPUSH
35095: CALL_OW 272
35099: PUSH
35100: LD_VAR 0 8
35104: PPUSH
35105: LD_INT 1
35107: PPUSH
35108: LD_INT 4
35110: PPUSH
35111: CALL_OW 273
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_VAR 0 7
35124: PPUSH
35125: LD_INT 2
35127: PPUSH
35128: LD_INT 4
35130: PPUSH
35131: CALL_OW 272
35135: PUSH
35136: LD_VAR 0 8
35140: PPUSH
35141: LD_INT 2
35143: PPUSH
35144: LD_INT 4
35146: PPUSH
35147: CALL_OW 273
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_VAR 0 7
35160: PPUSH
35161: LD_INT 3
35163: PPUSH
35164: LD_INT 4
35166: PPUSH
35167: CALL_OW 272
35171: PUSH
35172: LD_VAR 0 8
35176: PPUSH
35177: LD_INT 3
35179: PPUSH
35180: LD_INT 4
35182: PPUSH
35183: CALL_OW 273
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_VAR 0 7
35196: PPUSH
35197: LD_INT 4
35199: PPUSH
35200: LD_INT 4
35202: PPUSH
35203: CALL_OW 272
35207: PUSH
35208: LD_VAR 0 8
35212: PPUSH
35213: LD_INT 4
35215: PPUSH
35216: LD_INT 4
35218: PPUSH
35219: CALL_OW 273
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_VAR 0 7
35232: PPUSH
35233: LD_INT 5
35235: PPUSH
35236: LD_INT 4
35238: PPUSH
35239: CALL_OW 272
35243: PUSH
35244: LD_VAR 0 8
35248: PPUSH
35249: LD_INT 5
35251: PPUSH
35252: LD_INT 4
35254: PPUSH
35255: CALL_OW 273
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
// for i = tmp downto 1 do
35272: LD_ADDR_VAR 0 4
35276: PUSH
35277: DOUBLE
35278: LD_VAR 0 6
35282: INC
35283: ST_TO_ADDR
35284: LD_INT 1
35286: PUSH
35287: FOR_DOWNTO
35288: IFFALSE 35389
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35290: LD_VAR 0 6
35294: PUSH
35295: LD_VAR 0 4
35299: ARRAY
35300: PUSH
35301: LD_INT 1
35303: ARRAY
35304: PPUSH
35305: LD_VAR 0 6
35309: PUSH
35310: LD_VAR 0 4
35314: ARRAY
35315: PUSH
35316: LD_INT 2
35318: ARRAY
35319: PPUSH
35320: CALL_OW 488
35324: NOT
35325: PUSH
35326: LD_VAR 0 6
35330: PUSH
35331: LD_VAR 0 4
35335: ARRAY
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PPUSH
35341: LD_VAR 0 6
35345: PUSH
35346: LD_VAR 0 4
35350: ARRAY
35351: PUSH
35352: LD_INT 2
35354: ARRAY
35355: PPUSH
35356: CALL_OW 428
35360: PUSH
35361: LD_INT 0
35363: NONEQUAL
35364: OR
35365: IFFALSE 35387
// tmp := Delete ( tmp , i ) ;
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 6
35376: PPUSH
35377: LD_VAR 0 4
35381: PPUSH
35382: CALL_OW 3
35386: ST_TO_ADDR
35387: GO 35287
35389: POP
35390: POP
// j := GetClosestHex ( unit , tmp ) ;
35391: LD_ADDR_VAR 0 5
35395: PUSH
35396: LD_VAR 0 1
35400: PPUSH
35401: LD_VAR 0 6
35405: PPUSH
35406: CALL 34693 0 2
35410: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35411: LD_VAR 0 1
35415: PPUSH
35416: LD_VAR 0 5
35420: PUSH
35421: LD_INT 1
35423: ARRAY
35424: PPUSH
35425: LD_VAR 0 5
35429: PUSH
35430: LD_INT 2
35432: ARRAY
35433: PPUSH
35434: CALL_OW 111
// end ;
35438: LD_VAR 0 3
35442: RET
// export function PrepareApemanSoldier ( ) ; begin
35443: LD_INT 0
35445: PPUSH
// uc_nation := 0 ;
35446: LD_ADDR_OWVAR 21
35450: PUSH
35451: LD_INT 0
35453: ST_TO_ADDR
// hc_sex := sex_male ;
35454: LD_ADDR_OWVAR 27
35458: PUSH
35459: LD_INT 1
35461: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35462: LD_ADDR_OWVAR 28
35466: PUSH
35467: LD_INT 15
35469: ST_TO_ADDR
// hc_gallery :=  ;
35470: LD_ADDR_OWVAR 33
35474: PUSH
35475: LD_STRING 
35477: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35478: LD_ADDR_OWVAR 31
35482: PUSH
35483: LD_INT 0
35485: PPUSH
35486: LD_INT 3
35488: PPUSH
35489: CALL_OW 12
35493: PUSH
35494: LD_INT 0
35496: PPUSH
35497: LD_INT 3
35499: PPUSH
35500: CALL_OW 12
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// end ;
35517: LD_VAR 0 1
35521: RET
// export function PrepareApemanEngineer ( ) ; begin
35522: LD_INT 0
35524: PPUSH
// uc_nation := 0 ;
35525: LD_ADDR_OWVAR 21
35529: PUSH
35530: LD_INT 0
35532: ST_TO_ADDR
// hc_sex := sex_male ;
35533: LD_ADDR_OWVAR 27
35537: PUSH
35538: LD_INT 1
35540: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35541: LD_ADDR_OWVAR 28
35545: PUSH
35546: LD_INT 16
35548: ST_TO_ADDR
// hc_gallery :=  ;
35549: LD_ADDR_OWVAR 33
35553: PUSH
35554: LD_STRING 
35556: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35557: LD_ADDR_OWVAR 31
35561: PUSH
35562: LD_INT 0
35564: PPUSH
35565: LD_INT 3
35567: PPUSH
35568: CALL_OW 12
35572: PUSH
35573: LD_INT 0
35575: PPUSH
35576: LD_INT 3
35578: PPUSH
35579: CALL_OW 12
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// end ;
35596: LD_VAR 0 1
35600: RET
// export function PrepareApeman ( agressivity ) ; begin
35601: LD_INT 0
35603: PPUSH
// uc_side := 0 ;
35604: LD_ADDR_OWVAR 20
35608: PUSH
35609: LD_INT 0
35611: ST_TO_ADDR
// uc_nation := 0 ;
35612: LD_ADDR_OWVAR 21
35616: PUSH
35617: LD_INT 0
35619: ST_TO_ADDR
// hc_sex := sex_male ;
35620: LD_ADDR_OWVAR 27
35624: PUSH
35625: LD_INT 1
35627: ST_TO_ADDR
// hc_class := class_apeman ;
35628: LD_ADDR_OWVAR 28
35632: PUSH
35633: LD_INT 12
35635: ST_TO_ADDR
// hc_gallery :=  ;
35636: LD_ADDR_OWVAR 33
35640: PUSH
35641: LD_STRING 
35643: ST_TO_ADDR
// if agressivity = 0 then
35644: LD_VAR 0 1
35648: PUSH
35649: LD_INT 0
35651: EQUAL
35652: IFFALSE 35664
// hc_agressivity := 0 else
35654: LD_ADDR_OWVAR 35
35658: PUSH
35659: LD_INT 0
35661: ST_TO_ADDR
35662: GO 35685
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35664: LD_ADDR_OWVAR 35
35668: PUSH
35669: LD_VAR 0 1
35673: NEG
35674: PPUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: CALL_OW 12
35684: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35685: LD_ADDR_OWVAR 31
35689: PUSH
35690: LD_INT 0
35692: PPUSH
35693: LD_INT 3
35695: PPUSH
35696: CALL_OW 12
35700: PUSH
35701: LD_INT 0
35703: PPUSH
35704: LD_INT 3
35706: PPUSH
35707: CALL_OW 12
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// end ;
35724: LD_VAR 0 2
35728: RET
// export function PrepareTiger ( agressivity ) ; begin
35729: LD_INT 0
35731: PPUSH
// uc_side := 0 ;
35732: LD_ADDR_OWVAR 20
35736: PUSH
35737: LD_INT 0
35739: ST_TO_ADDR
// uc_nation := 0 ;
35740: LD_ADDR_OWVAR 21
35744: PUSH
35745: LD_INT 0
35747: ST_TO_ADDR
// hc_class := class_tiger ;
35748: LD_ADDR_OWVAR 28
35752: PUSH
35753: LD_INT 14
35755: ST_TO_ADDR
// hc_gallery :=  ;
35756: LD_ADDR_OWVAR 33
35760: PUSH
35761: LD_STRING 
35763: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35764: LD_ADDR_OWVAR 35
35768: PUSH
35769: LD_VAR 0 1
35773: NEG
35774: PPUSH
35775: LD_VAR 0 1
35779: PPUSH
35780: CALL_OW 12
35784: ST_TO_ADDR
// end ;
35785: LD_VAR 0 2
35789: RET
// export function PrepareEnchidna ( ) ; begin
35790: LD_INT 0
35792: PPUSH
// uc_side := 0 ;
35793: LD_ADDR_OWVAR 20
35797: PUSH
35798: LD_INT 0
35800: ST_TO_ADDR
// uc_nation := 0 ;
35801: LD_ADDR_OWVAR 21
35805: PUSH
35806: LD_INT 0
35808: ST_TO_ADDR
// hc_class := class_baggie ;
35809: LD_ADDR_OWVAR 28
35813: PUSH
35814: LD_INT 13
35816: ST_TO_ADDR
// hc_gallery :=  ;
35817: LD_ADDR_OWVAR 33
35821: PUSH
35822: LD_STRING 
35824: ST_TO_ADDR
// end ;
35825: LD_VAR 0 1
35829: RET
// export function PrepareFrog ( ) ; begin
35830: LD_INT 0
35832: PPUSH
// uc_side := 0 ;
35833: LD_ADDR_OWVAR 20
35837: PUSH
35838: LD_INT 0
35840: ST_TO_ADDR
// uc_nation := 0 ;
35841: LD_ADDR_OWVAR 21
35845: PUSH
35846: LD_INT 0
35848: ST_TO_ADDR
// hc_class := class_frog ;
35849: LD_ADDR_OWVAR 28
35853: PUSH
35854: LD_INT 19
35856: ST_TO_ADDR
// hc_gallery :=  ;
35857: LD_ADDR_OWVAR 33
35861: PUSH
35862: LD_STRING 
35864: ST_TO_ADDR
// end ;
35865: LD_VAR 0 1
35869: RET
// export function PrepareFish ( ) ; begin
35870: LD_INT 0
35872: PPUSH
// uc_side := 0 ;
35873: LD_ADDR_OWVAR 20
35877: PUSH
35878: LD_INT 0
35880: ST_TO_ADDR
// uc_nation := 0 ;
35881: LD_ADDR_OWVAR 21
35885: PUSH
35886: LD_INT 0
35888: ST_TO_ADDR
// hc_class := class_fish ;
35889: LD_ADDR_OWVAR 28
35893: PUSH
35894: LD_INT 20
35896: ST_TO_ADDR
// hc_gallery :=  ;
35897: LD_ADDR_OWVAR 33
35901: PUSH
35902: LD_STRING 
35904: ST_TO_ADDR
// end ;
35905: LD_VAR 0 1
35909: RET
// export function PrepareBird ( ) ; begin
35910: LD_INT 0
35912: PPUSH
// uc_side := 0 ;
35913: LD_ADDR_OWVAR 20
35917: PUSH
35918: LD_INT 0
35920: ST_TO_ADDR
// uc_nation := 0 ;
35921: LD_ADDR_OWVAR 21
35925: PUSH
35926: LD_INT 0
35928: ST_TO_ADDR
// hc_class := class_phororhacos ;
35929: LD_ADDR_OWVAR 28
35933: PUSH
35934: LD_INT 18
35936: ST_TO_ADDR
// hc_gallery :=  ;
35937: LD_ADDR_OWVAR 33
35941: PUSH
35942: LD_STRING 
35944: ST_TO_ADDR
// end ;
35945: LD_VAR 0 1
35949: RET
// export function PrepareHorse ( ) ; begin
35950: LD_INT 0
35952: PPUSH
// uc_side := 0 ;
35953: LD_ADDR_OWVAR 20
35957: PUSH
35958: LD_INT 0
35960: ST_TO_ADDR
// uc_nation := 0 ;
35961: LD_ADDR_OWVAR 21
35965: PUSH
35966: LD_INT 0
35968: ST_TO_ADDR
// hc_class := class_horse ;
35969: LD_ADDR_OWVAR 28
35973: PUSH
35974: LD_INT 21
35976: ST_TO_ADDR
// hc_gallery :=  ;
35977: LD_ADDR_OWVAR 33
35981: PUSH
35982: LD_STRING 
35984: ST_TO_ADDR
// end ;
35985: LD_VAR 0 1
35989: RET
// export function PrepareMastodont ( ) ; begin
35990: LD_INT 0
35992: PPUSH
// uc_side := 0 ;
35993: LD_ADDR_OWVAR 20
35997: PUSH
35998: LD_INT 0
36000: ST_TO_ADDR
// uc_nation := 0 ;
36001: LD_ADDR_OWVAR 21
36005: PUSH
36006: LD_INT 0
36008: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36009: LD_ADDR_OWVAR 37
36013: PUSH
36014: LD_INT 31
36016: ST_TO_ADDR
// vc_control := control_rider ;
36017: LD_ADDR_OWVAR 38
36021: PUSH
36022: LD_INT 4
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 1
36029: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
// uc_side = 0 ;
36035: LD_ADDR_OWVAR 20
36039: PUSH
36040: LD_INT 0
36042: ST_TO_ADDR
// uc_nation = 0 ;
36043: LD_ADDR_OWVAR 21
36047: PUSH
36048: LD_INT 0
36050: ST_TO_ADDR
// InitHc_All ( ) ;
36051: CALL_OW 584
// InitVc ;
36055: CALL_OW 20
// if mastodonts then
36059: LD_VAR 0 6
36063: IFFALSE 36130
// for i = 1 to mastodonts do
36065: LD_ADDR_VAR 0 11
36069: PUSH
36070: DOUBLE
36071: LD_INT 1
36073: DEC
36074: ST_TO_ADDR
36075: LD_VAR 0 6
36079: PUSH
36080: FOR_TO
36081: IFFALSE 36128
// begin vc_chassis := 31 ;
36083: LD_ADDR_OWVAR 37
36087: PUSH
36088: LD_INT 31
36090: ST_TO_ADDR
// vc_control := control_rider ;
36091: LD_ADDR_OWVAR 38
36095: PUSH
36096: LD_INT 4
36098: ST_TO_ADDR
// animal := CreateVehicle ;
36099: LD_ADDR_VAR 0 12
36103: PUSH
36104: CALL_OW 45
36108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36109: LD_VAR 0 12
36113: PPUSH
36114: LD_VAR 0 8
36118: PPUSH
36119: LD_INT 0
36121: PPUSH
36122: CALL 38258 0 3
// end ;
36126: GO 36080
36128: POP
36129: POP
// if horses then
36130: LD_VAR 0 5
36134: IFFALSE 36201
// for i = 1 to horses do
36136: LD_ADDR_VAR 0 11
36140: PUSH
36141: DOUBLE
36142: LD_INT 1
36144: DEC
36145: ST_TO_ADDR
36146: LD_VAR 0 5
36150: PUSH
36151: FOR_TO
36152: IFFALSE 36199
// begin hc_class := 21 ;
36154: LD_ADDR_OWVAR 28
36158: PUSH
36159: LD_INT 21
36161: ST_TO_ADDR
// hc_gallery :=  ;
36162: LD_ADDR_OWVAR 33
36166: PUSH
36167: LD_STRING 
36169: ST_TO_ADDR
// animal := CreateHuman ;
36170: LD_ADDR_VAR 0 12
36174: PUSH
36175: CALL_OW 44
36179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36180: LD_VAR 0 12
36184: PPUSH
36185: LD_VAR 0 8
36189: PPUSH
36190: LD_INT 0
36192: PPUSH
36193: CALL 38258 0 3
// end ;
36197: GO 36151
36199: POP
36200: POP
// if birds then
36201: LD_VAR 0 1
36205: IFFALSE 36272
// for i = 1 to birds do
36207: LD_ADDR_VAR 0 11
36211: PUSH
36212: DOUBLE
36213: LD_INT 1
36215: DEC
36216: ST_TO_ADDR
36217: LD_VAR 0 1
36221: PUSH
36222: FOR_TO
36223: IFFALSE 36270
// begin hc_class := 18 ;
36225: LD_ADDR_OWVAR 28
36229: PUSH
36230: LD_INT 18
36232: ST_TO_ADDR
// hc_gallery =  ;
36233: LD_ADDR_OWVAR 33
36237: PUSH
36238: LD_STRING 
36240: ST_TO_ADDR
// animal := CreateHuman ;
36241: LD_ADDR_VAR 0 12
36245: PUSH
36246: CALL_OW 44
36250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36251: LD_VAR 0 12
36255: PPUSH
36256: LD_VAR 0 8
36260: PPUSH
36261: LD_INT 0
36263: PPUSH
36264: CALL 38258 0 3
// end ;
36268: GO 36222
36270: POP
36271: POP
// if tigers then
36272: LD_VAR 0 2
36276: IFFALSE 36360
// for i = 1 to tigers do
36278: LD_ADDR_VAR 0 11
36282: PUSH
36283: DOUBLE
36284: LD_INT 1
36286: DEC
36287: ST_TO_ADDR
36288: LD_VAR 0 2
36292: PUSH
36293: FOR_TO
36294: IFFALSE 36358
// begin hc_class = class_tiger ;
36296: LD_ADDR_OWVAR 28
36300: PUSH
36301: LD_INT 14
36303: ST_TO_ADDR
// hc_gallery =  ;
36304: LD_ADDR_OWVAR 33
36308: PUSH
36309: LD_STRING 
36311: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36312: LD_ADDR_OWVAR 35
36316: PUSH
36317: LD_INT 7
36319: NEG
36320: PPUSH
36321: LD_INT 7
36323: PPUSH
36324: CALL_OW 12
36328: ST_TO_ADDR
// animal := CreateHuman ;
36329: LD_ADDR_VAR 0 12
36333: PUSH
36334: CALL_OW 44
36338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36339: LD_VAR 0 12
36343: PPUSH
36344: LD_VAR 0 8
36348: PPUSH
36349: LD_INT 0
36351: PPUSH
36352: CALL 38258 0 3
// end ;
36356: GO 36293
36358: POP
36359: POP
// if apemans then
36360: LD_VAR 0 3
36364: IFFALSE 36487
// for i = 1 to apemans do
36366: LD_ADDR_VAR 0 11
36370: PUSH
36371: DOUBLE
36372: LD_INT 1
36374: DEC
36375: ST_TO_ADDR
36376: LD_VAR 0 3
36380: PUSH
36381: FOR_TO
36382: IFFALSE 36485
// begin hc_class = class_apeman ;
36384: LD_ADDR_OWVAR 28
36388: PUSH
36389: LD_INT 12
36391: ST_TO_ADDR
// hc_gallery =  ;
36392: LD_ADDR_OWVAR 33
36396: PUSH
36397: LD_STRING 
36399: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36400: LD_ADDR_OWVAR 35
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PPUSH
36409: LD_INT 2
36411: PPUSH
36412: CALL_OW 12
36416: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36417: LD_ADDR_OWVAR 31
36421: PUSH
36422: LD_INT 1
36424: PPUSH
36425: LD_INT 3
36427: PPUSH
36428: CALL_OW 12
36432: PUSH
36433: LD_INT 1
36435: PPUSH
36436: LD_INT 3
36438: PPUSH
36439: CALL_OW 12
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// animal := CreateHuman ;
36456: LD_ADDR_VAR 0 12
36460: PUSH
36461: CALL_OW 44
36465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36466: LD_VAR 0 12
36470: PPUSH
36471: LD_VAR 0 8
36475: PPUSH
36476: LD_INT 0
36478: PPUSH
36479: CALL 38258 0 3
// end ;
36483: GO 36381
36485: POP
36486: POP
// if enchidnas then
36487: LD_VAR 0 4
36491: IFFALSE 36558
// for i = 1 to enchidnas do
36493: LD_ADDR_VAR 0 11
36497: PUSH
36498: DOUBLE
36499: LD_INT 1
36501: DEC
36502: ST_TO_ADDR
36503: LD_VAR 0 4
36507: PUSH
36508: FOR_TO
36509: IFFALSE 36556
// begin hc_class = 13 ;
36511: LD_ADDR_OWVAR 28
36515: PUSH
36516: LD_INT 13
36518: ST_TO_ADDR
// hc_gallery =  ;
36519: LD_ADDR_OWVAR 33
36523: PUSH
36524: LD_STRING 
36526: ST_TO_ADDR
// animal := CreateHuman ;
36527: LD_ADDR_VAR 0 12
36531: PUSH
36532: CALL_OW 44
36536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36537: LD_VAR 0 12
36541: PPUSH
36542: LD_VAR 0 8
36546: PPUSH
36547: LD_INT 0
36549: PPUSH
36550: CALL 38258 0 3
// end ;
36554: GO 36508
36556: POP
36557: POP
// if fishes then
36558: LD_VAR 0 7
36562: IFFALSE 36629
// for i = 1 to fishes do
36564: LD_ADDR_VAR 0 11
36568: PUSH
36569: DOUBLE
36570: LD_INT 1
36572: DEC
36573: ST_TO_ADDR
36574: LD_VAR 0 7
36578: PUSH
36579: FOR_TO
36580: IFFALSE 36627
// begin hc_class = 20 ;
36582: LD_ADDR_OWVAR 28
36586: PUSH
36587: LD_INT 20
36589: ST_TO_ADDR
// hc_gallery =  ;
36590: LD_ADDR_OWVAR 33
36594: PUSH
36595: LD_STRING 
36597: ST_TO_ADDR
// animal := CreateHuman ;
36598: LD_ADDR_VAR 0 12
36602: PUSH
36603: CALL_OW 44
36607: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36608: LD_VAR 0 12
36612: PPUSH
36613: LD_VAR 0 9
36617: PPUSH
36618: LD_INT 0
36620: PPUSH
36621: CALL 38258 0 3
// end ;
36625: GO 36579
36627: POP
36628: POP
// end ;
36629: LD_VAR 0 10
36633: RET
// export function WantHeal ( sci , unit ) ; begin
36634: LD_INT 0
36636: PPUSH
// if GetTaskList ( sci ) > 0 then
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 437
36646: PUSH
36647: LD_INT 0
36649: GREATER
36650: IFFALSE 36720
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 437
36661: PUSH
36662: LD_INT 1
36664: ARRAY
36665: PUSH
36666: LD_INT 1
36668: ARRAY
36669: PUSH
36670: LD_STRING l
36672: EQUAL
36673: PUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 437
36683: PUSH
36684: LD_INT 1
36686: ARRAY
36687: PUSH
36688: LD_INT 4
36690: ARRAY
36691: PUSH
36692: LD_VAR 0 2
36696: EQUAL
36697: AND
36698: IFFALSE 36710
// result := true else
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_INT 1
36707: ST_TO_ADDR
36708: GO 36718
// result := false ;
36710: LD_ADDR_VAR 0 3
36714: PUSH
36715: LD_INT 0
36717: ST_TO_ADDR
// end else
36718: GO 36728
// result := false ;
36720: LD_ADDR_VAR 0 3
36724: PUSH
36725: LD_INT 0
36727: ST_TO_ADDR
// end ;
36728: LD_VAR 0 3
36732: RET
// export function HealTarget ( sci ) ; begin
36733: LD_INT 0
36735: PPUSH
// if not sci then
36736: LD_VAR 0 1
36740: NOT
36741: IFFALSE 36745
// exit ;
36743: GO 36810
// result := 0 ;
36745: LD_ADDR_VAR 0 2
36749: PUSH
36750: LD_INT 0
36752: ST_TO_ADDR
// if GetTaskList ( sci ) then
36753: LD_VAR 0 1
36757: PPUSH
36758: CALL_OW 437
36762: IFFALSE 36810
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 437
36773: PUSH
36774: LD_INT 1
36776: ARRAY
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: PUSH
36782: LD_STRING l
36784: EQUAL
36785: IFFALSE 36810
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36787: LD_ADDR_VAR 0 2
36791: PUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 437
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PUSH
36806: LD_INT 4
36808: ARRAY
36809: ST_TO_ADDR
// end ;
36810: LD_VAR 0 2
36814: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36815: LD_INT 0
36817: PPUSH
36818: PPUSH
36819: PPUSH
36820: PPUSH
// if not base_units then
36821: LD_VAR 0 1
36825: NOT
36826: IFFALSE 36830
// exit ;
36828: GO 36917
// result := false ;
36830: LD_ADDR_VAR 0 2
36834: PUSH
36835: LD_INT 0
36837: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36838: LD_ADDR_VAR 0 5
36842: PUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: LD_INT 21
36850: PUSH
36851: LD_INT 3
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PPUSH
36858: CALL_OW 72
36862: ST_TO_ADDR
// if not tmp then
36863: LD_VAR 0 5
36867: NOT
36868: IFFALSE 36872
// exit ;
36870: GO 36917
// for i in tmp do
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_VAR 0 5
36881: PUSH
36882: FOR_IN
36883: IFFALSE 36915
// begin result := EnemyInRange ( i , 22 ) ;
36885: LD_ADDR_VAR 0 2
36889: PUSH
36890: LD_VAR 0 3
36894: PPUSH
36895: LD_INT 22
36897: PPUSH
36898: CALL 34495 0 2
36902: ST_TO_ADDR
// if result then
36903: LD_VAR 0 2
36907: IFFALSE 36913
// exit ;
36909: POP
36910: POP
36911: GO 36917
// end ;
36913: GO 36882
36915: POP
36916: POP
// end ;
36917: LD_VAR 0 2
36921: RET
// export function FilterByTag ( units , tag ) ; begin
36922: LD_INT 0
36924: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36925: LD_ADDR_VAR 0 3
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: LD_INT 120
36937: PUSH
36938: LD_VAR 0 2
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PPUSH
36947: CALL_OW 72
36951: ST_TO_ADDR
// end ;
36952: LD_VAR 0 3
36956: RET
// export function IsDriver ( un ) ; begin
36957: LD_INT 0
36959: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36960: LD_ADDR_VAR 0 2
36964: PUSH
36965: LD_VAR 0 1
36969: PUSH
36970: LD_INT 55
36972: PUSH
36973: EMPTY
36974: LIST
36975: PPUSH
36976: CALL_OW 69
36980: IN
36981: ST_TO_ADDR
// end ;
36982: LD_VAR 0 2
36986: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36987: LD_INT 0
36989: PPUSH
36990: PPUSH
// list := [ ] ;
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: EMPTY
36997: ST_TO_ADDR
// case d of 0 :
36998: LD_VAR 0 3
37002: PUSH
37003: LD_INT 0
37005: DOUBLE
37006: EQUAL
37007: IFTRUE 37011
37009: GO 37144
37011: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37012: LD_ADDR_VAR 0 5
37016: PUSH
37017: LD_VAR 0 1
37021: PUSH
37022: LD_INT 4
37024: MINUS
37025: PUSH
37026: LD_VAR 0 2
37030: PUSH
37031: LD_INT 4
37033: MINUS
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: PUSH
37043: LD_VAR 0 1
37047: PUSH
37048: LD_INT 3
37050: MINUS
37051: PUSH
37052: LD_VAR 0 2
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: PUSH
37065: LD_VAR 0 1
37069: PUSH
37070: LD_INT 4
37072: PLUS
37073: PUSH
37074: LD_VAR 0 2
37078: PUSH
37079: LD_INT 4
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: PUSH
37087: LD_VAR 0 1
37091: PUSH
37092: LD_INT 3
37094: PLUS
37095: PUSH
37096: LD_VAR 0 2
37100: PUSH
37101: LD_INT 3
37103: PLUS
37104: PUSH
37105: LD_INT 5
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: PUSH
37113: LD_VAR 0 1
37117: PUSH
37118: LD_VAR 0 2
37122: PUSH
37123: LD_INT 4
37125: PLUS
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: ST_TO_ADDR
// end ; 1 :
37142: GO 37842
37144: LD_INT 1
37146: DOUBLE
37147: EQUAL
37148: IFTRUE 37152
37150: GO 37285
37152: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37153: LD_ADDR_VAR 0 5
37157: PUSH
37158: LD_VAR 0 1
37162: PUSH
37163: LD_VAR 0 2
37167: PUSH
37168: LD_INT 4
37170: MINUS
37171: PUSH
37172: LD_INT 3
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: PUSH
37180: LD_VAR 0 1
37184: PUSH
37185: LD_INT 3
37187: MINUS
37188: PUSH
37189: LD_VAR 0 2
37193: PUSH
37194: LD_INT 3
37196: MINUS
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: PUSH
37206: LD_VAR 0 1
37210: PUSH
37211: LD_INT 4
37213: MINUS
37214: PUSH
37215: LD_VAR 0 2
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: PUSH
37228: LD_VAR 0 1
37232: PUSH
37233: LD_VAR 0 2
37237: PUSH
37238: LD_INT 3
37240: PLUS
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: PUSH
37250: LD_VAR 0 1
37254: PUSH
37255: LD_INT 4
37257: PLUS
37258: PUSH
37259: LD_VAR 0 2
37263: PUSH
37264: LD_INT 4
37266: PLUS
37267: PUSH
37268: LD_INT 5
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: ST_TO_ADDR
// end ; 2 :
37283: GO 37842
37285: LD_INT 2
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 37422
37293: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37294: LD_ADDR_VAR 0 5
37298: PUSH
37299: LD_VAR 0 1
37303: PUSH
37304: LD_VAR 0 2
37308: PUSH
37309: LD_INT 3
37311: MINUS
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: PUSH
37321: LD_VAR 0 1
37325: PUSH
37326: LD_INT 4
37328: PLUS
37329: PUSH
37330: LD_VAR 0 2
37334: PUSH
37335: LD_INT 4
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: PUSH
37343: LD_VAR 0 1
37347: PUSH
37348: LD_VAR 0 2
37352: PUSH
37353: LD_INT 4
37355: PLUS
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: PUSH
37365: LD_VAR 0 1
37369: PUSH
37370: LD_INT 3
37372: MINUS
37373: PUSH
37374: LD_VAR 0 2
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: PUSH
37387: LD_VAR 0 1
37391: PUSH
37392: LD_INT 4
37394: MINUS
37395: PUSH
37396: LD_VAR 0 2
37400: PUSH
37401: LD_INT 4
37403: MINUS
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
// end ; 3 :
37420: GO 37842
37422: LD_INT 3
37424: DOUBLE
37425: EQUAL
37426: IFTRUE 37430
37428: GO 37563
37430: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37431: LD_ADDR_VAR 0 5
37435: PUSH
37436: LD_VAR 0 1
37440: PUSH
37441: LD_INT 3
37443: PLUS
37444: PUSH
37445: LD_VAR 0 2
37449: PUSH
37450: LD_INT 4
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: PUSH
37458: LD_VAR 0 1
37462: PUSH
37463: LD_INT 4
37465: PLUS
37466: PUSH
37467: LD_VAR 0 2
37471: PUSH
37472: LD_INT 4
37474: PLUS
37475: PUSH
37476: LD_INT 5
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: PUSH
37484: LD_VAR 0 1
37488: PUSH
37489: LD_INT 4
37491: MINUS
37492: PUSH
37493: LD_VAR 0 2
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PUSH
37506: LD_VAR 0 1
37510: PUSH
37511: LD_VAR 0 2
37515: PUSH
37516: LD_INT 4
37518: MINUS
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: PUSH
37528: LD_VAR 0 1
37532: PUSH
37533: LD_INT 3
37535: MINUS
37536: PUSH
37537: LD_VAR 0 2
37541: PUSH
37542: LD_INT 3
37544: MINUS
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: ST_TO_ADDR
// end ; 4 :
37561: GO 37842
37563: LD_INT 4
37565: DOUBLE
37566: EQUAL
37567: IFTRUE 37571
37569: GO 37704
37571: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_VAR 0 1
37581: PUSH
37582: LD_VAR 0 2
37586: PUSH
37587: LD_INT 4
37589: PLUS
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: PUSH
37599: LD_VAR 0 1
37603: PUSH
37604: LD_INT 3
37606: PLUS
37607: PUSH
37608: LD_VAR 0 2
37612: PUSH
37613: LD_INT 3
37615: PLUS
37616: PUSH
37617: LD_INT 5
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: PUSH
37625: LD_VAR 0 1
37629: PUSH
37630: LD_INT 4
37632: PLUS
37633: PUSH
37634: LD_VAR 0 2
37638: PUSH
37639: LD_INT 4
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: PUSH
37647: LD_VAR 0 1
37651: PUSH
37652: LD_VAR 0 2
37656: PUSH
37657: LD_INT 3
37659: MINUS
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: PUSH
37669: LD_VAR 0 1
37673: PUSH
37674: LD_INT 4
37676: MINUS
37677: PUSH
37678: LD_VAR 0 2
37682: PUSH
37683: LD_INT 4
37685: MINUS
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
// end ; 5 :
37702: GO 37842
37704: LD_INT 5
37706: DOUBLE
37707: EQUAL
37708: IFTRUE 37712
37710: GO 37841
37712: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 1
37722: PUSH
37723: LD_INT 4
37725: MINUS
37726: PUSH
37727: LD_VAR 0 2
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: PUSH
37740: LD_VAR 0 1
37744: PUSH
37745: LD_VAR 0 2
37749: PUSH
37750: LD_INT 4
37752: MINUS
37753: PUSH
37754: LD_INT 3
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: PUSH
37762: LD_VAR 0 1
37766: PUSH
37767: LD_INT 4
37769: PLUS
37770: PUSH
37771: LD_VAR 0 2
37775: PUSH
37776: LD_INT 4
37778: PLUS
37779: PUSH
37780: LD_INT 5
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: PUSH
37788: LD_VAR 0 1
37792: PUSH
37793: LD_INT 3
37795: PLUS
37796: PUSH
37797: LD_VAR 0 2
37801: PUSH
37802: LD_INT 4
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: PUSH
37810: LD_VAR 0 1
37814: PUSH
37815: LD_VAR 0 2
37819: PUSH
37820: LD_INT 3
37822: PLUS
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// end ; end ;
37839: GO 37842
37841: POP
// result := list ;
37842: LD_ADDR_VAR 0 4
37846: PUSH
37847: LD_VAR 0 5
37851: ST_TO_ADDR
// end ;
37852: LD_VAR 0 4
37856: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37857: LD_INT 0
37859: PPUSH
37860: PPUSH
37861: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37862: LD_VAR 0 1
37866: NOT
37867: PUSH
37868: LD_VAR 0 2
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: LD_INT 4
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: IN
37891: NOT
37892: OR
37893: IFFALSE 37897
// exit ;
37895: GO 37980
// tmp := [ ] ;
37897: LD_ADDR_VAR 0 5
37901: PUSH
37902: EMPTY
37903: ST_TO_ADDR
// for i in units do
37904: LD_ADDR_VAR 0 4
37908: PUSH
37909: LD_VAR 0 1
37913: PUSH
37914: FOR_IN
37915: IFFALSE 37949
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37917: LD_ADDR_VAR 0 5
37921: PUSH
37922: LD_VAR 0 5
37926: PPUSH
37927: LD_VAR 0 4
37931: PPUSH
37932: LD_VAR 0 2
37936: PPUSH
37937: CALL_OW 259
37941: PPUSH
37942: CALL 39353 0 2
37946: ST_TO_ADDR
37947: GO 37914
37949: POP
37950: POP
// if not tmp then
37951: LD_VAR 0 5
37955: NOT
37956: IFFALSE 37960
// exit ;
37958: GO 37980
// result := SortListByListDesc ( units , tmp ) ;
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_VAR 0 1
37969: PPUSH
37970: LD_VAR 0 5
37974: PPUSH
37975: CALL_OW 77
37979: ST_TO_ADDR
// end ;
37980: LD_VAR 0 3
37984: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37985: LD_INT 0
37987: PPUSH
37988: PPUSH
37989: PPUSH
// result := false ;
37990: LD_ADDR_VAR 0 3
37994: PUSH
37995: LD_INT 0
37997: ST_TO_ADDR
// if not building then
37998: LD_VAR 0 2
38002: NOT
38003: IFFALSE 38007
// exit ;
38005: GO 38145
// x := GetX ( building ) ;
38007: LD_ADDR_VAR 0 4
38011: PUSH
38012: LD_VAR 0 2
38016: PPUSH
38017: CALL_OW 250
38021: ST_TO_ADDR
// y := GetY ( building ) ;
38022: LD_ADDR_VAR 0 5
38026: PUSH
38027: LD_VAR 0 2
38031: PPUSH
38032: CALL_OW 251
38036: ST_TO_ADDR
// if not x or not y then
38037: LD_VAR 0 4
38041: NOT
38042: PUSH
38043: LD_VAR 0 5
38047: NOT
38048: OR
38049: IFFALSE 38053
// exit ;
38051: GO 38145
// if GetTaskList ( unit ) then
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 437
38062: IFFALSE 38145
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38064: LD_STRING e
38066: PUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 437
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: PUSH
38081: LD_INT 1
38083: ARRAY
38084: EQUAL
38085: PUSH
38086: LD_VAR 0 4
38090: PUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL_OW 437
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PUSH
38105: LD_INT 2
38107: ARRAY
38108: EQUAL
38109: AND
38110: PUSH
38111: LD_VAR 0 5
38115: PUSH
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL_OW 437
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PUSH
38130: LD_INT 3
38132: ARRAY
38133: EQUAL
38134: AND
38135: IFFALSE 38145
// result := true end ;
38137: LD_ADDR_VAR 0 3
38141: PUSH
38142: LD_INT 1
38144: ST_TO_ADDR
// end ;
38145: LD_VAR 0 3
38149: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38150: LD_INT 0
38152: PPUSH
// result := false ;
38153: LD_ADDR_VAR 0 4
38157: PUSH
38158: LD_INT 0
38160: ST_TO_ADDR
// if GetTaskList ( unit ) then
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 437
38170: IFFALSE 38253
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38172: LD_STRING M
38174: PUSH
38175: LD_VAR 0 1
38179: PPUSH
38180: CALL_OW 437
38184: PUSH
38185: LD_INT 1
38187: ARRAY
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: EQUAL
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 437
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: PUSH
38213: LD_INT 2
38215: ARRAY
38216: EQUAL
38217: AND
38218: PUSH
38219: LD_VAR 0 3
38223: PUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: CALL_OW 437
38233: PUSH
38234: LD_INT 1
38236: ARRAY
38237: PUSH
38238: LD_INT 3
38240: ARRAY
38241: EQUAL
38242: AND
38243: IFFALSE 38253
// result := true ;
38245: LD_ADDR_VAR 0 4
38249: PUSH
38250: LD_INT 1
38252: ST_TO_ADDR
// end ; end ;
38253: LD_VAR 0 4
38257: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38258: LD_INT 0
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
// if not unit or not area then
38264: LD_VAR 0 1
38268: NOT
38269: PUSH
38270: LD_VAR 0 2
38274: NOT
38275: OR
38276: IFFALSE 38280
// exit ;
38278: GO 38456
// tmp := AreaToList ( area , i ) ;
38280: LD_ADDR_VAR 0 6
38284: PUSH
38285: LD_VAR 0 2
38289: PPUSH
38290: LD_VAR 0 5
38294: PPUSH
38295: CALL_OW 517
38299: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38300: LD_ADDR_VAR 0 5
38304: PUSH
38305: DOUBLE
38306: LD_INT 1
38308: DEC
38309: ST_TO_ADDR
38310: LD_VAR 0 6
38314: PUSH
38315: LD_INT 1
38317: ARRAY
38318: PUSH
38319: FOR_TO
38320: IFFALSE 38454
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38322: LD_ADDR_VAR 0 7
38326: PUSH
38327: LD_VAR 0 6
38331: PUSH
38332: LD_INT 1
38334: ARRAY
38335: PUSH
38336: LD_VAR 0 5
38340: ARRAY
38341: PUSH
38342: LD_VAR 0 6
38346: PUSH
38347: LD_INT 2
38349: ARRAY
38350: PUSH
38351: LD_VAR 0 5
38355: ARRAY
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38361: LD_INT 92
38363: PUSH
38364: LD_VAR 0 7
38368: PUSH
38369: LD_INT 1
38371: ARRAY
38372: PUSH
38373: LD_VAR 0 7
38377: PUSH
38378: LD_INT 2
38380: ARRAY
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: PPUSH
38391: CALL_OW 69
38395: PUSH
38396: LD_INT 0
38398: EQUAL
38399: IFFALSE 38452
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38401: LD_VAR 0 1
38405: PPUSH
38406: LD_VAR 0 7
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PPUSH
38415: LD_VAR 0 7
38419: PUSH
38420: LD_INT 2
38422: ARRAY
38423: PPUSH
38424: LD_VAR 0 3
38428: PPUSH
38429: CALL_OW 48
// result := IsPlaced ( unit ) ;
38433: LD_ADDR_VAR 0 4
38437: PUSH
38438: LD_VAR 0 1
38442: PPUSH
38443: CALL_OW 305
38447: ST_TO_ADDR
// exit ;
38448: POP
38449: POP
38450: GO 38456
// end ; end ;
38452: GO 38319
38454: POP
38455: POP
// end ;
38456: LD_VAR 0 4
38460: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38461: LD_INT 0
38463: PPUSH
38464: PPUSH
38465: PPUSH
// if not side or side > 8 then
38466: LD_VAR 0 1
38470: NOT
38471: PUSH
38472: LD_VAR 0 1
38476: PUSH
38477: LD_INT 8
38479: GREATER
38480: OR
38481: IFFALSE 38485
// exit ;
38483: GO 38672
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38485: LD_ADDR_VAR 0 4
38489: PUSH
38490: LD_INT 22
38492: PUSH
38493: LD_VAR 0 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 21
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PPUSH
38516: CALL_OW 69
38520: ST_TO_ADDR
// if not tmp then
38521: LD_VAR 0 4
38525: NOT
38526: IFFALSE 38530
// exit ;
38528: GO 38672
// enable_addtolog := true ;
38530: LD_ADDR_OWVAR 81
38534: PUSH
38535: LD_INT 1
38537: ST_TO_ADDR
// AddToLog ( [ ) ;
38538: LD_STRING [
38540: PPUSH
38541: CALL_OW 561
// for i in tmp do
38545: LD_ADDR_VAR 0 3
38549: PUSH
38550: LD_VAR 0 4
38554: PUSH
38555: FOR_IN
38556: IFFALSE 38663
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38558: LD_STRING [
38560: PUSH
38561: LD_VAR 0 3
38565: PPUSH
38566: CALL_OW 266
38570: STR
38571: PUSH
38572: LD_STRING , 
38574: STR
38575: PUSH
38576: LD_VAR 0 3
38580: PPUSH
38581: CALL_OW 250
38585: STR
38586: PUSH
38587: LD_STRING , 
38589: STR
38590: PUSH
38591: LD_VAR 0 3
38595: PPUSH
38596: CALL_OW 251
38600: STR
38601: PUSH
38602: LD_STRING , 
38604: STR
38605: PUSH
38606: LD_VAR 0 3
38610: PPUSH
38611: CALL_OW 254
38615: STR
38616: PUSH
38617: LD_STRING , 
38619: STR
38620: PUSH
38621: LD_VAR 0 3
38625: PPUSH
38626: LD_INT 1
38628: PPUSH
38629: CALL_OW 268
38633: STR
38634: PUSH
38635: LD_STRING , 
38637: STR
38638: PUSH
38639: LD_VAR 0 3
38643: PPUSH
38644: LD_INT 2
38646: PPUSH
38647: CALL_OW 268
38651: STR
38652: PUSH
38653: LD_STRING ],
38655: STR
38656: PPUSH
38657: CALL_OW 561
// end ;
38661: GO 38555
38663: POP
38664: POP
// AddToLog ( ]; ) ;
38665: LD_STRING ];
38667: PPUSH
38668: CALL_OW 561
// end ;
38672: LD_VAR 0 2
38676: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38677: LD_INT 0
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
// if not area or not rate or not max then
38684: LD_VAR 0 1
38688: NOT
38689: PUSH
38690: LD_VAR 0 2
38694: NOT
38695: OR
38696: PUSH
38697: LD_VAR 0 4
38701: NOT
38702: OR
38703: IFFALSE 38707
// exit ;
38705: GO 38896
// while 1 do
38707: LD_INT 1
38709: IFFALSE 38896
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38711: LD_ADDR_VAR 0 9
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_INT 1
38723: PPUSH
38724: CALL_OW 287
38728: PUSH
38729: LD_INT 10
38731: MUL
38732: ST_TO_ADDR
// r := rate / 10 ;
38733: LD_ADDR_VAR 0 7
38737: PUSH
38738: LD_VAR 0 2
38742: PUSH
38743: LD_INT 10
38745: DIVREAL
38746: ST_TO_ADDR
// time := 1 1$00 ;
38747: LD_ADDR_VAR 0 8
38751: PUSH
38752: LD_INT 2100
38754: ST_TO_ADDR
// if amount < min then
38755: LD_VAR 0 9
38759: PUSH
38760: LD_VAR 0 3
38764: LESS
38765: IFFALSE 38783
// r := r * 2 else
38767: LD_ADDR_VAR 0 7
38771: PUSH
38772: LD_VAR 0 7
38776: PUSH
38777: LD_INT 2
38779: MUL
38780: ST_TO_ADDR
38781: GO 38809
// if amount > max then
38783: LD_VAR 0 9
38787: PUSH
38788: LD_VAR 0 4
38792: GREATER
38793: IFFALSE 38809
// r := r / 2 ;
38795: LD_ADDR_VAR 0 7
38799: PUSH
38800: LD_VAR 0 7
38804: PUSH
38805: LD_INT 2
38807: DIVREAL
38808: ST_TO_ADDR
// time := time / r ;
38809: LD_ADDR_VAR 0 8
38813: PUSH
38814: LD_VAR 0 8
38818: PUSH
38819: LD_VAR 0 7
38823: DIVREAL
38824: ST_TO_ADDR
// if time < 0 then
38825: LD_VAR 0 8
38829: PUSH
38830: LD_INT 0
38832: LESS
38833: IFFALSE 38850
// time := time * - 1 ;
38835: LD_ADDR_VAR 0 8
38839: PUSH
38840: LD_VAR 0 8
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: MUL
38849: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38850: LD_VAR 0 8
38854: PUSH
38855: LD_INT 35
38857: PPUSH
38858: LD_INT 875
38860: PPUSH
38861: CALL_OW 12
38865: PLUS
38866: PPUSH
38867: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38871: LD_INT 1
38873: PPUSH
38874: LD_INT 5
38876: PPUSH
38877: CALL_OW 12
38881: PPUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: LD_INT 1
38889: PPUSH
38890: CALL_OW 55
// end ;
38894: GO 38707
// end ;
38896: LD_VAR 0 5
38900: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38901: LD_INT 0
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
// if not turrets or not factories then
38911: LD_VAR 0 1
38915: NOT
38916: PUSH
38917: LD_VAR 0 2
38921: NOT
38922: OR
38923: IFFALSE 38927
// exit ;
38925: GO 39234
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38927: LD_ADDR_VAR 0 10
38931: PUSH
38932: LD_INT 5
38934: PUSH
38935: LD_INT 6
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 4
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 3
38954: PUSH
38955: LD_INT 5
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 24
38969: PUSH
38970: LD_INT 25
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 23
38979: PUSH
38980: LD_INT 27
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 42
38993: PUSH
38994: LD_INT 43
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 44
39003: PUSH
39004: LD_INT 46
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 45
39013: PUSH
39014: LD_INT 47
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// result := [ ] ;
39031: LD_ADDR_VAR 0 3
39035: PUSH
39036: EMPTY
39037: ST_TO_ADDR
// for i in turrets do
39038: LD_ADDR_VAR 0 4
39042: PUSH
39043: LD_VAR 0 1
39047: PUSH
39048: FOR_IN
39049: IFFALSE 39232
// begin nat := GetNation ( i ) ;
39051: LD_ADDR_VAR 0 7
39055: PUSH
39056: LD_VAR 0 4
39060: PPUSH
39061: CALL_OW 248
39065: ST_TO_ADDR
// weapon := 0 ;
39066: LD_ADDR_VAR 0 8
39070: PUSH
39071: LD_INT 0
39073: ST_TO_ADDR
// if not nat then
39074: LD_VAR 0 7
39078: NOT
39079: IFFALSE 39083
// continue ;
39081: GO 39048
// for j in list [ nat ] do
39083: LD_ADDR_VAR 0 5
39087: PUSH
39088: LD_VAR 0 10
39092: PUSH
39093: LD_VAR 0 7
39097: ARRAY
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39141
// if GetBWeapon ( i ) = j [ 1 ] then
39102: LD_VAR 0 4
39106: PPUSH
39107: CALL_OW 269
39111: PUSH
39112: LD_VAR 0 5
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: EQUAL
39121: IFFALSE 39139
// begin weapon := j [ 2 ] ;
39123: LD_ADDR_VAR 0 8
39127: PUSH
39128: LD_VAR 0 5
39132: PUSH
39133: LD_INT 2
39135: ARRAY
39136: ST_TO_ADDR
// break ;
39137: GO 39141
// end ;
39139: GO 39099
39141: POP
39142: POP
// if not weapon then
39143: LD_VAR 0 8
39147: NOT
39148: IFFALSE 39152
// continue ;
39150: GO 39048
// for k in factories do
39152: LD_ADDR_VAR 0 6
39156: PUSH
39157: LD_VAR 0 2
39161: PUSH
39162: FOR_IN
39163: IFFALSE 39228
// begin weapons := AvailableWeaponList ( k ) ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_VAR 0 6
39174: PPUSH
39175: CALL_OW 478
39179: ST_TO_ADDR
// if not weapons then
39180: LD_VAR 0 9
39184: NOT
39185: IFFALSE 39189
// continue ;
39187: GO 39162
// if weapon in weapons then
39189: LD_VAR 0 8
39193: PUSH
39194: LD_VAR 0 9
39198: IN
39199: IFFALSE 39226
// begin result := [ i , weapon ] ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_VAR 0 4
39210: PUSH
39211: LD_VAR 0 8
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: ST_TO_ADDR
// exit ;
39220: POP
39221: POP
39222: POP
39223: POP
39224: GO 39234
// end ; end ;
39226: GO 39162
39228: POP
39229: POP
// end ;
39230: GO 39048
39232: POP
39233: POP
// end ;
39234: LD_VAR 0 3
39238: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39239: LD_INT 0
39241: PPUSH
// if not side or side > 8 then
39242: LD_VAR 0 3
39246: NOT
39247: PUSH
39248: LD_VAR 0 3
39252: PUSH
39253: LD_INT 8
39255: GREATER
39256: OR
39257: IFFALSE 39261
// exit ;
39259: GO 39320
// if not range then
39261: LD_VAR 0 4
39265: NOT
39266: IFFALSE 39277
// range := - 12 ;
39268: LD_ADDR_VAR 0 4
39272: PUSH
39273: LD_INT 12
39275: NEG
39276: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39277: LD_VAR 0 1
39281: PPUSH
39282: LD_VAR 0 2
39286: PPUSH
39287: LD_VAR 0 3
39291: PPUSH
39292: LD_VAR 0 4
39296: PPUSH
39297: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39301: LD_VAR 0 1
39305: PPUSH
39306: LD_VAR 0 2
39310: PPUSH
39311: LD_VAR 0 3
39315: PPUSH
39316: CALL_OW 331
// end ;
39320: LD_VAR 0 5
39324: RET
// export function Video ( mode ) ; begin
39325: LD_INT 0
39327: PPUSH
// ingame_video = mode ;
39328: LD_ADDR_OWVAR 52
39332: PUSH
39333: LD_VAR 0 1
39337: ST_TO_ADDR
// interface_hidden = mode ;
39338: LD_ADDR_OWVAR 54
39342: PUSH
39343: LD_VAR 0 1
39347: ST_TO_ADDR
// end ;
39348: LD_VAR 0 2
39352: RET
// export function Join ( array , element ) ; begin
39353: LD_INT 0
39355: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: LD_VAR 0 1
39365: PPUSH
39366: LD_VAR 0 1
39370: PUSH
39371: LD_INT 1
39373: PLUS
39374: PPUSH
39375: LD_VAR 0 2
39379: PPUSH
39380: CALL_OW 1
39384: ST_TO_ADDR
// end ;
39385: LD_VAR 0 3
39389: RET
// export function JoinUnion ( array , element ) ; begin
39390: LD_INT 0
39392: PPUSH
// result := array union element ;
39393: LD_ADDR_VAR 0 3
39397: PUSH
39398: LD_VAR 0 1
39402: PUSH
39403: LD_VAR 0 2
39407: UNION
39408: ST_TO_ADDR
// end ;
39409: LD_VAR 0 3
39413: RET
// export function GetBehemoths ( side ) ; begin
39414: LD_INT 0
39416: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39417: LD_ADDR_VAR 0 2
39421: PUSH
39422: LD_INT 22
39424: PUSH
39425: LD_VAR 0 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 31
39436: PUSH
39437: LD_INT 25
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PPUSH
39448: CALL_OW 69
39452: ST_TO_ADDR
// end ;
39453: LD_VAR 0 2
39457: RET
// export function Shuffle ( array ) ; var i , index ; begin
39458: LD_INT 0
39460: PPUSH
39461: PPUSH
39462: PPUSH
// result := [ ] ;
39463: LD_ADDR_VAR 0 2
39467: PUSH
39468: EMPTY
39469: ST_TO_ADDR
// if not array then
39470: LD_VAR 0 1
39474: NOT
39475: IFFALSE 39479
// exit ;
39477: GO 39578
// Randomize ;
39479: CALL_OW 10
// for i = array downto 1 do
39483: LD_ADDR_VAR 0 3
39487: PUSH
39488: DOUBLE
39489: LD_VAR 0 1
39493: INC
39494: ST_TO_ADDR
39495: LD_INT 1
39497: PUSH
39498: FOR_DOWNTO
39499: IFFALSE 39576
// begin index := rand ( 1 , array ) ;
39501: LD_ADDR_VAR 0 4
39505: PUSH
39506: LD_INT 1
39508: PPUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: CALL_OW 12
39518: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39519: LD_ADDR_VAR 0 2
39523: PUSH
39524: LD_VAR 0 2
39528: PPUSH
39529: LD_VAR 0 2
39533: PUSH
39534: LD_INT 1
39536: PLUS
39537: PPUSH
39538: LD_VAR 0 1
39542: PUSH
39543: LD_VAR 0 4
39547: ARRAY
39548: PPUSH
39549: CALL_OW 2
39553: ST_TO_ADDR
// array := Delete ( array , index ) ;
39554: LD_ADDR_VAR 0 1
39558: PUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: LD_VAR 0 4
39568: PPUSH
39569: CALL_OW 3
39573: ST_TO_ADDR
// end ;
39574: GO 39498
39576: POP
39577: POP
// end ;
39578: LD_VAR 0 2
39582: RET
// export function GetBaseMaterials ( base ) ; begin
39583: LD_INT 0
39585: PPUSH
// result := [ 0 , 0 , 0 ] ;
39586: LD_ADDR_VAR 0 2
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// if not base then
39605: LD_VAR 0 1
39609: NOT
39610: IFFALSE 39614
// exit ;
39612: GO 39663
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39614: LD_ADDR_VAR 0 2
39618: PUSH
39619: LD_VAR 0 1
39623: PPUSH
39624: LD_INT 1
39626: PPUSH
39627: CALL_OW 275
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: LD_INT 2
39639: PPUSH
39640: CALL_OW 275
39644: PUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: LD_INT 3
39652: PPUSH
39653: CALL_OW 275
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// end ;
39663: LD_VAR 0 2
39667: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39668: LD_INT 0
39670: PPUSH
39671: PPUSH
// result := array ;
39672: LD_ADDR_VAR 0 3
39676: PUSH
39677: LD_VAR 0 1
39681: ST_TO_ADDR
// if size >= result then
39682: LD_VAR 0 2
39686: PUSH
39687: LD_VAR 0 3
39691: GREATEREQUAL
39692: IFFALSE 39696
// exit ;
39694: GO 39746
// if size then
39696: LD_VAR 0 2
39700: IFFALSE 39746
// for i := array downto size do
39702: LD_ADDR_VAR 0 4
39706: PUSH
39707: DOUBLE
39708: LD_VAR 0 1
39712: INC
39713: ST_TO_ADDR
39714: LD_VAR 0 2
39718: PUSH
39719: FOR_DOWNTO
39720: IFFALSE 39744
// result := Delete ( result , result ) ;
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_VAR 0 3
39731: PPUSH
39732: LD_VAR 0 3
39736: PPUSH
39737: CALL_OW 3
39741: ST_TO_ADDR
39742: GO 39719
39744: POP
39745: POP
// end ;
39746: LD_VAR 0 3
39750: RET
// export function ComExit ( unit ) ; var tmp ; begin
39751: LD_INT 0
39753: PPUSH
39754: PPUSH
// if not IsInUnit ( unit ) then
39755: LD_VAR 0 1
39759: PPUSH
39760: CALL_OW 310
39764: NOT
39765: IFFALSE 39769
// exit ;
39767: GO 39829
// tmp := IsInUnit ( unit ) ;
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 310
39783: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39784: LD_VAR 0 3
39788: PPUSH
39789: CALL_OW 247
39793: PUSH
39794: LD_INT 2
39796: EQUAL
39797: IFFALSE 39810
// ComExitVehicle ( unit ) else
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 121
39808: GO 39819
// ComExitBuilding ( unit ) ;
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 122
// result := tmp ;
39819: LD_ADDR_VAR 0 2
39823: PUSH
39824: LD_VAR 0 3
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 2
39833: RET
// export function ComExitAll ( units ) ; var i ; begin
39834: LD_INT 0
39836: PPUSH
39837: PPUSH
// if not units then
39838: LD_VAR 0 1
39842: NOT
39843: IFFALSE 39847
// exit ;
39845: GO 39873
// for i in units do
39847: LD_ADDR_VAR 0 3
39851: PUSH
39852: LD_VAR 0 1
39856: PUSH
39857: FOR_IN
39858: IFFALSE 39871
// ComExit ( i ) ;
39860: LD_VAR 0 3
39864: PPUSH
39865: CALL 39751 0 1
39869: GO 39857
39871: POP
39872: POP
// end ;
39873: LD_VAR 0 2
39877: RET
// export function ResetHc ; begin
39878: LD_INT 0
39880: PPUSH
// InitHc ;
39881: CALL_OW 19
// hc_importance := 0 ;
39885: LD_ADDR_OWVAR 32
39889: PUSH
39890: LD_INT 0
39892: ST_TO_ADDR
// end ;
39893: LD_VAR 0 1
39897: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39898: LD_INT 0
39900: PPUSH
39901: PPUSH
39902: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39903: LD_ADDR_VAR 0 6
39907: PUSH
39908: LD_VAR 0 1
39912: PUSH
39913: LD_VAR 0 3
39917: PLUS
39918: PUSH
39919: LD_INT 2
39921: DIV
39922: ST_TO_ADDR
// if _x < 0 then
39923: LD_VAR 0 6
39927: PUSH
39928: LD_INT 0
39930: LESS
39931: IFFALSE 39948
// _x := _x * - 1 ;
39933: LD_ADDR_VAR 0 6
39937: PUSH
39938: LD_VAR 0 6
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: MUL
39947: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39948: LD_ADDR_VAR 0 7
39952: PUSH
39953: LD_VAR 0 2
39957: PUSH
39958: LD_VAR 0 4
39962: PLUS
39963: PUSH
39964: LD_INT 2
39966: DIV
39967: ST_TO_ADDR
// if _y < 0 then
39968: LD_VAR 0 7
39972: PUSH
39973: LD_INT 0
39975: LESS
39976: IFFALSE 39993
// _y := _y * - 1 ;
39978: LD_ADDR_VAR 0 7
39982: PUSH
39983: LD_VAR 0 7
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: MUL
39992: ST_TO_ADDR
// result := [ _x , _y ] ;
39993: LD_ADDR_VAR 0 5
39997: PUSH
39998: LD_VAR 0 6
40002: PUSH
40003: LD_VAR 0 7
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: ST_TO_ADDR
// end ;
40012: LD_VAR 0 5
40016: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
// task := GetTaskList ( unit ) ;
40023: LD_ADDR_VAR 0 7
40027: PUSH
40028: LD_VAR 0 1
40032: PPUSH
40033: CALL_OW 437
40037: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40038: LD_VAR 0 7
40042: NOT
40043: PUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: LD_VAR 0 2
40053: PPUSH
40054: CALL_OW 308
40058: NOT
40059: AND
40060: IFFALSE 40064
// exit ;
40062: GO 40182
// if IsInArea ( unit , area ) then
40064: LD_VAR 0 1
40068: PPUSH
40069: LD_VAR 0 2
40073: PPUSH
40074: CALL_OW 308
40078: IFFALSE 40096
// begin ComMoveToArea ( unit , goAway ) ;
40080: LD_VAR 0 1
40084: PPUSH
40085: LD_VAR 0 3
40089: PPUSH
40090: CALL_OW 113
// exit ;
40094: GO 40182
// end ; if task [ 1 ] [ 1 ] <> M then
40096: LD_VAR 0 7
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PUSH
40109: LD_STRING M
40111: NONEQUAL
40112: IFFALSE 40116
// exit ;
40114: GO 40182
// x := task [ 1 ] [ 2 ] ;
40116: LD_ADDR_VAR 0 5
40120: PUSH
40121: LD_VAR 0 7
40125: PUSH
40126: LD_INT 1
40128: ARRAY
40129: PUSH
40130: LD_INT 2
40132: ARRAY
40133: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40134: LD_ADDR_VAR 0 6
40138: PUSH
40139: LD_VAR 0 7
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: PUSH
40148: LD_INT 3
40150: ARRAY
40151: ST_TO_ADDR
// if InArea ( x , y , area ) then
40152: LD_VAR 0 5
40156: PPUSH
40157: LD_VAR 0 6
40161: PPUSH
40162: LD_VAR 0 2
40166: PPUSH
40167: CALL_OW 309
40171: IFFALSE 40182
// ComStop ( unit ) ;
40173: LD_VAR 0 1
40177: PPUSH
40178: CALL_OW 141
// end ;
40182: LD_VAR 0 4
40186: RET
// export function Abs ( value ) ; begin
40187: LD_INT 0
40189: PPUSH
// result := value ;
40190: LD_ADDR_VAR 0 2
40194: PUSH
40195: LD_VAR 0 1
40199: ST_TO_ADDR
// if value < 0 then
40200: LD_VAR 0 1
40204: PUSH
40205: LD_INT 0
40207: LESS
40208: IFFALSE 40225
// result := value * - 1 ;
40210: LD_ADDR_VAR 0 2
40214: PUSH
40215: LD_VAR 0 1
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: MUL
40224: ST_TO_ADDR
// end ;
40225: LD_VAR 0 2
40229: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40230: LD_INT 0
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
// if not unit or not building then
40240: LD_VAR 0 1
40244: NOT
40245: PUSH
40246: LD_VAR 0 2
40250: NOT
40251: OR
40252: IFFALSE 40256
// exit ;
40254: GO 40482
// x := GetX ( building ) ;
40256: LD_ADDR_VAR 0 4
40260: PUSH
40261: LD_VAR 0 2
40265: PPUSH
40266: CALL_OW 250
40270: ST_TO_ADDR
// y := GetY ( building ) ;
40271: LD_ADDR_VAR 0 6
40275: PUSH
40276: LD_VAR 0 2
40280: PPUSH
40281: CALL_OW 251
40285: ST_TO_ADDR
// d := GetDir ( building ) ;
40286: LD_ADDR_VAR 0 8
40290: PUSH
40291: LD_VAR 0 2
40295: PPUSH
40296: CALL_OW 254
40300: ST_TO_ADDR
// r := 4 ;
40301: LD_ADDR_VAR 0 9
40305: PUSH
40306: LD_INT 4
40308: ST_TO_ADDR
// for i := 1 to 5 do
40309: LD_ADDR_VAR 0 10
40313: PUSH
40314: DOUBLE
40315: LD_INT 1
40317: DEC
40318: ST_TO_ADDR
40319: LD_INT 5
40321: PUSH
40322: FOR_TO
40323: IFFALSE 40480
// begin _x := ShiftX ( x , d , r + i ) ;
40325: LD_ADDR_VAR 0 5
40329: PUSH
40330: LD_VAR 0 4
40334: PPUSH
40335: LD_VAR 0 8
40339: PPUSH
40340: LD_VAR 0 9
40344: PUSH
40345: LD_VAR 0 10
40349: PLUS
40350: PPUSH
40351: CALL_OW 272
40355: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40356: LD_ADDR_VAR 0 7
40360: PUSH
40361: LD_VAR 0 6
40365: PPUSH
40366: LD_VAR 0 8
40370: PPUSH
40371: LD_VAR 0 9
40375: PUSH
40376: LD_VAR 0 10
40380: PLUS
40381: PPUSH
40382: CALL_OW 273
40386: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40387: LD_VAR 0 5
40391: PPUSH
40392: LD_VAR 0 7
40396: PPUSH
40397: CALL_OW 488
40401: PUSH
40402: LD_VAR 0 5
40406: PPUSH
40407: LD_VAR 0 7
40411: PPUSH
40412: CALL_OW 428
40416: PPUSH
40417: CALL_OW 247
40421: PUSH
40422: LD_INT 3
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: IN
40432: NOT
40433: AND
40434: IFFALSE 40478
// begin ComMoveXY ( unit , _x , _y ) ;
40436: LD_VAR 0 1
40440: PPUSH
40441: LD_VAR 0 5
40445: PPUSH
40446: LD_VAR 0 7
40450: PPUSH
40451: CALL_OW 111
// result := [ _x , _y ] ;
40455: LD_ADDR_VAR 0 3
40459: PUSH
40460: LD_VAR 0 5
40464: PUSH
40465: LD_VAR 0 7
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// exit ;
40474: POP
40475: POP
40476: GO 40482
// end ; end ;
40478: GO 40322
40480: POP
40481: POP
// end ;
40482: LD_VAR 0 3
40486: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40487: LD_INT 0
40489: PPUSH
40490: PPUSH
40491: PPUSH
// result := 0 ;
40492: LD_ADDR_VAR 0 3
40496: PUSH
40497: LD_INT 0
40499: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40500: LD_VAR 0 1
40504: PUSH
40505: LD_INT 0
40507: LESS
40508: PUSH
40509: LD_VAR 0 1
40513: PUSH
40514: LD_INT 8
40516: GREATER
40517: OR
40518: PUSH
40519: LD_VAR 0 2
40523: PUSH
40524: LD_INT 0
40526: LESS
40527: OR
40528: PUSH
40529: LD_VAR 0 2
40533: PUSH
40534: LD_INT 8
40536: GREATER
40537: OR
40538: IFFALSE 40542
// exit ;
40540: GO 40617
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40542: LD_ADDR_VAR 0 4
40546: PUSH
40547: LD_INT 22
40549: PUSH
40550: LD_VAR 0 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PPUSH
40559: CALL_OW 69
40563: PUSH
40564: FOR_IN
40565: IFFALSE 40615
// begin un := UnitShoot ( i ) ;
40567: LD_ADDR_VAR 0 5
40571: PUSH
40572: LD_VAR 0 4
40576: PPUSH
40577: CALL_OW 504
40581: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40582: LD_VAR 0 5
40586: PPUSH
40587: CALL_OW 255
40591: PUSH
40592: LD_VAR 0 1
40596: EQUAL
40597: IFFALSE 40613
// begin result := un ;
40599: LD_ADDR_VAR 0 3
40603: PUSH
40604: LD_VAR 0 5
40608: ST_TO_ADDR
// exit ;
40609: POP
40610: POP
40611: GO 40617
// end ; end ;
40613: GO 40564
40615: POP
40616: POP
// end ;
40617: LD_VAR 0 3
40621: RET
// export function GetCargoBay ( units ) ; begin
40622: LD_INT 0
40624: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40625: LD_ADDR_VAR 0 2
40629: PUSH
40630: LD_VAR 0 1
40634: PPUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 34
40640: PUSH
40641: LD_INT 12
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 34
40650: PUSH
40651: LD_INT 51
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 34
40660: PUSH
40661: LD_INT 32
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 34
40670: PUSH
40671: LD_INT 89
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: PPUSH
40685: CALL_OW 72
40689: ST_TO_ADDR
// end ;
40690: LD_VAR 0 2
40694: RET
// export function Negate ( value ) ; begin
40695: LD_INT 0
40697: PPUSH
// result := not value ;
40698: LD_ADDR_VAR 0 2
40702: PUSH
40703: LD_VAR 0 1
40707: NOT
40708: ST_TO_ADDR
// end ;
40709: LD_VAR 0 2
40713: RET
// export function Inc ( value ) ; begin
40714: LD_INT 0
40716: PPUSH
// result := value + 1 ;
40717: LD_ADDR_VAR 0 2
40721: PUSH
40722: LD_VAR 0 1
40726: PUSH
40727: LD_INT 1
40729: PLUS
40730: ST_TO_ADDR
// end ;
40731: LD_VAR 0 2
40735: RET
// export function Dec ( value ) ; begin
40736: LD_INT 0
40738: PPUSH
// result := value - 1 ;
40739: LD_ADDR_VAR 0 2
40743: PUSH
40744: LD_VAR 0 1
40748: PUSH
40749: LD_INT 1
40751: MINUS
40752: ST_TO_ADDR
// end ;
40753: LD_VAR 0 2
40757: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40758: LD_INT 0
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40768: LD_VAR 0 1
40772: PPUSH
40773: LD_VAR 0 2
40777: PPUSH
40778: CALL_OW 488
40782: NOT
40783: PUSH
40784: LD_VAR 0 3
40788: PPUSH
40789: LD_VAR 0 4
40793: PPUSH
40794: CALL_OW 488
40798: NOT
40799: OR
40800: IFFALSE 40813
// begin result := - 1 ;
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: ST_TO_ADDR
// exit ;
40811: GO 41048
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40813: LD_ADDR_VAR 0 12
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: LD_VAR 0 2
40827: PPUSH
40828: LD_VAR 0 3
40832: PPUSH
40833: LD_VAR 0 4
40837: PPUSH
40838: CALL 39898 0 4
40842: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40843: LD_ADDR_VAR 0 11
40847: PUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: LD_VAR 0 2
40857: PPUSH
40858: LD_VAR 0 12
40862: PUSH
40863: LD_INT 1
40865: ARRAY
40866: PPUSH
40867: LD_VAR 0 12
40871: PUSH
40872: LD_INT 2
40874: ARRAY
40875: PPUSH
40876: CALL_OW 298
40880: ST_TO_ADDR
// distance := 9999 ;
40881: LD_ADDR_VAR 0 10
40885: PUSH
40886: LD_INT 9999
40888: ST_TO_ADDR
// for i := 0 to 5 do
40889: LD_ADDR_VAR 0 6
40893: PUSH
40894: DOUBLE
40895: LD_INT 0
40897: DEC
40898: ST_TO_ADDR
40899: LD_INT 5
40901: PUSH
40902: FOR_TO
40903: IFFALSE 41046
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40905: LD_ADDR_VAR 0 7
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: LD_VAR 0 6
40919: PPUSH
40920: LD_VAR 0 11
40924: PPUSH
40925: CALL_OW 272
40929: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40930: LD_ADDR_VAR 0 8
40934: PUSH
40935: LD_VAR 0 2
40939: PPUSH
40940: LD_VAR 0 6
40944: PPUSH
40945: LD_VAR 0 11
40949: PPUSH
40950: CALL_OW 273
40954: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40955: LD_VAR 0 7
40959: PPUSH
40960: LD_VAR 0 8
40964: PPUSH
40965: CALL_OW 488
40969: NOT
40970: IFFALSE 40974
// continue ;
40972: GO 40902
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40974: LD_ADDR_VAR 0 9
40978: PUSH
40979: LD_VAR 0 12
40983: PUSH
40984: LD_INT 1
40986: ARRAY
40987: PPUSH
40988: LD_VAR 0 12
40992: PUSH
40993: LD_INT 2
40995: ARRAY
40996: PPUSH
40997: LD_VAR 0 7
41001: PPUSH
41002: LD_VAR 0 8
41006: PPUSH
41007: CALL_OW 298
41011: ST_TO_ADDR
// if tmp < distance then
41012: LD_VAR 0 9
41016: PUSH
41017: LD_VAR 0 10
41021: LESS
41022: IFFALSE 41044
// begin result := i ;
41024: LD_ADDR_VAR 0 5
41028: PUSH
41029: LD_VAR 0 6
41033: ST_TO_ADDR
// distance := tmp ;
41034: LD_ADDR_VAR 0 10
41038: PUSH
41039: LD_VAR 0 9
41043: ST_TO_ADDR
// end ; end ;
41044: GO 40902
41046: POP
41047: POP
// end ;
41048: LD_VAR 0 5
41052: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
// if not driver or not IsInUnit ( driver ) then
41057: LD_VAR 0 1
41061: NOT
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 310
41072: NOT
41073: OR
41074: IFFALSE 41078
// exit ;
41076: GO 41168
// vehicle := IsInUnit ( driver ) ;
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 310
41092: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41093: LD_VAR 0 1
41097: PPUSH
41098: LD_STRING \
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: PUSH
41128: LD_STRING E
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_VAR 0 3
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PPUSH
41164: CALL_OW 446
// end ;
41168: LD_VAR 0 2
41172: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41173: LD_INT 0
41175: PPUSH
41176: PPUSH
// if not driver or not IsInUnit ( driver ) then
41177: LD_VAR 0 1
41181: NOT
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 310
41192: NOT
41193: OR
41194: IFFALSE 41198
// exit ;
41196: GO 41288
// vehicle := IsInUnit ( driver ) ;
41198: LD_ADDR_VAR 0 3
41202: PUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 310
41212: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41213: LD_VAR 0 1
41217: PPUSH
41218: LD_STRING \
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: PUSH
41248: LD_STRING E
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_VAR 0 3
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PPUSH
41284: CALL_OW 447
// end ;
41288: LD_VAR 0 2
41292: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41293: LD_INT 0
41295: PPUSH
41296: PPUSH
41297: PPUSH
// tmp := [ ] ;
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: EMPTY
41304: ST_TO_ADDR
// for i in units do
41305: LD_ADDR_VAR 0 4
41309: PUSH
41310: LD_VAR 0 1
41314: PUSH
41315: FOR_IN
41316: IFFALSE 41354
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41318: LD_ADDR_VAR 0 5
41322: PUSH
41323: LD_VAR 0 5
41327: PPUSH
41328: LD_VAR 0 5
41332: PUSH
41333: LD_INT 1
41335: PLUS
41336: PPUSH
41337: LD_VAR 0 4
41341: PPUSH
41342: CALL_OW 256
41346: PPUSH
41347: CALL_OW 2
41351: ST_TO_ADDR
41352: GO 41315
41354: POP
41355: POP
// if not tmp then
41356: LD_VAR 0 5
41360: NOT
41361: IFFALSE 41365
// exit ;
41363: GO 41413
// if asc then
41365: LD_VAR 0 2
41369: IFFALSE 41393
// result := SortListByListAsc ( units , tmp ) else
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: LD_VAR 0 5
41385: PPUSH
41386: CALL_OW 76
41390: ST_TO_ADDR
41391: GO 41413
// result := SortListByListDesc ( units , tmp ) ;
41393: LD_ADDR_VAR 0 3
41397: PUSH
41398: LD_VAR 0 1
41402: PPUSH
41403: LD_VAR 0 5
41407: PPUSH
41408: CALL_OW 77
41412: ST_TO_ADDR
// end ;
41413: LD_VAR 0 3
41417: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41418: LD_INT 0
41420: PPUSH
41421: PPUSH
// task := GetTaskList ( mech ) ;
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 437
41436: ST_TO_ADDR
// if not task then
41437: LD_VAR 0 4
41441: NOT
41442: IFFALSE 41446
// exit ;
41444: GO 41488
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_VAR 0 4
41455: PUSH
41456: LD_INT 1
41458: ARRAY
41459: PUSH
41460: LD_INT 1
41462: ARRAY
41463: PUSH
41464: LD_STRING r
41466: EQUAL
41467: PUSH
41468: LD_VAR 0 4
41472: PUSH
41473: LD_INT 1
41475: ARRAY
41476: PUSH
41477: LD_INT 4
41479: ARRAY
41480: PUSH
41481: LD_VAR 0 2
41485: EQUAL
41486: AND
41487: ST_TO_ADDR
// end ;
41488: LD_VAR 0 3
41492: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41493: LD_INT 0
41495: PPUSH
// SetDir ( unit , d ) ;
41496: LD_VAR 0 1
41500: PPUSH
41501: LD_VAR 0 4
41505: PPUSH
41506: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41510: LD_VAR 0 1
41514: PPUSH
41515: LD_VAR 0 2
41519: PPUSH
41520: LD_VAR 0 3
41524: PPUSH
41525: LD_VAR 0 5
41529: PPUSH
41530: CALL_OW 48
// end ;
41534: LD_VAR 0 6
41538: RET
// export function ToNaturalNumber ( number ) ; begin
41539: LD_INT 0
41541: PPUSH
// result := number div 1 ;
41542: LD_ADDR_VAR 0 2
41546: PUSH
41547: LD_VAR 0 1
41551: PUSH
41552: LD_INT 1
41554: DIV
41555: ST_TO_ADDR
// if number < 0 then
41556: LD_VAR 0 1
41560: PUSH
41561: LD_INT 0
41563: LESS
41564: IFFALSE 41574
// result := 0 ;
41566: LD_ADDR_VAR 0 2
41570: PUSH
41571: LD_INT 0
41573: ST_TO_ADDR
// end ;
41574: LD_VAR 0 2
41578: RET
// export function SortByClass ( units , class ) ; var un ; begin
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
// if not units or not class then
41583: LD_VAR 0 1
41587: NOT
41588: PUSH
41589: LD_VAR 0 2
41593: NOT
41594: OR
41595: IFFALSE 41599
// exit ;
41597: GO 41694
// result := [ ] ;
41599: LD_ADDR_VAR 0 3
41603: PUSH
41604: EMPTY
41605: ST_TO_ADDR
// for un in units do
41606: LD_ADDR_VAR 0 4
41610: PUSH
41611: LD_VAR 0 1
41615: PUSH
41616: FOR_IN
41617: IFFALSE 41692
// if GetClass ( un ) = class then
41619: LD_VAR 0 4
41623: PPUSH
41624: CALL_OW 257
41628: PUSH
41629: LD_VAR 0 2
41633: EQUAL
41634: IFFALSE 41661
// result := Insert ( result , 1 , un ) else
41636: LD_ADDR_VAR 0 3
41640: PUSH
41641: LD_VAR 0 3
41645: PPUSH
41646: LD_INT 1
41648: PPUSH
41649: LD_VAR 0 4
41653: PPUSH
41654: CALL_OW 2
41658: ST_TO_ADDR
41659: GO 41690
// result := Replace ( result , result + 1 , un ) ;
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_VAR 0 3
41670: PPUSH
41671: LD_VAR 0 3
41675: PUSH
41676: LD_INT 1
41678: PLUS
41679: PPUSH
41680: LD_VAR 0 4
41684: PPUSH
41685: CALL_OW 1
41689: ST_TO_ADDR
41690: GO 41616
41692: POP
41693: POP
// end ;
41694: LD_VAR 0 3
41698: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41699: LD_INT 0
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
// result := [ ] ;
41708: LD_ADDR_VAR 0 4
41712: PUSH
41713: EMPTY
41714: ST_TO_ADDR
// if x - r < 0 then
41715: LD_VAR 0 1
41719: PUSH
41720: LD_VAR 0 3
41724: MINUS
41725: PUSH
41726: LD_INT 0
41728: LESS
41729: IFFALSE 41741
// min_x := 0 else
41731: LD_ADDR_VAR 0 8
41735: PUSH
41736: LD_INT 0
41738: ST_TO_ADDR
41739: GO 41757
// min_x := x - r ;
41741: LD_ADDR_VAR 0 8
41745: PUSH
41746: LD_VAR 0 1
41750: PUSH
41751: LD_VAR 0 3
41755: MINUS
41756: ST_TO_ADDR
// if y - r < 0 then
41757: LD_VAR 0 2
41761: PUSH
41762: LD_VAR 0 3
41766: MINUS
41767: PUSH
41768: LD_INT 0
41770: LESS
41771: IFFALSE 41783
// min_y := 0 else
41773: LD_ADDR_VAR 0 7
41777: PUSH
41778: LD_INT 0
41780: ST_TO_ADDR
41781: GO 41799
// min_y := y - r ;
41783: LD_ADDR_VAR 0 7
41787: PUSH
41788: LD_VAR 0 2
41792: PUSH
41793: LD_VAR 0 3
41797: MINUS
41798: ST_TO_ADDR
// max_x := x + r ;
41799: LD_ADDR_VAR 0 9
41803: PUSH
41804: LD_VAR 0 1
41808: PUSH
41809: LD_VAR 0 3
41813: PLUS
41814: ST_TO_ADDR
// max_y := y + r ;
41815: LD_ADDR_VAR 0 10
41819: PUSH
41820: LD_VAR 0 2
41824: PUSH
41825: LD_VAR 0 3
41829: PLUS
41830: ST_TO_ADDR
// for _x = min_x to max_x do
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: DOUBLE
41837: LD_VAR 0 8
41841: DEC
41842: ST_TO_ADDR
41843: LD_VAR 0 9
41847: PUSH
41848: FOR_TO
41849: IFFALSE 41950
// for _y = min_y to max_y do
41851: LD_ADDR_VAR 0 6
41855: PUSH
41856: DOUBLE
41857: LD_VAR 0 7
41861: DEC
41862: ST_TO_ADDR
41863: LD_VAR 0 10
41867: PUSH
41868: FOR_TO
41869: IFFALSE 41946
// begin if not ValidHex ( _x , _y ) then
41871: LD_VAR 0 5
41875: PPUSH
41876: LD_VAR 0 6
41880: PPUSH
41881: CALL_OW 488
41885: NOT
41886: IFFALSE 41890
// continue ;
41888: GO 41868
// if GetResourceTypeXY ( _x , _y ) then
41890: LD_VAR 0 5
41894: PPUSH
41895: LD_VAR 0 6
41899: PPUSH
41900: CALL_OW 283
41904: IFFALSE 41944
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41906: LD_ADDR_VAR 0 4
41910: PUSH
41911: LD_VAR 0 4
41915: PPUSH
41916: LD_VAR 0 4
41920: PUSH
41921: LD_INT 1
41923: PLUS
41924: PPUSH
41925: LD_VAR 0 5
41929: PUSH
41930: LD_VAR 0 6
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PPUSH
41939: CALL_OW 1
41943: ST_TO_ADDR
// end ;
41944: GO 41868
41946: POP
41947: POP
41948: GO 41848
41950: POP
41951: POP
// end ;
41952: LD_VAR 0 4
41956: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41957: LD_INT 0
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
// if not units then
41967: LD_VAR 0 1
41971: NOT
41972: IFFALSE 41976
// exit ;
41974: GO 42504
// result := UnitFilter ( units , [ f_ok ] ) ;
41976: LD_ADDR_VAR 0 3
41980: PUSH
41981: LD_VAR 0 1
41985: PPUSH
41986: LD_INT 50
41988: PUSH
41989: EMPTY
41990: LIST
41991: PPUSH
41992: CALL_OW 72
41996: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41997: LD_ADDR_VAR 0 8
42001: PUSH
42002: LD_VAR 0 1
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: CALL_OW 255
42015: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42016: LD_ADDR_VAR 0 10
42020: PUSH
42021: LD_INT 29
42023: PUSH
42024: LD_INT 91
42026: PUSH
42027: LD_INT 49
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// if not result then
42035: LD_VAR 0 3
42039: NOT
42040: IFFALSE 42044
// exit ;
42042: GO 42504
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42044: LD_ADDR_VAR 0 5
42048: PUSH
42049: LD_INT 81
42051: PUSH
42052: LD_VAR 0 8
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PPUSH
42061: CALL_OW 69
42065: ST_TO_ADDR
// for i in result do
42066: LD_ADDR_VAR 0 4
42070: PUSH
42071: LD_VAR 0 3
42075: PUSH
42076: FOR_IN
42077: IFFALSE 42502
// begin tag := GetTag ( i ) + 1 ;
42079: LD_ADDR_VAR 0 9
42083: PUSH
42084: LD_VAR 0 4
42088: PPUSH
42089: CALL_OW 110
42093: PUSH
42094: LD_INT 1
42096: PLUS
42097: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42098: LD_ADDR_VAR 0 7
42102: PUSH
42103: LD_VAR 0 4
42107: PPUSH
42108: CALL_OW 250
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 251
42122: PPUSH
42123: LD_INT 4
42125: PPUSH
42126: CALL 41699 0 3
42130: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42131: LD_VAR 0 4
42135: PPUSH
42136: CALL_OW 247
42140: PUSH
42141: LD_INT 2
42143: EQUAL
42144: PUSH
42145: LD_VAR 0 7
42149: PUSH
42150: LD_INT 2
42152: GREATER
42153: AND
42154: PUSH
42155: LD_VAR 0 4
42159: PPUSH
42160: CALL_OW 264
42164: PUSH
42165: LD_VAR 0 10
42169: IN
42170: NOT
42171: AND
42172: IFFALSE 42211
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42174: LD_VAR 0 4
42178: PPUSH
42179: LD_VAR 0 7
42183: PUSH
42184: LD_INT 1
42186: ARRAY
42187: PUSH
42188: LD_INT 1
42190: ARRAY
42191: PPUSH
42192: LD_VAR 0 7
42196: PUSH
42197: LD_INT 1
42199: ARRAY
42200: PUSH
42201: LD_INT 2
42203: ARRAY
42204: PPUSH
42205: CALL_OW 116
42209: GO 42500
// if path > tag then
42211: LD_VAR 0 2
42215: PUSH
42216: LD_VAR 0 9
42220: GREATER
42221: IFFALSE 42429
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42223: LD_ADDR_VAR 0 6
42227: PUSH
42228: LD_VAR 0 5
42232: PPUSH
42233: LD_INT 91
42235: PUSH
42236: LD_VAR 0 4
42240: PUSH
42241: LD_INT 8
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: PPUSH
42249: CALL_OW 72
42253: ST_TO_ADDR
// if nearEnemy then
42254: LD_VAR 0 6
42258: IFFALSE 42327
// begin if GetWeapon ( i ) = ru_time_lapser then
42260: LD_VAR 0 4
42264: PPUSH
42265: CALL_OW 264
42269: PUSH
42270: LD_INT 49
42272: EQUAL
42273: IFFALSE 42301
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42275: LD_VAR 0 4
42279: PPUSH
42280: LD_VAR 0 6
42284: PPUSH
42285: LD_VAR 0 4
42289: PPUSH
42290: CALL_OW 74
42294: PPUSH
42295: CALL_OW 112
42299: GO 42325
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42301: LD_VAR 0 4
42305: PPUSH
42306: LD_VAR 0 6
42310: PPUSH
42311: LD_VAR 0 4
42315: PPUSH
42316: CALL_OW 74
42320: PPUSH
42321: CALL 43575 0 2
// end else
42325: GO 42427
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42327: LD_VAR 0 4
42331: PPUSH
42332: LD_VAR 0 2
42336: PUSH
42337: LD_VAR 0 9
42341: ARRAY
42342: PUSH
42343: LD_INT 1
42345: ARRAY
42346: PPUSH
42347: LD_VAR 0 2
42351: PUSH
42352: LD_VAR 0 9
42356: ARRAY
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: PPUSH
42362: CALL_OW 297
42366: PUSH
42367: LD_INT 6
42369: GREATER
42370: IFFALSE 42413
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42372: LD_VAR 0 4
42376: PPUSH
42377: LD_VAR 0 2
42381: PUSH
42382: LD_VAR 0 9
42386: ARRAY
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: PPUSH
42392: LD_VAR 0 2
42396: PUSH
42397: LD_VAR 0 9
42401: ARRAY
42402: PUSH
42403: LD_INT 2
42405: ARRAY
42406: PPUSH
42407: CALL_OW 114
42411: GO 42427
// SetTag ( i , tag ) ;
42413: LD_VAR 0 4
42417: PPUSH
42418: LD_VAR 0 9
42422: PPUSH
42423: CALL_OW 109
// end else
42427: GO 42500
// if enemy then
42429: LD_VAR 0 5
42433: IFFALSE 42500
// begin if GetWeapon ( i ) = ru_time_lapser then
42435: LD_VAR 0 4
42439: PPUSH
42440: CALL_OW 264
42444: PUSH
42445: LD_INT 49
42447: EQUAL
42448: IFFALSE 42476
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42450: LD_VAR 0 4
42454: PPUSH
42455: LD_VAR 0 5
42459: PPUSH
42460: LD_VAR 0 4
42464: PPUSH
42465: CALL_OW 74
42469: PPUSH
42470: CALL_OW 112
42474: GO 42500
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42476: LD_VAR 0 4
42480: PPUSH
42481: LD_VAR 0 5
42485: PPUSH
42486: LD_VAR 0 4
42490: PPUSH
42491: CALL_OW 74
42495: PPUSH
42496: CALL 43575 0 2
// end ; end ;
42500: GO 42076
42502: POP
42503: POP
// end ;
42504: LD_VAR 0 3
42508: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42509: LD_INT 0
42511: PPUSH
42512: PPUSH
42513: PPUSH
// if not unit or IsInUnit ( unit ) then
42514: LD_VAR 0 1
42518: NOT
42519: PUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 310
42529: OR
42530: IFFALSE 42534
// exit ;
42532: GO 42625
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42534: LD_ADDR_VAR 0 4
42538: PUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 250
42548: PPUSH
42549: LD_VAR 0 2
42553: PPUSH
42554: LD_INT 1
42556: PPUSH
42557: CALL_OW 272
42561: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42562: LD_ADDR_VAR 0 5
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: CALL_OW 251
42576: PPUSH
42577: LD_VAR 0 2
42581: PPUSH
42582: LD_INT 1
42584: PPUSH
42585: CALL_OW 273
42589: ST_TO_ADDR
// if ValidHex ( x , y ) then
42590: LD_VAR 0 4
42594: PPUSH
42595: LD_VAR 0 5
42599: PPUSH
42600: CALL_OW 488
42604: IFFALSE 42625
// ComTurnXY ( unit , x , y ) ;
42606: LD_VAR 0 1
42610: PPUSH
42611: LD_VAR 0 4
42615: PPUSH
42616: LD_VAR 0 5
42620: PPUSH
42621: CALL_OW 118
// end ;
42625: LD_VAR 0 3
42629: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42630: LD_INT 0
42632: PPUSH
42633: PPUSH
// result := false ;
42634: LD_ADDR_VAR 0 3
42638: PUSH
42639: LD_INT 0
42641: ST_TO_ADDR
// if not units then
42642: LD_VAR 0 2
42646: NOT
42647: IFFALSE 42651
// exit ;
42649: GO 42696
// for i in units do
42651: LD_ADDR_VAR 0 4
42655: PUSH
42656: LD_VAR 0 2
42660: PUSH
42661: FOR_IN
42662: IFFALSE 42694
// if See ( side , i ) then
42664: LD_VAR 0 1
42668: PPUSH
42669: LD_VAR 0 4
42673: PPUSH
42674: CALL_OW 292
42678: IFFALSE 42692
// begin result := true ;
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_INT 1
42687: ST_TO_ADDR
// exit ;
42688: POP
42689: POP
42690: GO 42696
// end ;
42692: GO 42661
42694: POP
42695: POP
// end ;
42696: LD_VAR 0 3
42700: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42701: LD_INT 0
42703: PPUSH
42704: PPUSH
42705: PPUSH
42706: PPUSH
// if not unit or not points then
42707: LD_VAR 0 1
42711: NOT
42712: PUSH
42713: LD_VAR 0 2
42717: NOT
42718: OR
42719: IFFALSE 42723
// exit ;
42721: GO 42813
// dist := 99999 ;
42723: LD_ADDR_VAR 0 5
42727: PUSH
42728: LD_INT 99999
42730: ST_TO_ADDR
// for i in points do
42731: LD_ADDR_VAR 0 4
42735: PUSH
42736: LD_VAR 0 2
42740: PUSH
42741: FOR_IN
42742: IFFALSE 42811
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42744: LD_ADDR_VAR 0 6
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: LD_VAR 0 4
42758: PUSH
42759: LD_INT 1
42761: ARRAY
42762: PPUSH
42763: LD_VAR 0 4
42767: PUSH
42768: LD_INT 2
42770: ARRAY
42771: PPUSH
42772: CALL_OW 297
42776: ST_TO_ADDR
// if tmpDist < dist then
42777: LD_VAR 0 6
42781: PUSH
42782: LD_VAR 0 5
42786: LESS
42787: IFFALSE 42809
// begin result := i ;
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_VAR 0 4
42798: ST_TO_ADDR
// dist := tmpDist ;
42799: LD_ADDR_VAR 0 5
42803: PUSH
42804: LD_VAR 0 6
42808: ST_TO_ADDR
// end ; end ;
42809: GO 42741
42811: POP
42812: POP
// end ;
42813: LD_VAR 0 3
42817: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42818: LD_INT 0
42820: PPUSH
// uc_side := side ;
42821: LD_ADDR_OWVAR 20
42825: PUSH
42826: LD_VAR 0 1
42830: ST_TO_ADDR
// uc_nation := 3 ;
42831: LD_ADDR_OWVAR 21
42835: PUSH
42836: LD_INT 3
42838: ST_TO_ADDR
// vc_chassis := 25 ;
42839: LD_ADDR_OWVAR 37
42843: PUSH
42844: LD_INT 25
42846: ST_TO_ADDR
// vc_engine := engine_siberite ;
42847: LD_ADDR_OWVAR 39
42851: PUSH
42852: LD_INT 3
42854: ST_TO_ADDR
// vc_control := control_computer ;
42855: LD_ADDR_OWVAR 38
42859: PUSH
42860: LD_INT 3
42862: ST_TO_ADDR
// vc_weapon := 59 ;
42863: LD_ADDR_OWVAR 40
42867: PUSH
42868: LD_INT 59
42870: ST_TO_ADDR
// result := CreateVehicle ;
42871: LD_ADDR_VAR 0 5
42875: PUSH
42876: CALL_OW 45
42880: ST_TO_ADDR
// SetDir ( result , d ) ;
42881: LD_VAR 0 5
42885: PPUSH
42886: LD_VAR 0 4
42890: PPUSH
42891: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42895: LD_VAR 0 5
42899: PPUSH
42900: LD_VAR 0 2
42904: PPUSH
42905: LD_VAR 0 3
42909: PPUSH
42910: LD_INT 0
42912: PPUSH
42913: CALL_OW 48
// end ;
42917: LD_VAR 0 5
42921: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42922: LD_INT 0
42924: PPUSH
42925: PPUSH
42926: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42927: LD_ADDR_VAR 0 2
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42950: LD_VAR 0 1
42954: NOT
42955: PUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL_OW 264
42965: PUSH
42966: LD_INT 12
42968: PUSH
42969: LD_INT 51
42971: PUSH
42972: LD_INT 32
42974: PUSH
42975: LD_INT 89
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: IN
42984: NOT
42985: OR
42986: IFFALSE 42990
// exit ;
42988: GO 43088
// for i := 1 to 3 do
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: DOUBLE
42996: LD_INT 1
42998: DEC
42999: ST_TO_ADDR
43000: LD_INT 3
43002: PUSH
43003: FOR_TO
43004: IFFALSE 43086
// begin tmp := GetCargo ( cargo , i ) ;
43006: LD_ADDR_VAR 0 4
43010: PUSH
43011: LD_VAR 0 1
43015: PPUSH
43016: LD_VAR 0 3
43020: PPUSH
43021: CALL_OW 289
43025: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43026: LD_ADDR_VAR 0 2
43030: PUSH
43031: LD_VAR 0 2
43035: PPUSH
43036: LD_VAR 0 3
43040: PPUSH
43041: LD_VAR 0 4
43045: PPUSH
43046: CALL_OW 1
43050: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43051: LD_ADDR_VAR 0 2
43055: PUSH
43056: LD_VAR 0 2
43060: PPUSH
43061: LD_INT 4
43063: PPUSH
43064: LD_VAR 0 2
43068: PUSH
43069: LD_INT 4
43071: ARRAY
43072: PUSH
43073: LD_VAR 0 4
43077: PLUS
43078: PPUSH
43079: CALL_OW 1
43083: ST_TO_ADDR
// end ;
43084: GO 43003
43086: POP
43087: POP
// end ;
43088: LD_VAR 0 2
43092: RET
// export function Length ( array ) ; begin
43093: LD_INT 0
43095: PPUSH
// result := array + 0 ;
43096: LD_ADDR_VAR 0 2
43100: PUSH
43101: LD_VAR 0 1
43105: PUSH
43106: LD_INT 0
43108: PLUS
43109: ST_TO_ADDR
// end ;
43110: LD_VAR 0 2
43114: RET
// export function PrepareArray ( array ) ; begin
43115: LD_INT 0
43117: PPUSH
// result := array diff 0 ;
43118: LD_ADDR_VAR 0 2
43122: PUSH
43123: LD_VAR 0 1
43127: PUSH
43128: LD_INT 0
43130: DIFF
43131: ST_TO_ADDR
// if not result [ 1 ] then
43132: LD_VAR 0 2
43136: PUSH
43137: LD_INT 1
43139: ARRAY
43140: NOT
43141: IFFALSE 43161
// result := Delete ( result , 1 ) ;
43143: LD_ADDR_VAR 0 2
43147: PUSH
43148: LD_VAR 0 2
43152: PPUSH
43153: LD_INT 1
43155: PPUSH
43156: CALL_OW 3
43160: ST_TO_ADDR
// end ;
43161: LD_VAR 0 2
43165: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43166: LD_INT 0
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
// sibRocketRange := 25 ;
43172: LD_ADDR_VAR 0 6
43176: PUSH
43177: LD_INT 25
43179: ST_TO_ADDR
// result := false ;
43180: LD_ADDR_VAR 0 4
43184: PUSH
43185: LD_INT 0
43187: ST_TO_ADDR
// for i := 0 to 5 do
43188: LD_ADDR_VAR 0 5
43192: PUSH
43193: DOUBLE
43194: LD_INT 0
43196: DEC
43197: ST_TO_ADDR
43198: LD_INT 5
43200: PUSH
43201: FOR_TO
43202: IFFALSE 43269
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43204: LD_VAR 0 1
43208: PPUSH
43209: LD_VAR 0 5
43213: PPUSH
43214: LD_VAR 0 6
43218: PPUSH
43219: CALL_OW 272
43223: PPUSH
43224: LD_VAR 0 2
43228: PPUSH
43229: LD_VAR 0 5
43233: PPUSH
43234: LD_VAR 0 6
43238: PPUSH
43239: CALL_OW 273
43243: PPUSH
43244: LD_VAR 0 3
43248: PPUSH
43249: CALL_OW 309
43253: IFFALSE 43267
// begin result := true ;
43255: LD_ADDR_VAR 0 4
43259: PUSH
43260: LD_INT 1
43262: ST_TO_ADDR
// exit ;
43263: POP
43264: POP
43265: GO 43271
// end ;
43267: GO 43201
43269: POP
43270: POP
// end ;
43271: LD_VAR 0 4
43275: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43276: LD_INT 0
43278: PPUSH
43279: PPUSH
43280: PPUSH
// if btype = b_depot then
43281: LD_VAR 0 2
43285: PUSH
43286: LD_INT 0
43288: EQUAL
43289: IFFALSE 43301
// begin result := true ;
43291: LD_ADDR_VAR 0 3
43295: PUSH
43296: LD_INT 1
43298: ST_TO_ADDR
// exit ;
43299: GO 43417
// end ; pom := GetBase ( depot ) ;
43301: LD_ADDR_VAR 0 4
43305: PUSH
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 274
43315: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43316: LD_ADDR_VAR 0 5
43320: PUSH
43321: LD_VAR 0 2
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 248
43335: PPUSH
43336: CALL_OW 450
43340: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_VAR 0 4
43350: PPUSH
43351: LD_INT 1
43353: PPUSH
43354: CALL_OW 275
43358: PUSH
43359: LD_VAR 0 5
43363: PUSH
43364: LD_INT 1
43366: ARRAY
43367: GREATEREQUAL
43368: PUSH
43369: LD_VAR 0 4
43373: PPUSH
43374: LD_INT 2
43376: PPUSH
43377: CALL_OW 275
43381: PUSH
43382: LD_VAR 0 5
43386: PUSH
43387: LD_INT 2
43389: ARRAY
43390: GREATEREQUAL
43391: AND
43392: PUSH
43393: LD_VAR 0 4
43397: PPUSH
43398: LD_INT 3
43400: PPUSH
43401: CALL_OW 275
43405: PUSH
43406: LD_VAR 0 5
43410: PUSH
43411: LD_INT 3
43413: ARRAY
43414: GREATEREQUAL
43415: AND
43416: ST_TO_ADDR
// end ;
43417: LD_VAR 0 3
43421: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43422: LD_INT 0
43424: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43425: LD_VAR 0 1
43429: PPUSH
43430: LD_VAR 0 2
43434: PPUSH
43435: LD_INT 0
43437: PPUSH
43438: LD_INT 0
43440: PPUSH
43441: LD_INT 1
43443: PPUSH
43444: LD_INT 0
43446: PPUSH
43447: CALL_OW 587
// end ;
43451: LD_VAR 0 3
43455: RET
// export function CenterOnNow ( unit ) ; begin
43456: LD_INT 0
43458: PPUSH
// result := IsInUnit ( unit ) ;
43459: LD_ADDR_VAR 0 2
43463: PUSH
43464: LD_VAR 0 1
43468: PPUSH
43469: CALL_OW 310
43473: ST_TO_ADDR
// if not result then
43474: LD_VAR 0 2
43478: NOT
43479: IFFALSE 43491
// result := unit ;
43481: LD_ADDR_VAR 0 2
43485: PUSH
43486: LD_VAR 0 1
43490: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43491: LD_VAR 0 1
43495: PPUSH
43496: CALL_OW 87
// end ;
43500: LD_VAR 0 2
43504: RET
// export function ComMoveHex ( unit , hex ) ; begin
43505: LD_INT 0
43507: PPUSH
// if not hex then
43508: LD_VAR 0 2
43512: NOT
43513: IFFALSE 43517
// exit ;
43515: GO 43570
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43517: LD_VAR 0 2
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: PPUSH
43526: LD_VAR 0 2
43530: PUSH
43531: LD_INT 2
43533: ARRAY
43534: PPUSH
43535: CALL_OW 428
43539: IFFALSE 43543
// exit ;
43541: GO 43570
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43543: LD_VAR 0 1
43547: PPUSH
43548: LD_VAR 0 2
43552: PUSH
43553: LD_INT 1
43555: ARRAY
43556: PPUSH
43557: LD_VAR 0 2
43561: PUSH
43562: LD_INT 2
43564: ARRAY
43565: PPUSH
43566: CALL_OW 111
// end ;
43570: LD_VAR 0 3
43574: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43575: LD_INT 0
43577: PPUSH
43578: PPUSH
43579: PPUSH
// if not unit or not enemy then
43580: LD_VAR 0 1
43584: NOT
43585: PUSH
43586: LD_VAR 0 2
43590: NOT
43591: OR
43592: IFFALSE 43596
// exit ;
43594: GO 43720
// x := GetX ( enemy ) ;
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: LD_VAR 0 2
43605: PPUSH
43606: CALL_OW 250
43610: ST_TO_ADDR
// y := GetY ( enemy ) ;
43611: LD_ADDR_VAR 0 5
43615: PUSH
43616: LD_VAR 0 2
43620: PPUSH
43621: CALL_OW 251
43625: ST_TO_ADDR
// if ValidHex ( x , y ) then
43626: LD_VAR 0 4
43630: PPUSH
43631: LD_VAR 0 5
43635: PPUSH
43636: CALL_OW 488
43640: IFFALSE 43720
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43642: LD_VAR 0 2
43646: PPUSH
43647: CALL_OW 247
43651: PUSH
43652: LD_INT 3
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: IN
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 255
43672: PPUSH
43673: LD_VAR 0 2
43677: PPUSH
43678: CALL_OW 292
43682: OR
43683: IFFALSE 43701
// ComAttackUnit ( unit , enemy ) else
43685: LD_VAR 0 1
43689: PPUSH
43690: LD_VAR 0 2
43694: PPUSH
43695: CALL_OW 115
43699: GO 43720
// ComAgressiveMove ( unit , x , y ) ;
43701: LD_VAR 0 1
43705: PPUSH
43706: LD_VAR 0 4
43710: PPUSH
43711: LD_VAR 0 5
43715: PPUSH
43716: CALL_OW 114
// end ;
43720: LD_VAR 0 3
43724: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43725: LD_INT 0
43727: PPUSH
43728: PPUSH
43729: PPUSH
// list := AreaToList ( area , 0 ) ;
43730: LD_ADDR_VAR 0 5
43734: PUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: LD_INT 0
43742: PPUSH
43743: CALL_OW 517
43747: ST_TO_ADDR
// if not list then
43748: LD_VAR 0 5
43752: NOT
43753: IFFALSE 43757
// exit ;
43755: GO 43887
// if all then
43757: LD_VAR 0 2
43761: IFFALSE 43849
// begin for i := 1 to list [ 1 ] do
43763: LD_ADDR_VAR 0 4
43767: PUSH
43768: DOUBLE
43769: LD_INT 1
43771: DEC
43772: ST_TO_ADDR
43773: LD_VAR 0 5
43777: PUSH
43778: LD_INT 1
43780: ARRAY
43781: PUSH
43782: FOR_TO
43783: IFFALSE 43845
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43785: LD_ADDR_VAR 0 3
43789: PUSH
43790: LD_VAR 0 3
43794: PPUSH
43795: LD_VAR 0 3
43799: PUSH
43800: LD_INT 1
43802: PLUS
43803: PPUSH
43804: LD_VAR 0 5
43808: PUSH
43809: LD_INT 1
43811: ARRAY
43812: PUSH
43813: LD_VAR 0 4
43817: ARRAY
43818: PUSH
43819: LD_VAR 0 5
43823: PUSH
43824: LD_INT 2
43826: ARRAY
43827: PUSH
43828: LD_VAR 0 4
43832: ARRAY
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PPUSH
43838: CALL_OW 1
43842: ST_TO_ADDR
43843: GO 43782
43845: POP
43846: POP
// exit ;
43847: GO 43887
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43849: LD_ADDR_VAR 0 3
43853: PUSH
43854: LD_VAR 0 5
43858: PUSH
43859: LD_INT 1
43861: ARRAY
43862: PUSH
43863: LD_INT 1
43865: ARRAY
43866: PUSH
43867: LD_VAR 0 5
43871: PUSH
43872: LD_INT 2
43874: ARRAY
43875: PUSH
43876: LD_INT 1
43878: ARRAY
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: EMPTY
43885: LIST
43886: ST_TO_ADDR
// end ;
43887: LD_VAR 0 3
43891: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43892: LD_INT 0
43894: PPUSH
43895: PPUSH
// list := AreaToList ( area , 0 ) ;
43896: LD_ADDR_VAR 0 4
43900: PUSH
43901: LD_VAR 0 1
43905: PPUSH
43906: LD_INT 0
43908: PPUSH
43909: CALL_OW 517
43913: ST_TO_ADDR
// if not list then
43914: LD_VAR 0 4
43918: NOT
43919: IFFALSE 43923
// exit ;
43921: GO 43964
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_VAR 0 4
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PUSH
43941: LD_VAR 0 4
43945: PUSH
43946: LD_INT 2
43948: ARRAY
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: PUSH
43954: LD_VAR 0 2
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// end ;
43964: LD_VAR 0 3
43968: RET
// export function First ( array ) ; begin
43969: LD_INT 0
43971: PPUSH
// if not array then
43972: LD_VAR 0 1
43976: NOT
43977: IFFALSE 43981
// exit ;
43979: GO 43995
// result := array [ 1 ] ;
43981: LD_ADDR_VAR 0 2
43985: PUSH
43986: LD_VAR 0 1
43990: PUSH
43991: LD_INT 1
43993: ARRAY
43994: ST_TO_ADDR
// end ;
43995: LD_VAR 0 2
43999: RET
// export function Last ( array ) ; begin
44000: LD_INT 0
44002: PPUSH
// if not array then
44003: LD_VAR 0 1
44007: NOT
44008: IFFALSE 44012
// exit ;
44010: GO 44028
// result := array [ array ] ;
44012: LD_ADDR_VAR 0 2
44016: PUSH
44017: LD_VAR 0 1
44021: PUSH
44022: LD_VAR 0 1
44026: ARRAY
44027: ST_TO_ADDR
// end ;
44028: LD_VAR 0 2
44032: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44033: LD_INT 0
44035: PPUSH
44036: PPUSH
// result := [ ] ;
44037: LD_ADDR_VAR 0 5
44041: PUSH
44042: EMPTY
44043: ST_TO_ADDR
// if not array then
44044: LD_VAR 0 1
44048: NOT
44049: IFFALSE 44053
// exit ;
44051: GO 44165
// for i := 1 to array do
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: DOUBLE
44059: LD_INT 1
44061: DEC
44062: ST_TO_ADDR
44063: LD_VAR 0 1
44067: PUSH
44068: FOR_TO
44069: IFFALSE 44163
// if array [ i ] [ index ] = value then
44071: LD_VAR 0 1
44075: PUSH
44076: LD_VAR 0 6
44080: ARRAY
44081: PUSH
44082: LD_VAR 0 2
44086: ARRAY
44087: PUSH
44088: LD_VAR 0 3
44092: EQUAL
44093: IFFALSE 44161
// begin if indexColumn then
44095: LD_VAR 0 4
44099: IFFALSE 44135
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44101: LD_ADDR_VAR 0 5
44105: PUSH
44106: LD_VAR 0 5
44110: PPUSH
44111: LD_VAR 0 1
44115: PUSH
44116: LD_VAR 0 6
44120: ARRAY
44121: PUSH
44122: LD_VAR 0 4
44126: ARRAY
44127: PPUSH
44128: CALL 39353 0 2
44132: ST_TO_ADDR
44133: GO 44161
// result := Join ( result , array [ i ] ) ;
44135: LD_ADDR_VAR 0 5
44139: PUSH
44140: LD_VAR 0 5
44144: PPUSH
44145: LD_VAR 0 1
44149: PUSH
44150: LD_VAR 0 6
44154: ARRAY
44155: PPUSH
44156: CALL 39353 0 2
44160: ST_TO_ADDR
// end ;
44161: GO 44068
44163: POP
44164: POP
// end ;
44165: LD_VAR 0 5
44169: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44170: LD_INT 0
44172: PPUSH
// if not vehicles or not parkingPoint then
44173: LD_VAR 0 1
44177: NOT
44178: PUSH
44179: LD_VAR 0 2
44183: NOT
44184: OR
44185: IFFALSE 44189
// exit ;
44187: GO 44287
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44189: LD_ADDR_VAR 0 1
44193: PUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: LD_INT 50
44201: PUSH
44202: EMPTY
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 92
44210: PUSH
44211: LD_VAR 0 2
44215: PUSH
44216: LD_INT 1
44218: ARRAY
44219: PUSH
44220: LD_VAR 0 2
44224: PUSH
44225: LD_INT 2
44227: ARRAY
44228: PUSH
44229: LD_INT 8
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PPUSH
44246: CALL_OW 72
44250: ST_TO_ADDR
// if not vehicles then
44251: LD_VAR 0 1
44255: NOT
44256: IFFALSE 44260
// exit ;
44258: GO 44287
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44260: LD_VAR 0 1
44264: PPUSH
44265: LD_VAR 0 2
44269: PUSH
44270: LD_INT 1
44272: ARRAY
44273: PPUSH
44274: LD_VAR 0 2
44278: PUSH
44279: LD_INT 2
44281: ARRAY
44282: PPUSH
44283: CALL_OW 111
// end ;
44287: LD_VAR 0 3
44291: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44292: LD_INT 0
44294: PPUSH
44295: PPUSH
44296: PPUSH
// if not side or not area then
44297: LD_VAR 0 1
44301: NOT
44302: PUSH
44303: LD_VAR 0 2
44307: NOT
44308: OR
44309: IFFALSE 44313
// exit ;
44311: GO 44432
// tmp := AreaToList ( area , 0 ) ;
44313: LD_ADDR_VAR 0 5
44317: PUSH
44318: LD_VAR 0 2
44322: PPUSH
44323: LD_INT 0
44325: PPUSH
44326: CALL_OW 517
44330: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44331: LD_ADDR_VAR 0 4
44335: PUSH
44336: DOUBLE
44337: LD_INT 1
44339: DEC
44340: ST_TO_ADDR
44341: LD_VAR 0 5
44345: PUSH
44346: LD_INT 1
44348: ARRAY
44349: PUSH
44350: FOR_TO
44351: IFFALSE 44430
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44353: LD_VAR 0 5
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PUSH
44362: LD_VAR 0 4
44366: ARRAY
44367: PPUSH
44368: LD_VAR 0 5
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: PUSH
44377: LD_VAR 0 4
44381: ARRAY
44382: PPUSH
44383: CALL_OW 351
44387: IFFALSE 44428
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44389: LD_VAR 0 5
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: PUSH
44398: LD_VAR 0 4
44402: ARRAY
44403: PPUSH
44404: LD_VAR 0 5
44408: PUSH
44409: LD_INT 2
44411: ARRAY
44412: PUSH
44413: LD_VAR 0 4
44417: ARRAY
44418: PPUSH
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 244
// end ;
44428: GO 44350
44430: POP
44431: POP
// end ;
44432: LD_VAR 0 3
44436: RET
