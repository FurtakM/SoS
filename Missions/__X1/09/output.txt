// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := 1 ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1587 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1587 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1587 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1587 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1587 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1587 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1587 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1587 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1587 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1587 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1587 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1587 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1587 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// music_nat := 2 ;
 635: LD_ADDR_OWVAR 71
 639: PUSH
 640: LD_INT 2
 642: ST_TO_ADDR
// Video ( true ) ;
 643: LD_INT 1
 645: PPUSH
 646: CALL 38860 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 650: LD_EXP 3
 654: PPUSH
 655: LD_INT 51
 657: PPUSH
 658: LD_INT 23
 660: PPUSH
 661: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 665: LD_OWVAR 3
 669: PUSH
 670: LD_EXP 3
 674: DIFF
 675: PPUSH
 676: LD_INT 53
 678: PPUSH
 679: LD_INT 27
 681: PPUSH
 682: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 686: LD_INT 52
 688: PPUSH
 689: LD_INT 25
 691: PPUSH
 692: CALL_OW 86
// wait ( 0 0$2 ) ;
 696: LD_INT 70
 698: PPUSH
 699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 703: LD_INT 35
 705: PPUSH
 706: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 51
 717: PPUSH
 718: LD_INT 23
 720: PPUSH
 721: CALL_OW 307
 725: PUSH
 726: LD_EXP 3
 730: PPUSH
 731: CALL_OW 314
 735: NOT
 736: OR
 737: IFFALSE 703
// ComTurnXY ( Heike , 53 , 26 ) ;
 739: LD_EXP 3
 743: PPUSH
 744: LD_INT 53
 746: PPUSH
 747: LD_INT 26
 749: PPUSH
 750: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 754: LD_INT 10
 756: PPUSH
 757: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_STRING DH-Intro-1
 768: PPUSH
 769: CALL_OW 88
// ComHold ( all_units ) ;
 773: LD_OWVAR 3
 777: PPUSH
 778: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 782: LD_OWVAR 3
 786: PUSH
 787: LD_EXP 3
 791: DIFF
 792: PPUSH
 793: LD_EXP 3
 797: PPUSH
 798: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 802: LD_EXP 17
 806: PUSH
 807: LD_STRING 08_DealWithDoug
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 30
 817: AND
 818: IFFALSE 930
// begin ComTurnUnit ( Heike , Doug ) ;
 820: LD_EXP 3
 824: PPUSH
 825: LD_EXP 17
 829: PPUSH
 830: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 834: LD_EXP 17
 838: PPUSH
 839: LD_STRING DCa-Intro-a-2
 841: PPUSH
 842: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_STRING DH-Intro-a-3
 853: PPUSH
 854: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 858: LD_EXP 17
 862: PPUSH
 863: LD_STRING DCa-Intro-a-4
 865: PPUSH
 866: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 870: LD_EXP 3
 874: PPUSH
 875: LD_STRING DH-Intro-a-5
 877: PPUSH
 878: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 882: LD_EXP 17
 886: PPUSH
 887: LD_STRING DCa-Intro-a-6
 889: PPUSH
 890: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 894: LD_EXP 16
 898: PUSH
 899: LD_EXP 17
 903: ADD
 904: PUSH
 905: LD_EXP 15
 909: ADD
 910: PPUSH
 911: LD_INT 5
 913: PPUSH
 914: LD_INT 7
 916: PPUSH
 917: CALL_OW 111
// wait ( 0 0$01 ) ;
 921: LD_INT 35
 923: PPUSH
 924: CALL_OW 67
// end else
 928: GO 1032
// if Harris then
 930: LD_EXP 16
 934: IFFALSE 1032
// begin ComTurnUnit ( Heike , Harris ) ;
 936: LD_EXP 3
 940: PPUSH
 941: LD_EXP 16
 945: PPUSH
 946: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 950: LD_EXP 16
 954: PPUSH
 955: LD_STRING DJ-Intro-2
 957: PPUSH
 958: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING DH-Intro-3
 969: PPUSH
 970: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 974: LD_EXP 3
 978: PPUSH
 979: LD_STRING DH-Intro-4
 981: PPUSH
 982: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 986: LD_EXP 16
 990: PPUSH
 991: LD_STRING DJ-Intro-5
 993: PPUSH
 994: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 998: LD_EXP 16
1002: PUSH
1003: LD_EXP 17
1007: ADD
1008: PUSH
1009: LD_EXP 15
1013: ADD
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: LD_INT 7
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$01 ) ;
1025: LD_INT 35
1027: PPUSH
1028: CALL_OW 67
// end ; if Givi then
1032: LD_EXP 4
1036: IFFALSE 1131
// begin ComMoveUnit ( Givi , Heike ) ;
1038: LD_EXP 4
1042: PPUSH
1043: LD_EXP 3
1047: PPUSH
1048: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
1052: LD_INT 35
1054: PPUSH
1055: CALL_OW 67
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_EXP 4
1068: PPUSH
1069: CALL_OW 296
1073: PUSH
1074: LD_INT 4
1076: LESS
1077: PUSH
1078: LD_EXP 4
1082: PPUSH
1083: CALL_OW 314
1087: NOT
1088: OR
1089: IFFALSE 1052
// ComTurnUnit ( Givi , Heike ) ;
1091: LD_EXP 4
1095: PPUSH
1096: LD_EXP 3
1100: PPUSH
1101: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1105: LD_EXP 3
1109: PPUSH
1110: LD_EXP 4
1114: PPUSH
1115: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1119: LD_EXP 4
1123: PPUSH
1124: LD_STRING DG-Intro-7
1126: PPUSH
1127: CALL_OW 88
// end ; if not Givi then
1131: LD_EXP 4
1135: NOT
1136: IFFALSE 1153
// ComTurnXY ( Heike , 52 , 25 ) ;
1138: LD_EXP 3
1142: PPUSH
1143: LD_INT 52
1145: PPUSH
1146: LD_INT 25
1148: PPUSH
1149: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1153: LD_EXP 3
1157: PPUSH
1158: LD_STRING DH-Intro-7
1160: PPUSH
1161: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1165: LD_INT 22
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PPUSH
1175: CALL_OW 69
1179: PPUSH
1180: LD_INT 48
1182: PPUSH
1183: LD_INT 4
1185: PPUSH
1186: CALL_OW 111
// wait ( 0 0$3 ) ;
1190: LD_INT 105
1192: PPUSH
1193: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1197: LD_INT 74
1199: PPUSH
1200: LD_INT 79
1202: PPUSH
1203: LD_INT 2
1205: PPUSH
1206: LD_INT 16
1208: NEG
1209: PPUSH
1210: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1214: LD_INT 74
1216: PPUSH
1217: LD_INT 79
1219: PPUSH
1220: CALL_OW 84
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := nation_russian ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1240: LD_INT 22
1242: PPUSH
1243: LD_INT 3
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 100
1254: PPUSH
1255: CALL 6427 0 5
// un := CreateVehicle ;
1259: LD_ADDR_VAR 0 3
1263: PUSH
1264: CALL_OW 45
1268: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 76
1276: PPUSH
1277: LD_INT 87
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 8
1292: PPUSH
1293: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1297: CALL_OW 44
1301: PPUSH
1302: LD_VAR 0 3
1306: PPUSH
1307: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 67
1318: PPUSH
1319: LD_INT 56
1321: PPUSH
1322: CALL_OW 111
// wait ( 0 0$1 ) ;
1326: LD_INT 35
1328: PPUSH
1329: CALL_OW 67
// for i := 1 to 3 do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_INT 3
1345: PUSH
1346: FOR_TO
1347: IFFALSE 1407
// begin PrepareSoldier ( false , 8 ) ;
1349: LD_INT 0
1351: PPUSH
1352: LD_INT 8
1354: PPUSH
1355: CALL_OW 381
// un := CreateHuman ;
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: CALL_OW 44
1368: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1369: LD_VAR 0 3
1373: PPUSH
1374: LD_INT 76
1376: PPUSH
1377: LD_INT 87
1379: PPUSH
1380: LD_INT 2
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 67
1397: PPUSH
1398: LD_INT 56
1400: PPUSH
1401: CALL_OW 111
// end ;
1405: GO 1346
1407: POP
1408: POP
// wait ( 0 0$2 ) ;
1409: LD_INT 70
1411: PPUSH
1412: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1416: LD_INT 1
1418: PPUSH
1419: LD_STRING %_cont
1421: PPUSH
1422: CALL_OW 340
// Video ( false ) ;
1426: LD_INT 0
1428: PPUSH
1429: CALL 38860 0 1
// end ;
1433: LD_VAR 0 1
1437: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1438: LD_INT 5
1440: PPUSH
1441: LD_INT 22
1443: PUSH
1444: LD_INT 4
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PPUSH
1451: CALL_OW 70
1455: IFFALSE 1503
1457: GO 1459
1459: DISABLE
1460: LD_INT 0
1462: PPUSH
// begin enable ;
1463: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1464: LD_ADDR_VAR 0 1
1468: PUSH
1469: LD_INT 5
1471: PPUSH
1472: LD_INT 22
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PPUSH
1482: CALL_OW 70
1486: PUSH
1487: FOR_IN
1488: IFFALSE 1501
// RemoveUnit ( i ) ;
1490: LD_VAR 0 1
1494: PPUSH
1495: CALL_OW 64
1499: GO 1487
1501: POP
1502: POP
// end ;
1503: PPOPN 1
1505: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1506: LD_INT 6
1508: PPUSH
1509: LD_INT 22
1511: PUSH
1512: LD_INT 2
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 70
1523: IFFALSE 1571
1525: GO 1527
1527: DISABLE
1528: LD_INT 0
1530: PPUSH
// begin enable ;
1531: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1532: LD_ADDR_VAR 0 1
1536: PUSH
1537: LD_INT 6
1539: PPUSH
1540: LD_INT 22
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 70
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1569
// RemoveUnit ( i ) ;
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 64
1567: GO 1555
1569: POP
1570: POP
// end ; end_of_file
1571: PPOPN 1
1573: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1574: LD_INT 1
1576: PPUSH
1577: LD_STRING %_cont
1579: PPUSH
1580: CALL_OW 340
// end ; end_of_file
1584: PPOPN 1
1586: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
// if exist_mode then
1591: LD_VAR 0 2
1595: IFFALSE 1620
// unit := CreateCharacter ( prefix & ident ) else
1597: LD_ADDR_VAR 0 5
1601: PUSH
1602: LD_VAR 0 3
1606: PUSH
1607: LD_VAR 0 1
1611: STR
1612: PPUSH
1613: CALL_OW 34
1617: ST_TO_ADDR
1618: GO 1635
// unit := NewCharacter ( ident ) ;
1620: LD_ADDR_VAR 0 5
1624: PUSH
1625: LD_VAR 0 1
1629: PPUSH
1630: CALL_OW 25
1634: ST_TO_ADDR
// result := unit ;
1635: LD_ADDR_VAR 0 4
1639: PUSH
1640: LD_VAR 0 5
1644: ST_TO_ADDR
// end ;
1645: LD_VAR 0 4
1649: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1650: LD_INT 0
1652: PPUSH
1653: PPUSH
// if not side or not nation then
1654: LD_VAR 0 1
1658: NOT
1659: PUSH
1660: LD_VAR 0 2
1664: NOT
1665: OR
1666: IFFALSE 1670
// exit ;
1668: GO 2438
// case nation of nation_american :
1670: LD_VAR 0 2
1674: PUSH
1675: LD_INT 1
1677: DOUBLE
1678: EQUAL
1679: IFTRUE 1683
1681: GO 1897
1683: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1684: LD_ADDR_VAR 0 4
1688: PUSH
1689: LD_INT 35
1691: PUSH
1692: LD_INT 45
1694: PUSH
1695: LD_INT 46
1697: PUSH
1698: LD_INT 47
1700: PUSH
1701: LD_INT 82
1703: PUSH
1704: LD_INT 83
1706: PUSH
1707: LD_INT 84
1709: PUSH
1710: LD_INT 85
1712: PUSH
1713: LD_INT 86
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: LD_INT 6
1724: PUSH
1725: LD_INT 15
1727: PUSH
1728: LD_INT 16
1730: PUSH
1731: LD_INT 7
1733: PUSH
1734: LD_INT 12
1736: PUSH
1737: LD_INT 13
1739: PUSH
1740: LD_INT 10
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 20
1748: PUSH
1749: LD_INT 21
1751: PUSH
1752: LD_INT 22
1754: PUSH
1755: LD_INT 25
1757: PUSH
1758: LD_INT 32
1760: PUSH
1761: LD_INT 27
1763: PUSH
1764: LD_INT 36
1766: PUSH
1767: LD_INT 69
1769: PUSH
1770: LD_INT 39
1772: PUSH
1773: LD_INT 34
1775: PUSH
1776: LD_INT 40
1778: PUSH
1779: LD_INT 48
1781: PUSH
1782: LD_INT 49
1784: PUSH
1785: LD_INT 50
1787: PUSH
1788: LD_INT 51
1790: PUSH
1791: LD_INT 52
1793: PUSH
1794: LD_INT 53
1796: PUSH
1797: LD_INT 54
1799: PUSH
1800: LD_INT 55
1802: PUSH
1803: LD_INT 56
1805: PUSH
1806: LD_INT 57
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 59
1814: PUSH
1815: LD_INT 60
1817: PUSH
1818: LD_INT 61
1820: PUSH
1821: LD_INT 62
1823: PUSH
1824: LD_INT 80
1826: PUSH
1827: LD_INT 82
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 84
1835: PUSH
1836: LD_INT 85
1838: PUSH
1839: LD_INT 86
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: ST_TO_ADDR
1895: GO 2362
1897: LD_INT 2
1899: DOUBLE
1900: EQUAL
1901: IFTRUE 1905
1903: GO 2131
1905: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: LD_INT 35
1913: PUSH
1914: LD_INT 45
1916: PUSH
1917: LD_INT 46
1919: PUSH
1920: LD_INT 47
1922: PUSH
1923: LD_INT 82
1925: PUSH
1926: LD_INT 83
1928: PUSH
1929: LD_INT 84
1931: PUSH
1932: LD_INT 85
1934: PUSH
1935: LD_INT 87
1937: PUSH
1938: LD_INT 70
1940: PUSH
1941: LD_INT 1
1943: PUSH
1944: LD_INT 11
1946: PUSH
1947: LD_INT 3
1949: PUSH
1950: LD_INT 4
1952: PUSH
1953: LD_INT 5
1955: PUSH
1956: LD_INT 6
1958: PUSH
1959: LD_INT 15
1961: PUSH
1962: LD_INT 18
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: LD_INT 17
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 22
1982: PUSH
1983: LD_INT 72
1985: PUSH
1986: LD_INT 26
1988: PUSH
1989: LD_INT 69
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 40
1997: PUSH
1998: LD_INT 41
2000: PUSH
2001: LD_INT 42
2003: PUSH
2004: LD_INT 43
2006: PUSH
2007: LD_INT 48
2009: PUSH
2010: LD_INT 49
2012: PUSH
2013: LD_INT 50
2015: PUSH
2016: LD_INT 51
2018: PUSH
2019: LD_INT 52
2021: PUSH
2022: LD_INT 53
2024: PUSH
2025: LD_INT 54
2027: PUSH
2028: LD_INT 55
2030: PUSH
2031: LD_INT 56
2033: PUSH
2034: LD_INT 60
2036: PUSH
2037: LD_INT 61
2039: PUSH
2040: LD_INT 62
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 67
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: LD_INT 81
2054: PUSH
2055: LD_INT 82
2057: PUSH
2058: LD_INT 83
2060: PUSH
2061: LD_INT 84
2063: PUSH
2064: LD_INT 85
2066: PUSH
2067: LD_INT 87
2069: PUSH
2070: LD_INT 88
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
2129: GO 2362
2131: LD_INT 3
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2361
2139: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: LD_INT 46
2147: PUSH
2148: LD_INT 47
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: LD_INT 82
2159: PUSH
2160: LD_INT 83
2162: PUSH
2163: LD_INT 84
2165: PUSH
2166: LD_INT 85
2168: PUSH
2169: LD_INT 86
2171: PUSH
2172: LD_INT 11
2174: PUSH
2175: LD_INT 9
2177: PUSH
2178: LD_INT 20
2180: PUSH
2181: LD_INT 19
2183: PUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 24
2189: PUSH
2190: LD_INT 22
2192: PUSH
2193: LD_INT 25
2195: PUSH
2196: LD_INT 28
2198: PUSH
2199: LD_INT 29
2201: PUSH
2202: LD_INT 30
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 37
2210: PUSH
2211: LD_INT 38
2213: PUSH
2214: LD_INT 32
2216: PUSH
2217: LD_INT 27
2219: PUSH
2220: LD_INT 33
2222: PUSH
2223: LD_INT 69
2225: PUSH
2226: LD_INT 39
2228: PUSH
2229: LD_INT 34
2231: PUSH
2232: LD_INT 40
2234: PUSH
2235: LD_INT 71
2237: PUSH
2238: LD_INT 23
2240: PUSH
2241: LD_INT 44
2243: PUSH
2244: LD_INT 48
2246: PUSH
2247: LD_INT 49
2249: PUSH
2250: LD_INT 50
2252: PUSH
2253: LD_INT 51
2255: PUSH
2256: LD_INT 52
2258: PUSH
2259: LD_INT 53
2261: PUSH
2262: LD_INT 54
2264: PUSH
2265: LD_INT 55
2267: PUSH
2268: LD_INT 56
2270: PUSH
2271: LD_INT 57
2273: PUSH
2274: LD_INT 58
2276: PUSH
2277: LD_INT 59
2279: PUSH
2280: LD_INT 63
2282: PUSH
2283: LD_INT 64
2285: PUSH
2286: LD_INT 65
2288: PUSH
2289: LD_INT 82
2291: PUSH
2292: LD_INT 83
2294: PUSH
2295: LD_INT 84
2297: PUSH
2298: LD_INT 85
2300: PUSH
2301: LD_INT 86
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
2359: GO 2362
2361: POP
// if state > - 1 and state < 3 then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: NEG
2370: GREATER
2371: PUSH
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 3
2379: LESS
2380: AND
2381: IFFALSE 2438
// for i in result do
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: FOR_IN
2394: IFFALSE 2436
// if GetTech ( i , side ) <> state then
2396: LD_VAR 0 5
2400: PPUSH
2401: LD_VAR 0 1
2405: PPUSH
2406: CALL_OW 321
2410: PUSH
2411: LD_VAR 0 3
2415: NONEQUAL
2416: IFFALSE 2434
// result := result diff i ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_VAR 0 4
2427: PUSH
2428: LD_VAR 0 5
2432: DIFF
2433: ST_TO_ADDR
2434: GO 2393
2436: POP
2437: POP
// end ;
2438: LD_VAR 0 4
2442: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2443: LD_INT 0
2445: PPUSH
2446: PPUSH
2447: PPUSH
// result := true ;
2448: LD_ADDR_VAR 0 3
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2456: LD_ADDR_VAR 0 5
2460: PUSH
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 480
2470: ST_TO_ADDR
// if not tmp then
2471: LD_VAR 0 5
2475: NOT
2476: IFFALSE 2480
// exit ;
2478: GO 2529
// for i in tmp do
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 5
2489: PUSH
2490: FOR_IN
2491: IFFALSE 2527
// if GetTech ( i , side ) <> state_researched then
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 321
2507: PUSH
2508: LD_INT 2
2510: NONEQUAL
2511: IFFALSE 2525
// begin result := false ;
2513: LD_ADDR_VAR 0 3
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
// exit ;
2521: POP
2522: POP
2523: GO 2529
// end ;
2525: GO 2490
2527: POP
2528: POP
// end ;
2529: LD_VAR 0 3
2533: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2549: LD_VAR 0 1
2553: NOT
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 257
2564: PUSH
2565: LD_INT 9
2567: NONEQUAL
2568: OR
2569: IFFALSE 2573
// exit ;
2571: GO 3146
// side := GetSide ( unit ) ;
2573: LD_ADDR_VAR 0 9
2577: PUSH
2578: LD_VAR 0 1
2582: PPUSH
2583: CALL_OW 255
2587: ST_TO_ADDR
// tech_space := tech_spacanom ;
2588: LD_ADDR_VAR 0 12
2592: PUSH
2593: LD_INT 29
2595: ST_TO_ADDR
// tech_time := tech_taurad ;
2596: LD_ADDR_VAR 0 13
2600: PUSH
2601: LD_INT 28
2603: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2604: LD_ADDR_VAR 0 11
2608: PUSH
2609: LD_VAR 0 1
2613: PPUSH
2614: CALL_OW 310
2618: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2619: LD_VAR 0 11
2623: PPUSH
2624: CALL_OW 247
2628: PUSH
2629: LD_INT 2
2631: EQUAL
2632: IFFALSE 2636
// exit ;
2634: GO 3146
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2636: LD_ADDR_VAR 0 8
2640: PUSH
2641: LD_INT 81
2643: PUSH
2644: LD_VAR 0 9
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 21
2658: PUSH
2659: LD_INT 3
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: ST_TO_ADDR
// if not tmp then
2679: LD_VAR 0 8
2683: NOT
2684: IFFALSE 2688
// exit ;
2686: GO 3146
// if in_unit then
2688: LD_VAR 0 11
2692: IFFALSE 2716
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2694: LD_ADDR_VAR 0 10
2698: PUSH
2699: LD_VAR 0 8
2703: PPUSH
2704: LD_VAR 0 11
2708: PPUSH
2709: CALL_OW 74
2713: ST_TO_ADDR
2714: GO 2736
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2716: LD_ADDR_VAR 0 10
2720: PUSH
2721: LD_VAR 0 8
2725: PPUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 74
2735: ST_TO_ADDR
// if not enemy then
2736: LD_VAR 0 10
2740: NOT
2741: IFFALSE 2745
// exit ;
2743: GO 3146
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2745: LD_VAR 0 11
2749: PUSH
2750: LD_VAR 0 11
2754: PPUSH
2755: LD_VAR 0 10
2759: PPUSH
2760: CALL_OW 296
2764: PUSH
2765: LD_INT 13
2767: GREATER
2768: AND
2769: PUSH
2770: LD_VAR 0 1
2774: PPUSH
2775: LD_VAR 0 10
2779: PPUSH
2780: CALL_OW 296
2784: PUSH
2785: LD_INT 12
2787: GREATER
2788: OR
2789: IFFALSE 2793
// exit ;
2791: GO 3146
// missile := [ 1 ] ;
2793: LD_ADDR_VAR 0 14
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2804: LD_VAR 0 9
2808: PPUSH
2809: LD_VAR 0 12
2813: PPUSH
2814: CALL_OW 325
2818: IFFALSE 2847
// missile := Replace ( missile , missile + 1 , 2 ) ;
2820: LD_ADDR_VAR 0 14
2824: PUSH
2825: LD_VAR 0 14
2829: PPUSH
2830: LD_VAR 0 14
2834: PUSH
2835: LD_INT 1
2837: PLUS
2838: PPUSH
2839: LD_INT 2
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2847: LD_VAR 0 9
2851: PPUSH
2852: LD_VAR 0 13
2856: PPUSH
2857: CALL_OW 325
2861: PUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 255
2871: PPUSH
2872: LD_VAR 0 13
2876: PPUSH
2877: CALL_OW 325
2881: NOT
2882: AND
2883: IFFALSE 2912
// missile := Replace ( missile , missile + 1 , 3 ) ;
2885: LD_ADDR_VAR 0 14
2889: PUSH
2890: LD_VAR 0 14
2894: PPUSH
2895: LD_VAR 0 14
2899: PUSH
2900: LD_INT 1
2902: PLUS
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: CALL_OW 1
2911: ST_TO_ADDR
// if missile < 2 then
2912: LD_VAR 0 14
2916: PUSH
2917: LD_INT 2
2919: LESS
2920: IFFALSE 2924
// exit ;
2922: GO 3146
// x := GetX ( enemy ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_VAR 0 10
2933: PPUSH
2934: CALL_OW 250
2938: ST_TO_ADDR
// y := GetY ( enemy ) ;
2939: LD_ADDR_VAR 0 5
2943: PUSH
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 251
2953: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2954: LD_ADDR_VAR 0 6
2958: PUSH
2959: LD_VAR 0 4
2963: PUSH
2964: LD_INT 1
2966: NEG
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 12
2975: PLUS
2976: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2977: LD_ADDR_VAR 0 7
2981: PUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 1
2989: NEG
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: CALL_OW 12
2998: PLUS
2999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3000: LD_VAR 0 6
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: CALL_OW 488
3014: NOT
3015: IFFALSE 3037
// begin _x := x ;
3017: LD_ADDR_VAR 0 6
3021: PUSH
3022: LD_VAR 0 4
3026: ST_TO_ADDR
// _y := y ;
3027: LD_ADDR_VAR 0 7
3031: PUSH
3032: LD_VAR 0 5
3036: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 1
3044: PPUSH
3045: LD_VAR 0 14
3049: PPUSH
3050: CALL_OW 12
3054: ST_TO_ADDR
// case i of 1 :
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: DOUBLE
3063: EQUAL
3064: IFTRUE 3068
3066: GO 3085
3068: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3069: LD_VAR 0 1
3073: PPUSH
3074: LD_VAR 0 10
3078: PPUSH
3079: CALL_OW 115
3083: GO 3146
3085: LD_INT 2
3087: DOUBLE
3088: EQUAL
3089: IFTRUE 3093
3091: GO 3115
3093: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_VAR 0 6
3103: PPUSH
3104: LD_VAR 0 7
3108: PPUSH
3109: CALL_OW 153
3113: GO 3146
3115: LD_INT 3
3117: DOUBLE
3118: EQUAL
3119: IFTRUE 3123
3121: GO 3145
3123: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 6
3133: PPUSH
3134: LD_VAR 0 7
3138: PPUSH
3139: CALL_OW 154
3143: GO 3146
3145: POP
// end ;
3146: LD_VAR 0 2
3150: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
// if not unit or not building then
3159: LD_VAR 0 1
3163: NOT
3164: PUSH
3165: LD_VAR 0 2
3169: NOT
3170: OR
3171: IFFALSE 3175
// exit ;
3173: GO 3333
// x := GetX ( building ) ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_VAR 0 2
3184: PPUSH
3185: CALL_OW 250
3189: ST_TO_ADDR
// y := GetY ( building ) ;
3190: LD_ADDR_VAR 0 6
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 251
3204: ST_TO_ADDR
// for i = 0 to 5 do
3205: LD_ADDR_VAR 0 4
3209: PUSH
3210: DOUBLE
3211: LD_INT 0
3213: DEC
3214: ST_TO_ADDR
3215: LD_INT 5
3217: PUSH
3218: FOR_TO
3219: IFFALSE 3331
// begin _x := ShiftX ( x , i , 3 ) ;
3221: LD_ADDR_VAR 0 7
3225: PUSH
3226: LD_VAR 0 5
3230: PPUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: CALL_OW 272
3243: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3244: LD_ADDR_VAR 0 8
3248: PUSH
3249: LD_VAR 0 6
3253: PPUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: CALL_OW 273
3266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3267: LD_VAR 0 7
3271: PPUSH
3272: LD_VAR 0 8
3276: PPUSH
3277: CALL_OW 488
3281: NOT
3282: IFFALSE 3286
// continue ;
3284: GO 3218
// if HexInfo ( _x , _y ) = 0 then
3286: LD_VAR 0 7
3290: PPUSH
3291: LD_VAR 0 8
3295: PPUSH
3296: CALL_OW 428
3300: PUSH
3301: LD_INT 0
3303: EQUAL
3304: IFFALSE 3329
// begin ComMoveXY ( unit , _x , _y ) ;
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 7
3315: PPUSH
3316: LD_VAR 0 8
3320: PPUSH
3321: CALL_OW 111
// exit ;
3325: POP
3326: POP
3327: GO 3333
// end ; end ;
3329: GO 3218
3331: POP
3332: POP
// end ;
3333: LD_VAR 0 3
3337: RET
// export function ScanBase ( side , base_area ) ; begin
3338: LD_INT 0
3340: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_INT 81
3353: PUSH
3354: LD_VAR 0 1
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 70
3367: ST_TO_ADDR
// end ;
3368: LD_VAR 0 3
3372: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
3377: PPUSH
3378: PPUSH
// result := false ;
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// side := GetSide ( unit ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 1
3396: PPUSH
3397: CALL_OW 255
3401: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3402: LD_ADDR_VAR 0 4
3406: PUSH
3407: LD_VAR 0 1
3411: PPUSH
3412: CALL_OW 248
3416: ST_TO_ADDR
// case nat of 1 :
3417: LD_VAR 0 4
3421: PUSH
3422: LD_INT 1
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3441
3430: POP
// tech := tech_lassight ; 2 :
3431: LD_ADDR_VAR 0 5
3435: PUSH
3436: LD_INT 12
3438: ST_TO_ADDR
3439: GO 3480
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3460
3449: POP
// tech := tech_mortar ; 3 :
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_INT 41
3457: ST_TO_ADDR
3458: GO 3480
3460: LD_INT 3
3462: DOUBLE
3463: EQUAL
3464: IFTRUE 3468
3466: GO 3479
3468: POP
// tech := tech_bazooka ; end ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_INT 44
3476: ST_TO_ADDR
3477: GO 3480
3479: POP
// if Researched ( side , tech ) then
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_VAR 0 5
3489: PPUSH
3490: CALL_OW 325
3494: IFFALSE 3521
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 8
3506: PUSH
3507: LD_INT 9
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_VAR 0 4
3519: ARRAY
3520: ST_TO_ADDR
// end ;
3521: LD_VAR 0 2
3525: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3526: LD_INT 0
3528: PPUSH
3529: PPUSH
3530: PPUSH
// if not mines then
3531: LD_VAR 0 2
3535: NOT
3536: IFFALSE 3540
// exit ;
3538: GO 3684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3540: LD_ADDR_VAR 0 5
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_VAR 0 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_INT 21
3562: PUSH
3563: LD_INT 3
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: ST_TO_ADDR
// for i in mines do
3583: LD_ADDR_VAR 0 4
3587: PUSH
3588: LD_VAR 0 2
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3682
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 4
3609: PUSH
3610: LD_INT 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 458
3618: NOT
3619: IFFALSE 3623
// continue ;
3621: GO 3593
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3623: LD_VAR 0 4
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 4
3636: PUSH
3637: LD_INT 2
3639: ARRAY
3640: PPUSH
3641: CALL_OW 428
3645: PUSH
3646: LD_VAR 0 5
3650: IN
3651: IFFALSE 3680
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: LD_VAR 0 4
3666: PUSH
3667: LD_INT 2
3669: ARRAY
3670: PPUSH
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 456
// end ;
3680: GO 3593
3682: POP
3683: POP
// end ;
3684: LD_VAR 0 3
3688: RET
// export function Count ( array ) ; begin
3689: LD_INT 0
3691: PPUSH
// result := array + 0 ;
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: LD_VAR 0 1
3701: PUSH
3702: LD_INT 0
3704: PLUS
3705: ST_TO_ADDR
// end ;
3706: LD_VAR 0 2
3710: RET
// export function IsEmpty ( building ) ; begin
3711: LD_INT 0
3713: PPUSH
// if not building then
3714: LD_VAR 0 1
3718: NOT
3719: IFFALSE 3723
// exit ;
3721: GO 3766
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3723: LD_ADDR_VAR 0 2
3727: PUSH
3728: LD_VAR 0 1
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 255
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 58
3752: PUSH
3753: EMPTY
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: IN
3765: ST_TO_ADDR
// end ;
3766: LD_VAR 0 2
3770: RET
// export function IsNotFull ( building ) ; var places ; begin
3771: LD_INT 0
3773: PPUSH
3774: PPUSH
// if not building then
3775: LD_VAR 0 1
3779: NOT
3780: IFFALSE 3784
// exit ;
3782: GO 3812
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: LD_VAR 0 1
3793: PPUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 62
3799: PUSH
3800: EMPTY
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 72
3811: ST_TO_ADDR
// end ;
3812: LD_VAR 0 2
3816: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3817: LD_INT 0
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// tmp := [ ] ;
3823: LD_ADDR_VAR 0 3
3827: PUSH
3828: EMPTY
3829: ST_TO_ADDR
// list := [ ] ;
3830: LD_ADDR_VAR 0 5
3834: PUSH
3835: EMPTY
3836: ST_TO_ADDR
// for i = 16 to 25 do
3837: LD_ADDR_VAR 0 4
3841: PUSH
3842: DOUBLE
3843: LD_INT 16
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 25
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3924
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_INT 22
3865: PUSH
3866: LD_VAR 0 1
3870: PPUSH
3871: CALL_OW 255
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_VAR 0 1
3887: PUSH
3888: LD_INT 6
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 30
3898: PUSH
3899: LD_VAR 0 4
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: PPUSH
3916: CALL_OW 69
3920: ADD
3921: ST_TO_ADDR
3922: GO 3850
3924: POP
3925: POP
// for i = 1 to tmp do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: DOUBLE
3932: LD_INT 1
3934: DEC
3935: ST_TO_ADDR
3936: LD_VAR 0 3
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4030
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3944: LD_ADDR_VAR 0 5
3948: PUSH
3949: LD_VAR 0 5
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 4
3963: ARRAY
3964: PPUSH
3965: CALL_OW 266
3969: PUSH
3970: LD_VAR 0 3
3974: PUSH
3975: LD_VAR 0 4
3979: ARRAY
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 3
3990: PUSH
3991: LD_VAR 0 4
3995: ARRAY
3996: PPUSH
3997: CALL_OW 251
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: LD_VAR 0 4
4011: ARRAY
4012: PPUSH
4013: CALL_OW 254
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: ADD
4027: ST_TO_ADDR
4028: GO 3941
4030: POP
4031: POP
// result := list ;
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_VAR 0 5
4041: ST_TO_ADDR
// end ;
4042: LD_VAR 0 2
4046: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4047: LD_INT 0
4049: PPUSH
4050: PPUSH
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
// if not factory then
4056: LD_VAR 0 1
4060: NOT
4061: IFFALSE 4065
// exit ;
4063: GO 4658
// if control = control_apeman then
4065: LD_VAR 0 4
4069: PUSH
4070: LD_INT 5
4072: EQUAL
4073: IFFALSE 4182
// begin tmp := UnitsInside ( factory ) ;
4075: LD_ADDR_VAR 0 8
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 313
4089: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4090: LD_VAR 0 8
4094: PPUSH
4095: LD_INT 25
4097: PUSH
4098: LD_INT 12
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: NOT
4110: IFFALSE 4120
// control := control_manual ;
4112: LD_ADDR_VAR 0 4
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4120: LD_ADDR_VAR 0 8
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: CALL 3817 0 1
4134: ST_TO_ADDR
// if tmp then
4135: LD_VAR 0 8
4139: IFFALSE 4182
// begin for i in tmp do
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_VAR 0 8
4150: PUSH
4151: FOR_IN
4152: IFFALSE 4180
// if i [ 1 ] = b_ext_radio then
4154: LD_VAR 0 7
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_INT 22
4165: EQUAL
4166: IFFALSE 4178
// begin control := control_remote ;
4168: LD_ADDR_VAR 0 4
4172: PUSH
4173: LD_INT 2
4175: ST_TO_ADDR
// break ;
4176: GO 4180
// end ;
4178: GO 4151
4180: POP
4181: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_VAR 0 4
4201: PPUSH
4202: LD_VAR 0 5
4206: PPUSH
4207: CALL_OW 448
4211: IFFALSE 4246
// begin result := [ chassis , engine , control , weapon ] ;
4213: LD_ADDR_VAR 0 6
4217: PUSH
4218: LD_VAR 0 2
4222: PUSH
4223: LD_VAR 0 3
4227: PUSH
4228: LD_VAR 0 4
4232: PUSH
4233: LD_VAR 0 5
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: ST_TO_ADDR
// exit ;
4244: GO 4658
// end ; _chassis := AvailableChassisList ( factory ) ;
4246: LD_ADDR_VAR 0 9
4250: PUSH
4251: LD_VAR 0 1
4255: PPUSH
4256: CALL_OW 475
4260: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4261: LD_ADDR_VAR 0 11
4265: PUSH
4266: LD_VAR 0 1
4270: PPUSH
4271: CALL_OW 476
4275: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4276: LD_ADDR_VAR 0 12
4280: PUSH
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 477
4290: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4291: LD_ADDR_VAR 0 10
4295: PUSH
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 478
4305: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4306: LD_VAR 0 9
4310: NOT
4311: PUSH
4312: LD_VAR 0 11
4316: NOT
4317: OR
4318: PUSH
4319: LD_VAR 0 12
4323: NOT
4324: OR
4325: PUSH
4326: LD_VAR 0 10
4330: NOT
4331: OR
4332: IFFALSE 4367
// begin result := [ chassis , engine , control , weapon ] ;
4334: LD_ADDR_VAR 0 6
4338: PUSH
4339: LD_VAR 0 2
4343: PUSH
4344: LD_VAR 0 3
4348: PUSH
4349: LD_VAR 0 4
4353: PUSH
4354: LD_VAR 0 5
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// exit ;
4365: GO 4658
// end ; if not chassis in _chassis then
4367: LD_VAR 0 2
4371: PUSH
4372: LD_VAR 0 9
4376: IN
4377: NOT
4378: IFFALSE 4404
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_VAR 0 9
4389: PUSH
4390: LD_INT 1
4392: PPUSH
4393: LD_VAR 0 9
4397: PPUSH
4398: CALL_OW 12
4402: ARRAY
4403: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4404: LD_VAR 0 2
4408: PPUSH
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL 4663 0 2
4418: NOT
4419: IFFALSE 4478
// repeat engine := _engine [ 1 ] ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: LD_VAR 0 11
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4435: LD_ADDR_VAR 0 11
4439: PUSH
4440: LD_VAR 0 11
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL_OW 3
4452: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4453: LD_VAR 0 2
4457: PPUSH
4458: LD_VAR 0 3
4462: PPUSH
4463: CALL 4663 0 2
4467: PUSH
4468: LD_VAR 0 11
4472: PUSH
4473: EMPTY
4474: EQUAL
4475: OR
4476: IFFALSE 4421
// if not control in _control then
4478: LD_VAR 0 4
4482: PUSH
4483: LD_VAR 0 12
4487: IN
4488: NOT
4489: IFFALSE 4515
// control := _control [ rand ( 1 , _control ) ] ;
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_VAR 0 12
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_VAR 0 12
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4515: LD_VAR 0 2
4519: PPUSH
4520: LD_VAR 0 5
4524: PPUSH
4525: CALL 4883 0 2
4529: NOT
4530: IFFALSE 4589
// repeat weapon := _weapon [ 1 ] ;
4532: LD_ADDR_VAR 0 5
4536: PUSH
4537: LD_VAR 0 10
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4546: LD_ADDR_VAR 0 10
4550: PUSH
4551: LD_VAR 0 10
4555: PPUSH
4556: LD_INT 1
4558: PPUSH
4559: CALL_OW 3
4563: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4564: LD_VAR 0 2
4568: PPUSH
4569: LD_VAR 0 5
4573: PPUSH
4574: CALL 4883 0 2
4578: PUSH
4579: LD_VAR 0 10
4583: PUSH
4584: EMPTY
4585: EQUAL
4586: OR
4587: IFFALSE 4532
// result := [ ] ;
4589: LD_ADDR_VAR 0 6
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_VAR 0 2
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: LD_VAR 0 4
4615: PPUSH
4616: LD_VAR 0 5
4620: PPUSH
4621: CALL_OW 448
4625: IFFALSE 4658
// result := [ chassis , engine , control , weapon ] ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_VAR 0 2
4636: PUSH
4637: LD_VAR 0 3
4641: PUSH
4642: LD_VAR 0 4
4646: PUSH
4647: LD_VAR 0 5
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// end ;
4658: LD_VAR 0 6
4662: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4663: LD_INT 0
4665: PPUSH
// if not chassis or not engine then
4666: LD_VAR 0 1
4670: NOT
4671: PUSH
4672: LD_VAR 0 2
4676: NOT
4677: OR
4678: IFFALSE 4682
// exit ;
4680: GO 4878
// case engine of engine_solar :
4682: LD_VAR 0 2
4686: PUSH
4687: LD_INT 2
4689: DOUBLE
4690: EQUAL
4691: IFTRUE 4695
4693: GO 4733
4695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: LD_INT 11
4703: PUSH
4704: LD_INT 12
4706: PUSH
4707: LD_INT 13
4709: PUSH
4710: LD_INT 14
4712: PUSH
4713: LD_INT 1
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: LD_INT 3
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: ST_TO_ADDR
4731: GO 4862
4733: LD_INT 1
4735: DOUBLE
4736: EQUAL
4737: IFTRUE 4741
4739: GO 4803
4741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_INT 11
4749: PUSH
4750: LD_INT 12
4752: PUSH
4753: LD_INT 13
4755: PUSH
4756: LD_INT 14
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 4
4770: PUSH
4771: LD_INT 5
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 23
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 24
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 4862
4803: LD_INT 3
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4861
4811: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 13
4819: PUSH
4820: LD_INT 14
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: LD_INT 3
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: LD_INT 5
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 23
4843: PUSH
4844: LD_INT 24
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
4859: GO 4862
4861: POP
// result := ( chassis in result ) ;
4862: LD_ADDR_VAR 0 3
4866: PUSH
4867: LD_VAR 0 1
4871: PUSH
4872: LD_VAR 0 3
4876: IN
4877: ST_TO_ADDR
// end ;
4878: LD_VAR 0 3
4882: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4883: LD_INT 0
4885: PPUSH
// if not chassis or not weapon then
4886: LD_VAR 0 1
4890: NOT
4891: PUSH
4892: LD_VAR 0 2
4896: NOT
4897: OR
4898: IFFALSE 4902
// exit ;
4900: GO 5962
// case weapon of us_machine_gun :
4902: LD_VAR 0 2
4906: PUSH
4907: LD_INT 2
4909: DOUBLE
4910: EQUAL
4911: IFTRUE 4915
4913: GO 4945
4915: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_INT 1
4923: PUSH
4924: LD_INT 2
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: ST_TO_ADDR
4943: GO 5946
4945: LD_INT 3
4947: DOUBLE
4948: EQUAL
4949: IFTRUE 4953
4951: GO 4983
4953: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4954: LD_ADDR_VAR 0 3
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: LD_INT 2
4964: PUSH
4965: LD_INT 3
4967: PUSH
4968: LD_INT 4
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: ST_TO_ADDR
4981: GO 5946
4983: LD_INT 11
4985: DOUBLE
4986: EQUAL
4987: IFTRUE 4991
4989: GO 5021
4991: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4992: LD_ADDR_VAR 0 3
4996: PUSH
4997: LD_INT 1
4999: PUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: LD_INT 4
5008: PUSH
5009: LD_INT 5
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: ST_TO_ADDR
5019: GO 5946
5021: LD_INT 4
5023: DOUBLE
5024: EQUAL
5025: IFTRUE 5029
5027: GO 5055
5029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5030: LD_ADDR_VAR 0 3
5034: PUSH
5035: LD_INT 2
5037: PUSH
5038: LD_INT 3
5040: PUSH
5041: LD_INT 4
5043: PUSH
5044: LD_INT 5
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 5946
5055: LD_INT 5
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5089
5063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5064: LD_ADDR_VAR 0 3
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 4
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: ST_TO_ADDR
5087: GO 5946
5089: LD_INT 9
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5097
5095: GO 5123
5097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5098: LD_ADDR_VAR 0 3
5102: PUSH
5103: LD_INT 2
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: LD_INT 5
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 5946
5123: LD_INT 7
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5157
5131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 4
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: ST_TO_ADDR
5155: GO 5946
5157: LD_INT 12
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5191
5165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: ST_TO_ADDR
5189: GO 5946
5191: LD_INT 13
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5199
5197: GO 5225
5199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_INT 3
5210: PUSH
5211: LD_INT 4
5213: PUSH
5214: LD_INT 5
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
5223: GO 5946
5225: LD_INT 14
5227: DOUBLE
5228: EQUAL
5229: IFTRUE 5233
5231: GO 5251
5233: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5234: LD_ADDR_VAR 0 3
5238: PUSH
5239: LD_INT 4
5241: PUSH
5242: LD_INT 5
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: ST_TO_ADDR
5249: GO 5946
5251: LD_INT 6
5253: DOUBLE
5254: EQUAL
5255: IFTRUE 5259
5257: GO 5277
5259: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_INT 4
5267: PUSH
5268: LD_INT 5
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: ST_TO_ADDR
5275: GO 5946
5277: LD_INT 10
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5303
5285: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 5
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: ST_TO_ADDR
5301: GO 5946
5303: LD_INT 22
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5337
5311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: LD_INT 11
5319: PUSH
5320: LD_INT 12
5322: PUSH
5323: LD_INT 13
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: ST_TO_ADDR
5335: GO 5946
5337: LD_INT 23
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5371
5345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_INT 11
5353: PUSH
5354: LD_INT 12
5356: PUSH
5357: LD_INT 13
5359: PUSH
5360: LD_INT 14
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: ST_TO_ADDR
5369: GO 5946
5371: LD_INT 24
5373: DOUBLE
5374: EQUAL
5375: IFTRUE 5379
5377: GO 5405
5379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5380: LD_ADDR_VAR 0 3
5384: PUSH
5385: LD_INT 11
5387: PUSH
5388: LD_INT 12
5390: PUSH
5391: LD_INT 13
5393: PUSH
5394: LD_INT 14
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: ST_TO_ADDR
5403: GO 5946
5405: LD_INT 30
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5439
5413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: LD_INT 11
5421: PUSH
5422: LD_INT 12
5424: PUSH
5425: LD_INT 13
5427: PUSH
5428: LD_INT 14
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ST_TO_ADDR
5437: GO 5946
5439: LD_INT 25
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5465
5447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: LD_INT 13
5455: PUSH
5456: LD_INT 14
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: ST_TO_ADDR
5463: GO 5946
5465: LD_INT 27
5467: DOUBLE
5468: EQUAL
5469: IFTRUE 5473
5471: GO 5491
5473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_INT 13
5481: PUSH
5482: LD_INT 14
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: ST_TO_ADDR
5489: GO 5946
5491: LD_INT 92
5493: DOUBLE
5494: EQUAL
5495: IFTRUE 5499
5497: GO 5525
5499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: LD_INT 11
5507: PUSH
5508: LD_INT 12
5510: PUSH
5511: LD_INT 13
5513: PUSH
5514: LD_INT 14
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
5523: GO 5946
5525: LD_INT 28
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 5551
5533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5534: LD_ADDR_VAR 0 3
5538: PUSH
5539: LD_INT 13
5541: PUSH
5542: LD_INT 14
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: ST_TO_ADDR
5549: GO 5946
5551: LD_INT 29
5553: DOUBLE
5554: EQUAL
5555: IFTRUE 5559
5557: GO 5577
5559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5560: LD_ADDR_VAR 0 3
5564: PUSH
5565: LD_INT 13
5567: PUSH
5568: LD_INT 14
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: ST_TO_ADDR
5575: GO 5946
5577: LD_INT 31
5579: DOUBLE
5580: EQUAL
5581: IFTRUE 5585
5583: GO 5603
5585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_INT 13
5593: PUSH
5594: LD_INT 14
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: ST_TO_ADDR
5601: GO 5946
5603: LD_INT 26
5605: DOUBLE
5606: EQUAL
5607: IFTRUE 5611
5609: GO 5629
5611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5612: LD_ADDR_VAR 0 3
5616: PUSH
5617: LD_INT 13
5619: PUSH
5620: LD_INT 14
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: ST_TO_ADDR
5627: GO 5946
5629: LD_INT 42
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5637
5635: GO 5663
5637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5638: LD_ADDR_VAR 0 3
5642: PUSH
5643: LD_INT 21
5645: PUSH
5646: LD_INT 22
5648: PUSH
5649: LD_INT 23
5651: PUSH
5652: LD_INT 24
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
5661: GO 5946
5663: LD_INT 43
5665: DOUBLE
5666: EQUAL
5667: IFTRUE 5671
5669: GO 5697
5671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5672: LD_ADDR_VAR 0 3
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 24
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: ST_TO_ADDR
5695: GO 5946
5697: LD_INT 44
5699: DOUBLE
5700: EQUAL
5701: IFTRUE 5705
5703: GO 5731
5705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5706: LD_ADDR_VAR 0 3
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 22
5716: PUSH
5717: LD_INT 23
5719: PUSH
5720: LD_INT 24
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
5729: GO 5946
5731: LD_INT 45
5733: DOUBLE
5734: EQUAL
5735: IFTRUE 5739
5737: GO 5765
5739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5740: LD_ADDR_VAR 0 3
5744: PUSH
5745: LD_INT 21
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 23
5753: PUSH
5754: LD_INT 24
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: ST_TO_ADDR
5763: GO 5946
5765: LD_INT 49
5767: DOUBLE
5768: EQUAL
5769: IFTRUE 5773
5771: GO 5799
5773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 22
5784: PUSH
5785: LD_INT 23
5787: PUSH
5788: LD_INT 24
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: ST_TO_ADDR
5797: GO 5946
5799: LD_INT 51
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5833
5807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 22
5818: PUSH
5819: LD_INT 23
5821: PUSH
5822: LD_INT 24
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: ST_TO_ADDR
5831: GO 5946
5833: LD_INT 52
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5841
5839: GO 5867
5841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 23
5855: PUSH
5856: LD_INT 24
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 5946
5867: LD_INT 53
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5893
5875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: LD_INT 23
5883: PUSH
5884: LD_INT 24
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: ST_TO_ADDR
5891: GO 5946
5893: LD_INT 46
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5919
5901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 23
5909: PUSH
5910: LD_INT 24
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
5917: GO 5946
5919: LD_INT 47
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5945
5927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 23
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: ST_TO_ADDR
5943: GO 5946
5945: POP
// result := ( chassis in result ) ;
5946: LD_ADDR_VAR 0 3
5950: PUSH
5951: LD_VAR 0 1
5955: PUSH
5956: LD_VAR 0 3
5960: IN
5961: ST_TO_ADDR
// end ;
5962: LD_VAR 0 3
5966: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
// result := array ;
5976: LD_ADDR_VAR 0 5
5980: PUSH
5981: LD_VAR 0 1
5985: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5986: LD_VAR 0 1
5990: NOT
5991: PUSH
5992: LD_VAR 0 2
5996: NOT
5997: OR
5998: PUSH
5999: LD_VAR 0 3
6003: NOT
6004: OR
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_VAR 0 1
6015: GREATER
6016: OR
6017: PUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_VAR 0 1
6027: GREATER
6028: OR
6029: IFFALSE 6033
// exit ;
6031: GO 6329
// if direction then
6033: LD_VAR 0 4
6037: IFFALSE 6101
// begin d := 1 ;
6039: LD_ADDR_VAR 0 9
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if i_from > i_to then
6047: LD_VAR 0 2
6051: PUSH
6052: LD_VAR 0 3
6056: GREATER
6057: IFFALSE 6083
// length := ( array - i_from ) + i_to else
6059: LD_ADDR_VAR 0 11
6063: PUSH
6064: LD_VAR 0 1
6068: PUSH
6069: LD_VAR 0 2
6073: MINUS
6074: PUSH
6075: LD_VAR 0 3
6079: PLUS
6080: ST_TO_ADDR
6081: GO 6099
// length := i_to - i_from ;
6083: LD_ADDR_VAR 0 11
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 2
6097: MINUS
6098: ST_TO_ADDR
// end else
6099: GO 6162
// begin d := - 1 ;
6101: LD_ADDR_VAR 0 9
6105: PUSH
6106: LD_INT 1
6108: NEG
6109: ST_TO_ADDR
// if i_from > i_to then
6110: LD_VAR 0 2
6114: PUSH
6115: LD_VAR 0 3
6119: GREATER
6120: IFFALSE 6140
// length := i_from - i_to else
6122: LD_ADDR_VAR 0 11
6126: PUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_VAR 0 3
6136: MINUS
6137: ST_TO_ADDR
6138: GO 6162
// length := ( array - i_to ) + i_from ;
6140: LD_ADDR_VAR 0 11
6144: PUSH
6145: LD_VAR 0 1
6149: PUSH
6150: LD_VAR 0 3
6154: MINUS
6155: PUSH
6156: LD_VAR 0 2
6160: PLUS
6161: ST_TO_ADDR
// end ; if not length then
6162: LD_VAR 0 11
6166: NOT
6167: IFFALSE 6171
// exit ;
6169: GO 6329
// tmp := array ;
6171: LD_ADDR_VAR 0 10
6175: PUSH
6176: LD_VAR 0 1
6180: ST_TO_ADDR
// for i = 1 to length do
6181: LD_ADDR_VAR 0 6
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_VAR 0 11
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6317
// begin for j = 1 to array do
6199: LD_ADDR_VAR 0 7
6203: PUSH
6204: DOUBLE
6205: LD_INT 1
6207: DEC
6208: ST_TO_ADDR
6209: LD_VAR 0 1
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6303
// begin k := j + d ;
6217: LD_ADDR_VAR 0 8
6221: PUSH
6222: LD_VAR 0 7
6226: PUSH
6227: LD_VAR 0 9
6231: PLUS
6232: ST_TO_ADDR
// if k > array then
6233: LD_VAR 0 8
6237: PUSH
6238: LD_VAR 0 1
6242: GREATER
6243: IFFALSE 6253
// k := 1 ;
6245: LD_ADDR_VAR 0 8
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if not k then
6253: LD_VAR 0 8
6257: NOT
6258: IFFALSE 6270
// k := array ;
6260: LD_ADDR_VAR 0 8
6264: PUSH
6265: LD_VAR 0 1
6269: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6270: LD_ADDR_VAR 0 10
6274: PUSH
6275: LD_VAR 0 10
6279: PPUSH
6280: LD_VAR 0 8
6284: PPUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 7
6294: ARRAY
6295: PPUSH
6296: CALL_OW 1
6300: ST_TO_ADDR
// end ;
6301: GO 6214
6303: POP
6304: POP
// array := tmp ;
6305: LD_ADDR_VAR 0 1
6309: PUSH
6310: LD_VAR 0 10
6314: ST_TO_ADDR
// end ;
6315: GO 6196
6317: POP
6318: POP
// result := array ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 1
6328: ST_TO_ADDR
// end ;
6329: LD_VAR 0 5
6333: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
// result := 0 ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// if not array or not value in array then
6346: LD_VAR 0 1
6350: NOT
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: LD_VAR 0 1
6361: IN
6362: NOT
6363: OR
6364: IFFALSE 6368
// exit ;
6366: GO 6422
// for i = 1 to array do
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6420
// if value = array [ i ] then
6386: LD_VAR 0 2
6390: PUSH
6391: LD_VAR 0 1
6395: PUSH
6396: LD_VAR 0 4
6400: ARRAY
6401: EQUAL
6402: IFFALSE 6418
// begin result := i ;
6404: LD_ADDR_VAR 0 3
6408: PUSH
6409: LD_VAR 0 4
6413: ST_TO_ADDR
// exit ;
6414: POP
6415: POP
6416: GO 6422
// end ;
6418: GO 6383
6420: POP
6421: POP
// end ;
6422: LD_VAR 0 3
6426: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6427: LD_INT 0
6429: PPUSH
// vc_chassis := chassis ;
6430: LD_ADDR_OWVAR 37
6434: PUSH
6435: LD_VAR 0 1
6439: ST_TO_ADDR
// vc_engine := engine ;
6440: LD_ADDR_OWVAR 39
6444: PUSH
6445: LD_VAR 0 2
6449: ST_TO_ADDR
// vc_control := control ;
6450: LD_ADDR_OWVAR 38
6454: PUSH
6455: LD_VAR 0 3
6459: ST_TO_ADDR
// vc_weapon := weapon ;
6460: LD_ADDR_OWVAR 40
6464: PUSH
6465: LD_VAR 0 4
6469: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6470: LD_ADDR_OWVAR 41
6474: PUSH
6475: LD_VAR 0 5
6479: ST_TO_ADDR
// end ;
6480: LD_VAR 0 6
6484: RET
// export function WantPlant ( unit ) ; var task ; begin
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// result := false ;
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 437
6511: ST_TO_ADDR
// if task then
6512: LD_VAR 0 3
6516: IFFALSE 6544
// if task [ 1 ] [ 1 ] = p then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 1
6525: ARRAY
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PUSH
6531: LD_STRING p
6533: EQUAL
6534: IFFALSE 6544
// result := true ;
6536: LD_ADDR_VAR 0 2
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ;
6544: LD_VAR 0 2
6548: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6549: LD_INT 0
6551: PPUSH
6552: PPUSH
6553: PPUSH
6554: PPUSH
// if pos < 1 then
6555: LD_VAR 0 2
6559: PUSH
6560: LD_INT 1
6562: LESS
6563: IFFALSE 6567
// exit ;
6565: GO 6870
// if pos = 1 then
6567: LD_VAR 0 2
6571: PUSH
6572: LD_INT 1
6574: EQUAL
6575: IFFALSE 6608
// result := Replace ( arr , pos [ 1 ] , value ) else
6577: LD_ADDR_VAR 0 4
6581: PUSH
6582: LD_VAR 0 1
6586: PPUSH
6587: LD_VAR 0 2
6591: PUSH
6592: LD_INT 1
6594: ARRAY
6595: PPUSH
6596: LD_VAR 0 3
6600: PPUSH
6601: CALL_OW 1
6605: ST_TO_ADDR
6606: GO 6870
// begin tmp := arr ;
6608: LD_ADDR_VAR 0 6
6612: PUSH
6613: LD_VAR 0 1
6617: ST_TO_ADDR
// s_arr := [ tmp ] ;
6618: LD_ADDR_VAR 0 7
6622: PUSH
6623: LD_VAR 0 6
6627: PUSH
6628: EMPTY
6629: LIST
6630: ST_TO_ADDR
// for i = 1 to pos - 1 do
6631: LD_ADDR_VAR 0 5
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_VAR 0 2
6645: PUSH
6646: LD_INT 1
6648: MINUS
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6696
// begin tmp := tmp [ pos [ i ] ] ;
6653: LD_ADDR_VAR 0 6
6657: PUSH
6658: LD_VAR 0 6
6662: PUSH
6663: LD_VAR 0 2
6667: PUSH
6668: LD_VAR 0 5
6672: ARRAY
6673: ARRAY
6674: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6675: LD_ADDR_VAR 0 7
6679: PUSH
6680: LD_VAR 0 7
6684: PUSH
6685: LD_VAR 0 6
6689: PUSH
6690: EMPTY
6691: LIST
6692: ADD
6693: ST_TO_ADDR
// end ;
6694: GO 6650
6696: POP
6697: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6698: LD_ADDR_VAR 0 6
6702: PUSH
6703: LD_VAR 0 6
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 3
6723: PPUSH
6724: CALL_OW 1
6728: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6729: LD_ADDR_VAR 0 7
6733: PUSH
6734: LD_VAR 0 7
6738: PPUSH
6739: LD_VAR 0 7
6743: PPUSH
6744: LD_VAR 0 6
6748: PPUSH
6749: CALL_OW 1
6753: ST_TO_ADDR
// for i = s_arr downto 2 do
6754: LD_ADDR_VAR 0 5
6758: PUSH
6759: DOUBLE
6760: LD_VAR 0 7
6764: INC
6765: ST_TO_ADDR
6766: LD_INT 2
6768: PUSH
6769: FOR_DOWNTO
6770: IFFALSE 6854
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6772: LD_ADDR_VAR 0 6
6776: PUSH
6777: LD_VAR 0 7
6781: PUSH
6782: LD_VAR 0 5
6786: PUSH
6787: LD_INT 1
6789: MINUS
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 2
6796: PUSH
6797: LD_VAR 0 5
6801: PUSH
6802: LD_INT 1
6804: MINUS
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 7
6811: PUSH
6812: LD_VAR 0 5
6816: ARRAY
6817: PPUSH
6818: CALL_OW 1
6822: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6823: LD_ADDR_VAR 0 7
6827: PUSH
6828: LD_VAR 0 7
6832: PPUSH
6833: LD_VAR 0 5
6837: PUSH
6838: LD_INT 1
6840: MINUS
6841: PPUSH
6842: LD_VAR 0 6
6846: PPUSH
6847: CALL_OW 1
6851: ST_TO_ADDR
// end ;
6852: GO 6769
6854: POP
6855: POP
// result := s_arr [ 1 ] ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 7
6865: PUSH
6866: LD_INT 1
6868: ARRAY
6869: ST_TO_ADDR
// end ; end ;
6870: LD_VAR 0 4
6874: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6875: LD_INT 0
6877: PPUSH
6878: PPUSH
// if not list then
6879: LD_VAR 0 1
6883: NOT
6884: IFFALSE 6888
// exit ;
6886: GO 6979
// i := list [ pos1 ] ;
6888: LD_ADDR_VAR 0 5
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: LD_VAR 0 2
6902: ARRAY
6903: ST_TO_ADDR
// if not i then
6904: LD_VAR 0 5
6908: NOT
6909: IFFALSE 6913
// exit ;
6911: GO 6979
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6913: LD_ADDR_VAR 0 1
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_VAR 0 1
6932: PUSH
6933: LD_VAR 0 3
6937: ARRAY
6938: PPUSH
6939: CALL_OW 1
6943: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: LD_VAR 0 3
6958: PPUSH
6959: LD_VAR 0 5
6963: PPUSH
6964: CALL_OW 1
6968: ST_TO_ADDR
// result := list ;
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 1
6978: ST_TO_ADDR
// end ;
6979: LD_VAR 0 4
6983: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6984: LD_INT 0
6986: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6987: LD_ADDR_VAR 0 5
6991: PUSH
6992: LD_VAR 0 1
6996: PPUSH
6997: CALL_OW 250
7001: PPUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 251
7011: PPUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: LD_VAR 0 3
7021: PPUSH
7022: LD_VAR 0 4
7026: PPUSH
7027: CALL 7037 0 5
7031: ST_TO_ADDR
// end ;
7032: LD_VAR 0 5
7036: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// if not list then
7043: LD_VAR 0 3
7047: NOT
7048: IFFALSE 7052
// exit ;
7050: GO 7440
// result := [ ] ;
7052: LD_ADDR_VAR 0 6
7056: PUSH
7057: EMPTY
7058: ST_TO_ADDR
// for i in list do
7059: LD_ADDR_VAR 0 7
7063: PUSH
7064: LD_VAR 0 3
7068: PUSH
7069: FOR_IN
7070: IFFALSE 7272
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7072: LD_ADDR_VAR 0 9
7076: PUSH
7077: LD_VAR 0 7
7081: PPUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 297
7096: ST_TO_ADDR
// if not result then
7097: LD_VAR 0 6
7101: NOT
7102: IFFALSE 7128
// result := [ [ i , tmp ] ] else
7104: LD_ADDR_VAR 0 6
7108: PUSH
7109: LD_VAR 0 7
7113: PUSH
7114: LD_VAR 0 9
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: ST_TO_ADDR
7126: GO 7270
// begin if result [ result ] [ 2 ] < tmp then
7128: LD_VAR 0 6
7132: PUSH
7133: LD_VAR 0 6
7137: ARRAY
7138: PUSH
7139: LD_INT 2
7141: ARRAY
7142: PUSH
7143: LD_VAR 0 9
7147: LESS
7148: IFFALSE 7190
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7150: LD_ADDR_VAR 0 6
7154: PUSH
7155: LD_VAR 0 6
7159: PPUSH
7160: LD_VAR 0 6
7164: PUSH
7165: LD_INT 1
7167: PLUS
7168: PPUSH
7169: LD_VAR 0 7
7173: PUSH
7174: LD_VAR 0 9
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 2
7187: ST_TO_ADDR
7188: GO 7270
// for j = 1 to result do
7190: LD_ADDR_VAR 0 8
7194: PUSH
7195: DOUBLE
7196: LD_INT 1
7198: DEC
7199: ST_TO_ADDR
7200: LD_VAR 0 6
7204: PUSH
7205: FOR_TO
7206: IFFALSE 7268
// begin if tmp < result [ j ] [ 2 ] then
7208: LD_VAR 0 9
7212: PUSH
7213: LD_VAR 0 6
7217: PUSH
7218: LD_VAR 0 8
7222: ARRAY
7223: PUSH
7224: LD_INT 2
7226: ARRAY
7227: LESS
7228: IFFALSE 7266
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7230: LD_ADDR_VAR 0 6
7234: PUSH
7235: LD_VAR 0 6
7239: PPUSH
7240: LD_VAR 0 8
7244: PPUSH
7245: LD_VAR 0 7
7249: PUSH
7250: LD_VAR 0 9
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 2
7263: ST_TO_ADDR
// break ;
7264: GO 7268
// end ; end ;
7266: GO 7205
7268: POP
7269: POP
// end ; end ;
7270: GO 7069
7272: POP
7273: POP
// if result and not asc then
7274: LD_VAR 0 6
7278: PUSH
7279: LD_VAR 0 4
7283: NOT
7284: AND
7285: IFFALSE 7360
// begin tmp := result ;
7287: LD_ADDR_VAR 0 9
7291: PUSH
7292: LD_VAR 0 6
7296: ST_TO_ADDR
// for i = tmp downto 1 do
7297: LD_ADDR_VAR 0 7
7301: PUSH
7302: DOUBLE
7303: LD_VAR 0 9
7307: INC
7308: ST_TO_ADDR
7309: LD_INT 1
7311: PUSH
7312: FOR_DOWNTO
7313: IFFALSE 7358
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7315: LD_ADDR_VAR 0 6
7319: PUSH
7320: LD_VAR 0 6
7324: PPUSH
7325: LD_VAR 0 9
7329: PUSH
7330: LD_VAR 0 7
7334: MINUS
7335: PUSH
7336: LD_INT 1
7338: PLUS
7339: PPUSH
7340: LD_VAR 0 9
7344: PUSH
7345: LD_VAR 0 7
7349: ARRAY
7350: PPUSH
7351: CALL_OW 1
7355: ST_TO_ADDR
7356: GO 7312
7358: POP
7359: POP
// end ; tmp := [ ] ;
7360: LD_ADDR_VAR 0 9
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// if mode then
7367: LD_VAR 0 5
7371: IFFALSE 7440
// begin for i = 1 to result do
7373: LD_ADDR_VAR 0 7
7377: PUSH
7378: DOUBLE
7379: LD_INT 1
7381: DEC
7382: ST_TO_ADDR
7383: LD_VAR 0 6
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7428
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7391: LD_ADDR_VAR 0 9
7395: PUSH
7396: LD_VAR 0 9
7400: PPUSH
7401: LD_VAR 0 7
7405: PPUSH
7406: LD_VAR 0 6
7410: PUSH
7411: LD_VAR 0 7
7415: ARRAY
7416: PUSH
7417: LD_INT 1
7419: ARRAY
7420: PPUSH
7421: CALL_OW 1
7425: ST_TO_ADDR
7426: GO 7388
7428: POP
7429: POP
// result := tmp ;
7430: LD_ADDR_VAR 0 6
7434: PUSH
7435: LD_VAR 0 9
7439: ST_TO_ADDR
// end ; end ;
7440: LD_VAR 0 6
7444: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7445: LD_INT 0
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7453: LD_ADDR_VAR 0 5
7457: PUSH
7458: LD_INT 0
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: EMPTY
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: ST_TO_ADDR
// if not x or not y then
7475: LD_VAR 0 2
7479: NOT
7480: PUSH
7481: LD_VAR 0 3
7485: NOT
7486: OR
7487: IFFALSE 7491
// exit ;
7489: GO 9141
// if not range then
7491: LD_VAR 0 4
7495: NOT
7496: IFFALSE 7506
// range := 10 ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 10
7505: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 81
7513: PUSH
7514: LD_VAR 0 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 92
7525: PUSH
7526: LD_VAR 0 2
7530: PUSH
7531: LD_VAR 0 3
7535: PUSH
7536: LD_VAR 0 4
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 21
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL_OW 69
7573: ST_TO_ADDR
// if not tmp then
7574: LD_VAR 0 8
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 9141
// for i in tmp do
7583: LD_ADDR_VAR 0 6
7587: PUSH
7588: LD_VAR 0 8
7592: PUSH
7593: FOR_IN
7594: IFFALSE 9116
// begin points := [ 0 , 0 , 0 ] ;
7596: LD_ADDR_VAR 0 9
7600: PUSH
7601: LD_INT 0
7603: PUSH
7604: LD_INT 0
7606: PUSH
7607: LD_INT 0
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: ST_TO_ADDR
// bpoints := 1 ;
7615: LD_ADDR_VAR 0 10
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7623: LD_VAR 0 6
7627: PPUSH
7628: CALL_OW 247
7632: PUSH
7633: LD_INT 1
7635: DOUBLE
7636: EQUAL
7637: IFTRUE 7641
7639: GO 8219
7641: POP
// begin if GetClass ( i ) = 1 then
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 257
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7676
// points := [ 10 , 5 , 3 ] ;
7657: LD_ADDR_VAR 0 9
7661: PUSH
7662: LD_INT 10
7664: PUSH
7665: LD_INT 5
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 257
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: IN
7700: IFFALSE 7721
// points := [ 3 , 2 , 1 ] ;
7702: LD_ADDR_VAR 0 9
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 2
7712: PUSH
7713: LD_INT 1
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7721: LD_VAR 0 6
7725: PPUSH
7726: CALL_OW 257
7730: PUSH
7731: LD_INT 5
7733: EQUAL
7734: IFFALSE 7755
// points := [ 130 , 5 , 2 ] ;
7736: LD_ADDR_VAR 0 9
7740: PUSH
7741: LD_INT 130
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 2
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7755: LD_VAR 0 6
7759: PPUSH
7760: CALL_OW 257
7764: PUSH
7765: LD_INT 8
7767: EQUAL
7768: IFFALSE 7789
// points := [ 35 , 35 , 30 ] ;
7770: LD_ADDR_VAR 0 9
7774: PUSH
7775: LD_INT 35
7777: PUSH
7778: LD_INT 35
7780: PUSH
7781: LD_INT 30
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7789: LD_VAR 0 6
7793: PPUSH
7794: CALL_OW 257
7798: PUSH
7799: LD_INT 9
7801: EQUAL
7802: IFFALSE 7823
// points := [ 20 , 55 , 40 ] ;
7804: LD_ADDR_VAR 0 9
7808: PUSH
7809: LD_INT 20
7811: PUSH
7812: LD_INT 55
7814: PUSH
7815: LD_INT 40
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7823: LD_VAR 0 6
7827: PPUSH
7828: CALL_OW 257
7832: PUSH
7833: LD_INT 12
7835: PUSH
7836: LD_INT 16
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: IN
7843: IFFALSE 7864
// points := [ 5 , 3 , 2 ] ;
7845: LD_ADDR_VAR 0 9
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 3
7855: PUSH
7856: LD_INT 2
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7864: LD_VAR 0 6
7868: PPUSH
7869: CALL_OW 257
7873: PUSH
7874: LD_INT 17
7876: EQUAL
7877: IFFALSE 7898
// points := [ 100 , 50 , 75 ] ;
7879: LD_ADDR_VAR 0 9
7883: PUSH
7884: LD_INT 100
7886: PUSH
7887: LD_INT 50
7889: PUSH
7890: LD_INT 75
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7898: LD_VAR 0 6
7902: PPUSH
7903: CALL_OW 257
7907: PUSH
7908: LD_INT 15
7910: EQUAL
7911: IFFALSE 7932
// points := [ 10 , 5 , 3 ] ;
7913: LD_ADDR_VAR 0 9
7917: PUSH
7918: LD_INT 10
7920: PUSH
7921: LD_INT 5
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7932: LD_VAR 0 6
7936: PPUSH
7937: CALL_OW 257
7941: PUSH
7942: LD_INT 14
7944: EQUAL
7945: IFFALSE 7966
// points := [ 10 , 0 , 0 ] ;
7947: LD_ADDR_VAR 0 9
7951: PUSH
7952: LD_INT 10
7954: PUSH
7955: LD_INT 0
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7966: LD_VAR 0 6
7970: PPUSH
7971: CALL_OW 257
7975: PUSH
7976: LD_INT 11
7978: EQUAL
7979: IFFALSE 8000
// points := [ 30 , 10 , 5 ] ;
7981: LD_ADDR_VAR 0 9
7985: PUSH
7986: LD_INT 30
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: LD_INT 5
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_INT 5
8007: PPUSH
8008: CALL_OW 321
8012: PUSH
8013: LD_INT 2
8015: EQUAL
8016: IFFALSE 8033
// bpoints := bpoints * 1.8 ;
8018: LD_ADDR_VAR 0 10
8022: PUSH
8023: LD_VAR 0 10
8027: PUSH
8028: LD_REAL  1.80000000000000E+0000
8031: MUL
8032: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8033: LD_VAR 0 6
8037: PPUSH
8038: CALL_OW 257
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: LD_INT 3
8051: PUSH
8052: LD_INT 4
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: IN
8061: PUSH
8062: LD_VAR 0 1
8066: PPUSH
8067: LD_INT 51
8069: PPUSH
8070: CALL_OW 321
8074: PUSH
8075: LD_INT 2
8077: EQUAL
8078: AND
8079: IFFALSE 8096
// bpoints := bpoints * 1.2 ;
8081: LD_ADDR_VAR 0 10
8085: PUSH
8086: LD_VAR 0 10
8090: PUSH
8091: LD_REAL  1.20000000000000E+0000
8094: MUL
8095: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8096: LD_VAR 0 6
8100: PPUSH
8101: CALL_OW 257
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: LD_INT 7
8111: PUSH
8112: LD_INT 9
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: IN
8120: PUSH
8121: LD_VAR 0 1
8125: PPUSH
8126: LD_INT 52
8128: PPUSH
8129: CALL_OW 321
8133: PUSH
8134: LD_INT 2
8136: EQUAL
8137: AND
8138: IFFALSE 8155
// bpoints := bpoints * 1.5 ;
8140: LD_ADDR_VAR 0 10
8144: PUSH
8145: LD_VAR 0 10
8149: PUSH
8150: LD_REAL  1.50000000000000E+0000
8153: MUL
8154: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_INT 66
8162: PPUSH
8163: CALL_OW 321
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: IFFALSE 8188
// bpoints := bpoints * 1.1 ;
8173: LD_ADDR_VAR 0 10
8177: PUSH
8178: LD_VAR 0 10
8182: PUSH
8183: LD_REAL  1.10000000000000E+0000
8186: MUL
8187: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8188: LD_ADDR_VAR 0 10
8192: PUSH
8193: LD_VAR 0 10
8197: PUSH
8198: LD_VAR 0 6
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: CALL_OW 259
8210: PUSH
8211: LD_REAL  1.15000000000000E+0000
8214: MUL
8215: MUL
8216: ST_TO_ADDR
// end ; unit_vehicle :
8217: GO 9045
8219: LD_INT 2
8221: DOUBLE
8222: EQUAL
8223: IFTRUE 8227
8225: GO 9033
8227: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8228: LD_VAR 0 6
8232: PPUSH
8233: CALL_OW 264
8237: PUSH
8238: LD_INT 2
8240: PUSH
8241: LD_INT 42
8243: PUSH
8244: LD_INT 24
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: IN
8252: IFFALSE 8273
// points := [ 25 , 5 , 3 ] ;
8254: LD_ADDR_VAR 0 9
8258: PUSH
8259: LD_INT 25
8261: PUSH
8262: LD_INT 5
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8273: LD_VAR 0 6
8277: PPUSH
8278: CALL_OW 264
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: LD_INT 43
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: IN
8297: IFFALSE 8318
// points := [ 40 , 15 , 5 ] ;
8299: LD_ADDR_VAR 0 9
8303: PUSH
8304: LD_INT 40
8306: PUSH
8307: LD_INT 15
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8318: LD_VAR 0 6
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: LD_INT 23
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: IN
8338: IFFALSE 8359
// points := [ 7 , 25 , 8 ] ;
8340: LD_ADDR_VAR 0 9
8344: PUSH
8345: LD_INT 7
8347: PUSH
8348: LD_INT 25
8350: PUSH
8351: LD_INT 8
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8359: LD_VAR 0 6
8363: PPUSH
8364: CALL_OW 264
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: LD_INT 27
8374: PUSH
8375: LD_INT 44
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: LIST
8382: IN
8383: IFFALSE 8404
// points := [ 14 , 50 , 16 ] ;
8385: LD_ADDR_VAR 0 9
8389: PUSH
8390: LD_INT 14
8392: PUSH
8393: LD_INT 50
8395: PUSH
8396: LD_INT 16
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8404: LD_VAR 0 6
8408: PPUSH
8409: CALL_OW 264
8413: PUSH
8414: LD_INT 6
8416: PUSH
8417: LD_INT 46
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: IN
8424: IFFALSE 8445
// points := [ 32 , 120 , 70 ] ;
8426: LD_ADDR_VAR 0 9
8430: PUSH
8431: LD_INT 32
8433: PUSH
8434: LD_INT 120
8436: PUSH
8437: LD_INT 70
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8445: LD_VAR 0 6
8449: PPUSH
8450: CALL_OW 264
8454: PUSH
8455: LD_INT 7
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 45
8463: PUSH
8464: LD_INT 92
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: IN
8473: IFFALSE 8494
// points := [ 35 , 20 , 45 ] ;
8475: LD_ADDR_VAR 0 9
8479: PUSH
8480: LD_INT 35
8482: PUSH
8483: LD_INT 20
8485: PUSH
8486: LD_INT 45
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8494: LD_VAR 0 6
8498: PPUSH
8499: CALL_OW 264
8503: PUSH
8504: LD_INT 47
8506: PUSH
8507: EMPTY
8508: LIST
8509: IN
8510: IFFALSE 8531
// points := [ 67 , 45 , 75 ] ;
8512: LD_ADDR_VAR 0 9
8516: PUSH
8517: LD_INT 67
8519: PUSH
8520: LD_INT 45
8522: PUSH
8523: LD_INT 75
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8531: LD_VAR 0 6
8535: PPUSH
8536: CALL_OW 264
8540: PUSH
8541: LD_INT 26
8543: PUSH
8544: EMPTY
8545: LIST
8546: IN
8547: IFFALSE 8568
// points := [ 120 , 30 , 80 ] ;
8549: LD_ADDR_VAR 0 9
8553: PUSH
8554: LD_INT 120
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 80
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8568: LD_VAR 0 6
8572: PPUSH
8573: CALL_OW 264
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: EMPTY
8582: LIST
8583: IN
8584: IFFALSE 8605
// points := [ 40 , 1 , 1 ] ;
8586: LD_ADDR_VAR 0 9
8590: PUSH
8591: LD_INT 40
8593: PUSH
8594: LD_INT 1
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8605: LD_VAR 0 6
8609: PPUSH
8610: CALL_OW 264
8614: PUSH
8615: LD_INT 29
8617: PUSH
8618: EMPTY
8619: LIST
8620: IN
8621: IFFALSE 8642
// points := [ 70 , 200 , 400 ] ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_INT 70
8630: PUSH
8631: LD_INT 200
8633: PUSH
8634: LD_INT 400
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8642: LD_VAR 0 6
8646: PPUSH
8647: CALL_OW 264
8651: PUSH
8652: LD_INT 14
8654: PUSH
8655: LD_INT 53
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: IN
8662: IFFALSE 8683
// points := [ 40 , 10 , 20 ] ;
8664: LD_ADDR_VAR 0 9
8668: PUSH
8669: LD_INT 40
8671: PUSH
8672: LD_INT 10
8674: PUSH
8675: LD_INT 20
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 264
8692: PUSH
8693: LD_INT 9
8695: PUSH
8696: EMPTY
8697: LIST
8698: IN
8699: IFFALSE 8720
// points := [ 5 , 70 , 20 ] ;
8701: LD_ADDR_VAR 0 9
8705: PUSH
8706: LD_INT 5
8708: PUSH
8709: LD_INT 70
8711: PUSH
8712: LD_INT 20
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8720: LD_VAR 0 6
8724: PPUSH
8725: CALL_OW 264
8729: PUSH
8730: LD_INT 10
8732: PUSH
8733: EMPTY
8734: LIST
8735: IN
8736: IFFALSE 8757
// points := [ 35 , 110 , 70 ] ;
8738: LD_ADDR_VAR 0 9
8742: PUSH
8743: LD_INT 35
8745: PUSH
8746: LD_INT 110
8748: PUSH
8749: LD_INT 70
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8757: LD_VAR 0 6
8761: PPUSH
8762: CALL_OW 265
8766: PUSH
8767: LD_INT 25
8769: EQUAL
8770: IFFALSE 8791
// points := [ 80 , 65 , 100 ] ;
8772: LD_ADDR_VAR 0 9
8776: PUSH
8777: LD_INT 80
8779: PUSH
8780: LD_INT 65
8782: PUSH
8783: LD_INT 100
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8791: LD_VAR 0 6
8795: PPUSH
8796: CALL_OW 263
8800: PUSH
8801: LD_INT 1
8803: EQUAL
8804: IFFALSE 8839
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8806: LD_ADDR_VAR 0 10
8810: PUSH
8811: LD_VAR 0 10
8815: PUSH
8816: LD_VAR 0 6
8820: PPUSH
8821: CALL_OW 311
8825: PPUSH
8826: LD_INT 3
8828: PPUSH
8829: CALL_OW 259
8833: PUSH
8834: LD_INT 4
8836: MUL
8837: MUL
8838: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8839: LD_VAR 0 6
8843: PPUSH
8844: CALL_OW 263
8848: PUSH
8849: LD_INT 2
8851: EQUAL
8852: IFFALSE 8903
// begin j := IsControledBy ( i ) ;
8854: LD_ADDR_VAR 0 7
8858: PUSH
8859: LD_VAR 0 6
8863: PPUSH
8864: CALL_OW 312
8868: ST_TO_ADDR
// if j then
8869: LD_VAR 0 7
8873: IFFALSE 8903
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8875: LD_ADDR_VAR 0 10
8879: PUSH
8880: LD_VAR 0 10
8884: PUSH
8885: LD_VAR 0 7
8889: PPUSH
8890: LD_INT 3
8892: PPUSH
8893: CALL_OW 259
8897: PUSH
8898: LD_INT 3
8900: MUL
8901: MUL
8902: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8903: LD_VAR 0 6
8907: PPUSH
8908: CALL_OW 264
8912: PUSH
8913: LD_INT 5
8915: PUSH
8916: LD_INT 6
8918: PUSH
8919: LD_INT 46
8921: PUSH
8922: LD_INT 44
8924: PUSH
8925: LD_INT 47
8927: PUSH
8928: LD_INT 45
8930: PUSH
8931: LD_INT 28
8933: PUSH
8934: LD_INT 7
8936: PUSH
8937: LD_INT 27
8939: PUSH
8940: LD_INT 29
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: IN
8955: PUSH
8956: LD_VAR 0 1
8960: PPUSH
8961: LD_INT 52
8963: PPUSH
8964: CALL_OW 321
8968: PUSH
8969: LD_INT 2
8971: EQUAL
8972: AND
8973: IFFALSE 8990
// bpoints := bpoints * 1.2 ;
8975: LD_ADDR_VAR 0 10
8979: PUSH
8980: LD_VAR 0 10
8984: PUSH
8985: LD_REAL  1.20000000000000E+0000
8988: MUL
8989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8990: LD_VAR 0 6
8994: PPUSH
8995: CALL_OW 264
8999: PUSH
9000: LD_INT 6
9002: PUSH
9003: LD_INT 46
9005: PUSH
9006: LD_INT 47
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: IN
9014: IFFALSE 9031
// bpoints := bpoints * 1.2 ;
9016: LD_ADDR_VAR 0 10
9020: PUSH
9021: LD_VAR 0 10
9025: PUSH
9026: LD_REAL  1.20000000000000E+0000
9029: MUL
9030: ST_TO_ADDR
// end ; unit_building :
9031: GO 9045
9033: LD_INT 3
9035: DOUBLE
9036: EQUAL
9037: IFTRUE 9041
9039: GO 9044
9041: POP
// ; end ;
9042: GO 9045
9044: POP
// for j = 1 to 3 do
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: DOUBLE
9051: LD_INT 1
9053: DEC
9054: ST_TO_ADDR
9055: LD_INT 3
9057: PUSH
9058: FOR_TO
9059: IFFALSE 9112
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9061: LD_ADDR_VAR 0 5
9065: PUSH
9066: LD_VAR 0 5
9070: PPUSH
9071: LD_VAR 0 7
9075: PPUSH
9076: LD_VAR 0 5
9080: PUSH
9081: LD_VAR 0 7
9085: ARRAY
9086: PUSH
9087: LD_VAR 0 9
9091: PUSH
9092: LD_VAR 0 7
9096: ARRAY
9097: PUSH
9098: LD_VAR 0 10
9102: MUL
9103: PLUS
9104: PPUSH
9105: CALL_OW 1
9109: ST_TO_ADDR
9110: GO 9058
9112: POP
9113: POP
// end ;
9114: GO 7593
9116: POP
9117: POP
// result := Replace ( result , 4 , tmp ) ;
9118: LD_ADDR_VAR 0 5
9122: PUSH
9123: LD_VAR 0 5
9127: PPUSH
9128: LD_INT 4
9130: PPUSH
9131: LD_VAR 0 8
9135: PPUSH
9136: CALL_OW 1
9140: ST_TO_ADDR
// end ;
9141: LD_VAR 0 5
9145: RET
// export function DangerAtRange ( unit , range ) ; begin
9146: LD_INT 0
9148: PPUSH
// if not unit then
9149: LD_VAR 0 1
9153: NOT
9154: IFFALSE 9158
// exit ;
9156: GO 9203
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 255
9172: PPUSH
9173: LD_VAR 0 1
9177: PPUSH
9178: CALL_OW 250
9182: PPUSH
9183: LD_VAR 0 1
9187: PPUSH
9188: CALL_OW 251
9192: PPUSH
9193: LD_VAR 0 2
9197: PPUSH
9198: CALL 7445 0 4
9202: ST_TO_ADDR
// end ;
9203: LD_VAR 0 3
9207: RET
// export function DangerInArea ( side , area ) ; begin
9208: LD_INT 0
9210: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9211: LD_ADDR_VAR 0 3
9215: PUSH
9216: LD_VAR 0 2
9220: PPUSH
9221: LD_INT 81
9223: PUSH
9224: LD_VAR 0 1
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 70
9237: ST_TO_ADDR
// end ;
9238: LD_VAR 0 3
9242: RET
// export function IsExtension ( b ) ; begin
9243: LD_INT 0
9245: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9246: LD_ADDR_VAR 0 2
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: LD_INT 23
9258: PUSH
9259: LD_INT 20
9261: PUSH
9262: LD_INT 22
9264: PUSH
9265: LD_INT 17
9267: PUSH
9268: LD_INT 24
9270: PUSH
9271: LD_INT 21
9273: PUSH
9274: LD_INT 19
9276: PUSH
9277: LD_INT 16
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 18
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: IN
9298: ST_TO_ADDR
// end ;
9299: LD_VAR 0 2
9303: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
9308: PPUSH
// result := [ ] ;
9309: LD_ADDR_VAR 0 4
9313: PUSH
9314: EMPTY
9315: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9316: LD_ADDR_VAR 0 5
9320: PUSH
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_INT 21
9328: PUSH
9329: LD_INT 3
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 70
9340: ST_TO_ADDR
// if not tmp then
9341: LD_VAR 0 5
9345: NOT
9346: IFFALSE 9350
// exit ;
9348: GO 9414
// if checkLink then
9350: LD_VAR 0 3
9354: IFFALSE 9404
// begin for i in tmp do
9356: LD_ADDR_VAR 0 6
9360: PUSH
9361: LD_VAR 0 5
9365: PUSH
9366: FOR_IN
9367: IFFALSE 9402
// if GetBase ( i ) <> base then
9369: LD_VAR 0 6
9373: PPUSH
9374: CALL_OW 274
9378: PUSH
9379: LD_VAR 0 1
9383: NONEQUAL
9384: IFFALSE 9400
// ComLinkToBase ( base , i ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: LD_VAR 0 6
9395: PPUSH
9396: CALL_OW 169
9400: GO 9366
9402: POP
9403: POP
// end ; result := tmp ;
9404: LD_ADDR_VAR 0 4
9408: PUSH
9409: LD_VAR 0 5
9413: ST_TO_ADDR
// end ;
9414: LD_VAR 0 4
9418: RET
// export function ComComplete ( units , b ) ; var i ; begin
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// if not units then
9423: LD_VAR 0 1
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9522
// for i in units do
9432: LD_ADDR_VAR 0 4
9436: PUSH
9437: LD_VAR 0 1
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9520
// if BuildingStatus ( b ) = bs_build then
9445: LD_VAR 0 2
9449: PPUSH
9450: CALL_OW 461
9454: PUSH
9455: LD_INT 1
9457: EQUAL
9458: IFFALSE 9518
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9460: LD_VAR 0 4
9464: PPUSH
9465: LD_STRING h
9467: PUSH
9468: LD_VAR 0 2
9472: PPUSH
9473: CALL_OW 250
9477: PUSH
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 251
9487: PUSH
9488: LD_VAR 0 2
9492: PUSH
9493: LD_INT 0
9495: PUSH
9496: LD_INT 0
9498: PUSH
9499: LD_INT 0
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: PPUSH
9514: CALL_OW 446
9518: GO 9442
9520: POP
9521: POP
// end ;
9522: LD_VAR 0 3
9526: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9527: LD_INT 0
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9535: LD_VAR 0 1
9539: NOT
9540: PUSH
9541: LD_VAR 0 1
9545: PPUSH
9546: CALL_OW 263
9550: PUSH
9551: LD_INT 2
9553: NONEQUAL
9554: OR
9555: IFFALSE 9559
// exit ;
9557: GO 9875
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9559: LD_ADDR_VAR 0 6
9563: PUSH
9564: LD_INT 22
9566: PUSH
9567: LD_VAR 0 1
9571: PPUSH
9572: CALL_OW 255
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 2
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 36
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 34
9596: PUSH
9597: LD_INT 31
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: ST_TO_ADDR
// if not tmp then
9618: LD_VAR 0 6
9622: NOT
9623: IFFALSE 9627
// exit ;
9625: GO 9875
// result := [ ] ;
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: EMPTY
9633: ST_TO_ADDR
// for i in tmp do
9634: LD_ADDR_VAR 0 3
9638: PUSH
9639: LD_VAR 0 6
9643: PUSH
9644: FOR_IN
9645: IFFALSE 9716
// begin t := UnitsInside ( i ) ;
9647: LD_ADDR_VAR 0 4
9651: PUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: CALL_OW 313
9661: ST_TO_ADDR
// if t then
9662: LD_VAR 0 4
9666: IFFALSE 9714
// for j in t do
9668: LD_ADDR_VAR 0 7
9672: PUSH
9673: LD_VAR 0 4
9677: PUSH
9678: FOR_IN
9679: IFFALSE 9712
// result := Replace ( result , result + 1 , j ) ;
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_VAR 0 2
9690: PPUSH
9691: LD_VAR 0 2
9695: PUSH
9696: LD_INT 1
9698: PLUS
9699: PPUSH
9700: LD_VAR 0 7
9704: PPUSH
9705: CALL_OW 1
9709: ST_TO_ADDR
9710: GO 9678
9712: POP
9713: POP
// end ;
9714: GO 9644
9716: POP
9717: POP
// if not result then
9718: LD_VAR 0 2
9722: NOT
9723: IFFALSE 9727
// exit ;
9725: GO 9875
// mech := result [ 1 ] ;
9727: LD_ADDR_VAR 0 5
9731: PUSH
9732: LD_VAR 0 2
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: ST_TO_ADDR
// if result > 1 then
9741: LD_VAR 0 2
9745: PUSH
9746: LD_INT 1
9748: GREATER
9749: IFFALSE 9861
// begin for i = 2 to result do
9751: LD_ADDR_VAR 0 3
9755: PUSH
9756: DOUBLE
9757: LD_INT 2
9759: DEC
9760: ST_TO_ADDR
9761: LD_VAR 0 2
9765: PUSH
9766: FOR_TO
9767: IFFALSE 9859
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9769: LD_ADDR_VAR 0 4
9773: PUSH
9774: LD_VAR 0 2
9778: PUSH
9779: LD_VAR 0 3
9783: ARRAY
9784: PPUSH
9785: LD_INT 3
9787: PPUSH
9788: CALL_OW 259
9792: PUSH
9793: LD_VAR 0 2
9797: PUSH
9798: LD_VAR 0 3
9802: ARRAY
9803: PPUSH
9804: CALL_OW 432
9808: MINUS
9809: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9810: LD_VAR 0 4
9814: PUSH
9815: LD_VAR 0 5
9819: PPUSH
9820: LD_INT 3
9822: PPUSH
9823: CALL_OW 259
9827: PUSH
9828: LD_VAR 0 5
9832: PPUSH
9833: CALL_OW 432
9837: MINUS
9838: GREATEREQUAL
9839: IFFALSE 9857
// mech := result [ i ] ;
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: LD_VAR 0 2
9850: PUSH
9851: LD_VAR 0 3
9855: ARRAY
9856: ST_TO_ADDR
// end ;
9857: GO 9766
9859: POP
9860: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_VAR 0 5
9870: PPUSH
9871: CALL_OW 135
// end ;
9875: LD_VAR 0 2
9879: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9880: LD_INT 0
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
9888: PPUSH
9889: PPUSH
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
// result := [ ] ;
9895: LD_ADDR_VAR 0 7
9899: PUSH
9900: EMPTY
9901: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9902: LD_VAR 0 1
9906: PPUSH
9907: CALL_OW 266
9911: PUSH
9912: LD_INT 0
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: IN
9922: NOT
9923: IFFALSE 9927
// exit ;
9925: GO 11561
// if name then
9927: LD_VAR 0 3
9931: IFFALSE 9947
// SetBName ( base_dep , name ) ;
9933: LD_VAR 0 1
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: CALL_OW 500
// base := GetBase ( base_dep ) ;
9947: LD_ADDR_VAR 0 15
9951: PUSH
9952: LD_VAR 0 1
9956: PPUSH
9957: CALL_OW 274
9961: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9962: LD_ADDR_VAR 0 16
9966: PUSH
9967: LD_VAR 0 1
9971: PPUSH
9972: CALL_OW 255
9976: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9977: LD_ADDR_VAR 0 17
9981: PUSH
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 248
9991: ST_TO_ADDR
// if sources then
9992: LD_VAR 0 5
9996: IFFALSE 10043
// for i = 1 to 3 do
9998: LD_ADDR_VAR 0 8
10002: PUSH
10003: DOUBLE
10004: LD_INT 1
10006: DEC
10007: ST_TO_ADDR
10008: LD_INT 3
10010: PUSH
10011: FOR_TO
10012: IFFALSE 10041
// AddResourceType ( base , i , sources [ i ] ) ;
10014: LD_VAR 0 15
10018: PPUSH
10019: LD_VAR 0 8
10023: PPUSH
10024: LD_VAR 0 5
10028: PUSH
10029: LD_VAR 0 8
10033: ARRAY
10034: PPUSH
10035: CALL_OW 276
10039: GO 10011
10041: POP
10042: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10043: LD_ADDR_VAR 0 18
10047: PUSH
10048: LD_VAR 0 15
10052: PPUSH
10053: LD_VAR 0 2
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL 9304 0 3
10065: ST_TO_ADDR
// InitHc ;
10066: CALL_OW 19
// InitUc ;
10070: CALL_OW 18
// uc_side := side ;
10074: LD_ADDR_OWVAR 20
10078: PUSH
10079: LD_VAR 0 16
10083: ST_TO_ADDR
// uc_nation := nation ;
10084: LD_ADDR_OWVAR 21
10088: PUSH
10089: LD_VAR 0 17
10093: ST_TO_ADDR
// if buildings then
10094: LD_VAR 0 18
10098: IFFALSE 11420
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10100: LD_ADDR_VAR 0 19
10104: PUSH
10105: LD_VAR 0 18
10109: PPUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 29
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 30
10125: PUSH
10126: LD_INT 30
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 72
10142: ST_TO_ADDR
// if tmp then
10143: LD_VAR 0 19
10147: IFFALSE 10195
// for i in tmp do
10149: LD_ADDR_VAR 0 8
10153: PUSH
10154: LD_VAR 0 19
10158: PUSH
10159: FOR_IN
10160: IFFALSE 10193
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10162: LD_VAR 0 8
10166: PPUSH
10167: CALL_OW 250
10171: PPUSH
10172: LD_VAR 0 8
10176: PPUSH
10177: CALL_OW 251
10181: PPUSH
10182: LD_VAR 0 16
10186: PPUSH
10187: CALL_OW 441
10191: GO 10159
10193: POP
10194: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10195: LD_VAR 0 18
10199: PPUSH
10200: LD_INT 2
10202: PUSH
10203: LD_INT 30
10205: PUSH
10206: LD_INT 32
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 30
10215: PUSH
10216: LD_INT 33
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 72
10232: IFFALSE 10320
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10234: LD_ADDR_VAR 0 8
10238: PUSH
10239: LD_VAR 0 18
10243: PPUSH
10244: LD_INT 2
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 32
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 30
10259: PUSH
10260: LD_INT 33
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 72
10276: PUSH
10277: FOR_IN
10278: IFFALSE 10318
// begin if not GetBWeapon ( i ) then
10280: LD_VAR 0 8
10284: PPUSH
10285: CALL_OW 269
10289: NOT
10290: IFFALSE 10316
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10292: LD_VAR 0 8
10296: PPUSH
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_VAR 0 2
10306: PPUSH
10307: CALL 11566 0 2
10311: PPUSH
10312: CALL_OW 431
// end ;
10316: GO 10277
10318: POP
10319: POP
// end ; for i = 1 to personel do
10320: LD_ADDR_VAR 0 8
10324: PUSH
10325: DOUBLE
10326: LD_INT 1
10328: DEC
10329: ST_TO_ADDR
10330: LD_VAR 0 6
10334: PUSH
10335: FOR_TO
10336: IFFALSE 11400
// begin if i > 4 then
10338: LD_VAR 0 8
10342: PUSH
10343: LD_INT 4
10345: GREATER
10346: IFFALSE 10350
// break ;
10348: GO 11400
// case i of 1 :
10350: LD_VAR 0 8
10354: PUSH
10355: LD_INT 1
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10443
10363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10364: LD_ADDR_VAR 0 12
10368: PUSH
10369: LD_VAR 0 18
10373: PPUSH
10374: LD_INT 22
10376: PUSH
10377: LD_VAR 0 16
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 58
10388: PUSH
10389: EMPTY
10390: LIST
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: LD_INT 30
10397: PUSH
10398: LD_INT 32
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 30
10407: PUSH
10408: LD_INT 4
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 5
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: PPUSH
10436: CALL_OW 72
10440: ST_TO_ADDR
10441: GO 10665
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10513
10451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10452: LD_ADDR_VAR 0 12
10456: PUSH
10457: LD_VAR 0 18
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_VAR 0 16
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: LD_INT 30
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 30
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 72
10510: ST_TO_ADDR
10511: GO 10665
10513: LD_INT 3
10515: DOUBLE
10516: EQUAL
10517: IFTRUE 10521
10519: GO 10583
10521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10522: LD_ADDR_VAR 0 12
10526: PUSH
10527: LD_VAR 0 18
10531: PPUSH
10532: LD_INT 22
10534: PUSH
10535: LD_VAR 0 16
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: LD_INT 30
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 30
10559: PUSH
10560: LD_INT 3
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 72
10580: ST_TO_ADDR
10581: GO 10665
10583: LD_INT 4
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10664
10591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10592: LD_ADDR_VAR 0 12
10596: PUSH
10597: LD_VAR 0 18
10601: PPUSH
10602: LD_INT 22
10604: PUSH
10605: LD_VAR 0 16
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: LD_INT 30
10619: PUSH
10620: LD_INT 6
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 30
10629: PUSH
10630: LD_INT 7
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 30
10639: PUSH
10640: LD_INT 8
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 72
10661: ST_TO_ADDR
10662: GO 10665
10664: POP
// if i = 1 then
10665: LD_VAR 0 8
10669: PUSH
10670: LD_INT 1
10672: EQUAL
10673: IFFALSE 10784
// begin tmp := [ ] ;
10675: LD_ADDR_VAR 0 19
10679: PUSH
10680: EMPTY
10681: ST_TO_ADDR
// for j in f do
10682: LD_ADDR_VAR 0 9
10686: PUSH
10687: LD_VAR 0 12
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10766
// if GetBType ( j ) = b_bunker then
10695: LD_VAR 0 9
10699: PPUSH
10700: CALL_OW 266
10704: PUSH
10705: LD_INT 32
10707: EQUAL
10708: IFFALSE 10735
// tmp := Insert ( tmp , 1 , j ) else
10710: LD_ADDR_VAR 0 19
10714: PUSH
10715: LD_VAR 0 19
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: LD_VAR 0 9
10727: PPUSH
10728: CALL_OW 2
10732: ST_TO_ADDR
10733: GO 10764
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10735: LD_ADDR_VAR 0 19
10739: PUSH
10740: LD_VAR 0 19
10744: PPUSH
10745: LD_VAR 0 19
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: PPUSH
10754: LD_VAR 0 9
10758: PPUSH
10759: CALL_OW 2
10763: ST_TO_ADDR
10764: GO 10692
10766: POP
10767: POP
// if tmp then
10768: LD_VAR 0 19
10772: IFFALSE 10784
// f := tmp ;
10774: LD_ADDR_VAR 0 12
10778: PUSH
10779: LD_VAR 0 19
10783: ST_TO_ADDR
// end ; x := personel [ i ] ;
10784: LD_ADDR_VAR 0 13
10788: PUSH
10789: LD_VAR 0 6
10793: PUSH
10794: LD_VAR 0 8
10798: ARRAY
10799: ST_TO_ADDR
// if x = - 1 then
10800: LD_VAR 0 13
10804: PUSH
10805: LD_INT 1
10807: NEG
10808: EQUAL
10809: IFFALSE 11018
// begin for j in f do
10811: LD_ADDR_VAR 0 9
10815: PUSH
10816: LD_VAR 0 12
10820: PUSH
10821: FOR_IN
10822: IFFALSE 11014
// repeat InitHc ;
10824: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10828: LD_VAR 0 9
10832: PPUSH
10833: CALL_OW 266
10837: PUSH
10838: LD_INT 5
10840: EQUAL
10841: IFFALSE 10911
// begin if UnitsInside ( j ) < 3 then
10843: LD_VAR 0 9
10847: PPUSH
10848: CALL_OW 313
10852: PUSH
10853: LD_INT 3
10855: LESS
10856: IFFALSE 10892
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10858: LD_INT 0
10860: PPUSH
10861: LD_INT 5
10863: PUSH
10864: LD_INT 8
10866: PUSH
10867: LD_INT 9
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: LD_VAR 0 17
10879: ARRAY
10880: PPUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 380
10890: GO 10909
// PrepareHuman ( false , i , skill ) ;
10892: LD_INT 0
10894: PPUSH
10895: LD_VAR 0 8
10899: PPUSH
10900: LD_VAR 0 4
10904: PPUSH
10905: CALL_OW 380
// end else
10909: GO 10928
// PrepareHuman ( false , i , skill ) ;
10911: LD_INT 0
10913: PPUSH
10914: LD_VAR 0 8
10918: PPUSH
10919: LD_VAR 0 4
10923: PPUSH
10924: CALL_OW 380
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 14
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10938: LD_ADDR_VAR 0 7
10942: PUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: LD_VAR 0 14
10955: PPUSH
10956: CALL_OW 2
10960: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10961: LD_VAR 0 14
10965: PPUSH
10966: LD_VAR 0 9
10970: PPUSH
10971: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10975: LD_VAR 0 9
10979: PPUSH
10980: CALL_OW 313
10984: PUSH
10985: LD_INT 6
10987: EQUAL
10988: PUSH
10989: LD_VAR 0 9
10993: PPUSH
10994: CALL_OW 266
10998: PUSH
10999: LD_INT 32
11001: PUSH
11002: LD_INT 31
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: IN
11009: OR
11010: IFFALSE 10824
11012: GO 10821
11014: POP
11015: POP
// end else
11016: GO 11398
// for j = 1 to x do
11018: LD_ADDR_VAR 0 9
11022: PUSH
11023: DOUBLE
11024: LD_INT 1
11026: DEC
11027: ST_TO_ADDR
11028: LD_VAR 0 13
11032: PUSH
11033: FOR_TO
11034: IFFALSE 11396
// begin InitHc ;
11036: CALL_OW 19
// if not f then
11040: LD_VAR 0 12
11044: NOT
11045: IFFALSE 11134
// begin PrepareHuman ( false , i , skill ) ;
11047: LD_INT 0
11049: PPUSH
11050: LD_VAR 0 8
11054: PPUSH
11055: LD_VAR 0 4
11059: PPUSH
11060: CALL_OW 380
// un := CreateHuman ;
11064: LD_ADDR_VAR 0 14
11068: PUSH
11069: CALL_OW 44
11073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11074: LD_ADDR_VAR 0 7
11078: PUSH
11079: LD_VAR 0 7
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_VAR 0 14
11091: PPUSH
11092: CALL_OW 2
11096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11097: LD_VAR 0 14
11101: PPUSH
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 250
11111: PPUSH
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 251
11121: PPUSH
11122: LD_INT 10
11124: PPUSH
11125: LD_INT 0
11127: PPUSH
11128: CALL_OW 50
// continue ;
11132: GO 11033
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11134: LD_VAR 0 12
11138: PUSH
11139: LD_INT 1
11141: ARRAY
11142: PPUSH
11143: CALL_OW 313
11147: PUSH
11148: LD_VAR 0 12
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: CALL_OW 266
11161: PUSH
11162: LD_INT 32
11164: PUSH
11165: LD_INT 31
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: IN
11172: AND
11173: PUSH
11174: LD_VAR 0 12
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: PPUSH
11183: CALL_OW 313
11187: PUSH
11188: LD_INT 6
11190: EQUAL
11191: OR
11192: IFFALSE 11212
// f := Delete ( f , 1 ) ;
11194: LD_ADDR_VAR 0 12
11198: PUSH
11199: LD_VAR 0 12
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 3
11211: ST_TO_ADDR
// if not f then
11212: LD_VAR 0 12
11216: NOT
11217: IFFALSE 11235
// begin x := x + 2 ;
11219: LD_ADDR_VAR 0 13
11223: PUSH
11224: LD_VAR 0 13
11228: PUSH
11229: LD_INT 2
11231: PLUS
11232: ST_TO_ADDR
// continue ;
11233: GO 11033
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11235: LD_VAR 0 12
11239: PUSH
11240: LD_INT 1
11242: ARRAY
11243: PPUSH
11244: CALL_OW 266
11248: PUSH
11249: LD_INT 5
11251: EQUAL
11252: IFFALSE 11326
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11254: LD_VAR 0 12
11258: PUSH
11259: LD_INT 1
11261: ARRAY
11262: PPUSH
11263: CALL_OW 313
11267: PUSH
11268: LD_INT 3
11270: LESS
11271: IFFALSE 11307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11273: LD_INT 0
11275: PPUSH
11276: LD_INT 5
11278: PUSH
11279: LD_INT 8
11281: PUSH
11282: LD_INT 9
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_VAR 0 17
11294: ARRAY
11295: PPUSH
11296: LD_VAR 0 4
11300: PPUSH
11301: CALL_OW 380
11305: GO 11324
// PrepareHuman ( false , i , skill ) ;
11307: LD_INT 0
11309: PPUSH
11310: LD_VAR 0 8
11314: PPUSH
11315: LD_VAR 0 4
11319: PPUSH
11320: CALL_OW 380
// end else
11324: GO 11343
// PrepareHuman ( false , i , skill ) ;
11326: LD_INT 0
11328: PPUSH
11329: LD_VAR 0 8
11333: PPUSH
11334: LD_VAR 0 4
11338: PPUSH
11339: CALL_OW 380
// un := CreateHuman ;
11343: LD_ADDR_VAR 0 14
11347: PUSH
11348: CALL_OW 44
11352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11353: LD_ADDR_VAR 0 7
11357: PUSH
11358: LD_VAR 0 7
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: LD_VAR 0 14
11370: PPUSH
11371: CALL_OW 2
11375: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11376: LD_VAR 0 14
11380: PPUSH
11381: LD_VAR 0 12
11385: PUSH
11386: LD_INT 1
11388: ARRAY
11389: PPUSH
11390: CALL_OW 52
// end ;
11394: GO 11033
11396: POP
11397: POP
// end ;
11398: GO 10335
11400: POP
11401: POP
// result := result ^ buildings ;
11402: LD_ADDR_VAR 0 7
11406: PUSH
11407: LD_VAR 0 7
11411: PUSH
11412: LD_VAR 0 18
11416: ADD
11417: ST_TO_ADDR
// end else
11418: GO 11561
// begin for i = 1 to personel do
11420: LD_ADDR_VAR 0 8
11424: PUSH
11425: DOUBLE
11426: LD_INT 1
11428: DEC
11429: ST_TO_ADDR
11430: LD_VAR 0 6
11434: PUSH
11435: FOR_TO
11436: IFFALSE 11559
// begin if i > 4 then
11438: LD_VAR 0 8
11442: PUSH
11443: LD_INT 4
11445: GREATER
11446: IFFALSE 11450
// break ;
11448: GO 11559
// x := personel [ i ] ;
11450: LD_ADDR_VAR 0 13
11454: PUSH
11455: LD_VAR 0 6
11459: PUSH
11460: LD_VAR 0 8
11464: ARRAY
11465: ST_TO_ADDR
// if x = - 1 then
11466: LD_VAR 0 13
11470: PUSH
11471: LD_INT 1
11473: NEG
11474: EQUAL
11475: IFFALSE 11479
// continue ;
11477: GO 11435
// PrepareHuman ( false , i , skill ) ;
11479: LD_INT 0
11481: PPUSH
11482: LD_VAR 0 8
11486: PPUSH
11487: LD_VAR 0 4
11491: PPUSH
11492: CALL_OW 380
// un := CreateHuman ;
11496: LD_ADDR_VAR 0 14
11500: PUSH
11501: CALL_OW 44
11505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11506: LD_VAR 0 14
11510: PPUSH
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 250
11520: PPUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 251
11530: PPUSH
11531: LD_INT 10
11533: PPUSH
11534: LD_INT 0
11536: PPUSH
11537: CALL_OW 50
// result := result ^ un ;
11541: LD_ADDR_VAR 0 7
11545: PUSH
11546: LD_VAR 0 7
11550: PUSH
11551: LD_VAR 0 14
11555: ADD
11556: ST_TO_ADDR
// end ;
11557: GO 11435
11559: POP
11560: POP
// end ; end ;
11561: LD_VAR 0 7
11565: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
// result := false ;
11584: LD_ADDR_VAR 0 3
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11592: LD_VAR 0 1
11596: NOT
11597: PUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 266
11607: PUSH
11608: LD_INT 32
11610: PUSH
11611: LD_INT 33
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: IN
11618: NOT
11619: OR
11620: IFFALSE 11624
// exit ;
11622: GO 12733
// nat := GetNation ( tower ) ;
11624: LD_ADDR_VAR 0 12
11628: PUSH
11629: LD_VAR 0 1
11633: PPUSH
11634: CALL_OW 248
11638: ST_TO_ADDR
// side := GetSide ( tower ) ;
11639: LD_ADDR_VAR 0 16
11643: PUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 255
11653: ST_TO_ADDR
// x := GetX ( tower ) ;
11654: LD_ADDR_VAR 0 10
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: CALL_OW 250
11668: ST_TO_ADDR
// y := GetY ( tower ) ;
11669: LD_ADDR_VAR 0 11
11673: PUSH
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 251
11683: ST_TO_ADDR
// if not x or not y then
11684: LD_VAR 0 10
11688: NOT
11689: PUSH
11690: LD_VAR 0 11
11694: NOT
11695: OR
11696: IFFALSE 11700
// exit ;
11698: GO 12733
// weapon := 0 ;
11700: LD_ADDR_VAR 0 18
11704: PUSH
11705: LD_INT 0
11707: ST_TO_ADDR
// fac_list := [ ] ;
11708: LD_ADDR_VAR 0 17
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 274
11729: PPUSH
11730: LD_VAR 0 2
11734: PPUSH
11735: LD_INT 0
11737: PPUSH
11738: CALL 9304 0 3
11742: PPUSH
11743: LD_INT 30
11745: PUSH
11746: LD_INT 3
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 72
11757: ST_TO_ADDR
// if not factories then
11758: LD_VAR 0 6
11762: NOT
11763: IFFALSE 11767
// exit ;
11765: GO 12733
// for i in factories do
11767: LD_ADDR_VAR 0 8
11771: PUSH
11772: LD_VAR 0 6
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11803
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11780: LD_ADDR_VAR 0 17
11784: PUSH
11785: LD_VAR 0 17
11789: PUSH
11790: LD_VAR 0 8
11794: PPUSH
11795: CALL_OW 478
11799: UNION
11800: ST_TO_ADDR
11801: GO 11777
11803: POP
11804: POP
// if not fac_list then
11805: LD_VAR 0 17
11809: NOT
11810: IFFALSE 11814
// exit ;
11812: GO 12733
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11814: LD_ADDR_VAR 0 5
11818: PUSH
11819: LD_INT 4
11821: PUSH
11822: LD_INT 5
11824: PUSH
11825: LD_INT 9
11827: PUSH
11828: LD_INT 10
11830: PUSH
11831: LD_INT 6
11833: PUSH
11834: LD_INT 7
11836: PUSH
11837: LD_INT 11
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 27
11851: PUSH
11852: LD_INT 28
11854: PUSH
11855: LD_INT 26
11857: PUSH
11858: LD_INT 30
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 43
11869: PUSH
11870: LD_INT 44
11872: PUSH
11873: LD_INT 46
11875: PUSH
11876: LD_INT 45
11878: PUSH
11879: LD_INT 47
11881: PUSH
11882: LD_INT 49
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: LD_VAR 0 12
11902: ARRAY
11903: ST_TO_ADDR
// list := list isect fac_list ;
11904: LD_ADDR_VAR 0 5
11908: PUSH
11909: LD_VAR 0 5
11913: PUSH
11914: LD_VAR 0 17
11918: ISECT
11919: ST_TO_ADDR
// if not list then
11920: LD_VAR 0 5
11924: NOT
11925: IFFALSE 11929
// exit ;
11927: GO 12733
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11929: LD_VAR 0 12
11933: PUSH
11934: LD_INT 3
11936: EQUAL
11937: PUSH
11938: LD_INT 49
11940: PUSH
11941: LD_VAR 0 5
11945: IN
11946: AND
11947: PUSH
11948: LD_INT 31
11950: PPUSH
11951: LD_VAR 0 16
11955: PPUSH
11956: CALL_OW 321
11960: PUSH
11961: LD_INT 2
11963: EQUAL
11964: AND
11965: IFFALSE 12025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11967: LD_INT 22
11969: PUSH
11970: LD_VAR 0 16
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 35
11981: PUSH
11982: LD_INT 49
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 91
11991: PUSH
11992: LD_VAR 0 1
11996: PUSH
11997: LD_INT 10
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: PPUSH
12010: CALL_OW 69
12014: NOT
12015: IFFALSE 12025
// weapon := ru_time_lapser ;
12017: LD_ADDR_VAR 0 18
12021: PUSH
12022: LD_INT 49
12024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12025: LD_VAR 0 12
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: IN
12040: PUSH
12041: LD_INT 11
12043: PUSH
12044: LD_VAR 0 5
12048: IN
12049: PUSH
12050: LD_INT 30
12052: PUSH
12053: LD_VAR 0 5
12057: IN
12058: OR
12059: AND
12060: PUSH
12061: LD_INT 6
12063: PPUSH
12064: LD_VAR 0 16
12068: PPUSH
12069: CALL_OW 321
12073: PUSH
12074: LD_INT 2
12076: EQUAL
12077: AND
12078: IFFALSE 12243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12080: LD_INT 22
12082: PUSH
12083: LD_VAR 0 16
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: LD_INT 35
12097: PUSH
12098: LD_INT 11
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 35
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 91
12122: PUSH
12123: LD_VAR 0 1
12127: PUSH
12128: LD_INT 18
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: NOT
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_VAR 0 16
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 32
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 30
12174: PUSH
12175: LD_INT 33
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 91
12189: PUSH
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 12
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: PUSH
12216: LD_INT 2
12218: GREATER
12219: AND
12220: IFFALSE 12243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12222: LD_ADDR_VAR 0 18
12226: PUSH
12227: LD_INT 11
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_VAR 0 12
12241: ARRAY
12242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12243: LD_VAR 0 18
12247: NOT
12248: PUSH
12249: LD_INT 40
12251: PPUSH
12252: LD_VAR 0 16
12256: PPUSH
12257: CALL_OW 321
12261: PUSH
12262: LD_INT 2
12264: EQUAL
12265: AND
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_VAR 0 5
12274: IN
12275: PUSH
12276: LD_INT 28
12278: PUSH
12279: LD_VAR 0 5
12283: IN
12284: OR
12285: PUSH
12286: LD_INT 45
12288: PUSH
12289: LD_VAR 0 5
12293: IN
12294: OR
12295: AND
12296: IFFALSE 12550
// begin hex := GetHexInfo ( x , y ) ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: LD_VAR 0 11
12312: PPUSH
12313: CALL_OW 546
12317: ST_TO_ADDR
// if hex [ 1 ] then
12318: LD_VAR 0 4
12322: PUSH
12323: LD_INT 1
12325: ARRAY
12326: IFFALSE 12330
// exit ;
12328: GO 12733
// height := hex [ 2 ] ;
12330: LD_ADDR_VAR 0 15
12334: PUSH
12335: LD_VAR 0 4
12339: PUSH
12340: LD_INT 2
12342: ARRAY
12343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12344: LD_ADDR_VAR 0 14
12348: PUSH
12349: LD_INT 0
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: ST_TO_ADDR
// for i in tmp do
12367: LD_ADDR_VAR 0 8
12371: PUSH
12372: LD_VAR 0 14
12376: PUSH
12377: FOR_IN
12378: IFFALSE 12548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12380: LD_ADDR_VAR 0 9
12384: PUSH
12385: LD_VAR 0 10
12389: PPUSH
12390: LD_VAR 0 8
12394: PPUSH
12395: LD_INT 5
12397: PPUSH
12398: CALL_OW 272
12402: PUSH
12403: LD_VAR 0 11
12407: PPUSH
12408: LD_VAR 0 8
12412: PPUSH
12413: LD_INT 5
12415: PPUSH
12416: CALL_OW 273
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12425: LD_VAR 0 9
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: LD_VAR 0 9
12438: PUSH
12439: LD_INT 2
12441: ARRAY
12442: PPUSH
12443: CALL_OW 488
12447: IFFALSE 12546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: LD_VAR 0 9
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: LD_VAR 0 9
12467: PUSH
12468: LD_INT 2
12470: ARRAY
12471: PPUSH
12472: CALL_OW 546
12476: ST_TO_ADDR
// if hex [ 1 ] then
12477: LD_VAR 0 4
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: IFFALSE 12489
// continue ;
12487: GO 12377
// h := hex [ 2 ] ;
12489: LD_ADDR_VAR 0 13
12493: PUSH
12494: LD_VAR 0 4
12498: PUSH
12499: LD_INT 2
12501: ARRAY
12502: ST_TO_ADDR
// if h + 7 < height then
12503: LD_VAR 0 13
12507: PUSH
12508: LD_INT 7
12510: PLUS
12511: PUSH
12512: LD_VAR 0 15
12516: LESS
12517: IFFALSE 12546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12519: LD_ADDR_VAR 0 18
12523: PUSH
12524: LD_INT 7
12526: PUSH
12527: LD_INT 28
12529: PUSH
12530: LD_INT 45
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_VAR 0 12
12542: ARRAY
12543: ST_TO_ADDR
// break ;
12544: GO 12548
// end ; end ; end ;
12546: GO 12377
12548: POP
12549: POP
// end ; if not weapon then
12550: LD_VAR 0 18
12554: NOT
12555: IFFALSE 12615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12557: LD_ADDR_VAR 0 5
12561: PUSH
12562: LD_VAR 0 5
12566: PUSH
12567: LD_INT 11
12569: PUSH
12570: LD_INT 30
12572: PUSH
12573: LD_INT 49
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: DIFF
12581: ST_TO_ADDR
// if not list then
12582: LD_VAR 0 5
12586: NOT
12587: IFFALSE 12591
// exit ;
12589: GO 12733
// weapon := list [ rand ( 1 , list ) ] ;
12591: LD_ADDR_VAR 0 18
12595: PUSH
12596: LD_VAR 0 5
12600: PUSH
12601: LD_INT 1
12603: PPUSH
12604: LD_VAR 0 5
12608: PPUSH
12609: CALL_OW 12
12613: ARRAY
12614: ST_TO_ADDR
// end ; if weapon then
12615: LD_VAR 0 18
12619: IFFALSE 12733
// begin tmp := CostOfWeapon ( weapon ) ;
12621: LD_ADDR_VAR 0 14
12625: PUSH
12626: LD_VAR 0 18
12630: PPUSH
12631: CALL_OW 451
12635: ST_TO_ADDR
// j := GetBase ( tower ) ;
12636: LD_ADDR_VAR 0 9
12640: PUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 274
12650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12651: LD_VAR 0 9
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 275
12663: PUSH
12664: LD_VAR 0 14
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: GREATEREQUAL
12673: PUSH
12674: LD_VAR 0 9
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 275
12686: PUSH
12687: LD_VAR 0 14
12691: PUSH
12692: LD_INT 2
12694: ARRAY
12695: GREATEREQUAL
12696: AND
12697: PUSH
12698: LD_VAR 0 9
12702: PPUSH
12703: LD_INT 3
12705: PPUSH
12706: CALL_OW 275
12710: PUSH
12711: LD_VAR 0 14
12715: PUSH
12716: LD_INT 3
12718: ARRAY
12719: GREATEREQUAL
12720: AND
12721: IFFALSE 12733
// result := weapon ;
12723: LD_ADDR_VAR 0 3
12727: PUSH
12728: LD_VAR 0 18
12732: ST_TO_ADDR
// end ; end ;
12733: LD_VAR 0 3
12737: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12738: LD_INT 0
12740: PPUSH
12741: PPUSH
// result := true ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// if array1 = array2 then
12750: LD_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: EQUAL
12760: IFFALSE 12820
// begin for i = 1 to array1 do
12762: LD_ADDR_VAR 0 4
12766: PUSH
12767: DOUBLE
12768: LD_INT 1
12770: DEC
12771: ST_TO_ADDR
12772: LD_VAR 0 1
12776: PUSH
12777: FOR_TO
12778: IFFALSE 12816
// if array1 [ i ] <> array2 [ i ] then
12780: LD_VAR 0 1
12784: PUSH
12785: LD_VAR 0 4
12789: ARRAY
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: LD_VAR 0 4
12800: ARRAY
12801: NONEQUAL
12802: IFFALSE 12814
// begin result := false ;
12804: LD_ADDR_VAR 0 3
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// break ;
12812: GO 12816
// end ;
12814: GO 12777
12816: POP
12817: POP
// end else
12818: GO 12828
// result := false ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// end ;
12828: LD_VAR 0 3
12832: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12833: LD_INT 0
12835: PPUSH
12836: PPUSH
// if not array1 or not array2 then
12837: LD_VAR 0 1
12841: NOT
12842: PUSH
12843: LD_VAR 0 2
12847: NOT
12848: OR
12849: IFFALSE 12853
// exit ;
12851: GO 12917
// result := true ;
12853: LD_ADDR_VAR 0 3
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
// for i = 1 to array1 do
12861: LD_ADDR_VAR 0 4
12865: PUSH
12866: DOUBLE
12867: LD_INT 1
12869: DEC
12870: ST_TO_ADDR
12871: LD_VAR 0 1
12875: PUSH
12876: FOR_TO
12877: IFFALSE 12915
// if array1 [ i ] <> array2 [ i ] then
12879: LD_VAR 0 1
12883: PUSH
12884: LD_VAR 0 4
12888: ARRAY
12889: PUSH
12890: LD_VAR 0 2
12894: PUSH
12895: LD_VAR 0 4
12899: ARRAY
12900: NONEQUAL
12901: IFFALSE 12913
// begin result := false ;
12903: LD_ADDR_VAR 0 3
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// break ;
12911: GO 12915
// end ;
12913: GO 12876
12915: POP
12916: POP
// end ;
12917: LD_VAR 0 3
12921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12922: LD_INT 0
12924: PPUSH
12925: PPUSH
12926: PPUSH
// pom := GetBase ( fac ) ;
12927: LD_ADDR_VAR 0 5
12931: PUSH
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 274
12941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12942: LD_ADDR_VAR 0 4
12946: PUSH
12947: LD_VAR 0 2
12951: PUSH
12952: LD_INT 1
12954: ARRAY
12955: PPUSH
12956: LD_VAR 0 2
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: LD_VAR 0 2
12969: PUSH
12970: LD_INT 3
12972: ARRAY
12973: PPUSH
12974: LD_VAR 0 2
12978: PUSH
12979: LD_INT 4
12981: ARRAY
12982: PPUSH
12983: CALL_OW 449
12987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 5
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 275
13005: PUSH
13006: LD_VAR 0 4
13010: PUSH
13011: LD_INT 1
13013: ARRAY
13014: GREATEREQUAL
13015: PUSH
13016: LD_VAR 0 5
13020: PPUSH
13021: LD_INT 2
13023: PPUSH
13024: CALL_OW 275
13028: PUSH
13029: LD_VAR 0 4
13033: PUSH
13034: LD_INT 2
13036: ARRAY
13037: GREATEREQUAL
13038: AND
13039: PUSH
13040: LD_VAR 0 5
13044: PPUSH
13045: LD_INT 3
13047: PPUSH
13048: CALL_OW 275
13052: PUSH
13053: LD_VAR 0 4
13057: PUSH
13058: LD_INT 3
13060: ARRAY
13061: GREATEREQUAL
13062: AND
13063: ST_TO_ADDR
// end ;
13064: LD_VAR 0 3
13068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13069: LD_INT 0
13071: PPUSH
13072: PPUSH
13073: PPUSH
13074: PPUSH
// pom := GetBase ( building ) ;
13075: LD_ADDR_VAR 0 3
13079: PUSH
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 274
13089: ST_TO_ADDR
// if not pom then
13090: LD_VAR 0 3
13094: NOT
13095: IFFALSE 13099
// exit ;
13097: GO 13269
// btype := GetBType ( building ) ;
13099: LD_ADDR_VAR 0 5
13103: PUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 266
13113: ST_TO_ADDR
// if btype = b_armoury then
13114: LD_VAR 0 5
13118: PUSH
13119: LD_INT 4
13121: EQUAL
13122: IFFALSE 13132
// btype := b_barracks ;
13124: LD_ADDR_VAR 0 5
13128: PUSH
13129: LD_INT 5
13131: ST_TO_ADDR
// if btype = b_depot then
13132: LD_VAR 0 5
13136: PUSH
13137: LD_INT 0
13139: EQUAL
13140: IFFALSE 13150
// btype := b_warehouse ;
13142: LD_ADDR_VAR 0 5
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if btype = b_workshop then
13150: LD_VAR 0 5
13154: PUSH
13155: LD_INT 2
13157: EQUAL
13158: IFFALSE 13168
// btype := b_factory ;
13160: LD_ADDR_VAR 0 5
13164: PUSH
13165: LD_INT 3
13167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13168: LD_ADDR_VAR 0 4
13172: PUSH
13173: LD_VAR 0 5
13177: PPUSH
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 248
13187: PPUSH
13188: CALL_OW 450
13192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 275
13210: PUSH
13211: LD_VAR 0 4
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: GREATEREQUAL
13220: PUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 2
13228: PPUSH
13229: CALL_OW 275
13233: PUSH
13234: LD_VAR 0 4
13238: PUSH
13239: LD_INT 2
13241: ARRAY
13242: GREATEREQUAL
13243: AND
13244: PUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 3
13252: PPUSH
13253: CALL_OW 275
13257: PUSH
13258: LD_VAR 0 4
13262: PUSH
13263: LD_INT 3
13265: ARRAY
13266: GREATEREQUAL
13267: AND
13268: ST_TO_ADDR
// end ;
13269: LD_VAR 0 2
13273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13274: LD_INT 0
13276: PPUSH
13277: PPUSH
13278: PPUSH
// pom := GetBase ( building ) ;
13279: LD_ADDR_VAR 0 4
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 274
13293: ST_TO_ADDR
// if not pom then
13294: LD_VAR 0 4
13298: NOT
13299: IFFALSE 13303
// exit ;
13301: GO 13404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13303: LD_ADDR_VAR 0 5
13307: PUSH
13308: LD_VAR 0 2
13312: PPUSH
13313: LD_VAR 0 1
13317: PPUSH
13318: CALL_OW 248
13322: PPUSH
13323: CALL_OW 450
13327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13328: LD_ADDR_VAR 0 3
13332: PUSH
13333: LD_VAR 0 4
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 275
13345: PUSH
13346: LD_VAR 0 5
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: GREATEREQUAL
13355: PUSH
13356: LD_VAR 0 4
13360: PPUSH
13361: LD_INT 2
13363: PPUSH
13364: CALL_OW 275
13368: PUSH
13369: LD_VAR 0 5
13373: PUSH
13374: LD_INT 2
13376: ARRAY
13377: GREATEREQUAL
13378: AND
13379: PUSH
13380: LD_VAR 0 4
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: CALL_OW 275
13392: PUSH
13393: LD_VAR 0 5
13397: PUSH
13398: LD_INT 3
13400: ARRAY
13401: GREATEREQUAL
13402: AND
13403: ST_TO_ADDR
// end ;
13404: LD_VAR 0 3
13408: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13409: LD_INT 0
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
// result := false ;
13422: LD_ADDR_VAR 0 8
13426: PUSH
13427: LD_INT 0
13429: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13430: LD_VAR 0 5
13434: NOT
13435: PUSH
13436: LD_VAR 0 1
13440: NOT
13441: OR
13442: PUSH
13443: LD_VAR 0 2
13447: NOT
13448: OR
13449: PUSH
13450: LD_VAR 0 3
13454: NOT
13455: OR
13456: IFFALSE 13460
// exit ;
13458: GO 14274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13460: LD_ADDR_VAR 0 14
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: LD_VAR 0 2
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_VAR 0 4
13484: PPUSH
13485: LD_VAR 0 5
13489: PUSH
13490: LD_INT 1
13492: ARRAY
13493: PPUSH
13494: CALL_OW 248
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL 15507 0 6
13506: ST_TO_ADDR
// if not hexes then
13507: LD_VAR 0 14
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 14274
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13516: LD_ADDR_VAR 0 17
13520: PUSH
13521: LD_VAR 0 5
13525: PPUSH
13526: LD_INT 22
13528: PUSH
13529: LD_VAR 0 13
13533: PPUSH
13534: CALL_OW 255
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: LD_INT 30
13548: PUSH
13549: LD_INT 0
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 30
13558: PUSH
13559: LD_INT 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 72
13579: ST_TO_ADDR
// for i = 1 to hexes do
13580: LD_ADDR_VAR 0 9
13584: PUSH
13585: DOUBLE
13586: LD_INT 1
13588: DEC
13589: ST_TO_ADDR
13590: LD_VAR 0 14
13594: PUSH
13595: FOR_TO
13596: IFFALSE 14272
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13598: LD_ADDR_VAR 0 13
13602: PUSH
13603: LD_VAR 0 14
13607: PUSH
13608: LD_VAR 0 9
13612: ARRAY
13613: PUSH
13614: LD_INT 1
13616: ARRAY
13617: PPUSH
13618: LD_VAR 0 14
13622: PUSH
13623: LD_VAR 0 9
13627: ARRAY
13628: PUSH
13629: LD_INT 2
13631: ARRAY
13632: PPUSH
13633: CALL_OW 428
13637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13638: LD_VAR 0 14
13642: PUSH
13643: LD_VAR 0 9
13647: ARRAY
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: PPUSH
13653: LD_VAR 0 14
13657: PUSH
13658: LD_VAR 0 9
13662: ARRAY
13663: PUSH
13664: LD_INT 2
13666: ARRAY
13667: PPUSH
13668: CALL_OW 351
13672: PUSH
13673: LD_VAR 0 14
13677: PUSH
13678: LD_VAR 0 9
13682: ARRAY
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_VAR 0 14
13692: PUSH
13693: LD_VAR 0 9
13697: ARRAY
13698: PUSH
13699: LD_INT 2
13701: ARRAY
13702: PPUSH
13703: CALL_OW 488
13707: NOT
13708: OR
13709: PUSH
13710: LD_VAR 0 13
13714: PPUSH
13715: CALL_OW 247
13719: PUSH
13720: LD_INT 3
13722: EQUAL
13723: OR
13724: IFFALSE 13730
// exit ;
13726: POP
13727: POP
13728: GO 14274
// if not tmp then
13730: LD_VAR 0 13
13734: NOT
13735: IFFALSE 13739
// continue ;
13737: GO 13595
// result := true ;
13739: LD_ADDR_VAR 0 8
13743: PUSH
13744: LD_INT 1
13746: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13747: LD_VAR 0 6
13751: PUSH
13752: LD_VAR 0 13
13756: PPUSH
13757: CALL_OW 247
13761: PUSH
13762: LD_INT 2
13764: EQUAL
13765: AND
13766: PUSH
13767: LD_VAR 0 13
13771: PPUSH
13772: CALL_OW 263
13776: PUSH
13777: LD_INT 1
13779: EQUAL
13780: AND
13781: IFFALSE 13945
// begin if IsDrivenBy ( tmp ) then
13783: LD_VAR 0 13
13787: PPUSH
13788: CALL_OW 311
13792: IFFALSE 13796
// continue ;
13794: GO 13595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13796: LD_VAR 0 6
13800: PPUSH
13801: LD_INT 3
13803: PUSH
13804: LD_INT 60
13806: PUSH
13807: EMPTY
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 3
13816: PUSH
13817: LD_INT 55
13819: PUSH
13820: EMPTY
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 72
13835: IFFALSE 13943
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13837: LD_ADDR_VAR 0 18
13841: PUSH
13842: LD_VAR 0 6
13846: PPUSH
13847: LD_INT 3
13849: PUSH
13850: LD_INT 60
13852: PUSH
13853: EMPTY
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 55
13865: PUSH
13866: EMPTY
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 72
13881: PUSH
13882: LD_INT 1
13884: ARRAY
13885: ST_TO_ADDR
// if IsInUnit ( driver ) then
13886: LD_VAR 0 18
13890: PPUSH
13891: CALL_OW 310
13895: IFFALSE 13906
// ComExit ( driver ) ;
13897: LD_VAR 0 18
13901: PPUSH
13902: CALL 39286 0 1
// AddComEnterUnit ( driver , tmp ) ;
13906: LD_VAR 0 18
13910: PPUSH
13911: LD_VAR 0 13
13915: PPUSH
13916: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13920: LD_VAR 0 18
13924: PPUSH
13925: LD_VAR 0 7
13929: PPUSH
13930: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13934: LD_VAR 0 18
13938: PPUSH
13939: CALL_OW 181
// end ; continue ;
13943: GO 13595
// end ; if not cleaners or not tmp in cleaners then
13945: LD_VAR 0 6
13949: NOT
13950: PUSH
13951: LD_VAR 0 13
13955: PUSH
13956: LD_VAR 0 6
13960: IN
13961: NOT
13962: OR
13963: IFFALSE 14270
// begin if dep then
13965: LD_VAR 0 17
13969: IFFALSE 14105
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13971: LD_ADDR_VAR 0 16
13975: PUSH
13976: LD_VAR 0 17
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: CALL_OW 250
13989: PPUSH
13990: LD_VAR 0 17
13994: PUSH
13995: LD_INT 1
13997: ARRAY
13998: PPUSH
13999: CALL_OW 254
14003: PPUSH
14004: LD_INT 5
14006: PPUSH
14007: CALL_OW 272
14011: PUSH
14012: LD_VAR 0 17
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 251
14025: PPUSH
14026: LD_VAR 0 17
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 254
14039: PPUSH
14040: LD_INT 5
14042: PPUSH
14043: CALL_OW 273
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14052: LD_VAR 0 16
14056: PUSH
14057: LD_INT 1
14059: ARRAY
14060: PPUSH
14061: LD_VAR 0 16
14065: PUSH
14066: LD_INT 2
14068: ARRAY
14069: PPUSH
14070: CALL_OW 488
14074: IFFALSE 14105
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14076: LD_VAR 0 13
14080: PPUSH
14081: LD_VAR 0 16
14085: PUSH
14086: LD_INT 1
14088: ARRAY
14089: PPUSH
14090: LD_VAR 0 16
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PPUSH
14099: CALL_OW 111
// continue ;
14103: GO 13595
// end ; end ; r := GetDir ( tmp ) ;
14105: LD_ADDR_VAR 0 15
14109: PUSH
14110: LD_VAR 0 13
14114: PPUSH
14115: CALL_OW 254
14119: ST_TO_ADDR
// if r = 5 then
14120: LD_VAR 0 15
14124: PUSH
14125: LD_INT 5
14127: EQUAL
14128: IFFALSE 14138
// r := 0 ;
14130: LD_ADDR_VAR 0 15
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// for j = r to 5 do
14138: LD_ADDR_VAR 0 10
14142: PUSH
14143: DOUBLE
14144: LD_VAR 0 15
14148: DEC
14149: ST_TO_ADDR
14150: LD_INT 5
14152: PUSH
14153: FOR_TO
14154: IFFALSE 14268
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14156: LD_ADDR_VAR 0 11
14160: PUSH
14161: LD_VAR 0 13
14165: PPUSH
14166: CALL_OW 250
14170: PPUSH
14171: LD_VAR 0 10
14175: PPUSH
14176: LD_INT 2
14178: PPUSH
14179: CALL_OW 272
14183: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14184: LD_ADDR_VAR 0 12
14188: PUSH
14189: LD_VAR 0 13
14193: PPUSH
14194: CALL_OW 251
14198: PPUSH
14199: LD_VAR 0 10
14203: PPUSH
14204: LD_INT 2
14206: PPUSH
14207: CALL_OW 273
14211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14212: LD_VAR 0 11
14216: PPUSH
14217: LD_VAR 0 12
14221: PPUSH
14222: CALL_OW 488
14226: PUSH
14227: LD_VAR 0 11
14231: PPUSH
14232: LD_VAR 0 12
14236: PPUSH
14237: CALL_OW 428
14241: NOT
14242: AND
14243: IFFALSE 14266
// begin ComMoveXY ( tmp , _x , _y ) ;
14245: LD_VAR 0 13
14249: PPUSH
14250: LD_VAR 0 11
14254: PPUSH
14255: LD_VAR 0 12
14259: PPUSH
14260: CALL_OW 111
// break ;
14264: GO 14268
// end ; end ;
14266: GO 14153
14268: POP
14269: POP
// end ; end ;
14270: GO 13595
14272: POP
14273: POP
// end ;
14274: LD_VAR 0 8
14278: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14279: LD_INT 0
14281: PPUSH
// result := true ;
14282: LD_ADDR_VAR 0 3
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14290: LD_VAR 0 2
14294: PUSH
14295: LD_INT 24
14297: DOUBLE
14298: EQUAL
14299: IFTRUE 14309
14301: LD_INT 33
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14334
14309: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_INT 32
14317: PPUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 321
14327: PUSH
14328: LD_INT 2
14330: EQUAL
14331: ST_TO_ADDR
14332: GO 14650
14334: LD_INT 20
14336: DOUBLE
14337: EQUAL
14338: IFTRUE 14342
14340: GO 14367
14342: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14343: LD_ADDR_VAR 0 3
14347: PUSH
14348: LD_INT 6
14350: PPUSH
14351: LD_VAR 0 1
14355: PPUSH
14356: CALL_OW 321
14360: PUSH
14361: LD_INT 2
14363: EQUAL
14364: ST_TO_ADDR
14365: GO 14650
14367: LD_INT 22
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14381
14373: LD_INT 36
14375: DOUBLE
14376: EQUAL
14377: IFTRUE 14381
14379: GO 14406
14381: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 15
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 321
14399: PUSH
14400: LD_INT 2
14402: EQUAL
14403: ST_TO_ADDR
14404: GO 14650
14406: LD_INT 30
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14439
14414: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 20
14422: PPUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 321
14432: PUSH
14433: LD_INT 2
14435: EQUAL
14436: ST_TO_ADDR
14437: GO 14650
14439: LD_INT 28
14441: DOUBLE
14442: EQUAL
14443: IFTRUE 14453
14445: LD_INT 21
14447: DOUBLE
14448: EQUAL
14449: IFTRUE 14453
14451: GO 14478
14453: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14454: LD_ADDR_VAR 0 3
14458: PUSH
14459: LD_INT 21
14461: PPUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 321
14471: PUSH
14472: LD_INT 2
14474: EQUAL
14475: ST_TO_ADDR
14476: GO 14650
14478: LD_INT 16
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14511
14486: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_INT 84
14494: PPUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 321
14504: PUSH
14505: LD_INT 2
14507: EQUAL
14508: ST_TO_ADDR
14509: GO 14650
14511: LD_INT 19
14513: DOUBLE
14514: EQUAL
14515: IFTRUE 14525
14517: LD_INT 23
14519: DOUBLE
14520: EQUAL
14521: IFTRUE 14525
14523: GO 14550
14525: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14526: LD_ADDR_VAR 0 3
14530: PUSH
14531: LD_INT 83
14533: PPUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 321
14543: PUSH
14544: LD_INT 2
14546: EQUAL
14547: ST_TO_ADDR
14548: GO 14650
14550: LD_INT 17
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14558
14556: GO 14583
14558: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: LD_INT 39
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 321
14576: PUSH
14577: LD_INT 2
14579: EQUAL
14580: ST_TO_ADDR
14581: GO 14650
14583: LD_INT 18
14585: DOUBLE
14586: EQUAL
14587: IFTRUE 14591
14589: GO 14616
14591: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_INT 40
14599: PPUSH
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 321
14609: PUSH
14610: LD_INT 2
14612: EQUAL
14613: ST_TO_ADDR
14614: GO 14650
14616: LD_INT 27
14618: DOUBLE
14619: EQUAL
14620: IFTRUE 14624
14622: GO 14649
14624: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14625: LD_ADDR_VAR 0 3
14629: PUSH
14630: LD_INT 35
14632: PPUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 321
14642: PUSH
14643: LD_INT 2
14645: EQUAL
14646: ST_TO_ADDR
14647: GO 14650
14649: POP
// end ;
14650: LD_VAR 0 3
14654: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14655: LD_INT 0
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
// result := false ;
14668: LD_ADDR_VAR 0 6
14672: PUSH
14673: LD_INT 0
14675: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14676: LD_VAR 0 1
14680: NOT
14681: PUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 266
14691: PUSH
14692: LD_INT 0
14694: PUSH
14695: LD_INT 1
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: IN
14702: NOT
14703: OR
14704: PUSH
14705: LD_VAR 0 2
14709: NOT
14710: OR
14711: PUSH
14712: LD_VAR 0 5
14716: PUSH
14717: LD_INT 0
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: LD_INT 3
14728: PUSH
14729: LD_INT 4
14731: PUSH
14732: LD_INT 5
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: IN
14743: NOT
14744: OR
14745: PUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_VAR 0 4
14755: PPUSH
14756: CALL_OW 488
14760: NOT
14761: OR
14762: IFFALSE 14766
// exit ;
14764: GO 15502
// side := GetSide ( depot ) ;
14766: LD_ADDR_VAR 0 9
14770: PUSH
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 255
14780: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14781: LD_VAR 0 9
14785: PPUSH
14786: LD_VAR 0 2
14790: PPUSH
14791: CALL 14279 0 2
14795: NOT
14796: IFFALSE 14800
// exit ;
14798: GO 15502
// pom := GetBase ( depot ) ;
14800: LD_ADDR_VAR 0 10
14804: PUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: CALL_OW 274
14814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14815: LD_ADDR_VAR 0 11
14819: PUSH
14820: LD_VAR 0 2
14824: PPUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 248
14834: PPUSH
14835: CALL_OW 450
14839: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14840: LD_VAR 0 10
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: CALL_OW 275
14852: PUSH
14853: LD_VAR 0 11
14857: PUSH
14858: LD_INT 1
14860: ARRAY
14861: GREATEREQUAL
14862: PUSH
14863: LD_VAR 0 10
14867: PPUSH
14868: LD_INT 2
14870: PPUSH
14871: CALL_OW 275
14875: PUSH
14876: LD_VAR 0 11
14880: PUSH
14881: LD_INT 2
14883: ARRAY
14884: GREATEREQUAL
14885: AND
14886: PUSH
14887: LD_VAR 0 10
14891: PPUSH
14892: LD_INT 3
14894: PPUSH
14895: CALL_OW 275
14899: PUSH
14900: LD_VAR 0 11
14904: PUSH
14905: LD_INT 3
14907: ARRAY
14908: GREATEREQUAL
14909: AND
14910: NOT
14911: IFFALSE 14915
// exit ;
14913: GO 15502
// if GetBType ( depot ) = b_depot then
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 266
14924: PUSH
14925: LD_INT 0
14927: EQUAL
14928: IFFALSE 14940
// dist := 28 else
14930: LD_ADDR_VAR 0 14
14934: PUSH
14935: LD_INT 28
14937: ST_TO_ADDR
14938: GO 14948
// dist := 36 ;
14940: LD_ADDR_VAR 0 14
14944: PUSH
14945: LD_INT 36
14947: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14948: LD_VAR 0 1
14952: PPUSH
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_VAR 0 4
14962: PPUSH
14963: CALL_OW 297
14967: PUSH
14968: LD_VAR 0 14
14972: GREATER
14973: IFFALSE 14977
// exit ;
14975: GO 15502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14977: LD_ADDR_VAR 0 12
14981: PUSH
14982: LD_VAR 0 2
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_VAR 0 4
14996: PPUSH
14997: LD_VAR 0 5
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 248
15011: PPUSH
15012: LD_INT 0
15014: PPUSH
15015: CALL 15507 0 6
15019: ST_TO_ADDR
// if not hexes then
15020: LD_VAR 0 12
15024: NOT
15025: IFFALSE 15029
// exit ;
15027: GO 15502
// hex := GetHexInfo ( x , y ) ;
15029: LD_ADDR_VAR 0 15
15033: PUSH
15034: LD_VAR 0 3
15038: PPUSH
15039: LD_VAR 0 4
15043: PPUSH
15044: CALL_OW 546
15048: ST_TO_ADDR
// if hex [ 1 ] then
15049: LD_VAR 0 15
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: IFFALSE 15061
// exit ;
15059: GO 15502
// height := hex [ 2 ] ;
15061: LD_ADDR_VAR 0 13
15065: PUSH
15066: LD_VAR 0 15
15070: PUSH
15071: LD_INT 2
15073: ARRAY
15074: ST_TO_ADDR
// for i = 1 to hexes do
15075: LD_ADDR_VAR 0 7
15079: PUSH
15080: DOUBLE
15081: LD_INT 1
15083: DEC
15084: ST_TO_ADDR
15085: LD_VAR 0 12
15089: PUSH
15090: FOR_TO
15091: IFFALSE 15421
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15093: LD_VAR 0 12
15097: PUSH
15098: LD_VAR 0 7
15102: ARRAY
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PPUSH
15108: LD_VAR 0 12
15112: PUSH
15113: LD_VAR 0 7
15117: ARRAY
15118: PUSH
15119: LD_INT 2
15121: ARRAY
15122: PPUSH
15123: CALL_OW 488
15127: NOT
15128: PUSH
15129: LD_VAR 0 12
15133: PUSH
15134: LD_VAR 0 7
15138: ARRAY
15139: PUSH
15140: LD_INT 1
15142: ARRAY
15143: PPUSH
15144: LD_VAR 0 12
15148: PUSH
15149: LD_VAR 0 7
15153: ARRAY
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PPUSH
15159: CALL_OW 428
15163: PUSH
15164: LD_INT 0
15166: GREATER
15167: OR
15168: PUSH
15169: LD_VAR 0 12
15173: PUSH
15174: LD_VAR 0 7
15178: ARRAY
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PPUSH
15184: LD_VAR 0 12
15188: PUSH
15189: LD_VAR 0 7
15193: ARRAY
15194: PUSH
15195: LD_INT 2
15197: ARRAY
15198: PPUSH
15199: CALL_OW 351
15203: OR
15204: IFFALSE 15210
// exit ;
15206: POP
15207: POP
15208: GO 15502
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15210: LD_ADDR_VAR 0 8
15214: PUSH
15215: LD_VAR 0 12
15219: PUSH
15220: LD_VAR 0 7
15224: ARRAY
15225: PUSH
15226: LD_INT 1
15228: ARRAY
15229: PPUSH
15230: LD_VAR 0 12
15234: PUSH
15235: LD_VAR 0 7
15239: ARRAY
15240: PUSH
15241: LD_INT 2
15243: ARRAY
15244: PPUSH
15245: CALL_OW 546
15249: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15250: LD_VAR 0 8
15254: PUSH
15255: LD_INT 1
15257: ARRAY
15258: PUSH
15259: LD_VAR 0 8
15263: PUSH
15264: LD_INT 2
15266: ARRAY
15267: PUSH
15268: LD_VAR 0 13
15272: PUSH
15273: LD_INT 2
15275: PLUS
15276: GREATER
15277: OR
15278: PUSH
15279: LD_VAR 0 8
15283: PUSH
15284: LD_INT 2
15286: ARRAY
15287: PUSH
15288: LD_VAR 0 13
15292: PUSH
15293: LD_INT 2
15295: MINUS
15296: LESS
15297: OR
15298: PUSH
15299: LD_VAR 0 8
15303: PUSH
15304: LD_INT 3
15306: ARRAY
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: LD_INT 8
15313: PUSH
15314: LD_INT 9
15316: PUSH
15317: LD_INT 10
15319: PUSH
15320: LD_INT 11
15322: PUSH
15323: LD_INT 12
15325: PUSH
15326: LD_INT 13
15328: PUSH
15329: LD_INT 16
15331: PUSH
15332: LD_INT 17
15334: PUSH
15335: LD_INT 18
15337: PUSH
15338: LD_INT 19
15340: PUSH
15341: LD_INT 20
15343: PUSH
15344: LD_INT 21
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: IN
15362: NOT
15363: OR
15364: PUSH
15365: LD_VAR 0 8
15369: PUSH
15370: LD_INT 5
15372: ARRAY
15373: NOT
15374: OR
15375: PUSH
15376: LD_VAR 0 8
15380: PUSH
15381: LD_INT 6
15383: ARRAY
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 7
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_INT 10
15399: PUSH
15400: LD_INT 11
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: IN
15411: NOT
15412: OR
15413: IFFALSE 15419
// exit ;
15415: POP
15416: POP
15417: GO 15502
// end ;
15419: GO 15090
15421: POP
15422: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15423: LD_VAR 0 9
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_VAR 0 4
15437: PPUSH
15438: LD_INT 20
15440: PPUSH
15441: CALL 7445 0 4
15445: PUSH
15446: LD_INT 4
15448: ARRAY
15449: IFFALSE 15453
// exit ;
15451: GO 15502
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15453: LD_VAR 0 2
15457: PUSH
15458: LD_INT 29
15460: PUSH
15461: LD_INT 30
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: IN
15468: PUSH
15469: LD_VAR 0 3
15473: PPUSH
15474: LD_VAR 0 4
15478: PPUSH
15479: LD_VAR 0 9
15483: PPUSH
15484: CALL_OW 440
15488: NOT
15489: AND
15490: IFFALSE 15494
// exit ;
15492: GO 15502
// result := true ;
15494: LD_ADDR_VAR 0 6
15498: PUSH
15499: LD_INT 1
15501: ST_TO_ADDR
// end ;
15502: LD_VAR 0 6
15506: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15507: LD_INT 0
15509: PPUSH
15510: PPUSH
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
15515: PPUSH
15516: PPUSH
15517: PPUSH
15518: PPUSH
15519: PPUSH
15520: PPUSH
15521: PPUSH
15522: PPUSH
15523: PPUSH
15524: PPUSH
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
15529: PPUSH
15530: PPUSH
15531: PPUSH
15532: PPUSH
15533: PPUSH
15534: PPUSH
15535: PPUSH
15536: PPUSH
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
15558: PPUSH
15559: PPUSH
15560: PPUSH
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
// result = [ ] ;
15567: LD_ADDR_VAR 0 7
15571: PUSH
15572: EMPTY
15573: ST_TO_ADDR
// temp_list = [ ] ;
15574: LD_ADDR_VAR 0 9
15578: PUSH
15579: EMPTY
15580: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15581: LD_VAR 0 4
15585: PUSH
15586: LD_INT 0
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: LD_INT 3
15597: PUSH
15598: LD_INT 4
15600: PUSH
15601: LD_INT 5
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: IN
15612: NOT
15613: PUSH
15614: LD_VAR 0 1
15618: PUSH
15619: LD_INT 0
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: IN
15629: PUSH
15630: LD_VAR 0 5
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: LD_INT 2
15640: PUSH
15641: LD_INT 3
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: IN
15649: NOT
15650: AND
15651: OR
15652: IFFALSE 15656
// exit ;
15654: GO 34047
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15656: LD_VAR 0 1
15660: PUSH
15661: LD_INT 6
15663: PUSH
15664: LD_INT 7
15666: PUSH
15667: LD_INT 8
15669: PUSH
15670: LD_INT 13
15672: PUSH
15673: LD_INT 12
15675: PUSH
15676: LD_INT 15
15678: PUSH
15679: LD_INT 11
15681: PUSH
15682: LD_INT 14
15684: PUSH
15685: LD_INT 10
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: IN
15699: IFFALSE 15709
// btype = b_lab ;
15701: LD_ADDR_VAR 0 1
15705: PUSH
15706: LD_INT 6
15708: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15709: LD_VAR 0 6
15713: PUSH
15714: LD_INT 0
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: IN
15728: NOT
15729: PUSH
15730: LD_VAR 0 1
15734: PUSH
15735: LD_INT 0
15737: PUSH
15738: LD_INT 1
15740: PUSH
15741: LD_INT 2
15743: PUSH
15744: LD_INT 3
15746: PUSH
15747: LD_INT 6
15749: PUSH
15750: LD_INT 36
15752: PUSH
15753: LD_INT 4
15755: PUSH
15756: LD_INT 5
15758: PUSH
15759: LD_INT 31
15761: PUSH
15762: LD_INT 32
15764: PUSH
15765: LD_INT 33
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: IN
15781: NOT
15782: PUSH
15783: LD_VAR 0 6
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: AND
15792: OR
15793: PUSH
15794: LD_VAR 0 1
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: LD_INT 3
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: IN
15809: NOT
15810: PUSH
15811: LD_VAR 0 6
15815: PUSH
15816: LD_INT 2
15818: EQUAL
15819: AND
15820: OR
15821: IFFALSE 15831
// mode = 0 ;
15823: LD_ADDR_VAR 0 6
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// case mode of 0 :
15831: LD_VAR 0 6
15835: PUSH
15836: LD_INT 0
15838: DOUBLE
15839: EQUAL
15840: IFTRUE 15844
15842: GO 27297
15844: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15845: LD_ADDR_VAR 0 11
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: LD_INT 0
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 0
15862: PUSH
15863: LD_INT 1
15865: NEG
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: LD_INT 0
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 1
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 0
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 1
15903: NEG
15904: PUSH
15905: LD_INT 0
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 1
15914: NEG
15915: PUSH
15916: LD_INT 1
15918: NEG
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 1
15926: NEG
15927: PUSH
15928: LD_INT 2
15930: NEG
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 0
15938: PUSH
15939: LD_INT 2
15941: NEG
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: LD_INT 1
15952: NEG
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: LD_INT 2
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: LD_INT 2
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 1
15980: NEG
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 3
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 3
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16038: LD_ADDR_VAR 0 12
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 0
16055: PUSH
16056: LD_INT 1
16058: NEG
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 0
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 1
16076: PUSH
16077: LD_INT 1
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 0
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 1
16096: NEG
16097: PUSH
16098: LD_INT 0
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 1
16107: NEG
16108: PUSH
16109: LD_INT 1
16111: NEG
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: LD_INT 1
16122: NEG
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: NEG
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 2
16161: NEG
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 2
16172: NEG
16173: PUSH
16174: LD_INT 1
16176: NEG
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 2
16184: NEG
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 3
16195: NEG
16196: PUSH
16197: LD_INT 0
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 3
16206: NEG
16207: PUSH
16208: LD_INT 1
16210: NEG
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16234: LD_ADDR_VAR 0 13
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 0
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 1
16292: NEG
16293: PUSH
16294: LD_INT 0
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 1
16303: NEG
16304: PUSH
16305: LD_INT 1
16307: NEG
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 1
16315: NEG
16316: PUSH
16317: LD_INT 2
16319: NEG
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 1
16347: PUSH
16348: LD_INT 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 2
16357: NEG
16358: PUSH
16359: LD_INT 1
16361: NEG
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 2
16369: NEG
16370: PUSH
16371: LD_INT 2
16373: NEG
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 2
16381: NEG
16382: PUSH
16383: LD_INT 3
16385: NEG
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 3
16393: NEG
16394: PUSH
16395: LD_INT 2
16397: NEG
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 3
16405: NEG
16406: PUSH
16407: LD_INT 3
16409: NEG
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16433: LD_ADDR_VAR 0 14
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 1
16453: NEG
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 1
16502: NEG
16503: PUSH
16504: LD_INT 1
16506: NEG
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: LD_INT 2
16518: NEG
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 2
16529: NEG
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: LD_INT 1
16540: NEG
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: LD_INT 2
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 1
16568: NEG
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: NEG
16580: PUSH
16581: LD_INT 3
16583: NEG
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: LD_INT 3
16594: NEG
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 2
16605: NEG
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16629: LD_ADDR_VAR 0 15
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 0
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 0
16646: PUSH
16647: LD_INT 1
16649: NEG
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: LD_INT 0
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: LD_INT 1
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 1
16687: NEG
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 1
16698: NEG
16699: PUSH
16700: LD_INT 1
16702: NEG
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: LD_INT 1
16713: NEG
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 1
16741: NEG
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 2
16752: NEG
16753: PUSH
16754: LD_INT 0
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 2
16763: NEG
16764: PUSH
16765: LD_INT 1
16767: NEG
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 2
16775: PUSH
16776: LD_INT 1
16778: NEG
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: LD_INT 0
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 3
16796: PUSH
16797: LD_INT 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16822: LD_ADDR_VAR 0 16
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: LD_INT 1
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: LD_INT 0
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: LD_INT 1
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 1
16880: NEG
16881: PUSH
16882: LD_INT 0
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 1
16891: NEG
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 1
16903: NEG
16904: PUSH
16905: LD_INT 2
16907: NEG
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: LD_INT 1
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: LD_INT 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 2
16945: NEG
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 2
16957: NEG
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 3
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 3
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17015: LD_ADDR_VAR 0 17
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: LD_INT 1
17035: NEG
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 0
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 1
17073: NEG
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 1
17084: NEG
17085: PUSH
17086: LD_INT 1
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: LD_INT 2
17100: NEG
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 2
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 1
17180: NEG
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 2
17191: NEG
17192: PUSH
17193: LD_INT 0
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 2
17202: NEG
17203: PUSH
17204: LD_INT 1
17206: NEG
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 2
17214: NEG
17215: PUSH
17216: LD_INT 2
17218: NEG
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17245: LD_ADDR_VAR 0 18
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 1
17265: NEG
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: LD_INT 0
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: LD_INT 1
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 1
17303: NEG
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 1
17314: NEG
17315: PUSH
17316: LD_INT 1
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: LD_INT 2
17330: NEG
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 0
17338: PUSH
17339: LD_INT 2
17341: NEG
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 1
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 0
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 0
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 1
17410: NEG
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 2
17421: NEG
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: NEG
17433: PUSH
17434: LD_INT 1
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 2
17444: NEG
17445: PUSH
17446: LD_INT 2
17448: NEG
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17475: LD_ADDR_VAR 0 19
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 0
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: NEG
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 2
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 2
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: NEG
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: NEG
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 2
17662: NEG
17663: PUSH
17664: LD_INT 1
17666: NEG
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 2
17674: NEG
17675: PUSH
17676: LD_INT 2
17678: NEG
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17705: LD_ADDR_VAR 0 20
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 0
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 1
17774: NEG
17775: PUSH
17776: LD_INT 1
17778: NEG
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: LD_INT 2
17790: NEG
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: LD_INT 2
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 1
17812: NEG
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: NEG
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 2
17881: NEG
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: NEG
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: LD_INT 2
17908: NEG
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17935: LD_ADDR_VAR 0 21
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: LD_INT 1
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: NEG
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: NEG
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: LD_INT 2
18020: NEG
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: LD_INT 1
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 2
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: LD_INT 0
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 2
18122: NEG
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18165: LD_ADDR_VAR 0 22
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 0
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: NEG
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 2
18341: NEG
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18395: LD_ADDR_VAR 0 23
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: LD_INT 2
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: LD_INT 1
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 2
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 2
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 2
18571: NEG
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 2
18582: NEG
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 2
18594: NEG
18595: PUSH
18596: LD_INT 2
18598: NEG
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 2
18606: NEG
18607: PUSH
18608: LD_INT 3
18610: NEG
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: LD_INT 3
18622: NEG
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: LD_INT 2
18633: NEG
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18675: LD_ADDR_VAR 0 24
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: LD_INT 1
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 0
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 1
18733: NEG
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: LD_INT 2
18771: NEG
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: NEG
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 2
18862: NEG
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: NEG
18875: PUSH
18876: LD_INT 2
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: LD_INT 2
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 3
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18951: LD_ADDR_VAR 0 25
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: LD_INT 2
19036: NEG
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 2
19047: NEG
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: LD_INT 0
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: NEG
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 2
19150: NEG
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 3
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 3
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 3
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 3
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19225: LD_ADDR_VAR 0 26
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 2
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: NEG
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 2
19424: NEG
19425: PUSH
19426: LD_INT 2
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 3
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: LD_INT 3
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: NEG
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19501: LD_ADDR_VAR 0 27
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: LD_INT 0
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: LD_INT 1
19521: NEG
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: LD_INT 2
19586: NEG
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: NEG
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: NEG
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: NEG
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 2
19700: NEG
19701: PUSH
19702: LD_INT 2
19704: NEG
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 3
19734: NEG
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 3
19746: NEG
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19781: LD_ADDR_VAR 0 28
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 1
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: NEG
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: NEG
19981: PUSH
19982: LD_INT 2
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: NEG
19993: PUSH
19994: LD_INT 3
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: LD_INT 3
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 3
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 3
20028: NEG
20029: PUSH
20030: LD_INT 2
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20063: LD_ADDR_VAR 0 29
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: NEG
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: LD_INT 2
20148: NEG
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: LD_INT 2
20159: NEG
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 1
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: NEG
20254: PUSH
20255: LD_INT 3
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 3
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 3
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: NEG
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 3
20307: NEG
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20342: LD_ADDR_VAR 0 30
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: LD_INT 2
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: NEG
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: LD_INT 3
20535: NEG
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: LD_INT 2
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: LD_INT 3
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 3
20585: NEG
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20620: LD_ADDR_VAR 0 31
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 1
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 2
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: LD_INT 2
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: NEG
20786: PUSH
20787: LD_INT 1
20789: NEG
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: NEG
20798: PUSH
20799: LD_INT 2
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: NEG
20810: PUSH
20811: LD_INT 3
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: LD_INT 1
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 3
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 3
20863: NEG
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20898: LD_ADDR_VAR 0 32
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 2
21075: NEG
21076: PUSH
21077: LD_INT 1
21079: NEG
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: LD_INT 3
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: LD_INT 2
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 3
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: NEG
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 3
21141: NEG
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21176: LD_ADDR_VAR 0 33
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 1
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 1
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: LD_INT 2
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 2
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: LD_INT 2
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 2
21342: NEG
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: NEG
21367: PUSH
21368: LD_INT 3
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 3
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 3
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 3
21420: NEG
21421: PUSH
21422: LD_INT 2
21424: NEG
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21455: LD_ADDR_VAR 0 34
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: NEG
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 2
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 2
21634: NEG
21635: PUSH
21636: LD_INT 2
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: NEG
21647: PUSH
21648: LD_INT 3
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: LD_INT 2
21661: NEG
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 3
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 2
21679: PUSH
21680: LD_INT 3
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 3
21700: NEG
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21735: LD_ADDR_VAR 0 35
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: LD_INT 1
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: NEG
21827: PUSH
21828: LD_INT 1
21830: NEG
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21847: LD_ADDR_VAR 0 36
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 0
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: LD_INT 2
21932: NEG
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21959: LD_ADDR_VAR 0 37
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 1
22028: NEG
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22071: LD_ADDR_VAR 0 38
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 0
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 2
22162: NEG
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22183: LD_ADDR_VAR 0 39
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 2
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22295: LD_ADDR_VAR 0 40
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22407: LD_ADDR_VAR 0 41
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 0
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: NEG
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: NEG
22598: PUSH
22599: LD_INT 3
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 3
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 3
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 3
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: NEG
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 3
22692: NEG
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 3
22704: NEG
22705: PUSH
22706: LD_INT 2
22708: NEG
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 3
22716: NEG
22717: PUSH
22718: LD_INT 3
22720: NEG
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22757: LD_ADDR_VAR 0 42
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: LD_INT 2
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: LD_INT 2
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 2
22923: NEG
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: LD_INT 3
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 3
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 3
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 3
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 3
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: NEG
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 3
23066: NEG
23067: PUSH
23068: LD_INT 3
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23107: LD_ADDR_VAR 0 43
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: LD_INT 1
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: LD_INT 2
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: NEG
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 2
23284: NEG
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 3
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 3
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 2
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 3
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: LD_INT 3
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: NEG
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 3
23403: NEG
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 3
23414: NEG
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23455: LD_ADDR_VAR 0 44
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: LD_INT 2
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: NEG
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 2
23645: NEG
23646: PUSH
23647: LD_INT 3
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 3
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 3
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 3
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 3
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 3
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: NEG
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 3
23729: NEG
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 3
23740: NEG
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 3
23752: NEG
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 3
23764: NEG
23765: PUSH
23766: LD_INT 3
23768: NEG
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23805: LD_ADDR_VAR 0 45
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: NEG
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 2
23971: NEG
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 2
23983: NEG
23984: PUSH
23985: LD_INT 2
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: LD_INT 3
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: LD_INT 3
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 3
24022: NEG
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 2
24033: NEG
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 3
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 3
24051: PUSH
24052: LD_INT 3
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: PUSH
24062: LD_INT 3
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 3
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 2
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: NEG
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 3
24114: NEG
24115: PUSH
24116: LD_INT 3
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24155: LD_ADDR_VAR 0 46
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 1
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: LD_INT 1
24336: NEG
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: LD_INT 3
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 3
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 2
24370: NEG
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 3
24389: PUSH
24390: LD_INT 0
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 3
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 2
24440: NEG
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 3
24451: NEG
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 3
24462: NEG
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24503: LD_ADDR_VAR 0 47
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24654: LD_ADDR_VAR 0 48
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 2
24739: NEG
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24801: LD_ADDR_VAR 0 49
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24945: LD_ADDR_VAR 0 50
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25089: LD_ADDR_VAR 0 51
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: NEG
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25236: LD_ADDR_VAR 0 52
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 2
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: NEG
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25387: LD_ADDR_VAR 0 53
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: NEG
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: NEG
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 2
25586: NEG
25587: PUSH
25588: LD_INT 2
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25617: LD_ADDR_VAR 0 54
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: LD_INT 2
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 2
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25847: LD_ADDR_VAR 0 55
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: NEG
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: NEG
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26077: LD_ADDR_VAR 0 56
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: NEG
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: NEG
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: NEG
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 2
26276: NEG
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26307: LD_ADDR_VAR 0 57
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 2
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: NEG
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: LD_INT 2
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26537: LD_ADDR_VAR 0 58
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 2
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: NEG
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: LD_INT 2
26740: NEG
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26767: LD_ADDR_VAR 0 59
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26855: LD_ADDR_VAR 0 60
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26943: LD_ADDR_VAR 0 61
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27031: LD_ADDR_VAR 0 62
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27119: LD_ADDR_VAR 0 63
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27207: LD_ADDR_VAR 0 64
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: ST_TO_ADDR
// end ; 1 :
27295: GO 33192
27297: LD_INT 1
27299: DOUBLE
27300: EQUAL
27301: IFTRUE 27305
27303: GO 29928
27305: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27306: LD_ADDR_VAR 0 11
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 3
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 3
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27350: LD_ADDR_VAR 0 12
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 3
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 3
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27391: LD_ADDR_VAR 0 13
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 3
27408: PUSH
27409: LD_INT 3
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: LD_INT 3
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27431: LD_ADDR_VAR 0 14
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: LD_INT 3
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 3
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27472: LD_ADDR_VAR 0 15
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 3
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 3
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27516: LD_ADDR_VAR 0 16
27520: PUSH
27521: LD_INT 2
27523: NEG
27524: PUSH
27525: LD_INT 3
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 3
27535: NEG
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: LD_INT 3
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27562: LD_ADDR_VAR 0 17
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 3
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 3
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27606: LD_ADDR_VAR 0 18
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 3
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: LIST
27646: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27647: LD_ADDR_VAR 0 19
27651: PUSH
27652: LD_INT 3
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27687: LD_ADDR_VAR 0 20
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27728: LD_ADDR_VAR 0 21
27732: PUSH
27733: LD_INT 2
27735: NEG
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 3
27746: NEG
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 3
27757: NEG
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27772: LD_ADDR_VAR 0 22
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: LD_INT 3
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 3
27791: NEG
27792: PUSH
27793: LD_INT 2
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 3
27803: NEG
27804: PUSH
27805: LD_INT 3
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27818: LD_ADDR_VAR 0 23
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 3
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: LD_INT 4
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 3
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27862: LD_ADDR_VAR 0 24
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 4
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27903: LD_ADDR_VAR 0 25
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: LD_INT 3
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 4
27920: PUSH
27921: LD_INT 3
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: LD_INT 4
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27943: LD_ADDR_VAR 0 26
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 3
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 4
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 3
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27984: LD_ADDR_VAR 0 27
27988: PUSH
27989: LD_INT 3
27991: NEG
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 3
28002: NEG
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 4
28013: NEG
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28028: LD_ADDR_VAR 0 28
28032: PUSH
28033: LD_INT 3
28035: NEG
28036: PUSH
28037: LD_INT 3
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: NEG
28048: PUSH
28049: LD_INT 4
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 4
28059: NEG
28060: PUSH
28061: LD_INT 3
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28074: LD_ADDR_VAR 0 29
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 3
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 3
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 4
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 4
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 3
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: LD_INT 5
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 5
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: LD_INT 4
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 6
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 6
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 5
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28229: LD_ADDR_VAR 0 30
28233: PUSH
28234: LD_INT 2
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 4
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 4
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 4
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 5
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 5
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 6
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 6
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28372: LD_ADDR_VAR 0 31
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 3
28389: PUSH
28390: LD_INT 3
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 3
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 4
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 4
28419: PUSH
28420: LD_INT 4
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: LD_INT 4
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 5
28439: PUSH
28440: LD_INT 4
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 5
28449: PUSH
28450: LD_INT 5
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 4
28459: PUSH
28460: LD_INT 5
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 6
28469: PUSH
28470: LD_INT 5
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 6
28479: PUSH
28480: LD_INT 6
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 5
28489: PUSH
28490: LD_INT 6
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28511: LD_ADDR_VAR 0 32
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: LD_INT 3
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 4
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 4
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 3
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 5
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: LD_INT 5
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: LD_INT 4
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 6
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 6
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: LD_INT 5
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28654: LD_ADDR_VAR 0 33
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 3
28672: NEG
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 3
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 3
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 4
28706: NEG
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 4
28717: NEG
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 4
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 5
28740: NEG
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 5
28751: NEG
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 5
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 6
28774: NEG
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 6
28785: NEG
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28809: LD_ADDR_VAR 0 34
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 3
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 3
28828: NEG
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 3
28840: NEG
28841: PUSH
28842: LD_INT 3
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 3
28852: NEG
28853: PUSH
28854: LD_INT 4
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 4
28864: NEG
28865: PUSH
28866: LD_INT 3
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 4
28876: NEG
28877: PUSH
28878: LD_INT 4
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 4
28888: NEG
28889: PUSH
28890: LD_INT 5
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 5
28900: NEG
28901: PUSH
28902: LD_INT 4
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 5
28912: NEG
28913: PUSH
28914: LD_INT 5
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 5
28924: NEG
28925: PUSH
28926: LD_INT 6
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 6
28936: NEG
28937: PUSH
28938: LD_INT 5
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 6
28948: NEG
28949: PUSH
28950: LD_INT 6
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28972: LD_ADDR_VAR 0 41
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 2
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29016: LD_ADDR_VAR 0 42
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 3
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29057: LD_ADDR_VAR 0 43
29061: PUSH
29062: LD_INT 2
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 3
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 3
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29097: LD_ADDR_VAR 0 44
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: LD_INT 3
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29138: LD_ADDR_VAR 0 45
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 2
29156: NEG
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 3
29167: NEG
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29182: LD_ADDR_VAR 0 46
29186: PUSH
29187: LD_INT 2
29189: NEG
29190: PUSH
29191: LD_INT 2
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: LD_INT 3
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 3
29213: NEG
29214: PUSH
29215: LD_INT 2
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29228: LD_ADDR_VAR 0 47
29232: PUSH
29233: LD_INT 2
29235: NEG
29236: PUSH
29237: LD_INT 3
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: LD_INT 3
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29261: LD_ADDR_VAR 0 48
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29292: LD_ADDR_VAR 0 49
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29321: LD_ADDR_VAR 0 50
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: LD_INT 3
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29350: LD_ADDR_VAR 0 51
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29381: LD_ADDR_VAR 0 52
29385: PUSH
29386: LD_INT 3
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29414: LD_ADDR_VAR 0 53
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: LD_INT 3
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 3
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: LD_INT 2
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29458: LD_ADDR_VAR 0 54
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 3
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 3
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29499: LD_ADDR_VAR 0 55
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29539: LD_ADDR_VAR 0 56
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 3
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29580: LD_ADDR_VAR 0 57
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 3
29598: NEG
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 3
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29624: LD_ADDR_VAR 0 58
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: NEG
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 3
29655: NEG
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29670: LD_ADDR_VAR 0 59
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: LD_INT 2
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29714: LD_ADDR_VAR 0 60
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29755: LD_ADDR_VAR 0 61
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29795: LD_ADDR_VAR 0 62
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 2
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29836: LD_ADDR_VAR 0 63
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29880: LD_ADDR_VAR 0 64
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 2
29911: NEG
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// end ; 2 :
29926: GO 33192
29928: LD_INT 2
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 33191
29936: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29937: LD_ADDR_VAR 0 29
29941: PUSH
29942: LD_INT 4
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 4
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 5
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 5
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 5
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: LD_INT 3
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 3
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 4
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 4
30067: PUSH
30068: LD_INT 4
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: PUSH
30078: LD_INT 4
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: LD_INT 3
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 4
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 4
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 4
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 5
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 5
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 4
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: NEG
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 3
30220: NEG
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 3
30231: NEG
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 3
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 4
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 4
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 4
30299: NEG
30300: PUSH
30301: LD_INT 2
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 4
30322: NEG
30323: PUSH
30324: LD_INT 4
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 4
30334: NEG
30335: PUSH
30336: LD_INT 5
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 3
30346: NEG
30347: PUSH
30348: LD_INT 4
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: NEG
30359: PUSH
30360: LD_INT 3
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 4
30370: NEG
30371: PUSH
30372: LD_INT 3
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 5
30382: NEG
30383: PUSH
30384: LD_INT 4
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 5
30394: NEG
30395: PUSH
30396: LD_INT 5
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 3
30406: NEG
30407: PUSH
30408: LD_INT 5
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 5
30418: NEG
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30475: LD_ADDR_VAR 0 30
30479: PUSH
30480: LD_INT 4
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 4
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 5
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 5
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 4
30522: PUSH
30523: LD_INT 5
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 3
30532: PUSH
30533: LD_INT 4
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 3
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 5
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 5
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 4
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 4
30665: NEG
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 4
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 4
30710: NEG
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 5
30721: NEG
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 5
30732: NEG
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 5
30744: NEG
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: NEG
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 2
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 4
30827: NEG
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 4
30839: NEG
30840: PUSH
30841: LD_INT 4
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: NEG
30852: PUSH
30853: LD_INT 4
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: NEG
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 4
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 5
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 4
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 3
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 4
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: LD_INT 5
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: LD_INT 5
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31022: LD_ADDR_VAR 0 31
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 4
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 4
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 5
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 4
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 5
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 3
31122: NEG
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 3
31133: NEG
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: NEG
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 4
31178: NEG
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 4
31189: NEG
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 4
31201: NEG
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 4
31224: NEG
31225: PUSH
31226: LD_INT 4
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 4
31236: NEG
31237: PUSH
31238: LD_INT 5
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: NEG
31249: PUSH
31250: LD_INT 4
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: NEG
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 4
31272: NEG
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 5
31284: NEG
31285: PUSH
31286: LD_INT 4
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 5
31296: NEG
31297: PUSH
31298: LD_INT 5
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 5
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 5
31320: NEG
31321: PUSH
31322: LD_INT 3
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 4
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 4
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 4
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 4
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 4
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 5
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 5
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 4
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31572: LD_ADDR_VAR 0 32
31576: PUSH
31577: LD_INT 4
31579: NEG
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 4
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 3
31602: NEG
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: NEG
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 5
31635: NEG
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 5
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 5
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: NEG
31694: PUSH
31695: LD_INT 4
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 4
31741: NEG
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 4
31753: NEG
31754: PUSH
31755: LD_INT 4
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: LD_INT 4
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 4
31777: NEG
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 4
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 5
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: LD_INT 3
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 3
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: LD_INT 4
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 5
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 3
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 4
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 4
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 4
31984: PUSH
31985: LD_INT 4
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 5
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 5
32014: PUSH
32015: LD_INT 5
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 4
32024: PUSH
32025: LD_INT 5
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: LD_INT 4
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 3
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 5
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 5
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32119: LD_ADDR_VAR 0 33
32123: PUSH
32124: LD_INT 4
32126: NEG
32127: PUSH
32128: LD_INT 4
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 4
32138: NEG
32139: PUSH
32140: LD_INT 5
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 3
32150: NEG
32151: PUSH
32152: LD_INT 4
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 3
32162: NEG
32163: PUSH
32164: LD_INT 3
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 4
32174: NEG
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 5
32186: NEG
32187: PUSH
32188: LD_INT 4
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 5
32198: NEG
32199: PUSH
32200: LD_INT 5
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: LD_INT 5
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 5
32222: NEG
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: LD_INT 4
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 3
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: LD_INT 4
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: NEG
32325: PUSH
32326: LD_INT 4
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 4
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 4
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 5
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 4
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 3
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 5
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: LD_INT 3
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 4
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: LD_INT 4
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: LD_INT 5
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 5
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 5
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32657: LD_ADDR_VAR 0 34
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 4
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 5
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: LD_INT 4
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 3
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 4
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 5
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 3
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: LD_INT 5
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 4
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 4
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 4
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 4
32859: PUSH
32860: LD_INT 4
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 5
32879: PUSH
32880: LD_INT 4
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: LD_INT 5
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 4
32899: PUSH
32900: LD_INT 5
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 4
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 5
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 4
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 4
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: NEG
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 4
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 4
33042: NEG
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 4
33053: NEG
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: NEG
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 3
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 4
33087: NEG
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 5
33098: NEG
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 5
33109: NEG
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 5
33121: NEG
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// end ; end ;
33189: GO 33192
33191: POP
// case btype of b_depot , b_warehouse :
33192: LD_VAR 0 1
33196: PUSH
33197: LD_INT 0
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33211
33203: LD_INT 1
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33412
33211: POP
// case nation of nation_american :
33212: LD_VAR 0 5
33216: PUSH
33217: LD_INT 1
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33281
33225: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33226: LD_ADDR_VAR 0 9
33230: PUSH
33231: LD_VAR 0 11
33235: PUSH
33236: LD_VAR 0 12
33240: PUSH
33241: LD_VAR 0 13
33245: PUSH
33246: LD_VAR 0 14
33250: PUSH
33251: LD_VAR 0 15
33255: PUSH
33256: LD_VAR 0 16
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: PUSH
33269: LD_VAR 0 4
33273: PUSH
33274: LD_INT 1
33276: PLUS
33277: ARRAY
33278: ST_TO_ADDR
33279: GO 33410
33281: LD_INT 2
33283: DOUBLE
33284: EQUAL
33285: IFTRUE 33289
33287: GO 33345
33289: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33290: LD_ADDR_VAR 0 9
33294: PUSH
33295: LD_VAR 0 17
33299: PUSH
33300: LD_VAR 0 18
33304: PUSH
33305: LD_VAR 0 19
33309: PUSH
33310: LD_VAR 0 20
33314: PUSH
33315: LD_VAR 0 21
33319: PUSH
33320: LD_VAR 0 22
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: PUSH
33333: LD_VAR 0 4
33337: PUSH
33338: LD_INT 1
33340: PLUS
33341: ARRAY
33342: ST_TO_ADDR
33343: GO 33410
33345: LD_INT 3
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33409
33353: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33354: LD_ADDR_VAR 0 9
33358: PUSH
33359: LD_VAR 0 23
33363: PUSH
33364: LD_VAR 0 24
33368: PUSH
33369: LD_VAR 0 25
33373: PUSH
33374: LD_VAR 0 26
33378: PUSH
33379: LD_VAR 0 27
33383: PUSH
33384: LD_VAR 0 28
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: PUSH
33397: LD_VAR 0 4
33401: PUSH
33402: LD_INT 1
33404: PLUS
33405: ARRAY
33406: ST_TO_ADDR
33407: GO 33410
33409: POP
33410: GO 33965
33412: LD_INT 2
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33426
33418: LD_INT 3
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33482
33426: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33427: LD_ADDR_VAR 0 9
33431: PUSH
33432: LD_VAR 0 29
33436: PUSH
33437: LD_VAR 0 30
33441: PUSH
33442: LD_VAR 0 31
33446: PUSH
33447: LD_VAR 0 32
33451: PUSH
33452: LD_VAR 0 33
33456: PUSH
33457: LD_VAR 0 34
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: PUSH
33470: LD_VAR 0 4
33474: PUSH
33475: LD_INT 1
33477: PLUS
33478: ARRAY
33479: ST_TO_ADDR
33480: GO 33965
33482: LD_INT 16
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33544
33488: LD_INT 17
33490: DOUBLE
33491: EQUAL
33492: IFTRUE 33544
33494: LD_INT 18
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33544
33500: LD_INT 19
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33544
33506: LD_INT 22
33508: DOUBLE
33509: EQUAL
33510: IFTRUE 33544
33512: LD_INT 20
33514: DOUBLE
33515: EQUAL
33516: IFTRUE 33544
33518: LD_INT 21
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33544
33524: LD_INT 23
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33544
33530: LD_INT 24
33532: DOUBLE
33533: EQUAL
33534: IFTRUE 33544
33536: LD_INT 25
33538: DOUBLE
33539: EQUAL
33540: IFTRUE 33544
33542: GO 33600
33544: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33545: LD_ADDR_VAR 0 9
33549: PUSH
33550: LD_VAR 0 35
33554: PUSH
33555: LD_VAR 0 36
33559: PUSH
33560: LD_VAR 0 37
33564: PUSH
33565: LD_VAR 0 38
33569: PUSH
33570: LD_VAR 0 39
33574: PUSH
33575: LD_VAR 0 40
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: PUSH
33588: LD_VAR 0 4
33592: PUSH
33593: LD_INT 1
33595: PLUS
33596: ARRAY
33597: ST_TO_ADDR
33598: GO 33965
33600: LD_INT 6
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33656
33606: LD_INT 7
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33656
33612: LD_INT 8
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33656
33618: LD_INT 13
33620: DOUBLE
33621: EQUAL
33622: IFTRUE 33656
33624: LD_INT 12
33626: DOUBLE
33627: EQUAL
33628: IFTRUE 33656
33630: LD_INT 15
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33656
33636: LD_INT 11
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33656
33642: LD_INT 14
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33656
33648: LD_INT 10
33650: DOUBLE
33651: EQUAL
33652: IFTRUE 33656
33654: GO 33712
33656: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_VAR 0 41
33666: PUSH
33667: LD_VAR 0 42
33671: PUSH
33672: LD_VAR 0 43
33676: PUSH
33677: LD_VAR 0 44
33681: PUSH
33682: LD_VAR 0 45
33686: PUSH
33687: LD_VAR 0 46
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: PUSH
33700: LD_VAR 0 4
33704: PUSH
33705: LD_INT 1
33707: PLUS
33708: ARRAY
33709: ST_TO_ADDR
33710: GO 33965
33712: LD_INT 36
33714: DOUBLE
33715: EQUAL
33716: IFTRUE 33720
33718: GO 33776
33720: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33721: LD_ADDR_VAR 0 9
33725: PUSH
33726: LD_VAR 0 47
33730: PUSH
33731: LD_VAR 0 48
33735: PUSH
33736: LD_VAR 0 49
33740: PUSH
33741: LD_VAR 0 50
33745: PUSH
33746: LD_VAR 0 51
33750: PUSH
33751: LD_VAR 0 52
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: PUSH
33764: LD_VAR 0 4
33768: PUSH
33769: LD_INT 1
33771: PLUS
33772: ARRAY
33773: ST_TO_ADDR
33774: GO 33965
33776: LD_INT 4
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33802
33782: LD_INT 5
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33802
33788: LD_INT 34
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33802
33794: LD_INT 37
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33858
33802: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33803: LD_ADDR_VAR 0 9
33807: PUSH
33808: LD_VAR 0 53
33812: PUSH
33813: LD_VAR 0 54
33817: PUSH
33818: LD_VAR 0 55
33822: PUSH
33823: LD_VAR 0 56
33827: PUSH
33828: LD_VAR 0 57
33832: PUSH
33833: LD_VAR 0 58
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: PUSH
33846: LD_VAR 0 4
33850: PUSH
33851: LD_INT 1
33853: PLUS
33854: ARRAY
33855: ST_TO_ADDR
33856: GO 33965
33858: LD_INT 31
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33908
33864: LD_INT 32
33866: DOUBLE
33867: EQUAL
33868: IFTRUE 33908
33870: LD_INT 33
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33908
33876: LD_INT 27
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33908
33882: LD_INT 26
33884: DOUBLE
33885: EQUAL
33886: IFTRUE 33908
33888: LD_INT 28
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33908
33894: LD_INT 29
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33908
33900: LD_INT 30
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33908
33906: GO 33964
33908: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33909: LD_ADDR_VAR 0 9
33913: PUSH
33914: LD_VAR 0 59
33918: PUSH
33919: LD_VAR 0 60
33923: PUSH
33924: LD_VAR 0 61
33928: PUSH
33929: LD_VAR 0 62
33933: PUSH
33934: LD_VAR 0 63
33938: PUSH
33939: LD_VAR 0 64
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: PUSH
33952: LD_VAR 0 4
33956: PUSH
33957: LD_INT 1
33959: PLUS
33960: ARRAY
33961: ST_TO_ADDR
33962: GO 33965
33964: POP
// temp_list2 = [ ] ;
33965: LD_ADDR_VAR 0 10
33969: PUSH
33970: EMPTY
33971: ST_TO_ADDR
// for i in temp_list do
33972: LD_ADDR_VAR 0 8
33976: PUSH
33977: LD_VAR 0 9
33981: PUSH
33982: FOR_IN
33983: IFFALSE 34035
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33985: LD_ADDR_VAR 0 10
33989: PUSH
33990: LD_VAR 0 10
33994: PUSH
33995: LD_VAR 0 8
33999: PUSH
34000: LD_INT 1
34002: ARRAY
34003: PUSH
34004: LD_VAR 0 2
34008: PLUS
34009: PUSH
34010: LD_VAR 0 8
34014: PUSH
34015: LD_INT 2
34017: ARRAY
34018: PUSH
34019: LD_VAR 0 3
34023: PLUS
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: EMPTY
34030: LIST
34031: ADD
34032: ST_TO_ADDR
34033: GO 33982
34035: POP
34036: POP
// result = temp_list2 ;
34037: LD_ADDR_VAR 0 7
34041: PUSH
34042: LD_VAR 0 10
34046: ST_TO_ADDR
// end ;
34047: LD_VAR 0 7
34051: RET
// export function EnemyInRange ( unit , dist ) ; begin
34052: LD_INT 0
34054: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 255
34069: PPUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 250
34079: PPUSH
34080: LD_VAR 0 1
34084: PPUSH
34085: CALL_OW 251
34089: PPUSH
34090: LD_VAR 0 2
34094: PPUSH
34095: CALL 7445 0 4
34099: PUSH
34100: LD_INT 4
34102: ARRAY
34103: ST_TO_ADDR
// end ;
34104: LD_VAR 0 3
34108: RET
// export function PlayerSeeMe ( unit ) ; begin
34109: LD_INT 0
34111: PPUSH
// result := See ( your_side , unit ) ;
34112: LD_ADDR_VAR 0 2
34116: PUSH
34117: LD_OWVAR 2
34121: PPUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 292
34131: ST_TO_ADDR
// end ;
34132: LD_VAR 0 2
34136: RET
// export function ReverseDir ( unit ) ; begin
34137: LD_INT 0
34139: PPUSH
// if not unit then
34140: LD_VAR 0 1
34144: NOT
34145: IFFALSE 34149
// exit ;
34147: GO 34172
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34149: LD_ADDR_VAR 0 2
34153: PUSH
34154: LD_VAR 0 1
34158: PPUSH
34159: CALL_OW 254
34163: PUSH
34164: LD_INT 3
34166: PLUS
34167: PUSH
34168: LD_INT 6
34170: MOD
34171: ST_TO_ADDR
// end ;
34172: LD_VAR 0 2
34176: RET
// export function ReverseArray ( array ) ; var i ; begin
34177: LD_INT 0
34179: PPUSH
34180: PPUSH
// if not array then
34181: LD_VAR 0 1
34185: NOT
34186: IFFALSE 34190
// exit ;
34188: GO 34245
// result := [ ] ;
34190: LD_ADDR_VAR 0 2
34194: PUSH
34195: EMPTY
34196: ST_TO_ADDR
// for i := array downto 1 do
34197: LD_ADDR_VAR 0 3
34201: PUSH
34202: DOUBLE
34203: LD_VAR 0 1
34207: INC
34208: ST_TO_ADDR
34209: LD_INT 1
34211: PUSH
34212: FOR_DOWNTO
34213: IFFALSE 34243
// result := Join ( result , array [ i ] ) ;
34215: LD_ADDR_VAR 0 2
34219: PUSH
34220: LD_VAR 0 2
34224: PPUSH
34225: LD_VAR 0 1
34229: PUSH
34230: LD_VAR 0 3
34234: ARRAY
34235: PPUSH
34236: CALL 38888 0 2
34240: ST_TO_ADDR
34241: GO 34212
34243: POP
34244: POP
// end ;
34245: LD_VAR 0 2
34249: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34250: LD_INT 0
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
// if not unit or not hexes then
34258: LD_VAR 0 1
34262: NOT
34263: PUSH
34264: LD_VAR 0 2
34268: NOT
34269: OR
34270: IFFALSE 34274
// exit ;
34272: GO 34397
// dist := 9999 ;
34274: LD_ADDR_VAR 0 5
34278: PUSH
34279: LD_INT 9999
34281: ST_TO_ADDR
// for i = 1 to hexes do
34282: LD_ADDR_VAR 0 4
34286: PUSH
34287: DOUBLE
34288: LD_INT 1
34290: DEC
34291: ST_TO_ADDR
34292: LD_VAR 0 2
34296: PUSH
34297: FOR_TO
34298: IFFALSE 34385
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34300: LD_ADDR_VAR 0 6
34304: PUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: LD_VAR 0 2
34314: PUSH
34315: LD_VAR 0 4
34319: ARRAY
34320: PUSH
34321: LD_INT 1
34323: ARRAY
34324: PPUSH
34325: LD_VAR 0 2
34329: PUSH
34330: LD_VAR 0 4
34334: ARRAY
34335: PUSH
34336: LD_INT 2
34338: ARRAY
34339: PPUSH
34340: CALL_OW 297
34344: ST_TO_ADDR
// if tdist < dist then
34345: LD_VAR 0 6
34349: PUSH
34350: LD_VAR 0 5
34354: LESS
34355: IFFALSE 34383
// begin hex := hexes [ i ] ;
34357: LD_ADDR_VAR 0 8
34361: PUSH
34362: LD_VAR 0 2
34366: PUSH
34367: LD_VAR 0 4
34371: ARRAY
34372: ST_TO_ADDR
// dist := tdist ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 6
34382: ST_TO_ADDR
// end ; end ;
34383: GO 34297
34385: POP
34386: POP
// result := hex ;
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_VAR 0 8
34396: ST_TO_ADDR
// end ;
34397: LD_VAR 0 3
34401: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34402: LD_INT 0
34404: PPUSH
34405: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34406: LD_VAR 0 1
34410: NOT
34411: PUSH
34412: LD_VAR 0 1
34416: PUSH
34417: LD_INT 21
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 23
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PPUSH
34441: CALL_OW 69
34445: IN
34446: NOT
34447: OR
34448: IFFALSE 34452
// exit ;
34450: GO 34499
// for i = 1 to 3 do
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: DOUBLE
34458: LD_INT 1
34460: DEC
34461: ST_TO_ADDR
34462: LD_INT 3
34464: PUSH
34465: FOR_TO
34466: IFFALSE 34497
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 250
34477: PPUSH
34478: LD_VAR 0 1
34482: PPUSH
34483: CALL_OW 251
34487: PPUSH
34488: LD_INT 1
34490: PPUSH
34491: CALL_OW 453
34495: GO 34465
34497: POP
34498: POP
// end ;
34499: LD_VAR 0 2
34503: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34504: LD_INT 0
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34512: LD_VAR 0 1
34516: NOT
34517: PUSH
34518: LD_VAR 0 2
34522: NOT
34523: OR
34524: PUSH
34525: LD_VAR 0 1
34529: PPUSH
34530: CALL_OW 314
34534: OR
34535: IFFALSE 34539
// exit ;
34537: GO 35006
// if GetLives ( i ) < 250 then
34539: LD_VAR 0 4
34543: PPUSH
34544: CALL_OW 256
34548: PUSH
34549: LD_INT 250
34551: LESS
34552: IFFALSE 34565
// begin ComAutodestruct ( i ) ;
34554: LD_VAR 0 4
34558: PPUSH
34559: CALL 34402 0 1
// exit ;
34563: GO 35006
// end ; x := GetX ( enemy_unit ) ;
34565: LD_ADDR_VAR 0 7
34569: PUSH
34570: LD_VAR 0 2
34574: PPUSH
34575: CALL_OW 250
34579: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34580: LD_ADDR_VAR 0 8
34584: PUSH
34585: LD_VAR 0 2
34589: PPUSH
34590: CALL_OW 251
34594: ST_TO_ADDR
// if not x or not y then
34595: LD_VAR 0 7
34599: NOT
34600: PUSH
34601: LD_VAR 0 8
34605: NOT
34606: OR
34607: IFFALSE 34611
// exit ;
34609: GO 35006
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34611: LD_ADDR_VAR 0 6
34615: PUSH
34616: LD_VAR 0 7
34620: PPUSH
34621: LD_INT 0
34623: PPUSH
34624: LD_INT 4
34626: PPUSH
34627: CALL_OW 272
34631: PUSH
34632: LD_VAR 0 8
34636: PPUSH
34637: LD_INT 0
34639: PPUSH
34640: LD_INT 4
34642: PPUSH
34643: CALL_OW 273
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_VAR 0 7
34656: PPUSH
34657: LD_INT 1
34659: PPUSH
34660: LD_INT 4
34662: PPUSH
34663: CALL_OW 272
34667: PUSH
34668: LD_VAR 0 8
34672: PPUSH
34673: LD_INT 1
34675: PPUSH
34676: LD_INT 4
34678: PPUSH
34679: CALL_OW 273
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_VAR 0 7
34692: PPUSH
34693: LD_INT 2
34695: PPUSH
34696: LD_INT 4
34698: PPUSH
34699: CALL_OW 272
34703: PUSH
34704: LD_VAR 0 8
34708: PPUSH
34709: LD_INT 2
34711: PPUSH
34712: LD_INT 4
34714: PPUSH
34715: CALL_OW 273
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_VAR 0 7
34728: PPUSH
34729: LD_INT 3
34731: PPUSH
34732: LD_INT 4
34734: PPUSH
34735: CALL_OW 272
34739: PUSH
34740: LD_VAR 0 8
34744: PPUSH
34745: LD_INT 3
34747: PPUSH
34748: LD_INT 4
34750: PPUSH
34751: CALL_OW 273
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_VAR 0 7
34764: PPUSH
34765: LD_INT 4
34767: PPUSH
34768: LD_INT 4
34770: PPUSH
34771: CALL_OW 272
34775: PUSH
34776: LD_VAR 0 8
34780: PPUSH
34781: LD_INT 4
34783: PPUSH
34784: LD_INT 4
34786: PPUSH
34787: CALL_OW 273
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_VAR 0 7
34800: PPUSH
34801: LD_INT 5
34803: PPUSH
34804: LD_INT 4
34806: PPUSH
34807: CALL_OW 272
34811: PUSH
34812: LD_VAR 0 8
34816: PPUSH
34817: LD_INT 5
34819: PPUSH
34820: LD_INT 4
34822: PPUSH
34823: CALL_OW 273
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: ST_TO_ADDR
// for i = tmp downto 1 do
34840: LD_ADDR_VAR 0 4
34844: PUSH
34845: DOUBLE
34846: LD_VAR 0 6
34850: INC
34851: ST_TO_ADDR
34852: LD_INT 1
34854: PUSH
34855: FOR_DOWNTO
34856: IFFALSE 34957
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34858: LD_VAR 0 6
34862: PUSH
34863: LD_VAR 0 4
34867: ARRAY
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: PPUSH
34873: LD_VAR 0 6
34877: PUSH
34878: LD_VAR 0 4
34882: ARRAY
34883: PUSH
34884: LD_INT 2
34886: ARRAY
34887: PPUSH
34888: CALL_OW 488
34892: NOT
34893: PUSH
34894: LD_VAR 0 6
34898: PUSH
34899: LD_VAR 0 4
34903: ARRAY
34904: PUSH
34905: LD_INT 1
34907: ARRAY
34908: PPUSH
34909: LD_VAR 0 6
34913: PUSH
34914: LD_VAR 0 4
34918: ARRAY
34919: PUSH
34920: LD_INT 2
34922: ARRAY
34923: PPUSH
34924: CALL_OW 428
34928: PUSH
34929: LD_INT 0
34931: NONEQUAL
34932: OR
34933: IFFALSE 34955
// tmp := Delete ( tmp , i ) ;
34935: LD_ADDR_VAR 0 6
34939: PUSH
34940: LD_VAR 0 6
34944: PPUSH
34945: LD_VAR 0 4
34949: PPUSH
34950: CALL_OW 3
34954: ST_TO_ADDR
34955: GO 34855
34957: POP
34958: POP
// j := GetClosestHex ( unit , tmp ) ;
34959: LD_ADDR_VAR 0 5
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: LD_VAR 0 6
34973: PPUSH
34974: CALL 34250 0 2
34978: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34979: LD_VAR 0 1
34983: PPUSH
34984: LD_VAR 0 5
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PPUSH
34993: LD_VAR 0 5
34997: PUSH
34998: LD_INT 2
35000: ARRAY
35001: PPUSH
35002: CALL_OW 111
// end ;
35006: LD_VAR 0 3
35010: RET
// export function PrepareApemanSoldier ( ) ; begin
35011: LD_INT 0
35013: PPUSH
// uc_nation := 0 ;
35014: LD_ADDR_OWVAR 21
35018: PUSH
35019: LD_INT 0
35021: ST_TO_ADDR
// hc_sex := sex_male ;
35022: LD_ADDR_OWVAR 27
35026: PUSH
35027: LD_INT 1
35029: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35030: LD_ADDR_OWVAR 28
35034: PUSH
35035: LD_INT 15
35037: ST_TO_ADDR
// hc_gallery :=  ;
35038: LD_ADDR_OWVAR 33
35042: PUSH
35043: LD_STRING 
35045: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35046: LD_ADDR_OWVAR 31
35050: PUSH
35051: LD_INT 0
35053: PPUSH
35054: LD_INT 3
35056: PPUSH
35057: CALL_OW 12
35061: PUSH
35062: LD_INT 0
35064: PPUSH
35065: LD_INT 3
35067: PPUSH
35068: CALL_OW 12
35072: PUSH
35073: LD_INT 0
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
// end ;
35085: LD_VAR 0 1
35089: RET
// export function PrepareApemanEngineer ( ) ; begin
35090: LD_INT 0
35092: PPUSH
// uc_nation := 0 ;
35093: LD_ADDR_OWVAR 21
35097: PUSH
35098: LD_INT 0
35100: ST_TO_ADDR
// hc_sex := sex_male ;
35101: LD_ADDR_OWVAR 27
35105: PUSH
35106: LD_INT 1
35108: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35109: LD_ADDR_OWVAR 28
35113: PUSH
35114: LD_INT 16
35116: ST_TO_ADDR
// hc_gallery :=  ;
35117: LD_ADDR_OWVAR 33
35121: PUSH
35122: LD_STRING 
35124: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35125: LD_ADDR_OWVAR 31
35129: PUSH
35130: LD_INT 0
35132: PPUSH
35133: LD_INT 3
35135: PPUSH
35136: CALL_OW 12
35140: PUSH
35141: LD_INT 0
35143: PPUSH
35144: LD_INT 3
35146: PPUSH
35147: CALL_OW 12
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
// end ;
35164: LD_VAR 0 1
35168: RET
// export function PrepareApeman ( agressivity ) ; begin
35169: LD_INT 0
35171: PPUSH
// uc_side := 0 ;
35172: LD_ADDR_OWVAR 20
35176: PUSH
35177: LD_INT 0
35179: ST_TO_ADDR
// uc_nation := 0 ;
35180: LD_ADDR_OWVAR 21
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
// hc_sex := sex_male ;
35188: LD_ADDR_OWVAR 27
35192: PUSH
35193: LD_INT 1
35195: ST_TO_ADDR
// hc_class := class_apeman ;
35196: LD_ADDR_OWVAR 28
35200: PUSH
35201: LD_INT 12
35203: ST_TO_ADDR
// hc_gallery :=  ;
35204: LD_ADDR_OWVAR 33
35208: PUSH
35209: LD_STRING 
35211: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35212: LD_ADDR_OWVAR 35
35216: PUSH
35217: LD_VAR 0 1
35221: NEG
35222: PPUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 12
35232: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35233: LD_ADDR_OWVAR 31
35237: PUSH
35238: LD_INT 0
35240: PPUSH
35241: LD_INT 3
35243: PPUSH
35244: CALL_OW 12
35248: PUSH
35249: LD_INT 0
35251: PPUSH
35252: LD_INT 3
35254: PPUSH
35255: CALL_OW 12
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
// end ;
35272: LD_VAR 0 2
35276: RET
// export function PrepareTiger ( agressivity ) ; begin
35277: LD_INT 0
35279: PPUSH
// uc_side := 0 ;
35280: LD_ADDR_OWVAR 20
35284: PUSH
35285: LD_INT 0
35287: ST_TO_ADDR
// uc_nation := 0 ;
35288: LD_ADDR_OWVAR 21
35292: PUSH
35293: LD_INT 0
35295: ST_TO_ADDR
// hc_class := class_tiger ;
35296: LD_ADDR_OWVAR 28
35300: PUSH
35301: LD_INT 14
35303: ST_TO_ADDR
// hc_gallery :=  ;
35304: LD_ADDR_OWVAR 33
35308: PUSH
35309: LD_STRING 
35311: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35312: LD_ADDR_OWVAR 35
35316: PUSH
35317: LD_VAR 0 1
35321: NEG
35322: PPUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 12
35332: ST_TO_ADDR
// end ;
35333: LD_VAR 0 2
35337: RET
// export function PrepareEnchidna ( ) ; begin
35338: LD_INT 0
35340: PPUSH
// uc_side := 0 ;
35341: LD_ADDR_OWVAR 20
35345: PUSH
35346: LD_INT 0
35348: ST_TO_ADDR
// uc_nation := 0 ;
35349: LD_ADDR_OWVAR 21
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// hc_class := class_baggie ;
35357: LD_ADDR_OWVAR 28
35361: PUSH
35362: LD_INT 13
35364: ST_TO_ADDR
// hc_gallery :=  ;
35365: LD_ADDR_OWVAR 33
35369: PUSH
35370: LD_STRING 
35372: ST_TO_ADDR
// end ;
35373: LD_VAR 0 1
35377: RET
// export function PrepareFrog ( ) ; begin
35378: LD_INT 0
35380: PPUSH
// uc_side := 0 ;
35381: LD_ADDR_OWVAR 20
35385: PUSH
35386: LD_INT 0
35388: ST_TO_ADDR
// uc_nation := 0 ;
35389: LD_ADDR_OWVAR 21
35393: PUSH
35394: LD_INT 0
35396: ST_TO_ADDR
// hc_class := class_frog ;
35397: LD_ADDR_OWVAR 28
35401: PUSH
35402: LD_INT 19
35404: ST_TO_ADDR
// hc_gallery :=  ;
35405: LD_ADDR_OWVAR 33
35409: PUSH
35410: LD_STRING 
35412: ST_TO_ADDR
// end ;
35413: LD_VAR 0 1
35417: RET
// export function PrepareFish ( ) ; begin
35418: LD_INT 0
35420: PPUSH
// uc_side := 0 ;
35421: LD_ADDR_OWVAR 20
35425: PUSH
35426: LD_INT 0
35428: ST_TO_ADDR
// uc_nation := 0 ;
35429: LD_ADDR_OWVAR 21
35433: PUSH
35434: LD_INT 0
35436: ST_TO_ADDR
// hc_class := class_fish ;
35437: LD_ADDR_OWVAR 28
35441: PUSH
35442: LD_INT 20
35444: ST_TO_ADDR
// hc_gallery :=  ;
35445: LD_ADDR_OWVAR 33
35449: PUSH
35450: LD_STRING 
35452: ST_TO_ADDR
// end ;
35453: LD_VAR 0 1
35457: RET
// export function PrepareBird ( ) ; begin
35458: LD_INT 0
35460: PPUSH
// uc_side := 0 ;
35461: LD_ADDR_OWVAR 20
35465: PUSH
35466: LD_INT 0
35468: ST_TO_ADDR
// uc_nation := 0 ;
35469: LD_ADDR_OWVAR 21
35473: PUSH
35474: LD_INT 0
35476: ST_TO_ADDR
// hc_class := class_phororhacos ;
35477: LD_ADDR_OWVAR 28
35481: PUSH
35482: LD_INT 18
35484: ST_TO_ADDR
// hc_gallery :=  ;
35485: LD_ADDR_OWVAR 33
35489: PUSH
35490: LD_STRING 
35492: ST_TO_ADDR
// end ;
35493: LD_VAR 0 1
35497: RET
// export function PrepareHorse ( ) ; begin
35498: LD_INT 0
35500: PPUSH
// uc_side := 0 ;
35501: LD_ADDR_OWVAR 20
35505: PUSH
35506: LD_INT 0
35508: ST_TO_ADDR
// uc_nation := 0 ;
35509: LD_ADDR_OWVAR 21
35513: PUSH
35514: LD_INT 0
35516: ST_TO_ADDR
// hc_class := class_horse ;
35517: LD_ADDR_OWVAR 28
35521: PUSH
35522: LD_INT 21
35524: ST_TO_ADDR
// hc_gallery :=  ;
35525: LD_ADDR_OWVAR 33
35529: PUSH
35530: LD_STRING 
35532: ST_TO_ADDR
// end ;
35533: LD_VAR 0 1
35537: RET
// export function PrepareMastodont ( ) ; begin
35538: LD_INT 0
35540: PPUSH
// uc_side := 0 ;
35541: LD_ADDR_OWVAR 20
35545: PUSH
35546: LD_INT 0
35548: ST_TO_ADDR
// uc_nation := 0 ;
35549: LD_ADDR_OWVAR 21
35553: PUSH
35554: LD_INT 0
35556: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35557: LD_ADDR_OWVAR 37
35561: PUSH
35562: LD_INT 31
35564: ST_TO_ADDR
// vc_control := control_rider ;
35565: LD_ADDR_OWVAR 38
35569: PUSH
35570: LD_INT 4
35572: ST_TO_ADDR
// end ;
35573: LD_VAR 0 1
35577: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35578: LD_INT 0
35580: PPUSH
35581: PPUSH
35582: PPUSH
// uc_side = 0 ;
35583: LD_ADDR_OWVAR 20
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// uc_nation = 0 ;
35591: LD_ADDR_OWVAR 21
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// InitHc_All ( ) ;
35599: CALL_OW 584
// InitVc ;
35603: CALL_OW 20
// if mastodonts then
35607: LD_VAR 0 6
35611: IFFALSE 35678
// for i = 1 to mastodonts do
35613: LD_ADDR_VAR 0 11
35617: PUSH
35618: DOUBLE
35619: LD_INT 1
35621: DEC
35622: ST_TO_ADDR
35623: LD_VAR 0 6
35627: PUSH
35628: FOR_TO
35629: IFFALSE 35676
// begin vc_chassis := 31 ;
35631: LD_ADDR_OWVAR 37
35635: PUSH
35636: LD_INT 31
35638: ST_TO_ADDR
// vc_control := control_rider ;
35639: LD_ADDR_OWVAR 38
35643: PUSH
35644: LD_INT 4
35646: ST_TO_ADDR
// animal := CreateVehicle ;
35647: LD_ADDR_VAR 0 12
35651: PUSH
35652: CALL_OW 45
35656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35657: LD_VAR 0 12
35661: PPUSH
35662: LD_VAR 0 8
35666: PPUSH
35667: LD_INT 0
35669: PPUSH
35670: CALL 37806 0 3
// end ;
35674: GO 35628
35676: POP
35677: POP
// if horses then
35678: LD_VAR 0 5
35682: IFFALSE 35749
// for i = 1 to horses do
35684: LD_ADDR_VAR 0 11
35688: PUSH
35689: DOUBLE
35690: LD_INT 1
35692: DEC
35693: ST_TO_ADDR
35694: LD_VAR 0 5
35698: PUSH
35699: FOR_TO
35700: IFFALSE 35747
// begin hc_class := 21 ;
35702: LD_ADDR_OWVAR 28
35706: PUSH
35707: LD_INT 21
35709: ST_TO_ADDR
// hc_gallery :=  ;
35710: LD_ADDR_OWVAR 33
35714: PUSH
35715: LD_STRING 
35717: ST_TO_ADDR
// animal := CreateHuman ;
35718: LD_ADDR_VAR 0 12
35722: PUSH
35723: CALL_OW 44
35727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35728: LD_VAR 0 12
35732: PPUSH
35733: LD_VAR 0 8
35737: PPUSH
35738: LD_INT 0
35740: PPUSH
35741: CALL 37806 0 3
// end ;
35745: GO 35699
35747: POP
35748: POP
// if birds then
35749: LD_VAR 0 1
35753: IFFALSE 35820
// for i = 1 to birds do
35755: LD_ADDR_VAR 0 11
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_VAR 0 1
35769: PUSH
35770: FOR_TO
35771: IFFALSE 35818
// begin hc_class = 18 ;
35773: LD_ADDR_OWVAR 28
35777: PUSH
35778: LD_INT 18
35780: ST_TO_ADDR
// hc_gallery =  ;
35781: LD_ADDR_OWVAR 33
35785: PUSH
35786: LD_STRING 
35788: ST_TO_ADDR
// animal := CreateHuman ;
35789: LD_ADDR_VAR 0 12
35793: PUSH
35794: CALL_OW 44
35798: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35799: LD_VAR 0 12
35803: PPUSH
35804: LD_VAR 0 8
35808: PPUSH
35809: LD_INT 0
35811: PPUSH
35812: CALL 37806 0 3
// end ;
35816: GO 35770
35818: POP
35819: POP
// if tigers then
35820: LD_VAR 0 2
35824: IFFALSE 35908
// for i = 1 to tigers do
35826: LD_ADDR_VAR 0 11
35830: PUSH
35831: DOUBLE
35832: LD_INT 1
35834: DEC
35835: ST_TO_ADDR
35836: LD_VAR 0 2
35840: PUSH
35841: FOR_TO
35842: IFFALSE 35906
// begin hc_class = class_tiger ;
35844: LD_ADDR_OWVAR 28
35848: PUSH
35849: LD_INT 14
35851: ST_TO_ADDR
// hc_gallery =  ;
35852: LD_ADDR_OWVAR 33
35856: PUSH
35857: LD_STRING 
35859: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35860: LD_ADDR_OWVAR 35
35864: PUSH
35865: LD_INT 7
35867: NEG
35868: PPUSH
35869: LD_INT 7
35871: PPUSH
35872: CALL_OW 12
35876: ST_TO_ADDR
// animal := CreateHuman ;
35877: LD_ADDR_VAR 0 12
35881: PUSH
35882: CALL_OW 44
35886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35887: LD_VAR 0 12
35891: PPUSH
35892: LD_VAR 0 8
35896: PPUSH
35897: LD_INT 0
35899: PPUSH
35900: CALL 37806 0 3
// end ;
35904: GO 35841
35906: POP
35907: POP
// if apemans then
35908: LD_VAR 0 3
35912: IFFALSE 36035
// for i = 1 to apemans do
35914: LD_ADDR_VAR 0 11
35918: PUSH
35919: DOUBLE
35920: LD_INT 1
35922: DEC
35923: ST_TO_ADDR
35924: LD_VAR 0 3
35928: PUSH
35929: FOR_TO
35930: IFFALSE 36033
// begin hc_class = class_apeman ;
35932: LD_ADDR_OWVAR 28
35936: PUSH
35937: LD_INT 12
35939: ST_TO_ADDR
// hc_gallery =  ;
35940: LD_ADDR_OWVAR 33
35944: PUSH
35945: LD_STRING 
35947: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35948: LD_ADDR_OWVAR 35
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PPUSH
35957: LD_INT 2
35959: PPUSH
35960: CALL_OW 12
35964: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35965: LD_ADDR_OWVAR 31
35969: PUSH
35970: LD_INT 1
35972: PPUSH
35973: LD_INT 3
35975: PPUSH
35976: CALL_OW 12
35980: PUSH
35981: LD_INT 1
35983: PPUSH
35984: LD_INT 3
35986: PPUSH
35987: CALL_OW 12
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: ST_TO_ADDR
// animal := CreateHuman ;
36004: LD_ADDR_VAR 0 12
36008: PUSH
36009: CALL_OW 44
36013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36014: LD_VAR 0 12
36018: PPUSH
36019: LD_VAR 0 8
36023: PPUSH
36024: LD_INT 0
36026: PPUSH
36027: CALL 37806 0 3
// end ;
36031: GO 35929
36033: POP
36034: POP
// if enchidnas then
36035: LD_VAR 0 4
36039: IFFALSE 36106
// for i = 1 to enchidnas do
36041: LD_ADDR_VAR 0 11
36045: PUSH
36046: DOUBLE
36047: LD_INT 1
36049: DEC
36050: ST_TO_ADDR
36051: LD_VAR 0 4
36055: PUSH
36056: FOR_TO
36057: IFFALSE 36104
// begin hc_class = 13 ;
36059: LD_ADDR_OWVAR 28
36063: PUSH
36064: LD_INT 13
36066: ST_TO_ADDR
// hc_gallery =  ;
36067: LD_ADDR_OWVAR 33
36071: PUSH
36072: LD_STRING 
36074: ST_TO_ADDR
// animal := CreateHuman ;
36075: LD_ADDR_VAR 0 12
36079: PUSH
36080: CALL_OW 44
36084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36085: LD_VAR 0 12
36089: PPUSH
36090: LD_VAR 0 8
36094: PPUSH
36095: LD_INT 0
36097: PPUSH
36098: CALL 37806 0 3
// end ;
36102: GO 36056
36104: POP
36105: POP
// if fishes then
36106: LD_VAR 0 7
36110: IFFALSE 36177
// for i = 1 to fishes do
36112: LD_ADDR_VAR 0 11
36116: PUSH
36117: DOUBLE
36118: LD_INT 1
36120: DEC
36121: ST_TO_ADDR
36122: LD_VAR 0 7
36126: PUSH
36127: FOR_TO
36128: IFFALSE 36175
// begin hc_class = 20 ;
36130: LD_ADDR_OWVAR 28
36134: PUSH
36135: LD_INT 20
36137: ST_TO_ADDR
// hc_gallery =  ;
36138: LD_ADDR_OWVAR 33
36142: PUSH
36143: LD_STRING 
36145: ST_TO_ADDR
// animal := CreateHuman ;
36146: LD_ADDR_VAR 0 12
36150: PUSH
36151: CALL_OW 44
36155: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36156: LD_VAR 0 12
36160: PPUSH
36161: LD_VAR 0 9
36165: PPUSH
36166: LD_INT 0
36168: PPUSH
36169: CALL 37806 0 3
// end ;
36173: GO 36127
36175: POP
36176: POP
// end ;
36177: LD_VAR 0 10
36181: RET
// export function WantHeal ( sci , unit ) ; begin
36182: LD_INT 0
36184: PPUSH
// if GetTaskList ( sci ) > 0 then
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 437
36194: PUSH
36195: LD_INT 0
36197: GREATER
36198: IFFALSE 36268
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36200: LD_VAR 0 1
36204: PPUSH
36205: CALL_OW 437
36209: PUSH
36210: LD_INT 1
36212: ARRAY
36213: PUSH
36214: LD_INT 1
36216: ARRAY
36217: PUSH
36218: LD_STRING l
36220: EQUAL
36221: PUSH
36222: LD_VAR 0 1
36226: PPUSH
36227: CALL_OW 437
36231: PUSH
36232: LD_INT 1
36234: ARRAY
36235: PUSH
36236: LD_INT 4
36238: ARRAY
36239: PUSH
36240: LD_VAR 0 2
36244: EQUAL
36245: AND
36246: IFFALSE 36258
// result := true else
36248: LD_ADDR_VAR 0 3
36252: PUSH
36253: LD_INT 1
36255: ST_TO_ADDR
36256: GO 36266
// result := false ;
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_INT 0
36265: ST_TO_ADDR
// end else
36266: GO 36276
// result := false ;
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_INT 0
36275: ST_TO_ADDR
// end ;
36276: LD_VAR 0 3
36280: RET
// export function HealTarget ( sci ) ; begin
36281: LD_INT 0
36283: PPUSH
// if not sci then
36284: LD_VAR 0 1
36288: NOT
36289: IFFALSE 36293
// exit ;
36291: GO 36358
// result := 0 ;
36293: LD_ADDR_VAR 0 2
36297: PUSH
36298: LD_INT 0
36300: ST_TO_ADDR
// if GetTaskList ( sci ) then
36301: LD_VAR 0 1
36305: PPUSH
36306: CALL_OW 437
36310: IFFALSE 36358
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36312: LD_VAR 0 1
36316: PPUSH
36317: CALL_OW 437
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: PUSH
36326: LD_INT 1
36328: ARRAY
36329: PUSH
36330: LD_STRING l
36332: EQUAL
36333: IFFALSE 36358
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36335: LD_ADDR_VAR 0 2
36339: PUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 437
36349: PUSH
36350: LD_INT 1
36352: ARRAY
36353: PUSH
36354: LD_INT 4
36356: ARRAY
36357: ST_TO_ADDR
// end ;
36358: LD_VAR 0 2
36362: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36363: LD_INT 0
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
// if not base_units then
36369: LD_VAR 0 1
36373: NOT
36374: IFFALSE 36378
// exit ;
36376: GO 36465
// result := false ;
36378: LD_ADDR_VAR 0 2
36382: PUSH
36383: LD_INT 0
36385: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36386: LD_ADDR_VAR 0 5
36390: PUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: LD_INT 21
36398: PUSH
36399: LD_INT 3
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PPUSH
36406: CALL_OW 72
36410: ST_TO_ADDR
// if not tmp then
36411: LD_VAR 0 5
36415: NOT
36416: IFFALSE 36420
// exit ;
36418: GO 36465
// for i in tmp do
36420: LD_ADDR_VAR 0 3
36424: PUSH
36425: LD_VAR 0 5
36429: PUSH
36430: FOR_IN
36431: IFFALSE 36463
// begin result := EnemyInRange ( i , 22 ) ;
36433: LD_ADDR_VAR 0 2
36437: PUSH
36438: LD_VAR 0 3
36442: PPUSH
36443: LD_INT 22
36445: PPUSH
36446: CALL 34052 0 2
36450: ST_TO_ADDR
// if result then
36451: LD_VAR 0 2
36455: IFFALSE 36461
// exit ;
36457: POP
36458: POP
36459: GO 36465
// end ;
36461: GO 36430
36463: POP
36464: POP
// end ;
36465: LD_VAR 0 2
36469: RET
// export function FilterByTag ( units , tag ) ; begin
36470: LD_INT 0
36472: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36473: LD_ADDR_VAR 0 3
36477: PUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: LD_INT 120
36485: PUSH
36486: LD_VAR 0 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PPUSH
36495: CALL_OW 72
36499: ST_TO_ADDR
// end ;
36500: LD_VAR 0 3
36504: RET
// export function IsDriver ( un ) ; begin
36505: LD_INT 0
36507: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36508: LD_ADDR_VAR 0 2
36512: PUSH
36513: LD_VAR 0 1
36517: PUSH
36518: LD_INT 55
36520: PUSH
36521: EMPTY
36522: LIST
36523: PPUSH
36524: CALL_OW 69
36528: IN
36529: ST_TO_ADDR
// end ;
36530: LD_VAR 0 2
36534: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36535: LD_INT 0
36537: PPUSH
36538: PPUSH
// list := [ ] ;
36539: LD_ADDR_VAR 0 5
36543: PUSH
36544: EMPTY
36545: ST_TO_ADDR
// case d of 0 :
36546: LD_VAR 0 3
36550: PUSH
36551: LD_INT 0
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36692
36559: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36560: LD_ADDR_VAR 0 5
36564: PUSH
36565: LD_VAR 0 1
36569: PUSH
36570: LD_INT 4
36572: MINUS
36573: PUSH
36574: LD_VAR 0 2
36578: PUSH
36579: LD_INT 4
36581: MINUS
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: PUSH
36591: LD_VAR 0 1
36595: PUSH
36596: LD_INT 3
36598: MINUS
36599: PUSH
36600: LD_VAR 0 2
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 4
36620: PLUS
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_INT 4
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: PUSH
36635: LD_VAR 0 1
36639: PUSH
36640: LD_INT 3
36642: PLUS
36643: PUSH
36644: LD_VAR 0 2
36648: PUSH
36649: LD_INT 3
36651: PLUS
36652: PUSH
36653: LD_INT 5
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: LIST
36660: PUSH
36661: LD_VAR 0 1
36665: PUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_INT 4
36673: PLUS
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// end ; 1 :
36690: GO 37390
36692: LD_INT 1
36694: DOUBLE
36695: EQUAL
36696: IFTRUE 36700
36698: GO 36833
36700: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36701: LD_ADDR_VAR 0 5
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 4
36718: MINUS
36719: PUSH
36720: LD_INT 3
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: PUSH
36728: LD_VAR 0 1
36732: PUSH
36733: LD_INT 3
36735: MINUS
36736: PUSH
36737: LD_VAR 0 2
36741: PUSH
36742: LD_INT 3
36744: MINUS
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PUSH
36754: LD_VAR 0 1
36758: PUSH
36759: LD_INT 4
36761: MINUS
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: PUSH
36776: LD_VAR 0 1
36780: PUSH
36781: LD_VAR 0 2
36785: PUSH
36786: LD_INT 3
36788: PLUS
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: PUSH
36798: LD_VAR 0 1
36802: PUSH
36803: LD_INT 4
36805: PLUS
36806: PUSH
36807: LD_VAR 0 2
36811: PUSH
36812: LD_INT 4
36814: PLUS
36815: PUSH
36816: LD_INT 5
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// end ; 2 :
36831: GO 37390
36833: LD_INT 2
36835: DOUBLE
36836: EQUAL
36837: IFTRUE 36841
36839: GO 36970
36841: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36842: LD_ADDR_VAR 0 5
36846: PUSH
36847: LD_VAR 0 1
36851: PUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_INT 3
36859: MINUS
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: PUSH
36869: LD_VAR 0 1
36873: PUSH
36874: LD_INT 4
36876: PLUS
36877: PUSH
36878: LD_VAR 0 2
36882: PUSH
36883: LD_INT 4
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: LD_VAR 0 1
36895: PUSH
36896: LD_VAR 0 2
36900: PUSH
36901: LD_INT 4
36903: PLUS
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: PUSH
36913: LD_VAR 0 1
36917: PUSH
36918: LD_INT 3
36920: MINUS
36921: PUSH
36922: LD_VAR 0 2
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: PUSH
36935: LD_VAR 0 1
36939: PUSH
36940: LD_INT 4
36942: MINUS
36943: PUSH
36944: LD_VAR 0 2
36948: PUSH
36949: LD_INT 4
36951: MINUS
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// end ; 3 :
36968: GO 37390
36970: LD_INT 3
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 37111
36978: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36979: LD_ADDR_VAR 0 5
36983: PUSH
36984: LD_VAR 0 1
36988: PUSH
36989: LD_INT 3
36991: PLUS
36992: PUSH
36993: LD_VAR 0 2
36997: PUSH
36998: LD_INT 4
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 4
37013: PLUS
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 4
37022: PLUS
37023: PUSH
37024: LD_INT 5
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_VAR 0 1
37036: PUSH
37037: LD_INT 4
37039: MINUS
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_VAR 0 1
37058: PUSH
37059: LD_VAR 0 2
37063: PUSH
37064: LD_INT 4
37066: MINUS
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PUSH
37076: LD_VAR 0 1
37080: PUSH
37081: LD_INT 3
37083: MINUS
37084: PUSH
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 3
37092: MINUS
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// end ; 4 :
37109: GO 37390
37111: LD_INT 4
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37252
37119: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37120: LD_ADDR_VAR 0 5
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_VAR 0 2
37134: PUSH
37135: LD_INT 4
37137: PLUS
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_INT 3
37154: PLUS
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_INT 3
37163: PLUS
37164: PUSH
37165: LD_INT 5
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_INT 4
37180: PLUS
37181: PUSH
37182: LD_VAR 0 2
37186: PUSH
37187: LD_INT 4
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_VAR 0 1
37199: PUSH
37200: LD_VAR 0 2
37204: PUSH
37205: LD_INT 3
37207: MINUS
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: PUSH
37217: LD_VAR 0 1
37221: PUSH
37222: LD_INT 4
37224: MINUS
37225: PUSH
37226: LD_VAR 0 2
37230: PUSH
37231: LD_INT 4
37233: MINUS
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: ST_TO_ADDR
// end ; 5 :
37250: GO 37390
37252: LD_INT 5
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37389
37260: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37261: LD_ADDR_VAR 0 5
37265: PUSH
37266: LD_VAR 0 1
37270: PUSH
37271: LD_INT 4
37273: MINUS
37274: PUSH
37275: LD_VAR 0 2
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: PUSH
37288: LD_VAR 0 1
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 4
37300: MINUS
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: PUSH
37310: LD_VAR 0 1
37314: PUSH
37315: LD_INT 4
37317: PLUS
37318: PUSH
37319: LD_VAR 0 2
37323: PUSH
37324: LD_INT 4
37326: PLUS
37327: PUSH
37328: LD_INT 5
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_INT 3
37343: PLUS
37344: PUSH
37345: LD_VAR 0 2
37349: PUSH
37350: LD_INT 4
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: LD_VAR 0 1
37362: PUSH
37363: LD_VAR 0 2
37367: PUSH
37368: LD_INT 3
37370: PLUS
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// end ; end ;
37387: GO 37390
37389: POP
// result := list ;
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: LD_VAR 0 5
37399: ST_TO_ADDR
// end ;
37400: LD_VAR 0 4
37404: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37410: LD_VAR 0 1
37414: NOT
37415: PUSH
37416: LD_VAR 0 2
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 3
37429: PUSH
37430: LD_INT 4
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: IN
37439: NOT
37440: OR
37441: IFFALSE 37445
// exit ;
37443: GO 37528
// tmp := [ ] ;
37445: LD_ADDR_VAR 0 5
37449: PUSH
37450: EMPTY
37451: ST_TO_ADDR
// for i in units do
37452: LD_ADDR_VAR 0 4
37456: PUSH
37457: LD_VAR 0 1
37461: PUSH
37462: FOR_IN
37463: IFFALSE 37497
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37465: LD_ADDR_VAR 0 5
37469: PUSH
37470: LD_VAR 0 5
37474: PPUSH
37475: LD_VAR 0 4
37479: PPUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: CALL_OW 259
37489: PPUSH
37490: CALL 38888 0 2
37494: ST_TO_ADDR
37495: GO 37462
37497: POP
37498: POP
// if not tmp then
37499: LD_VAR 0 5
37503: NOT
37504: IFFALSE 37508
// exit ;
37506: GO 37528
// result := SortListByListDesc ( units , tmp ) ;
37508: LD_ADDR_VAR 0 3
37512: PUSH
37513: LD_VAR 0 1
37517: PPUSH
37518: LD_VAR 0 5
37522: PPUSH
37523: CALL_OW 77
37527: ST_TO_ADDR
// end ;
37528: LD_VAR 0 3
37532: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37533: LD_INT 0
37535: PPUSH
37536: PPUSH
37537: PPUSH
// result := false ;
37538: LD_ADDR_VAR 0 3
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
// if not building then
37546: LD_VAR 0 2
37550: NOT
37551: IFFALSE 37555
// exit ;
37553: GO 37693
// x := GetX ( building ) ;
37555: LD_ADDR_VAR 0 4
37559: PUSH
37560: LD_VAR 0 2
37564: PPUSH
37565: CALL_OW 250
37569: ST_TO_ADDR
// y := GetY ( building ) ;
37570: LD_ADDR_VAR 0 5
37574: PUSH
37575: LD_VAR 0 2
37579: PPUSH
37580: CALL_OW 251
37584: ST_TO_ADDR
// if not x or not y then
37585: LD_VAR 0 4
37589: NOT
37590: PUSH
37591: LD_VAR 0 5
37595: NOT
37596: OR
37597: IFFALSE 37601
// exit ;
37599: GO 37693
// if GetTaskList ( unit ) then
37601: LD_VAR 0 1
37605: PPUSH
37606: CALL_OW 437
37610: IFFALSE 37693
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37612: LD_STRING e
37614: PUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 437
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: EQUAL
37633: PUSH
37634: LD_VAR 0 4
37638: PUSH
37639: LD_VAR 0 1
37643: PPUSH
37644: CALL_OW 437
37648: PUSH
37649: LD_INT 1
37651: ARRAY
37652: PUSH
37653: LD_INT 2
37655: ARRAY
37656: EQUAL
37657: AND
37658: PUSH
37659: LD_VAR 0 5
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 437
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PUSH
37678: LD_INT 3
37680: ARRAY
37681: EQUAL
37682: AND
37683: IFFALSE 37693
// result := true end ;
37685: LD_ADDR_VAR 0 3
37689: PUSH
37690: LD_INT 1
37692: ST_TO_ADDR
// end ;
37693: LD_VAR 0 3
37697: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37698: LD_INT 0
37700: PPUSH
// result := false ;
37701: LD_ADDR_VAR 0 4
37705: PUSH
37706: LD_INT 0
37708: ST_TO_ADDR
// if GetTaskList ( unit ) then
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 437
37718: IFFALSE 37801
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37720: LD_STRING M
37722: PUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL_OW 437
37732: PUSH
37733: LD_INT 1
37735: ARRAY
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: EQUAL
37741: PUSH
37742: LD_VAR 0 2
37746: PUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: CALL_OW 437
37756: PUSH
37757: LD_INT 1
37759: ARRAY
37760: PUSH
37761: LD_INT 2
37763: ARRAY
37764: EQUAL
37765: AND
37766: PUSH
37767: LD_VAR 0 3
37771: PUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 437
37781: PUSH
37782: LD_INT 1
37784: ARRAY
37785: PUSH
37786: LD_INT 3
37788: ARRAY
37789: EQUAL
37790: AND
37791: IFFALSE 37801
// result := true ;
37793: LD_ADDR_VAR 0 4
37797: PUSH
37798: LD_INT 1
37800: ST_TO_ADDR
// end ; end ;
37801: LD_VAR 0 4
37805: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37806: LD_INT 0
37808: PPUSH
37809: PPUSH
37810: PPUSH
37811: PPUSH
// if not unit or not area then
37812: LD_VAR 0 1
37816: NOT
37817: PUSH
37818: LD_VAR 0 2
37822: NOT
37823: OR
37824: IFFALSE 37828
// exit ;
37826: GO 37991
// tmp := AreaToList ( area , i ) ;
37828: LD_ADDR_VAR 0 6
37832: PUSH
37833: LD_VAR 0 2
37837: PPUSH
37838: LD_VAR 0 5
37842: PPUSH
37843: CALL_OW 517
37847: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37848: LD_ADDR_VAR 0 5
37852: PUSH
37853: DOUBLE
37854: LD_INT 1
37856: DEC
37857: ST_TO_ADDR
37858: LD_VAR 0 6
37862: PUSH
37863: LD_INT 1
37865: ARRAY
37866: PUSH
37867: FOR_TO
37868: IFFALSE 37989
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37870: LD_ADDR_VAR 0 7
37874: PUSH
37875: LD_VAR 0 6
37879: PUSH
37880: LD_INT 1
37882: ARRAY
37883: PUSH
37884: LD_VAR 0 5
37888: ARRAY
37889: PUSH
37890: LD_VAR 0 6
37894: PUSH
37895: LD_INT 2
37897: ARRAY
37898: PUSH
37899: LD_VAR 0 5
37903: ARRAY
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37909: LD_INT 92
37911: PUSH
37912: LD_VAR 0 7
37916: PUSH
37917: LD_INT 1
37919: ARRAY
37920: PUSH
37921: LD_VAR 0 7
37925: PUSH
37926: LD_INT 2
37928: ARRAY
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: PPUSH
37939: CALL_OW 69
37943: PUSH
37944: LD_INT 0
37946: EQUAL
37947: IFFALSE 37987
// begin PlaceUnitArea ( unit , area , mode ) ;
37949: LD_VAR 0 1
37953: PPUSH
37954: LD_VAR 0 2
37958: PPUSH
37959: LD_VAR 0 3
37963: PPUSH
37964: CALL_OW 49
// result := IsPlaced ( unit ) ;
37968: LD_ADDR_VAR 0 4
37972: PUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 305
37982: ST_TO_ADDR
// exit ;
37983: POP
37984: POP
37985: GO 37991
// end ; end ;
37987: GO 37867
37989: POP
37990: POP
// end ;
37991: LD_VAR 0 4
37995: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37996: LD_INT 0
37998: PPUSH
37999: PPUSH
38000: PPUSH
// if not side or side > 8 then
38001: LD_VAR 0 1
38005: NOT
38006: PUSH
38007: LD_VAR 0 1
38011: PUSH
38012: LD_INT 8
38014: GREATER
38015: OR
38016: IFFALSE 38020
// exit ;
38018: GO 38207
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38020: LD_ADDR_VAR 0 4
38024: PUSH
38025: LD_INT 22
38027: PUSH
38028: LD_VAR 0 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 21
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PPUSH
38051: CALL_OW 69
38055: ST_TO_ADDR
// if not tmp then
38056: LD_VAR 0 4
38060: NOT
38061: IFFALSE 38065
// exit ;
38063: GO 38207
// enable_addtolog := true ;
38065: LD_ADDR_OWVAR 81
38069: PUSH
38070: LD_INT 1
38072: ST_TO_ADDR
// AddToLog ( [ ) ;
38073: LD_STRING [
38075: PPUSH
38076: CALL_OW 561
// for i in tmp do
38080: LD_ADDR_VAR 0 3
38084: PUSH
38085: LD_VAR 0 4
38089: PUSH
38090: FOR_IN
38091: IFFALSE 38198
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38093: LD_STRING [
38095: PUSH
38096: LD_VAR 0 3
38100: PPUSH
38101: CALL_OW 266
38105: STR
38106: PUSH
38107: LD_STRING , 
38109: STR
38110: PUSH
38111: LD_VAR 0 3
38115: PPUSH
38116: CALL_OW 250
38120: STR
38121: PUSH
38122: LD_STRING , 
38124: STR
38125: PUSH
38126: LD_VAR 0 3
38130: PPUSH
38131: CALL_OW 251
38135: STR
38136: PUSH
38137: LD_STRING , 
38139: STR
38140: PUSH
38141: LD_VAR 0 3
38145: PPUSH
38146: CALL_OW 254
38150: STR
38151: PUSH
38152: LD_STRING , 
38154: STR
38155: PUSH
38156: LD_VAR 0 3
38160: PPUSH
38161: LD_INT 1
38163: PPUSH
38164: CALL_OW 268
38168: STR
38169: PUSH
38170: LD_STRING , 
38172: STR
38173: PUSH
38174: LD_VAR 0 3
38178: PPUSH
38179: LD_INT 2
38181: PPUSH
38182: CALL_OW 268
38186: STR
38187: PUSH
38188: LD_STRING ],
38190: STR
38191: PPUSH
38192: CALL_OW 561
// end ;
38196: GO 38090
38198: POP
38199: POP
// AddToLog ( ]; ) ;
38200: LD_STRING ];
38202: PPUSH
38203: CALL_OW 561
// end ;
38207: LD_VAR 0 2
38211: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38212: LD_INT 0
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
// if not area or not rate or not max then
38219: LD_VAR 0 1
38223: NOT
38224: PUSH
38225: LD_VAR 0 2
38229: NOT
38230: OR
38231: PUSH
38232: LD_VAR 0 4
38236: NOT
38237: OR
38238: IFFALSE 38242
// exit ;
38240: GO 38431
// while 1 do
38242: LD_INT 1
38244: IFFALSE 38431
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38246: LD_ADDR_VAR 0 9
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_INT 1
38258: PPUSH
38259: CALL_OW 287
38263: PUSH
38264: LD_INT 10
38266: MUL
38267: ST_TO_ADDR
// r := rate / 10 ;
38268: LD_ADDR_VAR 0 7
38272: PUSH
38273: LD_VAR 0 2
38277: PUSH
38278: LD_INT 10
38280: DIVREAL
38281: ST_TO_ADDR
// time := 1 1$00 ;
38282: LD_ADDR_VAR 0 8
38286: PUSH
38287: LD_INT 2100
38289: ST_TO_ADDR
// if amount < min then
38290: LD_VAR 0 9
38294: PUSH
38295: LD_VAR 0 3
38299: LESS
38300: IFFALSE 38318
// r := r * 2 else
38302: LD_ADDR_VAR 0 7
38306: PUSH
38307: LD_VAR 0 7
38311: PUSH
38312: LD_INT 2
38314: MUL
38315: ST_TO_ADDR
38316: GO 38344
// if amount > max then
38318: LD_VAR 0 9
38322: PUSH
38323: LD_VAR 0 4
38327: GREATER
38328: IFFALSE 38344
// r := r / 2 ;
38330: LD_ADDR_VAR 0 7
38334: PUSH
38335: LD_VAR 0 7
38339: PUSH
38340: LD_INT 2
38342: DIVREAL
38343: ST_TO_ADDR
// time := time / r ;
38344: LD_ADDR_VAR 0 8
38348: PUSH
38349: LD_VAR 0 8
38353: PUSH
38354: LD_VAR 0 7
38358: DIVREAL
38359: ST_TO_ADDR
// if time < 0 then
38360: LD_VAR 0 8
38364: PUSH
38365: LD_INT 0
38367: LESS
38368: IFFALSE 38385
// time := time * - 1 ;
38370: LD_ADDR_VAR 0 8
38374: PUSH
38375: LD_VAR 0 8
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: MUL
38384: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38385: LD_VAR 0 8
38389: PUSH
38390: LD_INT 35
38392: PPUSH
38393: LD_INT 875
38395: PPUSH
38396: CALL_OW 12
38400: PLUS
38401: PPUSH
38402: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38406: LD_INT 1
38408: PPUSH
38409: LD_INT 5
38411: PPUSH
38412: CALL_OW 12
38416: PPUSH
38417: LD_VAR 0 1
38421: PPUSH
38422: LD_INT 1
38424: PPUSH
38425: CALL_OW 55
// end ;
38429: GO 38242
// end ;
38431: LD_VAR 0 5
38435: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38436: LD_INT 0
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
// if not turrets or not factories then
38446: LD_VAR 0 1
38450: NOT
38451: PUSH
38452: LD_VAR 0 2
38456: NOT
38457: OR
38458: IFFALSE 38462
// exit ;
38460: GO 38769
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38462: LD_ADDR_VAR 0 10
38466: PUSH
38467: LD_INT 5
38469: PUSH
38470: LD_INT 6
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 24
38504: PUSH
38505: LD_INT 25
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 23
38514: PUSH
38515: LD_INT 27
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 42
38528: PUSH
38529: LD_INT 43
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 44
38538: PUSH
38539: LD_INT 46
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 45
38548: PUSH
38549: LD_INT 47
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: ST_TO_ADDR
// result := [ ] ;
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: EMPTY
38572: ST_TO_ADDR
// for i in turrets do
38573: LD_ADDR_VAR 0 4
38577: PUSH
38578: LD_VAR 0 1
38582: PUSH
38583: FOR_IN
38584: IFFALSE 38767
// begin nat := GetNation ( i ) ;
38586: LD_ADDR_VAR 0 7
38590: PUSH
38591: LD_VAR 0 4
38595: PPUSH
38596: CALL_OW 248
38600: ST_TO_ADDR
// weapon := 0 ;
38601: LD_ADDR_VAR 0 8
38605: PUSH
38606: LD_INT 0
38608: ST_TO_ADDR
// if not nat then
38609: LD_VAR 0 7
38613: NOT
38614: IFFALSE 38618
// continue ;
38616: GO 38583
// for j in list [ nat ] do
38618: LD_ADDR_VAR 0 5
38622: PUSH
38623: LD_VAR 0 10
38627: PUSH
38628: LD_VAR 0 7
38632: ARRAY
38633: PUSH
38634: FOR_IN
38635: IFFALSE 38676
// if GetBWeapon ( i ) = j [ 1 ] then
38637: LD_VAR 0 4
38641: PPUSH
38642: CALL_OW 269
38646: PUSH
38647: LD_VAR 0 5
38651: PUSH
38652: LD_INT 1
38654: ARRAY
38655: EQUAL
38656: IFFALSE 38674
// begin weapon := j [ 2 ] ;
38658: LD_ADDR_VAR 0 8
38662: PUSH
38663: LD_VAR 0 5
38667: PUSH
38668: LD_INT 2
38670: ARRAY
38671: ST_TO_ADDR
// break ;
38672: GO 38676
// end ;
38674: GO 38634
38676: POP
38677: POP
// if not weapon then
38678: LD_VAR 0 8
38682: NOT
38683: IFFALSE 38687
// continue ;
38685: GO 38583
// for k in factories do
38687: LD_ADDR_VAR 0 6
38691: PUSH
38692: LD_VAR 0 2
38696: PUSH
38697: FOR_IN
38698: IFFALSE 38763
// begin weapons := AvailableWeaponList ( k ) ;
38700: LD_ADDR_VAR 0 9
38704: PUSH
38705: LD_VAR 0 6
38709: PPUSH
38710: CALL_OW 478
38714: ST_TO_ADDR
// if not weapons then
38715: LD_VAR 0 9
38719: NOT
38720: IFFALSE 38724
// continue ;
38722: GO 38697
// if weapon in weapons then
38724: LD_VAR 0 8
38728: PUSH
38729: LD_VAR 0 9
38733: IN
38734: IFFALSE 38761
// begin result := [ i , weapon ] ;
38736: LD_ADDR_VAR 0 3
38740: PUSH
38741: LD_VAR 0 4
38745: PUSH
38746: LD_VAR 0 8
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// exit ;
38755: POP
38756: POP
38757: POP
38758: POP
38759: GO 38769
// end ; end ;
38761: GO 38697
38763: POP
38764: POP
// end ;
38765: GO 38583
38767: POP
38768: POP
// end ;
38769: LD_VAR 0 3
38773: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38774: LD_INT 0
38776: PPUSH
// if not side or side > 8 then
38777: LD_VAR 0 3
38781: NOT
38782: PUSH
38783: LD_VAR 0 3
38787: PUSH
38788: LD_INT 8
38790: GREATER
38791: OR
38792: IFFALSE 38796
// exit ;
38794: GO 38855
// if not range then
38796: LD_VAR 0 4
38800: NOT
38801: IFFALSE 38812
// range := - 12 ;
38803: LD_ADDR_VAR 0 4
38807: PUSH
38808: LD_INT 12
38810: NEG
38811: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38812: LD_VAR 0 1
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_VAR 0 3
38826: PPUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38836: LD_VAR 0 1
38840: PPUSH
38841: LD_VAR 0 2
38845: PPUSH
38846: LD_VAR 0 3
38850: PPUSH
38851: CALL_OW 331
// end ;
38855: LD_VAR 0 5
38859: RET
// export function Video ( mode ) ; begin
38860: LD_INT 0
38862: PPUSH
// ingame_video = mode ;
38863: LD_ADDR_OWVAR 52
38867: PUSH
38868: LD_VAR 0 1
38872: ST_TO_ADDR
// interface_hidden = mode ;
38873: LD_ADDR_OWVAR 54
38877: PUSH
38878: LD_VAR 0 1
38882: ST_TO_ADDR
// end ;
38883: LD_VAR 0 2
38887: RET
// export function Join ( array , element ) ; begin
38888: LD_INT 0
38890: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38891: LD_ADDR_VAR 0 3
38895: PUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_INT 1
38908: PLUS
38909: PPUSH
38910: LD_VAR 0 2
38914: PPUSH
38915: CALL_OW 1
38919: ST_TO_ADDR
// end ;
38920: LD_VAR 0 3
38924: RET
// export function JoinUnion ( array , element ) ; begin
38925: LD_INT 0
38927: PPUSH
// result := array union element ;
38928: LD_ADDR_VAR 0 3
38932: PUSH
38933: LD_VAR 0 1
38937: PUSH
38938: LD_VAR 0 2
38942: UNION
38943: ST_TO_ADDR
// end ;
38944: LD_VAR 0 3
38948: RET
// export function GetBehemoths ( side ) ; begin
38949: LD_INT 0
38951: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38952: LD_ADDR_VAR 0 2
38956: PUSH
38957: LD_INT 22
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 31
38971: PUSH
38972: LD_INT 25
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PPUSH
38983: CALL_OW 69
38987: ST_TO_ADDR
// end ;
38988: LD_VAR 0 2
38992: RET
// export function Shuffle ( array ) ; var i , index ; begin
38993: LD_INT 0
38995: PPUSH
38996: PPUSH
38997: PPUSH
// result := [ ] ;
38998: LD_ADDR_VAR 0 2
39002: PUSH
39003: EMPTY
39004: ST_TO_ADDR
// if not array then
39005: LD_VAR 0 1
39009: NOT
39010: IFFALSE 39014
// exit ;
39012: GO 39113
// Randomize ;
39014: CALL_OW 10
// for i = array downto 1 do
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: DOUBLE
39024: LD_VAR 0 1
39028: INC
39029: ST_TO_ADDR
39030: LD_INT 1
39032: PUSH
39033: FOR_DOWNTO
39034: IFFALSE 39111
// begin index := rand ( 1 , array ) ;
39036: LD_ADDR_VAR 0 4
39040: PUSH
39041: LD_INT 1
39043: PPUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 12
39053: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39054: LD_ADDR_VAR 0 2
39058: PUSH
39059: LD_VAR 0 2
39063: PPUSH
39064: LD_VAR 0 2
39068: PUSH
39069: LD_INT 1
39071: PLUS
39072: PPUSH
39073: LD_VAR 0 1
39077: PUSH
39078: LD_VAR 0 4
39082: ARRAY
39083: PPUSH
39084: CALL_OW 2
39088: ST_TO_ADDR
// array := Delete ( array , index ) ;
39089: LD_ADDR_VAR 0 1
39093: PUSH
39094: LD_VAR 0 1
39098: PPUSH
39099: LD_VAR 0 4
39103: PPUSH
39104: CALL_OW 3
39108: ST_TO_ADDR
// end ;
39109: GO 39033
39111: POP
39112: POP
// end ;
39113: LD_VAR 0 2
39117: RET
// export function GetBaseMaterials ( base ) ; begin
39118: LD_INT 0
39120: PPUSH
// result := [ 0 , 0 , 0 ] ;
39121: LD_ADDR_VAR 0 2
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// if not base then
39140: LD_VAR 0 1
39144: NOT
39145: IFFALSE 39149
// exit ;
39147: GO 39198
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39149: LD_ADDR_VAR 0 2
39153: PUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: LD_INT 1
39161: PPUSH
39162: CALL_OW 275
39166: PUSH
39167: LD_VAR 0 1
39171: PPUSH
39172: LD_INT 2
39174: PPUSH
39175: CALL_OW 275
39179: PUSH
39180: LD_VAR 0 1
39184: PPUSH
39185: LD_INT 3
39187: PPUSH
39188: CALL_OW 275
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// end ;
39198: LD_VAR 0 2
39202: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39203: LD_INT 0
39205: PPUSH
39206: PPUSH
// result := array ;
39207: LD_ADDR_VAR 0 3
39211: PUSH
39212: LD_VAR 0 1
39216: ST_TO_ADDR
// if size >= result then
39217: LD_VAR 0 2
39221: PUSH
39222: LD_VAR 0 3
39226: GREATEREQUAL
39227: IFFALSE 39231
// exit ;
39229: GO 39281
// if size then
39231: LD_VAR 0 2
39235: IFFALSE 39281
// for i := array downto size do
39237: LD_ADDR_VAR 0 4
39241: PUSH
39242: DOUBLE
39243: LD_VAR 0 1
39247: INC
39248: ST_TO_ADDR
39249: LD_VAR 0 2
39253: PUSH
39254: FOR_DOWNTO
39255: IFFALSE 39279
// result := Delete ( result , result ) ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_VAR 0 3
39266: PPUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: CALL_OW 3
39276: ST_TO_ADDR
39277: GO 39254
39279: POP
39280: POP
// end ;
39281: LD_VAR 0 3
39285: RET
// export function ComExit ( unit ) ; var tmp ; begin
39286: LD_INT 0
39288: PPUSH
39289: PPUSH
// if not IsInUnit ( unit ) then
39290: LD_VAR 0 1
39294: PPUSH
39295: CALL_OW 310
39299: NOT
39300: IFFALSE 39304
// exit ;
39302: GO 39364
// tmp := IsInUnit ( unit ) ;
39304: LD_ADDR_VAR 0 3
39308: PUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: CALL_OW 310
39318: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39319: LD_VAR 0 3
39323: PPUSH
39324: CALL_OW 247
39328: PUSH
39329: LD_INT 2
39331: EQUAL
39332: IFFALSE 39345
// ComExitVehicle ( unit ) else
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 121
39343: GO 39354
// ComExitBuilding ( unit ) ;
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL_OW 122
// result := tmp ;
39354: LD_ADDR_VAR 0 2
39358: PUSH
39359: LD_VAR 0 3
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 2
39368: RET
// export function ComExitAll ( units ) ; var i ; begin
39369: LD_INT 0
39371: PPUSH
39372: PPUSH
// if not units then
39373: LD_VAR 0 1
39377: NOT
39378: IFFALSE 39382
// exit ;
39380: GO 39408
// for i in units do
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_VAR 0 1
39391: PUSH
39392: FOR_IN
39393: IFFALSE 39406
// ComExit ( i ) ;
39395: LD_VAR 0 3
39399: PPUSH
39400: CALL 39286 0 1
39404: GO 39392
39406: POP
39407: POP
// end ;
39408: LD_VAR 0 2
39412: RET
// export function ResetHc ; begin
39413: LD_INT 0
39415: PPUSH
// InitHc ;
39416: CALL_OW 19
// hc_importance := 0 ;
39420: LD_ADDR_OWVAR 32
39424: PUSH
39425: LD_INT 0
39427: ST_TO_ADDR
// end ;
39428: LD_VAR 0 1
39432: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39433: LD_INT 0
39435: PPUSH
39436: PPUSH
39437: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39438: LD_ADDR_VAR 0 6
39442: PUSH
39443: LD_VAR 0 1
39447: PUSH
39448: LD_VAR 0 3
39452: PLUS
39453: PUSH
39454: LD_INT 2
39456: DIV
39457: ST_TO_ADDR
// if _x < 0 then
39458: LD_VAR 0 6
39462: PUSH
39463: LD_INT 0
39465: LESS
39466: IFFALSE 39483
// _x := _x * - 1 ;
39468: LD_ADDR_VAR 0 6
39472: PUSH
39473: LD_VAR 0 6
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: MUL
39482: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39483: LD_ADDR_VAR 0 7
39487: PUSH
39488: LD_VAR 0 2
39492: PUSH
39493: LD_VAR 0 4
39497: PLUS
39498: PUSH
39499: LD_INT 2
39501: DIV
39502: ST_TO_ADDR
// if _y < 0 then
39503: LD_VAR 0 7
39507: PUSH
39508: LD_INT 0
39510: LESS
39511: IFFALSE 39528
// _y := _y * - 1 ;
39513: LD_ADDR_VAR 0 7
39517: PUSH
39518: LD_VAR 0 7
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: MUL
39527: ST_TO_ADDR
// result := [ _x , _y ] ;
39528: LD_ADDR_VAR 0 5
39532: PUSH
39533: LD_VAR 0 6
39537: PUSH
39538: LD_VAR 0 7
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: ST_TO_ADDR
// end ;
39547: LD_VAR 0 5
39551: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
// task := GetTaskList ( unit ) ;
39558: LD_ADDR_VAR 0 7
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 437
39572: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39573: LD_VAR 0 7
39577: NOT
39578: PUSH
39579: LD_VAR 0 1
39583: PPUSH
39584: LD_VAR 0 2
39588: PPUSH
39589: CALL_OW 308
39593: NOT
39594: AND
39595: IFFALSE 39599
// exit ;
39597: GO 39717
// if IsInArea ( unit , area ) then
39599: LD_VAR 0 1
39603: PPUSH
39604: LD_VAR 0 2
39608: PPUSH
39609: CALL_OW 308
39613: IFFALSE 39631
// begin ComMoveToArea ( unit , goAway ) ;
39615: LD_VAR 0 1
39619: PPUSH
39620: LD_VAR 0 3
39624: PPUSH
39625: CALL_OW 113
// exit ;
39629: GO 39717
// end ; if task [ 1 ] [ 1 ] <> M then
39631: LD_VAR 0 7
39635: PUSH
39636: LD_INT 1
39638: ARRAY
39639: PUSH
39640: LD_INT 1
39642: ARRAY
39643: PUSH
39644: LD_STRING M
39646: NONEQUAL
39647: IFFALSE 39651
// exit ;
39649: GO 39717
// x := task [ 1 ] [ 2 ] ;
39651: LD_ADDR_VAR 0 5
39655: PUSH
39656: LD_VAR 0 7
39660: PUSH
39661: LD_INT 1
39663: ARRAY
39664: PUSH
39665: LD_INT 2
39667: ARRAY
39668: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39669: LD_ADDR_VAR 0 6
39673: PUSH
39674: LD_VAR 0 7
39678: PUSH
39679: LD_INT 1
39681: ARRAY
39682: PUSH
39683: LD_INT 3
39685: ARRAY
39686: ST_TO_ADDR
// if InArea ( x , y , area ) then
39687: LD_VAR 0 5
39691: PPUSH
39692: LD_VAR 0 6
39696: PPUSH
39697: LD_VAR 0 2
39701: PPUSH
39702: CALL_OW 309
39706: IFFALSE 39717
// ComStop ( unit ) ;
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 141
// end ;
39717: LD_VAR 0 4
39721: RET
// export function Abs ( value ) ; begin
39722: LD_INT 0
39724: PPUSH
// result := value ;
39725: LD_ADDR_VAR 0 2
39729: PUSH
39730: LD_VAR 0 1
39734: ST_TO_ADDR
// if value < 0 then
39735: LD_VAR 0 1
39739: PUSH
39740: LD_INT 0
39742: LESS
39743: IFFALSE 39760
// result := value * - 1 ;
39745: LD_ADDR_VAR 0 2
39749: PUSH
39750: LD_VAR 0 1
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: MUL
39759: ST_TO_ADDR
// end ;
39760: LD_VAR 0 2
39764: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39765: LD_INT 0
39767: PPUSH
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
39773: PPUSH
39774: PPUSH
// if not unit or not building then
39775: LD_VAR 0 1
39779: NOT
39780: PUSH
39781: LD_VAR 0 2
39785: NOT
39786: OR
39787: IFFALSE 39791
// exit ;
39789: GO 40017
// x := GetX ( building ) ;
39791: LD_ADDR_VAR 0 4
39795: PUSH
39796: LD_VAR 0 2
39800: PPUSH
39801: CALL_OW 250
39805: ST_TO_ADDR
// y := GetY ( building ) ;
39806: LD_ADDR_VAR 0 6
39810: PUSH
39811: LD_VAR 0 2
39815: PPUSH
39816: CALL_OW 251
39820: ST_TO_ADDR
// d := GetDir ( building ) ;
39821: LD_ADDR_VAR 0 8
39825: PUSH
39826: LD_VAR 0 2
39830: PPUSH
39831: CALL_OW 254
39835: ST_TO_ADDR
// r := 4 ;
39836: LD_ADDR_VAR 0 9
39840: PUSH
39841: LD_INT 4
39843: ST_TO_ADDR
// for i := 1 to 5 do
39844: LD_ADDR_VAR 0 10
39848: PUSH
39849: DOUBLE
39850: LD_INT 1
39852: DEC
39853: ST_TO_ADDR
39854: LD_INT 5
39856: PUSH
39857: FOR_TO
39858: IFFALSE 40015
// begin _x := ShiftX ( x , d , r + i ) ;
39860: LD_ADDR_VAR 0 5
39864: PUSH
39865: LD_VAR 0 4
39869: PPUSH
39870: LD_VAR 0 8
39874: PPUSH
39875: LD_VAR 0 9
39879: PUSH
39880: LD_VAR 0 10
39884: PLUS
39885: PPUSH
39886: CALL_OW 272
39890: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39891: LD_ADDR_VAR 0 7
39895: PUSH
39896: LD_VAR 0 6
39900: PPUSH
39901: LD_VAR 0 8
39905: PPUSH
39906: LD_VAR 0 9
39910: PUSH
39911: LD_VAR 0 10
39915: PLUS
39916: PPUSH
39917: CALL_OW 273
39921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39922: LD_VAR 0 5
39926: PPUSH
39927: LD_VAR 0 7
39931: PPUSH
39932: CALL_OW 488
39936: PUSH
39937: LD_VAR 0 5
39941: PPUSH
39942: LD_VAR 0 7
39946: PPUSH
39947: CALL_OW 428
39951: PPUSH
39952: CALL_OW 247
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: IN
39967: NOT
39968: AND
39969: IFFALSE 40013
// begin ComMoveXY ( unit , _x , _y ) ;
39971: LD_VAR 0 1
39975: PPUSH
39976: LD_VAR 0 5
39980: PPUSH
39981: LD_VAR 0 7
39985: PPUSH
39986: CALL_OW 111
// result := [ _x , _y ] ;
39990: LD_ADDR_VAR 0 3
39994: PUSH
39995: LD_VAR 0 5
39999: PUSH
40000: LD_VAR 0 7
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// exit ;
40009: POP
40010: POP
40011: GO 40017
// end ; end ;
40013: GO 39857
40015: POP
40016: POP
// end ;
40017: LD_VAR 0 3
40021: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40022: LD_INT 0
40024: PPUSH
40025: PPUSH
40026: PPUSH
// result := 0 ;
40027: LD_ADDR_VAR 0 3
40031: PUSH
40032: LD_INT 0
40034: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40035: LD_VAR 0 1
40039: PUSH
40040: LD_INT 0
40042: LESS
40043: PUSH
40044: LD_VAR 0 1
40048: PUSH
40049: LD_INT 8
40051: GREATER
40052: OR
40053: PUSH
40054: LD_VAR 0 2
40058: PUSH
40059: LD_INT 0
40061: LESS
40062: OR
40063: PUSH
40064: LD_VAR 0 2
40068: PUSH
40069: LD_INT 8
40071: GREATER
40072: OR
40073: IFFALSE 40077
// exit ;
40075: GO 40152
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40077: LD_ADDR_VAR 0 4
40081: PUSH
40082: LD_INT 22
40084: PUSH
40085: LD_VAR 0 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PPUSH
40094: CALL_OW 69
40098: PUSH
40099: FOR_IN
40100: IFFALSE 40150
// begin un := UnitShoot ( i ) ;
40102: LD_ADDR_VAR 0 5
40106: PUSH
40107: LD_VAR 0 4
40111: PPUSH
40112: CALL_OW 504
40116: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40117: LD_VAR 0 5
40121: PPUSH
40122: CALL_OW 255
40126: PUSH
40127: LD_VAR 0 1
40131: EQUAL
40132: IFFALSE 40148
// begin result := un ;
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: LD_VAR 0 5
40143: ST_TO_ADDR
// exit ;
40144: POP
40145: POP
40146: GO 40152
// end ; end ;
40148: GO 40099
40150: POP
40151: POP
// end ;
40152: LD_VAR 0 3
40156: RET
// export function GetCargoBay ( units ) ; begin
40157: LD_INT 0
40159: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40160: LD_ADDR_VAR 0 2
40164: PUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 34
40175: PUSH
40176: LD_INT 12
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 34
40185: PUSH
40186: LD_INT 51
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 34
40195: PUSH
40196: LD_INT 32
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 34
40205: PUSH
40206: LD_INT 89
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: PPUSH
40220: CALL_OW 72
40224: ST_TO_ADDR
// end ;
40225: LD_VAR 0 2
40229: RET
// export function Negate ( value ) ; begin
40230: LD_INT 0
40232: PPUSH
// result := not value ;
40233: LD_ADDR_VAR 0 2
40237: PUSH
40238: LD_VAR 0 1
40242: NOT
40243: ST_TO_ADDR
// end ;
40244: LD_VAR 0 2
40248: RET
// export function Inc ( value ) ; begin
40249: LD_INT 0
40251: PPUSH
// result := value + 1 ;
40252: LD_ADDR_VAR 0 2
40256: PUSH
40257: LD_VAR 0 1
40261: PUSH
40262: LD_INT 1
40264: PLUS
40265: ST_TO_ADDR
// end ;
40266: LD_VAR 0 2
40270: RET
// export function Dec ( value ) ; begin
40271: LD_INT 0
40273: PPUSH
// result := value - 1 ;
40274: LD_ADDR_VAR 0 2
40278: PUSH
40279: LD_VAR 0 1
40283: PUSH
40284: LD_INT 1
40286: MINUS
40287: ST_TO_ADDR
// end ;
40288: LD_VAR 0 2
40292: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40293: LD_INT 0
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40303: LD_VAR 0 1
40307: PPUSH
40308: LD_VAR 0 2
40312: PPUSH
40313: CALL_OW 488
40317: NOT
40318: PUSH
40319: LD_VAR 0 3
40323: PPUSH
40324: LD_VAR 0 4
40328: PPUSH
40329: CALL_OW 488
40333: NOT
40334: OR
40335: IFFALSE 40348
// begin result := - 1 ;
40337: LD_ADDR_VAR 0 5
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: ST_TO_ADDR
// exit ;
40346: GO 40583
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40348: LD_ADDR_VAR 0 12
40352: PUSH
40353: LD_VAR 0 1
40357: PPUSH
40358: LD_VAR 0 2
40362: PPUSH
40363: LD_VAR 0 3
40367: PPUSH
40368: LD_VAR 0 4
40372: PPUSH
40373: CALL 39433 0 4
40377: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40378: LD_ADDR_VAR 0 11
40382: PUSH
40383: LD_VAR 0 1
40387: PPUSH
40388: LD_VAR 0 2
40392: PPUSH
40393: LD_VAR 0 12
40397: PUSH
40398: LD_INT 1
40400: ARRAY
40401: PPUSH
40402: LD_VAR 0 12
40406: PUSH
40407: LD_INT 2
40409: ARRAY
40410: PPUSH
40411: CALL_OW 298
40415: ST_TO_ADDR
// distance := 9999 ;
40416: LD_ADDR_VAR 0 10
40420: PUSH
40421: LD_INT 9999
40423: ST_TO_ADDR
// for i := 0 to 5 do
40424: LD_ADDR_VAR 0 6
40428: PUSH
40429: DOUBLE
40430: LD_INT 0
40432: DEC
40433: ST_TO_ADDR
40434: LD_INT 5
40436: PUSH
40437: FOR_TO
40438: IFFALSE 40581
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40440: LD_ADDR_VAR 0 7
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_VAR 0 6
40454: PPUSH
40455: LD_VAR 0 11
40459: PPUSH
40460: CALL_OW 272
40464: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40465: LD_ADDR_VAR 0 8
40469: PUSH
40470: LD_VAR 0 2
40474: PPUSH
40475: LD_VAR 0 6
40479: PPUSH
40480: LD_VAR 0 11
40484: PPUSH
40485: CALL_OW 273
40489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40490: LD_VAR 0 7
40494: PPUSH
40495: LD_VAR 0 8
40499: PPUSH
40500: CALL_OW 488
40504: NOT
40505: IFFALSE 40509
// continue ;
40507: GO 40437
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40509: LD_ADDR_VAR 0 9
40513: PUSH
40514: LD_VAR 0 12
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: PPUSH
40523: LD_VAR 0 12
40527: PUSH
40528: LD_INT 2
40530: ARRAY
40531: PPUSH
40532: LD_VAR 0 7
40536: PPUSH
40537: LD_VAR 0 8
40541: PPUSH
40542: CALL_OW 298
40546: ST_TO_ADDR
// if tmp < distance then
40547: LD_VAR 0 9
40551: PUSH
40552: LD_VAR 0 10
40556: LESS
40557: IFFALSE 40579
// begin result := i ;
40559: LD_ADDR_VAR 0 5
40563: PUSH
40564: LD_VAR 0 6
40568: ST_TO_ADDR
// distance := tmp ;
40569: LD_ADDR_VAR 0 10
40573: PUSH
40574: LD_VAR 0 9
40578: ST_TO_ADDR
// end ; end ;
40579: GO 40437
40581: POP
40582: POP
// end ;
40583: LD_VAR 0 5
40587: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
// if not driver or not IsInUnit ( driver ) then
40592: LD_VAR 0 1
40596: NOT
40597: PUSH
40598: LD_VAR 0 1
40602: PPUSH
40603: CALL_OW 310
40607: NOT
40608: OR
40609: IFFALSE 40613
// exit ;
40611: GO 40703
// vehicle := IsInUnit ( driver ) ;
40613: LD_ADDR_VAR 0 3
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 310
40627: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40628: LD_VAR 0 1
40632: PPUSH
40633: LD_STRING \
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: PUSH
40663: LD_STRING E
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_VAR 0 3
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PPUSH
40699: CALL_OW 446
// end ;
40703: LD_VAR 0 2
40707: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40708: LD_INT 0
40710: PPUSH
40711: PPUSH
// if not driver or not IsInUnit ( driver ) then
40712: LD_VAR 0 1
40716: NOT
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 310
40727: NOT
40728: OR
40729: IFFALSE 40733
// exit ;
40731: GO 40823
// vehicle := IsInUnit ( driver ) ;
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 310
40747: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40748: LD_VAR 0 1
40752: PPUSH
40753: LD_STRING \
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: PUSH
40783: LD_STRING E
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_VAR 0 3
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: CALL_OW 447
// end ;
40823: LD_VAR 0 2
40827: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40828: LD_INT 0
40830: PPUSH
40831: PPUSH
40832: PPUSH
// tmp := [ ] ;
40833: LD_ADDR_VAR 0 5
40837: PUSH
40838: EMPTY
40839: ST_TO_ADDR
// for i in units do
40840: LD_ADDR_VAR 0 4
40844: PUSH
40845: LD_VAR 0 1
40849: PUSH
40850: FOR_IN
40851: IFFALSE 40889
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40853: LD_ADDR_VAR 0 5
40857: PUSH
40858: LD_VAR 0 5
40862: PPUSH
40863: LD_VAR 0 5
40867: PUSH
40868: LD_INT 1
40870: PLUS
40871: PPUSH
40872: LD_VAR 0 4
40876: PPUSH
40877: CALL_OW 256
40881: PPUSH
40882: CALL_OW 2
40886: ST_TO_ADDR
40887: GO 40850
40889: POP
40890: POP
// if not tmp then
40891: LD_VAR 0 5
40895: NOT
40896: IFFALSE 40900
// exit ;
40898: GO 40948
// if asc then
40900: LD_VAR 0 2
40904: IFFALSE 40928
// result := SortListByListAsc ( units , tmp ) else
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_VAR 0 5
40920: PPUSH
40921: CALL_OW 76
40925: ST_TO_ADDR
40926: GO 40948
// result := SortListByListDesc ( units , tmp ) ;
40928: LD_ADDR_VAR 0 3
40932: PUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: LD_VAR 0 5
40942: PPUSH
40943: CALL_OW 77
40947: ST_TO_ADDR
// end ;
40948: LD_VAR 0 3
40952: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40953: LD_INT 0
40955: PPUSH
40956: PPUSH
// task := GetTaskList ( mech ) ;
40957: LD_ADDR_VAR 0 4
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 437
40971: ST_TO_ADDR
// if not task then
40972: LD_VAR 0 4
40976: NOT
40977: IFFALSE 40981
// exit ;
40979: GO 41023
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_VAR 0 4
40990: PUSH
40991: LD_INT 1
40993: ARRAY
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: PUSH
40999: LD_STRING r
41001: EQUAL
41002: PUSH
41003: LD_VAR 0 4
41007: PUSH
41008: LD_INT 1
41010: ARRAY
41011: PUSH
41012: LD_INT 4
41014: ARRAY
41015: PUSH
41016: LD_VAR 0 2
41020: EQUAL
41021: AND
41022: ST_TO_ADDR
// end ;
41023: LD_VAR 0 3
41027: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41028: LD_INT 0
41030: PPUSH
// SetDir ( unit , d ) ;
41031: LD_VAR 0 1
41035: PPUSH
41036: LD_VAR 0 4
41040: PPUSH
41041: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41045: LD_VAR 0 1
41049: PPUSH
41050: LD_VAR 0 2
41054: PPUSH
41055: LD_VAR 0 3
41059: PPUSH
41060: LD_VAR 0 5
41064: PPUSH
41065: CALL_OW 48
// end ;
41069: LD_VAR 0 6
41073: RET
// export function ToNaturalNumber ( number ) ; begin
41074: LD_INT 0
41076: PPUSH
// result := number div 1 ;
41077: LD_ADDR_VAR 0 2
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: LD_INT 1
41089: DIV
41090: ST_TO_ADDR
// if number < 0 then
41091: LD_VAR 0 1
41095: PUSH
41096: LD_INT 0
41098: LESS
41099: IFFALSE 41109
// result := 0 ;
41101: LD_ADDR_VAR 0 2
41105: PUSH
41106: LD_INT 0
41108: ST_TO_ADDR
// end ;
41109: LD_VAR 0 2
41113: RET
// export function SortByClass ( units , class ) ; var un ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
// if not units or not class then
41118: LD_VAR 0 1
41122: NOT
41123: PUSH
41124: LD_VAR 0 2
41128: NOT
41129: OR
41130: IFFALSE 41134
// exit ;
41132: GO 41229
// result := [ ] ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: EMPTY
41140: ST_TO_ADDR
// for un in units do
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_VAR 0 1
41150: PUSH
41151: FOR_IN
41152: IFFALSE 41227
// if GetClass ( un ) = class then
41154: LD_VAR 0 4
41158: PPUSH
41159: CALL_OW 257
41163: PUSH
41164: LD_VAR 0 2
41168: EQUAL
41169: IFFALSE 41196
// result := Insert ( result , 1 , un ) else
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_VAR 0 3
41180: PPUSH
41181: LD_INT 1
41183: PPUSH
41184: LD_VAR 0 4
41188: PPUSH
41189: CALL_OW 2
41193: ST_TO_ADDR
41194: GO 41225
// result := Replace ( result , result + 1 , un ) ;
41196: LD_ADDR_VAR 0 3
41200: PUSH
41201: LD_VAR 0 3
41205: PPUSH
41206: LD_VAR 0 3
41210: PUSH
41211: LD_INT 1
41213: PLUS
41214: PPUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: CALL_OW 1
41224: ST_TO_ADDR
41225: GO 41151
41227: POP
41228: POP
// end ;
41229: LD_VAR 0 3
41233: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41234: LD_INT 0
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
// result := [ ] ;
41243: LD_ADDR_VAR 0 4
41247: PUSH
41248: EMPTY
41249: ST_TO_ADDR
// if x - r < 0 then
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 3
41259: MINUS
41260: PUSH
41261: LD_INT 0
41263: LESS
41264: IFFALSE 41276
// min_x := 0 else
41266: LD_ADDR_VAR 0 8
41270: PUSH
41271: LD_INT 0
41273: ST_TO_ADDR
41274: GO 41292
// min_x := x - r ;
41276: LD_ADDR_VAR 0 8
41280: PUSH
41281: LD_VAR 0 1
41285: PUSH
41286: LD_VAR 0 3
41290: MINUS
41291: ST_TO_ADDR
// if y - r < 0 then
41292: LD_VAR 0 2
41296: PUSH
41297: LD_VAR 0 3
41301: MINUS
41302: PUSH
41303: LD_INT 0
41305: LESS
41306: IFFALSE 41318
// min_y := 0 else
41308: LD_ADDR_VAR 0 7
41312: PUSH
41313: LD_INT 0
41315: ST_TO_ADDR
41316: GO 41334
// min_y := y - r ;
41318: LD_ADDR_VAR 0 7
41322: PUSH
41323: LD_VAR 0 2
41327: PUSH
41328: LD_VAR 0 3
41332: MINUS
41333: ST_TO_ADDR
// max_x := x + r ;
41334: LD_ADDR_VAR 0 9
41338: PUSH
41339: LD_VAR 0 1
41343: PUSH
41344: LD_VAR 0 3
41348: PLUS
41349: ST_TO_ADDR
// max_y := y + r ;
41350: LD_ADDR_VAR 0 10
41354: PUSH
41355: LD_VAR 0 2
41359: PUSH
41360: LD_VAR 0 3
41364: PLUS
41365: ST_TO_ADDR
// for _x = min_x to max_x do
41366: LD_ADDR_VAR 0 5
41370: PUSH
41371: DOUBLE
41372: LD_VAR 0 8
41376: DEC
41377: ST_TO_ADDR
41378: LD_VAR 0 9
41382: PUSH
41383: FOR_TO
41384: IFFALSE 41485
// for _y = min_y to max_y do
41386: LD_ADDR_VAR 0 6
41390: PUSH
41391: DOUBLE
41392: LD_VAR 0 7
41396: DEC
41397: ST_TO_ADDR
41398: LD_VAR 0 10
41402: PUSH
41403: FOR_TO
41404: IFFALSE 41481
// begin if not ValidHex ( _x , _y ) then
41406: LD_VAR 0 5
41410: PPUSH
41411: LD_VAR 0 6
41415: PPUSH
41416: CALL_OW 488
41420: NOT
41421: IFFALSE 41425
// continue ;
41423: GO 41403
// if GetResourceTypeXY ( _x , _y ) then
41425: LD_VAR 0 5
41429: PPUSH
41430: LD_VAR 0 6
41434: PPUSH
41435: CALL_OW 283
41439: IFFALSE 41479
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41441: LD_ADDR_VAR 0 4
41445: PUSH
41446: LD_VAR 0 4
41450: PPUSH
41451: LD_VAR 0 4
41455: PUSH
41456: LD_INT 1
41458: PLUS
41459: PPUSH
41460: LD_VAR 0 5
41464: PUSH
41465: LD_VAR 0 6
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PPUSH
41474: CALL_OW 1
41478: ST_TO_ADDR
// end ;
41479: GO 41403
41481: POP
41482: POP
41483: GO 41383
41485: POP
41486: POP
// end ;
41487: LD_VAR 0 4
41491: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41492: LD_INT 0
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
// if not units then
41502: LD_VAR 0 1
41506: NOT
41507: IFFALSE 41511
// exit ;
41509: GO 42035
// result := UnitFilter ( units , [ f_ok ] ) ;
41511: LD_ADDR_VAR 0 3
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_INT 50
41523: PUSH
41524: EMPTY
41525: LIST
41526: PPUSH
41527: CALL_OW 72
41531: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41532: LD_ADDR_VAR 0 8
41536: PUSH
41537: LD_VAR 0 1
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: CALL_OW 255
41550: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41551: LD_ADDR_VAR 0 10
41555: PUSH
41556: LD_INT 29
41558: PUSH
41559: LD_INT 91
41561: PUSH
41562: LD_INT 49
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// if not result then
41570: LD_VAR 0 3
41574: NOT
41575: IFFALSE 41579
// exit ;
41577: GO 42035
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41579: LD_ADDR_VAR 0 5
41583: PUSH
41584: LD_INT 81
41586: PUSH
41587: LD_VAR 0 8
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PPUSH
41596: CALL_OW 69
41600: ST_TO_ADDR
// for i in result do
41601: LD_ADDR_VAR 0 4
41605: PUSH
41606: LD_VAR 0 3
41610: PUSH
41611: FOR_IN
41612: IFFALSE 42033
// begin tag := GetTag ( i ) + 1 ;
41614: LD_ADDR_VAR 0 9
41618: PUSH
41619: LD_VAR 0 4
41623: PPUSH
41624: CALL_OW 110
41628: PUSH
41629: LD_INT 1
41631: PLUS
41632: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41633: LD_ADDR_VAR 0 7
41637: PUSH
41638: LD_VAR 0 4
41642: PPUSH
41643: CALL_OW 250
41647: PPUSH
41648: LD_VAR 0 4
41652: PPUSH
41653: CALL_OW 251
41657: PPUSH
41658: LD_INT 6
41660: PPUSH
41661: CALL 41234 0 3
41665: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41666: LD_VAR 0 4
41670: PPUSH
41671: CALL_OW 247
41675: PUSH
41676: LD_INT 2
41678: EQUAL
41679: PUSH
41680: LD_VAR 0 7
41684: AND
41685: PUSH
41686: LD_VAR 0 4
41690: PPUSH
41691: CALL_OW 264
41695: PUSH
41696: LD_VAR 0 10
41700: IN
41701: NOT
41702: AND
41703: IFFALSE 41742
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41705: LD_VAR 0 4
41709: PPUSH
41710: LD_VAR 0 7
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: PPUSH
41723: LD_VAR 0 7
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: PUSH
41732: LD_INT 2
41734: ARRAY
41735: PPUSH
41736: CALL_OW 116
41740: GO 42031
// if path > tag then
41742: LD_VAR 0 2
41746: PUSH
41747: LD_VAR 0 9
41751: GREATER
41752: IFFALSE 41960
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41754: LD_ADDR_VAR 0 6
41758: PUSH
41759: LD_VAR 0 5
41763: PPUSH
41764: LD_INT 91
41766: PUSH
41767: LD_VAR 0 4
41771: PUSH
41772: LD_INT 8
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: PPUSH
41780: CALL_OW 72
41784: ST_TO_ADDR
// if nearEnemy then
41785: LD_VAR 0 6
41789: IFFALSE 41858
// begin if GetWeapon ( i ) = ru_time_lapser then
41791: LD_VAR 0 4
41795: PPUSH
41796: CALL_OW 264
41800: PUSH
41801: LD_INT 49
41803: EQUAL
41804: IFFALSE 41832
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41806: LD_VAR 0 4
41810: PPUSH
41811: LD_VAR 0 6
41815: PPUSH
41816: LD_VAR 0 4
41820: PPUSH
41821: CALL_OW 74
41825: PPUSH
41826: CALL_OW 112
41830: GO 41856
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41832: LD_VAR 0 4
41836: PPUSH
41837: LD_VAR 0 6
41841: PPUSH
41842: LD_VAR 0 4
41846: PPUSH
41847: CALL_OW 74
41851: PPUSH
41852: CALL_OW 115
// end else
41856: GO 41958
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41858: LD_VAR 0 4
41862: PPUSH
41863: LD_VAR 0 2
41867: PUSH
41868: LD_VAR 0 9
41872: ARRAY
41873: PUSH
41874: LD_INT 1
41876: ARRAY
41877: PPUSH
41878: LD_VAR 0 2
41882: PUSH
41883: LD_VAR 0 9
41887: ARRAY
41888: PUSH
41889: LD_INT 2
41891: ARRAY
41892: PPUSH
41893: CALL_OW 297
41897: PUSH
41898: LD_INT 6
41900: GREATER
41901: IFFALSE 41944
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41903: LD_VAR 0 4
41907: PPUSH
41908: LD_VAR 0 2
41912: PUSH
41913: LD_VAR 0 9
41917: ARRAY
41918: PUSH
41919: LD_INT 1
41921: ARRAY
41922: PPUSH
41923: LD_VAR 0 2
41927: PUSH
41928: LD_VAR 0 9
41932: ARRAY
41933: PUSH
41934: LD_INT 2
41936: ARRAY
41937: PPUSH
41938: CALL_OW 114
41942: GO 41958
// SetTag ( i , tag ) ;
41944: LD_VAR 0 4
41948: PPUSH
41949: LD_VAR 0 9
41953: PPUSH
41954: CALL_OW 109
// end else
41958: GO 42031
// if enemy then
41960: LD_VAR 0 5
41964: IFFALSE 42031
// begin if GetWeapon ( i ) = ru_time_lapser then
41966: LD_VAR 0 4
41970: PPUSH
41971: CALL_OW 264
41975: PUSH
41976: LD_INT 49
41978: EQUAL
41979: IFFALSE 42007
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41981: LD_VAR 0 4
41985: PPUSH
41986: LD_VAR 0 5
41990: PPUSH
41991: LD_VAR 0 4
41995: PPUSH
41996: CALL_OW 74
42000: PPUSH
42001: CALL_OW 112
42005: GO 42031
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42007: LD_VAR 0 4
42011: PPUSH
42012: LD_VAR 0 5
42016: PPUSH
42017: LD_VAR 0 4
42021: PPUSH
42022: CALL_OW 74
42026: PPUSH
42027: CALL_OW 115
// end ; end ;
42031: GO 41611
42033: POP
42034: POP
// end ;
42035: LD_VAR 0 3
42039: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42040: LD_INT 0
42042: PPUSH
42043: PPUSH
42044: PPUSH
// if not unit or IsInUnit ( unit ) then
42045: LD_VAR 0 1
42049: NOT
42050: PUSH
42051: LD_VAR 0 1
42055: PPUSH
42056: CALL_OW 310
42060: OR
42061: IFFALSE 42065
// exit ;
42063: GO 42156
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42065: LD_ADDR_VAR 0 4
42069: PUSH
42070: LD_VAR 0 1
42074: PPUSH
42075: CALL_OW 250
42079: PPUSH
42080: LD_VAR 0 2
42084: PPUSH
42085: LD_INT 1
42087: PPUSH
42088: CALL_OW 272
42092: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42093: LD_ADDR_VAR 0 5
42097: PUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 251
42107: PPUSH
42108: LD_VAR 0 2
42112: PPUSH
42113: LD_INT 1
42115: PPUSH
42116: CALL_OW 273
42120: ST_TO_ADDR
// if ValidHex ( x , y ) then
42121: LD_VAR 0 4
42125: PPUSH
42126: LD_VAR 0 5
42130: PPUSH
42131: CALL_OW 488
42135: IFFALSE 42156
// ComTurnXY ( unit , x , y ) ;
42137: LD_VAR 0 1
42141: PPUSH
42142: LD_VAR 0 4
42146: PPUSH
42147: LD_VAR 0 5
42151: PPUSH
42152: CALL_OW 118
// end ;
42156: LD_VAR 0 3
42160: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42161: LD_INT 0
42163: PPUSH
42164: PPUSH
// result := false ;
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_INT 0
42172: ST_TO_ADDR
// if not units then
42173: LD_VAR 0 2
42177: NOT
42178: IFFALSE 42182
// exit ;
42180: GO 42227
// for i in units do
42182: LD_ADDR_VAR 0 4
42186: PUSH
42187: LD_VAR 0 2
42191: PUSH
42192: FOR_IN
42193: IFFALSE 42225
// if See ( side , i ) then
42195: LD_VAR 0 1
42199: PPUSH
42200: LD_VAR 0 4
42204: PPUSH
42205: CALL_OW 292
42209: IFFALSE 42223
// begin result := true ;
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_INT 1
42218: ST_TO_ADDR
// exit ;
42219: POP
42220: POP
42221: GO 42227
// end ;
42223: GO 42192
42225: POP
42226: POP
// end ;
42227: LD_VAR 0 3
42231: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42232: LD_INT 0
42234: PPUSH
42235: PPUSH
42236: PPUSH
42237: PPUSH
// if not unit or not points then
42238: LD_VAR 0 1
42242: NOT
42243: PUSH
42244: LD_VAR 0 2
42248: NOT
42249: OR
42250: IFFALSE 42254
// exit ;
42252: GO 42344
// dist := 99999 ;
42254: LD_ADDR_VAR 0 5
42258: PUSH
42259: LD_INT 99999
42261: ST_TO_ADDR
// for i in points do
42262: LD_ADDR_VAR 0 4
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: FOR_IN
42273: IFFALSE 42342
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42275: LD_ADDR_VAR 0 6
42279: PUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: LD_VAR 0 4
42289: PUSH
42290: LD_INT 1
42292: ARRAY
42293: PPUSH
42294: LD_VAR 0 4
42298: PUSH
42299: LD_INT 2
42301: ARRAY
42302: PPUSH
42303: CALL_OW 297
42307: ST_TO_ADDR
// if tmpDist < dist then
42308: LD_VAR 0 6
42312: PUSH
42313: LD_VAR 0 5
42317: LESS
42318: IFFALSE 42340
// begin result := i ;
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: LD_VAR 0 4
42329: ST_TO_ADDR
// dist := tmpDist ;
42330: LD_ADDR_VAR 0 5
42334: PUSH
42335: LD_VAR 0 6
42339: ST_TO_ADDR
// end ; end ;
42340: GO 42272
42342: POP
42343: POP
// end ;
42344: LD_VAR 0 3
42348: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42349: LD_INT 0
42351: PPUSH
// uc_side := side ;
42352: LD_ADDR_OWVAR 20
42356: PUSH
42357: LD_VAR 0 1
42361: ST_TO_ADDR
// uc_nation := 3 ;
42362: LD_ADDR_OWVAR 21
42366: PUSH
42367: LD_INT 3
42369: ST_TO_ADDR
// vc_chassis := 25 ;
42370: LD_ADDR_OWVAR 37
42374: PUSH
42375: LD_INT 25
42377: ST_TO_ADDR
// vc_engine := engine_siberite ;
42378: LD_ADDR_OWVAR 39
42382: PUSH
42383: LD_INT 3
42385: ST_TO_ADDR
// vc_control := control_computer ;
42386: LD_ADDR_OWVAR 38
42390: PUSH
42391: LD_INT 3
42393: ST_TO_ADDR
// vc_weapon := 59 ;
42394: LD_ADDR_OWVAR 40
42398: PUSH
42399: LD_INT 59
42401: ST_TO_ADDR
// result := CreateVehicle ;
42402: LD_ADDR_VAR 0 5
42406: PUSH
42407: CALL_OW 45
42411: ST_TO_ADDR
// SetDir ( result , d ) ;
42412: LD_VAR 0 5
42416: PPUSH
42417: LD_VAR 0 4
42421: PPUSH
42422: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42426: LD_VAR 0 5
42430: PPUSH
42431: LD_VAR 0 2
42435: PPUSH
42436: LD_VAR 0 3
42440: PPUSH
42441: LD_INT 0
42443: PPUSH
42444: CALL_OW 48
// end ;
42448: LD_VAR 0 5
42452: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
42457: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42458: LD_ADDR_VAR 0 2
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42481: LD_VAR 0 1
42485: NOT
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 264
42496: PUSH
42497: LD_INT 12
42499: PUSH
42500: LD_INT 51
42502: PUSH
42503: LD_INT 32
42505: PUSH
42506: LD_INT 89
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: IN
42515: NOT
42516: OR
42517: IFFALSE 42521
// exit ;
42519: GO 42619
// for i := 1 to 3 do
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: DOUBLE
42527: LD_INT 1
42529: DEC
42530: ST_TO_ADDR
42531: LD_INT 3
42533: PUSH
42534: FOR_TO
42535: IFFALSE 42617
// begin tmp := GetCargo ( cargo , i ) ;
42537: LD_ADDR_VAR 0 4
42541: PUSH
42542: LD_VAR 0 1
42546: PPUSH
42547: LD_VAR 0 3
42551: PPUSH
42552: CALL_OW 289
42556: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42557: LD_ADDR_VAR 0 2
42561: PUSH
42562: LD_VAR 0 2
42566: PPUSH
42567: LD_VAR 0 3
42571: PPUSH
42572: LD_VAR 0 4
42576: PPUSH
42577: CALL_OW 1
42581: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42582: LD_ADDR_VAR 0 2
42586: PUSH
42587: LD_VAR 0 2
42591: PPUSH
42592: LD_INT 4
42594: PPUSH
42595: LD_VAR 0 2
42599: PUSH
42600: LD_INT 4
42602: ARRAY
42603: PUSH
42604: LD_VAR 0 4
42608: PLUS
42609: PPUSH
42610: CALL_OW 1
42614: ST_TO_ADDR
// end ;
42615: GO 42534
42617: POP
42618: POP
// end ;
42619: LD_VAR 0 2
42623: RET
// export function Length ( array ) ; begin
42624: LD_INT 0
42626: PPUSH
// result := array + 0 ;
42627: LD_ADDR_VAR 0 2
42631: PUSH
42632: LD_VAR 0 1
42636: PUSH
42637: LD_INT 0
42639: PLUS
42640: ST_TO_ADDR
// end ;
42641: LD_VAR 0 2
42645: RET
// export function PrepareArray ( array ) ; begin
42646: LD_INT 0
42648: PPUSH
// result := array diff 0 ;
42649: LD_ADDR_VAR 0 2
42653: PUSH
42654: LD_VAR 0 1
42658: PUSH
42659: LD_INT 0
42661: DIFF
42662: ST_TO_ADDR
// if not result [ 1 ] then
42663: LD_VAR 0 2
42667: PUSH
42668: LD_INT 1
42670: ARRAY
42671: NOT
42672: IFFALSE 42692
// result := Delete ( result , 1 ) ;
42674: LD_ADDR_VAR 0 2
42678: PUSH
42679: LD_VAR 0 2
42683: PPUSH
42684: LD_INT 1
42686: PPUSH
42687: CALL_OW 3
42691: ST_TO_ADDR
// end ;
42692: LD_VAR 0 2
42696: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42697: LD_INT 0
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
// sibRocketRange := 25 ;
42703: LD_ADDR_VAR 0 6
42707: PUSH
42708: LD_INT 25
42710: ST_TO_ADDR
// result := false ;
42711: LD_ADDR_VAR 0 4
42715: PUSH
42716: LD_INT 0
42718: ST_TO_ADDR
// for i := 0 to 5 do
42719: LD_ADDR_VAR 0 5
42723: PUSH
42724: DOUBLE
42725: LD_INT 0
42727: DEC
42728: ST_TO_ADDR
42729: LD_INT 5
42731: PUSH
42732: FOR_TO
42733: IFFALSE 42800
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42735: LD_VAR 0 1
42739: PPUSH
42740: LD_VAR 0 5
42744: PPUSH
42745: LD_VAR 0 6
42749: PPUSH
42750: CALL_OW 272
42754: PPUSH
42755: LD_VAR 0 2
42759: PPUSH
42760: LD_VAR 0 5
42764: PPUSH
42765: LD_VAR 0 6
42769: PPUSH
42770: CALL_OW 273
42774: PPUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: CALL_OW 309
42784: IFFALSE 42798
// begin result := true ;
42786: LD_ADDR_VAR 0 4
42790: PUSH
42791: LD_INT 1
42793: ST_TO_ADDR
// exit ;
42794: POP
42795: POP
42796: GO 42802
// end ;
42798: GO 42732
42800: POP
42801: POP
// end ;
42802: LD_VAR 0 4
42806: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42807: LD_INT 0
42809: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42810: LD_VAR 0 1
42814: PPUSH
42815: LD_VAR 0 2
42819: PPUSH
42820: LD_INT 0
42822: PPUSH
42823: LD_INT 0
42825: PPUSH
42826: LD_INT 1
42828: PPUSH
42829: LD_INT 0
42831: PPUSH
42832: CALL_OW 587
// end ;
42836: LD_VAR 0 3
42840: RET
// export function CenterOnNow ( unit ) ; begin
42841: LD_INT 0
42843: PPUSH
// result := IsInUnit ( unit ) ;
42844: LD_ADDR_VAR 0 2
42848: PUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 310
42858: ST_TO_ADDR
// if not result then
42859: LD_VAR 0 2
42863: NOT
42864: IFFALSE 42876
// result := unit ;
42866: LD_ADDR_VAR 0 2
42870: PUSH
42871: LD_VAR 0 1
42875: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42876: LD_VAR 0 1
42880: PPUSH
42881: CALL_OW 87
// end ;
42885: LD_VAR 0 2
42889: RET
// export function ComMoveHex ( unit , hex ) ; begin
42890: LD_INT 0
42892: PPUSH
// if not hex then
42893: LD_VAR 0 2
42897: NOT
42898: IFFALSE 42902
// exit ;
42900: GO 42955
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42902: LD_VAR 0 2
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: PPUSH
42911: LD_VAR 0 2
42915: PUSH
42916: LD_INT 2
42918: ARRAY
42919: PPUSH
42920: CALL_OW 428
42924: IFFALSE 42928
// exit ;
42926: GO 42955
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42928: LD_VAR 0 1
42932: PPUSH
42933: LD_VAR 0 2
42937: PUSH
42938: LD_INT 1
42940: ARRAY
42941: PPUSH
42942: LD_VAR 0 2
42946: PUSH
42947: LD_INT 2
42949: ARRAY
42950: PPUSH
42951: CALL_OW 111
// end ;
42955: LD_VAR 0 3
42959: RET
