// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1621 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1621 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1621 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1621 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1621 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1621 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1621 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1621 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1621 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1621 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1621 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1621 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1621 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un , p ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
 635: PPUSH
// music_nat := 2 ;
 636: LD_ADDR_OWVAR 71
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// Video ( true ) ;
 644: LD_INT 1
 646: PPUSH
 647: CALL 39284 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 651: LD_EXP 3
 655: PPUSH
 656: LD_INT 51
 658: PPUSH
 659: LD_INT 23
 661: PPUSH
 662: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 666: LD_OWVAR 3
 670: PUSH
 671: LD_EXP 3
 675: DIFF
 676: PPUSH
 677: LD_INT 53
 679: PPUSH
 680: LD_INT 27
 682: PPUSH
 683: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 687: LD_INT 52
 689: PPUSH
 690: LD_INT 25
 692: PPUSH
 693: CALL_OW 86
// wait ( 0 0$2 ) ;
 697: LD_INT 70
 699: PPUSH
 700: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 704: LD_INT 35
 706: PPUSH
 707: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 711: LD_EXP 3
 715: PPUSH
 716: LD_INT 51
 718: PPUSH
 719: LD_INT 23
 721: PPUSH
 722: CALL_OW 307
 726: PUSH
 727: LD_EXP 3
 731: PPUSH
 732: CALL_OW 314
 736: NOT
 737: OR
 738: IFFALSE 704
// ComTurnXY ( Heike , 53 , 26 ) ;
 740: LD_EXP 3
 744: PPUSH
 745: LD_INT 53
 747: PPUSH
 748: LD_INT 26
 750: PPUSH
 751: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 755: LD_INT 10
 757: PPUSH
 758: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_STRING DH-Intro-1
 769: PPUSH
 770: CALL_OW 88
// ComHold ( all_units ) ;
 774: LD_OWVAR 3
 778: PPUSH
 779: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 783: LD_OWVAR 3
 787: PUSH
 788: LD_EXP 3
 792: DIFF
 793: PPUSH
 794: LD_EXP 3
 798: PPUSH
 799: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 803: LD_EXP 17
 807: PUSH
 808: LD_STRING 08_DealWithDoug
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 30
 818: AND
 819: IFFALSE 931
// begin ComTurnUnit ( Heike , Doug ) ;
 821: LD_EXP 3
 825: PPUSH
 826: LD_EXP 17
 830: PPUSH
 831: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 835: LD_EXP 17
 839: PPUSH
 840: LD_STRING DCa-Intro-a-2
 842: PPUSH
 843: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 847: LD_EXP 3
 851: PPUSH
 852: LD_STRING DH-Intro-a-3
 854: PPUSH
 855: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 859: LD_EXP 17
 863: PPUSH
 864: LD_STRING DCa-Intro-a-4
 866: PPUSH
 867: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 871: LD_EXP 3
 875: PPUSH
 876: LD_STRING DH-Intro-a-5
 878: PPUSH
 879: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 883: LD_EXP 17
 887: PPUSH
 888: LD_STRING DCa-Intro-a-6
 890: PPUSH
 891: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 895: LD_EXP 16
 899: PUSH
 900: LD_EXP 17
 904: ADD
 905: PUSH
 906: LD_EXP 15
 910: ADD
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 7
 917: PPUSH
 918: CALL_OW 111
// wait ( 0 0$01 ) ;
 922: LD_INT 35
 924: PPUSH
 925: CALL_OW 67
// end else
 929: GO 1033
// if Harris then
 931: LD_EXP 16
 935: IFFALSE 1033
// begin ComTurnUnit ( Heike , Harris ) ;
 937: LD_EXP 3
 941: PPUSH
 942: LD_EXP 16
 946: PPUSH
 947: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 951: LD_EXP 16
 955: PPUSH
 956: LD_STRING DJ-Intro-2
 958: PPUSH
 959: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 963: LD_EXP 3
 967: PPUSH
 968: LD_STRING DH-Intro-3
 970: PPUSH
 971: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 975: LD_EXP 3
 979: PPUSH
 980: LD_STRING DH-Intro-4
 982: PPUSH
 983: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 987: LD_EXP 16
 991: PPUSH
 992: LD_STRING DJ-Intro-5
 994: PPUSH
 995: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 999: LD_EXP 16
1003: PUSH
1004: LD_EXP 17
1008: ADD
1009: PUSH
1010: LD_EXP 15
1014: ADD
1015: PPUSH
1016: LD_INT 5
1018: PPUSH
1019: LD_INT 7
1021: PPUSH
1022: CALL_OW 111
// wait ( 0 0$01 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// end ; if Givi then
1033: LD_EXP 4
1037: IFFALSE 1165
// begin ComMoveUnit ( Givi , Heike ) ;
1039: LD_EXP 4
1043: PPUSH
1044: LD_EXP 3
1048: PPUSH
1049: CALL_OW 112
// p := 0 ;
1053: LD_ADDR_VAR 0 4
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1061: LD_INT 35
1063: PPUSH
1064: CALL_OW 67
// p := Inc ( p ) ;
1068: LD_ADDR_VAR 0 4
1072: PUSH
1073: LD_VAR 0 4
1077: PPUSH
1078: CALL 40673 0 1
1082: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) or p > 8 ;
1083: LD_EXP 3
1087: PPUSH
1088: LD_EXP 4
1092: PPUSH
1093: CALL_OW 296
1097: PUSH
1098: LD_INT 4
1100: LESS
1101: PUSH
1102: LD_EXP 4
1106: PPUSH
1107: CALL_OW 314
1111: NOT
1112: OR
1113: PUSH
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 8
1121: GREATER
1122: OR
1123: IFFALSE 1061
// ComTurnUnit ( Givi , Heike ) ;
1125: LD_EXP 4
1129: PPUSH
1130: LD_EXP 3
1134: PPUSH
1135: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1139: LD_EXP 3
1143: PPUSH
1144: LD_EXP 4
1148: PPUSH
1149: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1153: LD_EXP 4
1157: PPUSH
1158: LD_STRING DG-Intro-7
1160: PPUSH
1161: CALL_OW 88
// end ; if not Givi then
1165: LD_EXP 4
1169: NOT
1170: IFFALSE 1187
// ComTurnXY ( Heike , 52 , 25 ) ;
1172: LD_EXP 3
1176: PPUSH
1177: LD_INT 52
1179: PPUSH
1180: LD_INT 25
1182: PPUSH
1183: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1187: LD_EXP 3
1191: PPUSH
1192: LD_STRING DH-Intro-7
1194: PPUSH
1195: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1199: LD_INT 22
1201: PUSH
1202: LD_INT 2
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PPUSH
1209: CALL_OW 69
1213: PPUSH
1214: LD_INT 48
1216: PPUSH
1217: LD_INT 4
1219: PPUSH
1220: CALL_OW 111
// wait ( 0 0$3 ) ;
1224: LD_INT 105
1226: PPUSH
1227: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1231: LD_INT 74
1233: PPUSH
1234: LD_INT 79
1236: PPUSH
1237: LD_INT 2
1239: PPUSH
1240: LD_INT 16
1242: NEG
1243: PPUSH
1244: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1248: LD_INT 74
1250: PPUSH
1251: LD_INT 79
1253: PPUSH
1254: CALL_OW 84
// uc_side := 3 ;
1258: LD_ADDR_OWVAR 20
1262: PUSH
1263: LD_INT 3
1265: ST_TO_ADDR
// uc_nation := nation_russian ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 3
1273: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1274: LD_INT 22
1276: PPUSH
1277: LD_INT 3
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_INT 43
1285: PPUSH
1286: LD_INT 100
1288: PPUSH
1289: CALL 6461 0 5
// un := CreateVehicle ;
1293: LD_ADDR_VAR 0 3
1297: PUSH
1298: CALL_OW 45
1302: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1303: LD_VAR 0 3
1307: PPUSH
1308: LD_INT 76
1310: PPUSH
1311: LD_INT 87
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1321: LD_INT 0
1323: PPUSH
1324: LD_INT 8
1326: PPUSH
1327: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1331: CALL_OW 44
1335: PPUSH
1336: LD_VAR 0 3
1340: PPUSH
1341: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 67
1352: PPUSH
1353: LD_INT 56
1355: PPUSH
1356: CALL_OW 111
// wait ( 0 0$1 ) ;
1360: LD_INT 35
1362: PPUSH
1363: CALL_OW 67
// for i := 1 to 3 do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: DOUBLE
1373: LD_INT 1
1375: DEC
1376: ST_TO_ADDR
1377: LD_INT 3
1379: PUSH
1380: FOR_TO
1381: IFFALSE 1441
// begin PrepareSoldier ( false , 8 ) ;
1383: LD_INT 0
1385: PPUSH
1386: LD_INT 8
1388: PPUSH
1389: CALL_OW 381
// un := CreateHuman ;
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: CALL_OW 44
1402: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1403: LD_VAR 0 3
1407: PPUSH
1408: LD_INT 76
1410: PPUSH
1411: LD_INT 87
1413: PPUSH
1414: LD_INT 2
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 67
1431: PPUSH
1432: LD_INT 56
1434: PPUSH
1435: CALL_OW 111
// end ;
1439: GO 1380
1441: POP
1442: POP
// wait ( 0 0$2 ) ;
1443: LD_INT 70
1445: PPUSH
1446: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1450: LD_INT 1
1452: PPUSH
1453: LD_STRING %_cont
1455: PPUSH
1456: CALL_OW 340
// Video ( false ) ;
1460: LD_INT 0
1462: PPUSH
1463: CALL 39284 0 1
// end ;
1467: LD_VAR 0 1
1471: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1472: LD_INT 5
1474: PPUSH
1475: LD_INT 22
1477: PUSH
1478: LD_INT 4
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: PPUSH
1485: CALL_OW 70
1489: IFFALSE 1537
1491: GO 1493
1493: DISABLE
1494: LD_INT 0
1496: PPUSH
// begin enable ;
1497: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1498: LD_ADDR_VAR 0 1
1502: PUSH
1503: LD_INT 5
1505: PPUSH
1506: LD_INT 22
1508: PUSH
1509: LD_INT 4
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 70
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1535
// RemoveUnit ( i ) ;
1524: LD_VAR 0 1
1528: PPUSH
1529: CALL_OW 64
1533: GO 1521
1535: POP
1536: POP
// end ;
1537: PPOPN 1
1539: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1540: LD_INT 6
1542: PPUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PPUSH
1553: CALL_OW 70
1557: IFFALSE 1605
1559: GO 1561
1561: DISABLE
1562: LD_INT 0
1564: PPUSH
// begin enable ;
1565: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1566: LD_ADDR_VAR 0 1
1570: PUSH
1571: LD_INT 6
1573: PPUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 70
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1603
// RemoveUnit ( i ) ;
1592: LD_VAR 0 1
1596: PPUSH
1597: CALL_OW 64
1601: GO 1589
1603: POP
1604: POP
// end ; end_of_file
1605: PPOPN 1
1607: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1608: LD_INT 1
1610: PPUSH
1611: LD_STRING %_cont
1613: PPUSH
1614: CALL_OW 340
// end ; end_of_file
1618: PPOPN 1
1620: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1621: LD_INT 0
1623: PPUSH
1624: PPUSH
// if exist_mode then
1625: LD_VAR 0 2
1629: IFFALSE 1654
// unit := CreateCharacter ( prefix & ident ) else
1631: LD_ADDR_VAR 0 5
1635: PUSH
1636: LD_VAR 0 3
1640: PUSH
1641: LD_VAR 0 1
1645: STR
1646: PPUSH
1647: CALL_OW 34
1651: ST_TO_ADDR
1652: GO 1669
// unit := NewCharacter ( ident ) ;
1654: LD_ADDR_VAR 0 5
1658: PUSH
1659: LD_VAR 0 1
1663: PPUSH
1664: CALL_OW 25
1668: ST_TO_ADDR
// result := unit ;
1669: LD_ADDR_VAR 0 4
1673: PUSH
1674: LD_VAR 0 5
1678: ST_TO_ADDR
// end ;
1679: LD_VAR 0 4
1683: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
// if not side or not nation then
1688: LD_VAR 0 1
1692: NOT
1693: PUSH
1694: LD_VAR 0 2
1698: NOT
1699: OR
1700: IFFALSE 1704
// exit ;
1702: GO 2472
// case nation of nation_american :
1704: LD_VAR 0 2
1708: PUSH
1709: LD_INT 1
1711: DOUBLE
1712: EQUAL
1713: IFTRUE 1717
1715: GO 1931
1717: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1718: LD_ADDR_VAR 0 4
1722: PUSH
1723: LD_INT 35
1725: PUSH
1726: LD_INT 45
1728: PUSH
1729: LD_INT 46
1731: PUSH
1732: LD_INT 47
1734: PUSH
1735: LD_INT 82
1737: PUSH
1738: LD_INT 83
1740: PUSH
1741: LD_INT 84
1743: PUSH
1744: LD_INT 85
1746: PUSH
1747: LD_INT 86
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 6
1758: PUSH
1759: LD_INT 15
1761: PUSH
1762: LD_INT 16
1764: PUSH
1765: LD_INT 7
1767: PUSH
1768: LD_INT 12
1770: PUSH
1771: LD_INT 13
1773: PUSH
1774: LD_INT 10
1776: PUSH
1777: LD_INT 14
1779: PUSH
1780: LD_INT 20
1782: PUSH
1783: LD_INT 21
1785: PUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 25
1791: PUSH
1792: LD_INT 32
1794: PUSH
1795: LD_INT 27
1797: PUSH
1798: LD_INT 36
1800: PUSH
1801: LD_INT 69
1803: PUSH
1804: LD_INT 39
1806: PUSH
1807: LD_INT 34
1809: PUSH
1810: LD_INT 40
1812: PUSH
1813: LD_INT 48
1815: PUSH
1816: LD_INT 49
1818: PUSH
1819: LD_INT 50
1821: PUSH
1822: LD_INT 51
1824: PUSH
1825: LD_INT 52
1827: PUSH
1828: LD_INT 53
1830: PUSH
1831: LD_INT 54
1833: PUSH
1834: LD_INT 55
1836: PUSH
1837: LD_INT 56
1839: PUSH
1840: LD_INT 57
1842: PUSH
1843: LD_INT 58
1845: PUSH
1846: LD_INT 59
1848: PUSH
1849: LD_INT 60
1851: PUSH
1852: LD_INT 61
1854: PUSH
1855: LD_INT 62
1857: PUSH
1858: LD_INT 80
1860: PUSH
1861: LD_INT 82
1863: PUSH
1864: LD_INT 83
1866: PUSH
1867: LD_INT 84
1869: PUSH
1870: LD_INT 85
1872: PUSH
1873: LD_INT 86
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: ST_TO_ADDR
1929: GO 2396
1931: LD_INT 2
1933: DOUBLE
1934: EQUAL
1935: IFTRUE 1939
1937: GO 2165
1939: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: LD_INT 35
1947: PUSH
1948: LD_INT 45
1950: PUSH
1951: LD_INT 46
1953: PUSH
1954: LD_INT 47
1956: PUSH
1957: LD_INT 82
1959: PUSH
1960: LD_INT 83
1962: PUSH
1963: LD_INT 84
1965: PUSH
1966: LD_INT 85
1968: PUSH
1969: LD_INT 87
1971: PUSH
1972: LD_INT 70
1974: PUSH
1975: LD_INT 1
1977: PUSH
1978: LD_INT 11
1980: PUSH
1981: LD_INT 3
1983: PUSH
1984: LD_INT 4
1986: PUSH
1987: LD_INT 5
1989: PUSH
1990: LD_INT 6
1992: PUSH
1993: LD_INT 15
1995: PUSH
1996: LD_INT 18
1998: PUSH
1999: LD_INT 7
2001: PUSH
2002: LD_INT 17
2004: PUSH
2005: LD_INT 8
2007: PUSH
2008: LD_INT 20
2010: PUSH
2011: LD_INT 21
2013: PUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 69
2025: PUSH
2026: LD_INT 39
2028: PUSH
2029: LD_INT 40
2031: PUSH
2032: LD_INT 41
2034: PUSH
2035: LD_INT 42
2037: PUSH
2038: LD_INT 43
2040: PUSH
2041: LD_INT 48
2043: PUSH
2044: LD_INT 49
2046: PUSH
2047: LD_INT 50
2049: PUSH
2050: LD_INT 51
2052: PUSH
2053: LD_INT 52
2055: PUSH
2056: LD_INT 53
2058: PUSH
2059: LD_INT 54
2061: PUSH
2062: LD_INT 55
2064: PUSH
2065: LD_INT 56
2067: PUSH
2068: LD_INT 60
2070: PUSH
2071: LD_INT 61
2073: PUSH
2074: LD_INT 62
2076: PUSH
2077: LD_INT 66
2079: PUSH
2080: LD_INT 67
2082: PUSH
2083: LD_INT 68
2085: PUSH
2086: LD_INT 81
2088: PUSH
2089: LD_INT 82
2091: PUSH
2092: LD_INT 83
2094: PUSH
2095: LD_INT 84
2097: PUSH
2098: LD_INT 85
2100: PUSH
2101: LD_INT 87
2103: PUSH
2104: LD_INT 88
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: ST_TO_ADDR
2163: GO 2396
2165: LD_INT 3
2167: DOUBLE
2168: EQUAL
2169: IFTRUE 2173
2171: GO 2395
2173: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2174: LD_ADDR_VAR 0 4
2178: PUSH
2179: LD_INT 46
2181: PUSH
2182: LD_INT 47
2184: PUSH
2185: LD_INT 1
2187: PUSH
2188: LD_INT 2
2190: PUSH
2191: LD_INT 82
2193: PUSH
2194: LD_INT 83
2196: PUSH
2197: LD_INT 84
2199: PUSH
2200: LD_INT 85
2202: PUSH
2203: LD_INT 86
2205: PUSH
2206: LD_INT 11
2208: PUSH
2209: LD_INT 9
2211: PUSH
2212: LD_INT 20
2214: PUSH
2215: LD_INT 19
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 24
2223: PUSH
2224: LD_INT 22
2226: PUSH
2227: LD_INT 25
2229: PUSH
2230: LD_INT 28
2232: PUSH
2233: LD_INT 29
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 31
2241: PUSH
2242: LD_INT 37
2244: PUSH
2245: LD_INT 38
2247: PUSH
2248: LD_INT 32
2250: PUSH
2251: LD_INT 27
2253: PUSH
2254: LD_INT 33
2256: PUSH
2257: LD_INT 69
2259: PUSH
2260: LD_INT 39
2262: PUSH
2263: LD_INT 34
2265: PUSH
2266: LD_INT 40
2268: PUSH
2269: LD_INT 71
2271: PUSH
2272: LD_INT 23
2274: PUSH
2275: LD_INT 44
2277: PUSH
2278: LD_INT 48
2280: PUSH
2281: LD_INT 49
2283: PUSH
2284: LD_INT 50
2286: PUSH
2287: LD_INT 51
2289: PUSH
2290: LD_INT 52
2292: PUSH
2293: LD_INT 53
2295: PUSH
2296: LD_INT 54
2298: PUSH
2299: LD_INT 55
2301: PUSH
2302: LD_INT 56
2304: PUSH
2305: LD_INT 57
2307: PUSH
2308: LD_INT 58
2310: PUSH
2311: LD_INT 59
2313: PUSH
2314: LD_INT 63
2316: PUSH
2317: LD_INT 64
2319: PUSH
2320: LD_INT 65
2322: PUSH
2323: LD_INT 82
2325: PUSH
2326: LD_INT 83
2328: PUSH
2329: LD_INT 84
2331: PUSH
2332: LD_INT 85
2334: PUSH
2335: LD_INT 86
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: ST_TO_ADDR
2393: GO 2396
2395: POP
// if state > - 1 and state < 3 then
2396: LD_VAR 0 3
2400: PUSH
2401: LD_INT 1
2403: NEG
2404: GREATER
2405: PUSH
2406: LD_VAR 0 3
2410: PUSH
2411: LD_INT 3
2413: LESS
2414: AND
2415: IFFALSE 2472
// for i in result do
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_VAR 0 4
2426: PUSH
2427: FOR_IN
2428: IFFALSE 2470
// if GetTech ( i , side ) <> state then
2430: LD_VAR 0 5
2434: PPUSH
2435: LD_VAR 0 1
2439: PPUSH
2440: CALL_OW 321
2444: PUSH
2445: LD_VAR 0 3
2449: NONEQUAL
2450: IFFALSE 2468
// result := result diff i ;
2452: LD_ADDR_VAR 0 4
2456: PUSH
2457: LD_VAR 0 4
2461: PUSH
2462: LD_VAR 0 5
2466: DIFF
2467: ST_TO_ADDR
2468: GO 2427
2470: POP
2471: POP
// end ;
2472: LD_VAR 0 4
2476: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2477: LD_INT 0
2479: PPUSH
2480: PPUSH
2481: PPUSH
// result := true ;
2482: LD_ADDR_VAR 0 3
2486: PUSH
2487: LD_INT 1
2489: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: CALL_OW 480
2504: ST_TO_ADDR
// if not tmp then
2505: LD_VAR 0 5
2509: NOT
2510: IFFALSE 2514
// exit ;
2512: GO 2563
// for i in tmp do
2514: LD_ADDR_VAR 0 4
2518: PUSH
2519: LD_VAR 0 5
2523: PUSH
2524: FOR_IN
2525: IFFALSE 2561
// if GetTech ( i , side ) <> state_researched then
2527: LD_VAR 0 4
2531: PPUSH
2532: LD_VAR 0 1
2536: PPUSH
2537: CALL_OW 321
2541: PUSH
2542: LD_INT 2
2544: NONEQUAL
2545: IFFALSE 2559
// begin result := false ;
2547: LD_ADDR_VAR 0 3
2551: PUSH
2552: LD_INT 0
2554: ST_TO_ADDR
// exit ;
2555: POP
2556: POP
2557: GO 2563
// end ;
2559: GO 2524
2561: POP
2562: POP
// end ;
2563: LD_VAR 0 3
2567: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2568: LD_INT 0
2570: PPUSH
2571: PPUSH
2572: PPUSH
2573: PPUSH
2574: PPUSH
2575: PPUSH
2576: PPUSH
2577: PPUSH
2578: PPUSH
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2583: LD_VAR 0 1
2587: NOT
2588: PUSH
2589: LD_VAR 0 1
2593: PPUSH
2594: CALL_OW 257
2598: PUSH
2599: LD_INT 9
2601: NONEQUAL
2602: OR
2603: IFFALSE 2607
// exit ;
2605: GO 3180
// side := GetSide ( unit ) ;
2607: LD_ADDR_VAR 0 9
2611: PUSH
2612: LD_VAR 0 1
2616: PPUSH
2617: CALL_OW 255
2621: ST_TO_ADDR
// tech_space := tech_spacanom ;
2622: LD_ADDR_VAR 0 12
2626: PUSH
2627: LD_INT 29
2629: ST_TO_ADDR
// tech_time := tech_taurad ;
2630: LD_ADDR_VAR 0 13
2634: PUSH
2635: LD_INT 28
2637: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2638: LD_ADDR_VAR 0 11
2642: PUSH
2643: LD_VAR 0 1
2647: PPUSH
2648: CALL_OW 310
2652: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2653: LD_VAR 0 11
2657: PPUSH
2658: CALL_OW 247
2662: PUSH
2663: LD_INT 2
2665: EQUAL
2666: IFFALSE 2670
// exit ;
2668: GO 3180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2670: LD_ADDR_VAR 0 8
2674: PUSH
2675: LD_INT 81
2677: PUSH
2678: LD_VAR 0 9
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 21
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: ST_TO_ADDR
// if not tmp then
2713: LD_VAR 0 8
2717: NOT
2718: IFFALSE 2722
// exit ;
2720: GO 3180
// if in_unit then
2722: LD_VAR 0 11
2726: IFFALSE 2750
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2728: LD_ADDR_VAR 0 10
2732: PUSH
2733: LD_VAR 0 8
2737: PPUSH
2738: LD_VAR 0 11
2742: PPUSH
2743: CALL_OW 74
2747: ST_TO_ADDR
2748: GO 2770
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2750: LD_ADDR_VAR 0 10
2754: PUSH
2755: LD_VAR 0 8
2759: PPUSH
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 74
2769: ST_TO_ADDR
// if not enemy then
2770: LD_VAR 0 10
2774: NOT
2775: IFFALSE 2779
// exit ;
2777: GO 3180
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2779: LD_VAR 0 11
2783: PUSH
2784: LD_VAR 0 11
2788: PPUSH
2789: LD_VAR 0 10
2793: PPUSH
2794: CALL_OW 296
2798: PUSH
2799: LD_INT 13
2801: GREATER
2802: AND
2803: PUSH
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_VAR 0 10
2813: PPUSH
2814: CALL_OW 296
2818: PUSH
2819: LD_INT 12
2821: GREATER
2822: OR
2823: IFFALSE 2827
// exit ;
2825: GO 3180
// missile := [ 1 ] ;
2827: LD_ADDR_VAR 0 14
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2838: LD_VAR 0 9
2842: PPUSH
2843: LD_VAR 0 12
2847: PPUSH
2848: CALL_OW 325
2852: IFFALSE 2881
// missile := Replace ( missile , missile + 1 , 2 ) ;
2854: LD_ADDR_VAR 0 14
2858: PUSH
2859: LD_VAR 0 14
2863: PPUSH
2864: LD_VAR 0 14
2868: PUSH
2869: LD_INT 1
2871: PLUS
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 1
2880: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2881: LD_VAR 0 9
2885: PPUSH
2886: LD_VAR 0 13
2890: PPUSH
2891: CALL_OW 325
2895: PUSH
2896: LD_VAR 0 10
2900: PPUSH
2901: CALL_OW 255
2905: PPUSH
2906: LD_VAR 0 13
2910: PPUSH
2911: CALL_OW 325
2915: NOT
2916: AND
2917: IFFALSE 2946
// missile := Replace ( missile , missile + 1 , 3 ) ;
2919: LD_ADDR_VAR 0 14
2923: PUSH
2924: LD_VAR 0 14
2928: PPUSH
2929: LD_VAR 0 14
2933: PUSH
2934: LD_INT 1
2936: PLUS
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: CALL_OW 1
2945: ST_TO_ADDR
// if missile < 2 then
2946: LD_VAR 0 14
2950: PUSH
2951: LD_INT 2
2953: LESS
2954: IFFALSE 2958
// exit ;
2956: GO 3180
// x := GetX ( enemy ) ;
2958: LD_ADDR_VAR 0 4
2962: PUSH
2963: LD_VAR 0 10
2967: PPUSH
2968: CALL_OW 250
2972: ST_TO_ADDR
// y := GetY ( enemy ) ;
2973: LD_ADDR_VAR 0 5
2977: PUSH
2978: LD_VAR 0 10
2982: PPUSH
2983: CALL_OW 251
2987: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2988: LD_ADDR_VAR 0 6
2992: PUSH
2993: LD_VAR 0 4
2997: PUSH
2998: LD_INT 1
3000: NEG
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: CALL_OW 12
3009: PLUS
3010: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3011: LD_ADDR_VAR 0 7
3015: PUSH
3016: LD_VAR 0 5
3020: PUSH
3021: LD_INT 1
3023: NEG
3024: PPUSH
3025: LD_INT 1
3027: PPUSH
3028: CALL_OW 12
3032: PLUS
3033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3034: LD_VAR 0 6
3038: PPUSH
3039: LD_VAR 0 7
3043: PPUSH
3044: CALL_OW 488
3048: NOT
3049: IFFALSE 3071
// begin _x := x ;
3051: LD_ADDR_VAR 0 6
3055: PUSH
3056: LD_VAR 0 4
3060: ST_TO_ADDR
// _y := y ;
3061: LD_ADDR_VAR 0 7
3065: PUSH
3066: LD_VAR 0 5
3070: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3071: LD_ADDR_VAR 0 3
3075: PUSH
3076: LD_INT 1
3078: PPUSH
3079: LD_VAR 0 14
3083: PPUSH
3084: CALL_OW 12
3088: ST_TO_ADDR
// case i of 1 :
3089: LD_VAR 0 3
3093: PUSH
3094: LD_INT 1
3096: DOUBLE
3097: EQUAL
3098: IFTRUE 3102
3100: GO 3119
3102: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3103: LD_VAR 0 1
3107: PPUSH
3108: LD_VAR 0 10
3112: PPUSH
3113: CALL_OW 115
3117: GO 3180
3119: LD_INT 2
3121: DOUBLE
3122: EQUAL
3123: IFTRUE 3127
3125: GO 3149
3127: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3128: LD_VAR 0 1
3132: PPUSH
3133: LD_VAR 0 6
3137: PPUSH
3138: LD_VAR 0 7
3142: PPUSH
3143: CALL_OW 153
3147: GO 3180
3149: LD_INT 3
3151: DOUBLE
3152: EQUAL
3153: IFTRUE 3157
3155: GO 3179
3157: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3158: LD_VAR 0 1
3162: PPUSH
3163: LD_VAR 0 6
3167: PPUSH
3168: LD_VAR 0 7
3172: PPUSH
3173: CALL_OW 154
3177: GO 3180
3179: POP
// end ;
3180: LD_VAR 0 2
3184: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3185: LD_INT 0
3187: PPUSH
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
// if not unit or not building then
3193: LD_VAR 0 1
3197: NOT
3198: PUSH
3199: LD_VAR 0 2
3203: NOT
3204: OR
3205: IFFALSE 3209
// exit ;
3207: GO 3367
// x := GetX ( building ) ;
3209: LD_ADDR_VAR 0 5
3213: PUSH
3214: LD_VAR 0 2
3218: PPUSH
3219: CALL_OW 250
3223: ST_TO_ADDR
// y := GetY ( building ) ;
3224: LD_ADDR_VAR 0 6
3228: PUSH
3229: LD_VAR 0 2
3233: PPUSH
3234: CALL_OW 251
3238: ST_TO_ADDR
// for i = 0 to 5 do
3239: LD_ADDR_VAR 0 4
3243: PUSH
3244: DOUBLE
3245: LD_INT 0
3247: DEC
3248: ST_TO_ADDR
3249: LD_INT 5
3251: PUSH
3252: FOR_TO
3253: IFFALSE 3365
// begin _x := ShiftX ( x , i , 3 ) ;
3255: LD_ADDR_VAR 0 7
3259: PUSH
3260: LD_VAR 0 5
3264: PPUSH
3265: LD_VAR 0 4
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: CALL_OW 272
3277: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3278: LD_ADDR_VAR 0 8
3282: PUSH
3283: LD_VAR 0 6
3287: PPUSH
3288: LD_VAR 0 4
3292: PPUSH
3293: LD_INT 3
3295: PPUSH
3296: CALL_OW 273
3300: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3301: LD_VAR 0 7
3305: PPUSH
3306: LD_VAR 0 8
3310: PPUSH
3311: CALL_OW 488
3315: NOT
3316: IFFALSE 3320
// continue ;
3318: GO 3252
// if HexInfo ( _x , _y ) = 0 then
3320: LD_VAR 0 7
3324: PPUSH
3325: LD_VAR 0 8
3329: PPUSH
3330: CALL_OW 428
3334: PUSH
3335: LD_INT 0
3337: EQUAL
3338: IFFALSE 3363
// begin ComMoveXY ( unit , _x , _y ) ;
3340: LD_VAR 0 1
3344: PPUSH
3345: LD_VAR 0 7
3349: PPUSH
3350: LD_VAR 0 8
3354: PPUSH
3355: CALL_OW 111
// exit ;
3359: POP
3360: POP
3361: GO 3367
// end ; end ;
3363: GO 3252
3365: POP
3366: POP
// end ;
3367: LD_VAR 0 3
3371: RET
// export function ScanBase ( side , base_area ) ; begin
3372: LD_INT 0
3374: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3375: LD_ADDR_VAR 0 3
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 81
3387: PUSH
3388: LD_VAR 0 1
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 70
3401: ST_TO_ADDR
// end ;
3402: LD_VAR 0 3
3406: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3407: LD_INT 0
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
// result := false ;
3413: LD_ADDR_VAR 0 2
3417: PUSH
3418: LD_INT 0
3420: ST_TO_ADDR
// side := GetSide ( unit ) ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_VAR 0 1
3430: PPUSH
3431: CALL_OW 255
3435: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3436: LD_ADDR_VAR 0 4
3440: PUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 248
3450: ST_TO_ADDR
// case nat of 1 :
3451: LD_VAR 0 4
3455: PUSH
3456: LD_INT 1
3458: DOUBLE
3459: EQUAL
3460: IFTRUE 3464
3462: GO 3475
3464: POP
// tech := tech_lassight ; 2 :
3465: LD_ADDR_VAR 0 5
3469: PUSH
3470: LD_INT 12
3472: ST_TO_ADDR
3473: GO 3514
3475: LD_INT 2
3477: DOUBLE
3478: EQUAL
3479: IFTRUE 3483
3481: GO 3494
3483: POP
// tech := tech_mortar ; 3 :
3484: LD_ADDR_VAR 0 5
3488: PUSH
3489: LD_INT 41
3491: ST_TO_ADDR
3492: GO 3514
3494: LD_INT 3
3496: DOUBLE
3497: EQUAL
3498: IFTRUE 3502
3500: GO 3513
3502: POP
// tech := tech_bazooka ; end ;
3503: LD_ADDR_VAR 0 5
3507: PUSH
3508: LD_INT 44
3510: ST_TO_ADDR
3511: GO 3514
3513: POP
// if Researched ( side , tech ) then
3514: LD_VAR 0 3
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: CALL_OW 325
3528: IFFALSE 3555
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3530: LD_ADDR_VAR 0 2
3534: PUSH
3535: LD_INT 5
3537: PUSH
3538: LD_INT 8
3540: PUSH
3541: LD_INT 9
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_VAR 0 4
3553: ARRAY
3554: ST_TO_ADDR
// end ;
3555: LD_VAR 0 2
3559: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// if not mines then
3565: LD_VAR 0 2
3569: NOT
3570: IFFALSE 3574
// exit ;
3572: GO 3718
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3574: LD_ADDR_VAR 0 5
3578: PUSH
3579: LD_INT 81
3581: PUSH
3582: LD_VAR 0 1
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 3
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 69
3616: ST_TO_ADDR
// for i in mines do
3617: LD_ADDR_VAR 0 4
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3716
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3630: LD_VAR 0 4
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_INT 2
3646: ARRAY
3647: PPUSH
3648: CALL_OW 458
3652: NOT
3653: IFFALSE 3657
// continue ;
3655: GO 3627
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3657: LD_VAR 0 4
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: PPUSH
3666: LD_VAR 0 4
3670: PUSH
3671: LD_INT 2
3673: ARRAY
3674: PPUSH
3675: CALL_OW 428
3679: PUSH
3680: LD_VAR 0 5
3684: IN
3685: IFFALSE 3714
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3687: LD_VAR 0 4
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: PPUSH
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 456
// end ;
3714: GO 3627
3716: POP
3717: POP
// end ;
3718: LD_VAR 0 3
3722: RET
// export function Count ( array ) ; begin
3723: LD_INT 0
3725: PPUSH
// result := array + 0 ;
3726: LD_ADDR_VAR 0 2
3730: PUSH
3731: LD_VAR 0 1
3735: PUSH
3736: LD_INT 0
3738: PLUS
3739: ST_TO_ADDR
// end ;
3740: LD_VAR 0 2
3744: RET
// export function IsEmpty ( building ) ; begin
3745: LD_INT 0
3747: PPUSH
// if not building then
3748: LD_VAR 0 1
3752: NOT
3753: IFFALSE 3757
// exit ;
3755: GO 3800
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_VAR 0 1
3766: PUSH
3767: LD_INT 22
3769: PUSH
3770: LD_VAR 0 1
3774: PPUSH
3775: CALL_OW 255
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 58
3786: PUSH
3787: EMPTY
3788: LIST
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: IN
3799: ST_TO_ADDR
// end ;
3800: LD_VAR 0 2
3804: RET
// export function IsNotFull ( building ) ; var places ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
// if not building then
3809: LD_VAR 0 1
3813: NOT
3814: IFFALSE 3818
// exit ;
3816: GO 3846
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_INT 3
3830: PUSH
3831: LD_INT 62
3833: PUSH
3834: EMPTY
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PPUSH
3841: CALL_OW 72
3845: ST_TO_ADDR
// end ;
3846: LD_VAR 0 2
3850: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
3855: PPUSH
3856: PPUSH
// tmp := [ ] ;
3857: LD_ADDR_VAR 0 3
3861: PUSH
3862: EMPTY
3863: ST_TO_ADDR
// list := [ ] ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: EMPTY
3870: ST_TO_ADDR
// for i = 16 to 25 do
3871: LD_ADDR_VAR 0 4
3875: PUSH
3876: DOUBLE
3877: LD_INT 16
3879: DEC
3880: ST_TO_ADDR
3881: LD_INT 25
3883: PUSH
3884: FOR_TO
3885: IFFALSE 3958
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_VAR 0 3
3896: PUSH
3897: LD_INT 22
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 255
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 6
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 30
3932: PUSH
3933: LD_VAR 0 4
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: PUSH
3947: EMPTY
3948: LIST
3949: PPUSH
3950: CALL_OW 69
3954: ADD
3955: ST_TO_ADDR
3956: GO 3884
3958: POP
3959: POP
// for i = 1 to tmp do
3960: LD_ADDR_VAR 0 4
3964: PUSH
3965: DOUBLE
3966: LD_INT 1
3968: DEC
3969: ST_TO_ADDR
3970: LD_VAR 0 3
3974: PUSH
3975: FOR_TO
3976: IFFALSE 4064
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3978: LD_ADDR_VAR 0 5
3982: PUSH
3983: LD_VAR 0 5
3987: PUSH
3988: LD_VAR 0 3
3992: PUSH
3993: LD_VAR 0 4
3997: ARRAY
3998: PPUSH
3999: CALL_OW 266
4003: PUSH
4004: LD_VAR 0 3
4008: PUSH
4009: LD_VAR 0 4
4013: ARRAY
4014: PPUSH
4015: CALL_OW 250
4019: PUSH
4020: LD_VAR 0 3
4024: PUSH
4025: LD_VAR 0 4
4029: ARRAY
4030: PPUSH
4031: CALL_OW 251
4035: PUSH
4036: LD_VAR 0 3
4040: PUSH
4041: LD_VAR 0 4
4045: ARRAY
4046: PPUSH
4047: CALL_OW 254
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: PUSH
4058: EMPTY
4059: LIST
4060: ADD
4061: ST_TO_ADDR
4062: GO 3975
4064: POP
4065: POP
// result := list ;
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: LD_VAR 0 5
4075: ST_TO_ADDR
// end ;
4076: LD_VAR 0 2
4080: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4081: LD_INT 0
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// if not factory then
4090: LD_VAR 0 1
4094: NOT
4095: IFFALSE 4099
// exit ;
4097: GO 4692
// if control = control_apeman then
4099: LD_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: EQUAL
4107: IFFALSE 4216
// begin tmp := UnitsInside ( factory ) ;
4109: LD_ADDR_VAR 0 8
4113: PUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: CALL_OW 313
4123: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4124: LD_VAR 0 8
4128: PPUSH
4129: LD_INT 25
4131: PUSH
4132: LD_INT 12
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PPUSH
4139: CALL_OW 72
4143: NOT
4144: IFFALSE 4154
// control := control_manual ;
4146: LD_ADDR_VAR 0 4
4150: PUSH
4151: LD_INT 1
4153: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4154: LD_ADDR_VAR 0 8
4158: PUSH
4159: LD_VAR 0 1
4163: PPUSH
4164: CALL 3851 0 1
4168: ST_TO_ADDR
// if tmp then
4169: LD_VAR 0 8
4173: IFFALSE 4216
// begin for i in tmp do
4175: LD_ADDR_VAR 0 7
4179: PUSH
4180: LD_VAR 0 8
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4214
// if i [ 1 ] = b_ext_radio then
4188: LD_VAR 0 7
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: PUSH
4197: LD_INT 22
4199: EQUAL
4200: IFFALSE 4212
// begin control := control_remote ;
4202: LD_ADDR_VAR 0 4
4206: PUSH
4207: LD_INT 2
4209: ST_TO_ADDR
// break ;
4210: GO 4214
// end ;
4212: GO 4185
4214: POP
4215: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4216: LD_VAR 0 1
4220: PPUSH
4221: LD_VAR 0 2
4225: PPUSH
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: CALL_OW 448
4245: IFFALSE 4280
// begin result := [ chassis , engine , control , weapon ] ;
4247: LD_ADDR_VAR 0 6
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_VAR 0 3
4261: PUSH
4262: LD_VAR 0 4
4266: PUSH
4267: LD_VAR 0 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: ST_TO_ADDR
// exit ;
4278: GO 4692
// end ; _chassis := AvailableChassisList ( factory ) ;
4280: LD_ADDR_VAR 0 9
4284: PUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL_OW 475
4294: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4295: LD_ADDR_VAR 0 11
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL_OW 476
4309: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4310: LD_ADDR_VAR 0 12
4314: PUSH
4315: LD_VAR 0 1
4319: PPUSH
4320: CALL_OW 477
4324: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4325: LD_ADDR_VAR 0 10
4329: PUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: CALL_OW 478
4339: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4340: LD_VAR 0 9
4344: NOT
4345: PUSH
4346: LD_VAR 0 11
4350: NOT
4351: OR
4352: PUSH
4353: LD_VAR 0 12
4357: NOT
4358: OR
4359: PUSH
4360: LD_VAR 0 10
4364: NOT
4365: OR
4366: IFFALSE 4401
// begin result := [ chassis , engine , control , weapon ] ;
4368: LD_ADDR_VAR 0 6
4372: PUSH
4373: LD_VAR 0 2
4377: PUSH
4378: LD_VAR 0 3
4382: PUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_VAR 0 5
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: ST_TO_ADDR
// exit ;
4399: GO 4692
// end ; if not chassis in _chassis then
4401: LD_VAR 0 2
4405: PUSH
4406: LD_VAR 0 9
4410: IN
4411: NOT
4412: IFFALSE 4438
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: LD_VAR 0 9
4423: PUSH
4424: LD_INT 1
4426: PPUSH
4427: LD_VAR 0 9
4431: PPUSH
4432: CALL_OW 12
4436: ARRAY
4437: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4438: LD_VAR 0 2
4442: PPUSH
4443: LD_VAR 0 3
4447: PPUSH
4448: CALL 4697 0 2
4452: NOT
4453: IFFALSE 4512
// repeat engine := _engine [ 1 ] ;
4455: LD_ADDR_VAR 0 3
4459: PUSH
4460: LD_VAR 0 11
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4469: LD_ADDR_VAR 0 11
4473: PUSH
4474: LD_VAR 0 11
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL_OW 3
4486: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4487: LD_VAR 0 2
4491: PPUSH
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL 4697 0 2
4501: PUSH
4502: LD_VAR 0 11
4506: PUSH
4507: EMPTY
4508: EQUAL
4509: OR
4510: IFFALSE 4455
// if not control in _control then
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 12
4521: IN
4522: NOT
4523: IFFALSE 4549
// control := _control [ rand ( 1 , _control ) ] ;
4525: LD_ADDR_VAR 0 4
4529: PUSH
4530: LD_VAR 0 12
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_VAR 0 12
4542: PPUSH
4543: CALL_OW 12
4547: ARRAY
4548: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4549: LD_VAR 0 2
4553: PPUSH
4554: LD_VAR 0 5
4558: PPUSH
4559: CALL 4917 0 2
4563: NOT
4564: IFFALSE 4623
// repeat weapon := _weapon [ 1 ] ;
4566: LD_ADDR_VAR 0 5
4570: PUSH
4571: LD_VAR 0 10
4575: PUSH
4576: LD_INT 1
4578: ARRAY
4579: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4580: LD_ADDR_VAR 0 10
4584: PUSH
4585: LD_VAR 0 10
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: CALL_OW 3
4597: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4598: LD_VAR 0 2
4602: PPUSH
4603: LD_VAR 0 5
4607: PPUSH
4608: CALL 4917 0 2
4612: PUSH
4613: LD_VAR 0 10
4617: PUSH
4618: EMPTY
4619: EQUAL
4620: OR
4621: IFFALSE 4566
// result := [ ] ;
4623: LD_ADDR_VAR 0 6
4627: PUSH
4628: EMPTY
4629: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4630: LD_VAR 0 1
4634: PPUSH
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_VAR 0 3
4644: PPUSH
4645: LD_VAR 0 4
4649: PPUSH
4650: LD_VAR 0 5
4654: PPUSH
4655: CALL_OW 448
4659: IFFALSE 4692
// result := [ chassis , engine , control , weapon ] ;
4661: LD_ADDR_VAR 0 6
4665: PUSH
4666: LD_VAR 0 2
4670: PUSH
4671: LD_VAR 0 3
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: LD_VAR 0 5
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: ST_TO_ADDR
// end ;
4692: LD_VAR 0 6
4696: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4697: LD_INT 0
4699: PPUSH
// if not chassis or not engine then
4700: LD_VAR 0 1
4704: NOT
4705: PUSH
4706: LD_VAR 0 2
4710: NOT
4711: OR
4712: IFFALSE 4716
// exit ;
4714: GO 4912
// case engine of engine_solar :
4716: LD_VAR 0 2
4720: PUSH
4721: LD_INT 2
4723: DOUBLE
4724: EQUAL
4725: IFTRUE 4729
4727: GO 4767
4729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4730: LD_ADDR_VAR 0 3
4734: PUSH
4735: LD_INT 11
4737: PUSH
4738: LD_INT 12
4740: PUSH
4741: LD_INT 13
4743: PUSH
4744: LD_INT 14
4746: PUSH
4747: LD_INT 1
4749: PUSH
4750: LD_INT 2
4752: PUSH
4753: LD_INT 3
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 4896
4767: LD_INT 1
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4837
4775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 11
4783: PUSH
4784: LD_INT 12
4786: PUSH
4787: LD_INT 13
4789: PUSH
4790: LD_INT 14
4792: PUSH
4793: LD_INT 1
4795: PUSH
4796: LD_INT 2
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: LD_INT 4
4804: PUSH
4805: LD_INT 5
4807: PUSH
4808: LD_INT 21
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 22
4816: PUSH
4817: LD_INT 24
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: ST_TO_ADDR
4835: GO 4896
4837: LD_INT 3
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4895
4845: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4846: LD_ADDR_VAR 0 3
4850: PUSH
4851: LD_INT 13
4853: PUSH
4854: LD_INT 14
4856: PUSH
4857: LD_INT 2
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 4
4865: PUSH
4866: LD_INT 5
4868: PUSH
4869: LD_INT 21
4871: PUSH
4872: LD_INT 22
4874: PUSH
4875: LD_INT 23
4877: PUSH
4878: LD_INT 24
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
4893: GO 4896
4895: POP
// result := ( chassis in result ) ;
4896: LD_ADDR_VAR 0 3
4900: PUSH
4901: LD_VAR 0 1
4905: PUSH
4906: LD_VAR 0 3
4910: IN
4911: ST_TO_ADDR
// end ;
4912: LD_VAR 0 3
4916: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4917: LD_INT 0
4919: PPUSH
// if not chassis or not weapon then
4920: LD_VAR 0 1
4924: NOT
4925: PUSH
4926: LD_VAR 0 2
4930: NOT
4931: OR
4932: IFFALSE 4936
// exit ;
4934: GO 5996
// case weapon of us_machine_gun :
4936: LD_VAR 0 2
4940: PUSH
4941: LD_INT 2
4943: DOUBLE
4944: EQUAL
4945: IFTRUE 4949
4947: GO 4979
4949: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4950: LD_ADDR_VAR 0 3
4954: PUSH
4955: LD_INT 1
4957: PUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: LD_INT 5
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5980
4979: LD_INT 3
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5017
4987: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 1
4995: PUSH
4996: LD_INT 2
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: ST_TO_ADDR
5015: GO 5980
5017: LD_INT 11
5019: DOUBLE
5020: EQUAL
5021: IFTRUE 5025
5023: GO 5055
5025: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: LD_INT 1
5033: PUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: LD_INT 4
5042: PUSH
5043: LD_INT 5
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 5980
5055: LD_INT 4
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5089
5063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5064: LD_ADDR_VAR 0 3
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 4
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: ST_TO_ADDR
5087: GO 5980
5089: LD_INT 5
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5097
5095: GO 5123
5097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5098: LD_ADDR_VAR 0 3
5102: PUSH
5103: LD_INT 2
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: LD_INT 5
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 5980
5123: LD_INT 9
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5157
5131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 4
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: ST_TO_ADDR
5155: GO 5980
5157: LD_INT 7
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5191
5165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: ST_TO_ADDR
5189: GO 5980
5191: LD_INT 12
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5199
5197: GO 5225
5199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_INT 3
5210: PUSH
5211: LD_INT 4
5213: PUSH
5214: LD_INT 5
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
5223: GO 5980
5225: LD_INT 13
5227: DOUBLE
5228: EQUAL
5229: IFTRUE 5233
5231: GO 5259
5233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5234: LD_ADDR_VAR 0 3
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: LD_INT 3
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: ST_TO_ADDR
5257: GO 5980
5259: LD_INT 14
5261: DOUBLE
5262: EQUAL
5263: IFTRUE 5267
5265: GO 5285
5267: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5268: LD_ADDR_VAR 0 3
5272: PUSH
5273: LD_INT 4
5275: PUSH
5276: LD_INT 5
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: ST_TO_ADDR
5283: GO 5980
5285: LD_INT 6
5287: DOUBLE
5288: EQUAL
5289: IFTRUE 5293
5291: GO 5311
5293: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5294: LD_ADDR_VAR 0 3
5298: PUSH
5299: LD_INT 4
5301: PUSH
5302: LD_INT 5
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: ST_TO_ADDR
5309: GO 5980
5311: LD_INT 10
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5319
5317: GO 5337
5319: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5320: LD_ADDR_VAR 0 3
5324: PUSH
5325: LD_INT 4
5327: PUSH
5328: LD_INT 5
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: ST_TO_ADDR
5335: GO 5980
5337: LD_INT 22
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5371
5345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_INT 11
5353: PUSH
5354: LD_INT 12
5356: PUSH
5357: LD_INT 13
5359: PUSH
5360: LD_INT 14
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: ST_TO_ADDR
5369: GO 5980
5371: LD_INT 23
5373: DOUBLE
5374: EQUAL
5375: IFTRUE 5379
5377: GO 5405
5379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5380: LD_ADDR_VAR 0 3
5384: PUSH
5385: LD_INT 11
5387: PUSH
5388: LD_INT 12
5390: PUSH
5391: LD_INT 13
5393: PUSH
5394: LD_INT 14
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: ST_TO_ADDR
5403: GO 5980
5405: LD_INT 24
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5439
5413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: LD_INT 11
5421: PUSH
5422: LD_INT 12
5424: PUSH
5425: LD_INT 13
5427: PUSH
5428: LD_INT 14
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ST_TO_ADDR
5437: GO 5980
5439: LD_INT 30
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5473
5447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: LD_INT 11
5455: PUSH
5456: LD_INT 12
5458: PUSH
5459: LD_INT 13
5461: PUSH
5462: LD_INT 14
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: ST_TO_ADDR
5471: GO 5980
5473: LD_INT 25
5475: DOUBLE
5476: EQUAL
5477: IFTRUE 5481
5479: GO 5499
5481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5482: LD_ADDR_VAR 0 3
5486: PUSH
5487: LD_INT 13
5489: PUSH
5490: LD_INT 14
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: ST_TO_ADDR
5497: GO 5980
5499: LD_INT 27
5501: DOUBLE
5502: EQUAL
5503: IFTRUE 5507
5505: GO 5525
5507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5508: LD_ADDR_VAR 0 3
5512: PUSH
5513: LD_INT 13
5515: PUSH
5516: LD_INT 14
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: ST_TO_ADDR
5523: GO 5980
5525: LD_INT 92
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 5559
5533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5534: LD_ADDR_VAR 0 3
5538: PUSH
5539: LD_INT 11
5541: PUSH
5542: LD_INT 12
5544: PUSH
5545: LD_INT 13
5547: PUSH
5548: LD_INT 14
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
5557: GO 5980
5559: LD_INT 28
5561: DOUBLE
5562: EQUAL
5563: IFTRUE 5567
5565: GO 5585
5567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_INT 13
5575: PUSH
5576: LD_INT 14
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: ST_TO_ADDR
5583: GO 5980
5585: LD_INT 29
5587: DOUBLE
5588: EQUAL
5589: IFTRUE 5593
5591: GO 5611
5593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5594: LD_ADDR_VAR 0 3
5598: PUSH
5599: LD_INT 13
5601: PUSH
5602: LD_INT 14
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: ST_TO_ADDR
5609: GO 5980
5611: LD_INT 31
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5619
5617: GO 5637
5619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5620: LD_ADDR_VAR 0 3
5624: PUSH
5625: LD_INT 13
5627: PUSH
5628: LD_INT 14
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: ST_TO_ADDR
5635: GO 5980
5637: LD_INT 26
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5645
5643: GO 5663
5645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5646: LD_ADDR_VAR 0 3
5650: PUSH
5651: LD_INT 13
5653: PUSH
5654: LD_INT 14
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: ST_TO_ADDR
5661: GO 5980
5663: LD_INT 42
5665: DOUBLE
5666: EQUAL
5667: IFTRUE 5671
5669: GO 5697
5671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5672: LD_ADDR_VAR 0 3
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 24
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: ST_TO_ADDR
5695: GO 5980
5697: LD_INT 43
5699: DOUBLE
5700: EQUAL
5701: IFTRUE 5705
5703: GO 5731
5705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5706: LD_ADDR_VAR 0 3
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 22
5716: PUSH
5717: LD_INT 23
5719: PUSH
5720: LD_INT 24
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
5729: GO 5980
5731: LD_INT 44
5733: DOUBLE
5734: EQUAL
5735: IFTRUE 5739
5737: GO 5765
5739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5740: LD_ADDR_VAR 0 3
5744: PUSH
5745: LD_INT 21
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 23
5753: PUSH
5754: LD_INT 24
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: ST_TO_ADDR
5763: GO 5980
5765: LD_INT 45
5767: DOUBLE
5768: EQUAL
5769: IFTRUE 5773
5771: GO 5799
5773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 22
5784: PUSH
5785: LD_INT 23
5787: PUSH
5788: LD_INT 24
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: ST_TO_ADDR
5797: GO 5980
5799: LD_INT 49
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5833
5807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 22
5818: PUSH
5819: LD_INT 23
5821: PUSH
5822: LD_INT 24
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: ST_TO_ADDR
5831: GO 5980
5833: LD_INT 51
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5841
5839: GO 5867
5841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 23
5855: PUSH
5856: LD_INT 24
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 5980
5867: LD_INT 52
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5901
5875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_INT 23
5889: PUSH
5890: LD_INT 24
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: ST_TO_ADDR
5899: GO 5980
5901: LD_INT 53
5903: DOUBLE
5904: EQUAL
5905: IFTRUE 5909
5907: GO 5927
5909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: LD_INT 23
5917: PUSH
5918: LD_INT 24
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: ST_TO_ADDR
5925: GO 5980
5927: LD_INT 46
5929: DOUBLE
5930: EQUAL
5931: IFTRUE 5935
5933: GO 5953
5935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5936: LD_ADDR_VAR 0 3
5940: PUSH
5941: LD_INT 23
5943: PUSH
5944: LD_INT 24
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: ST_TO_ADDR
5951: GO 5980
5953: LD_INT 47
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5979
5961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 23
5969: PUSH
5970: LD_INT 24
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: ST_TO_ADDR
5977: GO 5980
5979: POP
// result := ( chassis in result ) ;
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: LD_VAR 0 1
5989: PUSH
5990: LD_VAR 0 3
5994: IN
5995: ST_TO_ADDR
// end ;
5996: LD_VAR 0 3
6000: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6001: LD_INT 0
6003: PPUSH
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
6009: PPUSH
// result := array ;
6010: LD_ADDR_VAR 0 5
6014: PUSH
6015: LD_VAR 0 1
6019: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6020: LD_VAR 0 1
6024: NOT
6025: PUSH
6026: LD_VAR 0 2
6030: NOT
6031: OR
6032: PUSH
6033: LD_VAR 0 3
6037: NOT
6038: OR
6039: PUSH
6040: LD_VAR 0 2
6044: PUSH
6045: LD_VAR 0 1
6049: GREATER
6050: OR
6051: PUSH
6052: LD_VAR 0 3
6056: PUSH
6057: LD_VAR 0 1
6061: GREATER
6062: OR
6063: IFFALSE 6067
// exit ;
6065: GO 6363
// if direction then
6067: LD_VAR 0 4
6071: IFFALSE 6135
// begin d := 1 ;
6073: LD_ADDR_VAR 0 9
6077: PUSH
6078: LD_INT 1
6080: ST_TO_ADDR
// if i_from > i_to then
6081: LD_VAR 0 2
6085: PUSH
6086: LD_VAR 0 3
6090: GREATER
6091: IFFALSE 6117
// length := ( array - i_from ) + i_to else
6093: LD_ADDR_VAR 0 11
6097: PUSH
6098: LD_VAR 0 1
6102: PUSH
6103: LD_VAR 0 2
6107: MINUS
6108: PUSH
6109: LD_VAR 0 3
6113: PLUS
6114: ST_TO_ADDR
6115: GO 6133
// length := i_to - i_from ;
6117: LD_ADDR_VAR 0 11
6121: PUSH
6122: LD_VAR 0 3
6126: PUSH
6127: LD_VAR 0 2
6131: MINUS
6132: ST_TO_ADDR
// end else
6133: GO 6196
// begin d := - 1 ;
6135: LD_ADDR_VAR 0 9
6139: PUSH
6140: LD_INT 1
6142: NEG
6143: ST_TO_ADDR
// if i_from > i_to then
6144: LD_VAR 0 2
6148: PUSH
6149: LD_VAR 0 3
6153: GREATER
6154: IFFALSE 6174
// length := i_from - i_to else
6156: LD_ADDR_VAR 0 11
6160: PUSH
6161: LD_VAR 0 2
6165: PUSH
6166: LD_VAR 0 3
6170: MINUS
6171: ST_TO_ADDR
6172: GO 6196
// length := ( array - i_to ) + i_from ;
6174: LD_ADDR_VAR 0 11
6178: PUSH
6179: LD_VAR 0 1
6183: PUSH
6184: LD_VAR 0 3
6188: MINUS
6189: PUSH
6190: LD_VAR 0 2
6194: PLUS
6195: ST_TO_ADDR
// end ; if not length then
6196: LD_VAR 0 11
6200: NOT
6201: IFFALSE 6205
// exit ;
6203: GO 6363
// tmp := array ;
6205: LD_ADDR_VAR 0 10
6209: PUSH
6210: LD_VAR 0 1
6214: ST_TO_ADDR
// for i = 1 to length do
6215: LD_ADDR_VAR 0 6
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_VAR 0 11
6229: PUSH
6230: FOR_TO
6231: IFFALSE 6351
// begin for j = 1 to array do
6233: LD_ADDR_VAR 0 7
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_VAR 0 1
6247: PUSH
6248: FOR_TO
6249: IFFALSE 6337
// begin k := j + d ;
6251: LD_ADDR_VAR 0 8
6255: PUSH
6256: LD_VAR 0 7
6260: PUSH
6261: LD_VAR 0 9
6265: PLUS
6266: ST_TO_ADDR
// if k > array then
6267: LD_VAR 0 8
6271: PUSH
6272: LD_VAR 0 1
6276: GREATER
6277: IFFALSE 6287
// k := 1 ;
6279: LD_ADDR_VAR 0 8
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if not k then
6287: LD_VAR 0 8
6291: NOT
6292: IFFALSE 6304
// k := array ;
6294: LD_ADDR_VAR 0 8
6298: PUSH
6299: LD_VAR 0 1
6303: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6304: LD_ADDR_VAR 0 10
6308: PUSH
6309: LD_VAR 0 10
6313: PPUSH
6314: LD_VAR 0 8
6318: PPUSH
6319: LD_VAR 0 1
6323: PUSH
6324: LD_VAR 0 7
6328: ARRAY
6329: PPUSH
6330: CALL_OW 1
6334: ST_TO_ADDR
// end ;
6335: GO 6248
6337: POP
6338: POP
// array := tmp ;
6339: LD_ADDR_VAR 0 1
6343: PUSH
6344: LD_VAR 0 10
6348: ST_TO_ADDR
// end ;
6349: GO 6230
6351: POP
6352: POP
// result := array ;
6353: LD_ADDR_VAR 0 5
6357: PUSH
6358: LD_VAR 0 1
6362: ST_TO_ADDR
// end ;
6363: LD_VAR 0 5
6367: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6368: LD_INT 0
6370: PPUSH
6371: PPUSH
// result := 0 ;
6372: LD_ADDR_VAR 0 3
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// if not array or not value in array then
6380: LD_VAR 0 1
6384: NOT
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_VAR 0 1
6395: IN
6396: NOT
6397: OR
6398: IFFALSE 6402
// exit ;
6400: GO 6456
// for i = 1 to array do
6402: LD_ADDR_VAR 0 4
6406: PUSH
6407: DOUBLE
6408: LD_INT 1
6410: DEC
6411: ST_TO_ADDR
6412: LD_VAR 0 1
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6454
// if value = array [ i ] then
6420: LD_VAR 0 2
6424: PUSH
6425: LD_VAR 0 1
6429: PUSH
6430: LD_VAR 0 4
6434: ARRAY
6435: EQUAL
6436: IFFALSE 6452
// begin result := i ;
6438: LD_ADDR_VAR 0 3
6442: PUSH
6443: LD_VAR 0 4
6447: ST_TO_ADDR
// exit ;
6448: POP
6449: POP
6450: GO 6456
// end ;
6452: GO 6417
6454: POP
6455: POP
// end ;
6456: LD_VAR 0 3
6460: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6461: LD_INT 0
6463: PPUSH
// vc_chassis := chassis ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 1
6473: ST_TO_ADDR
// vc_engine := engine ;
6474: LD_ADDR_OWVAR 39
6478: PUSH
6479: LD_VAR 0 2
6483: ST_TO_ADDR
// vc_control := control ;
6484: LD_ADDR_OWVAR 38
6488: PUSH
6489: LD_VAR 0 3
6493: ST_TO_ADDR
// vc_weapon := weapon ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 4
6503: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6504: LD_ADDR_OWVAR 41
6508: PUSH
6509: LD_VAR 0 5
6513: ST_TO_ADDR
// end ;
6514: LD_VAR 0 6
6518: RET
// export function WantPlant ( unit ) ; var task ; begin
6519: LD_INT 0
6521: PPUSH
6522: PPUSH
// result := false ;
6523: LD_ADDR_VAR 0 2
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 437
6545: ST_TO_ADDR
// if task then
6546: LD_VAR 0 3
6550: IFFALSE 6578
// if task [ 1 ] [ 1 ] = p then
6552: LD_VAR 0 3
6556: PUSH
6557: LD_INT 1
6559: ARRAY
6560: PUSH
6561: LD_INT 1
6563: ARRAY
6564: PUSH
6565: LD_STRING p
6567: EQUAL
6568: IFFALSE 6578
// result := true ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 1
6577: ST_TO_ADDR
// end ;
6578: LD_VAR 0 2
6582: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
// if pos < 1 then
6589: LD_VAR 0 2
6593: PUSH
6594: LD_INT 1
6596: LESS
6597: IFFALSE 6601
// exit ;
6599: GO 6904
// if pos = 1 then
6601: LD_VAR 0 2
6605: PUSH
6606: LD_INT 1
6608: EQUAL
6609: IFFALSE 6642
// result := Replace ( arr , pos [ 1 ] , value ) else
6611: LD_ADDR_VAR 0 4
6615: PUSH
6616: LD_VAR 0 1
6620: PPUSH
6621: LD_VAR 0 2
6625: PUSH
6626: LD_INT 1
6628: ARRAY
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 1
6639: ST_TO_ADDR
6640: GO 6904
// begin tmp := arr ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_VAR 0 1
6651: ST_TO_ADDR
// s_arr := [ tmp ] ;
6652: LD_ADDR_VAR 0 7
6656: PUSH
6657: LD_VAR 0 6
6661: PUSH
6662: EMPTY
6663: LIST
6664: ST_TO_ADDR
// for i = 1 to pos - 1 do
6665: LD_ADDR_VAR 0 5
6669: PUSH
6670: DOUBLE
6671: LD_INT 1
6673: DEC
6674: ST_TO_ADDR
6675: LD_VAR 0 2
6679: PUSH
6680: LD_INT 1
6682: MINUS
6683: PUSH
6684: FOR_TO
6685: IFFALSE 6730
// begin tmp := tmp [ pos [ i ] ] ;
6687: LD_ADDR_VAR 0 6
6691: PUSH
6692: LD_VAR 0 6
6696: PUSH
6697: LD_VAR 0 2
6701: PUSH
6702: LD_VAR 0 5
6706: ARRAY
6707: ARRAY
6708: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6709: LD_ADDR_VAR 0 7
6713: PUSH
6714: LD_VAR 0 7
6718: PUSH
6719: LD_VAR 0 6
6723: PUSH
6724: EMPTY
6725: LIST
6726: ADD
6727: ST_TO_ADDR
// end ;
6728: GO 6684
6730: POP
6731: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6732: LD_ADDR_VAR 0 6
6736: PUSH
6737: LD_VAR 0 6
6741: PPUSH
6742: LD_VAR 0 2
6746: PUSH
6747: LD_VAR 0 2
6751: ARRAY
6752: PPUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: CALL_OW 1
6762: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6763: LD_ADDR_VAR 0 7
6767: PUSH
6768: LD_VAR 0 7
6772: PPUSH
6773: LD_VAR 0 7
6777: PPUSH
6778: LD_VAR 0 6
6782: PPUSH
6783: CALL_OW 1
6787: ST_TO_ADDR
// for i = s_arr downto 2 do
6788: LD_ADDR_VAR 0 5
6792: PUSH
6793: DOUBLE
6794: LD_VAR 0 7
6798: INC
6799: ST_TO_ADDR
6800: LD_INT 2
6802: PUSH
6803: FOR_DOWNTO
6804: IFFALSE 6888
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6806: LD_ADDR_VAR 0 6
6810: PUSH
6811: LD_VAR 0 7
6815: PUSH
6816: LD_VAR 0 5
6820: PUSH
6821: LD_INT 1
6823: MINUS
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 2
6830: PUSH
6831: LD_VAR 0 5
6835: PUSH
6836: LD_INT 1
6838: MINUS
6839: ARRAY
6840: PPUSH
6841: LD_VAR 0 7
6845: PUSH
6846: LD_VAR 0 5
6850: ARRAY
6851: PPUSH
6852: CALL_OW 1
6856: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6857: LD_ADDR_VAR 0 7
6861: PUSH
6862: LD_VAR 0 7
6866: PPUSH
6867: LD_VAR 0 5
6871: PUSH
6872: LD_INT 1
6874: MINUS
6875: PPUSH
6876: LD_VAR 0 6
6880: PPUSH
6881: CALL_OW 1
6885: ST_TO_ADDR
// end ;
6886: GO 6803
6888: POP
6889: POP
// result := s_arr [ 1 ] ;
6890: LD_ADDR_VAR 0 4
6894: PUSH
6895: LD_VAR 0 7
6899: PUSH
6900: LD_INT 1
6902: ARRAY
6903: ST_TO_ADDR
// end ; end ;
6904: LD_VAR 0 4
6908: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
// if not list then
6913: LD_VAR 0 1
6917: NOT
6918: IFFALSE 6922
// exit ;
6920: GO 7013
// i := list [ pos1 ] ;
6922: LD_ADDR_VAR 0 5
6926: PUSH
6927: LD_VAR 0 1
6931: PUSH
6932: LD_VAR 0 2
6936: ARRAY
6937: ST_TO_ADDR
// if not i then
6938: LD_VAR 0 5
6942: NOT
6943: IFFALSE 6947
// exit ;
6945: GO 7013
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6947: LD_ADDR_VAR 0 1
6951: PUSH
6952: LD_VAR 0 1
6956: PPUSH
6957: LD_VAR 0 2
6961: PPUSH
6962: LD_VAR 0 1
6966: PUSH
6967: LD_VAR 0 3
6971: ARRAY
6972: PPUSH
6973: CALL_OW 1
6977: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_VAR 0 1
6987: PPUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 5
6997: PPUSH
6998: CALL_OW 1
7002: ST_TO_ADDR
// result := list ;
7003: LD_ADDR_VAR 0 4
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 4
7017: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7018: LD_INT 0
7020: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7021: LD_ADDR_VAR 0 5
7025: PUSH
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL_OW 250
7035: PPUSH
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 251
7045: PPUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: LD_VAR 0 3
7055: PPUSH
7056: LD_VAR 0 4
7060: PPUSH
7061: CALL 7439 0 5
7065: ST_TO_ADDR
// end ;
7066: LD_VAR 0 5
7070: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7071: LD_INT 0
7073: PPUSH
7074: PPUSH
7075: PPUSH
7076: PPUSH
// if not list or not unit then
7077: LD_VAR 0 2
7081: NOT
7082: PUSH
7083: LD_VAR 0 1
7087: NOT
7088: OR
7089: IFFALSE 7093
// exit ;
7091: GO 7434
// result := [ ] ;
7093: LD_ADDR_VAR 0 5
7097: PUSH
7098: EMPTY
7099: ST_TO_ADDR
// for i in list do
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_VAR 0 2
7109: PUSH
7110: FOR_IN
7111: IFFALSE 7329
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: LD_VAR 0 6
7127: PUSH
7128: LD_INT 1
7130: ARRAY
7131: PPUSH
7132: LD_VAR 0 6
7136: PUSH
7137: LD_INT 2
7139: ARRAY
7140: PPUSH
7141: CALL_OW 297
7145: ST_TO_ADDR
// if not Count ( result ) then
7146: LD_VAR 0 5
7150: PPUSH
7151: CALL 3723 0 1
7155: NOT
7156: IFFALSE 7189
// begin result := Join ( result , [ i , tmp ] ) ;
7158: LD_ADDR_VAR 0 5
7162: PUSH
7163: LD_VAR 0 5
7167: PPUSH
7168: LD_VAR 0 6
7172: PUSH
7173: LD_VAR 0 8
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PPUSH
7182: CALL 39312 0 2
7186: ST_TO_ADDR
// continue ;
7187: GO 7110
// end ; if result [ result ] [ 2 ] <= tmp then
7189: LD_VAR 0 5
7193: PUSH
7194: LD_VAR 0 5
7198: ARRAY
7199: PUSH
7200: LD_INT 2
7202: ARRAY
7203: PUSH
7204: LD_VAR 0 8
7208: LESSEQUAL
7209: IFFALSE 7242
// result := Join ( result , [ i , tmp ] ) else
7211: LD_ADDR_VAR 0 5
7215: PUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_VAR 0 6
7225: PUSH
7226: LD_VAR 0 8
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PPUSH
7235: CALL 39312 0 2
7239: ST_TO_ADDR
7240: GO 7327
// begin for j := 1 to Count ( result ) do
7242: LD_ADDR_VAR 0 7
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_VAR 0 5
7256: PPUSH
7257: CALL 3723 0 1
7261: PUSH
7262: FOR_TO
7263: IFFALSE 7325
// begin if tmp < result [ j ] [ 2 ] then
7265: LD_VAR 0 8
7269: PUSH
7270: LD_VAR 0 5
7274: PUSH
7275: LD_VAR 0 7
7279: ARRAY
7280: PUSH
7281: LD_INT 2
7283: ARRAY
7284: LESS
7285: IFFALSE 7323
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7287: LD_ADDR_VAR 0 5
7291: PUSH
7292: LD_VAR 0 5
7296: PPUSH
7297: LD_VAR 0 7
7301: PPUSH
7302: LD_VAR 0 6
7306: PUSH
7307: LD_VAR 0 8
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 2
7320: ST_TO_ADDR
// break ;
7321: GO 7325
// end ; end ;
7323: GO 7262
7325: POP
7326: POP
// end ; end ;
7327: GO 7110
7329: POP
7330: POP
// if result and not asc then
7331: LD_VAR 0 5
7335: PUSH
7336: LD_VAR 0 3
7340: NOT
7341: AND
7342: IFFALSE 7359
// result := ReverseArray ( result ) ;
7344: LD_ADDR_VAR 0 5
7348: PUSH
7349: LD_VAR 0 5
7353: PPUSH
7354: CALL 34599 0 1
7358: ST_TO_ADDR
// tmp := [ ] ;
7359: LD_ADDR_VAR 0 8
7363: PUSH
7364: EMPTY
7365: ST_TO_ADDR
// if mode then
7366: LD_VAR 0 4
7370: IFFALSE 7434
// begin for i := 1 to result do
7372: LD_ADDR_VAR 0 6
7376: PUSH
7377: DOUBLE
7378: LD_INT 1
7380: DEC
7381: ST_TO_ADDR
7382: LD_VAR 0 5
7386: PUSH
7387: FOR_TO
7388: IFFALSE 7422
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7390: LD_ADDR_VAR 0 8
7394: PUSH
7395: LD_VAR 0 8
7399: PPUSH
7400: LD_VAR 0 5
7404: PUSH
7405: LD_VAR 0 6
7409: ARRAY
7410: PUSH
7411: LD_INT 1
7413: ARRAY
7414: PPUSH
7415: CALL 39312 0 2
7419: ST_TO_ADDR
7420: GO 7387
7422: POP
7423: POP
// result := tmp ;
7424: LD_ADDR_VAR 0 5
7428: PUSH
7429: LD_VAR 0 8
7433: ST_TO_ADDR
// end ; end ;
7434: LD_VAR 0 5
7438: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7439: LD_INT 0
7441: PPUSH
7442: PPUSH
7443: PPUSH
7444: PPUSH
// if not list then
7445: LD_VAR 0 3
7449: NOT
7450: IFFALSE 7454
// exit ;
7452: GO 7842
// result := [ ] ;
7454: LD_ADDR_VAR 0 6
7458: PUSH
7459: EMPTY
7460: ST_TO_ADDR
// for i in list do
7461: LD_ADDR_VAR 0 7
7465: PUSH
7466: LD_VAR 0 3
7470: PUSH
7471: FOR_IN
7472: IFFALSE 7674
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7474: LD_ADDR_VAR 0 9
7478: PUSH
7479: LD_VAR 0 7
7483: PPUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: LD_VAR 0 2
7493: PPUSH
7494: CALL_OW 297
7498: ST_TO_ADDR
// if not result then
7499: LD_VAR 0 6
7503: NOT
7504: IFFALSE 7530
// result := [ [ i , tmp ] ] else
7506: LD_ADDR_VAR 0 6
7510: PUSH
7511: LD_VAR 0 7
7515: PUSH
7516: LD_VAR 0 9
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: ST_TO_ADDR
7528: GO 7672
// begin if result [ result ] [ 2 ] < tmp then
7530: LD_VAR 0 6
7534: PUSH
7535: LD_VAR 0 6
7539: ARRAY
7540: PUSH
7541: LD_INT 2
7543: ARRAY
7544: PUSH
7545: LD_VAR 0 9
7549: LESS
7550: IFFALSE 7592
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_VAR 0 6
7561: PPUSH
7562: LD_VAR 0 6
7566: PUSH
7567: LD_INT 1
7569: PLUS
7570: PPUSH
7571: LD_VAR 0 7
7575: PUSH
7576: LD_VAR 0 9
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 2
7589: ST_TO_ADDR
7590: GO 7672
// for j = 1 to result do
7592: LD_ADDR_VAR 0 8
7596: PUSH
7597: DOUBLE
7598: LD_INT 1
7600: DEC
7601: ST_TO_ADDR
7602: LD_VAR 0 6
7606: PUSH
7607: FOR_TO
7608: IFFALSE 7670
// begin if tmp < result [ j ] [ 2 ] then
7610: LD_VAR 0 9
7614: PUSH
7615: LD_VAR 0 6
7619: PUSH
7620: LD_VAR 0 8
7624: ARRAY
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: LESS
7630: IFFALSE 7668
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7632: LD_ADDR_VAR 0 6
7636: PUSH
7637: LD_VAR 0 6
7641: PPUSH
7642: LD_VAR 0 8
7646: PPUSH
7647: LD_VAR 0 7
7651: PUSH
7652: LD_VAR 0 9
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 2
7665: ST_TO_ADDR
// break ;
7666: GO 7670
// end ; end ;
7668: GO 7607
7670: POP
7671: POP
// end ; end ;
7672: GO 7471
7674: POP
7675: POP
// if result and not asc then
7676: LD_VAR 0 6
7680: PUSH
7681: LD_VAR 0 4
7685: NOT
7686: AND
7687: IFFALSE 7762
// begin tmp := result ;
7689: LD_ADDR_VAR 0 9
7693: PUSH
7694: LD_VAR 0 6
7698: ST_TO_ADDR
// for i = tmp downto 1 do
7699: LD_ADDR_VAR 0 7
7703: PUSH
7704: DOUBLE
7705: LD_VAR 0 9
7709: INC
7710: ST_TO_ADDR
7711: LD_INT 1
7713: PUSH
7714: FOR_DOWNTO
7715: IFFALSE 7760
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7717: LD_ADDR_VAR 0 6
7721: PUSH
7722: LD_VAR 0 6
7726: PPUSH
7727: LD_VAR 0 9
7731: PUSH
7732: LD_VAR 0 7
7736: MINUS
7737: PUSH
7738: LD_INT 1
7740: PLUS
7741: PPUSH
7742: LD_VAR 0 9
7746: PUSH
7747: LD_VAR 0 7
7751: ARRAY
7752: PPUSH
7753: CALL_OW 1
7757: ST_TO_ADDR
7758: GO 7714
7760: POP
7761: POP
// end ; tmp := [ ] ;
7762: LD_ADDR_VAR 0 9
7766: PUSH
7767: EMPTY
7768: ST_TO_ADDR
// if mode then
7769: LD_VAR 0 5
7773: IFFALSE 7842
// begin for i = 1 to result do
7775: LD_ADDR_VAR 0 7
7779: PUSH
7780: DOUBLE
7781: LD_INT 1
7783: DEC
7784: ST_TO_ADDR
7785: LD_VAR 0 6
7789: PUSH
7790: FOR_TO
7791: IFFALSE 7830
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7793: LD_ADDR_VAR 0 9
7797: PUSH
7798: LD_VAR 0 9
7802: PPUSH
7803: LD_VAR 0 7
7807: PPUSH
7808: LD_VAR 0 6
7812: PUSH
7813: LD_VAR 0 7
7817: ARRAY
7818: PUSH
7819: LD_INT 1
7821: ARRAY
7822: PPUSH
7823: CALL_OW 1
7827: ST_TO_ADDR
7828: GO 7790
7830: POP
7831: POP
// result := tmp ;
7832: LD_ADDR_VAR 0 6
7836: PUSH
7837: LD_VAR 0 9
7841: ST_TO_ADDR
// end ; end ;
7842: LD_VAR 0 6
7846: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7847: LD_INT 0
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7855: LD_ADDR_VAR 0 5
7859: PUSH
7860: LD_INT 0
7862: PUSH
7863: LD_INT 0
7865: PUSH
7866: LD_INT 0
7868: PUSH
7869: EMPTY
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: ST_TO_ADDR
// if not x or not y then
7877: LD_VAR 0 2
7881: NOT
7882: PUSH
7883: LD_VAR 0 3
7887: NOT
7888: OR
7889: IFFALSE 7893
// exit ;
7891: GO 9543
// if not range then
7893: LD_VAR 0 4
7897: NOT
7898: IFFALSE 7908
// range := 10 ;
7900: LD_ADDR_VAR 0 4
7904: PUSH
7905: LD_INT 10
7907: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7908: LD_ADDR_VAR 0 8
7912: PUSH
7913: LD_INT 81
7915: PUSH
7916: LD_VAR 0 1
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 92
7927: PUSH
7928: LD_VAR 0 2
7932: PUSH
7933: LD_VAR 0 3
7937: PUSH
7938: LD_VAR 0 4
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: LD_INT 21
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 69
7975: ST_TO_ADDR
// if not tmp then
7976: LD_VAR 0 8
7980: NOT
7981: IFFALSE 7985
// exit ;
7983: GO 9543
// for i in tmp do
7985: LD_ADDR_VAR 0 6
7989: PUSH
7990: LD_VAR 0 8
7994: PUSH
7995: FOR_IN
7996: IFFALSE 9518
// begin points := [ 0 , 0 , 0 ] ;
7998: LD_ADDR_VAR 0 9
8002: PUSH
8003: LD_INT 0
8005: PUSH
8006: LD_INT 0
8008: PUSH
8009: LD_INT 0
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: ST_TO_ADDR
// bpoints := 1 ;
8017: LD_ADDR_VAR 0 10
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 247
8034: PUSH
8035: LD_INT 1
8037: DOUBLE
8038: EQUAL
8039: IFTRUE 8043
8041: GO 8621
8043: POP
// begin if GetClass ( i ) = 1 then
8044: LD_VAR 0 6
8048: PPUSH
8049: CALL_OW 257
8053: PUSH
8054: LD_INT 1
8056: EQUAL
8057: IFFALSE 8078
// points := [ 10 , 5 , 3 ] ;
8059: LD_ADDR_VAR 0 9
8063: PUSH
8064: LD_INT 10
8066: PUSH
8067: LD_INT 5
8069: PUSH
8070: LD_INT 3
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8078: LD_VAR 0 6
8082: PPUSH
8083: CALL_OW 257
8087: PUSH
8088: LD_INT 2
8090: PUSH
8091: LD_INT 3
8093: PUSH
8094: LD_INT 4
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: IN
8102: IFFALSE 8123
// points := [ 3 , 2 , 1 ] ;
8104: LD_ADDR_VAR 0 9
8108: PUSH
8109: LD_INT 3
8111: PUSH
8112: LD_INT 2
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8123: LD_VAR 0 6
8127: PPUSH
8128: CALL_OW 257
8132: PUSH
8133: LD_INT 5
8135: EQUAL
8136: IFFALSE 8157
// points := [ 130 , 5 , 2 ] ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: LD_INT 130
8145: PUSH
8146: LD_INT 5
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8157: LD_VAR 0 6
8161: PPUSH
8162: CALL_OW 257
8166: PUSH
8167: LD_INT 8
8169: EQUAL
8170: IFFALSE 8191
// points := [ 35 , 35 , 30 ] ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: LD_INT 35
8179: PUSH
8180: LD_INT 35
8182: PUSH
8183: LD_INT 30
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8191: LD_VAR 0 6
8195: PPUSH
8196: CALL_OW 257
8200: PUSH
8201: LD_INT 9
8203: EQUAL
8204: IFFALSE 8225
// points := [ 20 , 55 , 40 ] ;
8206: LD_ADDR_VAR 0 9
8210: PUSH
8211: LD_INT 20
8213: PUSH
8214: LD_INT 55
8216: PUSH
8217: LD_INT 40
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8225: LD_VAR 0 6
8229: PPUSH
8230: CALL_OW 257
8234: PUSH
8235: LD_INT 12
8237: PUSH
8238: LD_INT 16
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: IN
8245: IFFALSE 8266
// points := [ 5 , 3 , 2 ] ;
8247: LD_ADDR_VAR 0 9
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8266: LD_VAR 0 6
8270: PPUSH
8271: CALL_OW 257
8275: PUSH
8276: LD_INT 17
8278: EQUAL
8279: IFFALSE 8300
// points := [ 100 , 50 , 75 ] ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 100
8288: PUSH
8289: LD_INT 50
8291: PUSH
8292: LD_INT 75
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8300: LD_VAR 0 6
8304: PPUSH
8305: CALL_OW 257
8309: PUSH
8310: LD_INT 15
8312: EQUAL
8313: IFFALSE 8334
// points := [ 10 , 5 , 3 ] ;
8315: LD_ADDR_VAR 0 9
8319: PUSH
8320: LD_INT 10
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: LD_INT 3
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 257
8343: PUSH
8344: LD_INT 14
8346: EQUAL
8347: IFFALSE 8368
// points := [ 10 , 0 , 0 ] ;
8349: LD_ADDR_VAR 0 9
8353: PUSH
8354: LD_INT 10
8356: PUSH
8357: LD_INT 0
8359: PUSH
8360: LD_INT 0
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8368: LD_VAR 0 6
8372: PPUSH
8373: CALL_OW 257
8377: PUSH
8378: LD_INT 11
8380: EQUAL
8381: IFFALSE 8402
// points := [ 30 , 10 , 5 ] ;
8383: LD_ADDR_VAR 0 9
8387: PUSH
8388: LD_INT 30
8390: PUSH
8391: LD_INT 10
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_INT 5
8409: PPUSH
8410: CALL_OW 321
8414: PUSH
8415: LD_INT 2
8417: EQUAL
8418: IFFALSE 8435
// bpoints := bpoints * 1.8 ;
8420: LD_ADDR_VAR 0 10
8424: PUSH
8425: LD_VAR 0 10
8429: PUSH
8430: LD_REAL  1.80000000000000E+0000
8433: MUL
8434: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8435: LD_VAR 0 6
8439: PPUSH
8440: CALL_OW 257
8444: PUSH
8445: LD_INT 1
8447: PUSH
8448: LD_INT 2
8450: PUSH
8451: LD_INT 3
8453: PUSH
8454: LD_INT 4
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: IN
8463: PUSH
8464: LD_VAR 0 1
8468: PPUSH
8469: LD_INT 51
8471: PPUSH
8472: CALL_OW 321
8476: PUSH
8477: LD_INT 2
8479: EQUAL
8480: AND
8481: IFFALSE 8498
// bpoints := bpoints * 1.2 ;
8483: LD_ADDR_VAR 0 10
8487: PUSH
8488: LD_VAR 0 10
8492: PUSH
8493: LD_REAL  1.20000000000000E+0000
8496: MUL
8497: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8498: LD_VAR 0 6
8502: PPUSH
8503: CALL_OW 257
8507: PUSH
8508: LD_INT 5
8510: PUSH
8511: LD_INT 7
8513: PUSH
8514: LD_INT 9
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: IN
8522: PUSH
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_INT 52
8530: PPUSH
8531: CALL_OW 321
8535: PUSH
8536: LD_INT 2
8538: EQUAL
8539: AND
8540: IFFALSE 8557
// bpoints := bpoints * 1.5 ;
8542: LD_ADDR_VAR 0 10
8546: PUSH
8547: LD_VAR 0 10
8551: PUSH
8552: LD_REAL  1.50000000000000E+0000
8555: MUL
8556: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8557: LD_VAR 0 1
8561: PPUSH
8562: LD_INT 66
8564: PPUSH
8565: CALL_OW 321
8569: PUSH
8570: LD_INT 2
8572: EQUAL
8573: IFFALSE 8590
// bpoints := bpoints * 1.1 ;
8575: LD_ADDR_VAR 0 10
8579: PUSH
8580: LD_VAR 0 10
8584: PUSH
8585: LD_REAL  1.10000000000000E+0000
8588: MUL
8589: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: LD_VAR 0 10
8599: PUSH
8600: LD_VAR 0 6
8604: PPUSH
8605: LD_INT 1
8607: PPUSH
8608: CALL_OW 259
8612: PUSH
8613: LD_REAL  1.15000000000000E+0000
8616: MUL
8617: MUL
8618: ST_TO_ADDR
// end ; unit_vehicle :
8619: GO 9447
8621: LD_INT 2
8623: DOUBLE
8624: EQUAL
8625: IFTRUE 8629
8627: GO 9435
8629: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8630: LD_VAR 0 6
8634: PPUSH
8635: CALL_OW 264
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 42
8645: PUSH
8646: LD_INT 24
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: IN
8654: IFFALSE 8675
// points := [ 25 , 5 , 3 ] ;
8656: LD_ADDR_VAR 0 9
8660: PUSH
8661: LD_INT 25
8663: PUSH
8664: LD_INT 5
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 264
8684: PUSH
8685: LD_INT 4
8687: PUSH
8688: LD_INT 43
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: IN
8699: IFFALSE 8720
// points := [ 40 , 15 , 5 ] ;
8701: LD_ADDR_VAR 0 9
8705: PUSH
8706: LD_INT 40
8708: PUSH
8709: LD_INT 15
8711: PUSH
8712: LD_INT 5
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8720: LD_VAR 0 6
8724: PPUSH
8725: CALL_OW 264
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: LD_INT 23
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: IN
8740: IFFALSE 8761
// points := [ 7 , 25 , 8 ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 25
8752: PUSH
8753: LD_INT 8
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8761: LD_VAR 0 6
8765: PPUSH
8766: CALL_OW 264
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 27
8776: PUSH
8777: LD_INT 44
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: IN
8785: IFFALSE 8806
// points := [ 14 , 50 , 16 ] ;
8787: LD_ADDR_VAR 0 9
8791: PUSH
8792: LD_INT 14
8794: PUSH
8795: LD_INT 50
8797: PUSH
8798: LD_INT 16
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 264
8815: PUSH
8816: LD_INT 6
8818: PUSH
8819: LD_INT 46
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: IN
8826: IFFALSE 8847
// points := [ 32 , 120 , 70 ] ;
8828: LD_ADDR_VAR 0 9
8832: PUSH
8833: LD_INT 32
8835: PUSH
8836: LD_INT 120
8838: PUSH
8839: LD_INT 70
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8847: LD_VAR 0 6
8851: PPUSH
8852: CALL_OW 264
8856: PUSH
8857: LD_INT 7
8859: PUSH
8860: LD_INT 28
8862: PUSH
8863: LD_INT 45
8865: PUSH
8866: LD_INT 92
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: IN
8875: IFFALSE 8896
// points := [ 35 , 20 , 45 ] ;
8877: LD_ADDR_VAR 0 9
8881: PUSH
8882: LD_INT 35
8884: PUSH
8885: LD_INT 20
8887: PUSH
8888: LD_INT 45
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8896: LD_VAR 0 6
8900: PPUSH
8901: CALL_OW 264
8905: PUSH
8906: LD_INT 47
8908: PUSH
8909: EMPTY
8910: LIST
8911: IN
8912: IFFALSE 8933
// points := [ 67 , 45 , 75 ] ;
8914: LD_ADDR_VAR 0 9
8918: PUSH
8919: LD_INT 67
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: LD_INT 75
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8933: LD_VAR 0 6
8937: PPUSH
8938: CALL_OW 264
8942: PUSH
8943: LD_INT 26
8945: PUSH
8946: EMPTY
8947: LIST
8948: IN
8949: IFFALSE 8970
// points := [ 120 , 30 , 80 ] ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_INT 120
8958: PUSH
8959: LD_INT 30
8961: PUSH
8962: LD_INT 80
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8970: LD_VAR 0 6
8974: PPUSH
8975: CALL_OW 264
8979: PUSH
8980: LD_INT 22
8982: PUSH
8983: EMPTY
8984: LIST
8985: IN
8986: IFFALSE 9007
// points := [ 40 , 1 , 1 ] ;
8988: LD_ADDR_VAR 0 9
8992: PUSH
8993: LD_INT 40
8995: PUSH
8996: LD_INT 1
8998: PUSH
8999: LD_INT 1
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9007: LD_VAR 0 6
9011: PPUSH
9012: CALL_OW 264
9016: PUSH
9017: LD_INT 29
9019: PUSH
9020: EMPTY
9021: LIST
9022: IN
9023: IFFALSE 9044
// points := [ 70 , 200 , 400 ] ;
9025: LD_ADDR_VAR 0 9
9029: PUSH
9030: LD_INT 70
9032: PUSH
9033: LD_INT 200
9035: PUSH
9036: LD_INT 400
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9044: LD_VAR 0 6
9048: PPUSH
9049: CALL_OW 264
9053: PUSH
9054: LD_INT 14
9056: PUSH
9057: LD_INT 53
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: IN
9064: IFFALSE 9085
// points := [ 40 , 10 , 20 ] ;
9066: LD_ADDR_VAR 0 9
9070: PUSH
9071: LD_INT 40
9073: PUSH
9074: LD_INT 10
9076: PUSH
9077: LD_INT 20
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9085: LD_VAR 0 6
9089: PPUSH
9090: CALL_OW 264
9094: PUSH
9095: LD_INT 9
9097: PUSH
9098: EMPTY
9099: LIST
9100: IN
9101: IFFALSE 9122
// points := [ 5 , 70 , 20 ] ;
9103: LD_ADDR_VAR 0 9
9107: PUSH
9108: LD_INT 5
9110: PUSH
9111: LD_INT 70
9113: PUSH
9114: LD_INT 20
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9122: LD_VAR 0 6
9126: PPUSH
9127: CALL_OW 264
9131: PUSH
9132: LD_INT 10
9134: PUSH
9135: EMPTY
9136: LIST
9137: IN
9138: IFFALSE 9159
// points := [ 35 , 110 , 70 ] ;
9140: LD_ADDR_VAR 0 9
9144: PUSH
9145: LD_INT 35
9147: PUSH
9148: LD_INT 110
9150: PUSH
9151: LD_INT 70
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9159: LD_VAR 0 6
9163: PPUSH
9164: CALL_OW 265
9168: PUSH
9169: LD_INT 25
9171: EQUAL
9172: IFFALSE 9193
// points := [ 80 , 65 , 100 ] ;
9174: LD_ADDR_VAR 0 9
9178: PUSH
9179: LD_INT 80
9181: PUSH
9182: LD_INT 65
9184: PUSH
9185: LD_INT 100
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9193: LD_VAR 0 6
9197: PPUSH
9198: CALL_OW 263
9202: PUSH
9203: LD_INT 1
9205: EQUAL
9206: IFFALSE 9241
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9208: LD_ADDR_VAR 0 10
9212: PUSH
9213: LD_VAR 0 10
9217: PUSH
9218: LD_VAR 0 6
9222: PPUSH
9223: CALL_OW 311
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 259
9235: PUSH
9236: LD_INT 4
9238: MUL
9239: MUL
9240: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9241: LD_VAR 0 6
9245: PPUSH
9246: CALL_OW 263
9250: PUSH
9251: LD_INT 2
9253: EQUAL
9254: IFFALSE 9305
// begin j := IsControledBy ( i ) ;
9256: LD_ADDR_VAR 0 7
9260: PUSH
9261: LD_VAR 0 6
9265: PPUSH
9266: CALL_OW 312
9270: ST_TO_ADDR
// if j then
9271: LD_VAR 0 7
9275: IFFALSE 9305
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9277: LD_ADDR_VAR 0 10
9281: PUSH
9282: LD_VAR 0 10
9286: PUSH
9287: LD_VAR 0 7
9291: PPUSH
9292: LD_INT 3
9294: PPUSH
9295: CALL_OW 259
9299: PUSH
9300: LD_INT 3
9302: MUL
9303: MUL
9304: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9305: LD_VAR 0 6
9309: PPUSH
9310: CALL_OW 264
9314: PUSH
9315: LD_INT 5
9317: PUSH
9318: LD_INT 6
9320: PUSH
9321: LD_INT 46
9323: PUSH
9324: LD_INT 44
9326: PUSH
9327: LD_INT 47
9329: PUSH
9330: LD_INT 45
9332: PUSH
9333: LD_INT 28
9335: PUSH
9336: LD_INT 7
9338: PUSH
9339: LD_INT 27
9341: PUSH
9342: LD_INT 29
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: IN
9357: PUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 52
9365: PPUSH
9366: CALL_OW 321
9370: PUSH
9371: LD_INT 2
9373: EQUAL
9374: AND
9375: IFFALSE 9392
// bpoints := bpoints * 1.2 ;
9377: LD_ADDR_VAR 0 10
9381: PUSH
9382: LD_VAR 0 10
9386: PUSH
9387: LD_REAL  1.20000000000000E+0000
9390: MUL
9391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9392: LD_VAR 0 6
9396: PPUSH
9397: CALL_OW 264
9401: PUSH
9402: LD_INT 6
9404: PUSH
9405: LD_INT 46
9407: PUSH
9408: LD_INT 47
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: IN
9416: IFFALSE 9433
// bpoints := bpoints * 1.2 ;
9418: LD_ADDR_VAR 0 10
9422: PUSH
9423: LD_VAR 0 10
9427: PUSH
9428: LD_REAL  1.20000000000000E+0000
9431: MUL
9432: ST_TO_ADDR
// end ; unit_building :
9433: GO 9447
9435: LD_INT 3
9437: DOUBLE
9438: EQUAL
9439: IFTRUE 9443
9441: GO 9446
9443: POP
// ; end ;
9444: GO 9447
9446: POP
// for j = 1 to 3 do
9447: LD_ADDR_VAR 0 7
9451: PUSH
9452: DOUBLE
9453: LD_INT 1
9455: DEC
9456: ST_TO_ADDR
9457: LD_INT 3
9459: PUSH
9460: FOR_TO
9461: IFFALSE 9514
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9463: LD_ADDR_VAR 0 5
9467: PUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: LD_VAR 0 7
9477: PPUSH
9478: LD_VAR 0 5
9482: PUSH
9483: LD_VAR 0 7
9487: ARRAY
9488: PUSH
9489: LD_VAR 0 9
9493: PUSH
9494: LD_VAR 0 7
9498: ARRAY
9499: PUSH
9500: LD_VAR 0 10
9504: MUL
9505: PLUS
9506: PPUSH
9507: CALL_OW 1
9511: ST_TO_ADDR
9512: GO 9460
9514: POP
9515: POP
// end ;
9516: GO 7995
9518: POP
9519: POP
// result := Replace ( result , 4 , tmp ) ;
9520: LD_ADDR_VAR 0 5
9524: PUSH
9525: LD_VAR 0 5
9529: PPUSH
9530: LD_INT 4
9532: PPUSH
9533: LD_VAR 0 8
9537: PPUSH
9538: CALL_OW 1
9542: ST_TO_ADDR
// end ;
9543: LD_VAR 0 5
9547: RET
// export function DangerAtRange ( unit , range ) ; begin
9548: LD_INT 0
9550: PPUSH
// if not unit then
9551: LD_VAR 0 1
9555: NOT
9556: IFFALSE 9560
// exit ;
9558: GO 9605
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9560: LD_ADDR_VAR 0 3
9564: PUSH
9565: LD_VAR 0 1
9569: PPUSH
9570: CALL_OW 255
9574: PPUSH
9575: LD_VAR 0 1
9579: PPUSH
9580: CALL_OW 250
9584: PPUSH
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 251
9594: PPUSH
9595: LD_VAR 0 2
9599: PPUSH
9600: CALL 7847 0 4
9604: ST_TO_ADDR
// end ;
9605: LD_VAR 0 3
9609: RET
// export function DangerInArea ( side , area ) ; begin
9610: LD_INT 0
9612: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9613: LD_ADDR_VAR 0 3
9617: PUSH
9618: LD_VAR 0 2
9622: PPUSH
9623: LD_INT 81
9625: PUSH
9626: LD_VAR 0 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PPUSH
9635: CALL_OW 70
9639: ST_TO_ADDR
// end ;
9640: LD_VAR 0 3
9644: RET
// export function IsExtension ( b ) ; begin
9645: LD_INT 0
9647: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_VAR 0 1
9657: PUSH
9658: LD_INT 23
9660: PUSH
9661: LD_INT 20
9663: PUSH
9664: LD_INT 22
9666: PUSH
9667: LD_INT 17
9669: PUSH
9670: LD_INT 24
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 19
9678: PUSH
9679: LD_INT 16
9681: PUSH
9682: LD_INT 25
9684: PUSH
9685: LD_INT 18
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: IN
9700: ST_TO_ADDR
// end ;
9701: LD_VAR 0 2
9705: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9706: LD_INT 0
9708: PPUSH
9709: PPUSH
9710: PPUSH
// result := [ ] ;
9711: LD_ADDR_VAR 0 4
9715: PUSH
9716: EMPTY
9717: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9718: LD_ADDR_VAR 0 5
9722: PUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: LD_INT 21
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 70
9742: ST_TO_ADDR
// if not tmp then
9743: LD_VAR 0 5
9747: NOT
9748: IFFALSE 9752
// exit ;
9750: GO 9816
// if checkLink then
9752: LD_VAR 0 3
9756: IFFALSE 9806
// begin for i in tmp do
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 5
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9804
// if GetBase ( i ) <> base then
9771: LD_VAR 0 6
9775: PPUSH
9776: CALL_OW 274
9780: PUSH
9781: LD_VAR 0 1
9785: NONEQUAL
9786: IFFALSE 9802
// ComLinkToBase ( base , i ) ;
9788: LD_VAR 0 1
9792: PPUSH
9793: LD_VAR 0 6
9797: PPUSH
9798: CALL_OW 169
9802: GO 9768
9804: POP
9805: POP
// end ; result := tmp ;
9806: LD_ADDR_VAR 0 4
9810: PUSH
9811: LD_VAR 0 5
9815: ST_TO_ADDR
// end ;
9816: LD_VAR 0 4
9820: RET
// export function ComComplete ( units , b ) ; var i ; begin
9821: LD_INT 0
9823: PPUSH
9824: PPUSH
// if not units then
9825: LD_VAR 0 1
9829: NOT
9830: IFFALSE 9834
// exit ;
9832: GO 9924
// for i in units do
9834: LD_ADDR_VAR 0 4
9838: PUSH
9839: LD_VAR 0 1
9843: PUSH
9844: FOR_IN
9845: IFFALSE 9922
// if BuildingStatus ( b ) = bs_build then
9847: LD_VAR 0 2
9851: PPUSH
9852: CALL_OW 461
9856: PUSH
9857: LD_INT 1
9859: EQUAL
9860: IFFALSE 9920
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9862: LD_VAR 0 4
9866: PPUSH
9867: LD_STRING h
9869: PUSH
9870: LD_VAR 0 2
9874: PPUSH
9875: CALL_OW 250
9879: PUSH
9880: LD_VAR 0 2
9884: PPUSH
9885: CALL_OW 251
9889: PUSH
9890: LD_VAR 0 2
9894: PUSH
9895: LD_INT 0
9897: PUSH
9898: LD_INT 0
9900: PUSH
9901: LD_INT 0
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: PPUSH
9916: CALL_OW 446
9920: GO 9844
9922: POP
9923: POP
// end ;
9924: LD_VAR 0 3
9928: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9929: LD_INT 0
9931: PPUSH
9932: PPUSH
9933: PPUSH
9934: PPUSH
9935: PPUSH
9936: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9937: LD_VAR 0 1
9941: NOT
9942: PUSH
9943: LD_VAR 0 1
9947: PPUSH
9948: CALL_OW 263
9952: PUSH
9953: LD_INT 2
9955: NONEQUAL
9956: OR
9957: IFFALSE 9961
// exit ;
9959: GO 10277
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9961: LD_ADDR_VAR 0 6
9965: PUSH
9966: LD_INT 22
9968: PUSH
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 255
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: LD_INT 30
9988: PUSH
9989: LD_INT 36
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 34
9998: PUSH
9999: LD_INT 31
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 69
10019: ST_TO_ADDR
// if not tmp then
10020: LD_VAR 0 6
10024: NOT
10025: IFFALSE 10029
// exit ;
10027: GO 10277
// result := [ ] ;
10029: LD_ADDR_VAR 0 2
10033: PUSH
10034: EMPTY
10035: ST_TO_ADDR
// for i in tmp do
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_VAR 0 6
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10118
// begin t := UnitsInside ( i ) ;
10049: LD_ADDR_VAR 0 4
10053: PUSH
10054: LD_VAR 0 3
10058: PPUSH
10059: CALL_OW 313
10063: ST_TO_ADDR
// if t then
10064: LD_VAR 0 4
10068: IFFALSE 10116
// for j in t do
10070: LD_ADDR_VAR 0 7
10074: PUSH
10075: LD_VAR 0 4
10079: PUSH
10080: FOR_IN
10081: IFFALSE 10114
// result := Replace ( result , result + 1 , j ) ;
10083: LD_ADDR_VAR 0 2
10087: PUSH
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: PLUS
10101: PPUSH
10102: LD_VAR 0 7
10106: PPUSH
10107: CALL_OW 1
10111: ST_TO_ADDR
10112: GO 10080
10114: POP
10115: POP
// end ;
10116: GO 10046
10118: POP
10119: POP
// if not result then
10120: LD_VAR 0 2
10124: NOT
10125: IFFALSE 10129
// exit ;
10127: GO 10277
// mech := result [ 1 ] ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_VAR 0 2
10138: PUSH
10139: LD_INT 1
10141: ARRAY
10142: ST_TO_ADDR
// if result > 1 then
10143: LD_VAR 0 2
10147: PUSH
10148: LD_INT 1
10150: GREATER
10151: IFFALSE 10263
// begin for i = 2 to result do
10153: LD_ADDR_VAR 0 3
10157: PUSH
10158: DOUBLE
10159: LD_INT 2
10161: DEC
10162: ST_TO_ADDR
10163: LD_VAR 0 2
10167: PUSH
10168: FOR_TO
10169: IFFALSE 10261
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10171: LD_ADDR_VAR 0 4
10175: PUSH
10176: LD_VAR 0 2
10180: PUSH
10181: LD_VAR 0 3
10185: ARRAY
10186: PPUSH
10187: LD_INT 3
10189: PPUSH
10190: CALL_OW 259
10194: PUSH
10195: LD_VAR 0 2
10199: PUSH
10200: LD_VAR 0 3
10204: ARRAY
10205: PPUSH
10206: CALL_OW 432
10210: MINUS
10211: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10212: LD_VAR 0 4
10216: PUSH
10217: LD_VAR 0 5
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 259
10229: PUSH
10230: LD_VAR 0 5
10234: PPUSH
10235: CALL_OW 432
10239: MINUS
10240: GREATEREQUAL
10241: IFFALSE 10259
// mech := result [ i ] ;
10243: LD_ADDR_VAR 0 5
10247: PUSH
10248: LD_VAR 0 2
10252: PUSH
10253: LD_VAR 0 3
10257: ARRAY
10258: ST_TO_ADDR
// end ;
10259: GO 10168
10261: POP
10262: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10263: LD_VAR 0 1
10267: PPUSH
10268: LD_VAR 0 5
10272: PPUSH
10273: CALL_OW 135
// end ;
10277: LD_VAR 0 2
10281: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10282: LD_INT 0
10284: PPUSH
10285: PPUSH
10286: PPUSH
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
10295: PPUSH
10296: PPUSH
// result := [ ] ;
10297: LD_ADDR_VAR 0 7
10301: PUSH
10302: EMPTY
10303: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10304: LD_VAR 0 1
10308: PPUSH
10309: CALL_OW 266
10313: PUSH
10314: LD_INT 0
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: IN
10324: NOT
10325: IFFALSE 10329
// exit ;
10327: GO 11963
// if name then
10329: LD_VAR 0 3
10333: IFFALSE 10349
// SetBName ( base_dep , name ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_VAR 0 3
10344: PPUSH
10345: CALL_OW 500
// base := GetBase ( base_dep ) ;
10349: LD_ADDR_VAR 0 15
10353: PUSH
10354: LD_VAR 0 1
10358: PPUSH
10359: CALL_OW 274
10363: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10364: LD_ADDR_VAR 0 16
10368: PUSH
10369: LD_VAR 0 1
10373: PPUSH
10374: CALL_OW 255
10378: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10379: LD_ADDR_VAR 0 17
10383: PUSH
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 248
10393: ST_TO_ADDR
// if sources then
10394: LD_VAR 0 5
10398: IFFALSE 10445
// for i = 1 to 3 do
10400: LD_ADDR_VAR 0 8
10404: PUSH
10405: DOUBLE
10406: LD_INT 1
10408: DEC
10409: ST_TO_ADDR
10410: LD_INT 3
10412: PUSH
10413: FOR_TO
10414: IFFALSE 10443
// AddResourceType ( base , i , sources [ i ] ) ;
10416: LD_VAR 0 15
10420: PPUSH
10421: LD_VAR 0 8
10425: PPUSH
10426: LD_VAR 0 5
10430: PUSH
10431: LD_VAR 0 8
10435: ARRAY
10436: PPUSH
10437: CALL_OW 276
10441: GO 10413
10443: POP
10444: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10445: LD_ADDR_VAR 0 18
10449: PUSH
10450: LD_VAR 0 15
10454: PPUSH
10455: LD_VAR 0 2
10459: PPUSH
10460: LD_INT 1
10462: PPUSH
10463: CALL 9706 0 3
10467: ST_TO_ADDR
// InitHc ;
10468: CALL_OW 19
// InitUc ;
10472: CALL_OW 18
// uc_side := side ;
10476: LD_ADDR_OWVAR 20
10480: PUSH
10481: LD_VAR 0 16
10485: ST_TO_ADDR
// uc_nation := nation ;
10486: LD_ADDR_OWVAR 21
10490: PUSH
10491: LD_VAR 0 17
10495: ST_TO_ADDR
// if buildings then
10496: LD_VAR 0 18
10500: IFFALSE 11822
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10502: LD_ADDR_VAR 0 19
10506: PUSH
10507: LD_VAR 0 18
10511: PPUSH
10512: LD_INT 2
10514: PUSH
10515: LD_INT 30
10517: PUSH
10518: LD_INT 29
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 30
10527: PUSH
10528: LD_INT 30
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 72
10544: ST_TO_ADDR
// if tmp then
10545: LD_VAR 0 19
10549: IFFALSE 10597
// for i in tmp do
10551: LD_ADDR_VAR 0 8
10555: PUSH
10556: LD_VAR 0 19
10560: PUSH
10561: FOR_IN
10562: IFFALSE 10595
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10564: LD_VAR 0 8
10568: PPUSH
10569: CALL_OW 250
10573: PPUSH
10574: LD_VAR 0 8
10578: PPUSH
10579: CALL_OW 251
10583: PPUSH
10584: LD_VAR 0 16
10588: PPUSH
10589: CALL_OW 441
10593: GO 10561
10595: POP
10596: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10597: LD_VAR 0 18
10601: PPUSH
10602: LD_INT 2
10604: PUSH
10605: LD_INT 30
10607: PUSH
10608: LD_INT 32
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 30
10617: PUSH
10618: LD_INT 33
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: PPUSH
10630: CALL_OW 72
10634: IFFALSE 10722
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10636: LD_ADDR_VAR 0 8
10640: PUSH
10641: LD_VAR 0 18
10645: PPUSH
10646: LD_INT 2
10648: PUSH
10649: LD_INT 30
10651: PUSH
10652: LD_INT 32
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 30
10661: PUSH
10662: LD_INT 33
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 72
10678: PUSH
10679: FOR_IN
10680: IFFALSE 10720
// begin if not GetBWeapon ( i ) then
10682: LD_VAR 0 8
10686: PPUSH
10687: CALL_OW 269
10691: NOT
10692: IFFALSE 10718
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10694: LD_VAR 0 8
10698: PPUSH
10699: LD_VAR 0 8
10703: PPUSH
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL 11968 0 2
10713: PPUSH
10714: CALL_OW 431
// end ;
10718: GO 10679
10720: POP
10721: POP
// end ; for i = 1 to personel do
10722: LD_ADDR_VAR 0 8
10726: PUSH
10727: DOUBLE
10728: LD_INT 1
10730: DEC
10731: ST_TO_ADDR
10732: LD_VAR 0 6
10736: PUSH
10737: FOR_TO
10738: IFFALSE 11802
// begin if i > 4 then
10740: LD_VAR 0 8
10744: PUSH
10745: LD_INT 4
10747: GREATER
10748: IFFALSE 10752
// break ;
10750: GO 11802
// case i of 1 :
10752: LD_VAR 0 8
10756: PUSH
10757: LD_INT 1
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 10845
10765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10766: LD_ADDR_VAR 0 12
10770: PUSH
10771: LD_VAR 0 18
10775: PPUSH
10776: LD_INT 22
10778: PUSH
10779: LD_VAR 0 16
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 58
10790: PUSH
10791: EMPTY
10792: LIST
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 30
10799: PUSH
10800: LD_INT 32
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 30
10809: PUSH
10810: LD_INT 4
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 30
10819: PUSH
10820: LD_INT 5
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: PPUSH
10838: CALL_OW 72
10842: ST_TO_ADDR
10843: GO 11067
10845: LD_INT 2
10847: DOUBLE
10848: EQUAL
10849: IFTRUE 10853
10851: GO 10915
10853: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10854: LD_ADDR_VAR 0 12
10858: PUSH
10859: LD_VAR 0 18
10863: PPUSH
10864: LD_INT 22
10866: PUSH
10867: LD_VAR 0 16
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: LD_INT 0
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 30
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PPUSH
10908: CALL_OW 72
10912: ST_TO_ADDR
10913: GO 11067
10915: LD_INT 3
10917: DOUBLE
10918: EQUAL
10919: IFTRUE 10923
10921: GO 10985
10923: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10924: LD_ADDR_VAR 0 12
10928: PUSH
10929: LD_VAR 0 18
10933: PPUSH
10934: LD_INT 22
10936: PUSH
10937: LD_VAR 0 16
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 30
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 72
10982: ST_TO_ADDR
10983: GO 11067
10985: LD_INT 4
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11066
10993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10994: LD_ADDR_VAR 0 12
10998: PUSH
10999: LD_VAR 0 18
11003: PPUSH
11004: LD_INT 22
11006: PUSH
11007: LD_VAR 0 16
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_INT 30
11021: PUSH
11022: LD_INT 6
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 30
11031: PUSH
11032: LD_INT 7
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 30
11041: PUSH
11042: LD_INT 8
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 72
11063: ST_TO_ADDR
11064: GO 11067
11066: POP
// if i = 1 then
11067: LD_VAR 0 8
11071: PUSH
11072: LD_INT 1
11074: EQUAL
11075: IFFALSE 11186
// begin tmp := [ ] ;
11077: LD_ADDR_VAR 0 19
11081: PUSH
11082: EMPTY
11083: ST_TO_ADDR
// for j in f do
11084: LD_ADDR_VAR 0 9
11088: PUSH
11089: LD_VAR 0 12
11093: PUSH
11094: FOR_IN
11095: IFFALSE 11168
// if GetBType ( j ) = b_bunker then
11097: LD_VAR 0 9
11101: PPUSH
11102: CALL_OW 266
11106: PUSH
11107: LD_INT 32
11109: EQUAL
11110: IFFALSE 11137
// tmp := Insert ( tmp , 1 , j ) else
11112: LD_ADDR_VAR 0 19
11116: PUSH
11117: LD_VAR 0 19
11121: PPUSH
11122: LD_INT 1
11124: PPUSH
11125: LD_VAR 0 9
11129: PPUSH
11130: CALL_OW 2
11134: ST_TO_ADDR
11135: GO 11166
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11137: LD_ADDR_VAR 0 19
11141: PUSH
11142: LD_VAR 0 19
11146: PPUSH
11147: LD_VAR 0 19
11151: PUSH
11152: LD_INT 1
11154: PLUS
11155: PPUSH
11156: LD_VAR 0 9
11160: PPUSH
11161: CALL_OW 2
11165: ST_TO_ADDR
11166: GO 11094
11168: POP
11169: POP
// if tmp then
11170: LD_VAR 0 19
11174: IFFALSE 11186
// f := tmp ;
11176: LD_ADDR_VAR 0 12
11180: PUSH
11181: LD_VAR 0 19
11185: ST_TO_ADDR
// end ; x := personel [ i ] ;
11186: LD_ADDR_VAR 0 13
11190: PUSH
11191: LD_VAR 0 6
11195: PUSH
11196: LD_VAR 0 8
11200: ARRAY
11201: ST_TO_ADDR
// if x = - 1 then
11202: LD_VAR 0 13
11206: PUSH
11207: LD_INT 1
11209: NEG
11210: EQUAL
11211: IFFALSE 11420
// begin for j in f do
11213: LD_ADDR_VAR 0 9
11217: PUSH
11218: LD_VAR 0 12
11222: PUSH
11223: FOR_IN
11224: IFFALSE 11416
// repeat InitHc ;
11226: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11230: LD_VAR 0 9
11234: PPUSH
11235: CALL_OW 266
11239: PUSH
11240: LD_INT 5
11242: EQUAL
11243: IFFALSE 11313
// begin if UnitsInside ( j ) < 3 then
11245: LD_VAR 0 9
11249: PPUSH
11250: CALL_OW 313
11254: PUSH
11255: LD_INT 3
11257: LESS
11258: IFFALSE 11294
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11260: LD_INT 0
11262: PPUSH
11263: LD_INT 5
11265: PUSH
11266: LD_INT 8
11268: PUSH
11269: LD_INT 9
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: LD_VAR 0 17
11281: ARRAY
11282: PPUSH
11283: LD_VAR 0 4
11287: PPUSH
11288: CALL_OW 380
11292: GO 11311
// PrepareHuman ( false , i , skill ) ;
11294: LD_INT 0
11296: PPUSH
11297: LD_VAR 0 8
11301: PPUSH
11302: LD_VAR 0 4
11306: PPUSH
11307: CALL_OW 380
// end else
11311: GO 11330
// PrepareHuman ( false , i , skill ) ;
11313: LD_INT 0
11315: PPUSH
11316: LD_VAR 0 8
11320: PPUSH
11321: LD_VAR 0 4
11325: PPUSH
11326: CALL_OW 380
// un := CreateHuman ;
11330: LD_ADDR_VAR 0 14
11334: PUSH
11335: CALL_OW 44
11339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11340: LD_ADDR_VAR 0 7
11344: PUSH
11345: LD_VAR 0 7
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: LD_VAR 0 14
11357: PPUSH
11358: CALL_OW 2
11362: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11363: LD_VAR 0 14
11367: PPUSH
11368: LD_VAR 0 9
11372: PPUSH
11373: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11377: LD_VAR 0 9
11381: PPUSH
11382: CALL_OW 313
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: PUSH
11391: LD_VAR 0 9
11395: PPUSH
11396: CALL_OW 266
11400: PUSH
11401: LD_INT 32
11403: PUSH
11404: LD_INT 31
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: IN
11411: OR
11412: IFFALSE 11226
11414: GO 11223
11416: POP
11417: POP
// end else
11418: GO 11800
// for j = 1 to x do
11420: LD_ADDR_VAR 0 9
11424: PUSH
11425: DOUBLE
11426: LD_INT 1
11428: DEC
11429: ST_TO_ADDR
11430: LD_VAR 0 13
11434: PUSH
11435: FOR_TO
11436: IFFALSE 11798
// begin InitHc ;
11438: CALL_OW 19
// if not f then
11442: LD_VAR 0 12
11446: NOT
11447: IFFALSE 11536
// begin PrepareHuman ( false , i , skill ) ;
11449: LD_INT 0
11451: PPUSH
11452: LD_VAR 0 8
11456: PPUSH
11457: LD_VAR 0 4
11461: PPUSH
11462: CALL_OW 380
// un := CreateHuman ;
11466: LD_ADDR_VAR 0 14
11470: PUSH
11471: CALL_OW 44
11475: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11476: LD_ADDR_VAR 0 7
11480: PUSH
11481: LD_VAR 0 7
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: LD_VAR 0 14
11493: PPUSH
11494: CALL_OW 2
11498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11499: LD_VAR 0 14
11503: PPUSH
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 250
11513: PPUSH
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL_OW 251
11523: PPUSH
11524: LD_INT 10
11526: PPUSH
11527: LD_INT 0
11529: PPUSH
11530: CALL_OW 50
// continue ;
11534: GO 11435
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11536: LD_VAR 0 12
11540: PUSH
11541: LD_INT 1
11543: ARRAY
11544: PPUSH
11545: CALL_OW 313
11549: PUSH
11550: LD_VAR 0 12
11554: PUSH
11555: LD_INT 1
11557: ARRAY
11558: PPUSH
11559: CALL_OW 266
11563: PUSH
11564: LD_INT 32
11566: PUSH
11567: LD_INT 31
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: IN
11574: AND
11575: PUSH
11576: LD_VAR 0 12
11580: PUSH
11581: LD_INT 1
11583: ARRAY
11584: PPUSH
11585: CALL_OW 313
11589: PUSH
11590: LD_INT 6
11592: EQUAL
11593: OR
11594: IFFALSE 11614
// f := Delete ( f , 1 ) ;
11596: LD_ADDR_VAR 0 12
11600: PUSH
11601: LD_VAR 0 12
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 3
11613: ST_TO_ADDR
// if not f then
11614: LD_VAR 0 12
11618: NOT
11619: IFFALSE 11637
// begin x := x + 2 ;
11621: LD_ADDR_VAR 0 13
11625: PUSH
11626: LD_VAR 0 13
11630: PUSH
11631: LD_INT 2
11633: PLUS
11634: ST_TO_ADDR
// continue ;
11635: GO 11435
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11637: LD_VAR 0 12
11641: PUSH
11642: LD_INT 1
11644: ARRAY
11645: PPUSH
11646: CALL_OW 266
11650: PUSH
11651: LD_INT 5
11653: EQUAL
11654: IFFALSE 11728
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11656: LD_VAR 0 12
11660: PUSH
11661: LD_INT 1
11663: ARRAY
11664: PPUSH
11665: CALL_OW 313
11669: PUSH
11670: LD_INT 3
11672: LESS
11673: IFFALSE 11709
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11675: LD_INT 0
11677: PPUSH
11678: LD_INT 5
11680: PUSH
11681: LD_INT 8
11683: PUSH
11684: LD_INT 9
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: LD_VAR 0 17
11696: ARRAY
11697: PPUSH
11698: LD_VAR 0 4
11702: PPUSH
11703: CALL_OW 380
11707: GO 11726
// PrepareHuman ( false , i , skill ) ;
11709: LD_INT 0
11711: PPUSH
11712: LD_VAR 0 8
11716: PPUSH
11717: LD_VAR 0 4
11721: PPUSH
11722: CALL_OW 380
// end else
11726: GO 11745
// PrepareHuman ( false , i , skill ) ;
11728: LD_INT 0
11730: PPUSH
11731: LD_VAR 0 8
11735: PPUSH
11736: LD_VAR 0 4
11740: PPUSH
11741: CALL_OW 380
// un := CreateHuman ;
11745: LD_ADDR_VAR 0 14
11749: PUSH
11750: CALL_OW 44
11754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11755: LD_ADDR_VAR 0 7
11759: PUSH
11760: LD_VAR 0 7
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_VAR 0 14
11772: PPUSH
11773: CALL_OW 2
11777: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11778: LD_VAR 0 14
11782: PPUSH
11783: LD_VAR 0 12
11787: PUSH
11788: LD_INT 1
11790: ARRAY
11791: PPUSH
11792: CALL_OW 52
// end ;
11796: GO 11435
11798: POP
11799: POP
// end ;
11800: GO 10737
11802: POP
11803: POP
// result := result ^ buildings ;
11804: LD_ADDR_VAR 0 7
11808: PUSH
11809: LD_VAR 0 7
11813: PUSH
11814: LD_VAR 0 18
11818: ADD
11819: ST_TO_ADDR
// end else
11820: GO 11963
// begin for i = 1 to personel do
11822: LD_ADDR_VAR 0 8
11826: PUSH
11827: DOUBLE
11828: LD_INT 1
11830: DEC
11831: ST_TO_ADDR
11832: LD_VAR 0 6
11836: PUSH
11837: FOR_TO
11838: IFFALSE 11961
// begin if i > 4 then
11840: LD_VAR 0 8
11844: PUSH
11845: LD_INT 4
11847: GREATER
11848: IFFALSE 11852
// break ;
11850: GO 11961
// x := personel [ i ] ;
11852: LD_ADDR_VAR 0 13
11856: PUSH
11857: LD_VAR 0 6
11861: PUSH
11862: LD_VAR 0 8
11866: ARRAY
11867: ST_TO_ADDR
// if x = - 1 then
11868: LD_VAR 0 13
11872: PUSH
11873: LD_INT 1
11875: NEG
11876: EQUAL
11877: IFFALSE 11881
// continue ;
11879: GO 11837
// PrepareHuman ( false , i , skill ) ;
11881: LD_INT 0
11883: PPUSH
11884: LD_VAR 0 8
11888: PPUSH
11889: LD_VAR 0 4
11893: PPUSH
11894: CALL_OW 380
// un := CreateHuman ;
11898: LD_ADDR_VAR 0 14
11902: PUSH
11903: CALL_OW 44
11907: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11908: LD_VAR 0 14
11912: PPUSH
11913: LD_VAR 0 1
11917: PPUSH
11918: CALL_OW 250
11922: PPUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 251
11932: PPUSH
11933: LD_INT 10
11935: PPUSH
11936: LD_INT 0
11938: PPUSH
11939: CALL_OW 50
// result := result ^ un ;
11943: LD_ADDR_VAR 0 7
11947: PUSH
11948: LD_VAR 0 7
11952: PUSH
11953: LD_VAR 0 14
11957: ADD
11958: ST_TO_ADDR
// end ;
11959: GO 11837
11961: POP
11962: POP
// end ; end ;
11963: LD_VAR 0 7
11967: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11968: LD_INT 0
11970: PPUSH
11971: PPUSH
11972: PPUSH
11973: PPUSH
11974: PPUSH
11975: PPUSH
11976: PPUSH
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
11985: PPUSH
// result := false ;
11986: LD_ADDR_VAR 0 3
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11994: LD_VAR 0 1
11998: NOT
11999: PUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: CALL_OW 266
12009: PUSH
12010: LD_INT 32
12012: PUSH
12013: LD_INT 33
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: IN
12020: NOT
12021: OR
12022: IFFALSE 12026
// exit ;
12024: GO 13135
// nat := GetNation ( tower ) ;
12026: LD_ADDR_VAR 0 12
12030: PUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 248
12040: ST_TO_ADDR
// side := GetSide ( tower ) ;
12041: LD_ADDR_VAR 0 16
12045: PUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 255
12055: ST_TO_ADDR
// x := GetX ( tower ) ;
12056: LD_ADDR_VAR 0 10
12060: PUSH
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 250
12070: ST_TO_ADDR
// y := GetY ( tower ) ;
12071: LD_ADDR_VAR 0 11
12075: PUSH
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 251
12085: ST_TO_ADDR
// if not x or not y then
12086: LD_VAR 0 10
12090: NOT
12091: PUSH
12092: LD_VAR 0 11
12096: NOT
12097: OR
12098: IFFALSE 12102
// exit ;
12100: GO 13135
// weapon := 0 ;
12102: LD_ADDR_VAR 0 18
12106: PUSH
12107: LD_INT 0
12109: ST_TO_ADDR
// fac_list := [ ] ;
12110: LD_ADDR_VAR 0 17
12114: PUSH
12115: EMPTY
12116: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12117: LD_ADDR_VAR 0 6
12121: PUSH
12122: LD_VAR 0 1
12126: PPUSH
12127: CALL_OW 274
12131: PPUSH
12132: LD_VAR 0 2
12136: PPUSH
12137: LD_INT 0
12139: PPUSH
12140: CALL 9706 0 3
12144: PPUSH
12145: LD_INT 30
12147: PUSH
12148: LD_INT 3
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: CALL_OW 72
12159: ST_TO_ADDR
// if not factories then
12160: LD_VAR 0 6
12164: NOT
12165: IFFALSE 12169
// exit ;
12167: GO 13135
// for i in factories do
12169: LD_ADDR_VAR 0 8
12173: PUSH
12174: LD_VAR 0 6
12178: PUSH
12179: FOR_IN
12180: IFFALSE 12205
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12182: LD_ADDR_VAR 0 17
12186: PUSH
12187: LD_VAR 0 17
12191: PUSH
12192: LD_VAR 0 8
12196: PPUSH
12197: CALL_OW 478
12201: UNION
12202: ST_TO_ADDR
12203: GO 12179
12205: POP
12206: POP
// if not fac_list then
12207: LD_VAR 0 17
12211: NOT
12212: IFFALSE 12216
// exit ;
12214: GO 13135
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12216: LD_ADDR_VAR 0 5
12220: PUSH
12221: LD_INT 4
12223: PUSH
12224: LD_INT 5
12226: PUSH
12227: LD_INT 9
12229: PUSH
12230: LD_INT 10
12232: PUSH
12233: LD_INT 6
12235: PUSH
12236: LD_INT 7
12238: PUSH
12239: LD_INT 11
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 27
12253: PUSH
12254: LD_INT 28
12256: PUSH
12257: LD_INT 26
12259: PUSH
12260: LD_INT 30
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 43
12271: PUSH
12272: LD_INT 44
12274: PUSH
12275: LD_INT 46
12277: PUSH
12278: LD_INT 45
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: LD_INT 49
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: LD_VAR 0 12
12304: ARRAY
12305: ST_TO_ADDR
// list := list isect fac_list ;
12306: LD_ADDR_VAR 0 5
12310: PUSH
12311: LD_VAR 0 5
12315: PUSH
12316: LD_VAR 0 17
12320: ISECT
12321: ST_TO_ADDR
// if not list then
12322: LD_VAR 0 5
12326: NOT
12327: IFFALSE 12331
// exit ;
12329: GO 13135
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12331: LD_VAR 0 12
12335: PUSH
12336: LD_INT 3
12338: EQUAL
12339: PUSH
12340: LD_INT 49
12342: PUSH
12343: LD_VAR 0 5
12347: IN
12348: AND
12349: PUSH
12350: LD_INT 31
12352: PPUSH
12353: LD_VAR 0 16
12357: PPUSH
12358: CALL_OW 321
12362: PUSH
12363: LD_INT 2
12365: EQUAL
12366: AND
12367: IFFALSE 12427
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12369: LD_INT 22
12371: PUSH
12372: LD_VAR 0 16
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 35
12383: PUSH
12384: LD_INT 49
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 91
12393: PUSH
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 10
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: NOT
12417: IFFALSE 12427
// weapon := ru_time_lapser ;
12419: LD_ADDR_VAR 0 18
12423: PUSH
12424: LD_INT 49
12426: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12427: LD_VAR 0 12
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: LD_INT 2
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: IN
12442: PUSH
12443: LD_INT 11
12445: PUSH
12446: LD_VAR 0 5
12450: IN
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_VAR 0 5
12459: IN
12460: OR
12461: AND
12462: PUSH
12463: LD_INT 6
12465: PPUSH
12466: LD_VAR 0 16
12470: PPUSH
12471: CALL_OW 321
12475: PUSH
12476: LD_INT 2
12478: EQUAL
12479: AND
12480: IFFALSE 12645
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12482: LD_INT 22
12484: PUSH
12485: LD_VAR 0 16
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: LD_INT 35
12499: PUSH
12500: LD_INT 11
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 35
12509: PUSH
12510: LD_INT 30
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 91
12524: PUSH
12525: LD_VAR 0 1
12529: PUSH
12530: LD_INT 18
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: NOT
12548: PUSH
12549: LD_INT 22
12551: PUSH
12552: LD_VAR 0 16
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: LD_INT 30
12566: PUSH
12567: LD_INT 32
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 30
12576: PUSH
12577: LD_INT 33
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 91
12591: PUSH
12592: LD_VAR 0 1
12596: PUSH
12597: LD_INT 12
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PUSH
12618: LD_INT 2
12620: GREATER
12621: AND
12622: IFFALSE 12645
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12624: LD_ADDR_VAR 0 18
12628: PUSH
12629: LD_INT 11
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_VAR 0 12
12643: ARRAY
12644: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12645: LD_VAR 0 18
12649: NOT
12650: PUSH
12651: LD_INT 40
12653: PPUSH
12654: LD_VAR 0 16
12658: PPUSH
12659: CALL_OW 321
12663: PUSH
12664: LD_INT 2
12666: EQUAL
12667: AND
12668: PUSH
12669: LD_INT 7
12671: PUSH
12672: LD_VAR 0 5
12676: IN
12677: PUSH
12678: LD_INT 28
12680: PUSH
12681: LD_VAR 0 5
12685: IN
12686: OR
12687: PUSH
12688: LD_INT 45
12690: PUSH
12691: LD_VAR 0 5
12695: IN
12696: OR
12697: AND
12698: IFFALSE 12952
// begin hex := GetHexInfo ( x , y ) ;
12700: LD_ADDR_VAR 0 4
12704: PUSH
12705: LD_VAR 0 10
12709: PPUSH
12710: LD_VAR 0 11
12714: PPUSH
12715: CALL_OW 546
12719: ST_TO_ADDR
// if hex [ 1 ] then
12720: LD_VAR 0 4
12724: PUSH
12725: LD_INT 1
12727: ARRAY
12728: IFFALSE 12732
// exit ;
12730: GO 13135
// height := hex [ 2 ] ;
12732: LD_ADDR_VAR 0 15
12736: PUSH
12737: LD_VAR 0 4
12741: PUSH
12742: LD_INT 2
12744: ARRAY
12745: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12746: LD_ADDR_VAR 0 14
12750: PUSH
12751: LD_INT 0
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: LD_INT 5
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: ST_TO_ADDR
// for i in tmp do
12769: LD_ADDR_VAR 0 8
12773: PUSH
12774: LD_VAR 0 14
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12950
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12782: LD_ADDR_VAR 0 9
12786: PUSH
12787: LD_VAR 0 10
12791: PPUSH
12792: LD_VAR 0 8
12796: PPUSH
12797: LD_INT 5
12799: PPUSH
12800: CALL_OW 272
12804: PUSH
12805: LD_VAR 0 11
12809: PPUSH
12810: LD_VAR 0 8
12814: PPUSH
12815: LD_INT 5
12817: PPUSH
12818: CALL_OW 273
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12827: LD_VAR 0 9
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: PPUSH
12836: LD_VAR 0 9
12840: PUSH
12841: LD_INT 2
12843: ARRAY
12844: PPUSH
12845: CALL_OW 488
12849: IFFALSE 12948
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12851: LD_ADDR_VAR 0 4
12855: PUSH
12856: LD_VAR 0 9
12860: PUSH
12861: LD_INT 1
12863: ARRAY
12864: PPUSH
12865: LD_VAR 0 9
12869: PUSH
12870: LD_INT 2
12872: ARRAY
12873: PPUSH
12874: CALL_OW 546
12878: ST_TO_ADDR
// if hex [ 1 ] then
12879: LD_VAR 0 4
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: IFFALSE 12891
// continue ;
12889: GO 12779
// h := hex [ 2 ] ;
12891: LD_ADDR_VAR 0 13
12895: PUSH
12896: LD_VAR 0 4
12900: PUSH
12901: LD_INT 2
12903: ARRAY
12904: ST_TO_ADDR
// if h + 7 < height then
12905: LD_VAR 0 13
12909: PUSH
12910: LD_INT 7
12912: PLUS
12913: PUSH
12914: LD_VAR 0 15
12918: LESS
12919: IFFALSE 12948
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12921: LD_ADDR_VAR 0 18
12925: PUSH
12926: LD_INT 7
12928: PUSH
12929: LD_INT 28
12931: PUSH
12932: LD_INT 45
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PUSH
12940: LD_VAR 0 12
12944: ARRAY
12945: ST_TO_ADDR
// break ;
12946: GO 12950
// end ; end ; end ;
12948: GO 12779
12950: POP
12951: POP
// end ; if not weapon then
12952: LD_VAR 0 18
12956: NOT
12957: IFFALSE 13017
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12959: LD_ADDR_VAR 0 5
12963: PUSH
12964: LD_VAR 0 5
12968: PUSH
12969: LD_INT 11
12971: PUSH
12972: LD_INT 30
12974: PUSH
12975: LD_INT 49
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: DIFF
12983: ST_TO_ADDR
// if not list then
12984: LD_VAR 0 5
12988: NOT
12989: IFFALSE 12993
// exit ;
12991: GO 13135
// weapon := list [ rand ( 1 , list ) ] ;
12993: LD_ADDR_VAR 0 18
12997: PUSH
12998: LD_VAR 0 5
13002: PUSH
13003: LD_INT 1
13005: PPUSH
13006: LD_VAR 0 5
13010: PPUSH
13011: CALL_OW 12
13015: ARRAY
13016: ST_TO_ADDR
// end ; if weapon then
13017: LD_VAR 0 18
13021: IFFALSE 13135
// begin tmp := CostOfWeapon ( weapon ) ;
13023: LD_ADDR_VAR 0 14
13027: PUSH
13028: LD_VAR 0 18
13032: PPUSH
13033: CALL_OW 451
13037: ST_TO_ADDR
// j := GetBase ( tower ) ;
13038: LD_ADDR_VAR 0 9
13042: PUSH
13043: LD_VAR 0 1
13047: PPUSH
13048: CALL_OW 274
13052: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13053: LD_VAR 0 9
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL_OW 275
13065: PUSH
13066: LD_VAR 0 14
13070: PUSH
13071: LD_INT 1
13073: ARRAY
13074: GREATEREQUAL
13075: PUSH
13076: LD_VAR 0 9
13080: PPUSH
13081: LD_INT 2
13083: PPUSH
13084: CALL_OW 275
13088: PUSH
13089: LD_VAR 0 14
13093: PUSH
13094: LD_INT 2
13096: ARRAY
13097: GREATEREQUAL
13098: AND
13099: PUSH
13100: LD_VAR 0 9
13104: PPUSH
13105: LD_INT 3
13107: PPUSH
13108: CALL_OW 275
13112: PUSH
13113: LD_VAR 0 14
13117: PUSH
13118: LD_INT 3
13120: ARRAY
13121: GREATEREQUAL
13122: AND
13123: IFFALSE 13135
// result := weapon ;
13125: LD_ADDR_VAR 0 3
13129: PUSH
13130: LD_VAR 0 18
13134: ST_TO_ADDR
// end ; end ;
13135: LD_VAR 0 3
13139: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13140: LD_INT 0
13142: PPUSH
13143: PPUSH
// result := true ;
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if array1 = array2 then
13152: LD_VAR 0 1
13156: PUSH
13157: LD_VAR 0 2
13161: EQUAL
13162: IFFALSE 13222
// begin for i = 1 to array1 do
13164: LD_ADDR_VAR 0 4
13168: PUSH
13169: DOUBLE
13170: LD_INT 1
13172: DEC
13173: ST_TO_ADDR
13174: LD_VAR 0 1
13178: PUSH
13179: FOR_TO
13180: IFFALSE 13218
// if array1 [ i ] <> array2 [ i ] then
13182: LD_VAR 0 1
13186: PUSH
13187: LD_VAR 0 4
13191: ARRAY
13192: PUSH
13193: LD_VAR 0 2
13197: PUSH
13198: LD_VAR 0 4
13202: ARRAY
13203: NONEQUAL
13204: IFFALSE 13216
// begin result := false ;
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_INT 0
13213: ST_TO_ADDR
// break ;
13214: GO 13218
// end ;
13216: GO 13179
13218: POP
13219: POP
// end else
13220: GO 13230
// result := false ;
13222: LD_ADDR_VAR 0 3
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// end ;
13230: LD_VAR 0 3
13234: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
// if not array1 or not array2 then
13239: LD_VAR 0 1
13243: NOT
13244: PUSH
13245: LD_VAR 0 2
13249: NOT
13250: OR
13251: IFFALSE 13255
// exit ;
13253: GO 13319
// result := true ;
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 1
13262: ST_TO_ADDR
// for i = 1 to array1 do
13263: LD_ADDR_VAR 0 4
13267: PUSH
13268: DOUBLE
13269: LD_INT 1
13271: DEC
13272: ST_TO_ADDR
13273: LD_VAR 0 1
13277: PUSH
13278: FOR_TO
13279: IFFALSE 13317
// if array1 [ i ] <> array2 [ i ] then
13281: LD_VAR 0 1
13285: PUSH
13286: LD_VAR 0 4
13290: ARRAY
13291: PUSH
13292: LD_VAR 0 2
13296: PUSH
13297: LD_VAR 0 4
13301: ARRAY
13302: NONEQUAL
13303: IFFALSE 13315
// begin result := false ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: LD_INT 0
13312: ST_TO_ADDR
// break ;
13313: GO 13317
// end ;
13315: GO 13278
13317: POP
13318: POP
// end ;
13319: LD_VAR 0 3
13323: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13324: LD_INT 0
13326: PPUSH
13327: PPUSH
13328: PPUSH
// pom := GetBase ( fac ) ;
13329: LD_ADDR_VAR 0 5
13333: PUSH
13334: LD_VAR 0 1
13338: PPUSH
13339: CALL_OW 274
13343: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13344: LD_ADDR_VAR 0 4
13348: PUSH
13349: LD_VAR 0 2
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: LD_VAR 0 2
13362: PUSH
13363: LD_INT 2
13365: ARRAY
13366: PPUSH
13367: LD_VAR 0 2
13371: PUSH
13372: LD_INT 3
13374: ARRAY
13375: PPUSH
13376: LD_VAR 0 2
13380: PUSH
13381: LD_INT 4
13383: ARRAY
13384: PPUSH
13385: CALL_OW 449
13389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13390: LD_ADDR_VAR 0 3
13394: PUSH
13395: LD_VAR 0 5
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 275
13407: PUSH
13408: LD_VAR 0 4
13412: PUSH
13413: LD_INT 1
13415: ARRAY
13416: GREATEREQUAL
13417: PUSH
13418: LD_VAR 0 5
13422: PPUSH
13423: LD_INT 2
13425: PPUSH
13426: CALL_OW 275
13430: PUSH
13431: LD_VAR 0 4
13435: PUSH
13436: LD_INT 2
13438: ARRAY
13439: GREATEREQUAL
13440: AND
13441: PUSH
13442: LD_VAR 0 5
13446: PPUSH
13447: LD_INT 3
13449: PPUSH
13450: CALL_OW 275
13454: PUSH
13455: LD_VAR 0 4
13459: PUSH
13460: LD_INT 3
13462: ARRAY
13463: GREATEREQUAL
13464: AND
13465: ST_TO_ADDR
// end ;
13466: LD_VAR 0 3
13470: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13471: LD_INT 0
13473: PPUSH
13474: PPUSH
13475: PPUSH
13476: PPUSH
// pom := GetBase ( building ) ;
13477: LD_ADDR_VAR 0 3
13481: PUSH
13482: LD_VAR 0 1
13486: PPUSH
13487: CALL_OW 274
13491: ST_TO_ADDR
// if not pom then
13492: LD_VAR 0 3
13496: NOT
13497: IFFALSE 13501
// exit ;
13499: GO 13671
// btype := GetBType ( building ) ;
13501: LD_ADDR_VAR 0 5
13505: PUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 266
13515: ST_TO_ADDR
// if btype = b_armoury then
13516: LD_VAR 0 5
13520: PUSH
13521: LD_INT 4
13523: EQUAL
13524: IFFALSE 13534
// btype := b_barracks ;
13526: LD_ADDR_VAR 0 5
13530: PUSH
13531: LD_INT 5
13533: ST_TO_ADDR
// if btype = b_depot then
13534: LD_VAR 0 5
13538: PUSH
13539: LD_INT 0
13541: EQUAL
13542: IFFALSE 13552
// btype := b_warehouse ;
13544: LD_ADDR_VAR 0 5
13548: PUSH
13549: LD_INT 1
13551: ST_TO_ADDR
// if btype = b_workshop then
13552: LD_VAR 0 5
13556: PUSH
13557: LD_INT 2
13559: EQUAL
13560: IFFALSE 13570
// btype := b_factory ;
13562: LD_ADDR_VAR 0 5
13566: PUSH
13567: LD_INT 3
13569: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13570: LD_ADDR_VAR 0 4
13574: PUSH
13575: LD_VAR 0 5
13579: PPUSH
13580: LD_VAR 0 1
13584: PPUSH
13585: CALL_OW 248
13589: PPUSH
13590: CALL_OW 450
13594: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: LD_VAR 0 3
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 275
13612: PUSH
13613: LD_VAR 0 4
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: GREATEREQUAL
13622: PUSH
13623: LD_VAR 0 3
13627: PPUSH
13628: LD_INT 2
13630: PPUSH
13631: CALL_OW 275
13635: PUSH
13636: LD_VAR 0 4
13640: PUSH
13641: LD_INT 2
13643: ARRAY
13644: GREATEREQUAL
13645: AND
13646: PUSH
13647: LD_VAR 0 3
13651: PPUSH
13652: LD_INT 3
13654: PPUSH
13655: CALL_OW 275
13659: PUSH
13660: LD_VAR 0 4
13664: PUSH
13665: LD_INT 3
13667: ARRAY
13668: GREATEREQUAL
13669: AND
13670: ST_TO_ADDR
// end ;
13671: LD_VAR 0 2
13675: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13676: LD_INT 0
13678: PPUSH
13679: PPUSH
13680: PPUSH
// pom := GetBase ( building ) ;
13681: LD_ADDR_VAR 0 4
13685: PUSH
13686: LD_VAR 0 1
13690: PPUSH
13691: CALL_OW 274
13695: ST_TO_ADDR
// if not pom then
13696: LD_VAR 0 4
13700: NOT
13701: IFFALSE 13705
// exit ;
13703: GO 13806
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13705: LD_ADDR_VAR 0 5
13709: PUSH
13710: LD_VAR 0 2
13714: PPUSH
13715: LD_VAR 0 1
13719: PPUSH
13720: CALL_OW 248
13724: PPUSH
13725: CALL_OW 450
13729: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13730: LD_ADDR_VAR 0 3
13734: PUSH
13735: LD_VAR 0 4
13739: PPUSH
13740: LD_INT 1
13742: PPUSH
13743: CALL_OW 275
13747: PUSH
13748: LD_VAR 0 5
13752: PUSH
13753: LD_INT 1
13755: ARRAY
13756: GREATEREQUAL
13757: PUSH
13758: LD_VAR 0 4
13762: PPUSH
13763: LD_INT 2
13765: PPUSH
13766: CALL_OW 275
13770: PUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_INT 2
13778: ARRAY
13779: GREATEREQUAL
13780: AND
13781: PUSH
13782: LD_VAR 0 4
13786: PPUSH
13787: LD_INT 3
13789: PPUSH
13790: CALL_OW 275
13794: PUSH
13795: LD_VAR 0 5
13799: PUSH
13800: LD_INT 3
13802: ARRAY
13803: GREATEREQUAL
13804: AND
13805: ST_TO_ADDR
// end ;
13806: LD_VAR 0 3
13810: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13811: LD_INT 0
13813: PPUSH
13814: PPUSH
13815: PPUSH
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
// result := false ;
13824: LD_ADDR_VAR 0 8
13828: PUSH
13829: LD_INT 0
13831: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13832: LD_VAR 0 5
13836: NOT
13837: PUSH
13838: LD_VAR 0 1
13842: NOT
13843: OR
13844: PUSH
13845: LD_VAR 0 2
13849: NOT
13850: OR
13851: PUSH
13852: LD_VAR 0 3
13856: NOT
13857: OR
13858: IFFALSE 13862
// exit ;
13860: GO 14676
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13862: LD_ADDR_VAR 0 14
13866: PUSH
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_VAR 0 2
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: LD_VAR 0 4
13886: PPUSH
13887: LD_VAR 0 5
13891: PUSH
13892: LD_INT 1
13894: ARRAY
13895: PPUSH
13896: CALL_OW 248
13900: PPUSH
13901: LD_INT 0
13903: PPUSH
13904: CALL 15929 0 6
13908: ST_TO_ADDR
// if not hexes then
13909: LD_VAR 0 14
13913: NOT
13914: IFFALSE 13918
// exit ;
13916: GO 14676
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13918: LD_ADDR_VAR 0 17
13922: PUSH
13923: LD_VAR 0 5
13927: PPUSH
13928: LD_INT 22
13930: PUSH
13931: LD_VAR 0 13
13935: PPUSH
13936: CALL_OW 255
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 30
13950: PUSH
13951: LD_INT 0
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 30
13960: PUSH
13961: LD_INT 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 72
13981: ST_TO_ADDR
// for i = 1 to hexes do
13982: LD_ADDR_VAR 0 9
13986: PUSH
13987: DOUBLE
13988: LD_INT 1
13990: DEC
13991: ST_TO_ADDR
13992: LD_VAR 0 14
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14674
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14000: LD_ADDR_VAR 0 13
14004: PUSH
14005: LD_VAR 0 14
14009: PUSH
14010: LD_VAR 0 9
14014: ARRAY
14015: PUSH
14016: LD_INT 1
14018: ARRAY
14019: PPUSH
14020: LD_VAR 0 14
14024: PUSH
14025: LD_VAR 0 9
14029: ARRAY
14030: PUSH
14031: LD_INT 2
14033: ARRAY
14034: PPUSH
14035: CALL_OW 428
14039: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14040: LD_VAR 0 14
14044: PUSH
14045: LD_VAR 0 9
14049: ARRAY
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: PPUSH
14055: LD_VAR 0 14
14059: PUSH
14060: LD_VAR 0 9
14064: ARRAY
14065: PUSH
14066: LD_INT 2
14068: ARRAY
14069: PPUSH
14070: CALL_OW 351
14074: PUSH
14075: LD_VAR 0 14
14079: PUSH
14080: LD_VAR 0 9
14084: ARRAY
14085: PUSH
14086: LD_INT 1
14088: ARRAY
14089: PPUSH
14090: LD_VAR 0 14
14094: PUSH
14095: LD_VAR 0 9
14099: ARRAY
14100: PUSH
14101: LD_INT 2
14103: ARRAY
14104: PPUSH
14105: CALL_OW 488
14109: NOT
14110: OR
14111: PUSH
14112: LD_VAR 0 13
14116: PPUSH
14117: CALL_OW 247
14121: PUSH
14122: LD_INT 3
14124: EQUAL
14125: OR
14126: IFFALSE 14132
// exit ;
14128: POP
14129: POP
14130: GO 14676
// if not tmp then
14132: LD_VAR 0 13
14136: NOT
14137: IFFALSE 14141
// continue ;
14139: GO 13997
// result := true ;
14141: LD_ADDR_VAR 0 8
14145: PUSH
14146: LD_INT 1
14148: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14149: LD_VAR 0 6
14153: PUSH
14154: LD_VAR 0 13
14158: PPUSH
14159: CALL_OW 247
14163: PUSH
14164: LD_INT 2
14166: EQUAL
14167: AND
14168: PUSH
14169: LD_VAR 0 13
14173: PPUSH
14174: CALL_OW 263
14178: PUSH
14179: LD_INT 1
14181: EQUAL
14182: AND
14183: IFFALSE 14347
// begin if IsDrivenBy ( tmp ) then
14185: LD_VAR 0 13
14189: PPUSH
14190: CALL_OW 311
14194: IFFALSE 14198
// continue ;
14196: GO 13997
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14198: LD_VAR 0 6
14202: PPUSH
14203: LD_INT 3
14205: PUSH
14206: LD_INT 60
14208: PUSH
14209: EMPTY
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: LD_INT 55
14221: PUSH
14222: EMPTY
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 72
14237: IFFALSE 14345
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14239: LD_ADDR_VAR 0 18
14243: PUSH
14244: LD_VAR 0 6
14248: PPUSH
14249: LD_INT 3
14251: PUSH
14252: LD_INT 60
14254: PUSH
14255: EMPTY
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: LD_INT 55
14267: PUSH
14268: EMPTY
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 72
14283: PUSH
14284: LD_INT 1
14286: ARRAY
14287: ST_TO_ADDR
// if IsInUnit ( driver ) then
14288: LD_VAR 0 18
14292: PPUSH
14293: CALL_OW 310
14297: IFFALSE 14308
// ComExit ( driver ) ;
14299: LD_VAR 0 18
14303: PPUSH
14304: CALL 39710 0 1
// AddComEnterUnit ( driver , tmp ) ;
14308: LD_VAR 0 18
14312: PPUSH
14313: LD_VAR 0 13
14317: PPUSH
14318: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14322: LD_VAR 0 18
14326: PPUSH
14327: LD_VAR 0 7
14331: PPUSH
14332: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14336: LD_VAR 0 18
14340: PPUSH
14341: CALL_OW 181
// end ; continue ;
14345: GO 13997
// end ; if not cleaners or not tmp in cleaners then
14347: LD_VAR 0 6
14351: NOT
14352: PUSH
14353: LD_VAR 0 13
14357: PUSH
14358: LD_VAR 0 6
14362: IN
14363: NOT
14364: OR
14365: IFFALSE 14672
// begin if dep then
14367: LD_VAR 0 17
14371: IFFALSE 14507
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14373: LD_ADDR_VAR 0 16
14377: PUSH
14378: LD_VAR 0 17
14382: PUSH
14383: LD_INT 1
14385: ARRAY
14386: PPUSH
14387: CALL_OW 250
14391: PPUSH
14392: LD_VAR 0 17
14396: PUSH
14397: LD_INT 1
14399: ARRAY
14400: PPUSH
14401: CALL_OW 254
14405: PPUSH
14406: LD_INT 5
14408: PPUSH
14409: CALL_OW 272
14413: PUSH
14414: LD_VAR 0 17
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PPUSH
14423: CALL_OW 251
14427: PPUSH
14428: LD_VAR 0 17
14432: PUSH
14433: LD_INT 1
14435: ARRAY
14436: PPUSH
14437: CALL_OW 254
14441: PPUSH
14442: LD_INT 5
14444: PPUSH
14445: CALL_OW 273
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14454: LD_VAR 0 16
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PPUSH
14463: LD_VAR 0 16
14467: PUSH
14468: LD_INT 2
14470: ARRAY
14471: PPUSH
14472: CALL_OW 488
14476: IFFALSE 14507
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14478: LD_VAR 0 13
14482: PPUSH
14483: LD_VAR 0 16
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_VAR 0 16
14496: PUSH
14497: LD_INT 2
14499: ARRAY
14500: PPUSH
14501: CALL_OW 111
// continue ;
14505: GO 13997
// end ; end ; r := GetDir ( tmp ) ;
14507: LD_ADDR_VAR 0 15
14511: PUSH
14512: LD_VAR 0 13
14516: PPUSH
14517: CALL_OW 254
14521: ST_TO_ADDR
// if r = 5 then
14522: LD_VAR 0 15
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14540
// r := 0 ;
14532: LD_ADDR_VAR 0 15
14536: PUSH
14537: LD_INT 0
14539: ST_TO_ADDR
// for j = r to 5 do
14540: LD_ADDR_VAR 0 10
14544: PUSH
14545: DOUBLE
14546: LD_VAR 0 15
14550: DEC
14551: ST_TO_ADDR
14552: LD_INT 5
14554: PUSH
14555: FOR_TO
14556: IFFALSE 14670
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14558: LD_ADDR_VAR 0 11
14562: PUSH
14563: LD_VAR 0 13
14567: PPUSH
14568: CALL_OW 250
14572: PPUSH
14573: LD_VAR 0 10
14577: PPUSH
14578: LD_INT 2
14580: PPUSH
14581: CALL_OW 272
14585: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14586: LD_ADDR_VAR 0 12
14590: PUSH
14591: LD_VAR 0 13
14595: PPUSH
14596: CALL_OW 251
14600: PPUSH
14601: LD_VAR 0 10
14605: PPUSH
14606: LD_INT 2
14608: PPUSH
14609: CALL_OW 273
14613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14614: LD_VAR 0 11
14618: PPUSH
14619: LD_VAR 0 12
14623: PPUSH
14624: CALL_OW 488
14628: PUSH
14629: LD_VAR 0 11
14633: PPUSH
14634: LD_VAR 0 12
14638: PPUSH
14639: CALL_OW 428
14643: NOT
14644: AND
14645: IFFALSE 14668
// begin ComMoveXY ( tmp , _x , _y ) ;
14647: LD_VAR 0 13
14651: PPUSH
14652: LD_VAR 0 11
14656: PPUSH
14657: LD_VAR 0 12
14661: PPUSH
14662: CALL_OW 111
// break ;
14666: GO 14670
// end ; end ;
14668: GO 14555
14670: POP
14671: POP
// end ; end ;
14672: GO 13997
14674: POP
14675: POP
// end ;
14676: LD_VAR 0 8
14680: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14681: LD_INT 0
14683: PPUSH
// result := true ;
14684: LD_ADDR_VAR 0 3
14688: PUSH
14689: LD_INT 1
14691: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14692: LD_VAR 0 2
14696: PUSH
14697: LD_INT 24
14699: DOUBLE
14700: EQUAL
14701: IFTRUE 14711
14703: LD_INT 33
14705: DOUBLE
14706: EQUAL
14707: IFTRUE 14711
14709: GO 14736
14711: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_INT 32
14719: PPUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 321
14729: PUSH
14730: LD_INT 2
14732: EQUAL
14733: ST_TO_ADDR
14734: GO 15052
14736: LD_INT 20
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14769
14744: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 6
14752: PPUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 321
14762: PUSH
14763: LD_INT 2
14765: EQUAL
14766: ST_TO_ADDR
14767: GO 15052
14769: LD_INT 22
14771: DOUBLE
14772: EQUAL
14773: IFTRUE 14783
14775: LD_INT 36
14777: DOUBLE
14778: EQUAL
14779: IFTRUE 14783
14781: GO 14808
14783: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14784: LD_ADDR_VAR 0 3
14788: PUSH
14789: LD_INT 15
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 321
14801: PUSH
14802: LD_INT 2
14804: EQUAL
14805: ST_TO_ADDR
14806: GO 15052
14808: LD_INT 30
14810: DOUBLE
14811: EQUAL
14812: IFTRUE 14816
14814: GO 14841
14816: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14817: LD_ADDR_VAR 0 3
14821: PUSH
14822: LD_INT 20
14824: PPUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 321
14834: PUSH
14835: LD_INT 2
14837: EQUAL
14838: ST_TO_ADDR
14839: GO 15052
14841: LD_INT 28
14843: DOUBLE
14844: EQUAL
14845: IFTRUE 14855
14847: LD_INT 21
14849: DOUBLE
14850: EQUAL
14851: IFTRUE 14855
14853: GO 14880
14855: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14856: LD_ADDR_VAR 0 3
14860: PUSH
14861: LD_INT 21
14863: PPUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 321
14873: PUSH
14874: LD_INT 2
14876: EQUAL
14877: ST_TO_ADDR
14878: GO 15052
14880: LD_INT 16
14882: DOUBLE
14883: EQUAL
14884: IFTRUE 14888
14886: GO 14913
14888: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14889: LD_ADDR_VAR 0 3
14893: PUSH
14894: LD_INT 84
14896: PPUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 321
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: ST_TO_ADDR
14911: GO 15052
14913: LD_INT 19
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14927
14919: LD_INT 23
14921: DOUBLE
14922: EQUAL
14923: IFTRUE 14927
14925: GO 14952
14927: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14928: LD_ADDR_VAR 0 3
14932: PUSH
14933: LD_INT 83
14935: PPUSH
14936: LD_VAR 0 1
14940: PPUSH
14941: CALL_OW 321
14945: PUSH
14946: LD_INT 2
14948: EQUAL
14949: ST_TO_ADDR
14950: GO 15052
14952: LD_INT 17
14954: DOUBLE
14955: EQUAL
14956: IFTRUE 14960
14958: GO 14985
14960: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14961: LD_ADDR_VAR 0 3
14965: PUSH
14966: LD_INT 39
14968: PPUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: CALL_OW 321
14978: PUSH
14979: LD_INT 2
14981: EQUAL
14982: ST_TO_ADDR
14983: GO 15052
14985: LD_INT 18
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15018
14993: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14994: LD_ADDR_VAR 0 3
14998: PUSH
14999: LD_INT 40
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 321
15011: PUSH
15012: LD_INT 2
15014: EQUAL
15015: ST_TO_ADDR
15016: GO 15052
15018: LD_INT 27
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15051
15026: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 35
15034: PPUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 321
15044: PUSH
15045: LD_INT 2
15047: EQUAL
15048: ST_TO_ADDR
15049: GO 15052
15051: POP
// end ;
15052: LD_VAR 0 3
15056: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15057: LD_INT 0
15059: PPUSH
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
// result := false ;
15070: LD_ADDR_VAR 0 6
15074: PUSH
15075: LD_INT 0
15077: ST_TO_ADDR
// if btype = b_depot then
15078: LD_VAR 0 2
15082: PUSH
15083: LD_INT 0
15085: EQUAL
15086: IFFALSE 15098
// begin result := true ;
15088: LD_ADDR_VAR 0 6
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// exit ;
15096: GO 15924
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15098: LD_VAR 0 1
15102: NOT
15103: PUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: CALL_OW 266
15113: PUSH
15114: LD_INT 0
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: IN
15124: NOT
15125: OR
15126: PUSH
15127: LD_VAR 0 2
15131: NOT
15132: OR
15133: PUSH
15134: LD_VAR 0 5
15138: PUSH
15139: LD_INT 0
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 3
15150: PUSH
15151: LD_INT 4
15153: PUSH
15154: LD_INT 5
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: IN
15165: NOT
15166: OR
15167: PUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: LD_VAR 0 4
15177: PPUSH
15178: CALL_OW 488
15182: NOT
15183: OR
15184: IFFALSE 15188
// exit ;
15186: GO 15924
// side := GetSide ( depot ) ;
15188: LD_ADDR_VAR 0 9
15192: PUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 255
15202: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15203: LD_VAR 0 9
15207: PPUSH
15208: LD_VAR 0 2
15212: PPUSH
15213: CALL 14681 0 2
15217: NOT
15218: IFFALSE 15222
// exit ;
15220: GO 15924
// pom := GetBase ( depot ) ;
15222: LD_ADDR_VAR 0 10
15226: PUSH
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 274
15236: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15237: LD_ADDR_VAR 0 11
15241: PUSH
15242: LD_VAR 0 2
15246: PPUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 248
15256: PPUSH
15257: CALL_OW 450
15261: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15262: LD_VAR 0 10
15266: PPUSH
15267: LD_INT 1
15269: PPUSH
15270: CALL_OW 275
15274: PUSH
15275: LD_VAR 0 11
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: GREATEREQUAL
15284: PUSH
15285: LD_VAR 0 10
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 275
15297: PUSH
15298: LD_VAR 0 11
15302: PUSH
15303: LD_INT 2
15305: ARRAY
15306: GREATEREQUAL
15307: AND
15308: PUSH
15309: LD_VAR 0 10
15313: PPUSH
15314: LD_INT 3
15316: PPUSH
15317: CALL_OW 275
15321: PUSH
15322: LD_VAR 0 11
15326: PUSH
15327: LD_INT 3
15329: ARRAY
15330: GREATEREQUAL
15331: AND
15332: NOT
15333: IFFALSE 15337
// exit ;
15335: GO 15924
// if GetBType ( depot ) = b_depot then
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 266
15346: PUSH
15347: LD_INT 0
15349: EQUAL
15350: IFFALSE 15362
// dist := 28 else
15352: LD_ADDR_VAR 0 14
15356: PUSH
15357: LD_INT 28
15359: ST_TO_ADDR
15360: GO 15370
// dist := 36 ;
15362: LD_ADDR_VAR 0 14
15366: PUSH
15367: LD_INT 36
15369: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15370: LD_VAR 0 1
15374: PPUSH
15375: LD_VAR 0 3
15379: PPUSH
15380: LD_VAR 0 4
15384: PPUSH
15385: CALL_OW 297
15389: PUSH
15390: LD_VAR 0 14
15394: GREATER
15395: IFFALSE 15399
// exit ;
15397: GO 15924
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15399: LD_ADDR_VAR 0 12
15403: PUSH
15404: LD_VAR 0 2
15408: PPUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: LD_VAR 0 5
15423: PPUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 248
15433: PPUSH
15434: LD_INT 0
15436: PPUSH
15437: CALL 15929 0 6
15441: ST_TO_ADDR
// if not hexes then
15442: LD_VAR 0 12
15446: NOT
15447: IFFALSE 15451
// exit ;
15449: GO 15924
// hex := GetHexInfo ( x , y ) ;
15451: LD_ADDR_VAR 0 15
15455: PUSH
15456: LD_VAR 0 3
15460: PPUSH
15461: LD_VAR 0 4
15465: PPUSH
15466: CALL_OW 546
15470: ST_TO_ADDR
// if hex [ 1 ] then
15471: LD_VAR 0 15
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: IFFALSE 15483
// exit ;
15481: GO 15924
// height := hex [ 2 ] ;
15483: LD_ADDR_VAR 0 13
15487: PUSH
15488: LD_VAR 0 15
15492: PUSH
15493: LD_INT 2
15495: ARRAY
15496: ST_TO_ADDR
// for i = 1 to hexes do
15497: LD_ADDR_VAR 0 7
15501: PUSH
15502: DOUBLE
15503: LD_INT 1
15505: DEC
15506: ST_TO_ADDR
15507: LD_VAR 0 12
15511: PUSH
15512: FOR_TO
15513: IFFALSE 15843
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15515: LD_VAR 0 12
15519: PUSH
15520: LD_VAR 0 7
15524: ARRAY
15525: PUSH
15526: LD_INT 1
15528: ARRAY
15529: PPUSH
15530: LD_VAR 0 12
15534: PUSH
15535: LD_VAR 0 7
15539: ARRAY
15540: PUSH
15541: LD_INT 2
15543: ARRAY
15544: PPUSH
15545: CALL_OW 488
15549: NOT
15550: PUSH
15551: LD_VAR 0 12
15555: PUSH
15556: LD_VAR 0 7
15560: ARRAY
15561: PUSH
15562: LD_INT 1
15564: ARRAY
15565: PPUSH
15566: LD_VAR 0 12
15570: PUSH
15571: LD_VAR 0 7
15575: ARRAY
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: PPUSH
15581: CALL_OW 428
15585: PUSH
15586: LD_INT 0
15588: GREATER
15589: OR
15590: PUSH
15591: LD_VAR 0 12
15595: PUSH
15596: LD_VAR 0 7
15600: ARRAY
15601: PUSH
15602: LD_INT 1
15604: ARRAY
15605: PPUSH
15606: LD_VAR 0 12
15610: PUSH
15611: LD_VAR 0 7
15615: ARRAY
15616: PUSH
15617: LD_INT 2
15619: ARRAY
15620: PPUSH
15621: CALL_OW 351
15625: OR
15626: IFFALSE 15632
// exit ;
15628: POP
15629: POP
15630: GO 15924
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15632: LD_ADDR_VAR 0 8
15636: PUSH
15637: LD_VAR 0 12
15641: PUSH
15642: LD_VAR 0 7
15646: ARRAY
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: LD_VAR 0 12
15656: PUSH
15657: LD_VAR 0 7
15661: ARRAY
15662: PUSH
15663: LD_INT 2
15665: ARRAY
15666: PPUSH
15667: CALL_OW 546
15671: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15672: LD_VAR 0 8
15676: PUSH
15677: LD_INT 1
15679: ARRAY
15680: PUSH
15681: LD_VAR 0 8
15685: PUSH
15686: LD_INT 2
15688: ARRAY
15689: PUSH
15690: LD_VAR 0 13
15694: PUSH
15695: LD_INT 2
15697: PLUS
15698: GREATER
15699: OR
15700: PUSH
15701: LD_VAR 0 8
15705: PUSH
15706: LD_INT 2
15708: ARRAY
15709: PUSH
15710: LD_VAR 0 13
15714: PUSH
15715: LD_INT 2
15717: MINUS
15718: LESS
15719: OR
15720: PUSH
15721: LD_VAR 0 8
15725: PUSH
15726: LD_INT 3
15728: ARRAY
15729: PUSH
15730: LD_INT 0
15732: PUSH
15733: LD_INT 8
15735: PUSH
15736: LD_INT 9
15738: PUSH
15739: LD_INT 10
15741: PUSH
15742: LD_INT 11
15744: PUSH
15745: LD_INT 12
15747: PUSH
15748: LD_INT 13
15750: PUSH
15751: LD_INT 16
15753: PUSH
15754: LD_INT 17
15756: PUSH
15757: LD_INT 18
15759: PUSH
15760: LD_INT 19
15762: PUSH
15763: LD_INT 20
15765: PUSH
15766: LD_INT 21
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: IN
15784: NOT
15785: OR
15786: PUSH
15787: LD_VAR 0 8
15791: PUSH
15792: LD_INT 5
15794: ARRAY
15795: NOT
15796: OR
15797: PUSH
15798: LD_VAR 0 8
15802: PUSH
15803: LD_INT 6
15805: ARRAY
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: LD_INT 2
15812: PUSH
15813: LD_INT 7
15815: PUSH
15816: LD_INT 9
15818: PUSH
15819: LD_INT 10
15821: PUSH
15822: LD_INT 11
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: IN
15833: NOT
15834: OR
15835: IFFALSE 15841
// exit ;
15837: POP
15838: POP
15839: GO 15924
// end ;
15841: GO 15512
15843: POP
15844: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15845: LD_VAR 0 9
15849: PPUSH
15850: LD_VAR 0 3
15854: PPUSH
15855: LD_VAR 0 4
15859: PPUSH
15860: LD_INT 20
15862: PPUSH
15863: CALL 7847 0 4
15867: PUSH
15868: LD_INT 4
15870: ARRAY
15871: IFFALSE 15875
// exit ;
15873: GO 15924
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15875: LD_VAR 0 2
15879: PUSH
15880: LD_INT 29
15882: PUSH
15883: LD_INT 30
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: IN
15890: PUSH
15891: LD_VAR 0 3
15895: PPUSH
15896: LD_VAR 0 4
15900: PPUSH
15901: LD_VAR 0 9
15905: PPUSH
15906: CALL_OW 440
15910: NOT
15911: AND
15912: IFFALSE 15916
// exit ;
15914: GO 15924
// result := true ;
15916: LD_ADDR_VAR 0 6
15920: PUSH
15921: LD_INT 1
15923: ST_TO_ADDR
// end ;
15924: LD_VAR 0 6
15928: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
15940: PPUSH
15941: PPUSH
15942: PPUSH
15943: PPUSH
15944: PPUSH
15945: PPUSH
15946: PPUSH
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
15952: PPUSH
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
15959: PPUSH
15960: PPUSH
15961: PPUSH
15962: PPUSH
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
15967: PPUSH
15968: PPUSH
15969: PPUSH
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
15985: PPUSH
15986: PPUSH
15987: PPUSH
15988: PPUSH
// result = [ ] ;
15989: LD_ADDR_VAR 0 7
15993: PUSH
15994: EMPTY
15995: ST_TO_ADDR
// temp_list = [ ] ;
15996: LD_ADDR_VAR 0 9
16000: PUSH
16001: EMPTY
16002: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16003: LD_VAR 0 4
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: LD_INT 3
16019: PUSH
16020: LD_INT 4
16022: PUSH
16023: LD_INT 5
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: IN
16034: NOT
16035: PUSH
16036: LD_VAR 0 1
16040: PUSH
16041: LD_INT 0
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: IN
16051: PUSH
16052: LD_VAR 0 5
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: LD_INT 2
16062: PUSH
16063: LD_INT 3
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: LIST
16070: IN
16071: NOT
16072: AND
16073: OR
16074: IFFALSE 16078
// exit ;
16076: GO 34469
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16078: LD_VAR 0 1
16082: PUSH
16083: LD_INT 6
16085: PUSH
16086: LD_INT 7
16088: PUSH
16089: LD_INT 8
16091: PUSH
16092: LD_INT 13
16094: PUSH
16095: LD_INT 12
16097: PUSH
16098: LD_INT 15
16100: PUSH
16101: LD_INT 11
16103: PUSH
16104: LD_INT 14
16106: PUSH
16107: LD_INT 10
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: IN
16121: IFFALSE 16131
// btype = b_lab ;
16123: LD_ADDR_VAR 0 1
16127: PUSH
16128: LD_INT 6
16130: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16131: LD_VAR 0 6
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: LD_INT 2
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: LIST
16149: IN
16150: NOT
16151: PUSH
16152: LD_VAR 0 1
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 3
16168: PUSH
16169: LD_INT 6
16171: PUSH
16172: LD_INT 36
16174: PUSH
16175: LD_INT 4
16177: PUSH
16178: LD_INT 5
16180: PUSH
16181: LD_INT 31
16183: PUSH
16184: LD_INT 32
16186: PUSH
16187: LD_INT 33
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: IN
16203: NOT
16204: PUSH
16205: LD_VAR 0 6
16209: PUSH
16210: LD_INT 1
16212: EQUAL
16213: AND
16214: OR
16215: PUSH
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: LD_INT 3
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: IN
16231: NOT
16232: PUSH
16233: LD_VAR 0 6
16237: PUSH
16238: LD_INT 2
16240: EQUAL
16241: AND
16242: OR
16243: IFFALSE 16253
// mode = 0 ;
16245: LD_ADDR_VAR 0 6
16249: PUSH
16250: LD_INT 0
16252: ST_TO_ADDR
// case mode of 0 :
16253: LD_VAR 0 6
16257: PUSH
16258: LD_INT 0
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 27719
16266: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16267: LD_ADDR_VAR 0 11
16271: PUSH
16272: LD_INT 0
16274: PUSH
16275: LD_INT 0
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 0
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: LD_INT 1
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 1
16325: NEG
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 1
16336: NEG
16337: PUSH
16338: LD_INT 1
16340: NEG
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: NEG
16349: PUSH
16350: LD_INT 2
16352: NEG
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 0
16360: PUSH
16361: LD_INT 2
16363: NEG
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: LD_INT 1
16374: NEG
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 1
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 0
16392: PUSH
16393: LD_INT 2
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: NEG
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: LD_INT 3
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: PUSH
16435: LD_INT 2
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16460: LD_ADDR_VAR 0 12
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 0
16477: PUSH
16478: LD_INT 1
16480: NEG
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: LD_INT 0
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 1
16529: NEG
16530: PUSH
16531: LD_INT 1
16533: NEG
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 1
16572: NEG
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 2
16583: NEG
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 2
16594: NEG
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 2
16606: NEG
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 3
16617: NEG
16618: PUSH
16619: LD_INT 0
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 3
16628: NEG
16629: PUSH
16630: LD_INT 1
16632: NEG
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16656: LD_ADDR_VAR 0 13
16660: PUSH
16661: LD_INT 0
16663: PUSH
16664: LD_INT 0
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: LD_INT 1
16676: NEG
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 0
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: LD_INT 1
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 1
16714: NEG
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 1
16725: NEG
16726: PUSH
16727: LD_INT 1
16729: NEG
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 1
16737: NEG
16738: PUSH
16739: LD_INT 2
16741: NEG
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 2
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: PUSH
16770: LD_INT 2
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 2
16779: NEG
16780: PUSH
16781: LD_INT 1
16783: NEG
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 2
16791: NEG
16792: PUSH
16793: LD_INT 2
16795: NEG
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 2
16803: NEG
16804: PUSH
16805: LD_INT 3
16807: NEG
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 3
16815: NEG
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 3
16827: NEG
16828: PUSH
16829: LD_INT 3
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16855: LD_ADDR_VAR 0 14
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 0
16872: PUSH
16873: LD_INT 1
16875: NEG
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: LD_INT 0
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: LD_INT 1
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 1
16913: NEG
16914: PUSH
16915: LD_INT 0
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 1
16924: NEG
16925: PUSH
16926: LD_INT 1
16928: NEG
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 1
16936: NEG
16937: PUSH
16938: LD_INT 2
16940: NEG
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 0
16948: PUSH
16949: LD_INT 2
16951: NEG
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: LD_INT 1
16962: NEG
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 1
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: LD_INT 2
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 1
16990: NEG
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: NEG
17002: PUSH
17003: LD_INT 3
17005: NEG
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 0
17013: PUSH
17014: LD_INT 3
17016: NEG
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 1
17024: PUSH
17025: LD_INT 2
17027: NEG
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17051: LD_ADDR_VAR 0 15
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: LD_INT 1
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: NEG
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: NEG
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 1
17163: NEG
17164: PUSH
17165: LD_INT 1
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: NEG
17175: PUSH
17176: LD_INT 0
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 2
17185: NEG
17186: PUSH
17187: LD_INT 1
17189: NEG
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: LD_INT 1
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 3
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 3
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17244: LD_ADDR_VAR 0 16
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: LD_INT 1
17264: NEG
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 0
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 1
17302: NEG
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 1
17313: NEG
17314: PUSH
17315: LD_INT 1
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: LD_INT 2
17329: NEG
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: NEG
17368: PUSH
17369: LD_INT 1
17371: NEG
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 2
17379: NEG
17380: PUSH
17381: LD_INT 2
17383: NEG
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 3
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 3
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 3
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17437: LD_ADDR_VAR 0 17
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: LD_INT 2
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 2
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: NEG
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 2
17613: NEG
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 2
17624: NEG
17625: PUSH
17626: LD_INT 1
17628: NEG
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 2
17636: NEG
17637: PUSH
17638: LD_INT 2
17640: NEG
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17667: LD_ADDR_VAR 0 18
17671: PUSH
17672: LD_INT 0
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 1
17736: NEG
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 1
17748: NEG
17749: PUSH
17750: LD_INT 2
17752: NEG
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: LD_INT 2
17763: NEG
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: PUSH
17772: LD_INT 1
17774: NEG
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 2
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 2
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: LD_INT 2
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: LD_INT 2
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 2
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: NEG
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 2
17843: NEG
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 2
17854: NEG
17855: PUSH
17856: LD_INT 1
17858: NEG
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 2
17866: NEG
17867: PUSH
17868: LD_INT 2
17870: NEG
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17897: LD_ADDR_VAR 0 19
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: NEG
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 1
17966: NEG
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: NEG
17979: PUSH
17980: LD_INT 2
17982: NEG
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: LD_INT 1
18004: NEG
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: LD_INT 2
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 2
18073: NEG
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 2
18084: NEG
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 2
18096: NEG
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18127: LD_ADDR_VAR 0 20
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: LD_INT 0
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 1
18196: NEG
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 0
18220: PUSH
18221: LD_INT 2
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 0
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: NEG
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: NEG
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: NEG
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 2
18326: NEG
18327: PUSH
18328: LD_INT 2
18330: NEG
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18357: LD_ADDR_VAR 0 21
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: NEG
18427: PUSH
18428: LD_INT 1
18430: NEG
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: LD_INT 2
18442: NEG
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: LD_INT 2
18453: NEG
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 2
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 1
18522: NEG
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: LD_INT 0
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 2
18544: NEG
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 2
18556: NEG
18557: PUSH
18558: LD_INT 2
18560: NEG
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18587: LD_ADDR_VAR 0 22
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 1
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 1
18656: NEG
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: LD_INT 2
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: NEG
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 2
18774: NEG
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 2
18786: NEG
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18817: LD_ADDR_VAR 0 23
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: LD_INT 2
18902: NEG
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: LD_INT 2
18913: NEG
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 2
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: NEG
18994: PUSH
18995: LD_INT 0
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 2
19004: NEG
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 2
19016: NEG
19017: PUSH
19018: LD_INT 2
19020: NEG
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: NEG
19029: PUSH
19030: LD_INT 3
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: LD_INT 3
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: LD_INT 2
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19097: LD_ADDR_VAR 0 24
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: NEG
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: LD_INT 2
19182: NEG
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 0
19190: PUSH
19191: LD_INT 2
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 2
19273: NEG
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 3
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19373: LD_ADDR_VAR 0 25
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 2
19458: NEG
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: NEG
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: NEG
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 3
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 3
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: LD_INT 3
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: LD_INT 3
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19647: LD_ADDR_VAR 0 26
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 2
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 2
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 2
19823: NEG
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 2
19834: NEG
19835: PUSH
19836: LD_INT 1
19838: NEG
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: LD_INT 2
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: NEG
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19923: LD_ADDR_VAR 0 27
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 1
19992: NEG
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: LD_INT 2
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: NEG
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: NEG
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 3
20156: NEG
20157: PUSH
20158: LD_INT 1
20160: NEG
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 3
20168: NEG
20169: PUSH
20170: LD_INT 2
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20203: LD_ADDR_VAR 0 28
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 0
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 1
20261: NEG
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: LD_INT 2
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: NEG
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 2
20390: NEG
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: LD_INT 2
20406: NEG
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 2
20414: NEG
20415: PUSH
20416: LD_INT 3
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: NEG
20427: PUSH
20428: LD_INT 3
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 3
20438: NEG
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 3
20450: NEG
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20485: LD_ADDR_VAR 0 29
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: LD_INT 2
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 2
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 2
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: NEG
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: NEG
20664: PUSH
20665: LD_INT 2
20667: NEG
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: LD_INT 3
20679: NEG
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 3
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: LD_INT 3
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 3
20729: NEG
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20764: LD_ADDR_VAR 0 30
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 0
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: NEG
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 3
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: LD_INT 2
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 3
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: NEG
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 3
21007: NEG
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21042: LD_ADDR_VAR 0 31
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: LD_INT 2
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 2
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: NEG
21220: PUSH
21221: LD_INT 2
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: LD_INT 3
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: LD_INT 3
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 3
21285: NEG
21286: PUSH
21287: LD_INT 2
21289: NEG
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21320: LD_ADDR_VAR 0 32
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 1
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: LD_INT 2
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: LD_INT 2
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: LD_INT 3
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 2
21542: PUSH
21543: LD_INT 3
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 3
21563: NEG
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21598: LD_ADDR_VAR 0 33
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 1
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 0
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: LD_INT 2
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 2
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 1
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: LD_INT 2
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 2
21753: NEG
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: NEG
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 2
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: LD_INT 3
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 3
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: LD_INT 3
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 1
21831: NEG
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 3
21842: NEG
21843: PUSH
21844: LD_INT 2
21846: NEG
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21877: LD_ADDR_VAR 0 34
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 0
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: NEG
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 2
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: NEG
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 2
22044: NEG
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 2
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: LD_INT 3
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 3
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 3
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: NEG
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 3
22122: NEG
22123: PUSH
22124: LD_INT 1
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22157: LD_ADDR_VAR 0 35
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 2
22248: NEG
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22269: LD_ADDR_VAR 0 36
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: LD_INT 2
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22381: LD_ADDR_VAR 0 37
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 1
22401: NEG
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22493: LD_ADDR_VAR 0 38
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: LD_INT 1
22513: NEG
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22605: LD_ADDR_VAR 0 39
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: LD_INT 2
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22717: LD_ADDR_VAR 0 40
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22829: LD_ADDR_VAR 0 41
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: NEG
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: NEG
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: NEG
23020: PUSH
23021: LD_INT 3
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 3
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 3
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 3
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 2
23092: NEG
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 3
23103: NEG
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 3
23114: NEG
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 3
23126: NEG
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 3
23138: NEG
23139: PUSH
23140: LD_INT 3
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23179: LD_ADDR_VAR 0 42
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: LD_INT 2
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 2
23357: NEG
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 2
23369: NEG
23370: PUSH
23371: LD_INT 3
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 3
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 3
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: LD_INT 2
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 2
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 3
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: LD_INT 3
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: LD_INT 3
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 3
23476: NEG
23477: PUSH
23478: LD_INT 2
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 3
23488: NEG
23489: PUSH
23490: LD_INT 3
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23529: LD_ADDR_VAR 0 43
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 2
23644: PUSH
23645: LD_INT 0
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 2
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: LD_INT 3
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 3
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 2
23744: NEG
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 3
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 3
23825: NEG
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 3
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23877: LD_ADDR_VAR 0 44
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 0
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 2
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 2
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: NEG
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 2
24043: NEG
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 2
24055: NEG
24056: PUSH
24057: LD_INT 2
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: LD_INT 3
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 3
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 3
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 3
24151: NEG
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 3
24162: NEG
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 3
24174: NEG
24175: PUSH
24176: LD_INT 2
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 3
24186: NEG
24187: PUSH
24188: LD_INT 3
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24227: LD_ADDR_VAR 0 45
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: NEG
24406: PUSH
24407: LD_INT 2
24409: NEG
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: NEG
24418: PUSH
24419: LD_INT 3
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 3
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 3
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 3
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: LD_INT 3
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: LD_INT 3
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: PUSH
24494: LD_INT 3
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: LD_INT 3
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 3
24524: NEG
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 3
24536: NEG
24537: PUSH
24538: LD_INT 3
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24577: LD_ADDR_VAR 0 46
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: LD_INT 0
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: LD_INT 2
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: NEG
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 2
24754: NEG
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: LD_INT 3
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 3
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 3
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 3
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 3
24873: NEG
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 3
24884: NEG
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24925: LD_ADDR_VAR 0 47
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: LD_INT 2
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 2
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25076: LD_ADDR_VAR 0 48
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: LD_INT 2
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25223: LD_ADDR_VAR 0 49
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25367: LD_ADDR_VAR 0 50
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25511: LD_ADDR_VAR 0 51
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: NEG
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25658: LD_ADDR_VAR 0 52
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: NEG
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25809: LD_ADDR_VAR 0 53
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 2
25996: NEG
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26039: LD_ADDR_VAR 0 54
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 2
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: NEG
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: NEG
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: LD_INT 2
26242: NEG
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26269: LD_ADDR_VAR 0 55
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: LD_INT 2
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26499: LD_ADDR_VAR 0 56
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 2
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 2
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 0
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26729: LD_ADDR_VAR 0 57
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26959: LD_ADDR_VAR 0 58
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27189: LD_ADDR_VAR 0 59
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27277: LD_ADDR_VAR 0 60
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27365: LD_ADDR_VAR 0 61
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27453: LD_ADDR_VAR 0 62
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27541: LD_ADDR_VAR 0 63
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27629: LD_ADDR_VAR 0 64
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
// end ; 1 :
27717: GO 33614
27719: LD_INT 1
27721: DOUBLE
27722: EQUAL
27723: IFTRUE 27727
27725: GO 30350
27727: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27728: LD_ADDR_VAR 0 11
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 3
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 3
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27772: LD_ADDR_VAR 0 12
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 3
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27813: LD_ADDR_VAR 0 13
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27853: LD_ADDR_VAR 0 14
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27894: LD_ADDR_VAR 0 15
27898: PUSH
27899: LD_INT 2
27901: NEG
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 3
27912: NEG
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 3
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27938: LD_ADDR_VAR 0 16
27942: PUSH
27943: LD_INT 2
27945: NEG
27946: PUSH
27947: LD_INT 3
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: NEG
27958: PUSH
27959: LD_INT 2
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 3
27969: NEG
27970: PUSH
27971: LD_INT 3
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27984: LD_ADDR_VAR 0 17
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 3
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 3
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28028: LD_ADDR_VAR 0 18
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 3
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28069: LD_ADDR_VAR 0 19
28073: PUSH
28074: LD_INT 3
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 3
28086: PUSH
28087: LD_INT 3
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28109: LD_ADDR_VAR 0 20
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28150: LD_ADDR_VAR 0 21
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 3
28168: NEG
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 3
28179: NEG
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28194: LD_ADDR_VAR 0 22
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: LD_INT 3
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 3
28213: NEG
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 3
28225: NEG
28226: PUSH
28227: LD_INT 3
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28240: LD_ADDR_VAR 0 23
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 3
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 4
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 3
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28284: LD_ADDR_VAR 0 24
28288: PUSH
28289: LD_INT 3
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 4
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28325: LD_ADDR_VAR 0 25
28329: PUSH
28330: LD_INT 3
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 4
28342: PUSH
28343: LD_INT 3
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 3
28352: PUSH
28353: LD_INT 4
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28365: LD_ADDR_VAR 0 26
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: LD_INT 3
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 4
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 3
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28406: LD_ADDR_VAR 0 27
28410: PUSH
28411: LD_INT 3
28413: NEG
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 3
28424: NEG
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 4
28435: NEG
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28450: LD_ADDR_VAR 0 28
28454: PUSH
28455: LD_INT 3
28457: NEG
28458: PUSH
28459: LD_INT 3
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 3
28469: NEG
28470: PUSH
28471: LD_INT 4
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 4
28481: NEG
28482: PUSH
28483: LD_INT 3
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28496: LD_ADDR_VAR 0 29
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 3
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: LD_INT 3
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 4
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 4
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 3
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: LD_INT 5
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 5
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 4
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 6
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 6
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 5
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28651: LD_ADDR_VAR 0 30
28655: PUSH
28656: LD_INT 2
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 3
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 3
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 4
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 4
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 4
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 5
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 5
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 5
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 6
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 6
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28794: LD_ADDR_VAR 0 31
28798: PUSH
28799: LD_INT 3
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: LD_INT 3
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 4
28831: PUSH
28832: LD_INT 3
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 4
28841: PUSH
28842: LD_INT 4
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 3
28851: PUSH
28852: LD_INT 4
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: LD_INT 4
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 5
28871: PUSH
28872: LD_INT 5
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: LD_INT 5
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 6
28891: PUSH
28892: LD_INT 5
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 6
28901: PUSH
28902: LD_INT 6
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 5
28911: PUSH
28912: LD_INT 6
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28933: LD_ADDR_VAR 0 32
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 3
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 3
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: LD_INT 4
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 4
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 3
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 5
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 5
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 4
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 6
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 6
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: LD_INT 5
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29076: LD_ADDR_VAR 0 33
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 3
29094: NEG
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: NEG
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 3
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 4
29128: NEG
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 4
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 4
29151: NEG
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 5
29162: NEG
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 5
29173: NEG
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 5
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 6
29196: NEG
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 6
29207: NEG
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29231: LD_ADDR_VAR 0 34
29235: PUSH
29236: LD_INT 2
29238: NEG
29239: PUSH
29240: LD_INT 3
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 3
29250: NEG
29251: PUSH
29252: LD_INT 2
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 3
29262: NEG
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 3
29274: NEG
29275: PUSH
29276: LD_INT 4
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 4
29286: NEG
29287: PUSH
29288: LD_INT 3
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 4
29298: NEG
29299: PUSH
29300: LD_INT 4
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 4
29310: NEG
29311: PUSH
29312: LD_INT 5
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 5
29322: NEG
29323: PUSH
29324: LD_INT 4
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 5
29334: NEG
29335: PUSH
29336: LD_INT 5
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 5
29346: NEG
29347: PUSH
29348: LD_INT 6
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 6
29358: NEG
29359: PUSH
29360: LD_INT 5
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 6
29370: NEG
29371: PUSH
29372: LD_INT 6
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29394: LD_ADDR_VAR 0 41
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 3
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29438: LD_ADDR_VAR 0 42
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 3
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29479: LD_ADDR_VAR 0 43
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29519: LD_ADDR_VAR 0 44
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29560: LD_ADDR_VAR 0 45
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: NEG
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29604: LD_ADDR_VAR 0 46
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: LD_INT 3
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29650: LD_ADDR_VAR 0 47
29654: PUSH
29655: LD_INT 2
29657: NEG
29658: PUSH
29659: LD_INT 3
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29683: LD_ADDR_VAR 0 48
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 2
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29714: LD_ADDR_VAR 0 49
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 3
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29743: LD_ADDR_VAR 0 50
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: LD_INT 3
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: LD_INT 3
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29772: LD_ADDR_VAR 0 51
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29803: LD_ADDR_VAR 0 52
29807: PUSH
29808: LD_INT 3
29810: NEG
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 3
29822: NEG
29823: PUSH
29824: LD_INT 2
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29836: LD_ADDR_VAR 0 53
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 3
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29880: LD_ADDR_VAR 0 54
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29921: LD_ADDR_VAR 0 55
29925: PUSH
29926: LD_INT 3
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 3
29938: PUSH
29939: LD_INT 3
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 2
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29961: LD_ADDR_VAR 0 56
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 3
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30002: LD_ADDR_VAR 0 57
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 3
30020: NEG
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30046: LD_ADDR_VAR 0 58
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 3
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: LD_INT 3
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30092: LD_ADDR_VAR 0 59
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 2
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: LD_INT 2
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30136: LD_ADDR_VAR 0 60
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30177: LD_ADDR_VAR 0 61
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30217: LD_ADDR_VAR 0 62
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30258: LD_ADDR_VAR 0 63
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 2
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30302: LD_ADDR_VAR 0 64
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: LD_INT 2
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: LD_INT 2
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
// end ; 2 :
30348: GO 33614
30350: LD_INT 2
30352: DOUBLE
30353: EQUAL
30354: IFTRUE 30358
30356: GO 33613
30358: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30359: LD_ADDR_VAR 0 29
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 4
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 5
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 4
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 3
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 4
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 4
30489: PUSH
30490: LD_INT 4
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: LD_INT 4
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 4
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 4
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 4
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 5
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 4
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: LD_INT 3
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 3
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 4
30698: NEG
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 4
30709: NEG
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 4
30721: NEG
30722: PUSH
30723: LD_INT 2
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 4
30744: NEG
30745: PUSH
30746: LD_INT 4
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 4
30756: NEG
30757: PUSH
30758: LD_INT 5
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 3
30768: NEG
30769: PUSH
30770: LD_INT 4
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 3
30780: NEG
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: NEG
30793: PUSH
30794: LD_INT 3
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 5
30804: NEG
30805: PUSH
30806: LD_INT 4
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 5
30816: NEG
30817: PUSH
30818: LD_INT 5
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 3
30828: NEG
30829: PUSH
30830: LD_INT 5
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 5
30840: NEG
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30897: LD_ADDR_VAR 0 30
30901: PUSH
30902: LD_INT 4
30904: PUSH
30905: LD_INT 4
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 4
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 5
30924: PUSH
30925: LD_INT 4
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: LD_INT 5
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 5
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 5
30974: PUSH
30975: LD_INT 3
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 3
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: LD_INT 2
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: LD_INT 4
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 4
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: LD_INT 2
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 4
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 4
31087: NEG
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 4
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 3
31121: NEG
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 4
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 5
31143: NEG
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 5
31154: NEG
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 5
31166: NEG
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 3
31189: NEG
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: LD_INT 4
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 3
31237: NEG
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 4
31249: NEG
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 4
31261: NEG
31262: PUSH
31263: LD_INT 4
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: LD_INT 4
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 4
31285: NEG
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: LD_INT 4
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 5
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: LD_INT 4
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: LD_INT 4
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: LD_INT 5
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: LD_INT 5
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31444: LD_ADDR_VAR 0 31
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 4
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 4
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 5
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 5
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PUSH
31503: LD_INT 4
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: LD_INT 5
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: NEG
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 2
31578: NEG
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 3
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 4
31600: NEG
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 4
31611: NEG
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 4
31623: NEG
31624: PUSH
31625: LD_INT 2
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 2
31635: NEG
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 4
31646: NEG
31647: PUSH
31648: LD_INT 4
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 4
31658: NEG
31659: PUSH
31660: LD_INT 5
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 4
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 3
31682: NEG
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 4
31694: NEG
31695: PUSH
31696: LD_INT 3
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 5
31706: NEG
31707: PUSH
31708: LD_INT 4
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 5
31718: NEG
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: LD_INT 5
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 5
31742: NEG
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 4
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 3
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 4
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: LD_INT 4
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 4
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 5
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 5
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 4
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 5
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31994: LD_ADDR_VAR 0 32
31998: PUSH
31999: LD_INT 4
32001: NEG
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 3
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 4
32046: NEG
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 5
32057: NEG
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 5
32068: NEG
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 5
32080: NEG
32081: PUSH
32082: LD_INT 2
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 3
32092: NEG
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 3
32115: NEG
32116: PUSH
32117: LD_INT 4
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: LD_INT 3
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 2
32139: NEG
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 2
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 4
32163: NEG
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 4
32175: NEG
32176: PUSH
32177: LD_INT 4
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 4
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 4
32199: NEG
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 4
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 5
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 4
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 3
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 3
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 4
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 5
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: LD_INT 5
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 4
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 4
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 3
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: LD_INT 2
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 4
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 4
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 4
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: PUSH
32427: LD_INT 4
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 5
32436: PUSH
32437: LD_INT 5
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 4
32446: PUSH
32447: LD_INT 5
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 4
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32541: LD_ADDR_VAR 0 33
32545: PUSH
32546: LD_INT 4
32548: NEG
32549: PUSH
32550: LD_INT 4
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 4
32560: NEG
32561: PUSH
32562: LD_INT 5
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 4
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 3
32584: NEG
32585: PUSH
32586: LD_INT 3
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 4
32596: NEG
32597: PUSH
32598: LD_INT 3
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 5
32608: NEG
32609: PUSH
32610: LD_INT 4
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 5
32620: NEG
32621: PUSH
32622: LD_INT 5
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: LD_INT 5
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 5
32644: NEG
32645: PUSH
32646: LD_INT 3
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 4
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 3
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: LD_INT 3
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: LD_INT 4
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: LD_INT 4
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 4
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 5
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 5
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 5
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 3
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 4
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 4
32881: PUSH
32882: LD_INT 4
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 3
32891: PUSH
32892: LD_INT 4
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 4
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: LD_INT 4
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 5
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: LD_INT 5
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 3
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33079: LD_ADDR_VAR 0 34
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 4
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 5
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 4
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: LD_INT 3
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 4
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 5
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 3
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: NEG
33177: PUSH
33178: LD_INT 5
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 4
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 2
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 4
33281: PUSH
33282: LD_INT 4
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 4
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 5
33301: PUSH
33302: LD_INT 4
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 5
33311: PUSH
33312: LD_INT 5
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 4
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 4
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 3
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 5
33351: PUSH
33352: LD_INT 3
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: LD_INT 5
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: LD_INT 4
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 4
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 4
33464: NEG
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 3
33487: NEG
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 3
33498: NEG
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 4
33509: NEG
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 5
33520: NEG
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 5
33531: NEG
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 5
33543: NEG
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 3
33555: NEG
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
// end ; end ;
33611: GO 33614
33613: POP
// case btype of b_depot , b_warehouse :
33614: LD_VAR 0 1
33618: PUSH
33619: LD_INT 0
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33633
33625: LD_INT 1
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33633
33631: GO 33834
33633: POP
// case nation of nation_american :
33634: LD_VAR 0 5
33638: PUSH
33639: LD_INT 1
33641: DOUBLE
33642: EQUAL
33643: IFTRUE 33647
33645: GO 33703
33647: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33648: LD_ADDR_VAR 0 9
33652: PUSH
33653: LD_VAR 0 11
33657: PUSH
33658: LD_VAR 0 12
33662: PUSH
33663: LD_VAR 0 13
33667: PUSH
33668: LD_VAR 0 14
33672: PUSH
33673: LD_VAR 0 15
33677: PUSH
33678: LD_VAR 0 16
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: PUSH
33691: LD_VAR 0 4
33695: PUSH
33696: LD_INT 1
33698: PLUS
33699: ARRAY
33700: ST_TO_ADDR
33701: GO 33832
33703: LD_INT 2
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33767
33711: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33712: LD_ADDR_VAR 0 9
33716: PUSH
33717: LD_VAR 0 17
33721: PUSH
33722: LD_VAR 0 18
33726: PUSH
33727: LD_VAR 0 19
33731: PUSH
33732: LD_VAR 0 20
33736: PUSH
33737: LD_VAR 0 21
33741: PUSH
33742: LD_VAR 0 22
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: PUSH
33755: LD_VAR 0 4
33759: PUSH
33760: LD_INT 1
33762: PLUS
33763: ARRAY
33764: ST_TO_ADDR
33765: GO 33832
33767: LD_INT 3
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33775
33773: GO 33831
33775: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33776: LD_ADDR_VAR 0 9
33780: PUSH
33781: LD_VAR 0 23
33785: PUSH
33786: LD_VAR 0 24
33790: PUSH
33791: LD_VAR 0 25
33795: PUSH
33796: LD_VAR 0 26
33800: PUSH
33801: LD_VAR 0 27
33805: PUSH
33806: LD_VAR 0 28
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: PUSH
33819: LD_VAR 0 4
33823: PUSH
33824: LD_INT 1
33826: PLUS
33827: ARRAY
33828: ST_TO_ADDR
33829: GO 33832
33831: POP
33832: GO 34387
33834: LD_INT 2
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33848
33840: LD_INT 3
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33904
33848: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33849: LD_ADDR_VAR 0 9
33853: PUSH
33854: LD_VAR 0 29
33858: PUSH
33859: LD_VAR 0 30
33863: PUSH
33864: LD_VAR 0 31
33868: PUSH
33869: LD_VAR 0 32
33873: PUSH
33874: LD_VAR 0 33
33878: PUSH
33879: LD_VAR 0 34
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: PUSH
33892: LD_VAR 0 4
33896: PUSH
33897: LD_INT 1
33899: PLUS
33900: ARRAY
33901: ST_TO_ADDR
33902: GO 34387
33904: LD_INT 16
33906: DOUBLE
33907: EQUAL
33908: IFTRUE 33966
33910: LD_INT 17
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33966
33916: LD_INT 18
33918: DOUBLE
33919: EQUAL
33920: IFTRUE 33966
33922: LD_INT 19
33924: DOUBLE
33925: EQUAL
33926: IFTRUE 33966
33928: LD_INT 22
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33966
33934: LD_INT 20
33936: DOUBLE
33937: EQUAL
33938: IFTRUE 33966
33940: LD_INT 21
33942: DOUBLE
33943: EQUAL
33944: IFTRUE 33966
33946: LD_INT 23
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33966
33952: LD_INT 24
33954: DOUBLE
33955: EQUAL
33956: IFTRUE 33966
33958: LD_INT 25
33960: DOUBLE
33961: EQUAL
33962: IFTRUE 33966
33964: GO 34022
33966: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33967: LD_ADDR_VAR 0 9
33971: PUSH
33972: LD_VAR 0 35
33976: PUSH
33977: LD_VAR 0 36
33981: PUSH
33982: LD_VAR 0 37
33986: PUSH
33987: LD_VAR 0 38
33991: PUSH
33992: LD_VAR 0 39
33996: PUSH
33997: LD_VAR 0 40
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: PUSH
34010: LD_VAR 0 4
34014: PUSH
34015: LD_INT 1
34017: PLUS
34018: ARRAY
34019: ST_TO_ADDR
34020: GO 34387
34022: LD_INT 6
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34078
34028: LD_INT 7
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34078
34034: LD_INT 8
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34078
34040: LD_INT 13
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34078
34046: LD_INT 12
34048: DOUBLE
34049: EQUAL
34050: IFTRUE 34078
34052: LD_INT 15
34054: DOUBLE
34055: EQUAL
34056: IFTRUE 34078
34058: LD_INT 11
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34078
34064: LD_INT 14
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34078
34070: LD_INT 10
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34134
34078: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34079: LD_ADDR_VAR 0 9
34083: PUSH
34084: LD_VAR 0 41
34088: PUSH
34089: LD_VAR 0 42
34093: PUSH
34094: LD_VAR 0 43
34098: PUSH
34099: LD_VAR 0 44
34103: PUSH
34104: LD_VAR 0 45
34108: PUSH
34109: LD_VAR 0 46
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: PUSH
34122: LD_VAR 0 4
34126: PUSH
34127: LD_INT 1
34129: PLUS
34130: ARRAY
34131: ST_TO_ADDR
34132: GO 34387
34134: LD_INT 36
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34142
34140: GO 34198
34142: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34143: LD_ADDR_VAR 0 9
34147: PUSH
34148: LD_VAR 0 47
34152: PUSH
34153: LD_VAR 0 48
34157: PUSH
34158: LD_VAR 0 49
34162: PUSH
34163: LD_VAR 0 50
34167: PUSH
34168: LD_VAR 0 51
34172: PUSH
34173: LD_VAR 0 52
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: PUSH
34186: LD_VAR 0 4
34190: PUSH
34191: LD_INT 1
34193: PLUS
34194: ARRAY
34195: ST_TO_ADDR
34196: GO 34387
34198: LD_INT 4
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34224
34204: LD_INT 5
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34224
34210: LD_INT 34
34212: DOUBLE
34213: EQUAL
34214: IFTRUE 34224
34216: LD_INT 37
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34280
34224: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34225: LD_ADDR_VAR 0 9
34229: PUSH
34230: LD_VAR 0 53
34234: PUSH
34235: LD_VAR 0 54
34239: PUSH
34240: LD_VAR 0 55
34244: PUSH
34245: LD_VAR 0 56
34249: PUSH
34250: LD_VAR 0 57
34254: PUSH
34255: LD_VAR 0 58
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: PUSH
34268: LD_VAR 0 4
34272: PUSH
34273: LD_INT 1
34275: PLUS
34276: ARRAY
34277: ST_TO_ADDR
34278: GO 34387
34280: LD_INT 31
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34330
34286: LD_INT 32
34288: DOUBLE
34289: EQUAL
34290: IFTRUE 34330
34292: LD_INT 33
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34330
34298: LD_INT 27
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34330
34304: LD_INT 26
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34330
34310: LD_INT 28
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34330
34316: LD_INT 29
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34330
34322: LD_INT 30
34324: DOUBLE
34325: EQUAL
34326: IFTRUE 34330
34328: GO 34386
34330: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34331: LD_ADDR_VAR 0 9
34335: PUSH
34336: LD_VAR 0 59
34340: PUSH
34341: LD_VAR 0 60
34345: PUSH
34346: LD_VAR 0 61
34350: PUSH
34351: LD_VAR 0 62
34355: PUSH
34356: LD_VAR 0 63
34360: PUSH
34361: LD_VAR 0 64
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: PUSH
34374: LD_VAR 0 4
34378: PUSH
34379: LD_INT 1
34381: PLUS
34382: ARRAY
34383: ST_TO_ADDR
34384: GO 34387
34386: POP
// temp_list2 = [ ] ;
34387: LD_ADDR_VAR 0 10
34391: PUSH
34392: EMPTY
34393: ST_TO_ADDR
// for i in temp_list do
34394: LD_ADDR_VAR 0 8
34398: PUSH
34399: LD_VAR 0 9
34403: PUSH
34404: FOR_IN
34405: IFFALSE 34457
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34407: LD_ADDR_VAR 0 10
34411: PUSH
34412: LD_VAR 0 10
34416: PUSH
34417: LD_VAR 0 8
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: PUSH
34426: LD_VAR 0 2
34430: PLUS
34431: PUSH
34432: LD_VAR 0 8
34436: PUSH
34437: LD_INT 2
34439: ARRAY
34440: PUSH
34441: LD_VAR 0 3
34445: PLUS
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: ADD
34454: ST_TO_ADDR
34455: GO 34404
34457: POP
34458: POP
// result = temp_list2 ;
34459: LD_ADDR_VAR 0 7
34463: PUSH
34464: LD_VAR 0 10
34468: ST_TO_ADDR
// end ;
34469: LD_VAR 0 7
34473: RET
// export function EnemyInRange ( unit , dist ) ; begin
34474: LD_INT 0
34476: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_VAR 0 1
34486: PPUSH
34487: CALL_OW 255
34491: PPUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: CALL_OW 250
34501: PPUSH
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL_OW 251
34511: PPUSH
34512: LD_VAR 0 2
34516: PPUSH
34517: CALL 7847 0 4
34521: PUSH
34522: LD_INT 4
34524: ARRAY
34525: ST_TO_ADDR
// end ;
34526: LD_VAR 0 3
34530: RET
// export function PlayerSeeMe ( unit ) ; begin
34531: LD_INT 0
34533: PPUSH
// result := See ( your_side , unit ) ;
34534: LD_ADDR_VAR 0 2
34538: PUSH
34539: LD_OWVAR 2
34543: PPUSH
34544: LD_VAR 0 1
34548: PPUSH
34549: CALL_OW 292
34553: ST_TO_ADDR
// end ;
34554: LD_VAR 0 2
34558: RET
// export function ReverseDir ( unit ) ; begin
34559: LD_INT 0
34561: PPUSH
// if not unit then
34562: LD_VAR 0 1
34566: NOT
34567: IFFALSE 34571
// exit ;
34569: GO 34594
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34571: LD_ADDR_VAR 0 2
34575: PUSH
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL_OW 254
34585: PUSH
34586: LD_INT 3
34588: PLUS
34589: PUSH
34590: LD_INT 6
34592: MOD
34593: ST_TO_ADDR
// end ;
34594: LD_VAR 0 2
34598: RET
// export function ReverseArray ( array ) ; var i ; begin
34599: LD_INT 0
34601: PPUSH
34602: PPUSH
// if not array then
34603: LD_VAR 0 1
34607: NOT
34608: IFFALSE 34612
// exit ;
34610: GO 34667
// result := [ ] ;
34612: LD_ADDR_VAR 0 2
34616: PUSH
34617: EMPTY
34618: ST_TO_ADDR
// for i := array downto 1 do
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: DOUBLE
34625: LD_VAR 0 1
34629: INC
34630: ST_TO_ADDR
34631: LD_INT 1
34633: PUSH
34634: FOR_DOWNTO
34635: IFFALSE 34665
// result := Join ( result , array [ i ] ) ;
34637: LD_ADDR_VAR 0 2
34641: PUSH
34642: LD_VAR 0 2
34646: PPUSH
34647: LD_VAR 0 1
34651: PUSH
34652: LD_VAR 0 3
34656: ARRAY
34657: PPUSH
34658: CALL 39312 0 2
34662: ST_TO_ADDR
34663: GO 34634
34665: POP
34666: POP
// end ;
34667: LD_VAR 0 2
34671: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34672: LD_INT 0
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
// if not unit or not hexes then
34680: LD_VAR 0 1
34684: NOT
34685: PUSH
34686: LD_VAR 0 2
34690: NOT
34691: OR
34692: IFFALSE 34696
// exit ;
34694: GO 34819
// dist := 9999 ;
34696: LD_ADDR_VAR 0 5
34700: PUSH
34701: LD_INT 9999
34703: ST_TO_ADDR
// for i = 1 to hexes do
34704: LD_ADDR_VAR 0 4
34708: PUSH
34709: DOUBLE
34710: LD_INT 1
34712: DEC
34713: ST_TO_ADDR
34714: LD_VAR 0 2
34718: PUSH
34719: FOR_TO
34720: IFFALSE 34807
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34722: LD_ADDR_VAR 0 6
34726: PUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_VAR 0 4
34741: ARRAY
34742: PUSH
34743: LD_INT 1
34745: ARRAY
34746: PPUSH
34747: LD_VAR 0 2
34751: PUSH
34752: LD_VAR 0 4
34756: ARRAY
34757: PUSH
34758: LD_INT 2
34760: ARRAY
34761: PPUSH
34762: CALL_OW 297
34766: ST_TO_ADDR
// if tdist < dist then
34767: LD_VAR 0 6
34771: PUSH
34772: LD_VAR 0 5
34776: LESS
34777: IFFALSE 34805
// begin hex := hexes [ i ] ;
34779: LD_ADDR_VAR 0 8
34783: PUSH
34784: LD_VAR 0 2
34788: PUSH
34789: LD_VAR 0 4
34793: ARRAY
34794: ST_TO_ADDR
// dist := tdist ;
34795: LD_ADDR_VAR 0 5
34799: PUSH
34800: LD_VAR 0 6
34804: ST_TO_ADDR
// end ; end ;
34805: GO 34719
34807: POP
34808: POP
// result := hex ;
34809: LD_ADDR_VAR 0 3
34813: PUSH
34814: LD_VAR 0 8
34818: ST_TO_ADDR
// end ;
34819: LD_VAR 0 3
34823: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34824: LD_INT 0
34826: PPUSH
34827: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34828: LD_VAR 0 1
34832: NOT
34833: PUSH
34834: LD_VAR 0 1
34838: PUSH
34839: LD_INT 21
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 23
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PPUSH
34863: CALL_OW 69
34867: IN
34868: NOT
34869: OR
34870: IFFALSE 34874
// exit ;
34872: GO 34921
// for i = 1 to 3 do
34874: LD_ADDR_VAR 0 3
34878: PUSH
34879: DOUBLE
34880: LD_INT 1
34882: DEC
34883: ST_TO_ADDR
34884: LD_INT 3
34886: PUSH
34887: FOR_TO
34888: IFFALSE 34919
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 250
34899: PPUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 251
34909: PPUSH
34910: LD_INT 1
34912: PPUSH
34913: CALL_OW 453
34917: GO 34887
34919: POP
34920: POP
// end ;
34921: LD_VAR 0 2
34925: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34926: LD_INT 0
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
// if not unit or not enemy_unit then
34934: LD_VAR 0 1
34938: NOT
34939: PUSH
34940: LD_VAR 0 2
34944: NOT
34945: OR
34946: IFFALSE 34950
// exit ;
34948: GO 35417
// if GetLives ( i ) < 250 then
34950: LD_VAR 0 4
34954: PPUSH
34955: CALL_OW 256
34959: PUSH
34960: LD_INT 250
34962: LESS
34963: IFFALSE 34976
// begin ComAutodestruct ( i ) ;
34965: LD_VAR 0 4
34969: PPUSH
34970: CALL 34824 0 1
// exit ;
34974: GO 35417
// end ; x := GetX ( enemy_unit ) ;
34976: LD_ADDR_VAR 0 7
34980: PUSH
34981: LD_VAR 0 2
34985: PPUSH
34986: CALL_OW 250
34990: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34991: LD_ADDR_VAR 0 8
34995: PUSH
34996: LD_VAR 0 2
35000: PPUSH
35001: CALL_OW 251
35005: ST_TO_ADDR
// if not x or not y then
35006: LD_VAR 0 7
35010: NOT
35011: PUSH
35012: LD_VAR 0 8
35016: NOT
35017: OR
35018: IFFALSE 35022
// exit ;
35020: GO 35417
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35022: LD_ADDR_VAR 0 6
35026: PUSH
35027: LD_VAR 0 7
35031: PPUSH
35032: LD_INT 0
35034: PPUSH
35035: LD_INT 4
35037: PPUSH
35038: CALL_OW 272
35042: PUSH
35043: LD_VAR 0 8
35047: PPUSH
35048: LD_INT 0
35050: PPUSH
35051: LD_INT 4
35053: PPUSH
35054: CALL_OW 273
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_VAR 0 7
35067: PPUSH
35068: LD_INT 1
35070: PPUSH
35071: LD_INT 4
35073: PPUSH
35074: CALL_OW 272
35078: PUSH
35079: LD_VAR 0 8
35083: PPUSH
35084: LD_INT 1
35086: PPUSH
35087: LD_INT 4
35089: PPUSH
35090: CALL_OW 273
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_VAR 0 7
35103: PPUSH
35104: LD_INT 2
35106: PPUSH
35107: LD_INT 4
35109: PPUSH
35110: CALL_OW 272
35114: PUSH
35115: LD_VAR 0 8
35119: PPUSH
35120: LD_INT 2
35122: PPUSH
35123: LD_INT 4
35125: PPUSH
35126: CALL_OW 273
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_VAR 0 7
35139: PPUSH
35140: LD_INT 3
35142: PPUSH
35143: LD_INT 4
35145: PPUSH
35146: CALL_OW 272
35150: PUSH
35151: LD_VAR 0 8
35155: PPUSH
35156: LD_INT 3
35158: PPUSH
35159: LD_INT 4
35161: PPUSH
35162: CALL_OW 273
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_VAR 0 7
35175: PPUSH
35176: LD_INT 4
35178: PPUSH
35179: LD_INT 4
35181: PPUSH
35182: CALL_OW 272
35186: PUSH
35187: LD_VAR 0 8
35191: PPUSH
35192: LD_INT 4
35194: PPUSH
35195: LD_INT 4
35197: PPUSH
35198: CALL_OW 273
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_VAR 0 7
35211: PPUSH
35212: LD_INT 5
35214: PPUSH
35215: LD_INT 4
35217: PPUSH
35218: CALL_OW 272
35222: PUSH
35223: LD_VAR 0 8
35227: PPUSH
35228: LD_INT 5
35230: PPUSH
35231: LD_INT 4
35233: PPUSH
35234: CALL_OW 273
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
// for i = tmp downto 1 do
35251: LD_ADDR_VAR 0 4
35255: PUSH
35256: DOUBLE
35257: LD_VAR 0 6
35261: INC
35262: ST_TO_ADDR
35263: LD_INT 1
35265: PUSH
35266: FOR_DOWNTO
35267: IFFALSE 35368
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35269: LD_VAR 0 6
35273: PUSH
35274: LD_VAR 0 4
35278: ARRAY
35279: PUSH
35280: LD_INT 1
35282: ARRAY
35283: PPUSH
35284: LD_VAR 0 6
35288: PUSH
35289: LD_VAR 0 4
35293: ARRAY
35294: PUSH
35295: LD_INT 2
35297: ARRAY
35298: PPUSH
35299: CALL_OW 488
35303: NOT
35304: PUSH
35305: LD_VAR 0 6
35309: PUSH
35310: LD_VAR 0 4
35314: ARRAY
35315: PUSH
35316: LD_INT 1
35318: ARRAY
35319: PPUSH
35320: LD_VAR 0 6
35324: PUSH
35325: LD_VAR 0 4
35329: ARRAY
35330: PUSH
35331: LD_INT 2
35333: ARRAY
35334: PPUSH
35335: CALL_OW 428
35339: PUSH
35340: LD_INT 0
35342: NONEQUAL
35343: OR
35344: IFFALSE 35366
// tmp := Delete ( tmp , i ) ;
35346: LD_ADDR_VAR 0 6
35350: PUSH
35351: LD_VAR 0 6
35355: PPUSH
35356: LD_VAR 0 4
35360: PPUSH
35361: CALL_OW 3
35365: ST_TO_ADDR
35366: GO 35266
35368: POP
35369: POP
// j := GetClosestHex ( unit , tmp ) ;
35370: LD_ADDR_VAR 0 5
35374: PUSH
35375: LD_VAR 0 1
35379: PPUSH
35380: LD_VAR 0 6
35384: PPUSH
35385: CALL 34672 0 2
35389: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35390: LD_VAR 0 1
35394: PPUSH
35395: LD_VAR 0 5
35399: PUSH
35400: LD_INT 1
35402: ARRAY
35403: PPUSH
35404: LD_VAR 0 5
35408: PUSH
35409: LD_INT 2
35411: ARRAY
35412: PPUSH
35413: CALL_OW 111
// end ;
35417: LD_VAR 0 3
35421: RET
// export function PrepareApemanSoldier ( ) ; begin
35422: LD_INT 0
35424: PPUSH
// uc_nation := 0 ;
35425: LD_ADDR_OWVAR 21
35429: PUSH
35430: LD_INT 0
35432: ST_TO_ADDR
// hc_sex := sex_male ;
35433: LD_ADDR_OWVAR 27
35437: PUSH
35438: LD_INT 1
35440: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35441: LD_ADDR_OWVAR 28
35445: PUSH
35446: LD_INT 15
35448: ST_TO_ADDR
// hc_gallery :=  ;
35449: LD_ADDR_OWVAR 33
35453: PUSH
35454: LD_STRING 
35456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35457: LD_ADDR_OWVAR 31
35461: PUSH
35462: LD_INT 0
35464: PPUSH
35465: LD_INT 3
35467: PPUSH
35468: CALL_OW 12
35472: PUSH
35473: LD_INT 0
35475: PPUSH
35476: LD_INT 3
35478: PPUSH
35479: CALL_OW 12
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: ST_TO_ADDR
// end ;
35496: LD_VAR 0 1
35500: RET
// export function PrepareApemanEngineer ( ) ; begin
35501: LD_INT 0
35503: PPUSH
// uc_nation := 0 ;
35504: LD_ADDR_OWVAR 21
35508: PUSH
35509: LD_INT 0
35511: ST_TO_ADDR
// hc_sex := sex_male ;
35512: LD_ADDR_OWVAR 27
35516: PUSH
35517: LD_INT 1
35519: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35520: LD_ADDR_OWVAR 28
35524: PUSH
35525: LD_INT 16
35527: ST_TO_ADDR
// hc_gallery :=  ;
35528: LD_ADDR_OWVAR 33
35532: PUSH
35533: LD_STRING 
35535: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35536: LD_ADDR_OWVAR 31
35540: PUSH
35541: LD_INT 0
35543: PPUSH
35544: LD_INT 3
35546: PPUSH
35547: CALL_OW 12
35551: PUSH
35552: LD_INT 0
35554: PPUSH
35555: LD_INT 3
35557: PPUSH
35558: CALL_OW 12
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
// end ;
35575: LD_VAR 0 1
35579: RET
// export function PrepareApeman ( agressivity ) ; begin
35580: LD_INT 0
35582: PPUSH
// uc_side := 0 ;
35583: LD_ADDR_OWVAR 20
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// uc_nation := 0 ;
35591: LD_ADDR_OWVAR 21
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// hc_sex := sex_male ;
35599: LD_ADDR_OWVAR 27
35603: PUSH
35604: LD_INT 1
35606: ST_TO_ADDR
// hc_class := class_apeman ;
35607: LD_ADDR_OWVAR 28
35611: PUSH
35612: LD_INT 12
35614: ST_TO_ADDR
// hc_gallery :=  ;
35615: LD_ADDR_OWVAR 33
35619: PUSH
35620: LD_STRING 
35622: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35623: LD_ADDR_OWVAR 35
35627: PUSH
35628: LD_VAR 0 1
35632: NEG
35633: PPUSH
35634: LD_VAR 0 1
35638: PPUSH
35639: CALL_OW 12
35643: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35644: LD_ADDR_OWVAR 31
35648: PUSH
35649: LD_INT 0
35651: PPUSH
35652: LD_INT 3
35654: PPUSH
35655: CALL_OW 12
35659: PUSH
35660: LD_INT 0
35662: PPUSH
35663: LD_INT 3
35665: PPUSH
35666: CALL_OW 12
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// end ;
35683: LD_VAR 0 2
35687: RET
// export function PrepareTiger ( agressivity ) ; begin
35688: LD_INT 0
35690: PPUSH
// uc_side := 0 ;
35691: LD_ADDR_OWVAR 20
35695: PUSH
35696: LD_INT 0
35698: ST_TO_ADDR
// uc_nation := 0 ;
35699: LD_ADDR_OWVAR 21
35703: PUSH
35704: LD_INT 0
35706: ST_TO_ADDR
// hc_class := class_tiger ;
35707: LD_ADDR_OWVAR 28
35711: PUSH
35712: LD_INT 14
35714: ST_TO_ADDR
// hc_gallery :=  ;
35715: LD_ADDR_OWVAR 33
35719: PUSH
35720: LD_STRING 
35722: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35723: LD_ADDR_OWVAR 35
35727: PUSH
35728: LD_VAR 0 1
35732: NEG
35733: PPUSH
35734: LD_VAR 0 1
35738: PPUSH
35739: CALL_OW 12
35743: ST_TO_ADDR
// end ;
35744: LD_VAR 0 2
35748: RET
// export function PrepareEnchidna ( ) ; begin
35749: LD_INT 0
35751: PPUSH
// uc_side := 0 ;
35752: LD_ADDR_OWVAR 20
35756: PUSH
35757: LD_INT 0
35759: ST_TO_ADDR
// uc_nation := 0 ;
35760: LD_ADDR_OWVAR 21
35764: PUSH
35765: LD_INT 0
35767: ST_TO_ADDR
// hc_class := class_baggie ;
35768: LD_ADDR_OWVAR 28
35772: PUSH
35773: LD_INT 13
35775: ST_TO_ADDR
// hc_gallery :=  ;
35776: LD_ADDR_OWVAR 33
35780: PUSH
35781: LD_STRING 
35783: ST_TO_ADDR
// end ;
35784: LD_VAR 0 1
35788: RET
// export function PrepareFrog ( ) ; begin
35789: LD_INT 0
35791: PPUSH
// uc_side := 0 ;
35792: LD_ADDR_OWVAR 20
35796: PUSH
35797: LD_INT 0
35799: ST_TO_ADDR
// uc_nation := 0 ;
35800: LD_ADDR_OWVAR 21
35804: PUSH
35805: LD_INT 0
35807: ST_TO_ADDR
// hc_class := class_frog ;
35808: LD_ADDR_OWVAR 28
35812: PUSH
35813: LD_INT 19
35815: ST_TO_ADDR
// hc_gallery :=  ;
35816: LD_ADDR_OWVAR 33
35820: PUSH
35821: LD_STRING 
35823: ST_TO_ADDR
// end ;
35824: LD_VAR 0 1
35828: RET
// export function PrepareFish ( ) ; begin
35829: LD_INT 0
35831: PPUSH
// uc_side := 0 ;
35832: LD_ADDR_OWVAR 20
35836: PUSH
35837: LD_INT 0
35839: ST_TO_ADDR
// uc_nation := 0 ;
35840: LD_ADDR_OWVAR 21
35844: PUSH
35845: LD_INT 0
35847: ST_TO_ADDR
// hc_class := class_fish ;
35848: LD_ADDR_OWVAR 28
35852: PUSH
35853: LD_INT 20
35855: ST_TO_ADDR
// hc_gallery :=  ;
35856: LD_ADDR_OWVAR 33
35860: PUSH
35861: LD_STRING 
35863: ST_TO_ADDR
// end ;
35864: LD_VAR 0 1
35868: RET
// export function PrepareBird ( ) ; begin
35869: LD_INT 0
35871: PPUSH
// uc_side := 0 ;
35872: LD_ADDR_OWVAR 20
35876: PUSH
35877: LD_INT 0
35879: ST_TO_ADDR
// uc_nation := 0 ;
35880: LD_ADDR_OWVAR 21
35884: PUSH
35885: LD_INT 0
35887: ST_TO_ADDR
// hc_class := class_phororhacos ;
35888: LD_ADDR_OWVAR 28
35892: PUSH
35893: LD_INT 18
35895: ST_TO_ADDR
// hc_gallery :=  ;
35896: LD_ADDR_OWVAR 33
35900: PUSH
35901: LD_STRING 
35903: ST_TO_ADDR
// end ;
35904: LD_VAR 0 1
35908: RET
// export function PrepareHorse ( ) ; begin
35909: LD_INT 0
35911: PPUSH
// uc_side := 0 ;
35912: LD_ADDR_OWVAR 20
35916: PUSH
35917: LD_INT 0
35919: ST_TO_ADDR
// uc_nation := 0 ;
35920: LD_ADDR_OWVAR 21
35924: PUSH
35925: LD_INT 0
35927: ST_TO_ADDR
// hc_class := class_horse ;
35928: LD_ADDR_OWVAR 28
35932: PUSH
35933: LD_INT 21
35935: ST_TO_ADDR
// hc_gallery :=  ;
35936: LD_ADDR_OWVAR 33
35940: PUSH
35941: LD_STRING 
35943: ST_TO_ADDR
// end ;
35944: LD_VAR 0 1
35948: RET
// export function PrepareMastodont ( ) ; begin
35949: LD_INT 0
35951: PPUSH
// uc_side := 0 ;
35952: LD_ADDR_OWVAR 20
35956: PUSH
35957: LD_INT 0
35959: ST_TO_ADDR
// uc_nation := 0 ;
35960: LD_ADDR_OWVAR 21
35964: PUSH
35965: LD_INT 0
35967: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35968: LD_ADDR_OWVAR 37
35972: PUSH
35973: LD_INT 31
35975: ST_TO_ADDR
// vc_control := control_rider ;
35976: LD_ADDR_OWVAR 38
35980: PUSH
35981: LD_INT 4
35983: ST_TO_ADDR
// end ;
35984: LD_VAR 0 1
35988: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35989: LD_INT 0
35991: PPUSH
35992: PPUSH
35993: PPUSH
// uc_side = 0 ;
35994: LD_ADDR_OWVAR 20
35998: PUSH
35999: LD_INT 0
36001: ST_TO_ADDR
// uc_nation = 0 ;
36002: LD_ADDR_OWVAR 21
36006: PUSH
36007: LD_INT 0
36009: ST_TO_ADDR
// InitHc_All ( ) ;
36010: CALL_OW 584
// InitVc ;
36014: CALL_OW 20
// if mastodonts then
36018: LD_VAR 0 6
36022: IFFALSE 36089
// for i = 1 to mastodonts do
36024: LD_ADDR_VAR 0 11
36028: PUSH
36029: DOUBLE
36030: LD_INT 1
36032: DEC
36033: ST_TO_ADDR
36034: LD_VAR 0 6
36038: PUSH
36039: FOR_TO
36040: IFFALSE 36087
// begin vc_chassis := 31 ;
36042: LD_ADDR_OWVAR 37
36046: PUSH
36047: LD_INT 31
36049: ST_TO_ADDR
// vc_control := control_rider ;
36050: LD_ADDR_OWVAR 38
36054: PUSH
36055: LD_INT 4
36057: ST_TO_ADDR
// animal := CreateVehicle ;
36058: LD_ADDR_VAR 0 12
36062: PUSH
36063: CALL_OW 45
36067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36068: LD_VAR 0 12
36072: PPUSH
36073: LD_VAR 0 8
36077: PPUSH
36078: LD_INT 0
36080: PPUSH
36081: CALL 38217 0 3
// end ;
36085: GO 36039
36087: POP
36088: POP
// if horses then
36089: LD_VAR 0 5
36093: IFFALSE 36160
// for i = 1 to horses do
36095: LD_ADDR_VAR 0 11
36099: PUSH
36100: DOUBLE
36101: LD_INT 1
36103: DEC
36104: ST_TO_ADDR
36105: LD_VAR 0 5
36109: PUSH
36110: FOR_TO
36111: IFFALSE 36158
// begin hc_class := 21 ;
36113: LD_ADDR_OWVAR 28
36117: PUSH
36118: LD_INT 21
36120: ST_TO_ADDR
// hc_gallery :=  ;
36121: LD_ADDR_OWVAR 33
36125: PUSH
36126: LD_STRING 
36128: ST_TO_ADDR
// animal := CreateHuman ;
36129: LD_ADDR_VAR 0 12
36133: PUSH
36134: CALL_OW 44
36138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36139: LD_VAR 0 12
36143: PPUSH
36144: LD_VAR 0 8
36148: PPUSH
36149: LD_INT 0
36151: PPUSH
36152: CALL 38217 0 3
// end ;
36156: GO 36110
36158: POP
36159: POP
// if birds then
36160: LD_VAR 0 1
36164: IFFALSE 36231
// for i = 1 to birds do
36166: LD_ADDR_VAR 0 11
36170: PUSH
36171: DOUBLE
36172: LD_INT 1
36174: DEC
36175: ST_TO_ADDR
36176: LD_VAR 0 1
36180: PUSH
36181: FOR_TO
36182: IFFALSE 36229
// begin hc_class := 18 ;
36184: LD_ADDR_OWVAR 28
36188: PUSH
36189: LD_INT 18
36191: ST_TO_ADDR
// hc_gallery =  ;
36192: LD_ADDR_OWVAR 33
36196: PUSH
36197: LD_STRING 
36199: ST_TO_ADDR
// animal := CreateHuman ;
36200: LD_ADDR_VAR 0 12
36204: PUSH
36205: CALL_OW 44
36209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36210: LD_VAR 0 12
36214: PPUSH
36215: LD_VAR 0 8
36219: PPUSH
36220: LD_INT 0
36222: PPUSH
36223: CALL 38217 0 3
// end ;
36227: GO 36181
36229: POP
36230: POP
// if tigers then
36231: LD_VAR 0 2
36235: IFFALSE 36319
// for i = 1 to tigers do
36237: LD_ADDR_VAR 0 11
36241: PUSH
36242: DOUBLE
36243: LD_INT 1
36245: DEC
36246: ST_TO_ADDR
36247: LD_VAR 0 2
36251: PUSH
36252: FOR_TO
36253: IFFALSE 36317
// begin hc_class = class_tiger ;
36255: LD_ADDR_OWVAR 28
36259: PUSH
36260: LD_INT 14
36262: ST_TO_ADDR
// hc_gallery =  ;
36263: LD_ADDR_OWVAR 33
36267: PUSH
36268: LD_STRING 
36270: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36271: LD_ADDR_OWVAR 35
36275: PUSH
36276: LD_INT 7
36278: NEG
36279: PPUSH
36280: LD_INT 7
36282: PPUSH
36283: CALL_OW 12
36287: ST_TO_ADDR
// animal := CreateHuman ;
36288: LD_ADDR_VAR 0 12
36292: PUSH
36293: CALL_OW 44
36297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36298: LD_VAR 0 12
36302: PPUSH
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_INT 0
36310: PPUSH
36311: CALL 38217 0 3
// end ;
36315: GO 36252
36317: POP
36318: POP
// if apemans then
36319: LD_VAR 0 3
36323: IFFALSE 36446
// for i = 1 to apemans do
36325: LD_ADDR_VAR 0 11
36329: PUSH
36330: DOUBLE
36331: LD_INT 1
36333: DEC
36334: ST_TO_ADDR
36335: LD_VAR 0 3
36339: PUSH
36340: FOR_TO
36341: IFFALSE 36444
// begin hc_class = class_apeman ;
36343: LD_ADDR_OWVAR 28
36347: PUSH
36348: LD_INT 12
36350: ST_TO_ADDR
// hc_gallery =  ;
36351: LD_ADDR_OWVAR 33
36355: PUSH
36356: LD_STRING 
36358: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36359: LD_ADDR_OWVAR 35
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PPUSH
36368: LD_INT 2
36370: PPUSH
36371: CALL_OW 12
36375: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36376: LD_ADDR_OWVAR 31
36380: PUSH
36381: LD_INT 1
36383: PPUSH
36384: LD_INT 3
36386: PPUSH
36387: CALL_OW 12
36391: PUSH
36392: LD_INT 1
36394: PPUSH
36395: LD_INT 3
36397: PPUSH
36398: CALL_OW 12
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// animal := CreateHuman ;
36415: LD_ADDR_VAR 0 12
36419: PUSH
36420: CALL_OW 44
36424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36425: LD_VAR 0 12
36429: PPUSH
36430: LD_VAR 0 8
36434: PPUSH
36435: LD_INT 0
36437: PPUSH
36438: CALL 38217 0 3
// end ;
36442: GO 36340
36444: POP
36445: POP
// if enchidnas then
36446: LD_VAR 0 4
36450: IFFALSE 36517
// for i = 1 to enchidnas do
36452: LD_ADDR_VAR 0 11
36456: PUSH
36457: DOUBLE
36458: LD_INT 1
36460: DEC
36461: ST_TO_ADDR
36462: LD_VAR 0 4
36466: PUSH
36467: FOR_TO
36468: IFFALSE 36515
// begin hc_class = 13 ;
36470: LD_ADDR_OWVAR 28
36474: PUSH
36475: LD_INT 13
36477: ST_TO_ADDR
// hc_gallery =  ;
36478: LD_ADDR_OWVAR 33
36482: PUSH
36483: LD_STRING 
36485: ST_TO_ADDR
// animal := CreateHuman ;
36486: LD_ADDR_VAR 0 12
36490: PUSH
36491: CALL_OW 44
36495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36496: LD_VAR 0 12
36500: PPUSH
36501: LD_VAR 0 8
36505: PPUSH
36506: LD_INT 0
36508: PPUSH
36509: CALL 38217 0 3
// end ;
36513: GO 36467
36515: POP
36516: POP
// if fishes then
36517: LD_VAR 0 7
36521: IFFALSE 36588
// for i = 1 to fishes do
36523: LD_ADDR_VAR 0 11
36527: PUSH
36528: DOUBLE
36529: LD_INT 1
36531: DEC
36532: ST_TO_ADDR
36533: LD_VAR 0 7
36537: PUSH
36538: FOR_TO
36539: IFFALSE 36586
// begin hc_class = 20 ;
36541: LD_ADDR_OWVAR 28
36545: PUSH
36546: LD_INT 20
36548: ST_TO_ADDR
// hc_gallery =  ;
36549: LD_ADDR_OWVAR 33
36553: PUSH
36554: LD_STRING 
36556: ST_TO_ADDR
// animal := CreateHuman ;
36557: LD_ADDR_VAR 0 12
36561: PUSH
36562: CALL_OW 44
36566: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36567: LD_VAR 0 12
36571: PPUSH
36572: LD_VAR 0 9
36576: PPUSH
36577: LD_INT 0
36579: PPUSH
36580: CALL 38217 0 3
// end ;
36584: GO 36538
36586: POP
36587: POP
// end ;
36588: LD_VAR 0 10
36592: RET
// export function WantHeal ( sci , unit ) ; begin
36593: LD_INT 0
36595: PPUSH
// if GetTaskList ( sci ) > 0 then
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 437
36605: PUSH
36606: LD_INT 0
36608: GREATER
36609: IFFALSE 36679
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 437
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PUSH
36629: LD_STRING l
36631: EQUAL
36632: PUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 437
36642: PUSH
36643: LD_INT 1
36645: ARRAY
36646: PUSH
36647: LD_INT 4
36649: ARRAY
36650: PUSH
36651: LD_VAR 0 2
36655: EQUAL
36656: AND
36657: IFFALSE 36669
// result := true else
36659: LD_ADDR_VAR 0 3
36663: PUSH
36664: LD_INT 1
36666: ST_TO_ADDR
36667: GO 36677
// result := false ;
36669: LD_ADDR_VAR 0 3
36673: PUSH
36674: LD_INT 0
36676: ST_TO_ADDR
// end else
36677: GO 36687
// result := false ;
36679: LD_ADDR_VAR 0 3
36683: PUSH
36684: LD_INT 0
36686: ST_TO_ADDR
// end ;
36687: LD_VAR 0 3
36691: RET
// export function HealTarget ( sci ) ; begin
36692: LD_INT 0
36694: PPUSH
// if not sci then
36695: LD_VAR 0 1
36699: NOT
36700: IFFALSE 36704
// exit ;
36702: GO 36769
// result := 0 ;
36704: LD_ADDR_VAR 0 2
36708: PUSH
36709: LD_INT 0
36711: ST_TO_ADDR
// if GetTaskList ( sci ) then
36712: LD_VAR 0 1
36716: PPUSH
36717: CALL_OW 437
36721: IFFALSE 36769
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 437
36732: PUSH
36733: LD_INT 1
36735: ARRAY
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: PUSH
36741: LD_STRING l
36743: EQUAL
36744: IFFALSE 36769
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36746: LD_ADDR_VAR 0 2
36750: PUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 437
36760: PUSH
36761: LD_INT 1
36763: ARRAY
36764: PUSH
36765: LD_INT 4
36767: ARRAY
36768: ST_TO_ADDR
// end ;
36769: LD_VAR 0 2
36773: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36774: LD_INT 0
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
// if not base_units then
36780: LD_VAR 0 1
36784: NOT
36785: IFFALSE 36789
// exit ;
36787: GO 36876
// result := false ;
36789: LD_ADDR_VAR 0 2
36793: PUSH
36794: LD_INT 0
36796: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36797: LD_ADDR_VAR 0 5
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: LD_INT 21
36809: PUSH
36810: LD_INT 3
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PPUSH
36817: CALL_OW 72
36821: ST_TO_ADDR
// if not tmp then
36822: LD_VAR 0 5
36826: NOT
36827: IFFALSE 36831
// exit ;
36829: GO 36876
// for i in tmp do
36831: LD_ADDR_VAR 0 3
36835: PUSH
36836: LD_VAR 0 5
36840: PUSH
36841: FOR_IN
36842: IFFALSE 36874
// begin result := EnemyInRange ( i , 22 ) ;
36844: LD_ADDR_VAR 0 2
36848: PUSH
36849: LD_VAR 0 3
36853: PPUSH
36854: LD_INT 22
36856: PPUSH
36857: CALL 34474 0 2
36861: ST_TO_ADDR
// if result then
36862: LD_VAR 0 2
36866: IFFALSE 36872
// exit ;
36868: POP
36869: POP
36870: GO 36876
// end ;
36872: GO 36841
36874: POP
36875: POP
// end ;
36876: LD_VAR 0 2
36880: RET
// export function FilterByTag ( units , tag ) ; begin
36881: LD_INT 0
36883: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: LD_VAR 0 1
36893: PPUSH
36894: LD_INT 120
36896: PUSH
36897: LD_VAR 0 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PPUSH
36906: CALL_OW 72
36910: ST_TO_ADDR
// end ;
36911: LD_VAR 0 3
36915: RET
// export function IsDriver ( un ) ; begin
36916: LD_INT 0
36918: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36919: LD_ADDR_VAR 0 2
36923: PUSH
36924: LD_VAR 0 1
36928: PUSH
36929: LD_INT 55
36931: PUSH
36932: EMPTY
36933: LIST
36934: PPUSH
36935: CALL_OW 69
36939: IN
36940: ST_TO_ADDR
// end ;
36941: LD_VAR 0 2
36945: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36946: LD_INT 0
36948: PPUSH
36949: PPUSH
// list := [ ] ;
36950: LD_ADDR_VAR 0 5
36954: PUSH
36955: EMPTY
36956: ST_TO_ADDR
// case d of 0 :
36957: LD_VAR 0 3
36961: PUSH
36962: LD_INT 0
36964: DOUBLE
36965: EQUAL
36966: IFTRUE 36970
36968: GO 37103
36970: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36971: LD_ADDR_VAR 0 5
36975: PUSH
36976: LD_VAR 0 1
36980: PUSH
36981: LD_INT 4
36983: MINUS
36984: PUSH
36985: LD_VAR 0 2
36989: PUSH
36990: LD_INT 4
36992: MINUS
36993: PUSH
36994: LD_INT 2
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: PUSH
37002: LD_VAR 0 1
37006: PUSH
37007: LD_INT 3
37009: MINUS
37010: PUSH
37011: LD_VAR 0 2
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: LIST
37023: PUSH
37024: LD_VAR 0 1
37028: PUSH
37029: LD_INT 4
37031: PLUS
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_INT 4
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: PUSH
37046: LD_VAR 0 1
37050: PUSH
37051: LD_INT 3
37053: PLUS
37054: PUSH
37055: LD_VAR 0 2
37059: PUSH
37060: LD_INT 3
37062: PLUS
37063: PUSH
37064: LD_INT 5
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: PUSH
37072: LD_VAR 0 1
37076: PUSH
37077: LD_VAR 0 2
37081: PUSH
37082: LD_INT 4
37084: PLUS
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// end ; 1 :
37101: GO 37801
37103: LD_INT 1
37105: DOUBLE
37106: EQUAL
37107: IFTRUE 37111
37109: GO 37244
37111: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37112: LD_ADDR_VAR 0 5
37116: PUSH
37117: LD_VAR 0 1
37121: PUSH
37122: LD_VAR 0 2
37126: PUSH
37127: LD_INT 4
37129: MINUS
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: LD_VAR 0 1
37143: PUSH
37144: LD_INT 3
37146: MINUS
37147: PUSH
37148: LD_VAR 0 2
37152: PUSH
37153: LD_INT 3
37155: MINUS
37156: PUSH
37157: LD_INT 2
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: PUSH
37165: LD_VAR 0 1
37169: PUSH
37170: LD_INT 4
37172: MINUS
37173: PUSH
37174: LD_VAR 0 2
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: PUSH
37187: LD_VAR 0 1
37191: PUSH
37192: LD_VAR 0 2
37196: PUSH
37197: LD_INT 3
37199: PLUS
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: PUSH
37209: LD_VAR 0 1
37213: PUSH
37214: LD_INT 4
37216: PLUS
37217: PUSH
37218: LD_VAR 0 2
37222: PUSH
37223: LD_INT 4
37225: PLUS
37226: PUSH
37227: LD_INT 5
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// end ; 2 :
37242: GO 37801
37244: LD_INT 2
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37252
37250: GO 37381
37252: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37253: LD_ADDR_VAR 0 5
37257: PUSH
37258: LD_VAR 0 1
37262: PUSH
37263: LD_VAR 0 2
37267: PUSH
37268: LD_INT 3
37270: MINUS
37271: PUSH
37272: LD_INT 3
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PUSH
37280: LD_VAR 0 1
37284: PUSH
37285: LD_INT 4
37287: PLUS
37288: PUSH
37289: LD_VAR 0 2
37293: PUSH
37294: LD_INT 4
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: PUSH
37302: LD_VAR 0 1
37306: PUSH
37307: LD_VAR 0 2
37311: PUSH
37312: LD_INT 4
37314: PLUS
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: PUSH
37324: LD_VAR 0 1
37328: PUSH
37329: LD_INT 3
37331: MINUS
37332: PUSH
37333: LD_VAR 0 2
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: PUSH
37346: LD_VAR 0 1
37350: PUSH
37351: LD_INT 4
37353: MINUS
37354: PUSH
37355: LD_VAR 0 2
37359: PUSH
37360: LD_INT 4
37362: MINUS
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// end ; 3 :
37379: GO 37801
37381: LD_INT 3
37383: DOUBLE
37384: EQUAL
37385: IFTRUE 37389
37387: GO 37522
37389: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37390: LD_ADDR_VAR 0 5
37394: PUSH
37395: LD_VAR 0 1
37399: PUSH
37400: LD_INT 3
37402: PLUS
37403: PUSH
37404: LD_VAR 0 2
37408: PUSH
37409: LD_INT 4
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: PUSH
37417: LD_VAR 0 1
37421: PUSH
37422: LD_INT 4
37424: PLUS
37425: PUSH
37426: LD_VAR 0 2
37430: PUSH
37431: LD_INT 4
37433: PLUS
37434: PUSH
37435: LD_INT 5
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: PUSH
37443: LD_VAR 0 1
37447: PUSH
37448: LD_INT 4
37450: MINUS
37451: PUSH
37452: LD_VAR 0 2
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: LD_VAR 0 1
37469: PUSH
37470: LD_VAR 0 2
37474: PUSH
37475: LD_INT 4
37477: MINUS
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: PUSH
37487: LD_VAR 0 1
37491: PUSH
37492: LD_INT 3
37494: MINUS
37495: PUSH
37496: LD_VAR 0 2
37500: PUSH
37501: LD_INT 3
37503: MINUS
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
// end ; 4 :
37520: GO 37801
37522: LD_INT 4
37524: DOUBLE
37525: EQUAL
37526: IFTRUE 37530
37528: GO 37663
37530: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37531: LD_ADDR_VAR 0 5
37535: PUSH
37536: LD_VAR 0 1
37540: PUSH
37541: LD_VAR 0 2
37545: PUSH
37546: LD_INT 4
37548: PLUS
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: PUSH
37558: LD_VAR 0 1
37562: PUSH
37563: LD_INT 3
37565: PLUS
37566: PUSH
37567: LD_VAR 0 2
37571: PUSH
37572: LD_INT 3
37574: PLUS
37575: PUSH
37576: LD_INT 5
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: PUSH
37584: LD_VAR 0 1
37588: PUSH
37589: LD_INT 4
37591: PLUS
37592: PUSH
37593: LD_VAR 0 2
37597: PUSH
37598: LD_INT 4
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: PUSH
37606: LD_VAR 0 1
37610: PUSH
37611: LD_VAR 0 2
37615: PUSH
37616: LD_INT 3
37618: MINUS
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: LD_VAR 0 1
37632: PUSH
37633: LD_INT 4
37635: MINUS
37636: PUSH
37637: LD_VAR 0 2
37641: PUSH
37642: LD_INT 4
37644: MINUS
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// end ; 5 :
37661: GO 37801
37663: LD_INT 5
37665: DOUBLE
37666: EQUAL
37667: IFTRUE 37671
37669: GO 37800
37671: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37672: LD_ADDR_VAR 0 5
37676: PUSH
37677: LD_VAR 0 1
37681: PUSH
37682: LD_INT 4
37684: MINUS
37685: PUSH
37686: LD_VAR 0 2
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: PUSH
37699: LD_VAR 0 1
37703: PUSH
37704: LD_VAR 0 2
37708: PUSH
37709: LD_INT 4
37711: MINUS
37712: PUSH
37713: LD_INT 3
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: PUSH
37721: LD_VAR 0 1
37725: PUSH
37726: LD_INT 4
37728: PLUS
37729: PUSH
37730: LD_VAR 0 2
37734: PUSH
37735: LD_INT 4
37737: PLUS
37738: PUSH
37739: LD_INT 5
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: LD_VAR 0 1
37751: PUSH
37752: LD_INT 3
37754: PLUS
37755: PUSH
37756: LD_VAR 0 2
37760: PUSH
37761: LD_INT 4
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: PUSH
37769: LD_VAR 0 1
37773: PUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 3
37781: PLUS
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
// end ; end ;
37798: GO 37801
37800: POP
// result := list ;
37801: LD_ADDR_VAR 0 4
37805: PUSH
37806: LD_VAR 0 5
37810: ST_TO_ADDR
// end ;
37811: LD_VAR 0 4
37815: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37816: LD_INT 0
37818: PPUSH
37819: PPUSH
37820: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37821: LD_VAR 0 1
37825: NOT
37826: PUSH
37827: LD_VAR 0 2
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 4
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: IN
37850: NOT
37851: OR
37852: IFFALSE 37856
// exit ;
37854: GO 37939
// tmp := [ ] ;
37856: LD_ADDR_VAR 0 5
37860: PUSH
37861: EMPTY
37862: ST_TO_ADDR
// for i in units do
37863: LD_ADDR_VAR 0 4
37867: PUSH
37868: LD_VAR 0 1
37872: PUSH
37873: FOR_IN
37874: IFFALSE 37908
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37876: LD_ADDR_VAR 0 5
37880: PUSH
37881: LD_VAR 0 5
37885: PPUSH
37886: LD_VAR 0 4
37890: PPUSH
37891: LD_VAR 0 2
37895: PPUSH
37896: CALL_OW 259
37900: PPUSH
37901: CALL 39312 0 2
37905: ST_TO_ADDR
37906: GO 37873
37908: POP
37909: POP
// if not tmp then
37910: LD_VAR 0 5
37914: NOT
37915: IFFALSE 37919
// exit ;
37917: GO 37939
// result := SortListByListDesc ( units , tmp ) ;
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: LD_VAR 0 5
37933: PPUSH
37934: CALL_OW 77
37938: ST_TO_ADDR
// end ;
37939: LD_VAR 0 3
37943: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37944: LD_INT 0
37946: PPUSH
37947: PPUSH
37948: PPUSH
// result := false ;
37949: LD_ADDR_VAR 0 3
37953: PUSH
37954: LD_INT 0
37956: ST_TO_ADDR
// if not building then
37957: LD_VAR 0 2
37961: NOT
37962: IFFALSE 37966
// exit ;
37964: GO 38104
// x := GetX ( building ) ;
37966: LD_ADDR_VAR 0 4
37970: PUSH
37971: LD_VAR 0 2
37975: PPUSH
37976: CALL_OW 250
37980: ST_TO_ADDR
// y := GetY ( building ) ;
37981: LD_ADDR_VAR 0 5
37985: PUSH
37986: LD_VAR 0 2
37990: PPUSH
37991: CALL_OW 251
37995: ST_TO_ADDR
// if not x or not y then
37996: LD_VAR 0 4
38000: NOT
38001: PUSH
38002: LD_VAR 0 5
38006: NOT
38007: OR
38008: IFFALSE 38012
// exit ;
38010: GO 38104
// if GetTaskList ( unit ) then
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 437
38021: IFFALSE 38104
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38023: LD_STRING e
38025: PUSH
38026: LD_VAR 0 1
38030: PPUSH
38031: CALL_OW 437
38035: PUSH
38036: LD_INT 1
38038: ARRAY
38039: PUSH
38040: LD_INT 1
38042: ARRAY
38043: EQUAL
38044: PUSH
38045: LD_VAR 0 4
38049: PUSH
38050: LD_VAR 0 1
38054: PPUSH
38055: CALL_OW 437
38059: PUSH
38060: LD_INT 1
38062: ARRAY
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: EQUAL
38068: AND
38069: PUSH
38070: LD_VAR 0 5
38074: PUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL_OW 437
38084: PUSH
38085: LD_INT 1
38087: ARRAY
38088: PUSH
38089: LD_INT 3
38091: ARRAY
38092: EQUAL
38093: AND
38094: IFFALSE 38104
// result := true end ;
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_INT 1
38103: ST_TO_ADDR
// end ;
38104: LD_VAR 0 3
38108: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38109: LD_INT 0
38111: PPUSH
// result := false ;
38112: LD_ADDR_VAR 0 4
38116: PUSH
38117: LD_INT 0
38119: ST_TO_ADDR
// if GetTaskList ( unit ) then
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL_OW 437
38129: IFFALSE 38212
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38131: LD_STRING M
38133: PUSH
38134: LD_VAR 0 1
38138: PPUSH
38139: CALL_OW 437
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PUSH
38148: LD_INT 1
38150: ARRAY
38151: EQUAL
38152: PUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_VAR 0 1
38162: PPUSH
38163: CALL_OW 437
38167: PUSH
38168: LD_INT 1
38170: ARRAY
38171: PUSH
38172: LD_INT 2
38174: ARRAY
38175: EQUAL
38176: AND
38177: PUSH
38178: LD_VAR 0 3
38182: PUSH
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 437
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: PUSH
38197: LD_INT 3
38199: ARRAY
38200: EQUAL
38201: AND
38202: IFFALSE 38212
// result := true ;
38204: LD_ADDR_VAR 0 4
38208: PUSH
38209: LD_INT 1
38211: ST_TO_ADDR
// end ; end ;
38212: LD_VAR 0 4
38216: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38217: LD_INT 0
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
// if not unit or not area then
38223: LD_VAR 0 1
38227: NOT
38228: PUSH
38229: LD_VAR 0 2
38233: NOT
38234: OR
38235: IFFALSE 38239
// exit ;
38237: GO 38415
// tmp := AreaToList ( area , i ) ;
38239: LD_ADDR_VAR 0 6
38243: PUSH
38244: LD_VAR 0 2
38248: PPUSH
38249: LD_VAR 0 5
38253: PPUSH
38254: CALL_OW 517
38258: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: DOUBLE
38265: LD_INT 1
38267: DEC
38268: ST_TO_ADDR
38269: LD_VAR 0 6
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: PUSH
38278: FOR_TO
38279: IFFALSE 38413
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38281: LD_ADDR_VAR 0 7
38285: PUSH
38286: LD_VAR 0 6
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PUSH
38295: LD_VAR 0 5
38299: ARRAY
38300: PUSH
38301: LD_VAR 0 6
38305: PUSH
38306: LD_INT 2
38308: ARRAY
38309: PUSH
38310: LD_VAR 0 5
38314: ARRAY
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38320: LD_INT 92
38322: PUSH
38323: LD_VAR 0 7
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: PUSH
38332: LD_VAR 0 7
38336: PUSH
38337: LD_INT 2
38339: ARRAY
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: PPUSH
38350: CALL_OW 69
38354: PUSH
38355: LD_INT 0
38357: EQUAL
38358: IFFALSE 38411
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38360: LD_VAR 0 1
38364: PPUSH
38365: LD_VAR 0 7
38369: PUSH
38370: LD_INT 1
38372: ARRAY
38373: PPUSH
38374: LD_VAR 0 7
38378: PUSH
38379: LD_INT 2
38381: ARRAY
38382: PPUSH
38383: LD_VAR 0 3
38387: PPUSH
38388: CALL_OW 48
// result := IsPlaced ( unit ) ;
38392: LD_ADDR_VAR 0 4
38396: PUSH
38397: LD_VAR 0 1
38401: PPUSH
38402: CALL_OW 305
38406: ST_TO_ADDR
// exit ;
38407: POP
38408: POP
38409: GO 38415
// end ; end ;
38411: GO 38278
38413: POP
38414: POP
// end ;
38415: LD_VAR 0 4
38419: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38420: LD_INT 0
38422: PPUSH
38423: PPUSH
38424: PPUSH
// if not side or side > 8 then
38425: LD_VAR 0 1
38429: NOT
38430: PUSH
38431: LD_VAR 0 1
38435: PUSH
38436: LD_INT 8
38438: GREATER
38439: OR
38440: IFFALSE 38444
// exit ;
38442: GO 38631
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38444: LD_ADDR_VAR 0 4
38448: PUSH
38449: LD_INT 22
38451: PUSH
38452: LD_VAR 0 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 21
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PPUSH
38475: CALL_OW 69
38479: ST_TO_ADDR
// if not tmp then
38480: LD_VAR 0 4
38484: NOT
38485: IFFALSE 38489
// exit ;
38487: GO 38631
// enable_addtolog := true ;
38489: LD_ADDR_OWVAR 81
38493: PUSH
38494: LD_INT 1
38496: ST_TO_ADDR
// AddToLog ( [ ) ;
38497: LD_STRING [
38499: PPUSH
38500: CALL_OW 561
// for i in tmp do
38504: LD_ADDR_VAR 0 3
38508: PUSH
38509: LD_VAR 0 4
38513: PUSH
38514: FOR_IN
38515: IFFALSE 38622
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38517: LD_STRING [
38519: PUSH
38520: LD_VAR 0 3
38524: PPUSH
38525: CALL_OW 266
38529: STR
38530: PUSH
38531: LD_STRING , 
38533: STR
38534: PUSH
38535: LD_VAR 0 3
38539: PPUSH
38540: CALL_OW 250
38544: STR
38545: PUSH
38546: LD_STRING , 
38548: STR
38549: PUSH
38550: LD_VAR 0 3
38554: PPUSH
38555: CALL_OW 251
38559: STR
38560: PUSH
38561: LD_STRING , 
38563: STR
38564: PUSH
38565: LD_VAR 0 3
38569: PPUSH
38570: CALL_OW 254
38574: STR
38575: PUSH
38576: LD_STRING , 
38578: STR
38579: PUSH
38580: LD_VAR 0 3
38584: PPUSH
38585: LD_INT 1
38587: PPUSH
38588: CALL_OW 268
38592: STR
38593: PUSH
38594: LD_STRING , 
38596: STR
38597: PUSH
38598: LD_VAR 0 3
38602: PPUSH
38603: LD_INT 2
38605: PPUSH
38606: CALL_OW 268
38610: STR
38611: PUSH
38612: LD_STRING ],
38614: STR
38615: PPUSH
38616: CALL_OW 561
// end ;
38620: GO 38514
38622: POP
38623: POP
// AddToLog ( ]; ) ;
38624: LD_STRING ];
38626: PPUSH
38627: CALL_OW 561
// end ;
38631: LD_VAR 0 2
38635: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38636: LD_INT 0
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
// if not area or not rate or not max then
38643: LD_VAR 0 1
38647: NOT
38648: PUSH
38649: LD_VAR 0 2
38653: NOT
38654: OR
38655: PUSH
38656: LD_VAR 0 4
38660: NOT
38661: OR
38662: IFFALSE 38666
// exit ;
38664: GO 38855
// while 1 do
38666: LD_INT 1
38668: IFFALSE 38855
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38670: LD_ADDR_VAR 0 9
38674: PUSH
38675: LD_VAR 0 1
38679: PPUSH
38680: LD_INT 1
38682: PPUSH
38683: CALL_OW 287
38687: PUSH
38688: LD_INT 10
38690: MUL
38691: ST_TO_ADDR
// r := rate / 10 ;
38692: LD_ADDR_VAR 0 7
38696: PUSH
38697: LD_VAR 0 2
38701: PUSH
38702: LD_INT 10
38704: DIVREAL
38705: ST_TO_ADDR
// time := 1 1$00 ;
38706: LD_ADDR_VAR 0 8
38710: PUSH
38711: LD_INT 2100
38713: ST_TO_ADDR
// if amount < min then
38714: LD_VAR 0 9
38718: PUSH
38719: LD_VAR 0 3
38723: LESS
38724: IFFALSE 38742
// r := r * 2 else
38726: LD_ADDR_VAR 0 7
38730: PUSH
38731: LD_VAR 0 7
38735: PUSH
38736: LD_INT 2
38738: MUL
38739: ST_TO_ADDR
38740: GO 38768
// if amount > max then
38742: LD_VAR 0 9
38746: PUSH
38747: LD_VAR 0 4
38751: GREATER
38752: IFFALSE 38768
// r := r / 2 ;
38754: LD_ADDR_VAR 0 7
38758: PUSH
38759: LD_VAR 0 7
38763: PUSH
38764: LD_INT 2
38766: DIVREAL
38767: ST_TO_ADDR
// time := time / r ;
38768: LD_ADDR_VAR 0 8
38772: PUSH
38773: LD_VAR 0 8
38777: PUSH
38778: LD_VAR 0 7
38782: DIVREAL
38783: ST_TO_ADDR
// if time < 0 then
38784: LD_VAR 0 8
38788: PUSH
38789: LD_INT 0
38791: LESS
38792: IFFALSE 38809
// time := time * - 1 ;
38794: LD_ADDR_VAR 0 8
38798: PUSH
38799: LD_VAR 0 8
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: MUL
38808: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38809: LD_VAR 0 8
38813: PUSH
38814: LD_INT 35
38816: PPUSH
38817: LD_INT 875
38819: PPUSH
38820: CALL_OW 12
38824: PLUS
38825: PPUSH
38826: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38830: LD_INT 1
38832: PPUSH
38833: LD_INT 5
38835: PPUSH
38836: CALL_OW 12
38840: PPUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: LD_INT 1
38848: PPUSH
38849: CALL_OW 55
// end ;
38853: GO 38666
// end ;
38855: LD_VAR 0 5
38859: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38860: LD_INT 0
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
// if not turrets or not factories then
38870: LD_VAR 0 1
38874: NOT
38875: PUSH
38876: LD_VAR 0 2
38880: NOT
38881: OR
38882: IFFALSE 38886
// exit ;
38884: GO 39193
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38886: LD_ADDR_VAR 0 10
38890: PUSH
38891: LD_INT 5
38893: PUSH
38894: LD_INT 6
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 4
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: LD_INT 5
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 24
38928: PUSH
38929: LD_INT 25
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 23
38938: PUSH
38939: LD_INT 27
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 42
38952: PUSH
38953: LD_INT 43
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 44
38962: PUSH
38963: LD_INT 46
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 45
38972: PUSH
38973: LD_INT 47
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: ST_TO_ADDR
// result := [ ] ;
38990: LD_ADDR_VAR 0 3
38994: PUSH
38995: EMPTY
38996: ST_TO_ADDR
// for i in turrets do
38997: LD_ADDR_VAR 0 4
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: FOR_IN
39008: IFFALSE 39191
// begin nat := GetNation ( i ) ;
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: LD_VAR 0 4
39019: PPUSH
39020: CALL_OW 248
39024: ST_TO_ADDR
// weapon := 0 ;
39025: LD_ADDR_VAR 0 8
39029: PUSH
39030: LD_INT 0
39032: ST_TO_ADDR
// if not nat then
39033: LD_VAR 0 7
39037: NOT
39038: IFFALSE 39042
// continue ;
39040: GO 39007
// for j in list [ nat ] do
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: LD_VAR 0 10
39051: PUSH
39052: LD_VAR 0 7
39056: ARRAY
39057: PUSH
39058: FOR_IN
39059: IFFALSE 39100
// if GetBWeapon ( i ) = j [ 1 ] then
39061: LD_VAR 0 4
39065: PPUSH
39066: CALL_OW 269
39070: PUSH
39071: LD_VAR 0 5
39075: PUSH
39076: LD_INT 1
39078: ARRAY
39079: EQUAL
39080: IFFALSE 39098
// begin weapon := j [ 2 ] ;
39082: LD_ADDR_VAR 0 8
39086: PUSH
39087: LD_VAR 0 5
39091: PUSH
39092: LD_INT 2
39094: ARRAY
39095: ST_TO_ADDR
// break ;
39096: GO 39100
// end ;
39098: GO 39058
39100: POP
39101: POP
// if not weapon then
39102: LD_VAR 0 8
39106: NOT
39107: IFFALSE 39111
// continue ;
39109: GO 39007
// for k in factories do
39111: LD_ADDR_VAR 0 6
39115: PUSH
39116: LD_VAR 0 2
39120: PUSH
39121: FOR_IN
39122: IFFALSE 39187
// begin weapons := AvailableWeaponList ( k ) ;
39124: LD_ADDR_VAR 0 9
39128: PUSH
39129: LD_VAR 0 6
39133: PPUSH
39134: CALL_OW 478
39138: ST_TO_ADDR
// if not weapons then
39139: LD_VAR 0 9
39143: NOT
39144: IFFALSE 39148
// continue ;
39146: GO 39121
// if weapon in weapons then
39148: LD_VAR 0 8
39152: PUSH
39153: LD_VAR 0 9
39157: IN
39158: IFFALSE 39185
// begin result := [ i , weapon ] ;
39160: LD_ADDR_VAR 0 3
39164: PUSH
39165: LD_VAR 0 4
39169: PUSH
39170: LD_VAR 0 8
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// exit ;
39179: POP
39180: POP
39181: POP
39182: POP
39183: GO 39193
// end ; end ;
39185: GO 39121
39187: POP
39188: POP
// end ;
39189: GO 39007
39191: POP
39192: POP
// end ;
39193: LD_VAR 0 3
39197: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39198: LD_INT 0
39200: PPUSH
// if not side or side > 8 then
39201: LD_VAR 0 3
39205: NOT
39206: PUSH
39207: LD_VAR 0 3
39211: PUSH
39212: LD_INT 8
39214: GREATER
39215: OR
39216: IFFALSE 39220
// exit ;
39218: GO 39279
// if not range then
39220: LD_VAR 0 4
39224: NOT
39225: IFFALSE 39236
// range := - 12 ;
39227: LD_ADDR_VAR 0 4
39231: PUSH
39232: LD_INT 12
39234: NEG
39235: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39236: LD_VAR 0 1
39240: PPUSH
39241: LD_VAR 0 2
39245: PPUSH
39246: LD_VAR 0 3
39250: PPUSH
39251: LD_VAR 0 4
39255: PPUSH
39256: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39260: LD_VAR 0 1
39264: PPUSH
39265: LD_VAR 0 2
39269: PPUSH
39270: LD_VAR 0 3
39274: PPUSH
39275: CALL_OW 331
// end ;
39279: LD_VAR 0 5
39283: RET
// export function Video ( mode ) ; begin
39284: LD_INT 0
39286: PPUSH
// ingame_video = mode ;
39287: LD_ADDR_OWVAR 52
39291: PUSH
39292: LD_VAR 0 1
39296: ST_TO_ADDR
// interface_hidden = mode ;
39297: LD_ADDR_OWVAR 54
39301: PUSH
39302: LD_VAR 0 1
39306: ST_TO_ADDR
// end ;
39307: LD_VAR 0 2
39311: RET
// export function Join ( array , element ) ; begin
39312: LD_INT 0
39314: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39315: LD_ADDR_VAR 0 3
39319: PUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: LD_VAR 0 1
39329: PUSH
39330: LD_INT 1
39332: PLUS
39333: PPUSH
39334: LD_VAR 0 2
39338: PPUSH
39339: CALL_OW 1
39343: ST_TO_ADDR
// end ;
39344: LD_VAR 0 3
39348: RET
// export function JoinUnion ( array , element ) ; begin
39349: LD_INT 0
39351: PPUSH
// result := array union element ;
39352: LD_ADDR_VAR 0 3
39356: PUSH
39357: LD_VAR 0 1
39361: PUSH
39362: LD_VAR 0 2
39366: UNION
39367: ST_TO_ADDR
// end ;
39368: LD_VAR 0 3
39372: RET
// export function GetBehemoths ( side ) ; begin
39373: LD_INT 0
39375: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39376: LD_ADDR_VAR 0 2
39380: PUSH
39381: LD_INT 22
39383: PUSH
39384: LD_VAR 0 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 31
39395: PUSH
39396: LD_INT 25
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PPUSH
39407: CALL_OW 69
39411: ST_TO_ADDR
// end ;
39412: LD_VAR 0 2
39416: RET
// export function Shuffle ( array ) ; var i , index ; begin
39417: LD_INT 0
39419: PPUSH
39420: PPUSH
39421: PPUSH
// result := [ ] ;
39422: LD_ADDR_VAR 0 2
39426: PUSH
39427: EMPTY
39428: ST_TO_ADDR
// if not array then
39429: LD_VAR 0 1
39433: NOT
39434: IFFALSE 39438
// exit ;
39436: GO 39537
// Randomize ;
39438: CALL_OW 10
// for i = array downto 1 do
39442: LD_ADDR_VAR 0 3
39446: PUSH
39447: DOUBLE
39448: LD_VAR 0 1
39452: INC
39453: ST_TO_ADDR
39454: LD_INT 1
39456: PUSH
39457: FOR_DOWNTO
39458: IFFALSE 39535
// begin index := rand ( 1 , array ) ;
39460: LD_ADDR_VAR 0 4
39464: PUSH
39465: LD_INT 1
39467: PPUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 12
39477: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39478: LD_ADDR_VAR 0 2
39482: PUSH
39483: LD_VAR 0 2
39487: PPUSH
39488: LD_VAR 0 2
39492: PUSH
39493: LD_INT 1
39495: PLUS
39496: PPUSH
39497: LD_VAR 0 1
39501: PUSH
39502: LD_VAR 0 4
39506: ARRAY
39507: PPUSH
39508: CALL_OW 2
39512: ST_TO_ADDR
// array := Delete ( array , index ) ;
39513: LD_ADDR_VAR 0 1
39517: PUSH
39518: LD_VAR 0 1
39522: PPUSH
39523: LD_VAR 0 4
39527: PPUSH
39528: CALL_OW 3
39532: ST_TO_ADDR
// end ;
39533: GO 39457
39535: POP
39536: POP
// end ;
39537: LD_VAR 0 2
39541: RET
// export function GetBaseMaterials ( base ) ; begin
39542: LD_INT 0
39544: PPUSH
// result := [ 0 , 0 , 0 ] ;
39545: LD_ADDR_VAR 0 2
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// if not base then
39564: LD_VAR 0 1
39568: NOT
39569: IFFALSE 39573
// exit ;
39571: GO 39622
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39573: LD_ADDR_VAR 0 2
39577: PUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: LD_INT 1
39585: PPUSH
39586: CALL_OW 275
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: LD_INT 2
39598: PPUSH
39599: CALL_OW 275
39603: PUSH
39604: LD_VAR 0 1
39608: PPUSH
39609: LD_INT 3
39611: PPUSH
39612: CALL_OW 275
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// end ;
39622: LD_VAR 0 2
39626: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39627: LD_INT 0
39629: PPUSH
39630: PPUSH
// result := array ;
39631: LD_ADDR_VAR 0 3
39635: PUSH
39636: LD_VAR 0 1
39640: ST_TO_ADDR
// if size >= result then
39641: LD_VAR 0 2
39645: PUSH
39646: LD_VAR 0 3
39650: GREATEREQUAL
39651: IFFALSE 39655
// exit ;
39653: GO 39705
// if size then
39655: LD_VAR 0 2
39659: IFFALSE 39705
// for i := array downto size do
39661: LD_ADDR_VAR 0 4
39665: PUSH
39666: DOUBLE
39667: LD_VAR 0 1
39671: INC
39672: ST_TO_ADDR
39673: LD_VAR 0 2
39677: PUSH
39678: FOR_DOWNTO
39679: IFFALSE 39703
// result := Delete ( result , result ) ;
39681: LD_ADDR_VAR 0 3
39685: PUSH
39686: LD_VAR 0 3
39690: PPUSH
39691: LD_VAR 0 3
39695: PPUSH
39696: CALL_OW 3
39700: ST_TO_ADDR
39701: GO 39678
39703: POP
39704: POP
// end ;
39705: LD_VAR 0 3
39709: RET
// export function ComExit ( unit ) ; var tmp ; begin
39710: LD_INT 0
39712: PPUSH
39713: PPUSH
// if not IsInUnit ( unit ) then
39714: LD_VAR 0 1
39718: PPUSH
39719: CALL_OW 310
39723: NOT
39724: IFFALSE 39728
// exit ;
39726: GO 39788
// tmp := IsInUnit ( unit ) ;
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 310
39742: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39743: LD_VAR 0 3
39747: PPUSH
39748: CALL_OW 247
39752: PUSH
39753: LD_INT 2
39755: EQUAL
39756: IFFALSE 39769
// ComExitVehicle ( unit ) else
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 121
39767: GO 39778
// ComExitBuilding ( unit ) ;
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 122
// result := tmp ;
39778: LD_ADDR_VAR 0 2
39782: PUSH
39783: LD_VAR 0 3
39787: ST_TO_ADDR
// end ;
39788: LD_VAR 0 2
39792: RET
// export function ComExitAll ( units ) ; var i ; begin
39793: LD_INT 0
39795: PPUSH
39796: PPUSH
// if not units then
39797: LD_VAR 0 1
39801: NOT
39802: IFFALSE 39806
// exit ;
39804: GO 39832
// for i in units do
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_VAR 0 1
39815: PUSH
39816: FOR_IN
39817: IFFALSE 39830
// ComExit ( i ) ;
39819: LD_VAR 0 3
39823: PPUSH
39824: CALL 39710 0 1
39828: GO 39816
39830: POP
39831: POP
// end ;
39832: LD_VAR 0 2
39836: RET
// export function ResetHc ; begin
39837: LD_INT 0
39839: PPUSH
// InitHc ;
39840: CALL_OW 19
// hc_importance := 0 ;
39844: LD_ADDR_OWVAR 32
39848: PUSH
39849: LD_INT 0
39851: ST_TO_ADDR
// end ;
39852: LD_VAR 0 1
39856: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39857: LD_INT 0
39859: PPUSH
39860: PPUSH
39861: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39862: LD_ADDR_VAR 0 6
39866: PUSH
39867: LD_VAR 0 1
39871: PUSH
39872: LD_VAR 0 3
39876: PLUS
39877: PUSH
39878: LD_INT 2
39880: DIV
39881: ST_TO_ADDR
// if _x < 0 then
39882: LD_VAR 0 6
39886: PUSH
39887: LD_INT 0
39889: LESS
39890: IFFALSE 39907
// _x := _x * - 1 ;
39892: LD_ADDR_VAR 0 6
39896: PUSH
39897: LD_VAR 0 6
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: MUL
39906: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39907: LD_ADDR_VAR 0 7
39911: PUSH
39912: LD_VAR 0 2
39916: PUSH
39917: LD_VAR 0 4
39921: PLUS
39922: PUSH
39923: LD_INT 2
39925: DIV
39926: ST_TO_ADDR
// if _y < 0 then
39927: LD_VAR 0 7
39931: PUSH
39932: LD_INT 0
39934: LESS
39935: IFFALSE 39952
// _y := _y * - 1 ;
39937: LD_ADDR_VAR 0 7
39941: PUSH
39942: LD_VAR 0 7
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: MUL
39951: ST_TO_ADDR
// result := [ _x , _y ] ;
39952: LD_ADDR_VAR 0 5
39956: PUSH
39957: LD_VAR 0 6
39961: PUSH
39962: LD_VAR 0 7
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: ST_TO_ADDR
// end ;
39971: LD_VAR 0 5
39975: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39976: LD_INT 0
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
// task := GetTaskList ( unit ) ;
39982: LD_ADDR_VAR 0 7
39986: PUSH
39987: LD_VAR 0 1
39991: PPUSH
39992: CALL_OW 437
39996: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39997: LD_VAR 0 7
40001: NOT
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: LD_VAR 0 2
40012: PPUSH
40013: CALL_OW 308
40017: NOT
40018: AND
40019: IFFALSE 40023
// exit ;
40021: GO 40141
// if IsInArea ( unit , area ) then
40023: LD_VAR 0 1
40027: PPUSH
40028: LD_VAR 0 2
40032: PPUSH
40033: CALL_OW 308
40037: IFFALSE 40055
// begin ComMoveToArea ( unit , goAway ) ;
40039: LD_VAR 0 1
40043: PPUSH
40044: LD_VAR 0 3
40048: PPUSH
40049: CALL_OW 113
// exit ;
40053: GO 40141
// end ; if task [ 1 ] [ 1 ] <> M then
40055: LD_VAR 0 7
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: PUSH
40068: LD_STRING M
40070: NONEQUAL
40071: IFFALSE 40075
// exit ;
40073: GO 40141
// x := task [ 1 ] [ 2 ] ;
40075: LD_ADDR_VAR 0 5
40079: PUSH
40080: LD_VAR 0 7
40084: PUSH
40085: LD_INT 1
40087: ARRAY
40088: PUSH
40089: LD_INT 2
40091: ARRAY
40092: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40093: LD_ADDR_VAR 0 6
40097: PUSH
40098: LD_VAR 0 7
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PUSH
40107: LD_INT 3
40109: ARRAY
40110: ST_TO_ADDR
// if InArea ( x , y , area ) then
40111: LD_VAR 0 5
40115: PPUSH
40116: LD_VAR 0 6
40120: PPUSH
40121: LD_VAR 0 2
40125: PPUSH
40126: CALL_OW 309
40130: IFFALSE 40141
// ComStop ( unit ) ;
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 141
// end ;
40141: LD_VAR 0 4
40145: RET
// export function Abs ( value ) ; begin
40146: LD_INT 0
40148: PPUSH
// result := value ;
40149: LD_ADDR_VAR 0 2
40153: PUSH
40154: LD_VAR 0 1
40158: ST_TO_ADDR
// if value < 0 then
40159: LD_VAR 0 1
40163: PUSH
40164: LD_INT 0
40166: LESS
40167: IFFALSE 40184
// result := value * - 1 ;
40169: LD_ADDR_VAR 0 2
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: MUL
40183: ST_TO_ADDR
// end ;
40184: LD_VAR 0 2
40188: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40189: LD_INT 0
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
// if not unit or not building then
40199: LD_VAR 0 1
40203: NOT
40204: PUSH
40205: LD_VAR 0 2
40209: NOT
40210: OR
40211: IFFALSE 40215
// exit ;
40213: GO 40441
// x := GetX ( building ) ;
40215: LD_ADDR_VAR 0 4
40219: PUSH
40220: LD_VAR 0 2
40224: PPUSH
40225: CALL_OW 250
40229: ST_TO_ADDR
// y := GetY ( building ) ;
40230: LD_ADDR_VAR 0 6
40234: PUSH
40235: LD_VAR 0 2
40239: PPUSH
40240: CALL_OW 251
40244: ST_TO_ADDR
// d := GetDir ( building ) ;
40245: LD_ADDR_VAR 0 8
40249: PUSH
40250: LD_VAR 0 2
40254: PPUSH
40255: CALL_OW 254
40259: ST_TO_ADDR
// r := 4 ;
40260: LD_ADDR_VAR 0 9
40264: PUSH
40265: LD_INT 4
40267: ST_TO_ADDR
// for i := 1 to 5 do
40268: LD_ADDR_VAR 0 10
40272: PUSH
40273: DOUBLE
40274: LD_INT 1
40276: DEC
40277: ST_TO_ADDR
40278: LD_INT 5
40280: PUSH
40281: FOR_TO
40282: IFFALSE 40439
// begin _x := ShiftX ( x , d , r + i ) ;
40284: LD_ADDR_VAR 0 5
40288: PUSH
40289: LD_VAR 0 4
40293: PPUSH
40294: LD_VAR 0 8
40298: PPUSH
40299: LD_VAR 0 9
40303: PUSH
40304: LD_VAR 0 10
40308: PLUS
40309: PPUSH
40310: CALL_OW 272
40314: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40315: LD_ADDR_VAR 0 7
40319: PUSH
40320: LD_VAR 0 6
40324: PPUSH
40325: LD_VAR 0 8
40329: PPUSH
40330: LD_VAR 0 9
40334: PUSH
40335: LD_VAR 0 10
40339: PLUS
40340: PPUSH
40341: CALL_OW 273
40345: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40346: LD_VAR 0 5
40350: PPUSH
40351: LD_VAR 0 7
40355: PPUSH
40356: CALL_OW 488
40360: PUSH
40361: LD_VAR 0 5
40365: PPUSH
40366: LD_VAR 0 7
40370: PPUSH
40371: CALL_OW 428
40375: PPUSH
40376: CALL_OW 247
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: IN
40391: NOT
40392: AND
40393: IFFALSE 40437
// begin ComMoveXY ( unit , _x , _y ) ;
40395: LD_VAR 0 1
40399: PPUSH
40400: LD_VAR 0 5
40404: PPUSH
40405: LD_VAR 0 7
40409: PPUSH
40410: CALL_OW 111
// result := [ _x , _y ] ;
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_VAR 0 5
40423: PUSH
40424: LD_VAR 0 7
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// exit ;
40433: POP
40434: POP
40435: GO 40441
// end ; end ;
40437: GO 40281
40439: POP
40440: POP
// end ;
40441: LD_VAR 0 3
40445: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40446: LD_INT 0
40448: PPUSH
40449: PPUSH
40450: PPUSH
// result := 0 ;
40451: LD_ADDR_VAR 0 3
40455: PUSH
40456: LD_INT 0
40458: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40459: LD_VAR 0 1
40463: PUSH
40464: LD_INT 0
40466: LESS
40467: PUSH
40468: LD_VAR 0 1
40472: PUSH
40473: LD_INT 8
40475: GREATER
40476: OR
40477: PUSH
40478: LD_VAR 0 2
40482: PUSH
40483: LD_INT 0
40485: LESS
40486: OR
40487: PUSH
40488: LD_VAR 0 2
40492: PUSH
40493: LD_INT 8
40495: GREATER
40496: OR
40497: IFFALSE 40501
// exit ;
40499: GO 40576
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_INT 22
40508: PUSH
40509: LD_VAR 0 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PPUSH
40518: CALL_OW 69
40522: PUSH
40523: FOR_IN
40524: IFFALSE 40574
// begin un := UnitShoot ( i ) ;
40526: LD_ADDR_VAR 0 5
40530: PUSH
40531: LD_VAR 0 4
40535: PPUSH
40536: CALL_OW 504
40540: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40541: LD_VAR 0 5
40545: PPUSH
40546: CALL_OW 255
40550: PUSH
40551: LD_VAR 0 1
40555: EQUAL
40556: IFFALSE 40572
// begin result := un ;
40558: LD_ADDR_VAR 0 3
40562: PUSH
40563: LD_VAR 0 5
40567: ST_TO_ADDR
// exit ;
40568: POP
40569: POP
40570: GO 40576
// end ; end ;
40572: GO 40523
40574: POP
40575: POP
// end ;
40576: LD_VAR 0 3
40580: RET
// export function GetCargoBay ( units ) ; begin
40581: LD_INT 0
40583: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40584: LD_ADDR_VAR 0 2
40588: PUSH
40589: LD_VAR 0 1
40593: PPUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 34
40599: PUSH
40600: LD_INT 12
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 34
40609: PUSH
40610: LD_INT 51
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 34
40619: PUSH
40620: LD_INT 32
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 34
40629: PUSH
40630: LD_INT 89
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: PPUSH
40644: CALL_OW 72
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 2
40653: RET
// export function Negate ( value ) ; begin
40654: LD_INT 0
40656: PPUSH
// result := not value ;
40657: LD_ADDR_VAR 0 2
40661: PUSH
40662: LD_VAR 0 1
40666: NOT
40667: ST_TO_ADDR
// end ;
40668: LD_VAR 0 2
40672: RET
// export function Inc ( value ) ; begin
40673: LD_INT 0
40675: PPUSH
// result := value + 1 ;
40676: LD_ADDR_VAR 0 2
40680: PUSH
40681: LD_VAR 0 1
40685: PUSH
40686: LD_INT 1
40688: PLUS
40689: ST_TO_ADDR
// end ;
40690: LD_VAR 0 2
40694: RET
// export function Dec ( value ) ; begin
40695: LD_INT 0
40697: PPUSH
// result := value - 1 ;
40698: LD_ADDR_VAR 0 2
40702: PUSH
40703: LD_VAR 0 1
40707: PUSH
40708: LD_INT 1
40710: MINUS
40711: ST_TO_ADDR
// end ;
40712: LD_VAR 0 2
40716: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40717: LD_INT 0
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40727: LD_VAR 0 1
40731: PPUSH
40732: LD_VAR 0 2
40736: PPUSH
40737: CALL_OW 488
40741: NOT
40742: PUSH
40743: LD_VAR 0 3
40747: PPUSH
40748: LD_VAR 0 4
40752: PPUSH
40753: CALL_OW 488
40757: NOT
40758: OR
40759: IFFALSE 40772
// begin result := - 1 ;
40761: LD_ADDR_VAR 0 5
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: ST_TO_ADDR
// exit ;
40770: GO 41007
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40772: LD_ADDR_VAR 0 12
40776: PUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: LD_VAR 0 2
40786: PPUSH
40787: LD_VAR 0 3
40791: PPUSH
40792: LD_VAR 0 4
40796: PPUSH
40797: CALL 39857 0 4
40801: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40802: LD_ADDR_VAR 0 11
40806: PUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: LD_VAR 0 2
40816: PPUSH
40817: LD_VAR 0 12
40821: PUSH
40822: LD_INT 1
40824: ARRAY
40825: PPUSH
40826: LD_VAR 0 12
40830: PUSH
40831: LD_INT 2
40833: ARRAY
40834: PPUSH
40835: CALL_OW 298
40839: ST_TO_ADDR
// distance := 9999 ;
40840: LD_ADDR_VAR 0 10
40844: PUSH
40845: LD_INT 9999
40847: ST_TO_ADDR
// for i := 0 to 5 do
40848: LD_ADDR_VAR 0 6
40852: PUSH
40853: DOUBLE
40854: LD_INT 0
40856: DEC
40857: ST_TO_ADDR
40858: LD_INT 5
40860: PUSH
40861: FOR_TO
40862: IFFALSE 41005
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40864: LD_ADDR_VAR 0 7
40868: PUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: LD_VAR 0 6
40878: PPUSH
40879: LD_VAR 0 11
40883: PPUSH
40884: CALL_OW 272
40888: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40889: LD_ADDR_VAR 0 8
40893: PUSH
40894: LD_VAR 0 2
40898: PPUSH
40899: LD_VAR 0 6
40903: PPUSH
40904: LD_VAR 0 11
40908: PPUSH
40909: CALL_OW 273
40913: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40914: LD_VAR 0 7
40918: PPUSH
40919: LD_VAR 0 8
40923: PPUSH
40924: CALL_OW 488
40928: NOT
40929: IFFALSE 40933
// continue ;
40931: GO 40861
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40933: LD_ADDR_VAR 0 9
40937: PUSH
40938: LD_VAR 0 12
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 12
40951: PUSH
40952: LD_INT 2
40954: ARRAY
40955: PPUSH
40956: LD_VAR 0 7
40960: PPUSH
40961: LD_VAR 0 8
40965: PPUSH
40966: CALL_OW 298
40970: ST_TO_ADDR
// if tmp < distance then
40971: LD_VAR 0 9
40975: PUSH
40976: LD_VAR 0 10
40980: LESS
40981: IFFALSE 41003
// begin result := i ;
40983: LD_ADDR_VAR 0 5
40987: PUSH
40988: LD_VAR 0 6
40992: ST_TO_ADDR
// distance := tmp ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 9
41002: ST_TO_ADDR
// end ; end ;
41003: GO 40861
41005: POP
41006: POP
// end ;
41007: LD_VAR 0 5
41011: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41012: LD_INT 0
41014: PPUSH
41015: PPUSH
// if not driver or not IsInUnit ( driver ) then
41016: LD_VAR 0 1
41020: NOT
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 310
41031: NOT
41032: OR
41033: IFFALSE 41037
// exit ;
41035: GO 41127
// vehicle := IsInUnit ( driver ) ;
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 310
41051: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41052: LD_VAR 0 1
41056: PPUSH
41057: LD_STRING \
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: PUSH
41087: LD_STRING E
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_VAR 0 3
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PPUSH
41123: CALL_OW 446
// end ;
41127: LD_VAR 0 2
41131: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
// if not driver or not IsInUnit ( driver ) then
41136: LD_VAR 0 1
41140: NOT
41141: PUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 310
41151: NOT
41152: OR
41153: IFFALSE 41157
// exit ;
41155: GO 41247
// vehicle := IsInUnit ( driver ) ;
41157: LD_ADDR_VAR 0 3
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 310
41171: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41172: LD_VAR 0 1
41176: PPUSH
41177: LD_STRING \
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: PUSH
41207: LD_STRING E
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_VAR 0 3
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PPUSH
41243: CALL_OW 447
// end ;
41247: LD_VAR 0 2
41251: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41252: LD_INT 0
41254: PPUSH
41255: PPUSH
41256: PPUSH
// tmp := [ ] ;
41257: LD_ADDR_VAR 0 5
41261: PUSH
41262: EMPTY
41263: ST_TO_ADDR
// for i in units do
41264: LD_ADDR_VAR 0 4
41268: PUSH
41269: LD_VAR 0 1
41273: PUSH
41274: FOR_IN
41275: IFFALSE 41313
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41277: LD_ADDR_VAR 0 5
41281: PUSH
41282: LD_VAR 0 5
41286: PPUSH
41287: LD_VAR 0 5
41291: PUSH
41292: LD_INT 1
41294: PLUS
41295: PPUSH
41296: LD_VAR 0 4
41300: PPUSH
41301: CALL_OW 256
41305: PPUSH
41306: CALL_OW 2
41310: ST_TO_ADDR
41311: GO 41274
41313: POP
41314: POP
// if not tmp then
41315: LD_VAR 0 5
41319: NOT
41320: IFFALSE 41324
// exit ;
41322: GO 41372
// if asc then
41324: LD_VAR 0 2
41328: IFFALSE 41352
// result := SortListByListAsc ( units , tmp ) else
41330: LD_ADDR_VAR 0 3
41334: PUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: CALL_OW 76
41349: ST_TO_ADDR
41350: GO 41372
// result := SortListByListDesc ( units , tmp ) ;
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_VAR 0 1
41361: PPUSH
41362: LD_VAR 0 5
41366: PPUSH
41367: CALL_OW 77
41371: ST_TO_ADDR
// end ;
41372: LD_VAR 0 3
41376: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41377: LD_INT 0
41379: PPUSH
41380: PPUSH
// task := GetTaskList ( mech ) ;
41381: LD_ADDR_VAR 0 4
41385: PUSH
41386: LD_VAR 0 1
41390: PPUSH
41391: CALL_OW 437
41395: ST_TO_ADDR
// if not task then
41396: LD_VAR 0 4
41400: NOT
41401: IFFALSE 41405
// exit ;
41403: GO 41447
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41405: LD_ADDR_VAR 0 3
41409: PUSH
41410: LD_VAR 0 4
41414: PUSH
41415: LD_INT 1
41417: ARRAY
41418: PUSH
41419: LD_INT 1
41421: ARRAY
41422: PUSH
41423: LD_STRING r
41425: EQUAL
41426: PUSH
41427: LD_VAR 0 4
41431: PUSH
41432: LD_INT 1
41434: ARRAY
41435: PUSH
41436: LD_INT 4
41438: ARRAY
41439: PUSH
41440: LD_VAR 0 2
41444: EQUAL
41445: AND
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 3
41451: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41452: LD_INT 0
41454: PPUSH
// SetDir ( unit , d ) ;
41455: LD_VAR 0 1
41459: PPUSH
41460: LD_VAR 0 4
41464: PPUSH
41465: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41469: LD_VAR 0 1
41473: PPUSH
41474: LD_VAR 0 2
41478: PPUSH
41479: LD_VAR 0 3
41483: PPUSH
41484: LD_VAR 0 5
41488: PPUSH
41489: CALL_OW 48
// end ;
41493: LD_VAR 0 6
41497: RET
// export function ToNaturalNumber ( number ) ; begin
41498: LD_INT 0
41500: PPUSH
// result := number div 1 ;
41501: LD_ADDR_VAR 0 2
41505: PUSH
41506: LD_VAR 0 1
41510: PUSH
41511: LD_INT 1
41513: DIV
41514: ST_TO_ADDR
// if number < 0 then
41515: LD_VAR 0 1
41519: PUSH
41520: LD_INT 0
41522: LESS
41523: IFFALSE 41533
// result := 0 ;
41525: LD_ADDR_VAR 0 2
41529: PUSH
41530: LD_INT 0
41532: ST_TO_ADDR
// end ;
41533: LD_VAR 0 2
41537: RET
// export function SortByClass ( units , class ) ; var un ; begin
41538: LD_INT 0
41540: PPUSH
41541: PPUSH
// if not units or not class then
41542: LD_VAR 0 1
41546: NOT
41547: PUSH
41548: LD_VAR 0 2
41552: NOT
41553: OR
41554: IFFALSE 41558
// exit ;
41556: GO 41653
// result := [ ] ;
41558: LD_ADDR_VAR 0 3
41562: PUSH
41563: EMPTY
41564: ST_TO_ADDR
// for un in units do
41565: LD_ADDR_VAR 0 4
41569: PUSH
41570: LD_VAR 0 1
41574: PUSH
41575: FOR_IN
41576: IFFALSE 41651
// if GetClass ( un ) = class then
41578: LD_VAR 0 4
41582: PPUSH
41583: CALL_OW 257
41587: PUSH
41588: LD_VAR 0 2
41592: EQUAL
41593: IFFALSE 41620
// result := Insert ( result , 1 , un ) else
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_VAR 0 3
41604: PPUSH
41605: LD_INT 1
41607: PPUSH
41608: LD_VAR 0 4
41612: PPUSH
41613: CALL_OW 2
41617: ST_TO_ADDR
41618: GO 41649
// result := Replace ( result , result + 1 , un ) ;
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_VAR 0 3
41629: PPUSH
41630: LD_VAR 0 3
41634: PUSH
41635: LD_INT 1
41637: PLUS
41638: PPUSH
41639: LD_VAR 0 4
41643: PPUSH
41644: CALL_OW 1
41648: ST_TO_ADDR
41649: GO 41575
41651: POP
41652: POP
// end ;
41653: LD_VAR 0 3
41657: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41658: LD_INT 0
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
// result := [ ] ;
41667: LD_ADDR_VAR 0 4
41671: PUSH
41672: EMPTY
41673: ST_TO_ADDR
// if x - r < 0 then
41674: LD_VAR 0 1
41678: PUSH
41679: LD_VAR 0 3
41683: MINUS
41684: PUSH
41685: LD_INT 0
41687: LESS
41688: IFFALSE 41700
// min_x := 0 else
41690: LD_ADDR_VAR 0 8
41694: PUSH
41695: LD_INT 0
41697: ST_TO_ADDR
41698: GO 41716
// min_x := x - r ;
41700: LD_ADDR_VAR 0 8
41704: PUSH
41705: LD_VAR 0 1
41709: PUSH
41710: LD_VAR 0 3
41714: MINUS
41715: ST_TO_ADDR
// if y - r < 0 then
41716: LD_VAR 0 2
41720: PUSH
41721: LD_VAR 0 3
41725: MINUS
41726: PUSH
41727: LD_INT 0
41729: LESS
41730: IFFALSE 41742
// min_y := 0 else
41732: LD_ADDR_VAR 0 7
41736: PUSH
41737: LD_INT 0
41739: ST_TO_ADDR
41740: GO 41758
// min_y := y - r ;
41742: LD_ADDR_VAR 0 7
41746: PUSH
41747: LD_VAR 0 2
41751: PUSH
41752: LD_VAR 0 3
41756: MINUS
41757: ST_TO_ADDR
// max_x := x + r ;
41758: LD_ADDR_VAR 0 9
41762: PUSH
41763: LD_VAR 0 1
41767: PUSH
41768: LD_VAR 0 3
41772: PLUS
41773: ST_TO_ADDR
// max_y := y + r ;
41774: LD_ADDR_VAR 0 10
41778: PUSH
41779: LD_VAR 0 2
41783: PUSH
41784: LD_VAR 0 3
41788: PLUS
41789: ST_TO_ADDR
// for _x = min_x to max_x do
41790: LD_ADDR_VAR 0 5
41794: PUSH
41795: DOUBLE
41796: LD_VAR 0 8
41800: DEC
41801: ST_TO_ADDR
41802: LD_VAR 0 9
41806: PUSH
41807: FOR_TO
41808: IFFALSE 41909
// for _y = min_y to max_y do
41810: LD_ADDR_VAR 0 6
41814: PUSH
41815: DOUBLE
41816: LD_VAR 0 7
41820: DEC
41821: ST_TO_ADDR
41822: LD_VAR 0 10
41826: PUSH
41827: FOR_TO
41828: IFFALSE 41905
// begin if not ValidHex ( _x , _y ) then
41830: LD_VAR 0 5
41834: PPUSH
41835: LD_VAR 0 6
41839: PPUSH
41840: CALL_OW 488
41844: NOT
41845: IFFALSE 41849
// continue ;
41847: GO 41827
// if GetResourceTypeXY ( _x , _y ) then
41849: LD_VAR 0 5
41853: PPUSH
41854: LD_VAR 0 6
41858: PPUSH
41859: CALL_OW 283
41863: IFFALSE 41903
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41865: LD_ADDR_VAR 0 4
41869: PUSH
41870: LD_VAR 0 4
41874: PPUSH
41875: LD_VAR 0 4
41879: PUSH
41880: LD_INT 1
41882: PLUS
41883: PPUSH
41884: LD_VAR 0 5
41888: PUSH
41889: LD_VAR 0 6
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PPUSH
41898: CALL_OW 1
41902: ST_TO_ADDR
// end ;
41903: GO 41827
41905: POP
41906: POP
41907: GO 41807
41909: POP
41910: POP
// end ;
41911: LD_VAR 0 4
41915: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41916: LD_INT 0
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
// if not units then
41926: LD_VAR 0 1
41930: NOT
41931: IFFALSE 41935
// exit ;
41933: GO 42459
// result := UnitFilter ( units , [ f_ok ] ) ;
41935: LD_ADDR_VAR 0 3
41939: PUSH
41940: LD_VAR 0 1
41944: PPUSH
41945: LD_INT 50
41947: PUSH
41948: EMPTY
41949: LIST
41950: PPUSH
41951: CALL_OW 72
41955: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41956: LD_ADDR_VAR 0 8
41960: PUSH
41961: LD_VAR 0 1
41965: PUSH
41966: LD_INT 1
41968: ARRAY
41969: PPUSH
41970: CALL_OW 255
41974: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41975: LD_ADDR_VAR 0 10
41979: PUSH
41980: LD_INT 29
41982: PUSH
41983: LD_INT 91
41985: PUSH
41986: LD_INT 49
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// if not result then
41994: LD_VAR 0 3
41998: NOT
41999: IFFALSE 42003
// exit ;
42001: GO 42459
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42003: LD_ADDR_VAR 0 5
42007: PUSH
42008: LD_INT 81
42010: PUSH
42011: LD_VAR 0 8
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PPUSH
42020: CALL_OW 69
42024: ST_TO_ADDR
// for i in result do
42025: LD_ADDR_VAR 0 4
42029: PUSH
42030: LD_VAR 0 3
42034: PUSH
42035: FOR_IN
42036: IFFALSE 42457
// begin tag := GetTag ( i ) + 1 ;
42038: LD_ADDR_VAR 0 9
42042: PUSH
42043: LD_VAR 0 4
42047: PPUSH
42048: CALL_OW 110
42052: PUSH
42053: LD_INT 1
42055: PLUS
42056: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42057: LD_ADDR_VAR 0 7
42061: PUSH
42062: LD_VAR 0 4
42066: PPUSH
42067: CALL_OW 250
42071: PPUSH
42072: LD_VAR 0 4
42076: PPUSH
42077: CALL_OW 251
42081: PPUSH
42082: LD_INT 6
42084: PPUSH
42085: CALL 41658 0 3
42089: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42090: LD_VAR 0 4
42094: PPUSH
42095: CALL_OW 247
42099: PUSH
42100: LD_INT 2
42102: EQUAL
42103: PUSH
42104: LD_VAR 0 7
42108: AND
42109: PUSH
42110: LD_VAR 0 4
42114: PPUSH
42115: CALL_OW 264
42119: PUSH
42120: LD_VAR 0 10
42124: IN
42125: NOT
42126: AND
42127: IFFALSE 42166
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42129: LD_VAR 0 4
42133: PPUSH
42134: LD_VAR 0 7
42138: PUSH
42139: LD_INT 1
42141: ARRAY
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 7
42151: PUSH
42152: LD_INT 1
42154: ARRAY
42155: PUSH
42156: LD_INT 2
42158: ARRAY
42159: PPUSH
42160: CALL_OW 116
42164: GO 42455
// if path > tag then
42166: LD_VAR 0 2
42170: PUSH
42171: LD_VAR 0 9
42175: GREATER
42176: IFFALSE 42384
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42178: LD_ADDR_VAR 0 6
42182: PUSH
42183: LD_VAR 0 5
42187: PPUSH
42188: LD_INT 91
42190: PUSH
42191: LD_VAR 0 4
42195: PUSH
42196: LD_INT 8
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: PPUSH
42204: CALL_OW 72
42208: ST_TO_ADDR
// if nearEnemy then
42209: LD_VAR 0 6
42213: IFFALSE 42282
// begin if GetWeapon ( i ) = ru_time_lapser then
42215: LD_VAR 0 4
42219: PPUSH
42220: CALL_OW 264
42224: PUSH
42225: LD_INT 49
42227: EQUAL
42228: IFFALSE 42256
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42230: LD_VAR 0 4
42234: PPUSH
42235: LD_VAR 0 6
42239: PPUSH
42240: LD_VAR 0 4
42244: PPUSH
42245: CALL_OW 74
42249: PPUSH
42250: CALL_OW 112
42254: GO 42280
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42256: LD_VAR 0 4
42260: PPUSH
42261: LD_VAR 0 6
42265: PPUSH
42266: LD_VAR 0 4
42270: PPUSH
42271: CALL_OW 74
42275: PPUSH
42276: CALL 43384 0 2
// end else
42280: GO 42382
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42282: LD_VAR 0 4
42286: PPUSH
42287: LD_VAR 0 2
42291: PUSH
42292: LD_VAR 0 9
42296: ARRAY
42297: PUSH
42298: LD_INT 1
42300: ARRAY
42301: PPUSH
42302: LD_VAR 0 2
42306: PUSH
42307: LD_VAR 0 9
42311: ARRAY
42312: PUSH
42313: LD_INT 2
42315: ARRAY
42316: PPUSH
42317: CALL_OW 297
42321: PUSH
42322: LD_INT 6
42324: GREATER
42325: IFFALSE 42368
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42327: LD_VAR 0 4
42331: PPUSH
42332: LD_VAR 0 2
42336: PUSH
42337: LD_VAR 0 9
42341: ARRAY
42342: PUSH
42343: LD_INT 1
42345: ARRAY
42346: PPUSH
42347: LD_VAR 0 2
42351: PUSH
42352: LD_VAR 0 9
42356: ARRAY
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: PPUSH
42362: CALL_OW 114
42366: GO 42382
// SetTag ( i , tag ) ;
42368: LD_VAR 0 4
42372: PPUSH
42373: LD_VAR 0 9
42377: PPUSH
42378: CALL_OW 109
// end else
42382: GO 42455
// if enemy then
42384: LD_VAR 0 5
42388: IFFALSE 42455
// begin if GetWeapon ( i ) = ru_time_lapser then
42390: LD_VAR 0 4
42394: PPUSH
42395: CALL_OW 264
42399: PUSH
42400: LD_INT 49
42402: EQUAL
42403: IFFALSE 42431
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42405: LD_VAR 0 4
42409: PPUSH
42410: LD_VAR 0 5
42414: PPUSH
42415: LD_VAR 0 4
42419: PPUSH
42420: CALL_OW 74
42424: PPUSH
42425: CALL_OW 112
42429: GO 42455
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42431: LD_VAR 0 4
42435: PPUSH
42436: LD_VAR 0 5
42440: PPUSH
42441: LD_VAR 0 4
42445: PPUSH
42446: CALL_OW 74
42450: PPUSH
42451: CALL 43384 0 2
// end ; end ;
42455: GO 42035
42457: POP
42458: POP
// end ;
42459: LD_VAR 0 3
42463: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42464: LD_INT 0
42466: PPUSH
42467: PPUSH
42468: PPUSH
// if not unit or IsInUnit ( unit ) then
42469: LD_VAR 0 1
42473: NOT
42474: PUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 310
42484: OR
42485: IFFALSE 42489
// exit ;
42487: GO 42580
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42489: LD_ADDR_VAR 0 4
42493: PUSH
42494: LD_VAR 0 1
42498: PPUSH
42499: CALL_OW 250
42503: PPUSH
42504: LD_VAR 0 2
42508: PPUSH
42509: LD_INT 1
42511: PPUSH
42512: CALL_OW 272
42516: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42517: LD_ADDR_VAR 0 5
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 251
42531: PPUSH
42532: LD_VAR 0 2
42536: PPUSH
42537: LD_INT 1
42539: PPUSH
42540: CALL_OW 273
42544: ST_TO_ADDR
// if ValidHex ( x , y ) then
42545: LD_VAR 0 4
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: CALL_OW 488
42559: IFFALSE 42580
// ComTurnXY ( unit , x , y ) ;
42561: LD_VAR 0 1
42565: PPUSH
42566: LD_VAR 0 4
42570: PPUSH
42571: LD_VAR 0 5
42575: PPUSH
42576: CALL_OW 118
// end ;
42580: LD_VAR 0 3
42584: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42585: LD_INT 0
42587: PPUSH
42588: PPUSH
// result := false ;
42589: LD_ADDR_VAR 0 3
42593: PUSH
42594: LD_INT 0
42596: ST_TO_ADDR
// if not units then
42597: LD_VAR 0 2
42601: NOT
42602: IFFALSE 42606
// exit ;
42604: GO 42651
// for i in units do
42606: LD_ADDR_VAR 0 4
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: FOR_IN
42617: IFFALSE 42649
// if See ( side , i ) then
42619: LD_VAR 0 1
42623: PPUSH
42624: LD_VAR 0 4
42628: PPUSH
42629: CALL_OW 292
42633: IFFALSE 42647
// begin result := true ;
42635: LD_ADDR_VAR 0 3
42639: PUSH
42640: LD_INT 1
42642: ST_TO_ADDR
// exit ;
42643: POP
42644: POP
42645: GO 42651
// end ;
42647: GO 42616
42649: POP
42650: POP
// end ;
42651: LD_VAR 0 3
42655: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42656: LD_INT 0
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
// if not unit or not points then
42662: LD_VAR 0 1
42666: NOT
42667: PUSH
42668: LD_VAR 0 2
42672: NOT
42673: OR
42674: IFFALSE 42678
// exit ;
42676: GO 42768
// dist := 99999 ;
42678: LD_ADDR_VAR 0 5
42682: PUSH
42683: LD_INT 99999
42685: ST_TO_ADDR
// for i in points do
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: FOR_IN
42697: IFFALSE 42766
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42699: LD_ADDR_VAR 0 6
42703: PUSH
42704: LD_VAR 0 1
42708: PPUSH
42709: LD_VAR 0 4
42713: PUSH
42714: LD_INT 1
42716: ARRAY
42717: PPUSH
42718: LD_VAR 0 4
42722: PUSH
42723: LD_INT 2
42725: ARRAY
42726: PPUSH
42727: CALL_OW 297
42731: ST_TO_ADDR
// if tmpDist < dist then
42732: LD_VAR 0 6
42736: PUSH
42737: LD_VAR 0 5
42741: LESS
42742: IFFALSE 42764
// begin result := i ;
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_VAR 0 4
42753: ST_TO_ADDR
// dist := tmpDist ;
42754: LD_ADDR_VAR 0 5
42758: PUSH
42759: LD_VAR 0 6
42763: ST_TO_ADDR
// end ; end ;
42764: GO 42696
42766: POP
42767: POP
// end ;
42768: LD_VAR 0 3
42772: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42773: LD_INT 0
42775: PPUSH
// uc_side := side ;
42776: LD_ADDR_OWVAR 20
42780: PUSH
42781: LD_VAR 0 1
42785: ST_TO_ADDR
// uc_nation := 3 ;
42786: LD_ADDR_OWVAR 21
42790: PUSH
42791: LD_INT 3
42793: ST_TO_ADDR
// vc_chassis := 25 ;
42794: LD_ADDR_OWVAR 37
42798: PUSH
42799: LD_INT 25
42801: ST_TO_ADDR
// vc_engine := engine_siberite ;
42802: LD_ADDR_OWVAR 39
42806: PUSH
42807: LD_INT 3
42809: ST_TO_ADDR
// vc_control := control_computer ;
42810: LD_ADDR_OWVAR 38
42814: PUSH
42815: LD_INT 3
42817: ST_TO_ADDR
// vc_weapon := 59 ;
42818: LD_ADDR_OWVAR 40
42822: PUSH
42823: LD_INT 59
42825: ST_TO_ADDR
// result := CreateVehicle ;
42826: LD_ADDR_VAR 0 5
42830: PUSH
42831: CALL_OW 45
42835: ST_TO_ADDR
// SetDir ( result , d ) ;
42836: LD_VAR 0 5
42840: PPUSH
42841: LD_VAR 0 4
42845: PPUSH
42846: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42850: LD_VAR 0 5
42854: PPUSH
42855: LD_VAR 0 2
42859: PPUSH
42860: LD_VAR 0 3
42864: PPUSH
42865: LD_INT 0
42867: PPUSH
42868: CALL_OW 48
// end ;
42872: LD_VAR 0 5
42876: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42877: LD_INT 0
42879: PPUSH
42880: PPUSH
42881: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42882: LD_ADDR_VAR 0 2
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42905: LD_VAR 0 1
42909: NOT
42910: PUSH
42911: LD_VAR 0 1
42915: PPUSH
42916: CALL_OW 264
42920: PUSH
42921: LD_INT 12
42923: PUSH
42924: LD_INT 51
42926: PUSH
42927: LD_INT 32
42929: PUSH
42930: LD_INT 89
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: IN
42939: NOT
42940: OR
42941: IFFALSE 42945
// exit ;
42943: GO 43043
// for i := 1 to 3 do
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: DOUBLE
42951: LD_INT 1
42953: DEC
42954: ST_TO_ADDR
42955: LD_INT 3
42957: PUSH
42958: FOR_TO
42959: IFFALSE 43041
// begin tmp := GetCargo ( cargo , i ) ;
42961: LD_ADDR_VAR 0 4
42965: PUSH
42966: LD_VAR 0 1
42970: PPUSH
42971: LD_VAR 0 3
42975: PPUSH
42976: CALL_OW 289
42980: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42981: LD_ADDR_VAR 0 2
42985: PUSH
42986: LD_VAR 0 2
42990: PPUSH
42991: LD_VAR 0 3
42995: PPUSH
42996: LD_VAR 0 4
43000: PPUSH
43001: CALL_OW 1
43005: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43006: LD_ADDR_VAR 0 2
43010: PUSH
43011: LD_VAR 0 2
43015: PPUSH
43016: LD_INT 4
43018: PPUSH
43019: LD_VAR 0 2
43023: PUSH
43024: LD_INT 4
43026: ARRAY
43027: PUSH
43028: LD_VAR 0 4
43032: PLUS
43033: PPUSH
43034: CALL_OW 1
43038: ST_TO_ADDR
// end ;
43039: GO 42958
43041: POP
43042: POP
// end ;
43043: LD_VAR 0 2
43047: RET
// export function Length ( array ) ; begin
43048: LD_INT 0
43050: PPUSH
// result := array + 0 ;
43051: LD_ADDR_VAR 0 2
43055: PUSH
43056: LD_VAR 0 1
43060: PUSH
43061: LD_INT 0
43063: PLUS
43064: ST_TO_ADDR
// end ;
43065: LD_VAR 0 2
43069: RET
// export function PrepareArray ( array ) ; begin
43070: LD_INT 0
43072: PPUSH
// result := array diff 0 ;
43073: LD_ADDR_VAR 0 2
43077: PUSH
43078: LD_VAR 0 1
43082: PUSH
43083: LD_INT 0
43085: DIFF
43086: ST_TO_ADDR
// if not result [ 1 ] then
43087: LD_VAR 0 2
43091: PUSH
43092: LD_INT 1
43094: ARRAY
43095: NOT
43096: IFFALSE 43116
// result := Delete ( result , 1 ) ;
43098: LD_ADDR_VAR 0 2
43102: PUSH
43103: LD_VAR 0 2
43107: PPUSH
43108: LD_INT 1
43110: PPUSH
43111: CALL_OW 3
43115: ST_TO_ADDR
// end ;
43116: LD_VAR 0 2
43120: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43121: LD_INT 0
43123: PPUSH
43124: PPUSH
43125: PPUSH
43126: PPUSH
// sibRocketRange := 25 ;
43127: LD_ADDR_VAR 0 6
43131: PUSH
43132: LD_INT 25
43134: ST_TO_ADDR
// result := false ;
43135: LD_ADDR_VAR 0 4
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
// for i := 0 to 5 do
43143: LD_ADDR_VAR 0 5
43147: PUSH
43148: DOUBLE
43149: LD_INT 0
43151: DEC
43152: ST_TO_ADDR
43153: LD_INT 5
43155: PUSH
43156: FOR_TO
43157: IFFALSE 43224
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43159: LD_VAR 0 1
43163: PPUSH
43164: LD_VAR 0 5
43168: PPUSH
43169: LD_VAR 0 6
43173: PPUSH
43174: CALL_OW 272
43178: PPUSH
43179: LD_VAR 0 2
43183: PPUSH
43184: LD_VAR 0 5
43188: PPUSH
43189: LD_VAR 0 6
43193: PPUSH
43194: CALL_OW 273
43198: PPUSH
43199: LD_VAR 0 3
43203: PPUSH
43204: CALL_OW 309
43208: IFFALSE 43222
// begin result := true ;
43210: LD_ADDR_VAR 0 4
43214: PUSH
43215: LD_INT 1
43217: ST_TO_ADDR
// exit ;
43218: POP
43219: POP
43220: GO 43226
// end ;
43222: GO 43156
43224: POP
43225: POP
// end ;
43226: LD_VAR 0 4
43230: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43231: LD_INT 0
43233: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43234: LD_VAR 0 1
43238: PPUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: LD_INT 0
43246: PPUSH
43247: LD_INT 0
43249: PPUSH
43250: LD_INT 1
43252: PPUSH
43253: LD_INT 0
43255: PPUSH
43256: CALL_OW 587
// end ;
43260: LD_VAR 0 3
43264: RET
// export function CenterOnNow ( unit ) ; begin
43265: LD_INT 0
43267: PPUSH
// result := IsInUnit ( unit ) ;
43268: LD_ADDR_VAR 0 2
43272: PUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: CALL_OW 310
43282: ST_TO_ADDR
// if not result then
43283: LD_VAR 0 2
43287: NOT
43288: IFFALSE 43300
// result := unit ;
43290: LD_ADDR_VAR 0 2
43294: PUSH
43295: LD_VAR 0 1
43299: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43300: LD_VAR 0 1
43304: PPUSH
43305: CALL_OW 87
// end ;
43309: LD_VAR 0 2
43313: RET
// export function ComMoveHex ( unit , hex ) ; begin
43314: LD_INT 0
43316: PPUSH
// if not hex then
43317: LD_VAR 0 2
43321: NOT
43322: IFFALSE 43326
// exit ;
43324: GO 43379
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43326: LD_VAR 0 2
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PPUSH
43335: LD_VAR 0 2
43339: PUSH
43340: LD_INT 2
43342: ARRAY
43343: PPUSH
43344: CALL_OW 428
43348: IFFALSE 43352
// exit ;
43350: GO 43379
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43352: LD_VAR 0 1
43356: PPUSH
43357: LD_VAR 0 2
43361: PUSH
43362: LD_INT 1
43364: ARRAY
43365: PPUSH
43366: LD_VAR 0 2
43370: PUSH
43371: LD_INT 2
43373: ARRAY
43374: PPUSH
43375: CALL_OW 111
// end ;
43379: LD_VAR 0 3
43383: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43384: LD_INT 0
43386: PPUSH
43387: PPUSH
43388: PPUSH
// if not unit or not enemy then
43389: LD_VAR 0 1
43393: NOT
43394: PUSH
43395: LD_VAR 0 2
43399: NOT
43400: OR
43401: IFFALSE 43405
// exit ;
43403: GO 43529
// x := GetX ( enemy ) ;
43405: LD_ADDR_VAR 0 4
43409: PUSH
43410: LD_VAR 0 2
43414: PPUSH
43415: CALL_OW 250
43419: ST_TO_ADDR
// y := GetY ( enemy ) ;
43420: LD_ADDR_VAR 0 5
43424: PUSH
43425: LD_VAR 0 2
43429: PPUSH
43430: CALL_OW 251
43434: ST_TO_ADDR
// if ValidHex ( x , y ) then
43435: LD_VAR 0 4
43439: PPUSH
43440: LD_VAR 0 5
43444: PPUSH
43445: CALL_OW 488
43449: IFFALSE 43529
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43451: LD_VAR 0 2
43455: PPUSH
43456: CALL_OW 247
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: IN
43471: PUSH
43472: LD_VAR 0 1
43476: PPUSH
43477: CALL_OW 255
43481: PPUSH
43482: LD_VAR 0 2
43486: PPUSH
43487: CALL_OW 292
43491: OR
43492: IFFALSE 43510
// ComAttackUnit ( unit , enemy ) else
43494: LD_VAR 0 1
43498: PPUSH
43499: LD_VAR 0 2
43503: PPUSH
43504: CALL_OW 115
43508: GO 43529
// ComAgressiveMove ( unit , x , y ) ;
43510: LD_VAR 0 1
43514: PPUSH
43515: LD_VAR 0 4
43519: PPUSH
43520: LD_VAR 0 5
43524: PPUSH
43525: CALL_OW 114
// end ;
43529: LD_VAR 0 3
43533: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43534: LD_INT 0
43536: PPUSH
43537: PPUSH
43538: PPUSH
// list := AreaToList ( area , 0 ) ;
43539: LD_ADDR_VAR 0 5
43543: PUSH
43544: LD_VAR 0 1
43548: PPUSH
43549: LD_INT 0
43551: PPUSH
43552: CALL_OW 517
43556: ST_TO_ADDR
// if not list then
43557: LD_VAR 0 5
43561: NOT
43562: IFFALSE 43566
// exit ;
43564: GO 43696
// if all then
43566: LD_VAR 0 2
43570: IFFALSE 43658
// begin for i := 1 to list [ 1 ] do
43572: LD_ADDR_VAR 0 4
43576: PUSH
43577: DOUBLE
43578: LD_INT 1
43580: DEC
43581: ST_TO_ADDR
43582: LD_VAR 0 5
43586: PUSH
43587: LD_INT 1
43589: ARRAY
43590: PUSH
43591: FOR_TO
43592: IFFALSE 43654
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_VAR 0 3
43603: PPUSH
43604: LD_VAR 0 3
43608: PUSH
43609: LD_INT 1
43611: PLUS
43612: PPUSH
43613: LD_VAR 0 5
43617: PUSH
43618: LD_INT 1
43620: ARRAY
43621: PUSH
43622: LD_VAR 0 4
43626: ARRAY
43627: PUSH
43628: LD_VAR 0 5
43632: PUSH
43633: LD_INT 2
43635: ARRAY
43636: PUSH
43637: LD_VAR 0 4
43641: ARRAY
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PPUSH
43647: CALL_OW 1
43651: ST_TO_ADDR
43652: GO 43591
43654: POP
43655: POP
// exit ;
43656: GO 43696
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43658: LD_ADDR_VAR 0 3
43662: PUSH
43663: LD_VAR 0 5
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PUSH
43676: LD_VAR 0 5
43680: PUSH
43681: LD_INT 2
43683: ARRAY
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: ST_TO_ADDR
// end ;
43696: LD_VAR 0 3
43700: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43701: LD_INT 0
43703: PPUSH
43704: PPUSH
// list := AreaToList ( area , 0 ) ;
43705: LD_ADDR_VAR 0 4
43709: PUSH
43710: LD_VAR 0 1
43714: PPUSH
43715: LD_INT 0
43717: PPUSH
43718: CALL_OW 517
43722: ST_TO_ADDR
// if not list then
43723: LD_VAR 0 4
43727: NOT
43728: IFFALSE 43732
// exit ;
43730: GO 43773
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43732: LD_ADDR_VAR 0 3
43736: PUSH
43737: LD_VAR 0 4
43741: PUSH
43742: LD_INT 1
43744: ARRAY
43745: PUSH
43746: LD_INT 1
43748: ARRAY
43749: PUSH
43750: LD_VAR 0 4
43754: PUSH
43755: LD_INT 2
43757: ARRAY
43758: PUSH
43759: LD_INT 1
43761: ARRAY
43762: PUSH
43763: LD_VAR 0 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
// end ;
43773: LD_VAR 0 3
43777: RET
// export function First ( array ) ; begin
43778: LD_INT 0
43780: PPUSH
// if not array then
43781: LD_VAR 0 1
43785: NOT
43786: IFFALSE 43790
// exit ;
43788: GO 43804
// result := array [ 1 ] ;
43790: LD_ADDR_VAR 0 2
43794: PUSH
43795: LD_VAR 0 1
43799: PUSH
43800: LD_INT 1
43802: ARRAY
43803: ST_TO_ADDR
// end ;
43804: LD_VAR 0 2
43808: RET
// export function Last ( array ) ; begin
43809: LD_INT 0
43811: PPUSH
// if not array then
43812: LD_VAR 0 1
43816: NOT
43817: IFFALSE 43821
// exit ;
43819: GO 43837
// result := array [ array ] ;
43821: LD_ADDR_VAR 0 2
43825: PUSH
43826: LD_VAR 0 1
43830: PUSH
43831: LD_VAR 0 1
43835: ARRAY
43836: ST_TO_ADDR
// end ;
43837: LD_VAR 0 2
43841: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43842: LD_INT 0
43844: PPUSH
43845: PPUSH
// result := [ ] ;
43846: LD_ADDR_VAR 0 5
43850: PUSH
43851: EMPTY
43852: ST_TO_ADDR
// if not array then
43853: LD_VAR 0 1
43857: NOT
43858: IFFALSE 43862
// exit ;
43860: GO 43974
// for i := 1 to array do
43862: LD_ADDR_VAR 0 6
43866: PUSH
43867: DOUBLE
43868: LD_INT 1
43870: DEC
43871: ST_TO_ADDR
43872: LD_VAR 0 1
43876: PUSH
43877: FOR_TO
43878: IFFALSE 43972
// if array [ i ] [ index ] = value then
43880: LD_VAR 0 1
43884: PUSH
43885: LD_VAR 0 6
43889: ARRAY
43890: PUSH
43891: LD_VAR 0 2
43895: ARRAY
43896: PUSH
43897: LD_VAR 0 3
43901: EQUAL
43902: IFFALSE 43970
// begin if indexColumn then
43904: LD_VAR 0 4
43908: IFFALSE 43944
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43910: LD_ADDR_VAR 0 5
43914: PUSH
43915: LD_VAR 0 5
43919: PPUSH
43920: LD_VAR 0 1
43924: PUSH
43925: LD_VAR 0 6
43929: ARRAY
43930: PUSH
43931: LD_VAR 0 4
43935: ARRAY
43936: PPUSH
43937: CALL 39312 0 2
43941: ST_TO_ADDR
43942: GO 43970
// result := Join ( result , array [ i ] ) ;
43944: LD_ADDR_VAR 0 5
43948: PUSH
43949: LD_VAR 0 5
43953: PPUSH
43954: LD_VAR 0 1
43958: PUSH
43959: LD_VAR 0 6
43963: ARRAY
43964: PPUSH
43965: CALL 39312 0 2
43969: ST_TO_ADDR
// end ;
43970: GO 43877
43972: POP
43973: POP
// end ;
43974: LD_VAR 0 5
43978: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43979: LD_INT 0
43981: PPUSH
43982: PPUSH
43983: PPUSH
// if btype = b_depot then
43984: LD_VAR 0 2
43988: PUSH
43989: LD_INT 0
43991: EQUAL
43992: IFFALSE 44004
// begin result := true ;
43994: LD_ADDR_VAR 0 3
43998: PUSH
43999: LD_INT 1
44001: ST_TO_ADDR
// exit ;
44002: GO 44120
// end ; pom := GetBase ( depot ) ;
44004: LD_ADDR_VAR 0 4
44008: PUSH
44009: LD_VAR 0 1
44013: PPUSH
44014: CALL_OW 274
44018: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44019: LD_ADDR_VAR 0 5
44023: PUSH
44024: LD_VAR 0 2
44028: PPUSH
44029: LD_VAR 0 1
44033: PPUSH
44034: CALL_OW 248
44038: PPUSH
44039: CALL_OW 450
44043: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44044: LD_ADDR_VAR 0 3
44048: PUSH
44049: LD_VAR 0 4
44053: PPUSH
44054: LD_INT 1
44056: PPUSH
44057: CALL_OW 275
44061: PUSH
44062: LD_VAR 0 5
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: GREATEREQUAL
44071: PUSH
44072: LD_VAR 0 4
44076: PPUSH
44077: LD_INT 2
44079: PPUSH
44080: CALL_OW 275
44084: PUSH
44085: LD_VAR 0 5
44089: PUSH
44090: LD_INT 2
44092: ARRAY
44093: GREATEREQUAL
44094: AND
44095: PUSH
44096: LD_VAR 0 4
44100: PPUSH
44101: LD_INT 3
44103: PPUSH
44104: CALL_OW 275
44108: PUSH
44109: LD_VAR 0 5
44113: PUSH
44114: LD_INT 3
44116: ARRAY
44117: GREATEREQUAL
44118: AND
44119: ST_TO_ADDR
// end ;
44120: LD_VAR 0 3
44124: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44125: LD_INT 0
44127: PPUSH
// if not vehicles or not parkingPoint then
44128: LD_VAR 0 1
44132: NOT
44133: PUSH
44134: LD_VAR 0 2
44138: NOT
44139: OR
44140: IFFALSE 44144
// exit ;
44142: GO 44242
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44144: LD_ADDR_VAR 0 1
44148: PUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: LD_INT 50
44156: PUSH
44157: EMPTY
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 92
44165: PUSH
44166: LD_VAR 0 2
44170: PUSH
44171: LD_INT 1
44173: ARRAY
44174: PUSH
44175: LD_VAR 0 2
44179: PUSH
44180: LD_INT 2
44182: ARRAY
44183: PUSH
44184: LD_INT 8
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PPUSH
44201: CALL_OW 72
44205: ST_TO_ADDR
// if not vehicles then
44206: LD_VAR 0 1
44210: NOT
44211: IFFALSE 44215
// exit ;
44213: GO 44242
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44215: LD_VAR 0 1
44219: PPUSH
44220: LD_VAR 0 2
44224: PUSH
44225: LD_INT 1
44227: ARRAY
44228: PPUSH
44229: LD_VAR 0 2
44233: PUSH
44234: LD_INT 2
44236: ARRAY
44237: PPUSH
44238: CALL_OW 111
// end ;
44242: LD_VAR 0 3
44246: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44247: LD_INT 0
44249: PPUSH
44250: PPUSH
44251: PPUSH
// if not side or not area then
44252: LD_VAR 0 1
44256: NOT
44257: PUSH
44258: LD_VAR 0 2
44262: NOT
44263: OR
44264: IFFALSE 44268
// exit ;
44266: GO 44387
// tmp := AreaToList ( area , 0 ) ;
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: LD_VAR 0 2
44277: PPUSH
44278: LD_INT 0
44280: PPUSH
44281: CALL_OW 517
44285: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44286: LD_ADDR_VAR 0 4
44290: PUSH
44291: DOUBLE
44292: LD_INT 1
44294: DEC
44295: ST_TO_ADDR
44296: LD_VAR 0 5
44300: PUSH
44301: LD_INT 1
44303: ARRAY
44304: PUSH
44305: FOR_TO
44306: IFFALSE 44385
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44308: LD_VAR 0 5
44312: PUSH
44313: LD_INT 1
44315: ARRAY
44316: PUSH
44317: LD_VAR 0 4
44321: ARRAY
44322: PPUSH
44323: LD_VAR 0 5
44327: PUSH
44328: LD_INT 2
44330: ARRAY
44331: PUSH
44332: LD_VAR 0 4
44336: ARRAY
44337: PPUSH
44338: CALL_OW 351
44342: IFFALSE 44383
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44344: LD_VAR 0 5
44348: PUSH
44349: LD_INT 1
44351: ARRAY
44352: PUSH
44353: LD_VAR 0 4
44357: ARRAY
44358: PPUSH
44359: LD_VAR 0 5
44363: PUSH
44364: LD_INT 2
44366: ARRAY
44367: PUSH
44368: LD_VAR 0 4
44372: ARRAY
44373: PPUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 244
// end ;
44383: GO 44305
44385: POP
44386: POP
// end ;
44387: LD_VAR 0 3
44391: RET
