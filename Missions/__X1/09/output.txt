// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1587 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1587 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1587 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1587 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1587 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1587 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1587 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1587 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1587 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1587 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1587 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1587 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1587 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// music_nat := 2 ;
 635: LD_ADDR_OWVAR 71
 639: PUSH
 640: LD_INT 2
 642: ST_TO_ADDR
// Video ( true ) ;
 643: LD_INT 1
 645: PPUSH
 646: CALL 39248 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 650: LD_EXP 3
 654: PPUSH
 655: LD_INT 51
 657: PPUSH
 658: LD_INT 23
 660: PPUSH
 661: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 665: LD_OWVAR 3
 669: PUSH
 670: LD_EXP 3
 674: DIFF
 675: PPUSH
 676: LD_INT 53
 678: PPUSH
 679: LD_INT 27
 681: PPUSH
 682: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 686: LD_INT 52
 688: PPUSH
 689: LD_INT 25
 691: PPUSH
 692: CALL_OW 86
// wait ( 0 0$2 ) ;
 696: LD_INT 70
 698: PPUSH
 699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 703: LD_INT 35
 705: PPUSH
 706: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 51
 717: PPUSH
 718: LD_INT 23
 720: PPUSH
 721: CALL_OW 307
 725: PUSH
 726: LD_EXP 3
 730: PPUSH
 731: CALL_OW 314
 735: NOT
 736: OR
 737: IFFALSE 703
// ComTurnXY ( Heike , 53 , 26 ) ;
 739: LD_EXP 3
 743: PPUSH
 744: LD_INT 53
 746: PPUSH
 747: LD_INT 26
 749: PPUSH
 750: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 754: LD_INT 10
 756: PPUSH
 757: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_STRING DH-Intro-1
 768: PPUSH
 769: CALL_OW 88
// ComHold ( all_units ) ;
 773: LD_OWVAR 3
 777: PPUSH
 778: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 782: LD_OWVAR 3
 786: PUSH
 787: LD_EXP 3
 791: DIFF
 792: PPUSH
 793: LD_EXP 3
 797: PPUSH
 798: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 802: LD_EXP 17
 806: PUSH
 807: LD_STRING 08_DealWithDoug
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 30
 817: AND
 818: IFFALSE 930
// begin ComTurnUnit ( Heike , Doug ) ;
 820: LD_EXP 3
 824: PPUSH
 825: LD_EXP 17
 829: PPUSH
 830: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 834: LD_EXP 17
 838: PPUSH
 839: LD_STRING DCa-Intro-a-2
 841: PPUSH
 842: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_STRING DH-Intro-a-3
 853: PPUSH
 854: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 858: LD_EXP 17
 862: PPUSH
 863: LD_STRING DCa-Intro-a-4
 865: PPUSH
 866: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 870: LD_EXP 3
 874: PPUSH
 875: LD_STRING DH-Intro-a-5
 877: PPUSH
 878: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 882: LD_EXP 17
 886: PPUSH
 887: LD_STRING DCa-Intro-a-6
 889: PPUSH
 890: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 894: LD_EXP 16
 898: PUSH
 899: LD_EXP 17
 903: ADD
 904: PUSH
 905: LD_EXP 15
 909: ADD
 910: PPUSH
 911: LD_INT 5
 913: PPUSH
 914: LD_INT 7
 916: PPUSH
 917: CALL_OW 111
// wait ( 0 0$01 ) ;
 921: LD_INT 35
 923: PPUSH
 924: CALL_OW 67
// end else
 928: GO 1032
// if Harris then
 930: LD_EXP 16
 934: IFFALSE 1032
// begin ComTurnUnit ( Heike , Harris ) ;
 936: LD_EXP 3
 940: PPUSH
 941: LD_EXP 16
 945: PPUSH
 946: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 950: LD_EXP 16
 954: PPUSH
 955: LD_STRING DJ-Intro-2
 957: PPUSH
 958: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING DH-Intro-3
 969: PPUSH
 970: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 974: LD_EXP 3
 978: PPUSH
 979: LD_STRING DH-Intro-4
 981: PPUSH
 982: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 986: LD_EXP 16
 990: PPUSH
 991: LD_STRING DJ-Intro-5
 993: PPUSH
 994: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 998: LD_EXP 16
1002: PUSH
1003: LD_EXP 17
1007: ADD
1008: PUSH
1009: LD_EXP 15
1013: ADD
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: LD_INT 7
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$01 ) ;
1025: LD_INT 35
1027: PPUSH
1028: CALL_OW 67
// end ; if Givi then
1032: LD_EXP 4
1036: IFFALSE 1131
// begin ComMoveUnit ( Givi , Heike ) ;
1038: LD_EXP 4
1042: PPUSH
1043: LD_EXP 3
1047: PPUSH
1048: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
1052: LD_INT 35
1054: PPUSH
1055: CALL_OW 67
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_EXP 4
1068: PPUSH
1069: CALL_OW 296
1073: PUSH
1074: LD_INT 4
1076: LESS
1077: PUSH
1078: LD_EXP 4
1082: PPUSH
1083: CALL_OW 314
1087: NOT
1088: OR
1089: IFFALSE 1052
// ComTurnUnit ( Givi , Heike ) ;
1091: LD_EXP 4
1095: PPUSH
1096: LD_EXP 3
1100: PPUSH
1101: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1105: LD_EXP 3
1109: PPUSH
1110: LD_EXP 4
1114: PPUSH
1115: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1119: LD_EXP 4
1123: PPUSH
1124: LD_STRING DG-Intro-7
1126: PPUSH
1127: CALL_OW 88
// end ; if not Givi then
1131: LD_EXP 4
1135: NOT
1136: IFFALSE 1153
// ComTurnXY ( Heike , 52 , 25 ) ;
1138: LD_EXP 3
1142: PPUSH
1143: LD_INT 52
1145: PPUSH
1146: LD_INT 25
1148: PPUSH
1149: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1153: LD_EXP 3
1157: PPUSH
1158: LD_STRING DH-Intro-7
1160: PPUSH
1161: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1165: LD_INT 22
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PPUSH
1175: CALL_OW 69
1179: PPUSH
1180: LD_INT 48
1182: PPUSH
1183: LD_INT 4
1185: PPUSH
1186: CALL_OW 111
// wait ( 0 0$3 ) ;
1190: LD_INT 105
1192: PPUSH
1193: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1197: LD_INT 74
1199: PPUSH
1200: LD_INT 79
1202: PPUSH
1203: LD_INT 2
1205: PPUSH
1206: LD_INT 16
1208: NEG
1209: PPUSH
1210: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1214: LD_INT 74
1216: PPUSH
1217: LD_INT 79
1219: PPUSH
1220: CALL_OW 84
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := nation_russian ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1240: LD_INT 22
1242: PPUSH
1243: LD_INT 3
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 100
1254: PPUSH
1255: CALL 6427 0 5
// un := CreateVehicle ;
1259: LD_ADDR_VAR 0 3
1263: PUSH
1264: CALL_OW 45
1268: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 76
1276: PPUSH
1277: LD_INT 87
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 8
1292: PPUSH
1293: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1297: CALL_OW 44
1301: PPUSH
1302: LD_VAR 0 3
1306: PPUSH
1307: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 67
1318: PPUSH
1319: LD_INT 56
1321: PPUSH
1322: CALL_OW 111
// wait ( 0 0$1 ) ;
1326: LD_INT 35
1328: PPUSH
1329: CALL_OW 67
// for i := 1 to 3 do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_INT 3
1345: PUSH
1346: FOR_TO
1347: IFFALSE 1407
// begin PrepareSoldier ( false , 8 ) ;
1349: LD_INT 0
1351: PPUSH
1352: LD_INT 8
1354: PPUSH
1355: CALL_OW 381
// un := CreateHuman ;
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: CALL_OW 44
1368: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1369: LD_VAR 0 3
1373: PPUSH
1374: LD_INT 76
1376: PPUSH
1377: LD_INT 87
1379: PPUSH
1380: LD_INT 2
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 67
1397: PPUSH
1398: LD_INT 56
1400: PPUSH
1401: CALL_OW 111
// end ;
1405: GO 1346
1407: POP
1408: POP
// wait ( 0 0$2 ) ;
1409: LD_INT 70
1411: PPUSH
1412: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1416: LD_INT 1
1418: PPUSH
1419: LD_STRING %_cont
1421: PPUSH
1422: CALL_OW 340
// Video ( false ) ;
1426: LD_INT 0
1428: PPUSH
1429: CALL 39248 0 1
// end ;
1433: LD_VAR 0 1
1437: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1438: LD_INT 5
1440: PPUSH
1441: LD_INT 22
1443: PUSH
1444: LD_INT 4
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PPUSH
1451: CALL_OW 70
1455: IFFALSE 1503
1457: GO 1459
1459: DISABLE
1460: LD_INT 0
1462: PPUSH
// begin enable ;
1463: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1464: LD_ADDR_VAR 0 1
1468: PUSH
1469: LD_INT 5
1471: PPUSH
1472: LD_INT 22
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PPUSH
1482: CALL_OW 70
1486: PUSH
1487: FOR_IN
1488: IFFALSE 1501
// RemoveUnit ( i ) ;
1490: LD_VAR 0 1
1494: PPUSH
1495: CALL_OW 64
1499: GO 1487
1501: POP
1502: POP
// end ;
1503: PPOPN 1
1505: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1506: LD_INT 6
1508: PPUSH
1509: LD_INT 22
1511: PUSH
1512: LD_INT 2
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 70
1523: IFFALSE 1571
1525: GO 1527
1527: DISABLE
1528: LD_INT 0
1530: PPUSH
// begin enable ;
1531: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1532: LD_ADDR_VAR 0 1
1536: PUSH
1537: LD_INT 6
1539: PPUSH
1540: LD_INT 22
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 70
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1569
// RemoveUnit ( i ) ;
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 64
1567: GO 1555
1569: POP
1570: POP
// end ; end_of_file
1571: PPOPN 1
1573: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1574: LD_INT 1
1576: PPUSH
1577: LD_STRING %_cont
1579: PPUSH
1580: CALL_OW 340
// end ; end_of_file
1584: PPOPN 1
1586: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
// if exist_mode then
1591: LD_VAR 0 2
1595: IFFALSE 1620
// unit := CreateCharacter ( prefix & ident ) else
1597: LD_ADDR_VAR 0 5
1601: PUSH
1602: LD_VAR 0 3
1606: PUSH
1607: LD_VAR 0 1
1611: STR
1612: PPUSH
1613: CALL_OW 34
1617: ST_TO_ADDR
1618: GO 1635
// unit := NewCharacter ( ident ) ;
1620: LD_ADDR_VAR 0 5
1624: PUSH
1625: LD_VAR 0 1
1629: PPUSH
1630: CALL_OW 25
1634: ST_TO_ADDR
// result := unit ;
1635: LD_ADDR_VAR 0 4
1639: PUSH
1640: LD_VAR 0 5
1644: ST_TO_ADDR
// end ;
1645: LD_VAR 0 4
1649: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1650: LD_INT 0
1652: PPUSH
1653: PPUSH
// if not side or not nation then
1654: LD_VAR 0 1
1658: NOT
1659: PUSH
1660: LD_VAR 0 2
1664: NOT
1665: OR
1666: IFFALSE 1670
// exit ;
1668: GO 2438
// case nation of nation_american :
1670: LD_VAR 0 2
1674: PUSH
1675: LD_INT 1
1677: DOUBLE
1678: EQUAL
1679: IFTRUE 1683
1681: GO 1897
1683: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1684: LD_ADDR_VAR 0 4
1688: PUSH
1689: LD_INT 35
1691: PUSH
1692: LD_INT 45
1694: PUSH
1695: LD_INT 46
1697: PUSH
1698: LD_INT 47
1700: PUSH
1701: LD_INT 82
1703: PUSH
1704: LD_INT 83
1706: PUSH
1707: LD_INT 84
1709: PUSH
1710: LD_INT 85
1712: PUSH
1713: LD_INT 86
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: LD_INT 6
1724: PUSH
1725: LD_INT 15
1727: PUSH
1728: LD_INT 16
1730: PUSH
1731: LD_INT 7
1733: PUSH
1734: LD_INT 12
1736: PUSH
1737: LD_INT 13
1739: PUSH
1740: LD_INT 10
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 20
1748: PUSH
1749: LD_INT 21
1751: PUSH
1752: LD_INT 22
1754: PUSH
1755: LD_INT 25
1757: PUSH
1758: LD_INT 32
1760: PUSH
1761: LD_INT 27
1763: PUSH
1764: LD_INT 36
1766: PUSH
1767: LD_INT 69
1769: PUSH
1770: LD_INT 39
1772: PUSH
1773: LD_INT 34
1775: PUSH
1776: LD_INT 40
1778: PUSH
1779: LD_INT 48
1781: PUSH
1782: LD_INT 49
1784: PUSH
1785: LD_INT 50
1787: PUSH
1788: LD_INT 51
1790: PUSH
1791: LD_INT 52
1793: PUSH
1794: LD_INT 53
1796: PUSH
1797: LD_INT 54
1799: PUSH
1800: LD_INT 55
1802: PUSH
1803: LD_INT 56
1805: PUSH
1806: LD_INT 57
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 59
1814: PUSH
1815: LD_INT 60
1817: PUSH
1818: LD_INT 61
1820: PUSH
1821: LD_INT 62
1823: PUSH
1824: LD_INT 80
1826: PUSH
1827: LD_INT 82
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 84
1835: PUSH
1836: LD_INT 85
1838: PUSH
1839: LD_INT 86
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: ST_TO_ADDR
1895: GO 2362
1897: LD_INT 2
1899: DOUBLE
1900: EQUAL
1901: IFTRUE 1905
1903: GO 2131
1905: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: LD_INT 35
1913: PUSH
1914: LD_INT 45
1916: PUSH
1917: LD_INT 46
1919: PUSH
1920: LD_INT 47
1922: PUSH
1923: LD_INT 82
1925: PUSH
1926: LD_INT 83
1928: PUSH
1929: LD_INT 84
1931: PUSH
1932: LD_INT 85
1934: PUSH
1935: LD_INT 87
1937: PUSH
1938: LD_INT 70
1940: PUSH
1941: LD_INT 1
1943: PUSH
1944: LD_INT 11
1946: PUSH
1947: LD_INT 3
1949: PUSH
1950: LD_INT 4
1952: PUSH
1953: LD_INT 5
1955: PUSH
1956: LD_INT 6
1958: PUSH
1959: LD_INT 15
1961: PUSH
1962: LD_INT 18
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: LD_INT 17
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 22
1982: PUSH
1983: LD_INT 72
1985: PUSH
1986: LD_INT 26
1988: PUSH
1989: LD_INT 69
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 40
1997: PUSH
1998: LD_INT 41
2000: PUSH
2001: LD_INT 42
2003: PUSH
2004: LD_INT 43
2006: PUSH
2007: LD_INT 48
2009: PUSH
2010: LD_INT 49
2012: PUSH
2013: LD_INT 50
2015: PUSH
2016: LD_INT 51
2018: PUSH
2019: LD_INT 52
2021: PUSH
2022: LD_INT 53
2024: PUSH
2025: LD_INT 54
2027: PUSH
2028: LD_INT 55
2030: PUSH
2031: LD_INT 56
2033: PUSH
2034: LD_INT 60
2036: PUSH
2037: LD_INT 61
2039: PUSH
2040: LD_INT 62
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 67
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: LD_INT 81
2054: PUSH
2055: LD_INT 82
2057: PUSH
2058: LD_INT 83
2060: PUSH
2061: LD_INT 84
2063: PUSH
2064: LD_INT 85
2066: PUSH
2067: LD_INT 87
2069: PUSH
2070: LD_INT 88
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
2129: GO 2362
2131: LD_INT 3
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2361
2139: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: LD_INT 46
2147: PUSH
2148: LD_INT 47
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: LD_INT 82
2159: PUSH
2160: LD_INT 83
2162: PUSH
2163: LD_INT 84
2165: PUSH
2166: LD_INT 85
2168: PUSH
2169: LD_INT 86
2171: PUSH
2172: LD_INT 11
2174: PUSH
2175: LD_INT 9
2177: PUSH
2178: LD_INT 20
2180: PUSH
2181: LD_INT 19
2183: PUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 24
2189: PUSH
2190: LD_INT 22
2192: PUSH
2193: LD_INT 25
2195: PUSH
2196: LD_INT 28
2198: PUSH
2199: LD_INT 29
2201: PUSH
2202: LD_INT 30
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 37
2210: PUSH
2211: LD_INT 38
2213: PUSH
2214: LD_INT 32
2216: PUSH
2217: LD_INT 27
2219: PUSH
2220: LD_INT 33
2222: PUSH
2223: LD_INT 69
2225: PUSH
2226: LD_INT 39
2228: PUSH
2229: LD_INT 34
2231: PUSH
2232: LD_INT 40
2234: PUSH
2235: LD_INT 71
2237: PUSH
2238: LD_INT 23
2240: PUSH
2241: LD_INT 44
2243: PUSH
2244: LD_INT 48
2246: PUSH
2247: LD_INT 49
2249: PUSH
2250: LD_INT 50
2252: PUSH
2253: LD_INT 51
2255: PUSH
2256: LD_INT 52
2258: PUSH
2259: LD_INT 53
2261: PUSH
2262: LD_INT 54
2264: PUSH
2265: LD_INT 55
2267: PUSH
2268: LD_INT 56
2270: PUSH
2271: LD_INT 57
2273: PUSH
2274: LD_INT 58
2276: PUSH
2277: LD_INT 59
2279: PUSH
2280: LD_INT 63
2282: PUSH
2283: LD_INT 64
2285: PUSH
2286: LD_INT 65
2288: PUSH
2289: LD_INT 82
2291: PUSH
2292: LD_INT 83
2294: PUSH
2295: LD_INT 84
2297: PUSH
2298: LD_INT 85
2300: PUSH
2301: LD_INT 86
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
2359: GO 2362
2361: POP
// if state > - 1 and state < 3 then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: NEG
2370: GREATER
2371: PUSH
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 3
2379: LESS
2380: AND
2381: IFFALSE 2438
// for i in result do
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: FOR_IN
2394: IFFALSE 2436
// if GetTech ( i , side ) <> state then
2396: LD_VAR 0 5
2400: PPUSH
2401: LD_VAR 0 1
2405: PPUSH
2406: CALL_OW 321
2410: PUSH
2411: LD_VAR 0 3
2415: NONEQUAL
2416: IFFALSE 2434
// result := result diff i ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_VAR 0 4
2427: PUSH
2428: LD_VAR 0 5
2432: DIFF
2433: ST_TO_ADDR
2434: GO 2393
2436: POP
2437: POP
// end ;
2438: LD_VAR 0 4
2442: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2443: LD_INT 0
2445: PPUSH
2446: PPUSH
2447: PPUSH
// result := true ;
2448: LD_ADDR_VAR 0 3
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2456: LD_ADDR_VAR 0 5
2460: PUSH
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 480
2470: ST_TO_ADDR
// if not tmp then
2471: LD_VAR 0 5
2475: NOT
2476: IFFALSE 2480
// exit ;
2478: GO 2529
// for i in tmp do
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 5
2489: PUSH
2490: FOR_IN
2491: IFFALSE 2527
// if GetTech ( i , side ) <> state_researched then
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 321
2507: PUSH
2508: LD_INT 2
2510: NONEQUAL
2511: IFFALSE 2525
// begin result := false ;
2513: LD_ADDR_VAR 0 3
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
// exit ;
2521: POP
2522: POP
2523: GO 2529
// end ;
2525: GO 2490
2527: POP
2528: POP
// end ;
2529: LD_VAR 0 3
2533: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2549: LD_VAR 0 1
2553: NOT
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 257
2564: PUSH
2565: LD_INT 9
2567: NONEQUAL
2568: OR
2569: IFFALSE 2573
// exit ;
2571: GO 3146
// side := GetSide ( unit ) ;
2573: LD_ADDR_VAR 0 9
2577: PUSH
2578: LD_VAR 0 1
2582: PPUSH
2583: CALL_OW 255
2587: ST_TO_ADDR
// tech_space := tech_spacanom ;
2588: LD_ADDR_VAR 0 12
2592: PUSH
2593: LD_INT 29
2595: ST_TO_ADDR
// tech_time := tech_taurad ;
2596: LD_ADDR_VAR 0 13
2600: PUSH
2601: LD_INT 28
2603: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2604: LD_ADDR_VAR 0 11
2608: PUSH
2609: LD_VAR 0 1
2613: PPUSH
2614: CALL_OW 310
2618: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2619: LD_VAR 0 11
2623: PPUSH
2624: CALL_OW 247
2628: PUSH
2629: LD_INT 2
2631: EQUAL
2632: IFFALSE 2636
// exit ;
2634: GO 3146
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2636: LD_ADDR_VAR 0 8
2640: PUSH
2641: LD_INT 81
2643: PUSH
2644: LD_VAR 0 9
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 21
2658: PUSH
2659: LD_INT 3
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: ST_TO_ADDR
// if not tmp then
2679: LD_VAR 0 8
2683: NOT
2684: IFFALSE 2688
// exit ;
2686: GO 3146
// if in_unit then
2688: LD_VAR 0 11
2692: IFFALSE 2716
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2694: LD_ADDR_VAR 0 10
2698: PUSH
2699: LD_VAR 0 8
2703: PPUSH
2704: LD_VAR 0 11
2708: PPUSH
2709: CALL_OW 74
2713: ST_TO_ADDR
2714: GO 2736
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2716: LD_ADDR_VAR 0 10
2720: PUSH
2721: LD_VAR 0 8
2725: PPUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 74
2735: ST_TO_ADDR
// if not enemy then
2736: LD_VAR 0 10
2740: NOT
2741: IFFALSE 2745
// exit ;
2743: GO 3146
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2745: LD_VAR 0 11
2749: PUSH
2750: LD_VAR 0 11
2754: PPUSH
2755: LD_VAR 0 10
2759: PPUSH
2760: CALL_OW 296
2764: PUSH
2765: LD_INT 13
2767: GREATER
2768: AND
2769: PUSH
2770: LD_VAR 0 1
2774: PPUSH
2775: LD_VAR 0 10
2779: PPUSH
2780: CALL_OW 296
2784: PUSH
2785: LD_INT 12
2787: GREATER
2788: OR
2789: IFFALSE 2793
// exit ;
2791: GO 3146
// missile := [ 1 ] ;
2793: LD_ADDR_VAR 0 14
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2804: LD_VAR 0 9
2808: PPUSH
2809: LD_VAR 0 12
2813: PPUSH
2814: CALL_OW 325
2818: IFFALSE 2847
// missile := Replace ( missile , missile + 1 , 2 ) ;
2820: LD_ADDR_VAR 0 14
2824: PUSH
2825: LD_VAR 0 14
2829: PPUSH
2830: LD_VAR 0 14
2834: PUSH
2835: LD_INT 1
2837: PLUS
2838: PPUSH
2839: LD_INT 2
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2847: LD_VAR 0 9
2851: PPUSH
2852: LD_VAR 0 13
2856: PPUSH
2857: CALL_OW 325
2861: PUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 255
2871: PPUSH
2872: LD_VAR 0 13
2876: PPUSH
2877: CALL_OW 325
2881: NOT
2882: AND
2883: IFFALSE 2912
// missile := Replace ( missile , missile + 1 , 3 ) ;
2885: LD_ADDR_VAR 0 14
2889: PUSH
2890: LD_VAR 0 14
2894: PPUSH
2895: LD_VAR 0 14
2899: PUSH
2900: LD_INT 1
2902: PLUS
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: CALL_OW 1
2911: ST_TO_ADDR
// if missile < 2 then
2912: LD_VAR 0 14
2916: PUSH
2917: LD_INT 2
2919: LESS
2920: IFFALSE 2924
// exit ;
2922: GO 3146
// x := GetX ( enemy ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_VAR 0 10
2933: PPUSH
2934: CALL_OW 250
2938: ST_TO_ADDR
// y := GetY ( enemy ) ;
2939: LD_ADDR_VAR 0 5
2943: PUSH
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 251
2953: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2954: LD_ADDR_VAR 0 6
2958: PUSH
2959: LD_VAR 0 4
2963: PUSH
2964: LD_INT 1
2966: NEG
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 12
2975: PLUS
2976: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2977: LD_ADDR_VAR 0 7
2981: PUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 1
2989: NEG
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: CALL_OW 12
2998: PLUS
2999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3000: LD_VAR 0 6
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: CALL_OW 488
3014: NOT
3015: IFFALSE 3037
// begin _x := x ;
3017: LD_ADDR_VAR 0 6
3021: PUSH
3022: LD_VAR 0 4
3026: ST_TO_ADDR
// _y := y ;
3027: LD_ADDR_VAR 0 7
3031: PUSH
3032: LD_VAR 0 5
3036: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 1
3044: PPUSH
3045: LD_VAR 0 14
3049: PPUSH
3050: CALL_OW 12
3054: ST_TO_ADDR
// case i of 1 :
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: DOUBLE
3063: EQUAL
3064: IFTRUE 3068
3066: GO 3085
3068: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3069: LD_VAR 0 1
3073: PPUSH
3074: LD_VAR 0 10
3078: PPUSH
3079: CALL_OW 115
3083: GO 3146
3085: LD_INT 2
3087: DOUBLE
3088: EQUAL
3089: IFTRUE 3093
3091: GO 3115
3093: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_VAR 0 6
3103: PPUSH
3104: LD_VAR 0 7
3108: PPUSH
3109: CALL_OW 153
3113: GO 3146
3115: LD_INT 3
3117: DOUBLE
3118: EQUAL
3119: IFTRUE 3123
3121: GO 3145
3123: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 6
3133: PPUSH
3134: LD_VAR 0 7
3138: PPUSH
3139: CALL_OW 154
3143: GO 3146
3145: POP
// end ;
3146: LD_VAR 0 2
3150: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
// if not unit or not building then
3159: LD_VAR 0 1
3163: NOT
3164: PUSH
3165: LD_VAR 0 2
3169: NOT
3170: OR
3171: IFFALSE 3175
// exit ;
3173: GO 3333
// x := GetX ( building ) ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_VAR 0 2
3184: PPUSH
3185: CALL_OW 250
3189: ST_TO_ADDR
// y := GetY ( building ) ;
3190: LD_ADDR_VAR 0 6
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 251
3204: ST_TO_ADDR
// for i = 0 to 5 do
3205: LD_ADDR_VAR 0 4
3209: PUSH
3210: DOUBLE
3211: LD_INT 0
3213: DEC
3214: ST_TO_ADDR
3215: LD_INT 5
3217: PUSH
3218: FOR_TO
3219: IFFALSE 3331
// begin _x := ShiftX ( x , i , 3 ) ;
3221: LD_ADDR_VAR 0 7
3225: PUSH
3226: LD_VAR 0 5
3230: PPUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: CALL_OW 272
3243: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3244: LD_ADDR_VAR 0 8
3248: PUSH
3249: LD_VAR 0 6
3253: PPUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: CALL_OW 273
3266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3267: LD_VAR 0 7
3271: PPUSH
3272: LD_VAR 0 8
3276: PPUSH
3277: CALL_OW 488
3281: NOT
3282: IFFALSE 3286
// continue ;
3284: GO 3218
// if HexInfo ( _x , _y ) = 0 then
3286: LD_VAR 0 7
3290: PPUSH
3291: LD_VAR 0 8
3295: PPUSH
3296: CALL_OW 428
3300: PUSH
3301: LD_INT 0
3303: EQUAL
3304: IFFALSE 3329
// begin ComMoveXY ( unit , _x , _y ) ;
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 7
3315: PPUSH
3316: LD_VAR 0 8
3320: PPUSH
3321: CALL_OW 111
// exit ;
3325: POP
3326: POP
3327: GO 3333
// end ; end ;
3329: GO 3218
3331: POP
3332: POP
// end ;
3333: LD_VAR 0 3
3337: RET
// export function ScanBase ( side , base_area ) ; begin
3338: LD_INT 0
3340: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_INT 81
3353: PUSH
3354: LD_VAR 0 1
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 70
3367: ST_TO_ADDR
// end ;
3368: LD_VAR 0 3
3372: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
3377: PPUSH
3378: PPUSH
// result := false ;
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// side := GetSide ( unit ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 1
3396: PPUSH
3397: CALL_OW 255
3401: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3402: LD_ADDR_VAR 0 4
3406: PUSH
3407: LD_VAR 0 1
3411: PPUSH
3412: CALL_OW 248
3416: ST_TO_ADDR
// case nat of 1 :
3417: LD_VAR 0 4
3421: PUSH
3422: LD_INT 1
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3441
3430: POP
// tech := tech_lassight ; 2 :
3431: LD_ADDR_VAR 0 5
3435: PUSH
3436: LD_INT 12
3438: ST_TO_ADDR
3439: GO 3480
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3460
3449: POP
// tech := tech_mortar ; 3 :
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_INT 41
3457: ST_TO_ADDR
3458: GO 3480
3460: LD_INT 3
3462: DOUBLE
3463: EQUAL
3464: IFTRUE 3468
3466: GO 3479
3468: POP
// tech := tech_bazooka ; end ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_INT 44
3476: ST_TO_ADDR
3477: GO 3480
3479: POP
// if Researched ( side , tech ) then
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_VAR 0 5
3489: PPUSH
3490: CALL_OW 325
3494: IFFALSE 3521
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 8
3506: PUSH
3507: LD_INT 9
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_VAR 0 4
3519: ARRAY
3520: ST_TO_ADDR
// end ;
3521: LD_VAR 0 2
3525: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3526: LD_INT 0
3528: PPUSH
3529: PPUSH
3530: PPUSH
// if not mines then
3531: LD_VAR 0 2
3535: NOT
3536: IFFALSE 3540
// exit ;
3538: GO 3684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3540: LD_ADDR_VAR 0 5
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_VAR 0 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_INT 21
3562: PUSH
3563: LD_INT 3
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: ST_TO_ADDR
// for i in mines do
3583: LD_ADDR_VAR 0 4
3587: PUSH
3588: LD_VAR 0 2
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3682
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 4
3609: PUSH
3610: LD_INT 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 458
3618: NOT
3619: IFFALSE 3623
// continue ;
3621: GO 3593
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3623: LD_VAR 0 4
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 4
3636: PUSH
3637: LD_INT 2
3639: ARRAY
3640: PPUSH
3641: CALL_OW 428
3645: PUSH
3646: LD_VAR 0 5
3650: IN
3651: IFFALSE 3680
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: LD_VAR 0 4
3666: PUSH
3667: LD_INT 2
3669: ARRAY
3670: PPUSH
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 456
// end ;
3680: GO 3593
3682: POP
3683: POP
// end ;
3684: LD_VAR 0 3
3688: RET
// export function Count ( array ) ; begin
3689: LD_INT 0
3691: PPUSH
// result := array + 0 ;
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: LD_VAR 0 1
3701: PUSH
3702: LD_INT 0
3704: PLUS
3705: ST_TO_ADDR
// end ;
3706: LD_VAR 0 2
3710: RET
// export function IsEmpty ( building ) ; begin
3711: LD_INT 0
3713: PPUSH
// if not building then
3714: LD_VAR 0 1
3718: NOT
3719: IFFALSE 3723
// exit ;
3721: GO 3766
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3723: LD_ADDR_VAR 0 2
3727: PUSH
3728: LD_VAR 0 1
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 255
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 58
3752: PUSH
3753: EMPTY
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: IN
3765: ST_TO_ADDR
// end ;
3766: LD_VAR 0 2
3770: RET
// export function IsNotFull ( building ) ; var places ; begin
3771: LD_INT 0
3773: PPUSH
3774: PPUSH
// if not building then
3775: LD_VAR 0 1
3779: NOT
3780: IFFALSE 3784
// exit ;
3782: GO 3812
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: LD_VAR 0 1
3793: PPUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 62
3799: PUSH
3800: EMPTY
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 72
3811: ST_TO_ADDR
// end ;
3812: LD_VAR 0 2
3816: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3817: LD_INT 0
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// tmp := [ ] ;
3823: LD_ADDR_VAR 0 3
3827: PUSH
3828: EMPTY
3829: ST_TO_ADDR
// list := [ ] ;
3830: LD_ADDR_VAR 0 5
3834: PUSH
3835: EMPTY
3836: ST_TO_ADDR
// for i = 16 to 25 do
3837: LD_ADDR_VAR 0 4
3841: PUSH
3842: DOUBLE
3843: LD_INT 16
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 25
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3924
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_INT 22
3865: PUSH
3866: LD_VAR 0 1
3870: PPUSH
3871: CALL_OW 255
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_VAR 0 1
3887: PUSH
3888: LD_INT 6
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 30
3898: PUSH
3899: LD_VAR 0 4
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: PPUSH
3916: CALL_OW 69
3920: ADD
3921: ST_TO_ADDR
3922: GO 3850
3924: POP
3925: POP
// for i = 1 to tmp do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: DOUBLE
3932: LD_INT 1
3934: DEC
3935: ST_TO_ADDR
3936: LD_VAR 0 3
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4030
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3944: LD_ADDR_VAR 0 5
3948: PUSH
3949: LD_VAR 0 5
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 4
3963: ARRAY
3964: PPUSH
3965: CALL_OW 266
3969: PUSH
3970: LD_VAR 0 3
3974: PUSH
3975: LD_VAR 0 4
3979: ARRAY
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 3
3990: PUSH
3991: LD_VAR 0 4
3995: ARRAY
3996: PPUSH
3997: CALL_OW 251
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: LD_VAR 0 4
4011: ARRAY
4012: PPUSH
4013: CALL_OW 254
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: ADD
4027: ST_TO_ADDR
4028: GO 3941
4030: POP
4031: POP
// result := list ;
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_VAR 0 5
4041: ST_TO_ADDR
// end ;
4042: LD_VAR 0 2
4046: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4047: LD_INT 0
4049: PPUSH
4050: PPUSH
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
// if not factory then
4056: LD_VAR 0 1
4060: NOT
4061: IFFALSE 4065
// exit ;
4063: GO 4658
// if control = control_apeman then
4065: LD_VAR 0 4
4069: PUSH
4070: LD_INT 5
4072: EQUAL
4073: IFFALSE 4182
// begin tmp := UnitsInside ( factory ) ;
4075: LD_ADDR_VAR 0 8
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 313
4089: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4090: LD_VAR 0 8
4094: PPUSH
4095: LD_INT 25
4097: PUSH
4098: LD_INT 12
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: NOT
4110: IFFALSE 4120
// control := control_manual ;
4112: LD_ADDR_VAR 0 4
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4120: LD_ADDR_VAR 0 8
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: CALL 3817 0 1
4134: ST_TO_ADDR
// if tmp then
4135: LD_VAR 0 8
4139: IFFALSE 4182
// begin for i in tmp do
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_VAR 0 8
4150: PUSH
4151: FOR_IN
4152: IFFALSE 4180
// if i [ 1 ] = b_ext_radio then
4154: LD_VAR 0 7
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_INT 22
4165: EQUAL
4166: IFFALSE 4178
// begin control := control_remote ;
4168: LD_ADDR_VAR 0 4
4172: PUSH
4173: LD_INT 2
4175: ST_TO_ADDR
// break ;
4176: GO 4180
// end ;
4178: GO 4151
4180: POP
4181: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_VAR 0 4
4201: PPUSH
4202: LD_VAR 0 5
4206: PPUSH
4207: CALL_OW 448
4211: IFFALSE 4246
// begin result := [ chassis , engine , control , weapon ] ;
4213: LD_ADDR_VAR 0 6
4217: PUSH
4218: LD_VAR 0 2
4222: PUSH
4223: LD_VAR 0 3
4227: PUSH
4228: LD_VAR 0 4
4232: PUSH
4233: LD_VAR 0 5
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: ST_TO_ADDR
// exit ;
4244: GO 4658
// end ; _chassis := AvailableChassisList ( factory ) ;
4246: LD_ADDR_VAR 0 9
4250: PUSH
4251: LD_VAR 0 1
4255: PPUSH
4256: CALL_OW 475
4260: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4261: LD_ADDR_VAR 0 11
4265: PUSH
4266: LD_VAR 0 1
4270: PPUSH
4271: CALL_OW 476
4275: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4276: LD_ADDR_VAR 0 12
4280: PUSH
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 477
4290: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4291: LD_ADDR_VAR 0 10
4295: PUSH
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 478
4305: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4306: LD_VAR 0 9
4310: NOT
4311: PUSH
4312: LD_VAR 0 11
4316: NOT
4317: OR
4318: PUSH
4319: LD_VAR 0 12
4323: NOT
4324: OR
4325: PUSH
4326: LD_VAR 0 10
4330: NOT
4331: OR
4332: IFFALSE 4367
// begin result := [ chassis , engine , control , weapon ] ;
4334: LD_ADDR_VAR 0 6
4338: PUSH
4339: LD_VAR 0 2
4343: PUSH
4344: LD_VAR 0 3
4348: PUSH
4349: LD_VAR 0 4
4353: PUSH
4354: LD_VAR 0 5
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// exit ;
4365: GO 4658
// end ; if not chassis in _chassis then
4367: LD_VAR 0 2
4371: PUSH
4372: LD_VAR 0 9
4376: IN
4377: NOT
4378: IFFALSE 4404
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_VAR 0 9
4389: PUSH
4390: LD_INT 1
4392: PPUSH
4393: LD_VAR 0 9
4397: PPUSH
4398: CALL_OW 12
4402: ARRAY
4403: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4404: LD_VAR 0 2
4408: PPUSH
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL 4663 0 2
4418: NOT
4419: IFFALSE 4478
// repeat engine := _engine [ 1 ] ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: LD_VAR 0 11
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4435: LD_ADDR_VAR 0 11
4439: PUSH
4440: LD_VAR 0 11
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL_OW 3
4452: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4453: LD_VAR 0 2
4457: PPUSH
4458: LD_VAR 0 3
4462: PPUSH
4463: CALL 4663 0 2
4467: PUSH
4468: LD_VAR 0 11
4472: PUSH
4473: EMPTY
4474: EQUAL
4475: OR
4476: IFFALSE 4421
// if not control in _control then
4478: LD_VAR 0 4
4482: PUSH
4483: LD_VAR 0 12
4487: IN
4488: NOT
4489: IFFALSE 4515
// control := _control [ rand ( 1 , _control ) ] ;
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_VAR 0 12
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_VAR 0 12
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4515: LD_VAR 0 2
4519: PPUSH
4520: LD_VAR 0 5
4524: PPUSH
4525: CALL 4883 0 2
4529: NOT
4530: IFFALSE 4589
// repeat weapon := _weapon [ 1 ] ;
4532: LD_ADDR_VAR 0 5
4536: PUSH
4537: LD_VAR 0 10
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4546: LD_ADDR_VAR 0 10
4550: PUSH
4551: LD_VAR 0 10
4555: PPUSH
4556: LD_INT 1
4558: PPUSH
4559: CALL_OW 3
4563: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4564: LD_VAR 0 2
4568: PPUSH
4569: LD_VAR 0 5
4573: PPUSH
4574: CALL 4883 0 2
4578: PUSH
4579: LD_VAR 0 10
4583: PUSH
4584: EMPTY
4585: EQUAL
4586: OR
4587: IFFALSE 4532
// result := [ ] ;
4589: LD_ADDR_VAR 0 6
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_VAR 0 2
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: LD_VAR 0 4
4615: PPUSH
4616: LD_VAR 0 5
4620: PPUSH
4621: CALL_OW 448
4625: IFFALSE 4658
// result := [ chassis , engine , control , weapon ] ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_VAR 0 2
4636: PUSH
4637: LD_VAR 0 3
4641: PUSH
4642: LD_VAR 0 4
4646: PUSH
4647: LD_VAR 0 5
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// end ;
4658: LD_VAR 0 6
4662: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4663: LD_INT 0
4665: PPUSH
// if not chassis or not engine then
4666: LD_VAR 0 1
4670: NOT
4671: PUSH
4672: LD_VAR 0 2
4676: NOT
4677: OR
4678: IFFALSE 4682
// exit ;
4680: GO 4878
// case engine of engine_solar :
4682: LD_VAR 0 2
4686: PUSH
4687: LD_INT 2
4689: DOUBLE
4690: EQUAL
4691: IFTRUE 4695
4693: GO 4733
4695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: LD_INT 11
4703: PUSH
4704: LD_INT 12
4706: PUSH
4707: LD_INT 13
4709: PUSH
4710: LD_INT 14
4712: PUSH
4713: LD_INT 1
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: LD_INT 3
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: ST_TO_ADDR
4731: GO 4862
4733: LD_INT 1
4735: DOUBLE
4736: EQUAL
4737: IFTRUE 4741
4739: GO 4803
4741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_INT 11
4749: PUSH
4750: LD_INT 12
4752: PUSH
4753: LD_INT 13
4755: PUSH
4756: LD_INT 14
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 4
4770: PUSH
4771: LD_INT 5
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 23
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 24
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 4862
4803: LD_INT 3
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4861
4811: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 13
4819: PUSH
4820: LD_INT 14
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: LD_INT 3
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: LD_INT 5
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 23
4843: PUSH
4844: LD_INT 24
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
4859: GO 4862
4861: POP
// result := ( chassis in result ) ;
4862: LD_ADDR_VAR 0 3
4866: PUSH
4867: LD_VAR 0 1
4871: PUSH
4872: LD_VAR 0 3
4876: IN
4877: ST_TO_ADDR
// end ;
4878: LD_VAR 0 3
4882: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4883: LD_INT 0
4885: PPUSH
// if not chassis or not weapon then
4886: LD_VAR 0 1
4890: NOT
4891: PUSH
4892: LD_VAR 0 2
4896: NOT
4897: OR
4898: IFFALSE 4902
// exit ;
4900: GO 5962
// case weapon of us_machine_gun :
4902: LD_VAR 0 2
4906: PUSH
4907: LD_INT 2
4909: DOUBLE
4910: EQUAL
4911: IFTRUE 4915
4913: GO 4945
4915: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_INT 1
4923: PUSH
4924: LD_INT 2
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: ST_TO_ADDR
4943: GO 5946
4945: LD_INT 3
4947: DOUBLE
4948: EQUAL
4949: IFTRUE 4953
4951: GO 4983
4953: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4954: LD_ADDR_VAR 0 3
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: LD_INT 2
4964: PUSH
4965: LD_INT 3
4967: PUSH
4968: LD_INT 4
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: ST_TO_ADDR
4981: GO 5946
4983: LD_INT 11
4985: DOUBLE
4986: EQUAL
4987: IFTRUE 4991
4989: GO 5021
4991: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4992: LD_ADDR_VAR 0 3
4996: PUSH
4997: LD_INT 1
4999: PUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: LD_INT 4
5008: PUSH
5009: LD_INT 5
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: ST_TO_ADDR
5019: GO 5946
5021: LD_INT 4
5023: DOUBLE
5024: EQUAL
5025: IFTRUE 5029
5027: GO 5055
5029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5030: LD_ADDR_VAR 0 3
5034: PUSH
5035: LD_INT 2
5037: PUSH
5038: LD_INT 3
5040: PUSH
5041: LD_INT 4
5043: PUSH
5044: LD_INT 5
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 5946
5055: LD_INT 5
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5089
5063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5064: LD_ADDR_VAR 0 3
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 4
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: ST_TO_ADDR
5087: GO 5946
5089: LD_INT 9
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5097
5095: GO 5123
5097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5098: LD_ADDR_VAR 0 3
5102: PUSH
5103: LD_INT 2
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: LD_INT 5
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 5946
5123: LD_INT 7
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5157
5131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 4
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: ST_TO_ADDR
5155: GO 5946
5157: LD_INT 12
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5191
5165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: ST_TO_ADDR
5189: GO 5946
5191: LD_INT 13
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5199
5197: GO 5225
5199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_INT 3
5210: PUSH
5211: LD_INT 4
5213: PUSH
5214: LD_INT 5
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
5223: GO 5946
5225: LD_INT 14
5227: DOUBLE
5228: EQUAL
5229: IFTRUE 5233
5231: GO 5251
5233: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5234: LD_ADDR_VAR 0 3
5238: PUSH
5239: LD_INT 4
5241: PUSH
5242: LD_INT 5
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: ST_TO_ADDR
5249: GO 5946
5251: LD_INT 6
5253: DOUBLE
5254: EQUAL
5255: IFTRUE 5259
5257: GO 5277
5259: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_INT 4
5267: PUSH
5268: LD_INT 5
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: ST_TO_ADDR
5275: GO 5946
5277: LD_INT 10
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5303
5285: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 5
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: ST_TO_ADDR
5301: GO 5946
5303: LD_INT 22
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5337
5311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: LD_INT 11
5319: PUSH
5320: LD_INT 12
5322: PUSH
5323: LD_INT 13
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: ST_TO_ADDR
5335: GO 5946
5337: LD_INT 23
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5371
5345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_INT 11
5353: PUSH
5354: LD_INT 12
5356: PUSH
5357: LD_INT 13
5359: PUSH
5360: LD_INT 14
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: ST_TO_ADDR
5369: GO 5946
5371: LD_INT 24
5373: DOUBLE
5374: EQUAL
5375: IFTRUE 5379
5377: GO 5405
5379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5380: LD_ADDR_VAR 0 3
5384: PUSH
5385: LD_INT 11
5387: PUSH
5388: LD_INT 12
5390: PUSH
5391: LD_INT 13
5393: PUSH
5394: LD_INT 14
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: ST_TO_ADDR
5403: GO 5946
5405: LD_INT 30
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5439
5413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: LD_INT 11
5421: PUSH
5422: LD_INT 12
5424: PUSH
5425: LD_INT 13
5427: PUSH
5428: LD_INT 14
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ST_TO_ADDR
5437: GO 5946
5439: LD_INT 25
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5465
5447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: LD_INT 13
5455: PUSH
5456: LD_INT 14
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: ST_TO_ADDR
5463: GO 5946
5465: LD_INT 27
5467: DOUBLE
5468: EQUAL
5469: IFTRUE 5473
5471: GO 5491
5473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_INT 13
5481: PUSH
5482: LD_INT 14
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: ST_TO_ADDR
5489: GO 5946
5491: LD_INT 92
5493: DOUBLE
5494: EQUAL
5495: IFTRUE 5499
5497: GO 5525
5499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: LD_INT 11
5507: PUSH
5508: LD_INT 12
5510: PUSH
5511: LD_INT 13
5513: PUSH
5514: LD_INT 14
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
5523: GO 5946
5525: LD_INT 28
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 5551
5533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5534: LD_ADDR_VAR 0 3
5538: PUSH
5539: LD_INT 13
5541: PUSH
5542: LD_INT 14
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: ST_TO_ADDR
5549: GO 5946
5551: LD_INT 29
5553: DOUBLE
5554: EQUAL
5555: IFTRUE 5559
5557: GO 5577
5559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5560: LD_ADDR_VAR 0 3
5564: PUSH
5565: LD_INT 13
5567: PUSH
5568: LD_INT 14
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: ST_TO_ADDR
5575: GO 5946
5577: LD_INT 31
5579: DOUBLE
5580: EQUAL
5581: IFTRUE 5585
5583: GO 5603
5585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_INT 13
5593: PUSH
5594: LD_INT 14
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: ST_TO_ADDR
5601: GO 5946
5603: LD_INT 26
5605: DOUBLE
5606: EQUAL
5607: IFTRUE 5611
5609: GO 5629
5611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5612: LD_ADDR_VAR 0 3
5616: PUSH
5617: LD_INT 13
5619: PUSH
5620: LD_INT 14
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: ST_TO_ADDR
5627: GO 5946
5629: LD_INT 42
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5637
5635: GO 5663
5637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5638: LD_ADDR_VAR 0 3
5642: PUSH
5643: LD_INT 21
5645: PUSH
5646: LD_INT 22
5648: PUSH
5649: LD_INT 23
5651: PUSH
5652: LD_INT 24
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
5661: GO 5946
5663: LD_INT 43
5665: DOUBLE
5666: EQUAL
5667: IFTRUE 5671
5669: GO 5697
5671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5672: LD_ADDR_VAR 0 3
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 24
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: ST_TO_ADDR
5695: GO 5946
5697: LD_INT 44
5699: DOUBLE
5700: EQUAL
5701: IFTRUE 5705
5703: GO 5731
5705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5706: LD_ADDR_VAR 0 3
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 22
5716: PUSH
5717: LD_INT 23
5719: PUSH
5720: LD_INT 24
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
5729: GO 5946
5731: LD_INT 45
5733: DOUBLE
5734: EQUAL
5735: IFTRUE 5739
5737: GO 5765
5739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5740: LD_ADDR_VAR 0 3
5744: PUSH
5745: LD_INT 21
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 23
5753: PUSH
5754: LD_INT 24
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: ST_TO_ADDR
5763: GO 5946
5765: LD_INT 49
5767: DOUBLE
5768: EQUAL
5769: IFTRUE 5773
5771: GO 5799
5773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 22
5784: PUSH
5785: LD_INT 23
5787: PUSH
5788: LD_INT 24
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: ST_TO_ADDR
5797: GO 5946
5799: LD_INT 51
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5833
5807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 22
5818: PUSH
5819: LD_INT 23
5821: PUSH
5822: LD_INT 24
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: ST_TO_ADDR
5831: GO 5946
5833: LD_INT 52
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5841
5839: GO 5867
5841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 23
5855: PUSH
5856: LD_INT 24
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 5946
5867: LD_INT 53
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5893
5875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: LD_INT 23
5883: PUSH
5884: LD_INT 24
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: ST_TO_ADDR
5891: GO 5946
5893: LD_INT 46
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5919
5901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 23
5909: PUSH
5910: LD_INT 24
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
5917: GO 5946
5919: LD_INT 47
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5945
5927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 23
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: ST_TO_ADDR
5943: GO 5946
5945: POP
// result := ( chassis in result ) ;
5946: LD_ADDR_VAR 0 3
5950: PUSH
5951: LD_VAR 0 1
5955: PUSH
5956: LD_VAR 0 3
5960: IN
5961: ST_TO_ADDR
// end ;
5962: LD_VAR 0 3
5966: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
// result := array ;
5976: LD_ADDR_VAR 0 5
5980: PUSH
5981: LD_VAR 0 1
5985: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5986: LD_VAR 0 1
5990: NOT
5991: PUSH
5992: LD_VAR 0 2
5996: NOT
5997: OR
5998: PUSH
5999: LD_VAR 0 3
6003: NOT
6004: OR
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_VAR 0 1
6015: GREATER
6016: OR
6017: PUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_VAR 0 1
6027: GREATER
6028: OR
6029: IFFALSE 6033
// exit ;
6031: GO 6329
// if direction then
6033: LD_VAR 0 4
6037: IFFALSE 6101
// begin d := 1 ;
6039: LD_ADDR_VAR 0 9
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if i_from > i_to then
6047: LD_VAR 0 2
6051: PUSH
6052: LD_VAR 0 3
6056: GREATER
6057: IFFALSE 6083
// length := ( array - i_from ) + i_to else
6059: LD_ADDR_VAR 0 11
6063: PUSH
6064: LD_VAR 0 1
6068: PUSH
6069: LD_VAR 0 2
6073: MINUS
6074: PUSH
6075: LD_VAR 0 3
6079: PLUS
6080: ST_TO_ADDR
6081: GO 6099
// length := i_to - i_from ;
6083: LD_ADDR_VAR 0 11
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 2
6097: MINUS
6098: ST_TO_ADDR
// end else
6099: GO 6162
// begin d := - 1 ;
6101: LD_ADDR_VAR 0 9
6105: PUSH
6106: LD_INT 1
6108: NEG
6109: ST_TO_ADDR
// if i_from > i_to then
6110: LD_VAR 0 2
6114: PUSH
6115: LD_VAR 0 3
6119: GREATER
6120: IFFALSE 6140
// length := i_from - i_to else
6122: LD_ADDR_VAR 0 11
6126: PUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_VAR 0 3
6136: MINUS
6137: ST_TO_ADDR
6138: GO 6162
// length := ( array - i_to ) + i_from ;
6140: LD_ADDR_VAR 0 11
6144: PUSH
6145: LD_VAR 0 1
6149: PUSH
6150: LD_VAR 0 3
6154: MINUS
6155: PUSH
6156: LD_VAR 0 2
6160: PLUS
6161: ST_TO_ADDR
// end ; if not length then
6162: LD_VAR 0 11
6166: NOT
6167: IFFALSE 6171
// exit ;
6169: GO 6329
// tmp := array ;
6171: LD_ADDR_VAR 0 10
6175: PUSH
6176: LD_VAR 0 1
6180: ST_TO_ADDR
// for i = 1 to length do
6181: LD_ADDR_VAR 0 6
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_VAR 0 11
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6317
// begin for j = 1 to array do
6199: LD_ADDR_VAR 0 7
6203: PUSH
6204: DOUBLE
6205: LD_INT 1
6207: DEC
6208: ST_TO_ADDR
6209: LD_VAR 0 1
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6303
// begin k := j + d ;
6217: LD_ADDR_VAR 0 8
6221: PUSH
6222: LD_VAR 0 7
6226: PUSH
6227: LD_VAR 0 9
6231: PLUS
6232: ST_TO_ADDR
// if k > array then
6233: LD_VAR 0 8
6237: PUSH
6238: LD_VAR 0 1
6242: GREATER
6243: IFFALSE 6253
// k := 1 ;
6245: LD_ADDR_VAR 0 8
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if not k then
6253: LD_VAR 0 8
6257: NOT
6258: IFFALSE 6270
// k := array ;
6260: LD_ADDR_VAR 0 8
6264: PUSH
6265: LD_VAR 0 1
6269: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6270: LD_ADDR_VAR 0 10
6274: PUSH
6275: LD_VAR 0 10
6279: PPUSH
6280: LD_VAR 0 8
6284: PPUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 7
6294: ARRAY
6295: PPUSH
6296: CALL_OW 1
6300: ST_TO_ADDR
// end ;
6301: GO 6214
6303: POP
6304: POP
// array := tmp ;
6305: LD_ADDR_VAR 0 1
6309: PUSH
6310: LD_VAR 0 10
6314: ST_TO_ADDR
// end ;
6315: GO 6196
6317: POP
6318: POP
// result := array ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 1
6328: ST_TO_ADDR
// end ;
6329: LD_VAR 0 5
6333: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
// result := 0 ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// if not array or not value in array then
6346: LD_VAR 0 1
6350: NOT
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: LD_VAR 0 1
6361: IN
6362: NOT
6363: OR
6364: IFFALSE 6368
// exit ;
6366: GO 6422
// for i = 1 to array do
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6420
// if value = array [ i ] then
6386: LD_VAR 0 2
6390: PUSH
6391: LD_VAR 0 1
6395: PUSH
6396: LD_VAR 0 4
6400: ARRAY
6401: EQUAL
6402: IFFALSE 6418
// begin result := i ;
6404: LD_ADDR_VAR 0 3
6408: PUSH
6409: LD_VAR 0 4
6413: ST_TO_ADDR
// exit ;
6414: POP
6415: POP
6416: GO 6422
// end ;
6418: GO 6383
6420: POP
6421: POP
// end ;
6422: LD_VAR 0 3
6426: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6427: LD_INT 0
6429: PPUSH
// vc_chassis := chassis ;
6430: LD_ADDR_OWVAR 37
6434: PUSH
6435: LD_VAR 0 1
6439: ST_TO_ADDR
// vc_engine := engine ;
6440: LD_ADDR_OWVAR 39
6444: PUSH
6445: LD_VAR 0 2
6449: ST_TO_ADDR
// vc_control := control ;
6450: LD_ADDR_OWVAR 38
6454: PUSH
6455: LD_VAR 0 3
6459: ST_TO_ADDR
// vc_weapon := weapon ;
6460: LD_ADDR_OWVAR 40
6464: PUSH
6465: LD_VAR 0 4
6469: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6470: LD_ADDR_OWVAR 41
6474: PUSH
6475: LD_VAR 0 5
6479: ST_TO_ADDR
// end ;
6480: LD_VAR 0 6
6484: RET
// export function WantPlant ( unit ) ; var task ; begin
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// result := false ;
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 437
6511: ST_TO_ADDR
// if task then
6512: LD_VAR 0 3
6516: IFFALSE 6544
// if task [ 1 ] [ 1 ] = p then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 1
6525: ARRAY
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PUSH
6531: LD_STRING p
6533: EQUAL
6534: IFFALSE 6544
// result := true ;
6536: LD_ADDR_VAR 0 2
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ;
6544: LD_VAR 0 2
6548: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6549: LD_INT 0
6551: PPUSH
6552: PPUSH
6553: PPUSH
6554: PPUSH
// if pos < 1 then
6555: LD_VAR 0 2
6559: PUSH
6560: LD_INT 1
6562: LESS
6563: IFFALSE 6567
// exit ;
6565: GO 6870
// if pos = 1 then
6567: LD_VAR 0 2
6571: PUSH
6572: LD_INT 1
6574: EQUAL
6575: IFFALSE 6608
// result := Replace ( arr , pos [ 1 ] , value ) else
6577: LD_ADDR_VAR 0 4
6581: PUSH
6582: LD_VAR 0 1
6586: PPUSH
6587: LD_VAR 0 2
6591: PUSH
6592: LD_INT 1
6594: ARRAY
6595: PPUSH
6596: LD_VAR 0 3
6600: PPUSH
6601: CALL_OW 1
6605: ST_TO_ADDR
6606: GO 6870
// begin tmp := arr ;
6608: LD_ADDR_VAR 0 6
6612: PUSH
6613: LD_VAR 0 1
6617: ST_TO_ADDR
// s_arr := [ tmp ] ;
6618: LD_ADDR_VAR 0 7
6622: PUSH
6623: LD_VAR 0 6
6627: PUSH
6628: EMPTY
6629: LIST
6630: ST_TO_ADDR
// for i = 1 to pos - 1 do
6631: LD_ADDR_VAR 0 5
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_VAR 0 2
6645: PUSH
6646: LD_INT 1
6648: MINUS
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6696
// begin tmp := tmp [ pos [ i ] ] ;
6653: LD_ADDR_VAR 0 6
6657: PUSH
6658: LD_VAR 0 6
6662: PUSH
6663: LD_VAR 0 2
6667: PUSH
6668: LD_VAR 0 5
6672: ARRAY
6673: ARRAY
6674: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6675: LD_ADDR_VAR 0 7
6679: PUSH
6680: LD_VAR 0 7
6684: PUSH
6685: LD_VAR 0 6
6689: PUSH
6690: EMPTY
6691: LIST
6692: ADD
6693: ST_TO_ADDR
// end ;
6694: GO 6650
6696: POP
6697: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6698: LD_ADDR_VAR 0 6
6702: PUSH
6703: LD_VAR 0 6
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 3
6723: PPUSH
6724: CALL_OW 1
6728: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6729: LD_ADDR_VAR 0 7
6733: PUSH
6734: LD_VAR 0 7
6738: PPUSH
6739: LD_VAR 0 7
6743: PPUSH
6744: LD_VAR 0 6
6748: PPUSH
6749: CALL_OW 1
6753: ST_TO_ADDR
// for i = s_arr downto 2 do
6754: LD_ADDR_VAR 0 5
6758: PUSH
6759: DOUBLE
6760: LD_VAR 0 7
6764: INC
6765: ST_TO_ADDR
6766: LD_INT 2
6768: PUSH
6769: FOR_DOWNTO
6770: IFFALSE 6854
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6772: LD_ADDR_VAR 0 6
6776: PUSH
6777: LD_VAR 0 7
6781: PUSH
6782: LD_VAR 0 5
6786: PUSH
6787: LD_INT 1
6789: MINUS
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 2
6796: PUSH
6797: LD_VAR 0 5
6801: PUSH
6802: LD_INT 1
6804: MINUS
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 7
6811: PUSH
6812: LD_VAR 0 5
6816: ARRAY
6817: PPUSH
6818: CALL_OW 1
6822: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6823: LD_ADDR_VAR 0 7
6827: PUSH
6828: LD_VAR 0 7
6832: PPUSH
6833: LD_VAR 0 5
6837: PUSH
6838: LD_INT 1
6840: MINUS
6841: PPUSH
6842: LD_VAR 0 6
6846: PPUSH
6847: CALL_OW 1
6851: ST_TO_ADDR
// end ;
6852: GO 6769
6854: POP
6855: POP
// result := s_arr [ 1 ] ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 7
6865: PUSH
6866: LD_INT 1
6868: ARRAY
6869: ST_TO_ADDR
// end ; end ;
6870: LD_VAR 0 4
6874: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6875: LD_INT 0
6877: PPUSH
6878: PPUSH
// if not list then
6879: LD_VAR 0 1
6883: NOT
6884: IFFALSE 6888
// exit ;
6886: GO 6979
// i := list [ pos1 ] ;
6888: LD_ADDR_VAR 0 5
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: LD_VAR 0 2
6902: ARRAY
6903: ST_TO_ADDR
// if not i then
6904: LD_VAR 0 5
6908: NOT
6909: IFFALSE 6913
// exit ;
6911: GO 6979
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6913: LD_ADDR_VAR 0 1
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_VAR 0 1
6932: PUSH
6933: LD_VAR 0 3
6937: ARRAY
6938: PPUSH
6939: CALL_OW 1
6943: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: LD_VAR 0 3
6958: PPUSH
6959: LD_VAR 0 5
6963: PPUSH
6964: CALL_OW 1
6968: ST_TO_ADDR
// result := list ;
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 1
6978: ST_TO_ADDR
// end ;
6979: LD_VAR 0 4
6983: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6984: LD_INT 0
6986: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6987: LD_ADDR_VAR 0 5
6991: PUSH
6992: LD_VAR 0 1
6996: PPUSH
6997: CALL_OW 250
7001: PPUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 251
7011: PPUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: LD_VAR 0 3
7021: PPUSH
7022: LD_VAR 0 4
7026: PPUSH
7027: CALL 7405 0 5
7031: ST_TO_ADDR
// end ;
7032: LD_VAR 0 5
7036: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// if not list or not unit then
7043: LD_VAR 0 2
7047: NOT
7048: PUSH
7049: LD_VAR 0 1
7053: NOT
7054: OR
7055: IFFALSE 7059
// exit ;
7057: GO 7400
// result := [ ] ;
7059: LD_ADDR_VAR 0 5
7063: PUSH
7064: EMPTY
7065: ST_TO_ADDR
// for i in list do
7066: LD_ADDR_VAR 0 6
7070: PUSH
7071: LD_VAR 0 2
7075: PUSH
7076: FOR_IN
7077: IFFALSE 7295
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7079: LD_ADDR_VAR 0 8
7083: PUSH
7084: LD_VAR 0 1
7088: PPUSH
7089: LD_VAR 0 6
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: LD_VAR 0 6
7102: PUSH
7103: LD_INT 2
7105: ARRAY
7106: PPUSH
7107: CALL_OW 297
7111: ST_TO_ADDR
// if not Count ( result ) then
7112: LD_VAR 0 5
7116: PPUSH
7117: CALL 3689 0 1
7121: NOT
7122: IFFALSE 7155
// begin result := Join ( result , [ i , tmp ] ) ;
7124: LD_ADDR_VAR 0 5
7128: PUSH
7129: LD_VAR 0 5
7133: PPUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 8
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL 39276 0 2
7152: ST_TO_ADDR
// continue ;
7153: GO 7076
// end ; if result [ result ] [ 2 ] <= tmp then
7155: LD_VAR 0 5
7159: PUSH
7160: LD_VAR 0 5
7164: ARRAY
7165: PUSH
7166: LD_INT 2
7168: ARRAY
7169: PUSH
7170: LD_VAR 0 8
7174: LESSEQUAL
7175: IFFALSE 7208
// result := Join ( result , [ i , tmp ] ) else
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_VAR 0 5
7186: PPUSH
7187: LD_VAR 0 6
7191: PUSH
7192: LD_VAR 0 8
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PPUSH
7201: CALL 39276 0 2
7205: ST_TO_ADDR
7206: GO 7293
// begin for j := 1 to Count ( result ) do
7208: LD_ADDR_VAR 0 7
7212: PUSH
7213: DOUBLE
7214: LD_INT 1
7216: DEC
7217: ST_TO_ADDR
7218: LD_VAR 0 5
7222: PPUSH
7223: CALL 3689 0 1
7227: PUSH
7228: FOR_TO
7229: IFFALSE 7291
// begin if tmp < result [ j ] [ 2 ] then
7231: LD_VAR 0 8
7235: PUSH
7236: LD_VAR 0 5
7240: PUSH
7241: LD_VAR 0 7
7245: ARRAY
7246: PUSH
7247: LD_INT 2
7249: ARRAY
7250: LESS
7251: IFFALSE 7289
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7253: LD_ADDR_VAR 0 5
7257: PUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: LD_VAR 0 7
7267: PPUSH
7268: LD_VAR 0 6
7272: PUSH
7273: LD_VAR 0 8
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 2
7286: ST_TO_ADDR
// break ;
7287: GO 7291
// end ; end ;
7289: GO 7228
7291: POP
7292: POP
// end ; end ;
7293: GO 7076
7295: POP
7296: POP
// if result and not asc then
7297: LD_VAR 0 5
7301: PUSH
7302: LD_VAR 0 3
7306: NOT
7307: AND
7308: IFFALSE 7325
// result := ReverseArray ( result ) ;
7310: LD_ADDR_VAR 0 5
7314: PUSH
7315: LD_VAR 0 5
7319: PPUSH
7320: CALL 34565 0 1
7324: ST_TO_ADDR
// tmp := [ ] ;
7325: LD_ADDR_VAR 0 8
7329: PUSH
7330: EMPTY
7331: ST_TO_ADDR
// if mode then
7332: LD_VAR 0 4
7336: IFFALSE 7400
// begin for i := 1 to result do
7338: LD_ADDR_VAR 0 6
7342: PUSH
7343: DOUBLE
7344: LD_INT 1
7346: DEC
7347: ST_TO_ADDR
7348: LD_VAR 0 5
7352: PUSH
7353: FOR_TO
7354: IFFALSE 7388
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7356: LD_ADDR_VAR 0 8
7360: PUSH
7361: LD_VAR 0 8
7365: PPUSH
7366: LD_VAR 0 5
7370: PUSH
7371: LD_VAR 0 6
7375: ARRAY
7376: PUSH
7377: LD_INT 1
7379: ARRAY
7380: PPUSH
7381: CALL 39276 0 2
7385: ST_TO_ADDR
7386: GO 7353
7388: POP
7389: POP
// result := tmp ;
7390: LD_ADDR_VAR 0 5
7394: PUSH
7395: LD_VAR 0 8
7399: ST_TO_ADDR
// end ; end ;
7400: LD_VAR 0 5
7404: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// if not list then
7411: LD_VAR 0 3
7415: NOT
7416: IFFALSE 7420
// exit ;
7418: GO 7808
// result := [ ] ;
7420: LD_ADDR_VAR 0 6
7424: PUSH
7425: EMPTY
7426: ST_TO_ADDR
// for i in list do
7427: LD_ADDR_VAR 0 7
7431: PUSH
7432: LD_VAR 0 3
7436: PUSH
7437: FOR_IN
7438: IFFALSE 7640
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7440: LD_ADDR_VAR 0 9
7444: PUSH
7445: LD_VAR 0 7
7449: PPUSH
7450: LD_VAR 0 1
7454: PPUSH
7455: LD_VAR 0 2
7459: PPUSH
7460: CALL_OW 297
7464: ST_TO_ADDR
// if not result then
7465: LD_VAR 0 6
7469: NOT
7470: IFFALSE 7496
// result := [ [ i , tmp ] ] else
7472: LD_ADDR_VAR 0 6
7476: PUSH
7477: LD_VAR 0 7
7481: PUSH
7482: LD_VAR 0 9
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: ST_TO_ADDR
7494: GO 7638
// begin if result [ result ] [ 2 ] < tmp then
7496: LD_VAR 0 6
7500: PUSH
7501: LD_VAR 0 6
7505: ARRAY
7506: PUSH
7507: LD_INT 2
7509: ARRAY
7510: PUSH
7511: LD_VAR 0 9
7515: LESS
7516: IFFALSE 7558
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7518: LD_ADDR_VAR 0 6
7522: PUSH
7523: LD_VAR 0 6
7527: PPUSH
7528: LD_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: PLUS
7536: PPUSH
7537: LD_VAR 0 7
7541: PUSH
7542: LD_VAR 0 9
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PPUSH
7551: CALL_OW 2
7555: ST_TO_ADDR
7556: GO 7638
// for j = 1 to result do
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: DOUBLE
7564: LD_INT 1
7566: DEC
7567: ST_TO_ADDR
7568: LD_VAR 0 6
7572: PUSH
7573: FOR_TO
7574: IFFALSE 7636
// begin if tmp < result [ j ] [ 2 ] then
7576: LD_VAR 0 9
7580: PUSH
7581: LD_VAR 0 6
7585: PUSH
7586: LD_VAR 0 8
7590: ARRAY
7591: PUSH
7592: LD_INT 2
7594: ARRAY
7595: LESS
7596: IFFALSE 7634
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7598: LD_ADDR_VAR 0 6
7602: PUSH
7603: LD_VAR 0 6
7607: PPUSH
7608: LD_VAR 0 8
7612: PPUSH
7613: LD_VAR 0 7
7617: PUSH
7618: LD_VAR 0 9
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 2
7631: ST_TO_ADDR
// break ;
7632: GO 7636
// end ; end ;
7634: GO 7573
7636: POP
7637: POP
// end ; end ;
7638: GO 7437
7640: POP
7641: POP
// if result and not asc then
7642: LD_VAR 0 6
7646: PUSH
7647: LD_VAR 0 4
7651: NOT
7652: AND
7653: IFFALSE 7728
// begin tmp := result ;
7655: LD_ADDR_VAR 0 9
7659: PUSH
7660: LD_VAR 0 6
7664: ST_TO_ADDR
// for i = tmp downto 1 do
7665: LD_ADDR_VAR 0 7
7669: PUSH
7670: DOUBLE
7671: LD_VAR 0 9
7675: INC
7676: ST_TO_ADDR
7677: LD_INT 1
7679: PUSH
7680: FOR_DOWNTO
7681: IFFALSE 7726
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7683: LD_ADDR_VAR 0 6
7687: PUSH
7688: LD_VAR 0 6
7692: PPUSH
7693: LD_VAR 0 9
7697: PUSH
7698: LD_VAR 0 7
7702: MINUS
7703: PUSH
7704: LD_INT 1
7706: PLUS
7707: PPUSH
7708: LD_VAR 0 9
7712: PUSH
7713: LD_VAR 0 7
7717: ARRAY
7718: PPUSH
7719: CALL_OW 1
7723: ST_TO_ADDR
7724: GO 7680
7726: POP
7727: POP
// end ; tmp := [ ] ;
7728: LD_ADDR_VAR 0 9
7732: PUSH
7733: EMPTY
7734: ST_TO_ADDR
// if mode then
7735: LD_VAR 0 5
7739: IFFALSE 7808
// begin for i = 1 to result do
7741: LD_ADDR_VAR 0 7
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_VAR 0 6
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7796
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7759: LD_ADDR_VAR 0 9
7763: PUSH
7764: LD_VAR 0 9
7768: PPUSH
7769: LD_VAR 0 7
7773: PPUSH
7774: LD_VAR 0 6
7778: PUSH
7779: LD_VAR 0 7
7783: ARRAY
7784: PUSH
7785: LD_INT 1
7787: ARRAY
7788: PPUSH
7789: CALL_OW 1
7793: ST_TO_ADDR
7794: GO 7756
7796: POP
7797: POP
// result := tmp ;
7798: LD_ADDR_VAR 0 6
7802: PUSH
7803: LD_VAR 0 9
7807: ST_TO_ADDR
// end ; end ;
7808: LD_VAR 0 6
7812: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
7817: PPUSH
7818: PPUSH
7819: PPUSH
7820: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7821: LD_ADDR_VAR 0 5
7825: PUSH
7826: LD_INT 0
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: LD_INT 0
7834: PUSH
7835: EMPTY
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: ST_TO_ADDR
// if not x or not y then
7843: LD_VAR 0 2
7847: NOT
7848: PUSH
7849: LD_VAR 0 3
7853: NOT
7854: OR
7855: IFFALSE 7859
// exit ;
7857: GO 9509
// if not range then
7859: LD_VAR 0 4
7863: NOT
7864: IFFALSE 7874
// range := 10 ;
7866: LD_ADDR_VAR 0 4
7870: PUSH
7871: LD_INT 10
7873: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7874: LD_ADDR_VAR 0 8
7878: PUSH
7879: LD_INT 81
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 92
7893: PUSH
7894: LD_VAR 0 2
7898: PUSH
7899: LD_VAR 0 3
7903: PUSH
7904: LD_VAR 0 4
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 21
7920: PUSH
7921: LD_INT 3
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if not tmp then
7942: LD_VAR 0 8
7946: NOT
7947: IFFALSE 7951
// exit ;
7949: GO 9509
// for i in tmp do
7951: LD_ADDR_VAR 0 6
7955: PUSH
7956: LD_VAR 0 8
7960: PUSH
7961: FOR_IN
7962: IFFALSE 9484
// begin points := [ 0 , 0 , 0 ] ;
7964: LD_ADDR_VAR 0 9
7968: PUSH
7969: LD_INT 0
7971: PUSH
7972: LD_INT 0
7974: PUSH
7975: LD_INT 0
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: ST_TO_ADDR
// bpoints := 1 ;
7983: LD_ADDR_VAR 0 10
7987: PUSH
7988: LD_INT 1
7990: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL_OW 247
8000: PUSH
8001: LD_INT 1
8003: DOUBLE
8004: EQUAL
8005: IFTRUE 8009
8007: GO 8587
8009: POP
// begin if GetClass ( i ) = 1 then
8010: LD_VAR 0 6
8014: PPUSH
8015: CALL_OW 257
8019: PUSH
8020: LD_INT 1
8022: EQUAL
8023: IFFALSE 8044
// points := [ 10 , 5 , 3 ] ;
8025: LD_ADDR_VAR 0 9
8029: PUSH
8030: LD_INT 10
8032: PUSH
8033: LD_INT 5
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8044: LD_VAR 0 6
8048: PPUSH
8049: CALL_OW 257
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: LD_INT 4
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: IN
8068: IFFALSE 8089
// points := [ 3 , 2 , 1 ] ;
8070: LD_ADDR_VAR 0 9
8074: PUSH
8075: LD_INT 3
8077: PUSH
8078: LD_INT 2
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8089: LD_VAR 0 6
8093: PPUSH
8094: CALL_OW 257
8098: PUSH
8099: LD_INT 5
8101: EQUAL
8102: IFFALSE 8123
// points := [ 130 , 5 , 2 ] ;
8104: LD_ADDR_VAR 0 9
8108: PUSH
8109: LD_INT 130
8111: PUSH
8112: LD_INT 5
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8123: LD_VAR 0 6
8127: PPUSH
8128: CALL_OW 257
8132: PUSH
8133: LD_INT 8
8135: EQUAL
8136: IFFALSE 8157
// points := [ 35 , 35 , 30 ] ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: LD_INT 35
8145: PUSH
8146: LD_INT 35
8148: PUSH
8149: LD_INT 30
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8157: LD_VAR 0 6
8161: PPUSH
8162: CALL_OW 257
8166: PUSH
8167: LD_INT 9
8169: EQUAL
8170: IFFALSE 8191
// points := [ 20 , 55 , 40 ] ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: LD_INT 20
8179: PUSH
8180: LD_INT 55
8182: PUSH
8183: LD_INT 40
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8191: LD_VAR 0 6
8195: PPUSH
8196: CALL_OW 257
8200: PUSH
8201: LD_INT 12
8203: PUSH
8204: LD_INT 16
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: IN
8211: IFFALSE 8232
// points := [ 5 , 3 , 2 ] ;
8213: LD_ADDR_VAR 0 9
8217: PUSH
8218: LD_INT 5
8220: PUSH
8221: LD_INT 3
8223: PUSH
8224: LD_INT 2
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8232: LD_VAR 0 6
8236: PPUSH
8237: CALL_OW 257
8241: PUSH
8242: LD_INT 17
8244: EQUAL
8245: IFFALSE 8266
// points := [ 100 , 50 , 75 ] ;
8247: LD_ADDR_VAR 0 9
8251: PUSH
8252: LD_INT 100
8254: PUSH
8255: LD_INT 50
8257: PUSH
8258: LD_INT 75
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8266: LD_VAR 0 6
8270: PPUSH
8271: CALL_OW 257
8275: PUSH
8276: LD_INT 15
8278: EQUAL
8279: IFFALSE 8300
// points := [ 10 , 5 , 3 ] ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 10
8288: PUSH
8289: LD_INT 5
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8300: LD_VAR 0 6
8304: PPUSH
8305: CALL_OW 257
8309: PUSH
8310: LD_INT 14
8312: EQUAL
8313: IFFALSE 8334
// points := [ 10 , 0 , 0 ] ;
8315: LD_ADDR_VAR 0 9
8319: PUSH
8320: LD_INT 10
8322: PUSH
8323: LD_INT 0
8325: PUSH
8326: LD_INT 0
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 257
8343: PUSH
8344: LD_INT 11
8346: EQUAL
8347: IFFALSE 8368
// points := [ 30 , 10 , 5 ] ;
8349: LD_ADDR_VAR 0 9
8353: PUSH
8354: LD_INT 30
8356: PUSH
8357: LD_INT 10
8359: PUSH
8360: LD_INT 5
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 5
8375: PPUSH
8376: CALL_OW 321
8380: PUSH
8381: LD_INT 2
8383: EQUAL
8384: IFFALSE 8401
// bpoints := bpoints * 1.8 ;
8386: LD_ADDR_VAR 0 10
8390: PUSH
8391: LD_VAR 0 10
8395: PUSH
8396: LD_REAL  1.80000000000000E+0000
8399: MUL
8400: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8401: LD_VAR 0 6
8405: PPUSH
8406: CALL_OW 257
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 3
8419: PUSH
8420: LD_INT 4
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: IN
8429: PUSH
8430: LD_VAR 0 1
8434: PPUSH
8435: LD_INT 51
8437: PPUSH
8438: CALL_OW 321
8442: PUSH
8443: LD_INT 2
8445: EQUAL
8446: AND
8447: IFFALSE 8464
// bpoints := bpoints * 1.2 ;
8449: LD_ADDR_VAR 0 10
8453: PUSH
8454: LD_VAR 0 10
8458: PUSH
8459: LD_REAL  1.20000000000000E+0000
8462: MUL
8463: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8464: LD_VAR 0 6
8468: PPUSH
8469: CALL_OW 257
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 7
8479: PUSH
8480: LD_INT 9
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: IN
8488: PUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_INT 52
8496: PPUSH
8497: CALL_OW 321
8501: PUSH
8502: LD_INT 2
8504: EQUAL
8505: AND
8506: IFFALSE 8523
// bpoints := bpoints * 1.5 ;
8508: LD_ADDR_VAR 0 10
8512: PUSH
8513: LD_VAR 0 10
8517: PUSH
8518: LD_REAL  1.50000000000000E+0000
8521: MUL
8522: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_INT 66
8530: PPUSH
8531: CALL_OW 321
8535: PUSH
8536: LD_INT 2
8538: EQUAL
8539: IFFALSE 8556
// bpoints := bpoints * 1.1 ;
8541: LD_ADDR_VAR 0 10
8545: PUSH
8546: LD_VAR 0 10
8550: PUSH
8551: LD_REAL  1.10000000000000E+0000
8554: MUL
8555: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8556: LD_ADDR_VAR 0 10
8560: PUSH
8561: LD_VAR 0 10
8565: PUSH
8566: LD_VAR 0 6
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: CALL_OW 259
8578: PUSH
8579: LD_REAL  1.15000000000000E+0000
8582: MUL
8583: MUL
8584: ST_TO_ADDR
// end ; unit_vehicle :
8585: GO 9413
8587: LD_INT 2
8589: DOUBLE
8590: EQUAL
8591: IFTRUE 8595
8593: GO 9401
8595: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8596: LD_VAR 0 6
8600: PPUSH
8601: CALL_OW 264
8605: PUSH
8606: LD_INT 2
8608: PUSH
8609: LD_INT 42
8611: PUSH
8612: LD_INT 24
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: IN
8620: IFFALSE 8641
// points := [ 25 , 5 , 3 ] ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_INT 25
8629: PUSH
8630: LD_INT 5
8632: PUSH
8633: LD_INT 3
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8641: LD_VAR 0 6
8645: PPUSH
8646: CALL_OW 264
8650: PUSH
8651: LD_INT 4
8653: PUSH
8654: LD_INT 43
8656: PUSH
8657: LD_INT 25
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: IN
8665: IFFALSE 8686
// points := [ 40 , 15 , 5 ] ;
8667: LD_ADDR_VAR 0 9
8671: PUSH
8672: LD_INT 40
8674: PUSH
8675: LD_INT 15
8677: PUSH
8678: LD_INT 5
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8686: LD_VAR 0 6
8690: PPUSH
8691: CALL_OW 264
8695: PUSH
8696: LD_INT 3
8698: PUSH
8699: LD_INT 23
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: IN
8706: IFFALSE 8727
// points := [ 7 , 25 , 8 ] ;
8708: LD_ADDR_VAR 0 9
8712: PUSH
8713: LD_INT 7
8715: PUSH
8716: LD_INT 25
8718: PUSH
8719: LD_INT 8
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8727: LD_VAR 0 6
8731: PPUSH
8732: CALL_OW 264
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: LD_INT 27
8742: PUSH
8743: LD_INT 44
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: IN
8751: IFFALSE 8772
// points := [ 14 , 50 , 16 ] ;
8753: LD_ADDR_VAR 0 9
8757: PUSH
8758: LD_INT 14
8760: PUSH
8761: LD_INT 50
8763: PUSH
8764: LD_INT 16
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8772: LD_VAR 0 6
8776: PPUSH
8777: CALL_OW 264
8781: PUSH
8782: LD_INT 6
8784: PUSH
8785: LD_INT 46
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: IN
8792: IFFALSE 8813
// points := [ 32 , 120 , 70 ] ;
8794: LD_ADDR_VAR 0 9
8798: PUSH
8799: LD_INT 32
8801: PUSH
8802: LD_INT 120
8804: PUSH
8805: LD_INT 70
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8813: LD_VAR 0 6
8817: PPUSH
8818: CALL_OW 264
8822: PUSH
8823: LD_INT 7
8825: PUSH
8826: LD_INT 28
8828: PUSH
8829: LD_INT 45
8831: PUSH
8832: LD_INT 92
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: IN
8841: IFFALSE 8862
// points := [ 35 , 20 , 45 ] ;
8843: LD_ADDR_VAR 0 9
8847: PUSH
8848: LD_INT 35
8850: PUSH
8851: LD_INT 20
8853: PUSH
8854: LD_INT 45
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8862: LD_VAR 0 6
8866: PPUSH
8867: CALL_OW 264
8871: PUSH
8872: LD_INT 47
8874: PUSH
8875: EMPTY
8876: LIST
8877: IN
8878: IFFALSE 8899
// points := [ 67 , 45 , 75 ] ;
8880: LD_ADDR_VAR 0 9
8884: PUSH
8885: LD_INT 67
8887: PUSH
8888: LD_INT 45
8890: PUSH
8891: LD_INT 75
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8899: LD_VAR 0 6
8903: PPUSH
8904: CALL_OW 264
8908: PUSH
8909: LD_INT 26
8911: PUSH
8912: EMPTY
8913: LIST
8914: IN
8915: IFFALSE 8936
// points := [ 120 , 30 , 80 ] ;
8917: LD_ADDR_VAR 0 9
8921: PUSH
8922: LD_INT 120
8924: PUSH
8925: LD_INT 30
8927: PUSH
8928: LD_INT 80
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8936: LD_VAR 0 6
8940: PPUSH
8941: CALL_OW 264
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: EMPTY
8950: LIST
8951: IN
8952: IFFALSE 8973
// points := [ 40 , 1 , 1 ] ;
8954: LD_ADDR_VAR 0 9
8958: PUSH
8959: LD_INT 40
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8973: LD_VAR 0 6
8977: PPUSH
8978: CALL_OW 264
8982: PUSH
8983: LD_INT 29
8985: PUSH
8986: EMPTY
8987: LIST
8988: IN
8989: IFFALSE 9010
// points := [ 70 , 200 , 400 ] ;
8991: LD_ADDR_VAR 0 9
8995: PUSH
8996: LD_INT 70
8998: PUSH
8999: LD_INT 200
9001: PUSH
9002: LD_INT 400
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9010: LD_VAR 0 6
9014: PPUSH
9015: CALL_OW 264
9019: PUSH
9020: LD_INT 14
9022: PUSH
9023: LD_INT 53
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: IN
9030: IFFALSE 9051
// points := [ 40 , 10 , 20 ] ;
9032: LD_ADDR_VAR 0 9
9036: PUSH
9037: LD_INT 40
9039: PUSH
9040: LD_INT 10
9042: PUSH
9043: LD_INT 20
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9051: LD_VAR 0 6
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 9
9063: PUSH
9064: EMPTY
9065: LIST
9066: IN
9067: IFFALSE 9088
// points := [ 5 , 70 , 20 ] ;
9069: LD_ADDR_VAR 0 9
9073: PUSH
9074: LD_INT 5
9076: PUSH
9077: LD_INT 70
9079: PUSH
9080: LD_INT 20
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9088: LD_VAR 0 6
9092: PPUSH
9093: CALL_OW 264
9097: PUSH
9098: LD_INT 10
9100: PUSH
9101: EMPTY
9102: LIST
9103: IN
9104: IFFALSE 9125
// points := [ 35 , 110 , 70 ] ;
9106: LD_ADDR_VAR 0 9
9110: PUSH
9111: LD_INT 35
9113: PUSH
9114: LD_INT 110
9116: PUSH
9117: LD_INT 70
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9125: LD_VAR 0 6
9129: PPUSH
9130: CALL_OW 265
9134: PUSH
9135: LD_INT 25
9137: EQUAL
9138: IFFALSE 9159
// points := [ 80 , 65 , 100 ] ;
9140: LD_ADDR_VAR 0 9
9144: PUSH
9145: LD_INT 80
9147: PUSH
9148: LD_INT 65
9150: PUSH
9151: LD_INT 100
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9159: LD_VAR 0 6
9163: PPUSH
9164: CALL_OW 263
9168: PUSH
9169: LD_INT 1
9171: EQUAL
9172: IFFALSE 9207
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9174: LD_ADDR_VAR 0 10
9178: PUSH
9179: LD_VAR 0 10
9183: PUSH
9184: LD_VAR 0 6
9188: PPUSH
9189: CALL_OW 311
9193: PPUSH
9194: LD_INT 3
9196: PPUSH
9197: CALL_OW 259
9201: PUSH
9202: LD_INT 4
9204: MUL
9205: MUL
9206: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 263
9216: PUSH
9217: LD_INT 2
9219: EQUAL
9220: IFFALSE 9271
// begin j := IsControledBy ( i ) ;
9222: LD_ADDR_VAR 0 7
9226: PUSH
9227: LD_VAR 0 6
9231: PPUSH
9232: CALL_OW 312
9236: ST_TO_ADDR
// if j then
9237: LD_VAR 0 7
9241: IFFALSE 9271
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9243: LD_ADDR_VAR 0 10
9247: PUSH
9248: LD_VAR 0 10
9252: PUSH
9253: LD_VAR 0 7
9257: PPUSH
9258: LD_INT 3
9260: PPUSH
9261: CALL_OW 259
9265: PUSH
9266: LD_INT 3
9268: MUL
9269: MUL
9270: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9271: LD_VAR 0 6
9275: PPUSH
9276: CALL_OW 264
9280: PUSH
9281: LD_INT 5
9283: PUSH
9284: LD_INT 6
9286: PUSH
9287: LD_INT 46
9289: PUSH
9290: LD_INT 44
9292: PUSH
9293: LD_INT 47
9295: PUSH
9296: LD_INT 45
9298: PUSH
9299: LD_INT 28
9301: PUSH
9302: LD_INT 7
9304: PUSH
9305: LD_INT 27
9307: PUSH
9308: LD_INT 29
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: IN
9323: PUSH
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_INT 52
9331: PPUSH
9332: CALL_OW 321
9336: PUSH
9337: LD_INT 2
9339: EQUAL
9340: AND
9341: IFFALSE 9358
// bpoints := bpoints * 1.2 ;
9343: LD_ADDR_VAR 0 10
9347: PUSH
9348: LD_VAR 0 10
9352: PUSH
9353: LD_REAL  1.20000000000000E+0000
9356: MUL
9357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9358: LD_VAR 0 6
9362: PPUSH
9363: CALL_OW 264
9367: PUSH
9368: LD_INT 6
9370: PUSH
9371: LD_INT 46
9373: PUSH
9374: LD_INT 47
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: IN
9382: IFFALSE 9399
// bpoints := bpoints * 1.2 ;
9384: LD_ADDR_VAR 0 10
9388: PUSH
9389: LD_VAR 0 10
9393: PUSH
9394: LD_REAL  1.20000000000000E+0000
9397: MUL
9398: ST_TO_ADDR
// end ; unit_building :
9399: GO 9413
9401: LD_INT 3
9403: DOUBLE
9404: EQUAL
9405: IFTRUE 9409
9407: GO 9412
9409: POP
// ; end ;
9410: GO 9413
9412: POP
// for j = 1 to 3 do
9413: LD_ADDR_VAR 0 7
9417: PUSH
9418: DOUBLE
9419: LD_INT 1
9421: DEC
9422: ST_TO_ADDR
9423: LD_INT 3
9425: PUSH
9426: FOR_TO
9427: IFFALSE 9480
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9429: LD_ADDR_VAR 0 5
9433: PUSH
9434: LD_VAR 0 5
9438: PPUSH
9439: LD_VAR 0 7
9443: PPUSH
9444: LD_VAR 0 5
9448: PUSH
9449: LD_VAR 0 7
9453: ARRAY
9454: PUSH
9455: LD_VAR 0 9
9459: PUSH
9460: LD_VAR 0 7
9464: ARRAY
9465: PUSH
9466: LD_VAR 0 10
9470: MUL
9471: PLUS
9472: PPUSH
9473: CALL_OW 1
9477: ST_TO_ADDR
9478: GO 9426
9480: POP
9481: POP
// end ;
9482: GO 7961
9484: POP
9485: POP
// result := Replace ( result , 4 , tmp ) ;
9486: LD_ADDR_VAR 0 5
9490: PUSH
9491: LD_VAR 0 5
9495: PPUSH
9496: LD_INT 4
9498: PPUSH
9499: LD_VAR 0 8
9503: PPUSH
9504: CALL_OW 1
9508: ST_TO_ADDR
// end ;
9509: LD_VAR 0 5
9513: RET
// export function DangerAtRange ( unit , range ) ; begin
9514: LD_INT 0
9516: PPUSH
// if not unit then
9517: LD_VAR 0 1
9521: NOT
9522: IFFALSE 9526
// exit ;
9524: GO 9571
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9526: LD_ADDR_VAR 0 3
9530: PUSH
9531: LD_VAR 0 1
9535: PPUSH
9536: CALL_OW 255
9540: PPUSH
9541: LD_VAR 0 1
9545: PPUSH
9546: CALL_OW 250
9550: PPUSH
9551: LD_VAR 0 1
9555: PPUSH
9556: CALL_OW 251
9560: PPUSH
9561: LD_VAR 0 2
9565: PPUSH
9566: CALL 7813 0 4
9570: ST_TO_ADDR
// end ;
9571: LD_VAR 0 3
9575: RET
// export function DangerInArea ( side , area ) ; begin
9576: LD_INT 0
9578: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9579: LD_ADDR_VAR 0 3
9583: PUSH
9584: LD_VAR 0 2
9588: PPUSH
9589: LD_INT 81
9591: PUSH
9592: LD_VAR 0 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PPUSH
9601: CALL_OW 70
9605: ST_TO_ADDR
// end ;
9606: LD_VAR 0 3
9610: RET
// export function IsExtension ( b ) ; begin
9611: LD_INT 0
9613: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_VAR 0 1
9623: PUSH
9624: LD_INT 23
9626: PUSH
9627: LD_INT 20
9629: PUSH
9630: LD_INT 22
9632: PUSH
9633: LD_INT 17
9635: PUSH
9636: LD_INT 24
9638: PUSH
9639: LD_INT 21
9641: PUSH
9642: LD_INT 19
9644: PUSH
9645: LD_INT 16
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 18
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: IN
9666: ST_TO_ADDR
// end ;
9667: LD_VAR 0 2
9671: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9672: LD_INT 0
9674: PPUSH
9675: PPUSH
9676: PPUSH
// result := [ ] ;
9677: LD_ADDR_VAR 0 4
9681: PUSH
9682: EMPTY
9683: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9684: LD_ADDR_VAR 0 5
9688: PUSH
9689: LD_VAR 0 2
9693: PPUSH
9694: LD_INT 21
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PPUSH
9704: CALL_OW 70
9708: ST_TO_ADDR
// if not tmp then
9709: LD_VAR 0 5
9713: NOT
9714: IFFALSE 9718
// exit ;
9716: GO 9782
// if checkLink then
9718: LD_VAR 0 3
9722: IFFALSE 9772
// begin for i in tmp do
9724: LD_ADDR_VAR 0 6
9728: PUSH
9729: LD_VAR 0 5
9733: PUSH
9734: FOR_IN
9735: IFFALSE 9770
// if GetBase ( i ) <> base then
9737: LD_VAR 0 6
9741: PPUSH
9742: CALL_OW 274
9746: PUSH
9747: LD_VAR 0 1
9751: NONEQUAL
9752: IFFALSE 9768
// ComLinkToBase ( base , i ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_VAR 0 6
9763: PPUSH
9764: CALL_OW 169
9768: GO 9734
9770: POP
9771: POP
// end ; result := tmp ;
9772: LD_ADDR_VAR 0 4
9776: PUSH
9777: LD_VAR 0 5
9781: ST_TO_ADDR
// end ;
9782: LD_VAR 0 4
9786: RET
// export function ComComplete ( units , b ) ; var i ; begin
9787: LD_INT 0
9789: PPUSH
9790: PPUSH
// if not units then
9791: LD_VAR 0 1
9795: NOT
9796: IFFALSE 9800
// exit ;
9798: GO 9890
// for i in units do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_VAR 0 1
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9888
// if BuildingStatus ( b ) = bs_build then
9813: LD_VAR 0 2
9817: PPUSH
9818: CALL_OW 461
9822: PUSH
9823: LD_INT 1
9825: EQUAL
9826: IFFALSE 9886
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9828: LD_VAR 0 4
9832: PPUSH
9833: LD_STRING h
9835: PUSH
9836: LD_VAR 0 2
9840: PPUSH
9841: CALL_OW 250
9845: PUSH
9846: LD_VAR 0 2
9850: PPUSH
9851: CALL_OW 251
9855: PUSH
9856: LD_VAR 0 2
9860: PUSH
9861: LD_INT 0
9863: PUSH
9864: LD_INT 0
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: PPUSH
9882: CALL_OW 446
9886: GO 9810
9888: POP
9889: POP
// end ;
9890: LD_VAR 0 3
9894: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9895: LD_INT 0
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9903: LD_VAR 0 1
9907: NOT
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 263
9918: PUSH
9919: LD_INT 2
9921: NONEQUAL
9922: OR
9923: IFFALSE 9927
// exit ;
9925: GO 10243
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9927: LD_ADDR_VAR 0 6
9931: PUSH
9932: LD_INT 22
9934: PUSH
9935: LD_VAR 0 1
9939: PPUSH
9940: CALL_OW 255
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 36
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 34
9964: PUSH
9965: LD_INT 31
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PPUSH
9981: CALL_OW 69
9985: ST_TO_ADDR
// if not tmp then
9986: LD_VAR 0 6
9990: NOT
9991: IFFALSE 9995
// exit ;
9993: GO 10243
// result := [ ] ;
9995: LD_ADDR_VAR 0 2
9999: PUSH
10000: EMPTY
10001: ST_TO_ADDR
// for i in tmp do
10002: LD_ADDR_VAR 0 3
10006: PUSH
10007: LD_VAR 0 6
10011: PUSH
10012: FOR_IN
10013: IFFALSE 10084
// begin t := UnitsInside ( i ) ;
10015: LD_ADDR_VAR 0 4
10019: PUSH
10020: LD_VAR 0 3
10024: PPUSH
10025: CALL_OW 313
10029: ST_TO_ADDR
// if t then
10030: LD_VAR 0 4
10034: IFFALSE 10082
// for j in t do
10036: LD_ADDR_VAR 0 7
10040: PUSH
10041: LD_VAR 0 4
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10080
// result := Replace ( result , result + 1 , j ) ;
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: LD_VAR 0 2
10058: PPUSH
10059: LD_VAR 0 2
10063: PUSH
10064: LD_INT 1
10066: PLUS
10067: PPUSH
10068: LD_VAR 0 7
10072: PPUSH
10073: CALL_OW 1
10077: ST_TO_ADDR
10078: GO 10046
10080: POP
10081: POP
// end ;
10082: GO 10012
10084: POP
10085: POP
// if not result then
10086: LD_VAR 0 2
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10243
// mech := result [ 1 ] ;
10095: LD_ADDR_VAR 0 5
10099: PUSH
10100: LD_VAR 0 2
10104: PUSH
10105: LD_INT 1
10107: ARRAY
10108: ST_TO_ADDR
// if result > 1 then
10109: LD_VAR 0 2
10113: PUSH
10114: LD_INT 1
10116: GREATER
10117: IFFALSE 10229
// begin for i = 2 to result do
10119: LD_ADDR_VAR 0 3
10123: PUSH
10124: DOUBLE
10125: LD_INT 2
10127: DEC
10128: ST_TO_ADDR
10129: LD_VAR 0 2
10133: PUSH
10134: FOR_TO
10135: IFFALSE 10227
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10137: LD_ADDR_VAR 0 4
10141: PUSH
10142: LD_VAR 0 2
10146: PUSH
10147: LD_VAR 0 3
10151: ARRAY
10152: PPUSH
10153: LD_INT 3
10155: PPUSH
10156: CALL_OW 259
10160: PUSH
10161: LD_VAR 0 2
10165: PUSH
10166: LD_VAR 0 3
10170: ARRAY
10171: PPUSH
10172: CALL_OW 432
10176: MINUS
10177: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10178: LD_VAR 0 4
10182: PUSH
10183: LD_VAR 0 5
10187: PPUSH
10188: LD_INT 3
10190: PPUSH
10191: CALL_OW 259
10195: PUSH
10196: LD_VAR 0 5
10200: PPUSH
10201: CALL_OW 432
10205: MINUS
10206: GREATEREQUAL
10207: IFFALSE 10225
// mech := result [ i ] ;
10209: LD_ADDR_VAR 0 5
10213: PUSH
10214: LD_VAR 0 2
10218: PUSH
10219: LD_VAR 0 3
10223: ARRAY
10224: ST_TO_ADDR
// end ;
10225: GO 10134
10227: POP
10228: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10229: LD_VAR 0 1
10233: PPUSH
10234: LD_VAR 0 5
10238: PPUSH
10239: CALL_OW 135
// end ;
10243: LD_VAR 0 2
10247: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
10261: PPUSH
10262: PPUSH
// result := [ ] ;
10263: LD_ADDR_VAR 0 7
10267: PUSH
10268: EMPTY
10269: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10270: LD_VAR 0 1
10274: PPUSH
10275: CALL_OW 266
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: IN
10290: NOT
10291: IFFALSE 10295
// exit ;
10293: GO 11929
// if name then
10295: LD_VAR 0 3
10299: IFFALSE 10315
// SetBName ( base_dep , name ) ;
10301: LD_VAR 0 1
10305: PPUSH
10306: LD_VAR 0 3
10310: PPUSH
10311: CALL_OW 500
// base := GetBase ( base_dep ) ;
10315: LD_ADDR_VAR 0 15
10319: PUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 274
10329: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10330: LD_ADDR_VAR 0 16
10334: PUSH
10335: LD_VAR 0 1
10339: PPUSH
10340: CALL_OW 255
10344: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10345: LD_ADDR_VAR 0 17
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 248
10359: ST_TO_ADDR
// if sources then
10360: LD_VAR 0 5
10364: IFFALSE 10411
// for i = 1 to 3 do
10366: LD_ADDR_VAR 0 8
10370: PUSH
10371: DOUBLE
10372: LD_INT 1
10374: DEC
10375: ST_TO_ADDR
10376: LD_INT 3
10378: PUSH
10379: FOR_TO
10380: IFFALSE 10409
// AddResourceType ( base , i , sources [ i ] ) ;
10382: LD_VAR 0 15
10386: PPUSH
10387: LD_VAR 0 8
10391: PPUSH
10392: LD_VAR 0 5
10396: PUSH
10397: LD_VAR 0 8
10401: ARRAY
10402: PPUSH
10403: CALL_OW 276
10407: GO 10379
10409: POP
10410: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10411: LD_ADDR_VAR 0 18
10415: PUSH
10416: LD_VAR 0 15
10420: PPUSH
10421: LD_VAR 0 2
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL 9672 0 3
10433: ST_TO_ADDR
// InitHc ;
10434: CALL_OW 19
// InitUc ;
10438: CALL_OW 18
// uc_side := side ;
10442: LD_ADDR_OWVAR 20
10446: PUSH
10447: LD_VAR 0 16
10451: ST_TO_ADDR
// uc_nation := nation ;
10452: LD_ADDR_OWVAR 21
10456: PUSH
10457: LD_VAR 0 17
10461: ST_TO_ADDR
// if buildings then
10462: LD_VAR 0 18
10466: IFFALSE 11788
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10468: LD_ADDR_VAR 0 19
10472: PUSH
10473: LD_VAR 0 18
10477: PPUSH
10478: LD_INT 2
10480: PUSH
10481: LD_INT 30
10483: PUSH
10484: LD_INT 29
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 30
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 72
10510: ST_TO_ADDR
// if tmp then
10511: LD_VAR 0 19
10515: IFFALSE 10563
// for i in tmp do
10517: LD_ADDR_VAR 0 8
10521: PUSH
10522: LD_VAR 0 19
10526: PUSH
10527: FOR_IN
10528: IFFALSE 10561
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10530: LD_VAR 0 8
10534: PPUSH
10535: CALL_OW 250
10539: PPUSH
10540: LD_VAR 0 8
10544: PPUSH
10545: CALL_OW 251
10549: PPUSH
10550: LD_VAR 0 16
10554: PPUSH
10555: CALL_OW 441
10559: GO 10527
10561: POP
10562: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10563: LD_VAR 0 18
10567: PPUSH
10568: LD_INT 2
10570: PUSH
10571: LD_INT 30
10573: PUSH
10574: LD_INT 32
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 30
10583: PUSH
10584: LD_INT 33
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 72
10600: IFFALSE 10688
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10602: LD_ADDR_VAR 0 8
10606: PUSH
10607: LD_VAR 0 18
10611: PPUSH
10612: LD_INT 2
10614: PUSH
10615: LD_INT 30
10617: PUSH
10618: LD_INT 32
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 30
10627: PUSH
10628: LD_INT 33
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 72
10644: PUSH
10645: FOR_IN
10646: IFFALSE 10686
// begin if not GetBWeapon ( i ) then
10648: LD_VAR 0 8
10652: PPUSH
10653: CALL_OW 269
10657: NOT
10658: IFFALSE 10684
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10660: LD_VAR 0 8
10664: PPUSH
10665: LD_VAR 0 8
10669: PPUSH
10670: LD_VAR 0 2
10674: PPUSH
10675: CALL 11934 0 2
10679: PPUSH
10680: CALL_OW 431
// end ;
10684: GO 10645
10686: POP
10687: POP
// end ; for i = 1 to personel do
10688: LD_ADDR_VAR 0 8
10692: PUSH
10693: DOUBLE
10694: LD_INT 1
10696: DEC
10697: ST_TO_ADDR
10698: LD_VAR 0 6
10702: PUSH
10703: FOR_TO
10704: IFFALSE 11768
// begin if i > 4 then
10706: LD_VAR 0 8
10710: PUSH
10711: LD_INT 4
10713: GREATER
10714: IFFALSE 10718
// break ;
10716: GO 11768
// case i of 1 :
10718: LD_VAR 0 8
10722: PUSH
10723: LD_INT 1
10725: DOUBLE
10726: EQUAL
10727: IFTRUE 10731
10729: GO 10811
10731: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10732: LD_ADDR_VAR 0 12
10736: PUSH
10737: LD_VAR 0 18
10741: PPUSH
10742: LD_INT 22
10744: PUSH
10745: LD_VAR 0 16
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 58
10756: PUSH
10757: EMPTY
10758: LIST
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 30
10765: PUSH
10766: LD_INT 32
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 30
10775: PUSH
10776: LD_INT 4
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 30
10785: PUSH
10786: LD_INT 5
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PPUSH
10804: CALL_OW 72
10808: ST_TO_ADDR
10809: GO 11033
10811: LD_INT 2
10813: DOUBLE
10814: EQUAL
10815: IFTRUE 10819
10817: GO 10881
10819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10820: LD_ADDR_VAR 0 12
10824: PUSH
10825: LD_VAR 0 18
10829: PPUSH
10830: LD_INT 22
10832: PUSH
10833: LD_VAR 0 16
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: LD_INT 30
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 30
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 72
10878: ST_TO_ADDR
10879: GO 11033
10881: LD_INT 3
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10951
10889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10890: LD_ADDR_VAR 0 12
10894: PUSH
10895: LD_VAR 0 18
10899: PPUSH
10900: LD_INT 22
10902: PUSH
10903: LD_VAR 0 16
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 2
10914: PUSH
10915: LD_INT 30
10917: PUSH
10918: LD_INT 2
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 30
10927: PUSH
10928: LD_INT 3
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 72
10948: ST_TO_ADDR
10949: GO 11033
10951: LD_INT 4
10953: DOUBLE
10954: EQUAL
10955: IFTRUE 10959
10957: GO 11032
10959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10960: LD_ADDR_VAR 0 12
10964: PUSH
10965: LD_VAR 0 18
10969: PPUSH
10970: LD_INT 22
10972: PUSH
10973: LD_VAR 0 16
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 6
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 30
10997: PUSH
10998: LD_INT 7
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 30
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 72
11029: ST_TO_ADDR
11030: GO 11033
11032: POP
// if i = 1 then
11033: LD_VAR 0 8
11037: PUSH
11038: LD_INT 1
11040: EQUAL
11041: IFFALSE 11152
// begin tmp := [ ] ;
11043: LD_ADDR_VAR 0 19
11047: PUSH
11048: EMPTY
11049: ST_TO_ADDR
// for j in f do
11050: LD_ADDR_VAR 0 9
11054: PUSH
11055: LD_VAR 0 12
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11134
// if GetBType ( j ) = b_bunker then
11063: LD_VAR 0 9
11067: PPUSH
11068: CALL_OW 266
11072: PUSH
11073: LD_INT 32
11075: EQUAL
11076: IFFALSE 11103
// tmp := Insert ( tmp , 1 , j ) else
11078: LD_ADDR_VAR 0 19
11082: PUSH
11083: LD_VAR 0 19
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: LD_VAR 0 9
11095: PPUSH
11096: CALL_OW 2
11100: ST_TO_ADDR
11101: GO 11132
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11103: LD_ADDR_VAR 0 19
11107: PUSH
11108: LD_VAR 0 19
11112: PPUSH
11113: LD_VAR 0 19
11117: PUSH
11118: LD_INT 1
11120: PLUS
11121: PPUSH
11122: LD_VAR 0 9
11126: PPUSH
11127: CALL_OW 2
11131: ST_TO_ADDR
11132: GO 11060
11134: POP
11135: POP
// if tmp then
11136: LD_VAR 0 19
11140: IFFALSE 11152
// f := tmp ;
11142: LD_ADDR_VAR 0 12
11146: PUSH
11147: LD_VAR 0 19
11151: ST_TO_ADDR
// end ; x := personel [ i ] ;
11152: LD_ADDR_VAR 0 13
11156: PUSH
11157: LD_VAR 0 6
11161: PUSH
11162: LD_VAR 0 8
11166: ARRAY
11167: ST_TO_ADDR
// if x = - 1 then
11168: LD_VAR 0 13
11172: PUSH
11173: LD_INT 1
11175: NEG
11176: EQUAL
11177: IFFALSE 11386
// begin for j in f do
11179: LD_ADDR_VAR 0 9
11183: PUSH
11184: LD_VAR 0 12
11188: PUSH
11189: FOR_IN
11190: IFFALSE 11382
// repeat InitHc ;
11192: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11196: LD_VAR 0 9
11200: PPUSH
11201: CALL_OW 266
11205: PUSH
11206: LD_INT 5
11208: EQUAL
11209: IFFALSE 11279
// begin if UnitsInside ( j ) < 3 then
11211: LD_VAR 0 9
11215: PPUSH
11216: CALL_OW 313
11220: PUSH
11221: LD_INT 3
11223: LESS
11224: IFFALSE 11260
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11226: LD_INT 0
11228: PPUSH
11229: LD_INT 5
11231: PUSH
11232: LD_INT 8
11234: PUSH
11235: LD_INT 9
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: PUSH
11243: LD_VAR 0 17
11247: ARRAY
11248: PPUSH
11249: LD_VAR 0 4
11253: PPUSH
11254: CALL_OW 380
11258: GO 11277
// PrepareHuman ( false , i , skill ) ;
11260: LD_INT 0
11262: PPUSH
11263: LD_VAR 0 8
11267: PPUSH
11268: LD_VAR 0 4
11272: PPUSH
11273: CALL_OW 380
// end else
11277: GO 11296
// PrepareHuman ( false , i , skill ) ;
11279: LD_INT 0
11281: PPUSH
11282: LD_VAR 0 8
11286: PPUSH
11287: LD_VAR 0 4
11291: PPUSH
11292: CALL_OW 380
// un := CreateHuman ;
11296: LD_ADDR_VAR 0 14
11300: PUSH
11301: CALL_OW 44
11305: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11306: LD_ADDR_VAR 0 7
11310: PUSH
11311: LD_VAR 0 7
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_VAR 0 14
11323: PPUSH
11324: CALL_OW 2
11328: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11329: LD_VAR 0 14
11333: PPUSH
11334: LD_VAR 0 9
11338: PPUSH
11339: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11343: LD_VAR 0 9
11347: PPUSH
11348: CALL_OW 313
11352: PUSH
11353: LD_INT 6
11355: EQUAL
11356: PUSH
11357: LD_VAR 0 9
11361: PPUSH
11362: CALL_OW 266
11366: PUSH
11367: LD_INT 32
11369: PUSH
11370: LD_INT 31
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: IN
11377: OR
11378: IFFALSE 11192
11380: GO 11189
11382: POP
11383: POP
// end else
11384: GO 11766
// for j = 1 to x do
11386: LD_ADDR_VAR 0 9
11390: PUSH
11391: DOUBLE
11392: LD_INT 1
11394: DEC
11395: ST_TO_ADDR
11396: LD_VAR 0 13
11400: PUSH
11401: FOR_TO
11402: IFFALSE 11764
// begin InitHc ;
11404: CALL_OW 19
// if not f then
11408: LD_VAR 0 12
11412: NOT
11413: IFFALSE 11502
// begin PrepareHuman ( false , i , skill ) ;
11415: LD_INT 0
11417: PPUSH
11418: LD_VAR 0 8
11422: PPUSH
11423: LD_VAR 0 4
11427: PPUSH
11428: CALL_OW 380
// un := CreateHuman ;
11432: LD_ADDR_VAR 0 14
11436: PUSH
11437: CALL_OW 44
11441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11442: LD_ADDR_VAR 0 7
11446: PUSH
11447: LD_VAR 0 7
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: LD_VAR 0 14
11459: PPUSH
11460: CALL_OW 2
11464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11465: LD_VAR 0 14
11469: PPUSH
11470: LD_VAR 0 1
11474: PPUSH
11475: CALL_OW 250
11479: PPUSH
11480: LD_VAR 0 1
11484: PPUSH
11485: CALL_OW 251
11489: PPUSH
11490: LD_INT 10
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: CALL_OW 50
// continue ;
11500: GO 11401
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11502: LD_VAR 0 12
11506: PUSH
11507: LD_INT 1
11509: ARRAY
11510: PPUSH
11511: CALL_OW 313
11515: PUSH
11516: LD_VAR 0 12
11520: PUSH
11521: LD_INT 1
11523: ARRAY
11524: PPUSH
11525: CALL_OW 266
11529: PUSH
11530: LD_INT 32
11532: PUSH
11533: LD_INT 31
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: IN
11540: AND
11541: PUSH
11542: LD_VAR 0 12
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PPUSH
11551: CALL_OW 313
11555: PUSH
11556: LD_INT 6
11558: EQUAL
11559: OR
11560: IFFALSE 11580
// f := Delete ( f , 1 ) ;
11562: LD_ADDR_VAR 0 12
11566: PUSH
11567: LD_VAR 0 12
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 3
11579: ST_TO_ADDR
// if not f then
11580: LD_VAR 0 12
11584: NOT
11585: IFFALSE 11603
// begin x := x + 2 ;
11587: LD_ADDR_VAR 0 13
11591: PUSH
11592: LD_VAR 0 13
11596: PUSH
11597: LD_INT 2
11599: PLUS
11600: ST_TO_ADDR
// continue ;
11601: GO 11401
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11603: LD_VAR 0 12
11607: PUSH
11608: LD_INT 1
11610: ARRAY
11611: PPUSH
11612: CALL_OW 266
11616: PUSH
11617: LD_INT 5
11619: EQUAL
11620: IFFALSE 11694
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11622: LD_VAR 0 12
11626: PUSH
11627: LD_INT 1
11629: ARRAY
11630: PPUSH
11631: CALL_OW 313
11635: PUSH
11636: LD_INT 3
11638: LESS
11639: IFFALSE 11675
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11641: LD_INT 0
11643: PPUSH
11644: LD_INT 5
11646: PUSH
11647: LD_INT 8
11649: PUSH
11650: LD_INT 9
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_VAR 0 17
11662: ARRAY
11663: PPUSH
11664: LD_VAR 0 4
11668: PPUSH
11669: CALL_OW 380
11673: GO 11692
// PrepareHuman ( false , i , skill ) ;
11675: LD_INT 0
11677: PPUSH
11678: LD_VAR 0 8
11682: PPUSH
11683: LD_VAR 0 4
11687: PPUSH
11688: CALL_OW 380
// end else
11692: GO 11711
// PrepareHuman ( false , i , skill ) ;
11694: LD_INT 0
11696: PPUSH
11697: LD_VAR 0 8
11701: PPUSH
11702: LD_VAR 0 4
11706: PPUSH
11707: CALL_OW 380
// un := CreateHuman ;
11711: LD_ADDR_VAR 0 14
11715: PUSH
11716: CALL_OW 44
11720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11721: LD_ADDR_VAR 0 7
11725: PUSH
11726: LD_VAR 0 7
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: LD_VAR 0 14
11738: PPUSH
11739: CALL_OW 2
11743: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11744: LD_VAR 0 14
11748: PPUSH
11749: LD_VAR 0 12
11753: PUSH
11754: LD_INT 1
11756: ARRAY
11757: PPUSH
11758: CALL_OW 52
// end ;
11762: GO 11401
11764: POP
11765: POP
// end ;
11766: GO 10703
11768: POP
11769: POP
// result := result ^ buildings ;
11770: LD_ADDR_VAR 0 7
11774: PUSH
11775: LD_VAR 0 7
11779: PUSH
11780: LD_VAR 0 18
11784: ADD
11785: ST_TO_ADDR
// end else
11786: GO 11929
// begin for i = 1 to personel do
11788: LD_ADDR_VAR 0 8
11792: PUSH
11793: DOUBLE
11794: LD_INT 1
11796: DEC
11797: ST_TO_ADDR
11798: LD_VAR 0 6
11802: PUSH
11803: FOR_TO
11804: IFFALSE 11927
// begin if i > 4 then
11806: LD_VAR 0 8
11810: PUSH
11811: LD_INT 4
11813: GREATER
11814: IFFALSE 11818
// break ;
11816: GO 11927
// x := personel [ i ] ;
11818: LD_ADDR_VAR 0 13
11822: PUSH
11823: LD_VAR 0 6
11827: PUSH
11828: LD_VAR 0 8
11832: ARRAY
11833: ST_TO_ADDR
// if x = - 1 then
11834: LD_VAR 0 13
11838: PUSH
11839: LD_INT 1
11841: NEG
11842: EQUAL
11843: IFFALSE 11847
// continue ;
11845: GO 11803
// PrepareHuman ( false , i , skill ) ;
11847: LD_INT 0
11849: PPUSH
11850: LD_VAR 0 8
11854: PPUSH
11855: LD_VAR 0 4
11859: PPUSH
11860: CALL_OW 380
// un := CreateHuman ;
11864: LD_ADDR_VAR 0 14
11868: PUSH
11869: CALL_OW 44
11873: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 1
11883: PPUSH
11884: CALL_OW 250
11888: PPUSH
11889: LD_VAR 0 1
11893: PPUSH
11894: CALL_OW 251
11898: PPUSH
11899: LD_INT 10
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: CALL_OW 50
// result := result ^ un ;
11909: LD_ADDR_VAR 0 7
11913: PUSH
11914: LD_VAR 0 7
11918: PUSH
11919: LD_VAR 0 14
11923: ADD
11924: ST_TO_ADDR
// end ;
11925: GO 11803
11927: POP
11928: POP
// end ; end ;
11929: LD_VAR 0 7
11933: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11934: LD_INT 0
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
11940: PPUSH
11941: PPUSH
11942: PPUSH
11943: PPUSH
11944: PPUSH
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
// result := false ;
11952: LD_ADDR_VAR 0 3
11956: PUSH
11957: LD_INT 0
11959: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11960: LD_VAR 0 1
11964: NOT
11965: PUSH
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 266
11975: PUSH
11976: LD_INT 32
11978: PUSH
11979: LD_INT 33
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: IN
11986: NOT
11987: OR
11988: IFFALSE 11992
// exit ;
11990: GO 13101
// nat := GetNation ( tower ) ;
11992: LD_ADDR_VAR 0 12
11996: PUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 248
12006: ST_TO_ADDR
// side := GetSide ( tower ) ;
12007: LD_ADDR_VAR 0 16
12011: PUSH
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 255
12021: ST_TO_ADDR
// x := GetX ( tower ) ;
12022: LD_ADDR_VAR 0 10
12026: PUSH
12027: LD_VAR 0 1
12031: PPUSH
12032: CALL_OW 250
12036: ST_TO_ADDR
// y := GetY ( tower ) ;
12037: LD_ADDR_VAR 0 11
12041: PUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 251
12051: ST_TO_ADDR
// if not x or not y then
12052: LD_VAR 0 10
12056: NOT
12057: PUSH
12058: LD_VAR 0 11
12062: NOT
12063: OR
12064: IFFALSE 12068
// exit ;
12066: GO 13101
// weapon := 0 ;
12068: LD_ADDR_VAR 0 18
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// fac_list := [ ] ;
12076: LD_ADDR_VAR 0 17
12080: PUSH
12081: EMPTY
12082: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12083: LD_ADDR_VAR 0 6
12087: PUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 274
12097: PPUSH
12098: LD_VAR 0 2
12102: PPUSH
12103: LD_INT 0
12105: PPUSH
12106: CALL 9672 0 3
12110: PPUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 72
12125: ST_TO_ADDR
// if not factories then
12126: LD_VAR 0 6
12130: NOT
12131: IFFALSE 12135
// exit ;
12133: GO 13101
// for i in factories do
12135: LD_ADDR_VAR 0 8
12139: PUSH
12140: LD_VAR 0 6
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12171
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12148: LD_ADDR_VAR 0 17
12152: PUSH
12153: LD_VAR 0 17
12157: PUSH
12158: LD_VAR 0 8
12162: PPUSH
12163: CALL_OW 478
12167: UNION
12168: ST_TO_ADDR
12169: GO 12145
12171: POP
12172: POP
// if not fac_list then
12173: LD_VAR 0 17
12177: NOT
12178: IFFALSE 12182
// exit ;
12180: GO 13101
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_INT 4
12189: PUSH
12190: LD_INT 5
12192: PUSH
12193: LD_INT 9
12195: PUSH
12196: LD_INT 10
12198: PUSH
12199: LD_INT 6
12201: PUSH
12202: LD_INT 7
12204: PUSH
12205: LD_INT 11
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 27
12219: PUSH
12220: LD_INT 28
12222: PUSH
12223: LD_INT 26
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 43
12237: PUSH
12238: LD_INT 44
12240: PUSH
12241: LD_INT 46
12243: PUSH
12244: LD_INT 45
12246: PUSH
12247: LD_INT 47
12249: PUSH
12250: LD_INT 49
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_VAR 0 12
12270: ARRAY
12271: ST_TO_ADDR
// list := list isect fac_list ;
12272: LD_ADDR_VAR 0 5
12276: PUSH
12277: LD_VAR 0 5
12281: PUSH
12282: LD_VAR 0 17
12286: ISECT
12287: ST_TO_ADDR
// if not list then
12288: LD_VAR 0 5
12292: NOT
12293: IFFALSE 12297
// exit ;
12295: GO 13101
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12297: LD_VAR 0 12
12301: PUSH
12302: LD_INT 3
12304: EQUAL
12305: PUSH
12306: LD_INT 49
12308: PUSH
12309: LD_VAR 0 5
12313: IN
12314: AND
12315: PUSH
12316: LD_INT 31
12318: PPUSH
12319: LD_VAR 0 16
12323: PPUSH
12324: CALL_OW 321
12328: PUSH
12329: LD_INT 2
12331: EQUAL
12332: AND
12333: IFFALSE 12393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12335: LD_INT 22
12337: PUSH
12338: LD_VAR 0 16
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 35
12349: PUSH
12350: LD_INT 49
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 91
12359: PUSH
12360: LD_VAR 0 1
12364: PUSH
12365: LD_INT 10
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 69
12382: NOT
12383: IFFALSE 12393
// weapon := ru_time_lapser ;
12385: LD_ADDR_VAR 0 18
12389: PUSH
12390: LD_INT 49
12392: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12393: LD_VAR 0 12
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: IN
12408: PUSH
12409: LD_INT 11
12411: PUSH
12412: LD_VAR 0 5
12416: IN
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_VAR 0 5
12425: IN
12426: OR
12427: AND
12428: PUSH
12429: LD_INT 6
12431: PPUSH
12432: LD_VAR 0 16
12436: PPUSH
12437: CALL_OW 321
12441: PUSH
12442: LD_INT 2
12444: EQUAL
12445: AND
12446: IFFALSE 12611
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12448: LD_INT 22
12450: PUSH
12451: LD_VAR 0 16
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 2
12462: PUSH
12463: LD_INT 35
12465: PUSH
12466: LD_INT 11
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 35
12475: PUSH
12476: LD_INT 30
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 91
12490: PUSH
12491: LD_VAR 0 1
12495: PUSH
12496: LD_INT 18
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 69
12513: NOT
12514: PUSH
12515: LD_INT 22
12517: PUSH
12518: LD_VAR 0 16
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: LD_INT 30
12532: PUSH
12533: LD_INT 32
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 30
12542: PUSH
12543: LD_INT 33
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 91
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 12
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: PPUSH
12579: CALL_OW 69
12583: PUSH
12584: LD_INT 2
12586: GREATER
12587: AND
12588: IFFALSE 12611
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12590: LD_ADDR_VAR 0 18
12594: PUSH
12595: LD_INT 11
12597: PUSH
12598: LD_INT 30
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_VAR 0 12
12609: ARRAY
12610: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12611: LD_VAR 0 18
12615: NOT
12616: PUSH
12617: LD_INT 40
12619: PPUSH
12620: LD_VAR 0 16
12624: PPUSH
12625: CALL_OW 321
12629: PUSH
12630: LD_INT 2
12632: EQUAL
12633: AND
12634: PUSH
12635: LD_INT 7
12637: PUSH
12638: LD_VAR 0 5
12642: IN
12643: PUSH
12644: LD_INT 28
12646: PUSH
12647: LD_VAR 0 5
12651: IN
12652: OR
12653: PUSH
12654: LD_INT 45
12656: PUSH
12657: LD_VAR 0 5
12661: IN
12662: OR
12663: AND
12664: IFFALSE 12918
// begin hex := GetHexInfo ( x , y ) ;
12666: LD_ADDR_VAR 0 4
12670: PUSH
12671: LD_VAR 0 10
12675: PPUSH
12676: LD_VAR 0 11
12680: PPUSH
12681: CALL_OW 546
12685: ST_TO_ADDR
// if hex [ 1 ] then
12686: LD_VAR 0 4
12690: PUSH
12691: LD_INT 1
12693: ARRAY
12694: IFFALSE 12698
// exit ;
12696: GO 13101
// height := hex [ 2 ] ;
12698: LD_ADDR_VAR 0 15
12702: PUSH
12703: LD_VAR 0 4
12707: PUSH
12708: LD_INT 2
12710: ARRAY
12711: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12712: LD_ADDR_VAR 0 14
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: LD_INT 3
12725: PUSH
12726: LD_INT 5
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: ST_TO_ADDR
// for i in tmp do
12735: LD_ADDR_VAR 0 8
12739: PUSH
12740: LD_VAR 0 14
12744: PUSH
12745: FOR_IN
12746: IFFALSE 12916
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12748: LD_ADDR_VAR 0 9
12752: PUSH
12753: LD_VAR 0 10
12757: PPUSH
12758: LD_VAR 0 8
12762: PPUSH
12763: LD_INT 5
12765: PPUSH
12766: CALL_OW 272
12770: PUSH
12771: LD_VAR 0 11
12775: PPUSH
12776: LD_VAR 0 8
12780: PPUSH
12781: LD_INT 5
12783: PPUSH
12784: CALL_OW 273
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12793: LD_VAR 0 9
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: PPUSH
12802: LD_VAR 0 9
12806: PUSH
12807: LD_INT 2
12809: ARRAY
12810: PPUSH
12811: CALL_OW 488
12815: IFFALSE 12914
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12817: LD_ADDR_VAR 0 4
12821: PUSH
12822: LD_VAR 0 9
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: LD_VAR 0 9
12835: PUSH
12836: LD_INT 2
12838: ARRAY
12839: PPUSH
12840: CALL_OW 546
12844: ST_TO_ADDR
// if hex [ 1 ] then
12845: LD_VAR 0 4
12849: PUSH
12850: LD_INT 1
12852: ARRAY
12853: IFFALSE 12857
// continue ;
12855: GO 12745
// h := hex [ 2 ] ;
12857: LD_ADDR_VAR 0 13
12861: PUSH
12862: LD_VAR 0 4
12866: PUSH
12867: LD_INT 2
12869: ARRAY
12870: ST_TO_ADDR
// if h + 7 < height then
12871: LD_VAR 0 13
12875: PUSH
12876: LD_INT 7
12878: PLUS
12879: PUSH
12880: LD_VAR 0 15
12884: LESS
12885: IFFALSE 12914
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12887: LD_ADDR_VAR 0 18
12891: PUSH
12892: LD_INT 7
12894: PUSH
12895: LD_INT 28
12897: PUSH
12898: LD_INT 45
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_VAR 0 12
12910: ARRAY
12911: ST_TO_ADDR
// break ;
12912: GO 12916
// end ; end ; end ;
12914: GO 12745
12916: POP
12917: POP
// end ; if not weapon then
12918: LD_VAR 0 18
12922: NOT
12923: IFFALSE 12983
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12925: LD_ADDR_VAR 0 5
12929: PUSH
12930: LD_VAR 0 5
12934: PUSH
12935: LD_INT 11
12937: PUSH
12938: LD_INT 30
12940: PUSH
12941: LD_INT 49
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: DIFF
12949: ST_TO_ADDR
// if not list then
12950: LD_VAR 0 5
12954: NOT
12955: IFFALSE 12959
// exit ;
12957: GO 13101
// weapon := list [ rand ( 1 , list ) ] ;
12959: LD_ADDR_VAR 0 18
12963: PUSH
12964: LD_VAR 0 5
12968: PUSH
12969: LD_INT 1
12971: PPUSH
12972: LD_VAR 0 5
12976: PPUSH
12977: CALL_OW 12
12981: ARRAY
12982: ST_TO_ADDR
// end ; if weapon then
12983: LD_VAR 0 18
12987: IFFALSE 13101
// begin tmp := CostOfWeapon ( weapon ) ;
12989: LD_ADDR_VAR 0 14
12993: PUSH
12994: LD_VAR 0 18
12998: PPUSH
12999: CALL_OW 451
13003: ST_TO_ADDR
// j := GetBase ( tower ) ;
13004: LD_ADDR_VAR 0 9
13008: PUSH
13009: LD_VAR 0 1
13013: PPUSH
13014: CALL_OW 274
13018: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13019: LD_VAR 0 9
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 275
13031: PUSH
13032: LD_VAR 0 14
13036: PUSH
13037: LD_INT 1
13039: ARRAY
13040: GREATEREQUAL
13041: PUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 2
13049: PPUSH
13050: CALL_OW 275
13054: PUSH
13055: LD_VAR 0 14
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: GREATEREQUAL
13064: AND
13065: PUSH
13066: LD_VAR 0 9
13070: PPUSH
13071: LD_INT 3
13073: PPUSH
13074: CALL_OW 275
13078: PUSH
13079: LD_VAR 0 14
13083: PUSH
13084: LD_INT 3
13086: ARRAY
13087: GREATEREQUAL
13088: AND
13089: IFFALSE 13101
// result := weapon ;
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_VAR 0 18
13100: ST_TO_ADDR
// end ; end ;
13101: LD_VAR 0 3
13105: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13106: LD_INT 0
13108: PPUSH
13109: PPUSH
// result := true ;
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: LD_INT 1
13117: ST_TO_ADDR
// if array1 = array2 then
13118: LD_VAR 0 1
13122: PUSH
13123: LD_VAR 0 2
13127: EQUAL
13128: IFFALSE 13188
// begin for i = 1 to array1 do
13130: LD_ADDR_VAR 0 4
13134: PUSH
13135: DOUBLE
13136: LD_INT 1
13138: DEC
13139: ST_TO_ADDR
13140: LD_VAR 0 1
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13184
// if array1 [ i ] <> array2 [ i ] then
13148: LD_VAR 0 1
13152: PUSH
13153: LD_VAR 0 4
13157: ARRAY
13158: PUSH
13159: LD_VAR 0 2
13163: PUSH
13164: LD_VAR 0 4
13168: ARRAY
13169: NONEQUAL
13170: IFFALSE 13182
// begin result := false ;
13172: LD_ADDR_VAR 0 3
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// break ;
13180: GO 13184
// end ;
13182: GO 13145
13184: POP
13185: POP
// end else
13186: GO 13196
// result := false ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 0
13195: ST_TO_ADDR
// end ;
13196: LD_VAR 0 3
13200: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13201: LD_INT 0
13203: PPUSH
13204: PPUSH
// if not array1 or not array2 then
13205: LD_VAR 0 1
13209: NOT
13210: PUSH
13211: LD_VAR 0 2
13215: NOT
13216: OR
13217: IFFALSE 13221
// exit ;
13219: GO 13285
// result := true ;
13221: LD_ADDR_VAR 0 3
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// for i = 1 to array1 do
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: DOUBLE
13235: LD_INT 1
13237: DEC
13238: ST_TO_ADDR
13239: LD_VAR 0 1
13243: PUSH
13244: FOR_TO
13245: IFFALSE 13283
// if array1 [ i ] <> array2 [ i ] then
13247: LD_VAR 0 1
13251: PUSH
13252: LD_VAR 0 4
13256: ARRAY
13257: PUSH
13258: LD_VAR 0 2
13262: PUSH
13263: LD_VAR 0 4
13267: ARRAY
13268: NONEQUAL
13269: IFFALSE 13281
// begin result := false ;
13271: LD_ADDR_VAR 0 3
13275: PUSH
13276: LD_INT 0
13278: ST_TO_ADDR
// break ;
13279: GO 13283
// end ;
13281: GO 13244
13283: POP
13284: POP
// end ;
13285: LD_VAR 0 3
13289: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13290: LD_INT 0
13292: PPUSH
13293: PPUSH
13294: PPUSH
// pom := GetBase ( fac ) ;
13295: LD_ADDR_VAR 0 5
13299: PUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 274
13309: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13310: LD_ADDR_VAR 0 4
13314: PUSH
13315: LD_VAR 0 2
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: LD_VAR 0 2
13328: PUSH
13329: LD_INT 2
13331: ARRAY
13332: PPUSH
13333: LD_VAR 0 2
13337: PUSH
13338: LD_INT 3
13340: ARRAY
13341: PPUSH
13342: LD_VAR 0 2
13346: PUSH
13347: LD_INT 4
13349: ARRAY
13350: PPUSH
13351: CALL_OW 449
13355: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13356: LD_ADDR_VAR 0 3
13360: PUSH
13361: LD_VAR 0 5
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: CALL_OW 275
13373: PUSH
13374: LD_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ARRAY
13382: GREATEREQUAL
13383: PUSH
13384: LD_VAR 0 5
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 275
13396: PUSH
13397: LD_VAR 0 4
13401: PUSH
13402: LD_INT 2
13404: ARRAY
13405: GREATEREQUAL
13406: AND
13407: PUSH
13408: LD_VAR 0 5
13412: PPUSH
13413: LD_INT 3
13415: PPUSH
13416: CALL_OW 275
13420: PUSH
13421: LD_VAR 0 4
13425: PUSH
13426: LD_INT 3
13428: ARRAY
13429: GREATEREQUAL
13430: AND
13431: ST_TO_ADDR
// end ;
13432: LD_VAR 0 3
13436: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
// pom := GetBase ( building ) ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 274
13457: ST_TO_ADDR
// if not pom then
13458: LD_VAR 0 3
13462: NOT
13463: IFFALSE 13467
// exit ;
13465: GO 13637
// btype := GetBType ( building ) ;
13467: LD_ADDR_VAR 0 5
13471: PUSH
13472: LD_VAR 0 1
13476: PPUSH
13477: CALL_OW 266
13481: ST_TO_ADDR
// if btype = b_armoury then
13482: LD_VAR 0 5
13486: PUSH
13487: LD_INT 4
13489: EQUAL
13490: IFFALSE 13500
// btype := b_barracks ;
13492: LD_ADDR_VAR 0 5
13496: PUSH
13497: LD_INT 5
13499: ST_TO_ADDR
// if btype = b_depot then
13500: LD_VAR 0 5
13504: PUSH
13505: LD_INT 0
13507: EQUAL
13508: IFFALSE 13518
// btype := b_warehouse ;
13510: LD_ADDR_VAR 0 5
13514: PUSH
13515: LD_INT 1
13517: ST_TO_ADDR
// if btype = b_workshop then
13518: LD_VAR 0 5
13522: PUSH
13523: LD_INT 2
13525: EQUAL
13526: IFFALSE 13536
// btype := b_factory ;
13528: LD_ADDR_VAR 0 5
13532: PUSH
13533: LD_INT 3
13535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13536: LD_ADDR_VAR 0 4
13540: PUSH
13541: LD_VAR 0 5
13545: PPUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 248
13555: PPUSH
13556: CALL_OW 450
13560: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 275
13578: PUSH
13579: LD_VAR 0 4
13583: PUSH
13584: LD_INT 1
13586: ARRAY
13587: GREATEREQUAL
13588: PUSH
13589: LD_VAR 0 3
13593: PPUSH
13594: LD_INT 2
13596: PPUSH
13597: CALL_OW 275
13601: PUSH
13602: LD_VAR 0 4
13606: PUSH
13607: LD_INT 2
13609: ARRAY
13610: GREATEREQUAL
13611: AND
13612: PUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 3
13620: PPUSH
13621: CALL_OW 275
13625: PUSH
13626: LD_VAR 0 4
13630: PUSH
13631: LD_INT 3
13633: ARRAY
13634: GREATEREQUAL
13635: AND
13636: ST_TO_ADDR
// end ;
13637: LD_VAR 0 2
13641: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13642: LD_INT 0
13644: PPUSH
13645: PPUSH
13646: PPUSH
// pom := GetBase ( building ) ;
13647: LD_ADDR_VAR 0 4
13651: PUSH
13652: LD_VAR 0 1
13656: PPUSH
13657: CALL_OW 274
13661: ST_TO_ADDR
// if not pom then
13662: LD_VAR 0 4
13666: NOT
13667: IFFALSE 13671
// exit ;
13669: GO 13772
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13671: LD_ADDR_VAR 0 5
13675: PUSH
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_VAR 0 1
13685: PPUSH
13686: CALL_OW 248
13690: PPUSH
13691: CALL_OW 450
13695: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13696: LD_ADDR_VAR 0 3
13700: PUSH
13701: LD_VAR 0 4
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 275
13713: PUSH
13714: LD_VAR 0 5
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: GREATEREQUAL
13723: PUSH
13724: LD_VAR 0 4
13728: PPUSH
13729: LD_INT 2
13731: PPUSH
13732: CALL_OW 275
13736: PUSH
13737: LD_VAR 0 5
13741: PUSH
13742: LD_INT 2
13744: ARRAY
13745: GREATEREQUAL
13746: AND
13747: PUSH
13748: LD_VAR 0 4
13752: PPUSH
13753: LD_INT 3
13755: PPUSH
13756: CALL_OW 275
13760: PUSH
13761: LD_VAR 0 5
13765: PUSH
13766: LD_INT 3
13768: ARRAY
13769: GREATEREQUAL
13770: AND
13771: ST_TO_ADDR
// end ;
13772: LD_VAR 0 3
13776: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13777: LD_INT 0
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
13787: PPUSH
13788: PPUSH
13789: PPUSH
// result := false ;
13790: LD_ADDR_VAR 0 8
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13798: LD_VAR 0 5
13802: NOT
13803: PUSH
13804: LD_VAR 0 1
13808: NOT
13809: OR
13810: PUSH
13811: LD_VAR 0 2
13815: NOT
13816: OR
13817: PUSH
13818: LD_VAR 0 3
13822: NOT
13823: OR
13824: IFFALSE 13828
// exit ;
13826: GO 14642
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13828: LD_ADDR_VAR 0 14
13832: PUSH
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_VAR 0 4
13852: PPUSH
13853: LD_VAR 0 5
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: CALL_OW 248
13866: PPUSH
13867: LD_INT 0
13869: PPUSH
13870: CALL 15895 0 6
13874: ST_TO_ADDR
// if not hexes then
13875: LD_VAR 0 14
13879: NOT
13880: IFFALSE 13884
// exit ;
13882: GO 14642
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13884: LD_ADDR_VAR 0 17
13888: PUSH
13889: LD_VAR 0 5
13893: PPUSH
13894: LD_INT 22
13896: PUSH
13897: LD_VAR 0 13
13901: PPUSH
13902: CALL_OW 255
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 30
13916: PUSH
13917: LD_INT 0
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
// for i = 1 to hexes do
13948: LD_ADDR_VAR 0 9
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_VAR 0 14
13962: PUSH
13963: FOR_TO
13964: IFFALSE 14640
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13966: LD_ADDR_VAR 0 13
13970: PUSH
13971: LD_VAR 0 14
13975: PUSH
13976: LD_VAR 0 9
13980: ARRAY
13981: PUSH
13982: LD_INT 1
13984: ARRAY
13985: PPUSH
13986: LD_VAR 0 14
13990: PUSH
13991: LD_VAR 0 9
13995: ARRAY
13996: PUSH
13997: LD_INT 2
13999: ARRAY
14000: PPUSH
14001: CALL_OW 428
14005: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14006: LD_VAR 0 14
14010: PUSH
14011: LD_VAR 0 9
14015: ARRAY
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: LD_VAR 0 14
14025: PUSH
14026: LD_VAR 0 9
14030: ARRAY
14031: PUSH
14032: LD_INT 2
14034: ARRAY
14035: PPUSH
14036: CALL_OW 351
14040: PUSH
14041: LD_VAR 0 14
14045: PUSH
14046: LD_VAR 0 9
14050: ARRAY
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PPUSH
14056: LD_VAR 0 14
14060: PUSH
14061: LD_VAR 0 9
14065: ARRAY
14066: PUSH
14067: LD_INT 2
14069: ARRAY
14070: PPUSH
14071: CALL_OW 488
14075: NOT
14076: OR
14077: PUSH
14078: LD_VAR 0 13
14082: PPUSH
14083: CALL_OW 247
14087: PUSH
14088: LD_INT 3
14090: EQUAL
14091: OR
14092: IFFALSE 14098
// exit ;
14094: POP
14095: POP
14096: GO 14642
// if not tmp then
14098: LD_VAR 0 13
14102: NOT
14103: IFFALSE 14107
// continue ;
14105: GO 13963
// result := true ;
14107: LD_ADDR_VAR 0 8
14111: PUSH
14112: LD_INT 1
14114: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14115: LD_VAR 0 6
14119: PUSH
14120: LD_VAR 0 13
14124: PPUSH
14125: CALL_OW 247
14129: PUSH
14130: LD_INT 2
14132: EQUAL
14133: AND
14134: PUSH
14135: LD_VAR 0 13
14139: PPUSH
14140: CALL_OW 263
14144: PUSH
14145: LD_INT 1
14147: EQUAL
14148: AND
14149: IFFALSE 14313
// begin if IsDrivenBy ( tmp ) then
14151: LD_VAR 0 13
14155: PPUSH
14156: CALL_OW 311
14160: IFFALSE 14164
// continue ;
14162: GO 13963
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14164: LD_VAR 0 6
14168: PPUSH
14169: LD_INT 3
14171: PUSH
14172: LD_INT 60
14174: PUSH
14175: EMPTY
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 3
14184: PUSH
14185: LD_INT 55
14187: PUSH
14188: EMPTY
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PPUSH
14199: CALL_OW 72
14203: IFFALSE 14311
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14205: LD_ADDR_VAR 0 18
14209: PUSH
14210: LD_VAR 0 6
14214: PPUSH
14215: LD_INT 3
14217: PUSH
14218: LD_INT 60
14220: PUSH
14221: EMPTY
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 3
14230: PUSH
14231: LD_INT 55
14233: PUSH
14234: EMPTY
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PPUSH
14245: CALL_OW 72
14249: PUSH
14250: LD_INT 1
14252: ARRAY
14253: ST_TO_ADDR
// if IsInUnit ( driver ) then
14254: LD_VAR 0 18
14258: PPUSH
14259: CALL_OW 310
14263: IFFALSE 14274
// ComExit ( driver ) ;
14265: LD_VAR 0 18
14269: PPUSH
14270: CALL 39674 0 1
// AddComEnterUnit ( driver , tmp ) ;
14274: LD_VAR 0 18
14278: PPUSH
14279: LD_VAR 0 13
14283: PPUSH
14284: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14288: LD_VAR 0 18
14292: PPUSH
14293: LD_VAR 0 7
14297: PPUSH
14298: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14302: LD_VAR 0 18
14306: PPUSH
14307: CALL_OW 181
// end ; continue ;
14311: GO 13963
// end ; if not cleaners or not tmp in cleaners then
14313: LD_VAR 0 6
14317: NOT
14318: PUSH
14319: LD_VAR 0 13
14323: PUSH
14324: LD_VAR 0 6
14328: IN
14329: NOT
14330: OR
14331: IFFALSE 14638
// begin if dep then
14333: LD_VAR 0 17
14337: IFFALSE 14473
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14339: LD_ADDR_VAR 0 16
14343: PUSH
14344: LD_VAR 0 17
14348: PUSH
14349: LD_INT 1
14351: ARRAY
14352: PPUSH
14353: CALL_OW 250
14357: PPUSH
14358: LD_VAR 0 17
14362: PUSH
14363: LD_INT 1
14365: ARRAY
14366: PPUSH
14367: CALL_OW 254
14371: PPUSH
14372: LD_INT 5
14374: PPUSH
14375: CALL_OW 272
14379: PUSH
14380: LD_VAR 0 17
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PPUSH
14389: CALL_OW 251
14393: PPUSH
14394: LD_VAR 0 17
14398: PUSH
14399: LD_INT 1
14401: ARRAY
14402: PPUSH
14403: CALL_OW 254
14407: PPUSH
14408: LD_INT 5
14410: PPUSH
14411: CALL_OW 273
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14420: LD_VAR 0 16
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: PPUSH
14429: LD_VAR 0 16
14433: PUSH
14434: LD_INT 2
14436: ARRAY
14437: PPUSH
14438: CALL_OW 488
14442: IFFALSE 14473
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14444: LD_VAR 0 13
14448: PPUSH
14449: LD_VAR 0 16
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PPUSH
14458: LD_VAR 0 16
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PPUSH
14467: CALL_OW 111
// continue ;
14471: GO 13963
// end ; end ; r := GetDir ( tmp ) ;
14473: LD_ADDR_VAR 0 15
14477: PUSH
14478: LD_VAR 0 13
14482: PPUSH
14483: CALL_OW 254
14487: ST_TO_ADDR
// if r = 5 then
14488: LD_VAR 0 15
14492: PUSH
14493: LD_INT 5
14495: EQUAL
14496: IFFALSE 14506
// r := 0 ;
14498: LD_ADDR_VAR 0 15
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// for j = r to 5 do
14506: LD_ADDR_VAR 0 10
14510: PUSH
14511: DOUBLE
14512: LD_VAR 0 15
14516: DEC
14517: ST_TO_ADDR
14518: LD_INT 5
14520: PUSH
14521: FOR_TO
14522: IFFALSE 14636
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14524: LD_ADDR_VAR 0 11
14528: PUSH
14529: LD_VAR 0 13
14533: PPUSH
14534: CALL_OW 250
14538: PPUSH
14539: LD_VAR 0 10
14543: PPUSH
14544: LD_INT 2
14546: PPUSH
14547: CALL_OW 272
14551: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14552: LD_ADDR_VAR 0 12
14556: PUSH
14557: LD_VAR 0 13
14561: PPUSH
14562: CALL_OW 251
14566: PPUSH
14567: LD_VAR 0 10
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 273
14579: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14580: LD_VAR 0 11
14584: PPUSH
14585: LD_VAR 0 12
14589: PPUSH
14590: CALL_OW 488
14594: PUSH
14595: LD_VAR 0 11
14599: PPUSH
14600: LD_VAR 0 12
14604: PPUSH
14605: CALL_OW 428
14609: NOT
14610: AND
14611: IFFALSE 14634
// begin ComMoveXY ( tmp , _x , _y ) ;
14613: LD_VAR 0 13
14617: PPUSH
14618: LD_VAR 0 11
14622: PPUSH
14623: LD_VAR 0 12
14627: PPUSH
14628: CALL_OW 111
// break ;
14632: GO 14636
// end ; end ;
14634: GO 14521
14636: POP
14637: POP
// end ; end ;
14638: GO 13963
14640: POP
14641: POP
// end ;
14642: LD_VAR 0 8
14646: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14647: LD_INT 0
14649: PPUSH
// result := true ;
14650: LD_ADDR_VAR 0 3
14654: PUSH
14655: LD_INT 1
14657: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14658: LD_VAR 0 2
14662: PUSH
14663: LD_INT 24
14665: DOUBLE
14666: EQUAL
14667: IFTRUE 14677
14669: LD_INT 33
14671: DOUBLE
14672: EQUAL
14673: IFTRUE 14677
14675: GO 14702
14677: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14678: LD_ADDR_VAR 0 3
14682: PUSH
14683: LD_INT 32
14685: PPUSH
14686: LD_VAR 0 1
14690: PPUSH
14691: CALL_OW 321
14695: PUSH
14696: LD_INT 2
14698: EQUAL
14699: ST_TO_ADDR
14700: GO 15018
14702: LD_INT 20
14704: DOUBLE
14705: EQUAL
14706: IFTRUE 14710
14708: GO 14735
14710: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_INT 6
14718: PPUSH
14719: LD_VAR 0 1
14723: PPUSH
14724: CALL_OW 321
14728: PUSH
14729: LD_INT 2
14731: EQUAL
14732: ST_TO_ADDR
14733: GO 15018
14735: LD_INT 22
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14749
14741: LD_INT 36
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14774
14749: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 15
14757: PPUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 321
14767: PUSH
14768: LD_INT 2
14770: EQUAL
14771: ST_TO_ADDR
14772: GO 15018
14774: LD_INT 30
14776: DOUBLE
14777: EQUAL
14778: IFTRUE 14782
14780: GO 14807
14782: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 20
14790: PPUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 321
14800: PUSH
14801: LD_INT 2
14803: EQUAL
14804: ST_TO_ADDR
14805: GO 15018
14807: LD_INT 28
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14821
14813: LD_INT 21
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 14846
14821: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_INT 21
14829: PPUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL_OW 321
14839: PUSH
14840: LD_INT 2
14842: EQUAL
14843: ST_TO_ADDR
14844: GO 15018
14846: LD_INT 16
14848: DOUBLE
14849: EQUAL
14850: IFTRUE 14854
14852: GO 14879
14854: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14855: LD_ADDR_VAR 0 3
14859: PUSH
14860: LD_INT 84
14862: PPUSH
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 321
14872: PUSH
14873: LD_INT 2
14875: EQUAL
14876: ST_TO_ADDR
14877: GO 15018
14879: LD_INT 19
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14893
14885: LD_INT 23
14887: DOUBLE
14888: EQUAL
14889: IFTRUE 14893
14891: GO 14918
14893: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14894: LD_ADDR_VAR 0 3
14898: PUSH
14899: LD_INT 83
14901: PPUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 321
14911: PUSH
14912: LD_INT 2
14914: EQUAL
14915: ST_TO_ADDR
14916: GO 15018
14918: LD_INT 17
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 14951
14926: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: LD_INT 39
14934: PPUSH
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 321
14944: PUSH
14945: LD_INT 2
14947: EQUAL
14948: ST_TO_ADDR
14949: GO 15018
14951: LD_INT 18
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14984
14959: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 40
14967: PPUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 321
14977: PUSH
14978: LD_INT 2
14980: EQUAL
14981: ST_TO_ADDR
14982: GO 15018
14984: LD_INT 27
14986: DOUBLE
14987: EQUAL
14988: IFTRUE 14992
14990: GO 15017
14992: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_INT 35
15000: PPUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 321
15010: PUSH
15011: LD_INT 2
15013: EQUAL
15014: ST_TO_ADDR
15015: GO 15018
15017: POP
// end ;
15018: LD_VAR 0 3
15022: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15023: LD_INT 0
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
15035: PPUSH
// result := false ;
15036: LD_ADDR_VAR 0 6
15040: PUSH
15041: LD_INT 0
15043: ST_TO_ADDR
// if btype = b_depot then
15044: LD_VAR 0 2
15048: PUSH
15049: LD_INT 0
15051: EQUAL
15052: IFFALSE 15064
// begin result := true ;
15054: LD_ADDR_VAR 0 6
15058: PUSH
15059: LD_INT 1
15061: ST_TO_ADDR
// exit ;
15062: GO 15890
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15064: LD_VAR 0 1
15068: NOT
15069: PUSH
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 266
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: IN
15090: NOT
15091: OR
15092: PUSH
15093: LD_VAR 0 2
15097: NOT
15098: OR
15099: PUSH
15100: LD_VAR 0 5
15104: PUSH
15105: LD_INT 0
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: IN
15131: NOT
15132: OR
15133: PUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: LD_VAR 0 4
15143: PPUSH
15144: CALL_OW 488
15148: NOT
15149: OR
15150: IFFALSE 15154
// exit ;
15152: GO 15890
// side := GetSide ( depot ) ;
15154: LD_ADDR_VAR 0 9
15158: PUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 255
15168: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15169: LD_VAR 0 9
15173: PPUSH
15174: LD_VAR 0 2
15178: PPUSH
15179: CALL 14647 0 2
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15890
// pom := GetBase ( depot ) ;
15188: LD_ADDR_VAR 0 10
15192: PUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 274
15202: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15203: LD_ADDR_VAR 0 11
15207: PUSH
15208: LD_VAR 0 2
15212: PPUSH
15213: LD_VAR 0 1
15217: PPUSH
15218: CALL_OW 248
15222: PPUSH
15223: CALL_OW 450
15227: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15228: LD_VAR 0 10
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 275
15240: PUSH
15241: LD_VAR 0 11
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: GREATEREQUAL
15250: PUSH
15251: LD_VAR 0 10
15255: PPUSH
15256: LD_INT 2
15258: PPUSH
15259: CALL_OW 275
15263: PUSH
15264: LD_VAR 0 11
15268: PUSH
15269: LD_INT 2
15271: ARRAY
15272: GREATEREQUAL
15273: AND
15274: PUSH
15275: LD_VAR 0 10
15279: PPUSH
15280: LD_INT 3
15282: PPUSH
15283: CALL_OW 275
15287: PUSH
15288: LD_VAR 0 11
15292: PUSH
15293: LD_INT 3
15295: ARRAY
15296: GREATEREQUAL
15297: AND
15298: NOT
15299: IFFALSE 15303
// exit ;
15301: GO 15890
// if GetBType ( depot ) = b_depot then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 266
15312: PUSH
15313: LD_INT 0
15315: EQUAL
15316: IFFALSE 15328
// dist := 28 else
15318: LD_ADDR_VAR 0 14
15322: PUSH
15323: LD_INT 28
15325: ST_TO_ADDR
15326: GO 15336
// dist := 36 ;
15328: LD_ADDR_VAR 0 14
15332: PUSH
15333: LD_INT 36
15335: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_VAR 0 3
15345: PPUSH
15346: LD_VAR 0 4
15350: PPUSH
15351: CALL_OW 297
15355: PUSH
15356: LD_VAR 0 14
15360: GREATER
15361: IFFALSE 15365
// exit ;
15363: GO 15890
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15365: LD_ADDR_VAR 0 12
15369: PUSH
15370: LD_VAR 0 2
15374: PPUSH
15375: LD_VAR 0 3
15379: PPUSH
15380: LD_VAR 0 4
15384: PPUSH
15385: LD_VAR 0 5
15389: PPUSH
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 248
15399: PPUSH
15400: LD_INT 0
15402: PPUSH
15403: CALL 15895 0 6
15407: ST_TO_ADDR
// if not hexes then
15408: LD_VAR 0 12
15412: NOT
15413: IFFALSE 15417
// exit ;
15415: GO 15890
// hex := GetHexInfo ( x , y ) ;
15417: LD_ADDR_VAR 0 15
15421: PUSH
15422: LD_VAR 0 3
15426: PPUSH
15427: LD_VAR 0 4
15431: PPUSH
15432: CALL_OW 546
15436: ST_TO_ADDR
// if hex [ 1 ] then
15437: LD_VAR 0 15
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: IFFALSE 15449
// exit ;
15447: GO 15890
// height := hex [ 2 ] ;
15449: LD_ADDR_VAR 0 13
15453: PUSH
15454: LD_VAR 0 15
15458: PUSH
15459: LD_INT 2
15461: ARRAY
15462: ST_TO_ADDR
// for i = 1 to hexes do
15463: LD_ADDR_VAR 0 7
15467: PUSH
15468: DOUBLE
15469: LD_INT 1
15471: DEC
15472: ST_TO_ADDR
15473: LD_VAR 0 12
15477: PUSH
15478: FOR_TO
15479: IFFALSE 15809
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15481: LD_VAR 0 12
15485: PUSH
15486: LD_VAR 0 7
15490: ARRAY
15491: PUSH
15492: LD_INT 1
15494: ARRAY
15495: PPUSH
15496: LD_VAR 0 12
15500: PUSH
15501: LD_VAR 0 7
15505: ARRAY
15506: PUSH
15507: LD_INT 2
15509: ARRAY
15510: PPUSH
15511: CALL_OW 488
15515: NOT
15516: PUSH
15517: LD_VAR 0 12
15521: PUSH
15522: LD_VAR 0 7
15526: ARRAY
15527: PUSH
15528: LD_INT 1
15530: ARRAY
15531: PPUSH
15532: LD_VAR 0 12
15536: PUSH
15537: LD_VAR 0 7
15541: ARRAY
15542: PUSH
15543: LD_INT 2
15545: ARRAY
15546: PPUSH
15547: CALL_OW 428
15551: PUSH
15552: LD_INT 0
15554: GREATER
15555: OR
15556: PUSH
15557: LD_VAR 0 12
15561: PUSH
15562: LD_VAR 0 7
15566: ARRAY
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: PPUSH
15572: LD_VAR 0 12
15576: PUSH
15577: LD_VAR 0 7
15581: ARRAY
15582: PUSH
15583: LD_INT 2
15585: ARRAY
15586: PPUSH
15587: CALL_OW 351
15591: OR
15592: IFFALSE 15598
// exit ;
15594: POP
15595: POP
15596: GO 15890
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15598: LD_ADDR_VAR 0 8
15602: PUSH
15603: LD_VAR 0 12
15607: PUSH
15608: LD_VAR 0 7
15612: ARRAY
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_VAR 0 12
15622: PUSH
15623: LD_VAR 0 7
15627: ARRAY
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PPUSH
15633: CALL_OW 546
15637: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15638: LD_VAR 0 8
15642: PUSH
15643: LD_INT 1
15645: ARRAY
15646: PUSH
15647: LD_VAR 0 8
15651: PUSH
15652: LD_INT 2
15654: ARRAY
15655: PUSH
15656: LD_VAR 0 13
15660: PUSH
15661: LD_INT 2
15663: PLUS
15664: GREATER
15665: OR
15666: PUSH
15667: LD_VAR 0 8
15671: PUSH
15672: LD_INT 2
15674: ARRAY
15675: PUSH
15676: LD_VAR 0 13
15680: PUSH
15681: LD_INT 2
15683: MINUS
15684: LESS
15685: OR
15686: PUSH
15687: LD_VAR 0 8
15691: PUSH
15692: LD_INT 3
15694: ARRAY
15695: PUSH
15696: LD_INT 0
15698: PUSH
15699: LD_INT 8
15701: PUSH
15702: LD_INT 9
15704: PUSH
15705: LD_INT 10
15707: PUSH
15708: LD_INT 11
15710: PUSH
15711: LD_INT 12
15713: PUSH
15714: LD_INT 13
15716: PUSH
15717: LD_INT 16
15719: PUSH
15720: LD_INT 17
15722: PUSH
15723: LD_INT 18
15725: PUSH
15726: LD_INT 19
15728: PUSH
15729: LD_INT 20
15731: PUSH
15732: LD_INT 21
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: IN
15750: NOT
15751: OR
15752: PUSH
15753: LD_VAR 0 8
15757: PUSH
15758: LD_INT 5
15760: ARRAY
15761: NOT
15762: OR
15763: PUSH
15764: LD_VAR 0 8
15768: PUSH
15769: LD_INT 6
15771: ARRAY
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: LD_INT 2
15778: PUSH
15779: LD_INT 7
15781: PUSH
15782: LD_INT 9
15784: PUSH
15785: LD_INT 10
15787: PUSH
15788: LD_INT 11
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: IN
15799: NOT
15800: OR
15801: IFFALSE 15807
// exit ;
15803: POP
15804: POP
15805: GO 15890
// end ;
15807: GO 15478
15809: POP
15810: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15811: LD_VAR 0 9
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_VAR 0 4
15825: PPUSH
15826: LD_INT 20
15828: PPUSH
15829: CALL 7813 0 4
15833: PUSH
15834: LD_INT 4
15836: ARRAY
15837: IFFALSE 15841
// exit ;
15839: GO 15890
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15841: LD_VAR 0 2
15845: PUSH
15846: LD_INT 29
15848: PUSH
15849: LD_INT 30
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: IN
15856: PUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_VAR 0 4
15866: PPUSH
15867: LD_VAR 0 9
15871: PPUSH
15872: CALL_OW 440
15876: NOT
15877: AND
15878: IFFALSE 15882
// exit ;
15880: GO 15890
// result := true ;
15882: LD_ADDR_VAR 0 6
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// end ;
15890: LD_VAR 0 6
15894: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15895: LD_INT 0
15897: PPUSH
15898: PPUSH
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
15908: PPUSH
15909: PPUSH
15910: PPUSH
15911: PPUSH
15912: PPUSH
15913: PPUSH
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
15918: PPUSH
15919: PPUSH
15920: PPUSH
15921: PPUSH
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
15928: PPUSH
15929: PPUSH
15930: PPUSH
15931: PPUSH
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
15940: PPUSH
15941: PPUSH
15942: PPUSH
15943: PPUSH
15944: PPUSH
15945: PPUSH
15946: PPUSH
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
15952: PPUSH
15953: PPUSH
15954: PPUSH
// result = [ ] ;
15955: LD_ADDR_VAR 0 7
15959: PUSH
15960: EMPTY
15961: ST_TO_ADDR
// temp_list = [ ] ;
15962: LD_ADDR_VAR 0 9
15966: PUSH
15967: EMPTY
15968: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15969: LD_VAR 0 4
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: LD_INT 1
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 4
15988: PUSH
15989: LD_INT 5
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: IN
16000: NOT
16001: PUSH
16002: LD_VAR 0 1
16006: PUSH
16007: LD_INT 0
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: IN
16017: PUSH
16018: LD_VAR 0 5
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: LD_INT 2
16028: PUSH
16029: LD_INT 3
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: LIST
16036: IN
16037: NOT
16038: AND
16039: OR
16040: IFFALSE 16044
// exit ;
16042: GO 34435
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16044: LD_VAR 0 1
16048: PUSH
16049: LD_INT 6
16051: PUSH
16052: LD_INT 7
16054: PUSH
16055: LD_INT 8
16057: PUSH
16058: LD_INT 13
16060: PUSH
16061: LD_INT 12
16063: PUSH
16064: LD_INT 15
16066: PUSH
16067: LD_INT 11
16069: PUSH
16070: LD_INT 14
16072: PUSH
16073: LD_INT 10
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: IN
16087: IFFALSE 16097
// btype = b_lab ;
16089: LD_ADDR_VAR 0 1
16093: PUSH
16094: LD_INT 6
16096: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16097: LD_VAR 0 6
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: LD_INT 2
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: IN
16116: NOT
16117: PUSH
16118: LD_VAR 0 1
16122: PUSH
16123: LD_INT 0
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: LD_INT 2
16131: PUSH
16132: LD_INT 3
16134: PUSH
16135: LD_INT 6
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: LD_INT 4
16143: PUSH
16144: LD_INT 5
16146: PUSH
16147: LD_INT 31
16149: PUSH
16150: LD_INT 32
16152: PUSH
16153: LD_INT 33
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: IN
16169: NOT
16170: PUSH
16171: LD_VAR 0 6
16175: PUSH
16176: LD_INT 1
16178: EQUAL
16179: AND
16180: OR
16181: PUSH
16182: LD_VAR 0 1
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 3
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: IN
16197: NOT
16198: PUSH
16199: LD_VAR 0 6
16203: PUSH
16204: LD_INT 2
16206: EQUAL
16207: AND
16208: OR
16209: IFFALSE 16219
// mode = 0 ;
16211: LD_ADDR_VAR 0 6
16215: PUSH
16216: LD_INT 0
16218: ST_TO_ADDR
// case mode of 0 :
16219: LD_VAR 0 6
16223: PUSH
16224: LD_INT 0
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 27685
16232: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16233: LD_ADDR_VAR 0 11
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: LD_INT 0
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 0
16250: PUSH
16251: LD_INT 1
16253: NEG
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 1
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 0
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 1
16291: NEG
16292: PUSH
16293: LD_INT 0
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PUSH
16304: LD_INT 1
16306: NEG
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 1
16314: NEG
16315: PUSH
16316: LD_INT 2
16318: NEG
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 0
16326: PUSH
16327: LD_INT 2
16329: NEG
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 1
16340: NEG
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: LD_INT 3
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: LD_INT 2
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16426: LD_ADDR_VAR 0 12
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: LD_INT 0
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 1
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: NEG
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 1
16495: NEG
16496: PUSH
16497: LD_INT 1
16499: NEG
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: LD_INT 1
16510: NEG
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: LD_INT 1
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 1
16538: NEG
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: NEG
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 2
16560: NEG
16561: PUSH
16562: LD_INT 1
16564: NEG
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 2
16572: NEG
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 3
16583: NEG
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 3
16594: NEG
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16622: LD_ADDR_VAR 0 13
16626: PUSH
16627: LD_INT 0
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 0
16639: PUSH
16640: LD_INT 1
16642: NEG
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: LD_INT 0
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: LD_INT 1
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 0
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 1
16691: NEG
16692: PUSH
16693: LD_INT 1
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 1
16703: NEG
16704: PUSH
16705: LD_INT 2
16707: NEG
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 2
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 2
16745: NEG
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 2
16757: NEG
16758: PUSH
16759: LD_INT 2
16761: NEG
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 2
16769: NEG
16770: PUSH
16771: LD_INT 3
16773: NEG
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 3
16781: NEG
16782: PUSH
16783: LD_INT 2
16785: NEG
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 3
16793: NEG
16794: PUSH
16795: LD_INT 3
16797: NEG
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16821: LD_ADDR_VAR 0 14
16825: PUSH
16826: LD_INT 0
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: LD_INT 1
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: LD_INT 0
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 0
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: NEG
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: LD_INT 1
16894: NEG
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: LD_INT 2
16906: NEG
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: LD_INT 2
16917: NEG
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: LD_INT 1
16928: NEG
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: LD_INT 2
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 0
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: LD_INT 1
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 1
16967: NEG
16968: PUSH
16969: LD_INT 3
16971: NEG
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 0
16979: PUSH
16980: LD_INT 3
16982: NEG
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 1
16990: PUSH
16991: LD_INT 2
16993: NEG
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17017: LD_ADDR_VAR 0 15
17021: PUSH
17022: LD_INT 0
17024: PUSH
17025: LD_INT 0
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 0
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: PUSH
17046: LD_INT 0
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 1
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 1
17075: NEG
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PUSH
17088: LD_INT 1
17090: NEG
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: LD_INT 1
17101: NEG
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 1
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 2
17140: NEG
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: LD_INT 1
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 3
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17210: LD_ADDR_VAR 0 16
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 0
17227: PUSH
17228: LD_INT 1
17230: NEG
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 1
17268: NEG
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 1
17279: NEG
17280: PUSH
17281: LD_INT 1
17283: NEG
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 1
17291: NEG
17292: PUSH
17293: LD_INT 2
17295: NEG
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: LD_INT 2
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: LD_INT 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 2
17333: NEG
17334: PUSH
17335: LD_INT 1
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: NEG
17346: PUSH
17347: LD_INT 2
17349: NEG
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 3
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17403: LD_ADDR_VAR 0 17
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 1
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 0
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 1
17461: NEG
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 1
17472: NEG
17473: PUSH
17474: LD_INT 1
17476: NEG
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 1
17484: NEG
17485: PUSH
17486: LD_INT 2
17488: NEG
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: LD_INT 2
17499: NEG
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 2
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 2
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 1
17568: NEG
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 2
17579: NEG
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 2
17590: NEG
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 2
17602: NEG
17603: PUSH
17604: LD_INT 2
17606: NEG
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17633: LD_ADDR_VAR 0 18
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: NEG
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: PUSH
17716: LD_INT 2
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 0
17726: PUSH
17727: LD_INT 2
17729: NEG
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 1
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 2
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 1
17798: NEG
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 2
17809: NEG
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 2
17820: NEG
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 2
17832: NEG
17833: PUSH
17834: LD_INT 2
17836: NEG
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17863: LD_ADDR_VAR 0 19
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: LD_INT 0
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 1
17883: NEG
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: NEG
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: NEG
17933: PUSH
17934: LD_INT 1
17936: NEG
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: NEG
17945: PUSH
17946: LD_INT 2
17948: NEG
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: LD_INT 2
17959: NEG
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: LD_INT 2
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: NEG
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18093: LD_ADDR_VAR 0 20
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: NEG
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: LD_INT 2
18178: NEG
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: LD_INT 2
18189: NEG
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 2
18269: NEG
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: NEG
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: NEG
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18323: LD_ADDR_VAR 0 21
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 1
18381: NEG
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: LD_INT 2
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 0
18416: PUSH
18417: LD_INT 2
18419: NEG
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 1
18430: NEG
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 0
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 1
18488: NEG
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: NEG
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 2
18510: NEG
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 2
18522: NEG
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18553: LD_ADDR_VAR 0 22
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 1
18626: NEG
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 1
18634: NEG
18635: PUSH
18636: LD_INT 2
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: LD_INT 2
18649: NEG
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 2
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: NEG
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 2
18740: NEG
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 2
18752: NEG
18753: PUSH
18754: LD_INT 2
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18783: LD_ADDR_VAR 0 23
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: NEG
18865: PUSH
18866: LD_INT 2
18868: NEG
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: LD_INT 2
18879: NEG
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: NEG
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 2
18970: NEG
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: NEG
18983: PUSH
18984: LD_INT 2
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 2
18994: NEG
18995: PUSH
18996: LD_INT 3
18998: NEG
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: LD_INT 3
19010: NEG
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19063: LD_ADDR_VAR 0 24
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: LD_INT 0
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 1
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: LD_INT 1
19136: NEG
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 1
19144: NEG
19145: PUSH
19146: LD_INT 2
19148: NEG
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 2
19159: NEG
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 2
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: LD_INT 2
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 2
19239: NEG
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: LD_INT 1
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 3
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19339: LD_ADDR_VAR 0 25
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: LD_INT 2
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: LD_INT 2
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 2
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 2
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: NEG
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 3
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 3
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 3
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: LD_INT 3
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19613: LD_ADDR_VAR 0 26
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 0
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 1
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: NEG
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: LD_INT 2
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: LD_INT 2
19709: NEG
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: LD_INT 2
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: LD_INT 2
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: LD_INT 2
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 2
19789: NEG
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 2
19800: NEG
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 2
19812: NEG
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: LD_INT 3
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19889: LD_ADDR_VAR 0 27
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: NEG
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 0
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 2
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: NEG
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 2
20076: NEG
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: NEG
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: NEG
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 3
20122: NEG
20123: PUSH
20124: LD_INT 1
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 3
20134: NEG
20135: PUSH
20136: LD_INT 2
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20169: LD_ADDR_VAR 0 28
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 2
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: LD_INT 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: LD_INT 3
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 3
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 3
20404: NEG
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 3
20416: NEG
20417: PUSH
20418: LD_INT 2
20420: NEG
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20451: LD_ADDR_VAR 0 29
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: LD_INT 0
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: LD_INT 2
20547: NEG
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 1
20606: NEG
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 2
20629: NEG
20630: PUSH
20631: LD_INT 2
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 2
20641: NEG
20642: PUSH
20643: LD_INT 3
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 3
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 3
20695: NEG
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20730: LD_ADDR_VAR 0 30
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 1
20750: NEG
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 1
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: LD_INT 2
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: NEG
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: LD_INT 3
20923: NEG
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: LD_INT 2
20934: NEG
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 3
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 3
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 3
20973: NEG
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21008: LD_ADDR_VAR 0 31
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 1
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 2
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: LD_INT 1
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: NEG
21198: PUSH
21199: LD_INT 3
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 3
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 3
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 3
21251: NEG
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21286: LD_ADDR_VAR 0 32
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: NEG
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: NEG
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: NEG
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 3
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 3
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 3
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 3
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21564: LD_ADDR_VAR 0 33
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: LD_INT 1
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 2
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: NEG
21743: PUSH
21744: LD_INT 2
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: NEG
21755: PUSH
21756: LD_INT 3
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 3
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 3
21808: NEG
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21843: LD_ADDR_VAR 0 34
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 1
21912: NEG
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 2
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: LD_INT 2
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 3
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 2
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 3
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 3
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 2
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 3
22088: NEG
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22123: LD_ADDR_VAR 0 35
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: NEG
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22235: LD_ADDR_VAR 0 36
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: NEG
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 2
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: LD_INT 2
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22347: LD_ADDR_VAR 0 37
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: LD_INT 1
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22459: LD_ADDR_VAR 0 38
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22571: LD_ADDR_VAR 0 39
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: LD_INT 1
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: LD_INT 0
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: LD_INT 2
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22683: LD_ADDR_VAR 0 40
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: NEG
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22795: LD_ADDR_VAR 0 41
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: NEG
22974: PUSH
22975: LD_INT 2
22977: NEG
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: LD_INT 3
22989: NEG
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 3
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 3
23038: PUSH
23039: LD_INT 3
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 3
23069: NEG
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 3
23080: NEG
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 3
23092: NEG
23093: PUSH
23094: LD_INT 2
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 3
23104: NEG
23105: PUSH
23106: LD_INT 3
23108: NEG
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23145: LD_ADDR_VAR 0 42
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 2
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: NEG
23324: PUSH
23325: LD_INT 2
23327: NEG
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 2
23335: NEG
23336: PUSH
23337: LD_INT 3
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: LD_INT 3
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 3
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 2
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 3
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 3
23442: NEG
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 3
23454: NEG
23455: PUSH
23456: LD_INT 3
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23495: LD_ADDR_VAR 0 43
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 0
23588: PUSH
23589: LD_INT 2
23591: NEG
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: NEG
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: LD_INT 3
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 3
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: LD_INT 2
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 3
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 3
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 3
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 3
23791: NEG
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 3
23802: NEG
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23843: LD_ADDR_VAR 0 44
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 1
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: NEG
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 2
24033: NEG
24034: PUSH
24035: LD_INT 3
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 3
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 3
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 3
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 3
24086: PUSH
24087: LD_INT 3
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: PUSH
24097: LD_INT 3
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 3
24117: NEG
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 3
24128: NEG
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 3
24140: NEG
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 3
24152: NEG
24153: PUSH
24154: LD_INT 3
24156: NEG
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24193: LD_ADDR_VAR 0 45
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: NEG
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 0
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 2
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: NEG
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: LD_INT 3
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 3
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 2
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 3
24429: PUSH
24430: LD_INT 2
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 3
24439: PUSH
24440: LD_INT 3
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 2
24449: PUSH
24450: LD_INT 3
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 3
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: LD_INT 3
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 3
24490: NEG
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 3
24502: NEG
24503: PUSH
24504: LD_INT 3
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24543: LD_ADDR_VAR 0 46
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 2
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 2
24720: NEG
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: LD_INT 3
24736: NEG
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 3
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 2
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 3
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 3
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 3
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 2
24828: NEG
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 3
24839: NEG
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 3
24850: NEG
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24891: LD_ADDR_VAR 0 47
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: NEG
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25042: LD_ADDR_VAR 0 48
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: LD_INT 2
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25189: LD_ADDR_VAR 0 49
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 0
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: NEG
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25333: LD_ADDR_VAR 0 50
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25477: LD_ADDR_VAR 0 51
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: NEG
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25624: LD_ADDR_VAR 0 52
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: NEG
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: LD_INT 2
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25775: LD_ADDR_VAR 0 53
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: LD_INT 2
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 2
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26005: LD_ADDR_VAR 0 54
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: LD_INT 2
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26235: LD_ADDR_VAR 0 55
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26465: LD_ADDR_VAR 0 56
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 2
26641: NEG
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: NEG
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26695: LD_ADDR_VAR 0 57
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: LD_INT 2
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 2
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: NEG
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: LD_INT 2
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26925: LD_ADDR_VAR 0 58
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 2
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 2
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 2
27101: NEG
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 2
27124: NEG
27125: PUSH
27126: LD_INT 2
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27155: LD_ADDR_VAR 0 59
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27243: LD_ADDR_VAR 0 60
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27331: LD_ADDR_VAR 0 61
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27419: LD_ADDR_VAR 0 62
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: LD_INT 1
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27507: LD_ADDR_VAR 0 63
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27595: LD_ADDR_VAR 0 64
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
// end ; 1 :
27683: GO 33580
27685: LD_INT 1
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 30316
27693: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27694: LD_ADDR_VAR 0 11
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 3
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 3
27716: NEG
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 2
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27738: LD_ADDR_VAR 0 12
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 3
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27779: LD_ADDR_VAR 0 13
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27819: LD_ADDR_VAR 0 14
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 3
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27860: LD_ADDR_VAR 0 15
27864: PUSH
27865: LD_INT 2
27867: NEG
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 3
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27904: LD_ADDR_VAR 0 16
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 3
27923: NEG
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 3
27935: NEG
27936: PUSH
27937: LD_INT 3
27939: NEG
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27950: LD_ADDR_VAR 0 17
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: LD_INT 3
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 3
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 2
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27994: LD_ADDR_VAR 0 18
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 3
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28035: LD_ADDR_VAR 0 19
28039: PUSH
28040: LD_INT 3
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 3
28052: PUSH
28053: LD_INT 3
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28075: LD_ADDR_VAR 0 20
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 3
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28116: LD_ADDR_VAR 0 21
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 3
28134: NEG
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 3
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28160: LD_ADDR_VAR 0 22
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: LD_INT 3
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 3
28179: NEG
28180: PUSH
28181: LD_INT 2
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 3
28191: NEG
28192: PUSH
28193: LD_INT 3
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: LIST
28205: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28206: LD_ADDR_VAR 0 23
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 3
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: LD_INT 4
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 3
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28250: LD_ADDR_VAR 0 24
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 4
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28291: LD_ADDR_VAR 0 25
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 4
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 3
28318: PUSH
28319: LD_INT 4
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28331: LD_ADDR_VAR 0 26
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 3
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 4
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28372: LD_ADDR_VAR 0 27
28376: PUSH
28377: LD_INT 3
28379: NEG
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 3
28390: NEG
28391: PUSH
28392: LD_INT 1
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 4
28401: NEG
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28416: LD_ADDR_VAR 0 28
28420: PUSH
28421: LD_INT 3
28423: NEG
28424: PUSH
28425: LD_INT 3
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 3
28435: NEG
28436: PUSH
28437: LD_INT 4
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 4
28447: NEG
28448: PUSH
28449: LD_INT 3
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28462: LD_ADDR_VAR 0 29
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 3
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 4
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: LD_INT 4
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: LD_INT 3
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 5
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 5
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 4
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: LD_INT 6
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 6
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 5
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28617: LD_ADDR_VAR 0 30
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 3
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 4
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 4
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 4
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 5
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 5
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 5
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 6
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 6
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28760: LD_ADDR_VAR 0 31
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 3
28777: PUSH
28778: LD_INT 3
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: LD_INT 3
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 4
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 4
28807: PUSH
28808: LD_INT 4
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: LD_INT 4
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 5
28827: PUSH
28828: LD_INT 4
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 5
28837: PUSH
28838: LD_INT 5
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 4
28847: PUSH
28848: LD_INT 5
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 6
28857: PUSH
28858: LD_INT 5
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 6
28867: PUSH
28868: LD_INT 6
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 5
28877: PUSH
28878: LD_INT 6
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28899: LD_ADDR_VAR 0 32
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 3
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 4
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: LD_INT 5
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 5
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: LD_INT 6
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: LD_INT 6
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 5
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29042: LD_ADDR_VAR 0 33
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 3
29060: NEG
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 4
29094: NEG
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 4
29105: NEG
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 4
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 5
29128: NEG
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 5
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 5
29151: NEG
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 6
29162: NEG
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 6
29173: NEG
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29197: LD_ADDR_VAR 0 34
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 3
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 3
29216: NEG
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 3
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 3
29240: NEG
29241: PUSH
29242: LD_INT 4
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 4
29252: NEG
29253: PUSH
29254: LD_INT 3
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 4
29264: NEG
29265: PUSH
29266: LD_INT 4
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 4
29276: NEG
29277: PUSH
29278: LD_INT 5
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 5
29288: NEG
29289: PUSH
29290: LD_INT 4
29292: NEG
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 5
29300: NEG
29301: PUSH
29302: LD_INT 5
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 5
29312: NEG
29313: PUSH
29314: LD_INT 6
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 6
29324: NEG
29325: PUSH
29326: LD_INT 5
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 6
29336: NEG
29337: PUSH
29338: LD_INT 6
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29360: LD_ADDR_VAR 0 41
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 1
29378: NEG
29379: PUSH
29380: LD_INT 3
29382: NEG
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29404: LD_ADDR_VAR 0 42
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 3
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29445: LD_ADDR_VAR 0 43
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 3
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29485: LD_ADDR_VAR 0 44
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 2
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29526: LD_ADDR_VAR 0 45
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 2
29544: NEG
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29570: LD_ADDR_VAR 0 46
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 2
29589: NEG
29590: PUSH
29591: LD_INT 3
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 3
29601: NEG
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29616: LD_ADDR_VAR 0 47
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: LD_INT 3
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29649: LD_ADDR_VAR 0 48
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29680: LD_ADDR_VAR 0 49
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29709: LD_ADDR_VAR 0 50
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29738: LD_ADDR_VAR 0 51
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29769: LD_ADDR_VAR 0 52
29773: PUSH
29774: LD_INT 3
29776: NEG
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 3
29788: NEG
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29802: LD_ADDR_VAR 0 53
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 3
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29846: LD_ADDR_VAR 0 54
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29887: LD_ADDR_VAR 0 55
29891: PUSH
29892: LD_INT 3
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29927: LD_ADDR_VAR 0 56
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 3
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: LD_INT 3
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29968: LD_ADDR_VAR 0 57
29972: PUSH
29973: LD_INT 2
29975: NEG
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30012: LD_ADDR_VAR 0 58
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 3
30043: NEG
30044: PUSH
30045: LD_INT 3
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30058: LD_ADDR_VAR 0 59
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: LD_INT 2
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30102: LD_ADDR_VAR 0 60
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30143: LD_ADDR_VAR 0 61
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30183: LD_ADDR_VAR 0 62
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30224: LD_ADDR_VAR 0 63
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 2
30253: NEG
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30268: LD_ADDR_VAR 0 64
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 2
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: LD_INT 2
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// end ; 2 :
30314: GO 33580
30316: LD_INT 2
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 33579
30324: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30325: LD_ADDR_VAR 0 29
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 5
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 5
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 4
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: LD_INT 2
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 5
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: LD_INT 3
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 4
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 4
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: LD_INT 4
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 3
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 2
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: LD_INT 2
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 4
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 4
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 4
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: LD_INT 5
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 5
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: LD_INT 4
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 3
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 5
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 4
30664: NEG
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 4
30675: NEG
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 4
30687: NEG
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 4
30710: NEG
30711: PUSH
30712: LD_INT 4
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 4
30722: NEG
30723: PUSH
30724: LD_INT 5
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 3
30734: NEG
30735: PUSH
30736: LD_INT 4
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 4
30758: NEG
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 5
30770: NEG
30771: PUSH
30772: LD_INT 4
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: NEG
30783: PUSH
30784: LD_INT 5
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 3
30794: NEG
30795: PUSH
30796: LD_INT 5
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 5
30806: NEG
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30863: LD_ADDR_VAR 0 30
30867: PUSH
30868: LD_INT 4
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 4
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 5
30890: PUSH
30891: LD_INT 4
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 5
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 4
30910: PUSH
30911: LD_INT 5
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 3
30920: PUSH
30921: LD_INT 4
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 5
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: LD_INT 5
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 4
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 4
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 4
31053: NEG
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 4
31064: NEG
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 4
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 5
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 5
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 5
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 3
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 3
31155: NEG
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: LD_INT 4
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 3
31203: NEG
31204: PUSH
31205: LD_INT 2
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 4
31215: NEG
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 4
31227: NEG
31228: PUSH
31229: LD_INT 4
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: LD_INT 4
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 4
31251: NEG
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 4
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: LD_INT 5
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 4
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: LD_INT 4
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 5
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 3
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: LD_INT 5
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31410: LD_ADDR_VAR 0 31
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 5
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: LD_INT 4
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: LD_INT 3
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 5
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 3
31510: NEG
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 4
31566: NEG
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 4
31577: NEG
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 4
31589: NEG
31590: PUSH
31591: LD_INT 2
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 4
31612: NEG
31613: PUSH
31614: LD_INT 4
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: NEG
31625: PUSH
31626: LD_INT 5
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 3
31636: NEG
31637: PUSH
31638: LD_INT 4
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 3
31648: NEG
31649: PUSH
31650: LD_INT 3
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 4
31660: NEG
31661: PUSH
31662: LD_INT 3
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 5
31672: NEG
31673: PUSH
31674: LD_INT 4
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 5
31684: NEG
31685: PUSH
31686: LD_INT 5
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: LD_INT 5
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 5
31708: NEG
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 4
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: LD_INT 4
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 4
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 4
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 5
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 5
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31960: LD_ADDR_VAR 0 32
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 4
31978: NEG
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 3
31990: NEG
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 3
32001: NEG
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 5
32023: NEG
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 5
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 5
32046: NEG
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 3
32058: NEG
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 3
32069: NEG
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 3
32081: NEG
32082: PUSH
32083: LD_INT 4
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: LD_INT 3
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 3
32117: NEG
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 4
32129: NEG
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 4
32141: NEG
32142: PUSH
32143: LD_INT 4
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 4
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 4
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 4
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 5
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: LD_INT 4
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 3
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 3
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 4
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 5
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: LD_INT 3
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: LD_INT 5
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 4
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 4
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 4
32362: PUSH
32363: LD_INT 2
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 4
32372: PUSH
32373: LD_INT 4
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 5
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 5
32402: PUSH
32403: LD_INT 5
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 4
32412: PUSH
32413: LD_INT 5
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: LD_INT 4
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 3
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 5
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: LD_INT 5
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32507: LD_ADDR_VAR 0 33
32511: PUSH
32512: LD_INT 4
32514: NEG
32515: PUSH
32516: LD_INT 4
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 4
32526: NEG
32527: PUSH
32528: LD_INT 5
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: LD_INT 4
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 3
32550: NEG
32551: PUSH
32552: LD_INT 3
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 4
32562: NEG
32563: PUSH
32564: LD_INT 3
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 5
32574: NEG
32575: PUSH
32576: LD_INT 4
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 5
32586: NEG
32587: PUSH
32588: LD_INT 5
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: LD_INT 5
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 5
32610: NEG
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 4
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: LD_INT 3
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: LD_INT 4
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 4
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 4
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 5
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 5
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 5
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: PUSH
32818: LD_INT 3
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 4
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 4
32847: PUSH
32848: LD_INT 4
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: PUSH
32858: LD_INT 4
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: LD_INT 3
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 4
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 5
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 5
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 4
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 5
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 2
32989: NEG
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33045: LD_ADDR_VAR 0 34
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: LD_INT 4
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: LD_INT 5
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 4
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 3
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 3
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 4
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 5
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: LD_INT 3
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 5
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 4
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 4
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 3
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 4
33247: PUSH
33248: LD_INT 4
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 4
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 5
33267: PUSH
33268: LD_INT 4
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 5
33277: PUSH
33278: LD_INT 5
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 4
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: PUSH
33298: LD_INT 4
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 3
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 5
33317: PUSH
33318: LD_INT 3
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: LD_INT 5
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: LD_INT 4
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 4
33430: NEG
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 4
33441: NEG
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 3
33464: NEG
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 5
33486: NEG
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 5
33497: NEG
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 5
33509: NEG
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// end ; end ;
33577: GO 33580
33579: POP
// case btype of b_depot , b_warehouse :
33580: LD_VAR 0 1
33584: PUSH
33585: LD_INT 0
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33599
33591: LD_INT 1
33593: DOUBLE
33594: EQUAL
33595: IFTRUE 33599
33597: GO 33800
33599: POP
// case nation of nation_american :
33600: LD_VAR 0 5
33604: PUSH
33605: LD_INT 1
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33613
33611: GO 33669
33613: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33614: LD_ADDR_VAR 0 9
33618: PUSH
33619: LD_VAR 0 11
33623: PUSH
33624: LD_VAR 0 12
33628: PUSH
33629: LD_VAR 0 13
33633: PUSH
33634: LD_VAR 0 14
33638: PUSH
33639: LD_VAR 0 15
33643: PUSH
33644: LD_VAR 0 16
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: PUSH
33657: LD_VAR 0 4
33661: PUSH
33662: LD_INT 1
33664: PLUS
33665: ARRAY
33666: ST_TO_ADDR
33667: GO 33798
33669: LD_INT 2
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33733
33677: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_VAR 0 17
33687: PUSH
33688: LD_VAR 0 18
33692: PUSH
33693: LD_VAR 0 19
33697: PUSH
33698: LD_VAR 0 20
33702: PUSH
33703: LD_VAR 0 21
33707: PUSH
33708: LD_VAR 0 22
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: PUSH
33721: LD_VAR 0 4
33725: PUSH
33726: LD_INT 1
33728: PLUS
33729: ARRAY
33730: ST_TO_ADDR
33731: GO 33798
33733: LD_INT 3
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33797
33741: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33742: LD_ADDR_VAR 0 9
33746: PUSH
33747: LD_VAR 0 23
33751: PUSH
33752: LD_VAR 0 24
33756: PUSH
33757: LD_VAR 0 25
33761: PUSH
33762: LD_VAR 0 26
33766: PUSH
33767: LD_VAR 0 27
33771: PUSH
33772: LD_VAR 0 28
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: PUSH
33785: LD_VAR 0 4
33789: PUSH
33790: LD_INT 1
33792: PLUS
33793: ARRAY
33794: ST_TO_ADDR
33795: GO 33798
33797: POP
33798: GO 34353
33800: LD_INT 2
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33814
33806: LD_INT 3
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 33870
33814: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33815: LD_ADDR_VAR 0 9
33819: PUSH
33820: LD_VAR 0 29
33824: PUSH
33825: LD_VAR 0 30
33829: PUSH
33830: LD_VAR 0 31
33834: PUSH
33835: LD_VAR 0 32
33839: PUSH
33840: LD_VAR 0 33
33844: PUSH
33845: LD_VAR 0 34
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: PUSH
33858: LD_VAR 0 4
33862: PUSH
33863: LD_INT 1
33865: PLUS
33866: ARRAY
33867: ST_TO_ADDR
33868: GO 34353
33870: LD_INT 16
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33932
33876: LD_INT 17
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33932
33882: LD_INT 18
33884: DOUBLE
33885: EQUAL
33886: IFTRUE 33932
33888: LD_INT 19
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33932
33894: LD_INT 22
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33932
33900: LD_INT 20
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33932
33906: LD_INT 21
33908: DOUBLE
33909: EQUAL
33910: IFTRUE 33932
33912: LD_INT 23
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33932
33918: LD_INT 24
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33932
33924: LD_INT 25
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33988
33932: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33933: LD_ADDR_VAR 0 9
33937: PUSH
33938: LD_VAR 0 35
33942: PUSH
33943: LD_VAR 0 36
33947: PUSH
33948: LD_VAR 0 37
33952: PUSH
33953: LD_VAR 0 38
33957: PUSH
33958: LD_VAR 0 39
33962: PUSH
33963: LD_VAR 0 40
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: PUSH
33976: LD_VAR 0 4
33980: PUSH
33981: LD_INT 1
33983: PLUS
33984: ARRAY
33985: ST_TO_ADDR
33986: GO 34353
33988: LD_INT 6
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 34044
33994: LD_INT 7
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34044
34000: LD_INT 8
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34044
34006: LD_INT 13
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34044
34012: LD_INT 12
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34044
34018: LD_INT 15
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34044
34024: LD_INT 11
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34044
34030: LD_INT 14
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34044
34036: LD_INT 10
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34100
34044: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34045: LD_ADDR_VAR 0 9
34049: PUSH
34050: LD_VAR 0 41
34054: PUSH
34055: LD_VAR 0 42
34059: PUSH
34060: LD_VAR 0 43
34064: PUSH
34065: LD_VAR 0 44
34069: PUSH
34070: LD_VAR 0 45
34074: PUSH
34075: LD_VAR 0 46
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: PUSH
34088: LD_VAR 0 4
34092: PUSH
34093: LD_INT 1
34095: PLUS
34096: ARRAY
34097: ST_TO_ADDR
34098: GO 34353
34100: LD_INT 36
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34164
34108: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34109: LD_ADDR_VAR 0 9
34113: PUSH
34114: LD_VAR 0 47
34118: PUSH
34119: LD_VAR 0 48
34123: PUSH
34124: LD_VAR 0 49
34128: PUSH
34129: LD_VAR 0 50
34133: PUSH
34134: LD_VAR 0 51
34138: PUSH
34139: LD_VAR 0 52
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: PUSH
34152: LD_VAR 0 4
34156: PUSH
34157: LD_INT 1
34159: PLUS
34160: ARRAY
34161: ST_TO_ADDR
34162: GO 34353
34164: LD_INT 4
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34190
34170: LD_INT 5
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34190
34176: LD_INT 34
34178: DOUBLE
34179: EQUAL
34180: IFTRUE 34190
34182: LD_INT 37
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34246
34190: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34191: LD_ADDR_VAR 0 9
34195: PUSH
34196: LD_VAR 0 53
34200: PUSH
34201: LD_VAR 0 54
34205: PUSH
34206: LD_VAR 0 55
34210: PUSH
34211: LD_VAR 0 56
34215: PUSH
34216: LD_VAR 0 57
34220: PUSH
34221: LD_VAR 0 58
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: PUSH
34234: LD_VAR 0 4
34238: PUSH
34239: LD_INT 1
34241: PLUS
34242: ARRAY
34243: ST_TO_ADDR
34244: GO 34353
34246: LD_INT 31
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34296
34252: LD_INT 32
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34296
34258: LD_INT 33
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34296
34264: LD_INT 27
34266: DOUBLE
34267: EQUAL
34268: IFTRUE 34296
34270: LD_INT 26
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34296
34276: LD_INT 28
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34296
34282: LD_INT 29
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34296
34288: LD_INT 30
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34296
34294: GO 34352
34296: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34297: LD_ADDR_VAR 0 9
34301: PUSH
34302: LD_VAR 0 59
34306: PUSH
34307: LD_VAR 0 60
34311: PUSH
34312: LD_VAR 0 61
34316: PUSH
34317: LD_VAR 0 62
34321: PUSH
34322: LD_VAR 0 63
34326: PUSH
34327: LD_VAR 0 64
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: PUSH
34340: LD_VAR 0 4
34344: PUSH
34345: LD_INT 1
34347: PLUS
34348: ARRAY
34349: ST_TO_ADDR
34350: GO 34353
34352: POP
// temp_list2 = [ ] ;
34353: LD_ADDR_VAR 0 10
34357: PUSH
34358: EMPTY
34359: ST_TO_ADDR
// for i in temp_list do
34360: LD_ADDR_VAR 0 8
34364: PUSH
34365: LD_VAR 0 9
34369: PUSH
34370: FOR_IN
34371: IFFALSE 34423
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34373: LD_ADDR_VAR 0 10
34377: PUSH
34378: LD_VAR 0 10
34382: PUSH
34383: LD_VAR 0 8
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PUSH
34392: LD_VAR 0 2
34396: PLUS
34397: PUSH
34398: LD_VAR 0 8
34402: PUSH
34403: LD_INT 2
34405: ARRAY
34406: PUSH
34407: LD_VAR 0 3
34411: PLUS
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: ADD
34420: ST_TO_ADDR
34421: GO 34370
34423: POP
34424: POP
// result = temp_list2 ;
34425: LD_ADDR_VAR 0 7
34429: PUSH
34430: LD_VAR 0 10
34434: ST_TO_ADDR
// end ;
34435: LD_VAR 0 7
34439: RET
// export function EnemyInRange ( unit , dist ) ; begin
34440: LD_INT 0
34442: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34443: LD_ADDR_VAR 0 3
34447: PUSH
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL_OW 255
34457: PPUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: CALL_OW 250
34467: PPUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 251
34477: PPUSH
34478: LD_VAR 0 2
34482: PPUSH
34483: CALL 7813 0 4
34487: PUSH
34488: LD_INT 4
34490: ARRAY
34491: ST_TO_ADDR
// end ;
34492: LD_VAR 0 3
34496: RET
// export function PlayerSeeMe ( unit ) ; begin
34497: LD_INT 0
34499: PPUSH
// result := See ( your_side , unit ) ;
34500: LD_ADDR_VAR 0 2
34504: PUSH
34505: LD_OWVAR 2
34509: PPUSH
34510: LD_VAR 0 1
34514: PPUSH
34515: CALL_OW 292
34519: ST_TO_ADDR
// end ;
34520: LD_VAR 0 2
34524: RET
// export function ReverseDir ( unit ) ; begin
34525: LD_INT 0
34527: PPUSH
// if not unit then
34528: LD_VAR 0 1
34532: NOT
34533: IFFALSE 34537
// exit ;
34535: GO 34560
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34537: LD_ADDR_VAR 0 2
34541: PUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 254
34551: PUSH
34552: LD_INT 3
34554: PLUS
34555: PUSH
34556: LD_INT 6
34558: MOD
34559: ST_TO_ADDR
// end ;
34560: LD_VAR 0 2
34564: RET
// export function ReverseArray ( array ) ; var i ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
// if not array then
34569: LD_VAR 0 1
34573: NOT
34574: IFFALSE 34578
// exit ;
34576: GO 34633
// result := [ ] ;
34578: LD_ADDR_VAR 0 2
34582: PUSH
34583: EMPTY
34584: ST_TO_ADDR
// for i := array downto 1 do
34585: LD_ADDR_VAR 0 3
34589: PUSH
34590: DOUBLE
34591: LD_VAR 0 1
34595: INC
34596: ST_TO_ADDR
34597: LD_INT 1
34599: PUSH
34600: FOR_DOWNTO
34601: IFFALSE 34631
// result := Join ( result , array [ i ] ) ;
34603: LD_ADDR_VAR 0 2
34607: PUSH
34608: LD_VAR 0 2
34612: PPUSH
34613: LD_VAR 0 1
34617: PUSH
34618: LD_VAR 0 3
34622: ARRAY
34623: PPUSH
34624: CALL 39276 0 2
34628: ST_TO_ADDR
34629: GO 34600
34631: POP
34632: POP
// end ;
34633: LD_VAR 0 2
34637: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34638: LD_INT 0
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
// if not unit or not hexes then
34646: LD_VAR 0 1
34650: NOT
34651: PUSH
34652: LD_VAR 0 2
34656: NOT
34657: OR
34658: IFFALSE 34662
// exit ;
34660: GO 34785
// dist := 9999 ;
34662: LD_ADDR_VAR 0 5
34666: PUSH
34667: LD_INT 9999
34669: ST_TO_ADDR
// for i = 1 to hexes do
34670: LD_ADDR_VAR 0 4
34674: PUSH
34675: DOUBLE
34676: LD_INT 1
34678: DEC
34679: ST_TO_ADDR
34680: LD_VAR 0 2
34684: PUSH
34685: FOR_TO
34686: IFFALSE 34773
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34688: LD_ADDR_VAR 0 6
34692: PUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: LD_VAR 0 2
34702: PUSH
34703: LD_VAR 0 4
34707: ARRAY
34708: PUSH
34709: LD_INT 1
34711: ARRAY
34712: PPUSH
34713: LD_VAR 0 2
34717: PUSH
34718: LD_VAR 0 4
34722: ARRAY
34723: PUSH
34724: LD_INT 2
34726: ARRAY
34727: PPUSH
34728: CALL_OW 297
34732: ST_TO_ADDR
// if tdist < dist then
34733: LD_VAR 0 6
34737: PUSH
34738: LD_VAR 0 5
34742: LESS
34743: IFFALSE 34771
// begin hex := hexes [ i ] ;
34745: LD_ADDR_VAR 0 8
34749: PUSH
34750: LD_VAR 0 2
34754: PUSH
34755: LD_VAR 0 4
34759: ARRAY
34760: ST_TO_ADDR
// dist := tdist ;
34761: LD_ADDR_VAR 0 5
34765: PUSH
34766: LD_VAR 0 6
34770: ST_TO_ADDR
// end ; end ;
34771: GO 34685
34773: POP
34774: POP
// result := hex ;
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_VAR 0 8
34784: ST_TO_ADDR
// end ;
34785: LD_VAR 0 3
34789: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34790: LD_INT 0
34792: PPUSH
34793: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34794: LD_VAR 0 1
34798: NOT
34799: PUSH
34800: LD_VAR 0 1
34804: PUSH
34805: LD_INT 21
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 23
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PPUSH
34829: CALL_OW 69
34833: IN
34834: NOT
34835: OR
34836: IFFALSE 34840
// exit ;
34838: GO 34887
// for i = 1 to 3 do
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: DOUBLE
34846: LD_INT 1
34848: DEC
34849: ST_TO_ADDR
34850: LD_INT 3
34852: PUSH
34853: FOR_TO
34854: IFFALSE 34885
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34856: LD_VAR 0 1
34860: PPUSH
34861: CALL_OW 250
34865: PPUSH
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 251
34875: PPUSH
34876: LD_INT 1
34878: PPUSH
34879: CALL_OW 453
34883: GO 34853
34885: POP
34886: POP
// end ;
34887: LD_VAR 0 2
34891: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34892: LD_INT 0
34894: PPUSH
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
34899: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34900: LD_VAR 0 1
34904: NOT
34905: PUSH
34906: LD_VAR 0 2
34910: NOT
34911: OR
34912: PUSH
34913: LD_VAR 0 1
34917: PPUSH
34918: CALL_OW 314
34922: OR
34923: IFFALSE 34927
// exit ;
34925: GO 35394
// if GetLives ( i ) < 250 then
34927: LD_VAR 0 4
34931: PPUSH
34932: CALL_OW 256
34936: PUSH
34937: LD_INT 250
34939: LESS
34940: IFFALSE 34953
// begin ComAutodestruct ( i ) ;
34942: LD_VAR 0 4
34946: PPUSH
34947: CALL 34790 0 1
// exit ;
34951: GO 35394
// end ; x := GetX ( enemy_unit ) ;
34953: LD_ADDR_VAR 0 7
34957: PUSH
34958: LD_VAR 0 2
34962: PPUSH
34963: CALL_OW 250
34967: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34968: LD_ADDR_VAR 0 8
34972: PUSH
34973: LD_VAR 0 2
34977: PPUSH
34978: CALL_OW 251
34982: ST_TO_ADDR
// if not x or not y then
34983: LD_VAR 0 7
34987: NOT
34988: PUSH
34989: LD_VAR 0 8
34993: NOT
34994: OR
34995: IFFALSE 34999
// exit ;
34997: GO 35394
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34999: LD_ADDR_VAR 0 6
35003: PUSH
35004: LD_VAR 0 7
35008: PPUSH
35009: LD_INT 0
35011: PPUSH
35012: LD_INT 4
35014: PPUSH
35015: CALL_OW 272
35019: PUSH
35020: LD_VAR 0 8
35024: PPUSH
35025: LD_INT 0
35027: PPUSH
35028: LD_INT 4
35030: PPUSH
35031: CALL_OW 273
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_VAR 0 7
35044: PPUSH
35045: LD_INT 1
35047: PPUSH
35048: LD_INT 4
35050: PPUSH
35051: CALL_OW 272
35055: PUSH
35056: LD_VAR 0 8
35060: PPUSH
35061: LD_INT 1
35063: PPUSH
35064: LD_INT 4
35066: PPUSH
35067: CALL_OW 273
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_VAR 0 7
35080: PPUSH
35081: LD_INT 2
35083: PPUSH
35084: LD_INT 4
35086: PPUSH
35087: CALL_OW 272
35091: PUSH
35092: LD_VAR 0 8
35096: PPUSH
35097: LD_INT 2
35099: PPUSH
35100: LD_INT 4
35102: PPUSH
35103: CALL_OW 273
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_VAR 0 7
35116: PPUSH
35117: LD_INT 3
35119: PPUSH
35120: LD_INT 4
35122: PPUSH
35123: CALL_OW 272
35127: PUSH
35128: LD_VAR 0 8
35132: PPUSH
35133: LD_INT 3
35135: PPUSH
35136: LD_INT 4
35138: PPUSH
35139: CALL_OW 273
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_VAR 0 7
35152: PPUSH
35153: LD_INT 4
35155: PPUSH
35156: LD_INT 4
35158: PPUSH
35159: CALL_OW 272
35163: PUSH
35164: LD_VAR 0 8
35168: PPUSH
35169: LD_INT 4
35171: PPUSH
35172: LD_INT 4
35174: PPUSH
35175: CALL_OW 273
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_VAR 0 7
35188: PPUSH
35189: LD_INT 5
35191: PPUSH
35192: LD_INT 4
35194: PPUSH
35195: CALL_OW 272
35199: PUSH
35200: LD_VAR 0 8
35204: PPUSH
35205: LD_INT 5
35207: PPUSH
35208: LD_INT 4
35210: PPUSH
35211: CALL_OW 273
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: ST_TO_ADDR
// for i = tmp downto 1 do
35228: LD_ADDR_VAR 0 4
35232: PUSH
35233: DOUBLE
35234: LD_VAR 0 6
35238: INC
35239: ST_TO_ADDR
35240: LD_INT 1
35242: PUSH
35243: FOR_DOWNTO
35244: IFFALSE 35345
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35246: LD_VAR 0 6
35250: PUSH
35251: LD_VAR 0 4
35255: ARRAY
35256: PUSH
35257: LD_INT 1
35259: ARRAY
35260: PPUSH
35261: LD_VAR 0 6
35265: PUSH
35266: LD_VAR 0 4
35270: ARRAY
35271: PUSH
35272: LD_INT 2
35274: ARRAY
35275: PPUSH
35276: CALL_OW 488
35280: NOT
35281: PUSH
35282: LD_VAR 0 6
35286: PUSH
35287: LD_VAR 0 4
35291: ARRAY
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PPUSH
35297: LD_VAR 0 6
35301: PUSH
35302: LD_VAR 0 4
35306: ARRAY
35307: PUSH
35308: LD_INT 2
35310: ARRAY
35311: PPUSH
35312: CALL_OW 428
35316: PUSH
35317: LD_INT 0
35319: NONEQUAL
35320: OR
35321: IFFALSE 35343
// tmp := Delete ( tmp , i ) ;
35323: LD_ADDR_VAR 0 6
35327: PUSH
35328: LD_VAR 0 6
35332: PPUSH
35333: LD_VAR 0 4
35337: PPUSH
35338: CALL_OW 3
35342: ST_TO_ADDR
35343: GO 35243
35345: POP
35346: POP
// j := GetClosestHex ( unit , tmp ) ;
35347: LD_ADDR_VAR 0 5
35351: PUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL 34638 0 2
35366: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35367: LD_VAR 0 1
35371: PPUSH
35372: LD_VAR 0 5
35376: PUSH
35377: LD_INT 1
35379: ARRAY
35380: PPUSH
35381: LD_VAR 0 5
35385: PUSH
35386: LD_INT 2
35388: ARRAY
35389: PPUSH
35390: CALL_OW 111
// end ;
35394: LD_VAR 0 3
35398: RET
// export function PrepareApemanSoldier ( ) ; begin
35399: LD_INT 0
35401: PPUSH
// uc_nation := 0 ;
35402: LD_ADDR_OWVAR 21
35406: PUSH
35407: LD_INT 0
35409: ST_TO_ADDR
// hc_sex := sex_male ;
35410: LD_ADDR_OWVAR 27
35414: PUSH
35415: LD_INT 1
35417: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35418: LD_ADDR_OWVAR 28
35422: PUSH
35423: LD_INT 15
35425: ST_TO_ADDR
// hc_gallery :=  ;
35426: LD_ADDR_OWVAR 33
35430: PUSH
35431: LD_STRING 
35433: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35434: LD_ADDR_OWVAR 31
35438: PUSH
35439: LD_INT 0
35441: PPUSH
35442: LD_INT 3
35444: PPUSH
35445: CALL_OW 12
35449: PUSH
35450: LD_INT 0
35452: PPUSH
35453: LD_INT 3
35455: PPUSH
35456: CALL_OW 12
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: ST_TO_ADDR
// end ;
35473: LD_VAR 0 1
35477: RET
// export function PrepareApemanEngineer ( ) ; begin
35478: LD_INT 0
35480: PPUSH
// uc_nation := 0 ;
35481: LD_ADDR_OWVAR 21
35485: PUSH
35486: LD_INT 0
35488: ST_TO_ADDR
// hc_sex := sex_male ;
35489: LD_ADDR_OWVAR 27
35493: PUSH
35494: LD_INT 1
35496: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35497: LD_ADDR_OWVAR 28
35501: PUSH
35502: LD_INT 16
35504: ST_TO_ADDR
// hc_gallery :=  ;
35505: LD_ADDR_OWVAR 33
35509: PUSH
35510: LD_STRING 
35512: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35513: LD_ADDR_OWVAR 31
35517: PUSH
35518: LD_INT 0
35520: PPUSH
35521: LD_INT 3
35523: PPUSH
35524: CALL_OW 12
35528: PUSH
35529: LD_INT 0
35531: PPUSH
35532: LD_INT 3
35534: PPUSH
35535: CALL_OW 12
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: ST_TO_ADDR
// end ;
35552: LD_VAR 0 1
35556: RET
// export function PrepareApeman ( agressivity ) ; begin
35557: LD_INT 0
35559: PPUSH
// uc_side := 0 ;
35560: LD_ADDR_OWVAR 20
35564: PUSH
35565: LD_INT 0
35567: ST_TO_ADDR
// uc_nation := 0 ;
35568: LD_ADDR_OWVAR 21
35572: PUSH
35573: LD_INT 0
35575: ST_TO_ADDR
// hc_sex := sex_male ;
35576: LD_ADDR_OWVAR 27
35580: PUSH
35581: LD_INT 1
35583: ST_TO_ADDR
// hc_class := class_apeman ;
35584: LD_ADDR_OWVAR 28
35588: PUSH
35589: LD_INT 12
35591: ST_TO_ADDR
// hc_gallery :=  ;
35592: LD_ADDR_OWVAR 33
35596: PUSH
35597: LD_STRING 
35599: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35600: LD_ADDR_OWVAR 35
35604: PUSH
35605: LD_VAR 0 1
35609: NEG
35610: PPUSH
35611: LD_VAR 0 1
35615: PPUSH
35616: CALL_OW 12
35620: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35621: LD_ADDR_OWVAR 31
35625: PUSH
35626: LD_INT 0
35628: PPUSH
35629: LD_INT 3
35631: PPUSH
35632: CALL_OW 12
35636: PUSH
35637: LD_INT 0
35639: PPUSH
35640: LD_INT 3
35642: PPUSH
35643: CALL_OW 12
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// end ;
35660: LD_VAR 0 2
35664: RET
// export function PrepareTiger ( agressivity ) ; begin
35665: LD_INT 0
35667: PPUSH
// uc_side := 0 ;
35668: LD_ADDR_OWVAR 20
35672: PUSH
35673: LD_INT 0
35675: ST_TO_ADDR
// uc_nation := 0 ;
35676: LD_ADDR_OWVAR 21
35680: PUSH
35681: LD_INT 0
35683: ST_TO_ADDR
// hc_class := class_tiger ;
35684: LD_ADDR_OWVAR 28
35688: PUSH
35689: LD_INT 14
35691: ST_TO_ADDR
// hc_gallery :=  ;
35692: LD_ADDR_OWVAR 33
35696: PUSH
35697: LD_STRING 
35699: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35700: LD_ADDR_OWVAR 35
35704: PUSH
35705: LD_VAR 0 1
35709: NEG
35710: PPUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 12
35720: ST_TO_ADDR
// end ;
35721: LD_VAR 0 2
35725: RET
// export function PrepareEnchidna ( ) ; begin
35726: LD_INT 0
35728: PPUSH
// uc_side := 0 ;
35729: LD_ADDR_OWVAR 20
35733: PUSH
35734: LD_INT 0
35736: ST_TO_ADDR
// uc_nation := 0 ;
35737: LD_ADDR_OWVAR 21
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
// hc_class := class_baggie ;
35745: LD_ADDR_OWVAR 28
35749: PUSH
35750: LD_INT 13
35752: ST_TO_ADDR
// hc_gallery :=  ;
35753: LD_ADDR_OWVAR 33
35757: PUSH
35758: LD_STRING 
35760: ST_TO_ADDR
// end ;
35761: LD_VAR 0 1
35765: RET
// export function PrepareFrog ( ) ; begin
35766: LD_INT 0
35768: PPUSH
// uc_side := 0 ;
35769: LD_ADDR_OWVAR 20
35773: PUSH
35774: LD_INT 0
35776: ST_TO_ADDR
// uc_nation := 0 ;
35777: LD_ADDR_OWVAR 21
35781: PUSH
35782: LD_INT 0
35784: ST_TO_ADDR
// hc_class := class_frog ;
35785: LD_ADDR_OWVAR 28
35789: PUSH
35790: LD_INT 19
35792: ST_TO_ADDR
// hc_gallery :=  ;
35793: LD_ADDR_OWVAR 33
35797: PUSH
35798: LD_STRING 
35800: ST_TO_ADDR
// end ;
35801: LD_VAR 0 1
35805: RET
// export function PrepareFish ( ) ; begin
35806: LD_INT 0
35808: PPUSH
// uc_side := 0 ;
35809: LD_ADDR_OWVAR 20
35813: PUSH
35814: LD_INT 0
35816: ST_TO_ADDR
// uc_nation := 0 ;
35817: LD_ADDR_OWVAR 21
35821: PUSH
35822: LD_INT 0
35824: ST_TO_ADDR
// hc_class := class_fish ;
35825: LD_ADDR_OWVAR 28
35829: PUSH
35830: LD_INT 20
35832: ST_TO_ADDR
// hc_gallery :=  ;
35833: LD_ADDR_OWVAR 33
35837: PUSH
35838: LD_STRING 
35840: ST_TO_ADDR
// end ;
35841: LD_VAR 0 1
35845: RET
// export function PrepareBird ( ) ; begin
35846: LD_INT 0
35848: PPUSH
// uc_side := 0 ;
35849: LD_ADDR_OWVAR 20
35853: PUSH
35854: LD_INT 0
35856: ST_TO_ADDR
// uc_nation := 0 ;
35857: LD_ADDR_OWVAR 21
35861: PUSH
35862: LD_INT 0
35864: ST_TO_ADDR
// hc_class := class_phororhacos ;
35865: LD_ADDR_OWVAR 28
35869: PUSH
35870: LD_INT 18
35872: ST_TO_ADDR
// hc_gallery :=  ;
35873: LD_ADDR_OWVAR 33
35877: PUSH
35878: LD_STRING 
35880: ST_TO_ADDR
// end ;
35881: LD_VAR 0 1
35885: RET
// export function PrepareHorse ( ) ; begin
35886: LD_INT 0
35888: PPUSH
// uc_side := 0 ;
35889: LD_ADDR_OWVAR 20
35893: PUSH
35894: LD_INT 0
35896: ST_TO_ADDR
// uc_nation := 0 ;
35897: LD_ADDR_OWVAR 21
35901: PUSH
35902: LD_INT 0
35904: ST_TO_ADDR
// hc_class := class_horse ;
35905: LD_ADDR_OWVAR 28
35909: PUSH
35910: LD_INT 21
35912: ST_TO_ADDR
// hc_gallery :=  ;
35913: LD_ADDR_OWVAR 33
35917: PUSH
35918: LD_STRING 
35920: ST_TO_ADDR
// end ;
35921: LD_VAR 0 1
35925: RET
// export function PrepareMastodont ( ) ; begin
35926: LD_INT 0
35928: PPUSH
// uc_side := 0 ;
35929: LD_ADDR_OWVAR 20
35933: PUSH
35934: LD_INT 0
35936: ST_TO_ADDR
// uc_nation := 0 ;
35937: LD_ADDR_OWVAR 21
35941: PUSH
35942: LD_INT 0
35944: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35945: LD_ADDR_OWVAR 37
35949: PUSH
35950: LD_INT 31
35952: ST_TO_ADDR
// vc_control := control_rider ;
35953: LD_ADDR_OWVAR 38
35957: PUSH
35958: LD_INT 4
35960: ST_TO_ADDR
// end ;
35961: LD_VAR 0 1
35965: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35966: LD_INT 0
35968: PPUSH
35969: PPUSH
35970: PPUSH
// uc_side = 0 ;
35971: LD_ADDR_OWVAR 20
35975: PUSH
35976: LD_INT 0
35978: ST_TO_ADDR
// uc_nation = 0 ;
35979: LD_ADDR_OWVAR 21
35983: PUSH
35984: LD_INT 0
35986: ST_TO_ADDR
// InitHc_All ( ) ;
35987: CALL_OW 584
// InitVc ;
35991: CALL_OW 20
// if mastodonts then
35995: LD_VAR 0 6
35999: IFFALSE 36066
// for i = 1 to mastodonts do
36001: LD_ADDR_VAR 0 11
36005: PUSH
36006: DOUBLE
36007: LD_INT 1
36009: DEC
36010: ST_TO_ADDR
36011: LD_VAR 0 6
36015: PUSH
36016: FOR_TO
36017: IFFALSE 36064
// begin vc_chassis := 31 ;
36019: LD_ADDR_OWVAR 37
36023: PUSH
36024: LD_INT 31
36026: ST_TO_ADDR
// vc_control := control_rider ;
36027: LD_ADDR_OWVAR 38
36031: PUSH
36032: LD_INT 4
36034: ST_TO_ADDR
// animal := CreateVehicle ;
36035: LD_ADDR_VAR 0 12
36039: PUSH
36040: CALL_OW 45
36044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36045: LD_VAR 0 12
36049: PPUSH
36050: LD_VAR 0 8
36054: PPUSH
36055: LD_INT 0
36057: PPUSH
36058: CALL 38194 0 3
// end ;
36062: GO 36016
36064: POP
36065: POP
// if horses then
36066: LD_VAR 0 5
36070: IFFALSE 36137
// for i = 1 to horses do
36072: LD_ADDR_VAR 0 11
36076: PUSH
36077: DOUBLE
36078: LD_INT 1
36080: DEC
36081: ST_TO_ADDR
36082: LD_VAR 0 5
36086: PUSH
36087: FOR_TO
36088: IFFALSE 36135
// begin hc_class := 21 ;
36090: LD_ADDR_OWVAR 28
36094: PUSH
36095: LD_INT 21
36097: ST_TO_ADDR
// hc_gallery :=  ;
36098: LD_ADDR_OWVAR 33
36102: PUSH
36103: LD_STRING 
36105: ST_TO_ADDR
// animal := CreateHuman ;
36106: LD_ADDR_VAR 0 12
36110: PUSH
36111: CALL_OW 44
36115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36116: LD_VAR 0 12
36120: PPUSH
36121: LD_VAR 0 8
36125: PPUSH
36126: LD_INT 0
36128: PPUSH
36129: CALL 38194 0 3
// end ;
36133: GO 36087
36135: POP
36136: POP
// if birds then
36137: LD_VAR 0 1
36141: IFFALSE 36208
// for i = 1 to birds do
36143: LD_ADDR_VAR 0 11
36147: PUSH
36148: DOUBLE
36149: LD_INT 1
36151: DEC
36152: ST_TO_ADDR
36153: LD_VAR 0 1
36157: PUSH
36158: FOR_TO
36159: IFFALSE 36206
// begin hc_class := 18 ;
36161: LD_ADDR_OWVAR 28
36165: PUSH
36166: LD_INT 18
36168: ST_TO_ADDR
// hc_gallery =  ;
36169: LD_ADDR_OWVAR 33
36173: PUSH
36174: LD_STRING 
36176: ST_TO_ADDR
// animal := CreateHuman ;
36177: LD_ADDR_VAR 0 12
36181: PUSH
36182: CALL_OW 44
36186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36187: LD_VAR 0 12
36191: PPUSH
36192: LD_VAR 0 8
36196: PPUSH
36197: LD_INT 0
36199: PPUSH
36200: CALL 38194 0 3
// end ;
36204: GO 36158
36206: POP
36207: POP
// if tigers then
36208: LD_VAR 0 2
36212: IFFALSE 36296
// for i = 1 to tigers do
36214: LD_ADDR_VAR 0 11
36218: PUSH
36219: DOUBLE
36220: LD_INT 1
36222: DEC
36223: ST_TO_ADDR
36224: LD_VAR 0 2
36228: PUSH
36229: FOR_TO
36230: IFFALSE 36294
// begin hc_class = class_tiger ;
36232: LD_ADDR_OWVAR 28
36236: PUSH
36237: LD_INT 14
36239: ST_TO_ADDR
// hc_gallery =  ;
36240: LD_ADDR_OWVAR 33
36244: PUSH
36245: LD_STRING 
36247: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36248: LD_ADDR_OWVAR 35
36252: PUSH
36253: LD_INT 7
36255: NEG
36256: PPUSH
36257: LD_INT 7
36259: PPUSH
36260: CALL_OW 12
36264: ST_TO_ADDR
// animal := CreateHuman ;
36265: LD_ADDR_VAR 0 12
36269: PUSH
36270: CALL_OW 44
36274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36275: LD_VAR 0 12
36279: PPUSH
36280: LD_VAR 0 8
36284: PPUSH
36285: LD_INT 0
36287: PPUSH
36288: CALL 38194 0 3
// end ;
36292: GO 36229
36294: POP
36295: POP
// if apemans then
36296: LD_VAR 0 3
36300: IFFALSE 36423
// for i = 1 to apemans do
36302: LD_ADDR_VAR 0 11
36306: PUSH
36307: DOUBLE
36308: LD_INT 1
36310: DEC
36311: ST_TO_ADDR
36312: LD_VAR 0 3
36316: PUSH
36317: FOR_TO
36318: IFFALSE 36421
// begin hc_class = class_apeman ;
36320: LD_ADDR_OWVAR 28
36324: PUSH
36325: LD_INT 12
36327: ST_TO_ADDR
// hc_gallery =  ;
36328: LD_ADDR_OWVAR 33
36332: PUSH
36333: LD_STRING 
36335: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36336: LD_ADDR_OWVAR 35
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PPUSH
36345: LD_INT 2
36347: PPUSH
36348: CALL_OW 12
36352: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36353: LD_ADDR_OWVAR 31
36357: PUSH
36358: LD_INT 1
36360: PPUSH
36361: LD_INT 3
36363: PPUSH
36364: CALL_OW 12
36368: PUSH
36369: LD_INT 1
36371: PPUSH
36372: LD_INT 3
36374: PPUSH
36375: CALL_OW 12
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: ST_TO_ADDR
// animal := CreateHuman ;
36392: LD_ADDR_VAR 0 12
36396: PUSH
36397: CALL_OW 44
36401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36402: LD_VAR 0 12
36406: PPUSH
36407: LD_VAR 0 8
36411: PPUSH
36412: LD_INT 0
36414: PPUSH
36415: CALL 38194 0 3
// end ;
36419: GO 36317
36421: POP
36422: POP
// if enchidnas then
36423: LD_VAR 0 4
36427: IFFALSE 36494
// for i = 1 to enchidnas do
36429: LD_ADDR_VAR 0 11
36433: PUSH
36434: DOUBLE
36435: LD_INT 1
36437: DEC
36438: ST_TO_ADDR
36439: LD_VAR 0 4
36443: PUSH
36444: FOR_TO
36445: IFFALSE 36492
// begin hc_class = 13 ;
36447: LD_ADDR_OWVAR 28
36451: PUSH
36452: LD_INT 13
36454: ST_TO_ADDR
// hc_gallery =  ;
36455: LD_ADDR_OWVAR 33
36459: PUSH
36460: LD_STRING 
36462: ST_TO_ADDR
// animal := CreateHuman ;
36463: LD_ADDR_VAR 0 12
36467: PUSH
36468: CALL_OW 44
36472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36473: LD_VAR 0 12
36477: PPUSH
36478: LD_VAR 0 8
36482: PPUSH
36483: LD_INT 0
36485: PPUSH
36486: CALL 38194 0 3
// end ;
36490: GO 36444
36492: POP
36493: POP
// if fishes then
36494: LD_VAR 0 7
36498: IFFALSE 36565
// for i = 1 to fishes do
36500: LD_ADDR_VAR 0 11
36504: PUSH
36505: DOUBLE
36506: LD_INT 1
36508: DEC
36509: ST_TO_ADDR
36510: LD_VAR 0 7
36514: PUSH
36515: FOR_TO
36516: IFFALSE 36563
// begin hc_class = 20 ;
36518: LD_ADDR_OWVAR 28
36522: PUSH
36523: LD_INT 20
36525: ST_TO_ADDR
// hc_gallery =  ;
36526: LD_ADDR_OWVAR 33
36530: PUSH
36531: LD_STRING 
36533: ST_TO_ADDR
// animal := CreateHuman ;
36534: LD_ADDR_VAR 0 12
36538: PUSH
36539: CALL_OW 44
36543: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36544: LD_VAR 0 12
36548: PPUSH
36549: LD_VAR 0 9
36553: PPUSH
36554: LD_INT 0
36556: PPUSH
36557: CALL 38194 0 3
// end ;
36561: GO 36515
36563: POP
36564: POP
// end ;
36565: LD_VAR 0 10
36569: RET
// export function WantHeal ( sci , unit ) ; begin
36570: LD_INT 0
36572: PPUSH
// if GetTaskList ( sci ) > 0 then
36573: LD_VAR 0 1
36577: PPUSH
36578: CALL_OW 437
36582: PUSH
36583: LD_INT 0
36585: GREATER
36586: IFFALSE 36656
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 437
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PUSH
36602: LD_INT 1
36604: ARRAY
36605: PUSH
36606: LD_STRING l
36608: EQUAL
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 437
36619: PUSH
36620: LD_INT 1
36622: ARRAY
36623: PUSH
36624: LD_INT 4
36626: ARRAY
36627: PUSH
36628: LD_VAR 0 2
36632: EQUAL
36633: AND
36634: IFFALSE 36646
// result := true else
36636: LD_ADDR_VAR 0 3
36640: PUSH
36641: LD_INT 1
36643: ST_TO_ADDR
36644: GO 36654
// result := false ;
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_INT 0
36653: ST_TO_ADDR
// end else
36654: GO 36664
// result := false ;
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_INT 0
36663: ST_TO_ADDR
// end ;
36664: LD_VAR 0 3
36668: RET
// export function HealTarget ( sci ) ; begin
36669: LD_INT 0
36671: PPUSH
// if not sci then
36672: LD_VAR 0 1
36676: NOT
36677: IFFALSE 36681
// exit ;
36679: GO 36746
// result := 0 ;
36681: LD_ADDR_VAR 0 2
36685: PUSH
36686: LD_INT 0
36688: ST_TO_ADDR
// if GetTaskList ( sci ) then
36689: LD_VAR 0 1
36693: PPUSH
36694: CALL_OW 437
36698: IFFALSE 36746
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 437
36709: PUSH
36710: LD_INT 1
36712: ARRAY
36713: PUSH
36714: LD_INT 1
36716: ARRAY
36717: PUSH
36718: LD_STRING l
36720: EQUAL
36721: IFFALSE 36746
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36723: LD_ADDR_VAR 0 2
36727: PUSH
36728: LD_VAR 0 1
36732: PPUSH
36733: CALL_OW 437
36737: PUSH
36738: LD_INT 1
36740: ARRAY
36741: PUSH
36742: LD_INT 4
36744: ARRAY
36745: ST_TO_ADDR
// end ;
36746: LD_VAR 0 2
36750: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36751: LD_INT 0
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
// if not base_units then
36757: LD_VAR 0 1
36761: NOT
36762: IFFALSE 36766
// exit ;
36764: GO 36853
// result := false ;
36766: LD_ADDR_VAR 0 2
36770: PUSH
36771: LD_INT 0
36773: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36774: LD_ADDR_VAR 0 5
36778: PUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: LD_INT 21
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PPUSH
36794: CALL_OW 72
36798: ST_TO_ADDR
// if not tmp then
36799: LD_VAR 0 5
36803: NOT
36804: IFFALSE 36808
// exit ;
36806: GO 36853
// for i in tmp do
36808: LD_ADDR_VAR 0 3
36812: PUSH
36813: LD_VAR 0 5
36817: PUSH
36818: FOR_IN
36819: IFFALSE 36851
// begin result := EnemyInRange ( i , 22 ) ;
36821: LD_ADDR_VAR 0 2
36825: PUSH
36826: LD_VAR 0 3
36830: PPUSH
36831: LD_INT 22
36833: PPUSH
36834: CALL 34440 0 2
36838: ST_TO_ADDR
// if result then
36839: LD_VAR 0 2
36843: IFFALSE 36849
// exit ;
36845: POP
36846: POP
36847: GO 36853
// end ;
36849: GO 36818
36851: POP
36852: POP
// end ;
36853: LD_VAR 0 2
36857: RET
// export function FilterByTag ( units , tag ) ; begin
36858: LD_INT 0
36860: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36861: LD_ADDR_VAR 0 3
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: LD_INT 120
36873: PUSH
36874: LD_VAR 0 2
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PPUSH
36883: CALL_OW 72
36887: ST_TO_ADDR
// end ;
36888: LD_VAR 0 3
36892: RET
// export function IsDriver ( un ) ; begin
36893: LD_INT 0
36895: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36896: LD_ADDR_VAR 0 2
36900: PUSH
36901: LD_VAR 0 1
36905: PUSH
36906: LD_INT 55
36908: PUSH
36909: EMPTY
36910: LIST
36911: PPUSH
36912: CALL_OW 69
36916: IN
36917: ST_TO_ADDR
// end ;
36918: LD_VAR 0 2
36922: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36923: LD_INT 0
36925: PPUSH
36926: PPUSH
// list := [ ] ;
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: EMPTY
36933: ST_TO_ADDR
// case d of 0 :
36934: LD_VAR 0 3
36938: PUSH
36939: LD_INT 0
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 37080
36947: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36948: LD_ADDR_VAR 0 5
36952: PUSH
36953: LD_VAR 0 1
36957: PUSH
36958: LD_INT 4
36960: MINUS
36961: PUSH
36962: LD_VAR 0 2
36966: PUSH
36967: LD_INT 4
36969: MINUS
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_VAR 0 1
36983: PUSH
36984: LD_INT 3
36986: MINUS
36987: PUSH
36988: LD_VAR 0 2
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: PUSH
37001: LD_VAR 0 1
37005: PUSH
37006: LD_INT 4
37008: PLUS
37009: PUSH
37010: LD_VAR 0 2
37014: PUSH
37015: LD_INT 4
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: PUSH
37023: LD_VAR 0 1
37027: PUSH
37028: LD_INT 3
37030: PLUS
37031: PUSH
37032: LD_VAR 0 2
37036: PUSH
37037: LD_INT 3
37039: PLUS
37040: PUSH
37041: LD_INT 5
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: PUSH
37049: LD_VAR 0 1
37053: PUSH
37054: LD_VAR 0 2
37058: PUSH
37059: LD_INT 4
37061: PLUS
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// end ; 1 :
37078: GO 37778
37080: LD_INT 1
37082: DOUBLE
37083: EQUAL
37084: IFTRUE 37088
37086: GO 37221
37088: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37089: LD_ADDR_VAR 0 5
37093: PUSH
37094: LD_VAR 0 1
37098: PUSH
37099: LD_VAR 0 2
37103: PUSH
37104: LD_INT 4
37106: MINUS
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: PUSH
37116: LD_VAR 0 1
37120: PUSH
37121: LD_INT 3
37123: MINUS
37124: PUSH
37125: LD_VAR 0 2
37129: PUSH
37130: LD_INT 3
37132: MINUS
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PUSH
37142: LD_VAR 0 1
37146: PUSH
37147: LD_INT 4
37149: MINUS
37150: PUSH
37151: LD_VAR 0 2
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: LD_VAR 0 1
37168: PUSH
37169: LD_VAR 0 2
37173: PUSH
37174: LD_INT 3
37176: PLUS
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: PUSH
37186: LD_VAR 0 1
37190: PUSH
37191: LD_INT 4
37193: PLUS
37194: PUSH
37195: LD_VAR 0 2
37199: PUSH
37200: LD_INT 4
37202: PLUS
37203: PUSH
37204: LD_INT 5
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// end ; 2 :
37219: GO 37778
37221: LD_INT 2
37223: DOUBLE
37224: EQUAL
37225: IFTRUE 37229
37227: GO 37358
37229: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37230: LD_ADDR_VAR 0 5
37234: PUSH
37235: LD_VAR 0 1
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_INT 3
37247: MINUS
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: LD_VAR 0 1
37261: PUSH
37262: LD_INT 4
37264: PLUS
37265: PUSH
37266: LD_VAR 0 2
37270: PUSH
37271: LD_INT 4
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: PUSH
37279: LD_VAR 0 1
37283: PUSH
37284: LD_VAR 0 2
37288: PUSH
37289: LD_INT 4
37291: PLUS
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: PUSH
37301: LD_VAR 0 1
37305: PUSH
37306: LD_INT 3
37308: MINUS
37309: PUSH
37310: LD_VAR 0 2
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: PUSH
37323: LD_VAR 0 1
37327: PUSH
37328: LD_INT 4
37330: MINUS
37331: PUSH
37332: LD_VAR 0 2
37336: PUSH
37337: LD_INT 4
37339: MINUS
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// end ; 3 :
37356: GO 37778
37358: LD_INT 3
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 37499
37366: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37367: LD_ADDR_VAR 0 5
37371: PUSH
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 3
37379: PLUS
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: LD_INT 4
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: PUSH
37394: LD_VAR 0 1
37398: PUSH
37399: LD_INT 4
37401: PLUS
37402: PUSH
37403: LD_VAR 0 2
37407: PUSH
37408: LD_INT 4
37410: PLUS
37411: PUSH
37412: LD_INT 5
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: LD_VAR 0 1
37424: PUSH
37425: LD_INT 4
37427: MINUS
37428: PUSH
37429: LD_VAR 0 2
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: LD_VAR 0 2
37451: PUSH
37452: LD_INT 4
37454: MINUS
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: PUSH
37464: LD_VAR 0 1
37468: PUSH
37469: LD_INT 3
37471: MINUS
37472: PUSH
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 3
37480: MINUS
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// end ; 4 :
37497: GO 37778
37499: LD_INT 4
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 37640
37507: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37508: LD_ADDR_VAR 0 5
37512: PUSH
37513: LD_VAR 0 1
37517: PUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_INT 4
37525: PLUS
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: PUSH
37535: LD_VAR 0 1
37539: PUSH
37540: LD_INT 3
37542: PLUS
37543: PUSH
37544: LD_VAR 0 2
37548: PUSH
37549: LD_INT 3
37551: PLUS
37552: PUSH
37553: LD_INT 5
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: PUSH
37561: LD_VAR 0 1
37565: PUSH
37566: LD_INT 4
37568: PLUS
37569: PUSH
37570: LD_VAR 0 2
37574: PUSH
37575: LD_INT 4
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PUSH
37583: LD_VAR 0 1
37587: PUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_INT 3
37595: MINUS
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: PUSH
37605: LD_VAR 0 1
37609: PUSH
37610: LD_INT 4
37612: MINUS
37613: PUSH
37614: LD_VAR 0 2
37618: PUSH
37619: LD_INT 4
37621: MINUS
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// end ; 5 :
37638: GO 37778
37640: LD_INT 5
37642: DOUBLE
37643: EQUAL
37644: IFTRUE 37648
37646: GO 37777
37648: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37649: LD_ADDR_VAR 0 5
37653: PUSH
37654: LD_VAR 0 1
37658: PUSH
37659: LD_INT 4
37661: MINUS
37662: PUSH
37663: LD_VAR 0 2
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: PUSH
37676: LD_VAR 0 1
37680: PUSH
37681: LD_VAR 0 2
37685: PUSH
37686: LD_INT 4
37688: MINUS
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: LD_VAR 0 1
37702: PUSH
37703: LD_INT 4
37705: PLUS
37706: PUSH
37707: LD_VAR 0 2
37711: PUSH
37712: LD_INT 4
37714: PLUS
37715: PUSH
37716: LD_INT 5
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: PUSH
37724: LD_VAR 0 1
37728: PUSH
37729: LD_INT 3
37731: PLUS
37732: PUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_INT 4
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PUSH
37746: LD_VAR 0 1
37750: PUSH
37751: LD_VAR 0 2
37755: PUSH
37756: LD_INT 3
37758: PLUS
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: ST_TO_ADDR
// end ; end ;
37775: GO 37778
37777: POP
// result := list ;
37778: LD_ADDR_VAR 0 4
37782: PUSH
37783: LD_VAR 0 5
37787: ST_TO_ADDR
// end ;
37788: LD_VAR 0 4
37792: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37793: LD_INT 0
37795: PPUSH
37796: PPUSH
37797: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37798: LD_VAR 0 1
37802: NOT
37803: PUSH
37804: LD_VAR 0 2
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 4
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: IN
37827: NOT
37828: OR
37829: IFFALSE 37833
// exit ;
37831: GO 37916
// tmp := [ ] ;
37833: LD_ADDR_VAR 0 5
37837: PUSH
37838: EMPTY
37839: ST_TO_ADDR
// for i in units do
37840: LD_ADDR_VAR 0 4
37844: PUSH
37845: LD_VAR 0 1
37849: PUSH
37850: FOR_IN
37851: IFFALSE 37885
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37853: LD_ADDR_VAR 0 5
37857: PUSH
37858: LD_VAR 0 5
37862: PPUSH
37863: LD_VAR 0 4
37867: PPUSH
37868: LD_VAR 0 2
37872: PPUSH
37873: CALL_OW 259
37877: PPUSH
37878: CALL 39276 0 2
37882: ST_TO_ADDR
37883: GO 37850
37885: POP
37886: POP
// if not tmp then
37887: LD_VAR 0 5
37891: NOT
37892: IFFALSE 37896
// exit ;
37894: GO 37916
// result := SortListByListDesc ( units , tmp ) ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_VAR 0 1
37905: PPUSH
37906: LD_VAR 0 5
37910: PPUSH
37911: CALL_OW 77
37915: ST_TO_ADDR
// end ;
37916: LD_VAR 0 3
37920: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37921: LD_INT 0
37923: PPUSH
37924: PPUSH
37925: PPUSH
// result := false ;
37926: LD_ADDR_VAR 0 3
37930: PUSH
37931: LD_INT 0
37933: ST_TO_ADDR
// if not building then
37934: LD_VAR 0 2
37938: NOT
37939: IFFALSE 37943
// exit ;
37941: GO 38081
// x := GetX ( building ) ;
37943: LD_ADDR_VAR 0 4
37947: PUSH
37948: LD_VAR 0 2
37952: PPUSH
37953: CALL_OW 250
37957: ST_TO_ADDR
// y := GetY ( building ) ;
37958: LD_ADDR_VAR 0 5
37962: PUSH
37963: LD_VAR 0 2
37967: PPUSH
37968: CALL_OW 251
37972: ST_TO_ADDR
// if not x or not y then
37973: LD_VAR 0 4
37977: NOT
37978: PUSH
37979: LD_VAR 0 5
37983: NOT
37984: OR
37985: IFFALSE 37989
// exit ;
37987: GO 38081
// if GetTaskList ( unit ) then
37989: LD_VAR 0 1
37993: PPUSH
37994: CALL_OW 437
37998: IFFALSE 38081
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38000: LD_STRING e
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 437
38012: PUSH
38013: LD_INT 1
38015: ARRAY
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: EQUAL
38021: PUSH
38022: LD_VAR 0 4
38026: PUSH
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 437
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: PUSH
38041: LD_INT 2
38043: ARRAY
38044: EQUAL
38045: AND
38046: PUSH
38047: LD_VAR 0 5
38051: PUSH
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 437
38061: PUSH
38062: LD_INT 1
38064: ARRAY
38065: PUSH
38066: LD_INT 3
38068: ARRAY
38069: EQUAL
38070: AND
38071: IFFALSE 38081
// result := true end ;
38073: LD_ADDR_VAR 0 3
38077: PUSH
38078: LD_INT 1
38080: ST_TO_ADDR
// end ;
38081: LD_VAR 0 3
38085: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38086: LD_INT 0
38088: PPUSH
// result := false ;
38089: LD_ADDR_VAR 0 4
38093: PUSH
38094: LD_INT 0
38096: ST_TO_ADDR
// if GetTaskList ( unit ) then
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 437
38106: IFFALSE 38189
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38108: LD_STRING M
38110: PUSH
38111: LD_VAR 0 1
38115: PPUSH
38116: CALL_OW 437
38120: PUSH
38121: LD_INT 1
38123: ARRAY
38124: PUSH
38125: LD_INT 1
38127: ARRAY
38128: EQUAL
38129: PUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_VAR 0 1
38139: PPUSH
38140: CALL_OW 437
38144: PUSH
38145: LD_INT 1
38147: ARRAY
38148: PUSH
38149: LD_INT 2
38151: ARRAY
38152: EQUAL
38153: AND
38154: PUSH
38155: LD_VAR 0 3
38159: PUSH
38160: LD_VAR 0 1
38164: PPUSH
38165: CALL_OW 437
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PUSH
38174: LD_INT 3
38176: ARRAY
38177: EQUAL
38178: AND
38179: IFFALSE 38189
// result := true ;
38181: LD_ADDR_VAR 0 4
38185: PUSH
38186: LD_INT 1
38188: ST_TO_ADDR
// end ; end ;
38189: LD_VAR 0 4
38193: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38194: LD_INT 0
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
// if not unit or not area then
38200: LD_VAR 0 1
38204: NOT
38205: PUSH
38206: LD_VAR 0 2
38210: NOT
38211: OR
38212: IFFALSE 38216
// exit ;
38214: GO 38379
// tmp := AreaToList ( area , i ) ;
38216: LD_ADDR_VAR 0 6
38220: PUSH
38221: LD_VAR 0 2
38225: PPUSH
38226: LD_VAR 0 5
38230: PPUSH
38231: CALL_OW 517
38235: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38236: LD_ADDR_VAR 0 5
38240: PUSH
38241: DOUBLE
38242: LD_INT 1
38244: DEC
38245: ST_TO_ADDR
38246: LD_VAR 0 6
38250: PUSH
38251: LD_INT 1
38253: ARRAY
38254: PUSH
38255: FOR_TO
38256: IFFALSE 38377
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38258: LD_ADDR_VAR 0 7
38262: PUSH
38263: LD_VAR 0 6
38267: PUSH
38268: LD_INT 1
38270: ARRAY
38271: PUSH
38272: LD_VAR 0 5
38276: ARRAY
38277: PUSH
38278: LD_VAR 0 6
38282: PUSH
38283: LD_INT 2
38285: ARRAY
38286: PUSH
38287: LD_VAR 0 5
38291: ARRAY
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
38297: LD_INT 92
38299: PUSH
38300: LD_VAR 0 7
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: PUSH
38309: LD_VAR 0 7
38313: PUSH
38314: LD_INT 2
38316: ARRAY
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: PPUSH
38327: CALL_OW 69
38331: PUSH
38332: LD_INT 0
38334: EQUAL
38335: IFFALSE 38375
// begin PlaceUnitArea ( unit , area , mode ) ;
38337: LD_VAR 0 1
38341: PPUSH
38342: LD_VAR 0 2
38346: PPUSH
38347: LD_VAR 0 3
38351: PPUSH
38352: CALL_OW 49
// result := IsPlaced ( unit ) ;
38356: LD_ADDR_VAR 0 4
38360: PUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 305
38370: ST_TO_ADDR
// exit ;
38371: POP
38372: POP
38373: GO 38379
// end ; end ;
38375: GO 38255
38377: POP
38378: POP
// end ;
38379: LD_VAR 0 4
38383: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38384: LD_INT 0
38386: PPUSH
38387: PPUSH
38388: PPUSH
// if not side or side > 8 then
38389: LD_VAR 0 1
38393: NOT
38394: PUSH
38395: LD_VAR 0 1
38399: PUSH
38400: LD_INT 8
38402: GREATER
38403: OR
38404: IFFALSE 38408
// exit ;
38406: GO 38595
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38408: LD_ADDR_VAR 0 4
38412: PUSH
38413: LD_INT 22
38415: PUSH
38416: LD_VAR 0 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 21
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PPUSH
38439: CALL_OW 69
38443: ST_TO_ADDR
// if not tmp then
38444: LD_VAR 0 4
38448: NOT
38449: IFFALSE 38453
// exit ;
38451: GO 38595
// enable_addtolog := true ;
38453: LD_ADDR_OWVAR 81
38457: PUSH
38458: LD_INT 1
38460: ST_TO_ADDR
// AddToLog ( [ ) ;
38461: LD_STRING [
38463: PPUSH
38464: CALL_OW 561
// for i in tmp do
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_VAR 0 4
38477: PUSH
38478: FOR_IN
38479: IFFALSE 38586
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38481: LD_STRING [
38483: PUSH
38484: LD_VAR 0 3
38488: PPUSH
38489: CALL_OW 266
38493: STR
38494: PUSH
38495: LD_STRING , 
38497: STR
38498: PUSH
38499: LD_VAR 0 3
38503: PPUSH
38504: CALL_OW 250
38508: STR
38509: PUSH
38510: LD_STRING , 
38512: STR
38513: PUSH
38514: LD_VAR 0 3
38518: PPUSH
38519: CALL_OW 251
38523: STR
38524: PUSH
38525: LD_STRING , 
38527: STR
38528: PUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: CALL_OW 254
38538: STR
38539: PUSH
38540: LD_STRING , 
38542: STR
38543: PUSH
38544: LD_VAR 0 3
38548: PPUSH
38549: LD_INT 1
38551: PPUSH
38552: CALL_OW 268
38556: STR
38557: PUSH
38558: LD_STRING , 
38560: STR
38561: PUSH
38562: LD_VAR 0 3
38566: PPUSH
38567: LD_INT 2
38569: PPUSH
38570: CALL_OW 268
38574: STR
38575: PUSH
38576: LD_STRING ],
38578: STR
38579: PPUSH
38580: CALL_OW 561
// end ;
38584: GO 38478
38586: POP
38587: POP
// AddToLog ( ]; ) ;
38588: LD_STRING ];
38590: PPUSH
38591: CALL_OW 561
// end ;
38595: LD_VAR 0 2
38599: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38600: LD_INT 0
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
// if not area or not rate or not max then
38607: LD_VAR 0 1
38611: NOT
38612: PUSH
38613: LD_VAR 0 2
38617: NOT
38618: OR
38619: PUSH
38620: LD_VAR 0 4
38624: NOT
38625: OR
38626: IFFALSE 38630
// exit ;
38628: GO 38819
// while 1 do
38630: LD_INT 1
38632: IFFALSE 38819
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38634: LD_ADDR_VAR 0 9
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: LD_INT 1
38646: PPUSH
38647: CALL_OW 287
38651: PUSH
38652: LD_INT 10
38654: MUL
38655: ST_TO_ADDR
// r := rate / 10 ;
38656: LD_ADDR_VAR 0 7
38660: PUSH
38661: LD_VAR 0 2
38665: PUSH
38666: LD_INT 10
38668: DIVREAL
38669: ST_TO_ADDR
// time := 1 1$00 ;
38670: LD_ADDR_VAR 0 8
38674: PUSH
38675: LD_INT 2100
38677: ST_TO_ADDR
// if amount < min then
38678: LD_VAR 0 9
38682: PUSH
38683: LD_VAR 0 3
38687: LESS
38688: IFFALSE 38706
// r := r * 2 else
38690: LD_ADDR_VAR 0 7
38694: PUSH
38695: LD_VAR 0 7
38699: PUSH
38700: LD_INT 2
38702: MUL
38703: ST_TO_ADDR
38704: GO 38732
// if amount > max then
38706: LD_VAR 0 9
38710: PUSH
38711: LD_VAR 0 4
38715: GREATER
38716: IFFALSE 38732
// r := r / 2 ;
38718: LD_ADDR_VAR 0 7
38722: PUSH
38723: LD_VAR 0 7
38727: PUSH
38728: LD_INT 2
38730: DIVREAL
38731: ST_TO_ADDR
// time := time / r ;
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_VAR 0 8
38741: PUSH
38742: LD_VAR 0 7
38746: DIVREAL
38747: ST_TO_ADDR
// if time < 0 then
38748: LD_VAR 0 8
38752: PUSH
38753: LD_INT 0
38755: LESS
38756: IFFALSE 38773
// time := time * - 1 ;
38758: LD_ADDR_VAR 0 8
38762: PUSH
38763: LD_VAR 0 8
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: MUL
38772: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38773: LD_VAR 0 8
38777: PUSH
38778: LD_INT 35
38780: PPUSH
38781: LD_INT 875
38783: PPUSH
38784: CALL_OW 12
38788: PLUS
38789: PPUSH
38790: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38794: LD_INT 1
38796: PPUSH
38797: LD_INT 5
38799: PPUSH
38800: CALL_OW 12
38804: PPUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: LD_INT 1
38812: PPUSH
38813: CALL_OW 55
// end ;
38817: GO 38630
// end ;
38819: LD_VAR 0 5
38823: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38824: LD_INT 0
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
// if not turrets or not factories then
38834: LD_VAR 0 1
38838: NOT
38839: PUSH
38840: LD_VAR 0 2
38844: NOT
38845: OR
38846: IFFALSE 38850
// exit ;
38848: GO 39157
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38850: LD_ADDR_VAR 0 10
38854: PUSH
38855: LD_INT 5
38857: PUSH
38858: LD_INT 6
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: LD_INT 5
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 24
38892: PUSH
38893: LD_INT 25
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 23
38902: PUSH
38903: LD_INT 27
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 42
38916: PUSH
38917: LD_INT 43
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 44
38926: PUSH
38927: LD_INT 46
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 45
38936: PUSH
38937: LD_INT 47
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// result := [ ] ;
38954: LD_ADDR_VAR 0 3
38958: PUSH
38959: EMPTY
38960: ST_TO_ADDR
// for i in turrets do
38961: LD_ADDR_VAR 0 4
38965: PUSH
38966: LD_VAR 0 1
38970: PUSH
38971: FOR_IN
38972: IFFALSE 39155
// begin nat := GetNation ( i ) ;
38974: LD_ADDR_VAR 0 7
38978: PUSH
38979: LD_VAR 0 4
38983: PPUSH
38984: CALL_OW 248
38988: ST_TO_ADDR
// weapon := 0 ;
38989: LD_ADDR_VAR 0 8
38993: PUSH
38994: LD_INT 0
38996: ST_TO_ADDR
// if not nat then
38997: LD_VAR 0 7
39001: NOT
39002: IFFALSE 39006
// continue ;
39004: GO 38971
// for j in list [ nat ] do
39006: LD_ADDR_VAR 0 5
39010: PUSH
39011: LD_VAR 0 10
39015: PUSH
39016: LD_VAR 0 7
39020: ARRAY
39021: PUSH
39022: FOR_IN
39023: IFFALSE 39064
// if GetBWeapon ( i ) = j [ 1 ] then
39025: LD_VAR 0 4
39029: PPUSH
39030: CALL_OW 269
39034: PUSH
39035: LD_VAR 0 5
39039: PUSH
39040: LD_INT 1
39042: ARRAY
39043: EQUAL
39044: IFFALSE 39062
// begin weapon := j [ 2 ] ;
39046: LD_ADDR_VAR 0 8
39050: PUSH
39051: LD_VAR 0 5
39055: PUSH
39056: LD_INT 2
39058: ARRAY
39059: ST_TO_ADDR
// break ;
39060: GO 39064
// end ;
39062: GO 39022
39064: POP
39065: POP
// if not weapon then
39066: LD_VAR 0 8
39070: NOT
39071: IFFALSE 39075
// continue ;
39073: GO 38971
// for k in factories do
39075: LD_ADDR_VAR 0 6
39079: PUSH
39080: LD_VAR 0 2
39084: PUSH
39085: FOR_IN
39086: IFFALSE 39151
// begin weapons := AvailableWeaponList ( k ) ;
39088: LD_ADDR_VAR 0 9
39092: PUSH
39093: LD_VAR 0 6
39097: PPUSH
39098: CALL_OW 478
39102: ST_TO_ADDR
// if not weapons then
39103: LD_VAR 0 9
39107: NOT
39108: IFFALSE 39112
// continue ;
39110: GO 39085
// if weapon in weapons then
39112: LD_VAR 0 8
39116: PUSH
39117: LD_VAR 0 9
39121: IN
39122: IFFALSE 39149
// begin result := [ i , weapon ] ;
39124: LD_ADDR_VAR 0 3
39128: PUSH
39129: LD_VAR 0 4
39133: PUSH
39134: LD_VAR 0 8
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: ST_TO_ADDR
// exit ;
39143: POP
39144: POP
39145: POP
39146: POP
39147: GO 39157
// end ; end ;
39149: GO 39085
39151: POP
39152: POP
// end ;
39153: GO 38971
39155: POP
39156: POP
// end ;
39157: LD_VAR 0 3
39161: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39162: LD_INT 0
39164: PPUSH
// if not side or side > 8 then
39165: LD_VAR 0 3
39169: NOT
39170: PUSH
39171: LD_VAR 0 3
39175: PUSH
39176: LD_INT 8
39178: GREATER
39179: OR
39180: IFFALSE 39184
// exit ;
39182: GO 39243
// if not range then
39184: LD_VAR 0 4
39188: NOT
39189: IFFALSE 39200
// range := - 12 ;
39191: LD_ADDR_VAR 0 4
39195: PUSH
39196: LD_INT 12
39198: NEG
39199: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39200: LD_VAR 0 1
39204: PPUSH
39205: LD_VAR 0 2
39209: PPUSH
39210: LD_VAR 0 3
39214: PPUSH
39215: LD_VAR 0 4
39219: PPUSH
39220: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39224: LD_VAR 0 1
39228: PPUSH
39229: LD_VAR 0 2
39233: PPUSH
39234: LD_VAR 0 3
39238: PPUSH
39239: CALL_OW 331
// end ;
39243: LD_VAR 0 5
39247: RET
// export function Video ( mode ) ; begin
39248: LD_INT 0
39250: PPUSH
// ingame_video = mode ;
39251: LD_ADDR_OWVAR 52
39255: PUSH
39256: LD_VAR 0 1
39260: ST_TO_ADDR
// interface_hidden = mode ;
39261: LD_ADDR_OWVAR 54
39265: PUSH
39266: LD_VAR 0 1
39270: ST_TO_ADDR
// end ;
39271: LD_VAR 0 2
39275: RET
// export function Join ( array , element ) ; begin
39276: LD_INT 0
39278: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39279: LD_ADDR_VAR 0 3
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: LD_VAR 0 1
39293: PUSH
39294: LD_INT 1
39296: PLUS
39297: PPUSH
39298: LD_VAR 0 2
39302: PPUSH
39303: CALL_OW 1
39307: ST_TO_ADDR
// end ;
39308: LD_VAR 0 3
39312: RET
// export function JoinUnion ( array , element ) ; begin
39313: LD_INT 0
39315: PPUSH
// result := array union element ;
39316: LD_ADDR_VAR 0 3
39320: PUSH
39321: LD_VAR 0 1
39325: PUSH
39326: LD_VAR 0 2
39330: UNION
39331: ST_TO_ADDR
// end ;
39332: LD_VAR 0 3
39336: RET
// export function GetBehemoths ( side ) ; begin
39337: LD_INT 0
39339: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39340: LD_ADDR_VAR 0 2
39344: PUSH
39345: LD_INT 22
39347: PUSH
39348: LD_VAR 0 1
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 31
39359: PUSH
39360: LD_INT 25
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PPUSH
39371: CALL_OW 69
39375: ST_TO_ADDR
// end ;
39376: LD_VAR 0 2
39380: RET
// export function Shuffle ( array ) ; var i , index ; begin
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
// result := [ ] ;
39386: LD_ADDR_VAR 0 2
39390: PUSH
39391: EMPTY
39392: ST_TO_ADDR
// if not array then
39393: LD_VAR 0 1
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 39501
// Randomize ;
39402: CALL_OW 10
// for i = array downto 1 do
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: DOUBLE
39412: LD_VAR 0 1
39416: INC
39417: ST_TO_ADDR
39418: LD_INT 1
39420: PUSH
39421: FOR_DOWNTO
39422: IFFALSE 39499
// begin index := rand ( 1 , array ) ;
39424: LD_ADDR_VAR 0 4
39428: PUSH
39429: LD_INT 1
39431: PPUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 12
39441: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39442: LD_ADDR_VAR 0 2
39446: PUSH
39447: LD_VAR 0 2
39451: PPUSH
39452: LD_VAR 0 2
39456: PUSH
39457: LD_INT 1
39459: PLUS
39460: PPUSH
39461: LD_VAR 0 1
39465: PUSH
39466: LD_VAR 0 4
39470: ARRAY
39471: PPUSH
39472: CALL_OW 2
39476: ST_TO_ADDR
// array := Delete ( array , index ) ;
39477: LD_ADDR_VAR 0 1
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: LD_VAR 0 4
39491: PPUSH
39492: CALL_OW 3
39496: ST_TO_ADDR
// end ;
39497: GO 39421
39499: POP
39500: POP
// end ;
39501: LD_VAR 0 2
39505: RET
// export function GetBaseMaterials ( base ) ; begin
39506: LD_INT 0
39508: PPUSH
// result := [ 0 , 0 , 0 ] ;
39509: LD_ADDR_VAR 0 2
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: ST_TO_ADDR
// if not base then
39528: LD_VAR 0 1
39532: NOT
39533: IFFALSE 39537
// exit ;
39535: GO 39586
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39537: LD_ADDR_VAR 0 2
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: LD_INT 1
39549: PPUSH
39550: CALL_OW 275
39554: PUSH
39555: LD_VAR 0 1
39559: PPUSH
39560: LD_INT 2
39562: PPUSH
39563: CALL_OW 275
39567: PUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: LD_INT 3
39575: PPUSH
39576: CALL_OW 275
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
// end ;
39586: LD_VAR 0 2
39590: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39591: LD_INT 0
39593: PPUSH
39594: PPUSH
// result := array ;
39595: LD_ADDR_VAR 0 3
39599: PUSH
39600: LD_VAR 0 1
39604: ST_TO_ADDR
// if size >= result then
39605: LD_VAR 0 2
39609: PUSH
39610: LD_VAR 0 3
39614: GREATEREQUAL
39615: IFFALSE 39619
// exit ;
39617: GO 39669
// if size then
39619: LD_VAR 0 2
39623: IFFALSE 39669
// for i := array downto size do
39625: LD_ADDR_VAR 0 4
39629: PUSH
39630: DOUBLE
39631: LD_VAR 0 1
39635: INC
39636: ST_TO_ADDR
39637: LD_VAR 0 2
39641: PUSH
39642: FOR_DOWNTO
39643: IFFALSE 39667
// result := Delete ( result , result ) ;
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_VAR 0 3
39654: PPUSH
39655: LD_VAR 0 3
39659: PPUSH
39660: CALL_OW 3
39664: ST_TO_ADDR
39665: GO 39642
39667: POP
39668: POP
// end ;
39669: LD_VAR 0 3
39673: RET
// export function ComExit ( unit ) ; var tmp ; begin
39674: LD_INT 0
39676: PPUSH
39677: PPUSH
// if not IsInUnit ( unit ) then
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 310
39687: NOT
39688: IFFALSE 39692
// exit ;
39690: GO 39752
// tmp := IsInUnit ( unit ) ;
39692: LD_ADDR_VAR 0 3
39696: PUSH
39697: LD_VAR 0 1
39701: PPUSH
39702: CALL_OW 310
39706: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39707: LD_VAR 0 3
39711: PPUSH
39712: CALL_OW 247
39716: PUSH
39717: LD_INT 2
39719: EQUAL
39720: IFFALSE 39733
// ComExitVehicle ( unit ) else
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 121
39731: GO 39742
// ComExitBuilding ( unit ) ;
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 122
// result := tmp ;
39742: LD_ADDR_VAR 0 2
39746: PUSH
39747: LD_VAR 0 3
39751: ST_TO_ADDR
// end ;
39752: LD_VAR 0 2
39756: RET
// export function ComExitAll ( units ) ; var i ; begin
39757: LD_INT 0
39759: PPUSH
39760: PPUSH
// if not units then
39761: LD_VAR 0 1
39765: NOT
39766: IFFALSE 39770
// exit ;
39768: GO 39796
// for i in units do
39770: LD_ADDR_VAR 0 3
39774: PUSH
39775: LD_VAR 0 1
39779: PUSH
39780: FOR_IN
39781: IFFALSE 39794
// ComExit ( i ) ;
39783: LD_VAR 0 3
39787: PPUSH
39788: CALL 39674 0 1
39792: GO 39780
39794: POP
39795: POP
// end ;
39796: LD_VAR 0 2
39800: RET
// export function ResetHc ; begin
39801: LD_INT 0
39803: PPUSH
// InitHc ;
39804: CALL_OW 19
// hc_importance := 0 ;
39808: LD_ADDR_OWVAR 32
39812: PUSH
39813: LD_INT 0
39815: ST_TO_ADDR
// end ;
39816: LD_VAR 0 1
39820: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39821: LD_INT 0
39823: PPUSH
39824: PPUSH
39825: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39826: LD_ADDR_VAR 0 6
39830: PUSH
39831: LD_VAR 0 1
39835: PUSH
39836: LD_VAR 0 3
39840: PLUS
39841: PUSH
39842: LD_INT 2
39844: DIV
39845: ST_TO_ADDR
// if _x < 0 then
39846: LD_VAR 0 6
39850: PUSH
39851: LD_INT 0
39853: LESS
39854: IFFALSE 39871
// _x := _x * - 1 ;
39856: LD_ADDR_VAR 0 6
39860: PUSH
39861: LD_VAR 0 6
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: MUL
39870: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39871: LD_ADDR_VAR 0 7
39875: PUSH
39876: LD_VAR 0 2
39880: PUSH
39881: LD_VAR 0 4
39885: PLUS
39886: PUSH
39887: LD_INT 2
39889: DIV
39890: ST_TO_ADDR
// if _y < 0 then
39891: LD_VAR 0 7
39895: PUSH
39896: LD_INT 0
39898: LESS
39899: IFFALSE 39916
// _y := _y * - 1 ;
39901: LD_ADDR_VAR 0 7
39905: PUSH
39906: LD_VAR 0 7
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: MUL
39915: ST_TO_ADDR
// result := [ _x , _y ] ;
39916: LD_ADDR_VAR 0 5
39920: PUSH
39921: LD_VAR 0 6
39925: PUSH
39926: LD_VAR 0 7
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: ST_TO_ADDR
// end ;
39935: LD_VAR 0 5
39939: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39940: LD_INT 0
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
// task := GetTaskList ( unit ) ;
39946: LD_ADDR_VAR 0 7
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 437
39960: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39961: LD_VAR 0 7
39965: NOT
39966: PUSH
39967: LD_VAR 0 1
39971: PPUSH
39972: LD_VAR 0 2
39976: PPUSH
39977: CALL_OW 308
39981: NOT
39982: AND
39983: IFFALSE 39987
// exit ;
39985: GO 40105
// if IsInArea ( unit , area ) then
39987: LD_VAR 0 1
39991: PPUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: CALL_OW 308
40001: IFFALSE 40019
// begin ComMoveToArea ( unit , goAway ) ;
40003: LD_VAR 0 1
40007: PPUSH
40008: LD_VAR 0 3
40012: PPUSH
40013: CALL_OW 113
// exit ;
40017: GO 40105
// end ; if task [ 1 ] [ 1 ] <> M then
40019: LD_VAR 0 7
40023: PUSH
40024: LD_INT 1
40026: ARRAY
40027: PUSH
40028: LD_INT 1
40030: ARRAY
40031: PUSH
40032: LD_STRING M
40034: NONEQUAL
40035: IFFALSE 40039
// exit ;
40037: GO 40105
// x := task [ 1 ] [ 2 ] ;
40039: LD_ADDR_VAR 0 5
40043: PUSH
40044: LD_VAR 0 7
40048: PUSH
40049: LD_INT 1
40051: ARRAY
40052: PUSH
40053: LD_INT 2
40055: ARRAY
40056: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40057: LD_ADDR_VAR 0 6
40061: PUSH
40062: LD_VAR 0 7
40066: PUSH
40067: LD_INT 1
40069: ARRAY
40070: PUSH
40071: LD_INT 3
40073: ARRAY
40074: ST_TO_ADDR
// if InArea ( x , y , area ) then
40075: LD_VAR 0 5
40079: PPUSH
40080: LD_VAR 0 6
40084: PPUSH
40085: LD_VAR 0 2
40089: PPUSH
40090: CALL_OW 309
40094: IFFALSE 40105
// ComStop ( unit ) ;
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 141
// end ;
40105: LD_VAR 0 4
40109: RET
// export function Abs ( value ) ; begin
40110: LD_INT 0
40112: PPUSH
// result := value ;
40113: LD_ADDR_VAR 0 2
40117: PUSH
40118: LD_VAR 0 1
40122: ST_TO_ADDR
// if value < 0 then
40123: LD_VAR 0 1
40127: PUSH
40128: LD_INT 0
40130: LESS
40131: IFFALSE 40148
// result := value * - 1 ;
40133: LD_ADDR_VAR 0 2
40137: PUSH
40138: LD_VAR 0 1
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: MUL
40147: ST_TO_ADDR
// end ;
40148: LD_VAR 0 2
40152: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
// if not unit or not building then
40163: LD_VAR 0 1
40167: NOT
40168: PUSH
40169: LD_VAR 0 2
40173: NOT
40174: OR
40175: IFFALSE 40179
// exit ;
40177: GO 40405
// x := GetX ( building ) ;
40179: LD_ADDR_VAR 0 4
40183: PUSH
40184: LD_VAR 0 2
40188: PPUSH
40189: CALL_OW 250
40193: ST_TO_ADDR
// y := GetY ( building ) ;
40194: LD_ADDR_VAR 0 6
40198: PUSH
40199: LD_VAR 0 2
40203: PPUSH
40204: CALL_OW 251
40208: ST_TO_ADDR
// d := GetDir ( building ) ;
40209: LD_ADDR_VAR 0 8
40213: PUSH
40214: LD_VAR 0 2
40218: PPUSH
40219: CALL_OW 254
40223: ST_TO_ADDR
// r := 4 ;
40224: LD_ADDR_VAR 0 9
40228: PUSH
40229: LD_INT 4
40231: ST_TO_ADDR
// for i := 1 to 5 do
40232: LD_ADDR_VAR 0 10
40236: PUSH
40237: DOUBLE
40238: LD_INT 1
40240: DEC
40241: ST_TO_ADDR
40242: LD_INT 5
40244: PUSH
40245: FOR_TO
40246: IFFALSE 40403
// begin _x := ShiftX ( x , d , r + i ) ;
40248: LD_ADDR_VAR 0 5
40252: PUSH
40253: LD_VAR 0 4
40257: PPUSH
40258: LD_VAR 0 8
40262: PPUSH
40263: LD_VAR 0 9
40267: PUSH
40268: LD_VAR 0 10
40272: PLUS
40273: PPUSH
40274: CALL_OW 272
40278: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40279: LD_ADDR_VAR 0 7
40283: PUSH
40284: LD_VAR 0 6
40288: PPUSH
40289: LD_VAR 0 8
40293: PPUSH
40294: LD_VAR 0 9
40298: PUSH
40299: LD_VAR 0 10
40303: PLUS
40304: PPUSH
40305: CALL_OW 273
40309: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40310: LD_VAR 0 5
40314: PPUSH
40315: LD_VAR 0 7
40319: PPUSH
40320: CALL_OW 488
40324: PUSH
40325: LD_VAR 0 5
40329: PPUSH
40330: LD_VAR 0 7
40334: PPUSH
40335: CALL_OW 428
40339: PPUSH
40340: CALL_OW 247
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: IN
40355: NOT
40356: AND
40357: IFFALSE 40401
// begin ComMoveXY ( unit , _x , _y ) ;
40359: LD_VAR 0 1
40363: PPUSH
40364: LD_VAR 0 5
40368: PPUSH
40369: LD_VAR 0 7
40373: PPUSH
40374: CALL_OW 111
// result := [ _x , _y ] ;
40378: LD_ADDR_VAR 0 3
40382: PUSH
40383: LD_VAR 0 5
40387: PUSH
40388: LD_VAR 0 7
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: ST_TO_ADDR
// exit ;
40397: POP
40398: POP
40399: GO 40405
// end ; end ;
40401: GO 40245
40403: POP
40404: POP
// end ;
40405: LD_VAR 0 3
40409: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40410: LD_INT 0
40412: PPUSH
40413: PPUSH
40414: PPUSH
// result := 0 ;
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_INT 0
40422: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40423: LD_VAR 0 1
40427: PUSH
40428: LD_INT 0
40430: LESS
40431: PUSH
40432: LD_VAR 0 1
40436: PUSH
40437: LD_INT 8
40439: GREATER
40440: OR
40441: PUSH
40442: LD_VAR 0 2
40446: PUSH
40447: LD_INT 0
40449: LESS
40450: OR
40451: PUSH
40452: LD_VAR 0 2
40456: PUSH
40457: LD_INT 8
40459: GREATER
40460: OR
40461: IFFALSE 40465
// exit ;
40463: GO 40540
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40465: LD_ADDR_VAR 0 4
40469: PUSH
40470: LD_INT 22
40472: PUSH
40473: LD_VAR 0 2
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PPUSH
40482: CALL_OW 69
40486: PUSH
40487: FOR_IN
40488: IFFALSE 40538
// begin un := UnitShoot ( i ) ;
40490: LD_ADDR_VAR 0 5
40494: PUSH
40495: LD_VAR 0 4
40499: PPUSH
40500: CALL_OW 504
40504: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40505: LD_VAR 0 5
40509: PPUSH
40510: CALL_OW 255
40514: PUSH
40515: LD_VAR 0 1
40519: EQUAL
40520: IFFALSE 40536
// begin result := un ;
40522: LD_ADDR_VAR 0 3
40526: PUSH
40527: LD_VAR 0 5
40531: ST_TO_ADDR
// exit ;
40532: POP
40533: POP
40534: GO 40540
// end ; end ;
40536: GO 40487
40538: POP
40539: POP
// end ;
40540: LD_VAR 0 3
40544: RET
// export function GetCargoBay ( units ) ; begin
40545: LD_INT 0
40547: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40548: LD_ADDR_VAR 0 2
40552: PUSH
40553: LD_VAR 0 1
40557: PPUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 34
40563: PUSH
40564: LD_INT 12
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 34
40573: PUSH
40574: LD_INT 51
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 34
40583: PUSH
40584: LD_INT 32
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 34
40593: PUSH
40594: LD_INT 89
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: PPUSH
40608: CALL_OW 72
40612: ST_TO_ADDR
// end ;
40613: LD_VAR 0 2
40617: RET
// export function Negate ( value ) ; begin
40618: LD_INT 0
40620: PPUSH
// result := not value ;
40621: LD_ADDR_VAR 0 2
40625: PUSH
40626: LD_VAR 0 1
40630: NOT
40631: ST_TO_ADDR
// end ;
40632: LD_VAR 0 2
40636: RET
// export function Inc ( value ) ; begin
40637: LD_INT 0
40639: PPUSH
// result := value + 1 ;
40640: LD_ADDR_VAR 0 2
40644: PUSH
40645: LD_VAR 0 1
40649: PUSH
40650: LD_INT 1
40652: PLUS
40653: ST_TO_ADDR
// end ;
40654: LD_VAR 0 2
40658: RET
// export function Dec ( value ) ; begin
40659: LD_INT 0
40661: PPUSH
// result := value - 1 ;
40662: LD_ADDR_VAR 0 2
40666: PUSH
40667: LD_VAR 0 1
40671: PUSH
40672: LD_INT 1
40674: MINUS
40675: ST_TO_ADDR
// end ;
40676: LD_VAR 0 2
40680: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40681: LD_INT 0
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40691: LD_VAR 0 1
40695: PPUSH
40696: LD_VAR 0 2
40700: PPUSH
40701: CALL_OW 488
40705: NOT
40706: PUSH
40707: LD_VAR 0 3
40711: PPUSH
40712: LD_VAR 0 4
40716: PPUSH
40717: CALL_OW 488
40721: NOT
40722: OR
40723: IFFALSE 40736
// begin result := - 1 ;
40725: LD_ADDR_VAR 0 5
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: ST_TO_ADDR
// exit ;
40734: GO 40971
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40736: LD_ADDR_VAR 0 12
40740: PUSH
40741: LD_VAR 0 1
40745: PPUSH
40746: LD_VAR 0 2
40750: PPUSH
40751: LD_VAR 0 3
40755: PPUSH
40756: LD_VAR 0 4
40760: PPUSH
40761: CALL 39821 0 4
40765: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40766: LD_ADDR_VAR 0 11
40770: PUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: LD_VAR 0 2
40780: PPUSH
40781: LD_VAR 0 12
40785: PUSH
40786: LD_INT 1
40788: ARRAY
40789: PPUSH
40790: LD_VAR 0 12
40794: PUSH
40795: LD_INT 2
40797: ARRAY
40798: PPUSH
40799: CALL_OW 298
40803: ST_TO_ADDR
// distance := 9999 ;
40804: LD_ADDR_VAR 0 10
40808: PUSH
40809: LD_INT 9999
40811: ST_TO_ADDR
// for i := 0 to 5 do
40812: LD_ADDR_VAR 0 6
40816: PUSH
40817: DOUBLE
40818: LD_INT 0
40820: DEC
40821: ST_TO_ADDR
40822: LD_INT 5
40824: PUSH
40825: FOR_TO
40826: IFFALSE 40969
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40828: LD_ADDR_VAR 0 7
40832: PUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: LD_VAR 0 6
40842: PPUSH
40843: LD_VAR 0 11
40847: PPUSH
40848: CALL_OW 272
40852: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40853: LD_ADDR_VAR 0 8
40857: PUSH
40858: LD_VAR 0 2
40862: PPUSH
40863: LD_VAR 0 6
40867: PPUSH
40868: LD_VAR 0 11
40872: PPUSH
40873: CALL_OW 273
40877: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40878: LD_VAR 0 7
40882: PPUSH
40883: LD_VAR 0 8
40887: PPUSH
40888: CALL_OW 488
40892: NOT
40893: IFFALSE 40897
// continue ;
40895: GO 40825
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40897: LD_ADDR_VAR 0 9
40901: PUSH
40902: LD_VAR 0 12
40906: PUSH
40907: LD_INT 1
40909: ARRAY
40910: PPUSH
40911: LD_VAR 0 12
40915: PUSH
40916: LD_INT 2
40918: ARRAY
40919: PPUSH
40920: LD_VAR 0 7
40924: PPUSH
40925: LD_VAR 0 8
40929: PPUSH
40930: CALL_OW 298
40934: ST_TO_ADDR
// if tmp < distance then
40935: LD_VAR 0 9
40939: PUSH
40940: LD_VAR 0 10
40944: LESS
40945: IFFALSE 40967
// begin result := i ;
40947: LD_ADDR_VAR 0 5
40951: PUSH
40952: LD_VAR 0 6
40956: ST_TO_ADDR
// distance := tmp ;
40957: LD_ADDR_VAR 0 10
40961: PUSH
40962: LD_VAR 0 9
40966: ST_TO_ADDR
// end ; end ;
40967: GO 40825
40969: POP
40970: POP
// end ;
40971: LD_VAR 0 5
40975: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40976: LD_INT 0
40978: PPUSH
40979: PPUSH
// if not driver or not IsInUnit ( driver ) then
40980: LD_VAR 0 1
40984: NOT
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 310
40995: NOT
40996: OR
40997: IFFALSE 41001
// exit ;
40999: GO 41091
// vehicle := IsInUnit ( driver ) ;
41001: LD_ADDR_VAR 0 3
41005: PUSH
41006: LD_VAR 0 1
41010: PPUSH
41011: CALL_OW 310
41015: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41016: LD_VAR 0 1
41020: PPUSH
41021: LD_STRING \
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: PUSH
41051: LD_STRING E
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_VAR 0 3
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PPUSH
41087: CALL_OW 446
// end ;
41091: LD_VAR 0 2
41095: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41096: LD_INT 0
41098: PPUSH
41099: PPUSH
// if not driver or not IsInUnit ( driver ) then
41100: LD_VAR 0 1
41104: NOT
41105: PUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: CALL_OW 310
41115: NOT
41116: OR
41117: IFFALSE 41121
// exit ;
41119: GO 41211
// vehicle := IsInUnit ( driver ) ;
41121: LD_ADDR_VAR 0 3
41125: PUSH
41126: LD_VAR 0 1
41130: PPUSH
41131: CALL_OW 310
41135: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41136: LD_VAR 0 1
41140: PPUSH
41141: LD_STRING \
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: PUSH
41171: LD_STRING E
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_VAR 0 3
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PPUSH
41207: CALL_OW 447
// end ;
41211: LD_VAR 0 2
41215: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41216: LD_INT 0
41218: PPUSH
41219: PPUSH
41220: PPUSH
// tmp := [ ] ;
41221: LD_ADDR_VAR 0 5
41225: PUSH
41226: EMPTY
41227: ST_TO_ADDR
// for i in units do
41228: LD_ADDR_VAR 0 4
41232: PUSH
41233: LD_VAR 0 1
41237: PUSH
41238: FOR_IN
41239: IFFALSE 41277
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41241: LD_ADDR_VAR 0 5
41245: PUSH
41246: LD_VAR 0 5
41250: PPUSH
41251: LD_VAR 0 5
41255: PUSH
41256: LD_INT 1
41258: PLUS
41259: PPUSH
41260: LD_VAR 0 4
41264: PPUSH
41265: CALL_OW 256
41269: PPUSH
41270: CALL_OW 2
41274: ST_TO_ADDR
41275: GO 41238
41277: POP
41278: POP
// if not tmp then
41279: LD_VAR 0 5
41283: NOT
41284: IFFALSE 41288
// exit ;
41286: GO 41336
// if asc then
41288: LD_VAR 0 2
41292: IFFALSE 41316
// result := SortListByListAsc ( units , tmp ) else
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_VAR 0 1
41303: PPUSH
41304: LD_VAR 0 5
41308: PPUSH
41309: CALL_OW 76
41313: ST_TO_ADDR
41314: GO 41336
// result := SortListByListDesc ( units , tmp ) ;
41316: LD_ADDR_VAR 0 3
41320: PUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: LD_VAR 0 5
41330: PPUSH
41331: CALL_OW 77
41335: ST_TO_ADDR
// end ;
41336: LD_VAR 0 3
41340: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41341: LD_INT 0
41343: PPUSH
41344: PPUSH
// task := GetTaskList ( mech ) ;
41345: LD_ADDR_VAR 0 4
41349: PUSH
41350: LD_VAR 0 1
41354: PPUSH
41355: CALL_OW 437
41359: ST_TO_ADDR
// if not task then
41360: LD_VAR 0 4
41364: NOT
41365: IFFALSE 41369
// exit ;
41367: GO 41411
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41369: LD_ADDR_VAR 0 3
41373: PUSH
41374: LD_VAR 0 4
41378: PUSH
41379: LD_INT 1
41381: ARRAY
41382: PUSH
41383: LD_INT 1
41385: ARRAY
41386: PUSH
41387: LD_STRING r
41389: EQUAL
41390: PUSH
41391: LD_VAR 0 4
41395: PUSH
41396: LD_INT 1
41398: ARRAY
41399: PUSH
41400: LD_INT 4
41402: ARRAY
41403: PUSH
41404: LD_VAR 0 2
41408: EQUAL
41409: AND
41410: ST_TO_ADDR
// end ;
41411: LD_VAR 0 3
41415: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41416: LD_INT 0
41418: PPUSH
// SetDir ( unit , d ) ;
41419: LD_VAR 0 1
41423: PPUSH
41424: LD_VAR 0 4
41428: PPUSH
41429: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41433: LD_VAR 0 1
41437: PPUSH
41438: LD_VAR 0 2
41442: PPUSH
41443: LD_VAR 0 3
41447: PPUSH
41448: LD_VAR 0 5
41452: PPUSH
41453: CALL_OW 48
// end ;
41457: LD_VAR 0 6
41461: RET
// export function ToNaturalNumber ( number ) ; begin
41462: LD_INT 0
41464: PPUSH
// result := number div 1 ;
41465: LD_ADDR_VAR 0 2
41469: PUSH
41470: LD_VAR 0 1
41474: PUSH
41475: LD_INT 1
41477: DIV
41478: ST_TO_ADDR
// if number < 0 then
41479: LD_VAR 0 1
41483: PUSH
41484: LD_INT 0
41486: LESS
41487: IFFALSE 41497
// result := 0 ;
41489: LD_ADDR_VAR 0 2
41493: PUSH
41494: LD_INT 0
41496: ST_TO_ADDR
// end ;
41497: LD_VAR 0 2
41501: RET
// export function SortByClass ( units , class ) ; var un ; begin
41502: LD_INT 0
41504: PPUSH
41505: PPUSH
// if not units or not class then
41506: LD_VAR 0 1
41510: NOT
41511: PUSH
41512: LD_VAR 0 2
41516: NOT
41517: OR
41518: IFFALSE 41522
// exit ;
41520: GO 41617
// result := [ ] ;
41522: LD_ADDR_VAR 0 3
41526: PUSH
41527: EMPTY
41528: ST_TO_ADDR
// for un in units do
41529: LD_ADDR_VAR 0 4
41533: PUSH
41534: LD_VAR 0 1
41538: PUSH
41539: FOR_IN
41540: IFFALSE 41615
// if GetClass ( un ) = class then
41542: LD_VAR 0 4
41546: PPUSH
41547: CALL_OW 257
41551: PUSH
41552: LD_VAR 0 2
41556: EQUAL
41557: IFFALSE 41584
// result := Insert ( result , 1 , un ) else
41559: LD_ADDR_VAR 0 3
41563: PUSH
41564: LD_VAR 0 3
41568: PPUSH
41569: LD_INT 1
41571: PPUSH
41572: LD_VAR 0 4
41576: PPUSH
41577: CALL_OW 2
41581: ST_TO_ADDR
41582: GO 41613
// result := Replace ( result , result + 1 , un ) ;
41584: LD_ADDR_VAR 0 3
41588: PUSH
41589: LD_VAR 0 3
41593: PPUSH
41594: LD_VAR 0 3
41598: PUSH
41599: LD_INT 1
41601: PLUS
41602: PPUSH
41603: LD_VAR 0 4
41607: PPUSH
41608: CALL_OW 1
41612: ST_TO_ADDR
41613: GO 41539
41615: POP
41616: POP
// end ;
41617: LD_VAR 0 3
41621: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41622: LD_INT 0
41624: PPUSH
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
// result := [ ] ;
41631: LD_ADDR_VAR 0 4
41635: PUSH
41636: EMPTY
41637: ST_TO_ADDR
// if x - r < 0 then
41638: LD_VAR 0 1
41642: PUSH
41643: LD_VAR 0 3
41647: MINUS
41648: PUSH
41649: LD_INT 0
41651: LESS
41652: IFFALSE 41664
// min_x := 0 else
41654: LD_ADDR_VAR 0 8
41658: PUSH
41659: LD_INT 0
41661: ST_TO_ADDR
41662: GO 41680
// min_x := x - r ;
41664: LD_ADDR_VAR 0 8
41668: PUSH
41669: LD_VAR 0 1
41673: PUSH
41674: LD_VAR 0 3
41678: MINUS
41679: ST_TO_ADDR
// if y - r < 0 then
41680: LD_VAR 0 2
41684: PUSH
41685: LD_VAR 0 3
41689: MINUS
41690: PUSH
41691: LD_INT 0
41693: LESS
41694: IFFALSE 41706
// min_y := 0 else
41696: LD_ADDR_VAR 0 7
41700: PUSH
41701: LD_INT 0
41703: ST_TO_ADDR
41704: GO 41722
// min_y := y - r ;
41706: LD_ADDR_VAR 0 7
41710: PUSH
41711: LD_VAR 0 2
41715: PUSH
41716: LD_VAR 0 3
41720: MINUS
41721: ST_TO_ADDR
// max_x := x + r ;
41722: LD_ADDR_VAR 0 9
41726: PUSH
41727: LD_VAR 0 1
41731: PUSH
41732: LD_VAR 0 3
41736: PLUS
41737: ST_TO_ADDR
// max_y := y + r ;
41738: LD_ADDR_VAR 0 10
41742: PUSH
41743: LD_VAR 0 2
41747: PUSH
41748: LD_VAR 0 3
41752: PLUS
41753: ST_TO_ADDR
// for _x = min_x to max_x do
41754: LD_ADDR_VAR 0 5
41758: PUSH
41759: DOUBLE
41760: LD_VAR 0 8
41764: DEC
41765: ST_TO_ADDR
41766: LD_VAR 0 9
41770: PUSH
41771: FOR_TO
41772: IFFALSE 41873
// for _y = min_y to max_y do
41774: LD_ADDR_VAR 0 6
41778: PUSH
41779: DOUBLE
41780: LD_VAR 0 7
41784: DEC
41785: ST_TO_ADDR
41786: LD_VAR 0 10
41790: PUSH
41791: FOR_TO
41792: IFFALSE 41869
// begin if not ValidHex ( _x , _y ) then
41794: LD_VAR 0 5
41798: PPUSH
41799: LD_VAR 0 6
41803: PPUSH
41804: CALL_OW 488
41808: NOT
41809: IFFALSE 41813
// continue ;
41811: GO 41791
// if GetResourceTypeXY ( _x , _y ) then
41813: LD_VAR 0 5
41817: PPUSH
41818: LD_VAR 0 6
41822: PPUSH
41823: CALL_OW 283
41827: IFFALSE 41867
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41829: LD_ADDR_VAR 0 4
41833: PUSH
41834: LD_VAR 0 4
41838: PPUSH
41839: LD_VAR 0 4
41843: PUSH
41844: LD_INT 1
41846: PLUS
41847: PPUSH
41848: LD_VAR 0 5
41852: PUSH
41853: LD_VAR 0 6
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PPUSH
41862: CALL_OW 1
41866: ST_TO_ADDR
// end ;
41867: GO 41791
41869: POP
41870: POP
41871: GO 41771
41873: POP
41874: POP
// end ;
41875: LD_VAR 0 4
41879: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41880: LD_INT 0
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
// if not units then
41890: LD_VAR 0 1
41894: NOT
41895: IFFALSE 41899
// exit ;
41897: GO 42423
// result := UnitFilter ( units , [ f_ok ] ) ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_VAR 0 1
41908: PPUSH
41909: LD_INT 50
41911: PUSH
41912: EMPTY
41913: LIST
41914: PPUSH
41915: CALL_OW 72
41919: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41920: LD_ADDR_VAR 0 8
41924: PUSH
41925: LD_VAR 0 1
41929: PUSH
41930: LD_INT 1
41932: ARRAY
41933: PPUSH
41934: CALL_OW 255
41938: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41939: LD_ADDR_VAR 0 10
41943: PUSH
41944: LD_INT 29
41946: PUSH
41947: LD_INT 91
41949: PUSH
41950: LD_INT 49
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// if not result then
41958: LD_VAR 0 3
41962: NOT
41963: IFFALSE 41967
// exit ;
41965: GO 42423
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41967: LD_ADDR_VAR 0 5
41971: PUSH
41972: LD_INT 81
41974: PUSH
41975: LD_VAR 0 8
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PPUSH
41984: CALL_OW 69
41988: ST_TO_ADDR
// for i in result do
41989: LD_ADDR_VAR 0 4
41993: PUSH
41994: LD_VAR 0 3
41998: PUSH
41999: FOR_IN
42000: IFFALSE 42421
// begin tag := GetTag ( i ) + 1 ;
42002: LD_ADDR_VAR 0 9
42006: PUSH
42007: LD_VAR 0 4
42011: PPUSH
42012: CALL_OW 110
42016: PUSH
42017: LD_INT 1
42019: PLUS
42020: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42021: LD_ADDR_VAR 0 7
42025: PUSH
42026: LD_VAR 0 4
42030: PPUSH
42031: CALL_OW 250
42035: PPUSH
42036: LD_VAR 0 4
42040: PPUSH
42041: CALL_OW 251
42045: PPUSH
42046: LD_INT 6
42048: PPUSH
42049: CALL 41622 0 3
42053: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42054: LD_VAR 0 4
42058: PPUSH
42059: CALL_OW 247
42063: PUSH
42064: LD_INT 2
42066: EQUAL
42067: PUSH
42068: LD_VAR 0 7
42072: AND
42073: PUSH
42074: LD_VAR 0 4
42078: PPUSH
42079: CALL_OW 264
42083: PUSH
42084: LD_VAR 0 10
42088: IN
42089: NOT
42090: AND
42091: IFFALSE 42130
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42093: LD_VAR 0 4
42097: PPUSH
42098: LD_VAR 0 7
42102: PUSH
42103: LD_INT 1
42105: ARRAY
42106: PUSH
42107: LD_INT 1
42109: ARRAY
42110: PPUSH
42111: LD_VAR 0 7
42115: PUSH
42116: LD_INT 1
42118: ARRAY
42119: PUSH
42120: LD_INT 2
42122: ARRAY
42123: PPUSH
42124: CALL_OW 116
42128: GO 42419
// if path > tag then
42130: LD_VAR 0 2
42134: PUSH
42135: LD_VAR 0 9
42139: GREATER
42140: IFFALSE 42348
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42142: LD_ADDR_VAR 0 6
42146: PUSH
42147: LD_VAR 0 5
42151: PPUSH
42152: LD_INT 91
42154: PUSH
42155: LD_VAR 0 4
42159: PUSH
42160: LD_INT 8
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: PPUSH
42168: CALL_OW 72
42172: ST_TO_ADDR
// if nearEnemy then
42173: LD_VAR 0 6
42177: IFFALSE 42246
// begin if GetWeapon ( i ) = ru_time_lapser then
42179: LD_VAR 0 4
42183: PPUSH
42184: CALL_OW 264
42188: PUSH
42189: LD_INT 49
42191: EQUAL
42192: IFFALSE 42220
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42194: LD_VAR 0 4
42198: PPUSH
42199: LD_VAR 0 6
42203: PPUSH
42204: LD_VAR 0 4
42208: PPUSH
42209: CALL_OW 74
42213: PPUSH
42214: CALL_OW 112
42218: GO 42244
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42220: LD_VAR 0 4
42224: PPUSH
42225: LD_VAR 0 6
42229: PPUSH
42230: LD_VAR 0 4
42234: PPUSH
42235: CALL_OW 74
42239: PPUSH
42240: CALL 43348 0 2
// end else
42244: GO 42346
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42246: LD_VAR 0 4
42250: PPUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_VAR 0 9
42260: ARRAY
42261: PUSH
42262: LD_INT 1
42264: ARRAY
42265: PPUSH
42266: LD_VAR 0 2
42270: PUSH
42271: LD_VAR 0 9
42275: ARRAY
42276: PUSH
42277: LD_INT 2
42279: ARRAY
42280: PPUSH
42281: CALL_OW 297
42285: PUSH
42286: LD_INT 6
42288: GREATER
42289: IFFALSE 42332
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42291: LD_VAR 0 4
42295: PPUSH
42296: LD_VAR 0 2
42300: PUSH
42301: LD_VAR 0 9
42305: ARRAY
42306: PUSH
42307: LD_INT 1
42309: ARRAY
42310: PPUSH
42311: LD_VAR 0 2
42315: PUSH
42316: LD_VAR 0 9
42320: ARRAY
42321: PUSH
42322: LD_INT 2
42324: ARRAY
42325: PPUSH
42326: CALL_OW 114
42330: GO 42346
// SetTag ( i , tag ) ;
42332: LD_VAR 0 4
42336: PPUSH
42337: LD_VAR 0 9
42341: PPUSH
42342: CALL_OW 109
// end else
42346: GO 42419
// if enemy then
42348: LD_VAR 0 5
42352: IFFALSE 42419
// begin if GetWeapon ( i ) = ru_time_lapser then
42354: LD_VAR 0 4
42358: PPUSH
42359: CALL_OW 264
42363: PUSH
42364: LD_INT 49
42366: EQUAL
42367: IFFALSE 42395
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42369: LD_VAR 0 4
42373: PPUSH
42374: LD_VAR 0 5
42378: PPUSH
42379: LD_VAR 0 4
42383: PPUSH
42384: CALL_OW 74
42388: PPUSH
42389: CALL_OW 112
42393: GO 42419
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42395: LD_VAR 0 4
42399: PPUSH
42400: LD_VAR 0 5
42404: PPUSH
42405: LD_VAR 0 4
42409: PPUSH
42410: CALL_OW 74
42414: PPUSH
42415: CALL 43348 0 2
// end ; end ;
42419: GO 41999
42421: POP
42422: POP
// end ;
42423: LD_VAR 0 3
42427: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42428: LD_INT 0
42430: PPUSH
42431: PPUSH
42432: PPUSH
// if not unit or IsInUnit ( unit ) then
42433: LD_VAR 0 1
42437: NOT
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: CALL_OW 310
42448: OR
42449: IFFALSE 42453
// exit ;
42451: GO 42544
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42453: LD_ADDR_VAR 0 4
42457: PUSH
42458: LD_VAR 0 1
42462: PPUSH
42463: CALL_OW 250
42467: PPUSH
42468: LD_VAR 0 2
42472: PPUSH
42473: LD_INT 1
42475: PPUSH
42476: CALL_OW 272
42480: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42481: LD_ADDR_VAR 0 5
42485: PUSH
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 251
42495: PPUSH
42496: LD_VAR 0 2
42500: PPUSH
42501: LD_INT 1
42503: PPUSH
42504: CALL_OW 273
42508: ST_TO_ADDR
// if ValidHex ( x , y ) then
42509: LD_VAR 0 4
42513: PPUSH
42514: LD_VAR 0 5
42518: PPUSH
42519: CALL_OW 488
42523: IFFALSE 42544
// ComTurnXY ( unit , x , y ) ;
42525: LD_VAR 0 1
42529: PPUSH
42530: LD_VAR 0 4
42534: PPUSH
42535: LD_VAR 0 5
42539: PPUSH
42540: CALL_OW 118
// end ;
42544: LD_VAR 0 3
42548: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42549: LD_INT 0
42551: PPUSH
42552: PPUSH
// result := false ;
42553: LD_ADDR_VAR 0 3
42557: PUSH
42558: LD_INT 0
42560: ST_TO_ADDR
// if not units then
42561: LD_VAR 0 2
42565: NOT
42566: IFFALSE 42570
// exit ;
42568: GO 42615
// for i in units do
42570: LD_ADDR_VAR 0 4
42574: PUSH
42575: LD_VAR 0 2
42579: PUSH
42580: FOR_IN
42581: IFFALSE 42613
// if See ( side , i ) then
42583: LD_VAR 0 1
42587: PPUSH
42588: LD_VAR 0 4
42592: PPUSH
42593: CALL_OW 292
42597: IFFALSE 42611
// begin result := true ;
42599: LD_ADDR_VAR 0 3
42603: PUSH
42604: LD_INT 1
42606: ST_TO_ADDR
// exit ;
42607: POP
42608: POP
42609: GO 42615
// end ;
42611: GO 42580
42613: POP
42614: POP
// end ;
42615: LD_VAR 0 3
42619: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42620: LD_INT 0
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
// if not unit or not points then
42626: LD_VAR 0 1
42630: NOT
42631: PUSH
42632: LD_VAR 0 2
42636: NOT
42637: OR
42638: IFFALSE 42642
// exit ;
42640: GO 42732
// dist := 99999 ;
42642: LD_ADDR_VAR 0 5
42646: PUSH
42647: LD_INT 99999
42649: ST_TO_ADDR
// for i in points do
42650: LD_ADDR_VAR 0 4
42654: PUSH
42655: LD_VAR 0 2
42659: PUSH
42660: FOR_IN
42661: IFFALSE 42730
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42663: LD_ADDR_VAR 0 6
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: LD_VAR 0 4
42677: PUSH
42678: LD_INT 1
42680: ARRAY
42681: PPUSH
42682: LD_VAR 0 4
42686: PUSH
42687: LD_INT 2
42689: ARRAY
42690: PPUSH
42691: CALL_OW 297
42695: ST_TO_ADDR
// if tmpDist < dist then
42696: LD_VAR 0 6
42700: PUSH
42701: LD_VAR 0 5
42705: LESS
42706: IFFALSE 42728
// begin result := i ;
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_VAR 0 4
42717: ST_TO_ADDR
// dist := tmpDist ;
42718: LD_ADDR_VAR 0 5
42722: PUSH
42723: LD_VAR 0 6
42727: ST_TO_ADDR
// end ; end ;
42728: GO 42660
42730: POP
42731: POP
// end ;
42732: LD_VAR 0 3
42736: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42737: LD_INT 0
42739: PPUSH
// uc_side := side ;
42740: LD_ADDR_OWVAR 20
42744: PUSH
42745: LD_VAR 0 1
42749: ST_TO_ADDR
// uc_nation := 3 ;
42750: LD_ADDR_OWVAR 21
42754: PUSH
42755: LD_INT 3
42757: ST_TO_ADDR
// vc_chassis := 25 ;
42758: LD_ADDR_OWVAR 37
42762: PUSH
42763: LD_INT 25
42765: ST_TO_ADDR
// vc_engine := engine_siberite ;
42766: LD_ADDR_OWVAR 39
42770: PUSH
42771: LD_INT 3
42773: ST_TO_ADDR
// vc_control := control_computer ;
42774: LD_ADDR_OWVAR 38
42778: PUSH
42779: LD_INT 3
42781: ST_TO_ADDR
// vc_weapon := 59 ;
42782: LD_ADDR_OWVAR 40
42786: PUSH
42787: LD_INT 59
42789: ST_TO_ADDR
// result := CreateVehicle ;
42790: LD_ADDR_VAR 0 5
42794: PUSH
42795: CALL_OW 45
42799: ST_TO_ADDR
// SetDir ( result , d ) ;
42800: LD_VAR 0 5
42804: PPUSH
42805: LD_VAR 0 4
42809: PPUSH
42810: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42814: LD_VAR 0 5
42818: PPUSH
42819: LD_VAR 0 2
42823: PPUSH
42824: LD_VAR 0 3
42828: PPUSH
42829: LD_INT 0
42831: PPUSH
42832: CALL_OW 48
// end ;
42836: LD_VAR 0 5
42840: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42841: LD_INT 0
42843: PPUSH
42844: PPUSH
42845: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42846: LD_ADDR_VAR 0 2
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42869: LD_VAR 0 1
42873: NOT
42874: PUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: CALL_OW 264
42884: PUSH
42885: LD_INT 12
42887: PUSH
42888: LD_INT 51
42890: PUSH
42891: LD_INT 32
42893: PUSH
42894: LD_INT 89
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: IN
42903: NOT
42904: OR
42905: IFFALSE 42909
// exit ;
42907: GO 43007
// for i := 1 to 3 do
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: DOUBLE
42915: LD_INT 1
42917: DEC
42918: ST_TO_ADDR
42919: LD_INT 3
42921: PUSH
42922: FOR_TO
42923: IFFALSE 43005
// begin tmp := GetCargo ( cargo , i ) ;
42925: LD_ADDR_VAR 0 4
42929: PUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: LD_VAR 0 3
42939: PPUSH
42940: CALL_OW 289
42944: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42945: LD_ADDR_VAR 0 2
42949: PUSH
42950: LD_VAR 0 2
42954: PPUSH
42955: LD_VAR 0 3
42959: PPUSH
42960: LD_VAR 0 4
42964: PPUSH
42965: CALL_OW 1
42969: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42970: LD_ADDR_VAR 0 2
42974: PUSH
42975: LD_VAR 0 2
42979: PPUSH
42980: LD_INT 4
42982: PPUSH
42983: LD_VAR 0 2
42987: PUSH
42988: LD_INT 4
42990: ARRAY
42991: PUSH
42992: LD_VAR 0 4
42996: PLUS
42997: PPUSH
42998: CALL_OW 1
43002: ST_TO_ADDR
// end ;
43003: GO 42922
43005: POP
43006: POP
// end ;
43007: LD_VAR 0 2
43011: RET
// export function Length ( array ) ; begin
43012: LD_INT 0
43014: PPUSH
// result := array + 0 ;
43015: LD_ADDR_VAR 0 2
43019: PUSH
43020: LD_VAR 0 1
43024: PUSH
43025: LD_INT 0
43027: PLUS
43028: ST_TO_ADDR
// end ;
43029: LD_VAR 0 2
43033: RET
// export function PrepareArray ( array ) ; begin
43034: LD_INT 0
43036: PPUSH
// result := array diff 0 ;
43037: LD_ADDR_VAR 0 2
43041: PUSH
43042: LD_VAR 0 1
43046: PUSH
43047: LD_INT 0
43049: DIFF
43050: ST_TO_ADDR
// if not result [ 1 ] then
43051: LD_VAR 0 2
43055: PUSH
43056: LD_INT 1
43058: ARRAY
43059: NOT
43060: IFFALSE 43080
// result := Delete ( result , 1 ) ;
43062: LD_ADDR_VAR 0 2
43066: PUSH
43067: LD_VAR 0 2
43071: PPUSH
43072: LD_INT 1
43074: PPUSH
43075: CALL_OW 3
43079: ST_TO_ADDR
// end ;
43080: LD_VAR 0 2
43084: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43085: LD_INT 0
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
// sibRocketRange := 25 ;
43091: LD_ADDR_VAR 0 6
43095: PUSH
43096: LD_INT 25
43098: ST_TO_ADDR
// result := false ;
43099: LD_ADDR_VAR 0 4
43103: PUSH
43104: LD_INT 0
43106: ST_TO_ADDR
// for i := 0 to 5 do
43107: LD_ADDR_VAR 0 5
43111: PUSH
43112: DOUBLE
43113: LD_INT 0
43115: DEC
43116: ST_TO_ADDR
43117: LD_INT 5
43119: PUSH
43120: FOR_TO
43121: IFFALSE 43188
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43123: LD_VAR 0 1
43127: PPUSH
43128: LD_VAR 0 5
43132: PPUSH
43133: LD_VAR 0 6
43137: PPUSH
43138: CALL_OW 272
43142: PPUSH
43143: LD_VAR 0 2
43147: PPUSH
43148: LD_VAR 0 5
43152: PPUSH
43153: LD_VAR 0 6
43157: PPUSH
43158: CALL_OW 273
43162: PPUSH
43163: LD_VAR 0 3
43167: PPUSH
43168: CALL_OW 309
43172: IFFALSE 43186
// begin result := true ;
43174: LD_ADDR_VAR 0 4
43178: PUSH
43179: LD_INT 1
43181: ST_TO_ADDR
// exit ;
43182: POP
43183: POP
43184: GO 43190
// end ;
43186: GO 43120
43188: POP
43189: POP
// end ;
43190: LD_VAR 0 4
43194: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43195: LD_INT 0
43197: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43198: LD_VAR 0 1
43202: PPUSH
43203: LD_VAR 0 2
43207: PPUSH
43208: LD_INT 0
43210: PPUSH
43211: LD_INT 0
43213: PPUSH
43214: LD_INT 1
43216: PPUSH
43217: LD_INT 0
43219: PPUSH
43220: CALL_OW 587
// end ;
43224: LD_VAR 0 3
43228: RET
// export function CenterOnNow ( unit ) ; begin
43229: LD_INT 0
43231: PPUSH
// result := IsInUnit ( unit ) ;
43232: LD_ADDR_VAR 0 2
43236: PUSH
43237: LD_VAR 0 1
43241: PPUSH
43242: CALL_OW 310
43246: ST_TO_ADDR
// if not result then
43247: LD_VAR 0 2
43251: NOT
43252: IFFALSE 43264
// result := unit ;
43254: LD_ADDR_VAR 0 2
43258: PUSH
43259: LD_VAR 0 1
43263: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43264: LD_VAR 0 1
43268: PPUSH
43269: CALL_OW 87
// end ;
43273: LD_VAR 0 2
43277: RET
// export function ComMoveHex ( unit , hex ) ; begin
43278: LD_INT 0
43280: PPUSH
// if not hex then
43281: LD_VAR 0 2
43285: NOT
43286: IFFALSE 43290
// exit ;
43288: GO 43343
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43290: LD_VAR 0 2
43294: PUSH
43295: LD_INT 1
43297: ARRAY
43298: PPUSH
43299: LD_VAR 0 2
43303: PUSH
43304: LD_INT 2
43306: ARRAY
43307: PPUSH
43308: CALL_OW 428
43312: IFFALSE 43316
// exit ;
43314: GO 43343
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43316: LD_VAR 0 1
43320: PPUSH
43321: LD_VAR 0 2
43325: PUSH
43326: LD_INT 1
43328: ARRAY
43329: PPUSH
43330: LD_VAR 0 2
43334: PUSH
43335: LD_INT 2
43337: ARRAY
43338: PPUSH
43339: CALL_OW 111
// end ;
43343: LD_VAR 0 3
43347: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43348: LD_INT 0
43350: PPUSH
43351: PPUSH
43352: PPUSH
// if not unit or not enemy then
43353: LD_VAR 0 1
43357: NOT
43358: PUSH
43359: LD_VAR 0 2
43363: NOT
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 43493
// x := GetX ( enemy ) ;
43369: LD_ADDR_VAR 0 4
43373: PUSH
43374: LD_VAR 0 2
43378: PPUSH
43379: CALL_OW 250
43383: ST_TO_ADDR
// y := GetY ( enemy ) ;
43384: LD_ADDR_VAR 0 5
43388: PUSH
43389: LD_VAR 0 2
43393: PPUSH
43394: CALL_OW 251
43398: ST_TO_ADDR
// if ValidHex ( x , y ) then
43399: LD_VAR 0 4
43403: PPUSH
43404: LD_VAR 0 5
43408: PPUSH
43409: CALL_OW 488
43413: IFFALSE 43493
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43415: LD_VAR 0 2
43419: PPUSH
43420: CALL_OW 247
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: IN
43435: PUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 255
43445: PPUSH
43446: LD_VAR 0 2
43450: PPUSH
43451: CALL_OW 292
43455: AND
43456: IFFALSE 43474
// ComAttackUnit ( unit , enemy ) else
43458: LD_VAR 0 1
43462: PPUSH
43463: LD_VAR 0 2
43467: PPUSH
43468: CALL_OW 115
43472: GO 43493
// ComAgressiveMove ( unit , x , y ) ;
43474: LD_VAR 0 1
43478: PPUSH
43479: LD_VAR 0 4
43483: PPUSH
43484: LD_VAR 0 5
43488: PPUSH
43489: CALL_OW 114
// end ;
43493: LD_VAR 0 3
43497: RET
