// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := true ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 921 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 921 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 921 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 921 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 921 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 921 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 921 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 921 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 921 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 921 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 921 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 921 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 921 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; begin
 630: LD_INT 0
 632: PPUSH
// InGameOn ;
 633: CALL_OW 8
// ComMoveXY ( Heike , 51 , 23 ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 51
 644: PPUSH
 645: LD_INT 23
 647: PPUSH
 648: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 652: LD_OWVAR 3
 656: PUSH
 657: LD_EXP 3
 661: DIFF
 662: PPUSH
 663: LD_INT 53
 665: PPUSH
 666: LD_INT 27
 668: PPUSH
 669: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 673: LD_INT 52
 675: PPUSH
 676: LD_INT 25
 678: PPUSH
 679: CALL_OW 86
// wait ( 0 0$2 ) ;
 683: LD_INT 70
 685: PPUSH
 686: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 690: LD_INT 35
 692: PPUSH
 693: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 697: LD_EXP 3
 701: PPUSH
 702: LD_INT 51
 704: PPUSH
 705: LD_INT 23
 707: PPUSH
 708: CALL_OW 307
 712: PUSH
 713: LD_EXP 3
 717: PPUSH
 718: CALL_OW 314
 722: NOT
 723: OR
 724: IFFALSE 690
// ComTurnXY ( Heike , 53 , 26 ) ;
 726: LD_EXP 3
 730: PPUSH
 731: LD_INT 53
 733: PPUSH
 734: LD_INT 26
 736: PPUSH
 737: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 748: LD_EXP 3
 752: PPUSH
 753: LD_STRING DH-Intro-1
 755: PPUSH
 756: CALL_OW 88
// ComHold ( all_units ) ;
 760: LD_OWVAR 3
 764: PPUSH
 765: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 769: LD_OWVAR 3
 773: PUSH
 774: LD_EXP 3
 778: DIFF
 779: PPUSH
 780: LD_EXP 3
 784: PPUSH
 785: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 789: LD_EXP 17
 793: PUSH
 794: LD_STRING 08_DealWithDoug
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 30
 804: AND
 805: IFFALSE 809
// begin end else
 807: GO 912
// if Harris then
 809: LD_EXP 16
 813: IFFALSE 912
// begin ComTurnUnit ( Heike , Harris ) ;
 815: LD_EXP 3
 819: PPUSH
 820: LD_EXP 16
 824: PPUSH
 825: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 829: LD_EXP 16
 833: PPUSH
 834: LD_STRING DJ-Intro-2
 836: PPUSH
 837: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_STRING DH-Intro-3
 848: PPUSH
 849: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 853: LD_INT 10
 855: PPUSH
 856: CALL_OW 67
// Say ( Heike , DH-Intro-4 ) ;
 860: LD_EXP 3
 864: PPUSH
 865: LD_STRING DH-Intro-4
 867: PPUSH
 868: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 872: LD_EXP 16
 876: PPUSH
 877: LD_STRING DJ-Intro-5
 879: PPUSH
 880: CALL_OW 88
// ComMoveXY ( Harris ^ americanSquad , 5 , 7 ) ;
 884: LD_EXP 16
 888: PUSH
 889: LD_EXP 15
 893: ADD
 894: PPUSH
 895: LD_INT 5
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: CALL_OW 111
// wait ( 0 0$01 ) ;
 905: LD_INT 35
 907: PPUSH
 908: CALL_OW 67
// end ; InGameOff ;
 912: CALL_OW 9
// end ; end_of_file
 916: LD_VAR 0 1
 920: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
// if exist_mode then
 925: LD_VAR 0 2
 929: IFFALSE 954
// unit := CreateCharacter ( prefix & ident ) else
 931: LD_ADDR_VAR 0 5
 935: PUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_VAR 0 1
 945: STR
 946: PPUSH
 947: CALL_OW 34
 951: ST_TO_ADDR
 952: GO 969
// unit := NewCharacter ( ident ) ;
 954: LD_ADDR_VAR 0 5
 958: PUSH
 959: LD_VAR 0 1
 963: PPUSH
 964: CALL_OW 25
 968: ST_TO_ADDR
// result := unit ;
 969: LD_ADDR_VAR 0 4
 973: PUSH
 974: LD_VAR 0 5
 978: ST_TO_ADDR
// end ;
 979: LD_VAR 0 4
 983: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 984: LD_INT 0
 986: PPUSH
 987: PPUSH
// if not side or not nation then
 988: LD_VAR 0 1
 992: NOT
 993: PUSH
 994: LD_VAR 0 2
 998: NOT
 999: OR
1000: IFFALSE 1004
// exit ;
1002: GO 1772
// case nation of nation_american :
1004: LD_VAR 0 2
1008: PUSH
1009: LD_INT 1
1011: DOUBLE
1012: EQUAL
1013: IFTRUE 1017
1015: GO 1231
1017: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: LD_INT 35
1025: PUSH
1026: LD_INT 45
1028: PUSH
1029: LD_INT 46
1031: PUSH
1032: LD_INT 47
1034: PUSH
1035: LD_INT 82
1037: PUSH
1038: LD_INT 83
1040: PUSH
1041: LD_INT 84
1043: PUSH
1044: LD_INT 85
1046: PUSH
1047: LD_INT 86
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: LD_INT 2
1055: PUSH
1056: LD_INT 6
1058: PUSH
1059: LD_INT 15
1061: PUSH
1062: LD_INT 16
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 12
1070: PUSH
1071: LD_INT 13
1073: PUSH
1074: LD_INT 10
1076: PUSH
1077: LD_INT 14
1079: PUSH
1080: LD_INT 20
1082: PUSH
1083: LD_INT 21
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_INT 25
1091: PUSH
1092: LD_INT 32
1094: PUSH
1095: LD_INT 27
1097: PUSH
1098: LD_INT 36
1100: PUSH
1101: LD_INT 69
1103: PUSH
1104: LD_INT 39
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 40
1112: PUSH
1113: LD_INT 48
1115: PUSH
1116: LD_INT 49
1118: PUSH
1119: LD_INT 50
1121: PUSH
1122: LD_INT 51
1124: PUSH
1125: LD_INT 52
1127: PUSH
1128: LD_INT 53
1130: PUSH
1131: LD_INT 54
1133: PUSH
1134: LD_INT 55
1136: PUSH
1137: LD_INT 56
1139: PUSH
1140: LD_INT 57
1142: PUSH
1143: LD_INT 58
1145: PUSH
1146: LD_INT 59
1148: PUSH
1149: LD_INT 60
1151: PUSH
1152: LD_INT 61
1154: PUSH
1155: LD_INT 62
1157: PUSH
1158: LD_INT 80
1160: PUSH
1161: LD_INT 82
1163: PUSH
1164: LD_INT 83
1166: PUSH
1167: LD_INT 84
1169: PUSH
1170: LD_INT 85
1172: PUSH
1173: LD_INT 86
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: ST_TO_ADDR
1229: GO 1696
1231: LD_INT 2
1233: DOUBLE
1234: EQUAL
1235: IFTRUE 1239
1237: GO 1465
1239: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1240: LD_ADDR_VAR 0 4
1244: PUSH
1245: LD_INT 35
1247: PUSH
1248: LD_INT 45
1250: PUSH
1251: LD_INT 46
1253: PUSH
1254: LD_INT 47
1256: PUSH
1257: LD_INT 82
1259: PUSH
1260: LD_INT 83
1262: PUSH
1263: LD_INT 84
1265: PUSH
1266: LD_INT 85
1268: PUSH
1269: LD_INT 87
1271: PUSH
1272: LD_INT 70
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 11
1280: PUSH
1281: LD_INT 3
1283: PUSH
1284: LD_INT 4
1286: PUSH
1287: LD_INT 5
1289: PUSH
1290: LD_INT 6
1292: PUSH
1293: LD_INT 15
1295: PUSH
1296: LD_INT 18
1298: PUSH
1299: LD_INT 7
1301: PUSH
1302: LD_INT 17
1304: PUSH
1305: LD_INT 8
1307: PUSH
1308: LD_INT 20
1310: PUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 22
1316: PUSH
1317: LD_INT 72
1319: PUSH
1320: LD_INT 26
1322: PUSH
1323: LD_INT 69
1325: PUSH
1326: LD_INT 39
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 41
1334: PUSH
1335: LD_INT 42
1337: PUSH
1338: LD_INT 43
1340: PUSH
1341: LD_INT 48
1343: PUSH
1344: LD_INT 49
1346: PUSH
1347: LD_INT 50
1349: PUSH
1350: LD_INT 51
1352: PUSH
1353: LD_INT 52
1355: PUSH
1356: LD_INT 53
1358: PUSH
1359: LD_INT 54
1361: PUSH
1362: LD_INT 55
1364: PUSH
1365: LD_INT 56
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 66
1379: PUSH
1380: LD_INT 67
1382: PUSH
1383: LD_INT 68
1385: PUSH
1386: LD_INT 81
1388: PUSH
1389: LD_INT 82
1391: PUSH
1392: LD_INT 83
1394: PUSH
1395: LD_INT 84
1397: PUSH
1398: LD_INT 85
1400: PUSH
1401: LD_INT 87
1403: PUSH
1404: LD_INT 88
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: ST_TO_ADDR
1463: GO 1696
1465: LD_INT 3
1467: DOUBLE
1468: EQUAL
1469: IFTRUE 1473
1471: GO 1695
1473: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1474: LD_ADDR_VAR 0 4
1478: PUSH
1479: LD_INT 46
1481: PUSH
1482: LD_INT 47
1484: PUSH
1485: LD_INT 1
1487: PUSH
1488: LD_INT 2
1490: PUSH
1491: LD_INT 82
1493: PUSH
1494: LD_INT 83
1496: PUSH
1497: LD_INT 84
1499: PUSH
1500: LD_INT 85
1502: PUSH
1503: LD_INT 86
1505: PUSH
1506: LD_INT 11
1508: PUSH
1509: LD_INT 9
1511: PUSH
1512: LD_INT 20
1514: PUSH
1515: LD_INT 19
1517: PUSH
1518: LD_INT 21
1520: PUSH
1521: LD_INT 24
1523: PUSH
1524: LD_INT 22
1526: PUSH
1527: LD_INT 25
1529: PUSH
1530: LD_INT 28
1532: PUSH
1533: LD_INT 29
1535: PUSH
1536: LD_INT 30
1538: PUSH
1539: LD_INT 31
1541: PUSH
1542: LD_INT 37
1544: PUSH
1545: LD_INT 38
1547: PUSH
1548: LD_INT 32
1550: PUSH
1551: LD_INT 27
1553: PUSH
1554: LD_INT 33
1556: PUSH
1557: LD_INT 69
1559: PUSH
1560: LD_INT 39
1562: PUSH
1563: LD_INT 34
1565: PUSH
1566: LD_INT 40
1568: PUSH
1569: LD_INT 71
1571: PUSH
1572: LD_INT 23
1574: PUSH
1575: LD_INT 44
1577: PUSH
1578: LD_INT 48
1580: PUSH
1581: LD_INT 49
1583: PUSH
1584: LD_INT 50
1586: PUSH
1587: LD_INT 51
1589: PUSH
1590: LD_INT 52
1592: PUSH
1593: LD_INT 53
1595: PUSH
1596: LD_INT 54
1598: PUSH
1599: LD_INT 55
1601: PUSH
1602: LD_INT 56
1604: PUSH
1605: LD_INT 57
1607: PUSH
1608: LD_INT 58
1610: PUSH
1611: LD_INT 59
1613: PUSH
1614: LD_INT 63
1616: PUSH
1617: LD_INT 64
1619: PUSH
1620: LD_INT 65
1622: PUSH
1623: LD_INT 82
1625: PUSH
1626: LD_INT 83
1628: PUSH
1629: LD_INT 84
1631: PUSH
1632: LD_INT 85
1634: PUSH
1635: LD_INT 86
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: ST_TO_ADDR
1693: GO 1696
1695: POP
// if state > - 1 and state < 3 then
1696: LD_VAR 0 3
1700: PUSH
1701: LD_INT 1
1703: NEG
1704: GREATER
1705: PUSH
1706: LD_VAR 0 3
1710: PUSH
1711: LD_INT 3
1713: LESS
1714: AND
1715: IFFALSE 1772
// for i in result do
1717: LD_ADDR_VAR 0 5
1721: PUSH
1722: LD_VAR 0 4
1726: PUSH
1727: FOR_IN
1728: IFFALSE 1770
// if GetTech ( i , side ) <> state then
1730: LD_VAR 0 5
1734: PPUSH
1735: LD_VAR 0 1
1739: PPUSH
1740: CALL_OW 321
1744: PUSH
1745: LD_VAR 0 3
1749: NONEQUAL
1750: IFFALSE 1768
// result := result diff i ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 4
1761: PUSH
1762: LD_VAR 0 5
1766: DIFF
1767: ST_TO_ADDR
1768: GO 1727
1770: POP
1771: POP
// end ;
1772: LD_VAR 0 4
1776: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1777: LD_INT 0
1779: PPUSH
1780: PPUSH
1781: PPUSH
// result := true ;
1782: LD_ADDR_VAR 0 3
1786: PUSH
1787: LD_INT 1
1789: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1790: LD_ADDR_VAR 0 5
1794: PUSH
1795: LD_VAR 0 2
1799: PPUSH
1800: CALL_OW 480
1804: ST_TO_ADDR
// if not tmp then
1805: LD_VAR 0 5
1809: NOT
1810: IFFALSE 1814
// exit ;
1812: GO 1863
// for i in tmp do
1814: LD_ADDR_VAR 0 4
1818: PUSH
1819: LD_VAR 0 5
1823: PUSH
1824: FOR_IN
1825: IFFALSE 1861
// if GetTech ( i , side ) <> state_researched then
1827: LD_VAR 0 4
1831: PPUSH
1832: LD_VAR 0 1
1836: PPUSH
1837: CALL_OW 321
1841: PUSH
1842: LD_INT 2
1844: NONEQUAL
1845: IFFALSE 1859
// begin result := false ;
1847: LD_ADDR_VAR 0 3
1851: PUSH
1852: LD_INT 0
1854: ST_TO_ADDR
// exit ;
1855: POP
1856: POP
1857: GO 1863
// end ;
1859: GO 1824
1861: POP
1862: POP
// end ;
1863: LD_VAR 0 3
1867: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1868: LD_INT 0
1870: PPUSH
1871: PPUSH
1872: PPUSH
1873: PPUSH
1874: PPUSH
1875: PPUSH
1876: PPUSH
1877: PPUSH
1878: PPUSH
1879: PPUSH
1880: PPUSH
1881: PPUSH
1882: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1883: LD_VAR 0 1
1887: NOT
1888: PUSH
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 257
1898: PUSH
1899: LD_INT 9
1901: NONEQUAL
1902: OR
1903: IFFALSE 1907
// exit ;
1905: GO 2480
// side := GetSide ( unit ) ;
1907: LD_ADDR_VAR 0 9
1911: PUSH
1912: LD_VAR 0 1
1916: PPUSH
1917: CALL_OW 255
1921: ST_TO_ADDR
// tech_space := tech_spacanom ;
1922: LD_ADDR_VAR 0 12
1926: PUSH
1927: LD_INT 29
1929: ST_TO_ADDR
// tech_time := tech_taurad ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 28
1937: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1938: LD_ADDR_VAR 0 11
1942: PUSH
1943: LD_VAR 0 1
1947: PPUSH
1948: CALL_OW 310
1952: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1953: LD_VAR 0 11
1957: PPUSH
1958: CALL_OW 247
1962: PUSH
1963: LD_INT 2
1965: EQUAL
1966: IFFALSE 1970
// exit ;
1968: GO 2480
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1970: LD_ADDR_VAR 0 8
1974: PUSH
1975: LD_INT 81
1977: PUSH
1978: LD_VAR 0 9
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: LD_INT 21
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: ST_TO_ADDR
// if not tmp then
2013: LD_VAR 0 8
2017: NOT
2018: IFFALSE 2022
// exit ;
2020: GO 2480
// if in_unit then
2022: LD_VAR 0 11
2026: IFFALSE 2050
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2028: LD_ADDR_VAR 0 10
2032: PUSH
2033: LD_VAR 0 8
2037: PPUSH
2038: LD_VAR 0 11
2042: PPUSH
2043: CALL_OW 74
2047: ST_TO_ADDR
2048: GO 2070
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2050: LD_ADDR_VAR 0 10
2054: PUSH
2055: LD_VAR 0 8
2059: PPUSH
2060: LD_VAR 0 1
2064: PPUSH
2065: CALL_OW 74
2069: ST_TO_ADDR
// if not enemy then
2070: LD_VAR 0 10
2074: NOT
2075: IFFALSE 2079
// exit ;
2077: GO 2480
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2079: LD_VAR 0 11
2083: PUSH
2084: LD_VAR 0 11
2088: PPUSH
2089: LD_VAR 0 10
2093: PPUSH
2094: CALL_OW 296
2098: PUSH
2099: LD_INT 13
2101: GREATER
2102: AND
2103: PUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: LD_VAR 0 10
2113: PPUSH
2114: CALL_OW 296
2118: PUSH
2119: LD_INT 12
2121: GREATER
2122: OR
2123: IFFALSE 2127
// exit ;
2125: GO 2480
// missile := [ 1 ] ;
2127: LD_ADDR_VAR 0 14
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2138: LD_VAR 0 9
2142: PPUSH
2143: LD_VAR 0 12
2147: PPUSH
2148: CALL_OW 325
2152: IFFALSE 2181
// missile := Replace ( missile , missile + 1 , 2 ) ;
2154: LD_ADDR_VAR 0 14
2158: PUSH
2159: LD_VAR 0 14
2163: PPUSH
2164: LD_VAR 0 14
2168: PUSH
2169: LD_INT 1
2171: PLUS
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: CALL_OW 1
2180: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2181: LD_VAR 0 9
2185: PPUSH
2186: LD_VAR 0 13
2190: PPUSH
2191: CALL_OW 325
2195: PUSH
2196: LD_VAR 0 10
2200: PPUSH
2201: CALL_OW 255
2205: PPUSH
2206: LD_VAR 0 13
2210: PPUSH
2211: CALL_OW 325
2215: NOT
2216: AND
2217: IFFALSE 2246
// missile := Replace ( missile , missile + 1 , 3 ) ;
2219: LD_ADDR_VAR 0 14
2223: PUSH
2224: LD_VAR 0 14
2228: PPUSH
2229: LD_VAR 0 14
2233: PUSH
2234: LD_INT 1
2236: PLUS
2237: PPUSH
2238: LD_INT 3
2240: PPUSH
2241: CALL_OW 1
2245: ST_TO_ADDR
// if missile < 2 then
2246: LD_VAR 0 14
2250: PUSH
2251: LD_INT 2
2253: LESS
2254: IFFALSE 2258
// exit ;
2256: GO 2480
// x := GetX ( enemy ) ;
2258: LD_ADDR_VAR 0 4
2262: PUSH
2263: LD_VAR 0 10
2267: PPUSH
2268: CALL_OW 250
2272: ST_TO_ADDR
// y := GetY ( enemy ) ;
2273: LD_ADDR_VAR 0 5
2277: PUSH
2278: LD_VAR 0 10
2282: PPUSH
2283: CALL_OW 251
2287: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2288: LD_ADDR_VAR 0 6
2292: PUSH
2293: LD_VAR 0 4
2297: PUSH
2298: LD_INT 1
2300: NEG
2301: PPUSH
2302: LD_INT 1
2304: PPUSH
2305: CALL_OW 12
2309: PLUS
2310: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2311: LD_ADDR_VAR 0 7
2315: PUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_INT 1
2323: NEG
2324: PPUSH
2325: LD_INT 1
2327: PPUSH
2328: CALL_OW 12
2332: PLUS
2333: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2334: LD_VAR 0 6
2338: PPUSH
2339: LD_VAR 0 7
2343: PPUSH
2344: CALL_OW 488
2348: NOT
2349: IFFALSE 2371
// begin _x := x ;
2351: LD_ADDR_VAR 0 6
2355: PUSH
2356: LD_VAR 0 4
2360: ST_TO_ADDR
// _y := y ;
2361: LD_ADDR_VAR 0 7
2365: PUSH
2366: LD_VAR 0 5
2370: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: LD_INT 1
2378: PPUSH
2379: LD_VAR 0 14
2383: PPUSH
2384: CALL_OW 12
2388: ST_TO_ADDR
// case i of 1 :
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 1
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2402
2400: GO 2419
2402: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2403: LD_VAR 0 1
2407: PPUSH
2408: LD_VAR 0 10
2412: PPUSH
2413: CALL_OW 115
2417: GO 2480
2419: LD_INT 2
2421: DOUBLE
2422: EQUAL
2423: IFTRUE 2427
2425: GO 2449
2427: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_VAR 0 6
2437: PPUSH
2438: LD_VAR 0 7
2442: PPUSH
2443: CALL_OW 153
2447: GO 2480
2449: LD_INT 3
2451: DOUBLE
2452: EQUAL
2453: IFTRUE 2457
2455: GO 2479
2457: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2458: LD_VAR 0 1
2462: PPUSH
2463: LD_VAR 0 6
2467: PPUSH
2468: LD_VAR 0 7
2472: PPUSH
2473: CALL_OW 154
2477: GO 2480
2479: POP
// end ;
2480: LD_VAR 0 2
2484: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2485: LD_INT 0
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
2491: PPUSH
2492: PPUSH
// if not unit or not building then
2493: LD_VAR 0 1
2497: NOT
2498: PUSH
2499: LD_VAR 0 2
2503: NOT
2504: OR
2505: IFFALSE 2509
// exit ;
2507: GO 2667
// x := GetX ( building ) ;
2509: LD_ADDR_VAR 0 5
2513: PUSH
2514: LD_VAR 0 2
2518: PPUSH
2519: CALL_OW 250
2523: ST_TO_ADDR
// y := GetY ( building ) ;
2524: LD_ADDR_VAR 0 6
2528: PUSH
2529: LD_VAR 0 2
2533: PPUSH
2534: CALL_OW 251
2538: ST_TO_ADDR
// for i = 0 to 5 do
2539: LD_ADDR_VAR 0 4
2543: PUSH
2544: DOUBLE
2545: LD_INT 0
2547: DEC
2548: ST_TO_ADDR
2549: LD_INT 5
2551: PUSH
2552: FOR_TO
2553: IFFALSE 2665
// begin _x := ShiftX ( x , i , 3 ) ;
2555: LD_ADDR_VAR 0 7
2559: PUSH
2560: LD_VAR 0 5
2564: PPUSH
2565: LD_VAR 0 4
2569: PPUSH
2570: LD_INT 3
2572: PPUSH
2573: CALL_OW 272
2577: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2578: LD_ADDR_VAR 0 8
2582: PUSH
2583: LD_VAR 0 6
2587: PPUSH
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 3
2595: PPUSH
2596: CALL_OW 273
2600: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2601: LD_VAR 0 7
2605: PPUSH
2606: LD_VAR 0 8
2610: PPUSH
2611: CALL_OW 488
2615: NOT
2616: IFFALSE 2620
// continue ;
2618: GO 2552
// if HexInfo ( _x , _y ) = 0 then
2620: LD_VAR 0 7
2624: PPUSH
2625: LD_VAR 0 8
2629: PPUSH
2630: CALL_OW 428
2634: PUSH
2635: LD_INT 0
2637: EQUAL
2638: IFFALSE 2663
// begin ComMoveXY ( unit , _x , _y ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 7
2649: PPUSH
2650: LD_VAR 0 8
2654: PPUSH
2655: CALL_OW 111
// exit ;
2659: POP
2660: POP
2661: GO 2667
// end ; end ;
2663: GO 2552
2665: POP
2666: POP
// end ;
2667: LD_VAR 0 3
2671: RET
// export function ScanBase ( side , base_area ) ; begin
2672: LD_INT 0
2674: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2675: LD_ADDR_VAR 0 3
2679: PUSH
2680: LD_VAR 0 2
2684: PPUSH
2685: LD_INT 81
2687: PUSH
2688: LD_VAR 0 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PPUSH
2697: CALL_OW 70
2701: ST_TO_ADDR
// end ;
2702: LD_VAR 0 3
2706: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
2712: PPUSH
// result := false ;
2713: LD_ADDR_VAR 0 2
2717: PUSH
2718: LD_INT 0
2720: ST_TO_ADDR
// side := GetSide ( unit ) ;
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 255
2735: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2736: LD_ADDR_VAR 0 4
2740: PUSH
2741: LD_VAR 0 1
2745: PPUSH
2746: CALL_OW 248
2750: ST_TO_ADDR
// case nat of 1 :
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 1
2758: DOUBLE
2759: EQUAL
2760: IFTRUE 2764
2762: GO 2775
2764: POP
// tech := tech_lassight ; 2 :
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_INT 12
2772: ST_TO_ADDR
2773: GO 2814
2775: LD_INT 2
2777: DOUBLE
2778: EQUAL
2779: IFTRUE 2783
2781: GO 2794
2783: POP
// tech := tech_mortar ; 3 :
2784: LD_ADDR_VAR 0 5
2788: PUSH
2789: LD_INT 41
2791: ST_TO_ADDR
2792: GO 2814
2794: LD_INT 3
2796: DOUBLE
2797: EQUAL
2798: IFTRUE 2802
2800: GO 2813
2802: POP
// tech := tech_bazooka ; end ;
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_INT 44
2810: ST_TO_ADDR
2811: GO 2814
2813: POP
// if Researched ( side , tech ) then
2814: LD_VAR 0 3
2818: PPUSH
2819: LD_VAR 0 5
2823: PPUSH
2824: CALL_OW 325
2828: IFFALSE 2855
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2830: LD_ADDR_VAR 0 2
2834: PUSH
2835: LD_INT 5
2837: PUSH
2838: LD_INT 8
2840: PUSH
2841: LD_INT 9
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: LD_VAR 0 4
2853: ARRAY
2854: ST_TO_ADDR
// end ;
2855: LD_VAR 0 2
2859: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
2864: PPUSH
// if not mines then
2865: LD_VAR 0 2
2869: NOT
2870: IFFALSE 2874
// exit ;
2872: GO 3018
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2874: LD_ADDR_VAR 0 5
2878: PUSH
2879: LD_INT 81
2881: PUSH
2882: LD_VAR 0 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 21
2896: PUSH
2897: LD_INT 3
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: CALL_OW 69
2916: ST_TO_ADDR
// for i in mines do
2917: LD_ADDR_VAR 0 4
2921: PUSH
2922: LD_VAR 0 2
2926: PUSH
2927: FOR_IN
2928: IFFALSE 3016
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 1
2937: ARRAY
2938: PPUSH
2939: LD_VAR 0 4
2943: PUSH
2944: LD_INT 2
2946: ARRAY
2947: PPUSH
2948: CALL_OW 458
2952: NOT
2953: IFFALSE 2957
// continue ;
2955: GO 2927
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 1
2964: ARRAY
2965: PPUSH
2966: LD_VAR 0 4
2970: PUSH
2971: LD_INT 2
2973: ARRAY
2974: PPUSH
2975: CALL_OW 428
2979: PUSH
2980: LD_VAR 0 5
2984: IN
2985: IFFALSE 3014
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2987: LD_VAR 0 4
2991: PUSH
2992: LD_INT 1
2994: ARRAY
2995: PPUSH
2996: LD_VAR 0 4
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PPUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: CALL_OW 456
// end ;
3014: GO 2927
3016: POP
3017: POP
// end ;
3018: LD_VAR 0 3
3022: RET
// export function Count ( array ) ; var i ; begin
3023: LD_INT 0
3025: PPUSH
3026: PPUSH
// result := 0 ;
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// for i in array do
3035: LD_ADDR_VAR 0 3
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3070
// if i then
3048: LD_VAR 0 3
3052: IFFALSE 3068
// result := result + 1 ;
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: LD_VAR 0 2
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: ST_TO_ADDR
3068: GO 3045
3070: POP
3071: POP
// end ;
3072: LD_VAR 0 2
3076: RET
// export function IsEmpty ( building ) ; begin
3077: LD_INT 0
3079: PPUSH
// if not building then
3080: LD_VAR 0 1
3084: NOT
3085: IFFALSE 3089
// exit ;
3087: GO 3132
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_VAR 0 1
3098: PUSH
3099: LD_INT 22
3101: PUSH
3102: LD_VAR 0 1
3106: PPUSH
3107: CALL_OW 255
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 58
3118: PUSH
3119: EMPTY
3120: LIST
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: CALL_OW 69
3130: IN
3131: ST_TO_ADDR
// end ;
3132: LD_VAR 0 2
3136: RET
// export function IsNotFull ( building ) ; var places ; begin
3137: LD_INT 0
3139: PPUSH
3140: PPUSH
// if not building then
3141: LD_VAR 0 1
3145: NOT
3146: IFFALSE 3150
// exit ;
3148: GO 3321
// result := false ;
3150: LD_ADDR_VAR 0 2
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// places := 0 ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3166: LD_VAR 0 1
3170: PPUSH
3171: CALL_OW 266
3175: PUSH
3176: LD_INT 0
3178: DOUBLE
3179: EQUAL
3180: IFTRUE 3238
3182: LD_INT 1
3184: DOUBLE
3185: EQUAL
3186: IFTRUE 3238
3188: LD_INT 6
3190: DOUBLE
3191: EQUAL
3192: IFTRUE 3238
3194: LD_INT 7
3196: DOUBLE
3197: EQUAL
3198: IFTRUE 3238
3200: LD_INT 8
3202: DOUBLE
3203: EQUAL
3204: IFTRUE 3238
3206: LD_INT 4
3208: DOUBLE
3209: EQUAL
3210: IFTRUE 3238
3212: LD_INT 5
3214: DOUBLE
3215: EQUAL
3216: IFTRUE 3238
3218: LD_INT 2
3220: DOUBLE
3221: EQUAL
3222: IFTRUE 3238
3224: LD_INT 3
3226: DOUBLE
3227: EQUAL
3228: IFTRUE 3238
3230: LD_INT 35
3232: DOUBLE
3233: EQUAL
3234: IFTRUE 3238
3236: GO 3249
3238: POP
// places := 6 ; b_bunker , b_breastwork :
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 6
3246: ST_TO_ADDR
3247: GO 3294
3249: LD_INT 32
3251: DOUBLE
3252: EQUAL
3253: IFTRUE 3263
3255: LD_INT 31
3257: DOUBLE
3258: EQUAL
3259: IFTRUE 3263
3261: GO 3274
3263: POP
// places := 1 ; b_control_tower :
3264: LD_ADDR_VAR 0 3
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
3272: GO 3294
3274: LD_INT 36
3276: DOUBLE
3277: EQUAL
3278: IFTRUE 3282
3280: GO 3293
3282: POP
// places := 3 ; end ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: LD_INT 3
3290: ST_TO_ADDR
3291: GO 3294
3293: POP
// if places then
3294: LD_VAR 0 3
3298: IFFALSE 3321
// result := UnitsInside ( building ) < places ;
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: LD_VAR 0 1
3309: PPUSH
3310: CALL_OW 313
3314: PUSH
3315: LD_VAR 0 3
3319: LESS
3320: ST_TO_ADDR
// end ;
3321: LD_VAR 0 2
3325: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3326: LD_INT 0
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
// tmp := [ ] ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: EMPTY
3338: ST_TO_ADDR
// list := [ ] ;
3339: LD_ADDR_VAR 0 5
3343: PUSH
3344: EMPTY
3345: ST_TO_ADDR
// for i = 16 to 25 do
3346: LD_ADDR_VAR 0 4
3350: PUSH
3351: DOUBLE
3352: LD_INT 16
3354: DEC
3355: ST_TO_ADDR
3356: LD_INT 25
3358: PUSH
3359: FOR_TO
3360: IFFALSE 3433
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3362: LD_ADDR_VAR 0 3
3366: PUSH
3367: LD_VAR 0 3
3371: PUSH
3372: LD_INT 22
3374: PUSH
3375: LD_VAR 0 1
3379: PPUSH
3380: CALL_OW 255
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 91
3391: PUSH
3392: LD_VAR 0 1
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 30
3407: PUSH
3408: LD_VAR 0 4
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: PPUSH
3425: CALL_OW 69
3429: ADD
3430: ST_TO_ADDR
3431: GO 3359
3433: POP
3434: POP
// for i = 1 to tmp do
3435: LD_ADDR_VAR 0 4
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3539
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3453: LD_ADDR_VAR 0 5
3457: PUSH
3458: LD_VAR 0 5
3462: PUSH
3463: LD_VAR 0 3
3467: PUSH
3468: LD_VAR 0 4
3472: ARRAY
3473: PPUSH
3474: CALL_OW 266
3478: PUSH
3479: LD_VAR 0 3
3483: PUSH
3484: LD_VAR 0 4
3488: ARRAY
3489: PPUSH
3490: CALL_OW 250
3494: PUSH
3495: LD_VAR 0 3
3499: PUSH
3500: LD_VAR 0 4
3504: ARRAY
3505: PPUSH
3506: CALL_OW 251
3510: PUSH
3511: LD_VAR 0 3
3515: PUSH
3516: LD_VAR 0 4
3520: ARRAY
3521: PPUSH
3522: CALL_OW 254
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: ADD
3536: ST_TO_ADDR
3537: GO 3450
3539: POP
3540: POP
// result := list ;
3541: LD_ADDR_VAR 0 2
3545: PUSH
3546: LD_VAR 0 5
3550: ST_TO_ADDR
// end ;
3551: LD_VAR 0 2
3555: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3556: LD_INT 0
3558: PPUSH
3559: PPUSH
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// if not factory then
3565: LD_VAR 0 1
3569: NOT
3570: IFFALSE 3574
// exit ;
3572: GO 4167
// if control = control_apeman then
3574: LD_VAR 0 4
3578: PUSH
3579: LD_INT 5
3581: EQUAL
3582: IFFALSE 3691
// begin tmp := UnitsInside ( factory ) ;
3584: LD_ADDR_VAR 0 8
3588: PUSH
3589: LD_VAR 0 1
3593: PPUSH
3594: CALL_OW 313
3598: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3599: LD_VAR 0 8
3603: PPUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 12
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PPUSH
3614: CALL_OW 72
3618: NOT
3619: IFFALSE 3629
// control := control_manual ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: LD_INT 1
3628: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3629: LD_ADDR_VAR 0 8
3633: PUSH
3634: LD_VAR 0 1
3638: PPUSH
3639: CALL 3326 0 1
3643: ST_TO_ADDR
// if tmp then
3644: LD_VAR 0 8
3648: IFFALSE 3691
// begin for i in tmp do
3650: LD_ADDR_VAR 0 7
3654: PUSH
3655: LD_VAR 0 8
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3689
// if i [ 1 ] = b_ext_radio then
3663: LD_VAR 0 7
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PUSH
3672: LD_INT 22
3674: EQUAL
3675: IFFALSE 3687
// begin control := control_remote ;
3677: LD_ADDR_VAR 0 4
3681: PUSH
3682: LD_INT 2
3684: ST_TO_ADDR
// break ;
3685: GO 3689
// end ;
3687: GO 3660
3689: POP
3690: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_VAR 0 4
3710: PPUSH
3711: LD_VAR 0 5
3715: PPUSH
3716: CALL_OW 448
3720: IFFALSE 3755
// begin result := [ chassis , engine , control , weapon ] ;
3722: LD_ADDR_VAR 0 6
3726: PUSH
3727: LD_VAR 0 2
3731: PUSH
3732: LD_VAR 0 3
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 5
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: ST_TO_ADDR
// exit ;
3753: GO 4167
// end ; _chassis := AvailableChassisList ( factory ) ;
3755: LD_ADDR_VAR 0 9
3759: PUSH
3760: LD_VAR 0 1
3764: PPUSH
3765: CALL_OW 475
3769: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3770: LD_ADDR_VAR 0 11
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 476
3784: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3785: LD_ADDR_VAR 0 12
3789: PUSH
3790: LD_VAR 0 1
3794: PPUSH
3795: CALL_OW 477
3799: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3800: LD_ADDR_VAR 0 10
3804: PUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: CALL_OW 478
3814: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3815: LD_VAR 0 9
3819: NOT
3820: PUSH
3821: LD_VAR 0 11
3825: NOT
3826: OR
3827: PUSH
3828: LD_VAR 0 12
3832: NOT
3833: OR
3834: PUSH
3835: LD_VAR 0 10
3839: NOT
3840: OR
3841: IFFALSE 3876
// begin result := [ chassis , engine , control , weapon ] ;
3843: LD_ADDR_VAR 0 6
3847: PUSH
3848: LD_VAR 0 2
3852: PUSH
3853: LD_VAR 0 3
3857: PUSH
3858: LD_VAR 0 4
3862: PUSH
3863: LD_VAR 0 5
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: ST_TO_ADDR
// exit ;
3874: GO 4167
// end ; if not chassis in _chassis then
3876: LD_VAR 0 2
3880: PUSH
3881: LD_VAR 0 9
3885: IN
3886: NOT
3887: IFFALSE 3913
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3889: LD_ADDR_VAR 0 2
3893: PUSH
3894: LD_VAR 0 9
3898: PUSH
3899: LD_INT 1
3901: PPUSH
3902: LD_VAR 0 9
3906: PPUSH
3907: CALL_OW 12
3911: ARRAY
3912: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3913: LD_VAR 0 2
3917: PPUSH
3918: LD_VAR 0 3
3922: PPUSH
3923: CALL 4172 0 2
3927: NOT
3928: IFFALSE 3987
// repeat engine := _engine [ 1 ] ;
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: LD_VAR 0 11
3939: PUSH
3940: LD_INT 1
3942: ARRAY
3943: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3944: LD_ADDR_VAR 0 11
3948: PUSH
3949: LD_VAR 0 11
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_VAR 0 3
3971: PPUSH
3972: CALL 4172 0 2
3976: PUSH
3977: LD_VAR 0 11
3981: PUSH
3982: EMPTY
3983: EQUAL
3984: OR
3985: IFFALSE 3930
// if not control in _control then
3987: LD_VAR 0 4
3991: PUSH
3992: LD_VAR 0 12
3996: IN
3997: NOT
3998: IFFALSE 4024
// control := _control [ rand ( 1 , _control ) ] ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_VAR 0 12
4009: PUSH
4010: LD_INT 1
4012: PPUSH
4013: LD_VAR 0 12
4017: PPUSH
4018: CALL_OW 12
4022: ARRAY
4023: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4024: LD_VAR 0 2
4028: PPUSH
4029: LD_VAR 0 5
4033: PPUSH
4034: CALL 4392 0 2
4038: NOT
4039: IFFALSE 4098
// repeat weapon := _weapon [ 1 ] ;
4041: LD_ADDR_VAR 0 5
4045: PUSH
4046: LD_VAR 0 10
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4055: LD_ADDR_VAR 0 10
4059: PUSH
4060: LD_VAR 0 10
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 3
4072: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 5
4082: PPUSH
4083: CALL 4392 0 2
4087: PUSH
4088: LD_VAR 0 10
4092: PUSH
4093: EMPTY
4094: EQUAL
4095: OR
4096: IFFALSE 4041
// result := [ ] ;
4098: LD_ADDR_VAR 0 6
4102: PUSH
4103: EMPTY
4104: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_VAR 0 2
4114: PPUSH
4115: LD_VAR 0 3
4119: PPUSH
4120: LD_VAR 0 4
4124: PPUSH
4125: LD_VAR 0 5
4129: PPUSH
4130: CALL_OW 448
4134: IFFALSE 4167
// result := [ chassis , engine , control , weapon ] ;
4136: LD_ADDR_VAR 0 6
4140: PUSH
4141: LD_VAR 0 2
4145: PUSH
4146: LD_VAR 0 3
4150: PUSH
4151: LD_VAR 0 4
4155: PUSH
4156: LD_VAR 0 5
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: ST_TO_ADDR
// end ;
4167: LD_VAR 0 6
4171: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4172: LD_INT 0
4174: PPUSH
// if not chassis or not engine then
4175: LD_VAR 0 1
4179: NOT
4180: PUSH
4181: LD_VAR 0 2
4185: NOT
4186: OR
4187: IFFALSE 4191
// exit ;
4189: GO 4387
// case engine of engine_solar :
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: DOUBLE
4199: EQUAL
4200: IFTRUE 4204
4202: GO 4242
4204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: LD_INT 11
4212: PUSH
4213: LD_INT 12
4215: PUSH
4216: LD_INT 13
4218: PUSH
4219: LD_INT 14
4221: PUSH
4222: LD_INT 1
4224: PUSH
4225: LD_INT 2
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: ST_TO_ADDR
4240: GO 4371
4242: LD_INT 1
4244: DOUBLE
4245: EQUAL
4246: IFTRUE 4250
4248: GO 4312
4250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4251: LD_ADDR_VAR 0 3
4255: PUSH
4256: LD_INT 11
4258: PUSH
4259: LD_INT 12
4261: PUSH
4262: LD_INT 13
4264: PUSH
4265: LD_INT 14
4267: PUSH
4268: LD_INT 1
4270: PUSH
4271: LD_INT 2
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 4
4279: PUSH
4280: LD_INT 5
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: LD_INT 23
4288: PUSH
4289: LD_INT 22
4291: PUSH
4292: LD_INT 24
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: ST_TO_ADDR
4310: GO 4371
4312: LD_INT 3
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4370
4320: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4321: LD_ADDR_VAR 0 3
4325: PUSH
4326: LD_INT 13
4328: PUSH
4329: LD_INT 14
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: LD_INT 5
4343: PUSH
4344: LD_INT 21
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 24
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: ST_TO_ADDR
4368: GO 4371
4370: POP
// result := ( chassis in result ) ;
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: LD_VAR 0 1
4380: PUSH
4381: LD_VAR 0 3
4385: IN
4386: ST_TO_ADDR
// end ;
4387: LD_VAR 0 3
4391: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4392: LD_INT 0
4394: PPUSH
// if not chassis or not weapon then
4395: LD_VAR 0 1
4399: NOT
4400: PUSH
4401: LD_VAR 0 2
4405: NOT
4406: OR
4407: IFFALSE 4411
// exit ;
4409: GO 5471
// case weapon of us_machine_gun :
4411: LD_VAR 0 2
4415: PUSH
4416: LD_INT 2
4418: DOUBLE
4419: EQUAL
4420: IFTRUE 4424
4422: GO 4454
4424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: LD_INT 1
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 5
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
4452: GO 5455
4454: LD_INT 3
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4492
4462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4463: LD_ADDR_VAR 0 3
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: LD_INT 2
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: LD_INT 4
4479: PUSH
4480: LD_INT 5
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: ST_TO_ADDR
4490: GO 5455
4492: LD_INT 11
4494: DOUBLE
4495: EQUAL
4496: IFTRUE 4500
4498: GO 4530
4500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4501: LD_ADDR_VAR 0 3
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: LD_INT 2
4511: PUSH
4512: LD_INT 3
4514: PUSH
4515: LD_INT 4
4517: PUSH
4518: LD_INT 5
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
4528: GO 5455
4530: LD_INT 4
4532: DOUBLE
4533: EQUAL
4534: IFTRUE 4538
4536: GO 4564
4538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4539: LD_ADDR_VAR 0 3
4543: PUSH
4544: LD_INT 2
4546: PUSH
4547: LD_INT 3
4549: PUSH
4550: LD_INT 4
4552: PUSH
4553: LD_INT 5
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
4562: GO 5455
4564: LD_INT 5
4566: DOUBLE
4567: EQUAL
4568: IFTRUE 4572
4570: GO 4598
4572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: LD_INT 2
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 4
4586: PUSH
4587: LD_INT 5
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: ST_TO_ADDR
4596: GO 5455
4598: LD_INT 9
4600: DOUBLE
4601: EQUAL
4602: IFTRUE 4606
4604: GO 4632
4606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: LD_INT 2
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: LD_INT 4
4620: PUSH
4621: LD_INT 5
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: ST_TO_ADDR
4630: GO 5455
4632: LD_INT 7
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4666
4640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4641: LD_ADDR_VAR 0 3
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: LD_INT 3
4651: PUSH
4652: LD_INT 4
4654: PUSH
4655: LD_INT 5
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: ST_TO_ADDR
4664: GO 5455
4666: LD_INT 12
4668: DOUBLE
4669: EQUAL
4670: IFTRUE 4674
4672: GO 4700
4674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4675: LD_ADDR_VAR 0 3
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 3
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: ST_TO_ADDR
4698: GO 5455
4700: LD_INT 13
4702: DOUBLE
4703: EQUAL
4704: IFTRUE 4708
4706: GO 4734
4708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 5
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: ST_TO_ADDR
4732: GO 5455
4734: LD_INT 14
4736: DOUBLE
4737: EQUAL
4738: IFTRUE 4742
4740: GO 4760
4742: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 5
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: ST_TO_ADDR
4758: GO 5455
4760: LD_INT 6
4762: DOUBLE
4763: EQUAL
4764: IFTRUE 4768
4766: GO 4786
4768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: LD_INT 4
4776: PUSH
4777: LD_INT 5
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: ST_TO_ADDR
4784: GO 5455
4786: LD_INT 10
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4794
4792: GO 4812
4794: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: ST_TO_ADDR
4810: GO 5455
4812: LD_INT 22
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4846
4820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4821: LD_ADDR_VAR 0 3
4825: PUSH
4826: LD_INT 11
4828: PUSH
4829: LD_INT 12
4831: PUSH
4832: LD_INT 13
4834: PUSH
4835: LD_INT 14
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 5455
4846: LD_INT 23
4848: DOUBLE
4849: EQUAL
4850: IFTRUE 4854
4852: GO 4880
4854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 11
4862: PUSH
4863: LD_INT 12
4865: PUSH
4866: LD_INT 13
4868: PUSH
4869: LD_INT 14
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: ST_TO_ADDR
4878: GO 5455
4880: LD_INT 24
4882: DOUBLE
4883: EQUAL
4884: IFTRUE 4888
4886: GO 4914
4888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_INT 11
4896: PUSH
4897: LD_INT 12
4899: PUSH
4900: LD_INT 13
4902: PUSH
4903: LD_INT 14
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
4912: GO 5455
4914: LD_INT 30
4916: DOUBLE
4917: EQUAL
4918: IFTRUE 4922
4920: GO 4948
4922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4923: LD_ADDR_VAR 0 3
4927: PUSH
4928: LD_INT 11
4930: PUSH
4931: LD_INT 12
4933: PUSH
4934: LD_INT 13
4936: PUSH
4937: LD_INT 14
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: ST_TO_ADDR
4946: GO 5455
4948: LD_INT 25
4950: DOUBLE
4951: EQUAL
4952: IFTRUE 4956
4954: GO 4974
4956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_INT 13
4964: PUSH
4965: LD_INT 14
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: ST_TO_ADDR
4972: GO 5455
4974: LD_INT 27
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 4982
4980: GO 5000
4982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4983: LD_ADDR_VAR 0 3
4987: PUSH
4988: LD_INT 13
4990: PUSH
4991: LD_INT 14
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: ST_TO_ADDR
4998: GO 5455
5000: LD_INT 92
5002: DOUBLE
5003: EQUAL
5004: IFTRUE 5008
5006: GO 5034
5008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: LD_INT 11
5016: PUSH
5017: LD_INT 12
5019: PUSH
5020: LD_INT 13
5022: PUSH
5023: LD_INT 14
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: ST_TO_ADDR
5032: GO 5455
5034: LD_INT 28
5036: DOUBLE
5037: EQUAL
5038: IFTRUE 5042
5040: GO 5060
5042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5043: LD_ADDR_VAR 0 3
5047: PUSH
5048: LD_INT 13
5050: PUSH
5051: LD_INT 14
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: ST_TO_ADDR
5058: GO 5455
5060: LD_INT 29
5062: DOUBLE
5063: EQUAL
5064: IFTRUE 5068
5066: GO 5086
5068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_INT 13
5076: PUSH
5077: LD_INT 14
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: ST_TO_ADDR
5084: GO 5455
5086: LD_INT 31
5088: DOUBLE
5089: EQUAL
5090: IFTRUE 5094
5092: GO 5112
5094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 13
5102: PUSH
5103: LD_INT 14
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: ST_TO_ADDR
5110: GO 5455
5112: LD_INT 26
5114: DOUBLE
5115: EQUAL
5116: IFTRUE 5120
5118: GO 5138
5120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5121: LD_ADDR_VAR 0 3
5125: PUSH
5126: LD_INT 13
5128: PUSH
5129: LD_INT 14
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: ST_TO_ADDR
5136: GO 5455
5138: LD_INT 42
5140: DOUBLE
5141: EQUAL
5142: IFTRUE 5146
5144: GO 5172
5146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 22
5157: PUSH
5158: LD_INT 23
5160: PUSH
5161: LD_INT 24
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
5170: GO 5455
5172: LD_INT 43
5174: DOUBLE
5175: EQUAL
5176: IFTRUE 5180
5178: GO 5206
5180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: LD_INT 21
5188: PUSH
5189: LD_INT 22
5191: PUSH
5192: LD_INT 23
5194: PUSH
5195: LD_INT 24
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: ST_TO_ADDR
5204: GO 5455
5206: LD_INT 44
5208: DOUBLE
5209: EQUAL
5210: IFTRUE 5214
5212: GO 5240
5214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5215: LD_ADDR_VAR 0 3
5219: PUSH
5220: LD_INT 21
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 23
5228: PUSH
5229: LD_INT 24
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: ST_TO_ADDR
5238: GO 5455
5240: LD_INT 45
5242: DOUBLE
5243: EQUAL
5244: IFTRUE 5248
5246: GO 5274
5248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5249: LD_ADDR_VAR 0 3
5253: PUSH
5254: LD_INT 21
5256: PUSH
5257: LD_INT 22
5259: PUSH
5260: LD_INT 23
5262: PUSH
5263: LD_INT 24
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: ST_TO_ADDR
5272: GO 5455
5274: LD_INT 49
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5282
5280: GO 5308
5282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5283: LD_ADDR_VAR 0 3
5287: PUSH
5288: LD_INT 21
5290: PUSH
5291: LD_INT 22
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 24
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: ST_TO_ADDR
5306: GO 5455
5308: LD_INT 51
5310: DOUBLE
5311: EQUAL
5312: IFTRUE 5316
5314: GO 5342
5316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5317: LD_ADDR_VAR 0 3
5321: PUSH
5322: LD_INT 21
5324: PUSH
5325: LD_INT 22
5327: PUSH
5328: LD_INT 23
5330: PUSH
5331: LD_INT 24
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: ST_TO_ADDR
5340: GO 5455
5342: LD_INT 52
5344: DOUBLE
5345: EQUAL
5346: IFTRUE 5350
5348: GO 5376
5350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 22
5361: PUSH
5362: LD_INT 23
5364: PUSH
5365: LD_INT 24
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: ST_TO_ADDR
5374: GO 5455
5376: LD_INT 53
5378: DOUBLE
5379: EQUAL
5380: IFTRUE 5384
5382: GO 5402
5384: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: LD_INT 23
5392: PUSH
5393: LD_INT 24
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: ST_TO_ADDR
5400: GO 5455
5402: LD_INT 46
5404: DOUBLE
5405: EQUAL
5406: IFTRUE 5410
5408: GO 5428
5410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5411: LD_ADDR_VAR 0 3
5415: PUSH
5416: LD_INT 23
5418: PUSH
5419: LD_INT 24
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: ST_TO_ADDR
5426: GO 5455
5428: LD_INT 47
5430: DOUBLE
5431: EQUAL
5432: IFTRUE 5436
5434: GO 5454
5436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5437: LD_ADDR_VAR 0 3
5441: PUSH
5442: LD_INT 23
5444: PUSH
5445: LD_INT 24
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: ST_TO_ADDR
5452: GO 5455
5454: POP
// result := ( chassis in result ) ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_VAR 0 1
5464: PUSH
5465: LD_VAR 0 3
5469: IN
5470: ST_TO_ADDR
// end ;
5471: LD_VAR 0 3
5475: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5476: LD_INT 0
5478: PPUSH
5479: PPUSH
5480: PPUSH
5481: PPUSH
5482: PPUSH
5483: PPUSH
5484: PPUSH
// result := array ;
5485: LD_ADDR_VAR 0 5
5489: PUSH
5490: LD_VAR 0 1
5494: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5495: LD_VAR 0 1
5499: NOT
5500: PUSH
5501: LD_VAR 0 2
5505: NOT
5506: OR
5507: PUSH
5508: LD_VAR 0 3
5512: NOT
5513: OR
5514: PUSH
5515: LD_VAR 0 2
5519: PUSH
5520: LD_VAR 0 1
5524: GREATER
5525: OR
5526: PUSH
5527: LD_VAR 0 3
5531: PUSH
5532: LD_VAR 0 1
5536: GREATER
5537: OR
5538: IFFALSE 5542
// exit ;
5540: GO 5838
// if direction then
5542: LD_VAR 0 4
5546: IFFALSE 5610
// begin d := 1 ;
5548: LD_ADDR_VAR 0 9
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// if i_from > i_to then
5556: LD_VAR 0 2
5560: PUSH
5561: LD_VAR 0 3
5565: GREATER
5566: IFFALSE 5592
// length := ( array - i_from ) + i_to else
5568: LD_ADDR_VAR 0 11
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: LD_VAR 0 2
5582: MINUS
5583: PUSH
5584: LD_VAR 0 3
5588: PLUS
5589: ST_TO_ADDR
5590: GO 5608
// length := i_to - i_from ;
5592: LD_ADDR_VAR 0 11
5596: PUSH
5597: LD_VAR 0 3
5601: PUSH
5602: LD_VAR 0 2
5606: MINUS
5607: ST_TO_ADDR
// end else
5608: GO 5671
// begin d := - 1 ;
5610: LD_ADDR_VAR 0 9
5614: PUSH
5615: LD_INT 1
5617: NEG
5618: ST_TO_ADDR
// if i_from > i_to then
5619: LD_VAR 0 2
5623: PUSH
5624: LD_VAR 0 3
5628: GREATER
5629: IFFALSE 5649
// length := i_from - i_to else
5631: LD_ADDR_VAR 0 11
5635: PUSH
5636: LD_VAR 0 2
5640: PUSH
5641: LD_VAR 0 3
5645: MINUS
5646: ST_TO_ADDR
5647: GO 5671
// length := ( array - i_to ) + i_from ;
5649: LD_ADDR_VAR 0 11
5653: PUSH
5654: LD_VAR 0 1
5658: PUSH
5659: LD_VAR 0 3
5663: MINUS
5664: PUSH
5665: LD_VAR 0 2
5669: PLUS
5670: ST_TO_ADDR
// end ; if not length then
5671: LD_VAR 0 11
5675: NOT
5676: IFFALSE 5680
// exit ;
5678: GO 5838
// tmp := array ;
5680: LD_ADDR_VAR 0 10
5684: PUSH
5685: LD_VAR 0 1
5689: ST_TO_ADDR
// for i = 1 to length do
5690: LD_ADDR_VAR 0 6
5694: PUSH
5695: DOUBLE
5696: LD_INT 1
5698: DEC
5699: ST_TO_ADDR
5700: LD_VAR 0 11
5704: PUSH
5705: FOR_TO
5706: IFFALSE 5826
// begin for j = 1 to array do
5708: LD_ADDR_VAR 0 7
5712: PUSH
5713: DOUBLE
5714: LD_INT 1
5716: DEC
5717: ST_TO_ADDR
5718: LD_VAR 0 1
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5812
// begin k := j + d ;
5726: LD_ADDR_VAR 0 8
5730: PUSH
5731: LD_VAR 0 7
5735: PUSH
5736: LD_VAR 0 9
5740: PLUS
5741: ST_TO_ADDR
// if k > array then
5742: LD_VAR 0 8
5746: PUSH
5747: LD_VAR 0 1
5751: GREATER
5752: IFFALSE 5762
// k := 1 ;
5754: LD_ADDR_VAR 0 8
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// if not k then
5762: LD_VAR 0 8
5766: NOT
5767: IFFALSE 5779
// k := array ;
5769: LD_ADDR_VAR 0 8
5773: PUSH
5774: LD_VAR 0 1
5778: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5779: LD_ADDR_VAR 0 10
5783: PUSH
5784: LD_VAR 0 10
5788: PPUSH
5789: LD_VAR 0 8
5793: PPUSH
5794: LD_VAR 0 1
5798: PUSH
5799: LD_VAR 0 7
5803: ARRAY
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// end ;
5810: GO 5723
5812: POP
5813: POP
// array := tmp ;
5814: LD_ADDR_VAR 0 1
5818: PUSH
5819: LD_VAR 0 10
5823: ST_TO_ADDR
// end ;
5824: GO 5705
5826: POP
5827: POP
// result := array ;
5828: LD_ADDR_VAR 0 5
5832: PUSH
5833: LD_VAR 0 1
5837: ST_TO_ADDR
// end ;
5838: LD_VAR 0 5
5842: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5843: LD_INT 0
5845: PPUSH
5846: PPUSH
// result := 0 ;
5847: LD_ADDR_VAR 0 3
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// if not array or not value in array then
5855: LD_VAR 0 1
5859: NOT
5860: PUSH
5861: LD_VAR 0 2
5865: PUSH
5866: LD_VAR 0 1
5870: IN
5871: NOT
5872: OR
5873: IFFALSE 5877
// exit ;
5875: GO 5931
// for i = 1 to array do
5877: LD_ADDR_VAR 0 4
5881: PUSH
5882: DOUBLE
5883: LD_INT 1
5885: DEC
5886: ST_TO_ADDR
5887: LD_VAR 0 1
5891: PUSH
5892: FOR_TO
5893: IFFALSE 5929
// if value = array [ i ] then
5895: LD_VAR 0 2
5899: PUSH
5900: LD_VAR 0 1
5904: PUSH
5905: LD_VAR 0 4
5909: ARRAY
5910: EQUAL
5911: IFFALSE 5927
// begin result := i ;
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: LD_VAR 0 4
5922: ST_TO_ADDR
// exit ;
5923: POP
5924: POP
5925: GO 5931
// end ;
5927: GO 5892
5929: POP
5930: POP
// end ;
5931: LD_VAR 0 3
5935: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5936: LD_INT 0
5938: PPUSH
// vc_chassis := chassis ;
5939: LD_ADDR_OWVAR 37
5943: PUSH
5944: LD_VAR 0 1
5948: ST_TO_ADDR
// vc_engine := engine ;
5949: LD_ADDR_OWVAR 39
5953: PUSH
5954: LD_VAR 0 2
5958: ST_TO_ADDR
// vc_control := control ;
5959: LD_ADDR_OWVAR 38
5963: PUSH
5964: LD_VAR 0 3
5968: ST_TO_ADDR
// vc_weapon := weapon ;
5969: LD_ADDR_OWVAR 40
5973: PUSH
5974: LD_VAR 0 4
5978: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5979: LD_ADDR_OWVAR 41
5983: PUSH
5984: LD_VAR 0 5
5988: ST_TO_ADDR
// end ;
5989: LD_VAR 0 6
5993: RET
// export function WantPlant ( unit ) ; var task ; begin
5994: LD_INT 0
5996: PPUSH
5997: PPUSH
// result := false ;
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 0
6005: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 437
6020: ST_TO_ADDR
// if task then
6021: LD_VAR 0 3
6025: IFFALSE 6053
// if task [ 1 ] [ 1 ] = p then
6027: LD_VAR 0 3
6031: PUSH
6032: LD_INT 1
6034: ARRAY
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PUSH
6040: LD_STRING p
6042: EQUAL
6043: IFFALSE 6053
// result := true ;
6045: LD_ADDR_VAR 0 2
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// end ;
6053: LD_VAR 0 2
6057: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
// if pos < 1 then
6064: LD_VAR 0 2
6068: PUSH
6069: LD_INT 1
6071: LESS
6072: IFFALSE 6076
// exit ;
6074: GO 6379
// if pos = 1 then
6076: LD_VAR 0 2
6080: PUSH
6081: LD_INT 1
6083: EQUAL
6084: IFFALSE 6117
// result := Replace ( arr , pos [ 1 ] , value ) else
6086: LD_ADDR_VAR 0 4
6090: PUSH
6091: LD_VAR 0 1
6095: PPUSH
6096: LD_VAR 0 2
6100: PUSH
6101: LD_INT 1
6103: ARRAY
6104: PPUSH
6105: LD_VAR 0 3
6109: PPUSH
6110: CALL_OW 1
6114: ST_TO_ADDR
6115: GO 6379
// begin tmp := arr ;
6117: LD_ADDR_VAR 0 6
6121: PUSH
6122: LD_VAR 0 1
6126: ST_TO_ADDR
// s_arr := [ tmp ] ;
6127: LD_ADDR_VAR 0 7
6131: PUSH
6132: LD_VAR 0 6
6136: PUSH
6137: EMPTY
6138: LIST
6139: ST_TO_ADDR
// for i = 1 to pos - 1 do
6140: LD_ADDR_VAR 0 5
6144: PUSH
6145: DOUBLE
6146: LD_INT 1
6148: DEC
6149: ST_TO_ADDR
6150: LD_VAR 0 2
6154: PUSH
6155: LD_INT 1
6157: MINUS
6158: PUSH
6159: FOR_TO
6160: IFFALSE 6205
// begin tmp := tmp [ pos [ i ] ] ;
6162: LD_ADDR_VAR 0 6
6166: PUSH
6167: LD_VAR 0 6
6171: PUSH
6172: LD_VAR 0 2
6176: PUSH
6177: LD_VAR 0 5
6181: ARRAY
6182: ARRAY
6183: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6184: LD_ADDR_VAR 0 7
6188: PUSH
6189: LD_VAR 0 7
6193: PUSH
6194: LD_VAR 0 6
6198: PUSH
6199: EMPTY
6200: LIST
6201: ADD
6202: ST_TO_ADDR
// end ;
6203: GO 6159
6205: POP
6206: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6207: LD_ADDR_VAR 0 6
6211: PUSH
6212: LD_VAR 0 6
6216: PPUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: PPUSH
6228: LD_VAR 0 3
6232: PPUSH
6233: CALL_OW 1
6237: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6238: LD_ADDR_VAR 0 7
6242: PUSH
6243: LD_VAR 0 7
6247: PPUSH
6248: LD_VAR 0 7
6252: PPUSH
6253: LD_VAR 0 6
6257: PPUSH
6258: CALL_OW 1
6262: ST_TO_ADDR
// for i = s_arr downto 2 do
6263: LD_ADDR_VAR 0 5
6267: PUSH
6268: DOUBLE
6269: LD_VAR 0 7
6273: INC
6274: ST_TO_ADDR
6275: LD_INT 2
6277: PUSH
6278: FOR_DOWNTO
6279: IFFALSE 6363
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6281: LD_ADDR_VAR 0 6
6285: PUSH
6286: LD_VAR 0 7
6290: PUSH
6291: LD_VAR 0 5
6295: PUSH
6296: LD_INT 1
6298: MINUS
6299: ARRAY
6300: PPUSH
6301: LD_VAR 0 2
6305: PUSH
6306: LD_VAR 0 5
6310: PUSH
6311: LD_INT 1
6313: MINUS
6314: ARRAY
6315: PPUSH
6316: LD_VAR 0 7
6320: PUSH
6321: LD_VAR 0 5
6325: ARRAY
6326: PPUSH
6327: CALL_OW 1
6331: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6332: LD_ADDR_VAR 0 7
6336: PUSH
6337: LD_VAR 0 7
6341: PPUSH
6342: LD_VAR 0 5
6346: PUSH
6347: LD_INT 1
6349: MINUS
6350: PPUSH
6351: LD_VAR 0 6
6355: PPUSH
6356: CALL_OW 1
6360: ST_TO_ADDR
// end ;
6361: GO 6278
6363: POP
6364: POP
// result := s_arr [ 1 ] ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_VAR 0 7
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: ST_TO_ADDR
// end ; end ;
6379: LD_VAR 0 4
6383: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
// if not list then
6388: LD_VAR 0 1
6392: NOT
6393: IFFALSE 6397
// exit ;
6395: GO 6488
// i := list [ pos1 ] ;
6397: LD_ADDR_VAR 0 5
6401: PUSH
6402: LD_VAR 0 1
6406: PUSH
6407: LD_VAR 0 2
6411: ARRAY
6412: ST_TO_ADDR
// if not i then
6413: LD_VAR 0 5
6417: NOT
6418: IFFALSE 6422
// exit ;
6420: GO 6488
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_VAR 0 1
6441: PUSH
6442: LD_VAR 0 3
6446: ARRAY
6447: PPUSH
6448: CALL_OW 1
6452: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6453: LD_ADDR_VAR 0 1
6457: PUSH
6458: LD_VAR 0 1
6462: PPUSH
6463: LD_VAR 0 3
6467: PPUSH
6468: LD_VAR 0 5
6472: PPUSH
6473: CALL_OW 1
6477: ST_TO_ADDR
// result := list ;
6478: LD_ADDR_VAR 0 4
6482: PUSH
6483: LD_VAR 0 1
6487: ST_TO_ADDR
// end ;
6488: LD_VAR 0 4
6492: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6493: LD_INT 0
6495: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6496: LD_ADDR_VAR 0 5
6500: PUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 250
6510: PPUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 251
6520: PPUSH
6521: LD_VAR 0 2
6525: PPUSH
6526: LD_VAR 0 3
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL 6546 0 5
6540: ST_TO_ADDR
// end ;
6541: LD_VAR 0 5
6545: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6546: LD_INT 0
6548: PPUSH
6549: PPUSH
6550: PPUSH
6551: PPUSH
// if not list then
6552: LD_VAR 0 3
6556: NOT
6557: IFFALSE 6561
// exit ;
6559: GO 6949
// result := [ ] ;
6561: LD_ADDR_VAR 0 6
6565: PUSH
6566: EMPTY
6567: ST_TO_ADDR
// for i in list do
6568: LD_ADDR_VAR 0 7
6572: PUSH
6573: LD_VAR 0 3
6577: PUSH
6578: FOR_IN
6579: IFFALSE 6781
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6581: LD_ADDR_VAR 0 9
6585: PUSH
6586: LD_VAR 0 7
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_VAR 0 2
6600: PPUSH
6601: CALL_OW 297
6605: ST_TO_ADDR
// if not result then
6606: LD_VAR 0 6
6610: NOT
6611: IFFALSE 6637
// result := [ [ i , tmp ] ] else
6613: LD_ADDR_VAR 0 6
6617: PUSH
6618: LD_VAR 0 7
6622: PUSH
6623: LD_VAR 0 9
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: ST_TO_ADDR
6635: GO 6779
// begin if result [ result ] [ 2 ] < tmp then
6637: LD_VAR 0 6
6641: PUSH
6642: LD_VAR 0 6
6646: ARRAY
6647: PUSH
6648: LD_INT 2
6650: ARRAY
6651: PUSH
6652: LD_VAR 0 9
6656: LESS
6657: IFFALSE 6699
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6659: LD_ADDR_VAR 0 6
6663: PUSH
6664: LD_VAR 0 6
6668: PPUSH
6669: LD_VAR 0 6
6673: PUSH
6674: LD_INT 1
6676: PLUS
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PPUSH
6692: CALL_OW 2
6696: ST_TO_ADDR
6697: GO 6779
// for j = 1 to result do
6699: LD_ADDR_VAR 0 8
6703: PUSH
6704: DOUBLE
6705: LD_INT 1
6707: DEC
6708: ST_TO_ADDR
6709: LD_VAR 0 6
6713: PUSH
6714: FOR_TO
6715: IFFALSE 6777
// begin if tmp < result [ j ] [ 2 ] then
6717: LD_VAR 0 9
6721: PUSH
6722: LD_VAR 0 6
6726: PUSH
6727: LD_VAR 0 8
6731: ARRAY
6732: PUSH
6733: LD_INT 2
6735: ARRAY
6736: LESS
6737: IFFALSE 6775
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6739: LD_ADDR_VAR 0 6
6743: PUSH
6744: LD_VAR 0 6
6748: PPUSH
6749: LD_VAR 0 8
6753: PPUSH
6754: LD_VAR 0 7
6758: PUSH
6759: LD_VAR 0 9
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PPUSH
6768: CALL_OW 2
6772: ST_TO_ADDR
// break ;
6773: GO 6777
// end ; end ;
6775: GO 6714
6777: POP
6778: POP
// end ; end ;
6779: GO 6578
6781: POP
6782: POP
// if result and not asc then
6783: LD_VAR 0 6
6787: PUSH
6788: LD_VAR 0 4
6792: NOT
6793: AND
6794: IFFALSE 6869
// begin tmp := result ;
6796: LD_ADDR_VAR 0 9
6800: PUSH
6801: LD_VAR 0 6
6805: ST_TO_ADDR
// for i = tmp downto 1 do
6806: LD_ADDR_VAR 0 7
6810: PUSH
6811: DOUBLE
6812: LD_VAR 0 9
6816: INC
6817: ST_TO_ADDR
6818: LD_INT 1
6820: PUSH
6821: FOR_DOWNTO
6822: IFFALSE 6867
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6824: LD_ADDR_VAR 0 6
6828: PUSH
6829: LD_VAR 0 6
6833: PPUSH
6834: LD_VAR 0 9
6838: PUSH
6839: LD_VAR 0 7
6843: MINUS
6844: PUSH
6845: LD_INT 1
6847: PLUS
6848: PPUSH
6849: LD_VAR 0 9
6853: PUSH
6854: LD_VAR 0 7
6858: ARRAY
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
6865: GO 6821
6867: POP
6868: POP
// end ; tmp := [ ] ;
6869: LD_ADDR_VAR 0 9
6873: PUSH
6874: EMPTY
6875: ST_TO_ADDR
// if mode then
6876: LD_VAR 0 5
6880: IFFALSE 6949
// begin for i = 1 to result do
6882: LD_ADDR_VAR 0 7
6886: PUSH
6887: DOUBLE
6888: LD_INT 1
6890: DEC
6891: ST_TO_ADDR
6892: LD_VAR 0 6
6896: PUSH
6897: FOR_TO
6898: IFFALSE 6937
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6900: LD_ADDR_VAR 0 9
6904: PUSH
6905: LD_VAR 0 9
6909: PPUSH
6910: LD_VAR 0 7
6914: PPUSH
6915: LD_VAR 0 6
6919: PUSH
6920: LD_VAR 0 7
6924: ARRAY
6925: PUSH
6926: LD_INT 1
6928: ARRAY
6929: PPUSH
6930: CALL_OW 1
6934: ST_TO_ADDR
6935: GO 6897
6937: POP
6938: POP
// result := tmp ;
6939: LD_ADDR_VAR 0 6
6943: PUSH
6944: LD_VAR 0 9
6948: ST_TO_ADDR
// end ; end ;
6949: LD_VAR 0 6
6953: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6954: LD_INT 0
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6962: LD_ADDR_VAR 0 5
6966: PUSH
6967: LD_INT 0
6969: PUSH
6970: LD_INT 0
6972: PUSH
6973: LD_INT 0
6975: PUSH
6976: EMPTY
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// if not x or not y then
6984: LD_VAR 0 2
6988: NOT
6989: PUSH
6990: LD_VAR 0 3
6994: NOT
6995: OR
6996: IFFALSE 7000
// exit ;
6998: GO 8650
// if not range then
7000: LD_VAR 0 4
7004: NOT
7005: IFFALSE 7015
// range := 10 ;
7007: LD_ADDR_VAR 0 4
7011: PUSH
7012: LD_INT 10
7014: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7015: LD_ADDR_VAR 0 8
7019: PUSH
7020: LD_INT 81
7022: PUSH
7023: LD_VAR 0 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 92
7034: PUSH
7035: LD_VAR 0 2
7039: PUSH
7040: LD_VAR 0 3
7044: PUSH
7045: LD_VAR 0 4
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: LD_INT 21
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// if not tmp then
7083: LD_VAR 0 8
7087: NOT
7088: IFFALSE 7092
// exit ;
7090: GO 8650
// for i in tmp do
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_VAR 0 8
7101: PUSH
7102: FOR_IN
7103: IFFALSE 8625
// begin points := [ 0 , 0 , 0 ] ;
7105: LD_ADDR_VAR 0 9
7109: PUSH
7110: LD_INT 0
7112: PUSH
7113: LD_INT 0
7115: PUSH
7116: LD_INT 0
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: ST_TO_ADDR
// bpoints := 1 ;
7124: LD_ADDR_VAR 0 10
7128: PUSH
7129: LD_INT 1
7131: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7132: LD_VAR 0 6
7136: PPUSH
7137: CALL_OW 247
7141: PUSH
7142: LD_INT 1
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7728
7150: POP
// begin if GetClass ( i ) = 1 then
7151: LD_VAR 0 6
7155: PPUSH
7156: CALL_OW 257
7160: PUSH
7161: LD_INT 1
7163: EQUAL
7164: IFFALSE 7185
// points := [ 10 , 5 , 3 ] ;
7166: LD_ADDR_VAR 0 9
7170: PUSH
7171: LD_INT 10
7173: PUSH
7174: LD_INT 5
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7185: LD_VAR 0 6
7189: PPUSH
7190: CALL_OW 257
7194: PUSH
7195: LD_INT 2
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: IN
7209: IFFALSE 7230
// points := [ 3 , 2 , 1 ] ;
7211: LD_ADDR_VAR 0 9
7215: PUSH
7216: LD_INT 3
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7230: LD_VAR 0 6
7234: PPUSH
7235: CALL_OW 257
7239: PUSH
7240: LD_INT 5
7242: EQUAL
7243: IFFALSE 7264
// points := [ 130 , 5 , 2 ] ;
7245: LD_ADDR_VAR 0 9
7249: PUSH
7250: LD_INT 130
7252: PUSH
7253: LD_INT 5
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7264: LD_VAR 0 6
7268: PPUSH
7269: CALL_OW 257
7273: PUSH
7274: LD_INT 8
7276: EQUAL
7277: IFFALSE 7298
// points := [ 35 , 35 , 30 ] ;
7279: LD_ADDR_VAR 0 9
7283: PUSH
7284: LD_INT 35
7286: PUSH
7287: LD_INT 35
7289: PUSH
7290: LD_INT 30
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7298: LD_VAR 0 6
7302: PPUSH
7303: CALL_OW 257
7307: PUSH
7308: LD_INT 9
7310: EQUAL
7311: IFFALSE 7332
// points := [ 20 , 55 , 40 ] ;
7313: LD_ADDR_VAR 0 9
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 55
7323: PUSH
7324: LD_INT 40
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7332: LD_VAR 0 6
7336: PPUSH
7337: CALL_OW 257
7341: PUSH
7342: LD_INT 12
7344: PUSH
7345: LD_INT 16
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: IN
7352: IFFALSE 7373
// points := [ 5 , 3 , 2 ] ;
7354: LD_ADDR_VAR 0 9
7358: PUSH
7359: LD_INT 5
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: LD_INT 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7373: LD_VAR 0 6
7377: PPUSH
7378: CALL_OW 257
7382: PUSH
7383: LD_INT 17
7385: EQUAL
7386: IFFALSE 7407
// points := [ 100 , 50 , 75 ] ;
7388: LD_ADDR_VAR 0 9
7392: PUSH
7393: LD_INT 100
7395: PUSH
7396: LD_INT 50
7398: PUSH
7399: LD_INT 75
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7407: LD_VAR 0 6
7411: PPUSH
7412: CALL_OW 257
7416: PUSH
7417: LD_INT 15
7419: EQUAL
7420: IFFALSE 7441
// points := [ 10 , 5 , 3 ] ;
7422: LD_ADDR_VAR 0 9
7426: PUSH
7427: LD_INT 10
7429: PUSH
7430: LD_INT 5
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7441: LD_VAR 0 6
7445: PPUSH
7446: CALL_OW 257
7450: PUSH
7451: LD_INT 14
7453: EQUAL
7454: IFFALSE 7475
// points := [ 10 , 0 , 0 ] ;
7456: LD_ADDR_VAR 0 9
7460: PUSH
7461: LD_INT 10
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: LD_INT 0
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7475: LD_VAR 0 6
7479: PPUSH
7480: CALL_OW 257
7484: PUSH
7485: LD_INT 11
7487: EQUAL
7488: IFFALSE 7509
// points := [ 30 , 10 , 5 ] ;
7490: LD_ADDR_VAR 0 9
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 5
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7509: LD_VAR 0 1
7513: PPUSH
7514: LD_INT 5
7516: PPUSH
7517: CALL_OW 321
7521: PUSH
7522: LD_INT 2
7524: EQUAL
7525: IFFALSE 7542
// bpoints := bpoints * 1.8 ;
7527: LD_ADDR_VAR 0 10
7531: PUSH
7532: LD_VAR 0 10
7536: PUSH
7537: LD_REAL  1.80000000000000E+0000
7540: MUL
7541: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7542: LD_VAR 0 6
7546: PPUSH
7547: CALL_OW 257
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: LD_INT 3
7560: PUSH
7561: LD_INT 4
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: IN
7570: PUSH
7571: LD_VAR 0 1
7575: PPUSH
7576: LD_INT 51
7578: PPUSH
7579: CALL_OW 321
7583: PUSH
7584: LD_INT 2
7586: EQUAL
7587: AND
7588: IFFALSE 7605
// bpoints := bpoints * 1.2 ;
7590: LD_ADDR_VAR 0 10
7594: PUSH
7595: LD_VAR 0 10
7599: PUSH
7600: LD_REAL  1.20000000000000E+0000
7603: MUL
7604: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7605: LD_VAR 0 6
7609: PPUSH
7610: CALL_OW 257
7614: PUSH
7615: LD_INT 5
7617: PUSH
7618: LD_INT 7
7620: PUSH
7621: LD_INT 9
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: IN
7629: PUSH
7630: LD_VAR 0 1
7634: PPUSH
7635: LD_INT 52
7637: PPUSH
7638: CALL_OW 321
7642: PUSH
7643: LD_INT 2
7645: EQUAL
7646: AND
7647: IFFALSE 7664
// bpoints := bpoints * 1.5 ;
7649: LD_ADDR_VAR 0 10
7653: PUSH
7654: LD_VAR 0 10
7658: PUSH
7659: LD_REAL  1.50000000000000E+0000
7662: MUL
7663: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_INT 66
7671: PPUSH
7672: CALL_OW 321
7676: PUSH
7677: LD_INT 2
7679: EQUAL
7680: IFFALSE 7697
// bpoints := bpoints * 1.1 ;
7682: LD_ADDR_VAR 0 10
7686: PUSH
7687: LD_VAR 0 10
7691: PUSH
7692: LD_REAL  1.10000000000000E+0000
7695: MUL
7696: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7697: LD_ADDR_VAR 0 10
7701: PUSH
7702: LD_VAR 0 10
7706: PUSH
7707: LD_VAR 0 6
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: CALL_OW 259
7719: PUSH
7720: LD_REAL  1.15000000000000E+0000
7723: MUL
7724: MUL
7725: ST_TO_ADDR
// end ; unit_vehicle :
7726: GO 8554
7728: LD_INT 2
7730: DOUBLE
7731: EQUAL
7732: IFTRUE 7736
7734: GO 8542
7736: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7737: LD_VAR 0 6
7741: PPUSH
7742: CALL_OW 264
7746: PUSH
7747: LD_INT 2
7749: PUSH
7750: LD_INT 42
7752: PUSH
7753: LD_INT 24
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: IN
7761: IFFALSE 7782
// points := [ 25 , 5 , 3 ] ;
7763: LD_ADDR_VAR 0 9
7767: PUSH
7768: LD_INT 25
7770: PUSH
7771: LD_INT 5
7773: PUSH
7774: LD_INT 3
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7782: LD_VAR 0 6
7786: PPUSH
7787: CALL_OW 264
7791: PUSH
7792: LD_INT 4
7794: PUSH
7795: LD_INT 43
7797: PUSH
7798: LD_INT 25
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: IN
7806: IFFALSE 7827
// points := [ 40 , 15 , 5 ] ;
7808: LD_ADDR_VAR 0 9
7812: PUSH
7813: LD_INT 40
7815: PUSH
7816: LD_INT 15
7818: PUSH
7819: LD_INT 5
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7827: LD_VAR 0 6
7831: PPUSH
7832: CALL_OW 264
7836: PUSH
7837: LD_INT 3
7839: PUSH
7840: LD_INT 23
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: IN
7847: IFFALSE 7868
// points := [ 7 , 25 , 8 ] ;
7849: LD_ADDR_VAR 0 9
7853: PUSH
7854: LD_INT 7
7856: PUSH
7857: LD_INT 25
7859: PUSH
7860: LD_INT 8
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7868: LD_VAR 0 6
7872: PPUSH
7873: CALL_OW 264
7877: PUSH
7878: LD_INT 5
7880: PUSH
7881: LD_INT 27
7883: PUSH
7884: LD_INT 44
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: IN
7892: IFFALSE 7913
// points := [ 14 , 50 , 16 ] ;
7894: LD_ADDR_VAR 0 9
7898: PUSH
7899: LD_INT 14
7901: PUSH
7902: LD_INT 50
7904: PUSH
7905: LD_INT 16
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7913: LD_VAR 0 6
7917: PPUSH
7918: CALL_OW 264
7922: PUSH
7923: LD_INT 6
7925: PUSH
7926: LD_INT 46
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: IN
7933: IFFALSE 7954
// points := [ 32 , 120 , 70 ] ;
7935: LD_ADDR_VAR 0 9
7939: PUSH
7940: LD_INT 32
7942: PUSH
7943: LD_INT 120
7945: PUSH
7946: LD_INT 70
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7954: LD_VAR 0 6
7958: PPUSH
7959: CALL_OW 264
7963: PUSH
7964: LD_INT 7
7966: PUSH
7967: LD_INT 28
7969: PUSH
7970: LD_INT 45
7972: PUSH
7973: LD_INT 92
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: IN
7982: IFFALSE 8003
// points := [ 35 , 20 , 45 ] ;
7984: LD_ADDR_VAR 0 9
7988: PUSH
7989: LD_INT 35
7991: PUSH
7992: LD_INT 20
7994: PUSH
7995: LD_INT 45
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8003: LD_VAR 0 6
8007: PPUSH
8008: CALL_OW 264
8012: PUSH
8013: LD_INT 47
8015: PUSH
8016: EMPTY
8017: LIST
8018: IN
8019: IFFALSE 8040
// points := [ 67 , 45 , 75 ] ;
8021: LD_ADDR_VAR 0 9
8025: PUSH
8026: LD_INT 67
8028: PUSH
8029: LD_INT 45
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8040: LD_VAR 0 6
8044: PPUSH
8045: CALL_OW 264
8049: PUSH
8050: LD_INT 26
8052: PUSH
8053: EMPTY
8054: LIST
8055: IN
8056: IFFALSE 8077
// points := [ 120 , 30 , 80 ] ;
8058: LD_ADDR_VAR 0 9
8062: PUSH
8063: LD_INT 120
8065: PUSH
8066: LD_INT 30
8068: PUSH
8069: LD_INT 80
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8077: LD_VAR 0 6
8081: PPUSH
8082: CALL_OW 264
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: EMPTY
8091: LIST
8092: IN
8093: IFFALSE 8114
// points := [ 40 , 1 , 1 ] ;
8095: LD_ADDR_VAR 0 9
8099: PUSH
8100: LD_INT 40
8102: PUSH
8103: LD_INT 1
8105: PUSH
8106: LD_INT 1
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8114: LD_VAR 0 6
8118: PPUSH
8119: CALL_OW 264
8123: PUSH
8124: LD_INT 29
8126: PUSH
8127: EMPTY
8128: LIST
8129: IN
8130: IFFALSE 8151
// points := [ 70 , 200 , 400 ] ;
8132: LD_ADDR_VAR 0 9
8136: PUSH
8137: LD_INT 70
8139: PUSH
8140: LD_INT 200
8142: PUSH
8143: LD_INT 400
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8151: LD_VAR 0 6
8155: PPUSH
8156: CALL_OW 264
8160: PUSH
8161: LD_INT 14
8163: PUSH
8164: LD_INT 53
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: IN
8171: IFFALSE 8192
// points := [ 40 , 10 , 20 ] ;
8173: LD_ADDR_VAR 0 9
8177: PUSH
8178: LD_INT 40
8180: PUSH
8181: LD_INT 10
8183: PUSH
8184: LD_INT 20
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8192: LD_VAR 0 6
8196: PPUSH
8197: CALL_OW 264
8201: PUSH
8202: LD_INT 9
8204: PUSH
8205: EMPTY
8206: LIST
8207: IN
8208: IFFALSE 8229
// points := [ 5 , 70 , 20 ] ;
8210: LD_ADDR_VAR 0 9
8214: PUSH
8215: LD_INT 5
8217: PUSH
8218: LD_INT 70
8220: PUSH
8221: LD_INT 20
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8229: LD_VAR 0 6
8233: PPUSH
8234: CALL_OW 264
8238: PUSH
8239: LD_INT 10
8241: PUSH
8242: EMPTY
8243: LIST
8244: IN
8245: IFFALSE 8266
// points := [ 35 , 110 , 70 ] ;
8247: LD_ADDR_VAR 0 9
8251: PUSH
8252: LD_INT 35
8254: PUSH
8255: LD_INT 110
8257: PUSH
8258: LD_INT 70
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8266: LD_VAR 0 6
8270: PPUSH
8271: CALL_OW 265
8275: PUSH
8276: LD_INT 25
8278: EQUAL
8279: IFFALSE 8300
// points := [ 80 , 65 , 100 ] ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 80
8288: PUSH
8289: LD_INT 65
8291: PUSH
8292: LD_INT 100
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8300: LD_VAR 0 6
8304: PPUSH
8305: CALL_OW 263
8309: PUSH
8310: LD_INT 1
8312: EQUAL
8313: IFFALSE 8348
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8315: LD_ADDR_VAR 0 10
8319: PUSH
8320: LD_VAR 0 10
8324: PUSH
8325: LD_VAR 0 6
8329: PPUSH
8330: CALL_OW 311
8334: PPUSH
8335: LD_INT 3
8337: PPUSH
8338: CALL_OW 259
8342: PUSH
8343: LD_INT 4
8345: MUL
8346: MUL
8347: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8348: LD_VAR 0 6
8352: PPUSH
8353: CALL_OW 263
8357: PUSH
8358: LD_INT 2
8360: EQUAL
8361: IFFALSE 8412
// begin j := IsControledBy ( i ) ;
8363: LD_ADDR_VAR 0 7
8367: PUSH
8368: LD_VAR 0 6
8372: PPUSH
8373: CALL_OW 312
8377: ST_TO_ADDR
// if j then
8378: LD_VAR 0 7
8382: IFFALSE 8412
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8384: LD_ADDR_VAR 0 10
8388: PUSH
8389: LD_VAR 0 10
8393: PUSH
8394: LD_VAR 0 7
8398: PPUSH
8399: LD_INT 3
8401: PPUSH
8402: CALL_OW 259
8406: PUSH
8407: LD_INT 3
8409: MUL
8410: MUL
8411: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8412: LD_VAR 0 6
8416: PPUSH
8417: CALL_OW 264
8421: PUSH
8422: LD_INT 5
8424: PUSH
8425: LD_INT 6
8427: PUSH
8428: LD_INT 46
8430: PUSH
8431: LD_INT 44
8433: PUSH
8434: LD_INT 47
8436: PUSH
8437: LD_INT 45
8439: PUSH
8440: LD_INT 28
8442: PUSH
8443: LD_INT 7
8445: PUSH
8446: LD_INT 27
8448: PUSH
8449: LD_INT 29
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: IN
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: LD_INT 52
8472: PPUSH
8473: CALL_OW 321
8477: PUSH
8478: LD_INT 2
8480: EQUAL
8481: AND
8482: IFFALSE 8499
// bpoints := bpoints * 1.2 ;
8484: LD_ADDR_VAR 0 10
8488: PUSH
8489: LD_VAR 0 10
8493: PUSH
8494: LD_REAL  1.20000000000000E+0000
8497: MUL
8498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8499: LD_VAR 0 6
8503: PPUSH
8504: CALL_OW 264
8508: PUSH
8509: LD_INT 6
8511: PUSH
8512: LD_INT 46
8514: PUSH
8515: LD_INT 47
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: IN
8523: IFFALSE 8540
// bpoints := bpoints * 1.2 ;
8525: LD_ADDR_VAR 0 10
8529: PUSH
8530: LD_VAR 0 10
8534: PUSH
8535: LD_REAL  1.20000000000000E+0000
8538: MUL
8539: ST_TO_ADDR
// end ; unit_building :
8540: GO 8554
8542: LD_INT 3
8544: DOUBLE
8545: EQUAL
8546: IFTRUE 8550
8548: GO 8553
8550: POP
// ; end ;
8551: GO 8554
8553: POP
// for j = 1 to 3 do
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: DOUBLE
8560: LD_INT 1
8562: DEC
8563: ST_TO_ADDR
8564: LD_INT 3
8566: PUSH
8567: FOR_TO
8568: IFFALSE 8621
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8570: LD_ADDR_VAR 0 5
8574: PUSH
8575: LD_VAR 0 5
8579: PPUSH
8580: LD_VAR 0 7
8584: PPUSH
8585: LD_VAR 0 5
8589: PUSH
8590: LD_VAR 0 7
8594: ARRAY
8595: PUSH
8596: LD_VAR 0 9
8600: PUSH
8601: LD_VAR 0 7
8605: ARRAY
8606: PUSH
8607: LD_VAR 0 10
8611: MUL
8612: PLUS
8613: PPUSH
8614: CALL_OW 1
8618: ST_TO_ADDR
8619: GO 8567
8621: POP
8622: POP
// end ;
8623: GO 7102
8625: POP
8626: POP
// result := Replace ( result , 4 , tmp ) ;
8627: LD_ADDR_VAR 0 5
8631: PUSH
8632: LD_VAR 0 5
8636: PPUSH
8637: LD_INT 4
8639: PPUSH
8640: LD_VAR 0 8
8644: PPUSH
8645: CALL_OW 1
8649: ST_TO_ADDR
// end ;
8650: LD_VAR 0 5
8654: RET
// export function DangerAtRange ( unit , range ) ; begin
8655: LD_INT 0
8657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8658: LD_ADDR_VAR 0 3
8662: PUSH
8663: LD_VAR 0 1
8667: PPUSH
8668: CALL_OW 255
8672: PPUSH
8673: LD_VAR 0 1
8677: PPUSH
8678: CALL_OW 250
8682: PPUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 251
8692: PPUSH
8693: LD_VAR 0 2
8697: PPUSH
8698: CALL 6954 0 4
8702: ST_TO_ADDR
// end ;
8703: LD_VAR 0 3
8707: RET
// export function DangerInArea ( side , area ) ; begin
8708: LD_INT 0
8710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_VAR 0 2
8720: PPUSH
8721: LD_INT 81
8723: PUSH
8724: LD_VAR 0 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 70
8737: ST_TO_ADDR
// end ;
8738: LD_VAR 0 3
8742: RET
// export function IsExtension ( b ) ; begin
8743: LD_INT 0
8745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_VAR 0 1
8755: PUSH
8756: LD_INT 23
8758: PUSH
8759: LD_INT 20
8761: PUSH
8762: LD_INT 22
8764: PUSH
8765: LD_INT 17
8767: PUSH
8768: LD_INT 24
8770: PUSH
8771: LD_INT 21
8773: PUSH
8774: LD_INT 19
8776: PUSH
8777: LD_INT 16
8779: PUSH
8780: LD_INT 25
8782: PUSH
8783: LD_INT 18
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: IN
8798: ST_TO_ADDR
// end ;
8799: LD_VAR 0 2
8803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8804: LD_INT 0
8806: PPUSH
8807: PPUSH
8808: PPUSH
// result := [ ] ;
8809: LD_ADDR_VAR 0 4
8813: PUSH
8814: EMPTY
8815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 2
8825: PPUSH
8826: LD_INT 21
8828: PUSH
8829: LD_INT 3
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: ST_TO_ADDR
// if not tmp then
8841: LD_VAR 0 5
8845: NOT
8846: IFFALSE 8850
// exit ;
8848: GO 8914
// if checkLink then
8850: LD_VAR 0 3
8854: IFFALSE 8904
// begin for i in tmp do
8856: LD_ADDR_VAR 0 6
8860: PUSH
8861: LD_VAR 0 5
8865: PUSH
8866: FOR_IN
8867: IFFALSE 8902
// if GetBase ( i ) <> base then
8869: LD_VAR 0 6
8873: PPUSH
8874: CALL_OW 274
8878: PUSH
8879: LD_VAR 0 1
8883: NONEQUAL
8884: IFFALSE 8900
// ComLinkToBase ( base , i ) ;
8886: LD_VAR 0 1
8890: PPUSH
8891: LD_VAR 0 6
8895: PPUSH
8896: CALL_OW 169
8900: GO 8866
8902: POP
8903: POP
// end ; result := tmp ;
8904: LD_ADDR_VAR 0 4
8908: PUSH
8909: LD_VAR 0 5
8913: ST_TO_ADDR
// end ;
8914: LD_VAR 0 4
8918: RET
// export function ComComplete ( units , b ) ; var i ; begin
8919: LD_INT 0
8921: PPUSH
8922: PPUSH
// if not units then
8923: LD_VAR 0 1
8927: NOT
8928: IFFALSE 8932
// exit ;
8930: GO 9022
// for i in units do
8932: LD_ADDR_VAR 0 4
8936: PUSH
8937: LD_VAR 0 1
8941: PUSH
8942: FOR_IN
8943: IFFALSE 9020
// if BuildingStatus ( b ) = bs_build then
8945: LD_VAR 0 2
8949: PPUSH
8950: CALL_OW 461
8954: PUSH
8955: LD_INT 1
8957: EQUAL
8958: IFFALSE 9018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8960: LD_VAR 0 4
8964: PPUSH
8965: LD_STRING h
8967: PUSH
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 250
8977: PUSH
8978: LD_VAR 0 2
8982: PPUSH
8983: CALL_OW 251
8987: PUSH
8988: LD_VAR 0 2
8992: PUSH
8993: LD_INT 0
8995: PUSH
8996: LD_INT 0
8998: PUSH
8999: LD_INT 0
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: PPUSH
9014: CALL_OW 446
9018: GO 8942
9020: POP
9021: POP
// end ;
9022: LD_VAR 0 3
9026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9027: LD_INT 0
9029: PPUSH
9030: PPUSH
9031: PPUSH
9032: PPUSH
9033: PPUSH
9034: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9035: LD_VAR 0 1
9039: NOT
9040: PUSH
9041: LD_VAR 0 1
9045: PPUSH
9046: CALL_OW 263
9050: PUSH
9051: LD_INT 2
9053: NONEQUAL
9054: OR
9055: IFFALSE 9059
// exit ;
9057: GO 9375
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9059: LD_ADDR_VAR 0 6
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 255
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 2
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 36
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 34
9096: PUSH
9097: LD_INT 31
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 69
9117: ST_TO_ADDR
// if not tmp then
9118: LD_VAR 0 6
9122: NOT
9123: IFFALSE 9127
// exit ;
9125: GO 9375
// result := [ ] ;
9127: LD_ADDR_VAR 0 2
9131: PUSH
9132: EMPTY
9133: ST_TO_ADDR
// for i in tmp do
9134: LD_ADDR_VAR 0 3
9138: PUSH
9139: LD_VAR 0 6
9143: PUSH
9144: FOR_IN
9145: IFFALSE 9216
// begin t := UnitsInside ( i ) ;
9147: LD_ADDR_VAR 0 4
9151: PUSH
9152: LD_VAR 0 3
9156: PPUSH
9157: CALL_OW 313
9161: ST_TO_ADDR
// if t then
9162: LD_VAR 0 4
9166: IFFALSE 9214
// for j in t do
9168: LD_ADDR_VAR 0 7
9172: PUSH
9173: LD_VAR 0 4
9177: PUSH
9178: FOR_IN
9179: IFFALSE 9212
// result := Replace ( result , result + 1 , j ) ;
9181: LD_ADDR_VAR 0 2
9185: PUSH
9186: LD_VAR 0 2
9190: PPUSH
9191: LD_VAR 0 2
9195: PUSH
9196: LD_INT 1
9198: PLUS
9199: PPUSH
9200: LD_VAR 0 7
9204: PPUSH
9205: CALL_OW 1
9209: ST_TO_ADDR
9210: GO 9178
9212: POP
9213: POP
// end ;
9214: GO 9144
9216: POP
9217: POP
// if not result then
9218: LD_VAR 0 2
9222: NOT
9223: IFFALSE 9227
// exit ;
9225: GO 9375
// mech := result [ 1 ] ;
9227: LD_ADDR_VAR 0 5
9231: PUSH
9232: LD_VAR 0 2
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: ST_TO_ADDR
// if result > 1 then
9241: LD_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: GREATER
9249: IFFALSE 9361
// begin for i = 2 to result do
9251: LD_ADDR_VAR 0 3
9255: PUSH
9256: DOUBLE
9257: LD_INT 2
9259: DEC
9260: ST_TO_ADDR
9261: LD_VAR 0 2
9265: PUSH
9266: FOR_TO
9267: IFFALSE 9359
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9269: LD_ADDR_VAR 0 4
9273: PUSH
9274: LD_VAR 0 2
9278: PUSH
9279: LD_VAR 0 3
9283: ARRAY
9284: PPUSH
9285: LD_INT 3
9287: PPUSH
9288: CALL_OW 259
9292: PUSH
9293: LD_VAR 0 2
9297: PUSH
9298: LD_VAR 0 3
9302: ARRAY
9303: PPUSH
9304: CALL_OW 432
9308: MINUS
9309: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9310: LD_VAR 0 4
9314: PUSH
9315: LD_VAR 0 5
9319: PPUSH
9320: LD_INT 3
9322: PPUSH
9323: CALL_OW 259
9327: PUSH
9328: LD_VAR 0 5
9332: PPUSH
9333: CALL_OW 432
9337: MINUS
9338: GREATEREQUAL
9339: IFFALSE 9357
// mech := result [ i ] ;
9341: LD_ADDR_VAR 0 5
9345: PUSH
9346: LD_VAR 0 2
9350: PUSH
9351: LD_VAR 0 3
9355: ARRAY
9356: ST_TO_ADDR
// end ;
9357: GO 9266
9359: POP
9360: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9361: LD_VAR 0 1
9365: PPUSH
9366: LD_VAR 0 5
9370: PPUSH
9371: CALL_OW 135
// end ;
9375: LD_VAR 0 2
9379: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
9389: PPUSH
9390: PPUSH
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
// result := [ ] ;
9395: LD_ADDR_VAR 0 7
9399: PUSH
9400: EMPTY
9401: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 266
9411: PUSH
9412: LD_INT 0
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: IN
9422: NOT
9423: IFFALSE 9427
// exit ;
9425: GO 11061
// if name then
9427: LD_VAR 0 3
9431: IFFALSE 9447
// SetBName ( base_dep , name ) ;
9433: LD_VAR 0 1
9437: PPUSH
9438: LD_VAR 0 3
9442: PPUSH
9443: CALL_OW 500
// base := GetBase ( base_dep ) ;
9447: LD_ADDR_VAR 0 15
9451: PUSH
9452: LD_VAR 0 1
9456: PPUSH
9457: CALL_OW 274
9461: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9462: LD_ADDR_VAR 0 16
9466: PUSH
9467: LD_VAR 0 1
9471: PPUSH
9472: CALL_OW 255
9476: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9477: LD_ADDR_VAR 0 17
9481: PUSH
9482: LD_VAR 0 1
9486: PPUSH
9487: CALL_OW 248
9491: ST_TO_ADDR
// if sources then
9492: LD_VAR 0 5
9496: IFFALSE 9543
// for i = 1 to 3 do
9498: LD_ADDR_VAR 0 8
9502: PUSH
9503: DOUBLE
9504: LD_INT 1
9506: DEC
9507: ST_TO_ADDR
9508: LD_INT 3
9510: PUSH
9511: FOR_TO
9512: IFFALSE 9541
// AddResourceType ( base , i , sources [ i ] ) ;
9514: LD_VAR 0 15
9518: PPUSH
9519: LD_VAR 0 8
9523: PPUSH
9524: LD_VAR 0 5
9528: PUSH
9529: LD_VAR 0 8
9533: ARRAY
9534: PPUSH
9535: CALL_OW 276
9539: GO 9511
9541: POP
9542: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9543: LD_ADDR_VAR 0 18
9547: PUSH
9548: LD_VAR 0 15
9552: PPUSH
9553: LD_VAR 0 2
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL 8804 0 3
9565: ST_TO_ADDR
// InitHc ;
9566: CALL_OW 19
// InitUc ;
9570: CALL_OW 18
// uc_side := side ;
9574: LD_ADDR_OWVAR 20
9578: PUSH
9579: LD_VAR 0 16
9583: ST_TO_ADDR
// uc_nation := nation ;
9584: LD_ADDR_OWVAR 21
9588: PUSH
9589: LD_VAR 0 17
9593: ST_TO_ADDR
// if buildings then
9594: LD_VAR 0 18
9598: IFFALSE 10920
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9600: LD_ADDR_VAR 0 19
9604: PUSH
9605: LD_VAR 0 18
9609: PPUSH
9610: LD_INT 2
9612: PUSH
9613: LD_INT 30
9615: PUSH
9616: LD_INT 29
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 30
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 72
9642: ST_TO_ADDR
// if tmp then
9643: LD_VAR 0 19
9647: IFFALSE 9695
// for i in tmp do
9649: LD_ADDR_VAR 0 8
9653: PUSH
9654: LD_VAR 0 19
9658: PUSH
9659: FOR_IN
9660: IFFALSE 9693
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9662: LD_VAR 0 8
9666: PPUSH
9667: CALL_OW 250
9671: PPUSH
9672: LD_VAR 0 8
9676: PPUSH
9677: CALL_OW 251
9681: PPUSH
9682: LD_VAR 0 16
9686: PPUSH
9687: CALL_OW 441
9691: GO 9659
9693: POP
9694: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9695: LD_VAR 0 18
9699: PPUSH
9700: LD_INT 2
9702: PUSH
9703: LD_INT 30
9705: PUSH
9706: LD_INT 32
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 30
9715: PUSH
9716: LD_INT 33
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 72
9732: IFFALSE 9820
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9734: LD_ADDR_VAR 0 8
9738: PUSH
9739: LD_VAR 0 18
9743: PPUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 32
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 30
9759: PUSH
9760: LD_INT 33
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 72
9776: PUSH
9777: FOR_IN
9778: IFFALSE 9818
// begin if not GetBWeapon ( i ) then
9780: LD_VAR 0 8
9784: PPUSH
9785: CALL_OW 269
9789: NOT
9790: IFFALSE 9816
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9792: LD_VAR 0 8
9796: PPUSH
9797: LD_VAR 0 8
9801: PPUSH
9802: LD_VAR 0 2
9806: PPUSH
9807: CALL 11066 0 2
9811: PPUSH
9812: CALL_OW 431
// end ;
9816: GO 9777
9818: POP
9819: POP
// end ; for i = 1 to personel do
9820: LD_ADDR_VAR 0 8
9824: PUSH
9825: DOUBLE
9826: LD_INT 1
9828: DEC
9829: ST_TO_ADDR
9830: LD_VAR 0 6
9834: PUSH
9835: FOR_TO
9836: IFFALSE 10900
// begin if i > 4 then
9838: LD_VAR 0 8
9842: PUSH
9843: LD_INT 4
9845: GREATER
9846: IFFALSE 9850
// break ;
9848: GO 10900
// case i of 1 :
9850: LD_VAR 0 8
9854: PUSH
9855: LD_INT 1
9857: DOUBLE
9858: EQUAL
9859: IFTRUE 9863
9861: GO 9943
9863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9864: LD_ADDR_VAR 0 12
9868: PUSH
9869: LD_VAR 0 18
9873: PPUSH
9874: LD_INT 22
9876: PUSH
9877: LD_VAR 0 16
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 58
9888: PUSH
9889: EMPTY
9890: LIST
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: LD_INT 30
9897: PUSH
9898: LD_INT 32
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 30
9907: PUSH
9908: LD_INT 4
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 30
9917: PUSH
9918: LD_INT 5
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: PPUSH
9936: CALL_OW 72
9940: ST_TO_ADDR
9941: GO 10165
9943: LD_INT 2
9945: DOUBLE
9946: EQUAL
9947: IFTRUE 9951
9949: GO 10013
9951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9952: LD_ADDR_VAR 0 12
9956: PUSH
9957: LD_VAR 0 18
9961: PPUSH
9962: LD_INT 22
9964: PUSH
9965: LD_VAR 0 16
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 30
9979: PUSH
9980: LD_INT 0
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 30
9989: PUSH
9990: LD_INT 1
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PPUSH
10006: CALL_OW 72
10010: ST_TO_ADDR
10011: GO 10165
10013: LD_INT 3
10015: DOUBLE
10016: EQUAL
10017: IFTRUE 10021
10019: GO 10083
10021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10022: LD_ADDR_VAR 0 12
10026: PUSH
10027: LD_VAR 0 18
10031: PPUSH
10032: LD_INT 22
10034: PUSH
10035: LD_VAR 0 16
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 2
10046: PUSH
10047: LD_INT 30
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PUSH
10057: LD_INT 30
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 72
10080: ST_TO_ADDR
10081: GO 10165
10083: LD_INT 4
10085: DOUBLE
10086: EQUAL
10087: IFTRUE 10091
10089: GO 10164
10091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10092: LD_ADDR_VAR 0 12
10096: PUSH
10097: LD_VAR 0 18
10101: PPUSH
10102: LD_INT 22
10104: PUSH
10105: LD_VAR 0 16
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 2
10116: PUSH
10117: LD_INT 30
10119: PUSH
10120: LD_INT 6
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 30
10129: PUSH
10130: LD_INT 7
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 30
10139: PUSH
10140: LD_INT 8
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PPUSH
10157: CALL_OW 72
10161: ST_TO_ADDR
10162: GO 10165
10164: POP
// if i = 1 then
10165: LD_VAR 0 8
10169: PUSH
10170: LD_INT 1
10172: EQUAL
10173: IFFALSE 10284
// begin tmp := [ ] ;
10175: LD_ADDR_VAR 0 19
10179: PUSH
10180: EMPTY
10181: ST_TO_ADDR
// for j in f do
10182: LD_ADDR_VAR 0 9
10186: PUSH
10187: LD_VAR 0 12
10191: PUSH
10192: FOR_IN
10193: IFFALSE 10266
// if GetBType ( j ) = b_bunker then
10195: LD_VAR 0 9
10199: PPUSH
10200: CALL_OW 266
10204: PUSH
10205: LD_INT 32
10207: EQUAL
10208: IFFALSE 10235
// tmp := Insert ( tmp , 1 , j ) else
10210: LD_ADDR_VAR 0 19
10214: PUSH
10215: LD_VAR 0 19
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: LD_VAR 0 9
10227: PPUSH
10228: CALL_OW 2
10232: ST_TO_ADDR
10233: GO 10264
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10235: LD_ADDR_VAR 0 19
10239: PUSH
10240: LD_VAR 0 19
10244: PPUSH
10245: LD_VAR 0 19
10249: PUSH
10250: LD_INT 1
10252: PLUS
10253: PPUSH
10254: LD_VAR 0 9
10258: PPUSH
10259: CALL_OW 2
10263: ST_TO_ADDR
10264: GO 10192
10266: POP
10267: POP
// if tmp then
10268: LD_VAR 0 19
10272: IFFALSE 10284
// f := tmp ;
10274: LD_ADDR_VAR 0 12
10278: PUSH
10279: LD_VAR 0 19
10283: ST_TO_ADDR
// end ; x := personel [ i ] ;
10284: LD_ADDR_VAR 0 13
10288: PUSH
10289: LD_VAR 0 6
10293: PUSH
10294: LD_VAR 0 8
10298: ARRAY
10299: ST_TO_ADDR
// if x = - 1 then
10300: LD_VAR 0 13
10304: PUSH
10305: LD_INT 1
10307: NEG
10308: EQUAL
10309: IFFALSE 10518
// begin for j in f do
10311: LD_ADDR_VAR 0 9
10315: PUSH
10316: LD_VAR 0 12
10320: PUSH
10321: FOR_IN
10322: IFFALSE 10514
// repeat InitHc ;
10324: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10328: LD_VAR 0 9
10332: PPUSH
10333: CALL_OW 266
10337: PUSH
10338: LD_INT 5
10340: EQUAL
10341: IFFALSE 10411
// begin if UnitsInside ( j ) < 3 then
10343: LD_VAR 0 9
10347: PPUSH
10348: CALL_OW 313
10352: PUSH
10353: LD_INT 3
10355: LESS
10356: IFFALSE 10392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10358: LD_INT 0
10360: PPUSH
10361: LD_INT 5
10363: PUSH
10364: LD_INT 8
10366: PUSH
10367: LD_INT 9
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: LD_VAR 0 17
10379: ARRAY
10380: PPUSH
10381: LD_VAR 0 4
10385: PPUSH
10386: CALL_OW 380
10390: GO 10409
// PrepareHuman ( false , i , skill ) ;
10392: LD_INT 0
10394: PPUSH
10395: LD_VAR 0 8
10399: PPUSH
10400: LD_VAR 0 4
10404: PPUSH
10405: CALL_OW 380
// end else
10409: GO 10428
// PrepareHuman ( false , i , skill ) ;
10411: LD_INT 0
10413: PPUSH
10414: LD_VAR 0 8
10418: PPUSH
10419: LD_VAR 0 4
10423: PPUSH
10424: CALL_OW 380
// un := CreateHuman ;
10428: LD_ADDR_VAR 0 14
10432: PUSH
10433: CALL_OW 44
10437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10438: LD_ADDR_VAR 0 7
10442: PUSH
10443: LD_VAR 0 7
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: LD_VAR 0 14
10455: PPUSH
10456: CALL_OW 2
10460: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10461: LD_VAR 0 14
10465: PPUSH
10466: LD_VAR 0 9
10470: PPUSH
10471: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10475: LD_VAR 0 9
10479: PPUSH
10480: CALL_OW 313
10484: PUSH
10485: LD_INT 6
10487: EQUAL
10488: PUSH
10489: LD_VAR 0 9
10493: PPUSH
10494: CALL_OW 266
10498: PUSH
10499: LD_INT 32
10501: PUSH
10502: LD_INT 31
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: IN
10509: OR
10510: IFFALSE 10324
10512: GO 10321
10514: POP
10515: POP
// end else
10516: GO 10898
// for j = 1 to x do
10518: LD_ADDR_VAR 0 9
10522: PUSH
10523: DOUBLE
10524: LD_INT 1
10526: DEC
10527: ST_TO_ADDR
10528: LD_VAR 0 13
10532: PUSH
10533: FOR_TO
10534: IFFALSE 10896
// begin InitHc ;
10536: CALL_OW 19
// if not f then
10540: LD_VAR 0 12
10544: NOT
10545: IFFALSE 10634
// begin PrepareHuman ( false , i , skill ) ;
10547: LD_INT 0
10549: PPUSH
10550: LD_VAR 0 8
10554: PPUSH
10555: LD_VAR 0 4
10559: PPUSH
10560: CALL_OW 380
// un := CreateHuman ;
10564: LD_ADDR_VAR 0 14
10568: PUSH
10569: CALL_OW 44
10573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10574: LD_ADDR_VAR 0 7
10578: PUSH
10579: LD_VAR 0 7
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_VAR 0 14
10591: PPUSH
10592: CALL_OW 2
10596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10597: LD_VAR 0 14
10601: PPUSH
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 250
10611: PPUSH
10612: LD_VAR 0 1
10616: PPUSH
10617: CALL_OW 251
10621: PPUSH
10622: LD_INT 10
10624: PPUSH
10625: LD_INT 0
10627: PPUSH
10628: CALL_OW 50
// continue ;
10632: GO 10533
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10634: LD_VAR 0 12
10638: PUSH
10639: LD_INT 1
10641: ARRAY
10642: PPUSH
10643: CALL_OW 313
10647: PUSH
10648: LD_VAR 0 12
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: CALL_OW 266
10661: PUSH
10662: LD_INT 32
10664: PUSH
10665: LD_INT 31
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: IN
10672: AND
10673: PUSH
10674: LD_VAR 0 12
10678: PUSH
10679: LD_INT 1
10681: ARRAY
10682: PPUSH
10683: CALL_OW 313
10687: PUSH
10688: LD_INT 6
10690: EQUAL
10691: OR
10692: IFFALSE 10712
// f := Delete ( f , 1 ) ;
10694: LD_ADDR_VAR 0 12
10698: PUSH
10699: LD_VAR 0 12
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 3
10711: ST_TO_ADDR
// if not f then
10712: LD_VAR 0 12
10716: NOT
10717: IFFALSE 10735
// begin x := x + 2 ;
10719: LD_ADDR_VAR 0 13
10723: PUSH
10724: LD_VAR 0 13
10728: PUSH
10729: LD_INT 2
10731: PLUS
10732: ST_TO_ADDR
// continue ;
10733: GO 10533
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10735: LD_VAR 0 12
10739: PUSH
10740: LD_INT 1
10742: ARRAY
10743: PPUSH
10744: CALL_OW 266
10748: PUSH
10749: LD_INT 5
10751: EQUAL
10752: IFFALSE 10826
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10754: LD_VAR 0 12
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: CALL_OW 313
10767: PUSH
10768: LD_INT 3
10770: LESS
10771: IFFALSE 10807
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10773: LD_INT 0
10775: PPUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 8
10781: PUSH
10782: LD_INT 9
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_VAR 0 17
10794: ARRAY
10795: PPUSH
10796: LD_VAR 0 4
10800: PPUSH
10801: CALL_OW 380
10805: GO 10824
// PrepareHuman ( false , i , skill ) ;
10807: LD_INT 0
10809: PPUSH
10810: LD_VAR 0 8
10814: PPUSH
10815: LD_VAR 0 4
10819: PPUSH
10820: CALL_OW 380
// end else
10824: GO 10843
// PrepareHuman ( false , i , skill ) ;
10826: LD_INT 0
10828: PPUSH
10829: LD_VAR 0 8
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 380
// un := CreateHuman ;
10843: LD_ADDR_VAR 0 14
10847: PUSH
10848: CALL_OW 44
10852: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10853: LD_ADDR_VAR 0 7
10857: PUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: LD_VAR 0 14
10870: PPUSH
10871: CALL_OW 2
10875: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10876: LD_VAR 0 14
10880: PPUSH
10881: LD_VAR 0 12
10885: PUSH
10886: LD_INT 1
10888: ARRAY
10889: PPUSH
10890: CALL_OW 52
// end ;
10894: GO 10533
10896: POP
10897: POP
// end ;
10898: GO 9835
10900: POP
10901: POP
// result := result ^ buildings ;
10902: LD_ADDR_VAR 0 7
10906: PUSH
10907: LD_VAR 0 7
10911: PUSH
10912: LD_VAR 0 18
10916: ADD
10917: ST_TO_ADDR
// end else
10918: GO 11061
// begin for i = 1 to personel do
10920: LD_ADDR_VAR 0 8
10924: PUSH
10925: DOUBLE
10926: LD_INT 1
10928: DEC
10929: ST_TO_ADDR
10930: LD_VAR 0 6
10934: PUSH
10935: FOR_TO
10936: IFFALSE 11059
// begin if i > 4 then
10938: LD_VAR 0 8
10942: PUSH
10943: LD_INT 4
10945: GREATER
10946: IFFALSE 10950
// break ;
10948: GO 11059
// x := personel [ i ] ;
10950: LD_ADDR_VAR 0 13
10954: PUSH
10955: LD_VAR 0 6
10959: PUSH
10960: LD_VAR 0 8
10964: ARRAY
10965: ST_TO_ADDR
// if x = - 1 then
10966: LD_VAR 0 13
10970: PUSH
10971: LD_INT 1
10973: NEG
10974: EQUAL
10975: IFFALSE 10979
// continue ;
10977: GO 10935
// PrepareHuman ( false , i , skill ) ;
10979: LD_INT 0
10981: PPUSH
10982: LD_VAR 0 8
10986: PPUSH
10987: LD_VAR 0 4
10991: PPUSH
10992: CALL_OW 380
// un := CreateHuman ;
10996: LD_ADDR_VAR 0 14
11000: PUSH
11001: CALL_OW 44
11005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11006: LD_VAR 0 14
11010: PPUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 250
11020: PPUSH
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 251
11030: PPUSH
11031: LD_INT 10
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 50
// result := result ^ un ;
11041: LD_ADDR_VAR 0 7
11045: PUSH
11046: LD_VAR 0 7
11050: PUSH
11051: LD_VAR 0 14
11055: ADD
11056: ST_TO_ADDR
// end ;
11057: GO 10935
11059: POP
11060: POP
// end ; end ;
11061: LD_VAR 0 7
11065: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11066: LD_INT 0
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
11079: PPUSH
11080: PPUSH
11081: PPUSH
11082: PPUSH
11083: PPUSH
// result := false ;
11084: LD_ADDR_VAR 0 3
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11092: LD_VAR 0 1
11096: NOT
11097: PUSH
11098: LD_VAR 0 1
11102: PPUSH
11103: CALL_OW 266
11107: PUSH
11108: LD_INT 32
11110: PUSH
11111: LD_INT 33
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: IN
11118: NOT
11119: OR
11120: IFFALSE 11124
// exit ;
11122: GO 12233
// nat := GetNation ( tower ) ;
11124: LD_ADDR_VAR 0 12
11128: PUSH
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 248
11138: ST_TO_ADDR
// side := GetSide ( tower ) ;
11139: LD_ADDR_VAR 0 16
11143: PUSH
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 255
11153: ST_TO_ADDR
// x := GetX ( tower ) ;
11154: LD_ADDR_VAR 0 10
11158: PUSH
11159: LD_VAR 0 1
11163: PPUSH
11164: CALL_OW 250
11168: ST_TO_ADDR
// y := GetY ( tower ) ;
11169: LD_ADDR_VAR 0 11
11173: PUSH
11174: LD_VAR 0 1
11178: PPUSH
11179: CALL_OW 251
11183: ST_TO_ADDR
// if not x or not y then
11184: LD_VAR 0 10
11188: NOT
11189: PUSH
11190: LD_VAR 0 11
11194: NOT
11195: OR
11196: IFFALSE 11200
// exit ;
11198: GO 12233
// weapon := 0 ;
11200: LD_ADDR_VAR 0 18
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// fac_list := [ ] ;
11208: LD_ADDR_VAR 0 17
11212: PUSH
11213: EMPTY
11214: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11215: LD_ADDR_VAR 0 6
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 274
11229: PPUSH
11230: LD_VAR 0 2
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: CALL 8804 0 3
11242: PPUSH
11243: LD_INT 30
11245: PUSH
11246: LD_INT 3
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PPUSH
11253: CALL_OW 72
11257: ST_TO_ADDR
// if not factories then
11258: LD_VAR 0 6
11262: NOT
11263: IFFALSE 11267
// exit ;
11265: GO 12233
// for i in factories do
11267: LD_ADDR_VAR 0 8
11271: PUSH
11272: LD_VAR 0 6
11276: PUSH
11277: FOR_IN
11278: IFFALSE 11303
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11280: LD_ADDR_VAR 0 17
11284: PUSH
11285: LD_VAR 0 17
11289: PUSH
11290: LD_VAR 0 8
11294: PPUSH
11295: CALL_OW 478
11299: UNION
11300: ST_TO_ADDR
11301: GO 11277
11303: POP
11304: POP
// if not fac_list then
11305: LD_VAR 0 17
11309: NOT
11310: IFFALSE 11314
// exit ;
11312: GO 12233
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11314: LD_ADDR_VAR 0 5
11318: PUSH
11319: LD_INT 4
11321: PUSH
11322: LD_INT 5
11324: PUSH
11325: LD_INT 9
11327: PUSH
11328: LD_INT 10
11330: PUSH
11331: LD_INT 6
11333: PUSH
11334: LD_INT 7
11336: PUSH
11337: LD_INT 11
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 27
11351: PUSH
11352: LD_INT 28
11354: PUSH
11355: LD_INT 26
11357: PUSH
11358: LD_INT 30
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 43
11369: PUSH
11370: LD_INT 44
11372: PUSH
11373: LD_INT 46
11375: PUSH
11376: LD_INT 45
11378: PUSH
11379: LD_INT 47
11381: PUSH
11382: LD_INT 49
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: PUSH
11398: LD_VAR 0 12
11402: ARRAY
11403: ST_TO_ADDR
// list := list isect fac_list ;
11404: LD_ADDR_VAR 0 5
11408: PUSH
11409: LD_VAR 0 5
11413: PUSH
11414: LD_VAR 0 17
11418: ISECT
11419: ST_TO_ADDR
// if not list then
11420: LD_VAR 0 5
11424: NOT
11425: IFFALSE 11429
// exit ;
11427: GO 12233
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11429: LD_VAR 0 12
11433: PUSH
11434: LD_INT 3
11436: EQUAL
11437: PUSH
11438: LD_INT 49
11440: PUSH
11441: LD_VAR 0 5
11445: IN
11446: AND
11447: PUSH
11448: LD_INT 31
11450: PPUSH
11451: LD_VAR 0 16
11455: PPUSH
11456: CALL_OW 321
11460: PUSH
11461: LD_INT 2
11463: EQUAL
11464: AND
11465: IFFALSE 11525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11467: LD_INT 22
11469: PUSH
11470: LD_VAR 0 16
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 35
11481: PUSH
11482: LD_INT 49
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 91
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: NOT
11515: IFFALSE 11525
// weapon := ru_time_lapser ;
11517: LD_ADDR_VAR 0 18
11521: PUSH
11522: LD_INT 49
11524: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11525: LD_VAR 0 12
11529: PUSH
11530: LD_INT 1
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: IN
11540: PUSH
11541: LD_INT 11
11543: PUSH
11544: LD_VAR 0 5
11548: IN
11549: PUSH
11550: LD_INT 30
11552: PUSH
11553: LD_VAR 0 5
11557: IN
11558: OR
11559: AND
11560: PUSH
11561: LD_INT 6
11563: PPUSH
11564: LD_VAR 0 16
11568: PPUSH
11569: CALL_OW 321
11573: PUSH
11574: LD_INT 2
11576: EQUAL
11577: AND
11578: IFFALSE 11743
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11580: LD_INT 22
11582: PUSH
11583: LD_VAR 0 16
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: LD_INT 35
11597: PUSH
11598: LD_INT 11
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 35
11607: PUSH
11608: LD_INT 30
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 91
11622: PUSH
11623: LD_VAR 0 1
11627: PUSH
11628: LD_INT 18
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: NOT
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_VAR 0 16
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 2
11661: PUSH
11662: LD_INT 30
11664: PUSH
11665: LD_INT 32
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 30
11674: PUSH
11675: LD_INT 33
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 91
11689: PUSH
11690: LD_VAR 0 1
11694: PUSH
11695: LD_INT 12
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: PPUSH
11711: CALL_OW 69
11715: PUSH
11716: LD_INT 2
11718: GREATER
11719: AND
11720: IFFALSE 11743
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11722: LD_ADDR_VAR 0 18
11726: PUSH
11727: LD_INT 11
11729: PUSH
11730: LD_INT 30
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_VAR 0 12
11741: ARRAY
11742: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11743: LD_VAR 0 18
11747: NOT
11748: PUSH
11749: LD_INT 40
11751: PPUSH
11752: LD_VAR 0 16
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: AND
11766: PUSH
11767: LD_INT 7
11769: PUSH
11770: LD_VAR 0 5
11774: IN
11775: PUSH
11776: LD_INT 28
11778: PUSH
11779: LD_VAR 0 5
11783: IN
11784: OR
11785: PUSH
11786: LD_INT 45
11788: PUSH
11789: LD_VAR 0 5
11793: IN
11794: OR
11795: AND
11796: IFFALSE 12050
// begin hex := GetHexInfo ( x , y ) ;
11798: LD_ADDR_VAR 0 4
11802: PUSH
11803: LD_VAR 0 10
11807: PPUSH
11808: LD_VAR 0 11
11812: PPUSH
11813: CALL_OW 546
11817: ST_TO_ADDR
// if hex [ 1 ] then
11818: LD_VAR 0 4
11822: PUSH
11823: LD_INT 1
11825: ARRAY
11826: IFFALSE 11830
// exit ;
11828: GO 12233
// height := hex [ 2 ] ;
11830: LD_ADDR_VAR 0 15
11834: PUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11844: LD_ADDR_VAR 0 14
11848: PUSH
11849: LD_INT 0
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: ST_TO_ADDR
// for i in tmp do
11867: LD_ADDR_VAR 0 8
11871: PUSH
11872: LD_VAR 0 14
11876: PUSH
11877: FOR_IN
11878: IFFALSE 12048
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11880: LD_ADDR_VAR 0 9
11884: PUSH
11885: LD_VAR 0 10
11889: PPUSH
11890: LD_VAR 0 8
11894: PPUSH
11895: LD_INT 5
11897: PPUSH
11898: CALL_OW 272
11902: PUSH
11903: LD_VAR 0 11
11907: PPUSH
11908: LD_VAR 0 8
11912: PPUSH
11913: LD_INT 5
11915: PPUSH
11916: CALL_OW 273
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11925: LD_VAR 0 9
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PPUSH
11934: LD_VAR 0 9
11938: PUSH
11939: LD_INT 2
11941: ARRAY
11942: PPUSH
11943: CALL_OW 488
11947: IFFALSE 12046
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11949: LD_ADDR_VAR 0 4
11953: PUSH
11954: LD_VAR 0 9
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PPUSH
11963: LD_VAR 0 9
11967: PUSH
11968: LD_INT 2
11970: ARRAY
11971: PPUSH
11972: CALL_OW 546
11976: ST_TO_ADDR
// if hex [ 1 ] then
11977: LD_VAR 0 4
11981: PUSH
11982: LD_INT 1
11984: ARRAY
11985: IFFALSE 11989
// continue ;
11987: GO 11877
// h := hex [ 2 ] ;
11989: LD_ADDR_VAR 0 13
11993: PUSH
11994: LD_VAR 0 4
11998: PUSH
11999: LD_INT 2
12001: ARRAY
12002: ST_TO_ADDR
// if h + 7 < height then
12003: LD_VAR 0 13
12007: PUSH
12008: LD_INT 7
12010: PLUS
12011: PUSH
12012: LD_VAR 0 15
12016: LESS
12017: IFFALSE 12046
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12019: LD_ADDR_VAR 0 18
12023: PUSH
12024: LD_INT 7
12026: PUSH
12027: LD_INT 28
12029: PUSH
12030: LD_INT 45
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: LD_VAR 0 12
12042: ARRAY
12043: ST_TO_ADDR
// break ;
12044: GO 12048
// end ; end ; end ;
12046: GO 11877
12048: POP
12049: POP
// end ; if not weapon then
12050: LD_VAR 0 18
12054: NOT
12055: IFFALSE 12115
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12057: LD_ADDR_VAR 0 5
12061: PUSH
12062: LD_VAR 0 5
12066: PUSH
12067: LD_INT 11
12069: PUSH
12070: LD_INT 30
12072: PUSH
12073: LD_INT 49
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: DIFF
12081: ST_TO_ADDR
// if not list then
12082: LD_VAR 0 5
12086: NOT
12087: IFFALSE 12091
// exit ;
12089: GO 12233
// weapon := list [ rand ( 1 , list ) ] ;
12091: LD_ADDR_VAR 0 18
12095: PUSH
12096: LD_VAR 0 5
12100: PUSH
12101: LD_INT 1
12103: PPUSH
12104: LD_VAR 0 5
12108: PPUSH
12109: CALL_OW 12
12113: ARRAY
12114: ST_TO_ADDR
// end ; if weapon then
12115: LD_VAR 0 18
12119: IFFALSE 12233
// begin tmp := CostOfWeapon ( weapon ) ;
12121: LD_ADDR_VAR 0 14
12125: PUSH
12126: LD_VAR 0 18
12130: PPUSH
12131: CALL_OW 451
12135: ST_TO_ADDR
// j := GetBase ( tower ) ;
12136: LD_ADDR_VAR 0 9
12140: PUSH
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 274
12150: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12151: LD_VAR 0 9
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 275
12163: PUSH
12164: LD_VAR 0 14
12168: PUSH
12169: LD_INT 1
12171: ARRAY
12172: GREATEREQUAL
12173: PUSH
12174: LD_VAR 0 9
12178: PPUSH
12179: LD_INT 2
12181: PPUSH
12182: CALL_OW 275
12186: PUSH
12187: LD_VAR 0 14
12191: PUSH
12192: LD_INT 2
12194: ARRAY
12195: GREATEREQUAL
12196: AND
12197: PUSH
12198: LD_VAR 0 9
12202: PPUSH
12203: LD_INT 3
12205: PPUSH
12206: CALL_OW 275
12210: PUSH
12211: LD_VAR 0 14
12215: PUSH
12216: LD_INT 3
12218: ARRAY
12219: GREATEREQUAL
12220: AND
12221: IFFALSE 12233
// result := weapon ;
12223: LD_ADDR_VAR 0 3
12227: PUSH
12228: LD_VAR 0 18
12232: ST_TO_ADDR
// end ; end ;
12233: LD_VAR 0 3
12237: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// result := true ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if array1 = array2 then
12250: LD_VAR 0 1
12254: PUSH
12255: LD_VAR 0 2
12259: EQUAL
12260: IFFALSE 12320
// begin for i = 1 to array1 do
12262: LD_ADDR_VAR 0 4
12266: PUSH
12267: DOUBLE
12268: LD_INT 1
12270: DEC
12271: ST_TO_ADDR
12272: LD_VAR 0 1
12276: PUSH
12277: FOR_TO
12278: IFFALSE 12316
// if array1 [ i ] <> array2 [ i ] then
12280: LD_VAR 0 1
12284: PUSH
12285: LD_VAR 0 4
12289: ARRAY
12290: PUSH
12291: LD_VAR 0 2
12295: PUSH
12296: LD_VAR 0 4
12300: ARRAY
12301: NONEQUAL
12302: IFFALSE 12314
// begin result := false ;
12304: LD_ADDR_VAR 0 3
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// break ;
12312: GO 12316
// end ;
12314: GO 12277
12316: POP
12317: POP
// end else
12318: GO 12328
// result := false ;
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// end ;
12328: LD_VAR 0 3
12332: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12333: LD_INT 0
12335: PPUSH
12336: PPUSH
// if not array1 or not array2 then
12337: LD_VAR 0 1
12341: NOT
12342: PUSH
12343: LD_VAR 0 2
12347: NOT
12348: OR
12349: IFFALSE 12353
// exit ;
12351: GO 12417
// result := true ;
12353: LD_ADDR_VAR 0 3
12357: PUSH
12358: LD_INT 1
12360: ST_TO_ADDR
// for i = 1 to array1 do
12361: LD_ADDR_VAR 0 4
12365: PUSH
12366: DOUBLE
12367: LD_INT 1
12369: DEC
12370: ST_TO_ADDR
12371: LD_VAR 0 1
12375: PUSH
12376: FOR_TO
12377: IFFALSE 12415
// if array1 [ i ] <> array2 [ i ] then
12379: LD_VAR 0 1
12383: PUSH
12384: LD_VAR 0 4
12388: ARRAY
12389: PUSH
12390: LD_VAR 0 2
12394: PUSH
12395: LD_VAR 0 4
12399: ARRAY
12400: NONEQUAL
12401: IFFALSE 12413
// begin result := false ;
12403: LD_ADDR_VAR 0 3
12407: PUSH
12408: LD_INT 0
12410: ST_TO_ADDR
// break ;
12411: GO 12415
// end ;
12413: GO 12376
12415: POP
12416: POP
// end ;
12417: LD_VAR 0 3
12421: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12422: LD_INT 0
12424: PPUSH
12425: PPUSH
12426: PPUSH
// pom := GetBase ( fac ) ;
12427: LD_ADDR_VAR 0 5
12431: PUSH
12432: LD_VAR 0 1
12436: PPUSH
12437: CALL_OW 274
12441: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12442: LD_ADDR_VAR 0 4
12446: PUSH
12447: LD_VAR 0 2
12451: PUSH
12452: LD_INT 1
12454: ARRAY
12455: PPUSH
12456: LD_VAR 0 2
12460: PUSH
12461: LD_INT 2
12463: ARRAY
12464: PPUSH
12465: LD_VAR 0 2
12469: PUSH
12470: LD_INT 3
12472: ARRAY
12473: PPUSH
12474: LD_VAR 0 2
12478: PUSH
12479: LD_INT 4
12481: ARRAY
12482: PPUSH
12483: CALL_OW 449
12487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12488: LD_ADDR_VAR 0 3
12492: PUSH
12493: LD_VAR 0 5
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 275
12505: PUSH
12506: LD_VAR 0 4
12510: PUSH
12511: LD_INT 1
12513: ARRAY
12514: GREATEREQUAL
12515: PUSH
12516: LD_VAR 0 5
12520: PPUSH
12521: LD_INT 2
12523: PPUSH
12524: CALL_OW 275
12528: PUSH
12529: LD_VAR 0 4
12533: PUSH
12534: LD_INT 2
12536: ARRAY
12537: GREATEREQUAL
12538: AND
12539: PUSH
12540: LD_VAR 0 5
12544: PPUSH
12545: LD_INT 3
12547: PPUSH
12548: CALL_OW 275
12552: PUSH
12553: LD_VAR 0 4
12557: PUSH
12558: LD_INT 3
12560: ARRAY
12561: GREATEREQUAL
12562: AND
12563: ST_TO_ADDR
// end ;
12564: LD_VAR 0 3
12568: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12569: LD_INT 0
12571: PPUSH
12572: PPUSH
12573: PPUSH
12574: PPUSH
// pom := GetBase ( building ) ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_VAR 0 1
12584: PPUSH
12585: CALL_OW 274
12589: ST_TO_ADDR
// if not pom then
12590: LD_VAR 0 3
12594: NOT
12595: IFFALSE 12599
// exit ;
12597: GO 12769
// btype := GetBType ( building ) ;
12599: LD_ADDR_VAR 0 5
12603: PUSH
12604: LD_VAR 0 1
12608: PPUSH
12609: CALL_OW 266
12613: ST_TO_ADDR
// if btype = b_armoury then
12614: LD_VAR 0 5
12618: PUSH
12619: LD_INT 4
12621: EQUAL
12622: IFFALSE 12632
// btype := b_barracks ;
12624: LD_ADDR_VAR 0 5
12628: PUSH
12629: LD_INT 5
12631: ST_TO_ADDR
// if btype = b_depot then
12632: LD_VAR 0 5
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: IFFALSE 12650
// btype := b_warehouse ;
12642: LD_ADDR_VAR 0 5
12646: PUSH
12647: LD_INT 1
12649: ST_TO_ADDR
// if btype = b_workshop then
12650: LD_VAR 0 5
12654: PUSH
12655: LD_INT 2
12657: EQUAL
12658: IFFALSE 12668
// btype := b_factory ;
12660: LD_ADDR_VAR 0 5
12664: PUSH
12665: LD_INT 3
12667: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12668: LD_ADDR_VAR 0 4
12672: PUSH
12673: LD_VAR 0 5
12677: PPUSH
12678: LD_VAR 0 1
12682: PPUSH
12683: CALL_OW 248
12687: PPUSH
12688: CALL_OW 450
12692: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12693: LD_ADDR_VAR 0 2
12697: PUSH
12698: LD_VAR 0 3
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: CALL_OW 275
12710: PUSH
12711: LD_VAR 0 4
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: GREATEREQUAL
12720: PUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 2
12728: PPUSH
12729: CALL_OW 275
12733: PUSH
12734: LD_VAR 0 4
12738: PUSH
12739: LD_INT 2
12741: ARRAY
12742: GREATEREQUAL
12743: AND
12744: PUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 3
12752: PPUSH
12753: CALL_OW 275
12757: PUSH
12758: LD_VAR 0 4
12762: PUSH
12763: LD_INT 3
12765: ARRAY
12766: GREATEREQUAL
12767: AND
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 2
12773: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
// pom := GetBase ( building ) ;
12779: LD_ADDR_VAR 0 4
12783: PUSH
12784: LD_VAR 0 1
12788: PPUSH
12789: CALL_OW 274
12793: ST_TO_ADDR
// if not pom then
12794: LD_VAR 0 4
12798: NOT
12799: IFFALSE 12803
// exit ;
12801: GO 12904
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12803: LD_ADDR_VAR 0 5
12807: PUSH
12808: LD_VAR 0 2
12812: PPUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL_OW 248
12822: PPUSH
12823: CALL_OW 450
12827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: LD_VAR 0 4
12837: PPUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 275
12845: PUSH
12846: LD_VAR 0 5
12850: PUSH
12851: LD_INT 1
12853: ARRAY
12854: GREATEREQUAL
12855: PUSH
12856: LD_VAR 0 4
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: CALL_OW 275
12868: PUSH
12869: LD_VAR 0 5
12873: PUSH
12874: LD_INT 2
12876: ARRAY
12877: GREATEREQUAL
12878: AND
12879: PUSH
12880: LD_VAR 0 4
12884: PPUSH
12885: LD_INT 3
12887: PPUSH
12888: CALL_OW 275
12892: PUSH
12893: LD_VAR 0 5
12897: PUSH
12898: LD_INT 3
12900: ARRAY
12901: GREATEREQUAL
12902: AND
12903: ST_TO_ADDR
// end ;
12904: LD_VAR 0 3
12908: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12909: LD_INT 0
12911: PPUSH
12912: PPUSH
12913: PPUSH
12914: PPUSH
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
// result := false ;
12922: LD_ADDR_VAR 0 8
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12930: LD_VAR 0 5
12934: NOT
12935: PUSH
12936: LD_VAR 0 1
12940: NOT
12941: OR
12942: PUSH
12943: LD_VAR 0 2
12947: NOT
12948: OR
12949: PUSH
12950: LD_VAR 0 3
12954: NOT
12955: OR
12956: IFFALSE 12960
// exit ;
12958: GO 13774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12960: LD_ADDR_VAR 0 14
12964: PUSH
12965: LD_VAR 0 1
12969: PPUSH
12970: LD_VAR 0 2
12974: PPUSH
12975: LD_VAR 0 3
12979: PPUSH
12980: LD_VAR 0 4
12984: PPUSH
12985: LD_VAR 0 5
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: CALL_OW 248
12998: PPUSH
12999: LD_INT 0
13001: PPUSH
13002: CALL 15007 0 6
13006: ST_TO_ADDR
// if not hexes then
13007: LD_VAR 0 14
13011: NOT
13012: IFFALSE 13016
// exit ;
13014: GO 13774
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13016: LD_ADDR_VAR 0 17
13020: PUSH
13021: LD_VAR 0 5
13025: PPUSH
13026: LD_INT 22
13028: PUSH
13029: LD_VAR 0 13
13033: PPUSH
13034: CALL_OW 255
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: LD_INT 30
13048: PUSH
13049: LD_INT 0
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 30
13058: PUSH
13059: LD_INT 1
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 72
13079: ST_TO_ADDR
// for i = 1 to hexes do
13080: LD_ADDR_VAR 0 9
13084: PUSH
13085: DOUBLE
13086: LD_INT 1
13088: DEC
13089: ST_TO_ADDR
13090: LD_VAR 0 14
13094: PUSH
13095: FOR_TO
13096: IFFALSE 13772
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13098: LD_ADDR_VAR 0 13
13102: PUSH
13103: LD_VAR 0 14
13107: PUSH
13108: LD_VAR 0 9
13112: ARRAY
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_VAR 0 14
13122: PUSH
13123: LD_VAR 0 9
13127: ARRAY
13128: PUSH
13129: LD_INT 2
13131: ARRAY
13132: PPUSH
13133: CALL_OW 428
13137: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13138: LD_VAR 0 14
13142: PUSH
13143: LD_VAR 0 9
13147: ARRAY
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: LD_VAR 0 14
13157: PUSH
13158: LD_VAR 0 9
13162: ARRAY
13163: PUSH
13164: LD_INT 2
13166: ARRAY
13167: PPUSH
13168: CALL_OW 351
13172: PUSH
13173: LD_VAR 0 14
13177: PUSH
13178: LD_VAR 0 9
13182: ARRAY
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: LD_VAR 0 14
13192: PUSH
13193: LD_VAR 0 9
13197: ARRAY
13198: PUSH
13199: LD_INT 2
13201: ARRAY
13202: PPUSH
13203: CALL_OW 488
13207: NOT
13208: OR
13209: PUSH
13210: LD_VAR 0 13
13214: PPUSH
13215: CALL_OW 247
13219: PUSH
13220: LD_INT 3
13222: EQUAL
13223: OR
13224: IFFALSE 13230
// exit ;
13226: POP
13227: POP
13228: GO 13774
// if not tmp then
13230: LD_VAR 0 13
13234: NOT
13235: IFFALSE 13239
// continue ;
13237: GO 13095
// result := true ;
13239: LD_ADDR_VAR 0 8
13243: PUSH
13244: LD_INT 1
13246: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13247: LD_VAR 0 6
13251: PUSH
13252: LD_VAR 0 13
13256: PPUSH
13257: CALL_OW 247
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: AND
13266: PUSH
13267: LD_VAR 0 13
13271: PPUSH
13272: CALL_OW 263
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: AND
13281: IFFALSE 13445
// begin if IsDrivenBy ( tmp ) then
13283: LD_VAR 0 13
13287: PPUSH
13288: CALL_OW 311
13292: IFFALSE 13296
// continue ;
13294: GO 13095
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13296: LD_VAR 0 6
13300: PPUSH
13301: LD_INT 3
13303: PUSH
13304: LD_INT 60
13306: PUSH
13307: EMPTY
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 3
13316: PUSH
13317: LD_INT 55
13319: PUSH
13320: EMPTY
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: IFFALSE 13443
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13337: LD_ADDR_VAR 0 18
13341: PUSH
13342: LD_VAR 0 6
13346: PPUSH
13347: LD_INT 3
13349: PUSH
13350: LD_INT 60
13352: PUSH
13353: EMPTY
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: LD_INT 55
13365: PUSH
13366: EMPTY
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PPUSH
13377: CALL_OW 72
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: ST_TO_ADDR
// if IsInUnit ( driver ) then
13386: LD_VAR 0 18
13390: PPUSH
13391: CALL_OW 310
13395: IFFALSE 13406
// ComExit ( driver ) ;
13397: LD_VAR 0 18
13401: PPUSH
13402: CALL 38787 0 1
// AddComEnterUnit ( driver , tmp ) ;
13406: LD_VAR 0 18
13410: PPUSH
13411: LD_VAR 0 13
13415: PPUSH
13416: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13420: LD_VAR 0 18
13424: PPUSH
13425: LD_VAR 0 7
13429: PPUSH
13430: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13434: LD_VAR 0 18
13438: PPUSH
13439: CALL_OW 181
// end ; continue ;
13443: GO 13095
// end ; if not cleaners or not tmp in cleaners then
13445: LD_VAR 0 6
13449: NOT
13450: PUSH
13451: LD_VAR 0 13
13455: PUSH
13456: LD_VAR 0 6
13460: IN
13461: NOT
13462: OR
13463: IFFALSE 13770
// begin if dep then
13465: LD_VAR 0 17
13469: IFFALSE 13605
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13471: LD_ADDR_VAR 0 16
13475: PUSH
13476: LD_VAR 0 17
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: CALL_OW 250
13489: PPUSH
13490: LD_VAR 0 17
13494: PUSH
13495: LD_INT 1
13497: ARRAY
13498: PPUSH
13499: CALL_OW 254
13503: PPUSH
13504: LD_INT 5
13506: PPUSH
13507: CALL_OW 272
13511: PUSH
13512: LD_VAR 0 17
13516: PUSH
13517: LD_INT 1
13519: ARRAY
13520: PPUSH
13521: CALL_OW 251
13525: PPUSH
13526: LD_VAR 0 17
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: CALL_OW 254
13539: PPUSH
13540: LD_INT 5
13542: PPUSH
13543: CALL_OW 273
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13552: LD_VAR 0 16
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 16
13565: PUSH
13566: LD_INT 2
13568: ARRAY
13569: PPUSH
13570: CALL_OW 488
13574: IFFALSE 13605
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13576: LD_VAR 0 13
13580: PPUSH
13581: LD_VAR 0 16
13585: PUSH
13586: LD_INT 1
13588: ARRAY
13589: PPUSH
13590: LD_VAR 0 16
13594: PUSH
13595: LD_INT 2
13597: ARRAY
13598: PPUSH
13599: CALL_OW 111
// continue ;
13603: GO 13095
// end ; end ; r := GetDir ( tmp ) ;
13605: LD_ADDR_VAR 0 15
13609: PUSH
13610: LD_VAR 0 13
13614: PPUSH
13615: CALL_OW 254
13619: ST_TO_ADDR
// if r = 5 then
13620: LD_VAR 0 15
13624: PUSH
13625: LD_INT 5
13627: EQUAL
13628: IFFALSE 13638
// r := 0 ;
13630: LD_ADDR_VAR 0 15
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// for j = r to 5 do
13638: LD_ADDR_VAR 0 10
13642: PUSH
13643: DOUBLE
13644: LD_VAR 0 15
13648: DEC
13649: ST_TO_ADDR
13650: LD_INT 5
13652: PUSH
13653: FOR_TO
13654: IFFALSE 13768
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13656: LD_ADDR_VAR 0 11
13660: PUSH
13661: LD_VAR 0 13
13665: PPUSH
13666: CALL_OW 250
13670: PPUSH
13671: LD_VAR 0 10
13675: PPUSH
13676: LD_INT 2
13678: PPUSH
13679: CALL_OW 272
13683: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13684: LD_ADDR_VAR 0 12
13688: PUSH
13689: LD_VAR 0 13
13693: PPUSH
13694: CALL_OW 251
13698: PPUSH
13699: LD_VAR 0 10
13703: PPUSH
13704: LD_INT 2
13706: PPUSH
13707: CALL_OW 273
13711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13712: LD_VAR 0 11
13716: PPUSH
13717: LD_VAR 0 12
13721: PPUSH
13722: CALL_OW 488
13726: PUSH
13727: LD_VAR 0 11
13731: PPUSH
13732: LD_VAR 0 12
13736: PPUSH
13737: CALL_OW 428
13741: NOT
13742: AND
13743: IFFALSE 13766
// begin ComMoveXY ( tmp , _x , _y ) ;
13745: LD_VAR 0 13
13749: PPUSH
13750: LD_VAR 0 11
13754: PPUSH
13755: LD_VAR 0 12
13759: PPUSH
13760: CALL_OW 111
// break ;
13764: GO 13768
// end ; end ;
13766: GO 13653
13768: POP
13769: POP
// end ; end ;
13770: GO 13095
13772: POP
13773: POP
// end ;
13774: LD_VAR 0 8
13778: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13779: LD_INT 0
13781: PPUSH
// result := true ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13790: LD_VAR 0 2
13794: PUSH
13795: LD_INT 24
13797: DOUBLE
13798: EQUAL
13799: IFTRUE 13809
13801: LD_INT 33
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13834
13809: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13810: LD_ADDR_VAR 0 3
13814: PUSH
13815: LD_INT 32
13817: PPUSH
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 321
13827: PUSH
13828: LD_INT 2
13830: EQUAL
13831: ST_TO_ADDR
13832: GO 14150
13834: LD_INT 20
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13867
13842: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13843: LD_ADDR_VAR 0 3
13847: PUSH
13848: LD_INT 6
13850: PPUSH
13851: LD_VAR 0 1
13855: PPUSH
13856: CALL_OW 321
13860: PUSH
13861: LD_INT 2
13863: EQUAL
13864: ST_TO_ADDR
13865: GO 14150
13867: LD_INT 22
13869: DOUBLE
13870: EQUAL
13871: IFTRUE 13881
13873: LD_INT 36
13875: DOUBLE
13876: EQUAL
13877: IFTRUE 13881
13879: GO 13906
13881: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13882: LD_ADDR_VAR 0 3
13886: PUSH
13887: LD_INT 15
13889: PPUSH
13890: LD_VAR 0 1
13894: PPUSH
13895: CALL_OW 321
13899: PUSH
13900: LD_INT 2
13902: EQUAL
13903: ST_TO_ADDR
13904: GO 14150
13906: LD_INT 30
13908: DOUBLE
13909: EQUAL
13910: IFTRUE 13914
13912: GO 13939
13914: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: LD_INT 20
13922: PPUSH
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 321
13932: PUSH
13933: LD_INT 2
13935: EQUAL
13936: ST_TO_ADDR
13937: GO 14150
13939: LD_INT 28
13941: DOUBLE
13942: EQUAL
13943: IFTRUE 13953
13945: LD_INT 21
13947: DOUBLE
13948: EQUAL
13949: IFTRUE 13953
13951: GO 13978
13953: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13954: LD_ADDR_VAR 0 3
13958: PUSH
13959: LD_INT 21
13961: PPUSH
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 321
13971: PUSH
13972: LD_INT 2
13974: EQUAL
13975: ST_TO_ADDR
13976: GO 14150
13978: LD_INT 16
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14011
13986: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 84
13994: PPUSH
13995: LD_VAR 0 1
13999: PPUSH
14000: CALL_OW 321
14004: PUSH
14005: LD_INT 2
14007: EQUAL
14008: ST_TO_ADDR
14009: GO 14150
14011: LD_INT 19
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14025
14017: LD_INT 23
14019: DOUBLE
14020: EQUAL
14021: IFTRUE 14025
14023: GO 14050
14025: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14026: LD_ADDR_VAR 0 3
14030: PUSH
14031: LD_INT 83
14033: PPUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 321
14043: PUSH
14044: LD_INT 2
14046: EQUAL
14047: ST_TO_ADDR
14048: GO 14150
14050: LD_INT 17
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14083
14058: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14059: LD_ADDR_VAR 0 3
14063: PUSH
14064: LD_INT 39
14066: PPUSH
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 321
14076: PUSH
14077: LD_INT 2
14079: EQUAL
14080: ST_TO_ADDR
14081: GO 14150
14083: LD_INT 18
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14116
14091: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14092: LD_ADDR_VAR 0 3
14096: PUSH
14097: LD_INT 40
14099: PPUSH
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 321
14109: PUSH
14110: LD_INT 2
14112: EQUAL
14113: ST_TO_ADDR
14114: GO 14150
14116: LD_INT 27
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14149
14124: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14125: LD_ADDR_VAR 0 3
14129: PUSH
14130: LD_INT 35
14132: PPUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 321
14142: PUSH
14143: LD_INT 2
14145: EQUAL
14146: ST_TO_ADDR
14147: GO 14150
14149: POP
// end ;
14150: LD_VAR 0 3
14154: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14155: LD_INT 0
14157: PPUSH
14158: PPUSH
14159: PPUSH
14160: PPUSH
14161: PPUSH
14162: PPUSH
14163: PPUSH
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
// result := false ;
14168: LD_ADDR_VAR 0 6
14172: PUSH
14173: LD_INT 0
14175: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14176: LD_VAR 0 1
14180: NOT
14181: PUSH
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 266
14191: PUSH
14192: LD_INT 0
14194: PUSH
14195: LD_INT 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: IN
14202: NOT
14203: OR
14204: PUSH
14205: LD_VAR 0 2
14209: NOT
14210: OR
14211: PUSH
14212: LD_VAR 0 5
14216: PUSH
14217: LD_INT 0
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 3
14228: PUSH
14229: LD_INT 4
14231: PUSH
14232: LD_INT 5
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: IN
14243: NOT
14244: OR
14245: PUSH
14246: LD_VAR 0 3
14250: PPUSH
14251: LD_VAR 0 4
14255: PPUSH
14256: CALL_OW 488
14260: NOT
14261: OR
14262: IFFALSE 14266
// exit ;
14264: GO 15002
// side := GetSide ( depot ) ;
14266: LD_ADDR_VAR 0 9
14270: PUSH
14271: LD_VAR 0 1
14275: PPUSH
14276: CALL_OW 255
14280: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14281: LD_VAR 0 9
14285: PPUSH
14286: LD_VAR 0 2
14290: PPUSH
14291: CALL 13779 0 2
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 15002
// pom := GetBase ( depot ) ;
14300: LD_ADDR_VAR 0 10
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 274
14314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14315: LD_ADDR_VAR 0 11
14319: PUSH
14320: LD_VAR 0 2
14324: PPUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 248
14334: PPUSH
14335: CALL_OW 450
14339: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14340: LD_VAR 0 10
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 275
14352: PUSH
14353: LD_VAR 0 11
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: GREATEREQUAL
14362: PUSH
14363: LD_VAR 0 10
14367: PPUSH
14368: LD_INT 2
14370: PPUSH
14371: CALL_OW 275
14375: PUSH
14376: LD_VAR 0 11
14380: PUSH
14381: LD_INT 2
14383: ARRAY
14384: GREATEREQUAL
14385: AND
14386: PUSH
14387: LD_VAR 0 10
14391: PPUSH
14392: LD_INT 3
14394: PPUSH
14395: CALL_OW 275
14399: PUSH
14400: LD_VAR 0 11
14404: PUSH
14405: LD_INT 3
14407: ARRAY
14408: GREATEREQUAL
14409: AND
14410: NOT
14411: IFFALSE 14415
// exit ;
14413: GO 15002
// if GetBType ( depot ) = b_depot then
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 266
14424: PUSH
14425: LD_INT 0
14427: EQUAL
14428: IFFALSE 14440
// dist := 28 else
14430: LD_ADDR_VAR 0 14
14434: PUSH
14435: LD_INT 28
14437: ST_TO_ADDR
14438: GO 14448
// dist := 36 ;
14440: LD_ADDR_VAR 0 14
14444: PUSH
14445: LD_INT 36
14447: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14448: LD_VAR 0 1
14452: PPUSH
14453: LD_VAR 0 3
14457: PPUSH
14458: LD_VAR 0 4
14462: PPUSH
14463: CALL_OW 297
14467: PUSH
14468: LD_VAR 0 14
14472: GREATER
14473: IFFALSE 14477
// exit ;
14475: GO 15002
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14477: LD_ADDR_VAR 0 12
14481: PUSH
14482: LD_VAR 0 2
14486: PPUSH
14487: LD_VAR 0 3
14491: PPUSH
14492: LD_VAR 0 4
14496: PPUSH
14497: LD_VAR 0 5
14501: PPUSH
14502: LD_VAR 0 1
14506: PPUSH
14507: CALL_OW 248
14511: PPUSH
14512: LD_INT 0
14514: PPUSH
14515: CALL 15007 0 6
14519: ST_TO_ADDR
// if not hexes then
14520: LD_VAR 0 12
14524: NOT
14525: IFFALSE 14529
// exit ;
14527: GO 15002
// hex := GetHexInfo ( x , y ) ;
14529: LD_ADDR_VAR 0 15
14533: PUSH
14534: LD_VAR 0 3
14538: PPUSH
14539: LD_VAR 0 4
14543: PPUSH
14544: CALL_OW 546
14548: ST_TO_ADDR
// if hex [ 1 ] then
14549: LD_VAR 0 15
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: IFFALSE 14561
// exit ;
14559: GO 15002
// height := hex [ 2 ] ;
14561: LD_ADDR_VAR 0 13
14565: PUSH
14566: LD_VAR 0 15
14570: PUSH
14571: LD_INT 2
14573: ARRAY
14574: ST_TO_ADDR
// for i = 1 to hexes do
14575: LD_ADDR_VAR 0 7
14579: PUSH
14580: DOUBLE
14581: LD_INT 1
14583: DEC
14584: ST_TO_ADDR
14585: LD_VAR 0 12
14589: PUSH
14590: FOR_TO
14591: IFFALSE 14921
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14593: LD_VAR 0 12
14597: PUSH
14598: LD_VAR 0 7
14602: ARRAY
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_VAR 0 12
14612: PUSH
14613: LD_VAR 0 7
14617: ARRAY
14618: PUSH
14619: LD_INT 2
14621: ARRAY
14622: PPUSH
14623: CALL_OW 488
14627: NOT
14628: PUSH
14629: LD_VAR 0 12
14633: PUSH
14634: LD_VAR 0 7
14638: ARRAY
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 12
14648: PUSH
14649: LD_VAR 0 7
14653: ARRAY
14654: PUSH
14655: LD_INT 2
14657: ARRAY
14658: PPUSH
14659: CALL_OW 428
14663: PUSH
14664: LD_INT 0
14666: GREATER
14667: OR
14668: PUSH
14669: LD_VAR 0 12
14673: PUSH
14674: LD_VAR 0 7
14678: ARRAY
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PPUSH
14684: LD_VAR 0 12
14688: PUSH
14689: LD_VAR 0 7
14693: ARRAY
14694: PUSH
14695: LD_INT 2
14697: ARRAY
14698: PPUSH
14699: CALL_OW 351
14703: OR
14704: IFFALSE 14710
// exit ;
14706: POP
14707: POP
14708: GO 15002
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14710: LD_ADDR_VAR 0 8
14714: PUSH
14715: LD_VAR 0 12
14719: PUSH
14720: LD_VAR 0 7
14724: ARRAY
14725: PUSH
14726: LD_INT 1
14728: ARRAY
14729: PPUSH
14730: LD_VAR 0 12
14734: PUSH
14735: LD_VAR 0 7
14739: ARRAY
14740: PUSH
14741: LD_INT 2
14743: ARRAY
14744: PPUSH
14745: CALL_OW 546
14749: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14750: LD_VAR 0 8
14754: PUSH
14755: LD_INT 1
14757: ARRAY
14758: PUSH
14759: LD_VAR 0 8
14763: PUSH
14764: LD_INT 2
14766: ARRAY
14767: PUSH
14768: LD_VAR 0 13
14772: PUSH
14773: LD_INT 2
14775: PLUS
14776: GREATER
14777: OR
14778: PUSH
14779: LD_VAR 0 8
14783: PUSH
14784: LD_INT 2
14786: ARRAY
14787: PUSH
14788: LD_VAR 0 13
14792: PUSH
14793: LD_INT 2
14795: MINUS
14796: LESS
14797: OR
14798: PUSH
14799: LD_VAR 0 8
14803: PUSH
14804: LD_INT 3
14806: ARRAY
14807: PUSH
14808: LD_INT 0
14810: PUSH
14811: LD_INT 8
14813: PUSH
14814: LD_INT 9
14816: PUSH
14817: LD_INT 10
14819: PUSH
14820: LD_INT 11
14822: PUSH
14823: LD_INT 12
14825: PUSH
14826: LD_INT 13
14828: PUSH
14829: LD_INT 16
14831: PUSH
14832: LD_INT 17
14834: PUSH
14835: LD_INT 18
14837: PUSH
14838: LD_INT 19
14840: PUSH
14841: LD_INT 20
14843: PUSH
14844: LD_INT 21
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: IN
14862: NOT
14863: OR
14864: PUSH
14865: LD_VAR 0 8
14869: PUSH
14870: LD_INT 5
14872: ARRAY
14873: NOT
14874: OR
14875: PUSH
14876: LD_VAR 0 8
14880: PUSH
14881: LD_INT 6
14883: ARRAY
14884: PUSH
14885: LD_INT 1
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 7
14893: PUSH
14894: LD_INT 9
14896: PUSH
14897: LD_INT 10
14899: PUSH
14900: LD_INT 11
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: IN
14911: NOT
14912: OR
14913: IFFALSE 14919
// exit ;
14915: POP
14916: POP
14917: GO 15002
// end ;
14919: GO 14590
14921: POP
14922: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14923: LD_VAR 0 9
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_VAR 0 4
14937: PPUSH
14938: LD_INT 20
14940: PPUSH
14941: CALL 6954 0 4
14945: PUSH
14946: LD_INT 4
14948: ARRAY
14949: IFFALSE 14953
// exit ;
14951: GO 15002
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14953: LD_VAR 0 2
14957: PUSH
14958: LD_INT 29
14960: PUSH
14961: LD_INT 30
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: IN
14968: PUSH
14969: LD_VAR 0 3
14973: PPUSH
14974: LD_VAR 0 4
14978: PPUSH
14979: LD_VAR 0 9
14983: PPUSH
14984: CALL_OW 440
14988: NOT
14989: AND
14990: IFFALSE 14994
// exit ;
14992: GO 15002
// result := true ;
14994: LD_ADDR_VAR 0 6
14998: PUSH
14999: LD_INT 1
15001: ST_TO_ADDR
// end ;
15002: LD_VAR 0 6
15006: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15007: LD_INT 0
15009: PPUSH
15010: PPUSH
15011: PPUSH
15012: PPUSH
15013: PPUSH
15014: PPUSH
15015: PPUSH
15016: PPUSH
15017: PPUSH
15018: PPUSH
15019: PPUSH
15020: PPUSH
15021: PPUSH
15022: PPUSH
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
15035: PPUSH
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
15040: PPUSH
15041: PPUSH
15042: PPUSH
15043: PPUSH
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
15048: PPUSH
15049: PPUSH
15050: PPUSH
15051: PPUSH
15052: PPUSH
15053: PPUSH
15054: PPUSH
15055: PPUSH
15056: PPUSH
15057: PPUSH
15058: PPUSH
15059: PPUSH
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
// result = [ ] ;
15067: LD_ADDR_VAR 0 7
15071: PUSH
15072: EMPTY
15073: ST_TO_ADDR
// temp_list = [ ] ;
15074: LD_ADDR_VAR 0 9
15078: PUSH
15079: EMPTY
15080: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15081: LD_VAR 0 4
15085: PUSH
15086: LD_INT 0
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: LD_INT 5
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: IN
15112: NOT
15113: PUSH
15114: LD_VAR 0 1
15118: PUSH
15119: LD_INT 0
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: IN
15129: PUSH
15130: LD_VAR 0 5
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: LD_INT 3
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: IN
15149: NOT
15150: AND
15151: OR
15152: IFFALSE 15156
// exit ;
15154: GO 33547
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15156: LD_VAR 0 1
15160: PUSH
15161: LD_INT 6
15163: PUSH
15164: LD_INT 7
15166: PUSH
15167: LD_INT 8
15169: PUSH
15170: LD_INT 13
15172: PUSH
15173: LD_INT 12
15175: PUSH
15176: LD_INT 15
15178: PUSH
15179: LD_INT 11
15181: PUSH
15182: LD_INT 14
15184: PUSH
15185: LD_INT 10
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: IN
15199: IFFALSE 15209
// btype = b_lab ;
15201: LD_ADDR_VAR 0 1
15205: PUSH
15206: LD_INT 6
15208: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15209: LD_VAR 0 6
15213: PUSH
15214: LD_INT 0
15216: PUSH
15217: LD_INT 1
15219: PUSH
15220: LD_INT 2
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: IN
15228: NOT
15229: PUSH
15230: LD_VAR 0 1
15234: PUSH
15235: LD_INT 0
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: LD_INT 3
15246: PUSH
15247: LD_INT 6
15249: PUSH
15250: LD_INT 36
15252: PUSH
15253: LD_INT 4
15255: PUSH
15256: LD_INT 5
15258: PUSH
15259: LD_INT 31
15261: PUSH
15262: LD_INT 32
15264: PUSH
15265: LD_INT 33
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: IN
15281: NOT
15282: PUSH
15283: LD_VAR 0 6
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: OR
15293: PUSH
15294: LD_VAR 0 1
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: LD_INT 3
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: IN
15309: NOT
15310: PUSH
15311: LD_VAR 0 6
15315: PUSH
15316: LD_INT 2
15318: EQUAL
15319: AND
15320: OR
15321: IFFALSE 15331
// mode = 0 ;
15323: LD_ADDR_VAR 0 6
15327: PUSH
15328: LD_INT 0
15330: ST_TO_ADDR
// case mode of 0 :
15331: LD_VAR 0 6
15335: PUSH
15336: LD_INT 0
15338: DOUBLE
15339: EQUAL
15340: IFTRUE 15344
15342: GO 26797
15344: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15345: LD_ADDR_VAR 0 11
15349: PUSH
15350: LD_INT 0
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: LD_INT 1
15365: NEG
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: LD_INT 0
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 1
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 0
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 1
15403: NEG
15404: PUSH
15405: LD_INT 0
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 1
15414: NEG
15415: PUSH
15416: LD_INT 1
15418: NEG
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 1
15426: NEG
15427: PUSH
15428: LD_INT 2
15430: NEG
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: LD_INT 2
15441: NEG
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: LD_INT 1
15452: NEG
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 1
15480: NEG
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 1
15491: PUSH
15492: LD_INT 3
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 0
15501: PUSH
15502: LD_INT 3
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 1
15511: NEG
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15538: LD_ADDR_VAR 0 12
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: LD_INT 1
15558: NEG
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 0
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 0
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 1
15596: NEG
15597: PUSH
15598: LD_INT 0
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 1
15607: NEG
15608: PUSH
15609: LD_INT 1
15611: NEG
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: LD_INT 0
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 2
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 1
15650: NEG
15651: PUSH
15652: LD_INT 1
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 2
15661: NEG
15662: PUSH
15663: LD_INT 0
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 2
15672: NEG
15673: PUSH
15674: LD_INT 1
15676: NEG
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 2
15684: NEG
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 3
15695: NEG
15696: PUSH
15697: LD_INT 0
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 3
15706: NEG
15707: PUSH
15708: LD_INT 1
15710: NEG
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15734: LD_ADDR_VAR 0 13
15738: PUSH
15739: LD_INT 0
15741: PUSH
15742: LD_INT 0
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 0
15751: PUSH
15752: LD_INT 1
15754: NEG
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: LD_INT 0
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 1
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 1
15792: NEG
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 1
15803: NEG
15804: PUSH
15805: LD_INT 1
15807: NEG
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 1
15815: NEG
15816: PUSH
15817: LD_INT 2
15819: NEG
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 2
15837: PUSH
15838: LD_INT 2
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 2
15857: NEG
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 2
15869: NEG
15870: PUSH
15871: LD_INT 2
15873: NEG
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 2
15881: NEG
15882: PUSH
15883: LD_INT 3
15885: NEG
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 3
15893: NEG
15894: PUSH
15895: LD_INT 2
15897: NEG
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 3
15905: NEG
15906: PUSH
15907: LD_INT 3
15909: NEG
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15933: LD_ADDR_VAR 0 14
15937: PUSH
15938: LD_INT 0
15940: PUSH
15941: LD_INT 0
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 0
15950: PUSH
15951: LD_INT 1
15953: NEG
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 0
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: NEG
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 1
16002: NEG
16003: PUSH
16004: LD_INT 1
16006: NEG
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 1
16014: NEG
16015: PUSH
16016: LD_INT 2
16018: NEG
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: LD_INT 2
16029: NEG
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: LD_INT 2
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 1
16068: NEG
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: NEG
16080: PUSH
16081: LD_INT 3
16083: NEG
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: LD_INT 3
16094: NEG
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: LD_INT 2
16105: NEG
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16129: LD_ADDR_VAR 0 15
16133: PUSH
16134: LD_INT 0
16136: PUSH
16137: LD_INT 0
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: LD_INT 1
16149: NEG
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 1
16187: NEG
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 1
16198: NEG
16199: PUSH
16200: LD_INT 1
16202: NEG
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: LD_INT 1
16213: NEG
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: NEG
16253: PUSH
16254: LD_INT 0
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 2
16263: NEG
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: LD_INT 1
16278: NEG
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 3
16286: PUSH
16287: LD_INT 0
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16322: LD_ADDR_VAR 0 16
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: LD_INT 1
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: NEG
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 1
16391: NEG
16392: PUSH
16393: LD_INT 1
16395: NEG
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: NEG
16404: PUSH
16405: LD_INT 2
16407: NEG
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: LD_INT 1
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 2
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 1
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 2
16445: NEG
16446: PUSH
16447: LD_INT 1
16449: NEG
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 2
16457: NEG
16458: PUSH
16459: LD_INT 2
16461: NEG
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 3
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 3
16479: PUSH
16480: LD_INT 3
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16515: LD_ADDR_VAR 0 17
16519: PUSH
16520: LD_INT 0
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: LD_INT 1
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 0
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: NEG
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 1
16584: NEG
16585: PUSH
16586: LD_INT 1
16588: NEG
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 1
16596: NEG
16597: PUSH
16598: LD_INT 2
16600: NEG
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: LD_INT 2
16611: NEG
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 0
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 2
16650: PUSH
16651: LD_INT 2
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: LD_INT 2
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: NEG
16692: PUSH
16693: LD_INT 0
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 2
16702: NEG
16703: PUSH
16704: LD_INT 1
16706: NEG
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 2
16714: NEG
16715: PUSH
16716: LD_INT 2
16718: NEG
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16745: LD_ADDR_VAR 0 18
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 0
16762: PUSH
16763: LD_INT 1
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 0
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: NEG
16804: PUSH
16805: LD_INT 0
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 1
16814: NEG
16815: PUSH
16816: LD_INT 1
16818: NEG
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 1
16826: NEG
16827: PUSH
16828: LD_INT 2
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: LD_INT 2
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: LD_INT 1
16852: NEG
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 0
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 2
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 1
16890: PUSH
16891: LD_INT 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 0
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 1
16910: NEG
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 2
16921: NEG
16922: PUSH
16923: LD_INT 0
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 2
16932: NEG
16933: PUSH
16934: LD_INT 1
16936: NEG
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 2
16944: NEG
16945: PUSH
16946: LD_INT 2
16948: NEG
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16975: LD_ADDR_VAR 0 19
16979: PUSH
16980: LD_INT 0
16982: PUSH
16983: LD_INT 0
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: LD_INT 1
16995: NEG
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: NEG
17034: PUSH
17035: LD_INT 0
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 1
17044: NEG
17045: PUSH
17046: LD_INT 1
17048: NEG
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 1
17056: NEG
17057: PUSH
17058: LD_INT 2
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: LD_INT 2
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: LD_INT 1
17082: NEG
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 2
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: LD_INT 2
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: LD_INT 1
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: NEG
17175: PUSH
17176: LD_INT 2
17178: NEG
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17205: LD_ADDR_VAR 0 20
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: LD_INT 0
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: LD_INT 1
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 0
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: LD_INT 1
17278: NEG
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: NEG
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: LD_INT 2
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 2
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 2
17392: NEG
17393: PUSH
17394: LD_INT 1
17396: NEG
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 2
17404: NEG
17405: PUSH
17406: LD_INT 2
17408: NEG
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17435: LD_ADDR_VAR 0 21
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: LD_INT 0
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: LD_INT 1
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 1
17504: NEG
17505: PUSH
17506: LD_INT 1
17508: NEG
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: NEG
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: LD_INT 2
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 2
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 0
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: NEG
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: LD_INT 1
17626: NEG
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: LD_INT 2
17638: NEG
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17665: LD_ADDR_VAR 0 22
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: LD_INT 0
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: LD_INT 1
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: LD_INT 0
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 1
17734: NEG
17735: PUSH
17736: LD_INT 1
17738: NEG
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: NEG
17747: PUSH
17748: LD_INT 2
17750: NEG
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 0
17758: PUSH
17759: LD_INT 2
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 2
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: LD_INT 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 1
17830: NEG
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: NEG
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 2
17852: NEG
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 2
17864: NEG
17865: PUSH
17866: LD_INT 2
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17895: LD_ADDR_VAR 0 23
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 1
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 1
17964: NEG
17965: PUSH
17966: LD_INT 1
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: NEG
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 2
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 2
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: PUSH
18041: LD_INT 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: NEG
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 2
18082: NEG
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: NEG
18095: PUSH
18096: LD_INT 2
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: NEG
18107: PUSH
18108: LD_INT 3
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: LD_INT 3
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 2
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18175: LD_ADDR_VAR 0 24
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 0
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: LD_INT 1
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 1
18256: NEG
18257: PUSH
18258: LD_INT 2
18260: NEG
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: LD_INT 2
18271: NEG
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: NEG
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 2
18362: NEG
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 2
18374: NEG
18375: PUSH
18376: LD_INT 2
18378: NEG
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: LD_INT 2
18389: NEG
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: LD_INT 1
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 3
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 3
18418: PUSH
18419: LD_INT 2
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18451: LD_ADDR_VAR 0 25
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: NEG
18521: PUSH
18522: LD_INT 1
18524: NEG
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: NEG
18533: PUSH
18534: LD_INT 2
18536: NEG
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: LD_INT 2
18547: NEG
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 0
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 1
18616: NEG
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 2
18638: NEG
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: LD_INT 2
18654: NEG
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 3
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: LD_INT 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 1
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18725: LD_ADDR_VAR 0 26
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 1
18783: NEG
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: LD_INT 2
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: LD_INT 2
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: NEG
18925: PUSH
18926: LD_INT 2
18928: NEG
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: LD_INT 3
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 3
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: LD_INT 2
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: NEG
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19001: LD_ADDR_VAR 0 27
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: LD_INT 1
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: LD_INT 2
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 2
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 2
19177: NEG
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 2
19200: NEG
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 3
19234: NEG
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 3
19246: NEG
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19281: LD_ADDR_VAR 0 28
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 0
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: NEG
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: LD_INT 2
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: NEG
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: NEG
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: NEG
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: LD_INT 3
19496: NEG
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: LD_INT 3
19508: NEG
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 3
19516: NEG
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 3
19528: NEG
19529: PUSH
19530: LD_INT 2
19532: NEG
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19563: LD_ADDR_VAR 0 29
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 2
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: LD_INT 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: LD_INT 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 2
19729: NEG
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 2
19741: NEG
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: LD_INT 3
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 1
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 3
19807: NEG
19808: PUSH
19809: LD_INT 2
19811: NEG
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19842: LD_ADDR_VAR 0 30
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 2
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: LD_INT 1
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: NEG
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 1
20031: NEG
20032: PUSH
20033: LD_INT 3
20035: NEG
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: LD_INT 2
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 3
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 3
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 2
20074: NEG
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 3
20085: NEG
20086: PUSH
20087: LD_INT 1
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20120: LD_ADDR_VAR 0 31
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 0
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: PUSH
20180: LD_INT 0
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: NEG
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: NEG
20298: PUSH
20299: LD_INT 2
20301: NEG
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: NEG
20310: PUSH
20311: LD_INT 3
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 3
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: LD_INT 3
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 3
20363: NEG
20364: PUSH
20365: LD_INT 2
20367: NEG
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20398: LD_ADDR_VAR 0 32
20402: PUSH
20403: LD_INT 0
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: LD_INT 1
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: NEG
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: LD_INT 2
20483: NEG
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: LD_INT 2
20494: NEG
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: LD_INT 2
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: LD_INT 2
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 3
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 3
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 3
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 2
20630: NEG
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 3
20641: NEG
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20676: LD_ADDR_VAR 0 33
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 0
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: NEG
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 2
20842: NEG
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: LD_INT 2
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 2
20866: NEG
20867: PUSH
20868: LD_INT 3
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: LD_INT 1
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: LD_INT 3
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 3
20920: NEG
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20955: LD_ADDR_VAR 0 34
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: NEG
21135: PUSH
21136: LD_INT 2
21138: NEG
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: LD_INT 3
21150: NEG
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 3
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21235: LD_ADDR_VAR 0 35
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 2
21326: NEG
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21347: LD_ADDR_VAR 0 36
21351: PUSH
21352: LD_INT 0
21354: PUSH
21355: LD_INT 0
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: LD_INT 1
21367: NEG
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 1
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: LD_INT 2
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21459: LD_ADDR_VAR 0 37
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 1
21551: NEG
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21571: LD_ADDR_VAR 0 38
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: LD_INT 0
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 1
21640: NEG
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21683: LD_ADDR_VAR 0 39
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21795: LD_ADDR_VAR 0 40
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 0
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21907: LD_ADDR_VAR 0 41
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 1
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: NEG
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 2
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 0
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: LD_INT 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: NEG
22086: PUSH
22087: LD_INT 2
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 3
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 3
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 3
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 3
22181: NEG
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 3
22192: NEG
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 3
22204: NEG
22205: PUSH
22206: LD_INT 2
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 3
22216: NEG
22217: PUSH
22218: LD_INT 3
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22257: LD_ADDR_VAR 0 42
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: LD_INT 2
22342: NEG
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 2
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: NEG
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: LD_INT 3
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: LD_INT 3
22463: NEG
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 3
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 3
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 3
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: LD_INT 3
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 3
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: LD_INT 3
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 3
22554: NEG
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 3
22566: NEG
22567: PUSH
22568: LD_INT 3
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22607: LD_ADDR_VAR 0 43
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: NEG
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: NEG
22677: PUSH
22678: LD_INT 1
22680: NEG
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: LD_INT 0
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: LD_INT 2
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 2
22773: NEG
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: LD_INT 1
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 3
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: LD_INT 3
22811: NEG
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: LD_INT 2
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 2
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 3
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 3
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 0
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: NEG
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 3
22903: NEG
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 3
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22955: LD_ADDR_VAR 0 44
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: LD_INT 0
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: LD_INT 2
23040: NEG
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 2
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: NEG
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 2
23121: NEG
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: LD_INT 2
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: LD_INT 3
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 2
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 3
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 3
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 3
23229: NEG
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 3
23240: NEG
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 3
23252: NEG
23253: PUSH
23254: LD_INT 2
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: LD_INT 3
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23305: LD_ADDR_VAR 0 45
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 2
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 3
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: LD_INT 3
23511: NEG
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 3
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 3
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 3
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 3
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 3
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 3
23602: NEG
23603: PUSH
23604: LD_INT 2
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 3
23614: NEG
23615: PUSH
23616: LD_INT 3
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23655: LD_ADDR_VAR 0 46
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: LD_INT 2
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 2
23751: NEG
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: NEG
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 3
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: LD_INT 3
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 2
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 3
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 3
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 3
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 2
23940: NEG
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 3
23951: NEG
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 3
23962: NEG
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24003: LD_ADDR_VAR 0 47
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: LD_INT 2
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: NEG
24131: PUSH
24132: LD_INT 2
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24154: LD_ADDR_VAR 0 48
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 2
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24301: LD_ADDR_VAR 0 49
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24445: LD_ADDR_VAR 0 50
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24589: LD_ADDR_VAR 0 51
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24736: LD_ADDR_VAR 0 52
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 2
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: NEG
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24887: LD_ADDR_VAR 0 53
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: LD_INT 2
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: LD_INT 2
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 2
25074: NEG
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: LD_INT 2
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25117: LD_ADDR_VAR 0 54
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 2
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 2
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25347: LD_ADDR_VAR 0 55
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: LD_INT 2
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: LD_INT 2
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25577: LD_ADDR_VAR 0 56
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25807: LD_ADDR_VAR 0 57
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: NEG
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 2
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 2
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 2
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 2
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: LD_INT 2
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26037: LD_ADDR_VAR 0 58
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 2
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 2
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 2
26224: NEG
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26267: LD_ADDR_VAR 0 59
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26355: LD_ADDR_VAR 0 60
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26443: LD_ADDR_VAR 0 61
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: LD_INT 1
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26531: LD_ADDR_VAR 0 62
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26619: LD_ADDR_VAR 0 63
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26707: LD_ADDR_VAR 0 64
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: ST_TO_ADDR
// end ; 1 :
26795: GO 32692
26797: LD_INT 1
26799: DOUBLE
26800: EQUAL
26801: IFTRUE 26805
26803: GO 29428
26805: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26806: LD_ADDR_VAR 0 11
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 3
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26850: LD_ADDR_VAR 0 12
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26891: LD_ADDR_VAR 0 13
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 3
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26931: LD_ADDR_VAR 0 14
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26972: LD_ADDR_VAR 0 15
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 3
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 3
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27016: LD_ADDR_VAR 0 16
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 3
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 3
27035: NEG
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: LD_INT 3
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27062: LD_ADDR_VAR 0 17
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 3
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 3
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27106: LD_ADDR_VAR 0 18
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 3
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27147: LD_ADDR_VAR 0 19
27151: PUSH
27152: LD_INT 3
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 3
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27187: LD_ADDR_VAR 0 20
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27228: LD_ADDR_VAR 0 21
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 3
27246: NEG
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 3
27257: NEG
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27272: LD_ADDR_VAR 0 22
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: LD_INT 3
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 3
27291: NEG
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 3
27303: NEG
27304: PUSH
27305: LD_INT 3
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27318: LD_ADDR_VAR 0 23
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 3
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 4
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 3
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27362: LD_ADDR_VAR 0 24
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 3
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 4
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27403: LD_ADDR_VAR 0 25
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: LD_INT 3
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 4
27420: PUSH
27421: LD_INT 3
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 3
27430: PUSH
27431: LD_INT 4
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27443: LD_ADDR_VAR 0 26
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 3
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 4
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: LD_INT 3
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27484: LD_ADDR_VAR 0 27
27488: PUSH
27489: LD_INT 3
27491: NEG
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 3
27502: NEG
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 4
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27528: LD_ADDR_VAR 0 28
27532: PUSH
27533: LD_INT 3
27535: NEG
27536: PUSH
27537: LD_INT 3
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: LD_INT 4
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 4
27559: NEG
27560: PUSH
27561: LD_INT 3
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27574: LD_ADDR_VAR 0 29
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 3
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: LD_INT 3
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 4
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: LD_INT 4
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 3
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: LD_INT 5
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 5
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: LD_INT 4
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 6
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 6
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 5
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27729: LD_ADDR_VAR 0 30
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 3
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 3
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 4
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 4
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 4
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 5
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 5
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 5
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 6
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 6
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27872: LD_ADDR_VAR 0 31
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: LD_INT 3
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: LD_INT 3
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 4
27909: PUSH
27910: LD_INT 3
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 4
27919: PUSH
27920: LD_INT 4
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 3
27929: PUSH
27930: LD_INT 4
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 5
27939: PUSH
27940: LD_INT 4
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 5
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 4
27959: PUSH
27960: LD_INT 5
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 6
27969: PUSH
27970: LD_INT 5
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 6
27979: PUSH
27980: LD_INT 6
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 5
27989: PUSH
27990: LD_INT 6
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28011: LD_ADDR_VAR 0 32
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 4
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 4
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: LD_INT 5
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 5
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: LD_INT 4
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 6
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 6
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 5
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28154: LD_ADDR_VAR 0 33
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 3
28172: NEG
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 3
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 3
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 4
28206: NEG
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 4
28217: NEG
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 4
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 5
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 5
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 5
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 6
28274: NEG
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 6
28285: NEG
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28309: LD_ADDR_VAR 0 34
28313: PUSH
28314: LD_INT 2
28316: NEG
28317: PUSH
28318: LD_INT 3
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 3
28328: NEG
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: NEG
28341: PUSH
28342: LD_INT 3
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 3
28352: NEG
28353: PUSH
28354: LD_INT 4
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 4
28364: NEG
28365: PUSH
28366: LD_INT 3
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 4
28376: NEG
28377: PUSH
28378: LD_INT 4
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 4
28388: NEG
28389: PUSH
28390: LD_INT 5
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 5
28400: NEG
28401: PUSH
28402: LD_INT 4
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 5
28412: NEG
28413: PUSH
28414: LD_INT 5
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 5
28424: NEG
28425: PUSH
28426: LD_INT 6
28428: NEG
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 6
28436: NEG
28437: PUSH
28438: LD_INT 5
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 6
28448: NEG
28449: PUSH
28450: LD_INT 6
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28472: LD_ADDR_VAR 0 41
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28516: LD_ADDR_VAR 0 42
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 3
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28557: LD_ADDR_VAR 0 43
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 3
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: LD_INT 3
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: LIST
28596: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28597: LD_ADDR_VAR 0 44
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: LD_INT 3
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28638: LD_ADDR_VAR 0 45
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 3
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28682: LD_ADDR_VAR 0 46
28686: PUSH
28687: LD_INT 2
28689: NEG
28690: PUSH
28691: LD_INT 2
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: LD_INT 3
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28728: LD_ADDR_VAR 0 47
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 3
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28761: LD_ADDR_VAR 0 48
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 2
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28792: LD_ADDR_VAR 0 49
28796: PUSH
28797: LD_INT 3
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 3
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28821: LD_ADDR_VAR 0 50
28825: PUSH
28826: LD_INT 2
28828: PUSH
28829: LD_INT 3
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 3
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28850: LD_ADDR_VAR 0 51
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 2
28868: NEG
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28881: LD_ADDR_VAR 0 52
28885: PUSH
28886: LD_INT 3
28888: NEG
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 3
28900: NEG
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28914: LD_ADDR_VAR 0 53
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 3
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: LD_INT 3
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28958: LD_ADDR_VAR 0 54
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 3
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28999: LD_ADDR_VAR 0 55
29003: PUSH
29004: LD_INT 3
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: LD_INT 3
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29039: LD_ADDR_VAR 0 56
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: LD_INT 3
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: LIST
29079: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29080: LD_ADDR_VAR 0 57
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 3
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29124: LD_ADDR_VAR 0 58
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: LD_INT 3
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 3
29143: NEG
29144: PUSH
29145: LD_INT 2
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: LD_INT 3
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29170: LD_ADDR_VAR 0 59
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 2
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29214: LD_ADDR_VAR 0 60
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 1
29224: NEG
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29255: LD_ADDR_VAR 0 61
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29295: LD_ADDR_VAR 0 62
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29336: LD_ADDR_VAR 0 63
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 2
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29380: LD_ADDR_VAR 0 64
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// end ; 2 :
29426: GO 32692
29428: LD_INT 2
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 32691
29436: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29437: LD_ADDR_VAR 0 29
29441: PUSH
29442: LD_INT 4
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 4
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 5
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 5
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 4
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 5
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 4
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 4
29567: PUSH
29568: LD_INT 4
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: LD_INT 4
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: LD_INT 3
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 4
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 4
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 4
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 4
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: LD_INT 5
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: LD_INT 5
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: LD_INT 4
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: LD_INT 5
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 2
29709: NEG
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 3
29731: NEG
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 4
29776: NEG
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 4
29787: NEG
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 4
29799: NEG
29800: PUSH
29801: LD_INT 2
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: LD_INT 2
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 4
29822: NEG
29823: PUSH
29824: LD_INT 4
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 4
29834: NEG
29835: PUSH
29836: LD_INT 5
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: LD_INT 4
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 4
29870: NEG
29871: PUSH
29872: LD_INT 3
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 5
29882: NEG
29883: PUSH
29884: LD_INT 4
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 5
29894: NEG
29895: PUSH
29896: LD_INT 5
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 3
29906: NEG
29907: PUSH
29908: LD_INT 5
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 5
29918: NEG
29919: PUSH
29920: LD_INT 3
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29975: LD_ADDR_VAR 0 30
29979: PUSH
29980: LD_INT 4
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 4
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 5
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 5
30012: PUSH
30013: LD_INT 5
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 4
30022: PUSH
30023: LD_INT 5
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 3
30032: PUSH
30033: LD_INT 4
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 3
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 5
30052: PUSH
30053: LD_INT 3
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 5
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: LD_INT 4
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 0
30112: PUSH
30113: LD_INT 4
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 3
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 2
30144: PUSH
30145: LD_INT 4
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 4
30165: NEG
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 4
30176: NEG
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 3
30188: NEG
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 4
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 5
30221: NEG
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 5
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 5
30244: NEG
30245: PUSH
30246: LD_INT 2
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 3
30256: NEG
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 3
30267: NEG
30268: PUSH
30269: LD_INT 3
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 3
30279: NEG
30280: PUSH
30281: LD_INT 4
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: LD_INT 3
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 2
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 4
30327: NEG
30328: PUSH
30329: LD_INT 3
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 4
30339: NEG
30340: PUSH
30341: LD_INT 4
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 2
30351: NEG
30352: PUSH
30353: LD_INT 4
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 4
30363: NEG
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 4
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: LD_INT 5
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 4
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: LD_INT 4
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 5
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 3
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: NEG
30466: PUSH
30467: LD_INT 5
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30522: LD_ADDR_VAR 0 31
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 4
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 4
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 5
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 5
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: LD_INT 4
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: LD_INT 5
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: NEG
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 3
30633: NEG
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: NEG
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 4
30678: NEG
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 4
30689: NEG
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 4
30701: NEG
30702: PUSH
30703: LD_INT 2
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: LD_INT 4
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 4
30736: NEG
30737: PUSH
30738: LD_INT 5
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: NEG
30749: PUSH
30750: LD_INT 4
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 3
30760: NEG
30761: PUSH
30762: LD_INT 3
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 4
30772: NEG
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 5
30784: NEG
30785: PUSH
30786: LD_INT 4
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 5
30796: NEG
30797: PUSH
30798: LD_INT 5
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 3
30808: NEG
30809: PUSH
30810: LD_INT 5
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 5
30820: NEG
30821: PUSH
30822: LD_INT 3
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: LD_INT 3
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: LD_INT 3
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: LD_INT 4
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 2
30922: NEG
30923: PUSH
30924: LD_INT 4
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 4
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 5
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 5
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 4
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 5
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31072: LD_ADDR_VAR 0 32
31076: PUSH
31077: LD_INT 4
31079: NEG
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 4
31090: NEG
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 3
31113: NEG
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 4
31124: NEG
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 5
31135: NEG
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 5
31146: NEG
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 5
31158: NEG
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 3
31170: NEG
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: NEG
31182: PUSH
31183: LD_INT 3
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: LD_INT 4
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: LD_INT 3
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 4
31241: NEG
31242: PUSH
31243: LD_INT 3
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 4
31253: NEG
31254: PUSH
31255: LD_INT 4
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 4
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 4
31277: NEG
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 4
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 5
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: LD_INT 4
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 4
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 5
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 3
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 5
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 3
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 4
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 4
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 4
31484: PUSH
31485: LD_INT 4
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 4
31494: PUSH
31495: LD_INT 3
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 5
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 5
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 4
31524: PUSH
31525: LD_INT 5
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: LD_INT 4
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 3
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 5
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: LD_INT 5
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31619: LD_ADDR_VAR 0 33
31623: PUSH
31624: LD_INT 4
31626: NEG
31627: PUSH
31628: LD_INT 4
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 4
31638: NEG
31639: PUSH
31640: LD_INT 5
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: LD_INT 4
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 3
31662: NEG
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 4
31674: NEG
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 5
31686: NEG
31687: PUSH
31688: LD_INT 4
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 5
31698: NEG
31699: PUSH
31700: LD_INT 5
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 3
31710: NEG
31711: PUSH
31712: LD_INT 5
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: LD_INT 3
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 4
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 3
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 4
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: LD_INT 4
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 4
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 4
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 5
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 5
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 4
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 3
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 5
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: PUSH
31930: LD_INT 3
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 3
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 4
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 4
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 3
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 4
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 4
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 4
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 5
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 5
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 5
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32157: LD_ADDR_VAR 0 34
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 5
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 3
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: LD_INT 4
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 5
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 3
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: LD_INT 5
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 3
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 4
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 3
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 4
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: PUSH
32360: LD_INT 4
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 4
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 5
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 5
32389: PUSH
32390: LD_INT 5
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 4
32399: PUSH
32400: LD_INT 5
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 3
32409: PUSH
32410: LD_INT 4
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 5
32429: PUSH
32430: LD_INT 3
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 5
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 4
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 4
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 4
32542: NEG
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 4
32553: NEG
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 3
32565: NEG
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: NEG
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 4
32587: NEG
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 5
32598: NEG
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 5
32609: NEG
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 5
32621: NEG
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// end ; end ;
32689: GO 32692
32691: POP
// case btype of b_depot , b_warehouse :
32692: LD_VAR 0 1
32696: PUSH
32697: LD_INT 0
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32711
32703: LD_INT 1
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32912
32711: POP
// case nation of nation_american :
32712: LD_VAR 0 5
32716: PUSH
32717: LD_INT 1
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32781
32725: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32726: LD_ADDR_VAR 0 9
32730: PUSH
32731: LD_VAR 0 11
32735: PUSH
32736: LD_VAR 0 12
32740: PUSH
32741: LD_VAR 0 13
32745: PUSH
32746: LD_VAR 0 14
32750: PUSH
32751: LD_VAR 0 15
32755: PUSH
32756: LD_VAR 0 16
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: PUSH
32769: LD_VAR 0 4
32773: PUSH
32774: LD_INT 1
32776: PLUS
32777: ARRAY
32778: ST_TO_ADDR
32779: GO 32910
32781: LD_INT 2
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32789
32787: GO 32845
32789: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32790: LD_ADDR_VAR 0 9
32794: PUSH
32795: LD_VAR 0 17
32799: PUSH
32800: LD_VAR 0 18
32804: PUSH
32805: LD_VAR 0 19
32809: PUSH
32810: LD_VAR 0 20
32814: PUSH
32815: LD_VAR 0 21
32819: PUSH
32820: LD_VAR 0 22
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: PUSH
32833: LD_VAR 0 4
32837: PUSH
32838: LD_INT 1
32840: PLUS
32841: ARRAY
32842: ST_TO_ADDR
32843: GO 32910
32845: LD_INT 3
32847: DOUBLE
32848: EQUAL
32849: IFTRUE 32853
32851: GO 32909
32853: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32854: LD_ADDR_VAR 0 9
32858: PUSH
32859: LD_VAR 0 23
32863: PUSH
32864: LD_VAR 0 24
32868: PUSH
32869: LD_VAR 0 25
32873: PUSH
32874: LD_VAR 0 26
32878: PUSH
32879: LD_VAR 0 27
32883: PUSH
32884: LD_VAR 0 28
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: PUSH
32897: LD_VAR 0 4
32901: PUSH
32902: LD_INT 1
32904: PLUS
32905: ARRAY
32906: ST_TO_ADDR
32907: GO 32910
32909: POP
32910: GO 33465
32912: LD_INT 2
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32926
32918: LD_INT 3
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32982
32926: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32927: LD_ADDR_VAR 0 9
32931: PUSH
32932: LD_VAR 0 29
32936: PUSH
32937: LD_VAR 0 30
32941: PUSH
32942: LD_VAR 0 31
32946: PUSH
32947: LD_VAR 0 32
32951: PUSH
32952: LD_VAR 0 33
32956: PUSH
32957: LD_VAR 0 34
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: PUSH
32970: LD_VAR 0 4
32974: PUSH
32975: LD_INT 1
32977: PLUS
32978: ARRAY
32979: ST_TO_ADDR
32980: GO 33465
32982: LD_INT 16
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 33044
32988: LD_INT 17
32990: DOUBLE
32991: EQUAL
32992: IFTRUE 33044
32994: LD_INT 18
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33044
33000: LD_INT 19
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33044
33006: LD_INT 22
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33044
33012: LD_INT 20
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33044
33018: LD_INT 21
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33044
33024: LD_INT 23
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33044
33030: LD_INT 24
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33044
33036: LD_INT 25
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33100
33044: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33045: LD_ADDR_VAR 0 9
33049: PUSH
33050: LD_VAR 0 35
33054: PUSH
33055: LD_VAR 0 36
33059: PUSH
33060: LD_VAR 0 37
33064: PUSH
33065: LD_VAR 0 38
33069: PUSH
33070: LD_VAR 0 39
33074: PUSH
33075: LD_VAR 0 40
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: PUSH
33088: LD_VAR 0 4
33092: PUSH
33093: LD_INT 1
33095: PLUS
33096: ARRAY
33097: ST_TO_ADDR
33098: GO 33465
33100: LD_INT 6
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33156
33106: LD_INT 7
33108: DOUBLE
33109: EQUAL
33110: IFTRUE 33156
33112: LD_INT 8
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33156
33118: LD_INT 13
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33156
33124: LD_INT 12
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33156
33130: LD_INT 15
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33156
33136: LD_INT 11
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33156
33142: LD_INT 14
33144: DOUBLE
33145: EQUAL
33146: IFTRUE 33156
33148: LD_INT 10
33150: DOUBLE
33151: EQUAL
33152: IFTRUE 33156
33154: GO 33212
33156: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33157: LD_ADDR_VAR 0 9
33161: PUSH
33162: LD_VAR 0 41
33166: PUSH
33167: LD_VAR 0 42
33171: PUSH
33172: LD_VAR 0 43
33176: PUSH
33177: LD_VAR 0 44
33181: PUSH
33182: LD_VAR 0 45
33186: PUSH
33187: LD_VAR 0 46
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: PUSH
33200: LD_VAR 0 4
33204: PUSH
33205: LD_INT 1
33207: PLUS
33208: ARRAY
33209: ST_TO_ADDR
33210: GO 33465
33212: LD_INT 36
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33276
33220: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33221: LD_ADDR_VAR 0 9
33225: PUSH
33226: LD_VAR 0 47
33230: PUSH
33231: LD_VAR 0 48
33235: PUSH
33236: LD_VAR 0 49
33240: PUSH
33241: LD_VAR 0 50
33245: PUSH
33246: LD_VAR 0 51
33250: PUSH
33251: LD_VAR 0 52
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: PUSH
33264: LD_VAR 0 4
33268: PUSH
33269: LD_INT 1
33271: PLUS
33272: ARRAY
33273: ST_TO_ADDR
33274: GO 33465
33276: LD_INT 4
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33302
33282: LD_INT 5
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33302
33288: LD_INT 34
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33302
33294: LD_INT 37
33296: DOUBLE
33297: EQUAL
33298: IFTRUE 33302
33300: GO 33358
33302: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33303: LD_ADDR_VAR 0 9
33307: PUSH
33308: LD_VAR 0 53
33312: PUSH
33313: LD_VAR 0 54
33317: PUSH
33318: LD_VAR 0 55
33322: PUSH
33323: LD_VAR 0 56
33327: PUSH
33328: LD_VAR 0 57
33332: PUSH
33333: LD_VAR 0 58
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: PUSH
33346: LD_VAR 0 4
33350: PUSH
33351: LD_INT 1
33353: PLUS
33354: ARRAY
33355: ST_TO_ADDR
33356: GO 33465
33358: LD_INT 31
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33408
33364: LD_INT 32
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33408
33370: LD_INT 33
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33408
33376: LD_INT 27
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33408
33382: LD_INT 26
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33408
33388: LD_INT 28
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33408
33394: LD_INT 29
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33408
33400: LD_INT 30
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33464
33408: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33409: LD_ADDR_VAR 0 9
33413: PUSH
33414: LD_VAR 0 59
33418: PUSH
33419: LD_VAR 0 60
33423: PUSH
33424: LD_VAR 0 61
33428: PUSH
33429: LD_VAR 0 62
33433: PUSH
33434: LD_VAR 0 63
33438: PUSH
33439: LD_VAR 0 64
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: PUSH
33452: LD_VAR 0 4
33456: PUSH
33457: LD_INT 1
33459: PLUS
33460: ARRAY
33461: ST_TO_ADDR
33462: GO 33465
33464: POP
// temp_list2 = [ ] ;
33465: LD_ADDR_VAR 0 10
33469: PUSH
33470: EMPTY
33471: ST_TO_ADDR
// for i in temp_list do
33472: LD_ADDR_VAR 0 8
33476: PUSH
33477: LD_VAR 0 9
33481: PUSH
33482: FOR_IN
33483: IFFALSE 33535
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33485: LD_ADDR_VAR 0 10
33489: PUSH
33490: LD_VAR 0 10
33494: PUSH
33495: LD_VAR 0 8
33499: PUSH
33500: LD_INT 1
33502: ARRAY
33503: PUSH
33504: LD_VAR 0 2
33508: PLUS
33509: PUSH
33510: LD_VAR 0 8
33514: PUSH
33515: LD_INT 2
33517: ARRAY
33518: PUSH
33519: LD_VAR 0 3
33523: PLUS
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: EMPTY
33530: LIST
33531: ADD
33532: ST_TO_ADDR
33533: GO 33482
33535: POP
33536: POP
// result = temp_list2 ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 10
33546: ST_TO_ADDR
// end ;
33547: LD_VAR 0 7
33551: RET
// export function EnemyInRange ( unit , dist ) ; begin
33552: LD_INT 0
33554: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: LD_VAR 0 1
33564: PPUSH
33565: CALL_OW 255
33569: PPUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 250
33579: PPUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 251
33589: PPUSH
33590: LD_VAR 0 2
33594: PPUSH
33595: CALL 6954 0 4
33599: PUSH
33600: LD_INT 4
33602: ARRAY
33603: ST_TO_ADDR
// end ;
33604: LD_VAR 0 3
33608: RET
// export function PlayerSeeMe ( unit ) ; begin
33609: LD_INT 0
33611: PPUSH
// result := See ( your_side , unit ) ;
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: LD_OWVAR 2
33621: PPUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 292
33631: ST_TO_ADDR
// end ;
33632: LD_VAR 0 2
33636: RET
// export function ReverseDir ( unit ) ; begin
33637: LD_INT 0
33639: PPUSH
// if not unit then
33640: LD_VAR 0 1
33644: NOT
33645: IFFALSE 33649
// exit ;
33647: GO 33672
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33649: LD_ADDR_VAR 0 2
33653: PUSH
33654: LD_VAR 0 1
33658: PPUSH
33659: CALL_OW 254
33663: PUSH
33664: LD_INT 3
33666: PLUS
33667: PUSH
33668: LD_INT 6
33670: MOD
33671: ST_TO_ADDR
// end ;
33672: LD_VAR 0 2
33676: RET
// export function ReverseArray ( array ) ; var i ; begin
33677: LD_INT 0
33679: PPUSH
33680: PPUSH
// if not array then
33681: LD_VAR 0 1
33685: NOT
33686: IFFALSE 33690
// exit ;
33688: GO 33745
// result := [ ] ;
33690: LD_ADDR_VAR 0 2
33694: PUSH
33695: EMPTY
33696: ST_TO_ADDR
// for i := array downto 1 do
33697: LD_ADDR_VAR 0 3
33701: PUSH
33702: DOUBLE
33703: LD_VAR 0 1
33707: INC
33708: ST_TO_ADDR
33709: LD_INT 1
33711: PUSH
33712: FOR_DOWNTO
33713: IFFALSE 33743
// result := Join ( result , array [ i ] ) ;
33715: LD_ADDR_VAR 0 2
33719: PUSH
33720: LD_VAR 0 2
33724: PPUSH
33725: LD_VAR 0 1
33729: PUSH
33730: LD_VAR 0 3
33734: ARRAY
33735: PPUSH
33736: CALL 38389 0 2
33740: ST_TO_ADDR
33741: GO 33712
33743: POP
33744: POP
// end ;
33745: LD_VAR 0 2
33749: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
33757: PPUSH
// if not unit or not hexes then
33758: LD_VAR 0 1
33762: NOT
33763: PUSH
33764: LD_VAR 0 2
33768: NOT
33769: OR
33770: IFFALSE 33774
// exit ;
33772: GO 33897
// dist := 9999 ;
33774: LD_ADDR_VAR 0 5
33778: PUSH
33779: LD_INT 9999
33781: ST_TO_ADDR
// for i = 1 to hexes do
33782: LD_ADDR_VAR 0 4
33786: PUSH
33787: DOUBLE
33788: LD_INT 1
33790: DEC
33791: ST_TO_ADDR
33792: LD_VAR 0 2
33796: PUSH
33797: FOR_TO
33798: IFFALSE 33885
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33800: LD_ADDR_VAR 0 6
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: LD_VAR 0 2
33814: PUSH
33815: LD_VAR 0 4
33819: ARRAY
33820: PUSH
33821: LD_INT 1
33823: ARRAY
33824: PPUSH
33825: LD_VAR 0 2
33829: PUSH
33830: LD_VAR 0 4
33834: ARRAY
33835: PUSH
33836: LD_INT 2
33838: ARRAY
33839: PPUSH
33840: CALL_OW 297
33844: ST_TO_ADDR
// if tdist < dist then
33845: LD_VAR 0 6
33849: PUSH
33850: LD_VAR 0 5
33854: LESS
33855: IFFALSE 33883
// begin hex := hexes [ i ] ;
33857: LD_ADDR_VAR 0 8
33861: PUSH
33862: LD_VAR 0 2
33866: PUSH
33867: LD_VAR 0 4
33871: ARRAY
33872: ST_TO_ADDR
// dist := tdist ;
33873: LD_ADDR_VAR 0 5
33877: PUSH
33878: LD_VAR 0 6
33882: ST_TO_ADDR
// end ; end ;
33883: GO 33797
33885: POP
33886: POP
// result := hex ;
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_VAR 0 8
33896: ST_TO_ADDR
// end ;
33897: LD_VAR 0 3
33901: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33902: LD_INT 0
33904: PPUSH
33905: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33906: LD_VAR 0 1
33910: NOT
33911: PUSH
33912: LD_VAR 0 1
33916: PUSH
33917: LD_INT 21
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 23
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PPUSH
33941: CALL_OW 69
33945: IN
33946: NOT
33947: OR
33948: IFFALSE 33952
// exit ;
33950: GO 33999
// for i = 1 to 3 do
33952: LD_ADDR_VAR 0 3
33956: PUSH
33957: DOUBLE
33958: LD_INT 1
33960: DEC
33961: ST_TO_ADDR
33962: LD_INT 3
33964: PUSH
33965: FOR_TO
33966: IFFALSE 33997
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 250
33977: PPUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 251
33987: PPUSH
33988: LD_INT 1
33990: PPUSH
33991: CALL_OW 453
33995: GO 33965
33997: POP
33998: POP
// end ;
33999: LD_VAR 0 2
34003: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34004: LD_INT 0
34006: PPUSH
34007: PPUSH
34008: PPUSH
34009: PPUSH
34010: PPUSH
34011: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34012: LD_VAR 0 1
34016: NOT
34017: PUSH
34018: LD_VAR 0 2
34022: NOT
34023: OR
34024: PUSH
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL_OW 314
34034: OR
34035: IFFALSE 34039
// exit ;
34037: GO 34506
// if GetLives ( i ) < 250 then
34039: LD_VAR 0 4
34043: PPUSH
34044: CALL_OW 256
34048: PUSH
34049: LD_INT 250
34051: LESS
34052: IFFALSE 34065
// begin ComAutodestruct ( i ) ;
34054: LD_VAR 0 4
34058: PPUSH
34059: CALL 33902 0 1
// exit ;
34063: GO 34506
// end ; x := GetX ( enemy_unit ) ;
34065: LD_ADDR_VAR 0 7
34069: PUSH
34070: LD_VAR 0 2
34074: PPUSH
34075: CALL_OW 250
34079: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34080: LD_ADDR_VAR 0 8
34084: PUSH
34085: LD_VAR 0 2
34089: PPUSH
34090: CALL_OW 251
34094: ST_TO_ADDR
// if not x or not y then
34095: LD_VAR 0 7
34099: NOT
34100: PUSH
34101: LD_VAR 0 8
34105: NOT
34106: OR
34107: IFFALSE 34111
// exit ;
34109: GO 34506
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34111: LD_ADDR_VAR 0 6
34115: PUSH
34116: LD_VAR 0 7
34120: PPUSH
34121: LD_INT 0
34123: PPUSH
34124: LD_INT 4
34126: PPUSH
34127: CALL_OW 272
34131: PUSH
34132: LD_VAR 0 8
34136: PPUSH
34137: LD_INT 0
34139: PPUSH
34140: LD_INT 4
34142: PPUSH
34143: CALL_OW 273
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_VAR 0 7
34156: PPUSH
34157: LD_INT 1
34159: PPUSH
34160: LD_INT 4
34162: PPUSH
34163: CALL_OW 272
34167: PUSH
34168: LD_VAR 0 8
34172: PPUSH
34173: LD_INT 1
34175: PPUSH
34176: LD_INT 4
34178: PPUSH
34179: CALL_OW 273
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_VAR 0 7
34192: PPUSH
34193: LD_INT 2
34195: PPUSH
34196: LD_INT 4
34198: PPUSH
34199: CALL_OW 272
34203: PUSH
34204: LD_VAR 0 8
34208: PPUSH
34209: LD_INT 2
34211: PPUSH
34212: LD_INT 4
34214: PPUSH
34215: CALL_OW 273
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_VAR 0 7
34228: PPUSH
34229: LD_INT 3
34231: PPUSH
34232: LD_INT 4
34234: PPUSH
34235: CALL_OW 272
34239: PUSH
34240: LD_VAR 0 8
34244: PPUSH
34245: LD_INT 3
34247: PPUSH
34248: LD_INT 4
34250: PPUSH
34251: CALL_OW 273
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_VAR 0 7
34264: PPUSH
34265: LD_INT 4
34267: PPUSH
34268: LD_INT 4
34270: PPUSH
34271: CALL_OW 272
34275: PUSH
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_INT 4
34283: PPUSH
34284: LD_INT 4
34286: PPUSH
34287: CALL_OW 273
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_VAR 0 7
34300: PPUSH
34301: LD_INT 5
34303: PPUSH
34304: LD_INT 4
34306: PPUSH
34307: CALL_OW 272
34311: PUSH
34312: LD_VAR 0 8
34316: PPUSH
34317: LD_INT 5
34319: PPUSH
34320: LD_INT 4
34322: PPUSH
34323: CALL_OW 273
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: ST_TO_ADDR
// for i = tmp downto 1 do
34340: LD_ADDR_VAR 0 4
34344: PUSH
34345: DOUBLE
34346: LD_VAR 0 6
34350: INC
34351: ST_TO_ADDR
34352: LD_INT 1
34354: PUSH
34355: FOR_DOWNTO
34356: IFFALSE 34457
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34358: LD_VAR 0 6
34362: PUSH
34363: LD_VAR 0 4
34367: ARRAY
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PPUSH
34373: LD_VAR 0 6
34377: PUSH
34378: LD_VAR 0 4
34382: ARRAY
34383: PUSH
34384: LD_INT 2
34386: ARRAY
34387: PPUSH
34388: CALL_OW 488
34392: NOT
34393: PUSH
34394: LD_VAR 0 6
34398: PUSH
34399: LD_VAR 0 4
34403: ARRAY
34404: PUSH
34405: LD_INT 1
34407: ARRAY
34408: PPUSH
34409: LD_VAR 0 6
34413: PUSH
34414: LD_VAR 0 4
34418: ARRAY
34419: PUSH
34420: LD_INT 2
34422: ARRAY
34423: PPUSH
34424: CALL_OW 428
34428: PUSH
34429: LD_INT 0
34431: NONEQUAL
34432: OR
34433: IFFALSE 34455
// tmp := Delete ( tmp , i ) ;
34435: LD_ADDR_VAR 0 6
34439: PUSH
34440: LD_VAR 0 6
34444: PPUSH
34445: LD_VAR 0 4
34449: PPUSH
34450: CALL_OW 3
34454: ST_TO_ADDR
34455: GO 34355
34457: POP
34458: POP
// j := GetClosestHex ( unit , tmp ) ;
34459: LD_ADDR_VAR 0 5
34463: PUSH
34464: LD_VAR 0 1
34468: PPUSH
34469: LD_VAR 0 6
34473: PPUSH
34474: CALL 33750 0 2
34478: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34479: LD_VAR 0 1
34483: PPUSH
34484: LD_VAR 0 5
34488: PUSH
34489: LD_INT 1
34491: ARRAY
34492: PPUSH
34493: LD_VAR 0 5
34497: PUSH
34498: LD_INT 2
34500: ARRAY
34501: PPUSH
34502: CALL_OW 111
// end ;
34506: LD_VAR 0 3
34510: RET
// export function PrepareApemanSoldier ( ) ; begin
34511: LD_INT 0
34513: PPUSH
// uc_nation := 0 ;
34514: LD_ADDR_OWVAR 21
34518: PUSH
34519: LD_INT 0
34521: ST_TO_ADDR
// hc_sex := sex_male ;
34522: LD_ADDR_OWVAR 27
34526: PUSH
34527: LD_INT 1
34529: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34530: LD_ADDR_OWVAR 28
34534: PUSH
34535: LD_INT 15
34537: ST_TO_ADDR
// hc_gallery :=  ;
34538: LD_ADDR_OWVAR 33
34542: PUSH
34543: LD_STRING 
34545: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34546: LD_ADDR_OWVAR 31
34550: PUSH
34551: LD_INT 0
34553: PPUSH
34554: LD_INT 3
34556: PPUSH
34557: CALL_OW 12
34561: PUSH
34562: LD_INT 0
34564: PPUSH
34565: LD_INT 3
34567: PPUSH
34568: CALL_OW 12
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
// end ;
34585: LD_VAR 0 1
34589: RET
// export function PrepareApemanEngineer ( ) ; begin
34590: LD_INT 0
34592: PPUSH
// uc_nation := 0 ;
34593: LD_ADDR_OWVAR 21
34597: PUSH
34598: LD_INT 0
34600: ST_TO_ADDR
// hc_sex := sex_male ;
34601: LD_ADDR_OWVAR 27
34605: PUSH
34606: LD_INT 1
34608: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34609: LD_ADDR_OWVAR 28
34613: PUSH
34614: LD_INT 16
34616: ST_TO_ADDR
// hc_gallery :=  ;
34617: LD_ADDR_OWVAR 33
34621: PUSH
34622: LD_STRING 
34624: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34625: LD_ADDR_OWVAR 31
34629: PUSH
34630: LD_INT 0
34632: PPUSH
34633: LD_INT 3
34635: PPUSH
34636: CALL_OW 12
34640: PUSH
34641: LD_INT 0
34643: PPUSH
34644: LD_INT 3
34646: PPUSH
34647: CALL_OW 12
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
// end ;
34664: LD_VAR 0 1
34668: RET
// export function PrepareApeman ( agressivity ) ; begin
34669: LD_INT 0
34671: PPUSH
// uc_side := 0 ;
34672: LD_ADDR_OWVAR 20
34676: PUSH
34677: LD_INT 0
34679: ST_TO_ADDR
// uc_nation := 0 ;
34680: LD_ADDR_OWVAR 21
34684: PUSH
34685: LD_INT 0
34687: ST_TO_ADDR
// hc_sex := sex_male ;
34688: LD_ADDR_OWVAR 27
34692: PUSH
34693: LD_INT 1
34695: ST_TO_ADDR
// hc_class := class_apeman ;
34696: LD_ADDR_OWVAR 28
34700: PUSH
34701: LD_INT 12
34703: ST_TO_ADDR
// hc_gallery :=  ;
34704: LD_ADDR_OWVAR 33
34708: PUSH
34709: LD_STRING 
34711: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34712: LD_ADDR_OWVAR 35
34716: PUSH
34717: LD_VAR 0 1
34721: NEG
34722: PPUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 12
34732: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34733: LD_ADDR_OWVAR 31
34737: PUSH
34738: LD_INT 0
34740: PPUSH
34741: LD_INT 3
34743: PPUSH
34744: CALL_OW 12
34748: PUSH
34749: LD_INT 0
34751: PPUSH
34752: LD_INT 3
34754: PPUSH
34755: CALL_OW 12
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// end ;
34772: LD_VAR 0 2
34776: RET
// export function PrepareTiger ( agressivity ) ; begin
34777: LD_INT 0
34779: PPUSH
// uc_side := 0 ;
34780: LD_ADDR_OWVAR 20
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// uc_nation := 0 ;
34788: LD_ADDR_OWVAR 21
34792: PUSH
34793: LD_INT 0
34795: ST_TO_ADDR
// hc_class := class_tiger ;
34796: LD_ADDR_OWVAR 28
34800: PUSH
34801: LD_INT 14
34803: ST_TO_ADDR
// hc_gallery :=  ;
34804: LD_ADDR_OWVAR 33
34808: PUSH
34809: LD_STRING 
34811: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34812: LD_ADDR_OWVAR 35
34816: PUSH
34817: LD_VAR 0 1
34821: NEG
34822: PPUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: CALL_OW 12
34832: ST_TO_ADDR
// end ;
34833: LD_VAR 0 2
34837: RET
// export function PrepareEnchidna ( ) ; begin
34838: LD_INT 0
34840: PPUSH
// uc_side := 0 ;
34841: LD_ADDR_OWVAR 20
34845: PUSH
34846: LD_INT 0
34848: ST_TO_ADDR
// uc_nation := 0 ;
34849: LD_ADDR_OWVAR 21
34853: PUSH
34854: LD_INT 0
34856: ST_TO_ADDR
// hc_class := class_baggie ;
34857: LD_ADDR_OWVAR 28
34861: PUSH
34862: LD_INT 13
34864: ST_TO_ADDR
// hc_gallery :=  ;
34865: LD_ADDR_OWVAR 33
34869: PUSH
34870: LD_STRING 
34872: ST_TO_ADDR
// end ;
34873: LD_VAR 0 1
34877: RET
// export function PrepareFrog ( ) ; begin
34878: LD_INT 0
34880: PPUSH
// uc_side := 0 ;
34881: LD_ADDR_OWVAR 20
34885: PUSH
34886: LD_INT 0
34888: ST_TO_ADDR
// uc_nation := 0 ;
34889: LD_ADDR_OWVAR 21
34893: PUSH
34894: LD_INT 0
34896: ST_TO_ADDR
// hc_class := class_frog ;
34897: LD_ADDR_OWVAR 28
34901: PUSH
34902: LD_INT 19
34904: ST_TO_ADDR
// hc_gallery :=  ;
34905: LD_ADDR_OWVAR 33
34909: PUSH
34910: LD_STRING 
34912: ST_TO_ADDR
// end ;
34913: LD_VAR 0 1
34917: RET
// export function PrepareFish ( ) ; begin
34918: LD_INT 0
34920: PPUSH
// uc_side := 0 ;
34921: LD_ADDR_OWVAR 20
34925: PUSH
34926: LD_INT 0
34928: ST_TO_ADDR
// uc_nation := 0 ;
34929: LD_ADDR_OWVAR 21
34933: PUSH
34934: LD_INT 0
34936: ST_TO_ADDR
// hc_class := class_fish ;
34937: LD_ADDR_OWVAR 28
34941: PUSH
34942: LD_INT 20
34944: ST_TO_ADDR
// hc_gallery :=  ;
34945: LD_ADDR_OWVAR 33
34949: PUSH
34950: LD_STRING 
34952: ST_TO_ADDR
// end ;
34953: LD_VAR 0 1
34957: RET
// export function PrepareBird ( ) ; begin
34958: LD_INT 0
34960: PPUSH
// uc_side := 0 ;
34961: LD_ADDR_OWVAR 20
34965: PUSH
34966: LD_INT 0
34968: ST_TO_ADDR
// uc_nation := 0 ;
34969: LD_ADDR_OWVAR 21
34973: PUSH
34974: LD_INT 0
34976: ST_TO_ADDR
// hc_class := class_phororhacos ;
34977: LD_ADDR_OWVAR 28
34981: PUSH
34982: LD_INT 18
34984: ST_TO_ADDR
// hc_gallery :=  ;
34985: LD_ADDR_OWVAR 33
34989: PUSH
34990: LD_STRING 
34992: ST_TO_ADDR
// end ;
34993: LD_VAR 0 1
34997: RET
// export function PrepareHorse ( ) ; begin
34998: LD_INT 0
35000: PPUSH
// uc_side := 0 ;
35001: LD_ADDR_OWVAR 20
35005: PUSH
35006: LD_INT 0
35008: ST_TO_ADDR
// uc_nation := 0 ;
35009: LD_ADDR_OWVAR 21
35013: PUSH
35014: LD_INT 0
35016: ST_TO_ADDR
// hc_class := class_horse ;
35017: LD_ADDR_OWVAR 28
35021: PUSH
35022: LD_INT 21
35024: ST_TO_ADDR
// hc_gallery :=  ;
35025: LD_ADDR_OWVAR 33
35029: PUSH
35030: LD_STRING 
35032: ST_TO_ADDR
// end ;
35033: LD_VAR 0 1
35037: RET
// export function PrepareMastodont ( ) ; begin
35038: LD_INT 0
35040: PPUSH
// uc_side := 0 ;
35041: LD_ADDR_OWVAR 20
35045: PUSH
35046: LD_INT 0
35048: ST_TO_ADDR
// uc_nation := 0 ;
35049: LD_ADDR_OWVAR 21
35053: PUSH
35054: LD_INT 0
35056: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35057: LD_ADDR_OWVAR 37
35061: PUSH
35062: LD_INT 31
35064: ST_TO_ADDR
// vc_control := control_rider ;
35065: LD_ADDR_OWVAR 38
35069: PUSH
35070: LD_INT 4
35072: ST_TO_ADDR
// end ;
35073: LD_VAR 0 1
35077: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35078: LD_INT 0
35080: PPUSH
35081: PPUSH
35082: PPUSH
// uc_side = 0 ;
35083: LD_ADDR_OWVAR 20
35087: PUSH
35088: LD_INT 0
35090: ST_TO_ADDR
// uc_nation = 0 ;
35091: LD_ADDR_OWVAR 21
35095: PUSH
35096: LD_INT 0
35098: ST_TO_ADDR
// InitHc_All ( ) ;
35099: CALL_OW 584
// InitVc ;
35103: CALL_OW 20
// if mastodonts then
35107: LD_VAR 0 6
35111: IFFALSE 35178
// for i = 1 to mastodonts do
35113: LD_ADDR_VAR 0 11
35117: PUSH
35118: DOUBLE
35119: LD_INT 1
35121: DEC
35122: ST_TO_ADDR
35123: LD_VAR 0 6
35127: PUSH
35128: FOR_TO
35129: IFFALSE 35176
// begin vc_chassis := 31 ;
35131: LD_ADDR_OWVAR 37
35135: PUSH
35136: LD_INT 31
35138: ST_TO_ADDR
// vc_control := control_rider ;
35139: LD_ADDR_OWVAR 38
35143: PUSH
35144: LD_INT 4
35146: ST_TO_ADDR
// animal := CreateVehicle ;
35147: LD_ADDR_VAR 0 12
35151: PUSH
35152: CALL_OW 45
35156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35157: LD_VAR 0 12
35161: PPUSH
35162: LD_VAR 0 8
35166: PPUSH
35167: LD_INT 0
35169: PPUSH
35170: CALL 37306 0 3
// end ;
35174: GO 35128
35176: POP
35177: POP
// if horses then
35178: LD_VAR 0 5
35182: IFFALSE 35249
// for i = 1 to horses do
35184: LD_ADDR_VAR 0 11
35188: PUSH
35189: DOUBLE
35190: LD_INT 1
35192: DEC
35193: ST_TO_ADDR
35194: LD_VAR 0 5
35198: PUSH
35199: FOR_TO
35200: IFFALSE 35247
// begin hc_class := 21 ;
35202: LD_ADDR_OWVAR 28
35206: PUSH
35207: LD_INT 21
35209: ST_TO_ADDR
// hc_gallery :=  ;
35210: LD_ADDR_OWVAR 33
35214: PUSH
35215: LD_STRING 
35217: ST_TO_ADDR
// animal := CreateHuman ;
35218: LD_ADDR_VAR 0 12
35222: PUSH
35223: CALL_OW 44
35227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35228: LD_VAR 0 12
35232: PPUSH
35233: LD_VAR 0 8
35237: PPUSH
35238: LD_INT 0
35240: PPUSH
35241: CALL 37306 0 3
// end ;
35245: GO 35199
35247: POP
35248: POP
// if birds then
35249: LD_VAR 0 1
35253: IFFALSE 35320
// for i = 1 to birds do
35255: LD_ADDR_VAR 0 11
35259: PUSH
35260: DOUBLE
35261: LD_INT 1
35263: DEC
35264: ST_TO_ADDR
35265: LD_VAR 0 1
35269: PUSH
35270: FOR_TO
35271: IFFALSE 35318
// begin hc_class = 18 ;
35273: LD_ADDR_OWVAR 28
35277: PUSH
35278: LD_INT 18
35280: ST_TO_ADDR
// hc_gallery =  ;
35281: LD_ADDR_OWVAR 33
35285: PUSH
35286: LD_STRING 
35288: ST_TO_ADDR
// animal := CreateHuman ;
35289: LD_ADDR_VAR 0 12
35293: PUSH
35294: CALL_OW 44
35298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35299: LD_VAR 0 12
35303: PPUSH
35304: LD_VAR 0 8
35308: PPUSH
35309: LD_INT 0
35311: PPUSH
35312: CALL 37306 0 3
// end ;
35316: GO 35270
35318: POP
35319: POP
// if tigers then
35320: LD_VAR 0 2
35324: IFFALSE 35408
// for i = 1 to tigers do
35326: LD_ADDR_VAR 0 11
35330: PUSH
35331: DOUBLE
35332: LD_INT 1
35334: DEC
35335: ST_TO_ADDR
35336: LD_VAR 0 2
35340: PUSH
35341: FOR_TO
35342: IFFALSE 35406
// begin hc_class = class_tiger ;
35344: LD_ADDR_OWVAR 28
35348: PUSH
35349: LD_INT 14
35351: ST_TO_ADDR
// hc_gallery =  ;
35352: LD_ADDR_OWVAR 33
35356: PUSH
35357: LD_STRING 
35359: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35360: LD_ADDR_OWVAR 35
35364: PUSH
35365: LD_INT 7
35367: NEG
35368: PPUSH
35369: LD_INT 7
35371: PPUSH
35372: CALL_OW 12
35376: ST_TO_ADDR
// animal := CreateHuman ;
35377: LD_ADDR_VAR 0 12
35381: PUSH
35382: CALL_OW 44
35386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35387: LD_VAR 0 12
35391: PPUSH
35392: LD_VAR 0 8
35396: PPUSH
35397: LD_INT 0
35399: PPUSH
35400: CALL 37306 0 3
// end ;
35404: GO 35341
35406: POP
35407: POP
// if apemans then
35408: LD_VAR 0 3
35412: IFFALSE 35535
// for i = 1 to apemans do
35414: LD_ADDR_VAR 0 11
35418: PUSH
35419: DOUBLE
35420: LD_INT 1
35422: DEC
35423: ST_TO_ADDR
35424: LD_VAR 0 3
35428: PUSH
35429: FOR_TO
35430: IFFALSE 35533
// begin hc_class = class_apeman ;
35432: LD_ADDR_OWVAR 28
35436: PUSH
35437: LD_INT 12
35439: ST_TO_ADDR
// hc_gallery =  ;
35440: LD_ADDR_OWVAR 33
35444: PUSH
35445: LD_STRING 
35447: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35448: LD_ADDR_OWVAR 35
35452: PUSH
35453: LD_INT 2
35455: NEG
35456: PPUSH
35457: LD_INT 2
35459: PPUSH
35460: CALL_OW 12
35464: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35465: LD_ADDR_OWVAR 31
35469: PUSH
35470: LD_INT 1
35472: PPUSH
35473: LD_INT 3
35475: PPUSH
35476: CALL_OW 12
35480: PUSH
35481: LD_INT 1
35483: PPUSH
35484: LD_INT 3
35486: PPUSH
35487: CALL_OW 12
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: ST_TO_ADDR
// animal := CreateHuman ;
35504: LD_ADDR_VAR 0 12
35508: PUSH
35509: CALL_OW 44
35513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35514: LD_VAR 0 12
35518: PPUSH
35519: LD_VAR 0 8
35523: PPUSH
35524: LD_INT 0
35526: PPUSH
35527: CALL 37306 0 3
// end ;
35531: GO 35429
35533: POP
35534: POP
// if enchidnas then
35535: LD_VAR 0 4
35539: IFFALSE 35606
// for i = 1 to enchidnas do
35541: LD_ADDR_VAR 0 11
35545: PUSH
35546: DOUBLE
35547: LD_INT 1
35549: DEC
35550: ST_TO_ADDR
35551: LD_VAR 0 4
35555: PUSH
35556: FOR_TO
35557: IFFALSE 35604
// begin hc_class = 13 ;
35559: LD_ADDR_OWVAR 28
35563: PUSH
35564: LD_INT 13
35566: ST_TO_ADDR
// hc_gallery =  ;
35567: LD_ADDR_OWVAR 33
35571: PUSH
35572: LD_STRING 
35574: ST_TO_ADDR
// animal := CreateHuman ;
35575: LD_ADDR_VAR 0 12
35579: PUSH
35580: CALL_OW 44
35584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35585: LD_VAR 0 12
35589: PPUSH
35590: LD_VAR 0 8
35594: PPUSH
35595: LD_INT 0
35597: PPUSH
35598: CALL 37306 0 3
// end ;
35602: GO 35556
35604: POP
35605: POP
// if fishes then
35606: LD_VAR 0 7
35610: IFFALSE 35677
// for i = 1 to fishes do
35612: LD_ADDR_VAR 0 11
35616: PUSH
35617: DOUBLE
35618: LD_INT 1
35620: DEC
35621: ST_TO_ADDR
35622: LD_VAR 0 7
35626: PUSH
35627: FOR_TO
35628: IFFALSE 35675
// begin hc_class = 20 ;
35630: LD_ADDR_OWVAR 28
35634: PUSH
35635: LD_INT 20
35637: ST_TO_ADDR
// hc_gallery =  ;
35638: LD_ADDR_OWVAR 33
35642: PUSH
35643: LD_STRING 
35645: ST_TO_ADDR
// animal := CreateHuman ;
35646: LD_ADDR_VAR 0 12
35650: PUSH
35651: CALL_OW 44
35655: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35656: LD_VAR 0 12
35660: PPUSH
35661: LD_VAR 0 9
35665: PPUSH
35666: LD_INT 0
35668: PPUSH
35669: CALL 37306 0 3
// end ;
35673: GO 35627
35675: POP
35676: POP
// end ;
35677: LD_VAR 0 10
35681: RET
// export function WantHeal ( sci , unit ) ; begin
35682: LD_INT 0
35684: PPUSH
// if GetTaskList ( sci ) > 0 then
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL_OW 437
35694: PUSH
35695: LD_INT 0
35697: GREATER
35698: IFFALSE 35768
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 437
35709: PUSH
35710: LD_INT 1
35712: ARRAY
35713: PUSH
35714: LD_INT 1
35716: ARRAY
35717: PUSH
35718: LD_STRING l
35720: EQUAL
35721: PUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 437
35731: PUSH
35732: LD_INT 1
35734: ARRAY
35735: PUSH
35736: LD_INT 4
35738: ARRAY
35739: PUSH
35740: LD_VAR 0 2
35744: EQUAL
35745: AND
35746: IFFALSE 35758
// result := true else
35748: LD_ADDR_VAR 0 3
35752: PUSH
35753: LD_INT 1
35755: ST_TO_ADDR
35756: GO 35766
// result := false ;
35758: LD_ADDR_VAR 0 3
35762: PUSH
35763: LD_INT 0
35765: ST_TO_ADDR
// end else
35766: GO 35776
// result := false ;
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: LD_INT 0
35775: ST_TO_ADDR
// end ;
35776: LD_VAR 0 3
35780: RET
// export function HealTarget ( sci ) ; begin
35781: LD_INT 0
35783: PPUSH
// if not sci then
35784: LD_VAR 0 1
35788: NOT
35789: IFFALSE 35793
// exit ;
35791: GO 35858
// result := 0 ;
35793: LD_ADDR_VAR 0 2
35797: PUSH
35798: LD_INT 0
35800: ST_TO_ADDR
// if GetTaskList ( sci ) then
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 437
35810: IFFALSE 35858
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35812: LD_VAR 0 1
35816: PPUSH
35817: CALL_OW 437
35821: PUSH
35822: LD_INT 1
35824: ARRAY
35825: PUSH
35826: LD_INT 1
35828: ARRAY
35829: PUSH
35830: LD_STRING l
35832: EQUAL
35833: IFFALSE 35858
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35835: LD_ADDR_VAR 0 2
35839: PUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 437
35849: PUSH
35850: LD_INT 1
35852: ARRAY
35853: PUSH
35854: LD_INT 4
35856: ARRAY
35857: ST_TO_ADDR
// end ;
35858: LD_VAR 0 2
35862: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35863: LD_INT 0
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
// if not base_units then
35869: LD_VAR 0 1
35873: NOT
35874: IFFALSE 35878
// exit ;
35876: GO 35965
// result := false ;
35878: LD_ADDR_VAR 0 2
35882: PUSH
35883: LD_INT 0
35885: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35886: LD_ADDR_VAR 0 5
35890: PUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: LD_INT 21
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PPUSH
35906: CALL_OW 72
35910: ST_TO_ADDR
// if not tmp then
35911: LD_VAR 0 5
35915: NOT
35916: IFFALSE 35920
// exit ;
35918: GO 35965
// for i in tmp do
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_VAR 0 5
35929: PUSH
35930: FOR_IN
35931: IFFALSE 35963
// begin result := EnemyInRange ( i , 22 ) ;
35933: LD_ADDR_VAR 0 2
35937: PUSH
35938: LD_VAR 0 3
35942: PPUSH
35943: LD_INT 22
35945: PPUSH
35946: CALL 33552 0 2
35950: ST_TO_ADDR
// if result then
35951: LD_VAR 0 2
35955: IFFALSE 35961
// exit ;
35957: POP
35958: POP
35959: GO 35965
// end ;
35961: GO 35930
35963: POP
35964: POP
// end ;
35965: LD_VAR 0 2
35969: RET
// export function FilterByTag ( units , tag ) ; begin
35970: LD_INT 0
35972: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35973: LD_ADDR_VAR 0 3
35977: PUSH
35978: LD_VAR 0 1
35982: PPUSH
35983: LD_INT 120
35985: PUSH
35986: LD_VAR 0 2
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL_OW 72
35999: ST_TO_ADDR
// end ;
36000: LD_VAR 0 3
36004: RET
// export function IsDriver ( un ) ; begin
36005: LD_INT 0
36007: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36008: LD_ADDR_VAR 0 2
36012: PUSH
36013: LD_VAR 0 1
36017: PUSH
36018: LD_INT 55
36020: PUSH
36021: EMPTY
36022: LIST
36023: PPUSH
36024: CALL_OW 69
36028: IN
36029: ST_TO_ADDR
// end ;
36030: LD_VAR 0 2
36034: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36035: LD_INT 0
36037: PPUSH
36038: PPUSH
// list := [ ] ;
36039: LD_ADDR_VAR 0 5
36043: PUSH
36044: EMPTY
36045: ST_TO_ADDR
// case d of 0 :
36046: LD_VAR 0 3
36050: PUSH
36051: LD_INT 0
36053: DOUBLE
36054: EQUAL
36055: IFTRUE 36059
36057: GO 36192
36059: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36060: LD_ADDR_VAR 0 5
36064: PUSH
36065: LD_VAR 0 1
36069: PUSH
36070: LD_INT 4
36072: MINUS
36073: PUSH
36074: LD_VAR 0 2
36078: PUSH
36079: LD_INT 4
36081: MINUS
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: PUSH
36091: LD_VAR 0 1
36095: PUSH
36096: LD_INT 3
36098: MINUS
36099: PUSH
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: PUSH
36113: LD_VAR 0 1
36117: PUSH
36118: LD_INT 4
36120: PLUS
36121: PUSH
36122: LD_VAR 0 2
36126: PUSH
36127: LD_INT 4
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: PUSH
36135: LD_VAR 0 1
36139: PUSH
36140: LD_INT 3
36142: PLUS
36143: PUSH
36144: LD_VAR 0 2
36148: PUSH
36149: LD_INT 3
36151: PLUS
36152: PUSH
36153: LD_INT 5
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: PUSH
36161: LD_VAR 0 1
36165: PUSH
36166: LD_VAR 0 2
36170: PUSH
36171: LD_INT 4
36173: PLUS
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// end ; 1 :
36190: GO 36890
36192: LD_INT 1
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36200
36198: GO 36333
36200: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36201: LD_ADDR_VAR 0 5
36205: PUSH
36206: LD_VAR 0 1
36210: PUSH
36211: LD_VAR 0 2
36215: PUSH
36216: LD_INT 4
36218: MINUS
36219: PUSH
36220: LD_INT 3
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: PUSH
36228: LD_VAR 0 1
36232: PUSH
36233: LD_INT 3
36235: MINUS
36236: PUSH
36237: LD_VAR 0 2
36241: PUSH
36242: LD_INT 3
36244: MINUS
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: PUSH
36254: LD_VAR 0 1
36258: PUSH
36259: LD_INT 4
36261: MINUS
36262: PUSH
36263: LD_VAR 0 2
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: PUSH
36276: LD_VAR 0 1
36280: PUSH
36281: LD_VAR 0 2
36285: PUSH
36286: LD_INT 3
36288: PLUS
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: PUSH
36298: LD_VAR 0 1
36302: PUSH
36303: LD_INT 4
36305: PLUS
36306: PUSH
36307: LD_VAR 0 2
36311: PUSH
36312: LD_INT 4
36314: PLUS
36315: PUSH
36316: LD_INT 5
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// end ; 2 :
36331: GO 36890
36333: LD_INT 2
36335: DOUBLE
36336: EQUAL
36337: IFTRUE 36341
36339: GO 36470
36341: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36342: LD_ADDR_VAR 0 5
36346: PUSH
36347: LD_VAR 0 1
36351: PUSH
36352: LD_VAR 0 2
36356: PUSH
36357: LD_INT 3
36359: MINUS
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: LD_VAR 0 1
36373: PUSH
36374: LD_INT 4
36376: PLUS
36377: PUSH
36378: LD_VAR 0 2
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: PUSH
36391: LD_VAR 0 1
36395: PUSH
36396: LD_VAR 0 2
36400: PUSH
36401: LD_INT 4
36403: PLUS
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: PUSH
36413: LD_VAR 0 1
36417: PUSH
36418: LD_INT 3
36420: MINUS
36421: PUSH
36422: LD_VAR 0 2
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: PUSH
36435: LD_VAR 0 1
36439: PUSH
36440: LD_INT 4
36442: MINUS
36443: PUSH
36444: LD_VAR 0 2
36448: PUSH
36449: LD_INT 4
36451: MINUS
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// end ; 3 :
36468: GO 36890
36470: LD_INT 3
36472: DOUBLE
36473: EQUAL
36474: IFTRUE 36478
36476: GO 36611
36478: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36479: LD_ADDR_VAR 0 5
36483: PUSH
36484: LD_VAR 0 1
36488: PUSH
36489: LD_INT 3
36491: PLUS
36492: PUSH
36493: LD_VAR 0 2
36497: PUSH
36498: LD_INT 4
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: PUSH
36506: LD_VAR 0 1
36510: PUSH
36511: LD_INT 4
36513: PLUS
36514: PUSH
36515: LD_VAR 0 2
36519: PUSH
36520: LD_INT 4
36522: PLUS
36523: PUSH
36524: LD_INT 5
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: PUSH
36532: LD_VAR 0 1
36536: PUSH
36537: LD_INT 4
36539: MINUS
36540: PUSH
36541: LD_VAR 0 2
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: LD_VAR 0 1
36558: PUSH
36559: LD_VAR 0 2
36563: PUSH
36564: LD_INT 4
36566: MINUS
36567: PUSH
36568: LD_INT 3
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: PUSH
36576: LD_VAR 0 1
36580: PUSH
36581: LD_INT 3
36583: MINUS
36584: PUSH
36585: LD_VAR 0 2
36589: PUSH
36590: LD_INT 3
36592: MINUS
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
// end ; 4 :
36609: GO 36890
36611: LD_INT 4
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36752
36619: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36620: LD_ADDR_VAR 0 5
36624: PUSH
36625: LD_VAR 0 1
36629: PUSH
36630: LD_VAR 0 2
36634: PUSH
36635: LD_INT 4
36637: PLUS
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: PUSH
36647: LD_VAR 0 1
36651: PUSH
36652: LD_INT 3
36654: PLUS
36655: PUSH
36656: LD_VAR 0 2
36660: PUSH
36661: LD_INT 3
36663: PLUS
36664: PUSH
36665: LD_INT 5
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: LD_VAR 0 1
36677: PUSH
36678: LD_INT 4
36680: PLUS
36681: PUSH
36682: LD_VAR 0 2
36686: PUSH
36687: LD_INT 4
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: PUSH
36695: LD_VAR 0 1
36699: PUSH
36700: LD_VAR 0 2
36704: PUSH
36705: LD_INT 3
36707: MINUS
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: LD_INT 4
36724: MINUS
36725: PUSH
36726: LD_VAR 0 2
36730: PUSH
36731: LD_INT 4
36733: MINUS
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// end ; 5 :
36750: GO 36890
36752: LD_INT 5
36754: DOUBLE
36755: EQUAL
36756: IFTRUE 36760
36758: GO 36889
36760: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36761: LD_ADDR_VAR 0 5
36765: PUSH
36766: LD_VAR 0 1
36770: PUSH
36771: LD_INT 4
36773: MINUS
36774: PUSH
36775: LD_VAR 0 2
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: PUSH
36788: LD_VAR 0 1
36792: PUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_INT 4
36800: MINUS
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 4
36817: PLUS
36818: PUSH
36819: LD_VAR 0 2
36823: PUSH
36824: LD_INT 4
36826: PLUS
36827: PUSH
36828: LD_INT 5
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: LD_VAR 0 1
36840: PUSH
36841: LD_INT 3
36843: PLUS
36844: PUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_INT 4
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: PUSH
36858: LD_VAR 0 1
36862: PUSH
36863: LD_VAR 0 2
36867: PUSH
36868: LD_INT 3
36870: PLUS
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
// end ; end ;
36887: GO 36890
36889: POP
// result := list ;
36890: LD_ADDR_VAR 0 4
36894: PUSH
36895: LD_VAR 0 5
36899: ST_TO_ADDR
// end ;
36900: LD_VAR 0 4
36904: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36905: LD_INT 0
36907: PPUSH
36908: PPUSH
36909: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36910: LD_VAR 0 1
36914: NOT
36915: PUSH
36916: LD_VAR 0 2
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: LD_INT 4
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: IN
36939: NOT
36940: OR
36941: IFFALSE 36945
// exit ;
36943: GO 37028
// tmp := [ ] ;
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: EMPTY
36951: ST_TO_ADDR
// for i in units do
36952: LD_ADDR_VAR 0 4
36956: PUSH
36957: LD_VAR 0 1
36961: PUSH
36962: FOR_IN
36963: IFFALSE 36997
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36965: LD_ADDR_VAR 0 5
36969: PUSH
36970: LD_VAR 0 5
36974: PPUSH
36975: LD_VAR 0 4
36979: PPUSH
36980: LD_VAR 0 2
36984: PPUSH
36985: CALL_OW 259
36989: PPUSH
36990: CALL 38389 0 2
36994: ST_TO_ADDR
36995: GO 36962
36997: POP
36998: POP
// if not tmp then
36999: LD_VAR 0 5
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 37028
// result := SortListByListDesc ( units , tmp ) ;
37008: LD_ADDR_VAR 0 3
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: LD_VAR 0 5
37022: PPUSH
37023: CALL_OW 77
37027: ST_TO_ADDR
// end ;
37028: LD_VAR 0 3
37032: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
// result := false ;
37038: LD_ADDR_VAR 0 3
37042: PUSH
37043: LD_INT 0
37045: ST_TO_ADDR
// if not building then
37046: LD_VAR 0 2
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37193
// x := GetX ( building ) ;
37055: LD_ADDR_VAR 0 4
37059: PUSH
37060: LD_VAR 0 2
37064: PPUSH
37065: CALL_OW 250
37069: ST_TO_ADDR
// y := GetY ( building ) ;
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: LD_VAR 0 2
37079: PPUSH
37080: CALL_OW 251
37084: ST_TO_ADDR
// if not x or not y then
37085: LD_VAR 0 4
37089: NOT
37090: PUSH
37091: LD_VAR 0 5
37095: NOT
37096: OR
37097: IFFALSE 37101
// exit ;
37099: GO 37193
// if GetTaskList ( unit ) then
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 437
37110: IFFALSE 37193
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37112: LD_STRING e
37114: PUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 437
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PUSH
37129: LD_INT 1
37131: ARRAY
37132: EQUAL
37133: PUSH
37134: LD_VAR 0 4
37138: PUSH
37139: LD_VAR 0 1
37143: PPUSH
37144: CALL_OW 437
37148: PUSH
37149: LD_INT 1
37151: ARRAY
37152: PUSH
37153: LD_INT 2
37155: ARRAY
37156: EQUAL
37157: AND
37158: PUSH
37159: LD_VAR 0 5
37163: PUSH
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 437
37173: PUSH
37174: LD_INT 1
37176: ARRAY
37177: PUSH
37178: LD_INT 3
37180: ARRAY
37181: EQUAL
37182: AND
37183: IFFALSE 37193
// result := true end ;
37185: LD_ADDR_VAR 0 3
37189: PUSH
37190: LD_INT 1
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 3
37197: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37198: LD_INT 0
37200: PPUSH
// result := false ;
37201: LD_ADDR_VAR 0 4
37205: PUSH
37206: LD_INT 0
37208: ST_TO_ADDR
// if GetTaskList ( unit ) then
37209: LD_VAR 0 1
37213: PPUSH
37214: CALL_OW 437
37218: IFFALSE 37301
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37220: LD_STRING M
37222: PUSH
37223: LD_VAR 0 1
37227: PPUSH
37228: CALL_OW 437
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: PUSH
37237: LD_INT 1
37239: ARRAY
37240: EQUAL
37241: PUSH
37242: LD_VAR 0 2
37246: PUSH
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 437
37256: PUSH
37257: LD_INT 1
37259: ARRAY
37260: PUSH
37261: LD_INT 2
37263: ARRAY
37264: EQUAL
37265: AND
37266: PUSH
37267: LD_VAR 0 3
37271: PUSH
37272: LD_VAR 0 1
37276: PPUSH
37277: CALL_OW 437
37281: PUSH
37282: LD_INT 1
37284: ARRAY
37285: PUSH
37286: LD_INT 3
37288: ARRAY
37289: EQUAL
37290: AND
37291: IFFALSE 37301
// result := true ;
37293: LD_ADDR_VAR 0 4
37297: PUSH
37298: LD_INT 1
37300: ST_TO_ADDR
// end ; end ;
37301: LD_VAR 0 4
37305: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37306: LD_INT 0
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
// if not unit or not area then
37312: LD_VAR 0 1
37316: NOT
37317: PUSH
37318: LD_VAR 0 2
37322: NOT
37323: OR
37324: IFFALSE 37328
// exit ;
37326: GO 37492
// tmp := AreaToList ( area , i ) ;
37328: LD_ADDR_VAR 0 6
37332: PUSH
37333: LD_VAR 0 2
37337: PPUSH
37338: LD_VAR 0 5
37342: PPUSH
37343: CALL_OW 517
37347: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37348: LD_ADDR_VAR 0 5
37352: PUSH
37353: DOUBLE
37354: LD_INT 1
37356: DEC
37357: ST_TO_ADDR
37358: LD_VAR 0 6
37362: PUSH
37363: LD_INT 1
37365: ARRAY
37366: PUSH
37367: FOR_TO
37368: IFFALSE 37490
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37370: LD_ADDR_VAR 0 7
37374: PUSH
37375: LD_VAR 0 6
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: PUSH
37384: LD_VAR 0 5
37388: ARRAY
37389: PUSH
37390: LD_VAR 0 6
37394: PUSH
37395: LD_INT 2
37397: ARRAY
37398: PUSH
37399: LD_VAR 0 5
37403: ARRAY
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37409: LD_VAR 0 7
37413: PUSH
37414: LD_INT 1
37416: ARRAY
37417: PPUSH
37418: LD_VAR 0 7
37422: PUSH
37423: LD_INT 2
37425: ARRAY
37426: PPUSH
37427: CALL_OW 428
37431: PUSH
37432: LD_INT 0
37434: EQUAL
37435: IFFALSE 37488
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37437: LD_VAR 0 1
37441: PPUSH
37442: LD_VAR 0 7
37446: PUSH
37447: LD_INT 1
37449: ARRAY
37450: PPUSH
37451: LD_VAR 0 7
37455: PUSH
37456: LD_INT 2
37458: ARRAY
37459: PPUSH
37460: LD_VAR 0 3
37464: PPUSH
37465: CALL_OW 48
// result := IsPlaced ( unit ) ;
37469: LD_ADDR_VAR 0 4
37473: PUSH
37474: LD_VAR 0 1
37478: PPUSH
37479: CALL_OW 305
37483: ST_TO_ADDR
// exit ;
37484: POP
37485: POP
37486: GO 37492
// end ; end ;
37488: GO 37367
37490: POP
37491: POP
// end ;
37492: LD_VAR 0 4
37496: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37497: LD_INT 0
37499: PPUSH
37500: PPUSH
37501: PPUSH
// if not side or side > 8 then
37502: LD_VAR 0 1
37506: NOT
37507: PUSH
37508: LD_VAR 0 1
37512: PUSH
37513: LD_INT 8
37515: GREATER
37516: OR
37517: IFFALSE 37521
// exit ;
37519: GO 37708
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37521: LD_ADDR_VAR 0 4
37525: PUSH
37526: LD_INT 22
37528: PUSH
37529: LD_VAR 0 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 21
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PPUSH
37552: CALL_OW 69
37556: ST_TO_ADDR
// if not tmp then
37557: LD_VAR 0 4
37561: NOT
37562: IFFALSE 37566
// exit ;
37564: GO 37708
// enable_addtolog := true ;
37566: LD_ADDR_OWVAR 81
37570: PUSH
37571: LD_INT 1
37573: ST_TO_ADDR
// AddToLog ( [ ) ;
37574: LD_STRING [
37576: PPUSH
37577: CALL_OW 561
// for i in tmp do
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_VAR 0 4
37590: PUSH
37591: FOR_IN
37592: IFFALSE 37699
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37594: LD_STRING [
37596: PUSH
37597: LD_VAR 0 3
37601: PPUSH
37602: CALL_OW 266
37606: STR
37607: PUSH
37608: LD_STRING , 
37610: STR
37611: PUSH
37612: LD_VAR 0 3
37616: PPUSH
37617: CALL_OW 250
37621: STR
37622: PUSH
37623: LD_STRING , 
37625: STR
37626: PUSH
37627: LD_VAR 0 3
37631: PPUSH
37632: CALL_OW 251
37636: STR
37637: PUSH
37638: LD_STRING , 
37640: STR
37641: PUSH
37642: LD_VAR 0 3
37646: PPUSH
37647: CALL_OW 254
37651: STR
37652: PUSH
37653: LD_STRING , 
37655: STR
37656: PUSH
37657: LD_VAR 0 3
37661: PPUSH
37662: LD_INT 1
37664: PPUSH
37665: CALL_OW 268
37669: STR
37670: PUSH
37671: LD_STRING , 
37673: STR
37674: PUSH
37675: LD_VAR 0 3
37679: PPUSH
37680: LD_INT 2
37682: PPUSH
37683: CALL_OW 268
37687: STR
37688: PUSH
37689: LD_STRING ],
37691: STR
37692: PPUSH
37693: CALL_OW 561
// end ;
37697: GO 37591
37699: POP
37700: POP
// AddToLog ( ]; ) ;
37701: LD_STRING ];
37703: PPUSH
37704: CALL_OW 561
// end ;
37708: LD_VAR 0 2
37712: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37713: LD_INT 0
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
// if not area or not rate or not max then
37720: LD_VAR 0 1
37724: NOT
37725: PUSH
37726: LD_VAR 0 2
37730: NOT
37731: OR
37732: PUSH
37733: LD_VAR 0 4
37737: NOT
37738: OR
37739: IFFALSE 37743
// exit ;
37741: GO 37932
// while 1 do
37743: LD_INT 1
37745: IFFALSE 37932
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37747: LD_ADDR_VAR 0 9
37751: PUSH
37752: LD_VAR 0 1
37756: PPUSH
37757: LD_INT 1
37759: PPUSH
37760: CALL_OW 287
37764: PUSH
37765: LD_INT 10
37767: MUL
37768: ST_TO_ADDR
// r := rate / 10 ;
37769: LD_ADDR_VAR 0 7
37773: PUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 10
37781: DIVREAL
37782: ST_TO_ADDR
// time := 1 1$00 ;
37783: LD_ADDR_VAR 0 8
37787: PUSH
37788: LD_INT 2100
37790: ST_TO_ADDR
// if amount < min then
37791: LD_VAR 0 9
37795: PUSH
37796: LD_VAR 0 3
37800: LESS
37801: IFFALSE 37819
// r := r * 2 else
37803: LD_ADDR_VAR 0 7
37807: PUSH
37808: LD_VAR 0 7
37812: PUSH
37813: LD_INT 2
37815: MUL
37816: ST_TO_ADDR
37817: GO 37845
// if amount > max then
37819: LD_VAR 0 9
37823: PUSH
37824: LD_VAR 0 4
37828: GREATER
37829: IFFALSE 37845
// r := r / 2 ;
37831: LD_ADDR_VAR 0 7
37835: PUSH
37836: LD_VAR 0 7
37840: PUSH
37841: LD_INT 2
37843: DIVREAL
37844: ST_TO_ADDR
// time := time / r ;
37845: LD_ADDR_VAR 0 8
37849: PUSH
37850: LD_VAR 0 8
37854: PUSH
37855: LD_VAR 0 7
37859: DIVREAL
37860: ST_TO_ADDR
// if time < 0 then
37861: LD_VAR 0 8
37865: PUSH
37866: LD_INT 0
37868: LESS
37869: IFFALSE 37886
// time := time * - 1 ;
37871: LD_ADDR_VAR 0 8
37875: PUSH
37876: LD_VAR 0 8
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: MUL
37885: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37886: LD_VAR 0 8
37890: PUSH
37891: LD_INT 35
37893: PPUSH
37894: LD_INT 875
37896: PPUSH
37897: CALL_OW 12
37901: PLUS
37902: PPUSH
37903: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37907: LD_INT 1
37909: PPUSH
37910: LD_INT 5
37912: PPUSH
37913: CALL_OW 12
37917: PPUSH
37918: LD_VAR 0 1
37922: PPUSH
37923: LD_INT 1
37925: PPUSH
37926: CALL_OW 55
// end ;
37930: GO 37743
// end ;
37932: LD_VAR 0 5
37936: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37937: LD_INT 0
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
// if not turrets or not factories then
37947: LD_VAR 0 1
37951: NOT
37952: PUSH
37953: LD_VAR 0 2
37957: NOT
37958: OR
37959: IFFALSE 37963
// exit ;
37961: GO 38270
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37963: LD_ADDR_VAR 0 10
37967: PUSH
37968: LD_INT 5
37970: PUSH
37971: LD_INT 6
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: LD_INT 4
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 3
37990: PUSH
37991: LD_INT 5
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 24
38005: PUSH
38006: LD_INT 25
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 23
38015: PUSH
38016: LD_INT 27
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 42
38029: PUSH
38030: LD_INT 43
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 44
38039: PUSH
38040: LD_INT 46
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 45
38049: PUSH
38050: LD_INT 47
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// result := [ ] ;
38067: LD_ADDR_VAR 0 3
38071: PUSH
38072: EMPTY
38073: ST_TO_ADDR
// for i in turrets do
38074: LD_ADDR_VAR 0 4
38078: PUSH
38079: LD_VAR 0 1
38083: PUSH
38084: FOR_IN
38085: IFFALSE 38268
// begin nat := GetNation ( i ) ;
38087: LD_ADDR_VAR 0 7
38091: PUSH
38092: LD_VAR 0 4
38096: PPUSH
38097: CALL_OW 248
38101: ST_TO_ADDR
// weapon := 0 ;
38102: LD_ADDR_VAR 0 8
38106: PUSH
38107: LD_INT 0
38109: ST_TO_ADDR
// if not nat then
38110: LD_VAR 0 7
38114: NOT
38115: IFFALSE 38119
// continue ;
38117: GO 38084
// for j in list [ nat ] do
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_VAR 0 10
38128: PUSH
38129: LD_VAR 0 7
38133: ARRAY
38134: PUSH
38135: FOR_IN
38136: IFFALSE 38177
// if GetBWeapon ( i ) = j [ 1 ] then
38138: LD_VAR 0 4
38142: PPUSH
38143: CALL_OW 269
38147: PUSH
38148: LD_VAR 0 5
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: EQUAL
38157: IFFALSE 38175
// begin weapon := j [ 2 ] ;
38159: LD_ADDR_VAR 0 8
38163: PUSH
38164: LD_VAR 0 5
38168: PUSH
38169: LD_INT 2
38171: ARRAY
38172: ST_TO_ADDR
// break ;
38173: GO 38177
// end ;
38175: GO 38135
38177: POP
38178: POP
// if not weapon then
38179: LD_VAR 0 8
38183: NOT
38184: IFFALSE 38188
// continue ;
38186: GO 38084
// for k in factories do
38188: LD_ADDR_VAR 0 6
38192: PUSH
38193: LD_VAR 0 2
38197: PUSH
38198: FOR_IN
38199: IFFALSE 38264
// begin weapons := AvailableWeaponList ( k ) ;
38201: LD_ADDR_VAR 0 9
38205: PUSH
38206: LD_VAR 0 6
38210: PPUSH
38211: CALL_OW 478
38215: ST_TO_ADDR
// if not weapons then
38216: LD_VAR 0 9
38220: NOT
38221: IFFALSE 38225
// continue ;
38223: GO 38198
// if weapon in weapons then
38225: LD_VAR 0 8
38229: PUSH
38230: LD_VAR 0 9
38234: IN
38235: IFFALSE 38262
// begin result := [ i , weapon ] ;
38237: LD_ADDR_VAR 0 3
38241: PUSH
38242: LD_VAR 0 4
38246: PUSH
38247: LD_VAR 0 8
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// exit ;
38256: POP
38257: POP
38258: POP
38259: POP
38260: GO 38270
// end ; end ;
38262: GO 38198
38264: POP
38265: POP
// end ;
38266: GO 38084
38268: POP
38269: POP
// end ;
38270: LD_VAR 0 3
38274: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38275: LD_INT 0
38277: PPUSH
// if not side or side > 8 then
38278: LD_VAR 0 3
38282: NOT
38283: PUSH
38284: LD_VAR 0 3
38288: PUSH
38289: LD_INT 8
38291: GREATER
38292: OR
38293: IFFALSE 38297
// exit ;
38295: GO 38356
// if not range then
38297: LD_VAR 0 4
38301: NOT
38302: IFFALSE 38313
// range := - 12 ;
38304: LD_ADDR_VAR 0 4
38308: PUSH
38309: LD_INT 12
38311: NEG
38312: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38313: LD_VAR 0 1
38317: PPUSH
38318: LD_VAR 0 2
38322: PPUSH
38323: LD_VAR 0 3
38327: PPUSH
38328: LD_VAR 0 4
38332: PPUSH
38333: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38337: LD_VAR 0 1
38341: PPUSH
38342: LD_VAR 0 2
38346: PPUSH
38347: LD_VAR 0 3
38351: PPUSH
38352: CALL_OW 331
// end ;
38356: LD_VAR 0 5
38360: RET
// export function Video ( mode ) ; begin
38361: LD_INT 0
38363: PPUSH
// ingame_video = mode ;
38364: LD_ADDR_OWVAR 52
38368: PUSH
38369: LD_VAR 0 1
38373: ST_TO_ADDR
// interface_hidden = mode ;
38374: LD_ADDR_OWVAR 54
38378: PUSH
38379: LD_VAR 0 1
38383: ST_TO_ADDR
// end ;
38384: LD_VAR 0 2
38388: RET
// export function Join ( array , element ) ; begin
38389: LD_INT 0
38391: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: LD_VAR 0 1
38401: PPUSH
38402: LD_VAR 0 1
38406: PUSH
38407: LD_INT 1
38409: PLUS
38410: PPUSH
38411: LD_VAR 0 2
38415: PPUSH
38416: CALL_OW 1
38420: ST_TO_ADDR
// end ;
38421: LD_VAR 0 3
38425: RET
// export function JoinUnion ( array , element ) ; begin
38426: LD_INT 0
38428: PPUSH
// result := array union element ;
38429: LD_ADDR_VAR 0 3
38433: PUSH
38434: LD_VAR 0 1
38438: PUSH
38439: LD_VAR 0 2
38443: UNION
38444: ST_TO_ADDR
// end ;
38445: LD_VAR 0 3
38449: RET
// export function GetBehemoths ( side ) ; begin
38450: LD_INT 0
38452: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38453: LD_ADDR_VAR 0 2
38457: PUSH
38458: LD_INT 22
38460: PUSH
38461: LD_VAR 0 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 31
38472: PUSH
38473: LD_INT 25
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PPUSH
38484: CALL_OW 69
38488: ST_TO_ADDR
// end ;
38489: LD_VAR 0 2
38493: RET
// export function Shuffle ( array ) ; var i , index ; begin
38494: LD_INT 0
38496: PPUSH
38497: PPUSH
38498: PPUSH
// result := [ ] ;
38499: LD_ADDR_VAR 0 2
38503: PUSH
38504: EMPTY
38505: ST_TO_ADDR
// if not array then
38506: LD_VAR 0 1
38510: NOT
38511: IFFALSE 38515
// exit ;
38513: GO 38614
// Randomize ;
38515: CALL_OW 10
// for i = array downto 1 do
38519: LD_ADDR_VAR 0 3
38523: PUSH
38524: DOUBLE
38525: LD_VAR 0 1
38529: INC
38530: ST_TO_ADDR
38531: LD_INT 1
38533: PUSH
38534: FOR_DOWNTO
38535: IFFALSE 38612
// begin index := rand ( 1 , array ) ;
38537: LD_ADDR_VAR 0 4
38541: PUSH
38542: LD_INT 1
38544: PPUSH
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 12
38554: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38555: LD_ADDR_VAR 0 2
38559: PUSH
38560: LD_VAR 0 2
38564: PPUSH
38565: LD_VAR 0 2
38569: PUSH
38570: LD_INT 1
38572: PLUS
38573: PPUSH
38574: LD_VAR 0 1
38578: PUSH
38579: LD_VAR 0 4
38583: ARRAY
38584: PPUSH
38585: CALL_OW 2
38589: ST_TO_ADDR
// array := Delete ( array , index ) ;
38590: LD_ADDR_VAR 0 1
38594: PUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_VAR 0 4
38604: PPUSH
38605: CALL_OW 3
38609: ST_TO_ADDR
// end ;
38610: GO 38534
38612: POP
38613: POP
// end ;
38614: LD_VAR 0 2
38618: RET
// export function GetBaseMaterials ( base ) ; begin
38619: LD_INT 0
38621: PPUSH
// result := [ 0 , 0 , 0 ] ;
38622: LD_ADDR_VAR 0 2
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// if not base then
38641: LD_VAR 0 1
38645: NOT
38646: IFFALSE 38650
// exit ;
38648: GO 38699
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38650: LD_ADDR_VAR 0 2
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_INT 1
38662: PPUSH
38663: CALL_OW 275
38667: PUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: LD_INT 2
38675: PPUSH
38676: CALL_OW 275
38680: PUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_INT 3
38688: PPUSH
38689: CALL_OW 275
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// end ;
38699: LD_VAR 0 2
38703: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38704: LD_INT 0
38706: PPUSH
38707: PPUSH
// result := array ;
38708: LD_ADDR_VAR 0 3
38712: PUSH
38713: LD_VAR 0 1
38717: ST_TO_ADDR
// if size >= result then
38718: LD_VAR 0 2
38722: PUSH
38723: LD_VAR 0 3
38727: GREATEREQUAL
38728: IFFALSE 38732
// exit ;
38730: GO 38782
// if size then
38732: LD_VAR 0 2
38736: IFFALSE 38782
// for i := array downto size do
38738: LD_ADDR_VAR 0 4
38742: PUSH
38743: DOUBLE
38744: LD_VAR 0 1
38748: INC
38749: ST_TO_ADDR
38750: LD_VAR 0 2
38754: PUSH
38755: FOR_DOWNTO
38756: IFFALSE 38780
// result := Delete ( result , result ) ;
38758: LD_ADDR_VAR 0 3
38762: PUSH
38763: LD_VAR 0 3
38767: PPUSH
38768: LD_VAR 0 3
38772: PPUSH
38773: CALL_OW 3
38777: ST_TO_ADDR
38778: GO 38755
38780: POP
38781: POP
// end ;
38782: LD_VAR 0 3
38786: RET
// export function ComExit ( unit ) ; var tmp ; begin
38787: LD_INT 0
38789: PPUSH
38790: PPUSH
// if not IsInUnit ( unit ) then
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 310
38800: NOT
38801: IFFALSE 38805
// exit ;
38803: GO 38865
// tmp := IsInUnit ( unit ) ;
38805: LD_ADDR_VAR 0 3
38809: PUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: CALL_OW 310
38819: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38820: LD_VAR 0 3
38824: PPUSH
38825: CALL_OW 247
38829: PUSH
38830: LD_INT 2
38832: EQUAL
38833: IFFALSE 38846
// ComExitVehicle ( unit ) else
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 121
38844: GO 38855
// ComExitBuilding ( unit ) ;
38846: LD_VAR 0 1
38850: PPUSH
38851: CALL_OW 122
// result := tmp ;
38855: LD_ADDR_VAR 0 2
38859: PUSH
38860: LD_VAR 0 3
38864: ST_TO_ADDR
// end ;
38865: LD_VAR 0 2
38869: RET
// export function ComExitAll ( units ) ; var i ; begin
38870: LD_INT 0
38872: PPUSH
38873: PPUSH
// if not units then
38874: LD_VAR 0 1
38878: NOT
38879: IFFALSE 38883
// exit ;
38881: GO 38909
// for i in units do
38883: LD_ADDR_VAR 0 3
38887: PUSH
38888: LD_VAR 0 1
38892: PUSH
38893: FOR_IN
38894: IFFALSE 38907
// ComExit ( i ) ;
38896: LD_VAR 0 3
38900: PPUSH
38901: CALL 38787 0 1
38905: GO 38893
38907: POP
38908: POP
// end ;
38909: LD_VAR 0 2
38913: RET
// export function ResetHc ; begin
38914: LD_INT 0
38916: PPUSH
// InitHc ;
38917: CALL_OW 19
// hc_importance := 0 ;
38921: LD_ADDR_OWVAR 32
38925: PUSH
38926: LD_INT 0
38928: ST_TO_ADDR
// end ;
38929: LD_VAR 0 1
38933: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38934: LD_INT 0
38936: PPUSH
38937: PPUSH
38938: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38939: LD_ADDR_VAR 0 6
38943: PUSH
38944: LD_VAR 0 1
38948: PUSH
38949: LD_VAR 0 3
38953: PLUS
38954: PUSH
38955: LD_INT 2
38957: DIV
38958: ST_TO_ADDR
// if _x < 0 then
38959: LD_VAR 0 6
38963: PUSH
38964: LD_INT 0
38966: LESS
38967: IFFALSE 38984
// _x := _x * - 1 ;
38969: LD_ADDR_VAR 0 6
38973: PUSH
38974: LD_VAR 0 6
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: MUL
38983: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38984: LD_ADDR_VAR 0 7
38988: PUSH
38989: LD_VAR 0 2
38993: PUSH
38994: LD_VAR 0 4
38998: PLUS
38999: PUSH
39000: LD_INT 2
39002: DIV
39003: ST_TO_ADDR
// if _y < 0 then
39004: LD_VAR 0 7
39008: PUSH
39009: LD_INT 0
39011: LESS
39012: IFFALSE 39029
// _y := _y * - 1 ;
39014: LD_ADDR_VAR 0 7
39018: PUSH
39019: LD_VAR 0 7
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: MUL
39028: ST_TO_ADDR
// result := [ _x , _y ] ;
39029: LD_ADDR_VAR 0 5
39033: PUSH
39034: LD_VAR 0 6
39038: PUSH
39039: LD_VAR 0 7
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: ST_TO_ADDR
// end ;
39048: LD_VAR 0 5
39052: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39053: LD_INT 0
39055: PPUSH
39056: PPUSH
39057: PPUSH
39058: PPUSH
// task := GetTaskList ( unit ) ;
39059: LD_ADDR_VAR 0 7
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 437
39073: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39074: LD_VAR 0 7
39078: NOT
39079: PUSH
39080: LD_VAR 0 1
39084: PPUSH
39085: LD_VAR 0 2
39089: PPUSH
39090: CALL_OW 308
39094: NOT
39095: AND
39096: IFFALSE 39100
// exit ;
39098: GO 39218
// if IsInArea ( unit , area ) then
39100: LD_VAR 0 1
39104: PPUSH
39105: LD_VAR 0 2
39109: PPUSH
39110: CALL_OW 308
39114: IFFALSE 39132
// begin ComMoveToArea ( unit , goAway ) ;
39116: LD_VAR 0 1
39120: PPUSH
39121: LD_VAR 0 3
39125: PPUSH
39126: CALL_OW 113
// exit ;
39130: GO 39218
// end ; if task [ 1 ] [ 1 ] <> M then
39132: LD_VAR 0 7
39136: PUSH
39137: LD_INT 1
39139: ARRAY
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PUSH
39145: LD_STRING M
39147: NONEQUAL
39148: IFFALSE 39152
// exit ;
39150: GO 39218
// x := task [ 1 ] [ 2 ] ;
39152: LD_ADDR_VAR 0 5
39156: PUSH
39157: LD_VAR 0 7
39161: PUSH
39162: LD_INT 1
39164: ARRAY
39165: PUSH
39166: LD_INT 2
39168: ARRAY
39169: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39170: LD_ADDR_VAR 0 6
39174: PUSH
39175: LD_VAR 0 7
39179: PUSH
39180: LD_INT 1
39182: ARRAY
39183: PUSH
39184: LD_INT 3
39186: ARRAY
39187: ST_TO_ADDR
// if InArea ( x , y , area ) then
39188: LD_VAR 0 5
39192: PPUSH
39193: LD_VAR 0 6
39197: PPUSH
39198: LD_VAR 0 2
39202: PPUSH
39203: CALL_OW 309
39207: IFFALSE 39218
// ComStop ( unit ) ;
39209: LD_VAR 0 1
39213: PPUSH
39214: CALL_OW 141
// end ;
39218: LD_VAR 0 4
39222: RET
// export function Abs ( value ) ; begin
39223: LD_INT 0
39225: PPUSH
// result := value ;
39226: LD_ADDR_VAR 0 2
39230: PUSH
39231: LD_VAR 0 1
39235: ST_TO_ADDR
// if value < 0 then
39236: LD_VAR 0 1
39240: PUSH
39241: LD_INT 0
39243: LESS
39244: IFFALSE 39261
// result := value * - 1 ;
39246: LD_ADDR_VAR 0 2
39250: PUSH
39251: LD_VAR 0 1
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: MUL
39260: ST_TO_ADDR
// end ;
39261: LD_VAR 0 2
39265: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39266: LD_INT 0
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
39272: PPUSH
39273: PPUSH
39274: PPUSH
39275: PPUSH
// if not unit or not building then
39276: LD_VAR 0 1
39280: NOT
39281: PUSH
39282: LD_VAR 0 2
39286: NOT
39287: OR
39288: IFFALSE 39292
// exit ;
39290: GO 39518
// x := GetX ( building ) ;
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: LD_VAR 0 2
39301: PPUSH
39302: CALL_OW 250
39306: ST_TO_ADDR
// y := GetY ( building ) ;
39307: LD_ADDR_VAR 0 6
39311: PUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: CALL_OW 251
39321: ST_TO_ADDR
// d := GetDir ( building ) ;
39322: LD_ADDR_VAR 0 8
39326: PUSH
39327: LD_VAR 0 2
39331: PPUSH
39332: CALL_OW 254
39336: ST_TO_ADDR
// r := 4 ;
39337: LD_ADDR_VAR 0 9
39341: PUSH
39342: LD_INT 4
39344: ST_TO_ADDR
// for i := 1 to 5 do
39345: LD_ADDR_VAR 0 10
39349: PUSH
39350: DOUBLE
39351: LD_INT 1
39353: DEC
39354: ST_TO_ADDR
39355: LD_INT 5
39357: PUSH
39358: FOR_TO
39359: IFFALSE 39516
// begin _x := ShiftX ( x , d , r + i ) ;
39361: LD_ADDR_VAR 0 5
39365: PUSH
39366: LD_VAR 0 4
39370: PPUSH
39371: LD_VAR 0 8
39375: PPUSH
39376: LD_VAR 0 9
39380: PUSH
39381: LD_VAR 0 10
39385: PLUS
39386: PPUSH
39387: CALL_OW 272
39391: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39392: LD_ADDR_VAR 0 7
39396: PUSH
39397: LD_VAR 0 6
39401: PPUSH
39402: LD_VAR 0 8
39406: PPUSH
39407: LD_VAR 0 9
39411: PUSH
39412: LD_VAR 0 10
39416: PLUS
39417: PPUSH
39418: CALL_OW 273
39422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39423: LD_VAR 0 5
39427: PPUSH
39428: LD_VAR 0 7
39432: PPUSH
39433: CALL_OW 488
39437: PUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: LD_VAR 0 7
39447: PPUSH
39448: CALL_OW 428
39452: PPUSH
39453: CALL_OW 247
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: IN
39468: NOT
39469: AND
39470: IFFALSE 39514
// begin ComMoveXY ( unit , _x , _y ) ;
39472: LD_VAR 0 1
39476: PPUSH
39477: LD_VAR 0 5
39481: PPUSH
39482: LD_VAR 0 7
39486: PPUSH
39487: CALL_OW 111
// result := [ _x , _y ] ;
39491: LD_ADDR_VAR 0 3
39495: PUSH
39496: LD_VAR 0 5
39500: PUSH
39501: LD_VAR 0 7
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// exit ;
39510: POP
39511: POP
39512: GO 39518
// end ; end ;
39514: GO 39358
39516: POP
39517: POP
// end ;
39518: LD_VAR 0 3
39522: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39523: LD_INT 0
39525: PPUSH
39526: PPUSH
39527: PPUSH
// result := 0 ;
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: LD_INT 0
39535: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39536: LD_VAR 0 1
39540: PUSH
39541: LD_INT 0
39543: LESS
39544: PUSH
39545: LD_VAR 0 1
39549: PUSH
39550: LD_INT 8
39552: GREATER
39553: OR
39554: PUSH
39555: LD_VAR 0 2
39559: PUSH
39560: LD_INT 0
39562: LESS
39563: OR
39564: PUSH
39565: LD_VAR 0 2
39569: PUSH
39570: LD_INT 8
39572: GREATER
39573: OR
39574: IFFALSE 39578
// exit ;
39576: GO 39653
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39578: LD_ADDR_VAR 0 4
39582: PUSH
39583: LD_INT 22
39585: PUSH
39586: LD_VAR 0 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PPUSH
39595: CALL_OW 69
39599: PUSH
39600: FOR_IN
39601: IFFALSE 39651
// begin un := UnitShoot ( i ) ;
39603: LD_ADDR_VAR 0 5
39607: PUSH
39608: LD_VAR 0 4
39612: PPUSH
39613: CALL_OW 504
39617: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39618: LD_VAR 0 5
39622: PPUSH
39623: CALL_OW 255
39627: PUSH
39628: LD_VAR 0 1
39632: EQUAL
39633: IFFALSE 39649
// begin result := un ;
39635: LD_ADDR_VAR 0 3
39639: PUSH
39640: LD_VAR 0 5
39644: ST_TO_ADDR
// exit ;
39645: POP
39646: POP
39647: GO 39653
// end ; end ;
39649: GO 39600
39651: POP
39652: POP
// end ;
39653: LD_VAR 0 3
39657: RET
// export function GetCargoBay ( units ) ; begin
39658: LD_INT 0
39660: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39661: LD_ADDR_VAR 0 2
39665: PUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 34
39676: PUSH
39677: LD_INT 12
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 34
39686: PUSH
39687: LD_INT 51
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 34
39696: PUSH
39697: LD_INT 32
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 34
39706: PUSH
39707: LD_INT 89
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: PPUSH
39721: CALL_OW 72
39725: ST_TO_ADDR
// end ;
39726: LD_VAR 0 2
39730: RET
// export function Negate ( value ) ; begin
39731: LD_INT 0
39733: PPUSH
// result := not value ;
39734: LD_ADDR_VAR 0 2
39738: PUSH
39739: LD_VAR 0 1
39743: NOT
39744: ST_TO_ADDR
// end ;
39745: LD_VAR 0 2
39749: RET
// export function Inc ( value ) ; begin
39750: LD_INT 0
39752: PPUSH
// result := value + 1 ;
39753: LD_ADDR_VAR 0 2
39757: PUSH
39758: LD_VAR 0 1
39762: PUSH
39763: LD_INT 1
39765: PLUS
39766: ST_TO_ADDR
// end ;
39767: LD_VAR 0 2
39771: RET
// export function Dec ( value ) ; begin
39772: LD_INT 0
39774: PPUSH
// result := value - 1 ;
39775: LD_ADDR_VAR 0 2
39779: PUSH
39780: LD_VAR 0 1
39784: PUSH
39785: LD_INT 1
39787: MINUS
39788: ST_TO_ADDR
// end ;
39789: LD_VAR 0 2
39793: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39794: LD_INT 0
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39804: LD_VAR 0 1
39808: PPUSH
39809: LD_VAR 0 2
39813: PPUSH
39814: CALL_OW 488
39818: NOT
39819: PUSH
39820: LD_VAR 0 3
39824: PPUSH
39825: LD_VAR 0 4
39829: PPUSH
39830: CALL_OW 488
39834: NOT
39835: OR
39836: IFFALSE 39849
// begin result := - 1 ;
39838: LD_ADDR_VAR 0 5
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: ST_TO_ADDR
// exit ;
39847: GO 40084
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39849: LD_ADDR_VAR 0 12
39853: PUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: LD_VAR 0 4
39873: PPUSH
39874: CALL 38934 0 4
39878: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39879: LD_ADDR_VAR 0 11
39883: PUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: LD_VAR 0 2
39893: PPUSH
39894: LD_VAR 0 12
39898: PUSH
39899: LD_INT 1
39901: ARRAY
39902: PPUSH
39903: LD_VAR 0 12
39907: PUSH
39908: LD_INT 2
39910: ARRAY
39911: PPUSH
39912: CALL_OW 298
39916: ST_TO_ADDR
// distance := 9999 ;
39917: LD_ADDR_VAR 0 10
39921: PUSH
39922: LD_INT 9999
39924: ST_TO_ADDR
// for i := 0 to 5 do
39925: LD_ADDR_VAR 0 6
39929: PUSH
39930: DOUBLE
39931: LD_INT 0
39933: DEC
39934: ST_TO_ADDR
39935: LD_INT 5
39937: PUSH
39938: FOR_TO
39939: IFFALSE 40082
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39941: LD_ADDR_VAR 0 7
39945: PUSH
39946: LD_VAR 0 1
39950: PPUSH
39951: LD_VAR 0 6
39955: PPUSH
39956: LD_VAR 0 11
39960: PPUSH
39961: CALL_OW 272
39965: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39966: LD_ADDR_VAR 0 8
39970: PUSH
39971: LD_VAR 0 2
39975: PPUSH
39976: LD_VAR 0 6
39980: PPUSH
39981: LD_VAR 0 11
39985: PPUSH
39986: CALL_OW 273
39990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39991: LD_VAR 0 7
39995: PPUSH
39996: LD_VAR 0 8
40000: PPUSH
40001: CALL_OW 488
40005: NOT
40006: IFFALSE 40010
// continue ;
40008: GO 39938
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40010: LD_ADDR_VAR 0 9
40014: PUSH
40015: LD_VAR 0 12
40019: PUSH
40020: LD_INT 1
40022: ARRAY
40023: PPUSH
40024: LD_VAR 0 12
40028: PUSH
40029: LD_INT 2
40031: ARRAY
40032: PPUSH
40033: LD_VAR 0 7
40037: PPUSH
40038: LD_VAR 0 8
40042: PPUSH
40043: CALL_OW 298
40047: ST_TO_ADDR
// if tmp < distance then
40048: LD_VAR 0 9
40052: PUSH
40053: LD_VAR 0 10
40057: LESS
40058: IFFALSE 40080
// begin result := i ;
40060: LD_ADDR_VAR 0 5
40064: PUSH
40065: LD_VAR 0 6
40069: ST_TO_ADDR
// distance := tmp ;
40070: LD_ADDR_VAR 0 10
40074: PUSH
40075: LD_VAR 0 9
40079: ST_TO_ADDR
// end ; end ;
40080: GO 39938
40082: POP
40083: POP
// end ;
40084: LD_VAR 0 5
40088: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40089: LD_INT 0
40091: PPUSH
40092: PPUSH
// if not driver or not IsInUnit ( driver ) then
40093: LD_VAR 0 1
40097: NOT
40098: PUSH
40099: LD_VAR 0 1
40103: PPUSH
40104: CALL_OW 310
40108: NOT
40109: OR
40110: IFFALSE 40114
// exit ;
40112: GO 40204
// vehicle := IsInUnit ( driver ) ;
40114: LD_ADDR_VAR 0 3
40118: PUSH
40119: LD_VAR 0 1
40123: PPUSH
40124: CALL_OW 310
40128: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40129: LD_VAR 0 1
40133: PPUSH
40134: LD_STRING \
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: PUSH
40164: LD_STRING E
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_VAR 0 3
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PPUSH
40200: CALL_OW 446
// end ;
40204: LD_VAR 0 2
40208: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
// if not driver or not IsInUnit ( driver ) then
40213: LD_VAR 0 1
40217: NOT
40218: PUSH
40219: LD_VAR 0 1
40223: PPUSH
40224: CALL_OW 310
40228: NOT
40229: OR
40230: IFFALSE 40234
// exit ;
40232: GO 40324
// vehicle := IsInUnit ( driver ) ;
40234: LD_ADDR_VAR 0 3
40238: PUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 310
40248: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40249: LD_VAR 0 1
40253: PPUSH
40254: LD_STRING \
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: PUSH
40284: LD_STRING E
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_VAR 0 3
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PPUSH
40320: CALL_OW 447
// end ;
40324: LD_VAR 0 2
40328: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40329: LD_INT 0
40331: PPUSH
40332: PPUSH
40333: PPUSH
// tmp := [ ] ;
40334: LD_ADDR_VAR 0 5
40338: PUSH
40339: EMPTY
40340: ST_TO_ADDR
// for i in units do
40341: LD_ADDR_VAR 0 4
40345: PUSH
40346: LD_VAR 0 1
40350: PUSH
40351: FOR_IN
40352: IFFALSE 40390
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_VAR 0 5
40363: PPUSH
40364: LD_VAR 0 5
40368: PUSH
40369: LD_INT 1
40371: PLUS
40372: PPUSH
40373: LD_VAR 0 4
40377: PPUSH
40378: CALL_OW 256
40382: PPUSH
40383: CALL_OW 2
40387: ST_TO_ADDR
40388: GO 40351
40390: POP
40391: POP
// if not tmp then
40392: LD_VAR 0 5
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40449
// if asc then
40401: LD_VAR 0 2
40405: IFFALSE 40429
// result := SortListByListAsc ( units , tmp ) else
40407: LD_ADDR_VAR 0 3
40411: PUSH
40412: LD_VAR 0 1
40416: PPUSH
40417: LD_VAR 0 5
40421: PPUSH
40422: CALL_OW 76
40426: ST_TO_ADDR
40427: GO 40449
// result := SortListByListDesc ( units , tmp ) ;
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: LD_VAR 0 5
40443: PPUSH
40444: CALL_OW 77
40448: ST_TO_ADDR
// end ;
40449: LD_VAR 0 3
40453: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40454: LD_INT 0
40456: PPUSH
40457: PPUSH
// task := GetTaskList ( mech ) ;
40458: LD_ADDR_VAR 0 4
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 437
40472: ST_TO_ADDR
// if not task then
40473: LD_VAR 0 4
40477: NOT
40478: IFFALSE 40482
// exit ;
40480: GO 40524
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40482: LD_ADDR_VAR 0 3
40486: PUSH
40487: LD_VAR 0 4
40491: PUSH
40492: LD_INT 1
40494: ARRAY
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PUSH
40500: LD_STRING r
40502: EQUAL
40503: PUSH
40504: LD_VAR 0 4
40508: PUSH
40509: LD_INT 1
40511: ARRAY
40512: PUSH
40513: LD_INT 4
40515: ARRAY
40516: PUSH
40517: LD_VAR 0 2
40521: EQUAL
40522: AND
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 3
40528: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40529: LD_INT 0
40531: PPUSH
// SetDir ( unit , d ) ;
40532: LD_VAR 0 1
40536: PPUSH
40537: LD_VAR 0 4
40541: PPUSH
40542: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40546: LD_VAR 0 1
40550: PPUSH
40551: LD_VAR 0 2
40555: PPUSH
40556: LD_VAR 0 3
40560: PPUSH
40561: LD_VAR 0 5
40565: PPUSH
40566: CALL_OW 48
// end ;
40570: LD_VAR 0 6
40574: RET
// export function ToNaturalNumber ( number ) ; begin
40575: LD_INT 0
40577: PPUSH
// result := number div 1 ;
40578: LD_ADDR_VAR 0 2
40582: PUSH
40583: LD_VAR 0 1
40587: PUSH
40588: LD_INT 1
40590: DIV
40591: ST_TO_ADDR
// if number < 0 then
40592: LD_VAR 0 1
40596: PUSH
40597: LD_INT 0
40599: LESS
40600: IFFALSE 40610
// result := 0 ;
40602: LD_ADDR_VAR 0 2
40606: PUSH
40607: LD_INT 0
40609: ST_TO_ADDR
// end ;
40610: LD_VAR 0 2
40614: RET
// export function SortByClass ( units , class ) ; var un ; begin
40615: LD_INT 0
40617: PPUSH
40618: PPUSH
// if not units or not class then
40619: LD_VAR 0 1
40623: NOT
40624: PUSH
40625: LD_VAR 0 2
40629: NOT
40630: OR
40631: IFFALSE 40635
// exit ;
40633: GO 40730
// result := [ ] ;
40635: LD_ADDR_VAR 0 3
40639: PUSH
40640: EMPTY
40641: ST_TO_ADDR
// for un in units do
40642: LD_ADDR_VAR 0 4
40646: PUSH
40647: LD_VAR 0 1
40651: PUSH
40652: FOR_IN
40653: IFFALSE 40728
// if GetClass ( un ) = class then
40655: LD_VAR 0 4
40659: PPUSH
40660: CALL_OW 257
40664: PUSH
40665: LD_VAR 0 2
40669: EQUAL
40670: IFFALSE 40697
// result := Insert ( result , 1 , un ) else
40672: LD_ADDR_VAR 0 3
40676: PUSH
40677: LD_VAR 0 3
40681: PPUSH
40682: LD_INT 1
40684: PPUSH
40685: LD_VAR 0 4
40689: PPUSH
40690: CALL_OW 2
40694: ST_TO_ADDR
40695: GO 40726
// result := Replace ( result , result + 1 , un ) ;
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_VAR 0 3
40706: PPUSH
40707: LD_VAR 0 3
40711: PUSH
40712: LD_INT 1
40714: PLUS
40715: PPUSH
40716: LD_VAR 0 4
40720: PPUSH
40721: CALL_OW 1
40725: ST_TO_ADDR
40726: GO 40652
40728: POP
40729: POP
// end ;
40730: LD_VAR 0 3
40734: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40735: LD_INT 0
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
// result := [ ] ;
40744: LD_ADDR_VAR 0 4
40748: PUSH
40749: EMPTY
40750: ST_TO_ADDR
// if x - r < 0 then
40751: LD_VAR 0 1
40755: PUSH
40756: LD_VAR 0 3
40760: MINUS
40761: PUSH
40762: LD_INT 0
40764: LESS
40765: IFFALSE 40777
// min_x := 0 else
40767: LD_ADDR_VAR 0 8
40771: PUSH
40772: LD_INT 0
40774: ST_TO_ADDR
40775: GO 40793
// min_x := x - r ;
40777: LD_ADDR_VAR 0 8
40781: PUSH
40782: LD_VAR 0 1
40786: PUSH
40787: LD_VAR 0 3
40791: MINUS
40792: ST_TO_ADDR
// if y - r < 0 then
40793: LD_VAR 0 2
40797: PUSH
40798: LD_VAR 0 3
40802: MINUS
40803: PUSH
40804: LD_INT 0
40806: LESS
40807: IFFALSE 40819
// min_y := 0 else
40809: LD_ADDR_VAR 0 7
40813: PUSH
40814: LD_INT 0
40816: ST_TO_ADDR
40817: GO 40835
// min_y := y - r ;
40819: LD_ADDR_VAR 0 7
40823: PUSH
40824: LD_VAR 0 2
40828: PUSH
40829: LD_VAR 0 3
40833: MINUS
40834: ST_TO_ADDR
// max_x := x + r ;
40835: LD_ADDR_VAR 0 9
40839: PUSH
40840: LD_VAR 0 1
40844: PUSH
40845: LD_VAR 0 3
40849: PLUS
40850: ST_TO_ADDR
// max_y := y + r ;
40851: LD_ADDR_VAR 0 10
40855: PUSH
40856: LD_VAR 0 2
40860: PUSH
40861: LD_VAR 0 3
40865: PLUS
40866: ST_TO_ADDR
// for _x = min_x to max_x do
40867: LD_ADDR_VAR 0 5
40871: PUSH
40872: DOUBLE
40873: LD_VAR 0 8
40877: DEC
40878: ST_TO_ADDR
40879: LD_VAR 0 9
40883: PUSH
40884: FOR_TO
40885: IFFALSE 40986
// for _y = min_y to max_y do
40887: LD_ADDR_VAR 0 6
40891: PUSH
40892: DOUBLE
40893: LD_VAR 0 7
40897: DEC
40898: ST_TO_ADDR
40899: LD_VAR 0 10
40903: PUSH
40904: FOR_TO
40905: IFFALSE 40982
// begin if not ValidHex ( _x , _y ) then
40907: LD_VAR 0 5
40911: PPUSH
40912: LD_VAR 0 6
40916: PPUSH
40917: CALL_OW 488
40921: NOT
40922: IFFALSE 40926
// continue ;
40924: GO 40904
// if GetResourceTypeXY ( _x , _y ) then
40926: LD_VAR 0 5
40930: PPUSH
40931: LD_VAR 0 6
40935: PPUSH
40936: CALL_OW 283
40940: IFFALSE 40980
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: LD_VAR 0 4
40951: PPUSH
40952: LD_VAR 0 4
40956: PUSH
40957: LD_INT 1
40959: PLUS
40960: PPUSH
40961: LD_VAR 0 5
40965: PUSH
40966: LD_VAR 0 6
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PPUSH
40975: CALL_OW 1
40979: ST_TO_ADDR
// end ;
40980: GO 40904
40982: POP
40983: POP
40984: GO 40884
40986: POP
40987: POP
// end ;
40988: LD_VAR 0 4
40992: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40993: LD_INT 0
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
// if not units then
41003: LD_VAR 0 1
41007: NOT
41008: IFFALSE 41012
// exit ;
41010: GO 41536
// result := UnitFilter ( units , [ f_ok ] ) ;
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: LD_INT 50
41024: PUSH
41025: EMPTY
41026: LIST
41027: PPUSH
41028: CALL_OW 72
41032: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41033: LD_ADDR_VAR 0 8
41037: PUSH
41038: LD_VAR 0 1
41042: PUSH
41043: LD_INT 1
41045: ARRAY
41046: PPUSH
41047: CALL_OW 255
41051: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41052: LD_ADDR_VAR 0 10
41056: PUSH
41057: LD_INT 29
41059: PUSH
41060: LD_INT 91
41062: PUSH
41063: LD_INT 49
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: ST_TO_ADDR
// if not result then
41071: LD_VAR 0 3
41075: NOT
41076: IFFALSE 41080
// exit ;
41078: GO 41536
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41080: LD_ADDR_VAR 0 5
41084: PUSH
41085: LD_INT 81
41087: PUSH
41088: LD_VAR 0 8
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PPUSH
41097: CALL_OW 69
41101: ST_TO_ADDR
// for i in result do
41102: LD_ADDR_VAR 0 4
41106: PUSH
41107: LD_VAR 0 3
41111: PUSH
41112: FOR_IN
41113: IFFALSE 41534
// begin tag := GetTag ( i ) + 1 ;
41115: LD_ADDR_VAR 0 9
41119: PUSH
41120: LD_VAR 0 4
41124: PPUSH
41125: CALL_OW 110
41129: PUSH
41130: LD_INT 1
41132: PLUS
41133: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41134: LD_ADDR_VAR 0 7
41138: PUSH
41139: LD_VAR 0 4
41143: PPUSH
41144: CALL_OW 250
41148: PPUSH
41149: LD_VAR 0 4
41153: PPUSH
41154: CALL_OW 251
41158: PPUSH
41159: LD_INT 6
41161: PPUSH
41162: CALL 40735 0 3
41166: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41167: LD_VAR 0 4
41171: PPUSH
41172: CALL_OW 247
41176: PUSH
41177: LD_INT 2
41179: EQUAL
41180: PUSH
41181: LD_VAR 0 7
41185: AND
41186: PUSH
41187: LD_VAR 0 4
41191: PPUSH
41192: CALL_OW 264
41196: PUSH
41197: LD_VAR 0 10
41201: IN
41202: NOT
41203: AND
41204: IFFALSE 41243
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41206: LD_VAR 0 4
41210: PPUSH
41211: LD_VAR 0 7
41215: PUSH
41216: LD_INT 1
41218: ARRAY
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: PPUSH
41224: LD_VAR 0 7
41228: PUSH
41229: LD_INT 1
41231: ARRAY
41232: PUSH
41233: LD_INT 2
41235: ARRAY
41236: PPUSH
41237: CALL_OW 116
41241: GO 41532
// if path > tag then
41243: LD_VAR 0 2
41247: PUSH
41248: LD_VAR 0 9
41252: GREATER
41253: IFFALSE 41461
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41255: LD_ADDR_VAR 0 6
41259: PUSH
41260: LD_VAR 0 5
41264: PPUSH
41265: LD_INT 91
41267: PUSH
41268: LD_VAR 0 4
41272: PUSH
41273: LD_INT 8
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: PPUSH
41281: CALL_OW 72
41285: ST_TO_ADDR
// if nearEnemy then
41286: LD_VAR 0 6
41290: IFFALSE 41359
// begin if GetWeapon ( i ) = ru_time_lapser then
41292: LD_VAR 0 4
41296: PPUSH
41297: CALL_OW 264
41301: PUSH
41302: LD_INT 49
41304: EQUAL
41305: IFFALSE 41333
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41307: LD_VAR 0 4
41311: PPUSH
41312: LD_VAR 0 6
41316: PPUSH
41317: LD_VAR 0 4
41321: PPUSH
41322: CALL_OW 74
41326: PPUSH
41327: CALL_OW 112
41331: GO 41357
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41333: LD_VAR 0 4
41337: PPUSH
41338: LD_VAR 0 6
41342: PPUSH
41343: LD_VAR 0 4
41347: PPUSH
41348: CALL_OW 74
41352: PPUSH
41353: CALL_OW 115
// end else
41357: GO 41459
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41359: LD_VAR 0 4
41363: PPUSH
41364: LD_VAR 0 2
41368: PUSH
41369: LD_VAR 0 9
41373: ARRAY
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: PPUSH
41379: LD_VAR 0 2
41383: PUSH
41384: LD_VAR 0 9
41388: ARRAY
41389: PUSH
41390: LD_INT 2
41392: ARRAY
41393: PPUSH
41394: CALL_OW 297
41398: PUSH
41399: LD_INT 6
41401: GREATER
41402: IFFALSE 41445
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41404: LD_VAR 0 4
41408: PPUSH
41409: LD_VAR 0 2
41413: PUSH
41414: LD_VAR 0 9
41418: ARRAY
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: PPUSH
41424: LD_VAR 0 2
41428: PUSH
41429: LD_VAR 0 9
41433: ARRAY
41434: PUSH
41435: LD_INT 2
41437: ARRAY
41438: PPUSH
41439: CALL_OW 114
41443: GO 41459
// SetTag ( i , tag ) ;
41445: LD_VAR 0 4
41449: PPUSH
41450: LD_VAR 0 9
41454: PPUSH
41455: CALL_OW 109
// end else
41459: GO 41532
// if enemy then
41461: LD_VAR 0 5
41465: IFFALSE 41532
// begin if GetWeapon ( i ) = ru_time_lapser then
41467: LD_VAR 0 4
41471: PPUSH
41472: CALL_OW 264
41476: PUSH
41477: LD_INT 49
41479: EQUAL
41480: IFFALSE 41508
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41482: LD_VAR 0 4
41486: PPUSH
41487: LD_VAR 0 5
41491: PPUSH
41492: LD_VAR 0 4
41496: PPUSH
41497: CALL_OW 74
41501: PPUSH
41502: CALL_OW 112
41506: GO 41532
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41508: LD_VAR 0 4
41512: PPUSH
41513: LD_VAR 0 5
41517: PPUSH
41518: LD_VAR 0 4
41522: PPUSH
41523: CALL_OW 74
41527: PPUSH
41528: CALL_OW 115
// end ; end ;
41532: GO 41112
41534: POP
41535: POP
// end ;
41536: LD_VAR 0 3
41540: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41541: LD_INT 0
41543: PPUSH
41544: PPUSH
41545: PPUSH
// if not unit or IsInUnit ( unit ) then
41546: LD_VAR 0 1
41550: NOT
41551: PUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 310
41561: OR
41562: IFFALSE 41566
// exit ;
41564: GO 41657
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41566: LD_ADDR_VAR 0 4
41570: PUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 250
41580: PPUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: LD_INT 1
41588: PPUSH
41589: CALL_OW 272
41593: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41594: LD_ADDR_VAR 0 5
41598: PUSH
41599: LD_VAR 0 1
41603: PPUSH
41604: CALL_OW 251
41608: PPUSH
41609: LD_VAR 0 2
41613: PPUSH
41614: LD_INT 1
41616: PPUSH
41617: CALL_OW 273
41621: ST_TO_ADDR
// if ValidHex ( x , y ) then
41622: LD_VAR 0 4
41626: PPUSH
41627: LD_VAR 0 5
41631: PPUSH
41632: CALL_OW 488
41636: IFFALSE 41657
// ComTurnXY ( unit , x , y ) ;
41638: LD_VAR 0 1
41642: PPUSH
41643: LD_VAR 0 4
41647: PPUSH
41648: LD_VAR 0 5
41652: PPUSH
41653: CALL_OW 118
// end ;
41657: LD_VAR 0 3
41661: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41662: LD_INT 0
41664: PPUSH
41665: PPUSH
// result := false ;
41666: LD_ADDR_VAR 0 3
41670: PUSH
41671: LD_INT 0
41673: ST_TO_ADDR
// if not units then
41674: LD_VAR 0 2
41678: NOT
41679: IFFALSE 41683
// exit ;
41681: GO 41728
// for i in units do
41683: LD_ADDR_VAR 0 4
41687: PUSH
41688: LD_VAR 0 2
41692: PUSH
41693: FOR_IN
41694: IFFALSE 41726
// if See ( side , i ) then
41696: LD_VAR 0 1
41700: PPUSH
41701: LD_VAR 0 4
41705: PPUSH
41706: CALL_OW 292
41710: IFFALSE 41724
// begin result := true ;
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_INT 1
41719: ST_TO_ADDR
// exit ;
41720: POP
41721: POP
41722: GO 41728
// end ;
41724: GO 41693
41726: POP
41727: POP
// end ;
41728: LD_VAR 0 3
41732: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41733: LD_INT 0
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
// if not unit or not points then
41739: LD_VAR 0 1
41743: NOT
41744: PUSH
41745: LD_VAR 0 2
41749: NOT
41750: OR
41751: IFFALSE 41755
// exit ;
41753: GO 41845
// dist := 99999 ;
41755: LD_ADDR_VAR 0 5
41759: PUSH
41760: LD_INT 99999
41762: ST_TO_ADDR
// for i in points do
41763: LD_ADDR_VAR 0 4
41767: PUSH
41768: LD_VAR 0 2
41772: PUSH
41773: FOR_IN
41774: IFFALSE 41843
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41776: LD_ADDR_VAR 0 6
41780: PUSH
41781: LD_VAR 0 1
41785: PPUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_INT 1
41793: ARRAY
41794: PPUSH
41795: LD_VAR 0 4
41799: PUSH
41800: LD_INT 2
41802: ARRAY
41803: PPUSH
41804: CALL_OW 297
41808: ST_TO_ADDR
// if tmpDist < dist then
41809: LD_VAR 0 6
41813: PUSH
41814: LD_VAR 0 5
41818: LESS
41819: IFFALSE 41841
// begin result := i ;
41821: LD_ADDR_VAR 0 3
41825: PUSH
41826: LD_VAR 0 4
41830: ST_TO_ADDR
// dist := tmpDist ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 6
41840: ST_TO_ADDR
// end ; end ;
41841: GO 41773
41843: POP
41844: POP
// end ;
41845: LD_VAR 0 3
41849: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41850: LD_INT 0
41852: PPUSH
// uc_side := side ;
41853: LD_ADDR_OWVAR 20
41857: PUSH
41858: LD_VAR 0 1
41862: ST_TO_ADDR
// uc_nation := 3 ;
41863: LD_ADDR_OWVAR 21
41867: PUSH
41868: LD_INT 3
41870: ST_TO_ADDR
// vc_chassis := 25 ;
41871: LD_ADDR_OWVAR 37
41875: PUSH
41876: LD_INT 25
41878: ST_TO_ADDR
// vc_engine := engine_siberite ;
41879: LD_ADDR_OWVAR 39
41883: PUSH
41884: LD_INT 3
41886: ST_TO_ADDR
// vc_control := control_computer ;
41887: LD_ADDR_OWVAR 38
41891: PUSH
41892: LD_INT 3
41894: ST_TO_ADDR
// vc_weapon := 59 ;
41895: LD_ADDR_OWVAR 40
41899: PUSH
41900: LD_INT 59
41902: ST_TO_ADDR
// result := CreateVehicle ;
41903: LD_ADDR_VAR 0 5
41907: PUSH
41908: CALL_OW 45
41912: ST_TO_ADDR
// SetDir ( result , d ) ;
41913: LD_VAR 0 5
41917: PPUSH
41918: LD_VAR 0 4
41922: PPUSH
41923: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41927: LD_VAR 0 5
41931: PPUSH
41932: LD_VAR 0 2
41936: PPUSH
41937: LD_VAR 0 3
41941: PPUSH
41942: LD_INT 0
41944: PPUSH
41945: CALL_OW 48
// end ;
41949: LD_VAR 0 5
41953: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41954: LD_INT 0
41956: PPUSH
41957: PPUSH
41958: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41959: LD_ADDR_VAR 0 2
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41982: LD_VAR 0 1
41986: NOT
41987: PUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 264
41997: PUSH
41998: LD_INT 12
42000: PUSH
42001: LD_INT 51
42003: PUSH
42004: LD_INT 32
42006: PUSH
42007: LD_INT 89
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: IN
42016: NOT
42017: OR
42018: IFFALSE 42022
// exit ;
42020: GO 42120
// for i := 1 to 3 do
42022: LD_ADDR_VAR 0 3
42026: PUSH
42027: DOUBLE
42028: LD_INT 1
42030: DEC
42031: ST_TO_ADDR
42032: LD_INT 3
42034: PUSH
42035: FOR_TO
42036: IFFALSE 42118
// begin tmp := GetCargo ( cargo , i ) ;
42038: LD_ADDR_VAR 0 4
42042: PUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: LD_VAR 0 3
42052: PPUSH
42053: CALL_OW 289
42057: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42058: LD_ADDR_VAR 0 2
42062: PUSH
42063: LD_VAR 0 2
42067: PPUSH
42068: LD_VAR 0 3
42072: PPUSH
42073: LD_VAR 0 4
42077: PPUSH
42078: CALL_OW 1
42082: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42083: LD_ADDR_VAR 0 2
42087: PUSH
42088: LD_VAR 0 2
42092: PPUSH
42093: LD_INT 4
42095: PPUSH
42096: LD_VAR 0 2
42100: PUSH
42101: LD_INT 4
42103: ARRAY
42104: PUSH
42105: LD_VAR 0 4
42109: PLUS
42110: PPUSH
42111: CALL_OW 1
42115: ST_TO_ADDR
// end ;
42116: GO 42035
42118: POP
42119: POP
// end ;
42120: LD_VAR 0 2
42124: RET
// export function Length ( array ) ; begin
42125: LD_INT 0
42127: PPUSH
// result := array + 0 ;
42128: LD_ADDR_VAR 0 2
42132: PUSH
42133: LD_VAR 0 1
42137: PUSH
42138: LD_INT 0
42140: PLUS
42141: ST_TO_ADDR
// end ;
42142: LD_VAR 0 2
42146: RET
// export function PrepareArray ( array ) ; begin
42147: LD_INT 0
42149: PPUSH
// result := array diff 0 ;
42150: LD_ADDR_VAR 0 2
42154: PUSH
42155: LD_VAR 0 1
42159: PUSH
42160: LD_INT 0
42162: DIFF
42163: ST_TO_ADDR
// if not result [ 1 ] then
42164: LD_VAR 0 2
42168: PUSH
42169: LD_INT 1
42171: ARRAY
42172: NOT
42173: IFFALSE 42193
// result := Delete ( result , 1 ) ;
42175: LD_ADDR_VAR 0 2
42179: PUSH
42180: LD_VAR 0 2
42184: PPUSH
42185: LD_INT 1
42187: PPUSH
42188: CALL_OW 3
42192: ST_TO_ADDR
// end ;
42193: LD_VAR 0 2
42197: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42198: LD_INT 0
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
// sibRocketRange := 25 ;
42204: LD_ADDR_VAR 0 6
42208: PUSH
42209: LD_INT 25
42211: ST_TO_ADDR
// result := false ;
42212: LD_ADDR_VAR 0 4
42216: PUSH
42217: LD_INT 0
42219: ST_TO_ADDR
// for i := 0 to 5 do
42220: LD_ADDR_VAR 0 5
42224: PUSH
42225: DOUBLE
42226: LD_INT 0
42228: DEC
42229: ST_TO_ADDR
42230: LD_INT 5
42232: PUSH
42233: FOR_TO
42234: IFFALSE 42301
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42236: LD_VAR 0 1
42240: PPUSH
42241: LD_VAR 0 5
42245: PPUSH
42246: LD_VAR 0 6
42250: PPUSH
42251: CALL_OW 272
42255: PPUSH
42256: LD_VAR 0 2
42260: PPUSH
42261: LD_VAR 0 5
42265: PPUSH
42266: LD_VAR 0 6
42270: PPUSH
42271: CALL_OW 273
42275: PPUSH
42276: LD_VAR 0 3
42280: PPUSH
42281: CALL_OW 309
42285: IFFALSE 42299
// begin result := true ;
42287: LD_ADDR_VAR 0 4
42291: PUSH
42292: LD_INT 1
42294: ST_TO_ADDR
// exit ;
42295: POP
42296: POP
42297: GO 42303
// end ;
42299: GO 42233
42301: POP
42302: POP
// end ;
42303: LD_VAR 0 4
42307: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42308: LD_INT 0
42310: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42311: LD_VAR 0 1
42315: PPUSH
42316: LD_VAR 0 2
42320: PPUSH
42321: LD_INT 0
42323: PPUSH
42324: LD_INT 0
42326: PPUSH
42327: LD_INT 1
42329: PPUSH
42330: LD_INT 0
42332: PPUSH
42333: CALL_OW 587
// end ;
42337: LD_VAR 0 3
42341: RET
