// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := 1 ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1587 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1587 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1587 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1587 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1587 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1587 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1587 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1587 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1587 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1587 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1587 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1587 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1587 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// music_nat := 2 ;
 635: LD_ADDR_OWVAR 71
 639: PUSH
 640: LD_INT 2
 642: ST_TO_ADDR
// Video ( true ) ;
 643: LD_INT 1
 645: PPUSH
 646: CALL 38880 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 650: LD_EXP 3
 654: PPUSH
 655: LD_INT 51
 657: PPUSH
 658: LD_INT 23
 660: PPUSH
 661: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 665: LD_OWVAR 3
 669: PUSH
 670: LD_EXP 3
 674: DIFF
 675: PPUSH
 676: LD_INT 53
 678: PPUSH
 679: LD_INT 27
 681: PPUSH
 682: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 686: LD_INT 52
 688: PPUSH
 689: LD_INT 25
 691: PPUSH
 692: CALL_OW 86
// wait ( 0 0$2 ) ;
 696: LD_INT 70
 698: PPUSH
 699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 703: LD_INT 35
 705: PPUSH
 706: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 51
 717: PPUSH
 718: LD_INT 23
 720: PPUSH
 721: CALL_OW 307
 725: PUSH
 726: LD_EXP 3
 730: PPUSH
 731: CALL_OW 314
 735: NOT
 736: OR
 737: IFFALSE 703
// ComTurnXY ( Heike , 53 , 26 ) ;
 739: LD_EXP 3
 743: PPUSH
 744: LD_INT 53
 746: PPUSH
 747: LD_INT 26
 749: PPUSH
 750: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 754: LD_INT 10
 756: PPUSH
 757: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_STRING DH-Intro-1
 768: PPUSH
 769: CALL_OW 88
// ComHold ( all_units ) ;
 773: LD_OWVAR 3
 777: PPUSH
 778: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 782: LD_OWVAR 3
 786: PUSH
 787: LD_EXP 3
 791: DIFF
 792: PPUSH
 793: LD_EXP 3
 797: PPUSH
 798: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 802: LD_EXP 17
 806: PUSH
 807: LD_STRING 08_DealWithDoug
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 30
 817: AND
 818: IFFALSE 930
// begin ComTurnUnit ( Heike , Doug ) ;
 820: LD_EXP 3
 824: PPUSH
 825: LD_EXP 17
 829: PPUSH
 830: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 834: LD_EXP 17
 838: PPUSH
 839: LD_STRING DCa-Intro-a-2
 841: PPUSH
 842: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_STRING DH-Intro-a-3
 853: PPUSH
 854: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 858: LD_EXP 17
 862: PPUSH
 863: LD_STRING DCa-Intro-a-4
 865: PPUSH
 866: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 870: LD_EXP 3
 874: PPUSH
 875: LD_STRING DH-Intro-a-5
 877: PPUSH
 878: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 882: LD_EXP 17
 886: PPUSH
 887: LD_STRING DCa-Intro-a-6
 889: PPUSH
 890: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 894: LD_EXP 16
 898: PUSH
 899: LD_EXP 17
 903: ADD
 904: PUSH
 905: LD_EXP 15
 909: ADD
 910: PPUSH
 911: LD_INT 5
 913: PPUSH
 914: LD_INT 7
 916: PPUSH
 917: CALL_OW 111
// wait ( 0 0$01 ) ;
 921: LD_INT 35
 923: PPUSH
 924: CALL_OW 67
// end else
 928: GO 1032
// if Harris then
 930: LD_EXP 16
 934: IFFALSE 1032
// begin ComTurnUnit ( Heike , Harris ) ;
 936: LD_EXP 3
 940: PPUSH
 941: LD_EXP 16
 945: PPUSH
 946: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 950: LD_EXP 16
 954: PPUSH
 955: LD_STRING DJ-Intro-2
 957: PPUSH
 958: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING DH-Intro-3
 969: PPUSH
 970: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 974: LD_EXP 3
 978: PPUSH
 979: LD_STRING DH-Intro-4
 981: PPUSH
 982: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 986: LD_EXP 16
 990: PPUSH
 991: LD_STRING DJ-Intro-5
 993: PPUSH
 994: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 998: LD_EXP 16
1002: PUSH
1003: LD_EXP 17
1007: ADD
1008: PUSH
1009: LD_EXP 15
1013: ADD
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: LD_INT 7
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$01 ) ;
1025: LD_INT 35
1027: PPUSH
1028: CALL_OW 67
// end ; if Givi then
1032: LD_EXP 4
1036: IFFALSE 1131
// begin ComMoveUnit ( Givi , Heike ) ;
1038: LD_EXP 4
1042: PPUSH
1043: LD_EXP 3
1047: PPUSH
1048: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
1052: LD_INT 35
1054: PPUSH
1055: CALL_OW 67
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_EXP 4
1068: PPUSH
1069: CALL_OW 296
1073: PUSH
1074: LD_INT 4
1076: LESS
1077: PUSH
1078: LD_EXP 4
1082: PPUSH
1083: CALL_OW 314
1087: NOT
1088: OR
1089: IFFALSE 1052
// ComTurnUnit ( Givi , Heike ) ;
1091: LD_EXP 4
1095: PPUSH
1096: LD_EXP 3
1100: PPUSH
1101: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1105: LD_EXP 3
1109: PPUSH
1110: LD_EXP 4
1114: PPUSH
1115: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1119: LD_EXP 4
1123: PPUSH
1124: LD_STRING DG-Intro-7
1126: PPUSH
1127: CALL_OW 88
// end ; if not Givi then
1131: LD_EXP 4
1135: NOT
1136: IFFALSE 1153
// ComTurnXY ( Heike , 52 , 25 ) ;
1138: LD_EXP 3
1142: PPUSH
1143: LD_INT 52
1145: PPUSH
1146: LD_INT 25
1148: PPUSH
1149: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1153: LD_EXP 3
1157: PPUSH
1158: LD_STRING DH-Intro-7
1160: PPUSH
1161: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1165: LD_INT 22
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PPUSH
1175: CALL_OW 69
1179: PPUSH
1180: LD_INT 48
1182: PPUSH
1183: LD_INT 4
1185: PPUSH
1186: CALL_OW 111
// wait ( 0 0$3 ) ;
1190: LD_INT 105
1192: PPUSH
1193: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1197: LD_INT 74
1199: PPUSH
1200: LD_INT 79
1202: PPUSH
1203: LD_INT 2
1205: PPUSH
1206: LD_INT 16
1208: NEG
1209: PPUSH
1210: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1214: LD_INT 74
1216: PPUSH
1217: LD_INT 79
1219: PPUSH
1220: CALL_OW 84
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := nation_russian ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1240: LD_INT 22
1242: PPUSH
1243: LD_INT 3
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 100
1254: PPUSH
1255: CALL 6427 0 5
// un := CreateVehicle ;
1259: LD_ADDR_VAR 0 3
1263: PUSH
1264: CALL_OW 45
1268: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 76
1276: PPUSH
1277: LD_INT 87
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 8
1292: PPUSH
1293: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1297: CALL_OW 44
1301: PPUSH
1302: LD_VAR 0 3
1306: PPUSH
1307: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 67
1318: PPUSH
1319: LD_INT 56
1321: PPUSH
1322: CALL_OW 111
// wait ( 0 0$1 ) ;
1326: LD_INT 35
1328: PPUSH
1329: CALL_OW 67
// for i := 1 to 3 do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_INT 3
1345: PUSH
1346: FOR_TO
1347: IFFALSE 1407
// begin PrepareSoldier ( false , 8 ) ;
1349: LD_INT 0
1351: PPUSH
1352: LD_INT 8
1354: PPUSH
1355: CALL_OW 381
// un := CreateHuman ;
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: CALL_OW 44
1368: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1369: LD_VAR 0 3
1373: PPUSH
1374: LD_INT 76
1376: PPUSH
1377: LD_INT 87
1379: PPUSH
1380: LD_INT 2
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 67
1397: PPUSH
1398: LD_INT 56
1400: PPUSH
1401: CALL_OW 111
// end ;
1405: GO 1346
1407: POP
1408: POP
// wait ( 0 0$2 ) ;
1409: LD_INT 70
1411: PPUSH
1412: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1416: LD_INT 1
1418: PPUSH
1419: LD_STRING %_cont
1421: PPUSH
1422: CALL_OW 340
// Video ( false ) ;
1426: LD_INT 0
1428: PPUSH
1429: CALL 38880 0 1
// end ;
1433: LD_VAR 0 1
1437: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1438: LD_INT 5
1440: PPUSH
1441: LD_INT 22
1443: PUSH
1444: LD_INT 4
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PPUSH
1451: CALL_OW 70
1455: IFFALSE 1503
1457: GO 1459
1459: DISABLE
1460: LD_INT 0
1462: PPUSH
// begin enable ;
1463: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1464: LD_ADDR_VAR 0 1
1468: PUSH
1469: LD_INT 5
1471: PPUSH
1472: LD_INT 22
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PPUSH
1482: CALL_OW 70
1486: PUSH
1487: FOR_IN
1488: IFFALSE 1501
// RemoveUnit ( i ) ;
1490: LD_VAR 0 1
1494: PPUSH
1495: CALL_OW 64
1499: GO 1487
1501: POP
1502: POP
// end ;
1503: PPOPN 1
1505: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1506: LD_INT 6
1508: PPUSH
1509: LD_INT 22
1511: PUSH
1512: LD_INT 2
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 70
1523: IFFALSE 1571
1525: GO 1527
1527: DISABLE
1528: LD_INT 0
1530: PPUSH
// begin enable ;
1531: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1532: LD_ADDR_VAR 0 1
1536: PUSH
1537: LD_INT 6
1539: PPUSH
1540: LD_INT 22
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 70
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1569
// RemoveUnit ( i ) ;
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 64
1567: GO 1555
1569: POP
1570: POP
// end ; end_of_file
1571: PPOPN 1
1573: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1574: LD_INT 1
1576: PPUSH
1577: LD_STRING %_cont
1579: PPUSH
1580: CALL_OW 340
// end ; end_of_file
1584: PPOPN 1
1586: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
// if exist_mode then
1591: LD_VAR 0 2
1595: IFFALSE 1620
// unit := CreateCharacter ( prefix & ident ) else
1597: LD_ADDR_VAR 0 5
1601: PUSH
1602: LD_VAR 0 3
1606: PUSH
1607: LD_VAR 0 1
1611: STR
1612: PPUSH
1613: CALL_OW 34
1617: ST_TO_ADDR
1618: GO 1635
// unit := NewCharacter ( ident ) ;
1620: LD_ADDR_VAR 0 5
1624: PUSH
1625: LD_VAR 0 1
1629: PPUSH
1630: CALL_OW 25
1634: ST_TO_ADDR
// result := unit ;
1635: LD_ADDR_VAR 0 4
1639: PUSH
1640: LD_VAR 0 5
1644: ST_TO_ADDR
// end ;
1645: LD_VAR 0 4
1649: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1650: LD_INT 0
1652: PPUSH
1653: PPUSH
// if not side or not nation then
1654: LD_VAR 0 1
1658: NOT
1659: PUSH
1660: LD_VAR 0 2
1664: NOT
1665: OR
1666: IFFALSE 1670
// exit ;
1668: GO 2438
// case nation of nation_american :
1670: LD_VAR 0 2
1674: PUSH
1675: LD_INT 1
1677: DOUBLE
1678: EQUAL
1679: IFTRUE 1683
1681: GO 1897
1683: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1684: LD_ADDR_VAR 0 4
1688: PUSH
1689: LD_INT 35
1691: PUSH
1692: LD_INT 45
1694: PUSH
1695: LD_INT 46
1697: PUSH
1698: LD_INT 47
1700: PUSH
1701: LD_INT 82
1703: PUSH
1704: LD_INT 83
1706: PUSH
1707: LD_INT 84
1709: PUSH
1710: LD_INT 85
1712: PUSH
1713: LD_INT 86
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: LD_INT 6
1724: PUSH
1725: LD_INT 15
1727: PUSH
1728: LD_INT 16
1730: PUSH
1731: LD_INT 7
1733: PUSH
1734: LD_INT 12
1736: PUSH
1737: LD_INT 13
1739: PUSH
1740: LD_INT 10
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 20
1748: PUSH
1749: LD_INT 21
1751: PUSH
1752: LD_INT 22
1754: PUSH
1755: LD_INT 25
1757: PUSH
1758: LD_INT 32
1760: PUSH
1761: LD_INT 27
1763: PUSH
1764: LD_INT 36
1766: PUSH
1767: LD_INT 69
1769: PUSH
1770: LD_INT 39
1772: PUSH
1773: LD_INT 34
1775: PUSH
1776: LD_INT 40
1778: PUSH
1779: LD_INT 48
1781: PUSH
1782: LD_INT 49
1784: PUSH
1785: LD_INT 50
1787: PUSH
1788: LD_INT 51
1790: PUSH
1791: LD_INT 52
1793: PUSH
1794: LD_INT 53
1796: PUSH
1797: LD_INT 54
1799: PUSH
1800: LD_INT 55
1802: PUSH
1803: LD_INT 56
1805: PUSH
1806: LD_INT 57
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 59
1814: PUSH
1815: LD_INT 60
1817: PUSH
1818: LD_INT 61
1820: PUSH
1821: LD_INT 62
1823: PUSH
1824: LD_INT 80
1826: PUSH
1827: LD_INT 82
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 84
1835: PUSH
1836: LD_INT 85
1838: PUSH
1839: LD_INT 86
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: ST_TO_ADDR
1895: GO 2362
1897: LD_INT 2
1899: DOUBLE
1900: EQUAL
1901: IFTRUE 1905
1903: GO 2131
1905: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: LD_INT 35
1913: PUSH
1914: LD_INT 45
1916: PUSH
1917: LD_INT 46
1919: PUSH
1920: LD_INT 47
1922: PUSH
1923: LD_INT 82
1925: PUSH
1926: LD_INT 83
1928: PUSH
1929: LD_INT 84
1931: PUSH
1932: LD_INT 85
1934: PUSH
1935: LD_INT 87
1937: PUSH
1938: LD_INT 70
1940: PUSH
1941: LD_INT 1
1943: PUSH
1944: LD_INT 11
1946: PUSH
1947: LD_INT 3
1949: PUSH
1950: LD_INT 4
1952: PUSH
1953: LD_INT 5
1955: PUSH
1956: LD_INT 6
1958: PUSH
1959: LD_INT 15
1961: PUSH
1962: LD_INT 18
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: LD_INT 17
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 22
1982: PUSH
1983: LD_INT 72
1985: PUSH
1986: LD_INT 26
1988: PUSH
1989: LD_INT 69
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 40
1997: PUSH
1998: LD_INT 41
2000: PUSH
2001: LD_INT 42
2003: PUSH
2004: LD_INT 43
2006: PUSH
2007: LD_INT 48
2009: PUSH
2010: LD_INT 49
2012: PUSH
2013: LD_INT 50
2015: PUSH
2016: LD_INT 51
2018: PUSH
2019: LD_INT 52
2021: PUSH
2022: LD_INT 53
2024: PUSH
2025: LD_INT 54
2027: PUSH
2028: LD_INT 55
2030: PUSH
2031: LD_INT 56
2033: PUSH
2034: LD_INT 60
2036: PUSH
2037: LD_INT 61
2039: PUSH
2040: LD_INT 62
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 67
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: LD_INT 81
2054: PUSH
2055: LD_INT 82
2057: PUSH
2058: LD_INT 83
2060: PUSH
2061: LD_INT 84
2063: PUSH
2064: LD_INT 85
2066: PUSH
2067: LD_INT 87
2069: PUSH
2070: LD_INT 88
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
2129: GO 2362
2131: LD_INT 3
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2361
2139: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: LD_INT 46
2147: PUSH
2148: LD_INT 47
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: LD_INT 82
2159: PUSH
2160: LD_INT 83
2162: PUSH
2163: LD_INT 84
2165: PUSH
2166: LD_INT 85
2168: PUSH
2169: LD_INT 86
2171: PUSH
2172: LD_INT 11
2174: PUSH
2175: LD_INT 9
2177: PUSH
2178: LD_INT 20
2180: PUSH
2181: LD_INT 19
2183: PUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 24
2189: PUSH
2190: LD_INT 22
2192: PUSH
2193: LD_INT 25
2195: PUSH
2196: LD_INT 28
2198: PUSH
2199: LD_INT 29
2201: PUSH
2202: LD_INT 30
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 37
2210: PUSH
2211: LD_INT 38
2213: PUSH
2214: LD_INT 32
2216: PUSH
2217: LD_INT 27
2219: PUSH
2220: LD_INT 33
2222: PUSH
2223: LD_INT 69
2225: PUSH
2226: LD_INT 39
2228: PUSH
2229: LD_INT 34
2231: PUSH
2232: LD_INT 40
2234: PUSH
2235: LD_INT 71
2237: PUSH
2238: LD_INT 23
2240: PUSH
2241: LD_INT 44
2243: PUSH
2244: LD_INT 48
2246: PUSH
2247: LD_INT 49
2249: PUSH
2250: LD_INT 50
2252: PUSH
2253: LD_INT 51
2255: PUSH
2256: LD_INT 52
2258: PUSH
2259: LD_INT 53
2261: PUSH
2262: LD_INT 54
2264: PUSH
2265: LD_INT 55
2267: PUSH
2268: LD_INT 56
2270: PUSH
2271: LD_INT 57
2273: PUSH
2274: LD_INT 58
2276: PUSH
2277: LD_INT 59
2279: PUSH
2280: LD_INT 63
2282: PUSH
2283: LD_INT 64
2285: PUSH
2286: LD_INT 65
2288: PUSH
2289: LD_INT 82
2291: PUSH
2292: LD_INT 83
2294: PUSH
2295: LD_INT 84
2297: PUSH
2298: LD_INT 85
2300: PUSH
2301: LD_INT 86
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
2359: GO 2362
2361: POP
// if state > - 1 and state < 3 then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: NEG
2370: GREATER
2371: PUSH
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 3
2379: LESS
2380: AND
2381: IFFALSE 2438
// for i in result do
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: FOR_IN
2394: IFFALSE 2436
// if GetTech ( i , side ) <> state then
2396: LD_VAR 0 5
2400: PPUSH
2401: LD_VAR 0 1
2405: PPUSH
2406: CALL_OW 321
2410: PUSH
2411: LD_VAR 0 3
2415: NONEQUAL
2416: IFFALSE 2434
// result := result diff i ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_VAR 0 4
2427: PUSH
2428: LD_VAR 0 5
2432: DIFF
2433: ST_TO_ADDR
2434: GO 2393
2436: POP
2437: POP
// end ;
2438: LD_VAR 0 4
2442: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2443: LD_INT 0
2445: PPUSH
2446: PPUSH
2447: PPUSH
// result := true ;
2448: LD_ADDR_VAR 0 3
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2456: LD_ADDR_VAR 0 5
2460: PUSH
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 480
2470: ST_TO_ADDR
// if not tmp then
2471: LD_VAR 0 5
2475: NOT
2476: IFFALSE 2480
// exit ;
2478: GO 2529
// for i in tmp do
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 5
2489: PUSH
2490: FOR_IN
2491: IFFALSE 2527
// if GetTech ( i , side ) <> state_researched then
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 321
2507: PUSH
2508: LD_INT 2
2510: NONEQUAL
2511: IFFALSE 2525
// begin result := false ;
2513: LD_ADDR_VAR 0 3
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
// exit ;
2521: POP
2522: POP
2523: GO 2529
// end ;
2525: GO 2490
2527: POP
2528: POP
// end ;
2529: LD_VAR 0 3
2533: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2549: LD_VAR 0 1
2553: NOT
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 257
2564: PUSH
2565: LD_INT 9
2567: NONEQUAL
2568: OR
2569: IFFALSE 2573
// exit ;
2571: GO 3146
// side := GetSide ( unit ) ;
2573: LD_ADDR_VAR 0 9
2577: PUSH
2578: LD_VAR 0 1
2582: PPUSH
2583: CALL_OW 255
2587: ST_TO_ADDR
// tech_space := tech_spacanom ;
2588: LD_ADDR_VAR 0 12
2592: PUSH
2593: LD_INT 29
2595: ST_TO_ADDR
// tech_time := tech_taurad ;
2596: LD_ADDR_VAR 0 13
2600: PUSH
2601: LD_INT 28
2603: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2604: LD_ADDR_VAR 0 11
2608: PUSH
2609: LD_VAR 0 1
2613: PPUSH
2614: CALL_OW 310
2618: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2619: LD_VAR 0 11
2623: PPUSH
2624: CALL_OW 247
2628: PUSH
2629: LD_INT 2
2631: EQUAL
2632: IFFALSE 2636
// exit ;
2634: GO 3146
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2636: LD_ADDR_VAR 0 8
2640: PUSH
2641: LD_INT 81
2643: PUSH
2644: LD_VAR 0 9
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 21
2658: PUSH
2659: LD_INT 3
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: ST_TO_ADDR
// if not tmp then
2679: LD_VAR 0 8
2683: NOT
2684: IFFALSE 2688
// exit ;
2686: GO 3146
// if in_unit then
2688: LD_VAR 0 11
2692: IFFALSE 2716
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2694: LD_ADDR_VAR 0 10
2698: PUSH
2699: LD_VAR 0 8
2703: PPUSH
2704: LD_VAR 0 11
2708: PPUSH
2709: CALL_OW 74
2713: ST_TO_ADDR
2714: GO 2736
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2716: LD_ADDR_VAR 0 10
2720: PUSH
2721: LD_VAR 0 8
2725: PPUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 74
2735: ST_TO_ADDR
// if not enemy then
2736: LD_VAR 0 10
2740: NOT
2741: IFFALSE 2745
// exit ;
2743: GO 3146
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2745: LD_VAR 0 11
2749: PUSH
2750: LD_VAR 0 11
2754: PPUSH
2755: LD_VAR 0 10
2759: PPUSH
2760: CALL_OW 296
2764: PUSH
2765: LD_INT 13
2767: GREATER
2768: AND
2769: PUSH
2770: LD_VAR 0 1
2774: PPUSH
2775: LD_VAR 0 10
2779: PPUSH
2780: CALL_OW 296
2784: PUSH
2785: LD_INT 12
2787: GREATER
2788: OR
2789: IFFALSE 2793
// exit ;
2791: GO 3146
// missile := [ 1 ] ;
2793: LD_ADDR_VAR 0 14
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2804: LD_VAR 0 9
2808: PPUSH
2809: LD_VAR 0 12
2813: PPUSH
2814: CALL_OW 325
2818: IFFALSE 2847
// missile := Replace ( missile , missile + 1 , 2 ) ;
2820: LD_ADDR_VAR 0 14
2824: PUSH
2825: LD_VAR 0 14
2829: PPUSH
2830: LD_VAR 0 14
2834: PUSH
2835: LD_INT 1
2837: PLUS
2838: PPUSH
2839: LD_INT 2
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2847: LD_VAR 0 9
2851: PPUSH
2852: LD_VAR 0 13
2856: PPUSH
2857: CALL_OW 325
2861: PUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 255
2871: PPUSH
2872: LD_VAR 0 13
2876: PPUSH
2877: CALL_OW 325
2881: NOT
2882: AND
2883: IFFALSE 2912
// missile := Replace ( missile , missile + 1 , 3 ) ;
2885: LD_ADDR_VAR 0 14
2889: PUSH
2890: LD_VAR 0 14
2894: PPUSH
2895: LD_VAR 0 14
2899: PUSH
2900: LD_INT 1
2902: PLUS
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: CALL_OW 1
2911: ST_TO_ADDR
// if missile < 2 then
2912: LD_VAR 0 14
2916: PUSH
2917: LD_INT 2
2919: LESS
2920: IFFALSE 2924
// exit ;
2922: GO 3146
// x := GetX ( enemy ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_VAR 0 10
2933: PPUSH
2934: CALL_OW 250
2938: ST_TO_ADDR
// y := GetY ( enemy ) ;
2939: LD_ADDR_VAR 0 5
2943: PUSH
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 251
2953: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2954: LD_ADDR_VAR 0 6
2958: PUSH
2959: LD_VAR 0 4
2963: PUSH
2964: LD_INT 1
2966: NEG
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 12
2975: PLUS
2976: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2977: LD_ADDR_VAR 0 7
2981: PUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 1
2989: NEG
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: CALL_OW 12
2998: PLUS
2999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3000: LD_VAR 0 6
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: CALL_OW 488
3014: NOT
3015: IFFALSE 3037
// begin _x := x ;
3017: LD_ADDR_VAR 0 6
3021: PUSH
3022: LD_VAR 0 4
3026: ST_TO_ADDR
// _y := y ;
3027: LD_ADDR_VAR 0 7
3031: PUSH
3032: LD_VAR 0 5
3036: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 1
3044: PPUSH
3045: LD_VAR 0 14
3049: PPUSH
3050: CALL_OW 12
3054: ST_TO_ADDR
// case i of 1 :
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: DOUBLE
3063: EQUAL
3064: IFTRUE 3068
3066: GO 3085
3068: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3069: LD_VAR 0 1
3073: PPUSH
3074: LD_VAR 0 10
3078: PPUSH
3079: CALL_OW 115
3083: GO 3146
3085: LD_INT 2
3087: DOUBLE
3088: EQUAL
3089: IFTRUE 3093
3091: GO 3115
3093: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_VAR 0 6
3103: PPUSH
3104: LD_VAR 0 7
3108: PPUSH
3109: CALL_OW 153
3113: GO 3146
3115: LD_INT 3
3117: DOUBLE
3118: EQUAL
3119: IFTRUE 3123
3121: GO 3145
3123: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 6
3133: PPUSH
3134: LD_VAR 0 7
3138: PPUSH
3139: CALL_OW 154
3143: GO 3146
3145: POP
// end ;
3146: LD_VAR 0 2
3150: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
// if not unit or not building then
3159: LD_VAR 0 1
3163: NOT
3164: PUSH
3165: LD_VAR 0 2
3169: NOT
3170: OR
3171: IFFALSE 3175
// exit ;
3173: GO 3333
// x := GetX ( building ) ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_VAR 0 2
3184: PPUSH
3185: CALL_OW 250
3189: ST_TO_ADDR
// y := GetY ( building ) ;
3190: LD_ADDR_VAR 0 6
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 251
3204: ST_TO_ADDR
// for i = 0 to 5 do
3205: LD_ADDR_VAR 0 4
3209: PUSH
3210: DOUBLE
3211: LD_INT 0
3213: DEC
3214: ST_TO_ADDR
3215: LD_INT 5
3217: PUSH
3218: FOR_TO
3219: IFFALSE 3331
// begin _x := ShiftX ( x , i , 3 ) ;
3221: LD_ADDR_VAR 0 7
3225: PUSH
3226: LD_VAR 0 5
3230: PPUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: CALL_OW 272
3243: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3244: LD_ADDR_VAR 0 8
3248: PUSH
3249: LD_VAR 0 6
3253: PPUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: CALL_OW 273
3266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3267: LD_VAR 0 7
3271: PPUSH
3272: LD_VAR 0 8
3276: PPUSH
3277: CALL_OW 488
3281: NOT
3282: IFFALSE 3286
// continue ;
3284: GO 3218
// if HexInfo ( _x , _y ) = 0 then
3286: LD_VAR 0 7
3290: PPUSH
3291: LD_VAR 0 8
3295: PPUSH
3296: CALL_OW 428
3300: PUSH
3301: LD_INT 0
3303: EQUAL
3304: IFFALSE 3329
// begin ComMoveXY ( unit , _x , _y ) ;
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 7
3315: PPUSH
3316: LD_VAR 0 8
3320: PPUSH
3321: CALL_OW 111
// exit ;
3325: POP
3326: POP
3327: GO 3333
// end ; end ;
3329: GO 3218
3331: POP
3332: POP
// end ;
3333: LD_VAR 0 3
3337: RET
// export function ScanBase ( side , base_area ) ; begin
3338: LD_INT 0
3340: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_INT 81
3353: PUSH
3354: LD_VAR 0 1
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 70
3367: ST_TO_ADDR
// end ;
3368: LD_VAR 0 3
3372: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
3377: PPUSH
3378: PPUSH
// result := false ;
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// side := GetSide ( unit ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 1
3396: PPUSH
3397: CALL_OW 255
3401: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3402: LD_ADDR_VAR 0 4
3406: PUSH
3407: LD_VAR 0 1
3411: PPUSH
3412: CALL_OW 248
3416: ST_TO_ADDR
// case nat of 1 :
3417: LD_VAR 0 4
3421: PUSH
3422: LD_INT 1
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3441
3430: POP
// tech := tech_lassight ; 2 :
3431: LD_ADDR_VAR 0 5
3435: PUSH
3436: LD_INT 12
3438: ST_TO_ADDR
3439: GO 3480
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3460
3449: POP
// tech := tech_mortar ; 3 :
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_INT 41
3457: ST_TO_ADDR
3458: GO 3480
3460: LD_INT 3
3462: DOUBLE
3463: EQUAL
3464: IFTRUE 3468
3466: GO 3479
3468: POP
// tech := tech_bazooka ; end ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_INT 44
3476: ST_TO_ADDR
3477: GO 3480
3479: POP
// if Researched ( side , tech ) then
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_VAR 0 5
3489: PPUSH
3490: CALL_OW 325
3494: IFFALSE 3521
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 8
3506: PUSH
3507: LD_INT 9
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_VAR 0 4
3519: ARRAY
3520: ST_TO_ADDR
// end ;
3521: LD_VAR 0 2
3525: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3526: LD_INT 0
3528: PPUSH
3529: PPUSH
3530: PPUSH
// if not mines then
3531: LD_VAR 0 2
3535: NOT
3536: IFFALSE 3540
// exit ;
3538: GO 3684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3540: LD_ADDR_VAR 0 5
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_VAR 0 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_INT 21
3562: PUSH
3563: LD_INT 3
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: ST_TO_ADDR
// for i in mines do
3583: LD_ADDR_VAR 0 4
3587: PUSH
3588: LD_VAR 0 2
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3682
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 4
3609: PUSH
3610: LD_INT 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 458
3618: NOT
3619: IFFALSE 3623
// continue ;
3621: GO 3593
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3623: LD_VAR 0 4
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 4
3636: PUSH
3637: LD_INT 2
3639: ARRAY
3640: PPUSH
3641: CALL_OW 428
3645: PUSH
3646: LD_VAR 0 5
3650: IN
3651: IFFALSE 3680
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: LD_VAR 0 4
3666: PUSH
3667: LD_INT 2
3669: ARRAY
3670: PPUSH
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 456
// end ;
3680: GO 3593
3682: POP
3683: POP
// end ;
3684: LD_VAR 0 3
3688: RET
// export function Count ( array ) ; begin
3689: LD_INT 0
3691: PPUSH
// result := array + 0 ;
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: LD_VAR 0 1
3701: PUSH
3702: LD_INT 0
3704: PLUS
3705: ST_TO_ADDR
// end ;
3706: LD_VAR 0 2
3710: RET
// export function IsEmpty ( building ) ; begin
3711: LD_INT 0
3713: PPUSH
// if not building then
3714: LD_VAR 0 1
3718: NOT
3719: IFFALSE 3723
// exit ;
3721: GO 3766
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3723: LD_ADDR_VAR 0 2
3727: PUSH
3728: LD_VAR 0 1
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 255
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 58
3752: PUSH
3753: EMPTY
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: IN
3765: ST_TO_ADDR
// end ;
3766: LD_VAR 0 2
3770: RET
// export function IsNotFull ( building ) ; var places ; begin
3771: LD_INT 0
3773: PPUSH
3774: PPUSH
// if not building then
3775: LD_VAR 0 1
3779: NOT
3780: IFFALSE 3784
// exit ;
3782: GO 3812
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: LD_VAR 0 1
3793: PPUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 62
3799: PUSH
3800: EMPTY
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PPUSH
3807: CALL_OW 72
3811: ST_TO_ADDR
// end ;
3812: LD_VAR 0 2
3816: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3817: LD_INT 0
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// tmp := [ ] ;
3823: LD_ADDR_VAR 0 3
3827: PUSH
3828: EMPTY
3829: ST_TO_ADDR
// list := [ ] ;
3830: LD_ADDR_VAR 0 5
3834: PUSH
3835: EMPTY
3836: ST_TO_ADDR
// for i = 16 to 25 do
3837: LD_ADDR_VAR 0 4
3841: PUSH
3842: DOUBLE
3843: LD_INT 16
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 25
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3924
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_INT 22
3865: PUSH
3866: LD_VAR 0 1
3870: PPUSH
3871: CALL_OW 255
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_VAR 0 1
3887: PUSH
3888: LD_INT 6
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 30
3898: PUSH
3899: LD_VAR 0 4
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: PPUSH
3916: CALL_OW 69
3920: ADD
3921: ST_TO_ADDR
3922: GO 3850
3924: POP
3925: POP
// for i = 1 to tmp do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: DOUBLE
3932: LD_INT 1
3934: DEC
3935: ST_TO_ADDR
3936: LD_VAR 0 3
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4030
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3944: LD_ADDR_VAR 0 5
3948: PUSH
3949: LD_VAR 0 5
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 4
3963: ARRAY
3964: PPUSH
3965: CALL_OW 266
3969: PUSH
3970: LD_VAR 0 3
3974: PUSH
3975: LD_VAR 0 4
3979: ARRAY
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 3
3990: PUSH
3991: LD_VAR 0 4
3995: ARRAY
3996: PPUSH
3997: CALL_OW 251
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: LD_VAR 0 4
4011: ARRAY
4012: PPUSH
4013: CALL_OW 254
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: ADD
4027: ST_TO_ADDR
4028: GO 3941
4030: POP
4031: POP
// result := list ;
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_VAR 0 5
4041: ST_TO_ADDR
// end ;
4042: LD_VAR 0 2
4046: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4047: LD_INT 0
4049: PPUSH
4050: PPUSH
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
// if not factory then
4056: LD_VAR 0 1
4060: NOT
4061: IFFALSE 4065
// exit ;
4063: GO 4658
// if control = control_apeman then
4065: LD_VAR 0 4
4069: PUSH
4070: LD_INT 5
4072: EQUAL
4073: IFFALSE 4182
// begin tmp := UnitsInside ( factory ) ;
4075: LD_ADDR_VAR 0 8
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 313
4089: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4090: LD_VAR 0 8
4094: PPUSH
4095: LD_INT 25
4097: PUSH
4098: LD_INT 12
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: NOT
4110: IFFALSE 4120
// control := control_manual ;
4112: LD_ADDR_VAR 0 4
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4120: LD_ADDR_VAR 0 8
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: CALL 3817 0 1
4134: ST_TO_ADDR
// if tmp then
4135: LD_VAR 0 8
4139: IFFALSE 4182
// begin for i in tmp do
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_VAR 0 8
4150: PUSH
4151: FOR_IN
4152: IFFALSE 4180
// if i [ 1 ] = b_ext_radio then
4154: LD_VAR 0 7
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_INT 22
4165: EQUAL
4166: IFFALSE 4178
// begin control := control_remote ;
4168: LD_ADDR_VAR 0 4
4172: PUSH
4173: LD_INT 2
4175: ST_TO_ADDR
// break ;
4176: GO 4180
// end ;
4178: GO 4151
4180: POP
4181: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_VAR 0 4
4201: PPUSH
4202: LD_VAR 0 5
4206: PPUSH
4207: CALL_OW 448
4211: IFFALSE 4246
// begin result := [ chassis , engine , control , weapon ] ;
4213: LD_ADDR_VAR 0 6
4217: PUSH
4218: LD_VAR 0 2
4222: PUSH
4223: LD_VAR 0 3
4227: PUSH
4228: LD_VAR 0 4
4232: PUSH
4233: LD_VAR 0 5
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: ST_TO_ADDR
// exit ;
4244: GO 4658
// end ; _chassis := AvailableChassisList ( factory ) ;
4246: LD_ADDR_VAR 0 9
4250: PUSH
4251: LD_VAR 0 1
4255: PPUSH
4256: CALL_OW 475
4260: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4261: LD_ADDR_VAR 0 11
4265: PUSH
4266: LD_VAR 0 1
4270: PPUSH
4271: CALL_OW 476
4275: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4276: LD_ADDR_VAR 0 12
4280: PUSH
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 477
4290: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4291: LD_ADDR_VAR 0 10
4295: PUSH
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 478
4305: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4306: LD_VAR 0 9
4310: NOT
4311: PUSH
4312: LD_VAR 0 11
4316: NOT
4317: OR
4318: PUSH
4319: LD_VAR 0 12
4323: NOT
4324: OR
4325: PUSH
4326: LD_VAR 0 10
4330: NOT
4331: OR
4332: IFFALSE 4367
// begin result := [ chassis , engine , control , weapon ] ;
4334: LD_ADDR_VAR 0 6
4338: PUSH
4339: LD_VAR 0 2
4343: PUSH
4344: LD_VAR 0 3
4348: PUSH
4349: LD_VAR 0 4
4353: PUSH
4354: LD_VAR 0 5
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// exit ;
4365: GO 4658
// end ; if not chassis in _chassis then
4367: LD_VAR 0 2
4371: PUSH
4372: LD_VAR 0 9
4376: IN
4377: NOT
4378: IFFALSE 4404
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_VAR 0 9
4389: PUSH
4390: LD_INT 1
4392: PPUSH
4393: LD_VAR 0 9
4397: PPUSH
4398: CALL_OW 12
4402: ARRAY
4403: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4404: LD_VAR 0 2
4408: PPUSH
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL 4663 0 2
4418: NOT
4419: IFFALSE 4478
// repeat engine := _engine [ 1 ] ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: LD_VAR 0 11
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4435: LD_ADDR_VAR 0 11
4439: PUSH
4440: LD_VAR 0 11
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL_OW 3
4452: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4453: LD_VAR 0 2
4457: PPUSH
4458: LD_VAR 0 3
4462: PPUSH
4463: CALL 4663 0 2
4467: PUSH
4468: LD_VAR 0 11
4472: PUSH
4473: EMPTY
4474: EQUAL
4475: OR
4476: IFFALSE 4421
// if not control in _control then
4478: LD_VAR 0 4
4482: PUSH
4483: LD_VAR 0 12
4487: IN
4488: NOT
4489: IFFALSE 4515
// control := _control [ rand ( 1 , _control ) ] ;
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_VAR 0 12
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_VAR 0 12
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4515: LD_VAR 0 2
4519: PPUSH
4520: LD_VAR 0 5
4524: PPUSH
4525: CALL 4883 0 2
4529: NOT
4530: IFFALSE 4589
// repeat weapon := _weapon [ 1 ] ;
4532: LD_ADDR_VAR 0 5
4536: PUSH
4537: LD_VAR 0 10
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4546: LD_ADDR_VAR 0 10
4550: PUSH
4551: LD_VAR 0 10
4555: PPUSH
4556: LD_INT 1
4558: PPUSH
4559: CALL_OW 3
4563: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4564: LD_VAR 0 2
4568: PPUSH
4569: LD_VAR 0 5
4573: PPUSH
4574: CALL 4883 0 2
4578: PUSH
4579: LD_VAR 0 10
4583: PUSH
4584: EMPTY
4585: EQUAL
4586: OR
4587: IFFALSE 4532
// result := [ ] ;
4589: LD_ADDR_VAR 0 6
4593: PUSH
4594: EMPTY
4595: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_VAR 0 2
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: LD_VAR 0 4
4615: PPUSH
4616: LD_VAR 0 5
4620: PPUSH
4621: CALL_OW 448
4625: IFFALSE 4658
// result := [ chassis , engine , control , weapon ] ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_VAR 0 2
4636: PUSH
4637: LD_VAR 0 3
4641: PUSH
4642: LD_VAR 0 4
4646: PUSH
4647: LD_VAR 0 5
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// end ;
4658: LD_VAR 0 6
4662: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4663: LD_INT 0
4665: PPUSH
// if not chassis or not engine then
4666: LD_VAR 0 1
4670: NOT
4671: PUSH
4672: LD_VAR 0 2
4676: NOT
4677: OR
4678: IFFALSE 4682
// exit ;
4680: GO 4878
// case engine of engine_solar :
4682: LD_VAR 0 2
4686: PUSH
4687: LD_INT 2
4689: DOUBLE
4690: EQUAL
4691: IFTRUE 4695
4693: GO 4733
4695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: LD_INT 11
4703: PUSH
4704: LD_INT 12
4706: PUSH
4707: LD_INT 13
4709: PUSH
4710: LD_INT 14
4712: PUSH
4713: LD_INT 1
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: LD_INT 3
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: ST_TO_ADDR
4731: GO 4862
4733: LD_INT 1
4735: DOUBLE
4736: EQUAL
4737: IFTRUE 4741
4739: GO 4803
4741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_INT 11
4749: PUSH
4750: LD_INT 12
4752: PUSH
4753: LD_INT 13
4755: PUSH
4756: LD_INT 14
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 4
4770: PUSH
4771: LD_INT 5
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 23
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 24
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 4862
4803: LD_INT 3
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4861
4811: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 13
4819: PUSH
4820: LD_INT 14
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: LD_INT 3
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: LD_INT 5
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 23
4843: PUSH
4844: LD_INT 24
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
4859: GO 4862
4861: POP
// result := ( chassis in result ) ;
4862: LD_ADDR_VAR 0 3
4866: PUSH
4867: LD_VAR 0 1
4871: PUSH
4872: LD_VAR 0 3
4876: IN
4877: ST_TO_ADDR
// end ;
4878: LD_VAR 0 3
4882: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4883: LD_INT 0
4885: PPUSH
// if not chassis or not weapon then
4886: LD_VAR 0 1
4890: NOT
4891: PUSH
4892: LD_VAR 0 2
4896: NOT
4897: OR
4898: IFFALSE 4902
// exit ;
4900: GO 5962
// case weapon of us_machine_gun :
4902: LD_VAR 0 2
4906: PUSH
4907: LD_INT 2
4909: DOUBLE
4910: EQUAL
4911: IFTRUE 4915
4913: GO 4945
4915: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_INT 1
4923: PUSH
4924: LD_INT 2
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: ST_TO_ADDR
4943: GO 5946
4945: LD_INT 3
4947: DOUBLE
4948: EQUAL
4949: IFTRUE 4953
4951: GO 4983
4953: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4954: LD_ADDR_VAR 0 3
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: LD_INT 2
4964: PUSH
4965: LD_INT 3
4967: PUSH
4968: LD_INT 4
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: ST_TO_ADDR
4981: GO 5946
4983: LD_INT 11
4985: DOUBLE
4986: EQUAL
4987: IFTRUE 4991
4989: GO 5021
4991: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4992: LD_ADDR_VAR 0 3
4996: PUSH
4997: LD_INT 1
4999: PUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: LD_INT 4
5008: PUSH
5009: LD_INT 5
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: ST_TO_ADDR
5019: GO 5946
5021: LD_INT 4
5023: DOUBLE
5024: EQUAL
5025: IFTRUE 5029
5027: GO 5055
5029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5030: LD_ADDR_VAR 0 3
5034: PUSH
5035: LD_INT 2
5037: PUSH
5038: LD_INT 3
5040: PUSH
5041: LD_INT 4
5043: PUSH
5044: LD_INT 5
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 5946
5055: LD_INT 5
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5089
5063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5064: LD_ADDR_VAR 0 3
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 4
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: ST_TO_ADDR
5087: GO 5946
5089: LD_INT 9
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5097
5095: GO 5123
5097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5098: LD_ADDR_VAR 0 3
5102: PUSH
5103: LD_INT 2
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: LD_INT 5
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: ST_TO_ADDR
5121: GO 5946
5123: LD_INT 7
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5157
5131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 4
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: ST_TO_ADDR
5155: GO 5946
5157: LD_INT 12
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5191
5165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: ST_TO_ADDR
5189: GO 5946
5191: LD_INT 13
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5199
5197: GO 5225
5199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_INT 3
5210: PUSH
5211: LD_INT 4
5213: PUSH
5214: LD_INT 5
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
5223: GO 5946
5225: LD_INT 14
5227: DOUBLE
5228: EQUAL
5229: IFTRUE 5233
5231: GO 5251
5233: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5234: LD_ADDR_VAR 0 3
5238: PUSH
5239: LD_INT 4
5241: PUSH
5242: LD_INT 5
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: ST_TO_ADDR
5249: GO 5946
5251: LD_INT 6
5253: DOUBLE
5254: EQUAL
5255: IFTRUE 5259
5257: GO 5277
5259: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_INT 4
5267: PUSH
5268: LD_INT 5
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: ST_TO_ADDR
5275: GO 5946
5277: LD_INT 10
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5303
5285: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 5
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: ST_TO_ADDR
5301: GO 5946
5303: LD_INT 22
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5337
5311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: LD_INT 11
5319: PUSH
5320: LD_INT 12
5322: PUSH
5323: LD_INT 13
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: ST_TO_ADDR
5335: GO 5946
5337: LD_INT 23
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5371
5345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_INT 11
5353: PUSH
5354: LD_INT 12
5356: PUSH
5357: LD_INT 13
5359: PUSH
5360: LD_INT 14
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: ST_TO_ADDR
5369: GO 5946
5371: LD_INT 24
5373: DOUBLE
5374: EQUAL
5375: IFTRUE 5379
5377: GO 5405
5379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5380: LD_ADDR_VAR 0 3
5384: PUSH
5385: LD_INT 11
5387: PUSH
5388: LD_INT 12
5390: PUSH
5391: LD_INT 13
5393: PUSH
5394: LD_INT 14
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: ST_TO_ADDR
5403: GO 5946
5405: LD_INT 30
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5439
5413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: LD_INT 11
5421: PUSH
5422: LD_INT 12
5424: PUSH
5425: LD_INT 13
5427: PUSH
5428: LD_INT 14
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ST_TO_ADDR
5437: GO 5946
5439: LD_INT 25
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5465
5447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: LD_INT 13
5455: PUSH
5456: LD_INT 14
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: ST_TO_ADDR
5463: GO 5946
5465: LD_INT 27
5467: DOUBLE
5468: EQUAL
5469: IFTRUE 5473
5471: GO 5491
5473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_INT 13
5481: PUSH
5482: LD_INT 14
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: ST_TO_ADDR
5489: GO 5946
5491: LD_INT 92
5493: DOUBLE
5494: EQUAL
5495: IFTRUE 5499
5497: GO 5525
5499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: LD_INT 11
5507: PUSH
5508: LD_INT 12
5510: PUSH
5511: LD_INT 13
5513: PUSH
5514: LD_INT 14
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
5523: GO 5946
5525: LD_INT 28
5527: DOUBLE
5528: EQUAL
5529: IFTRUE 5533
5531: GO 5551
5533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5534: LD_ADDR_VAR 0 3
5538: PUSH
5539: LD_INT 13
5541: PUSH
5542: LD_INT 14
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: ST_TO_ADDR
5549: GO 5946
5551: LD_INT 29
5553: DOUBLE
5554: EQUAL
5555: IFTRUE 5559
5557: GO 5577
5559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5560: LD_ADDR_VAR 0 3
5564: PUSH
5565: LD_INT 13
5567: PUSH
5568: LD_INT 14
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: ST_TO_ADDR
5575: GO 5946
5577: LD_INT 31
5579: DOUBLE
5580: EQUAL
5581: IFTRUE 5585
5583: GO 5603
5585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_INT 13
5593: PUSH
5594: LD_INT 14
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: ST_TO_ADDR
5601: GO 5946
5603: LD_INT 26
5605: DOUBLE
5606: EQUAL
5607: IFTRUE 5611
5609: GO 5629
5611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5612: LD_ADDR_VAR 0 3
5616: PUSH
5617: LD_INT 13
5619: PUSH
5620: LD_INT 14
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: ST_TO_ADDR
5627: GO 5946
5629: LD_INT 42
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5637
5635: GO 5663
5637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5638: LD_ADDR_VAR 0 3
5642: PUSH
5643: LD_INT 21
5645: PUSH
5646: LD_INT 22
5648: PUSH
5649: LD_INT 23
5651: PUSH
5652: LD_INT 24
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
5661: GO 5946
5663: LD_INT 43
5665: DOUBLE
5666: EQUAL
5667: IFTRUE 5671
5669: GO 5697
5671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5672: LD_ADDR_VAR 0 3
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 24
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: ST_TO_ADDR
5695: GO 5946
5697: LD_INT 44
5699: DOUBLE
5700: EQUAL
5701: IFTRUE 5705
5703: GO 5731
5705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5706: LD_ADDR_VAR 0 3
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 22
5716: PUSH
5717: LD_INT 23
5719: PUSH
5720: LD_INT 24
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
5729: GO 5946
5731: LD_INT 45
5733: DOUBLE
5734: EQUAL
5735: IFTRUE 5739
5737: GO 5765
5739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5740: LD_ADDR_VAR 0 3
5744: PUSH
5745: LD_INT 21
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 23
5753: PUSH
5754: LD_INT 24
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: ST_TO_ADDR
5763: GO 5946
5765: LD_INT 49
5767: DOUBLE
5768: EQUAL
5769: IFTRUE 5773
5771: GO 5799
5773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 22
5784: PUSH
5785: LD_INT 23
5787: PUSH
5788: LD_INT 24
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: ST_TO_ADDR
5797: GO 5946
5799: LD_INT 51
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5833
5807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 22
5818: PUSH
5819: LD_INT 23
5821: PUSH
5822: LD_INT 24
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: ST_TO_ADDR
5831: GO 5946
5833: LD_INT 52
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5841
5839: GO 5867
5841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 23
5855: PUSH
5856: LD_INT 24
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 5946
5867: LD_INT 53
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5893
5875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: LD_INT 23
5883: PUSH
5884: LD_INT 24
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: ST_TO_ADDR
5891: GO 5946
5893: LD_INT 46
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5919
5901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 23
5909: PUSH
5910: LD_INT 24
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
5917: GO 5946
5919: LD_INT 47
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5945
5927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 23
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: ST_TO_ADDR
5943: GO 5946
5945: POP
// result := ( chassis in result ) ;
5946: LD_ADDR_VAR 0 3
5950: PUSH
5951: LD_VAR 0 1
5955: PUSH
5956: LD_VAR 0 3
5960: IN
5961: ST_TO_ADDR
// end ;
5962: LD_VAR 0 3
5966: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
// result := array ;
5976: LD_ADDR_VAR 0 5
5980: PUSH
5981: LD_VAR 0 1
5985: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5986: LD_VAR 0 1
5990: NOT
5991: PUSH
5992: LD_VAR 0 2
5996: NOT
5997: OR
5998: PUSH
5999: LD_VAR 0 3
6003: NOT
6004: OR
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_VAR 0 1
6015: GREATER
6016: OR
6017: PUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_VAR 0 1
6027: GREATER
6028: OR
6029: IFFALSE 6033
// exit ;
6031: GO 6329
// if direction then
6033: LD_VAR 0 4
6037: IFFALSE 6101
// begin d := 1 ;
6039: LD_ADDR_VAR 0 9
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if i_from > i_to then
6047: LD_VAR 0 2
6051: PUSH
6052: LD_VAR 0 3
6056: GREATER
6057: IFFALSE 6083
// length := ( array - i_from ) + i_to else
6059: LD_ADDR_VAR 0 11
6063: PUSH
6064: LD_VAR 0 1
6068: PUSH
6069: LD_VAR 0 2
6073: MINUS
6074: PUSH
6075: LD_VAR 0 3
6079: PLUS
6080: ST_TO_ADDR
6081: GO 6099
// length := i_to - i_from ;
6083: LD_ADDR_VAR 0 11
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 2
6097: MINUS
6098: ST_TO_ADDR
// end else
6099: GO 6162
// begin d := - 1 ;
6101: LD_ADDR_VAR 0 9
6105: PUSH
6106: LD_INT 1
6108: NEG
6109: ST_TO_ADDR
// if i_from > i_to then
6110: LD_VAR 0 2
6114: PUSH
6115: LD_VAR 0 3
6119: GREATER
6120: IFFALSE 6140
// length := i_from - i_to else
6122: LD_ADDR_VAR 0 11
6126: PUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_VAR 0 3
6136: MINUS
6137: ST_TO_ADDR
6138: GO 6162
// length := ( array - i_to ) + i_from ;
6140: LD_ADDR_VAR 0 11
6144: PUSH
6145: LD_VAR 0 1
6149: PUSH
6150: LD_VAR 0 3
6154: MINUS
6155: PUSH
6156: LD_VAR 0 2
6160: PLUS
6161: ST_TO_ADDR
// end ; if not length then
6162: LD_VAR 0 11
6166: NOT
6167: IFFALSE 6171
// exit ;
6169: GO 6329
// tmp := array ;
6171: LD_ADDR_VAR 0 10
6175: PUSH
6176: LD_VAR 0 1
6180: ST_TO_ADDR
// for i = 1 to length do
6181: LD_ADDR_VAR 0 6
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_VAR 0 11
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6317
// begin for j = 1 to array do
6199: LD_ADDR_VAR 0 7
6203: PUSH
6204: DOUBLE
6205: LD_INT 1
6207: DEC
6208: ST_TO_ADDR
6209: LD_VAR 0 1
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6303
// begin k := j + d ;
6217: LD_ADDR_VAR 0 8
6221: PUSH
6222: LD_VAR 0 7
6226: PUSH
6227: LD_VAR 0 9
6231: PLUS
6232: ST_TO_ADDR
// if k > array then
6233: LD_VAR 0 8
6237: PUSH
6238: LD_VAR 0 1
6242: GREATER
6243: IFFALSE 6253
// k := 1 ;
6245: LD_ADDR_VAR 0 8
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if not k then
6253: LD_VAR 0 8
6257: NOT
6258: IFFALSE 6270
// k := array ;
6260: LD_ADDR_VAR 0 8
6264: PUSH
6265: LD_VAR 0 1
6269: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6270: LD_ADDR_VAR 0 10
6274: PUSH
6275: LD_VAR 0 10
6279: PPUSH
6280: LD_VAR 0 8
6284: PPUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 7
6294: ARRAY
6295: PPUSH
6296: CALL_OW 1
6300: ST_TO_ADDR
// end ;
6301: GO 6214
6303: POP
6304: POP
// array := tmp ;
6305: LD_ADDR_VAR 0 1
6309: PUSH
6310: LD_VAR 0 10
6314: ST_TO_ADDR
// end ;
6315: GO 6196
6317: POP
6318: POP
// result := array ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 1
6328: ST_TO_ADDR
// end ;
6329: LD_VAR 0 5
6333: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
// result := 0 ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// if not array or not value in array then
6346: LD_VAR 0 1
6350: NOT
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: LD_VAR 0 1
6361: IN
6362: NOT
6363: OR
6364: IFFALSE 6368
// exit ;
6366: GO 6422
// for i = 1 to array do
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6420
// if value = array [ i ] then
6386: LD_VAR 0 2
6390: PUSH
6391: LD_VAR 0 1
6395: PUSH
6396: LD_VAR 0 4
6400: ARRAY
6401: EQUAL
6402: IFFALSE 6418
// begin result := i ;
6404: LD_ADDR_VAR 0 3
6408: PUSH
6409: LD_VAR 0 4
6413: ST_TO_ADDR
// exit ;
6414: POP
6415: POP
6416: GO 6422
// end ;
6418: GO 6383
6420: POP
6421: POP
// end ;
6422: LD_VAR 0 3
6426: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6427: LD_INT 0
6429: PPUSH
// vc_chassis := chassis ;
6430: LD_ADDR_OWVAR 37
6434: PUSH
6435: LD_VAR 0 1
6439: ST_TO_ADDR
// vc_engine := engine ;
6440: LD_ADDR_OWVAR 39
6444: PUSH
6445: LD_VAR 0 2
6449: ST_TO_ADDR
// vc_control := control ;
6450: LD_ADDR_OWVAR 38
6454: PUSH
6455: LD_VAR 0 3
6459: ST_TO_ADDR
// vc_weapon := weapon ;
6460: LD_ADDR_OWVAR 40
6464: PUSH
6465: LD_VAR 0 4
6469: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6470: LD_ADDR_OWVAR 41
6474: PUSH
6475: LD_VAR 0 5
6479: ST_TO_ADDR
// end ;
6480: LD_VAR 0 6
6484: RET
// export function WantPlant ( unit ) ; var task ; begin
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// result := false ;
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 437
6511: ST_TO_ADDR
// if task then
6512: LD_VAR 0 3
6516: IFFALSE 6544
// if task [ 1 ] [ 1 ] = p then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 1
6525: ARRAY
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PUSH
6531: LD_STRING p
6533: EQUAL
6534: IFFALSE 6544
// result := true ;
6536: LD_ADDR_VAR 0 2
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ;
6544: LD_VAR 0 2
6548: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6549: LD_INT 0
6551: PPUSH
6552: PPUSH
6553: PPUSH
6554: PPUSH
// if pos < 1 then
6555: LD_VAR 0 2
6559: PUSH
6560: LD_INT 1
6562: LESS
6563: IFFALSE 6567
// exit ;
6565: GO 6870
// if pos = 1 then
6567: LD_VAR 0 2
6571: PUSH
6572: LD_INT 1
6574: EQUAL
6575: IFFALSE 6608
// result := Replace ( arr , pos [ 1 ] , value ) else
6577: LD_ADDR_VAR 0 4
6581: PUSH
6582: LD_VAR 0 1
6586: PPUSH
6587: LD_VAR 0 2
6591: PUSH
6592: LD_INT 1
6594: ARRAY
6595: PPUSH
6596: LD_VAR 0 3
6600: PPUSH
6601: CALL_OW 1
6605: ST_TO_ADDR
6606: GO 6870
// begin tmp := arr ;
6608: LD_ADDR_VAR 0 6
6612: PUSH
6613: LD_VAR 0 1
6617: ST_TO_ADDR
// s_arr := [ tmp ] ;
6618: LD_ADDR_VAR 0 7
6622: PUSH
6623: LD_VAR 0 6
6627: PUSH
6628: EMPTY
6629: LIST
6630: ST_TO_ADDR
// for i = 1 to pos - 1 do
6631: LD_ADDR_VAR 0 5
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_VAR 0 2
6645: PUSH
6646: LD_INT 1
6648: MINUS
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6696
// begin tmp := tmp [ pos [ i ] ] ;
6653: LD_ADDR_VAR 0 6
6657: PUSH
6658: LD_VAR 0 6
6662: PUSH
6663: LD_VAR 0 2
6667: PUSH
6668: LD_VAR 0 5
6672: ARRAY
6673: ARRAY
6674: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6675: LD_ADDR_VAR 0 7
6679: PUSH
6680: LD_VAR 0 7
6684: PUSH
6685: LD_VAR 0 6
6689: PUSH
6690: EMPTY
6691: LIST
6692: ADD
6693: ST_TO_ADDR
// end ;
6694: GO 6650
6696: POP
6697: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6698: LD_ADDR_VAR 0 6
6702: PUSH
6703: LD_VAR 0 6
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 3
6723: PPUSH
6724: CALL_OW 1
6728: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6729: LD_ADDR_VAR 0 7
6733: PUSH
6734: LD_VAR 0 7
6738: PPUSH
6739: LD_VAR 0 7
6743: PPUSH
6744: LD_VAR 0 6
6748: PPUSH
6749: CALL_OW 1
6753: ST_TO_ADDR
// for i = s_arr downto 2 do
6754: LD_ADDR_VAR 0 5
6758: PUSH
6759: DOUBLE
6760: LD_VAR 0 7
6764: INC
6765: ST_TO_ADDR
6766: LD_INT 2
6768: PUSH
6769: FOR_DOWNTO
6770: IFFALSE 6854
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6772: LD_ADDR_VAR 0 6
6776: PUSH
6777: LD_VAR 0 7
6781: PUSH
6782: LD_VAR 0 5
6786: PUSH
6787: LD_INT 1
6789: MINUS
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 2
6796: PUSH
6797: LD_VAR 0 5
6801: PUSH
6802: LD_INT 1
6804: MINUS
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 7
6811: PUSH
6812: LD_VAR 0 5
6816: ARRAY
6817: PPUSH
6818: CALL_OW 1
6822: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6823: LD_ADDR_VAR 0 7
6827: PUSH
6828: LD_VAR 0 7
6832: PPUSH
6833: LD_VAR 0 5
6837: PUSH
6838: LD_INT 1
6840: MINUS
6841: PPUSH
6842: LD_VAR 0 6
6846: PPUSH
6847: CALL_OW 1
6851: ST_TO_ADDR
// end ;
6852: GO 6769
6854: POP
6855: POP
// result := s_arr [ 1 ] ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 7
6865: PUSH
6866: LD_INT 1
6868: ARRAY
6869: ST_TO_ADDR
// end ; end ;
6870: LD_VAR 0 4
6874: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6875: LD_INT 0
6877: PPUSH
6878: PPUSH
// if not list then
6879: LD_VAR 0 1
6883: NOT
6884: IFFALSE 6888
// exit ;
6886: GO 6979
// i := list [ pos1 ] ;
6888: LD_ADDR_VAR 0 5
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: LD_VAR 0 2
6902: ARRAY
6903: ST_TO_ADDR
// if not i then
6904: LD_VAR 0 5
6908: NOT
6909: IFFALSE 6913
// exit ;
6911: GO 6979
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6913: LD_ADDR_VAR 0 1
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_VAR 0 1
6932: PUSH
6933: LD_VAR 0 3
6937: ARRAY
6938: PPUSH
6939: CALL_OW 1
6943: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: LD_VAR 0 3
6958: PPUSH
6959: LD_VAR 0 5
6963: PPUSH
6964: CALL_OW 1
6968: ST_TO_ADDR
// result := list ;
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 1
6978: ST_TO_ADDR
// end ;
6979: LD_VAR 0 4
6983: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6984: LD_INT 0
6986: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6987: LD_ADDR_VAR 0 5
6991: PUSH
6992: LD_VAR 0 1
6996: PPUSH
6997: CALL_OW 250
7001: PPUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 251
7011: PPUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: LD_VAR 0 3
7021: PPUSH
7022: LD_VAR 0 4
7026: PPUSH
7027: CALL 7037 0 5
7031: ST_TO_ADDR
// end ;
7032: LD_VAR 0 5
7036: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// if not list then
7043: LD_VAR 0 3
7047: NOT
7048: IFFALSE 7052
// exit ;
7050: GO 7440
// result := [ ] ;
7052: LD_ADDR_VAR 0 6
7056: PUSH
7057: EMPTY
7058: ST_TO_ADDR
// for i in list do
7059: LD_ADDR_VAR 0 7
7063: PUSH
7064: LD_VAR 0 3
7068: PUSH
7069: FOR_IN
7070: IFFALSE 7272
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7072: LD_ADDR_VAR 0 9
7076: PUSH
7077: LD_VAR 0 7
7081: PPUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 297
7096: ST_TO_ADDR
// if not result then
7097: LD_VAR 0 6
7101: NOT
7102: IFFALSE 7128
// result := [ [ i , tmp ] ] else
7104: LD_ADDR_VAR 0 6
7108: PUSH
7109: LD_VAR 0 7
7113: PUSH
7114: LD_VAR 0 9
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: ST_TO_ADDR
7126: GO 7270
// begin if result [ result ] [ 2 ] < tmp then
7128: LD_VAR 0 6
7132: PUSH
7133: LD_VAR 0 6
7137: ARRAY
7138: PUSH
7139: LD_INT 2
7141: ARRAY
7142: PUSH
7143: LD_VAR 0 9
7147: LESS
7148: IFFALSE 7190
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7150: LD_ADDR_VAR 0 6
7154: PUSH
7155: LD_VAR 0 6
7159: PPUSH
7160: LD_VAR 0 6
7164: PUSH
7165: LD_INT 1
7167: PLUS
7168: PPUSH
7169: LD_VAR 0 7
7173: PUSH
7174: LD_VAR 0 9
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 2
7187: ST_TO_ADDR
7188: GO 7270
// for j = 1 to result do
7190: LD_ADDR_VAR 0 8
7194: PUSH
7195: DOUBLE
7196: LD_INT 1
7198: DEC
7199: ST_TO_ADDR
7200: LD_VAR 0 6
7204: PUSH
7205: FOR_TO
7206: IFFALSE 7268
// begin if tmp < result [ j ] [ 2 ] then
7208: LD_VAR 0 9
7212: PUSH
7213: LD_VAR 0 6
7217: PUSH
7218: LD_VAR 0 8
7222: ARRAY
7223: PUSH
7224: LD_INT 2
7226: ARRAY
7227: LESS
7228: IFFALSE 7266
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7230: LD_ADDR_VAR 0 6
7234: PUSH
7235: LD_VAR 0 6
7239: PPUSH
7240: LD_VAR 0 8
7244: PPUSH
7245: LD_VAR 0 7
7249: PUSH
7250: LD_VAR 0 9
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 2
7263: ST_TO_ADDR
// break ;
7264: GO 7268
// end ; end ;
7266: GO 7205
7268: POP
7269: POP
// end ; end ;
7270: GO 7069
7272: POP
7273: POP
// if result and not asc then
7274: LD_VAR 0 6
7278: PUSH
7279: LD_VAR 0 4
7283: NOT
7284: AND
7285: IFFALSE 7360
// begin tmp := result ;
7287: LD_ADDR_VAR 0 9
7291: PUSH
7292: LD_VAR 0 6
7296: ST_TO_ADDR
// for i = tmp downto 1 do
7297: LD_ADDR_VAR 0 7
7301: PUSH
7302: DOUBLE
7303: LD_VAR 0 9
7307: INC
7308: ST_TO_ADDR
7309: LD_INT 1
7311: PUSH
7312: FOR_DOWNTO
7313: IFFALSE 7358
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7315: LD_ADDR_VAR 0 6
7319: PUSH
7320: LD_VAR 0 6
7324: PPUSH
7325: LD_VAR 0 9
7329: PUSH
7330: LD_VAR 0 7
7334: MINUS
7335: PUSH
7336: LD_INT 1
7338: PLUS
7339: PPUSH
7340: LD_VAR 0 9
7344: PUSH
7345: LD_VAR 0 7
7349: ARRAY
7350: PPUSH
7351: CALL_OW 1
7355: ST_TO_ADDR
7356: GO 7312
7358: POP
7359: POP
// end ; tmp := [ ] ;
7360: LD_ADDR_VAR 0 9
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// if mode then
7367: LD_VAR 0 5
7371: IFFALSE 7440
// begin for i = 1 to result do
7373: LD_ADDR_VAR 0 7
7377: PUSH
7378: DOUBLE
7379: LD_INT 1
7381: DEC
7382: ST_TO_ADDR
7383: LD_VAR 0 6
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7428
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7391: LD_ADDR_VAR 0 9
7395: PUSH
7396: LD_VAR 0 9
7400: PPUSH
7401: LD_VAR 0 7
7405: PPUSH
7406: LD_VAR 0 6
7410: PUSH
7411: LD_VAR 0 7
7415: ARRAY
7416: PUSH
7417: LD_INT 1
7419: ARRAY
7420: PPUSH
7421: CALL_OW 1
7425: ST_TO_ADDR
7426: GO 7388
7428: POP
7429: POP
// result := tmp ;
7430: LD_ADDR_VAR 0 6
7434: PUSH
7435: LD_VAR 0 9
7439: ST_TO_ADDR
// end ; end ;
7440: LD_VAR 0 6
7444: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7445: LD_INT 0
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7453: LD_ADDR_VAR 0 5
7457: PUSH
7458: LD_INT 0
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: EMPTY
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: ST_TO_ADDR
// if not x or not y then
7475: LD_VAR 0 2
7479: NOT
7480: PUSH
7481: LD_VAR 0 3
7485: NOT
7486: OR
7487: IFFALSE 7491
// exit ;
7489: GO 9141
// if not range then
7491: LD_VAR 0 4
7495: NOT
7496: IFFALSE 7506
// range := 10 ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 10
7505: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 81
7513: PUSH
7514: LD_VAR 0 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 92
7525: PUSH
7526: LD_VAR 0 2
7530: PUSH
7531: LD_VAR 0 3
7535: PUSH
7536: LD_VAR 0 4
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 21
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL_OW 69
7573: ST_TO_ADDR
// if not tmp then
7574: LD_VAR 0 8
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 9141
// for i in tmp do
7583: LD_ADDR_VAR 0 6
7587: PUSH
7588: LD_VAR 0 8
7592: PUSH
7593: FOR_IN
7594: IFFALSE 9116
// begin points := [ 0 , 0 , 0 ] ;
7596: LD_ADDR_VAR 0 9
7600: PUSH
7601: LD_INT 0
7603: PUSH
7604: LD_INT 0
7606: PUSH
7607: LD_INT 0
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: ST_TO_ADDR
// bpoints := 1 ;
7615: LD_ADDR_VAR 0 10
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7623: LD_VAR 0 6
7627: PPUSH
7628: CALL_OW 247
7632: PUSH
7633: LD_INT 1
7635: DOUBLE
7636: EQUAL
7637: IFTRUE 7641
7639: GO 8219
7641: POP
// begin if GetClass ( i ) = 1 then
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 257
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7676
// points := [ 10 , 5 , 3 ] ;
7657: LD_ADDR_VAR 0 9
7661: PUSH
7662: LD_INT 10
7664: PUSH
7665: LD_INT 5
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 257
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: IN
7700: IFFALSE 7721
// points := [ 3 , 2 , 1 ] ;
7702: LD_ADDR_VAR 0 9
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 2
7712: PUSH
7713: LD_INT 1
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7721: LD_VAR 0 6
7725: PPUSH
7726: CALL_OW 257
7730: PUSH
7731: LD_INT 5
7733: EQUAL
7734: IFFALSE 7755
// points := [ 130 , 5 , 2 ] ;
7736: LD_ADDR_VAR 0 9
7740: PUSH
7741: LD_INT 130
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 2
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7755: LD_VAR 0 6
7759: PPUSH
7760: CALL_OW 257
7764: PUSH
7765: LD_INT 8
7767: EQUAL
7768: IFFALSE 7789
// points := [ 35 , 35 , 30 ] ;
7770: LD_ADDR_VAR 0 9
7774: PUSH
7775: LD_INT 35
7777: PUSH
7778: LD_INT 35
7780: PUSH
7781: LD_INT 30
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7789: LD_VAR 0 6
7793: PPUSH
7794: CALL_OW 257
7798: PUSH
7799: LD_INT 9
7801: EQUAL
7802: IFFALSE 7823
// points := [ 20 , 55 , 40 ] ;
7804: LD_ADDR_VAR 0 9
7808: PUSH
7809: LD_INT 20
7811: PUSH
7812: LD_INT 55
7814: PUSH
7815: LD_INT 40
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7823: LD_VAR 0 6
7827: PPUSH
7828: CALL_OW 257
7832: PUSH
7833: LD_INT 12
7835: PUSH
7836: LD_INT 16
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: IN
7843: IFFALSE 7864
// points := [ 5 , 3 , 2 ] ;
7845: LD_ADDR_VAR 0 9
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 3
7855: PUSH
7856: LD_INT 2
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7864: LD_VAR 0 6
7868: PPUSH
7869: CALL_OW 257
7873: PUSH
7874: LD_INT 17
7876: EQUAL
7877: IFFALSE 7898
// points := [ 100 , 50 , 75 ] ;
7879: LD_ADDR_VAR 0 9
7883: PUSH
7884: LD_INT 100
7886: PUSH
7887: LD_INT 50
7889: PUSH
7890: LD_INT 75
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7898: LD_VAR 0 6
7902: PPUSH
7903: CALL_OW 257
7907: PUSH
7908: LD_INT 15
7910: EQUAL
7911: IFFALSE 7932
// points := [ 10 , 5 , 3 ] ;
7913: LD_ADDR_VAR 0 9
7917: PUSH
7918: LD_INT 10
7920: PUSH
7921: LD_INT 5
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7932: LD_VAR 0 6
7936: PPUSH
7937: CALL_OW 257
7941: PUSH
7942: LD_INT 14
7944: EQUAL
7945: IFFALSE 7966
// points := [ 10 , 0 , 0 ] ;
7947: LD_ADDR_VAR 0 9
7951: PUSH
7952: LD_INT 10
7954: PUSH
7955: LD_INT 0
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7966: LD_VAR 0 6
7970: PPUSH
7971: CALL_OW 257
7975: PUSH
7976: LD_INT 11
7978: EQUAL
7979: IFFALSE 8000
// points := [ 30 , 10 , 5 ] ;
7981: LD_ADDR_VAR 0 9
7985: PUSH
7986: LD_INT 30
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: LD_INT 5
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_INT 5
8007: PPUSH
8008: CALL_OW 321
8012: PUSH
8013: LD_INT 2
8015: EQUAL
8016: IFFALSE 8033
// bpoints := bpoints * 1.8 ;
8018: LD_ADDR_VAR 0 10
8022: PUSH
8023: LD_VAR 0 10
8027: PUSH
8028: LD_REAL  1.80000000000000E+0000
8031: MUL
8032: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8033: LD_VAR 0 6
8037: PPUSH
8038: CALL_OW 257
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: LD_INT 3
8051: PUSH
8052: LD_INT 4
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: IN
8061: PUSH
8062: LD_VAR 0 1
8066: PPUSH
8067: LD_INT 51
8069: PPUSH
8070: CALL_OW 321
8074: PUSH
8075: LD_INT 2
8077: EQUAL
8078: AND
8079: IFFALSE 8096
// bpoints := bpoints * 1.2 ;
8081: LD_ADDR_VAR 0 10
8085: PUSH
8086: LD_VAR 0 10
8090: PUSH
8091: LD_REAL  1.20000000000000E+0000
8094: MUL
8095: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8096: LD_VAR 0 6
8100: PPUSH
8101: CALL_OW 257
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: LD_INT 7
8111: PUSH
8112: LD_INT 9
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: IN
8120: PUSH
8121: LD_VAR 0 1
8125: PPUSH
8126: LD_INT 52
8128: PPUSH
8129: CALL_OW 321
8133: PUSH
8134: LD_INT 2
8136: EQUAL
8137: AND
8138: IFFALSE 8155
// bpoints := bpoints * 1.5 ;
8140: LD_ADDR_VAR 0 10
8144: PUSH
8145: LD_VAR 0 10
8149: PUSH
8150: LD_REAL  1.50000000000000E+0000
8153: MUL
8154: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_INT 66
8162: PPUSH
8163: CALL_OW 321
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: IFFALSE 8188
// bpoints := bpoints * 1.1 ;
8173: LD_ADDR_VAR 0 10
8177: PUSH
8178: LD_VAR 0 10
8182: PUSH
8183: LD_REAL  1.10000000000000E+0000
8186: MUL
8187: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8188: LD_ADDR_VAR 0 10
8192: PUSH
8193: LD_VAR 0 10
8197: PUSH
8198: LD_VAR 0 6
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: CALL_OW 259
8210: PUSH
8211: LD_REAL  1.15000000000000E+0000
8214: MUL
8215: MUL
8216: ST_TO_ADDR
// end ; unit_vehicle :
8217: GO 9045
8219: LD_INT 2
8221: DOUBLE
8222: EQUAL
8223: IFTRUE 8227
8225: GO 9033
8227: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8228: LD_VAR 0 6
8232: PPUSH
8233: CALL_OW 264
8237: PUSH
8238: LD_INT 2
8240: PUSH
8241: LD_INT 42
8243: PUSH
8244: LD_INT 24
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: IN
8252: IFFALSE 8273
// points := [ 25 , 5 , 3 ] ;
8254: LD_ADDR_VAR 0 9
8258: PUSH
8259: LD_INT 25
8261: PUSH
8262: LD_INT 5
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8273: LD_VAR 0 6
8277: PPUSH
8278: CALL_OW 264
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: LD_INT 43
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: IN
8297: IFFALSE 8318
// points := [ 40 , 15 , 5 ] ;
8299: LD_ADDR_VAR 0 9
8303: PUSH
8304: LD_INT 40
8306: PUSH
8307: LD_INT 15
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8318: LD_VAR 0 6
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: LD_INT 23
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: IN
8338: IFFALSE 8359
// points := [ 7 , 25 , 8 ] ;
8340: LD_ADDR_VAR 0 9
8344: PUSH
8345: LD_INT 7
8347: PUSH
8348: LD_INT 25
8350: PUSH
8351: LD_INT 8
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8359: LD_VAR 0 6
8363: PPUSH
8364: CALL_OW 264
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: LD_INT 27
8374: PUSH
8375: LD_INT 44
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: LIST
8382: IN
8383: IFFALSE 8404
// points := [ 14 , 50 , 16 ] ;
8385: LD_ADDR_VAR 0 9
8389: PUSH
8390: LD_INT 14
8392: PUSH
8393: LD_INT 50
8395: PUSH
8396: LD_INT 16
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8404: LD_VAR 0 6
8408: PPUSH
8409: CALL_OW 264
8413: PUSH
8414: LD_INT 6
8416: PUSH
8417: LD_INT 46
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: IN
8424: IFFALSE 8445
// points := [ 32 , 120 , 70 ] ;
8426: LD_ADDR_VAR 0 9
8430: PUSH
8431: LD_INT 32
8433: PUSH
8434: LD_INT 120
8436: PUSH
8437: LD_INT 70
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8445: LD_VAR 0 6
8449: PPUSH
8450: CALL_OW 264
8454: PUSH
8455: LD_INT 7
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 45
8463: PUSH
8464: LD_INT 92
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: IN
8473: IFFALSE 8494
// points := [ 35 , 20 , 45 ] ;
8475: LD_ADDR_VAR 0 9
8479: PUSH
8480: LD_INT 35
8482: PUSH
8483: LD_INT 20
8485: PUSH
8486: LD_INT 45
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8494: LD_VAR 0 6
8498: PPUSH
8499: CALL_OW 264
8503: PUSH
8504: LD_INT 47
8506: PUSH
8507: EMPTY
8508: LIST
8509: IN
8510: IFFALSE 8531
// points := [ 67 , 45 , 75 ] ;
8512: LD_ADDR_VAR 0 9
8516: PUSH
8517: LD_INT 67
8519: PUSH
8520: LD_INT 45
8522: PUSH
8523: LD_INT 75
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8531: LD_VAR 0 6
8535: PPUSH
8536: CALL_OW 264
8540: PUSH
8541: LD_INT 26
8543: PUSH
8544: EMPTY
8545: LIST
8546: IN
8547: IFFALSE 8568
// points := [ 120 , 30 , 80 ] ;
8549: LD_ADDR_VAR 0 9
8553: PUSH
8554: LD_INT 120
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 80
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8568: LD_VAR 0 6
8572: PPUSH
8573: CALL_OW 264
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: EMPTY
8582: LIST
8583: IN
8584: IFFALSE 8605
// points := [ 40 , 1 , 1 ] ;
8586: LD_ADDR_VAR 0 9
8590: PUSH
8591: LD_INT 40
8593: PUSH
8594: LD_INT 1
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8605: LD_VAR 0 6
8609: PPUSH
8610: CALL_OW 264
8614: PUSH
8615: LD_INT 29
8617: PUSH
8618: EMPTY
8619: LIST
8620: IN
8621: IFFALSE 8642
// points := [ 70 , 200 , 400 ] ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_INT 70
8630: PUSH
8631: LD_INT 200
8633: PUSH
8634: LD_INT 400
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8642: LD_VAR 0 6
8646: PPUSH
8647: CALL_OW 264
8651: PUSH
8652: LD_INT 14
8654: PUSH
8655: LD_INT 53
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: IN
8662: IFFALSE 8683
// points := [ 40 , 10 , 20 ] ;
8664: LD_ADDR_VAR 0 9
8668: PUSH
8669: LD_INT 40
8671: PUSH
8672: LD_INT 10
8674: PUSH
8675: LD_INT 20
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 264
8692: PUSH
8693: LD_INT 9
8695: PUSH
8696: EMPTY
8697: LIST
8698: IN
8699: IFFALSE 8720
// points := [ 5 , 70 , 20 ] ;
8701: LD_ADDR_VAR 0 9
8705: PUSH
8706: LD_INT 5
8708: PUSH
8709: LD_INT 70
8711: PUSH
8712: LD_INT 20
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8720: LD_VAR 0 6
8724: PPUSH
8725: CALL_OW 264
8729: PUSH
8730: LD_INT 10
8732: PUSH
8733: EMPTY
8734: LIST
8735: IN
8736: IFFALSE 8757
// points := [ 35 , 110 , 70 ] ;
8738: LD_ADDR_VAR 0 9
8742: PUSH
8743: LD_INT 35
8745: PUSH
8746: LD_INT 110
8748: PUSH
8749: LD_INT 70
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8757: LD_VAR 0 6
8761: PPUSH
8762: CALL_OW 265
8766: PUSH
8767: LD_INT 25
8769: EQUAL
8770: IFFALSE 8791
// points := [ 80 , 65 , 100 ] ;
8772: LD_ADDR_VAR 0 9
8776: PUSH
8777: LD_INT 80
8779: PUSH
8780: LD_INT 65
8782: PUSH
8783: LD_INT 100
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8791: LD_VAR 0 6
8795: PPUSH
8796: CALL_OW 263
8800: PUSH
8801: LD_INT 1
8803: EQUAL
8804: IFFALSE 8839
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8806: LD_ADDR_VAR 0 10
8810: PUSH
8811: LD_VAR 0 10
8815: PUSH
8816: LD_VAR 0 6
8820: PPUSH
8821: CALL_OW 311
8825: PPUSH
8826: LD_INT 3
8828: PPUSH
8829: CALL_OW 259
8833: PUSH
8834: LD_INT 4
8836: MUL
8837: MUL
8838: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8839: LD_VAR 0 6
8843: PPUSH
8844: CALL_OW 263
8848: PUSH
8849: LD_INT 2
8851: EQUAL
8852: IFFALSE 8903
// begin j := IsControledBy ( i ) ;
8854: LD_ADDR_VAR 0 7
8858: PUSH
8859: LD_VAR 0 6
8863: PPUSH
8864: CALL_OW 312
8868: ST_TO_ADDR
// if j then
8869: LD_VAR 0 7
8873: IFFALSE 8903
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8875: LD_ADDR_VAR 0 10
8879: PUSH
8880: LD_VAR 0 10
8884: PUSH
8885: LD_VAR 0 7
8889: PPUSH
8890: LD_INT 3
8892: PPUSH
8893: CALL_OW 259
8897: PUSH
8898: LD_INT 3
8900: MUL
8901: MUL
8902: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8903: LD_VAR 0 6
8907: PPUSH
8908: CALL_OW 264
8912: PUSH
8913: LD_INT 5
8915: PUSH
8916: LD_INT 6
8918: PUSH
8919: LD_INT 46
8921: PUSH
8922: LD_INT 44
8924: PUSH
8925: LD_INT 47
8927: PUSH
8928: LD_INT 45
8930: PUSH
8931: LD_INT 28
8933: PUSH
8934: LD_INT 7
8936: PUSH
8937: LD_INT 27
8939: PUSH
8940: LD_INT 29
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: IN
8955: PUSH
8956: LD_VAR 0 1
8960: PPUSH
8961: LD_INT 52
8963: PPUSH
8964: CALL_OW 321
8968: PUSH
8969: LD_INT 2
8971: EQUAL
8972: AND
8973: IFFALSE 8990
// bpoints := bpoints * 1.2 ;
8975: LD_ADDR_VAR 0 10
8979: PUSH
8980: LD_VAR 0 10
8984: PUSH
8985: LD_REAL  1.20000000000000E+0000
8988: MUL
8989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8990: LD_VAR 0 6
8994: PPUSH
8995: CALL_OW 264
8999: PUSH
9000: LD_INT 6
9002: PUSH
9003: LD_INT 46
9005: PUSH
9006: LD_INT 47
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: IN
9014: IFFALSE 9031
// bpoints := bpoints * 1.2 ;
9016: LD_ADDR_VAR 0 10
9020: PUSH
9021: LD_VAR 0 10
9025: PUSH
9026: LD_REAL  1.20000000000000E+0000
9029: MUL
9030: ST_TO_ADDR
// end ; unit_building :
9031: GO 9045
9033: LD_INT 3
9035: DOUBLE
9036: EQUAL
9037: IFTRUE 9041
9039: GO 9044
9041: POP
// ; end ;
9042: GO 9045
9044: POP
// for j = 1 to 3 do
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: DOUBLE
9051: LD_INT 1
9053: DEC
9054: ST_TO_ADDR
9055: LD_INT 3
9057: PUSH
9058: FOR_TO
9059: IFFALSE 9112
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9061: LD_ADDR_VAR 0 5
9065: PUSH
9066: LD_VAR 0 5
9070: PPUSH
9071: LD_VAR 0 7
9075: PPUSH
9076: LD_VAR 0 5
9080: PUSH
9081: LD_VAR 0 7
9085: ARRAY
9086: PUSH
9087: LD_VAR 0 9
9091: PUSH
9092: LD_VAR 0 7
9096: ARRAY
9097: PUSH
9098: LD_VAR 0 10
9102: MUL
9103: PLUS
9104: PPUSH
9105: CALL_OW 1
9109: ST_TO_ADDR
9110: GO 9058
9112: POP
9113: POP
// end ;
9114: GO 7593
9116: POP
9117: POP
// result := Replace ( result , 4 , tmp ) ;
9118: LD_ADDR_VAR 0 5
9122: PUSH
9123: LD_VAR 0 5
9127: PPUSH
9128: LD_INT 4
9130: PPUSH
9131: LD_VAR 0 8
9135: PPUSH
9136: CALL_OW 1
9140: ST_TO_ADDR
// end ;
9141: LD_VAR 0 5
9145: RET
// export function DangerAtRange ( unit , range ) ; begin
9146: LD_INT 0
9148: PPUSH
// if not unit then
9149: LD_VAR 0 1
9153: NOT
9154: IFFALSE 9158
// exit ;
9156: GO 9203
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 255
9172: PPUSH
9173: LD_VAR 0 1
9177: PPUSH
9178: CALL_OW 250
9182: PPUSH
9183: LD_VAR 0 1
9187: PPUSH
9188: CALL_OW 251
9192: PPUSH
9193: LD_VAR 0 2
9197: PPUSH
9198: CALL 7445 0 4
9202: ST_TO_ADDR
// end ;
9203: LD_VAR 0 3
9207: RET
// export function DangerInArea ( side , area ) ; begin
9208: LD_INT 0
9210: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9211: LD_ADDR_VAR 0 3
9215: PUSH
9216: LD_VAR 0 2
9220: PPUSH
9221: LD_INT 81
9223: PUSH
9224: LD_VAR 0 1
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 70
9237: ST_TO_ADDR
// end ;
9238: LD_VAR 0 3
9242: RET
// export function IsExtension ( b ) ; begin
9243: LD_INT 0
9245: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9246: LD_ADDR_VAR 0 2
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: LD_INT 23
9258: PUSH
9259: LD_INT 20
9261: PUSH
9262: LD_INT 22
9264: PUSH
9265: LD_INT 17
9267: PUSH
9268: LD_INT 24
9270: PUSH
9271: LD_INT 21
9273: PUSH
9274: LD_INT 19
9276: PUSH
9277: LD_INT 16
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 18
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: IN
9298: ST_TO_ADDR
// end ;
9299: LD_VAR 0 2
9303: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
9308: PPUSH
// result := [ ] ;
9309: LD_ADDR_VAR 0 4
9313: PUSH
9314: EMPTY
9315: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9316: LD_ADDR_VAR 0 5
9320: PUSH
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_INT 21
9328: PUSH
9329: LD_INT 3
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 70
9340: ST_TO_ADDR
// if not tmp then
9341: LD_VAR 0 5
9345: NOT
9346: IFFALSE 9350
// exit ;
9348: GO 9414
// if checkLink then
9350: LD_VAR 0 3
9354: IFFALSE 9404
// begin for i in tmp do
9356: LD_ADDR_VAR 0 6
9360: PUSH
9361: LD_VAR 0 5
9365: PUSH
9366: FOR_IN
9367: IFFALSE 9402
// if GetBase ( i ) <> base then
9369: LD_VAR 0 6
9373: PPUSH
9374: CALL_OW 274
9378: PUSH
9379: LD_VAR 0 1
9383: NONEQUAL
9384: IFFALSE 9400
// ComLinkToBase ( base , i ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: LD_VAR 0 6
9395: PPUSH
9396: CALL_OW 169
9400: GO 9366
9402: POP
9403: POP
// end ; result := tmp ;
9404: LD_ADDR_VAR 0 4
9408: PUSH
9409: LD_VAR 0 5
9413: ST_TO_ADDR
// end ;
9414: LD_VAR 0 4
9418: RET
// export function ComComplete ( units , b ) ; var i ; begin
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// if not units then
9423: LD_VAR 0 1
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9522
// for i in units do
9432: LD_ADDR_VAR 0 4
9436: PUSH
9437: LD_VAR 0 1
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9520
// if BuildingStatus ( b ) = bs_build then
9445: LD_VAR 0 2
9449: PPUSH
9450: CALL_OW 461
9454: PUSH
9455: LD_INT 1
9457: EQUAL
9458: IFFALSE 9518
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9460: LD_VAR 0 4
9464: PPUSH
9465: LD_STRING h
9467: PUSH
9468: LD_VAR 0 2
9472: PPUSH
9473: CALL_OW 250
9477: PUSH
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 251
9487: PUSH
9488: LD_VAR 0 2
9492: PUSH
9493: LD_INT 0
9495: PUSH
9496: LD_INT 0
9498: PUSH
9499: LD_INT 0
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: PPUSH
9514: CALL_OW 446
9518: GO 9442
9520: POP
9521: POP
// end ;
9522: LD_VAR 0 3
9526: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9527: LD_INT 0
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9535: LD_VAR 0 1
9539: NOT
9540: PUSH
9541: LD_VAR 0 1
9545: PPUSH
9546: CALL_OW 263
9550: PUSH
9551: LD_INT 2
9553: NONEQUAL
9554: OR
9555: IFFALSE 9559
// exit ;
9557: GO 9875
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9559: LD_ADDR_VAR 0 6
9563: PUSH
9564: LD_INT 22
9566: PUSH
9567: LD_VAR 0 1
9571: PPUSH
9572: CALL_OW 255
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 2
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 36
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 34
9596: PUSH
9597: LD_INT 31
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: ST_TO_ADDR
// if not tmp then
9618: LD_VAR 0 6
9622: NOT
9623: IFFALSE 9627
// exit ;
9625: GO 9875
// result := [ ] ;
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: EMPTY
9633: ST_TO_ADDR
// for i in tmp do
9634: LD_ADDR_VAR 0 3
9638: PUSH
9639: LD_VAR 0 6
9643: PUSH
9644: FOR_IN
9645: IFFALSE 9716
// begin t := UnitsInside ( i ) ;
9647: LD_ADDR_VAR 0 4
9651: PUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: CALL_OW 313
9661: ST_TO_ADDR
// if t then
9662: LD_VAR 0 4
9666: IFFALSE 9714
// for j in t do
9668: LD_ADDR_VAR 0 7
9672: PUSH
9673: LD_VAR 0 4
9677: PUSH
9678: FOR_IN
9679: IFFALSE 9712
// result := Replace ( result , result + 1 , j ) ;
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_VAR 0 2
9690: PPUSH
9691: LD_VAR 0 2
9695: PUSH
9696: LD_INT 1
9698: PLUS
9699: PPUSH
9700: LD_VAR 0 7
9704: PPUSH
9705: CALL_OW 1
9709: ST_TO_ADDR
9710: GO 9678
9712: POP
9713: POP
// end ;
9714: GO 9644
9716: POP
9717: POP
// if not result then
9718: LD_VAR 0 2
9722: NOT
9723: IFFALSE 9727
// exit ;
9725: GO 9875
// mech := result [ 1 ] ;
9727: LD_ADDR_VAR 0 5
9731: PUSH
9732: LD_VAR 0 2
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: ST_TO_ADDR
// if result > 1 then
9741: LD_VAR 0 2
9745: PUSH
9746: LD_INT 1
9748: GREATER
9749: IFFALSE 9861
// begin for i = 2 to result do
9751: LD_ADDR_VAR 0 3
9755: PUSH
9756: DOUBLE
9757: LD_INT 2
9759: DEC
9760: ST_TO_ADDR
9761: LD_VAR 0 2
9765: PUSH
9766: FOR_TO
9767: IFFALSE 9859
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9769: LD_ADDR_VAR 0 4
9773: PUSH
9774: LD_VAR 0 2
9778: PUSH
9779: LD_VAR 0 3
9783: ARRAY
9784: PPUSH
9785: LD_INT 3
9787: PPUSH
9788: CALL_OW 259
9792: PUSH
9793: LD_VAR 0 2
9797: PUSH
9798: LD_VAR 0 3
9802: ARRAY
9803: PPUSH
9804: CALL_OW 432
9808: MINUS
9809: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9810: LD_VAR 0 4
9814: PUSH
9815: LD_VAR 0 5
9819: PPUSH
9820: LD_INT 3
9822: PPUSH
9823: CALL_OW 259
9827: PUSH
9828: LD_VAR 0 5
9832: PPUSH
9833: CALL_OW 432
9837: MINUS
9838: GREATEREQUAL
9839: IFFALSE 9857
// mech := result [ i ] ;
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: LD_VAR 0 2
9850: PUSH
9851: LD_VAR 0 3
9855: ARRAY
9856: ST_TO_ADDR
// end ;
9857: GO 9766
9859: POP
9860: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_VAR 0 5
9870: PPUSH
9871: CALL_OW 135
// end ;
9875: LD_VAR 0 2
9879: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9880: LD_INT 0
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
9888: PPUSH
9889: PPUSH
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
// result := [ ] ;
9895: LD_ADDR_VAR 0 7
9899: PUSH
9900: EMPTY
9901: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9902: LD_VAR 0 1
9906: PPUSH
9907: CALL_OW 266
9911: PUSH
9912: LD_INT 0
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: IN
9922: NOT
9923: IFFALSE 9927
// exit ;
9925: GO 11561
// if name then
9927: LD_VAR 0 3
9931: IFFALSE 9947
// SetBName ( base_dep , name ) ;
9933: LD_VAR 0 1
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: CALL_OW 500
// base := GetBase ( base_dep ) ;
9947: LD_ADDR_VAR 0 15
9951: PUSH
9952: LD_VAR 0 1
9956: PPUSH
9957: CALL_OW 274
9961: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9962: LD_ADDR_VAR 0 16
9966: PUSH
9967: LD_VAR 0 1
9971: PPUSH
9972: CALL_OW 255
9976: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9977: LD_ADDR_VAR 0 17
9981: PUSH
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 248
9991: ST_TO_ADDR
// if sources then
9992: LD_VAR 0 5
9996: IFFALSE 10043
// for i = 1 to 3 do
9998: LD_ADDR_VAR 0 8
10002: PUSH
10003: DOUBLE
10004: LD_INT 1
10006: DEC
10007: ST_TO_ADDR
10008: LD_INT 3
10010: PUSH
10011: FOR_TO
10012: IFFALSE 10041
// AddResourceType ( base , i , sources [ i ] ) ;
10014: LD_VAR 0 15
10018: PPUSH
10019: LD_VAR 0 8
10023: PPUSH
10024: LD_VAR 0 5
10028: PUSH
10029: LD_VAR 0 8
10033: ARRAY
10034: PPUSH
10035: CALL_OW 276
10039: GO 10011
10041: POP
10042: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10043: LD_ADDR_VAR 0 18
10047: PUSH
10048: LD_VAR 0 15
10052: PPUSH
10053: LD_VAR 0 2
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL 9304 0 3
10065: ST_TO_ADDR
// InitHc ;
10066: CALL_OW 19
// InitUc ;
10070: CALL_OW 18
// uc_side := side ;
10074: LD_ADDR_OWVAR 20
10078: PUSH
10079: LD_VAR 0 16
10083: ST_TO_ADDR
// uc_nation := nation ;
10084: LD_ADDR_OWVAR 21
10088: PUSH
10089: LD_VAR 0 17
10093: ST_TO_ADDR
// if buildings then
10094: LD_VAR 0 18
10098: IFFALSE 11420
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10100: LD_ADDR_VAR 0 19
10104: PUSH
10105: LD_VAR 0 18
10109: PPUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 29
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 30
10125: PUSH
10126: LD_INT 30
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 72
10142: ST_TO_ADDR
// if tmp then
10143: LD_VAR 0 19
10147: IFFALSE 10195
// for i in tmp do
10149: LD_ADDR_VAR 0 8
10153: PUSH
10154: LD_VAR 0 19
10158: PUSH
10159: FOR_IN
10160: IFFALSE 10193
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10162: LD_VAR 0 8
10166: PPUSH
10167: CALL_OW 250
10171: PPUSH
10172: LD_VAR 0 8
10176: PPUSH
10177: CALL_OW 251
10181: PPUSH
10182: LD_VAR 0 16
10186: PPUSH
10187: CALL_OW 441
10191: GO 10159
10193: POP
10194: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10195: LD_VAR 0 18
10199: PPUSH
10200: LD_INT 2
10202: PUSH
10203: LD_INT 30
10205: PUSH
10206: LD_INT 32
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 30
10215: PUSH
10216: LD_INT 33
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 72
10232: IFFALSE 10320
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10234: LD_ADDR_VAR 0 8
10238: PUSH
10239: LD_VAR 0 18
10243: PPUSH
10244: LD_INT 2
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 32
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 30
10259: PUSH
10260: LD_INT 33
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 72
10276: PUSH
10277: FOR_IN
10278: IFFALSE 10318
// begin if not GetBWeapon ( i ) then
10280: LD_VAR 0 8
10284: PPUSH
10285: CALL_OW 269
10289: NOT
10290: IFFALSE 10316
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10292: LD_VAR 0 8
10296: PPUSH
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_VAR 0 2
10306: PPUSH
10307: CALL 11566 0 2
10311: PPUSH
10312: CALL_OW 431
// end ;
10316: GO 10277
10318: POP
10319: POP
// end ; for i = 1 to personel do
10320: LD_ADDR_VAR 0 8
10324: PUSH
10325: DOUBLE
10326: LD_INT 1
10328: DEC
10329: ST_TO_ADDR
10330: LD_VAR 0 6
10334: PUSH
10335: FOR_TO
10336: IFFALSE 11400
// begin if i > 4 then
10338: LD_VAR 0 8
10342: PUSH
10343: LD_INT 4
10345: GREATER
10346: IFFALSE 10350
// break ;
10348: GO 11400
// case i of 1 :
10350: LD_VAR 0 8
10354: PUSH
10355: LD_INT 1
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10443
10363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10364: LD_ADDR_VAR 0 12
10368: PUSH
10369: LD_VAR 0 18
10373: PPUSH
10374: LD_INT 22
10376: PUSH
10377: LD_VAR 0 16
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 58
10388: PUSH
10389: EMPTY
10390: LIST
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: LD_INT 30
10397: PUSH
10398: LD_INT 32
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 30
10407: PUSH
10408: LD_INT 4
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 5
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: PPUSH
10436: CALL_OW 72
10440: ST_TO_ADDR
10441: GO 10665
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10513
10451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10452: LD_ADDR_VAR 0 12
10456: PUSH
10457: LD_VAR 0 18
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_VAR 0 16
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: LD_INT 30
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 30
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 72
10510: ST_TO_ADDR
10511: GO 10665
10513: LD_INT 3
10515: DOUBLE
10516: EQUAL
10517: IFTRUE 10521
10519: GO 10583
10521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10522: LD_ADDR_VAR 0 12
10526: PUSH
10527: LD_VAR 0 18
10531: PPUSH
10532: LD_INT 22
10534: PUSH
10535: LD_VAR 0 16
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: LD_INT 30
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 30
10559: PUSH
10560: LD_INT 3
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 72
10580: ST_TO_ADDR
10581: GO 10665
10583: LD_INT 4
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10664
10591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10592: LD_ADDR_VAR 0 12
10596: PUSH
10597: LD_VAR 0 18
10601: PPUSH
10602: LD_INT 22
10604: PUSH
10605: LD_VAR 0 16
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: LD_INT 30
10619: PUSH
10620: LD_INT 6
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 30
10629: PUSH
10630: LD_INT 7
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 30
10639: PUSH
10640: LD_INT 8
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 72
10661: ST_TO_ADDR
10662: GO 10665
10664: POP
// if i = 1 then
10665: LD_VAR 0 8
10669: PUSH
10670: LD_INT 1
10672: EQUAL
10673: IFFALSE 10784
// begin tmp := [ ] ;
10675: LD_ADDR_VAR 0 19
10679: PUSH
10680: EMPTY
10681: ST_TO_ADDR
// for j in f do
10682: LD_ADDR_VAR 0 9
10686: PUSH
10687: LD_VAR 0 12
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10766
// if GetBType ( j ) = b_bunker then
10695: LD_VAR 0 9
10699: PPUSH
10700: CALL_OW 266
10704: PUSH
10705: LD_INT 32
10707: EQUAL
10708: IFFALSE 10735
// tmp := Insert ( tmp , 1 , j ) else
10710: LD_ADDR_VAR 0 19
10714: PUSH
10715: LD_VAR 0 19
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: LD_VAR 0 9
10727: PPUSH
10728: CALL_OW 2
10732: ST_TO_ADDR
10733: GO 10764
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10735: LD_ADDR_VAR 0 19
10739: PUSH
10740: LD_VAR 0 19
10744: PPUSH
10745: LD_VAR 0 19
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: PPUSH
10754: LD_VAR 0 9
10758: PPUSH
10759: CALL_OW 2
10763: ST_TO_ADDR
10764: GO 10692
10766: POP
10767: POP
// if tmp then
10768: LD_VAR 0 19
10772: IFFALSE 10784
// f := tmp ;
10774: LD_ADDR_VAR 0 12
10778: PUSH
10779: LD_VAR 0 19
10783: ST_TO_ADDR
// end ; x := personel [ i ] ;
10784: LD_ADDR_VAR 0 13
10788: PUSH
10789: LD_VAR 0 6
10793: PUSH
10794: LD_VAR 0 8
10798: ARRAY
10799: ST_TO_ADDR
// if x = - 1 then
10800: LD_VAR 0 13
10804: PUSH
10805: LD_INT 1
10807: NEG
10808: EQUAL
10809: IFFALSE 11018
// begin for j in f do
10811: LD_ADDR_VAR 0 9
10815: PUSH
10816: LD_VAR 0 12
10820: PUSH
10821: FOR_IN
10822: IFFALSE 11014
// repeat InitHc ;
10824: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10828: LD_VAR 0 9
10832: PPUSH
10833: CALL_OW 266
10837: PUSH
10838: LD_INT 5
10840: EQUAL
10841: IFFALSE 10911
// begin if UnitsInside ( j ) < 3 then
10843: LD_VAR 0 9
10847: PPUSH
10848: CALL_OW 313
10852: PUSH
10853: LD_INT 3
10855: LESS
10856: IFFALSE 10892
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10858: LD_INT 0
10860: PPUSH
10861: LD_INT 5
10863: PUSH
10864: LD_INT 8
10866: PUSH
10867: LD_INT 9
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: LD_VAR 0 17
10879: ARRAY
10880: PPUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 380
10890: GO 10909
// PrepareHuman ( false , i , skill ) ;
10892: LD_INT 0
10894: PPUSH
10895: LD_VAR 0 8
10899: PPUSH
10900: LD_VAR 0 4
10904: PPUSH
10905: CALL_OW 380
// end else
10909: GO 10928
// PrepareHuman ( false , i , skill ) ;
10911: LD_INT 0
10913: PPUSH
10914: LD_VAR 0 8
10918: PPUSH
10919: LD_VAR 0 4
10923: PPUSH
10924: CALL_OW 380
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 14
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10938: LD_ADDR_VAR 0 7
10942: PUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: LD_VAR 0 14
10955: PPUSH
10956: CALL_OW 2
10960: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10961: LD_VAR 0 14
10965: PPUSH
10966: LD_VAR 0 9
10970: PPUSH
10971: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10975: LD_VAR 0 9
10979: PPUSH
10980: CALL_OW 313
10984: PUSH
10985: LD_INT 6
10987: EQUAL
10988: PUSH
10989: LD_VAR 0 9
10993: PPUSH
10994: CALL_OW 266
10998: PUSH
10999: LD_INT 32
11001: PUSH
11002: LD_INT 31
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: IN
11009: OR
11010: IFFALSE 10824
11012: GO 10821
11014: POP
11015: POP
// end else
11016: GO 11398
// for j = 1 to x do
11018: LD_ADDR_VAR 0 9
11022: PUSH
11023: DOUBLE
11024: LD_INT 1
11026: DEC
11027: ST_TO_ADDR
11028: LD_VAR 0 13
11032: PUSH
11033: FOR_TO
11034: IFFALSE 11396
// begin InitHc ;
11036: CALL_OW 19
// if not f then
11040: LD_VAR 0 12
11044: NOT
11045: IFFALSE 11134
// begin PrepareHuman ( false , i , skill ) ;
11047: LD_INT 0
11049: PPUSH
11050: LD_VAR 0 8
11054: PPUSH
11055: LD_VAR 0 4
11059: PPUSH
11060: CALL_OW 380
// un := CreateHuman ;
11064: LD_ADDR_VAR 0 14
11068: PUSH
11069: CALL_OW 44
11073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11074: LD_ADDR_VAR 0 7
11078: PUSH
11079: LD_VAR 0 7
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_VAR 0 14
11091: PPUSH
11092: CALL_OW 2
11096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11097: LD_VAR 0 14
11101: PPUSH
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 250
11111: PPUSH
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 251
11121: PPUSH
11122: LD_INT 10
11124: PPUSH
11125: LD_INT 0
11127: PPUSH
11128: CALL_OW 50
// continue ;
11132: GO 11033
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11134: LD_VAR 0 12
11138: PUSH
11139: LD_INT 1
11141: ARRAY
11142: PPUSH
11143: CALL_OW 313
11147: PUSH
11148: LD_VAR 0 12
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: CALL_OW 266
11161: PUSH
11162: LD_INT 32
11164: PUSH
11165: LD_INT 31
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: IN
11172: AND
11173: PUSH
11174: LD_VAR 0 12
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: PPUSH
11183: CALL_OW 313
11187: PUSH
11188: LD_INT 6
11190: EQUAL
11191: OR
11192: IFFALSE 11212
// f := Delete ( f , 1 ) ;
11194: LD_ADDR_VAR 0 12
11198: PUSH
11199: LD_VAR 0 12
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 3
11211: ST_TO_ADDR
// if not f then
11212: LD_VAR 0 12
11216: NOT
11217: IFFALSE 11235
// begin x := x + 2 ;
11219: LD_ADDR_VAR 0 13
11223: PUSH
11224: LD_VAR 0 13
11228: PUSH
11229: LD_INT 2
11231: PLUS
11232: ST_TO_ADDR
// continue ;
11233: GO 11033
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11235: LD_VAR 0 12
11239: PUSH
11240: LD_INT 1
11242: ARRAY
11243: PPUSH
11244: CALL_OW 266
11248: PUSH
11249: LD_INT 5
11251: EQUAL
11252: IFFALSE 11326
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11254: LD_VAR 0 12
11258: PUSH
11259: LD_INT 1
11261: ARRAY
11262: PPUSH
11263: CALL_OW 313
11267: PUSH
11268: LD_INT 3
11270: LESS
11271: IFFALSE 11307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11273: LD_INT 0
11275: PPUSH
11276: LD_INT 5
11278: PUSH
11279: LD_INT 8
11281: PUSH
11282: LD_INT 9
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_VAR 0 17
11294: ARRAY
11295: PPUSH
11296: LD_VAR 0 4
11300: PPUSH
11301: CALL_OW 380
11305: GO 11324
// PrepareHuman ( false , i , skill ) ;
11307: LD_INT 0
11309: PPUSH
11310: LD_VAR 0 8
11314: PPUSH
11315: LD_VAR 0 4
11319: PPUSH
11320: CALL_OW 380
// end else
11324: GO 11343
// PrepareHuman ( false , i , skill ) ;
11326: LD_INT 0
11328: PPUSH
11329: LD_VAR 0 8
11333: PPUSH
11334: LD_VAR 0 4
11338: PPUSH
11339: CALL_OW 380
// un := CreateHuman ;
11343: LD_ADDR_VAR 0 14
11347: PUSH
11348: CALL_OW 44
11352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11353: LD_ADDR_VAR 0 7
11357: PUSH
11358: LD_VAR 0 7
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: LD_VAR 0 14
11370: PPUSH
11371: CALL_OW 2
11375: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11376: LD_VAR 0 14
11380: PPUSH
11381: LD_VAR 0 12
11385: PUSH
11386: LD_INT 1
11388: ARRAY
11389: PPUSH
11390: CALL_OW 52
// end ;
11394: GO 11033
11396: POP
11397: POP
// end ;
11398: GO 10335
11400: POP
11401: POP
// result := result ^ buildings ;
11402: LD_ADDR_VAR 0 7
11406: PUSH
11407: LD_VAR 0 7
11411: PUSH
11412: LD_VAR 0 18
11416: ADD
11417: ST_TO_ADDR
// end else
11418: GO 11561
// begin for i = 1 to personel do
11420: LD_ADDR_VAR 0 8
11424: PUSH
11425: DOUBLE
11426: LD_INT 1
11428: DEC
11429: ST_TO_ADDR
11430: LD_VAR 0 6
11434: PUSH
11435: FOR_TO
11436: IFFALSE 11559
// begin if i > 4 then
11438: LD_VAR 0 8
11442: PUSH
11443: LD_INT 4
11445: GREATER
11446: IFFALSE 11450
// break ;
11448: GO 11559
// x := personel [ i ] ;
11450: LD_ADDR_VAR 0 13
11454: PUSH
11455: LD_VAR 0 6
11459: PUSH
11460: LD_VAR 0 8
11464: ARRAY
11465: ST_TO_ADDR
// if x = - 1 then
11466: LD_VAR 0 13
11470: PUSH
11471: LD_INT 1
11473: NEG
11474: EQUAL
11475: IFFALSE 11479
// continue ;
11477: GO 11435
// PrepareHuman ( false , i , skill ) ;
11479: LD_INT 0
11481: PPUSH
11482: LD_VAR 0 8
11486: PPUSH
11487: LD_VAR 0 4
11491: PPUSH
11492: CALL_OW 380
// un := CreateHuman ;
11496: LD_ADDR_VAR 0 14
11500: PUSH
11501: CALL_OW 44
11505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11506: LD_VAR 0 14
11510: PPUSH
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 250
11520: PPUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 251
11530: PPUSH
11531: LD_INT 10
11533: PPUSH
11534: LD_INT 0
11536: PPUSH
11537: CALL_OW 50
// result := result ^ un ;
11541: LD_ADDR_VAR 0 7
11545: PUSH
11546: LD_VAR 0 7
11550: PUSH
11551: LD_VAR 0 14
11555: ADD
11556: ST_TO_ADDR
// end ;
11557: GO 11435
11559: POP
11560: POP
// end ; end ;
11561: LD_VAR 0 7
11565: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
// result := false ;
11584: LD_ADDR_VAR 0 3
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11592: LD_VAR 0 1
11596: NOT
11597: PUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 266
11607: PUSH
11608: LD_INT 32
11610: PUSH
11611: LD_INT 33
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: IN
11618: NOT
11619: OR
11620: IFFALSE 11624
// exit ;
11622: GO 12733
// nat := GetNation ( tower ) ;
11624: LD_ADDR_VAR 0 12
11628: PUSH
11629: LD_VAR 0 1
11633: PPUSH
11634: CALL_OW 248
11638: ST_TO_ADDR
// side := GetSide ( tower ) ;
11639: LD_ADDR_VAR 0 16
11643: PUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 255
11653: ST_TO_ADDR
// x := GetX ( tower ) ;
11654: LD_ADDR_VAR 0 10
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: CALL_OW 250
11668: ST_TO_ADDR
// y := GetY ( tower ) ;
11669: LD_ADDR_VAR 0 11
11673: PUSH
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 251
11683: ST_TO_ADDR
// if not x or not y then
11684: LD_VAR 0 10
11688: NOT
11689: PUSH
11690: LD_VAR 0 11
11694: NOT
11695: OR
11696: IFFALSE 11700
// exit ;
11698: GO 12733
// weapon := 0 ;
11700: LD_ADDR_VAR 0 18
11704: PUSH
11705: LD_INT 0
11707: ST_TO_ADDR
// fac_list := [ ] ;
11708: LD_ADDR_VAR 0 17
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 274
11729: PPUSH
11730: LD_VAR 0 2
11734: PPUSH
11735: LD_INT 0
11737: PPUSH
11738: CALL 9304 0 3
11742: PPUSH
11743: LD_INT 30
11745: PUSH
11746: LD_INT 3
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 72
11757: ST_TO_ADDR
// if not factories then
11758: LD_VAR 0 6
11762: NOT
11763: IFFALSE 11767
// exit ;
11765: GO 12733
// for i in factories do
11767: LD_ADDR_VAR 0 8
11771: PUSH
11772: LD_VAR 0 6
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11803
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11780: LD_ADDR_VAR 0 17
11784: PUSH
11785: LD_VAR 0 17
11789: PUSH
11790: LD_VAR 0 8
11794: PPUSH
11795: CALL_OW 478
11799: UNION
11800: ST_TO_ADDR
11801: GO 11777
11803: POP
11804: POP
// if not fac_list then
11805: LD_VAR 0 17
11809: NOT
11810: IFFALSE 11814
// exit ;
11812: GO 12733
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11814: LD_ADDR_VAR 0 5
11818: PUSH
11819: LD_INT 4
11821: PUSH
11822: LD_INT 5
11824: PUSH
11825: LD_INT 9
11827: PUSH
11828: LD_INT 10
11830: PUSH
11831: LD_INT 6
11833: PUSH
11834: LD_INT 7
11836: PUSH
11837: LD_INT 11
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 27
11851: PUSH
11852: LD_INT 28
11854: PUSH
11855: LD_INT 26
11857: PUSH
11858: LD_INT 30
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 43
11869: PUSH
11870: LD_INT 44
11872: PUSH
11873: LD_INT 46
11875: PUSH
11876: LD_INT 45
11878: PUSH
11879: LD_INT 47
11881: PUSH
11882: LD_INT 49
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: LD_VAR 0 12
11902: ARRAY
11903: ST_TO_ADDR
// list := list isect fac_list ;
11904: LD_ADDR_VAR 0 5
11908: PUSH
11909: LD_VAR 0 5
11913: PUSH
11914: LD_VAR 0 17
11918: ISECT
11919: ST_TO_ADDR
// if not list then
11920: LD_VAR 0 5
11924: NOT
11925: IFFALSE 11929
// exit ;
11927: GO 12733
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11929: LD_VAR 0 12
11933: PUSH
11934: LD_INT 3
11936: EQUAL
11937: PUSH
11938: LD_INT 49
11940: PUSH
11941: LD_VAR 0 5
11945: IN
11946: AND
11947: PUSH
11948: LD_INT 31
11950: PPUSH
11951: LD_VAR 0 16
11955: PPUSH
11956: CALL_OW 321
11960: PUSH
11961: LD_INT 2
11963: EQUAL
11964: AND
11965: IFFALSE 12025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11967: LD_INT 22
11969: PUSH
11970: LD_VAR 0 16
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 35
11981: PUSH
11982: LD_INT 49
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 91
11991: PUSH
11992: LD_VAR 0 1
11996: PUSH
11997: LD_INT 10
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: PPUSH
12010: CALL_OW 69
12014: NOT
12015: IFFALSE 12025
// weapon := ru_time_lapser ;
12017: LD_ADDR_VAR 0 18
12021: PUSH
12022: LD_INT 49
12024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12025: LD_VAR 0 12
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: IN
12040: PUSH
12041: LD_INT 11
12043: PUSH
12044: LD_VAR 0 5
12048: IN
12049: PUSH
12050: LD_INT 30
12052: PUSH
12053: LD_VAR 0 5
12057: IN
12058: OR
12059: AND
12060: PUSH
12061: LD_INT 6
12063: PPUSH
12064: LD_VAR 0 16
12068: PPUSH
12069: CALL_OW 321
12073: PUSH
12074: LD_INT 2
12076: EQUAL
12077: AND
12078: IFFALSE 12243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12080: LD_INT 22
12082: PUSH
12083: LD_VAR 0 16
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: LD_INT 35
12097: PUSH
12098: LD_INT 11
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 35
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 91
12122: PUSH
12123: LD_VAR 0 1
12127: PUSH
12128: LD_INT 18
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: NOT
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_VAR 0 16
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 32
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 30
12174: PUSH
12175: LD_INT 33
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 91
12189: PUSH
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 12
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: PUSH
12216: LD_INT 2
12218: GREATER
12219: AND
12220: IFFALSE 12243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12222: LD_ADDR_VAR 0 18
12226: PUSH
12227: LD_INT 11
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_VAR 0 12
12241: ARRAY
12242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12243: LD_VAR 0 18
12247: NOT
12248: PUSH
12249: LD_INT 40
12251: PPUSH
12252: LD_VAR 0 16
12256: PPUSH
12257: CALL_OW 321
12261: PUSH
12262: LD_INT 2
12264: EQUAL
12265: AND
12266: PUSH
12267: LD_INT 7
12269: PUSH
12270: LD_VAR 0 5
12274: IN
12275: PUSH
12276: LD_INT 28
12278: PUSH
12279: LD_VAR 0 5
12283: IN
12284: OR
12285: PUSH
12286: LD_INT 45
12288: PUSH
12289: LD_VAR 0 5
12293: IN
12294: OR
12295: AND
12296: IFFALSE 12550
// begin hex := GetHexInfo ( x , y ) ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: LD_VAR 0 11
12312: PPUSH
12313: CALL_OW 546
12317: ST_TO_ADDR
// if hex [ 1 ] then
12318: LD_VAR 0 4
12322: PUSH
12323: LD_INT 1
12325: ARRAY
12326: IFFALSE 12330
// exit ;
12328: GO 12733
// height := hex [ 2 ] ;
12330: LD_ADDR_VAR 0 15
12334: PUSH
12335: LD_VAR 0 4
12339: PUSH
12340: LD_INT 2
12342: ARRAY
12343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12344: LD_ADDR_VAR 0 14
12348: PUSH
12349: LD_INT 0
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: ST_TO_ADDR
// for i in tmp do
12367: LD_ADDR_VAR 0 8
12371: PUSH
12372: LD_VAR 0 14
12376: PUSH
12377: FOR_IN
12378: IFFALSE 12548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12380: LD_ADDR_VAR 0 9
12384: PUSH
12385: LD_VAR 0 10
12389: PPUSH
12390: LD_VAR 0 8
12394: PPUSH
12395: LD_INT 5
12397: PPUSH
12398: CALL_OW 272
12402: PUSH
12403: LD_VAR 0 11
12407: PPUSH
12408: LD_VAR 0 8
12412: PPUSH
12413: LD_INT 5
12415: PPUSH
12416: CALL_OW 273
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12425: LD_VAR 0 9
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: LD_VAR 0 9
12438: PUSH
12439: LD_INT 2
12441: ARRAY
12442: PPUSH
12443: CALL_OW 488
12447: IFFALSE 12546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: LD_VAR 0 9
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: LD_VAR 0 9
12467: PUSH
12468: LD_INT 2
12470: ARRAY
12471: PPUSH
12472: CALL_OW 546
12476: ST_TO_ADDR
// if hex [ 1 ] then
12477: LD_VAR 0 4
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: IFFALSE 12489
// continue ;
12487: GO 12377
// h := hex [ 2 ] ;
12489: LD_ADDR_VAR 0 13
12493: PUSH
12494: LD_VAR 0 4
12498: PUSH
12499: LD_INT 2
12501: ARRAY
12502: ST_TO_ADDR
// if h + 7 < height then
12503: LD_VAR 0 13
12507: PUSH
12508: LD_INT 7
12510: PLUS
12511: PUSH
12512: LD_VAR 0 15
12516: LESS
12517: IFFALSE 12546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12519: LD_ADDR_VAR 0 18
12523: PUSH
12524: LD_INT 7
12526: PUSH
12527: LD_INT 28
12529: PUSH
12530: LD_INT 45
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_VAR 0 12
12542: ARRAY
12543: ST_TO_ADDR
// break ;
12544: GO 12548
// end ; end ; end ;
12546: GO 12377
12548: POP
12549: POP
// end ; if not weapon then
12550: LD_VAR 0 18
12554: NOT
12555: IFFALSE 12615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12557: LD_ADDR_VAR 0 5
12561: PUSH
12562: LD_VAR 0 5
12566: PUSH
12567: LD_INT 11
12569: PUSH
12570: LD_INT 30
12572: PUSH
12573: LD_INT 49
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: DIFF
12581: ST_TO_ADDR
// if not list then
12582: LD_VAR 0 5
12586: NOT
12587: IFFALSE 12591
// exit ;
12589: GO 12733
// weapon := list [ rand ( 1 , list ) ] ;
12591: LD_ADDR_VAR 0 18
12595: PUSH
12596: LD_VAR 0 5
12600: PUSH
12601: LD_INT 1
12603: PPUSH
12604: LD_VAR 0 5
12608: PPUSH
12609: CALL_OW 12
12613: ARRAY
12614: ST_TO_ADDR
// end ; if weapon then
12615: LD_VAR 0 18
12619: IFFALSE 12733
// begin tmp := CostOfWeapon ( weapon ) ;
12621: LD_ADDR_VAR 0 14
12625: PUSH
12626: LD_VAR 0 18
12630: PPUSH
12631: CALL_OW 451
12635: ST_TO_ADDR
// j := GetBase ( tower ) ;
12636: LD_ADDR_VAR 0 9
12640: PUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 274
12650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12651: LD_VAR 0 9
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 275
12663: PUSH
12664: LD_VAR 0 14
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: GREATEREQUAL
12673: PUSH
12674: LD_VAR 0 9
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 275
12686: PUSH
12687: LD_VAR 0 14
12691: PUSH
12692: LD_INT 2
12694: ARRAY
12695: GREATEREQUAL
12696: AND
12697: PUSH
12698: LD_VAR 0 9
12702: PPUSH
12703: LD_INT 3
12705: PPUSH
12706: CALL_OW 275
12710: PUSH
12711: LD_VAR 0 14
12715: PUSH
12716: LD_INT 3
12718: ARRAY
12719: GREATEREQUAL
12720: AND
12721: IFFALSE 12733
// result := weapon ;
12723: LD_ADDR_VAR 0 3
12727: PUSH
12728: LD_VAR 0 18
12732: ST_TO_ADDR
// end ; end ;
12733: LD_VAR 0 3
12737: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12738: LD_INT 0
12740: PPUSH
12741: PPUSH
// result := true ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// if array1 = array2 then
12750: LD_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: EQUAL
12760: IFFALSE 12820
// begin for i = 1 to array1 do
12762: LD_ADDR_VAR 0 4
12766: PUSH
12767: DOUBLE
12768: LD_INT 1
12770: DEC
12771: ST_TO_ADDR
12772: LD_VAR 0 1
12776: PUSH
12777: FOR_TO
12778: IFFALSE 12816
// if array1 [ i ] <> array2 [ i ] then
12780: LD_VAR 0 1
12784: PUSH
12785: LD_VAR 0 4
12789: ARRAY
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: LD_VAR 0 4
12800: ARRAY
12801: NONEQUAL
12802: IFFALSE 12814
// begin result := false ;
12804: LD_ADDR_VAR 0 3
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// break ;
12812: GO 12816
// end ;
12814: GO 12777
12816: POP
12817: POP
// end else
12818: GO 12828
// result := false ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// end ;
12828: LD_VAR 0 3
12832: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12833: LD_INT 0
12835: PPUSH
12836: PPUSH
// if not array1 or not array2 then
12837: LD_VAR 0 1
12841: NOT
12842: PUSH
12843: LD_VAR 0 2
12847: NOT
12848: OR
12849: IFFALSE 12853
// exit ;
12851: GO 12917
// result := true ;
12853: LD_ADDR_VAR 0 3
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
// for i = 1 to array1 do
12861: LD_ADDR_VAR 0 4
12865: PUSH
12866: DOUBLE
12867: LD_INT 1
12869: DEC
12870: ST_TO_ADDR
12871: LD_VAR 0 1
12875: PUSH
12876: FOR_TO
12877: IFFALSE 12915
// if array1 [ i ] <> array2 [ i ] then
12879: LD_VAR 0 1
12883: PUSH
12884: LD_VAR 0 4
12888: ARRAY
12889: PUSH
12890: LD_VAR 0 2
12894: PUSH
12895: LD_VAR 0 4
12899: ARRAY
12900: NONEQUAL
12901: IFFALSE 12913
// begin result := false ;
12903: LD_ADDR_VAR 0 3
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// break ;
12911: GO 12915
// end ;
12913: GO 12876
12915: POP
12916: POP
// end ;
12917: LD_VAR 0 3
12921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12922: LD_INT 0
12924: PPUSH
12925: PPUSH
12926: PPUSH
// pom := GetBase ( fac ) ;
12927: LD_ADDR_VAR 0 5
12931: PUSH
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 274
12941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12942: LD_ADDR_VAR 0 4
12946: PUSH
12947: LD_VAR 0 2
12951: PUSH
12952: LD_INT 1
12954: ARRAY
12955: PPUSH
12956: LD_VAR 0 2
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: LD_VAR 0 2
12969: PUSH
12970: LD_INT 3
12972: ARRAY
12973: PPUSH
12974: LD_VAR 0 2
12978: PUSH
12979: LD_INT 4
12981: ARRAY
12982: PPUSH
12983: CALL_OW 449
12987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 5
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 275
13005: PUSH
13006: LD_VAR 0 4
13010: PUSH
13011: LD_INT 1
13013: ARRAY
13014: GREATEREQUAL
13015: PUSH
13016: LD_VAR 0 5
13020: PPUSH
13021: LD_INT 2
13023: PPUSH
13024: CALL_OW 275
13028: PUSH
13029: LD_VAR 0 4
13033: PUSH
13034: LD_INT 2
13036: ARRAY
13037: GREATEREQUAL
13038: AND
13039: PUSH
13040: LD_VAR 0 5
13044: PPUSH
13045: LD_INT 3
13047: PPUSH
13048: CALL_OW 275
13052: PUSH
13053: LD_VAR 0 4
13057: PUSH
13058: LD_INT 3
13060: ARRAY
13061: GREATEREQUAL
13062: AND
13063: ST_TO_ADDR
// end ;
13064: LD_VAR 0 3
13068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13069: LD_INT 0
13071: PPUSH
13072: PPUSH
13073: PPUSH
13074: PPUSH
// pom := GetBase ( building ) ;
13075: LD_ADDR_VAR 0 3
13079: PUSH
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 274
13089: ST_TO_ADDR
// if not pom then
13090: LD_VAR 0 3
13094: NOT
13095: IFFALSE 13099
// exit ;
13097: GO 13269
// btype := GetBType ( building ) ;
13099: LD_ADDR_VAR 0 5
13103: PUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 266
13113: ST_TO_ADDR
// if btype = b_armoury then
13114: LD_VAR 0 5
13118: PUSH
13119: LD_INT 4
13121: EQUAL
13122: IFFALSE 13132
// btype := b_barracks ;
13124: LD_ADDR_VAR 0 5
13128: PUSH
13129: LD_INT 5
13131: ST_TO_ADDR
// if btype = b_depot then
13132: LD_VAR 0 5
13136: PUSH
13137: LD_INT 0
13139: EQUAL
13140: IFFALSE 13150
// btype := b_warehouse ;
13142: LD_ADDR_VAR 0 5
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if btype = b_workshop then
13150: LD_VAR 0 5
13154: PUSH
13155: LD_INT 2
13157: EQUAL
13158: IFFALSE 13168
// btype := b_factory ;
13160: LD_ADDR_VAR 0 5
13164: PUSH
13165: LD_INT 3
13167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13168: LD_ADDR_VAR 0 4
13172: PUSH
13173: LD_VAR 0 5
13177: PPUSH
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 248
13187: PPUSH
13188: CALL_OW 450
13192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 275
13210: PUSH
13211: LD_VAR 0 4
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: GREATEREQUAL
13220: PUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 2
13228: PPUSH
13229: CALL_OW 275
13233: PUSH
13234: LD_VAR 0 4
13238: PUSH
13239: LD_INT 2
13241: ARRAY
13242: GREATEREQUAL
13243: AND
13244: PUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 3
13252: PPUSH
13253: CALL_OW 275
13257: PUSH
13258: LD_VAR 0 4
13262: PUSH
13263: LD_INT 3
13265: ARRAY
13266: GREATEREQUAL
13267: AND
13268: ST_TO_ADDR
// end ;
13269: LD_VAR 0 2
13273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13274: LD_INT 0
13276: PPUSH
13277: PPUSH
13278: PPUSH
// pom := GetBase ( building ) ;
13279: LD_ADDR_VAR 0 4
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 274
13293: ST_TO_ADDR
// if not pom then
13294: LD_VAR 0 4
13298: NOT
13299: IFFALSE 13303
// exit ;
13301: GO 13404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13303: LD_ADDR_VAR 0 5
13307: PUSH
13308: LD_VAR 0 2
13312: PPUSH
13313: LD_VAR 0 1
13317: PPUSH
13318: CALL_OW 248
13322: PPUSH
13323: CALL_OW 450
13327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13328: LD_ADDR_VAR 0 3
13332: PUSH
13333: LD_VAR 0 4
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 275
13345: PUSH
13346: LD_VAR 0 5
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: GREATEREQUAL
13355: PUSH
13356: LD_VAR 0 4
13360: PPUSH
13361: LD_INT 2
13363: PPUSH
13364: CALL_OW 275
13368: PUSH
13369: LD_VAR 0 5
13373: PUSH
13374: LD_INT 2
13376: ARRAY
13377: GREATEREQUAL
13378: AND
13379: PUSH
13380: LD_VAR 0 4
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: CALL_OW 275
13392: PUSH
13393: LD_VAR 0 5
13397: PUSH
13398: LD_INT 3
13400: ARRAY
13401: GREATEREQUAL
13402: AND
13403: ST_TO_ADDR
// end ;
13404: LD_VAR 0 3
13408: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13409: LD_INT 0
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
// result := false ;
13422: LD_ADDR_VAR 0 8
13426: PUSH
13427: LD_INT 0
13429: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13430: LD_VAR 0 5
13434: NOT
13435: PUSH
13436: LD_VAR 0 1
13440: NOT
13441: OR
13442: PUSH
13443: LD_VAR 0 2
13447: NOT
13448: OR
13449: PUSH
13450: LD_VAR 0 3
13454: NOT
13455: OR
13456: IFFALSE 13460
// exit ;
13458: GO 14274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13460: LD_ADDR_VAR 0 14
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: LD_VAR 0 2
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_VAR 0 4
13484: PPUSH
13485: LD_VAR 0 5
13489: PUSH
13490: LD_INT 1
13492: ARRAY
13493: PPUSH
13494: CALL_OW 248
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL 15527 0 6
13506: ST_TO_ADDR
// if not hexes then
13507: LD_VAR 0 14
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 14274
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13516: LD_ADDR_VAR 0 17
13520: PUSH
13521: LD_VAR 0 5
13525: PPUSH
13526: LD_INT 22
13528: PUSH
13529: LD_VAR 0 13
13533: PPUSH
13534: CALL_OW 255
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: LD_INT 30
13548: PUSH
13549: LD_INT 0
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 30
13558: PUSH
13559: LD_INT 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 72
13579: ST_TO_ADDR
// for i = 1 to hexes do
13580: LD_ADDR_VAR 0 9
13584: PUSH
13585: DOUBLE
13586: LD_INT 1
13588: DEC
13589: ST_TO_ADDR
13590: LD_VAR 0 14
13594: PUSH
13595: FOR_TO
13596: IFFALSE 14272
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13598: LD_ADDR_VAR 0 13
13602: PUSH
13603: LD_VAR 0 14
13607: PUSH
13608: LD_VAR 0 9
13612: ARRAY
13613: PUSH
13614: LD_INT 1
13616: ARRAY
13617: PPUSH
13618: LD_VAR 0 14
13622: PUSH
13623: LD_VAR 0 9
13627: ARRAY
13628: PUSH
13629: LD_INT 2
13631: ARRAY
13632: PPUSH
13633: CALL_OW 428
13637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13638: LD_VAR 0 14
13642: PUSH
13643: LD_VAR 0 9
13647: ARRAY
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: PPUSH
13653: LD_VAR 0 14
13657: PUSH
13658: LD_VAR 0 9
13662: ARRAY
13663: PUSH
13664: LD_INT 2
13666: ARRAY
13667: PPUSH
13668: CALL_OW 351
13672: PUSH
13673: LD_VAR 0 14
13677: PUSH
13678: LD_VAR 0 9
13682: ARRAY
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_VAR 0 14
13692: PUSH
13693: LD_VAR 0 9
13697: ARRAY
13698: PUSH
13699: LD_INT 2
13701: ARRAY
13702: PPUSH
13703: CALL_OW 488
13707: NOT
13708: OR
13709: PUSH
13710: LD_VAR 0 13
13714: PPUSH
13715: CALL_OW 247
13719: PUSH
13720: LD_INT 3
13722: EQUAL
13723: OR
13724: IFFALSE 13730
// exit ;
13726: POP
13727: POP
13728: GO 14274
// if not tmp then
13730: LD_VAR 0 13
13734: NOT
13735: IFFALSE 13739
// continue ;
13737: GO 13595
// result := true ;
13739: LD_ADDR_VAR 0 8
13743: PUSH
13744: LD_INT 1
13746: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13747: LD_VAR 0 6
13751: PUSH
13752: LD_VAR 0 13
13756: PPUSH
13757: CALL_OW 247
13761: PUSH
13762: LD_INT 2
13764: EQUAL
13765: AND
13766: PUSH
13767: LD_VAR 0 13
13771: PPUSH
13772: CALL_OW 263
13776: PUSH
13777: LD_INT 1
13779: EQUAL
13780: AND
13781: IFFALSE 13945
// begin if IsDrivenBy ( tmp ) then
13783: LD_VAR 0 13
13787: PPUSH
13788: CALL_OW 311
13792: IFFALSE 13796
// continue ;
13794: GO 13595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13796: LD_VAR 0 6
13800: PPUSH
13801: LD_INT 3
13803: PUSH
13804: LD_INT 60
13806: PUSH
13807: EMPTY
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 3
13816: PUSH
13817: LD_INT 55
13819: PUSH
13820: EMPTY
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 72
13835: IFFALSE 13943
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13837: LD_ADDR_VAR 0 18
13841: PUSH
13842: LD_VAR 0 6
13846: PPUSH
13847: LD_INT 3
13849: PUSH
13850: LD_INT 60
13852: PUSH
13853: EMPTY
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 55
13865: PUSH
13866: EMPTY
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 72
13881: PUSH
13882: LD_INT 1
13884: ARRAY
13885: ST_TO_ADDR
// if IsInUnit ( driver ) then
13886: LD_VAR 0 18
13890: PPUSH
13891: CALL_OW 310
13895: IFFALSE 13906
// ComExit ( driver ) ;
13897: LD_VAR 0 18
13901: PPUSH
13902: CALL 39306 0 1
// AddComEnterUnit ( driver , tmp ) ;
13906: LD_VAR 0 18
13910: PPUSH
13911: LD_VAR 0 13
13915: PPUSH
13916: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13920: LD_VAR 0 18
13924: PPUSH
13925: LD_VAR 0 7
13929: PPUSH
13930: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13934: LD_VAR 0 18
13938: PPUSH
13939: CALL_OW 181
// end ; continue ;
13943: GO 13595
// end ; if not cleaners or not tmp in cleaners then
13945: LD_VAR 0 6
13949: NOT
13950: PUSH
13951: LD_VAR 0 13
13955: PUSH
13956: LD_VAR 0 6
13960: IN
13961: NOT
13962: OR
13963: IFFALSE 14270
// begin if dep then
13965: LD_VAR 0 17
13969: IFFALSE 14105
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13971: LD_ADDR_VAR 0 16
13975: PUSH
13976: LD_VAR 0 17
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: CALL_OW 250
13989: PPUSH
13990: LD_VAR 0 17
13994: PUSH
13995: LD_INT 1
13997: ARRAY
13998: PPUSH
13999: CALL_OW 254
14003: PPUSH
14004: LD_INT 5
14006: PPUSH
14007: CALL_OW 272
14011: PUSH
14012: LD_VAR 0 17
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 251
14025: PPUSH
14026: LD_VAR 0 17
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 254
14039: PPUSH
14040: LD_INT 5
14042: PPUSH
14043: CALL_OW 273
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14052: LD_VAR 0 16
14056: PUSH
14057: LD_INT 1
14059: ARRAY
14060: PPUSH
14061: LD_VAR 0 16
14065: PUSH
14066: LD_INT 2
14068: ARRAY
14069: PPUSH
14070: CALL_OW 488
14074: IFFALSE 14105
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14076: LD_VAR 0 13
14080: PPUSH
14081: LD_VAR 0 16
14085: PUSH
14086: LD_INT 1
14088: ARRAY
14089: PPUSH
14090: LD_VAR 0 16
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PPUSH
14099: CALL_OW 111
// continue ;
14103: GO 13595
// end ; end ; r := GetDir ( tmp ) ;
14105: LD_ADDR_VAR 0 15
14109: PUSH
14110: LD_VAR 0 13
14114: PPUSH
14115: CALL_OW 254
14119: ST_TO_ADDR
// if r = 5 then
14120: LD_VAR 0 15
14124: PUSH
14125: LD_INT 5
14127: EQUAL
14128: IFFALSE 14138
// r := 0 ;
14130: LD_ADDR_VAR 0 15
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// for j = r to 5 do
14138: LD_ADDR_VAR 0 10
14142: PUSH
14143: DOUBLE
14144: LD_VAR 0 15
14148: DEC
14149: ST_TO_ADDR
14150: LD_INT 5
14152: PUSH
14153: FOR_TO
14154: IFFALSE 14268
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14156: LD_ADDR_VAR 0 11
14160: PUSH
14161: LD_VAR 0 13
14165: PPUSH
14166: CALL_OW 250
14170: PPUSH
14171: LD_VAR 0 10
14175: PPUSH
14176: LD_INT 2
14178: PPUSH
14179: CALL_OW 272
14183: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14184: LD_ADDR_VAR 0 12
14188: PUSH
14189: LD_VAR 0 13
14193: PPUSH
14194: CALL_OW 251
14198: PPUSH
14199: LD_VAR 0 10
14203: PPUSH
14204: LD_INT 2
14206: PPUSH
14207: CALL_OW 273
14211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14212: LD_VAR 0 11
14216: PPUSH
14217: LD_VAR 0 12
14221: PPUSH
14222: CALL_OW 488
14226: PUSH
14227: LD_VAR 0 11
14231: PPUSH
14232: LD_VAR 0 12
14236: PPUSH
14237: CALL_OW 428
14241: NOT
14242: AND
14243: IFFALSE 14266
// begin ComMoveXY ( tmp , _x , _y ) ;
14245: LD_VAR 0 13
14249: PPUSH
14250: LD_VAR 0 11
14254: PPUSH
14255: LD_VAR 0 12
14259: PPUSH
14260: CALL_OW 111
// break ;
14264: GO 14268
// end ; end ;
14266: GO 14153
14268: POP
14269: POP
// end ; end ;
14270: GO 13595
14272: POP
14273: POP
// end ;
14274: LD_VAR 0 8
14278: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14279: LD_INT 0
14281: PPUSH
// result := true ;
14282: LD_ADDR_VAR 0 3
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14290: LD_VAR 0 2
14294: PUSH
14295: LD_INT 24
14297: DOUBLE
14298: EQUAL
14299: IFTRUE 14309
14301: LD_INT 33
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14334
14309: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_INT 32
14317: PPUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 321
14327: PUSH
14328: LD_INT 2
14330: EQUAL
14331: ST_TO_ADDR
14332: GO 14650
14334: LD_INT 20
14336: DOUBLE
14337: EQUAL
14338: IFTRUE 14342
14340: GO 14367
14342: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14343: LD_ADDR_VAR 0 3
14347: PUSH
14348: LD_INT 6
14350: PPUSH
14351: LD_VAR 0 1
14355: PPUSH
14356: CALL_OW 321
14360: PUSH
14361: LD_INT 2
14363: EQUAL
14364: ST_TO_ADDR
14365: GO 14650
14367: LD_INT 22
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14381
14373: LD_INT 36
14375: DOUBLE
14376: EQUAL
14377: IFTRUE 14381
14379: GO 14406
14381: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 15
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 321
14399: PUSH
14400: LD_INT 2
14402: EQUAL
14403: ST_TO_ADDR
14404: GO 14650
14406: LD_INT 30
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14439
14414: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 20
14422: PPUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 321
14432: PUSH
14433: LD_INT 2
14435: EQUAL
14436: ST_TO_ADDR
14437: GO 14650
14439: LD_INT 28
14441: DOUBLE
14442: EQUAL
14443: IFTRUE 14453
14445: LD_INT 21
14447: DOUBLE
14448: EQUAL
14449: IFTRUE 14453
14451: GO 14478
14453: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14454: LD_ADDR_VAR 0 3
14458: PUSH
14459: LD_INT 21
14461: PPUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 321
14471: PUSH
14472: LD_INT 2
14474: EQUAL
14475: ST_TO_ADDR
14476: GO 14650
14478: LD_INT 16
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14511
14486: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_INT 84
14494: PPUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 321
14504: PUSH
14505: LD_INT 2
14507: EQUAL
14508: ST_TO_ADDR
14509: GO 14650
14511: LD_INT 19
14513: DOUBLE
14514: EQUAL
14515: IFTRUE 14525
14517: LD_INT 23
14519: DOUBLE
14520: EQUAL
14521: IFTRUE 14525
14523: GO 14550
14525: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14526: LD_ADDR_VAR 0 3
14530: PUSH
14531: LD_INT 83
14533: PPUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 321
14543: PUSH
14544: LD_INT 2
14546: EQUAL
14547: ST_TO_ADDR
14548: GO 14650
14550: LD_INT 17
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14558
14556: GO 14583
14558: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: LD_INT 39
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 321
14576: PUSH
14577: LD_INT 2
14579: EQUAL
14580: ST_TO_ADDR
14581: GO 14650
14583: LD_INT 18
14585: DOUBLE
14586: EQUAL
14587: IFTRUE 14591
14589: GO 14616
14591: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_INT 40
14599: PPUSH
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 321
14609: PUSH
14610: LD_INT 2
14612: EQUAL
14613: ST_TO_ADDR
14614: GO 14650
14616: LD_INT 27
14618: DOUBLE
14619: EQUAL
14620: IFTRUE 14624
14622: GO 14649
14624: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14625: LD_ADDR_VAR 0 3
14629: PUSH
14630: LD_INT 35
14632: PPUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 321
14642: PUSH
14643: LD_INT 2
14645: EQUAL
14646: ST_TO_ADDR
14647: GO 14650
14649: POP
// end ;
14650: LD_VAR 0 3
14654: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14655: LD_INT 0
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
// result := false ;
14668: LD_ADDR_VAR 0 6
14672: PUSH
14673: LD_INT 0
14675: ST_TO_ADDR
// if btype = b_depot then
14676: LD_VAR 0 2
14680: PUSH
14681: LD_INT 0
14683: EQUAL
14684: IFFALSE 14696
// begin result := true ;
14686: LD_ADDR_VAR 0 6
14690: PUSH
14691: LD_INT 1
14693: ST_TO_ADDR
// exit ;
14694: GO 15522
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14696: LD_VAR 0 1
14700: NOT
14701: PUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 0
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: IN
14722: NOT
14723: OR
14724: PUSH
14725: LD_VAR 0 2
14729: NOT
14730: OR
14731: PUSH
14732: LD_VAR 0 5
14736: PUSH
14737: LD_INT 0
14739: PUSH
14740: LD_INT 1
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: LD_INT 3
14748: PUSH
14749: LD_INT 4
14751: PUSH
14752: LD_INT 5
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: IN
14763: NOT
14764: OR
14765: PUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_VAR 0 4
14775: PPUSH
14776: CALL_OW 488
14780: NOT
14781: OR
14782: IFFALSE 14786
// exit ;
14784: GO 15522
// side := GetSide ( depot ) ;
14786: LD_ADDR_VAR 0 9
14790: PUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 255
14800: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14801: LD_VAR 0 9
14805: PPUSH
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL 14279 0 2
14815: NOT
14816: IFFALSE 14820
// exit ;
14818: GO 15522
// pom := GetBase ( depot ) ;
14820: LD_ADDR_VAR 0 10
14824: PUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 274
14834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14835: LD_ADDR_VAR 0 11
14839: PUSH
14840: LD_VAR 0 2
14844: PPUSH
14845: LD_VAR 0 1
14849: PPUSH
14850: CALL_OW 248
14854: PPUSH
14855: CALL_OW 450
14859: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14860: LD_VAR 0 10
14864: PPUSH
14865: LD_INT 1
14867: PPUSH
14868: CALL_OW 275
14872: PUSH
14873: LD_VAR 0 11
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: GREATEREQUAL
14882: PUSH
14883: LD_VAR 0 10
14887: PPUSH
14888: LD_INT 2
14890: PPUSH
14891: CALL_OW 275
14895: PUSH
14896: LD_VAR 0 11
14900: PUSH
14901: LD_INT 2
14903: ARRAY
14904: GREATEREQUAL
14905: AND
14906: PUSH
14907: LD_VAR 0 10
14911: PPUSH
14912: LD_INT 3
14914: PPUSH
14915: CALL_OW 275
14919: PUSH
14920: LD_VAR 0 11
14924: PUSH
14925: LD_INT 3
14927: ARRAY
14928: GREATEREQUAL
14929: AND
14930: NOT
14931: IFFALSE 14935
// exit ;
14933: GO 15522
// if GetBType ( depot ) = b_depot then
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 266
14944: PUSH
14945: LD_INT 0
14947: EQUAL
14948: IFFALSE 14960
// dist := 28 else
14950: LD_ADDR_VAR 0 14
14954: PUSH
14955: LD_INT 28
14957: ST_TO_ADDR
14958: GO 14968
// dist := 36 ;
14960: LD_ADDR_VAR 0 14
14964: PUSH
14965: LD_INT 36
14967: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14968: LD_VAR 0 1
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: LD_VAR 0 4
14982: PPUSH
14983: CALL_OW 297
14987: PUSH
14988: LD_VAR 0 14
14992: GREATER
14993: IFFALSE 14997
// exit ;
14995: GO 15522
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14997: LD_ADDR_VAR 0 12
15001: PUSH
15002: LD_VAR 0 2
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_VAR 0 4
15016: PPUSH
15017: LD_VAR 0 5
15021: PPUSH
15022: LD_VAR 0 1
15026: PPUSH
15027: CALL_OW 248
15031: PPUSH
15032: LD_INT 0
15034: PPUSH
15035: CALL 15527 0 6
15039: ST_TO_ADDR
// if not hexes then
15040: LD_VAR 0 12
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15522
// hex := GetHexInfo ( x , y ) ;
15049: LD_ADDR_VAR 0 15
15053: PUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: LD_VAR 0 4
15063: PPUSH
15064: CALL_OW 546
15068: ST_TO_ADDR
// if hex [ 1 ] then
15069: LD_VAR 0 15
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: IFFALSE 15081
// exit ;
15079: GO 15522
// height := hex [ 2 ] ;
15081: LD_ADDR_VAR 0 13
15085: PUSH
15086: LD_VAR 0 15
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: ST_TO_ADDR
// for i = 1 to hexes do
15095: LD_ADDR_VAR 0 7
15099: PUSH
15100: DOUBLE
15101: LD_INT 1
15103: DEC
15104: ST_TO_ADDR
15105: LD_VAR 0 12
15109: PUSH
15110: FOR_TO
15111: IFFALSE 15441
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15113: LD_VAR 0 12
15117: PUSH
15118: LD_VAR 0 7
15122: ARRAY
15123: PUSH
15124: LD_INT 1
15126: ARRAY
15127: PPUSH
15128: LD_VAR 0 12
15132: PUSH
15133: LD_VAR 0 7
15137: ARRAY
15138: PUSH
15139: LD_INT 2
15141: ARRAY
15142: PPUSH
15143: CALL_OW 488
15147: NOT
15148: PUSH
15149: LD_VAR 0 12
15153: PUSH
15154: LD_VAR 0 7
15158: ARRAY
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PPUSH
15164: LD_VAR 0 12
15168: PUSH
15169: LD_VAR 0 7
15173: ARRAY
15174: PUSH
15175: LD_INT 2
15177: ARRAY
15178: PPUSH
15179: CALL_OW 428
15183: PUSH
15184: LD_INT 0
15186: GREATER
15187: OR
15188: PUSH
15189: LD_VAR 0 12
15193: PUSH
15194: LD_VAR 0 7
15198: ARRAY
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: PPUSH
15204: LD_VAR 0 12
15208: PUSH
15209: LD_VAR 0 7
15213: ARRAY
15214: PUSH
15215: LD_INT 2
15217: ARRAY
15218: PPUSH
15219: CALL_OW 351
15223: OR
15224: IFFALSE 15230
// exit ;
15226: POP
15227: POP
15228: GO 15522
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15230: LD_ADDR_VAR 0 8
15234: PUSH
15235: LD_VAR 0 12
15239: PUSH
15240: LD_VAR 0 7
15244: ARRAY
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PPUSH
15250: LD_VAR 0 12
15254: PUSH
15255: LD_VAR 0 7
15259: ARRAY
15260: PUSH
15261: LD_INT 2
15263: ARRAY
15264: PPUSH
15265: CALL_OW 546
15269: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15270: LD_VAR 0 8
15274: PUSH
15275: LD_INT 1
15277: ARRAY
15278: PUSH
15279: LD_VAR 0 8
15283: PUSH
15284: LD_INT 2
15286: ARRAY
15287: PUSH
15288: LD_VAR 0 13
15292: PUSH
15293: LD_INT 2
15295: PLUS
15296: GREATER
15297: OR
15298: PUSH
15299: LD_VAR 0 8
15303: PUSH
15304: LD_INT 2
15306: ARRAY
15307: PUSH
15308: LD_VAR 0 13
15312: PUSH
15313: LD_INT 2
15315: MINUS
15316: LESS
15317: OR
15318: PUSH
15319: LD_VAR 0 8
15323: PUSH
15324: LD_INT 3
15326: ARRAY
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: LD_INT 8
15333: PUSH
15334: LD_INT 9
15336: PUSH
15337: LD_INT 10
15339: PUSH
15340: LD_INT 11
15342: PUSH
15343: LD_INT 12
15345: PUSH
15346: LD_INT 13
15348: PUSH
15349: LD_INT 16
15351: PUSH
15352: LD_INT 17
15354: PUSH
15355: LD_INT 18
15357: PUSH
15358: LD_INT 19
15360: PUSH
15361: LD_INT 20
15363: PUSH
15364: LD_INT 21
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: IN
15382: NOT
15383: OR
15384: PUSH
15385: LD_VAR 0 8
15389: PUSH
15390: LD_INT 5
15392: ARRAY
15393: NOT
15394: OR
15395: PUSH
15396: LD_VAR 0 8
15400: PUSH
15401: LD_INT 6
15403: ARRAY
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: LD_INT 7
15413: PUSH
15414: LD_INT 9
15416: PUSH
15417: LD_INT 10
15419: PUSH
15420: LD_INT 11
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: IN
15431: NOT
15432: OR
15433: IFFALSE 15439
// exit ;
15435: POP
15436: POP
15437: GO 15522
// end ;
15439: GO 15110
15441: POP
15442: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15443: LD_VAR 0 9
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_VAR 0 4
15457: PPUSH
15458: LD_INT 20
15460: PPUSH
15461: CALL 7445 0 4
15465: PUSH
15466: LD_INT 4
15468: ARRAY
15469: IFFALSE 15473
// exit ;
15471: GO 15522
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15473: LD_VAR 0 2
15477: PUSH
15478: LD_INT 29
15480: PUSH
15481: LD_INT 30
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: IN
15488: PUSH
15489: LD_VAR 0 3
15493: PPUSH
15494: LD_VAR 0 4
15498: PPUSH
15499: LD_VAR 0 9
15503: PPUSH
15504: CALL_OW 440
15508: NOT
15509: AND
15510: IFFALSE 15514
// exit ;
15512: GO 15522
// result := true ;
15514: LD_ADDR_VAR 0 6
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// end ;
15522: LD_VAR 0 6
15526: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15527: LD_INT 0
15529: PPUSH
15530: PPUSH
15531: PPUSH
15532: PPUSH
15533: PPUSH
15534: PPUSH
15535: PPUSH
15536: PPUSH
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
15558: PPUSH
15559: PPUSH
15560: PPUSH
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// result = [ ] ;
15587: LD_ADDR_VAR 0 7
15591: PUSH
15592: EMPTY
15593: ST_TO_ADDR
// temp_list = [ ] ;
15594: LD_ADDR_VAR 0 9
15598: PUSH
15599: EMPTY
15600: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15601: LD_VAR 0 4
15605: PUSH
15606: LD_INT 0
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 3
15617: PUSH
15618: LD_INT 4
15620: PUSH
15621: LD_INT 5
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: IN
15632: NOT
15633: PUSH
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: LD_INT 1
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: IN
15649: PUSH
15650: LD_VAR 0 5
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 3
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: IN
15669: NOT
15670: AND
15671: OR
15672: IFFALSE 15676
// exit ;
15674: GO 34067
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15676: LD_VAR 0 1
15680: PUSH
15681: LD_INT 6
15683: PUSH
15684: LD_INT 7
15686: PUSH
15687: LD_INT 8
15689: PUSH
15690: LD_INT 13
15692: PUSH
15693: LD_INT 12
15695: PUSH
15696: LD_INT 15
15698: PUSH
15699: LD_INT 11
15701: PUSH
15702: LD_INT 14
15704: PUSH
15705: LD_INT 10
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: IN
15719: IFFALSE 15729
// btype = b_lab ;
15721: LD_ADDR_VAR 0 1
15725: PUSH
15726: LD_INT 6
15728: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15729: LD_VAR 0 6
15733: PUSH
15734: LD_INT 0
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: IN
15748: NOT
15749: PUSH
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 0
15757: PUSH
15758: LD_INT 1
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: LD_INT 3
15766: PUSH
15767: LD_INT 6
15769: PUSH
15770: LD_INT 36
15772: PUSH
15773: LD_INT 4
15775: PUSH
15776: LD_INT 5
15778: PUSH
15779: LD_INT 31
15781: PUSH
15782: LD_INT 32
15784: PUSH
15785: LD_INT 33
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: IN
15801: NOT
15802: PUSH
15803: LD_VAR 0 6
15807: PUSH
15808: LD_INT 1
15810: EQUAL
15811: AND
15812: OR
15813: PUSH
15814: LD_VAR 0 1
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: IN
15829: NOT
15830: PUSH
15831: LD_VAR 0 6
15835: PUSH
15836: LD_INT 2
15838: EQUAL
15839: AND
15840: OR
15841: IFFALSE 15851
// mode = 0 ;
15843: LD_ADDR_VAR 0 6
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// case mode of 0 :
15851: LD_VAR 0 6
15855: PUSH
15856: LD_INT 0
15858: DOUBLE
15859: EQUAL
15860: IFTRUE 15864
15862: GO 27317
15864: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15865: LD_ADDR_VAR 0 11
15869: PUSH
15870: LD_INT 0
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 0
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: LD_INT 0
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 0
15913: PUSH
15914: LD_INT 1
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 1
15923: NEG
15924: PUSH
15925: LD_INT 0
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 1
15934: NEG
15935: PUSH
15936: LD_INT 1
15938: NEG
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 1
15946: NEG
15947: PUSH
15948: LD_INT 2
15950: NEG
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 0
15958: PUSH
15959: LD_INT 2
15961: NEG
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: LD_INT 1
15972: NEG
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: LD_INT 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 1
16000: NEG
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: LD_INT 3
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: LD_INT 3
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 1
16031: NEG
16032: PUSH
16033: LD_INT 2
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16058: LD_ADDR_VAR 0 12
16062: PUSH
16063: LD_INT 0
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: LD_INT 1
16078: NEG
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 1
16116: NEG
16117: PUSH
16118: LD_INT 0
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 1
16127: NEG
16128: PUSH
16129: LD_INT 1
16131: NEG
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 1
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 2
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 2
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 1
16170: NEG
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 2
16181: NEG
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 2
16192: NEG
16193: PUSH
16194: LD_INT 1
16196: NEG
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 2
16204: NEG
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 3
16215: NEG
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 3
16226: NEG
16227: PUSH
16228: LD_INT 1
16230: NEG
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16254: LD_ADDR_VAR 0 13
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 0
16271: PUSH
16272: LD_INT 1
16274: NEG
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 1
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: NEG
16313: PUSH
16314: LD_INT 0
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: NEG
16324: PUSH
16325: LD_INT 1
16327: NEG
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: NEG
16336: PUSH
16337: LD_INT 2
16339: NEG
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 2
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: LD_INT 2
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 2
16377: NEG
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 2
16389: NEG
16390: PUSH
16391: LD_INT 2
16393: NEG
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 2
16401: NEG
16402: PUSH
16403: LD_INT 3
16405: NEG
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 3
16413: NEG
16414: PUSH
16415: LD_INT 2
16417: NEG
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 3
16425: NEG
16426: PUSH
16427: LD_INT 3
16429: NEG
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16453: LD_ADDR_VAR 0 14
16457: PUSH
16458: LD_INT 0
16460: PUSH
16461: LD_INT 0
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: LD_INT 1
16473: NEG
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: LD_INT 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 1
16511: NEG
16512: PUSH
16513: LD_INT 0
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: NEG
16523: PUSH
16524: LD_INT 1
16526: NEG
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: LD_INT 2
16538: NEG
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: LD_INT 2
16549: NEG
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: LD_INT 1
16560: NEG
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 0
16578: PUSH
16579: LD_INT 2
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 1
16588: NEG
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: LD_INT 3
16603: NEG
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 0
16611: PUSH
16612: LD_INT 3
16614: NEG
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: LD_INT 2
16625: NEG
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16649: LD_ADDR_VAR 0 15
16653: PUSH
16654: LD_INT 0
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 0
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: LD_INT 1
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: LD_INT 1
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 1
16707: NEG
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 1
16718: NEG
16719: PUSH
16720: LD_INT 1
16722: NEG
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: LD_INT 1
16733: NEG
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 2
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 1
16761: NEG
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 2
16772: NEG
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 2
16783: NEG
16784: PUSH
16785: LD_INT 1
16787: NEG
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 2
16795: PUSH
16796: LD_INT 1
16798: NEG
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: LD_INT 0
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16842: LD_ADDR_VAR 0 16
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 0
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: LD_INT 1
16862: NEG
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: LD_INT 0
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 1
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 1
16900: NEG
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PUSH
16913: LD_INT 1
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: NEG
16924: PUSH
16925: LD_INT 2
16927: NEG
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 2
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: LD_INT 2
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 2
16965: NEG
16966: PUSH
16967: LD_INT 1
16969: NEG
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: NEG
16978: PUSH
16979: LD_INT 2
16981: NEG
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 3
16989: PUSH
16990: LD_INT 2
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 3
16999: PUSH
17000: LD_INT 3
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: LD_INT 3
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17035: LD_ADDR_VAR 0 17
17039: PUSH
17040: LD_INT 0
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: LD_INT 1
17055: NEG
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: LD_INT 0
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 0
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 1
17093: NEG
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: NEG
17105: PUSH
17106: LD_INT 1
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: LD_INT 2
17120: NEG
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 0
17128: PUSH
17129: LD_INT 2
17131: NEG
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: PUSH
17140: LD_INT 1
17142: NEG
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 1
17180: PUSH
17181: LD_INT 2
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 0
17190: PUSH
17191: LD_INT 2
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 1
17200: NEG
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: LD_INT 0
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 2
17222: NEG
17223: PUSH
17224: LD_INT 1
17226: NEG
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 2
17234: NEG
17235: PUSH
17236: LD_INT 2
17238: NEG
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17265: LD_ADDR_VAR 0 18
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 0
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: NEG
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: NEG
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: LD_INT 2
17350: NEG
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: LD_INT 2
17361: NEG
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: LD_INT 1
17372: NEG
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: LD_INT 2
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 1
17430: NEG
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: LD_INT 0
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 2
17452: NEG
17453: PUSH
17454: LD_INT 1
17456: NEG
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: NEG
17465: PUSH
17466: LD_INT 2
17468: NEG
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17495: LD_ADDR_VAR 0 19
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 1
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 0
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: NEG
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: LD_INT 1
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: LD_INT 2
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: LD_INT 2
17591: NEG
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 1
17602: NEG
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 1
17660: NEG
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: LD_INT 0
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 2
17682: NEG
17683: PUSH
17684: LD_INT 1
17686: NEG
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: LD_INT 2
17698: NEG
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17725: LD_ADDR_VAR 0 20
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: LD_INT 0
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: LD_INT 1
17745: NEG
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: LD_INT 0
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: LD_INT 1
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: LD_INT 2
17810: NEG
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 0
17818: PUSH
17819: LD_INT 2
17821: NEG
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: LD_INT 1
17832: NEG
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 2
17924: NEG
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17955: LD_ADDR_VAR 0 21
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 0
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: LD_INT 0
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: LD_INT 2
18040: NEG
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: LD_INT 2
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: LD_INT 2
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: LD_INT 2
18158: NEG
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18185: LD_ADDR_VAR 0 22
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: LD_INT 1
18205: NEG
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: LD_INT 0
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: LD_INT 1
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: LD_INT 0
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: LD_INT 2
18270: NEG
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: LD_INT 2
18281: NEG
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: LD_INT 1
18292: NEG
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: NEG
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: NEG
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: NEG
18385: PUSH
18386: LD_INT 2
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18415: LD_ADDR_VAR 0 23
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 1
18435: NEG
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: LD_INT 0
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 1
18488: NEG
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: LD_INT 2
18500: NEG
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: LD_INT 2
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: LD_INT 1
18522: NEG
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 2
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: NEG
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: NEG
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: NEG
18615: PUSH
18616: LD_INT 2
18618: NEG
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 2
18626: NEG
18627: PUSH
18628: LD_INT 3
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: LD_INT 3
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: LD_INT 2
18653: NEG
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18695: LD_ADDR_VAR 0 24
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: LD_INT 1
18768: NEG
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: LD_INT 2
18780: NEG
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 1
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: LD_INT 2
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 1
18860: NEG
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: NEG
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: NEG
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 2
18894: NEG
18895: PUSH
18896: LD_INT 2
18898: NEG
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 1
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 3
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 3
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18971: LD_ADDR_VAR 0 25
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: LD_INT 2
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: LD_INT 1
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 2
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: NEG
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: NEG
19159: PUSH
19160: LD_INT 1
19162: NEG
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 2
19170: NEG
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 3
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 3
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 3
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19245: LD_ADDR_VAR 0 26
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: NEG
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: NEG
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: NEG
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: LD_INT 2
19341: NEG
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: LD_INT 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: NEG
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: NEG
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 2
19432: NEG
19433: PUSH
19434: LD_INT 1
19436: NEG
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 2
19444: NEG
19445: PUSH
19446: LD_INT 2
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: LD_INT 3
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: LD_INT 3
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19521: LD_ADDR_VAR 0 27
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 2
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 2
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 2
19697: NEG
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: NEG
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: LD_INT 2
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: NEG
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 3
19754: NEG
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 3
19766: NEG
19767: PUSH
19768: LD_INT 2
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19801: LD_ADDR_VAR 0 28
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: LD_INT 0
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: NEG
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: LD_INT 2
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 2
19988: NEG
19989: PUSH
19990: LD_INT 1
19992: NEG
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 2
20012: NEG
20013: PUSH
20014: LD_INT 3
20016: NEG
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 3
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 3
20036: NEG
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 3
20048: NEG
20049: PUSH
20050: LD_INT 2
20052: NEG
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20083: LD_ADDR_VAR 0 29
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: NEG
20165: PUSH
20166: LD_INT 2
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 2
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 2
20249: NEG
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: NEG
20274: PUSH
20275: LD_INT 3
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 3
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: LD_INT 3
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 3
20327: NEG
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20362: LD_ADDR_VAR 0 30
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: NEG
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 3
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 2
20584: PUSH
20585: LD_INT 3
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 3
20605: NEG
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20640: LD_ADDR_VAR 0 31
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: NEG
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: NEG
20830: PUSH
20831: LD_INT 3
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: LD_INT 3
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 3
20883: NEG
20884: PUSH
20885: LD_INT 2
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20918: LD_ADDR_VAR 0 32
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 2
21003: NEG
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: NEG
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: LD_INT 3
21111: NEG
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 3
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: NEG
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 3
21161: NEG
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21196: LD_ADDR_VAR 0 33
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: NEG
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 2
21362: NEG
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: LD_INT 2
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 2
21386: NEG
21387: PUSH
21388: LD_INT 3
21390: NEG
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 3
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: LD_INT 3
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 3
21440: NEG
21441: PUSH
21442: LD_INT 2
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21475: LD_ADDR_VAR 0 34
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 0
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: LD_INT 0
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 2
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 1
21620: NEG
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: NEG
21643: PUSH
21644: LD_INT 1
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 2
21654: NEG
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 3
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: LD_INT 2
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 3
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 3
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 3
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21755: LD_ADDR_VAR 0 35
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 1
21813: NEG
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 2
21846: NEG
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21867: LD_ADDR_VAR 0 36
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: NEG
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: LD_INT 2
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21979: LD_ADDR_VAR 0 37
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22091: LD_ADDR_VAR 0 38
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: NEG
22183: PUSH
22184: LD_INT 1
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22203: LD_ADDR_VAR 0 39
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22315: LD_ADDR_VAR 0 40
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: LD_INT 1
22335: NEG
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22427: LD_ADDR_VAR 0 41
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 1
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: LD_INT 1
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: LD_INT 2
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: NEG
22618: PUSH
22619: LD_INT 3
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 1
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 3
22670: PUSH
22671: LD_INT 3
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: NEG
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 3
22701: NEG
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 3
22724: NEG
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 3
22736: NEG
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22777: LD_ADDR_VAR 0 42
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: LD_INT 2
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: LD_INT 3
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: NEG
22980: PUSH
22981: LD_INT 3
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 3
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: LD_INT 2
23005: NEG
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 3
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 3
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 3
23074: NEG
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 3
23086: NEG
23087: PUSH
23088: LD_INT 3
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23127: LD_ADDR_VAR 0 43
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 1
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 2
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: LD_INT 2
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: NEG
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: LD_INT 3
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: LD_INT 3
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 2
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 3
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 3
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 3
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 3
23423: NEG
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 3
23434: NEG
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23475: LD_ADDR_VAR 0 44
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: NEG
23654: PUSH
23655: LD_INT 2
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 2
23665: NEG
23666: PUSH
23667: LD_INT 3
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 3
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 3
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 3
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 3
23718: PUSH
23719: LD_INT 3
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 3
23749: NEG
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: NEG
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 3
23772: NEG
23773: PUSH
23774: LD_INT 2
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 3
23784: NEG
23785: PUSH
23786: LD_INT 3
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23825: LD_ADDR_VAR 0 45
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: LD_INT 2
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 2
24003: NEG
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: LD_INT 3
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 3
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 3
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 2
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 3
24061: PUSH
24062: LD_INT 2
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 3
24071: PUSH
24072: LD_INT 3
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 3
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 3
24122: NEG
24123: PUSH
24124: LD_INT 2
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 3
24134: NEG
24135: PUSH
24136: LD_INT 3
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24175: LD_ADDR_VAR 0 46
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: LD_INT 2
24271: NEG
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: LD_INT 1
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 2
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: LD_INT 3
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 3
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 2
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 3
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 3
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 3
24471: NEG
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 3
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24523: LD_ADDR_VAR 0 47
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 2
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24674: LD_ADDR_VAR 0 48
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: LD_INT 2
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 2
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24821: LD_ADDR_VAR 0 49
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 2
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24965: LD_ADDR_VAR 0 50
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25109: LD_ADDR_VAR 0 51
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: NEG
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 2
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25256: LD_ADDR_VAR 0 52
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 0
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: NEG
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 2
25383: NEG
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25407: LD_ADDR_VAR 0 53
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: LD_INT 2
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: NEG
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25637: LD_ADDR_VAR 0 54
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25867: LD_ADDR_VAR 0 55
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26097: LD_ADDR_VAR 0 56
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 2
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 2
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26327: LD_ADDR_VAR 0 57
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 1
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 2
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26557: LD_ADDR_VAR 0 58
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 1
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26787: LD_ADDR_VAR 0 59
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26875: LD_ADDR_VAR 0 60
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26963: LD_ADDR_VAR 0 61
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27051: LD_ADDR_VAR 0 62
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27139: LD_ADDR_VAR 0 63
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27227: LD_ADDR_VAR 0 64
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: ST_TO_ADDR
// end ; 1 :
27315: GO 33212
27317: LD_INT 1
27319: DOUBLE
27320: EQUAL
27321: IFTRUE 27325
27323: GO 29948
27325: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27326: LD_ADDR_VAR 0 11
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: LD_INT 3
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 3
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27370: LD_ADDR_VAR 0 12
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 3
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27411: LD_ADDR_VAR 0 13
27415: PUSH
27416: LD_INT 3
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: LD_INT 3
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 3
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27451: LD_ADDR_VAR 0 14
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 3
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 3
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27492: LD_ADDR_VAR 0 15
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 3
27510: NEG
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 3
27521: NEG
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: LIST
27535: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27536: LD_ADDR_VAR 0 16
27540: PUSH
27541: LD_INT 2
27543: NEG
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 3
27555: NEG
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 3
27567: NEG
27568: PUSH
27569: LD_INT 3
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27582: LD_ADDR_VAR 0 17
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: LD_INT 3
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 3
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27626: LD_ADDR_VAR 0 18
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 3
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27667: LD_ADDR_VAR 0 19
27671: PUSH
27672: LD_INT 3
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: LD_INT 3
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27707: LD_ADDR_VAR 0 20
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 3
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27748: LD_ADDR_VAR 0 21
27752: PUSH
27753: LD_INT 2
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: NEG
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 3
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27792: LD_ADDR_VAR 0 22
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 3
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: NEG
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 3
27823: NEG
27824: PUSH
27825: LD_INT 3
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27838: LD_ADDR_VAR 0 23
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 3
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: LD_INT 4
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 3
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27882: LD_ADDR_VAR 0 24
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 3
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 4
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27923: LD_ADDR_VAR 0 25
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 4
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: LD_INT 4
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27963: LD_ADDR_VAR 0 26
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 4
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28004: LD_ADDR_VAR 0 27
28008: PUSH
28009: LD_INT 3
28011: NEG
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: NEG
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 4
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28048: LD_ADDR_VAR 0 28
28052: PUSH
28053: LD_INT 3
28055: NEG
28056: PUSH
28057: LD_INT 3
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: NEG
28068: PUSH
28069: LD_INT 4
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 4
28079: NEG
28080: PUSH
28081: LD_INT 3
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28094: LD_ADDR_VAR 0 29
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: LD_INT 3
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 3
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 4
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 4
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 3
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: LD_INT 5
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 5
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 4
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 6
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 6
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: LD_INT 5
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28249: LD_ADDR_VAR 0 30
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 3
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 4
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 4
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 4
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 5
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 5
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 6
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 6
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28392: LD_ADDR_VAR 0 31
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 4
28439: PUSH
28440: LD_INT 4
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 3
28449: PUSH
28450: LD_INT 4
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 5
28459: PUSH
28460: LD_INT 4
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 5
28469: PUSH
28470: LD_INT 5
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 4
28479: PUSH
28480: LD_INT 5
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 6
28489: PUSH
28490: LD_INT 5
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 6
28499: PUSH
28500: LD_INT 6
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 5
28509: PUSH
28510: LD_INT 6
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28531: LD_ADDR_VAR 0 32
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 3
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 4
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 4
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 3
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 5
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 5
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 6
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: LD_INT 6
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 5
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28674: LD_ADDR_VAR 0 33
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 3
28692: NEG
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: NEG
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 4
28726: NEG
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 4
28737: NEG
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 4
28749: NEG
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 5
28760: NEG
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 5
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 5
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 6
28794: NEG
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 6
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28829: LD_ADDR_VAR 0 34
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 3
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 3
28848: NEG
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 3
28860: NEG
28861: PUSH
28862: LD_INT 3
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 3
28872: NEG
28873: PUSH
28874: LD_INT 4
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 4
28884: NEG
28885: PUSH
28886: LD_INT 3
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 4
28896: NEG
28897: PUSH
28898: LD_INT 4
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 4
28908: NEG
28909: PUSH
28910: LD_INT 5
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 5
28920: NEG
28921: PUSH
28922: LD_INT 4
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 5
28932: NEG
28933: PUSH
28934: LD_INT 5
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 5
28944: NEG
28945: PUSH
28946: LD_INT 6
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 6
28956: NEG
28957: PUSH
28958: LD_INT 5
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 6
28968: NEG
28969: PUSH
28970: LD_INT 6
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28992: LD_ADDR_VAR 0 41
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 3
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29036: LD_ADDR_VAR 0 42
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 2
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29077: LD_ADDR_VAR 0 43
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 3
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: LD_INT 3
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29117: LD_ADDR_VAR 0 44
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29158: LD_ADDR_VAR 0 45
29162: PUSH
29163: LD_INT 2
29165: NEG
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 2
29176: NEG
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 3
29187: NEG
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29202: LD_ADDR_VAR 0 46
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: NEG
29222: PUSH
29223: LD_INT 3
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 3
29233: NEG
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29248: LD_ADDR_VAR 0 47
29252: PUSH
29253: LD_INT 2
29255: NEG
29256: PUSH
29257: LD_INT 3
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 3
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29281: LD_ADDR_VAR 0 48
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29312: LD_ADDR_VAR 0 49
29316: PUSH
29317: LD_INT 3
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29341: LD_ADDR_VAR 0 50
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: LD_INT 3
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29370: LD_ADDR_VAR 0 51
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 2
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29401: LD_ADDR_VAR 0 52
29405: PUSH
29406: LD_INT 3
29408: NEG
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29434: LD_ADDR_VAR 0 53
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: LD_INT 3
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 3
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29478: LD_ADDR_VAR 0 54
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29519: LD_ADDR_VAR 0 55
29523: PUSH
29524: LD_INT 3
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 3
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29559: LD_ADDR_VAR 0 56
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29600: LD_ADDR_VAR 0 57
29604: PUSH
29605: LD_INT 2
29607: NEG
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29644: LD_ADDR_VAR 0 58
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: LD_INT 3
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 3
29675: NEG
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29690: LD_ADDR_VAR 0 59
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 2
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 2
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29734: LD_ADDR_VAR 0 60
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29775: LD_ADDR_VAR 0 61
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29815: LD_ADDR_VAR 0 62
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29856: LD_ADDR_VAR 0 63
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 2
29885: NEG
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29900: LD_ADDR_VAR 0 64
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 2
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 2
29919: NEG
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: LD_INT 2
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
// end ; 2 :
29946: GO 33212
29948: LD_INT 2
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 33211
29956: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29957: LD_ADDR_VAR 0 29
29961: PUSH
29962: LD_INT 4
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 4
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 5
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 5
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: LD_INT 2
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 5
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 4
30077: PUSH
30078: LD_INT 3
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 4
30087: PUSH
30088: LD_INT 4
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 4
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 4
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: LD_INT 4
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 4
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: LD_INT 5
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 5
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 4
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: LD_INT 5
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: NEG
30230: PUSH
30231: LD_INT 3
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 3
30251: NEG
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 3
30285: NEG
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 4
30296: NEG
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 4
30307: NEG
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 4
30319: NEG
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 4
30342: NEG
30343: PUSH
30344: LD_INT 4
30346: NEG
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 4
30354: NEG
30355: PUSH
30356: LD_INT 5
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 4
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 3
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: NEG
30391: PUSH
30392: LD_INT 3
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 5
30402: NEG
30403: PUSH
30404: LD_INT 4
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 5
30414: NEG
30415: PUSH
30416: LD_INT 5
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: LD_INT 5
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 5
30438: NEG
30439: PUSH
30440: LD_INT 3
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30495: LD_ADDR_VAR 0 30
30499: PUSH
30500: LD_INT 4
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 4
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 5
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 4
30542: PUSH
30543: LD_INT 5
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: PUSH
30553: LD_INT 4
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 5
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: LD_INT 5
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: LD_INT 4
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 4
30685: NEG
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 4
30696: NEG
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: NEG
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 4
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 5
30741: NEG
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 5
30752: NEG
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 5
30764: NEG
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: NEG
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: LD_INT 4
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 2
30823: NEG
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 4
30847: NEG
30848: PUSH
30849: LD_INT 3
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 4
30859: NEG
30860: PUSH
30861: LD_INT 4
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 2
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 4
30883: NEG
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: LD_INT 4
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 5
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: LD_INT 4
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 3
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 4
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 5
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: PUSH
30975: LD_INT 3
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: LD_INT 5
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31042: LD_ADDR_VAR 0 31
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 4
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 4
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 5
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 4
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 5
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 3
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: NEG
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: NEG
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 4
31198: NEG
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 4
31209: NEG
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 4
31221: NEG
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 4
31244: NEG
31245: PUSH
31246: LD_INT 4
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 4
31256: NEG
31257: PUSH
31258: LD_INT 5
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: LD_INT 4
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: NEG
31281: PUSH
31282: LD_INT 3
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 4
31292: NEG
31293: PUSH
31294: LD_INT 3
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 5
31304: NEG
31305: PUSH
31306: LD_INT 4
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 5
31316: NEG
31317: PUSH
31318: LD_INT 5
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: LD_INT 5
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 5
31340: NEG
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: LD_INT 4
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 3
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 3
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 4
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 4
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 4
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 4
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 5
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 4
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 5
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31592: LD_ADDR_VAR 0 32
31596: PUSH
31597: LD_INT 4
31599: NEG
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 4
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: NEG
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 4
31644: NEG
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 5
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 5
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 5
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: LD_INT 4
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 4
31761: NEG
31762: PUSH
31763: LD_INT 3
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 4
31773: NEG
31774: PUSH
31775: LD_INT 4
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: LD_INT 4
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 4
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 4
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 5
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: LD_INT 4
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 3
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 4
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: LD_INT 5
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 5
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 4
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 4
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 4
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 5
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 5
32034: PUSH
32035: LD_INT 5
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 4
32044: PUSH
32045: LD_INT 5
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 3
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 5
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32139: LD_ADDR_VAR 0 33
32143: PUSH
32144: LD_INT 4
32146: NEG
32147: PUSH
32148: LD_INT 4
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 4
32158: NEG
32159: PUSH
32160: LD_INT 5
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: LD_INT 4
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 3
32182: NEG
32183: PUSH
32184: LD_INT 3
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 4
32194: NEG
32195: PUSH
32196: LD_INT 3
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 5
32206: NEG
32207: PUSH
32208: LD_INT 4
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 5
32218: NEG
32219: PUSH
32220: LD_INT 5
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: NEG
32231: PUSH
32232: LD_INT 5
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 5
32242: NEG
32243: PUSH
32244: LD_INT 3
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 3
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 4
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: LD_INT 3
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 4
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 4
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 4
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 5
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 5
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 4
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 3
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 3
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 5
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 4
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 4
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: LD_INT 4
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 4
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 5
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 5
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 4
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: PUSH
32612: LD_INT 5
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32677: LD_ADDR_VAR 0 34
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 4
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 5
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 4
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 3
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: LD_INT 4
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 5
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: LD_INT 5
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 4
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 4
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: LD_INT 4
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 4
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: LD_INT 4
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 5
32909: PUSH
32910: LD_INT 5
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 4
32919: PUSH
32920: LD_INT 5
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 4
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: LD_INT 5
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 4
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 4
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: LD_INT 2
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 4
33062: NEG
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: NEG
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 3
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 4
33107: NEG
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 5
33118: NEG
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 5
33129: NEG
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PUSH
33143: LD_INT 2
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: ST_TO_ADDR
// end ; end ;
33209: GO 33212
33211: POP
// case btype of b_depot , b_warehouse :
33212: LD_VAR 0 1
33216: PUSH
33217: LD_INT 0
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33231
33223: LD_INT 1
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33231
33229: GO 33432
33231: POP
// case nation of nation_american :
33232: LD_VAR 0 5
33236: PUSH
33237: LD_INT 1
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33245
33243: GO 33301
33245: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33246: LD_ADDR_VAR 0 9
33250: PUSH
33251: LD_VAR 0 11
33255: PUSH
33256: LD_VAR 0 12
33260: PUSH
33261: LD_VAR 0 13
33265: PUSH
33266: LD_VAR 0 14
33270: PUSH
33271: LD_VAR 0 15
33275: PUSH
33276: LD_VAR 0 16
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: PUSH
33289: LD_VAR 0 4
33293: PUSH
33294: LD_INT 1
33296: PLUS
33297: ARRAY
33298: ST_TO_ADDR
33299: GO 33430
33301: LD_INT 2
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33365
33309: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33310: LD_ADDR_VAR 0 9
33314: PUSH
33315: LD_VAR 0 17
33319: PUSH
33320: LD_VAR 0 18
33324: PUSH
33325: LD_VAR 0 19
33329: PUSH
33330: LD_VAR 0 20
33334: PUSH
33335: LD_VAR 0 21
33339: PUSH
33340: LD_VAR 0 22
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: PUSH
33353: LD_VAR 0 4
33357: PUSH
33358: LD_INT 1
33360: PLUS
33361: ARRAY
33362: ST_TO_ADDR
33363: GO 33430
33365: LD_INT 3
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33373
33371: GO 33429
33373: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33374: LD_ADDR_VAR 0 9
33378: PUSH
33379: LD_VAR 0 23
33383: PUSH
33384: LD_VAR 0 24
33388: PUSH
33389: LD_VAR 0 25
33393: PUSH
33394: LD_VAR 0 26
33398: PUSH
33399: LD_VAR 0 27
33403: PUSH
33404: LD_VAR 0 28
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: PUSH
33417: LD_VAR 0 4
33421: PUSH
33422: LD_INT 1
33424: PLUS
33425: ARRAY
33426: ST_TO_ADDR
33427: GO 33430
33429: POP
33430: GO 33985
33432: LD_INT 2
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33446
33438: LD_INT 3
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33502
33446: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33447: LD_ADDR_VAR 0 9
33451: PUSH
33452: LD_VAR 0 29
33456: PUSH
33457: LD_VAR 0 30
33461: PUSH
33462: LD_VAR 0 31
33466: PUSH
33467: LD_VAR 0 32
33471: PUSH
33472: LD_VAR 0 33
33476: PUSH
33477: LD_VAR 0 34
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: PUSH
33490: LD_VAR 0 4
33494: PUSH
33495: LD_INT 1
33497: PLUS
33498: ARRAY
33499: ST_TO_ADDR
33500: GO 33985
33502: LD_INT 16
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33564
33508: LD_INT 17
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33564
33514: LD_INT 18
33516: DOUBLE
33517: EQUAL
33518: IFTRUE 33564
33520: LD_INT 19
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33564
33526: LD_INT 22
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33564
33532: LD_INT 20
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33564
33538: LD_INT 21
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33564
33544: LD_INT 23
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33564
33550: LD_INT 24
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33564
33556: LD_INT 25
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33620
33564: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33565: LD_ADDR_VAR 0 9
33569: PUSH
33570: LD_VAR 0 35
33574: PUSH
33575: LD_VAR 0 36
33579: PUSH
33580: LD_VAR 0 37
33584: PUSH
33585: LD_VAR 0 38
33589: PUSH
33590: LD_VAR 0 39
33594: PUSH
33595: LD_VAR 0 40
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: PUSH
33608: LD_VAR 0 4
33612: PUSH
33613: LD_INT 1
33615: PLUS
33616: ARRAY
33617: ST_TO_ADDR
33618: GO 33985
33620: LD_INT 6
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33676
33626: LD_INT 7
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33676
33632: LD_INT 8
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33676
33638: LD_INT 13
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33676
33644: LD_INT 12
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33676
33650: LD_INT 15
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33676
33656: LD_INT 11
33658: DOUBLE
33659: EQUAL
33660: IFTRUE 33676
33662: LD_INT 14
33664: DOUBLE
33665: EQUAL
33666: IFTRUE 33676
33668: LD_INT 10
33670: DOUBLE
33671: EQUAL
33672: IFTRUE 33676
33674: GO 33732
33676: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33677: LD_ADDR_VAR 0 9
33681: PUSH
33682: LD_VAR 0 41
33686: PUSH
33687: LD_VAR 0 42
33691: PUSH
33692: LD_VAR 0 43
33696: PUSH
33697: LD_VAR 0 44
33701: PUSH
33702: LD_VAR 0 45
33706: PUSH
33707: LD_VAR 0 46
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: PUSH
33720: LD_VAR 0 4
33724: PUSH
33725: LD_INT 1
33727: PLUS
33728: ARRAY
33729: ST_TO_ADDR
33730: GO 33985
33732: LD_INT 36
33734: DOUBLE
33735: EQUAL
33736: IFTRUE 33740
33738: GO 33796
33740: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33741: LD_ADDR_VAR 0 9
33745: PUSH
33746: LD_VAR 0 47
33750: PUSH
33751: LD_VAR 0 48
33755: PUSH
33756: LD_VAR 0 49
33760: PUSH
33761: LD_VAR 0 50
33765: PUSH
33766: LD_VAR 0 51
33770: PUSH
33771: LD_VAR 0 52
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: PUSH
33784: LD_VAR 0 4
33788: PUSH
33789: LD_INT 1
33791: PLUS
33792: ARRAY
33793: ST_TO_ADDR
33794: GO 33985
33796: LD_INT 4
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33822
33802: LD_INT 5
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33822
33808: LD_INT 34
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33822
33814: LD_INT 37
33816: DOUBLE
33817: EQUAL
33818: IFTRUE 33822
33820: GO 33878
33822: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33823: LD_ADDR_VAR 0 9
33827: PUSH
33828: LD_VAR 0 53
33832: PUSH
33833: LD_VAR 0 54
33837: PUSH
33838: LD_VAR 0 55
33842: PUSH
33843: LD_VAR 0 56
33847: PUSH
33848: LD_VAR 0 57
33852: PUSH
33853: LD_VAR 0 58
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: PUSH
33866: LD_VAR 0 4
33870: PUSH
33871: LD_INT 1
33873: PLUS
33874: ARRAY
33875: ST_TO_ADDR
33876: GO 33985
33878: LD_INT 31
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33928
33884: LD_INT 32
33886: DOUBLE
33887: EQUAL
33888: IFTRUE 33928
33890: LD_INT 33
33892: DOUBLE
33893: EQUAL
33894: IFTRUE 33928
33896: LD_INT 27
33898: DOUBLE
33899: EQUAL
33900: IFTRUE 33928
33902: LD_INT 26
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33928
33908: LD_INT 28
33910: DOUBLE
33911: EQUAL
33912: IFTRUE 33928
33914: LD_INT 29
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33928
33920: LD_INT 30
33922: DOUBLE
33923: EQUAL
33924: IFTRUE 33928
33926: GO 33984
33928: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33929: LD_ADDR_VAR 0 9
33933: PUSH
33934: LD_VAR 0 59
33938: PUSH
33939: LD_VAR 0 60
33943: PUSH
33944: LD_VAR 0 61
33948: PUSH
33949: LD_VAR 0 62
33953: PUSH
33954: LD_VAR 0 63
33958: PUSH
33959: LD_VAR 0 64
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: PUSH
33972: LD_VAR 0 4
33976: PUSH
33977: LD_INT 1
33979: PLUS
33980: ARRAY
33981: ST_TO_ADDR
33982: GO 33985
33984: POP
// temp_list2 = [ ] ;
33985: LD_ADDR_VAR 0 10
33989: PUSH
33990: EMPTY
33991: ST_TO_ADDR
// for i in temp_list do
33992: LD_ADDR_VAR 0 8
33996: PUSH
33997: LD_VAR 0 9
34001: PUSH
34002: FOR_IN
34003: IFFALSE 34055
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34005: LD_ADDR_VAR 0 10
34009: PUSH
34010: LD_VAR 0 10
34014: PUSH
34015: LD_VAR 0 8
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PUSH
34024: LD_VAR 0 2
34028: PLUS
34029: PUSH
34030: LD_VAR 0 8
34034: PUSH
34035: LD_INT 2
34037: ARRAY
34038: PUSH
34039: LD_VAR 0 3
34043: PLUS
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: EMPTY
34050: LIST
34051: ADD
34052: ST_TO_ADDR
34053: GO 34002
34055: POP
34056: POP
// result = temp_list2 ;
34057: LD_ADDR_VAR 0 7
34061: PUSH
34062: LD_VAR 0 10
34066: ST_TO_ADDR
// end ;
34067: LD_VAR 0 7
34071: RET
// export function EnemyInRange ( unit , dist ) ; begin
34072: LD_INT 0
34074: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_VAR 0 1
34084: PPUSH
34085: CALL_OW 255
34089: PPUSH
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 250
34099: PPUSH
34100: LD_VAR 0 1
34104: PPUSH
34105: CALL_OW 251
34109: PPUSH
34110: LD_VAR 0 2
34114: PPUSH
34115: CALL 7445 0 4
34119: PUSH
34120: LD_INT 4
34122: ARRAY
34123: ST_TO_ADDR
// end ;
34124: LD_VAR 0 3
34128: RET
// export function PlayerSeeMe ( unit ) ; begin
34129: LD_INT 0
34131: PPUSH
// result := See ( your_side , unit ) ;
34132: LD_ADDR_VAR 0 2
34136: PUSH
34137: LD_OWVAR 2
34141: PPUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL_OW 292
34151: ST_TO_ADDR
// end ;
34152: LD_VAR 0 2
34156: RET
// export function ReverseDir ( unit ) ; begin
34157: LD_INT 0
34159: PPUSH
// if not unit then
34160: LD_VAR 0 1
34164: NOT
34165: IFFALSE 34169
// exit ;
34167: GO 34192
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34169: LD_ADDR_VAR 0 2
34173: PUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: CALL_OW 254
34183: PUSH
34184: LD_INT 3
34186: PLUS
34187: PUSH
34188: LD_INT 6
34190: MOD
34191: ST_TO_ADDR
// end ;
34192: LD_VAR 0 2
34196: RET
// export function ReverseArray ( array ) ; var i ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
// if not array then
34201: LD_VAR 0 1
34205: NOT
34206: IFFALSE 34210
// exit ;
34208: GO 34265
// result := [ ] ;
34210: LD_ADDR_VAR 0 2
34214: PUSH
34215: EMPTY
34216: ST_TO_ADDR
// for i := array downto 1 do
34217: LD_ADDR_VAR 0 3
34221: PUSH
34222: DOUBLE
34223: LD_VAR 0 1
34227: INC
34228: ST_TO_ADDR
34229: LD_INT 1
34231: PUSH
34232: FOR_DOWNTO
34233: IFFALSE 34263
// result := Join ( result , array [ i ] ) ;
34235: LD_ADDR_VAR 0 2
34239: PUSH
34240: LD_VAR 0 2
34244: PPUSH
34245: LD_VAR 0 1
34249: PUSH
34250: LD_VAR 0 3
34254: ARRAY
34255: PPUSH
34256: CALL 38908 0 2
34260: ST_TO_ADDR
34261: GO 34232
34263: POP
34264: POP
// end ;
34265: LD_VAR 0 2
34269: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34270: LD_INT 0
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
// if not unit or not hexes then
34278: LD_VAR 0 1
34282: NOT
34283: PUSH
34284: LD_VAR 0 2
34288: NOT
34289: OR
34290: IFFALSE 34294
// exit ;
34292: GO 34417
// dist := 9999 ;
34294: LD_ADDR_VAR 0 5
34298: PUSH
34299: LD_INT 9999
34301: ST_TO_ADDR
// for i = 1 to hexes do
34302: LD_ADDR_VAR 0 4
34306: PUSH
34307: DOUBLE
34308: LD_INT 1
34310: DEC
34311: ST_TO_ADDR
34312: LD_VAR 0 2
34316: PUSH
34317: FOR_TO
34318: IFFALSE 34405
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34320: LD_ADDR_VAR 0 6
34324: PUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: LD_VAR 0 2
34334: PUSH
34335: LD_VAR 0 4
34339: ARRAY
34340: PUSH
34341: LD_INT 1
34343: ARRAY
34344: PPUSH
34345: LD_VAR 0 2
34349: PUSH
34350: LD_VAR 0 4
34354: ARRAY
34355: PUSH
34356: LD_INT 2
34358: ARRAY
34359: PPUSH
34360: CALL_OW 297
34364: ST_TO_ADDR
// if tdist < dist then
34365: LD_VAR 0 6
34369: PUSH
34370: LD_VAR 0 5
34374: LESS
34375: IFFALSE 34403
// begin hex := hexes [ i ] ;
34377: LD_ADDR_VAR 0 8
34381: PUSH
34382: LD_VAR 0 2
34386: PUSH
34387: LD_VAR 0 4
34391: ARRAY
34392: ST_TO_ADDR
// dist := tdist ;
34393: LD_ADDR_VAR 0 5
34397: PUSH
34398: LD_VAR 0 6
34402: ST_TO_ADDR
// end ; end ;
34403: GO 34317
34405: POP
34406: POP
// result := hex ;
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_VAR 0 8
34416: ST_TO_ADDR
// end ;
34417: LD_VAR 0 3
34421: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34422: LD_INT 0
34424: PPUSH
34425: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34426: LD_VAR 0 1
34430: NOT
34431: PUSH
34432: LD_VAR 0 1
34436: PUSH
34437: LD_INT 21
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 23
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PPUSH
34461: CALL_OW 69
34465: IN
34466: NOT
34467: OR
34468: IFFALSE 34472
// exit ;
34470: GO 34519
// for i = 1 to 3 do
34472: LD_ADDR_VAR 0 3
34476: PUSH
34477: DOUBLE
34478: LD_INT 1
34480: DEC
34481: ST_TO_ADDR
34482: LD_INT 3
34484: PUSH
34485: FOR_TO
34486: IFFALSE 34517
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 250
34497: PPUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 251
34507: PPUSH
34508: LD_INT 1
34510: PPUSH
34511: CALL_OW 453
34515: GO 34485
34517: POP
34518: POP
// end ;
34519: LD_VAR 0 2
34523: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34524: LD_INT 0
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34532: LD_VAR 0 1
34536: NOT
34537: PUSH
34538: LD_VAR 0 2
34542: NOT
34543: OR
34544: PUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 314
34554: OR
34555: IFFALSE 34559
// exit ;
34557: GO 35026
// if GetLives ( i ) < 250 then
34559: LD_VAR 0 4
34563: PPUSH
34564: CALL_OW 256
34568: PUSH
34569: LD_INT 250
34571: LESS
34572: IFFALSE 34585
// begin ComAutodestruct ( i ) ;
34574: LD_VAR 0 4
34578: PPUSH
34579: CALL 34422 0 1
// exit ;
34583: GO 35026
// end ; x := GetX ( enemy_unit ) ;
34585: LD_ADDR_VAR 0 7
34589: PUSH
34590: LD_VAR 0 2
34594: PPUSH
34595: CALL_OW 250
34599: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34600: LD_ADDR_VAR 0 8
34604: PUSH
34605: LD_VAR 0 2
34609: PPUSH
34610: CALL_OW 251
34614: ST_TO_ADDR
// if not x or not y then
34615: LD_VAR 0 7
34619: NOT
34620: PUSH
34621: LD_VAR 0 8
34625: NOT
34626: OR
34627: IFFALSE 34631
// exit ;
34629: GO 35026
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34631: LD_ADDR_VAR 0 6
34635: PUSH
34636: LD_VAR 0 7
34640: PPUSH
34641: LD_INT 0
34643: PPUSH
34644: LD_INT 4
34646: PPUSH
34647: CALL_OW 272
34651: PUSH
34652: LD_VAR 0 8
34656: PPUSH
34657: LD_INT 0
34659: PPUSH
34660: LD_INT 4
34662: PPUSH
34663: CALL_OW 273
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_VAR 0 7
34676: PPUSH
34677: LD_INT 1
34679: PPUSH
34680: LD_INT 4
34682: PPUSH
34683: CALL_OW 272
34687: PUSH
34688: LD_VAR 0 8
34692: PPUSH
34693: LD_INT 1
34695: PPUSH
34696: LD_INT 4
34698: PPUSH
34699: CALL_OW 273
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_VAR 0 7
34712: PPUSH
34713: LD_INT 2
34715: PPUSH
34716: LD_INT 4
34718: PPUSH
34719: CALL_OW 272
34723: PUSH
34724: LD_VAR 0 8
34728: PPUSH
34729: LD_INT 2
34731: PPUSH
34732: LD_INT 4
34734: PPUSH
34735: CALL_OW 273
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_VAR 0 7
34748: PPUSH
34749: LD_INT 3
34751: PPUSH
34752: LD_INT 4
34754: PPUSH
34755: CALL_OW 272
34759: PUSH
34760: LD_VAR 0 8
34764: PPUSH
34765: LD_INT 3
34767: PPUSH
34768: LD_INT 4
34770: PPUSH
34771: CALL_OW 273
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_VAR 0 7
34784: PPUSH
34785: LD_INT 4
34787: PPUSH
34788: LD_INT 4
34790: PPUSH
34791: CALL_OW 272
34795: PUSH
34796: LD_VAR 0 8
34800: PPUSH
34801: LD_INT 4
34803: PPUSH
34804: LD_INT 4
34806: PPUSH
34807: CALL_OW 273
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_VAR 0 7
34820: PPUSH
34821: LD_INT 5
34823: PPUSH
34824: LD_INT 4
34826: PPUSH
34827: CALL_OW 272
34831: PUSH
34832: LD_VAR 0 8
34836: PPUSH
34837: LD_INT 5
34839: PPUSH
34840: LD_INT 4
34842: PPUSH
34843: CALL_OW 273
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// for i = tmp downto 1 do
34860: LD_ADDR_VAR 0 4
34864: PUSH
34865: DOUBLE
34866: LD_VAR 0 6
34870: INC
34871: ST_TO_ADDR
34872: LD_INT 1
34874: PUSH
34875: FOR_DOWNTO
34876: IFFALSE 34977
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34878: LD_VAR 0 6
34882: PUSH
34883: LD_VAR 0 4
34887: ARRAY
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: PPUSH
34893: LD_VAR 0 6
34897: PUSH
34898: LD_VAR 0 4
34902: ARRAY
34903: PUSH
34904: LD_INT 2
34906: ARRAY
34907: PPUSH
34908: CALL_OW 488
34912: NOT
34913: PUSH
34914: LD_VAR 0 6
34918: PUSH
34919: LD_VAR 0 4
34923: ARRAY
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PPUSH
34929: LD_VAR 0 6
34933: PUSH
34934: LD_VAR 0 4
34938: ARRAY
34939: PUSH
34940: LD_INT 2
34942: ARRAY
34943: PPUSH
34944: CALL_OW 428
34948: PUSH
34949: LD_INT 0
34951: NONEQUAL
34952: OR
34953: IFFALSE 34975
// tmp := Delete ( tmp , i ) ;
34955: LD_ADDR_VAR 0 6
34959: PUSH
34960: LD_VAR 0 6
34964: PPUSH
34965: LD_VAR 0 4
34969: PPUSH
34970: CALL_OW 3
34974: ST_TO_ADDR
34975: GO 34875
34977: POP
34978: POP
// j := GetClosestHex ( unit , tmp ) ;
34979: LD_ADDR_VAR 0 5
34983: PUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_VAR 0 6
34993: PPUSH
34994: CALL 34270 0 2
34998: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34999: LD_VAR 0 1
35003: PPUSH
35004: LD_VAR 0 5
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: PPUSH
35013: LD_VAR 0 5
35017: PUSH
35018: LD_INT 2
35020: ARRAY
35021: PPUSH
35022: CALL_OW 111
// end ;
35026: LD_VAR 0 3
35030: RET
// export function PrepareApemanSoldier ( ) ; begin
35031: LD_INT 0
35033: PPUSH
// uc_nation := 0 ;
35034: LD_ADDR_OWVAR 21
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// hc_sex := sex_male ;
35042: LD_ADDR_OWVAR 27
35046: PUSH
35047: LD_INT 1
35049: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35050: LD_ADDR_OWVAR 28
35054: PUSH
35055: LD_INT 15
35057: ST_TO_ADDR
// hc_gallery :=  ;
35058: LD_ADDR_OWVAR 33
35062: PUSH
35063: LD_STRING 
35065: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35066: LD_ADDR_OWVAR 31
35070: PUSH
35071: LD_INT 0
35073: PPUSH
35074: LD_INT 3
35076: PPUSH
35077: CALL_OW 12
35081: PUSH
35082: LD_INT 0
35084: PPUSH
35085: LD_INT 3
35087: PPUSH
35088: CALL_OW 12
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 1
35109: RET
// export function PrepareApemanEngineer ( ) ; begin
35110: LD_INT 0
35112: PPUSH
// uc_nation := 0 ;
35113: LD_ADDR_OWVAR 21
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
// hc_sex := sex_male ;
35121: LD_ADDR_OWVAR 27
35125: PUSH
35126: LD_INT 1
35128: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35129: LD_ADDR_OWVAR 28
35133: PUSH
35134: LD_INT 16
35136: ST_TO_ADDR
// hc_gallery :=  ;
35137: LD_ADDR_OWVAR 33
35141: PUSH
35142: LD_STRING 
35144: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35145: LD_ADDR_OWVAR 31
35149: PUSH
35150: LD_INT 0
35152: PPUSH
35153: LD_INT 3
35155: PPUSH
35156: CALL_OW 12
35160: PUSH
35161: LD_INT 0
35163: PPUSH
35164: LD_INT 3
35166: PPUSH
35167: CALL_OW 12
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: ST_TO_ADDR
// end ;
35184: LD_VAR 0 1
35188: RET
// export function PrepareApeman ( agressivity ) ; begin
35189: LD_INT 0
35191: PPUSH
// uc_side := 0 ;
35192: LD_ADDR_OWVAR 20
35196: PUSH
35197: LD_INT 0
35199: ST_TO_ADDR
// uc_nation := 0 ;
35200: LD_ADDR_OWVAR 21
35204: PUSH
35205: LD_INT 0
35207: ST_TO_ADDR
// hc_sex := sex_male ;
35208: LD_ADDR_OWVAR 27
35212: PUSH
35213: LD_INT 1
35215: ST_TO_ADDR
// hc_class := class_apeman ;
35216: LD_ADDR_OWVAR 28
35220: PUSH
35221: LD_INT 12
35223: ST_TO_ADDR
// hc_gallery :=  ;
35224: LD_ADDR_OWVAR 33
35228: PUSH
35229: LD_STRING 
35231: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35232: LD_ADDR_OWVAR 35
35236: PUSH
35237: LD_VAR 0 1
35241: NEG
35242: PPUSH
35243: LD_VAR 0 1
35247: PPUSH
35248: CALL_OW 12
35252: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35253: LD_ADDR_OWVAR 31
35257: PUSH
35258: LD_INT 0
35260: PPUSH
35261: LD_INT 3
35263: PPUSH
35264: CALL_OW 12
35268: PUSH
35269: LD_INT 0
35271: PPUSH
35272: LD_INT 3
35274: PPUSH
35275: CALL_OW 12
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
// end ;
35292: LD_VAR 0 2
35296: RET
// export function PrepareTiger ( agressivity ) ; begin
35297: LD_INT 0
35299: PPUSH
// uc_side := 0 ;
35300: LD_ADDR_OWVAR 20
35304: PUSH
35305: LD_INT 0
35307: ST_TO_ADDR
// uc_nation := 0 ;
35308: LD_ADDR_OWVAR 21
35312: PUSH
35313: LD_INT 0
35315: ST_TO_ADDR
// hc_class := class_tiger ;
35316: LD_ADDR_OWVAR 28
35320: PUSH
35321: LD_INT 14
35323: ST_TO_ADDR
// hc_gallery :=  ;
35324: LD_ADDR_OWVAR 33
35328: PUSH
35329: LD_STRING 
35331: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35332: LD_ADDR_OWVAR 35
35336: PUSH
35337: LD_VAR 0 1
35341: NEG
35342: PPUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: CALL_OW 12
35352: ST_TO_ADDR
// end ;
35353: LD_VAR 0 2
35357: RET
// export function PrepareEnchidna ( ) ; begin
35358: LD_INT 0
35360: PPUSH
// uc_side := 0 ;
35361: LD_ADDR_OWVAR 20
35365: PUSH
35366: LD_INT 0
35368: ST_TO_ADDR
// uc_nation := 0 ;
35369: LD_ADDR_OWVAR 21
35373: PUSH
35374: LD_INT 0
35376: ST_TO_ADDR
// hc_class := class_baggie ;
35377: LD_ADDR_OWVAR 28
35381: PUSH
35382: LD_INT 13
35384: ST_TO_ADDR
// hc_gallery :=  ;
35385: LD_ADDR_OWVAR 33
35389: PUSH
35390: LD_STRING 
35392: ST_TO_ADDR
// end ;
35393: LD_VAR 0 1
35397: RET
// export function PrepareFrog ( ) ; begin
35398: LD_INT 0
35400: PPUSH
// uc_side := 0 ;
35401: LD_ADDR_OWVAR 20
35405: PUSH
35406: LD_INT 0
35408: ST_TO_ADDR
// uc_nation := 0 ;
35409: LD_ADDR_OWVAR 21
35413: PUSH
35414: LD_INT 0
35416: ST_TO_ADDR
// hc_class := class_frog ;
35417: LD_ADDR_OWVAR 28
35421: PUSH
35422: LD_INT 19
35424: ST_TO_ADDR
// hc_gallery :=  ;
35425: LD_ADDR_OWVAR 33
35429: PUSH
35430: LD_STRING 
35432: ST_TO_ADDR
// end ;
35433: LD_VAR 0 1
35437: RET
// export function PrepareFish ( ) ; begin
35438: LD_INT 0
35440: PPUSH
// uc_side := 0 ;
35441: LD_ADDR_OWVAR 20
35445: PUSH
35446: LD_INT 0
35448: ST_TO_ADDR
// uc_nation := 0 ;
35449: LD_ADDR_OWVAR 21
35453: PUSH
35454: LD_INT 0
35456: ST_TO_ADDR
// hc_class := class_fish ;
35457: LD_ADDR_OWVAR 28
35461: PUSH
35462: LD_INT 20
35464: ST_TO_ADDR
// hc_gallery :=  ;
35465: LD_ADDR_OWVAR 33
35469: PUSH
35470: LD_STRING 
35472: ST_TO_ADDR
// end ;
35473: LD_VAR 0 1
35477: RET
// export function PrepareBird ( ) ; begin
35478: LD_INT 0
35480: PPUSH
// uc_side := 0 ;
35481: LD_ADDR_OWVAR 20
35485: PUSH
35486: LD_INT 0
35488: ST_TO_ADDR
// uc_nation := 0 ;
35489: LD_ADDR_OWVAR 21
35493: PUSH
35494: LD_INT 0
35496: ST_TO_ADDR
// hc_class := class_phororhacos ;
35497: LD_ADDR_OWVAR 28
35501: PUSH
35502: LD_INT 18
35504: ST_TO_ADDR
// hc_gallery :=  ;
35505: LD_ADDR_OWVAR 33
35509: PUSH
35510: LD_STRING 
35512: ST_TO_ADDR
// end ;
35513: LD_VAR 0 1
35517: RET
// export function PrepareHorse ( ) ; begin
35518: LD_INT 0
35520: PPUSH
// uc_side := 0 ;
35521: LD_ADDR_OWVAR 20
35525: PUSH
35526: LD_INT 0
35528: ST_TO_ADDR
// uc_nation := 0 ;
35529: LD_ADDR_OWVAR 21
35533: PUSH
35534: LD_INT 0
35536: ST_TO_ADDR
// hc_class := class_horse ;
35537: LD_ADDR_OWVAR 28
35541: PUSH
35542: LD_INT 21
35544: ST_TO_ADDR
// hc_gallery :=  ;
35545: LD_ADDR_OWVAR 33
35549: PUSH
35550: LD_STRING 
35552: ST_TO_ADDR
// end ;
35553: LD_VAR 0 1
35557: RET
// export function PrepareMastodont ( ) ; begin
35558: LD_INT 0
35560: PPUSH
// uc_side := 0 ;
35561: LD_ADDR_OWVAR 20
35565: PUSH
35566: LD_INT 0
35568: ST_TO_ADDR
// uc_nation := 0 ;
35569: LD_ADDR_OWVAR 21
35573: PUSH
35574: LD_INT 0
35576: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35577: LD_ADDR_OWVAR 37
35581: PUSH
35582: LD_INT 31
35584: ST_TO_ADDR
// vc_control := control_rider ;
35585: LD_ADDR_OWVAR 38
35589: PUSH
35590: LD_INT 4
35592: ST_TO_ADDR
// end ;
35593: LD_VAR 0 1
35597: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35598: LD_INT 0
35600: PPUSH
35601: PPUSH
35602: PPUSH
// uc_side = 0 ;
35603: LD_ADDR_OWVAR 20
35607: PUSH
35608: LD_INT 0
35610: ST_TO_ADDR
// uc_nation = 0 ;
35611: LD_ADDR_OWVAR 21
35615: PUSH
35616: LD_INT 0
35618: ST_TO_ADDR
// InitHc_All ( ) ;
35619: CALL_OW 584
// InitVc ;
35623: CALL_OW 20
// if mastodonts then
35627: LD_VAR 0 6
35631: IFFALSE 35698
// for i = 1 to mastodonts do
35633: LD_ADDR_VAR 0 11
35637: PUSH
35638: DOUBLE
35639: LD_INT 1
35641: DEC
35642: ST_TO_ADDR
35643: LD_VAR 0 6
35647: PUSH
35648: FOR_TO
35649: IFFALSE 35696
// begin vc_chassis := 31 ;
35651: LD_ADDR_OWVAR 37
35655: PUSH
35656: LD_INT 31
35658: ST_TO_ADDR
// vc_control := control_rider ;
35659: LD_ADDR_OWVAR 38
35663: PUSH
35664: LD_INT 4
35666: ST_TO_ADDR
// animal := CreateVehicle ;
35667: LD_ADDR_VAR 0 12
35671: PUSH
35672: CALL_OW 45
35676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35677: LD_VAR 0 12
35681: PPUSH
35682: LD_VAR 0 8
35686: PPUSH
35687: LD_INT 0
35689: PPUSH
35690: CALL 37826 0 3
// end ;
35694: GO 35648
35696: POP
35697: POP
// if horses then
35698: LD_VAR 0 5
35702: IFFALSE 35769
// for i = 1 to horses do
35704: LD_ADDR_VAR 0 11
35708: PUSH
35709: DOUBLE
35710: LD_INT 1
35712: DEC
35713: ST_TO_ADDR
35714: LD_VAR 0 5
35718: PUSH
35719: FOR_TO
35720: IFFALSE 35767
// begin hc_class := 21 ;
35722: LD_ADDR_OWVAR 28
35726: PUSH
35727: LD_INT 21
35729: ST_TO_ADDR
// hc_gallery :=  ;
35730: LD_ADDR_OWVAR 33
35734: PUSH
35735: LD_STRING 
35737: ST_TO_ADDR
// animal := CreateHuman ;
35738: LD_ADDR_VAR 0 12
35742: PUSH
35743: CALL_OW 44
35747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35748: LD_VAR 0 12
35752: PPUSH
35753: LD_VAR 0 8
35757: PPUSH
35758: LD_INT 0
35760: PPUSH
35761: CALL 37826 0 3
// end ;
35765: GO 35719
35767: POP
35768: POP
// if birds then
35769: LD_VAR 0 1
35773: IFFALSE 35840
// for i = 1 to birds do
35775: LD_ADDR_VAR 0 11
35779: PUSH
35780: DOUBLE
35781: LD_INT 1
35783: DEC
35784: ST_TO_ADDR
35785: LD_VAR 0 1
35789: PUSH
35790: FOR_TO
35791: IFFALSE 35838
// begin hc_class := 18 ;
35793: LD_ADDR_OWVAR 28
35797: PUSH
35798: LD_INT 18
35800: ST_TO_ADDR
// hc_gallery =  ;
35801: LD_ADDR_OWVAR 33
35805: PUSH
35806: LD_STRING 
35808: ST_TO_ADDR
// animal := CreateHuman ;
35809: LD_ADDR_VAR 0 12
35813: PUSH
35814: CALL_OW 44
35818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35819: LD_VAR 0 12
35823: PPUSH
35824: LD_VAR 0 8
35828: PPUSH
35829: LD_INT 0
35831: PPUSH
35832: CALL 37826 0 3
// end ;
35836: GO 35790
35838: POP
35839: POP
// if tigers then
35840: LD_VAR 0 2
35844: IFFALSE 35928
// for i = 1 to tigers do
35846: LD_ADDR_VAR 0 11
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_VAR 0 2
35860: PUSH
35861: FOR_TO
35862: IFFALSE 35926
// begin hc_class = class_tiger ;
35864: LD_ADDR_OWVAR 28
35868: PUSH
35869: LD_INT 14
35871: ST_TO_ADDR
// hc_gallery =  ;
35872: LD_ADDR_OWVAR 33
35876: PUSH
35877: LD_STRING 
35879: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35880: LD_ADDR_OWVAR 35
35884: PUSH
35885: LD_INT 7
35887: NEG
35888: PPUSH
35889: LD_INT 7
35891: PPUSH
35892: CALL_OW 12
35896: ST_TO_ADDR
// animal := CreateHuman ;
35897: LD_ADDR_VAR 0 12
35901: PUSH
35902: CALL_OW 44
35906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35907: LD_VAR 0 12
35911: PPUSH
35912: LD_VAR 0 8
35916: PPUSH
35917: LD_INT 0
35919: PPUSH
35920: CALL 37826 0 3
// end ;
35924: GO 35861
35926: POP
35927: POP
// if apemans then
35928: LD_VAR 0 3
35932: IFFALSE 36055
// for i = 1 to apemans do
35934: LD_ADDR_VAR 0 11
35938: PUSH
35939: DOUBLE
35940: LD_INT 1
35942: DEC
35943: ST_TO_ADDR
35944: LD_VAR 0 3
35948: PUSH
35949: FOR_TO
35950: IFFALSE 36053
// begin hc_class = class_apeman ;
35952: LD_ADDR_OWVAR 28
35956: PUSH
35957: LD_INT 12
35959: ST_TO_ADDR
// hc_gallery =  ;
35960: LD_ADDR_OWVAR 33
35964: PUSH
35965: LD_STRING 
35967: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35968: LD_ADDR_OWVAR 35
35972: PUSH
35973: LD_INT 2
35975: NEG
35976: PPUSH
35977: LD_INT 2
35979: PPUSH
35980: CALL_OW 12
35984: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35985: LD_ADDR_OWVAR 31
35989: PUSH
35990: LD_INT 1
35992: PPUSH
35993: LD_INT 3
35995: PPUSH
35996: CALL_OW 12
36000: PUSH
36001: LD_INT 1
36003: PPUSH
36004: LD_INT 3
36006: PPUSH
36007: CALL_OW 12
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// animal := CreateHuman ;
36024: LD_ADDR_VAR 0 12
36028: PUSH
36029: CALL_OW 44
36033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36034: LD_VAR 0 12
36038: PPUSH
36039: LD_VAR 0 8
36043: PPUSH
36044: LD_INT 0
36046: PPUSH
36047: CALL 37826 0 3
// end ;
36051: GO 35949
36053: POP
36054: POP
// if enchidnas then
36055: LD_VAR 0 4
36059: IFFALSE 36126
// for i = 1 to enchidnas do
36061: LD_ADDR_VAR 0 11
36065: PUSH
36066: DOUBLE
36067: LD_INT 1
36069: DEC
36070: ST_TO_ADDR
36071: LD_VAR 0 4
36075: PUSH
36076: FOR_TO
36077: IFFALSE 36124
// begin hc_class = 13 ;
36079: LD_ADDR_OWVAR 28
36083: PUSH
36084: LD_INT 13
36086: ST_TO_ADDR
// hc_gallery =  ;
36087: LD_ADDR_OWVAR 33
36091: PUSH
36092: LD_STRING 
36094: ST_TO_ADDR
// animal := CreateHuman ;
36095: LD_ADDR_VAR 0 12
36099: PUSH
36100: CALL_OW 44
36104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36105: LD_VAR 0 12
36109: PPUSH
36110: LD_VAR 0 8
36114: PPUSH
36115: LD_INT 0
36117: PPUSH
36118: CALL 37826 0 3
// end ;
36122: GO 36076
36124: POP
36125: POP
// if fishes then
36126: LD_VAR 0 7
36130: IFFALSE 36197
// for i = 1 to fishes do
36132: LD_ADDR_VAR 0 11
36136: PUSH
36137: DOUBLE
36138: LD_INT 1
36140: DEC
36141: ST_TO_ADDR
36142: LD_VAR 0 7
36146: PUSH
36147: FOR_TO
36148: IFFALSE 36195
// begin hc_class = 20 ;
36150: LD_ADDR_OWVAR 28
36154: PUSH
36155: LD_INT 20
36157: ST_TO_ADDR
// hc_gallery =  ;
36158: LD_ADDR_OWVAR 33
36162: PUSH
36163: LD_STRING 
36165: ST_TO_ADDR
// animal := CreateHuman ;
36166: LD_ADDR_VAR 0 12
36170: PUSH
36171: CALL_OW 44
36175: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36176: LD_VAR 0 12
36180: PPUSH
36181: LD_VAR 0 9
36185: PPUSH
36186: LD_INT 0
36188: PPUSH
36189: CALL 37826 0 3
// end ;
36193: GO 36147
36195: POP
36196: POP
// end ;
36197: LD_VAR 0 10
36201: RET
// export function WantHeal ( sci , unit ) ; begin
36202: LD_INT 0
36204: PPUSH
// if GetTaskList ( sci ) > 0 then
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 437
36214: PUSH
36215: LD_INT 0
36217: GREATER
36218: IFFALSE 36288
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 437
36229: PUSH
36230: LD_INT 1
36232: ARRAY
36233: PUSH
36234: LD_INT 1
36236: ARRAY
36237: PUSH
36238: LD_STRING l
36240: EQUAL
36241: PUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 437
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PUSH
36256: LD_INT 4
36258: ARRAY
36259: PUSH
36260: LD_VAR 0 2
36264: EQUAL
36265: AND
36266: IFFALSE 36278
// result := true else
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_INT 1
36275: ST_TO_ADDR
36276: GO 36286
// result := false ;
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 0
36285: ST_TO_ADDR
// end else
36286: GO 36296
// result := false ;
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 0
36295: ST_TO_ADDR
// end ;
36296: LD_VAR 0 3
36300: RET
// export function HealTarget ( sci ) ; begin
36301: LD_INT 0
36303: PPUSH
// if not sci then
36304: LD_VAR 0 1
36308: NOT
36309: IFFALSE 36313
// exit ;
36311: GO 36378
// result := 0 ;
36313: LD_ADDR_VAR 0 2
36317: PUSH
36318: LD_INT 0
36320: ST_TO_ADDR
// if GetTaskList ( sci ) then
36321: LD_VAR 0 1
36325: PPUSH
36326: CALL_OW 437
36330: IFFALSE 36378
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36332: LD_VAR 0 1
36336: PPUSH
36337: CALL_OW 437
36341: PUSH
36342: LD_INT 1
36344: ARRAY
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PUSH
36350: LD_STRING l
36352: EQUAL
36353: IFFALSE 36378
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36355: LD_ADDR_VAR 0 2
36359: PUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 437
36369: PUSH
36370: LD_INT 1
36372: ARRAY
36373: PUSH
36374: LD_INT 4
36376: ARRAY
36377: ST_TO_ADDR
// end ;
36378: LD_VAR 0 2
36382: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
// if not base_units then
36389: LD_VAR 0 1
36393: NOT
36394: IFFALSE 36398
// exit ;
36396: GO 36485
// result := false ;
36398: LD_ADDR_VAR 0 2
36402: PUSH
36403: LD_INT 0
36405: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36406: LD_ADDR_VAR 0 5
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: LD_INT 21
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PPUSH
36426: CALL_OW 72
36430: ST_TO_ADDR
// if not tmp then
36431: LD_VAR 0 5
36435: NOT
36436: IFFALSE 36440
// exit ;
36438: GO 36485
// for i in tmp do
36440: LD_ADDR_VAR 0 3
36444: PUSH
36445: LD_VAR 0 5
36449: PUSH
36450: FOR_IN
36451: IFFALSE 36483
// begin result := EnemyInRange ( i , 22 ) ;
36453: LD_ADDR_VAR 0 2
36457: PUSH
36458: LD_VAR 0 3
36462: PPUSH
36463: LD_INT 22
36465: PPUSH
36466: CALL 34072 0 2
36470: ST_TO_ADDR
// if result then
36471: LD_VAR 0 2
36475: IFFALSE 36481
// exit ;
36477: POP
36478: POP
36479: GO 36485
// end ;
36481: GO 36450
36483: POP
36484: POP
// end ;
36485: LD_VAR 0 2
36489: RET
// export function FilterByTag ( units , tag ) ; begin
36490: LD_INT 0
36492: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36493: LD_ADDR_VAR 0 3
36497: PUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: LD_INT 120
36505: PUSH
36506: LD_VAR 0 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 72
36519: ST_TO_ADDR
// end ;
36520: LD_VAR 0 3
36524: RET
// export function IsDriver ( un ) ; begin
36525: LD_INT 0
36527: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36528: LD_ADDR_VAR 0 2
36532: PUSH
36533: LD_VAR 0 1
36537: PUSH
36538: LD_INT 55
36540: PUSH
36541: EMPTY
36542: LIST
36543: PPUSH
36544: CALL_OW 69
36548: IN
36549: ST_TO_ADDR
// end ;
36550: LD_VAR 0 2
36554: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36555: LD_INT 0
36557: PPUSH
36558: PPUSH
// list := [ ] ;
36559: LD_ADDR_VAR 0 5
36563: PUSH
36564: EMPTY
36565: ST_TO_ADDR
// case d of 0 :
36566: LD_VAR 0 3
36570: PUSH
36571: LD_INT 0
36573: DOUBLE
36574: EQUAL
36575: IFTRUE 36579
36577: GO 36712
36579: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36580: LD_ADDR_VAR 0 5
36584: PUSH
36585: LD_VAR 0 1
36589: PUSH
36590: LD_INT 4
36592: MINUS
36593: PUSH
36594: LD_VAR 0 2
36598: PUSH
36599: LD_INT 4
36601: MINUS
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: PUSH
36611: LD_VAR 0 1
36615: PUSH
36616: LD_INT 3
36618: MINUS
36619: PUSH
36620: LD_VAR 0 2
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: PUSH
36633: LD_VAR 0 1
36637: PUSH
36638: LD_INT 4
36640: PLUS
36641: PUSH
36642: LD_VAR 0 2
36646: PUSH
36647: LD_INT 4
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: PUSH
36655: LD_VAR 0 1
36659: PUSH
36660: LD_INT 3
36662: PLUS
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_INT 3
36671: PLUS
36672: PUSH
36673: LD_INT 5
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PUSH
36681: LD_VAR 0 1
36685: PUSH
36686: LD_VAR 0 2
36690: PUSH
36691: LD_INT 4
36693: PLUS
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
// end ; 1 :
36710: GO 37410
36712: LD_INT 1
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36853
36720: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36721: LD_ADDR_VAR 0 5
36725: PUSH
36726: LD_VAR 0 1
36730: PUSH
36731: LD_VAR 0 2
36735: PUSH
36736: LD_INT 4
36738: MINUS
36739: PUSH
36740: LD_INT 3
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: LD_VAR 0 1
36752: PUSH
36753: LD_INT 3
36755: MINUS
36756: PUSH
36757: LD_VAR 0 2
36761: PUSH
36762: LD_INT 3
36764: MINUS
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: PUSH
36774: LD_VAR 0 1
36778: PUSH
36779: LD_INT 4
36781: MINUS
36782: PUSH
36783: LD_VAR 0 2
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: PUSH
36796: LD_VAR 0 1
36800: PUSH
36801: LD_VAR 0 2
36805: PUSH
36806: LD_INT 3
36808: PLUS
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: PUSH
36818: LD_VAR 0 1
36822: PUSH
36823: LD_INT 4
36825: PLUS
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 4
36834: PLUS
36835: PUSH
36836: LD_INT 5
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: ST_TO_ADDR
// end ; 2 :
36851: GO 37410
36853: LD_INT 2
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36861
36859: GO 36990
36861: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36862: LD_ADDR_VAR 0 5
36866: PUSH
36867: LD_VAR 0 1
36871: PUSH
36872: LD_VAR 0 2
36876: PUSH
36877: LD_INT 3
36879: MINUS
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: PUSH
36889: LD_VAR 0 1
36893: PUSH
36894: LD_INT 4
36896: PLUS
36897: PUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_INT 4
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: PUSH
36911: LD_VAR 0 1
36915: PUSH
36916: LD_VAR 0 2
36920: PUSH
36921: LD_INT 4
36923: PLUS
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: PUSH
36933: LD_VAR 0 1
36937: PUSH
36938: LD_INT 3
36940: MINUS
36941: PUSH
36942: LD_VAR 0 2
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: PUSH
36955: LD_VAR 0 1
36959: PUSH
36960: LD_INT 4
36962: MINUS
36963: PUSH
36964: LD_VAR 0 2
36968: PUSH
36969: LD_INT 4
36971: MINUS
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// end ; 3 :
36988: GO 37410
36990: LD_INT 3
36992: DOUBLE
36993: EQUAL
36994: IFTRUE 36998
36996: GO 37131
36998: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36999: LD_ADDR_VAR 0 5
37003: PUSH
37004: LD_VAR 0 1
37008: PUSH
37009: LD_INT 3
37011: PLUS
37012: PUSH
37013: LD_VAR 0 2
37017: PUSH
37018: LD_INT 4
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: LD_VAR 0 1
37030: PUSH
37031: LD_INT 4
37033: PLUS
37034: PUSH
37035: LD_VAR 0 2
37039: PUSH
37040: LD_INT 4
37042: PLUS
37043: PUSH
37044: LD_INT 5
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: PUSH
37052: LD_VAR 0 1
37056: PUSH
37057: LD_INT 4
37059: MINUS
37060: PUSH
37061: LD_VAR 0 2
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: PUSH
37074: LD_VAR 0 1
37078: PUSH
37079: LD_VAR 0 2
37083: PUSH
37084: LD_INT 4
37086: MINUS
37087: PUSH
37088: LD_INT 3
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: PUSH
37096: LD_VAR 0 1
37100: PUSH
37101: LD_INT 3
37103: MINUS
37104: PUSH
37105: LD_VAR 0 2
37109: PUSH
37110: LD_INT 3
37112: MINUS
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// end ; 4 :
37129: GO 37410
37131: LD_INT 4
37133: DOUBLE
37134: EQUAL
37135: IFTRUE 37139
37137: GO 37272
37139: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37140: LD_ADDR_VAR 0 5
37144: PUSH
37145: LD_VAR 0 1
37149: PUSH
37150: LD_VAR 0 2
37154: PUSH
37155: LD_INT 4
37157: PLUS
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: PUSH
37167: LD_VAR 0 1
37171: PUSH
37172: LD_INT 3
37174: PLUS
37175: PUSH
37176: LD_VAR 0 2
37180: PUSH
37181: LD_INT 3
37183: PLUS
37184: PUSH
37185: LD_INT 5
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: PUSH
37193: LD_VAR 0 1
37197: PUSH
37198: LD_INT 4
37200: PLUS
37201: PUSH
37202: LD_VAR 0 2
37206: PUSH
37207: LD_INT 4
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: LD_VAR 0 2
37224: PUSH
37225: LD_INT 3
37227: MINUS
37228: PUSH
37229: LD_INT 3
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_INT 4
37244: MINUS
37245: PUSH
37246: LD_VAR 0 2
37250: PUSH
37251: LD_INT 4
37253: MINUS
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: ST_TO_ADDR
// end ; 5 :
37270: GO 37410
37272: LD_INT 5
37274: DOUBLE
37275: EQUAL
37276: IFTRUE 37280
37278: GO 37409
37280: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37281: LD_ADDR_VAR 0 5
37285: PUSH
37286: LD_VAR 0 1
37290: PUSH
37291: LD_INT 4
37293: MINUS
37294: PUSH
37295: LD_VAR 0 2
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: PUSH
37308: LD_VAR 0 1
37312: PUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 4
37320: MINUS
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: PUSH
37330: LD_VAR 0 1
37334: PUSH
37335: LD_INT 4
37337: PLUS
37338: PUSH
37339: LD_VAR 0 2
37343: PUSH
37344: LD_INT 4
37346: PLUS
37347: PUSH
37348: LD_INT 5
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: PUSH
37356: LD_VAR 0 1
37360: PUSH
37361: LD_INT 3
37363: PLUS
37364: PUSH
37365: LD_VAR 0 2
37369: PUSH
37370: LD_INT 4
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: PUSH
37378: LD_VAR 0 1
37382: PUSH
37383: LD_VAR 0 2
37387: PUSH
37388: LD_INT 3
37390: PLUS
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: ST_TO_ADDR
// end ; end ;
37407: GO 37410
37409: POP
// result := list ;
37410: LD_ADDR_VAR 0 4
37414: PUSH
37415: LD_VAR 0 5
37419: ST_TO_ADDR
// end ;
37420: LD_VAR 0 4
37424: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37425: LD_INT 0
37427: PPUSH
37428: PPUSH
37429: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37430: LD_VAR 0 1
37434: NOT
37435: PUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: LD_INT 4
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: IN
37459: NOT
37460: OR
37461: IFFALSE 37465
// exit ;
37463: GO 37548
// tmp := [ ] ;
37465: LD_ADDR_VAR 0 5
37469: PUSH
37470: EMPTY
37471: ST_TO_ADDR
// for i in units do
37472: LD_ADDR_VAR 0 4
37476: PUSH
37477: LD_VAR 0 1
37481: PUSH
37482: FOR_IN
37483: IFFALSE 37517
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37485: LD_ADDR_VAR 0 5
37489: PUSH
37490: LD_VAR 0 5
37494: PPUSH
37495: LD_VAR 0 4
37499: PPUSH
37500: LD_VAR 0 2
37504: PPUSH
37505: CALL_OW 259
37509: PPUSH
37510: CALL 38908 0 2
37514: ST_TO_ADDR
37515: GO 37482
37517: POP
37518: POP
// if not tmp then
37519: LD_VAR 0 5
37523: NOT
37524: IFFALSE 37528
// exit ;
37526: GO 37548
// result := SortListByListDesc ( units , tmp ) ;
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: LD_VAR 0 5
37542: PPUSH
37543: CALL_OW 77
37547: ST_TO_ADDR
// end ;
37548: LD_VAR 0 3
37552: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
37557: PPUSH
// result := false ;
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_INT 0
37565: ST_TO_ADDR
// if not building then
37566: LD_VAR 0 2
37570: NOT
37571: IFFALSE 37575
// exit ;
37573: GO 37713
// x := GetX ( building ) ;
37575: LD_ADDR_VAR 0 4
37579: PUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: CALL_OW 250
37589: ST_TO_ADDR
// y := GetY ( building ) ;
37590: LD_ADDR_VAR 0 5
37594: PUSH
37595: LD_VAR 0 2
37599: PPUSH
37600: CALL_OW 251
37604: ST_TO_ADDR
// if not x or not y then
37605: LD_VAR 0 4
37609: NOT
37610: PUSH
37611: LD_VAR 0 5
37615: NOT
37616: OR
37617: IFFALSE 37621
// exit ;
37619: GO 37713
// if GetTaskList ( unit ) then
37621: LD_VAR 0 1
37625: PPUSH
37626: CALL_OW 437
37630: IFFALSE 37713
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37632: LD_STRING e
37634: PUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL_OW 437
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: PUSH
37649: LD_INT 1
37651: ARRAY
37652: EQUAL
37653: PUSH
37654: LD_VAR 0 4
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 437
37668: PUSH
37669: LD_INT 1
37671: ARRAY
37672: PUSH
37673: LD_INT 2
37675: ARRAY
37676: EQUAL
37677: AND
37678: PUSH
37679: LD_VAR 0 5
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 437
37693: PUSH
37694: LD_INT 1
37696: ARRAY
37697: PUSH
37698: LD_INT 3
37700: ARRAY
37701: EQUAL
37702: AND
37703: IFFALSE 37713
// result := true end ;
37705: LD_ADDR_VAR 0 3
37709: PUSH
37710: LD_INT 1
37712: ST_TO_ADDR
// end ;
37713: LD_VAR 0 3
37717: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37718: LD_INT 0
37720: PPUSH
// result := false ;
37721: LD_ADDR_VAR 0 4
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
// if GetTaskList ( unit ) then
37729: LD_VAR 0 1
37733: PPUSH
37734: CALL_OW 437
37738: IFFALSE 37821
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37740: LD_STRING M
37742: PUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 437
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: PUSH
37757: LD_INT 1
37759: ARRAY
37760: EQUAL
37761: PUSH
37762: LD_VAR 0 2
37766: PUSH
37767: LD_VAR 0 1
37771: PPUSH
37772: CALL_OW 437
37776: PUSH
37777: LD_INT 1
37779: ARRAY
37780: PUSH
37781: LD_INT 2
37783: ARRAY
37784: EQUAL
37785: AND
37786: PUSH
37787: LD_VAR 0 3
37791: PUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 437
37801: PUSH
37802: LD_INT 1
37804: ARRAY
37805: PUSH
37806: LD_INT 3
37808: ARRAY
37809: EQUAL
37810: AND
37811: IFFALSE 37821
// result := true ;
37813: LD_ADDR_VAR 0 4
37817: PUSH
37818: LD_INT 1
37820: ST_TO_ADDR
// end ; end ;
37821: LD_VAR 0 4
37825: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
37830: PPUSH
37831: PPUSH
// if not unit or not area then
37832: LD_VAR 0 1
37836: NOT
37837: PUSH
37838: LD_VAR 0 2
37842: NOT
37843: OR
37844: IFFALSE 37848
// exit ;
37846: GO 38011
// tmp := AreaToList ( area , i ) ;
37848: LD_ADDR_VAR 0 6
37852: PUSH
37853: LD_VAR 0 2
37857: PPUSH
37858: LD_VAR 0 5
37862: PPUSH
37863: CALL_OW 517
37867: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37868: LD_ADDR_VAR 0 5
37872: PUSH
37873: DOUBLE
37874: LD_INT 1
37876: DEC
37877: ST_TO_ADDR
37878: LD_VAR 0 6
37882: PUSH
37883: LD_INT 1
37885: ARRAY
37886: PUSH
37887: FOR_TO
37888: IFFALSE 38009
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37890: LD_ADDR_VAR 0 7
37894: PUSH
37895: LD_VAR 0 6
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PUSH
37904: LD_VAR 0 5
37908: ARRAY
37909: PUSH
37910: LD_VAR 0 6
37914: PUSH
37915: LD_INT 2
37917: ARRAY
37918: PUSH
37919: LD_VAR 0 5
37923: ARRAY
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37929: LD_INT 92
37931: PUSH
37932: LD_VAR 0 7
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PUSH
37941: LD_VAR 0 7
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: PPUSH
37959: CALL_OW 69
37963: PUSH
37964: LD_INT 0
37966: EQUAL
37967: IFFALSE 38007
// begin PlaceUnitArea ( unit , area , mode ) ;
37969: LD_VAR 0 1
37973: PPUSH
37974: LD_VAR 0 2
37978: PPUSH
37979: LD_VAR 0 3
37983: PPUSH
37984: CALL_OW 49
// result := IsPlaced ( unit ) ;
37988: LD_ADDR_VAR 0 4
37992: PUSH
37993: LD_VAR 0 1
37997: PPUSH
37998: CALL_OW 305
38002: ST_TO_ADDR
// exit ;
38003: POP
38004: POP
38005: GO 38011
// end ; end ;
38007: GO 37887
38009: POP
38010: POP
// end ;
38011: LD_VAR 0 4
38015: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38016: LD_INT 0
38018: PPUSH
38019: PPUSH
38020: PPUSH
// if not side or side > 8 then
38021: LD_VAR 0 1
38025: NOT
38026: PUSH
38027: LD_VAR 0 1
38031: PUSH
38032: LD_INT 8
38034: GREATER
38035: OR
38036: IFFALSE 38040
// exit ;
38038: GO 38227
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38040: LD_ADDR_VAR 0 4
38044: PUSH
38045: LD_INT 22
38047: PUSH
38048: LD_VAR 0 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 21
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PPUSH
38071: CALL_OW 69
38075: ST_TO_ADDR
// if not tmp then
38076: LD_VAR 0 4
38080: NOT
38081: IFFALSE 38085
// exit ;
38083: GO 38227
// enable_addtolog := true ;
38085: LD_ADDR_OWVAR 81
38089: PUSH
38090: LD_INT 1
38092: ST_TO_ADDR
// AddToLog ( [ ) ;
38093: LD_STRING [
38095: PPUSH
38096: CALL_OW 561
// for i in tmp do
38100: LD_ADDR_VAR 0 3
38104: PUSH
38105: LD_VAR 0 4
38109: PUSH
38110: FOR_IN
38111: IFFALSE 38218
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38113: LD_STRING [
38115: PUSH
38116: LD_VAR 0 3
38120: PPUSH
38121: CALL_OW 266
38125: STR
38126: PUSH
38127: LD_STRING , 
38129: STR
38130: PUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: CALL_OW 250
38140: STR
38141: PUSH
38142: LD_STRING , 
38144: STR
38145: PUSH
38146: LD_VAR 0 3
38150: PPUSH
38151: CALL_OW 251
38155: STR
38156: PUSH
38157: LD_STRING , 
38159: STR
38160: PUSH
38161: LD_VAR 0 3
38165: PPUSH
38166: CALL_OW 254
38170: STR
38171: PUSH
38172: LD_STRING , 
38174: STR
38175: PUSH
38176: LD_VAR 0 3
38180: PPUSH
38181: LD_INT 1
38183: PPUSH
38184: CALL_OW 268
38188: STR
38189: PUSH
38190: LD_STRING , 
38192: STR
38193: PUSH
38194: LD_VAR 0 3
38198: PPUSH
38199: LD_INT 2
38201: PPUSH
38202: CALL_OW 268
38206: STR
38207: PUSH
38208: LD_STRING ],
38210: STR
38211: PPUSH
38212: CALL_OW 561
// end ;
38216: GO 38110
38218: POP
38219: POP
// AddToLog ( ]; ) ;
38220: LD_STRING ];
38222: PPUSH
38223: CALL_OW 561
// end ;
38227: LD_VAR 0 2
38231: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38232: LD_INT 0
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
// if not area or not rate or not max then
38239: LD_VAR 0 1
38243: NOT
38244: PUSH
38245: LD_VAR 0 2
38249: NOT
38250: OR
38251: PUSH
38252: LD_VAR 0 4
38256: NOT
38257: OR
38258: IFFALSE 38262
// exit ;
38260: GO 38451
// while 1 do
38262: LD_INT 1
38264: IFFALSE 38451
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38266: LD_ADDR_VAR 0 9
38270: PUSH
38271: LD_VAR 0 1
38275: PPUSH
38276: LD_INT 1
38278: PPUSH
38279: CALL_OW 287
38283: PUSH
38284: LD_INT 10
38286: MUL
38287: ST_TO_ADDR
// r := rate / 10 ;
38288: LD_ADDR_VAR 0 7
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: LD_INT 10
38300: DIVREAL
38301: ST_TO_ADDR
// time := 1 1$00 ;
38302: LD_ADDR_VAR 0 8
38306: PUSH
38307: LD_INT 2100
38309: ST_TO_ADDR
// if amount < min then
38310: LD_VAR 0 9
38314: PUSH
38315: LD_VAR 0 3
38319: LESS
38320: IFFALSE 38338
// r := r * 2 else
38322: LD_ADDR_VAR 0 7
38326: PUSH
38327: LD_VAR 0 7
38331: PUSH
38332: LD_INT 2
38334: MUL
38335: ST_TO_ADDR
38336: GO 38364
// if amount > max then
38338: LD_VAR 0 9
38342: PUSH
38343: LD_VAR 0 4
38347: GREATER
38348: IFFALSE 38364
// r := r / 2 ;
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: LD_VAR 0 7
38359: PUSH
38360: LD_INT 2
38362: DIVREAL
38363: ST_TO_ADDR
// time := time / r ;
38364: LD_ADDR_VAR 0 8
38368: PUSH
38369: LD_VAR 0 8
38373: PUSH
38374: LD_VAR 0 7
38378: DIVREAL
38379: ST_TO_ADDR
// if time < 0 then
38380: LD_VAR 0 8
38384: PUSH
38385: LD_INT 0
38387: LESS
38388: IFFALSE 38405
// time := time * - 1 ;
38390: LD_ADDR_VAR 0 8
38394: PUSH
38395: LD_VAR 0 8
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: MUL
38404: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38405: LD_VAR 0 8
38409: PUSH
38410: LD_INT 35
38412: PPUSH
38413: LD_INT 875
38415: PPUSH
38416: CALL_OW 12
38420: PLUS
38421: PPUSH
38422: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38426: LD_INT 1
38428: PPUSH
38429: LD_INT 5
38431: PPUSH
38432: CALL_OW 12
38436: PPUSH
38437: LD_VAR 0 1
38441: PPUSH
38442: LD_INT 1
38444: PPUSH
38445: CALL_OW 55
// end ;
38449: GO 38262
// end ;
38451: LD_VAR 0 5
38455: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38456: LD_INT 0
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
// if not turrets or not factories then
38466: LD_VAR 0 1
38470: NOT
38471: PUSH
38472: LD_VAR 0 2
38476: NOT
38477: OR
38478: IFFALSE 38482
// exit ;
38480: GO 38789
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38482: LD_ADDR_VAR 0 10
38486: PUSH
38487: LD_INT 5
38489: PUSH
38490: LD_INT 6
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 4
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 5
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 24
38524: PUSH
38525: LD_INT 25
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 23
38534: PUSH
38535: LD_INT 27
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 42
38548: PUSH
38549: LD_INT 43
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 44
38558: PUSH
38559: LD_INT 46
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 45
38568: PUSH
38569: LD_INT 47
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// result := [ ] ;
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: EMPTY
38592: ST_TO_ADDR
// for i in turrets do
38593: LD_ADDR_VAR 0 4
38597: PUSH
38598: LD_VAR 0 1
38602: PUSH
38603: FOR_IN
38604: IFFALSE 38787
// begin nat := GetNation ( i ) ;
38606: LD_ADDR_VAR 0 7
38610: PUSH
38611: LD_VAR 0 4
38615: PPUSH
38616: CALL_OW 248
38620: ST_TO_ADDR
// weapon := 0 ;
38621: LD_ADDR_VAR 0 8
38625: PUSH
38626: LD_INT 0
38628: ST_TO_ADDR
// if not nat then
38629: LD_VAR 0 7
38633: NOT
38634: IFFALSE 38638
// continue ;
38636: GO 38603
// for j in list [ nat ] do
38638: LD_ADDR_VAR 0 5
38642: PUSH
38643: LD_VAR 0 10
38647: PUSH
38648: LD_VAR 0 7
38652: ARRAY
38653: PUSH
38654: FOR_IN
38655: IFFALSE 38696
// if GetBWeapon ( i ) = j [ 1 ] then
38657: LD_VAR 0 4
38661: PPUSH
38662: CALL_OW 269
38666: PUSH
38667: LD_VAR 0 5
38671: PUSH
38672: LD_INT 1
38674: ARRAY
38675: EQUAL
38676: IFFALSE 38694
// begin weapon := j [ 2 ] ;
38678: LD_ADDR_VAR 0 8
38682: PUSH
38683: LD_VAR 0 5
38687: PUSH
38688: LD_INT 2
38690: ARRAY
38691: ST_TO_ADDR
// break ;
38692: GO 38696
// end ;
38694: GO 38654
38696: POP
38697: POP
// if not weapon then
38698: LD_VAR 0 8
38702: NOT
38703: IFFALSE 38707
// continue ;
38705: GO 38603
// for k in factories do
38707: LD_ADDR_VAR 0 6
38711: PUSH
38712: LD_VAR 0 2
38716: PUSH
38717: FOR_IN
38718: IFFALSE 38783
// begin weapons := AvailableWeaponList ( k ) ;
38720: LD_ADDR_VAR 0 9
38724: PUSH
38725: LD_VAR 0 6
38729: PPUSH
38730: CALL_OW 478
38734: ST_TO_ADDR
// if not weapons then
38735: LD_VAR 0 9
38739: NOT
38740: IFFALSE 38744
// continue ;
38742: GO 38717
// if weapon in weapons then
38744: LD_VAR 0 8
38748: PUSH
38749: LD_VAR 0 9
38753: IN
38754: IFFALSE 38781
// begin result := [ i , weapon ] ;
38756: LD_ADDR_VAR 0 3
38760: PUSH
38761: LD_VAR 0 4
38765: PUSH
38766: LD_VAR 0 8
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: ST_TO_ADDR
// exit ;
38775: POP
38776: POP
38777: POP
38778: POP
38779: GO 38789
// end ; end ;
38781: GO 38717
38783: POP
38784: POP
// end ;
38785: GO 38603
38787: POP
38788: POP
// end ;
38789: LD_VAR 0 3
38793: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38794: LD_INT 0
38796: PPUSH
// if not side or side > 8 then
38797: LD_VAR 0 3
38801: NOT
38802: PUSH
38803: LD_VAR 0 3
38807: PUSH
38808: LD_INT 8
38810: GREATER
38811: OR
38812: IFFALSE 38816
// exit ;
38814: GO 38875
// if not range then
38816: LD_VAR 0 4
38820: NOT
38821: IFFALSE 38832
// range := - 12 ;
38823: LD_ADDR_VAR 0 4
38827: PUSH
38828: LD_INT 12
38830: NEG
38831: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38832: LD_VAR 0 1
38836: PPUSH
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_VAR 0 3
38846: PPUSH
38847: LD_VAR 0 4
38851: PPUSH
38852: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38856: LD_VAR 0 1
38860: PPUSH
38861: LD_VAR 0 2
38865: PPUSH
38866: LD_VAR 0 3
38870: PPUSH
38871: CALL_OW 331
// end ;
38875: LD_VAR 0 5
38879: RET
// export function Video ( mode ) ; begin
38880: LD_INT 0
38882: PPUSH
// ingame_video = mode ;
38883: LD_ADDR_OWVAR 52
38887: PUSH
38888: LD_VAR 0 1
38892: ST_TO_ADDR
// interface_hidden = mode ;
38893: LD_ADDR_OWVAR 54
38897: PUSH
38898: LD_VAR 0 1
38902: ST_TO_ADDR
// end ;
38903: LD_VAR 0 2
38907: RET
// export function Join ( array , element ) ; begin
38908: LD_INT 0
38910: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38911: LD_ADDR_VAR 0 3
38915: PUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: LD_VAR 0 1
38925: PUSH
38926: LD_INT 1
38928: PLUS
38929: PPUSH
38930: LD_VAR 0 2
38934: PPUSH
38935: CALL_OW 1
38939: ST_TO_ADDR
// end ;
38940: LD_VAR 0 3
38944: RET
// export function JoinUnion ( array , element ) ; begin
38945: LD_INT 0
38947: PPUSH
// result := array union element ;
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_VAR 0 2
38962: UNION
38963: ST_TO_ADDR
// end ;
38964: LD_VAR 0 3
38968: RET
// export function GetBehemoths ( side ) ; begin
38969: LD_INT 0
38971: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38972: LD_ADDR_VAR 0 2
38976: PUSH
38977: LD_INT 22
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 31
38991: PUSH
38992: LD_INT 25
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PPUSH
39003: CALL_OW 69
39007: ST_TO_ADDR
// end ;
39008: LD_VAR 0 2
39012: RET
// export function Shuffle ( array ) ; var i , index ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
// result := [ ] ;
39018: LD_ADDR_VAR 0 2
39022: PUSH
39023: EMPTY
39024: ST_TO_ADDR
// if not array then
39025: LD_VAR 0 1
39029: NOT
39030: IFFALSE 39034
// exit ;
39032: GO 39133
// Randomize ;
39034: CALL_OW 10
// for i = array downto 1 do
39038: LD_ADDR_VAR 0 3
39042: PUSH
39043: DOUBLE
39044: LD_VAR 0 1
39048: INC
39049: ST_TO_ADDR
39050: LD_INT 1
39052: PUSH
39053: FOR_DOWNTO
39054: IFFALSE 39131
// begin index := rand ( 1 , array ) ;
39056: LD_ADDR_VAR 0 4
39060: PUSH
39061: LD_INT 1
39063: PPUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 12
39073: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39074: LD_ADDR_VAR 0 2
39078: PUSH
39079: LD_VAR 0 2
39083: PPUSH
39084: LD_VAR 0 2
39088: PUSH
39089: LD_INT 1
39091: PLUS
39092: PPUSH
39093: LD_VAR 0 1
39097: PUSH
39098: LD_VAR 0 4
39102: ARRAY
39103: PPUSH
39104: CALL_OW 2
39108: ST_TO_ADDR
// array := Delete ( array , index ) ;
39109: LD_ADDR_VAR 0 1
39113: PUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: LD_VAR 0 4
39123: PPUSH
39124: CALL_OW 3
39128: ST_TO_ADDR
// end ;
39129: GO 39053
39131: POP
39132: POP
// end ;
39133: LD_VAR 0 2
39137: RET
// export function GetBaseMaterials ( base ) ; begin
39138: LD_INT 0
39140: PPUSH
// result := [ 0 , 0 , 0 ] ;
39141: LD_ADDR_VAR 0 2
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// if not base then
39160: LD_VAR 0 1
39164: NOT
39165: IFFALSE 39169
// exit ;
39167: GO 39218
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39169: LD_ADDR_VAR 0 2
39173: PUSH
39174: LD_VAR 0 1
39178: PPUSH
39179: LD_INT 1
39181: PPUSH
39182: CALL_OW 275
39186: PUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: LD_INT 2
39194: PPUSH
39195: CALL_OW 275
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: LD_INT 3
39207: PPUSH
39208: CALL_OW 275
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
// end ;
39218: LD_VAR 0 2
39222: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39223: LD_INT 0
39225: PPUSH
39226: PPUSH
// result := array ;
39227: LD_ADDR_VAR 0 3
39231: PUSH
39232: LD_VAR 0 1
39236: ST_TO_ADDR
// if size >= result then
39237: LD_VAR 0 2
39241: PUSH
39242: LD_VAR 0 3
39246: GREATEREQUAL
39247: IFFALSE 39251
// exit ;
39249: GO 39301
// if size then
39251: LD_VAR 0 2
39255: IFFALSE 39301
// for i := array downto size do
39257: LD_ADDR_VAR 0 4
39261: PUSH
39262: DOUBLE
39263: LD_VAR 0 1
39267: INC
39268: ST_TO_ADDR
39269: LD_VAR 0 2
39273: PUSH
39274: FOR_DOWNTO
39275: IFFALSE 39299
// result := Delete ( result , result ) ;
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_VAR 0 3
39286: PPUSH
39287: LD_VAR 0 3
39291: PPUSH
39292: CALL_OW 3
39296: ST_TO_ADDR
39297: GO 39274
39299: POP
39300: POP
// end ;
39301: LD_VAR 0 3
39305: RET
// export function ComExit ( unit ) ; var tmp ; begin
39306: LD_INT 0
39308: PPUSH
39309: PPUSH
// if not IsInUnit ( unit ) then
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 310
39319: NOT
39320: IFFALSE 39324
// exit ;
39322: GO 39384
// tmp := IsInUnit ( unit ) ;
39324: LD_ADDR_VAR 0 3
39328: PUSH
39329: LD_VAR 0 1
39333: PPUSH
39334: CALL_OW 310
39338: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39339: LD_VAR 0 3
39343: PPUSH
39344: CALL_OW 247
39348: PUSH
39349: LD_INT 2
39351: EQUAL
39352: IFFALSE 39365
// ComExitVehicle ( unit ) else
39354: LD_VAR 0 1
39358: PPUSH
39359: CALL_OW 121
39363: GO 39374
// ComExitBuilding ( unit ) ;
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 122
// result := tmp ;
39374: LD_ADDR_VAR 0 2
39378: PUSH
39379: LD_VAR 0 3
39383: ST_TO_ADDR
// end ;
39384: LD_VAR 0 2
39388: RET
// export function ComExitAll ( units ) ; var i ; begin
39389: LD_INT 0
39391: PPUSH
39392: PPUSH
// if not units then
39393: LD_VAR 0 1
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 39428
// for i in units do
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_VAR 0 1
39411: PUSH
39412: FOR_IN
39413: IFFALSE 39426
// ComExit ( i ) ;
39415: LD_VAR 0 3
39419: PPUSH
39420: CALL 39306 0 1
39424: GO 39412
39426: POP
39427: POP
// end ;
39428: LD_VAR 0 2
39432: RET
// export function ResetHc ; begin
39433: LD_INT 0
39435: PPUSH
// InitHc ;
39436: CALL_OW 19
// hc_importance := 0 ;
39440: LD_ADDR_OWVAR 32
39444: PUSH
39445: LD_INT 0
39447: ST_TO_ADDR
// end ;
39448: LD_VAR 0 1
39452: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39453: LD_INT 0
39455: PPUSH
39456: PPUSH
39457: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39458: LD_ADDR_VAR 0 6
39462: PUSH
39463: LD_VAR 0 1
39467: PUSH
39468: LD_VAR 0 3
39472: PLUS
39473: PUSH
39474: LD_INT 2
39476: DIV
39477: ST_TO_ADDR
// if _x < 0 then
39478: LD_VAR 0 6
39482: PUSH
39483: LD_INT 0
39485: LESS
39486: IFFALSE 39503
// _x := _x * - 1 ;
39488: LD_ADDR_VAR 0 6
39492: PUSH
39493: LD_VAR 0 6
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: MUL
39502: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39503: LD_ADDR_VAR 0 7
39507: PUSH
39508: LD_VAR 0 2
39512: PUSH
39513: LD_VAR 0 4
39517: PLUS
39518: PUSH
39519: LD_INT 2
39521: DIV
39522: ST_TO_ADDR
// if _y < 0 then
39523: LD_VAR 0 7
39527: PUSH
39528: LD_INT 0
39530: LESS
39531: IFFALSE 39548
// _y := _y * - 1 ;
39533: LD_ADDR_VAR 0 7
39537: PUSH
39538: LD_VAR 0 7
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: MUL
39547: ST_TO_ADDR
// result := [ _x , _y ] ;
39548: LD_ADDR_VAR 0 5
39552: PUSH
39553: LD_VAR 0 6
39557: PUSH
39558: LD_VAR 0 7
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: ST_TO_ADDR
// end ;
39567: LD_VAR 0 5
39571: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
// task := GetTaskList ( unit ) ;
39578: LD_ADDR_VAR 0 7
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 437
39592: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39593: LD_VAR 0 7
39597: NOT
39598: PUSH
39599: LD_VAR 0 1
39603: PPUSH
39604: LD_VAR 0 2
39608: PPUSH
39609: CALL_OW 308
39613: NOT
39614: AND
39615: IFFALSE 39619
// exit ;
39617: GO 39737
// if IsInArea ( unit , area ) then
39619: LD_VAR 0 1
39623: PPUSH
39624: LD_VAR 0 2
39628: PPUSH
39629: CALL_OW 308
39633: IFFALSE 39651
// begin ComMoveToArea ( unit , goAway ) ;
39635: LD_VAR 0 1
39639: PPUSH
39640: LD_VAR 0 3
39644: PPUSH
39645: CALL_OW 113
// exit ;
39649: GO 39737
// end ; if task [ 1 ] [ 1 ] <> M then
39651: LD_VAR 0 7
39655: PUSH
39656: LD_INT 1
39658: ARRAY
39659: PUSH
39660: LD_INT 1
39662: ARRAY
39663: PUSH
39664: LD_STRING M
39666: NONEQUAL
39667: IFFALSE 39671
// exit ;
39669: GO 39737
// x := task [ 1 ] [ 2 ] ;
39671: LD_ADDR_VAR 0 5
39675: PUSH
39676: LD_VAR 0 7
39680: PUSH
39681: LD_INT 1
39683: ARRAY
39684: PUSH
39685: LD_INT 2
39687: ARRAY
39688: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39689: LD_ADDR_VAR 0 6
39693: PUSH
39694: LD_VAR 0 7
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: PUSH
39703: LD_INT 3
39705: ARRAY
39706: ST_TO_ADDR
// if InArea ( x , y , area ) then
39707: LD_VAR 0 5
39711: PPUSH
39712: LD_VAR 0 6
39716: PPUSH
39717: LD_VAR 0 2
39721: PPUSH
39722: CALL_OW 309
39726: IFFALSE 39737
// ComStop ( unit ) ;
39728: LD_VAR 0 1
39732: PPUSH
39733: CALL_OW 141
// end ;
39737: LD_VAR 0 4
39741: RET
// export function Abs ( value ) ; begin
39742: LD_INT 0
39744: PPUSH
// result := value ;
39745: LD_ADDR_VAR 0 2
39749: PUSH
39750: LD_VAR 0 1
39754: ST_TO_ADDR
// if value < 0 then
39755: LD_VAR 0 1
39759: PUSH
39760: LD_INT 0
39762: LESS
39763: IFFALSE 39780
// result := value * - 1 ;
39765: LD_ADDR_VAR 0 2
39769: PUSH
39770: LD_VAR 0 1
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: MUL
39779: ST_TO_ADDR
// end ;
39780: LD_VAR 0 2
39784: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
// if not unit or not building then
39795: LD_VAR 0 1
39799: NOT
39800: PUSH
39801: LD_VAR 0 2
39805: NOT
39806: OR
39807: IFFALSE 39811
// exit ;
39809: GO 40037
// x := GetX ( building ) ;
39811: LD_ADDR_VAR 0 4
39815: PUSH
39816: LD_VAR 0 2
39820: PPUSH
39821: CALL_OW 250
39825: ST_TO_ADDR
// y := GetY ( building ) ;
39826: LD_ADDR_VAR 0 6
39830: PUSH
39831: LD_VAR 0 2
39835: PPUSH
39836: CALL_OW 251
39840: ST_TO_ADDR
// d := GetDir ( building ) ;
39841: LD_ADDR_VAR 0 8
39845: PUSH
39846: LD_VAR 0 2
39850: PPUSH
39851: CALL_OW 254
39855: ST_TO_ADDR
// r := 4 ;
39856: LD_ADDR_VAR 0 9
39860: PUSH
39861: LD_INT 4
39863: ST_TO_ADDR
// for i := 1 to 5 do
39864: LD_ADDR_VAR 0 10
39868: PUSH
39869: DOUBLE
39870: LD_INT 1
39872: DEC
39873: ST_TO_ADDR
39874: LD_INT 5
39876: PUSH
39877: FOR_TO
39878: IFFALSE 40035
// begin _x := ShiftX ( x , d , r + i ) ;
39880: LD_ADDR_VAR 0 5
39884: PUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: LD_VAR 0 8
39894: PPUSH
39895: LD_VAR 0 9
39899: PUSH
39900: LD_VAR 0 10
39904: PLUS
39905: PPUSH
39906: CALL_OW 272
39910: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39911: LD_ADDR_VAR 0 7
39915: PUSH
39916: LD_VAR 0 6
39920: PPUSH
39921: LD_VAR 0 8
39925: PPUSH
39926: LD_VAR 0 9
39930: PUSH
39931: LD_VAR 0 10
39935: PLUS
39936: PPUSH
39937: CALL_OW 273
39941: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39942: LD_VAR 0 5
39946: PPUSH
39947: LD_VAR 0 7
39951: PPUSH
39952: CALL_OW 488
39956: PUSH
39957: LD_VAR 0 5
39961: PPUSH
39962: LD_VAR 0 7
39966: PPUSH
39967: CALL_OW 428
39971: PPUSH
39972: CALL_OW 247
39976: PUSH
39977: LD_INT 3
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: IN
39987: NOT
39988: AND
39989: IFFALSE 40033
// begin ComMoveXY ( unit , _x , _y ) ;
39991: LD_VAR 0 1
39995: PPUSH
39996: LD_VAR 0 5
40000: PPUSH
40001: LD_VAR 0 7
40005: PPUSH
40006: CALL_OW 111
// result := [ _x , _y ] ;
40010: LD_ADDR_VAR 0 3
40014: PUSH
40015: LD_VAR 0 5
40019: PUSH
40020: LD_VAR 0 7
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: ST_TO_ADDR
// exit ;
40029: POP
40030: POP
40031: GO 40037
// end ; end ;
40033: GO 39877
40035: POP
40036: POP
// end ;
40037: LD_VAR 0 3
40041: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40042: LD_INT 0
40044: PPUSH
40045: PPUSH
40046: PPUSH
// result := 0 ;
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_INT 0
40054: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40055: LD_VAR 0 1
40059: PUSH
40060: LD_INT 0
40062: LESS
40063: PUSH
40064: LD_VAR 0 1
40068: PUSH
40069: LD_INT 8
40071: GREATER
40072: OR
40073: PUSH
40074: LD_VAR 0 2
40078: PUSH
40079: LD_INT 0
40081: LESS
40082: OR
40083: PUSH
40084: LD_VAR 0 2
40088: PUSH
40089: LD_INT 8
40091: GREATER
40092: OR
40093: IFFALSE 40097
// exit ;
40095: GO 40172
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40097: LD_ADDR_VAR 0 4
40101: PUSH
40102: LD_INT 22
40104: PUSH
40105: LD_VAR 0 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 69
40118: PUSH
40119: FOR_IN
40120: IFFALSE 40170
// begin un := UnitShoot ( i ) ;
40122: LD_ADDR_VAR 0 5
40126: PUSH
40127: LD_VAR 0 4
40131: PPUSH
40132: CALL_OW 504
40136: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40137: LD_VAR 0 5
40141: PPUSH
40142: CALL_OW 255
40146: PUSH
40147: LD_VAR 0 1
40151: EQUAL
40152: IFFALSE 40168
// begin result := un ;
40154: LD_ADDR_VAR 0 3
40158: PUSH
40159: LD_VAR 0 5
40163: ST_TO_ADDR
// exit ;
40164: POP
40165: POP
40166: GO 40172
// end ; end ;
40168: GO 40119
40170: POP
40171: POP
// end ;
40172: LD_VAR 0 3
40176: RET
// export function GetCargoBay ( units ) ; begin
40177: LD_INT 0
40179: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40180: LD_ADDR_VAR 0 2
40184: PUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: LD_INT 2
40192: PUSH
40193: LD_INT 34
40195: PUSH
40196: LD_INT 12
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 34
40205: PUSH
40206: LD_INT 51
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 34
40215: PUSH
40216: LD_INT 32
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 34
40225: PUSH
40226: LD_INT 89
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: PPUSH
40240: CALL_OW 72
40244: ST_TO_ADDR
// end ;
40245: LD_VAR 0 2
40249: RET
// export function Negate ( value ) ; begin
40250: LD_INT 0
40252: PPUSH
// result := not value ;
40253: LD_ADDR_VAR 0 2
40257: PUSH
40258: LD_VAR 0 1
40262: NOT
40263: ST_TO_ADDR
// end ;
40264: LD_VAR 0 2
40268: RET
// export function Inc ( value ) ; begin
40269: LD_INT 0
40271: PPUSH
// result := value + 1 ;
40272: LD_ADDR_VAR 0 2
40276: PUSH
40277: LD_VAR 0 1
40281: PUSH
40282: LD_INT 1
40284: PLUS
40285: ST_TO_ADDR
// end ;
40286: LD_VAR 0 2
40290: RET
// export function Dec ( value ) ; begin
40291: LD_INT 0
40293: PPUSH
// result := value - 1 ;
40294: LD_ADDR_VAR 0 2
40298: PUSH
40299: LD_VAR 0 1
40303: PUSH
40304: LD_INT 1
40306: MINUS
40307: ST_TO_ADDR
// end ;
40308: LD_VAR 0 2
40312: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40313: LD_INT 0
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40323: LD_VAR 0 1
40327: PPUSH
40328: LD_VAR 0 2
40332: PPUSH
40333: CALL_OW 488
40337: NOT
40338: PUSH
40339: LD_VAR 0 3
40343: PPUSH
40344: LD_VAR 0 4
40348: PPUSH
40349: CALL_OW 488
40353: NOT
40354: OR
40355: IFFALSE 40368
// begin result := - 1 ;
40357: LD_ADDR_VAR 0 5
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: ST_TO_ADDR
// exit ;
40366: GO 40603
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40368: LD_ADDR_VAR 0 12
40372: PUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: LD_VAR 0 2
40382: PPUSH
40383: LD_VAR 0 3
40387: PPUSH
40388: LD_VAR 0 4
40392: PPUSH
40393: CALL 39453 0 4
40397: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40398: LD_ADDR_VAR 0 11
40402: PUSH
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 2
40412: PPUSH
40413: LD_VAR 0 12
40417: PUSH
40418: LD_INT 1
40420: ARRAY
40421: PPUSH
40422: LD_VAR 0 12
40426: PUSH
40427: LD_INT 2
40429: ARRAY
40430: PPUSH
40431: CALL_OW 298
40435: ST_TO_ADDR
// distance := 9999 ;
40436: LD_ADDR_VAR 0 10
40440: PUSH
40441: LD_INT 9999
40443: ST_TO_ADDR
// for i := 0 to 5 do
40444: LD_ADDR_VAR 0 6
40448: PUSH
40449: DOUBLE
40450: LD_INT 0
40452: DEC
40453: ST_TO_ADDR
40454: LD_INT 5
40456: PUSH
40457: FOR_TO
40458: IFFALSE 40601
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40460: LD_ADDR_VAR 0 7
40464: PUSH
40465: LD_VAR 0 1
40469: PPUSH
40470: LD_VAR 0 6
40474: PPUSH
40475: LD_VAR 0 11
40479: PPUSH
40480: CALL_OW 272
40484: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40485: LD_ADDR_VAR 0 8
40489: PUSH
40490: LD_VAR 0 2
40494: PPUSH
40495: LD_VAR 0 6
40499: PPUSH
40500: LD_VAR 0 11
40504: PPUSH
40505: CALL_OW 273
40509: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40510: LD_VAR 0 7
40514: PPUSH
40515: LD_VAR 0 8
40519: PPUSH
40520: CALL_OW 488
40524: NOT
40525: IFFALSE 40529
// continue ;
40527: GO 40457
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40529: LD_ADDR_VAR 0 9
40533: PUSH
40534: LD_VAR 0 12
40538: PUSH
40539: LD_INT 1
40541: ARRAY
40542: PPUSH
40543: LD_VAR 0 12
40547: PUSH
40548: LD_INT 2
40550: ARRAY
40551: PPUSH
40552: LD_VAR 0 7
40556: PPUSH
40557: LD_VAR 0 8
40561: PPUSH
40562: CALL_OW 298
40566: ST_TO_ADDR
// if tmp < distance then
40567: LD_VAR 0 9
40571: PUSH
40572: LD_VAR 0 10
40576: LESS
40577: IFFALSE 40599
// begin result := i ;
40579: LD_ADDR_VAR 0 5
40583: PUSH
40584: LD_VAR 0 6
40588: ST_TO_ADDR
// distance := tmp ;
40589: LD_ADDR_VAR 0 10
40593: PUSH
40594: LD_VAR 0 9
40598: ST_TO_ADDR
// end ; end ;
40599: GO 40457
40601: POP
40602: POP
// end ;
40603: LD_VAR 0 5
40607: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40608: LD_INT 0
40610: PPUSH
40611: PPUSH
// if not driver or not IsInUnit ( driver ) then
40612: LD_VAR 0 1
40616: NOT
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 310
40627: NOT
40628: OR
40629: IFFALSE 40633
// exit ;
40631: GO 40723
// vehicle := IsInUnit ( driver ) ;
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 310
40647: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40648: LD_VAR 0 1
40652: PPUSH
40653: LD_STRING \
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: PUSH
40683: LD_STRING E
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_VAR 0 3
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PPUSH
40719: CALL_OW 446
// end ;
40723: LD_VAR 0 2
40727: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40728: LD_INT 0
40730: PPUSH
40731: PPUSH
// if not driver or not IsInUnit ( driver ) then
40732: LD_VAR 0 1
40736: NOT
40737: PUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 310
40747: NOT
40748: OR
40749: IFFALSE 40753
// exit ;
40751: GO 40843
// vehicle := IsInUnit ( driver ) ;
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: CALL_OW 310
40767: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40768: LD_VAR 0 1
40772: PPUSH
40773: LD_STRING \
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: PUSH
40803: LD_STRING E
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_VAR 0 3
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PPUSH
40839: CALL_OW 447
// end ;
40843: LD_VAR 0 2
40847: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
40852: PPUSH
// tmp := [ ] ;
40853: LD_ADDR_VAR 0 5
40857: PUSH
40858: EMPTY
40859: ST_TO_ADDR
// for i in units do
40860: LD_ADDR_VAR 0 4
40864: PUSH
40865: LD_VAR 0 1
40869: PUSH
40870: FOR_IN
40871: IFFALSE 40909
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: LD_VAR 0 5
40882: PPUSH
40883: LD_VAR 0 5
40887: PUSH
40888: LD_INT 1
40890: PLUS
40891: PPUSH
40892: LD_VAR 0 4
40896: PPUSH
40897: CALL_OW 256
40901: PPUSH
40902: CALL_OW 2
40906: ST_TO_ADDR
40907: GO 40870
40909: POP
40910: POP
// if not tmp then
40911: LD_VAR 0 5
40915: NOT
40916: IFFALSE 40920
// exit ;
40918: GO 40968
// if asc then
40920: LD_VAR 0 2
40924: IFFALSE 40948
// result := SortListByListAsc ( units , tmp ) else
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: LD_VAR 0 5
40940: PPUSH
40941: CALL_OW 76
40945: ST_TO_ADDR
40946: GO 40968
// result := SortListByListDesc ( units , tmp ) ;
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: LD_VAR 0 5
40962: PPUSH
40963: CALL_OW 77
40967: ST_TO_ADDR
// end ;
40968: LD_VAR 0 3
40972: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40973: LD_INT 0
40975: PPUSH
40976: PPUSH
// task := GetTaskList ( mech ) ;
40977: LD_ADDR_VAR 0 4
40981: PUSH
40982: LD_VAR 0 1
40986: PPUSH
40987: CALL_OW 437
40991: ST_TO_ADDR
// if not task then
40992: LD_VAR 0 4
40996: NOT
40997: IFFALSE 41001
// exit ;
40999: GO 41043
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41001: LD_ADDR_VAR 0 3
41005: PUSH
41006: LD_VAR 0 4
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PUSH
41015: LD_INT 1
41017: ARRAY
41018: PUSH
41019: LD_STRING r
41021: EQUAL
41022: PUSH
41023: LD_VAR 0 4
41027: PUSH
41028: LD_INT 1
41030: ARRAY
41031: PUSH
41032: LD_INT 4
41034: ARRAY
41035: PUSH
41036: LD_VAR 0 2
41040: EQUAL
41041: AND
41042: ST_TO_ADDR
// end ;
41043: LD_VAR 0 3
41047: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41048: LD_INT 0
41050: PPUSH
// SetDir ( unit , d ) ;
41051: LD_VAR 0 1
41055: PPUSH
41056: LD_VAR 0 4
41060: PPUSH
41061: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 2
41074: PPUSH
41075: LD_VAR 0 3
41079: PPUSH
41080: LD_VAR 0 5
41084: PPUSH
41085: CALL_OW 48
// end ;
41089: LD_VAR 0 6
41093: RET
// export function ToNaturalNumber ( number ) ; begin
41094: LD_INT 0
41096: PPUSH
// result := number div 1 ;
41097: LD_ADDR_VAR 0 2
41101: PUSH
41102: LD_VAR 0 1
41106: PUSH
41107: LD_INT 1
41109: DIV
41110: ST_TO_ADDR
// if number < 0 then
41111: LD_VAR 0 1
41115: PUSH
41116: LD_INT 0
41118: LESS
41119: IFFALSE 41129
// result := 0 ;
41121: LD_ADDR_VAR 0 2
41125: PUSH
41126: LD_INT 0
41128: ST_TO_ADDR
// end ;
41129: LD_VAR 0 2
41133: RET
// export function SortByClass ( units , class ) ; var un ; begin
41134: LD_INT 0
41136: PPUSH
41137: PPUSH
// if not units or not class then
41138: LD_VAR 0 1
41142: NOT
41143: PUSH
41144: LD_VAR 0 2
41148: NOT
41149: OR
41150: IFFALSE 41154
// exit ;
41152: GO 41249
// result := [ ] ;
41154: LD_ADDR_VAR 0 3
41158: PUSH
41159: EMPTY
41160: ST_TO_ADDR
// for un in units do
41161: LD_ADDR_VAR 0 4
41165: PUSH
41166: LD_VAR 0 1
41170: PUSH
41171: FOR_IN
41172: IFFALSE 41247
// if GetClass ( un ) = class then
41174: LD_VAR 0 4
41178: PPUSH
41179: CALL_OW 257
41183: PUSH
41184: LD_VAR 0 2
41188: EQUAL
41189: IFFALSE 41216
// result := Insert ( result , 1 , un ) else
41191: LD_ADDR_VAR 0 3
41195: PUSH
41196: LD_VAR 0 3
41200: PPUSH
41201: LD_INT 1
41203: PPUSH
41204: LD_VAR 0 4
41208: PPUSH
41209: CALL_OW 2
41213: ST_TO_ADDR
41214: GO 41245
// result := Replace ( result , result + 1 , un ) ;
41216: LD_ADDR_VAR 0 3
41220: PUSH
41221: LD_VAR 0 3
41225: PPUSH
41226: LD_VAR 0 3
41230: PUSH
41231: LD_INT 1
41233: PLUS
41234: PPUSH
41235: LD_VAR 0 4
41239: PPUSH
41240: CALL_OW 1
41244: ST_TO_ADDR
41245: GO 41171
41247: POP
41248: POP
// end ;
41249: LD_VAR 0 3
41253: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41254: LD_INT 0
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
// result := [ ] ;
41263: LD_ADDR_VAR 0 4
41267: PUSH
41268: EMPTY
41269: ST_TO_ADDR
// if x - r < 0 then
41270: LD_VAR 0 1
41274: PUSH
41275: LD_VAR 0 3
41279: MINUS
41280: PUSH
41281: LD_INT 0
41283: LESS
41284: IFFALSE 41296
// min_x := 0 else
41286: LD_ADDR_VAR 0 8
41290: PUSH
41291: LD_INT 0
41293: ST_TO_ADDR
41294: GO 41312
// min_x := x - r ;
41296: LD_ADDR_VAR 0 8
41300: PUSH
41301: LD_VAR 0 1
41305: PUSH
41306: LD_VAR 0 3
41310: MINUS
41311: ST_TO_ADDR
// if y - r < 0 then
41312: LD_VAR 0 2
41316: PUSH
41317: LD_VAR 0 3
41321: MINUS
41322: PUSH
41323: LD_INT 0
41325: LESS
41326: IFFALSE 41338
// min_y := 0 else
41328: LD_ADDR_VAR 0 7
41332: PUSH
41333: LD_INT 0
41335: ST_TO_ADDR
41336: GO 41354
// min_y := y - r ;
41338: LD_ADDR_VAR 0 7
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_VAR 0 3
41352: MINUS
41353: ST_TO_ADDR
// max_x := x + r ;
41354: LD_ADDR_VAR 0 9
41358: PUSH
41359: LD_VAR 0 1
41363: PUSH
41364: LD_VAR 0 3
41368: PLUS
41369: ST_TO_ADDR
// max_y := y + r ;
41370: LD_ADDR_VAR 0 10
41374: PUSH
41375: LD_VAR 0 2
41379: PUSH
41380: LD_VAR 0 3
41384: PLUS
41385: ST_TO_ADDR
// for _x = min_x to max_x do
41386: LD_ADDR_VAR 0 5
41390: PUSH
41391: DOUBLE
41392: LD_VAR 0 8
41396: DEC
41397: ST_TO_ADDR
41398: LD_VAR 0 9
41402: PUSH
41403: FOR_TO
41404: IFFALSE 41505
// for _y = min_y to max_y do
41406: LD_ADDR_VAR 0 6
41410: PUSH
41411: DOUBLE
41412: LD_VAR 0 7
41416: DEC
41417: ST_TO_ADDR
41418: LD_VAR 0 10
41422: PUSH
41423: FOR_TO
41424: IFFALSE 41501
// begin if not ValidHex ( _x , _y ) then
41426: LD_VAR 0 5
41430: PPUSH
41431: LD_VAR 0 6
41435: PPUSH
41436: CALL_OW 488
41440: NOT
41441: IFFALSE 41445
// continue ;
41443: GO 41423
// if GetResourceTypeXY ( _x , _y ) then
41445: LD_VAR 0 5
41449: PPUSH
41450: LD_VAR 0 6
41454: PPUSH
41455: CALL_OW 283
41459: IFFALSE 41499
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41461: LD_ADDR_VAR 0 4
41465: PUSH
41466: LD_VAR 0 4
41470: PPUSH
41471: LD_VAR 0 4
41475: PUSH
41476: LD_INT 1
41478: PLUS
41479: PPUSH
41480: LD_VAR 0 5
41484: PUSH
41485: LD_VAR 0 6
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PPUSH
41494: CALL_OW 1
41498: ST_TO_ADDR
// end ;
41499: GO 41423
41501: POP
41502: POP
41503: GO 41403
41505: POP
41506: POP
// end ;
41507: LD_VAR 0 4
41511: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41512: LD_INT 0
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
// if not units then
41522: LD_VAR 0 1
41526: NOT
41527: IFFALSE 41531
// exit ;
41529: GO 42055
// result := UnitFilter ( units , [ f_ok ] ) ;
41531: LD_ADDR_VAR 0 3
41535: PUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: LD_INT 50
41543: PUSH
41544: EMPTY
41545: LIST
41546: PPUSH
41547: CALL_OW 72
41551: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41552: LD_ADDR_VAR 0 8
41556: PUSH
41557: LD_VAR 0 1
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: PPUSH
41566: CALL_OW 255
41570: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41571: LD_ADDR_VAR 0 10
41575: PUSH
41576: LD_INT 29
41578: PUSH
41579: LD_INT 91
41581: PUSH
41582: LD_INT 49
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: ST_TO_ADDR
// if not result then
41590: LD_VAR 0 3
41594: NOT
41595: IFFALSE 41599
// exit ;
41597: GO 42055
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41599: LD_ADDR_VAR 0 5
41603: PUSH
41604: LD_INT 81
41606: PUSH
41607: LD_VAR 0 8
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PPUSH
41616: CALL_OW 69
41620: ST_TO_ADDR
// for i in result do
41621: LD_ADDR_VAR 0 4
41625: PUSH
41626: LD_VAR 0 3
41630: PUSH
41631: FOR_IN
41632: IFFALSE 42053
// begin tag := GetTag ( i ) + 1 ;
41634: LD_ADDR_VAR 0 9
41638: PUSH
41639: LD_VAR 0 4
41643: PPUSH
41644: CALL_OW 110
41648: PUSH
41649: LD_INT 1
41651: PLUS
41652: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: LD_VAR 0 4
41662: PPUSH
41663: CALL_OW 250
41667: PPUSH
41668: LD_VAR 0 4
41672: PPUSH
41673: CALL_OW 251
41677: PPUSH
41678: LD_INT 6
41680: PPUSH
41681: CALL 41254 0 3
41685: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41686: LD_VAR 0 4
41690: PPUSH
41691: CALL_OW 247
41695: PUSH
41696: LD_INT 2
41698: EQUAL
41699: PUSH
41700: LD_VAR 0 7
41704: AND
41705: PUSH
41706: LD_VAR 0 4
41710: PPUSH
41711: CALL_OW 264
41715: PUSH
41716: LD_VAR 0 10
41720: IN
41721: NOT
41722: AND
41723: IFFALSE 41762
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41725: LD_VAR 0 4
41729: PPUSH
41730: LD_VAR 0 7
41734: PUSH
41735: LD_INT 1
41737: ARRAY
41738: PUSH
41739: LD_INT 1
41741: ARRAY
41742: PPUSH
41743: LD_VAR 0 7
41747: PUSH
41748: LD_INT 1
41750: ARRAY
41751: PUSH
41752: LD_INT 2
41754: ARRAY
41755: PPUSH
41756: CALL_OW 116
41760: GO 42051
// if path > tag then
41762: LD_VAR 0 2
41766: PUSH
41767: LD_VAR 0 9
41771: GREATER
41772: IFFALSE 41980
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41774: LD_ADDR_VAR 0 6
41778: PUSH
41779: LD_VAR 0 5
41783: PPUSH
41784: LD_INT 91
41786: PUSH
41787: LD_VAR 0 4
41791: PUSH
41792: LD_INT 8
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: PPUSH
41800: CALL_OW 72
41804: ST_TO_ADDR
// if nearEnemy then
41805: LD_VAR 0 6
41809: IFFALSE 41878
// begin if GetWeapon ( i ) = ru_time_lapser then
41811: LD_VAR 0 4
41815: PPUSH
41816: CALL_OW 264
41820: PUSH
41821: LD_INT 49
41823: EQUAL
41824: IFFALSE 41852
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41826: LD_VAR 0 4
41830: PPUSH
41831: LD_VAR 0 6
41835: PPUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: CALL_OW 74
41845: PPUSH
41846: CALL_OW 112
41850: GO 41876
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41852: LD_VAR 0 4
41856: PPUSH
41857: LD_VAR 0 6
41861: PPUSH
41862: LD_VAR 0 4
41866: PPUSH
41867: CALL_OW 74
41871: PPUSH
41872: CALL 42980 0 2
// end else
41876: GO 41978
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41878: LD_VAR 0 4
41882: PPUSH
41883: LD_VAR 0 2
41887: PUSH
41888: LD_VAR 0 9
41892: ARRAY
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: LD_VAR 0 2
41902: PUSH
41903: LD_VAR 0 9
41907: ARRAY
41908: PUSH
41909: LD_INT 2
41911: ARRAY
41912: PPUSH
41913: CALL_OW 297
41917: PUSH
41918: LD_INT 6
41920: GREATER
41921: IFFALSE 41964
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41923: LD_VAR 0 4
41927: PPUSH
41928: LD_VAR 0 2
41932: PUSH
41933: LD_VAR 0 9
41937: ARRAY
41938: PUSH
41939: LD_INT 1
41941: ARRAY
41942: PPUSH
41943: LD_VAR 0 2
41947: PUSH
41948: LD_VAR 0 9
41952: ARRAY
41953: PUSH
41954: LD_INT 2
41956: ARRAY
41957: PPUSH
41958: CALL_OW 114
41962: GO 41978
// SetTag ( i , tag ) ;
41964: LD_VAR 0 4
41968: PPUSH
41969: LD_VAR 0 9
41973: PPUSH
41974: CALL_OW 109
// end else
41978: GO 42051
// if enemy then
41980: LD_VAR 0 5
41984: IFFALSE 42051
// begin if GetWeapon ( i ) = ru_time_lapser then
41986: LD_VAR 0 4
41990: PPUSH
41991: CALL_OW 264
41995: PUSH
41996: LD_INT 49
41998: EQUAL
41999: IFFALSE 42027
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42001: LD_VAR 0 4
42005: PPUSH
42006: LD_VAR 0 5
42010: PPUSH
42011: LD_VAR 0 4
42015: PPUSH
42016: CALL_OW 74
42020: PPUSH
42021: CALL_OW 112
42025: GO 42051
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42027: LD_VAR 0 4
42031: PPUSH
42032: LD_VAR 0 5
42036: PPUSH
42037: LD_VAR 0 4
42041: PPUSH
42042: CALL_OW 74
42046: PPUSH
42047: CALL 42980 0 2
// end ; end ;
42051: GO 41631
42053: POP
42054: POP
// end ;
42055: LD_VAR 0 3
42059: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42060: LD_INT 0
42062: PPUSH
42063: PPUSH
42064: PPUSH
// if not unit or IsInUnit ( unit ) then
42065: LD_VAR 0 1
42069: NOT
42070: PUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 310
42080: OR
42081: IFFALSE 42085
// exit ;
42083: GO 42176
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42085: LD_ADDR_VAR 0 4
42089: PUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL_OW 250
42099: PPUSH
42100: LD_VAR 0 2
42104: PPUSH
42105: LD_INT 1
42107: PPUSH
42108: CALL_OW 272
42112: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42113: LD_ADDR_VAR 0 5
42117: PUSH
42118: LD_VAR 0 1
42122: PPUSH
42123: CALL_OW 251
42127: PPUSH
42128: LD_VAR 0 2
42132: PPUSH
42133: LD_INT 1
42135: PPUSH
42136: CALL_OW 273
42140: ST_TO_ADDR
// if ValidHex ( x , y ) then
42141: LD_VAR 0 4
42145: PPUSH
42146: LD_VAR 0 5
42150: PPUSH
42151: CALL_OW 488
42155: IFFALSE 42176
// ComTurnXY ( unit , x , y ) ;
42157: LD_VAR 0 1
42161: PPUSH
42162: LD_VAR 0 4
42166: PPUSH
42167: LD_VAR 0 5
42171: PPUSH
42172: CALL_OW 118
// end ;
42176: LD_VAR 0 3
42180: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42181: LD_INT 0
42183: PPUSH
42184: PPUSH
// result := false ;
42185: LD_ADDR_VAR 0 3
42189: PUSH
42190: LD_INT 0
42192: ST_TO_ADDR
// if not units then
42193: LD_VAR 0 2
42197: NOT
42198: IFFALSE 42202
// exit ;
42200: GO 42247
// for i in units do
42202: LD_ADDR_VAR 0 4
42206: PUSH
42207: LD_VAR 0 2
42211: PUSH
42212: FOR_IN
42213: IFFALSE 42245
// if See ( side , i ) then
42215: LD_VAR 0 1
42219: PPUSH
42220: LD_VAR 0 4
42224: PPUSH
42225: CALL_OW 292
42229: IFFALSE 42243
// begin result := true ;
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 1
42238: ST_TO_ADDR
// exit ;
42239: POP
42240: POP
42241: GO 42247
// end ;
42243: GO 42212
42245: POP
42246: POP
// end ;
42247: LD_VAR 0 3
42251: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42252: LD_INT 0
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
// if not unit or not points then
42258: LD_VAR 0 1
42262: NOT
42263: PUSH
42264: LD_VAR 0 2
42268: NOT
42269: OR
42270: IFFALSE 42274
// exit ;
42272: GO 42364
// dist := 99999 ;
42274: LD_ADDR_VAR 0 5
42278: PUSH
42279: LD_INT 99999
42281: ST_TO_ADDR
// for i in points do
42282: LD_ADDR_VAR 0 4
42286: PUSH
42287: LD_VAR 0 2
42291: PUSH
42292: FOR_IN
42293: IFFALSE 42362
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42295: LD_ADDR_VAR 0 6
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: LD_VAR 0 4
42309: PUSH
42310: LD_INT 1
42312: ARRAY
42313: PPUSH
42314: LD_VAR 0 4
42318: PUSH
42319: LD_INT 2
42321: ARRAY
42322: PPUSH
42323: CALL_OW 297
42327: ST_TO_ADDR
// if tmpDist < dist then
42328: LD_VAR 0 6
42332: PUSH
42333: LD_VAR 0 5
42337: LESS
42338: IFFALSE 42360
// begin result := i ;
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_VAR 0 4
42349: ST_TO_ADDR
// dist := tmpDist ;
42350: LD_ADDR_VAR 0 5
42354: PUSH
42355: LD_VAR 0 6
42359: ST_TO_ADDR
// end ; end ;
42360: GO 42292
42362: POP
42363: POP
// end ;
42364: LD_VAR 0 3
42368: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42369: LD_INT 0
42371: PPUSH
// uc_side := side ;
42372: LD_ADDR_OWVAR 20
42376: PUSH
42377: LD_VAR 0 1
42381: ST_TO_ADDR
// uc_nation := 3 ;
42382: LD_ADDR_OWVAR 21
42386: PUSH
42387: LD_INT 3
42389: ST_TO_ADDR
// vc_chassis := 25 ;
42390: LD_ADDR_OWVAR 37
42394: PUSH
42395: LD_INT 25
42397: ST_TO_ADDR
// vc_engine := engine_siberite ;
42398: LD_ADDR_OWVAR 39
42402: PUSH
42403: LD_INT 3
42405: ST_TO_ADDR
// vc_control := control_computer ;
42406: LD_ADDR_OWVAR 38
42410: PUSH
42411: LD_INT 3
42413: ST_TO_ADDR
// vc_weapon := 59 ;
42414: LD_ADDR_OWVAR 40
42418: PUSH
42419: LD_INT 59
42421: ST_TO_ADDR
// result := CreateVehicle ;
42422: LD_ADDR_VAR 0 5
42426: PUSH
42427: CALL_OW 45
42431: ST_TO_ADDR
// SetDir ( result , d ) ;
42432: LD_VAR 0 5
42436: PPUSH
42437: LD_VAR 0 4
42441: PPUSH
42442: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42446: LD_VAR 0 5
42450: PPUSH
42451: LD_VAR 0 2
42455: PPUSH
42456: LD_VAR 0 3
42460: PPUSH
42461: LD_INT 0
42463: PPUSH
42464: CALL_OW 48
// end ;
42468: LD_VAR 0 5
42472: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
42477: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42478: LD_ADDR_VAR 0 2
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42501: LD_VAR 0 1
42505: NOT
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 264
42516: PUSH
42517: LD_INT 12
42519: PUSH
42520: LD_INT 51
42522: PUSH
42523: LD_INT 32
42525: PUSH
42526: LD_INT 89
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: IN
42535: NOT
42536: OR
42537: IFFALSE 42541
// exit ;
42539: GO 42639
// for i := 1 to 3 do
42541: LD_ADDR_VAR 0 3
42545: PUSH
42546: DOUBLE
42547: LD_INT 1
42549: DEC
42550: ST_TO_ADDR
42551: LD_INT 3
42553: PUSH
42554: FOR_TO
42555: IFFALSE 42637
// begin tmp := GetCargo ( cargo , i ) ;
42557: LD_ADDR_VAR 0 4
42561: PUSH
42562: LD_VAR 0 1
42566: PPUSH
42567: LD_VAR 0 3
42571: PPUSH
42572: CALL_OW 289
42576: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42577: LD_ADDR_VAR 0 2
42581: PUSH
42582: LD_VAR 0 2
42586: PPUSH
42587: LD_VAR 0 3
42591: PPUSH
42592: LD_VAR 0 4
42596: PPUSH
42597: CALL_OW 1
42601: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42602: LD_ADDR_VAR 0 2
42606: PUSH
42607: LD_VAR 0 2
42611: PPUSH
42612: LD_INT 4
42614: PPUSH
42615: LD_VAR 0 2
42619: PUSH
42620: LD_INT 4
42622: ARRAY
42623: PUSH
42624: LD_VAR 0 4
42628: PLUS
42629: PPUSH
42630: CALL_OW 1
42634: ST_TO_ADDR
// end ;
42635: GO 42554
42637: POP
42638: POP
// end ;
42639: LD_VAR 0 2
42643: RET
// export function Length ( array ) ; begin
42644: LD_INT 0
42646: PPUSH
// result := array + 0 ;
42647: LD_ADDR_VAR 0 2
42651: PUSH
42652: LD_VAR 0 1
42656: PUSH
42657: LD_INT 0
42659: PLUS
42660: ST_TO_ADDR
// end ;
42661: LD_VAR 0 2
42665: RET
// export function PrepareArray ( array ) ; begin
42666: LD_INT 0
42668: PPUSH
// result := array diff 0 ;
42669: LD_ADDR_VAR 0 2
42673: PUSH
42674: LD_VAR 0 1
42678: PUSH
42679: LD_INT 0
42681: DIFF
42682: ST_TO_ADDR
// if not result [ 1 ] then
42683: LD_VAR 0 2
42687: PUSH
42688: LD_INT 1
42690: ARRAY
42691: NOT
42692: IFFALSE 42712
// result := Delete ( result , 1 ) ;
42694: LD_ADDR_VAR 0 2
42698: PUSH
42699: LD_VAR 0 2
42703: PPUSH
42704: LD_INT 1
42706: PPUSH
42707: CALL_OW 3
42711: ST_TO_ADDR
// end ;
42712: LD_VAR 0 2
42716: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42717: LD_INT 0
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
// sibRocketRange := 25 ;
42723: LD_ADDR_VAR 0 6
42727: PUSH
42728: LD_INT 25
42730: ST_TO_ADDR
// result := false ;
42731: LD_ADDR_VAR 0 4
42735: PUSH
42736: LD_INT 0
42738: ST_TO_ADDR
// for i := 0 to 5 do
42739: LD_ADDR_VAR 0 5
42743: PUSH
42744: DOUBLE
42745: LD_INT 0
42747: DEC
42748: ST_TO_ADDR
42749: LD_INT 5
42751: PUSH
42752: FOR_TO
42753: IFFALSE 42820
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42755: LD_VAR 0 1
42759: PPUSH
42760: LD_VAR 0 5
42764: PPUSH
42765: LD_VAR 0 6
42769: PPUSH
42770: CALL_OW 272
42774: PPUSH
42775: LD_VAR 0 2
42779: PPUSH
42780: LD_VAR 0 5
42784: PPUSH
42785: LD_VAR 0 6
42789: PPUSH
42790: CALL_OW 273
42794: PPUSH
42795: LD_VAR 0 3
42799: PPUSH
42800: CALL_OW 309
42804: IFFALSE 42818
// begin result := true ;
42806: LD_ADDR_VAR 0 4
42810: PUSH
42811: LD_INT 1
42813: ST_TO_ADDR
// exit ;
42814: POP
42815: POP
42816: GO 42822
// end ;
42818: GO 42752
42820: POP
42821: POP
// end ;
42822: LD_VAR 0 4
42826: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42827: LD_INT 0
42829: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42830: LD_VAR 0 1
42834: PPUSH
42835: LD_VAR 0 2
42839: PPUSH
42840: LD_INT 0
42842: PPUSH
42843: LD_INT 0
42845: PPUSH
42846: LD_INT 1
42848: PPUSH
42849: LD_INT 0
42851: PPUSH
42852: CALL_OW 587
// end ;
42856: LD_VAR 0 3
42860: RET
// export function CenterOnNow ( unit ) ; begin
42861: LD_INT 0
42863: PPUSH
// result := IsInUnit ( unit ) ;
42864: LD_ADDR_VAR 0 2
42868: PUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: CALL_OW 310
42878: ST_TO_ADDR
// if not result then
42879: LD_VAR 0 2
42883: NOT
42884: IFFALSE 42896
// result := unit ;
42886: LD_ADDR_VAR 0 2
42890: PUSH
42891: LD_VAR 0 1
42895: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42896: LD_VAR 0 1
42900: PPUSH
42901: CALL_OW 87
// end ;
42905: LD_VAR 0 2
42909: RET
// export function ComMoveHex ( unit , hex ) ; begin
42910: LD_INT 0
42912: PPUSH
// if not hex then
42913: LD_VAR 0 2
42917: NOT
42918: IFFALSE 42922
// exit ;
42920: GO 42975
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42922: LD_VAR 0 2
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: PPUSH
42931: LD_VAR 0 2
42935: PUSH
42936: LD_INT 2
42938: ARRAY
42939: PPUSH
42940: CALL_OW 428
42944: IFFALSE 42948
// exit ;
42946: GO 42975
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42948: LD_VAR 0 1
42952: PPUSH
42953: LD_VAR 0 2
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PPUSH
42962: LD_VAR 0 2
42966: PUSH
42967: LD_INT 2
42969: ARRAY
42970: PPUSH
42971: CALL_OW 111
// end ;
42975: LD_VAR 0 3
42979: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42980: LD_INT 0
42982: PPUSH
42983: PPUSH
42984: PPUSH
// if not unit or not enemy then
42985: LD_VAR 0 1
42989: NOT
42990: PUSH
42991: LD_VAR 0 2
42995: NOT
42996: OR
42997: IFFALSE 43001
// exit ;
42999: GO 43125
// x := GetX ( enemy ) ;
43001: LD_ADDR_VAR 0 4
43005: PUSH
43006: LD_VAR 0 2
43010: PPUSH
43011: CALL_OW 250
43015: ST_TO_ADDR
// y := GetY ( enemy ) ;
43016: LD_ADDR_VAR 0 5
43020: PUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: CALL_OW 251
43030: ST_TO_ADDR
// if ValidHex ( x , y ) then
43031: LD_VAR 0 4
43035: PPUSH
43036: LD_VAR 0 5
43040: PPUSH
43041: CALL_OW 488
43045: IFFALSE 43125
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43047: LD_VAR 0 2
43051: PPUSH
43052: CALL_OW 247
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: IN
43067: PUSH
43068: LD_VAR 0 1
43072: PPUSH
43073: CALL_OW 255
43077: PPUSH
43078: LD_VAR 0 2
43082: PPUSH
43083: CALL_OW 292
43087: AND
43088: IFFALSE 43106
// ComAttackUnit ( unit , enemy ) else
43090: LD_VAR 0 1
43094: PPUSH
43095: LD_VAR 0 2
43099: PPUSH
43100: CALL_OW 115
43104: GO 43125
// ComAgressiveMove ( unit , x , y ) ;
43106: LD_VAR 0 1
43110: PPUSH
43111: LD_VAR 0 4
43115: PPUSH
43116: LD_VAR 0 5
43120: PPUSH
43121: CALL_OW 114
// end ;
43125: LD_VAR 0 3
43129: RET
