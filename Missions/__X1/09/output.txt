// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// RevealFogArea ( 2 , fogArea ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: CALL_OW 332
// PrepareArabian ;
  18: CALL 51 0 0
// Action ;
  22: CALL 630 0 0
// end ;
  26: END
// export prefix , debug ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := false ;
  30: LD_ADDR_EXP 2
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// prefix := 08_ ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_STRING 08_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i , tmp ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
// uc_side := 2 ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_INT 2
  63: ST_TO_ADDR
// uc_nation := 2 ;
  64: LD_ADDR_OWVAR 21
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_STRING Heike
  79: PPUSH
  80: LD_EXP 2
  84: NOT
  85: PPUSH
  86: LD_EXP 1
  90: PPUSH
  91: CALL 1587 0 3
  95: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING Ibrahim
 103: PPUSH
 104: LD_EXP 2
 108: NOT
 109: PPUSH
 110: LD_EXP 1
 114: PPUSH
 115: CALL 1587 0 3
 119: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 120: LD_ADDR_EXP 4
 124: PUSH
 125: LD_STRING Givi
 127: PPUSH
 128: LD_EXP 2
 132: NOT
 133: PPUSH
 134: LD_EXP 1
 138: PPUSH
 139: CALL 1587 0 3
 143: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING Kamil
 151: PPUSH
 152: LD_EXP 2
 156: NOT
 157: PPUSH
 158: LD_EXP 1
 162: PPUSH
 163: CALL 1587 0 3
 167: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 168: LD_ADDR_EXP 8
 172: PUSH
 173: LD_STRING Kaia
 175: PPUSH
 176: LD_EXP 2
 180: NOT
 181: PPUSH
 182: LD_EXP 1
 186: PPUSH
 187: CALL 1587 0 3
 191: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 192: LD_ADDR_EXP 9
 196: PUSH
 197: LD_STRING Sophia
 199: PPUSH
 200: LD_EXP 2
 204: NOT
 205: PPUSH
 206: LD_EXP 1
 210: PPUSH
 211: CALL 1587 0 3
 215: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 216: LD_ADDR_EXP 10
 220: PUSH
 221: LD_STRING Markov
 223: PPUSH
 224: LD_EXP 2
 228: NOT
 229: PPUSH
 230: LD_EXP 1
 234: PPUSH
 235: CALL 1587 0 3
 239: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 240: LD_ADDR_EXP 13
 244: PUSH
 245: LD_STRING Aviradze
 247: PPUSH
 248: LD_EXP 2
 252: NOT
 253: PPUSH
 254: LD_EXP 1
 258: PPUSH
 259: CALL 1587 0 3
 263: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 264: LD_ADDR_EXP 12
 268: PUSH
 269: LD_STRING Kurt
 271: PPUSH
 272: LD_EXP 2
 276: NOT
 277: PPUSH
 278: LD_EXP 1
 282: PPUSH
 283: CALL 1587 0 3
 287: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Mike
 295: PPUSH
 296: LD_EXP 2
 300: NOT
 301: PPUSH
 302: LD_EXP 1
 306: PPUSH
 307: CALL 1587 0 3
 311: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 312: LD_ADDR_EXP 11
 316: PUSH
 317: LD_STRING Olaf
 319: PPUSH
 320: LD_EXP 2
 324: NOT
 325: PPUSH
 326: LD_EXP 1
 330: PPUSH
 331: CALL 1587 0 3
 335: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 336: LD_ADDR_EXP 14
 340: PUSH
 341: LD_STRING 08_others
 343: PPUSH
 344: CALL_OW 31
 348: ST_TO_ADDR
// uc_side := 4 ;
 349: LD_ADDR_OWVAR 20
 353: PUSH
 354: LD_INT 4
 356: ST_TO_ADDR
// uc_nation := 1 ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// Doug := PrepareUnit ( UsCommander , ( not debug ) , prefix ) ;
 365: LD_ADDR_EXP 17
 369: PUSH
 370: LD_STRING UsCommander
 372: PPUSH
 373: LD_EXP 2
 377: NOT
 378: PPUSH
 379: LD_EXP 1
 383: PPUSH
 384: CALL 1587 0 3
 388: ST_TO_ADDR
// Harris := PrepareUnit ( Harris , ( not debug ) , prefix ) ;
 389: LD_ADDR_EXP 16
 393: PUSH
 394: LD_STRING Harris
 396: PPUSH
 397: LD_EXP 2
 401: NOT
 402: PPUSH
 403: LD_EXP 1
 407: PPUSH
 408: CALL 1587 0 3
 412: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 08_Americans ) ;
 413: LD_ADDR_EXP 15
 417: PUSH
 418: LD_STRING 08_Americans
 420: PPUSH
 421: CALL_OW 31
 425: ST_TO_ADDR
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
 426: LD_ADDR_VAR 0 3
 430: PUSH
 431: LD_EXP 4
 435: PUSH
 436: LD_EXP 5
 440: PUSH
 441: LD_EXP 6
 445: PUSH
 446: LD_EXP 7
 450: PUSH
 451: LD_EXP 8
 455: PUSH
 456: LD_EXP 9
 460: PUSH
 461: LD_EXP 10
 465: PUSH
 466: LD_EXP 11
 470: PUSH
 471: LD_EXP 12
 475: PUSH
 476: LD_EXP 13
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_EXP 14
 497: UNION
 498: PUSH
 499: LD_EXP 15
 503: UNION
 504: ST_TO_ADDR
// uc_direction := 5 ;
 505: LD_ADDR_OWVAR 24
 509: PUSH
 510: LD_INT 5
 512: ST_TO_ADDR
// PlaceUnitArea ( Heike , heikeSpawn , false ) ;
 513: LD_EXP 3
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 49
// if Harris then
 528: LD_EXP 16
 532: IFFALSE 572
// begin PlaceUnitArea ( Harris , usCommanderSpawn , false ) ;
 534: LD_EXP 16
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// if Doug then
 549: LD_EXP 17
 553: IFFALSE 570
// PlaceUnitArea ( Doug , spawn , false ) ;
 555: LD_EXP 17
 559: PPUSH
 560: LD_INT 3
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end else
 570: GO 593
// if Doug then
 572: LD_EXP 17
 576: IFFALSE 593
// PlaceUnitArea ( Doug , usCommanderSpawn , false ) ;
 578: LD_EXP 17
 582: PPUSH
 583: LD_INT 2
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// for i in tmp do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_VAR 0 3
 602: PUSH
 603: FOR_IN
 604: IFFALSE 623
// PlaceUnitArea ( i , spawn , false ) ;
 606: LD_VAR 0 2
 610: PPUSH
 611: LD_INT 3
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 603
 623: POP
 624: POP
// end ; end_of_file
 625: LD_VAR 0 1
 629: RET
// export function Action ; var i , un ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// music_nat := 2 ;
 635: LD_ADDR_OWVAR 71
 639: PUSH
 640: LD_INT 2
 642: ST_TO_ADDR
// Video ( true ) ;
 643: LD_INT 1
 645: PPUSH
 646: CALL 39026 0 1
// ComMoveXY ( Heike , 51 , 23 ) ;
 650: LD_EXP 3
 654: PPUSH
 655: LD_INT 51
 657: PPUSH
 658: LD_INT 23
 660: PPUSH
 661: CALL_OW 111
// ComMoveXY ( all_units diff Heike , 53 , 27 ) ;
 665: LD_OWVAR 3
 669: PUSH
 670: LD_EXP 3
 674: DIFF
 675: PPUSH
 676: LD_INT 53
 678: PPUSH
 679: LD_INT 27
 681: PPUSH
 682: CALL_OW 111
// CenterNowOnXY ( 52 , 25 ) ;
 686: LD_INT 52
 688: PPUSH
 689: LD_INT 25
 691: PPUSH
 692: CALL_OW 86
// wait ( 0 0$2 ) ;
 696: LD_INT 70
 698: PPUSH
 699: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
 703: LD_INT 35
 705: PPUSH
 706: CALL_OW 67
// until IsAt ( Heike , 51 , 23 ) or not HasTask ( Heike ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 51
 717: PPUSH
 718: LD_INT 23
 720: PPUSH
 721: CALL_OW 307
 725: PUSH
 726: LD_EXP 3
 730: PPUSH
 731: CALL_OW 314
 735: NOT
 736: OR
 737: IFFALSE 703
// ComTurnXY ( Heike , 53 , 26 ) ;
 739: LD_EXP 3
 743: PPUSH
 744: LD_INT 53
 746: PPUSH
 747: LD_INT 26
 749: PPUSH
 750: CALL_OW 118
// wait ( 0 0$0.3 ) ;
 754: LD_INT 10
 756: PPUSH
 757: CALL_OW 67
// Say ( Heike , DH-Intro-1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_STRING DH-Intro-1
 768: PPUSH
 769: CALL_OW 88
// ComHold ( all_units ) ;
 773: LD_OWVAR 3
 777: PPUSH
 778: CALL_OW 140
// AddComTurnUnit ( all_units diff Heike , Heike ) ;
 782: LD_OWVAR 3
 786: PUSH
 787: LD_EXP 3
 791: DIFF
 792: PPUSH
 793: LD_EXP 3
 797: PPUSH
 798: CALL_OW 179
// if Doug and LoadVariable ( 08_DealWithDoug , false ) then
 802: LD_EXP 17
 806: PUSH
 807: LD_STRING 08_DealWithDoug
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 30
 817: AND
 818: IFFALSE 930
// begin ComTurnUnit ( Heike , Doug ) ;
 820: LD_EXP 3
 824: PPUSH
 825: LD_EXP 17
 829: PPUSH
 830: CALL_OW 119
// Say ( Doug , DCa-Intro-a-2 ) ;
 834: LD_EXP 17
 838: PPUSH
 839: LD_STRING DCa-Intro-a-2
 841: PPUSH
 842: CALL_OW 88
// Say ( Heike , DH-Intro-a-3 ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_STRING DH-Intro-a-3
 853: PPUSH
 854: CALL_OW 88
// Say ( Doug , DCa-Intro-a-4 ) ;
 858: LD_EXP 17
 862: PPUSH
 863: LD_STRING DCa-Intro-a-4
 865: PPUSH
 866: CALL_OW 88
// Say ( Heike , DH-Intro-a-5 ) ;
 870: LD_EXP 3
 874: PPUSH
 875: LD_STRING DH-Intro-a-5
 877: PPUSH
 878: CALL_OW 88
// Say ( Doug , DCa-Intro-a-6 ) ;
 882: LD_EXP 17
 886: PPUSH
 887: LD_STRING DCa-Intro-a-6
 889: PPUSH
 890: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 894: LD_EXP 16
 898: PUSH
 899: LD_EXP 17
 903: ADD
 904: PUSH
 905: LD_EXP 15
 909: ADD
 910: PPUSH
 911: LD_INT 5
 913: PPUSH
 914: LD_INT 7
 916: PPUSH
 917: CALL_OW 111
// wait ( 0 0$01 ) ;
 921: LD_INT 35
 923: PPUSH
 924: CALL_OW 67
// end else
 928: GO 1032
// if Harris then
 930: LD_EXP 16
 934: IFFALSE 1032
// begin ComTurnUnit ( Heike , Harris ) ;
 936: LD_EXP 3
 940: PPUSH
 941: LD_EXP 16
 945: PPUSH
 946: CALL_OW 119
// Say ( Harris , DJ-Intro-2 ) ;
 950: LD_EXP 16
 954: PPUSH
 955: LD_STRING DJ-Intro-2
 957: PPUSH
 958: CALL_OW 88
// Say ( Heike , DH-Intro-3 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING DH-Intro-3
 969: PPUSH
 970: CALL_OW 88
// Say ( Heike , DH-Intro-4 ) ;
 974: LD_EXP 3
 978: PPUSH
 979: LD_STRING DH-Intro-4
 981: PPUSH
 982: CALL_OW 88
// Say ( Harris , DJ-Intro-5 ) ;
 986: LD_EXP 16
 990: PPUSH
 991: LD_STRING DJ-Intro-5
 993: PPUSH
 994: CALL_OW 88
// ComMoveXY ( Harris ^ Doug ^ americanSquad , 5 , 7 ) ;
 998: LD_EXP 16
1002: PUSH
1003: LD_EXP 17
1007: ADD
1008: PUSH
1009: LD_EXP 15
1013: ADD
1014: PPUSH
1015: LD_INT 5
1017: PPUSH
1018: LD_INT 7
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$01 ) ;
1025: LD_INT 35
1027: PPUSH
1028: CALL_OW 67
// end ; if Givi then
1032: LD_EXP 4
1036: IFFALSE 1131
// begin ComMoveUnit ( Givi , Heike ) ;
1038: LD_EXP 4
1042: PPUSH
1043: LD_EXP 3
1047: PPUSH
1048: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
1052: LD_INT 35
1054: PPUSH
1055: CALL_OW 67
// until GetDistUnits ( Heike , Givi ) < 4 or not HasTask ( Givi ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_EXP 4
1068: PPUSH
1069: CALL_OW 296
1073: PUSH
1074: LD_INT 4
1076: LESS
1077: PUSH
1078: LD_EXP 4
1082: PPUSH
1083: CALL_OW 314
1087: NOT
1088: OR
1089: IFFALSE 1052
// ComTurnUnit ( Givi , Heike ) ;
1091: LD_EXP 4
1095: PPUSH
1096: LD_EXP 3
1100: PPUSH
1101: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
1105: LD_EXP 3
1109: PPUSH
1110: LD_EXP 4
1114: PPUSH
1115: CALL_OW 119
// Say ( Givi , DG-Intro-7 ) ;
1119: LD_EXP 4
1123: PPUSH
1124: LD_STRING DG-Intro-7
1126: PPUSH
1127: CALL_OW 88
// end ; if not Givi then
1131: LD_EXP 4
1135: NOT
1136: IFFALSE 1153
// ComTurnXY ( Heike , 52 , 25 ) ;
1138: LD_EXP 3
1142: PPUSH
1143: LD_INT 52
1145: PPUSH
1146: LD_INT 25
1148: PPUSH
1149: CALL_OW 118
// Say ( Heike , DH-Intro-7 ) ;
1153: LD_EXP 3
1157: PPUSH
1158: LD_STRING DH-Intro-7
1160: PPUSH
1161: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 48 , 4 ) ;
1165: LD_INT 22
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PPUSH
1175: CALL_OW 69
1179: PPUSH
1180: LD_INT 48
1182: PPUSH
1183: LD_INT 4
1185: PPUSH
1186: CALL_OW 111
// wait ( 0 0$3 ) ;
1190: LD_INT 105
1192: PPUSH
1193: CALL_OW 67
// PlaceSeeing ( 74 , 79 , 2 , - 16 ) ;
1197: LD_INT 74
1199: PPUSH
1200: LD_INT 79
1202: PPUSH
1203: LD_INT 2
1205: PPUSH
1206: LD_INT 16
1208: NEG
1209: PPUSH
1210: CALL_OW 330
// CenterOnXY ( 74 , 79 ) ;
1214: LD_INT 74
1216: PPUSH
1217: LD_INT 79
1219: PPUSH
1220: CALL_OW 84
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := nation_russian ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
1240: LD_INT 22
1242: PPUSH
1243: LD_INT 3
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 43
1251: PPUSH
1252: LD_INT 100
1254: PPUSH
1255: CALL 6602 0 5
// un := CreateVehicle ;
1259: LD_ADDR_VAR 0 3
1263: PUSH
1264: CALL_OW 45
1268: ST_TO_ADDR
// PlaceUnitXY ( un , 76 , 87 , false ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 76
1276: PPUSH
1277: LD_INT 87
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 48
// PrepareMechanic ( false , 8 ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 8
1292: PPUSH
1293: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
1297: CALL_OW 44
1301: PPUSH
1302: LD_VAR 0 3
1306: PPUSH
1307: CALL_OW 52
// ComMoveXY ( un , 67 , 56 ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 67
1318: PPUSH
1319: LD_INT 56
1321: PPUSH
1322: CALL_OW 111
// wait ( 0 0$1 ) ;
1326: LD_INT 35
1328: PPUSH
1329: CALL_OW 67
// for i := 1 to 3 do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_INT 3
1345: PUSH
1346: FOR_TO
1347: IFFALSE 1407
// begin PrepareSoldier ( false , 8 ) ;
1349: LD_INT 0
1351: PPUSH
1352: LD_INT 8
1354: PPUSH
1355: CALL_OW 381
// un := CreateHuman ;
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: CALL_OW 44
1368: ST_TO_ADDR
// PlaceUnitXYR ( un , 76 , 87 , 2 , false ) ;
1369: LD_VAR 0 3
1373: PPUSH
1374: LD_INT 76
1376: PPUSH
1377: LD_INT 87
1379: PPUSH
1380: LD_INT 2
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 50
// ComMoveXY ( un , 67 , 56 ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 67
1397: PPUSH
1398: LD_INT 56
1400: PPUSH
1401: CALL_OW 111
// end ;
1405: GO 1346
1407: POP
1408: POP
// wait ( 0 0$2 ) ;
1409: LD_INT 70
1411: PPUSH
1412: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1416: LD_INT 1
1418: PPUSH
1419: LD_STRING %_cont
1421: PPUSH
1422: CALL_OW 340
// Video ( false ) ;
1426: LD_INT 0
1428: PPUSH
1429: CALL 39026 0 1
// end ;
1433: LD_VAR 0 1
1437: RET
// every 0 0$1 trigger FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do var i ;
1438: LD_INT 5
1440: PPUSH
1441: LD_INT 22
1443: PUSH
1444: LD_INT 4
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PPUSH
1451: CALL_OW 70
1455: IFFALSE 1503
1457: GO 1459
1459: DISABLE
1460: LD_INT 0
1462: PPUSH
// begin enable ;
1463: ENABLE
// for i in FilterUnitsInArea ( deleteAmericanArea , [ f_side , 4 ] ) do
1464: LD_ADDR_VAR 0 1
1468: PUSH
1469: LD_INT 5
1471: PPUSH
1472: LD_INT 22
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PPUSH
1482: CALL_OW 70
1486: PUSH
1487: FOR_IN
1488: IFFALSE 1501
// RemoveUnit ( i ) ;
1490: LD_VAR 0 1
1494: PPUSH
1495: CALL_OW 64
1499: GO 1487
1501: POP
1502: POP
// end ;
1503: PPOPN 1
1505: END
// every 0 0$1 trigger FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do var i ;
1506: LD_INT 6
1508: PPUSH
1509: LD_INT 22
1511: PUSH
1512: LD_INT 2
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 70
1523: IFFALSE 1571
1525: GO 1527
1527: DISABLE
1528: LD_INT 0
1530: PPUSH
// begin enable ;
1531: ENABLE
// for i in FilterUnitsInArea ( deleteArabianArea , [ f_side , 2 ] ) do
1532: LD_ADDR_VAR 0 1
1536: PUSH
1537: LD_INT 6
1539: PPUSH
1540: LD_INT 22
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 70
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1569
// RemoveUnit ( i ) ;
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 64
1567: GO 1555
1569: POP
1570: POP
// end ; end_of_file
1571: PPOPN 1
1573: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1574: LD_INT 1
1576: PPUSH
1577: LD_STRING %_cont
1579: PPUSH
1580: CALL_OW 340
// end ; end_of_file
1584: PPOPN 1
1586: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
// if exist_mode then
1591: LD_VAR 0 2
1595: IFFALSE 1620
// unit := CreateCharacter ( prefix & ident ) else
1597: LD_ADDR_VAR 0 5
1601: PUSH
1602: LD_VAR 0 3
1606: PUSH
1607: LD_VAR 0 1
1611: STR
1612: PPUSH
1613: CALL_OW 34
1617: ST_TO_ADDR
1618: GO 1635
// unit := NewCharacter ( ident ) ;
1620: LD_ADDR_VAR 0 5
1624: PUSH
1625: LD_VAR 0 1
1629: PPUSH
1630: CALL_OW 25
1634: ST_TO_ADDR
// result := unit ;
1635: LD_ADDR_VAR 0 4
1639: PUSH
1640: LD_VAR 0 5
1644: ST_TO_ADDR
// end ;
1645: LD_VAR 0 4
1649: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1650: LD_INT 0
1652: PPUSH
1653: PPUSH
// if not side or not nation then
1654: LD_VAR 0 1
1658: NOT
1659: PUSH
1660: LD_VAR 0 2
1664: NOT
1665: OR
1666: IFFALSE 1670
// exit ;
1668: GO 2438
// case nation of nation_american :
1670: LD_VAR 0 2
1674: PUSH
1675: LD_INT 1
1677: DOUBLE
1678: EQUAL
1679: IFTRUE 1683
1681: GO 1897
1683: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1684: LD_ADDR_VAR 0 4
1688: PUSH
1689: LD_INT 35
1691: PUSH
1692: LD_INT 45
1694: PUSH
1695: LD_INT 46
1697: PUSH
1698: LD_INT 47
1700: PUSH
1701: LD_INT 82
1703: PUSH
1704: LD_INT 83
1706: PUSH
1707: LD_INT 84
1709: PUSH
1710: LD_INT 85
1712: PUSH
1713: LD_INT 86
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: LD_INT 6
1724: PUSH
1725: LD_INT 15
1727: PUSH
1728: LD_INT 16
1730: PUSH
1731: LD_INT 7
1733: PUSH
1734: LD_INT 12
1736: PUSH
1737: LD_INT 13
1739: PUSH
1740: LD_INT 10
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 20
1748: PUSH
1749: LD_INT 21
1751: PUSH
1752: LD_INT 22
1754: PUSH
1755: LD_INT 25
1757: PUSH
1758: LD_INT 32
1760: PUSH
1761: LD_INT 27
1763: PUSH
1764: LD_INT 36
1766: PUSH
1767: LD_INT 69
1769: PUSH
1770: LD_INT 39
1772: PUSH
1773: LD_INT 34
1775: PUSH
1776: LD_INT 40
1778: PUSH
1779: LD_INT 48
1781: PUSH
1782: LD_INT 49
1784: PUSH
1785: LD_INT 50
1787: PUSH
1788: LD_INT 51
1790: PUSH
1791: LD_INT 52
1793: PUSH
1794: LD_INT 53
1796: PUSH
1797: LD_INT 54
1799: PUSH
1800: LD_INT 55
1802: PUSH
1803: LD_INT 56
1805: PUSH
1806: LD_INT 57
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 59
1814: PUSH
1815: LD_INT 60
1817: PUSH
1818: LD_INT 61
1820: PUSH
1821: LD_INT 62
1823: PUSH
1824: LD_INT 80
1826: PUSH
1827: LD_INT 82
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 84
1835: PUSH
1836: LD_INT 85
1838: PUSH
1839: LD_INT 86
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: ST_TO_ADDR
1895: GO 2362
1897: LD_INT 2
1899: DOUBLE
1900: EQUAL
1901: IFTRUE 1905
1903: GO 2131
1905: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: LD_INT 35
1913: PUSH
1914: LD_INT 45
1916: PUSH
1917: LD_INT 46
1919: PUSH
1920: LD_INT 47
1922: PUSH
1923: LD_INT 82
1925: PUSH
1926: LD_INT 83
1928: PUSH
1929: LD_INT 84
1931: PUSH
1932: LD_INT 85
1934: PUSH
1935: LD_INT 87
1937: PUSH
1938: LD_INT 70
1940: PUSH
1941: LD_INT 1
1943: PUSH
1944: LD_INT 11
1946: PUSH
1947: LD_INT 3
1949: PUSH
1950: LD_INT 4
1952: PUSH
1953: LD_INT 5
1955: PUSH
1956: LD_INT 6
1958: PUSH
1959: LD_INT 15
1961: PUSH
1962: LD_INT 18
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: LD_INT 17
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 22
1982: PUSH
1983: LD_INT 72
1985: PUSH
1986: LD_INT 26
1988: PUSH
1989: LD_INT 69
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 40
1997: PUSH
1998: LD_INT 41
2000: PUSH
2001: LD_INT 42
2003: PUSH
2004: LD_INT 43
2006: PUSH
2007: LD_INT 48
2009: PUSH
2010: LD_INT 49
2012: PUSH
2013: LD_INT 50
2015: PUSH
2016: LD_INT 51
2018: PUSH
2019: LD_INT 52
2021: PUSH
2022: LD_INT 53
2024: PUSH
2025: LD_INT 54
2027: PUSH
2028: LD_INT 55
2030: PUSH
2031: LD_INT 56
2033: PUSH
2034: LD_INT 60
2036: PUSH
2037: LD_INT 61
2039: PUSH
2040: LD_INT 62
2042: PUSH
2043: LD_INT 66
2045: PUSH
2046: LD_INT 67
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: LD_INT 81
2054: PUSH
2055: LD_INT 82
2057: PUSH
2058: LD_INT 83
2060: PUSH
2061: LD_INT 84
2063: PUSH
2064: LD_INT 85
2066: PUSH
2067: LD_INT 87
2069: PUSH
2070: LD_INT 88
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
2129: GO 2362
2131: LD_INT 3
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2361
2139: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: LD_INT 46
2147: PUSH
2148: LD_INT 47
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: LD_INT 82
2159: PUSH
2160: LD_INT 83
2162: PUSH
2163: LD_INT 84
2165: PUSH
2166: LD_INT 85
2168: PUSH
2169: LD_INT 86
2171: PUSH
2172: LD_INT 11
2174: PUSH
2175: LD_INT 9
2177: PUSH
2178: LD_INT 20
2180: PUSH
2181: LD_INT 19
2183: PUSH
2184: LD_INT 21
2186: PUSH
2187: LD_INT 24
2189: PUSH
2190: LD_INT 22
2192: PUSH
2193: LD_INT 25
2195: PUSH
2196: LD_INT 28
2198: PUSH
2199: LD_INT 29
2201: PUSH
2202: LD_INT 30
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 37
2210: PUSH
2211: LD_INT 38
2213: PUSH
2214: LD_INT 32
2216: PUSH
2217: LD_INT 27
2219: PUSH
2220: LD_INT 33
2222: PUSH
2223: LD_INT 69
2225: PUSH
2226: LD_INT 39
2228: PUSH
2229: LD_INT 34
2231: PUSH
2232: LD_INT 40
2234: PUSH
2235: LD_INT 71
2237: PUSH
2238: LD_INT 23
2240: PUSH
2241: LD_INT 44
2243: PUSH
2244: LD_INT 48
2246: PUSH
2247: LD_INT 49
2249: PUSH
2250: LD_INT 50
2252: PUSH
2253: LD_INT 51
2255: PUSH
2256: LD_INT 52
2258: PUSH
2259: LD_INT 53
2261: PUSH
2262: LD_INT 54
2264: PUSH
2265: LD_INT 55
2267: PUSH
2268: LD_INT 56
2270: PUSH
2271: LD_INT 57
2273: PUSH
2274: LD_INT 58
2276: PUSH
2277: LD_INT 59
2279: PUSH
2280: LD_INT 63
2282: PUSH
2283: LD_INT 64
2285: PUSH
2286: LD_INT 65
2288: PUSH
2289: LD_INT 82
2291: PUSH
2292: LD_INT 83
2294: PUSH
2295: LD_INT 84
2297: PUSH
2298: LD_INT 85
2300: PUSH
2301: LD_INT 86
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
2359: GO 2362
2361: POP
// if state > - 1 and state < 3 then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: NEG
2370: GREATER
2371: PUSH
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 3
2379: LESS
2380: AND
2381: IFFALSE 2438
// for i in result do
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: FOR_IN
2394: IFFALSE 2436
// if GetTech ( i , side ) <> state then
2396: LD_VAR 0 5
2400: PPUSH
2401: LD_VAR 0 1
2405: PPUSH
2406: CALL_OW 321
2410: PUSH
2411: LD_VAR 0 3
2415: NONEQUAL
2416: IFFALSE 2434
// result := result diff i ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_VAR 0 4
2427: PUSH
2428: LD_VAR 0 5
2432: DIFF
2433: ST_TO_ADDR
2434: GO 2393
2436: POP
2437: POP
// end ;
2438: LD_VAR 0 4
2442: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2443: LD_INT 0
2445: PPUSH
2446: PPUSH
2447: PPUSH
// result := true ;
2448: LD_ADDR_VAR 0 3
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2456: LD_ADDR_VAR 0 5
2460: PUSH
2461: LD_VAR 0 2
2465: PPUSH
2466: CALL_OW 480
2470: ST_TO_ADDR
// if not tmp then
2471: LD_VAR 0 5
2475: NOT
2476: IFFALSE 2480
// exit ;
2478: GO 2529
// for i in tmp do
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 5
2489: PUSH
2490: FOR_IN
2491: IFFALSE 2527
// if GetTech ( i , side ) <> state_researched then
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 321
2507: PUSH
2508: LD_INT 2
2510: NONEQUAL
2511: IFFALSE 2525
// begin result := false ;
2513: LD_ADDR_VAR 0 3
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
// exit ;
2521: POP
2522: POP
2523: GO 2529
// end ;
2525: GO 2490
2527: POP
2528: POP
// end ;
2529: LD_VAR 0 3
2533: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2549: LD_VAR 0 1
2553: NOT
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 257
2564: PUSH
2565: LD_INT 9
2567: NONEQUAL
2568: OR
2569: IFFALSE 2573
// exit ;
2571: GO 3146
// side := GetSide ( unit ) ;
2573: LD_ADDR_VAR 0 9
2577: PUSH
2578: LD_VAR 0 1
2582: PPUSH
2583: CALL_OW 255
2587: ST_TO_ADDR
// tech_space := tech_spacanom ;
2588: LD_ADDR_VAR 0 12
2592: PUSH
2593: LD_INT 29
2595: ST_TO_ADDR
// tech_time := tech_taurad ;
2596: LD_ADDR_VAR 0 13
2600: PUSH
2601: LD_INT 28
2603: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2604: LD_ADDR_VAR 0 11
2608: PUSH
2609: LD_VAR 0 1
2613: PPUSH
2614: CALL_OW 310
2618: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2619: LD_VAR 0 11
2623: PPUSH
2624: CALL_OW 247
2628: PUSH
2629: LD_INT 2
2631: EQUAL
2632: IFFALSE 2636
// exit ;
2634: GO 3146
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2636: LD_ADDR_VAR 0 8
2640: PUSH
2641: LD_INT 81
2643: PUSH
2644: LD_VAR 0 9
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 21
2658: PUSH
2659: LD_INT 3
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: ST_TO_ADDR
// if not tmp then
2679: LD_VAR 0 8
2683: NOT
2684: IFFALSE 2688
// exit ;
2686: GO 3146
// if in_unit then
2688: LD_VAR 0 11
2692: IFFALSE 2716
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2694: LD_ADDR_VAR 0 10
2698: PUSH
2699: LD_VAR 0 8
2703: PPUSH
2704: LD_VAR 0 11
2708: PPUSH
2709: CALL_OW 74
2713: ST_TO_ADDR
2714: GO 2736
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2716: LD_ADDR_VAR 0 10
2720: PUSH
2721: LD_VAR 0 8
2725: PPUSH
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 74
2735: ST_TO_ADDR
// if not enemy then
2736: LD_VAR 0 10
2740: NOT
2741: IFFALSE 2745
// exit ;
2743: GO 3146
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2745: LD_VAR 0 11
2749: PUSH
2750: LD_VAR 0 11
2754: PPUSH
2755: LD_VAR 0 10
2759: PPUSH
2760: CALL_OW 296
2764: PUSH
2765: LD_INT 13
2767: GREATER
2768: AND
2769: PUSH
2770: LD_VAR 0 1
2774: PPUSH
2775: LD_VAR 0 10
2779: PPUSH
2780: CALL_OW 296
2784: PUSH
2785: LD_INT 12
2787: GREATER
2788: OR
2789: IFFALSE 2793
// exit ;
2791: GO 3146
// missile := [ 1 ] ;
2793: LD_ADDR_VAR 0 14
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2804: LD_VAR 0 9
2808: PPUSH
2809: LD_VAR 0 12
2813: PPUSH
2814: CALL_OW 325
2818: IFFALSE 2847
// missile := Replace ( missile , missile + 1 , 2 ) ;
2820: LD_ADDR_VAR 0 14
2824: PUSH
2825: LD_VAR 0 14
2829: PPUSH
2830: LD_VAR 0 14
2834: PUSH
2835: LD_INT 1
2837: PLUS
2838: PPUSH
2839: LD_INT 2
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2847: LD_VAR 0 9
2851: PPUSH
2852: LD_VAR 0 13
2856: PPUSH
2857: CALL_OW 325
2861: PUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 255
2871: PPUSH
2872: LD_VAR 0 13
2876: PPUSH
2877: CALL_OW 325
2881: NOT
2882: AND
2883: IFFALSE 2912
// missile := Replace ( missile , missile + 1 , 3 ) ;
2885: LD_ADDR_VAR 0 14
2889: PUSH
2890: LD_VAR 0 14
2894: PPUSH
2895: LD_VAR 0 14
2899: PUSH
2900: LD_INT 1
2902: PLUS
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: CALL_OW 1
2911: ST_TO_ADDR
// if missile < 2 then
2912: LD_VAR 0 14
2916: PUSH
2917: LD_INT 2
2919: LESS
2920: IFFALSE 2924
// exit ;
2922: GO 3146
// x := GetX ( enemy ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_VAR 0 10
2933: PPUSH
2934: CALL_OW 250
2938: ST_TO_ADDR
// y := GetY ( enemy ) ;
2939: LD_ADDR_VAR 0 5
2943: PUSH
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 251
2953: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2954: LD_ADDR_VAR 0 6
2958: PUSH
2959: LD_VAR 0 4
2963: PUSH
2964: LD_INT 1
2966: NEG
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 12
2975: PLUS
2976: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2977: LD_ADDR_VAR 0 7
2981: PUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 1
2989: NEG
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: CALL_OW 12
2998: PLUS
2999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3000: LD_VAR 0 6
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: CALL_OW 488
3014: NOT
3015: IFFALSE 3037
// begin _x := x ;
3017: LD_ADDR_VAR 0 6
3021: PUSH
3022: LD_VAR 0 4
3026: ST_TO_ADDR
// _y := y ;
3027: LD_ADDR_VAR 0 7
3031: PUSH
3032: LD_VAR 0 5
3036: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 1
3044: PPUSH
3045: LD_VAR 0 14
3049: PPUSH
3050: CALL_OW 12
3054: ST_TO_ADDR
// case i of 1 :
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: DOUBLE
3063: EQUAL
3064: IFTRUE 3068
3066: GO 3085
3068: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3069: LD_VAR 0 1
3073: PPUSH
3074: LD_VAR 0 10
3078: PPUSH
3079: CALL_OW 115
3083: GO 3146
3085: LD_INT 2
3087: DOUBLE
3088: EQUAL
3089: IFTRUE 3093
3091: GO 3115
3093: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3094: LD_VAR 0 1
3098: PPUSH
3099: LD_VAR 0 6
3103: PPUSH
3104: LD_VAR 0 7
3108: PPUSH
3109: CALL_OW 153
3113: GO 3146
3115: LD_INT 3
3117: DOUBLE
3118: EQUAL
3119: IFTRUE 3123
3121: GO 3145
3123: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 6
3133: PPUSH
3134: LD_VAR 0 7
3138: PPUSH
3139: CALL_OW 154
3143: GO 3146
3145: POP
// end ;
3146: LD_VAR 0 2
3150: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
// if not unit or not building then
3159: LD_VAR 0 1
3163: NOT
3164: PUSH
3165: LD_VAR 0 2
3169: NOT
3170: OR
3171: IFFALSE 3175
// exit ;
3173: GO 3333
// x := GetX ( building ) ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_VAR 0 2
3184: PPUSH
3185: CALL_OW 250
3189: ST_TO_ADDR
// y := GetY ( building ) ;
3190: LD_ADDR_VAR 0 6
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 251
3204: ST_TO_ADDR
// for i = 0 to 5 do
3205: LD_ADDR_VAR 0 4
3209: PUSH
3210: DOUBLE
3211: LD_INT 0
3213: DEC
3214: ST_TO_ADDR
3215: LD_INT 5
3217: PUSH
3218: FOR_TO
3219: IFFALSE 3331
// begin _x := ShiftX ( x , i , 3 ) ;
3221: LD_ADDR_VAR 0 7
3225: PUSH
3226: LD_VAR 0 5
3230: PPUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: CALL_OW 272
3243: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3244: LD_ADDR_VAR 0 8
3248: PUSH
3249: LD_VAR 0 6
3253: PPUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: CALL_OW 273
3266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3267: LD_VAR 0 7
3271: PPUSH
3272: LD_VAR 0 8
3276: PPUSH
3277: CALL_OW 488
3281: NOT
3282: IFFALSE 3286
// continue ;
3284: GO 3218
// if HexInfo ( _x , _y ) = 0 then
3286: LD_VAR 0 7
3290: PPUSH
3291: LD_VAR 0 8
3295: PPUSH
3296: CALL_OW 428
3300: PUSH
3301: LD_INT 0
3303: EQUAL
3304: IFFALSE 3329
// begin ComMoveXY ( unit , _x , _y ) ;
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 7
3315: PPUSH
3316: LD_VAR 0 8
3320: PPUSH
3321: CALL_OW 111
// exit ;
3325: POP
3326: POP
3327: GO 3333
// end ; end ;
3329: GO 3218
3331: POP
3332: POP
// end ;
3333: LD_VAR 0 3
3337: RET
// export function ScanBase ( side , base_area ) ; begin
3338: LD_INT 0
3340: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_INT 81
3353: PUSH
3354: LD_VAR 0 1
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 70
3367: ST_TO_ADDR
// end ;
3368: LD_VAR 0 3
3372: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
3377: PPUSH
3378: PPUSH
// result := false ;
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// side := GetSide ( unit ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 1
3396: PPUSH
3397: CALL_OW 255
3401: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3402: LD_ADDR_VAR 0 4
3406: PUSH
3407: LD_VAR 0 1
3411: PPUSH
3412: CALL_OW 248
3416: ST_TO_ADDR
// case nat of 1 :
3417: LD_VAR 0 4
3421: PUSH
3422: LD_INT 1
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3441
3430: POP
// tech := tech_lassight ; 2 :
3431: LD_ADDR_VAR 0 5
3435: PUSH
3436: LD_INT 12
3438: ST_TO_ADDR
3439: GO 3480
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3460
3449: POP
// tech := tech_mortar ; 3 :
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_INT 41
3457: ST_TO_ADDR
3458: GO 3480
3460: LD_INT 3
3462: DOUBLE
3463: EQUAL
3464: IFTRUE 3468
3466: GO 3479
3468: POP
// tech := tech_bazooka ; end ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_INT 44
3476: ST_TO_ADDR
3477: GO 3480
3479: POP
// if Researched ( side , tech ) then
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_VAR 0 5
3489: PPUSH
3490: CALL_OW 325
3494: IFFALSE 3521
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 8
3506: PUSH
3507: LD_INT 9
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_VAR 0 4
3519: ARRAY
3520: ST_TO_ADDR
// end ;
3521: LD_VAR 0 2
3525: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3526: LD_INT 0
3528: PPUSH
3529: PPUSH
3530: PPUSH
// if not mines then
3531: LD_VAR 0 2
3535: NOT
3536: IFFALSE 3540
// exit ;
3538: GO 3684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3540: LD_ADDR_VAR 0 5
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_VAR 0 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_INT 21
3562: PUSH
3563: LD_INT 3
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: ST_TO_ADDR
// for i in mines do
3583: LD_ADDR_VAR 0 4
3587: PUSH
3588: LD_VAR 0 2
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3682
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 4
3609: PUSH
3610: LD_INT 2
3612: ARRAY
3613: PPUSH
3614: CALL_OW 458
3618: NOT
3619: IFFALSE 3623
// continue ;
3621: GO 3593
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3623: LD_VAR 0 4
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 4
3636: PUSH
3637: LD_INT 2
3639: ARRAY
3640: PPUSH
3641: CALL_OW 428
3645: PUSH
3646: LD_VAR 0 5
3650: IN
3651: IFFALSE 3680
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: LD_VAR 0 4
3666: PUSH
3667: LD_INT 2
3669: ARRAY
3670: PPUSH
3671: LD_VAR 0 1
3675: PPUSH
3676: CALL_OW 456
// end ;
3680: GO 3593
3682: POP
3683: POP
// end ;
3684: LD_VAR 0 3
3688: RET
// export function Count ( array ) ; var i ; begin
3689: LD_INT 0
3691: PPUSH
3692: PPUSH
// result := 0 ;
3693: LD_ADDR_VAR 0 2
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// for i in array do
3701: LD_ADDR_VAR 0 3
3705: PUSH
3706: LD_VAR 0 1
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3736
// if i then
3714: LD_VAR 0 3
3718: IFFALSE 3734
// result := result + 1 ;
3720: LD_ADDR_VAR 0 2
3724: PUSH
3725: LD_VAR 0 2
3729: PUSH
3730: LD_INT 1
3732: PLUS
3733: ST_TO_ADDR
3734: GO 3711
3736: POP
3737: POP
// end ;
3738: LD_VAR 0 2
3742: RET
// export function IsEmpty ( building ) ; begin
3743: LD_INT 0
3745: PPUSH
// if not building then
3746: LD_VAR 0 1
3750: NOT
3751: IFFALSE 3755
// exit ;
3753: GO 3798
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3755: LD_ADDR_VAR 0 2
3759: PUSH
3760: LD_VAR 0 1
3764: PUSH
3765: LD_INT 22
3767: PUSH
3768: LD_VAR 0 1
3772: PPUSH
3773: CALL_OW 255
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: LD_INT 58
3784: PUSH
3785: EMPTY
3786: LIST
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: PPUSH
3792: CALL_OW 69
3796: IN
3797: ST_TO_ADDR
// end ;
3798: LD_VAR 0 2
3802: RET
// export function IsNotFull ( building ) ; var places ; begin
3803: LD_INT 0
3805: PPUSH
3806: PPUSH
// if not building then
3807: LD_VAR 0 1
3811: NOT
3812: IFFALSE 3816
// exit ;
3814: GO 3987
// result := false ;
3816: LD_ADDR_VAR 0 2
3820: PUSH
3821: LD_INT 0
3823: ST_TO_ADDR
// places := 0 ;
3824: LD_ADDR_VAR 0 3
3828: PUSH
3829: LD_INT 0
3831: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 266
3841: PUSH
3842: LD_INT 0
3844: DOUBLE
3845: EQUAL
3846: IFTRUE 3904
3848: LD_INT 1
3850: DOUBLE
3851: EQUAL
3852: IFTRUE 3904
3854: LD_INT 6
3856: DOUBLE
3857: EQUAL
3858: IFTRUE 3904
3860: LD_INT 7
3862: DOUBLE
3863: EQUAL
3864: IFTRUE 3904
3866: LD_INT 8
3868: DOUBLE
3869: EQUAL
3870: IFTRUE 3904
3872: LD_INT 4
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3904
3878: LD_INT 5
3880: DOUBLE
3881: EQUAL
3882: IFTRUE 3904
3884: LD_INT 2
3886: DOUBLE
3887: EQUAL
3888: IFTRUE 3904
3890: LD_INT 3
3892: DOUBLE
3893: EQUAL
3894: IFTRUE 3904
3896: LD_INT 35
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3915
3904: POP
// places := 6 ; b_bunker , b_breastwork :
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: LD_INT 6
3912: ST_TO_ADDR
3913: GO 3960
3915: LD_INT 32
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3929
3921: LD_INT 31
3923: DOUBLE
3924: EQUAL
3925: IFTRUE 3929
3927: GO 3940
3929: POP
// places := 1 ; b_control_tower :
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
3938: GO 3960
3940: LD_INT 36
3942: DOUBLE
3943: EQUAL
3944: IFTRUE 3948
3946: GO 3959
3948: POP
// places := 3 ; end ;
3949: LD_ADDR_VAR 0 3
3953: PUSH
3954: LD_INT 3
3956: ST_TO_ADDR
3957: GO 3960
3959: POP
// if places then
3960: LD_VAR 0 3
3964: IFFALSE 3987
// result := UnitsInside ( building ) < places ;
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: LD_VAR 0 1
3975: PPUSH
3976: CALL_OW 313
3980: PUSH
3981: LD_VAR 0 3
3985: LESS
3986: ST_TO_ADDR
// end ;
3987: LD_VAR 0 2
3991: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
// tmp := [ ] ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: EMPTY
4004: ST_TO_ADDR
// list := [ ] ;
4005: LD_ADDR_VAR 0 5
4009: PUSH
4010: EMPTY
4011: ST_TO_ADDR
// for i = 16 to 25 do
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: DOUBLE
4018: LD_INT 16
4020: DEC
4021: ST_TO_ADDR
4022: LD_INT 25
4024: PUSH
4025: FOR_TO
4026: IFFALSE 4099
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: LD_VAR 0 3
4037: PUSH
4038: LD_INT 22
4040: PUSH
4041: LD_VAR 0 1
4045: PPUSH
4046: CALL_OW 255
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 91
4057: PUSH
4058: LD_VAR 0 1
4062: PUSH
4063: LD_INT 6
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: PUSH
4071: LD_INT 30
4073: PUSH
4074: LD_VAR 0 4
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: PPUSH
4091: CALL_OW 69
4095: ADD
4096: ST_TO_ADDR
4097: GO 4025
4099: POP
4100: POP
// for i = 1 to tmp do
4101: LD_ADDR_VAR 0 4
4105: PUSH
4106: DOUBLE
4107: LD_INT 1
4109: DEC
4110: ST_TO_ADDR
4111: LD_VAR 0 3
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4205
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4119: LD_ADDR_VAR 0 5
4123: PUSH
4124: LD_VAR 0 5
4128: PUSH
4129: LD_VAR 0 3
4133: PUSH
4134: LD_VAR 0 4
4138: ARRAY
4139: PPUSH
4140: CALL_OW 266
4144: PUSH
4145: LD_VAR 0 3
4149: PUSH
4150: LD_VAR 0 4
4154: ARRAY
4155: PPUSH
4156: CALL_OW 250
4160: PUSH
4161: LD_VAR 0 3
4165: PUSH
4166: LD_VAR 0 4
4170: ARRAY
4171: PPUSH
4172: CALL_OW 251
4176: PUSH
4177: LD_VAR 0 3
4181: PUSH
4182: LD_VAR 0 4
4186: ARRAY
4187: PPUSH
4188: CALL_OW 254
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: ADD
4202: ST_TO_ADDR
4203: GO 4116
4205: POP
4206: POP
// result := list ;
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: LD_VAR 0 5
4216: ST_TO_ADDR
// end ;
4217: LD_VAR 0 2
4221: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4222: LD_INT 0
4224: PPUSH
4225: PPUSH
4226: PPUSH
4227: PPUSH
4228: PPUSH
4229: PPUSH
4230: PPUSH
// if not factory then
4231: LD_VAR 0 1
4235: NOT
4236: IFFALSE 4240
// exit ;
4238: GO 4833
// if control = control_apeman then
4240: LD_VAR 0 4
4244: PUSH
4245: LD_INT 5
4247: EQUAL
4248: IFFALSE 4357
// begin tmp := UnitsInside ( factory ) ;
4250: LD_ADDR_VAR 0 8
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 313
4264: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4265: LD_VAR 0 8
4269: PPUSH
4270: LD_INT 25
4272: PUSH
4273: LD_INT 12
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PPUSH
4280: CALL_OW 72
4284: NOT
4285: IFFALSE 4295
// control := control_manual ;
4287: LD_ADDR_VAR 0 4
4291: PUSH
4292: LD_INT 1
4294: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4295: LD_ADDR_VAR 0 8
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL 3992 0 1
4309: ST_TO_ADDR
// if tmp then
4310: LD_VAR 0 8
4314: IFFALSE 4357
// begin for i in tmp do
4316: LD_ADDR_VAR 0 7
4320: PUSH
4321: LD_VAR 0 8
4325: PUSH
4326: FOR_IN
4327: IFFALSE 4355
// if i [ 1 ] = b_ext_radio then
4329: LD_VAR 0 7
4333: PUSH
4334: LD_INT 1
4336: ARRAY
4337: PUSH
4338: LD_INT 22
4340: EQUAL
4341: IFFALSE 4353
// begin control := control_remote ;
4343: LD_ADDR_VAR 0 4
4347: PUSH
4348: LD_INT 2
4350: ST_TO_ADDR
// break ;
4351: GO 4355
// end ;
4353: GO 4326
4355: POP
4356: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_VAR 0 2
4366: PPUSH
4367: LD_VAR 0 3
4371: PPUSH
4372: LD_VAR 0 4
4376: PPUSH
4377: LD_VAR 0 5
4381: PPUSH
4382: CALL_OW 448
4386: IFFALSE 4421
// begin result := [ chassis , engine , control , weapon ] ;
4388: LD_ADDR_VAR 0 6
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_VAR 0 3
4402: PUSH
4403: LD_VAR 0 4
4407: PUSH
4408: LD_VAR 0 5
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
// exit ;
4419: GO 4833
// end ; _chassis := AvailableChassisList ( factory ) ;
4421: LD_ADDR_VAR 0 9
4425: PUSH
4426: LD_VAR 0 1
4430: PPUSH
4431: CALL_OW 475
4435: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4436: LD_ADDR_VAR 0 11
4440: PUSH
4441: LD_VAR 0 1
4445: PPUSH
4446: CALL_OW 476
4450: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4451: LD_ADDR_VAR 0 12
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 477
4465: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4466: LD_ADDR_VAR 0 10
4470: PUSH
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL_OW 478
4480: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4481: LD_VAR 0 9
4485: NOT
4486: PUSH
4487: LD_VAR 0 11
4491: NOT
4492: OR
4493: PUSH
4494: LD_VAR 0 12
4498: NOT
4499: OR
4500: PUSH
4501: LD_VAR 0 10
4505: NOT
4506: OR
4507: IFFALSE 4542
// begin result := [ chassis , engine , control , weapon ] ;
4509: LD_ADDR_VAR 0 6
4513: PUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_VAR 0 3
4523: PUSH
4524: LD_VAR 0 4
4528: PUSH
4529: LD_VAR 0 5
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: ST_TO_ADDR
// exit ;
4540: GO 4833
// end ; if not chassis in _chassis then
4542: LD_VAR 0 2
4546: PUSH
4547: LD_VAR 0 9
4551: IN
4552: NOT
4553: IFFALSE 4579
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_VAR 0 9
4564: PUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: CALL_OW 12
4577: ARRAY
4578: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4579: LD_VAR 0 2
4583: PPUSH
4584: LD_VAR 0 3
4588: PPUSH
4589: CALL 4838 0 2
4593: NOT
4594: IFFALSE 4653
// repeat engine := _engine [ 1 ] ;
4596: LD_ADDR_VAR 0 3
4600: PUSH
4601: LD_VAR 0 11
4605: PUSH
4606: LD_INT 1
4608: ARRAY
4609: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4610: LD_ADDR_VAR 0 11
4614: PUSH
4615: LD_VAR 0 11
4619: PPUSH
4620: LD_INT 1
4622: PPUSH
4623: CALL_OW 3
4627: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4628: LD_VAR 0 2
4632: PPUSH
4633: LD_VAR 0 3
4637: PPUSH
4638: CALL 4838 0 2
4642: PUSH
4643: LD_VAR 0 11
4647: PUSH
4648: EMPTY
4649: EQUAL
4650: OR
4651: IFFALSE 4596
// if not control in _control then
4653: LD_VAR 0 4
4657: PUSH
4658: LD_VAR 0 12
4662: IN
4663: NOT
4664: IFFALSE 4690
// control := _control [ rand ( 1 , _control ) ] ;
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: LD_VAR 0 12
4675: PUSH
4676: LD_INT 1
4678: PPUSH
4679: LD_VAR 0 12
4683: PPUSH
4684: CALL_OW 12
4688: ARRAY
4689: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4690: LD_VAR 0 2
4694: PPUSH
4695: LD_VAR 0 5
4699: PPUSH
4700: CALL 5058 0 2
4704: NOT
4705: IFFALSE 4764
// repeat weapon := _weapon [ 1 ] ;
4707: LD_ADDR_VAR 0 5
4711: PUSH
4712: LD_VAR 0 10
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4721: LD_ADDR_VAR 0 10
4725: PUSH
4726: LD_VAR 0 10
4730: PPUSH
4731: LD_INT 1
4733: PPUSH
4734: CALL_OW 3
4738: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_VAR 0 5
4748: PPUSH
4749: CALL 5058 0 2
4753: PUSH
4754: LD_VAR 0 10
4758: PUSH
4759: EMPTY
4760: EQUAL
4761: OR
4762: IFFALSE 4707
// result := [ ] ;
4764: LD_ADDR_VAR 0 6
4768: PUSH
4769: EMPTY
4770: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4771: LD_VAR 0 1
4775: PPUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_VAR 0 3
4785: PPUSH
4786: LD_VAR 0 4
4790: PPUSH
4791: LD_VAR 0 5
4795: PPUSH
4796: CALL_OW 448
4800: IFFALSE 4833
// result := [ chassis , engine , control , weapon ] ;
4802: LD_ADDR_VAR 0 6
4806: PUSH
4807: LD_VAR 0 2
4811: PUSH
4812: LD_VAR 0 3
4816: PUSH
4817: LD_VAR 0 4
4821: PUSH
4822: LD_VAR 0 5
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 6
4837: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4838: LD_INT 0
4840: PPUSH
// if not chassis or not engine then
4841: LD_VAR 0 1
4845: NOT
4846: PUSH
4847: LD_VAR 0 2
4851: NOT
4852: OR
4853: IFFALSE 4857
// exit ;
4855: GO 5053
// case engine of engine_solar :
4857: LD_VAR 0 2
4861: PUSH
4862: LD_INT 2
4864: DOUBLE
4865: EQUAL
4866: IFTRUE 4870
4868: GO 4908
4870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4871: LD_ADDR_VAR 0 3
4875: PUSH
4876: LD_INT 11
4878: PUSH
4879: LD_INT 12
4881: PUSH
4882: LD_INT 13
4884: PUSH
4885: LD_INT 14
4887: PUSH
4888: LD_INT 1
4890: PUSH
4891: LD_INT 2
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: ST_TO_ADDR
4906: GO 5037
4908: LD_INT 1
4910: DOUBLE
4911: EQUAL
4912: IFTRUE 4916
4914: GO 4978
4916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4917: LD_ADDR_VAR 0 3
4921: PUSH
4922: LD_INT 11
4924: PUSH
4925: LD_INT 12
4927: PUSH
4928: LD_INT 13
4930: PUSH
4931: LD_INT 14
4933: PUSH
4934: LD_INT 1
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: LD_INT 4
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: LD_INT 21
4951: PUSH
4952: LD_INT 23
4954: PUSH
4955: LD_INT 22
4957: PUSH
4958: LD_INT 24
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
4976: GO 5037
4978: LD_INT 3
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5036
4986: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4987: LD_ADDR_VAR 0 3
4991: PUSH
4992: LD_INT 13
4994: PUSH
4995: LD_INT 14
4997: PUSH
4998: LD_INT 2
5000: PUSH
5001: LD_INT 3
5003: PUSH
5004: LD_INT 4
5006: PUSH
5007: LD_INT 5
5009: PUSH
5010: LD_INT 21
5012: PUSH
5013: LD_INT 22
5015: PUSH
5016: LD_INT 23
5018: PUSH
5019: LD_INT 24
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: ST_TO_ADDR
5034: GO 5037
5036: POP
// result := ( chassis in result ) ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: LD_VAR 0 1
5046: PUSH
5047: LD_VAR 0 3
5051: IN
5052: ST_TO_ADDR
// end ;
5053: LD_VAR 0 3
5057: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5058: LD_INT 0
5060: PPUSH
// if not chassis or not weapon then
5061: LD_VAR 0 1
5065: NOT
5066: PUSH
5067: LD_VAR 0 2
5071: NOT
5072: OR
5073: IFFALSE 5077
// exit ;
5075: GO 6137
// case weapon of us_machine_gun :
5077: LD_VAR 0 2
5081: PUSH
5082: LD_INT 2
5084: DOUBLE
5085: EQUAL
5086: IFTRUE 5090
5088: GO 5120
5090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5091: LD_ADDR_VAR 0 3
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: LD_INT 3
5104: PUSH
5105: LD_INT 4
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
5118: GO 6121
5120: LD_INT 3
5122: DOUBLE
5123: EQUAL
5124: IFTRUE 5128
5126: GO 5158
5128: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5129: LD_ADDR_VAR 0 3
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 4
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: ST_TO_ADDR
5156: GO 6121
5158: LD_INT 11
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5166
5164: GO 5196
5166: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: LD_INT 2
5177: PUSH
5178: LD_INT 3
5180: PUSH
5181: LD_INT 4
5183: PUSH
5184: LD_INT 5
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: ST_TO_ADDR
5194: GO 6121
5196: LD_INT 4
5198: DOUBLE
5199: EQUAL
5200: IFTRUE 5204
5202: GO 5230
5204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5205: LD_ADDR_VAR 0 3
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: LD_INT 3
5215: PUSH
5216: LD_INT 4
5218: PUSH
5219: LD_INT 5
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: ST_TO_ADDR
5228: GO 6121
5230: LD_INT 5
5232: DOUBLE
5233: EQUAL
5234: IFTRUE 5238
5236: GO 5264
5238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5239: LD_ADDR_VAR 0 3
5243: PUSH
5244: LD_INT 2
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 4
5252: PUSH
5253: LD_INT 5
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: ST_TO_ADDR
5262: GO 6121
5264: LD_INT 9
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5298
5272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5273: LD_ADDR_VAR 0 3
5277: PUSH
5278: LD_INT 2
5280: PUSH
5281: LD_INT 3
5283: PUSH
5284: LD_INT 4
5286: PUSH
5287: LD_INT 5
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: ST_TO_ADDR
5296: GO 6121
5298: LD_INT 7
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5306
5304: GO 5332
5306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: LD_INT 3
5317: PUSH
5318: LD_INT 4
5320: PUSH
5321: LD_INT 5
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: ST_TO_ADDR
5330: GO 6121
5332: LD_INT 12
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5366
5340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5341: LD_ADDR_VAR 0 3
5345: PUSH
5346: LD_INT 2
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 4
5354: PUSH
5355: LD_INT 5
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: ST_TO_ADDR
5364: GO 6121
5366: LD_INT 13
5368: DOUBLE
5369: EQUAL
5370: IFTRUE 5374
5372: GO 5400
5374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: LD_INT 2
5382: PUSH
5383: LD_INT 3
5385: PUSH
5386: LD_INT 4
5388: PUSH
5389: LD_INT 5
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: ST_TO_ADDR
5398: GO 6121
5400: LD_INT 14
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5426
5408: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: LD_INT 4
5416: PUSH
5417: LD_INT 5
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 6121
5426: LD_INT 6
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5452
5434: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_INT 4
5442: PUSH
5443: LD_INT 5
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
5450: GO 6121
5452: LD_INT 10
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5460
5458: GO 5478
5460: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5461: LD_ADDR_VAR 0 3
5465: PUSH
5466: LD_INT 4
5468: PUSH
5469: LD_INT 5
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: ST_TO_ADDR
5476: GO 6121
5478: LD_INT 22
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5512
5486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_INT 11
5494: PUSH
5495: LD_INT 12
5497: PUSH
5498: LD_INT 13
5500: PUSH
5501: LD_INT 14
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
5510: GO 6121
5512: LD_INT 23
5514: DOUBLE
5515: EQUAL
5516: IFTRUE 5520
5518: GO 5546
5520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 11
5528: PUSH
5529: LD_INT 12
5531: PUSH
5532: LD_INT 13
5534: PUSH
5535: LD_INT 14
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: ST_TO_ADDR
5544: GO 6121
5546: LD_INT 24
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5580
5554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_INT 11
5562: PUSH
5563: LD_INT 12
5565: PUSH
5566: LD_INT 13
5568: PUSH
5569: LD_INT 14
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: ST_TO_ADDR
5578: GO 6121
5580: LD_INT 30
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5588
5586: GO 5614
5588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_INT 11
5596: PUSH
5597: LD_INT 12
5599: PUSH
5600: LD_INT 13
5602: PUSH
5603: LD_INT 14
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: ST_TO_ADDR
5612: GO 6121
5614: LD_INT 25
5616: DOUBLE
5617: EQUAL
5618: IFTRUE 5622
5620: GO 5640
5622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: LD_INT 13
5630: PUSH
5631: LD_INT 14
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: ST_TO_ADDR
5638: GO 6121
5640: LD_INT 27
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5648
5646: GO 5666
5648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_INT 13
5656: PUSH
5657: LD_INT 14
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: ST_TO_ADDR
5664: GO 6121
5666: LD_INT 92
5668: DOUBLE
5669: EQUAL
5670: IFTRUE 5674
5672: GO 5700
5674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5675: LD_ADDR_VAR 0 3
5679: PUSH
5680: LD_INT 11
5682: PUSH
5683: LD_INT 12
5685: PUSH
5686: LD_INT 13
5688: PUSH
5689: LD_INT 14
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: ST_TO_ADDR
5698: GO 6121
5700: LD_INT 28
5702: DOUBLE
5703: EQUAL
5704: IFTRUE 5708
5706: GO 5726
5708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5709: LD_ADDR_VAR 0 3
5713: PUSH
5714: LD_INT 13
5716: PUSH
5717: LD_INT 14
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: ST_TO_ADDR
5724: GO 6121
5726: LD_INT 29
5728: DOUBLE
5729: EQUAL
5730: IFTRUE 5734
5732: GO 5752
5734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: LD_INT 13
5742: PUSH
5743: LD_INT 14
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: ST_TO_ADDR
5750: GO 6121
5752: LD_INT 31
5754: DOUBLE
5755: EQUAL
5756: IFTRUE 5760
5758: GO 5778
5760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5761: LD_ADDR_VAR 0 3
5765: PUSH
5766: LD_INT 13
5768: PUSH
5769: LD_INT 14
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: ST_TO_ADDR
5776: GO 6121
5778: LD_INT 26
5780: DOUBLE
5781: EQUAL
5782: IFTRUE 5786
5784: GO 5804
5786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 13
5794: PUSH
5795: LD_INT 14
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: ST_TO_ADDR
5802: GO 6121
5804: LD_INT 42
5806: DOUBLE
5807: EQUAL
5808: IFTRUE 5812
5810: GO 5838
5812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5813: LD_ADDR_VAR 0 3
5817: PUSH
5818: LD_INT 21
5820: PUSH
5821: LD_INT 22
5823: PUSH
5824: LD_INT 23
5826: PUSH
5827: LD_INT 24
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: ST_TO_ADDR
5836: GO 6121
5838: LD_INT 43
5840: DOUBLE
5841: EQUAL
5842: IFTRUE 5846
5844: GO 5872
5846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5847: LD_ADDR_VAR 0 3
5851: PUSH
5852: LD_INT 21
5854: PUSH
5855: LD_INT 22
5857: PUSH
5858: LD_INT 23
5860: PUSH
5861: LD_INT 24
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: ST_TO_ADDR
5870: GO 6121
5872: LD_INT 44
5874: DOUBLE
5875: EQUAL
5876: IFTRUE 5880
5878: GO 5906
5880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5881: LD_ADDR_VAR 0 3
5885: PUSH
5886: LD_INT 21
5888: PUSH
5889: LD_INT 22
5891: PUSH
5892: LD_INT 23
5894: PUSH
5895: LD_INT 24
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: ST_TO_ADDR
5904: GO 6121
5906: LD_INT 45
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5914
5912: GO 5940
5914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5915: LD_ADDR_VAR 0 3
5919: PUSH
5920: LD_INT 21
5922: PUSH
5923: LD_INT 22
5925: PUSH
5926: LD_INT 23
5928: PUSH
5929: LD_INT 24
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: ST_TO_ADDR
5938: GO 6121
5940: LD_INT 49
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5948
5946: GO 5974
5948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 21
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 24
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: ST_TO_ADDR
5972: GO 6121
5974: LD_INT 51
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 5982
5980: GO 6008
5982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5983: LD_ADDR_VAR 0 3
5987: PUSH
5988: LD_INT 21
5990: PUSH
5991: LD_INT 22
5993: PUSH
5994: LD_INT 23
5996: PUSH
5997: LD_INT 24
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: ST_TO_ADDR
6006: GO 6121
6008: LD_INT 52
6010: DOUBLE
6011: EQUAL
6012: IFTRUE 6016
6014: GO 6042
6016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 21
6024: PUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 23
6030: PUSH
6031: LD_INT 24
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: ST_TO_ADDR
6040: GO 6121
6042: LD_INT 53
6044: DOUBLE
6045: EQUAL
6046: IFTRUE 6050
6048: GO 6068
6050: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 23
6058: PUSH
6059: LD_INT 24
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: ST_TO_ADDR
6066: GO 6121
6068: LD_INT 46
6070: DOUBLE
6071: EQUAL
6072: IFTRUE 6076
6074: GO 6094
6076: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6077: LD_ADDR_VAR 0 3
6081: PUSH
6082: LD_INT 23
6084: PUSH
6085: LD_INT 24
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: ST_TO_ADDR
6092: GO 6121
6094: LD_INT 47
6096: DOUBLE
6097: EQUAL
6098: IFTRUE 6102
6100: GO 6120
6102: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6103: LD_ADDR_VAR 0 3
6107: PUSH
6108: LD_INT 23
6110: PUSH
6111: LD_INT 24
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: ST_TO_ADDR
6118: GO 6121
6120: POP
// result := ( chassis in result ) ;
6121: LD_ADDR_VAR 0 3
6125: PUSH
6126: LD_VAR 0 1
6130: PUSH
6131: LD_VAR 0 3
6135: IN
6136: ST_TO_ADDR
// end ;
6137: LD_VAR 0 3
6141: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6142: LD_INT 0
6144: PPUSH
6145: PPUSH
6146: PPUSH
6147: PPUSH
6148: PPUSH
6149: PPUSH
6150: PPUSH
// result := array ;
6151: LD_ADDR_VAR 0 5
6155: PUSH
6156: LD_VAR 0 1
6160: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6161: LD_VAR 0 1
6165: NOT
6166: PUSH
6167: LD_VAR 0 2
6171: NOT
6172: OR
6173: PUSH
6174: LD_VAR 0 3
6178: NOT
6179: OR
6180: PUSH
6181: LD_VAR 0 2
6185: PUSH
6186: LD_VAR 0 1
6190: GREATER
6191: OR
6192: PUSH
6193: LD_VAR 0 3
6197: PUSH
6198: LD_VAR 0 1
6202: GREATER
6203: OR
6204: IFFALSE 6208
// exit ;
6206: GO 6504
// if direction then
6208: LD_VAR 0 4
6212: IFFALSE 6276
// begin d := 1 ;
6214: LD_ADDR_VAR 0 9
6218: PUSH
6219: LD_INT 1
6221: ST_TO_ADDR
// if i_from > i_to then
6222: LD_VAR 0 2
6226: PUSH
6227: LD_VAR 0 3
6231: GREATER
6232: IFFALSE 6258
// length := ( array - i_from ) + i_to else
6234: LD_ADDR_VAR 0 11
6238: PUSH
6239: LD_VAR 0 1
6243: PUSH
6244: LD_VAR 0 2
6248: MINUS
6249: PUSH
6250: LD_VAR 0 3
6254: PLUS
6255: ST_TO_ADDR
6256: GO 6274
// length := i_to - i_from ;
6258: LD_ADDR_VAR 0 11
6262: PUSH
6263: LD_VAR 0 3
6267: PUSH
6268: LD_VAR 0 2
6272: MINUS
6273: ST_TO_ADDR
// end else
6274: GO 6337
// begin d := - 1 ;
6276: LD_ADDR_VAR 0 9
6280: PUSH
6281: LD_INT 1
6283: NEG
6284: ST_TO_ADDR
// if i_from > i_to then
6285: LD_VAR 0 2
6289: PUSH
6290: LD_VAR 0 3
6294: GREATER
6295: IFFALSE 6315
// length := i_from - i_to else
6297: LD_ADDR_VAR 0 11
6301: PUSH
6302: LD_VAR 0 2
6306: PUSH
6307: LD_VAR 0 3
6311: MINUS
6312: ST_TO_ADDR
6313: GO 6337
// length := ( array - i_to ) + i_from ;
6315: LD_ADDR_VAR 0 11
6319: PUSH
6320: LD_VAR 0 1
6324: PUSH
6325: LD_VAR 0 3
6329: MINUS
6330: PUSH
6331: LD_VAR 0 2
6335: PLUS
6336: ST_TO_ADDR
// end ; if not length then
6337: LD_VAR 0 11
6341: NOT
6342: IFFALSE 6346
// exit ;
6344: GO 6504
// tmp := array ;
6346: LD_ADDR_VAR 0 10
6350: PUSH
6351: LD_VAR 0 1
6355: ST_TO_ADDR
// for i = 1 to length do
6356: LD_ADDR_VAR 0 6
6360: PUSH
6361: DOUBLE
6362: LD_INT 1
6364: DEC
6365: ST_TO_ADDR
6366: LD_VAR 0 11
6370: PUSH
6371: FOR_TO
6372: IFFALSE 6492
// begin for j = 1 to array do
6374: LD_ADDR_VAR 0 7
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 1
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6478
// begin k := j + d ;
6392: LD_ADDR_VAR 0 8
6396: PUSH
6397: LD_VAR 0 7
6401: PUSH
6402: LD_VAR 0 9
6406: PLUS
6407: ST_TO_ADDR
// if k > array then
6408: LD_VAR 0 8
6412: PUSH
6413: LD_VAR 0 1
6417: GREATER
6418: IFFALSE 6428
// k := 1 ;
6420: LD_ADDR_VAR 0 8
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// if not k then
6428: LD_VAR 0 8
6432: NOT
6433: IFFALSE 6445
// k := array ;
6435: LD_ADDR_VAR 0 8
6439: PUSH
6440: LD_VAR 0 1
6444: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6445: LD_ADDR_VAR 0 10
6449: PUSH
6450: LD_VAR 0 10
6454: PPUSH
6455: LD_VAR 0 8
6459: PPUSH
6460: LD_VAR 0 1
6464: PUSH
6465: LD_VAR 0 7
6469: ARRAY
6470: PPUSH
6471: CALL_OW 1
6475: ST_TO_ADDR
// end ;
6476: GO 6389
6478: POP
6479: POP
// array := tmp ;
6480: LD_ADDR_VAR 0 1
6484: PUSH
6485: LD_VAR 0 10
6489: ST_TO_ADDR
// end ;
6490: GO 6371
6492: POP
6493: POP
// result := array ;
6494: LD_ADDR_VAR 0 5
6498: PUSH
6499: LD_VAR 0 1
6503: ST_TO_ADDR
// end ;
6504: LD_VAR 0 5
6508: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6509: LD_INT 0
6511: PPUSH
6512: PPUSH
// result := 0 ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: LD_INT 0
6520: ST_TO_ADDR
// if not array or not value in array then
6521: LD_VAR 0 1
6525: NOT
6526: PUSH
6527: LD_VAR 0 2
6531: PUSH
6532: LD_VAR 0 1
6536: IN
6537: NOT
6538: OR
6539: IFFALSE 6543
// exit ;
6541: GO 6597
// for i = 1 to array do
6543: LD_ADDR_VAR 0 4
6547: PUSH
6548: DOUBLE
6549: LD_INT 1
6551: DEC
6552: ST_TO_ADDR
6553: LD_VAR 0 1
6557: PUSH
6558: FOR_TO
6559: IFFALSE 6595
// if value = array [ i ] then
6561: LD_VAR 0 2
6565: PUSH
6566: LD_VAR 0 1
6570: PUSH
6571: LD_VAR 0 4
6575: ARRAY
6576: EQUAL
6577: IFFALSE 6593
// begin result := i ;
6579: LD_ADDR_VAR 0 3
6583: PUSH
6584: LD_VAR 0 4
6588: ST_TO_ADDR
// exit ;
6589: POP
6590: POP
6591: GO 6597
// end ;
6593: GO 6558
6595: POP
6596: POP
// end ;
6597: LD_VAR 0 3
6601: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6602: LD_INT 0
6604: PPUSH
// vc_chassis := chassis ;
6605: LD_ADDR_OWVAR 37
6609: PUSH
6610: LD_VAR 0 1
6614: ST_TO_ADDR
// vc_engine := engine ;
6615: LD_ADDR_OWVAR 39
6619: PUSH
6620: LD_VAR 0 2
6624: ST_TO_ADDR
// vc_control := control ;
6625: LD_ADDR_OWVAR 38
6629: PUSH
6630: LD_VAR 0 3
6634: ST_TO_ADDR
// vc_weapon := weapon ;
6635: LD_ADDR_OWVAR 40
6639: PUSH
6640: LD_VAR 0 4
6644: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6645: LD_ADDR_OWVAR 41
6649: PUSH
6650: LD_VAR 0 5
6654: ST_TO_ADDR
// end ;
6655: LD_VAR 0 6
6659: RET
// export function WantPlant ( unit ) ; var task ; begin
6660: LD_INT 0
6662: PPUSH
6663: PPUSH
// result := false ;
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: LD_INT 0
6671: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 437
6686: ST_TO_ADDR
// if task then
6687: LD_VAR 0 3
6691: IFFALSE 6719
// if task [ 1 ] [ 1 ] = p then
6693: LD_VAR 0 3
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PUSH
6702: LD_INT 1
6704: ARRAY
6705: PUSH
6706: LD_STRING p
6708: EQUAL
6709: IFFALSE 6719
// result := true ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// end ;
6719: LD_VAR 0 2
6723: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6724: LD_INT 0
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
// if pos < 1 then
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: LESS
6738: IFFALSE 6742
// exit ;
6740: GO 7045
// if pos = 1 then
6742: LD_VAR 0 2
6746: PUSH
6747: LD_INT 1
6749: EQUAL
6750: IFFALSE 6783
// result := Replace ( arr , pos [ 1 ] , value ) else
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: LD_VAR 0 1
6761: PPUSH
6762: LD_VAR 0 2
6766: PUSH
6767: LD_INT 1
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 3
6775: PPUSH
6776: CALL_OW 1
6780: ST_TO_ADDR
6781: GO 7045
// begin tmp := arr ;
6783: LD_ADDR_VAR 0 6
6787: PUSH
6788: LD_VAR 0 1
6792: ST_TO_ADDR
// s_arr := [ tmp ] ;
6793: LD_ADDR_VAR 0 7
6797: PUSH
6798: LD_VAR 0 6
6802: PUSH
6803: EMPTY
6804: LIST
6805: ST_TO_ADDR
// for i = 1 to pos - 1 do
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: DOUBLE
6812: LD_INT 1
6814: DEC
6815: ST_TO_ADDR
6816: LD_VAR 0 2
6820: PUSH
6821: LD_INT 1
6823: MINUS
6824: PUSH
6825: FOR_TO
6826: IFFALSE 6871
// begin tmp := tmp [ pos [ i ] ] ;
6828: LD_ADDR_VAR 0 6
6832: PUSH
6833: LD_VAR 0 6
6837: PUSH
6838: LD_VAR 0 2
6842: PUSH
6843: LD_VAR 0 5
6847: ARRAY
6848: ARRAY
6849: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6850: LD_ADDR_VAR 0 7
6854: PUSH
6855: LD_VAR 0 7
6859: PUSH
6860: LD_VAR 0 6
6864: PUSH
6865: EMPTY
6866: LIST
6867: ADD
6868: ST_TO_ADDR
// end ;
6869: GO 6825
6871: POP
6872: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6873: LD_ADDR_VAR 0 6
6877: PUSH
6878: LD_VAR 0 6
6882: PPUSH
6883: LD_VAR 0 2
6887: PUSH
6888: LD_VAR 0 2
6892: ARRAY
6893: PPUSH
6894: LD_VAR 0 3
6898: PPUSH
6899: CALL_OW 1
6903: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6904: LD_ADDR_VAR 0 7
6908: PUSH
6909: LD_VAR 0 7
6913: PPUSH
6914: LD_VAR 0 7
6918: PPUSH
6919: LD_VAR 0 6
6923: PPUSH
6924: CALL_OW 1
6928: ST_TO_ADDR
// for i = s_arr downto 2 do
6929: LD_ADDR_VAR 0 5
6933: PUSH
6934: DOUBLE
6935: LD_VAR 0 7
6939: INC
6940: ST_TO_ADDR
6941: LD_INT 2
6943: PUSH
6944: FOR_DOWNTO
6945: IFFALSE 7029
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6947: LD_ADDR_VAR 0 6
6951: PUSH
6952: LD_VAR 0 7
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 1
6964: MINUS
6965: ARRAY
6966: PPUSH
6967: LD_VAR 0 2
6971: PUSH
6972: LD_VAR 0 5
6976: PUSH
6977: LD_INT 1
6979: MINUS
6980: ARRAY
6981: PPUSH
6982: LD_VAR 0 7
6986: PUSH
6987: LD_VAR 0 5
6991: ARRAY
6992: PPUSH
6993: CALL_OW 1
6997: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6998: LD_ADDR_VAR 0 7
7002: PUSH
7003: LD_VAR 0 7
7007: PPUSH
7008: LD_VAR 0 5
7012: PUSH
7013: LD_INT 1
7015: MINUS
7016: PPUSH
7017: LD_VAR 0 6
7021: PPUSH
7022: CALL_OW 1
7026: ST_TO_ADDR
// end ;
7027: GO 6944
7029: POP
7030: POP
// result := s_arr [ 1 ] ;
7031: LD_ADDR_VAR 0 4
7035: PUSH
7036: LD_VAR 0 7
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: ST_TO_ADDR
// end ; end ;
7045: LD_VAR 0 4
7049: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7050: LD_INT 0
7052: PPUSH
7053: PPUSH
// if not list then
7054: LD_VAR 0 1
7058: NOT
7059: IFFALSE 7063
// exit ;
7061: GO 7154
// i := list [ pos1 ] ;
7063: LD_ADDR_VAR 0 5
7067: PUSH
7068: LD_VAR 0 1
7072: PUSH
7073: LD_VAR 0 2
7077: ARRAY
7078: ST_TO_ADDR
// if not i then
7079: LD_VAR 0 5
7083: NOT
7084: IFFALSE 7088
// exit ;
7086: GO 7154
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_VAR 0 1
7097: PPUSH
7098: LD_VAR 0 2
7102: PPUSH
7103: LD_VAR 0 1
7107: PUSH
7108: LD_VAR 0 3
7112: ARRAY
7113: PPUSH
7114: CALL_OW 1
7118: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7119: LD_ADDR_VAR 0 1
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: LD_VAR 0 3
7133: PPUSH
7134: LD_VAR 0 5
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
// result := list ;
7144: LD_ADDR_VAR 0 4
7148: PUSH
7149: LD_VAR 0 1
7153: ST_TO_ADDR
// end ;
7154: LD_VAR 0 4
7158: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7159: LD_INT 0
7161: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7162: LD_ADDR_VAR 0 5
7166: PUSH
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL_OW 250
7176: PPUSH
7177: LD_VAR 0 1
7181: PPUSH
7182: CALL_OW 251
7186: PPUSH
7187: LD_VAR 0 2
7191: PPUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: LD_VAR 0 4
7201: PPUSH
7202: CALL 7212 0 5
7206: ST_TO_ADDR
// end ;
7207: LD_VAR 0 5
7211: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7212: LD_INT 0
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
// if not list then
7218: LD_VAR 0 3
7222: NOT
7223: IFFALSE 7227
// exit ;
7225: GO 7615
// result := [ ] ;
7227: LD_ADDR_VAR 0 6
7231: PUSH
7232: EMPTY
7233: ST_TO_ADDR
// for i in list do
7234: LD_ADDR_VAR 0 7
7238: PUSH
7239: LD_VAR 0 3
7243: PUSH
7244: FOR_IN
7245: IFFALSE 7447
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7247: LD_ADDR_VAR 0 9
7251: PUSH
7252: LD_VAR 0 7
7256: PPUSH
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_VAR 0 2
7266: PPUSH
7267: CALL_OW 297
7271: ST_TO_ADDR
// if not result then
7272: LD_VAR 0 6
7276: NOT
7277: IFFALSE 7303
// result := [ [ i , tmp ] ] else
7279: LD_ADDR_VAR 0 6
7283: PUSH
7284: LD_VAR 0 7
7288: PUSH
7289: LD_VAR 0 9
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: ST_TO_ADDR
7301: GO 7445
// begin if result [ result ] [ 2 ] < tmp then
7303: LD_VAR 0 6
7307: PUSH
7308: LD_VAR 0 6
7312: ARRAY
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: PUSH
7318: LD_VAR 0 9
7322: LESS
7323: IFFALSE 7365
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7325: LD_ADDR_VAR 0 6
7329: PUSH
7330: LD_VAR 0 6
7334: PPUSH
7335: LD_VAR 0 6
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: PPUSH
7344: LD_VAR 0 7
7348: PUSH
7349: LD_VAR 0 9
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PPUSH
7358: CALL_OW 2
7362: ST_TO_ADDR
7363: GO 7445
// for j = 1 to result do
7365: LD_ADDR_VAR 0 8
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_VAR 0 6
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7443
// begin if tmp < result [ j ] [ 2 ] then
7383: LD_VAR 0 9
7387: PUSH
7388: LD_VAR 0 6
7392: PUSH
7393: LD_VAR 0 8
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: LESS
7403: IFFALSE 7441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7405: LD_ADDR_VAR 0 6
7409: PUSH
7410: LD_VAR 0 6
7414: PPUSH
7415: LD_VAR 0 8
7419: PPUSH
7420: LD_VAR 0 7
7424: PUSH
7425: LD_VAR 0 9
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 2
7438: ST_TO_ADDR
// break ;
7439: GO 7443
// end ; end ;
7441: GO 7380
7443: POP
7444: POP
// end ; end ;
7445: GO 7244
7447: POP
7448: POP
// if result and not asc then
7449: LD_VAR 0 6
7453: PUSH
7454: LD_VAR 0 4
7458: NOT
7459: AND
7460: IFFALSE 7535
// begin tmp := result ;
7462: LD_ADDR_VAR 0 9
7466: PUSH
7467: LD_VAR 0 6
7471: ST_TO_ADDR
// for i = tmp downto 1 do
7472: LD_ADDR_VAR 0 7
7476: PUSH
7477: DOUBLE
7478: LD_VAR 0 9
7482: INC
7483: ST_TO_ADDR
7484: LD_INT 1
7486: PUSH
7487: FOR_DOWNTO
7488: IFFALSE 7533
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7490: LD_ADDR_VAR 0 6
7494: PUSH
7495: LD_VAR 0 6
7499: PPUSH
7500: LD_VAR 0 9
7504: PUSH
7505: LD_VAR 0 7
7509: MINUS
7510: PUSH
7511: LD_INT 1
7513: PLUS
7514: PPUSH
7515: LD_VAR 0 9
7519: PUSH
7520: LD_VAR 0 7
7524: ARRAY
7525: PPUSH
7526: CALL_OW 1
7530: ST_TO_ADDR
7531: GO 7487
7533: POP
7534: POP
// end ; tmp := [ ] ;
7535: LD_ADDR_VAR 0 9
7539: PUSH
7540: EMPTY
7541: ST_TO_ADDR
// if mode then
7542: LD_VAR 0 5
7546: IFFALSE 7615
// begin for i = 1 to result do
7548: LD_ADDR_VAR 0 7
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_VAR 0 6
7562: PUSH
7563: FOR_TO
7564: IFFALSE 7603
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7566: LD_ADDR_VAR 0 9
7570: PUSH
7571: LD_VAR 0 9
7575: PPUSH
7576: LD_VAR 0 7
7580: PPUSH
7581: LD_VAR 0 6
7585: PUSH
7586: LD_VAR 0 7
7590: ARRAY
7591: PUSH
7592: LD_INT 1
7594: ARRAY
7595: PPUSH
7596: CALL_OW 1
7600: ST_TO_ADDR
7601: GO 7563
7603: POP
7604: POP
// result := tmp ;
7605: LD_ADDR_VAR 0 6
7609: PUSH
7610: LD_VAR 0 9
7614: ST_TO_ADDR
// end ; end ;
7615: LD_VAR 0 6
7619: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
7624: PPUSH
7625: PPUSH
7626: PPUSH
7627: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7628: LD_ADDR_VAR 0 5
7632: PUSH
7633: LD_INT 0
7635: PUSH
7636: LD_INT 0
7638: PUSH
7639: LD_INT 0
7641: PUSH
7642: EMPTY
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: ST_TO_ADDR
// if not x or not y then
7650: LD_VAR 0 2
7654: NOT
7655: PUSH
7656: LD_VAR 0 3
7660: NOT
7661: OR
7662: IFFALSE 7666
// exit ;
7664: GO 9316
// if not range then
7666: LD_VAR 0 4
7670: NOT
7671: IFFALSE 7681
// range := 10 ;
7673: LD_ADDR_VAR 0 4
7677: PUSH
7678: LD_INT 10
7680: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7681: LD_ADDR_VAR 0 8
7685: PUSH
7686: LD_INT 81
7688: PUSH
7689: LD_VAR 0 1
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 92
7700: PUSH
7701: LD_VAR 0 2
7705: PUSH
7706: LD_VAR 0 3
7710: PUSH
7711: LD_VAR 0 4
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 3
7724: PUSH
7725: LD_INT 21
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: ST_TO_ADDR
// if not tmp then
7749: LD_VAR 0 8
7753: NOT
7754: IFFALSE 7758
// exit ;
7756: GO 9316
// for i in tmp do
7758: LD_ADDR_VAR 0 6
7762: PUSH
7763: LD_VAR 0 8
7767: PUSH
7768: FOR_IN
7769: IFFALSE 9291
// begin points := [ 0 , 0 , 0 ] ;
7771: LD_ADDR_VAR 0 9
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: LD_INT 0
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: ST_TO_ADDR
// bpoints := 1 ;
7790: LD_ADDR_VAR 0 10
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7798: LD_VAR 0 6
7802: PPUSH
7803: CALL_OW 247
7807: PUSH
7808: LD_INT 1
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 8394
7816: POP
// begin if GetClass ( i ) = 1 then
7817: LD_VAR 0 6
7821: PPUSH
7822: CALL_OW 257
7826: PUSH
7827: LD_INT 1
7829: EQUAL
7830: IFFALSE 7851
// points := [ 10 , 5 , 3 ] ;
7832: LD_ADDR_VAR 0 9
7836: PUSH
7837: LD_INT 10
7839: PUSH
7840: LD_INT 5
7842: PUSH
7843: LD_INT 3
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7851: LD_VAR 0 6
7855: PPUSH
7856: CALL_OW 257
7860: PUSH
7861: LD_INT 2
7863: PUSH
7864: LD_INT 3
7866: PUSH
7867: LD_INT 4
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: IN
7875: IFFALSE 7896
// points := [ 3 , 2 , 1 ] ;
7877: LD_ADDR_VAR 0 9
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 2
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7896: LD_VAR 0 6
7900: PPUSH
7901: CALL_OW 257
7905: PUSH
7906: LD_INT 5
7908: EQUAL
7909: IFFALSE 7930
// points := [ 130 , 5 , 2 ] ;
7911: LD_ADDR_VAR 0 9
7915: PUSH
7916: LD_INT 130
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7930: LD_VAR 0 6
7934: PPUSH
7935: CALL_OW 257
7939: PUSH
7940: LD_INT 8
7942: EQUAL
7943: IFFALSE 7964
// points := [ 35 , 35 , 30 ] ;
7945: LD_ADDR_VAR 0 9
7949: PUSH
7950: LD_INT 35
7952: PUSH
7953: LD_INT 35
7955: PUSH
7956: LD_INT 30
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7964: LD_VAR 0 6
7968: PPUSH
7969: CALL_OW 257
7973: PUSH
7974: LD_INT 9
7976: EQUAL
7977: IFFALSE 7998
// points := [ 20 , 55 , 40 ] ;
7979: LD_ADDR_VAR 0 9
7983: PUSH
7984: LD_INT 20
7986: PUSH
7987: LD_INT 55
7989: PUSH
7990: LD_INT 40
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7998: LD_VAR 0 6
8002: PPUSH
8003: CALL_OW 257
8007: PUSH
8008: LD_INT 12
8010: PUSH
8011: LD_INT 16
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: IN
8018: IFFALSE 8039
// points := [ 5 , 3 , 2 ] ;
8020: LD_ADDR_VAR 0 9
8024: PUSH
8025: LD_INT 5
8027: PUSH
8028: LD_INT 3
8030: PUSH
8031: LD_INT 2
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8039: LD_VAR 0 6
8043: PPUSH
8044: CALL_OW 257
8048: PUSH
8049: LD_INT 17
8051: EQUAL
8052: IFFALSE 8073
// points := [ 100 , 50 , 75 ] ;
8054: LD_ADDR_VAR 0 9
8058: PUSH
8059: LD_INT 100
8061: PUSH
8062: LD_INT 50
8064: PUSH
8065: LD_INT 75
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8073: LD_VAR 0 6
8077: PPUSH
8078: CALL_OW 257
8082: PUSH
8083: LD_INT 15
8085: EQUAL
8086: IFFALSE 8107
// points := [ 10 , 5 , 3 ] ;
8088: LD_ADDR_VAR 0 9
8092: PUSH
8093: LD_INT 10
8095: PUSH
8096: LD_INT 5
8098: PUSH
8099: LD_INT 3
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8107: LD_VAR 0 6
8111: PPUSH
8112: CALL_OW 257
8116: PUSH
8117: LD_INT 14
8119: EQUAL
8120: IFFALSE 8141
// points := [ 10 , 0 , 0 ] ;
8122: LD_ADDR_VAR 0 9
8126: PUSH
8127: LD_INT 10
8129: PUSH
8130: LD_INT 0
8132: PUSH
8133: LD_INT 0
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8141: LD_VAR 0 6
8145: PPUSH
8146: CALL_OW 257
8150: PUSH
8151: LD_INT 11
8153: EQUAL
8154: IFFALSE 8175
// points := [ 30 , 10 , 5 ] ;
8156: LD_ADDR_VAR 0 9
8160: PUSH
8161: LD_INT 30
8163: PUSH
8164: LD_INT 10
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8175: LD_VAR 0 1
8179: PPUSH
8180: LD_INT 5
8182: PPUSH
8183: CALL_OW 321
8187: PUSH
8188: LD_INT 2
8190: EQUAL
8191: IFFALSE 8208
// bpoints := bpoints * 1.8 ;
8193: LD_ADDR_VAR 0 10
8197: PUSH
8198: LD_VAR 0 10
8202: PUSH
8203: LD_REAL  1.80000000000000E+0000
8206: MUL
8207: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8208: LD_VAR 0 6
8212: PPUSH
8213: CALL_OW 257
8217: PUSH
8218: LD_INT 1
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 4
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: IN
8236: PUSH
8237: LD_VAR 0 1
8241: PPUSH
8242: LD_INT 51
8244: PPUSH
8245: CALL_OW 321
8249: PUSH
8250: LD_INT 2
8252: EQUAL
8253: AND
8254: IFFALSE 8271
// bpoints := bpoints * 1.2 ;
8256: LD_ADDR_VAR 0 10
8260: PUSH
8261: LD_VAR 0 10
8265: PUSH
8266: LD_REAL  1.20000000000000E+0000
8269: MUL
8270: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8271: LD_VAR 0 6
8275: PPUSH
8276: CALL_OW 257
8280: PUSH
8281: LD_INT 5
8283: PUSH
8284: LD_INT 7
8286: PUSH
8287: LD_INT 9
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: IN
8295: PUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: LD_INT 52
8303: PPUSH
8304: CALL_OW 321
8308: PUSH
8309: LD_INT 2
8311: EQUAL
8312: AND
8313: IFFALSE 8330
// bpoints := bpoints * 1.5 ;
8315: LD_ADDR_VAR 0 10
8319: PUSH
8320: LD_VAR 0 10
8324: PUSH
8325: LD_REAL  1.50000000000000E+0000
8328: MUL
8329: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8330: LD_VAR 0 1
8334: PPUSH
8335: LD_INT 66
8337: PPUSH
8338: CALL_OW 321
8342: PUSH
8343: LD_INT 2
8345: EQUAL
8346: IFFALSE 8363
// bpoints := bpoints * 1.1 ;
8348: LD_ADDR_VAR 0 10
8352: PUSH
8353: LD_VAR 0 10
8357: PUSH
8358: LD_REAL  1.10000000000000E+0000
8361: MUL
8362: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8363: LD_ADDR_VAR 0 10
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_VAR 0 6
8377: PPUSH
8378: LD_INT 1
8380: PPUSH
8381: CALL_OW 259
8385: PUSH
8386: LD_REAL  1.15000000000000E+0000
8389: MUL
8390: MUL
8391: ST_TO_ADDR
// end ; unit_vehicle :
8392: GO 9220
8394: LD_INT 2
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 9208
8402: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8403: LD_VAR 0 6
8407: PPUSH
8408: CALL_OW 264
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 42
8418: PUSH
8419: LD_INT 24
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: IN
8427: IFFALSE 8448
// points := [ 25 , 5 , 3 ] ;
8429: LD_ADDR_VAR 0 9
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 5
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 264
8457: PUSH
8458: LD_INT 4
8460: PUSH
8461: LD_INT 43
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: IN
8472: IFFALSE 8493
// points := [ 40 , 15 , 5 ] ;
8474: LD_ADDR_VAR 0 9
8478: PUSH
8479: LD_INT 40
8481: PUSH
8482: LD_INT 15
8484: PUSH
8485: LD_INT 5
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8493: LD_VAR 0 6
8497: PPUSH
8498: CALL_OW 264
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: LD_INT 23
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: IN
8513: IFFALSE 8534
// points := [ 7 , 25 , 8 ] ;
8515: LD_ADDR_VAR 0 9
8519: PUSH
8520: LD_INT 7
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 264
8543: PUSH
8544: LD_INT 5
8546: PUSH
8547: LD_INT 27
8549: PUSH
8550: LD_INT 44
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: IN
8558: IFFALSE 8579
// points := [ 14 , 50 , 16 ] ;
8560: LD_ADDR_VAR 0 9
8564: PUSH
8565: LD_INT 14
8567: PUSH
8568: LD_INT 50
8570: PUSH
8571: LD_INT 16
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8579: LD_VAR 0 6
8583: PPUSH
8584: CALL_OW 264
8588: PUSH
8589: LD_INT 6
8591: PUSH
8592: LD_INT 46
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: IN
8599: IFFALSE 8620
// points := [ 32 , 120 , 70 ] ;
8601: LD_ADDR_VAR 0 9
8605: PUSH
8606: LD_INT 32
8608: PUSH
8609: LD_INT 120
8611: PUSH
8612: LD_INT 70
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8620: LD_VAR 0 6
8624: PPUSH
8625: CALL_OW 264
8629: PUSH
8630: LD_INT 7
8632: PUSH
8633: LD_INT 28
8635: PUSH
8636: LD_INT 45
8638: PUSH
8639: LD_INT 92
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: IN
8648: IFFALSE 8669
// points := [ 35 , 20 , 45 ] ;
8650: LD_ADDR_VAR 0 9
8654: PUSH
8655: LD_INT 35
8657: PUSH
8658: LD_INT 20
8660: PUSH
8661: LD_INT 45
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8669: LD_VAR 0 6
8673: PPUSH
8674: CALL_OW 264
8678: PUSH
8679: LD_INT 47
8681: PUSH
8682: EMPTY
8683: LIST
8684: IN
8685: IFFALSE 8706
// points := [ 67 , 45 , 75 ] ;
8687: LD_ADDR_VAR 0 9
8691: PUSH
8692: LD_INT 67
8694: PUSH
8695: LD_INT 45
8697: PUSH
8698: LD_INT 75
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8706: LD_VAR 0 6
8710: PPUSH
8711: CALL_OW 264
8715: PUSH
8716: LD_INT 26
8718: PUSH
8719: EMPTY
8720: LIST
8721: IN
8722: IFFALSE 8743
// points := [ 120 , 30 , 80 ] ;
8724: LD_ADDR_VAR 0 9
8728: PUSH
8729: LD_INT 120
8731: PUSH
8732: LD_INT 30
8734: PUSH
8735: LD_INT 80
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8743: LD_VAR 0 6
8747: PPUSH
8748: CALL_OW 264
8752: PUSH
8753: LD_INT 22
8755: PUSH
8756: EMPTY
8757: LIST
8758: IN
8759: IFFALSE 8780
// points := [ 40 , 1 , 1 ] ;
8761: LD_ADDR_VAR 0 9
8765: PUSH
8766: LD_INT 40
8768: PUSH
8769: LD_INT 1
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8780: LD_VAR 0 6
8784: PPUSH
8785: CALL_OW 264
8789: PUSH
8790: LD_INT 29
8792: PUSH
8793: EMPTY
8794: LIST
8795: IN
8796: IFFALSE 8817
// points := [ 70 , 200 , 400 ] ;
8798: LD_ADDR_VAR 0 9
8802: PUSH
8803: LD_INT 70
8805: PUSH
8806: LD_INT 200
8808: PUSH
8809: LD_INT 400
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8817: LD_VAR 0 6
8821: PPUSH
8822: CALL_OW 264
8826: PUSH
8827: LD_INT 14
8829: PUSH
8830: LD_INT 53
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: IN
8837: IFFALSE 8858
// points := [ 40 , 10 , 20 ] ;
8839: LD_ADDR_VAR 0 9
8843: PUSH
8844: LD_INT 40
8846: PUSH
8847: LD_INT 10
8849: PUSH
8850: LD_INT 20
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8858: LD_VAR 0 6
8862: PPUSH
8863: CALL_OW 264
8867: PUSH
8868: LD_INT 9
8870: PUSH
8871: EMPTY
8872: LIST
8873: IN
8874: IFFALSE 8895
// points := [ 5 , 70 , 20 ] ;
8876: LD_ADDR_VAR 0 9
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: LD_INT 70
8886: PUSH
8887: LD_INT 20
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8895: LD_VAR 0 6
8899: PPUSH
8900: CALL_OW 264
8904: PUSH
8905: LD_INT 10
8907: PUSH
8908: EMPTY
8909: LIST
8910: IN
8911: IFFALSE 8932
// points := [ 35 , 110 , 70 ] ;
8913: LD_ADDR_VAR 0 9
8917: PUSH
8918: LD_INT 35
8920: PUSH
8921: LD_INT 110
8923: PUSH
8924: LD_INT 70
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8932: LD_VAR 0 6
8936: PPUSH
8937: CALL_OW 265
8941: PUSH
8942: LD_INT 25
8944: EQUAL
8945: IFFALSE 8966
// points := [ 80 , 65 , 100 ] ;
8947: LD_ADDR_VAR 0 9
8951: PUSH
8952: LD_INT 80
8954: PUSH
8955: LD_INT 65
8957: PUSH
8958: LD_INT 100
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8966: LD_VAR 0 6
8970: PPUSH
8971: CALL_OW 263
8975: PUSH
8976: LD_INT 1
8978: EQUAL
8979: IFFALSE 9014
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8981: LD_ADDR_VAR 0 10
8985: PUSH
8986: LD_VAR 0 10
8990: PUSH
8991: LD_VAR 0 6
8995: PPUSH
8996: CALL_OW 311
9000: PPUSH
9001: LD_INT 3
9003: PPUSH
9004: CALL_OW 259
9008: PUSH
9009: LD_INT 4
9011: MUL
9012: MUL
9013: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9014: LD_VAR 0 6
9018: PPUSH
9019: CALL_OW 263
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9078
// begin j := IsControledBy ( i ) ;
9029: LD_ADDR_VAR 0 7
9033: PUSH
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 312
9043: ST_TO_ADDR
// if j then
9044: LD_VAR 0 7
9048: IFFALSE 9078
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9050: LD_ADDR_VAR 0 10
9054: PUSH
9055: LD_VAR 0 10
9059: PUSH
9060: LD_VAR 0 7
9064: PPUSH
9065: LD_INT 3
9067: PPUSH
9068: CALL_OW 259
9072: PUSH
9073: LD_INT 3
9075: MUL
9076: MUL
9077: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9078: LD_VAR 0 6
9082: PPUSH
9083: CALL_OW 264
9087: PUSH
9088: LD_INT 5
9090: PUSH
9091: LD_INT 6
9093: PUSH
9094: LD_INT 46
9096: PUSH
9097: LD_INT 44
9099: PUSH
9100: LD_INT 47
9102: PUSH
9103: LD_INT 45
9105: PUSH
9106: LD_INT 28
9108: PUSH
9109: LD_INT 7
9111: PUSH
9112: LD_INT 27
9114: PUSH
9115: LD_INT 29
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: IN
9130: PUSH
9131: LD_VAR 0 1
9135: PPUSH
9136: LD_INT 52
9138: PPUSH
9139: CALL_OW 321
9143: PUSH
9144: LD_INT 2
9146: EQUAL
9147: AND
9148: IFFALSE 9165
// bpoints := bpoints * 1.2 ;
9150: LD_ADDR_VAR 0 10
9154: PUSH
9155: LD_VAR 0 10
9159: PUSH
9160: LD_REAL  1.20000000000000E+0000
9163: MUL
9164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9165: LD_VAR 0 6
9169: PPUSH
9170: CALL_OW 264
9174: PUSH
9175: LD_INT 6
9177: PUSH
9178: LD_INT 46
9180: PUSH
9181: LD_INT 47
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: IN
9189: IFFALSE 9206
// bpoints := bpoints * 1.2 ;
9191: LD_ADDR_VAR 0 10
9195: PUSH
9196: LD_VAR 0 10
9200: PUSH
9201: LD_REAL  1.20000000000000E+0000
9204: MUL
9205: ST_TO_ADDR
// end ; unit_building :
9206: GO 9220
9208: LD_INT 3
9210: DOUBLE
9211: EQUAL
9212: IFTRUE 9216
9214: GO 9219
9216: POP
// ; end ;
9217: GO 9220
9219: POP
// for j = 1 to 3 do
9220: LD_ADDR_VAR 0 7
9224: PUSH
9225: DOUBLE
9226: LD_INT 1
9228: DEC
9229: ST_TO_ADDR
9230: LD_INT 3
9232: PUSH
9233: FOR_TO
9234: IFFALSE 9287
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9236: LD_ADDR_VAR 0 5
9240: PUSH
9241: LD_VAR 0 5
9245: PPUSH
9246: LD_VAR 0 7
9250: PPUSH
9251: LD_VAR 0 5
9255: PUSH
9256: LD_VAR 0 7
9260: ARRAY
9261: PUSH
9262: LD_VAR 0 9
9266: PUSH
9267: LD_VAR 0 7
9271: ARRAY
9272: PUSH
9273: LD_VAR 0 10
9277: MUL
9278: PLUS
9279: PPUSH
9280: CALL_OW 1
9284: ST_TO_ADDR
9285: GO 9233
9287: POP
9288: POP
// end ;
9289: GO 7768
9291: POP
9292: POP
// result := Replace ( result , 4 , tmp ) ;
9293: LD_ADDR_VAR 0 5
9297: PUSH
9298: LD_VAR 0 5
9302: PPUSH
9303: LD_INT 4
9305: PPUSH
9306: LD_VAR 0 8
9310: PPUSH
9311: CALL_OW 1
9315: ST_TO_ADDR
// end ;
9316: LD_VAR 0 5
9320: RET
// export function DangerAtRange ( unit , range ) ; begin
9321: LD_INT 0
9323: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9324: LD_ADDR_VAR 0 3
9328: PUSH
9329: LD_VAR 0 1
9333: PPUSH
9334: CALL_OW 255
9338: PPUSH
9339: LD_VAR 0 1
9343: PPUSH
9344: CALL_OW 250
9348: PPUSH
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 251
9358: PPUSH
9359: LD_VAR 0 2
9363: PPUSH
9364: CALL 7620 0 4
9368: ST_TO_ADDR
// end ;
9369: LD_VAR 0 3
9373: RET
// export function DangerInArea ( side , area ) ; begin
9374: LD_INT 0
9376: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9377: LD_ADDR_VAR 0 3
9381: PUSH
9382: LD_VAR 0 2
9386: PPUSH
9387: LD_INT 81
9389: PUSH
9390: LD_VAR 0 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 70
9403: ST_TO_ADDR
// end ;
9404: LD_VAR 0 3
9408: RET
// export function IsExtension ( b ) ; begin
9409: LD_INT 0
9411: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9412: LD_ADDR_VAR 0 2
9416: PUSH
9417: LD_VAR 0 1
9421: PUSH
9422: LD_INT 23
9424: PUSH
9425: LD_INT 20
9427: PUSH
9428: LD_INT 22
9430: PUSH
9431: LD_INT 17
9433: PUSH
9434: LD_INT 24
9436: PUSH
9437: LD_INT 21
9439: PUSH
9440: LD_INT 19
9442: PUSH
9443: LD_INT 16
9445: PUSH
9446: LD_INT 25
9448: PUSH
9449: LD_INT 18
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: IN
9464: ST_TO_ADDR
// end ;
9465: LD_VAR 0 2
9469: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9470: LD_INT 0
9472: PPUSH
9473: PPUSH
9474: PPUSH
// result := [ ] ;
9475: LD_ADDR_VAR 0 4
9479: PUSH
9480: EMPTY
9481: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9482: LD_ADDR_VAR 0 5
9486: PUSH
9487: LD_VAR 0 2
9491: PPUSH
9492: LD_INT 21
9494: PUSH
9495: LD_INT 3
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 70
9506: ST_TO_ADDR
// if not tmp then
9507: LD_VAR 0 5
9511: NOT
9512: IFFALSE 9516
// exit ;
9514: GO 9580
// if checkLink then
9516: LD_VAR 0 3
9520: IFFALSE 9570
// begin for i in tmp do
9522: LD_ADDR_VAR 0 6
9526: PUSH
9527: LD_VAR 0 5
9531: PUSH
9532: FOR_IN
9533: IFFALSE 9568
// if GetBase ( i ) <> base then
9535: LD_VAR 0 6
9539: PPUSH
9540: CALL_OW 274
9544: PUSH
9545: LD_VAR 0 1
9549: NONEQUAL
9550: IFFALSE 9566
// ComLinkToBase ( base , i ) ;
9552: LD_VAR 0 1
9556: PPUSH
9557: LD_VAR 0 6
9561: PPUSH
9562: CALL_OW 169
9566: GO 9532
9568: POP
9569: POP
// end ; result := tmp ;
9570: LD_ADDR_VAR 0 4
9574: PUSH
9575: LD_VAR 0 5
9579: ST_TO_ADDR
// end ;
9580: LD_VAR 0 4
9584: RET
// export function ComComplete ( units , b ) ; var i ; begin
9585: LD_INT 0
9587: PPUSH
9588: PPUSH
// if not units then
9589: LD_VAR 0 1
9593: NOT
9594: IFFALSE 9598
// exit ;
9596: GO 9688
// for i in units do
9598: LD_ADDR_VAR 0 4
9602: PUSH
9603: LD_VAR 0 1
9607: PUSH
9608: FOR_IN
9609: IFFALSE 9686
// if BuildingStatus ( b ) = bs_build then
9611: LD_VAR 0 2
9615: PPUSH
9616: CALL_OW 461
9620: PUSH
9621: LD_INT 1
9623: EQUAL
9624: IFFALSE 9684
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9626: LD_VAR 0 4
9630: PPUSH
9631: LD_STRING h
9633: PUSH
9634: LD_VAR 0 2
9638: PPUSH
9639: CALL_OW 250
9643: PUSH
9644: LD_VAR 0 2
9648: PPUSH
9649: CALL_OW 251
9653: PUSH
9654: LD_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: PUSH
9662: LD_INT 0
9664: PUSH
9665: LD_INT 0
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: PPUSH
9680: CALL_OW 446
9684: GO 9608
9686: POP
9687: POP
// end ;
9688: LD_VAR 0 3
9692: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9693: LD_INT 0
9695: PPUSH
9696: PPUSH
9697: PPUSH
9698: PPUSH
9699: PPUSH
9700: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9701: LD_VAR 0 1
9705: NOT
9706: PUSH
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 263
9716: PUSH
9717: LD_INT 2
9719: NONEQUAL
9720: OR
9721: IFFALSE 9725
// exit ;
9723: GO 10041
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9725: LD_ADDR_VAR 0 6
9729: PUSH
9730: LD_INT 22
9732: PUSH
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 255
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 2
9749: PUSH
9750: LD_INT 30
9752: PUSH
9753: LD_INT 36
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 34
9762: PUSH
9763: LD_INT 31
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// if not tmp then
9784: LD_VAR 0 6
9788: NOT
9789: IFFALSE 9793
// exit ;
9791: GO 10041
// result := [ ] ;
9793: LD_ADDR_VAR 0 2
9797: PUSH
9798: EMPTY
9799: ST_TO_ADDR
// for i in tmp do
9800: LD_ADDR_VAR 0 3
9804: PUSH
9805: LD_VAR 0 6
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9882
// begin t := UnitsInside ( i ) ;
9813: LD_ADDR_VAR 0 4
9817: PUSH
9818: LD_VAR 0 3
9822: PPUSH
9823: CALL_OW 313
9827: ST_TO_ADDR
// if t then
9828: LD_VAR 0 4
9832: IFFALSE 9880
// for j in t do
9834: LD_ADDR_VAR 0 7
9838: PUSH
9839: LD_VAR 0 4
9843: PUSH
9844: FOR_IN
9845: IFFALSE 9878
// result := Replace ( result , result + 1 , j ) ;
9847: LD_ADDR_VAR 0 2
9851: PUSH
9852: LD_VAR 0 2
9856: PPUSH
9857: LD_VAR 0 2
9861: PUSH
9862: LD_INT 1
9864: PLUS
9865: PPUSH
9866: LD_VAR 0 7
9870: PPUSH
9871: CALL_OW 1
9875: ST_TO_ADDR
9876: GO 9844
9878: POP
9879: POP
// end ;
9880: GO 9810
9882: POP
9883: POP
// if not result then
9884: LD_VAR 0 2
9888: NOT
9889: IFFALSE 9893
// exit ;
9891: GO 10041
// mech := result [ 1 ] ;
9893: LD_ADDR_VAR 0 5
9897: PUSH
9898: LD_VAR 0 2
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: ST_TO_ADDR
// if result > 1 then
9907: LD_VAR 0 2
9911: PUSH
9912: LD_INT 1
9914: GREATER
9915: IFFALSE 10027
// begin for i = 2 to result do
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: DOUBLE
9923: LD_INT 2
9925: DEC
9926: ST_TO_ADDR
9927: LD_VAR 0 2
9931: PUSH
9932: FOR_TO
9933: IFFALSE 10025
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9935: LD_ADDR_VAR 0 4
9939: PUSH
9940: LD_VAR 0 2
9944: PUSH
9945: LD_VAR 0 3
9949: ARRAY
9950: PPUSH
9951: LD_INT 3
9953: PPUSH
9954: CALL_OW 259
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: LD_VAR 0 3
9968: ARRAY
9969: PPUSH
9970: CALL_OW 432
9974: MINUS
9975: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9976: LD_VAR 0 4
9980: PUSH
9981: LD_VAR 0 5
9985: PPUSH
9986: LD_INT 3
9988: PPUSH
9989: CALL_OW 259
9993: PUSH
9994: LD_VAR 0 5
9998: PPUSH
9999: CALL_OW 432
10003: MINUS
10004: GREATEREQUAL
10005: IFFALSE 10023
// mech := result [ i ] ;
10007: LD_ADDR_VAR 0 5
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: LD_VAR 0 3
10021: ARRAY
10022: ST_TO_ADDR
// end ;
10023: GO 9932
10025: POP
10026: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10027: LD_VAR 0 1
10031: PPUSH
10032: LD_VAR 0 5
10036: PPUSH
10037: CALL_OW 135
// end ;
10041: LD_VAR 0 2
10045: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10046: LD_INT 0
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
10052: PPUSH
10053: PPUSH
10054: PPUSH
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
10059: PPUSH
10060: PPUSH
// result := [ ] ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: EMPTY
10067: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10068: LD_VAR 0 1
10072: PPUSH
10073: CALL_OW 266
10077: PUSH
10078: LD_INT 0
10080: PUSH
10081: LD_INT 1
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: IN
10088: NOT
10089: IFFALSE 10093
// exit ;
10091: GO 11727
// if name then
10093: LD_VAR 0 3
10097: IFFALSE 10113
// SetBName ( base_dep , name ) ;
10099: LD_VAR 0 1
10103: PPUSH
10104: LD_VAR 0 3
10108: PPUSH
10109: CALL_OW 500
// base := GetBase ( base_dep ) ;
10113: LD_ADDR_VAR 0 15
10117: PUSH
10118: LD_VAR 0 1
10122: PPUSH
10123: CALL_OW 274
10127: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10128: LD_ADDR_VAR 0 16
10132: PUSH
10133: LD_VAR 0 1
10137: PPUSH
10138: CALL_OW 255
10142: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10143: LD_ADDR_VAR 0 17
10147: PUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 248
10157: ST_TO_ADDR
// if sources then
10158: LD_VAR 0 5
10162: IFFALSE 10209
// for i = 1 to 3 do
10164: LD_ADDR_VAR 0 8
10168: PUSH
10169: DOUBLE
10170: LD_INT 1
10172: DEC
10173: ST_TO_ADDR
10174: LD_INT 3
10176: PUSH
10177: FOR_TO
10178: IFFALSE 10207
// AddResourceType ( base , i , sources [ i ] ) ;
10180: LD_VAR 0 15
10184: PPUSH
10185: LD_VAR 0 8
10189: PPUSH
10190: LD_VAR 0 5
10194: PUSH
10195: LD_VAR 0 8
10199: ARRAY
10200: PPUSH
10201: CALL_OW 276
10205: GO 10177
10207: POP
10208: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10209: LD_ADDR_VAR 0 18
10213: PUSH
10214: LD_VAR 0 15
10218: PPUSH
10219: LD_VAR 0 2
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL 9470 0 3
10231: ST_TO_ADDR
// InitHc ;
10232: CALL_OW 19
// InitUc ;
10236: CALL_OW 18
// uc_side := side ;
10240: LD_ADDR_OWVAR 20
10244: PUSH
10245: LD_VAR 0 16
10249: ST_TO_ADDR
// uc_nation := nation ;
10250: LD_ADDR_OWVAR 21
10254: PUSH
10255: LD_VAR 0 17
10259: ST_TO_ADDR
// if buildings then
10260: LD_VAR 0 18
10264: IFFALSE 11586
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10266: LD_ADDR_VAR 0 19
10270: PUSH
10271: LD_VAR 0 18
10275: PPUSH
10276: LD_INT 2
10278: PUSH
10279: LD_INT 30
10281: PUSH
10282: LD_INT 29
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 30
10291: PUSH
10292: LD_INT 30
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 72
10308: ST_TO_ADDR
// if tmp then
10309: LD_VAR 0 19
10313: IFFALSE 10361
// for i in tmp do
10315: LD_ADDR_VAR 0 8
10319: PUSH
10320: LD_VAR 0 19
10324: PUSH
10325: FOR_IN
10326: IFFALSE 10359
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10328: LD_VAR 0 8
10332: PPUSH
10333: CALL_OW 250
10337: PPUSH
10338: LD_VAR 0 8
10342: PPUSH
10343: CALL_OW 251
10347: PPUSH
10348: LD_VAR 0 16
10352: PPUSH
10353: CALL_OW 441
10357: GO 10325
10359: POP
10360: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10361: LD_VAR 0 18
10365: PPUSH
10366: LD_INT 2
10368: PUSH
10369: LD_INT 30
10371: PUSH
10372: LD_INT 32
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 30
10381: PUSH
10382: LD_INT 33
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 72
10398: IFFALSE 10486
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10400: LD_ADDR_VAR 0 8
10404: PUSH
10405: LD_VAR 0 18
10409: PPUSH
10410: LD_INT 2
10412: PUSH
10413: LD_INT 30
10415: PUSH
10416: LD_INT 32
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 30
10425: PUSH
10426: LD_INT 33
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PUSH
10443: FOR_IN
10444: IFFALSE 10484
// begin if not GetBWeapon ( i ) then
10446: LD_VAR 0 8
10450: PPUSH
10451: CALL_OW 269
10455: NOT
10456: IFFALSE 10482
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10458: LD_VAR 0 8
10462: PPUSH
10463: LD_VAR 0 8
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: CALL 11732 0 2
10477: PPUSH
10478: CALL_OW 431
// end ;
10482: GO 10443
10484: POP
10485: POP
// end ; for i = 1 to personel do
10486: LD_ADDR_VAR 0 8
10490: PUSH
10491: DOUBLE
10492: LD_INT 1
10494: DEC
10495: ST_TO_ADDR
10496: LD_VAR 0 6
10500: PUSH
10501: FOR_TO
10502: IFFALSE 11566
// begin if i > 4 then
10504: LD_VAR 0 8
10508: PUSH
10509: LD_INT 4
10511: GREATER
10512: IFFALSE 10516
// break ;
10514: GO 11566
// case i of 1 :
10516: LD_VAR 0 8
10520: PUSH
10521: LD_INT 1
10523: DOUBLE
10524: EQUAL
10525: IFTRUE 10529
10527: GO 10609
10529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10530: LD_ADDR_VAR 0 12
10534: PUSH
10535: LD_VAR 0 18
10539: PPUSH
10540: LD_INT 22
10542: PUSH
10543: LD_VAR 0 16
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 58
10554: PUSH
10555: EMPTY
10556: LIST
10557: PUSH
10558: LD_INT 2
10560: PUSH
10561: LD_INT 30
10563: PUSH
10564: LD_INT 32
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 30
10573: PUSH
10574: LD_INT 4
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 30
10583: PUSH
10584: LD_INT 5
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 72
10606: ST_TO_ADDR
10607: GO 10831
10609: LD_INT 2
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10679
10617: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10618: LD_ADDR_VAR 0 12
10622: PUSH
10623: LD_VAR 0 18
10627: PPUSH
10628: LD_INT 22
10630: PUSH
10631: LD_VAR 0 16
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: LD_INT 30
10645: PUSH
10646: LD_INT 0
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 30
10655: PUSH
10656: LD_INT 1
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 72
10676: ST_TO_ADDR
10677: GO 10831
10679: LD_INT 3
10681: DOUBLE
10682: EQUAL
10683: IFTRUE 10687
10685: GO 10749
10687: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10688: LD_ADDR_VAR 0 12
10692: PUSH
10693: LD_VAR 0 18
10697: PPUSH
10698: LD_INT 22
10700: PUSH
10701: LD_VAR 0 16
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: LD_INT 30
10715: PUSH
10716: LD_INT 2
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 30
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PPUSH
10742: CALL_OW 72
10746: ST_TO_ADDR
10747: GO 10831
10749: LD_INT 4
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 10830
10757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10758: LD_ADDR_VAR 0 12
10762: PUSH
10763: LD_VAR 0 18
10767: PPUSH
10768: LD_INT 22
10770: PUSH
10771: LD_VAR 0 16
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 2
10782: PUSH
10783: LD_INT 30
10785: PUSH
10786: LD_INT 6
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 30
10795: PUSH
10796: LD_INT 7
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 30
10805: PUSH
10806: LD_INT 8
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 72
10827: ST_TO_ADDR
10828: GO 10831
10830: POP
// if i = 1 then
10831: LD_VAR 0 8
10835: PUSH
10836: LD_INT 1
10838: EQUAL
10839: IFFALSE 10950
// begin tmp := [ ] ;
10841: LD_ADDR_VAR 0 19
10845: PUSH
10846: EMPTY
10847: ST_TO_ADDR
// for j in f do
10848: LD_ADDR_VAR 0 9
10852: PUSH
10853: LD_VAR 0 12
10857: PUSH
10858: FOR_IN
10859: IFFALSE 10932
// if GetBType ( j ) = b_bunker then
10861: LD_VAR 0 9
10865: PPUSH
10866: CALL_OW 266
10870: PUSH
10871: LD_INT 32
10873: EQUAL
10874: IFFALSE 10901
// tmp := Insert ( tmp , 1 , j ) else
10876: LD_ADDR_VAR 0 19
10880: PUSH
10881: LD_VAR 0 19
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: LD_VAR 0 9
10893: PPUSH
10894: CALL_OW 2
10898: ST_TO_ADDR
10899: GO 10930
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10901: LD_ADDR_VAR 0 19
10905: PUSH
10906: LD_VAR 0 19
10910: PPUSH
10911: LD_VAR 0 19
10915: PUSH
10916: LD_INT 1
10918: PLUS
10919: PPUSH
10920: LD_VAR 0 9
10924: PPUSH
10925: CALL_OW 2
10929: ST_TO_ADDR
10930: GO 10858
10932: POP
10933: POP
// if tmp then
10934: LD_VAR 0 19
10938: IFFALSE 10950
// f := tmp ;
10940: LD_ADDR_VAR 0 12
10944: PUSH
10945: LD_VAR 0 19
10949: ST_TO_ADDR
// end ; x := personel [ i ] ;
10950: LD_ADDR_VAR 0 13
10954: PUSH
10955: LD_VAR 0 6
10959: PUSH
10960: LD_VAR 0 8
10964: ARRAY
10965: ST_TO_ADDR
// if x = - 1 then
10966: LD_VAR 0 13
10970: PUSH
10971: LD_INT 1
10973: NEG
10974: EQUAL
10975: IFFALSE 11184
// begin for j in f do
10977: LD_ADDR_VAR 0 9
10981: PUSH
10982: LD_VAR 0 12
10986: PUSH
10987: FOR_IN
10988: IFFALSE 11180
// repeat InitHc ;
10990: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 266
11003: PUSH
11004: LD_INT 5
11006: EQUAL
11007: IFFALSE 11077
// begin if UnitsInside ( j ) < 3 then
11009: LD_VAR 0 9
11013: PPUSH
11014: CALL_OW 313
11018: PUSH
11019: LD_INT 3
11021: LESS
11022: IFFALSE 11058
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 5
11029: PUSH
11030: LD_INT 8
11032: PUSH
11033: LD_INT 9
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: LD_VAR 0 17
11045: ARRAY
11046: PPUSH
11047: LD_VAR 0 4
11051: PPUSH
11052: CALL_OW 380
11056: GO 11075
// PrepareHuman ( false , i , skill ) ;
11058: LD_INT 0
11060: PPUSH
11061: LD_VAR 0 8
11065: PPUSH
11066: LD_VAR 0 4
11070: PPUSH
11071: CALL_OW 380
// end else
11075: GO 11094
// PrepareHuman ( false , i , skill ) ;
11077: LD_INT 0
11079: PPUSH
11080: LD_VAR 0 8
11084: PPUSH
11085: LD_VAR 0 4
11089: PPUSH
11090: CALL_OW 380
// un := CreateHuman ;
11094: LD_ADDR_VAR 0 14
11098: PUSH
11099: CALL_OW 44
11103: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11104: LD_ADDR_VAR 0 7
11108: PUSH
11109: LD_VAR 0 7
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: LD_VAR 0 14
11121: PPUSH
11122: CALL_OW 2
11126: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11127: LD_VAR 0 14
11131: PPUSH
11132: LD_VAR 0 9
11136: PPUSH
11137: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11141: LD_VAR 0 9
11145: PPUSH
11146: CALL_OW 313
11150: PUSH
11151: LD_INT 6
11153: EQUAL
11154: PUSH
11155: LD_VAR 0 9
11159: PPUSH
11160: CALL_OW 266
11164: PUSH
11165: LD_INT 32
11167: PUSH
11168: LD_INT 31
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: IN
11175: OR
11176: IFFALSE 10990
11178: GO 10987
11180: POP
11181: POP
// end else
11182: GO 11564
// for j = 1 to x do
11184: LD_ADDR_VAR 0 9
11188: PUSH
11189: DOUBLE
11190: LD_INT 1
11192: DEC
11193: ST_TO_ADDR
11194: LD_VAR 0 13
11198: PUSH
11199: FOR_TO
11200: IFFALSE 11562
// begin InitHc ;
11202: CALL_OW 19
// if not f then
11206: LD_VAR 0 12
11210: NOT
11211: IFFALSE 11300
// begin PrepareHuman ( false , i , skill ) ;
11213: LD_INT 0
11215: PPUSH
11216: LD_VAR 0 8
11220: PPUSH
11221: LD_VAR 0 4
11225: PPUSH
11226: CALL_OW 380
// un := CreateHuman ;
11230: LD_ADDR_VAR 0 14
11234: PUSH
11235: CALL_OW 44
11239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11240: LD_ADDR_VAR 0 7
11244: PUSH
11245: LD_VAR 0 7
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: LD_VAR 0 14
11257: PPUSH
11258: CALL_OW 2
11262: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11263: LD_VAR 0 14
11267: PPUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 250
11277: PPUSH
11278: LD_VAR 0 1
11282: PPUSH
11283: CALL_OW 251
11287: PPUSH
11288: LD_INT 10
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 50
// continue ;
11298: GO 11199
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11300: LD_VAR 0 12
11304: PUSH
11305: LD_INT 1
11307: ARRAY
11308: PPUSH
11309: CALL_OW 313
11313: PUSH
11314: LD_VAR 0 12
11318: PUSH
11319: LD_INT 1
11321: ARRAY
11322: PPUSH
11323: CALL_OW 266
11327: PUSH
11328: LD_INT 32
11330: PUSH
11331: LD_INT 31
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: IN
11338: AND
11339: PUSH
11340: LD_VAR 0 12
11344: PUSH
11345: LD_INT 1
11347: ARRAY
11348: PPUSH
11349: CALL_OW 313
11353: PUSH
11354: LD_INT 6
11356: EQUAL
11357: OR
11358: IFFALSE 11378
// f := Delete ( f , 1 ) ;
11360: LD_ADDR_VAR 0 12
11364: PUSH
11365: LD_VAR 0 12
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 3
11377: ST_TO_ADDR
// if not f then
11378: LD_VAR 0 12
11382: NOT
11383: IFFALSE 11401
// begin x := x + 2 ;
11385: LD_ADDR_VAR 0 13
11389: PUSH
11390: LD_VAR 0 13
11394: PUSH
11395: LD_INT 2
11397: PLUS
11398: ST_TO_ADDR
// continue ;
11399: GO 11199
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11401: LD_VAR 0 12
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PPUSH
11410: CALL_OW 266
11414: PUSH
11415: LD_INT 5
11417: EQUAL
11418: IFFALSE 11492
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11420: LD_VAR 0 12
11424: PUSH
11425: LD_INT 1
11427: ARRAY
11428: PPUSH
11429: CALL_OW 313
11433: PUSH
11434: LD_INT 3
11436: LESS
11437: IFFALSE 11473
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11439: LD_INT 0
11441: PPUSH
11442: LD_INT 5
11444: PUSH
11445: LD_INT 8
11447: PUSH
11448: LD_INT 9
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_VAR 0 17
11460: ARRAY
11461: PPUSH
11462: LD_VAR 0 4
11466: PPUSH
11467: CALL_OW 380
11471: GO 11490
// PrepareHuman ( false , i , skill ) ;
11473: LD_INT 0
11475: PPUSH
11476: LD_VAR 0 8
11480: PPUSH
11481: LD_VAR 0 4
11485: PPUSH
11486: CALL_OW 380
// end else
11490: GO 11509
// PrepareHuman ( false , i , skill ) ;
11492: LD_INT 0
11494: PPUSH
11495: LD_VAR 0 8
11499: PPUSH
11500: LD_VAR 0 4
11504: PPUSH
11505: CALL_OW 380
// un := CreateHuman ;
11509: LD_ADDR_VAR 0 14
11513: PUSH
11514: CALL_OW 44
11518: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11519: LD_ADDR_VAR 0 7
11523: PUSH
11524: LD_VAR 0 7
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: LD_VAR 0 14
11536: PPUSH
11537: CALL_OW 2
11541: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11542: LD_VAR 0 14
11546: PPUSH
11547: LD_VAR 0 12
11551: PUSH
11552: LD_INT 1
11554: ARRAY
11555: PPUSH
11556: CALL_OW 52
// end ;
11560: GO 11199
11562: POP
11563: POP
// end ;
11564: GO 10501
11566: POP
11567: POP
// result := result ^ buildings ;
11568: LD_ADDR_VAR 0 7
11572: PUSH
11573: LD_VAR 0 7
11577: PUSH
11578: LD_VAR 0 18
11582: ADD
11583: ST_TO_ADDR
// end else
11584: GO 11727
// begin for i = 1 to personel do
11586: LD_ADDR_VAR 0 8
11590: PUSH
11591: DOUBLE
11592: LD_INT 1
11594: DEC
11595: ST_TO_ADDR
11596: LD_VAR 0 6
11600: PUSH
11601: FOR_TO
11602: IFFALSE 11725
// begin if i > 4 then
11604: LD_VAR 0 8
11608: PUSH
11609: LD_INT 4
11611: GREATER
11612: IFFALSE 11616
// break ;
11614: GO 11725
// x := personel [ i ] ;
11616: LD_ADDR_VAR 0 13
11620: PUSH
11621: LD_VAR 0 6
11625: PUSH
11626: LD_VAR 0 8
11630: ARRAY
11631: ST_TO_ADDR
// if x = - 1 then
11632: LD_VAR 0 13
11636: PUSH
11637: LD_INT 1
11639: NEG
11640: EQUAL
11641: IFFALSE 11645
// continue ;
11643: GO 11601
// PrepareHuman ( false , i , skill ) ;
11645: LD_INT 0
11647: PPUSH
11648: LD_VAR 0 8
11652: PPUSH
11653: LD_VAR 0 4
11657: PPUSH
11658: CALL_OW 380
// un := CreateHuman ;
11662: LD_ADDR_VAR 0 14
11666: PUSH
11667: CALL_OW 44
11671: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11672: LD_VAR 0 14
11676: PPUSH
11677: LD_VAR 0 1
11681: PPUSH
11682: CALL_OW 250
11686: PPUSH
11687: LD_VAR 0 1
11691: PPUSH
11692: CALL_OW 251
11696: PPUSH
11697: LD_INT 10
11699: PPUSH
11700: LD_INT 0
11702: PPUSH
11703: CALL_OW 50
// result := result ^ un ;
11707: LD_ADDR_VAR 0 7
11711: PUSH
11712: LD_VAR 0 7
11716: PUSH
11717: LD_VAR 0 14
11721: ADD
11722: ST_TO_ADDR
// end ;
11723: GO 11601
11725: POP
11726: POP
// end ; end ;
11727: LD_VAR 0 7
11731: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11732: LD_INT 0
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
// result := false ;
11750: LD_ADDR_VAR 0 3
11754: PUSH
11755: LD_INT 0
11757: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11758: LD_VAR 0 1
11762: NOT
11763: PUSH
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 266
11773: PUSH
11774: LD_INT 32
11776: PUSH
11777: LD_INT 33
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: IN
11784: NOT
11785: OR
11786: IFFALSE 11790
// exit ;
11788: GO 12899
// nat := GetNation ( tower ) ;
11790: LD_ADDR_VAR 0 12
11794: PUSH
11795: LD_VAR 0 1
11799: PPUSH
11800: CALL_OW 248
11804: ST_TO_ADDR
// side := GetSide ( tower ) ;
11805: LD_ADDR_VAR 0 16
11809: PUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 255
11819: ST_TO_ADDR
// x := GetX ( tower ) ;
11820: LD_ADDR_VAR 0 10
11824: PUSH
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 250
11834: ST_TO_ADDR
// y := GetY ( tower ) ;
11835: LD_ADDR_VAR 0 11
11839: PUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 251
11849: ST_TO_ADDR
// if not x or not y then
11850: LD_VAR 0 10
11854: NOT
11855: PUSH
11856: LD_VAR 0 11
11860: NOT
11861: OR
11862: IFFALSE 11866
// exit ;
11864: GO 12899
// weapon := 0 ;
11866: LD_ADDR_VAR 0 18
11870: PUSH
11871: LD_INT 0
11873: ST_TO_ADDR
// fac_list := [ ] ;
11874: LD_ADDR_VAR 0 17
11878: PUSH
11879: EMPTY
11880: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11881: LD_ADDR_VAR 0 6
11885: PUSH
11886: LD_VAR 0 1
11890: PPUSH
11891: CALL_OW 274
11895: PPUSH
11896: LD_VAR 0 2
11900: PPUSH
11901: LD_INT 0
11903: PPUSH
11904: CALL 9470 0 3
11908: PPUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 3
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 72
11923: ST_TO_ADDR
// if not factories then
11924: LD_VAR 0 6
11928: NOT
11929: IFFALSE 11933
// exit ;
11931: GO 12899
// for i in factories do
11933: LD_ADDR_VAR 0 8
11937: PUSH
11938: LD_VAR 0 6
11942: PUSH
11943: FOR_IN
11944: IFFALSE 11969
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11946: LD_ADDR_VAR 0 17
11950: PUSH
11951: LD_VAR 0 17
11955: PUSH
11956: LD_VAR 0 8
11960: PPUSH
11961: CALL_OW 478
11965: UNION
11966: ST_TO_ADDR
11967: GO 11943
11969: POP
11970: POP
// if not fac_list then
11971: LD_VAR 0 17
11975: NOT
11976: IFFALSE 11980
// exit ;
11978: GO 12899
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11980: LD_ADDR_VAR 0 5
11984: PUSH
11985: LD_INT 4
11987: PUSH
11988: LD_INT 5
11990: PUSH
11991: LD_INT 9
11993: PUSH
11994: LD_INT 10
11996: PUSH
11997: LD_INT 6
11999: PUSH
12000: LD_INT 7
12002: PUSH
12003: LD_INT 11
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 27
12017: PUSH
12018: LD_INT 28
12020: PUSH
12021: LD_INT 26
12023: PUSH
12024: LD_INT 30
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 43
12035: PUSH
12036: LD_INT 44
12038: PUSH
12039: LD_INT 46
12041: PUSH
12042: LD_INT 45
12044: PUSH
12045: LD_INT 47
12047: PUSH
12048: LD_INT 49
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_VAR 0 12
12068: ARRAY
12069: ST_TO_ADDR
// list := list isect fac_list ;
12070: LD_ADDR_VAR 0 5
12074: PUSH
12075: LD_VAR 0 5
12079: PUSH
12080: LD_VAR 0 17
12084: ISECT
12085: ST_TO_ADDR
// if not list then
12086: LD_VAR 0 5
12090: NOT
12091: IFFALSE 12095
// exit ;
12093: GO 12899
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12095: LD_VAR 0 12
12099: PUSH
12100: LD_INT 3
12102: EQUAL
12103: PUSH
12104: LD_INT 49
12106: PUSH
12107: LD_VAR 0 5
12111: IN
12112: AND
12113: PUSH
12114: LD_INT 31
12116: PPUSH
12117: LD_VAR 0 16
12121: PPUSH
12122: CALL_OW 321
12126: PUSH
12127: LD_INT 2
12129: EQUAL
12130: AND
12131: IFFALSE 12191
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12133: LD_INT 22
12135: PUSH
12136: LD_VAR 0 16
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 35
12147: PUSH
12148: LD_INT 49
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 91
12157: PUSH
12158: LD_VAR 0 1
12162: PUSH
12163: LD_INT 10
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 69
12180: NOT
12181: IFFALSE 12191
// weapon := ru_time_lapser ;
12183: LD_ADDR_VAR 0 18
12187: PUSH
12188: LD_INT 49
12190: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12191: LD_VAR 0 12
12195: PUSH
12196: LD_INT 1
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: IN
12206: PUSH
12207: LD_INT 11
12209: PUSH
12210: LD_VAR 0 5
12214: IN
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_VAR 0 5
12223: IN
12224: OR
12225: AND
12226: PUSH
12227: LD_INT 6
12229: PPUSH
12230: LD_VAR 0 16
12234: PPUSH
12235: CALL_OW 321
12239: PUSH
12240: LD_INT 2
12242: EQUAL
12243: AND
12244: IFFALSE 12409
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12246: LD_INT 22
12248: PUSH
12249: LD_VAR 0 16
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: LD_INT 35
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 35
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 91
12288: PUSH
12289: LD_VAR 0 1
12293: PUSH
12294: LD_INT 18
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: NOT
12312: PUSH
12313: LD_INT 22
12315: PUSH
12316: LD_VAR 0 16
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 2
12327: PUSH
12328: LD_INT 30
12330: PUSH
12331: LD_INT 32
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_INT 33
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 91
12355: PUSH
12356: LD_VAR 0 1
12360: PUSH
12361: LD_INT 12
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: PUSH
12382: LD_INT 2
12384: GREATER
12385: AND
12386: IFFALSE 12409
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12388: LD_ADDR_VAR 0 18
12392: PUSH
12393: LD_INT 11
12395: PUSH
12396: LD_INT 30
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_VAR 0 12
12407: ARRAY
12408: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12409: LD_VAR 0 18
12413: NOT
12414: PUSH
12415: LD_INT 40
12417: PPUSH
12418: LD_VAR 0 16
12422: PPUSH
12423: CALL_OW 321
12427: PUSH
12428: LD_INT 2
12430: EQUAL
12431: AND
12432: PUSH
12433: LD_INT 7
12435: PUSH
12436: LD_VAR 0 5
12440: IN
12441: PUSH
12442: LD_INT 28
12444: PUSH
12445: LD_VAR 0 5
12449: IN
12450: OR
12451: PUSH
12452: LD_INT 45
12454: PUSH
12455: LD_VAR 0 5
12459: IN
12460: OR
12461: AND
12462: IFFALSE 12716
// begin hex := GetHexInfo ( x , y ) ;
12464: LD_ADDR_VAR 0 4
12468: PUSH
12469: LD_VAR 0 10
12473: PPUSH
12474: LD_VAR 0 11
12478: PPUSH
12479: CALL_OW 546
12483: ST_TO_ADDR
// if hex [ 1 ] then
12484: LD_VAR 0 4
12488: PUSH
12489: LD_INT 1
12491: ARRAY
12492: IFFALSE 12496
// exit ;
12494: GO 12899
// height := hex [ 2 ] ;
12496: LD_ADDR_VAR 0 15
12500: PUSH
12501: LD_VAR 0 4
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12510: LD_ADDR_VAR 0 14
12514: PUSH
12515: LD_INT 0
12517: PUSH
12518: LD_INT 2
12520: PUSH
12521: LD_INT 3
12523: PUSH
12524: LD_INT 5
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: ST_TO_ADDR
// for i in tmp do
12533: LD_ADDR_VAR 0 8
12537: PUSH
12538: LD_VAR 0 14
12542: PUSH
12543: FOR_IN
12544: IFFALSE 12714
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12546: LD_ADDR_VAR 0 9
12550: PUSH
12551: LD_VAR 0 10
12555: PPUSH
12556: LD_VAR 0 8
12560: PPUSH
12561: LD_INT 5
12563: PPUSH
12564: CALL_OW 272
12568: PUSH
12569: LD_VAR 0 11
12573: PPUSH
12574: LD_VAR 0 8
12578: PPUSH
12579: LD_INT 5
12581: PPUSH
12582: CALL_OW 273
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12591: LD_VAR 0 9
12595: PUSH
12596: LD_INT 1
12598: ARRAY
12599: PPUSH
12600: LD_VAR 0 9
12604: PUSH
12605: LD_INT 2
12607: ARRAY
12608: PPUSH
12609: CALL_OW 488
12613: IFFALSE 12712
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12615: LD_ADDR_VAR 0 4
12619: PUSH
12620: LD_VAR 0 9
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: LD_VAR 0 9
12633: PUSH
12634: LD_INT 2
12636: ARRAY
12637: PPUSH
12638: CALL_OW 546
12642: ST_TO_ADDR
// if hex [ 1 ] then
12643: LD_VAR 0 4
12647: PUSH
12648: LD_INT 1
12650: ARRAY
12651: IFFALSE 12655
// continue ;
12653: GO 12543
// h := hex [ 2 ] ;
12655: LD_ADDR_VAR 0 13
12659: PUSH
12660: LD_VAR 0 4
12664: PUSH
12665: LD_INT 2
12667: ARRAY
12668: ST_TO_ADDR
// if h + 7 < height then
12669: LD_VAR 0 13
12673: PUSH
12674: LD_INT 7
12676: PLUS
12677: PUSH
12678: LD_VAR 0 15
12682: LESS
12683: IFFALSE 12712
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12685: LD_ADDR_VAR 0 18
12689: PUSH
12690: LD_INT 7
12692: PUSH
12693: LD_INT 28
12695: PUSH
12696: LD_INT 45
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_VAR 0 12
12708: ARRAY
12709: ST_TO_ADDR
// break ;
12710: GO 12714
// end ; end ; end ;
12712: GO 12543
12714: POP
12715: POP
// end ; if not weapon then
12716: LD_VAR 0 18
12720: NOT
12721: IFFALSE 12781
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12723: LD_ADDR_VAR 0 5
12727: PUSH
12728: LD_VAR 0 5
12732: PUSH
12733: LD_INT 11
12735: PUSH
12736: LD_INT 30
12738: PUSH
12739: LD_INT 49
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: DIFF
12747: ST_TO_ADDR
// if not list then
12748: LD_VAR 0 5
12752: NOT
12753: IFFALSE 12757
// exit ;
12755: GO 12899
// weapon := list [ rand ( 1 , list ) ] ;
12757: LD_ADDR_VAR 0 18
12761: PUSH
12762: LD_VAR 0 5
12766: PUSH
12767: LD_INT 1
12769: PPUSH
12770: LD_VAR 0 5
12774: PPUSH
12775: CALL_OW 12
12779: ARRAY
12780: ST_TO_ADDR
// end ; if weapon then
12781: LD_VAR 0 18
12785: IFFALSE 12899
// begin tmp := CostOfWeapon ( weapon ) ;
12787: LD_ADDR_VAR 0 14
12791: PUSH
12792: LD_VAR 0 18
12796: PPUSH
12797: CALL_OW 451
12801: ST_TO_ADDR
// j := GetBase ( tower ) ;
12802: LD_ADDR_VAR 0 9
12806: PUSH
12807: LD_VAR 0 1
12811: PPUSH
12812: CALL_OW 274
12816: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12817: LD_VAR 0 9
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: CALL_OW 275
12829: PUSH
12830: LD_VAR 0 14
12834: PUSH
12835: LD_INT 1
12837: ARRAY
12838: GREATEREQUAL
12839: PUSH
12840: LD_VAR 0 9
12844: PPUSH
12845: LD_INT 2
12847: PPUSH
12848: CALL_OW 275
12852: PUSH
12853: LD_VAR 0 14
12857: PUSH
12858: LD_INT 2
12860: ARRAY
12861: GREATEREQUAL
12862: AND
12863: PUSH
12864: LD_VAR 0 9
12868: PPUSH
12869: LD_INT 3
12871: PPUSH
12872: CALL_OW 275
12876: PUSH
12877: LD_VAR 0 14
12881: PUSH
12882: LD_INT 3
12884: ARRAY
12885: GREATEREQUAL
12886: AND
12887: IFFALSE 12899
// result := weapon ;
12889: LD_ADDR_VAR 0 3
12893: PUSH
12894: LD_VAR 0 18
12898: ST_TO_ADDR
// end ; end ;
12899: LD_VAR 0 3
12903: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12904: LD_INT 0
12906: PPUSH
12907: PPUSH
// result := true ;
12908: LD_ADDR_VAR 0 3
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// if array1 = array2 then
12916: LD_VAR 0 1
12920: PUSH
12921: LD_VAR 0 2
12925: EQUAL
12926: IFFALSE 12986
// begin for i = 1 to array1 do
12928: LD_ADDR_VAR 0 4
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_VAR 0 1
12942: PUSH
12943: FOR_TO
12944: IFFALSE 12982
// if array1 [ i ] <> array2 [ i ] then
12946: LD_VAR 0 1
12950: PUSH
12951: LD_VAR 0 4
12955: ARRAY
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_VAR 0 4
12966: ARRAY
12967: NONEQUAL
12968: IFFALSE 12980
// begin result := false ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// break ;
12978: GO 12982
// end ;
12980: GO 12943
12982: POP
12983: POP
// end else
12984: GO 12994
// result := false ;
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 0
12993: ST_TO_ADDR
// end ;
12994: LD_VAR 0 3
12998: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
// if not array1 or not array2 then
13003: LD_VAR 0 1
13007: NOT
13008: PUSH
13009: LD_VAR 0 2
13013: NOT
13014: OR
13015: IFFALSE 13019
// exit ;
13017: GO 13083
// result := true ;
13019: LD_ADDR_VAR 0 3
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// for i = 1 to array1 do
13027: LD_ADDR_VAR 0 4
13031: PUSH
13032: DOUBLE
13033: LD_INT 1
13035: DEC
13036: ST_TO_ADDR
13037: LD_VAR 0 1
13041: PUSH
13042: FOR_TO
13043: IFFALSE 13081
// if array1 [ i ] <> array2 [ i ] then
13045: LD_VAR 0 1
13049: PUSH
13050: LD_VAR 0 4
13054: ARRAY
13055: PUSH
13056: LD_VAR 0 2
13060: PUSH
13061: LD_VAR 0 4
13065: ARRAY
13066: NONEQUAL
13067: IFFALSE 13079
// begin result := false ;
13069: LD_ADDR_VAR 0 3
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// break ;
13077: GO 13081
// end ;
13079: GO 13042
13081: POP
13082: POP
// end ;
13083: LD_VAR 0 3
13087: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13088: LD_INT 0
13090: PPUSH
13091: PPUSH
13092: PPUSH
// pom := GetBase ( fac ) ;
13093: LD_ADDR_VAR 0 5
13097: PUSH
13098: LD_VAR 0 1
13102: PPUSH
13103: CALL_OW 274
13107: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13108: LD_ADDR_VAR 0 4
13112: PUSH
13113: LD_VAR 0 2
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: LD_VAR 0 2
13126: PUSH
13127: LD_INT 2
13129: ARRAY
13130: PPUSH
13131: LD_VAR 0 2
13135: PUSH
13136: LD_INT 3
13138: ARRAY
13139: PPUSH
13140: LD_VAR 0 2
13144: PUSH
13145: LD_INT 4
13147: ARRAY
13148: PPUSH
13149: CALL_OW 449
13153: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13154: LD_ADDR_VAR 0 3
13158: PUSH
13159: LD_VAR 0 5
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: CALL_OW 275
13171: PUSH
13172: LD_VAR 0 4
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: GREATEREQUAL
13181: PUSH
13182: LD_VAR 0 5
13186: PPUSH
13187: LD_INT 2
13189: PPUSH
13190: CALL_OW 275
13194: PUSH
13195: LD_VAR 0 4
13199: PUSH
13200: LD_INT 2
13202: ARRAY
13203: GREATEREQUAL
13204: AND
13205: PUSH
13206: LD_VAR 0 5
13210: PPUSH
13211: LD_INT 3
13213: PPUSH
13214: CALL_OW 275
13218: PUSH
13219: LD_VAR 0 4
13223: PUSH
13224: LD_INT 3
13226: ARRAY
13227: GREATEREQUAL
13228: AND
13229: ST_TO_ADDR
// end ;
13230: LD_VAR 0 3
13234: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
// pom := GetBase ( building ) ;
13241: LD_ADDR_VAR 0 3
13245: PUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 274
13255: ST_TO_ADDR
// if not pom then
13256: LD_VAR 0 3
13260: NOT
13261: IFFALSE 13265
// exit ;
13263: GO 13435
// btype := GetBType ( building ) ;
13265: LD_ADDR_VAR 0 5
13269: PUSH
13270: LD_VAR 0 1
13274: PPUSH
13275: CALL_OW 266
13279: ST_TO_ADDR
// if btype = b_armoury then
13280: LD_VAR 0 5
13284: PUSH
13285: LD_INT 4
13287: EQUAL
13288: IFFALSE 13298
// btype := b_barracks ;
13290: LD_ADDR_VAR 0 5
13294: PUSH
13295: LD_INT 5
13297: ST_TO_ADDR
// if btype = b_depot then
13298: LD_VAR 0 5
13302: PUSH
13303: LD_INT 0
13305: EQUAL
13306: IFFALSE 13316
// btype := b_warehouse ;
13308: LD_ADDR_VAR 0 5
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// if btype = b_workshop then
13316: LD_VAR 0 5
13320: PUSH
13321: LD_INT 2
13323: EQUAL
13324: IFFALSE 13334
// btype := b_factory ;
13326: LD_ADDR_VAR 0 5
13330: PUSH
13331: LD_INT 3
13333: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13334: LD_ADDR_VAR 0 4
13338: PUSH
13339: LD_VAR 0 5
13343: PPUSH
13344: LD_VAR 0 1
13348: PPUSH
13349: CALL_OW 248
13353: PPUSH
13354: CALL_OW 450
13358: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13359: LD_ADDR_VAR 0 2
13363: PUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: CALL_OW 275
13376: PUSH
13377: LD_VAR 0 4
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: GREATEREQUAL
13386: PUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: LD_INT 2
13394: PPUSH
13395: CALL_OW 275
13399: PUSH
13400: LD_VAR 0 4
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: GREATEREQUAL
13409: AND
13410: PUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 3
13418: PPUSH
13419: CALL_OW 275
13423: PUSH
13424: LD_VAR 0 4
13428: PUSH
13429: LD_INT 3
13431: ARRAY
13432: GREATEREQUAL
13433: AND
13434: ST_TO_ADDR
// end ;
13435: LD_VAR 0 2
13439: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13440: LD_INT 0
13442: PPUSH
13443: PPUSH
13444: PPUSH
// pom := GetBase ( building ) ;
13445: LD_ADDR_VAR 0 4
13449: PUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 274
13459: ST_TO_ADDR
// if not pom then
13460: LD_VAR 0 4
13464: NOT
13465: IFFALSE 13469
// exit ;
13467: GO 13570
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13469: LD_ADDR_VAR 0 5
13473: PUSH
13474: LD_VAR 0 2
13478: PPUSH
13479: LD_VAR 0 1
13483: PPUSH
13484: CALL_OW 248
13488: PPUSH
13489: CALL_OW 450
13493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13494: LD_ADDR_VAR 0 3
13498: PUSH
13499: LD_VAR 0 4
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 275
13511: PUSH
13512: LD_VAR 0 5
13516: PUSH
13517: LD_INT 1
13519: ARRAY
13520: GREATEREQUAL
13521: PUSH
13522: LD_VAR 0 4
13526: PPUSH
13527: LD_INT 2
13529: PPUSH
13530: CALL_OW 275
13534: PUSH
13535: LD_VAR 0 5
13539: PUSH
13540: LD_INT 2
13542: ARRAY
13543: GREATEREQUAL
13544: AND
13545: PUSH
13546: LD_VAR 0 4
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: CALL_OW 275
13558: PUSH
13559: LD_VAR 0 5
13563: PUSH
13564: LD_INT 3
13566: ARRAY
13567: GREATEREQUAL
13568: AND
13569: ST_TO_ADDR
// end ;
13570: LD_VAR 0 3
13574: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
13586: PPUSH
13587: PPUSH
// result := false ;
13588: LD_ADDR_VAR 0 8
13592: PUSH
13593: LD_INT 0
13595: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13596: LD_VAR 0 5
13600: NOT
13601: PUSH
13602: LD_VAR 0 1
13606: NOT
13607: OR
13608: PUSH
13609: LD_VAR 0 2
13613: NOT
13614: OR
13615: PUSH
13616: LD_VAR 0 3
13620: NOT
13621: OR
13622: IFFALSE 13626
// exit ;
13624: GO 14440
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13626: LD_ADDR_VAR 0 14
13630: PUSH
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_VAR 0 2
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_VAR 0 4
13650: PPUSH
13651: LD_VAR 0 5
13655: PUSH
13656: LD_INT 1
13658: ARRAY
13659: PPUSH
13660: CALL_OW 248
13664: PPUSH
13665: LD_INT 0
13667: PPUSH
13668: CALL 15673 0 6
13672: ST_TO_ADDR
// if not hexes then
13673: LD_VAR 0 14
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 14440
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13682: LD_ADDR_VAR 0 17
13686: PUSH
13687: LD_VAR 0 5
13691: PPUSH
13692: LD_INT 22
13694: PUSH
13695: LD_VAR 0 13
13699: PPUSH
13700: CALL_OW 255
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: LD_INT 30
13714: PUSH
13715: LD_INT 0
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 30
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 72
13745: ST_TO_ADDR
// for i = 1 to hexes do
13746: LD_ADDR_VAR 0 9
13750: PUSH
13751: DOUBLE
13752: LD_INT 1
13754: DEC
13755: ST_TO_ADDR
13756: LD_VAR 0 14
13760: PUSH
13761: FOR_TO
13762: IFFALSE 14438
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13764: LD_ADDR_VAR 0 13
13768: PUSH
13769: LD_VAR 0 14
13773: PUSH
13774: LD_VAR 0 9
13778: ARRAY
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PPUSH
13784: LD_VAR 0 14
13788: PUSH
13789: LD_VAR 0 9
13793: ARRAY
13794: PUSH
13795: LD_INT 2
13797: ARRAY
13798: PPUSH
13799: CALL_OW 428
13803: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13804: LD_VAR 0 14
13808: PUSH
13809: LD_VAR 0 9
13813: ARRAY
13814: PUSH
13815: LD_INT 1
13817: ARRAY
13818: PPUSH
13819: LD_VAR 0 14
13823: PUSH
13824: LD_VAR 0 9
13828: ARRAY
13829: PUSH
13830: LD_INT 2
13832: ARRAY
13833: PPUSH
13834: CALL_OW 351
13838: PUSH
13839: LD_VAR 0 14
13843: PUSH
13844: LD_VAR 0 9
13848: ARRAY
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PPUSH
13854: LD_VAR 0 14
13858: PUSH
13859: LD_VAR 0 9
13863: ARRAY
13864: PUSH
13865: LD_INT 2
13867: ARRAY
13868: PPUSH
13869: CALL_OW 488
13873: NOT
13874: OR
13875: PUSH
13876: LD_VAR 0 13
13880: PPUSH
13881: CALL_OW 247
13885: PUSH
13886: LD_INT 3
13888: EQUAL
13889: OR
13890: IFFALSE 13896
// exit ;
13892: POP
13893: POP
13894: GO 14440
// if not tmp then
13896: LD_VAR 0 13
13900: NOT
13901: IFFALSE 13905
// continue ;
13903: GO 13761
// result := true ;
13905: LD_ADDR_VAR 0 8
13909: PUSH
13910: LD_INT 1
13912: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13913: LD_VAR 0 6
13917: PUSH
13918: LD_VAR 0 13
13922: PPUSH
13923: CALL_OW 247
13927: PUSH
13928: LD_INT 2
13930: EQUAL
13931: AND
13932: PUSH
13933: LD_VAR 0 13
13937: PPUSH
13938: CALL_OW 263
13942: PUSH
13943: LD_INT 1
13945: EQUAL
13946: AND
13947: IFFALSE 14111
// begin if IsDrivenBy ( tmp ) then
13949: LD_VAR 0 13
13953: PPUSH
13954: CALL_OW 311
13958: IFFALSE 13962
// continue ;
13960: GO 13761
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13962: LD_VAR 0 6
13966: PPUSH
13967: LD_INT 3
13969: PUSH
13970: LD_INT 60
13972: PUSH
13973: EMPTY
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 3
13982: PUSH
13983: LD_INT 55
13985: PUSH
13986: EMPTY
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 72
14001: IFFALSE 14109
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14003: LD_ADDR_VAR 0 18
14007: PUSH
14008: LD_VAR 0 6
14012: PPUSH
14013: LD_INT 3
14015: PUSH
14016: LD_INT 60
14018: PUSH
14019: EMPTY
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: LD_INT 55
14031: PUSH
14032: EMPTY
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 72
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: ST_TO_ADDR
// if IsInUnit ( driver ) then
14052: LD_VAR 0 18
14056: PPUSH
14057: CALL_OW 310
14061: IFFALSE 14072
// ComExit ( driver ) ;
14063: LD_VAR 0 18
14067: PPUSH
14068: CALL 39452 0 1
// AddComEnterUnit ( driver , tmp ) ;
14072: LD_VAR 0 18
14076: PPUSH
14077: LD_VAR 0 13
14081: PPUSH
14082: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14086: LD_VAR 0 18
14090: PPUSH
14091: LD_VAR 0 7
14095: PPUSH
14096: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14100: LD_VAR 0 18
14104: PPUSH
14105: CALL_OW 181
// end ; continue ;
14109: GO 13761
// end ; if not cleaners or not tmp in cleaners then
14111: LD_VAR 0 6
14115: NOT
14116: PUSH
14117: LD_VAR 0 13
14121: PUSH
14122: LD_VAR 0 6
14126: IN
14127: NOT
14128: OR
14129: IFFALSE 14436
// begin if dep then
14131: LD_VAR 0 17
14135: IFFALSE 14271
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14137: LD_ADDR_VAR 0 16
14141: PUSH
14142: LD_VAR 0 17
14146: PUSH
14147: LD_INT 1
14149: ARRAY
14150: PPUSH
14151: CALL_OW 250
14155: PPUSH
14156: LD_VAR 0 17
14160: PUSH
14161: LD_INT 1
14163: ARRAY
14164: PPUSH
14165: CALL_OW 254
14169: PPUSH
14170: LD_INT 5
14172: PPUSH
14173: CALL_OW 272
14177: PUSH
14178: LD_VAR 0 17
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: CALL_OW 251
14191: PPUSH
14192: LD_VAR 0 17
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PPUSH
14201: CALL_OW 254
14205: PPUSH
14206: LD_INT 5
14208: PPUSH
14209: CALL_OW 273
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14218: LD_VAR 0 16
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PPUSH
14227: LD_VAR 0 16
14231: PUSH
14232: LD_INT 2
14234: ARRAY
14235: PPUSH
14236: CALL_OW 488
14240: IFFALSE 14271
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14242: LD_VAR 0 13
14246: PPUSH
14247: LD_VAR 0 16
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: LD_VAR 0 16
14260: PUSH
14261: LD_INT 2
14263: ARRAY
14264: PPUSH
14265: CALL_OW 111
// continue ;
14269: GO 13761
// end ; end ; r := GetDir ( tmp ) ;
14271: LD_ADDR_VAR 0 15
14275: PUSH
14276: LD_VAR 0 13
14280: PPUSH
14281: CALL_OW 254
14285: ST_TO_ADDR
// if r = 5 then
14286: LD_VAR 0 15
14290: PUSH
14291: LD_INT 5
14293: EQUAL
14294: IFFALSE 14304
// r := 0 ;
14296: LD_ADDR_VAR 0 15
14300: PUSH
14301: LD_INT 0
14303: ST_TO_ADDR
// for j = r to 5 do
14304: LD_ADDR_VAR 0 10
14308: PUSH
14309: DOUBLE
14310: LD_VAR 0 15
14314: DEC
14315: ST_TO_ADDR
14316: LD_INT 5
14318: PUSH
14319: FOR_TO
14320: IFFALSE 14434
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14322: LD_ADDR_VAR 0 11
14326: PUSH
14327: LD_VAR 0 13
14331: PPUSH
14332: CALL_OW 250
14336: PPUSH
14337: LD_VAR 0 10
14341: PPUSH
14342: LD_INT 2
14344: PPUSH
14345: CALL_OW 272
14349: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14350: LD_ADDR_VAR 0 12
14354: PUSH
14355: LD_VAR 0 13
14359: PPUSH
14360: CALL_OW 251
14364: PPUSH
14365: LD_VAR 0 10
14369: PPUSH
14370: LD_INT 2
14372: PPUSH
14373: CALL_OW 273
14377: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14378: LD_VAR 0 11
14382: PPUSH
14383: LD_VAR 0 12
14387: PPUSH
14388: CALL_OW 488
14392: PUSH
14393: LD_VAR 0 11
14397: PPUSH
14398: LD_VAR 0 12
14402: PPUSH
14403: CALL_OW 428
14407: NOT
14408: AND
14409: IFFALSE 14432
// begin ComMoveXY ( tmp , _x , _y ) ;
14411: LD_VAR 0 13
14415: PPUSH
14416: LD_VAR 0 11
14420: PPUSH
14421: LD_VAR 0 12
14425: PPUSH
14426: CALL_OW 111
// break ;
14430: GO 14434
// end ; end ;
14432: GO 14319
14434: POP
14435: POP
// end ; end ;
14436: GO 13761
14438: POP
14439: POP
// end ;
14440: LD_VAR 0 8
14444: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14445: LD_INT 0
14447: PPUSH
// result := true ;
14448: LD_ADDR_VAR 0 3
14452: PUSH
14453: LD_INT 1
14455: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14456: LD_VAR 0 2
14460: PUSH
14461: LD_INT 24
14463: DOUBLE
14464: EQUAL
14465: IFTRUE 14475
14467: LD_INT 33
14469: DOUBLE
14470: EQUAL
14471: IFTRUE 14475
14473: GO 14500
14475: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_INT 32
14483: PPUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 321
14493: PUSH
14494: LD_INT 2
14496: EQUAL
14497: ST_TO_ADDR
14498: GO 14816
14500: LD_INT 20
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 14533
14508: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_INT 6
14516: PPUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 321
14526: PUSH
14527: LD_INT 2
14529: EQUAL
14530: ST_TO_ADDR
14531: GO 14816
14533: LD_INT 22
14535: DOUBLE
14536: EQUAL
14537: IFTRUE 14547
14539: LD_INT 36
14541: DOUBLE
14542: EQUAL
14543: IFTRUE 14547
14545: GO 14572
14547: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14548: LD_ADDR_VAR 0 3
14552: PUSH
14553: LD_INT 15
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 321
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: ST_TO_ADDR
14570: GO 14816
14572: LD_INT 30
14574: DOUBLE
14575: EQUAL
14576: IFTRUE 14580
14578: GO 14605
14580: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: LD_INT 20
14588: PPUSH
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 321
14598: PUSH
14599: LD_INT 2
14601: EQUAL
14602: ST_TO_ADDR
14603: GO 14816
14605: LD_INT 28
14607: DOUBLE
14608: EQUAL
14609: IFTRUE 14619
14611: LD_INT 21
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14644
14619: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_INT 21
14627: PPUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 321
14637: PUSH
14638: LD_INT 2
14640: EQUAL
14641: ST_TO_ADDR
14642: GO 14816
14644: LD_INT 16
14646: DOUBLE
14647: EQUAL
14648: IFTRUE 14652
14650: GO 14677
14652: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14653: LD_ADDR_VAR 0 3
14657: PUSH
14658: LD_INT 84
14660: PPUSH
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 321
14670: PUSH
14671: LD_INT 2
14673: EQUAL
14674: ST_TO_ADDR
14675: GO 14816
14677: LD_INT 19
14679: DOUBLE
14680: EQUAL
14681: IFTRUE 14691
14683: LD_INT 23
14685: DOUBLE
14686: EQUAL
14687: IFTRUE 14691
14689: GO 14716
14691: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_INT 83
14699: PPUSH
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 321
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: ST_TO_ADDR
14714: GO 14816
14716: LD_INT 17
14718: DOUBLE
14719: EQUAL
14720: IFTRUE 14724
14722: GO 14749
14724: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14725: LD_ADDR_VAR 0 3
14729: PUSH
14730: LD_INT 39
14732: PPUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 321
14742: PUSH
14743: LD_INT 2
14745: EQUAL
14746: ST_TO_ADDR
14747: GO 14816
14749: LD_INT 18
14751: DOUBLE
14752: EQUAL
14753: IFTRUE 14757
14755: GO 14782
14757: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_INT 40
14765: PPUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 321
14775: PUSH
14776: LD_INT 2
14778: EQUAL
14779: ST_TO_ADDR
14780: GO 14816
14782: LD_INT 27
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14815
14790: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: LD_INT 35
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 321
14808: PUSH
14809: LD_INT 2
14811: EQUAL
14812: ST_TO_ADDR
14813: GO 14816
14815: POP
// end ;
14816: LD_VAR 0 3
14820: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14821: LD_INT 0
14823: PPUSH
14824: PPUSH
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
// result := false ;
14834: LD_ADDR_VAR 0 6
14838: PUSH
14839: LD_INT 0
14841: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14842: LD_VAR 0 1
14846: NOT
14847: PUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 266
14857: PUSH
14858: LD_INT 0
14860: PUSH
14861: LD_INT 1
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: IN
14868: NOT
14869: OR
14870: PUSH
14871: LD_VAR 0 2
14875: NOT
14876: OR
14877: PUSH
14878: LD_VAR 0 5
14882: PUSH
14883: LD_INT 0
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: IN
14909: NOT
14910: OR
14911: PUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_VAR 0 4
14921: PPUSH
14922: CALL_OW 488
14926: NOT
14927: OR
14928: IFFALSE 14932
// exit ;
14930: GO 15668
// side := GetSide ( depot ) ;
14932: LD_ADDR_VAR 0 9
14936: PUSH
14937: LD_VAR 0 1
14941: PPUSH
14942: CALL_OW 255
14946: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14947: LD_VAR 0 9
14951: PPUSH
14952: LD_VAR 0 2
14956: PPUSH
14957: CALL 14445 0 2
14961: NOT
14962: IFFALSE 14966
// exit ;
14964: GO 15668
// pom := GetBase ( depot ) ;
14966: LD_ADDR_VAR 0 10
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 274
14980: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14981: LD_ADDR_VAR 0 11
14985: PUSH
14986: LD_VAR 0 2
14990: PPUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 248
15000: PPUSH
15001: CALL_OW 450
15005: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15006: LD_VAR 0 10
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 275
15018: PUSH
15019: LD_VAR 0 11
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: GREATEREQUAL
15028: PUSH
15029: LD_VAR 0 10
15033: PPUSH
15034: LD_INT 2
15036: PPUSH
15037: CALL_OW 275
15041: PUSH
15042: LD_VAR 0 11
15046: PUSH
15047: LD_INT 2
15049: ARRAY
15050: GREATEREQUAL
15051: AND
15052: PUSH
15053: LD_VAR 0 10
15057: PPUSH
15058: LD_INT 3
15060: PPUSH
15061: CALL_OW 275
15065: PUSH
15066: LD_VAR 0 11
15070: PUSH
15071: LD_INT 3
15073: ARRAY
15074: GREATEREQUAL
15075: AND
15076: NOT
15077: IFFALSE 15081
// exit ;
15079: GO 15668
// if GetBType ( depot ) = b_depot then
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 266
15090: PUSH
15091: LD_INT 0
15093: EQUAL
15094: IFFALSE 15106
// dist := 28 else
15096: LD_ADDR_VAR 0 14
15100: PUSH
15101: LD_INT 28
15103: ST_TO_ADDR
15104: GO 15114
// dist := 36 ;
15106: LD_ADDR_VAR 0 14
15110: PUSH
15111: LD_INT 36
15113: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15114: LD_VAR 0 1
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: CALL_OW 297
15133: PUSH
15134: LD_VAR 0 14
15138: GREATER
15139: IFFALSE 15143
// exit ;
15141: GO 15668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15143: LD_ADDR_VAR 0 12
15147: PUSH
15148: LD_VAR 0 2
15152: PPUSH
15153: LD_VAR 0 3
15157: PPUSH
15158: LD_VAR 0 4
15162: PPUSH
15163: LD_VAR 0 5
15167: PPUSH
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 248
15177: PPUSH
15178: LD_INT 0
15180: PPUSH
15181: CALL 15673 0 6
15185: ST_TO_ADDR
// if not hexes then
15186: LD_VAR 0 12
15190: NOT
15191: IFFALSE 15195
// exit ;
15193: GO 15668
// hex := GetHexInfo ( x , y ) ;
15195: LD_ADDR_VAR 0 15
15199: PUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: LD_VAR 0 4
15209: PPUSH
15210: CALL_OW 546
15214: ST_TO_ADDR
// if hex [ 1 ] then
15215: LD_VAR 0 15
15219: PUSH
15220: LD_INT 1
15222: ARRAY
15223: IFFALSE 15227
// exit ;
15225: GO 15668
// height := hex [ 2 ] ;
15227: LD_ADDR_VAR 0 13
15231: PUSH
15232: LD_VAR 0 15
15236: PUSH
15237: LD_INT 2
15239: ARRAY
15240: ST_TO_ADDR
// for i = 1 to hexes do
15241: LD_ADDR_VAR 0 7
15245: PUSH
15246: DOUBLE
15247: LD_INT 1
15249: DEC
15250: ST_TO_ADDR
15251: LD_VAR 0 12
15255: PUSH
15256: FOR_TO
15257: IFFALSE 15587
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15259: LD_VAR 0 12
15263: PUSH
15264: LD_VAR 0 7
15268: ARRAY
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: LD_VAR 0 12
15278: PUSH
15279: LD_VAR 0 7
15283: ARRAY
15284: PUSH
15285: LD_INT 2
15287: ARRAY
15288: PPUSH
15289: CALL_OW 488
15293: NOT
15294: PUSH
15295: LD_VAR 0 12
15299: PUSH
15300: LD_VAR 0 7
15304: ARRAY
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: LD_VAR 0 12
15314: PUSH
15315: LD_VAR 0 7
15319: ARRAY
15320: PUSH
15321: LD_INT 2
15323: ARRAY
15324: PPUSH
15325: CALL_OW 428
15329: PUSH
15330: LD_INT 0
15332: GREATER
15333: OR
15334: PUSH
15335: LD_VAR 0 12
15339: PUSH
15340: LD_VAR 0 7
15344: ARRAY
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: LD_VAR 0 12
15354: PUSH
15355: LD_VAR 0 7
15359: ARRAY
15360: PUSH
15361: LD_INT 2
15363: ARRAY
15364: PPUSH
15365: CALL_OW 351
15369: OR
15370: IFFALSE 15376
// exit ;
15372: POP
15373: POP
15374: GO 15668
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15376: LD_ADDR_VAR 0 8
15380: PUSH
15381: LD_VAR 0 12
15385: PUSH
15386: LD_VAR 0 7
15390: ARRAY
15391: PUSH
15392: LD_INT 1
15394: ARRAY
15395: PPUSH
15396: LD_VAR 0 12
15400: PUSH
15401: LD_VAR 0 7
15405: ARRAY
15406: PUSH
15407: LD_INT 2
15409: ARRAY
15410: PPUSH
15411: CALL_OW 546
15415: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15416: LD_VAR 0 8
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PUSH
15425: LD_VAR 0 8
15429: PUSH
15430: LD_INT 2
15432: ARRAY
15433: PUSH
15434: LD_VAR 0 13
15438: PUSH
15439: LD_INT 2
15441: PLUS
15442: GREATER
15443: OR
15444: PUSH
15445: LD_VAR 0 8
15449: PUSH
15450: LD_INT 2
15452: ARRAY
15453: PUSH
15454: LD_VAR 0 13
15458: PUSH
15459: LD_INT 2
15461: MINUS
15462: LESS
15463: OR
15464: PUSH
15465: LD_VAR 0 8
15469: PUSH
15470: LD_INT 3
15472: ARRAY
15473: PUSH
15474: LD_INT 0
15476: PUSH
15477: LD_INT 8
15479: PUSH
15480: LD_INT 9
15482: PUSH
15483: LD_INT 10
15485: PUSH
15486: LD_INT 11
15488: PUSH
15489: LD_INT 12
15491: PUSH
15492: LD_INT 13
15494: PUSH
15495: LD_INT 16
15497: PUSH
15498: LD_INT 17
15500: PUSH
15501: LD_INT 18
15503: PUSH
15504: LD_INT 19
15506: PUSH
15507: LD_INT 20
15509: PUSH
15510: LD_INT 21
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: IN
15528: NOT
15529: OR
15530: PUSH
15531: LD_VAR 0 8
15535: PUSH
15536: LD_INT 5
15538: ARRAY
15539: NOT
15540: OR
15541: PUSH
15542: LD_VAR 0 8
15546: PUSH
15547: LD_INT 6
15549: ARRAY
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: LD_INT 7
15559: PUSH
15560: LD_INT 9
15562: PUSH
15563: LD_INT 10
15565: PUSH
15566: LD_INT 11
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: IN
15577: NOT
15578: OR
15579: IFFALSE 15585
// exit ;
15581: POP
15582: POP
15583: GO 15668
// end ;
15585: GO 15256
15587: POP
15588: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15589: LD_VAR 0 9
15593: PPUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_VAR 0 4
15603: PPUSH
15604: LD_INT 20
15606: PPUSH
15607: CALL 7620 0 4
15611: PUSH
15612: LD_INT 4
15614: ARRAY
15615: IFFALSE 15619
// exit ;
15617: GO 15668
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15619: LD_VAR 0 2
15623: PUSH
15624: LD_INT 29
15626: PUSH
15627: LD_INT 30
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: IN
15634: PUSH
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_VAR 0 4
15644: PPUSH
15645: LD_VAR 0 9
15649: PPUSH
15650: CALL_OW 440
15654: NOT
15655: AND
15656: IFFALSE 15660
// exit ;
15658: GO 15668
// result := true ;
15660: LD_ADDR_VAR 0 6
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// end ;
15668: LD_VAR 0 6
15672: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15673: LD_INT 0
15675: PPUSH
15676: PPUSH
15677: PPUSH
15678: PPUSH
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
15690: PPUSH
15691: PPUSH
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
15699: PPUSH
15700: PPUSH
15701: PPUSH
15702: PPUSH
15703: PPUSH
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
15714: PPUSH
15715: PPUSH
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
15728: PPUSH
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
// result = [ ] ;
15733: LD_ADDR_VAR 0 7
15737: PUSH
15738: EMPTY
15739: ST_TO_ADDR
// temp_list = [ ] ;
15740: LD_ADDR_VAR 0 9
15744: PUSH
15745: EMPTY
15746: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15747: LD_VAR 0 4
15751: PUSH
15752: LD_INT 0
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: LD_INT 2
15760: PUSH
15761: LD_INT 3
15763: PUSH
15764: LD_INT 4
15766: PUSH
15767: LD_INT 5
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: IN
15778: NOT
15779: PUSH
15780: LD_VAR 0 1
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: IN
15795: PUSH
15796: LD_VAR 0 5
15800: PUSH
15801: LD_INT 1
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: LD_INT 3
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: IN
15815: NOT
15816: AND
15817: OR
15818: IFFALSE 15822
// exit ;
15820: GO 34213
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15822: LD_VAR 0 1
15826: PUSH
15827: LD_INT 6
15829: PUSH
15830: LD_INT 7
15832: PUSH
15833: LD_INT 8
15835: PUSH
15836: LD_INT 13
15838: PUSH
15839: LD_INT 12
15841: PUSH
15842: LD_INT 15
15844: PUSH
15845: LD_INT 11
15847: PUSH
15848: LD_INT 14
15850: PUSH
15851: LD_INT 10
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: IN
15865: IFFALSE 15875
// btype = b_lab ;
15867: LD_ADDR_VAR 0 1
15871: PUSH
15872: LD_INT 6
15874: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15875: LD_VAR 0 6
15879: PUSH
15880: LD_INT 0
15882: PUSH
15883: LD_INT 1
15885: PUSH
15886: LD_INT 2
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: IN
15894: NOT
15895: PUSH
15896: LD_VAR 0 1
15900: PUSH
15901: LD_INT 0
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 6
15915: PUSH
15916: LD_INT 36
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: LD_INT 31
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 33
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: IN
15947: NOT
15948: PUSH
15949: LD_VAR 0 6
15953: PUSH
15954: LD_INT 1
15956: EQUAL
15957: AND
15958: OR
15959: PUSH
15960: LD_VAR 0 1
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: LD_INT 3
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: IN
15975: NOT
15976: PUSH
15977: LD_VAR 0 6
15981: PUSH
15982: LD_INT 2
15984: EQUAL
15985: AND
15986: OR
15987: IFFALSE 15997
// mode = 0 ;
15989: LD_ADDR_VAR 0 6
15993: PUSH
15994: LD_INT 0
15996: ST_TO_ADDR
// case mode of 0 :
15997: LD_VAR 0 6
16001: PUSH
16002: LD_INT 0
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 27463
16010: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16011: LD_ADDR_VAR 0 11
16015: PUSH
16016: LD_INT 0
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: LD_INT 1
16031: NEG
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: LD_INT 0
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 0
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 1
16069: NEG
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: LD_INT 1
16084: NEG
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: NEG
16093: PUSH
16094: LD_INT 2
16096: NEG
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: LD_INT 2
16107: NEG
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: LD_INT 1
16118: NEG
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 0
16136: PUSH
16137: LD_INT 2
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: LD_INT 3
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: NEG
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16204: LD_ADDR_VAR 0 12
16208: PUSH
16209: LD_INT 0
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 0
16221: PUSH
16222: LD_INT 1
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 0
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: NEG
16263: PUSH
16264: LD_INT 0
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: NEG
16274: PUSH
16275: LD_INT 1
16277: NEG
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: LD_INT 1
16288: NEG
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: NEG
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 2
16327: NEG
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: NEG
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 2
16350: NEG
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 3
16361: NEG
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 3
16372: NEG
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16400: LD_ADDR_VAR 0 13
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 1
16420: NEG
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 1
16469: NEG
16470: PUSH
16471: LD_INT 1
16473: NEG
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 1
16481: NEG
16482: PUSH
16483: LD_INT 2
16485: NEG
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 2
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: LD_INT 2
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 2
16523: NEG
16524: PUSH
16525: LD_INT 1
16527: NEG
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 2
16535: NEG
16536: PUSH
16537: LD_INT 2
16539: NEG
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 2
16547: NEG
16548: PUSH
16549: LD_INT 3
16551: NEG
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 3
16559: NEG
16560: PUSH
16561: LD_INT 2
16563: NEG
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 3
16571: NEG
16572: PUSH
16573: LD_INT 3
16575: NEG
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16599: LD_ADDR_VAR 0 14
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: LD_INT 1
16672: NEG
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 2
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 0
16692: PUSH
16693: LD_INT 2
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 1
16706: NEG
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 1
16734: NEG
16735: PUSH
16736: LD_INT 1
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 1
16745: NEG
16746: PUSH
16747: LD_INT 3
16749: NEG
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 3
16760: NEG
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: LD_INT 2
16771: NEG
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16795: LD_ADDR_VAR 0 15
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 0
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: LD_INT 0
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: NEG
16865: PUSH
16866: LD_INT 1
16868: NEG
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 1
16879: NEG
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 2
16918: NEG
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: NEG
16930: PUSH
16931: LD_INT 1
16933: NEG
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 2
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 3
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 3
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16988: LD_ADDR_VAR 0 16
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: LD_INT 1
17008: NEG
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: LD_INT 0
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 1
17046: NEG
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 1
17057: NEG
17058: PUSH
17059: LD_INT 1
17061: NEG
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 1
17069: NEG
17070: PUSH
17071: LD_INT 2
17073: NEG
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 2
17123: NEG
17124: PUSH
17125: LD_INT 2
17127: NEG
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 3
17135: PUSH
17136: LD_INT 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 3
17145: PUSH
17146: LD_INT 3
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 2
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17181: LD_ADDR_VAR 0 17
17185: PUSH
17186: LD_INT 0
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: LD_INT 1
17201: NEG
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: LD_INT 0
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 1
17250: NEG
17251: PUSH
17252: LD_INT 1
17254: NEG
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: LD_INT 2
17266: NEG
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: LD_INT 2
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: LD_INT 1
17288: NEG
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 2
17296: PUSH
17297: LD_INT 0
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 2
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 2
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 2
17357: NEG
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: NEG
17369: PUSH
17370: LD_INT 1
17372: NEG
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: NEG
17381: PUSH
17382: LD_INT 2
17384: NEG
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17411: LD_ADDR_VAR 0 18
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: LD_INT 0
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 1
17431: NEG
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: LD_INT 0
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 1
17480: NEG
17481: PUSH
17482: LD_INT 1
17484: NEG
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 1
17492: NEG
17493: PUSH
17494: LD_INT 2
17496: NEG
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: LD_INT 2
17507: NEG
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 1
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 2
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 2
17587: NEG
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 2
17598: NEG
17599: PUSH
17600: LD_INT 1
17602: NEG
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: NEG
17611: PUSH
17612: LD_INT 2
17614: NEG
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17641: LD_ADDR_VAR 0 19
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 1
17722: NEG
17723: PUSH
17724: LD_INT 2
17726: NEG
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: LD_INT 2
17737: NEG
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 1
17745: PUSH
17746: LD_INT 1
17748: NEG
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 2
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 2
17817: NEG
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 2
17828: NEG
17829: PUSH
17830: LD_INT 1
17832: NEG
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 2
17840: NEG
17841: PUSH
17842: LD_INT 2
17844: NEG
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17871: LD_ADDR_VAR 0 20
17875: PUSH
17876: LD_INT 0
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 1
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 0
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: NEG
17930: PUSH
17931: LD_INT 0
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 1
17940: NEG
17941: PUSH
17942: LD_INT 1
17944: NEG
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: LD_INT 2
17956: NEG
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: LD_INT 2
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: LD_INT 1
17978: NEG
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 2
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 2
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: LD_INT 1
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 2
18058: NEG
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: NEG
18071: PUSH
18072: LD_INT 2
18074: NEG
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18101: LD_ADDR_VAR 0 21
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: LD_INT 0
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: NEG
18183: PUSH
18184: LD_INT 2
18186: NEG
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: LD_INT 2
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 2
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 2
18288: NEG
18289: PUSH
18290: LD_INT 1
18292: NEG
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: NEG
18301: PUSH
18302: LD_INT 2
18304: NEG
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18331: LD_ADDR_VAR 0 22
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 1
18389: NEG
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: NEG
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: LD_INT 2
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: LD_INT 2
18427: NEG
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 2
18507: NEG
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: LD_INT 1
18522: NEG
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 2
18530: NEG
18531: PUSH
18532: LD_INT 2
18534: NEG
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18561: LD_ADDR_VAR 0 23
18565: PUSH
18566: LD_INT 0
18568: PUSH
18569: LD_INT 0
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 1
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: LD_INT 1
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: LD_INT 2
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: LD_INT 2
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: NEG
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 2
18748: NEG
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: LD_INT 2
18764: NEG
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: NEG
18773: PUSH
18774: LD_INT 3
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: NEG
18785: PUSH
18786: LD_INT 3
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 2
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18841: LD_ADDR_VAR 0 24
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: LD_INT 1
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: LD_INT 2
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 2
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: NEG
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 2
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: LD_INT 2
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19117: LD_ADDR_VAR 0 25
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: LD_INT 1
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: LD_INT 2
19202: NEG
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: LD_INT 2
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 1
19282: NEG
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: NEG
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: NEG
19305: PUSH
19306: LD_INT 1
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: LD_INT 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19391: LD_ADDR_VAR 0 26
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: NEG
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 2
19590: NEG
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 2
19602: PUSH
19603: LD_INT 3
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: LD_INT 3
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 2
19633: NEG
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19667: LD_ADDR_VAR 0 27
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: LD_INT 2
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: LD_INT 1
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 2
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: NEG
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 3
19900: NEG
19901: PUSH
19902: LD_INT 1
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 3
19912: NEG
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19947: LD_ADDR_VAR 0 28
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 0
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 2
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: NEG
20135: PUSH
20136: LD_INT 1
20138: NEG
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 2
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: NEG
20159: PUSH
20160: LD_INT 3
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: LD_INT 3
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 3
20182: NEG
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 3
20194: NEG
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20229: LD_ADDR_VAR 0 29
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: LD_INT 2
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: LD_INT 3
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 3
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 3
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 3
20473: NEG
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20508: LD_ADDR_VAR 0 30
20512: PUSH
20513: LD_INT 0
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: NEG
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 2
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 2
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: NEG
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: NEG
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: NEG
20698: PUSH
20699: LD_INT 3
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: LD_INT 2
20712: NEG
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 3
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 3
20751: NEG
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20786: LD_ADDR_VAR 0 31
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: LD_INT 2
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: PUSH
20880: LD_INT 1
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 1
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: LD_INT 2
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 2
20975: NEG
20976: PUSH
20977: LD_INT 3
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 3
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: LD_INT 3
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: NEG
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: NEG
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21064: LD_ADDR_VAR 0 32
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: NEG
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: NEG
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 3
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: LD_INT 2
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 3
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: LD_INT 3
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 3
21307: NEG
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21342: LD_ADDR_VAR 0 33
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: LD_INT 1
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 2
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: NEG
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 2
21532: NEG
21533: PUSH
21534: LD_INT 3
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 3
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: LD_INT 3
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 3
21586: NEG
21587: PUSH
21588: LD_INT 2
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21621: LD_ADDR_VAR 0 34
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: LD_INT 2
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 2
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 2
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: NEG
21813: PUSH
21814: LD_INT 3
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 2
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 3
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 3
21866: NEG
21867: PUSH
21868: LD_INT 1
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21901: LD_ADDR_VAR 0 35
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 2
21992: NEG
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22013: LD_ADDR_VAR 0 36
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 0
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22125: LD_ADDR_VAR 0 37
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: NEG
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22237: LD_ADDR_VAR 0 38
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 0
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22349: LD_ADDR_VAR 0 39
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 1
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: NEG
22431: PUSH
22432: LD_INT 2
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22461: LD_ADDR_VAR 0 40
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22573: LD_ADDR_VAR 0 41
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: NEG
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 2
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: NEG
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 2
22763: NEG
22764: PUSH
22765: LD_INT 3
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 3
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 3
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 3
22847: NEG
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 3
22858: NEG
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 3
22870: NEG
22871: PUSH
22872: LD_INT 2
22874: NEG
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 3
22882: NEG
22883: PUSH
22884: LD_INT 3
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22923: LD_ADDR_VAR 0 42
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: LD_INT 2
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: LD_INT 2
23105: NEG
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 2
23113: NEG
23114: PUSH
23115: LD_INT 3
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 3
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 3
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 2
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 3
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 3
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: LD_INT 3
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: LD_INT 2
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 3
23232: NEG
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23273: LD_ADDR_VAR 0 43
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 2
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 2
23439: NEG
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 2
23450: NEG
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 1
23462: NEG
23463: PUSH
23464: LD_INT 3
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 3
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 3
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 3
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: NEG
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 3
23569: NEG
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 3
23580: NEG
23581: PUSH
23582: LD_INT 1
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23621: LD_ADDR_VAR 0 44
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 2
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: LD_INT 2
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 2
23776: NEG
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: NEG
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: LD_INT 3
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 3
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: LD_INT 3
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 2
23884: NEG
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 3
23895: NEG
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 3
23906: NEG
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 3
23918: NEG
23919: PUSH
23920: LD_INT 2
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 3
23930: NEG
23931: PUSH
23932: LD_INT 3
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23971: LD_ADDR_VAR 0 45
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: LD_INT 2
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 2
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: NEG
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: LD_INT 2
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: NEG
24162: PUSH
24163: LD_INT 3
24165: NEG
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 3
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: LD_INT 3
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 3
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 3
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: LD_INT 3
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: LD_INT 3
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 3
24268: NEG
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 3
24280: NEG
24281: PUSH
24282: LD_INT 3
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24321: LD_ADDR_VAR 0 46
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: LD_INT 2
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 2
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 2
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 2
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 3
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 3
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 3
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 3
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 3
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 3
24617: NEG
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 3
24628: NEG
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24669: LD_ADDR_VAR 0 47
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: LD_INT 2
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 2
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24820: LD_ADDR_VAR 0 48
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: LD_INT 2
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24967: LD_ADDR_VAR 0 49
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25111: LD_ADDR_VAR 0 50
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25255: LD_ADDR_VAR 0 51
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25402: LD_ADDR_VAR 0 52
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 2
25517: NEG
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: NEG
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25553: LD_ADDR_VAR 0 53
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: LD_INT 2
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: LD_INT 2
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: NEG
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: NEG
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25783: LD_ADDR_VAR 0 54
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 2
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: LD_INT 2
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26013: LD_ADDR_VAR 0 55
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 2
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: NEG
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26243: LD_ADDR_VAR 0 56
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 2
26419: NEG
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: NEG
26443: PUSH
26444: LD_INT 2
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26473: LD_ADDR_VAR 0 57
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26703: LD_ADDR_VAR 0 58
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 2
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 1
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: NEG
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: LD_INT 2
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26933: LD_ADDR_VAR 0 59
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27021: LD_ADDR_VAR 0 60
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27109: LD_ADDR_VAR 0 61
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27197: LD_ADDR_VAR 0 62
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27285: LD_ADDR_VAR 0 63
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27373: LD_ADDR_VAR 0 64
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
// end ; 1 :
27461: GO 33358
27463: LD_INT 1
27465: DOUBLE
27466: EQUAL
27467: IFTRUE 27471
27469: GO 30094
27471: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27472: LD_ADDR_VAR 0 11
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 3
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 3
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27516: LD_ADDR_VAR 0 12
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 3
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 3
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27557: LD_ADDR_VAR 0 13
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27597: LD_ADDR_VAR 0 14
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: LD_INT 3
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27638: LD_ADDR_VAR 0 15
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 3
27656: NEG
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 3
27667: NEG
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27682: LD_ADDR_VAR 0 16
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 3
27701: NEG
27702: PUSH
27703: LD_INT 2
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 3
27713: NEG
27714: PUSH
27715: LD_INT 3
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27728: LD_ADDR_VAR 0 17
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 3
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 3
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27772: LD_ADDR_VAR 0 18
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 3
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27813: LD_ADDR_VAR 0 19
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27853: LD_ADDR_VAR 0 20
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27894: LD_ADDR_VAR 0 21
27898: PUSH
27899: LD_INT 2
27901: NEG
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 3
27912: NEG
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 3
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27938: LD_ADDR_VAR 0 22
27942: PUSH
27943: LD_INT 2
27945: NEG
27946: PUSH
27947: LD_INT 3
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: NEG
27958: PUSH
27959: LD_INT 2
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 3
27969: NEG
27970: PUSH
27971: LD_INT 3
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27984: LD_ADDR_VAR 0 23
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 3
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 4
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 3
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28028: LD_ADDR_VAR 0 24
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 3
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 4
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28069: LD_ADDR_VAR 0 25
28073: PUSH
28074: LD_INT 3
28076: PUSH
28077: LD_INT 3
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 4
28086: PUSH
28087: LD_INT 3
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28109: LD_ADDR_VAR 0 26
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 4
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28150: LD_ADDR_VAR 0 27
28154: PUSH
28155: LD_INT 3
28157: NEG
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 3
28168: NEG
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 4
28179: NEG
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28194: LD_ADDR_VAR 0 28
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: LD_INT 3
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 3
28213: NEG
28214: PUSH
28215: LD_INT 4
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 4
28225: NEG
28226: PUSH
28227: LD_INT 3
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28240: LD_ADDR_VAR 0 29
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 3
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 3
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: LD_INT 4
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 4
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: LD_INT 3
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 5
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 5
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 4
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 6
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 6
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 5
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28395: LD_ADDR_VAR 0 30
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 3
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 3
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 4
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 4
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 4
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 5
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 5
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 5
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 6
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 6
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28538: LD_ADDR_VAR 0 31
28542: PUSH
28543: LD_INT 3
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: LD_INT 3
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: LD_INT 3
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 4
28575: PUSH
28576: LD_INT 3
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 4
28585: PUSH
28586: LD_INT 4
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 3
28595: PUSH
28596: LD_INT 4
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 5
28605: PUSH
28606: LD_INT 4
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 5
28615: PUSH
28616: LD_INT 5
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 4
28625: PUSH
28626: LD_INT 5
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 6
28635: PUSH
28636: LD_INT 5
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 6
28645: PUSH
28646: LD_INT 6
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 5
28655: PUSH
28656: LD_INT 6
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28677: LD_ADDR_VAR 0 32
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 3
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 3
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 4
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 4
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 3
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: LD_INT 5
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 5
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 4
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 6
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 6
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 5
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28820: LD_ADDR_VAR 0 33
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 3
28838: NEG
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: NEG
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 3
28861: NEG
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 4
28872: NEG
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 4
28883: NEG
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 4
28895: NEG
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 5
28906: NEG
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 5
28917: NEG
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 5
28929: NEG
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 6
28940: NEG
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 6
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28975: LD_ADDR_VAR 0 34
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 3
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 3
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: NEG
29019: PUSH
29020: LD_INT 4
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 4
29030: NEG
29031: PUSH
29032: LD_INT 3
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 4
29042: NEG
29043: PUSH
29044: LD_INT 4
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 4
29054: NEG
29055: PUSH
29056: LD_INT 5
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 5
29066: NEG
29067: PUSH
29068: LD_INT 4
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 5
29078: NEG
29079: PUSH
29080: LD_INT 5
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 5
29090: NEG
29091: PUSH
29092: LD_INT 6
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 6
29102: NEG
29103: PUSH
29104: LD_INT 5
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 6
29114: NEG
29115: PUSH
29116: LD_INT 6
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29138: LD_ADDR_VAR 0 41
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 3
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29182: LD_ADDR_VAR 0 42
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29223: LD_ADDR_VAR 0 43
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 3
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29263: LD_ADDR_VAR 0 44
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: LD_INT 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29304: LD_ADDR_VAR 0 45
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: NEG
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29348: LD_ADDR_VAR 0 46
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: LD_INT 3
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29394: LD_ADDR_VAR 0 47
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: LD_INT 3
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 3
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29427: LD_ADDR_VAR 0 48
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 2
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29458: LD_ADDR_VAR 0 49
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 3
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29487: LD_ADDR_VAR 0 50
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: LD_INT 3
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29516: LD_ADDR_VAR 0 51
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29547: LD_ADDR_VAR 0 52
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 3
29566: NEG
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29580: LD_ADDR_VAR 0 53
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: LD_INT 3
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 2
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29624: LD_ADDR_VAR 0 54
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 1
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 3
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29665: LD_ADDR_VAR 0 55
29669: PUSH
29670: LD_INT 3
29672: PUSH
29673: LD_INT 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: LD_INT 3
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29705: LD_ADDR_VAR 0 56
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29746: LD_ADDR_VAR 0 57
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 3
29764: NEG
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: NEG
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29790: LD_ADDR_VAR 0 58
29794: PUSH
29795: LD_INT 2
29797: NEG
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: LD_INT 3
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29836: LD_ADDR_VAR 0 59
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29880: LD_ADDR_VAR 0 60
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29921: LD_ADDR_VAR 0 61
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29961: LD_ADDR_VAR 0 62
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30002: LD_ADDR_VAR 0 63
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: NEG
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30046: LD_ADDR_VAR 0 64
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// end ; 2 :
30092: GO 33358
30094: LD_INT 2
30096: DOUBLE
30097: EQUAL
30098: IFTRUE 30102
30100: GO 33357
30102: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30103: LD_ADDR_VAR 0 29
30107: PUSH
30108: LD_INT 4
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 4
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 5
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 5
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 2
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 5
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: LD_INT 3
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: LD_INT 2
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 4
30223: PUSH
30224: LD_INT 3
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 4
30233: PUSH
30234: LD_INT 4
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 3
30243: PUSH
30244: LD_INT 4
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 4
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 4
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 4
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: LD_INT 3
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 5
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 4
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 2
30375: NEG
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 3
30386: NEG
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 3
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: NEG
30432: PUSH
30433: LD_INT 1
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 4
30442: NEG
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 4
30465: NEG
30466: PUSH
30467: LD_INT 2
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 4
30488: NEG
30489: PUSH
30490: LD_INT 4
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 4
30500: NEG
30501: PUSH
30502: LD_INT 5
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: LD_INT 4
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 3
30524: NEG
30525: PUSH
30526: LD_INT 3
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 4
30536: NEG
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 5
30548: NEG
30549: PUSH
30550: LD_INT 4
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 5
30560: NEG
30561: PUSH
30562: LD_INT 5
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 3
30572: NEG
30573: PUSH
30574: LD_INT 5
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 5
30584: NEG
30585: PUSH
30586: LD_INT 3
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30641: LD_ADDR_VAR 0 30
30645: PUSH
30646: LD_INT 4
30648: PUSH
30649: LD_INT 4
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: LD_INT 4
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 5
30678: PUSH
30679: LD_INT 5
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: LD_INT 5
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 5
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 5
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 4
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: NEG
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 4
30831: NEG
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: NEG
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 5
30898: NEG
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 5
30910: NEG
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: LD_INT 3
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: LD_INT 4
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 4
30993: NEG
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 4
31005: NEG
31006: PUSH
31007: LD_INT 4
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: NEG
31018: PUSH
31019: LD_INT 4
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 4
31029: NEG
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 4
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 5
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 4
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 3
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: LD_INT 4
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 5
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: LD_INT 5
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31188: LD_ADDR_VAR 0 31
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 4
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 4
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 5
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 5
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 4
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 5
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 4
31344: NEG
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 4
31390: NEG
31391: PUSH
31392: LD_INT 4
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 4
31402: NEG
31403: PUSH
31404: LD_INT 5
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: LD_INT 4
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: LD_INT 3
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 5
31450: NEG
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 5
31462: NEG
31463: PUSH
31464: LD_INT 5
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: NEG
31475: PUSH
31476: LD_INT 5
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 5
31486: NEG
31487: PUSH
31488: LD_INT 3
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: LD_INT 3
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 4
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: LD_INT 3
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 4
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: LD_INT 4
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 4
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 4
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 5
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 5
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 4
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 3
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 5
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31738: LD_ADDR_VAR 0 32
31742: PUSH
31743: LD_INT 4
31745: NEG
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 4
31756: NEG
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: NEG
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 5
31801: NEG
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 5
31812: NEG
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 5
31824: NEG
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 3
31836: NEG
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: LD_INT 3
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 3
31859: NEG
31860: PUSH
31861: LD_INT 4
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: LD_INT 3
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 3
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 4
31907: NEG
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 4
31919: NEG
31920: PUSH
31921: LD_INT 4
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: LD_INT 4
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 4
31943: NEG
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 4
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 5
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 4
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 5
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 5
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 4
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 4
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 4
32150: PUSH
32151: LD_INT 4
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 4
32160: PUSH
32161: LD_INT 3
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 5
32170: PUSH
32171: LD_INT 4
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 5
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 4
32190: PUSH
32191: LD_INT 5
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 5
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 5
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32285: LD_ADDR_VAR 0 33
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: LD_INT 4
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 4
32304: NEG
32305: PUSH
32306: LD_INT 5
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 5
32352: NEG
32353: PUSH
32354: LD_INT 4
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 5
32364: NEG
32365: PUSH
32366: LD_INT 5
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: LD_INT 5
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 5
32388: NEG
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 4
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 3
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: LD_INT 4
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 4
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 5
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 5
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 4
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 3
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 4
32615: PUSH
32616: LD_INT 3
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 4
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: PUSH
32636: LD_INT 4
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 3
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 2
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 4
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: LD_INT 4
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 4
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 5
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 5
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 4
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: LD_INT 5
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32823: LD_ADDR_VAR 0 34
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 4
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: LD_INT 5
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: LD_INT 4
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: LD_INT 3
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 4
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 5
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: LD_INT 3
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 5
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 4
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 4
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 4
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 4
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 4
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 5
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 5
33055: PUSH
33056: LD_INT 5
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 4
33065: PUSH
33066: LD_INT 5
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 5
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 5
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 3
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: LD_INT 4
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 4
33208: NEG
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 4
33219: NEG
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 3
33231: NEG
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 3
33242: NEG
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 4
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 5
33264: NEG
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 5
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 5
33287: NEG
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 3
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
// end ; end ;
33355: GO 33358
33357: POP
// case btype of b_depot , b_warehouse :
33358: LD_VAR 0 1
33362: PUSH
33363: LD_INT 0
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33377
33369: LD_INT 1
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33578
33377: POP
// case nation of nation_american :
33378: LD_VAR 0 5
33382: PUSH
33383: LD_INT 1
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33447
33391: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33392: LD_ADDR_VAR 0 9
33396: PUSH
33397: LD_VAR 0 11
33401: PUSH
33402: LD_VAR 0 12
33406: PUSH
33407: LD_VAR 0 13
33411: PUSH
33412: LD_VAR 0 14
33416: PUSH
33417: LD_VAR 0 15
33421: PUSH
33422: LD_VAR 0 16
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: PUSH
33435: LD_VAR 0 4
33439: PUSH
33440: LD_INT 1
33442: PLUS
33443: ARRAY
33444: ST_TO_ADDR
33445: GO 33576
33447: LD_INT 2
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33511
33455: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33456: LD_ADDR_VAR 0 9
33460: PUSH
33461: LD_VAR 0 17
33465: PUSH
33466: LD_VAR 0 18
33470: PUSH
33471: LD_VAR 0 19
33475: PUSH
33476: LD_VAR 0 20
33480: PUSH
33481: LD_VAR 0 21
33485: PUSH
33486: LD_VAR 0 22
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: PUSH
33499: LD_VAR 0 4
33503: PUSH
33504: LD_INT 1
33506: PLUS
33507: ARRAY
33508: ST_TO_ADDR
33509: GO 33576
33511: LD_INT 3
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33519
33517: GO 33575
33519: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33520: LD_ADDR_VAR 0 9
33524: PUSH
33525: LD_VAR 0 23
33529: PUSH
33530: LD_VAR 0 24
33534: PUSH
33535: LD_VAR 0 25
33539: PUSH
33540: LD_VAR 0 26
33544: PUSH
33545: LD_VAR 0 27
33549: PUSH
33550: LD_VAR 0 28
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: PUSH
33563: LD_VAR 0 4
33567: PUSH
33568: LD_INT 1
33570: PLUS
33571: ARRAY
33572: ST_TO_ADDR
33573: GO 33576
33575: POP
33576: GO 34131
33578: LD_INT 2
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33592
33584: LD_INT 3
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33648
33592: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33593: LD_ADDR_VAR 0 9
33597: PUSH
33598: LD_VAR 0 29
33602: PUSH
33603: LD_VAR 0 30
33607: PUSH
33608: LD_VAR 0 31
33612: PUSH
33613: LD_VAR 0 32
33617: PUSH
33618: LD_VAR 0 33
33622: PUSH
33623: LD_VAR 0 34
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: PUSH
33636: LD_VAR 0 4
33640: PUSH
33641: LD_INT 1
33643: PLUS
33644: ARRAY
33645: ST_TO_ADDR
33646: GO 34131
33648: LD_INT 16
33650: DOUBLE
33651: EQUAL
33652: IFTRUE 33710
33654: LD_INT 17
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33710
33660: LD_INT 18
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33710
33666: LD_INT 19
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33710
33672: LD_INT 22
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33710
33678: LD_INT 20
33680: DOUBLE
33681: EQUAL
33682: IFTRUE 33710
33684: LD_INT 21
33686: DOUBLE
33687: EQUAL
33688: IFTRUE 33710
33690: LD_INT 23
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33710
33696: LD_INT 24
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33710
33702: LD_INT 25
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33710
33708: GO 33766
33710: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33711: LD_ADDR_VAR 0 9
33715: PUSH
33716: LD_VAR 0 35
33720: PUSH
33721: LD_VAR 0 36
33725: PUSH
33726: LD_VAR 0 37
33730: PUSH
33731: LD_VAR 0 38
33735: PUSH
33736: LD_VAR 0 39
33740: PUSH
33741: LD_VAR 0 40
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: PUSH
33754: LD_VAR 0 4
33758: PUSH
33759: LD_INT 1
33761: PLUS
33762: ARRAY
33763: ST_TO_ADDR
33764: GO 34131
33766: LD_INT 6
33768: DOUBLE
33769: EQUAL
33770: IFTRUE 33822
33772: LD_INT 7
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33822
33778: LD_INT 8
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33822
33784: LD_INT 13
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33822
33790: LD_INT 12
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33822
33796: LD_INT 15
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33822
33802: LD_INT 11
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33822
33808: LD_INT 14
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33822
33814: LD_INT 10
33816: DOUBLE
33817: EQUAL
33818: IFTRUE 33822
33820: GO 33878
33822: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33823: LD_ADDR_VAR 0 9
33827: PUSH
33828: LD_VAR 0 41
33832: PUSH
33833: LD_VAR 0 42
33837: PUSH
33838: LD_VAR 0 43
33842: PUSH
33843: LD_VAR 0 44
33847: PUSH
33848: LD_VAR 0 45
33852: PUSH
33853: LD_VAR 0 46
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: PUSH
33866: LD_VAR 0 4
33870: PUSH
33871: LD_INT 1
33873: PLUS
33874: ARRAY
33875: ST_TO_ADDR
33876: GO 34131
33878: LD_INT 36
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33942
33886: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33887: LD_ADDR_VAR 0 9
33891: PUSH
33892: LD_VAR 0 47
33896: PUSH
33897: LD_VAR 0 48
33901: PUSH
33902: LD_VAR 0 49
33906: PUSH
33907: LD_VAR 0 50
33911: PUSH
33912: LD_VAR 0 51
33916: PUSH
33917: LD_VAR 0 52
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: PUSH
33930: LD_VAR 0 4
33934: PUSH
33935: LD_INT 1
33937: PLUS
33938: ARRAY
33939: ST_TO_ADDR
33940: GO 34131
33942: LD_INT 4
33944: DOUBLE
33945: EQUAL
33946: IFTRUE 33968
33948: LD_INT 5
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33968
33954: LD_INT 34
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33968
33960: LD_INT 37
33962: DOUBLE
33963: EQUAL
33964: IFTRUE 33968
33966: GO 34024
33968: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33969: LD_ADDR_VAR 0 9
33973: PUSH
33974: LD_VAR 0 53
33978: PUSH
33979: LD_VAR 0 54
33983: PUSH
33984: LD_VAR 0 55
33988: PUSH
33989: LD_VAR 0 56
33993: PUSH
33994: LD_VAR 0 57
33998: PUSH
33999: LD_VAR 0 58
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: PUSH
34012: LD_VAR 0 4
34016: PUSH
34017: LD_INT 1
34019: PLUS
34020: ARRAY
34021: ST_TO_ADDR
34022: GO 34131
34024: LD_INT 31
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34074
34030: LD_INT 32
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34074
34036: LD_INT 33
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34074
34042: LD_INT 27
34044: DOUBLE
34045: EQUAL
34046: IFTRUE 34074
34048: LD_INT 26
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34074
34054: LD_INT 28
34056: DOUBLE
34057: EQUAL
34058: IFTRUE 34074
34060: LD_INT 29
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34074
34066: LD_INT 30
34068: DOUBLE
34069: EQUAL
34070: IFTRUE 34074
34072: GO 34130
34074: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34075: LD_ADDR_VAR 0 9
34079: PUSH
34080: LD_VAR 0 59
34084: PUSH
34085: LD_VAR 0 60
34089: PUSH
34090: LD_VAR 0 61
34094: PUSH
34095: LD_VAR 0 62
34099: PUSH
34100: LD_VAR 0 63
34104: PUSH
34105: LD_VAR 0 64
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: PUSH
34118: LD_VAR 0 4
34122: PUSH
34123: LD_INT 1
34125: PLUS
34126: ARRAY
34127: ST_TO_ADDR
34128: GO 34131
34130: POP
// temp_list2 = [ ] ;
34131: LD_ADDR_VAR 0 10
34135: PUSH
34136: EMPTY
34137: ST_TO_ADDR
// for i in temp_list do
34138: LD_ADDR_VAR 0 8
34142: PUSH
34143: LD_VAR 0 9
34147: PUSH
34148: FOR_IN
34149: IFFALSE 34201
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34151: LD_ADDR_VAR 0 10
34155: PUSH
34156: LD_VAR 0 10
34160: PUSH
34161: LD_VAR 0 8
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: PUSH
34170: LD_VAR 0 2
34174: PLUS
34175: PUSH
34176: LD_VAR 0 8
34180: PUSH
34181: LD_INT 2
34183: ARRAY
34184: PUSH
34185: LD_VAR 0 3
34189: PLUS
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: EMPTY
34196: LIST
34197: ADD
34198: ST_TO_ADDR
34199: GO 34148
34201: POP
34202: POP
// result = temp_list2 ;
34203: LD_ADDR_VAR 0 7
34207: PUSH
34208: LD_VAR 0 10
34212: ST_TO_ADDR
// end ;
34213: LD_VAR 0 7
34217: RET
// export function EnemyInRange ( unit , dist ) ; begin
34218: LD_INT 0
34220: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34221: LD_ADDR_VAR 0 3
34225: PUSH
34226: LD_VAR 0 1
34230: PPUSH
34231: CALL_OW 255
34235: PPUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL_OW 250
34245: PPUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 251
34255: PPUSH
34256: LD_VAR 0 2
34260: PPUSH
34261: CALL 7620 0 4
34265: PUSH
34266: LD_INT 4
34268: ARRAY
34269: ST_TO_ADDR
// end ;
34270: LD_VAR 0 3
34274: RET
// export function PlayerSeeMe ( unit ) ; begin
34275: LD_INT 0
34277: PPUSH
// result := See ( your_side , unit ) ;
34278: LD_ADDR_VAR 0 2
34282: PUSH
34283: LD_OWVAR 2
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 292
34297: ST_TO_ADDR
// end ;
34298: LD_VAR 0 2
34302: RET
// export function ReverseDir ( unit ) ; begin
34303: LD_INT 0
34305: PPUSH
// if not unit then
34306: LD_VAR 0 1
34310: NOT
34311: IFFALSE 34315
// exit ;
34313: GO 34338
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34315: LD_ADDR_VAR 0 2
34319: PUSH
34320: LD_VAR 0 1
34324: PPUSH
34325: CALL_OW 254
34329: PUSH
34330: LD_INT 3
34332: PLUS
34333: PUSH
34334: LD_INT 6
34336: MOD
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 2
34342: RET
// export function ReverseArray ( array ) ; var i ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
// if not array then
34347: LD_VAR 0 1
34351: NOT
34352: IFFALSE 34356
// exit ;
34354: GO 34411
// result := [ ] ;
34356: LD_ADDR_VAR 0 2
34360: PUSH
34361: EMPTY
34362: ST_TO_ADDR
// for i := array downto 1 do
34363: LD_ADDR_VAR 0 3
34367: PUSH
34368: DOUBLE
34369: LD_VAR 0 1
34373: INC
34374: ST_TO_ADDR
34375: LD_INT 1
34377: PUSH
34378: FOR_DOWNTO
34379: IFFALSE 34409
// result := Join ( result , array [ i ] ) ;
34381: LD_ADDR_VAR 0 2
34385: PUSH
34386: LD_VAR 0 2
34390: PPUSH
34391: LD_VAR 0 1
34395: PUSH
34396: LD_VAR 0 3
34400: ARRAY
34401: PPUSH
34402: CALL 39054 0 2
34406: ST_TO_ADDR
34407: GO 34378
34409: POP
34410: POP
// end ;
34411: LD_VAR 0 2
34415: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34416: LD_INT 0
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
// if not unit or not hexes then
34424: LD_VAR 0 1
34428: NOT
34429: PUSH
34430: LD_VAR 0 2
34434: NOT
34435: OR
34436: IFFALSE 34440
// exit ;
34438: GO 34563
// dist := 9999 ;
34440: LD_ADDR_VAR 0 5
34444: PUSH
34445: LD_INT 9999
34447: ST_TO_ADDR
// for i = 1 to hexes do
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: DOUBLE
34454: LD_INT 1
34456: DEC
34457: ST_TO_ADDR
34458: LD_VAR 0 2
34462: PUSH
34463: FOR_TO
34464: IFFALSE 34551
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34466: LD_ADDR_VAR 0 6
34470: PUSH
34471: LD_VAR 0 1
34475: PPUSH
34476: LD_VAR 0 2
34480: PUSH
34481: LD_VAR 0 4
34485: ARRAY
34486: PUSH
34487: LD_INT 1
34489: ARRAY
34490: PPUSH
34491: LD_VAR 0 2
34495: PUSH
34496: LD_VAR 0 4
34500: ARRAY
34501: PUSH
34502: LD_INT 2
34504: ARRAY
34505: PPUSH
34506: CALL_OW 297
34510: ST_TO_ADDR
// if tdist < dist then
34511: LD_VAR 0 6
34515: PUSH
34516: LD_VAR 0 5
34520: LESS
34521: IFFALSE 34549
// begin hex := hexes [ i ] ;
34523: LD_ADDR_VAR 0 8
34527: PUSH
34528: LD_VAR 0 2
34532: PUSH
34533: LD_VAR 0 4
34537: ARRAY
34538: ST_TO_ADDR
// dist := tdist ;
34539: LD_ADDR_VAR 0 5
34543: PUSH
34544: LD_VAR 0 6
34548: ST_TO_ADDR
// end ; end ;
34549: GO 34463
34551: POP
34552: POP
// result := hex ;
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_VAR 0 8
34562: ST_TO_ADDR
// end ;
34563: LD_VAR 0 3
34567: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34568: LD_INT 0
34570: PPUSH
34571: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34572: LD_VAR 0 1
34576: NOT
34577: PUSH
34578: LD_VAR 0 1
34582: PUSH
34583: LD_INT 21
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 23
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PPUSH
34607: CALL_OW 69
34611: IN
34612: NOT
34613: OR
34614: IFFALSE 34618
// exit ;
34616: GO 34665
// for i = 1 to 3 do
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: DOUBLE
34624: LD_INT 1
34626: DEC
34627: ST_TO_ADDR
34628: LD_INT 3
34630: PUSH
34631: FOR_TO
34632: IFFALSE 34663
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34634: LD_VAR 0 1
34638: PPUSH
34639: CALL_OW 250
34643: PPUSH
34644: LD_VAR 0 1
34648: PPUSH
34649: CALL_OW 251
34653: PPUSH
34654: LD_INT 1
34656: PPUSH
34657: CALL_OW 453
34661: GO 34631
34663: POP
34664: POP
// end ;
34665: LD_VAR 0 2
34669: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34670: LD_INT 0
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34678: LD_VAR 0 1
34682: NOT
34683: PUSH
34684: LD_VAR 0 2
34688: NOT
34689: OR
34690: PUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 314
34700: OR
34701: IFFALSE 34705
// exit ;
34703: GO 35172
// if GetLives ( i ) < 250 then
34705: LD_VAR 0 4
34709: PPUSH
34710: CALL_OW 256
34714: PUSH
34715: LD_INT 250
34717: LESS
34718: IFFALSE 34731
// begin ComAutodestruct ( i ) ;
34720: LD_VAR 0 4
34724: PPUSH
34725: CALL 34568 0 1
// exit ;
34729: GO 35172
// end ; x := GetX ( enemy_unit ) ;
34731: LD_ADDR_VAR 0 7
34735: PUSH
34736: LD_VAR 0 2
34740: PPUSH
34741: CALL_OW 250
34745: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34746: LD_ADDR_VAR 0 8
34750: PUSH
34751: LD_VAR 0 2
34755: PPUSH
34756: CALL_OW 251
34760: ST_TO_ADDR
// if not x or not y then
34761: LD_VAR 0 7
34765: NOT
34766: PUSH
34767: LD_VAR 0 8
34771: NOT
34772: OR
34773: IFFALSE 34777
// exit ;
34775: GO 35172
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34777: LD_ADDR_VAR 0 6
34781: PUSH
34782: LD_VAR 0 7
34786: PPUSH
34787: LD_INT 0
34789: PPUSH
34790: LD_INT 4
34792: PPUSH
34793: CALL_OW 272
34797: PUSH
34798: LD_VAR 0 8
34802: PPUSH
34803: LD_INT 0
34805: PPUSH
34806: LD_INT 4
34808: PPUSH
34809: CALL_OW 273
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_VAR 0 7
34822: PPUSH
34823: LD_INT 1
34825: PPUSH
34826: LD_INT 4
34828: PPUSH
34829: CALL_OW 272
34833: PUSH
34834: LD_VAR 0 8
34838: PPUSH
34839: LD_INT 1
34841: PPUSH
34842: LD_INT 4
34844: PPUSH
34845: CALL_OW 273
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_VAR 0 7
34858: PPUSH
34859: LD_INT 2
34861: PPUSH
34862: LD_INT 4
34864: PPUSH
34865: CALL_OW 272
34869: PUSH
34870: LD_VAR 0 8
34874: PPUSH
34875: LD_INT 2
34877: PPUSH
34878: LD_INT 4
34880: PPUSH
34881: CALL_OW 273
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_VAR 0 7
34894: PPUSH
34895: LD_INT 3
34897: PPUSH
34898: LD_INT 4
34900: PPUSH
34901: CALL_OW 272
34905: PUSH
34906: LD_VAR 0 8
34910: PPUSH
34911: LD_INT 3
34913: PPUSH
34914: LD_INT 4
34916: PPUSH
34917: CALL_OW 273
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_VAR 0 7
34930: PPUSH
34931: LD_INT 4
34933: PPUSH
34934: LD_INT 4
34936: PPUSH
34937: CALL_OW 272
34941: PUSH
34942: LD_VAR 0 8
34946: PPUSH
34947: LD_INT 4
34949: PPUSH
34950: LD_INT 4
34952: PPUSH
34953: CALL_OW 273
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_VAR 0 7
34966: PPUSH
34967: LD_INT 5
34969: PPUSH
34970: LD_INT 4
34972: PPUSH
34973: CALL_OW 272
34977: PUSH
34978: LD_VAR 0 8
34982: PPUSH
34983: LD_INT 5
34985: PPUSH
34986: LD_INT 4
34988: PPUSH
34989: CALL_OW 273
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: ST_TO_ADDR
// for i = tmp downto 1 do
35006: LD_ADDR_VAR 0 4
35010: PUSH
35011: DOUBLE
35012: LD_VAR 0 6
35016: INC
35017: ST_TO_ADDR
35018: LD_INT 1
35020: PUSH
35021: FOR_DOWNTO
35022: IFFALSE 35123
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35024: LD_VAR 0 6
35028: PUSH
35029: LD_VAR 0 4
35033: ARRAY
35034: PUSH
35035: LD_INT 1
35037: ARRAY
35038: PPUSH
35039: LD_VAR 0 6
35043: PUSH
35044: LD_VAR 0 4
35048: ARRAY
35049: PUSH
35050: LD_INT 2
35052: ARRAY
35053: PPUSH
35054: CALL_OW 488
35058: NOT
35059: PUSH
35060: LD_VAR 0 6
35064: PUSH
35065: LD_VAR 0 4
35069: ARRAY
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: PPUSH
35075: LD_VAR 0 6
35079: PUSH
35080: LD_VAR 0 4
35084: ARRAY
35085: PUSH
35086: LD_INT 2
35088: ARRAY
35089: PPUSH
35090: CALL_OW 428
35094: PUSH
35095: LD_INT 0
35097: NONEQUAL
35098: OR
35099: IFFALSE 35121
// tmp := Delete ( tmp , i ) ;
35101: LD_ADDR_VAR 0 6
35105: PUSH
35106: LD_VAR 0 6
35110: PPUSH
35111: LD_VAR 0 4
35115: PPUSH
35116: CALL_OW 3
35120: ST_TO_ADDR
35121: GO 35021
35123: POP
35124: POP
// j := GetClosestHex ( unit , tmp ) ;
35125: LD_ADDR_VAR 0 5
35129: PUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: LD_VAR 0 6
35139: PPUSH
35140: CALL 34416 0 2
35144: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35145: LD_VAR 0 1
35149: PPUSH
35150: LD_VAR 0 5
35154: PUSH
35155: LD_INT 1
35157: ARRAY
35158: PPUSH
35159: LD_VAR 0 5
35163: PUSH
35164: LD_INT 2
35166: ARRAY
35167: PPUSH
35168: CALL_OW 111
// end ;
35172: LD_VAR 0 3
35176: RET
// export function PrepareApemanSoldier ( ) ; begin
35177: LD_INT 0
35179: PPUSH
// uc_nation := 0 ;
35180: LD_ADDR_OWVAR 21
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
// hc_sex := sex_male ;
35188: LD_ADDR_OWVAR 27
35192: PUSH
35193: LD_INT 1
35195: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35196: LD_ADDR_OWVAR 28
35200: PUSH
35201: LD_INT 15
35203: ST_TO_ADDR
// hc_gallery :=  ;
35204: LD_ADDR_OWVAR 33
35208: PUSH
35209: LD_STRING 
35211: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35212: LD_ADDR_OWVAR 31
35216: PUSH
35217: LD_INT 0
35219: PPUSH
35220: LD_INT 3
35222: PPUSH
35223: CALL_OW 12
35227: PUSH
35228: LD_INT 0
35230: PPUSH
35231: LD_INT 3
35233: PPUSH
35234: CALL_OW 12
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
// end ;
35251: LD_VAR 0 1
35255: RET
// export function PrepareApemanEngineer ( ) ; begin
35256: LD_INT 0
35258: PPUSH
// uc_nation := 0 ;
35259: LD_ADDR_OWVAR 21
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// hc_sex := sex_male ;
35267: LD_ADDR_OWVAR 27
35271: PUSH
35272: LD_INT 1
35274: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35275: LD_ADDR_OWVAR 28
35279: PUSH
35280: LD_INT 16
35282: ST_TO_ADDR
// hc_gallery :=  ;
35283: LD_ADDR_OWVAR 33
35287: PUSH
35288: LD_STRING 
35290: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35291: LD_ADDR_OWVAR 31
35295: PUSH
35296: LD_INT 0
35298: PPUSH
35299: LD_INT 3
35301: PPUSH
35302: CALL_OW 12
35306: PUSH
35307: LD_INT 0
35309: PPUSH
35310: LD_INT 3
35312: PPUSH
35313: CALL_OW 12
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: ST_TO_ADDR
// end ;
35330: LD_VAR 0 1
35334: RET
// export function PrepareApeman ( agressivity ) ; begin
35335: LD_INT 0
35337: PPUSH
// uc_side := 0 ;
35338: LD_ADDR_OWVAR 20
35342: PUSH
35343: LD_INT 0
35345: ST_TO_ADDR
// uc_nation := 0 ;
35346: LD_ADDR_OWVAR 21
35350: PUSH
35351: LD_INT 0
35353: ST_TO_ADDR
// hc_sex := sex_male ;
35354: LD_ADDR_OWVAR 27
35358: PUSH
35359: LD_INT 1
35361: ST_TO_ADDR
// hc_class := class_apeman ;
35362: LD_ADDR_OWVAR 28
35366: PUSH
35367: LD_INT 12
35369: ST_TO_ADDR
// hc_gallery :=  ;
35370: LD_ADDR_OWVAR 33
35374: PUSH
35375: LD_STRING 
35377: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35378: LD_ADDR_OWVAR 35
35382: PUSH
35383: LD_VAR 0 1
35387: NEG
35388: PPUSH
35389: LD_VAR 0 1
35393: PPUSH
35394: CALL_OW 12
35398: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35399: LD_ADDR_OWVAR 31
35403: PUSH
35404: LD_INT 0
35406: PPUSH
35407: LD_INT 3
35409: PPUSH
35410: CALL_OW 12
35414: PUSH
35415: LD_INT 0
35417: PPUSH
35418: LD_INT 3
35420: PPUSH
35421: CALL_OW 12
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// end ;
35438: LD_VAR 0 2
35442: RET
// export function PrepareTiger ( agressivity ) ; begin
35443: LD_INT 0
35445: PPUSH
// uc_side := 0 ;
35446: LD_ADDR_OWVAR 20
35450: PUSH
35451: LD_INT 0
35453: ST_TO_ADDR
// uc_nation := 0 ;
35454: LD_ADDR_OWVAR 21
35458: PUSH
35459: LD_INT 0
35461: ST_TO_ADDR
// hc_class := class_tiger ;
35462: LD_ADDR_OWVAR 28
35466: PUSH
35467: LD_INT 14
35469: ST_TO_ADDR
// hc_gallery :=  ;
35470: LD_ADDR_OWVAR 33
35474: PUSH
35475: LD_STRING 
35477: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35478: LD_ADDR_OWVAR 35
35482: PUSH
35483: LD_VAR 0 1
35487: NEG
35488: PPUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 12
35498: ST_TO_ADDR
// end ;
35499: LD_VAR 0 2
35503: RET
// export function PrepareEnchidna ( ) ; begin
35504: LD_INT 0
35506: PPUSH
// uc_side := 0 ;
35507: LD_ADDR_OWVAR 20
35511: PUSH
35512: LD_INT 0
35514: ST_TO_ADDR
// uc_nation := 0 ;
35515: LD_ADDR_OWVAR 21
35519: PUSH
35520: LD_INT 0
35522: ST_TO_ADDR
// hc_class := class_baggie ;
35523: LD_ADDR_OWVAR 28
35527: PUSH
35528: LD_INT 13
35530: ST_TO_ADDR
// hc_gallery :=  ;
35531: LD_ADDR_OWVAR 33
35535: PUSH
35536: LD_STRING 
35538: ST_TO_ADDR
// end ;
35539: LD_VAR 0 1
35543: RET
// export function PrepareFrog ( ) ; begin
35544: LD_INT 0
35546: PPUSH
// uc_side := 0 ;
35547: LD_ADDR_OWVAR 20
35551: PUSH
35552: LD_INT 0
35554: ST_TO_ADDR
// uc_nation := 0 ;
35555: LD_ADDR_OWVAR 21
35559: PUSH
35560: LD_INT 0
35562: ST_TO_ADDR
// hc_class := class_frog ;
35563: LD_ADDR_OWVAR 28
35567: PUSH
35568: LD_INT 19
35570: ST_TO_ADDR
// hc_gallery :=  ;
35571: LD_ADDR_OWVAR 33
35575: PUSH
35576: LD_STRING 
35578: ST_TO_ADDR
// end ;
35579: LD_VAR 0 1
35583: RET
// export function PrepareFish ( ) ; begin
35584: LD_INT 0
35586: PPUSH
// uc_side := 0 ;
35587: LD_ADDR_OWVAR 20
35591: PUSH
35592: LD_INT 0
35594: ST_TO_ADDR
// uc_nation := 0 ;
35595: LD_ADDR_OWVAR 21
35599: PUSH
35600: LD_INT 0
35602: ST_TO_ADDR
// hc_class := class_fish ;
35603: LD_ADDR_OWVAR 28
35607: PUSH
35608: LD_INT 20
35610: ST_TO_ADDR
// hc_gallery :=  ;
35611: LD_ADDR_OWVAR 33
35615: PUSH
35616: LD_STRING 
35618: ST_TO_ADDR
// end ;
35619: LD_VAR 0 1
35623: RET
// export function PrepareBird ( ) ; begin
35624: LD_INT 0
35626: PPUSH
// uc_side := 0 ;
35627: LD_ADDR_OWVAR 20
35631: PUSH
35632: LD_INT 0
35634: ST_TO_ADDR
// uc_nation := 0 ;
35635: LD_ADDR_OWVAR 21
35639: PUSH
35640: LD_INT 0
35642: ST_TO_ADDR
// hc_class := class_phororhacos ;
35643: LD_ADDR_OWVAR 28
35647: PUSH
35648: LD_INT 18
35650: ST_TO_ADDR
// hc_gallery :=  ;
35651: LD_ADDR_OWVAR 33
35655: PUSH
35656: LD_STRING 
35658: ST_TO_ADDR
// end ;
35659: LD_VAR 0 1
35663: RET
// export function PrepareHorse ( ) ; begin
35664: LD_INT 0
35666: PPUSH
// uc_side := 0 ;
35667: LD_ADDR_OWVAR 20
35671: PUSH
35672: LD_INT 0
35674: ST_TO_ADDR
// uc_nation := 0 ;
35675: LD_ADDR_OWVAR 21
35679: PUSH
35680: LD_INT 0
35682: ST_TO_ADDR
// hc_class := class_horse ;
35683: LD_ADDR_OWVAR 28
35687: PUSH
35688: LD_INT 21
35690: ST_TO_ADDR
// hc_gallery :=  ;
35691: LD_ADDR_OWVAR 33
35695: PUSH
35696: LD_STRING 
35698: ST_TO_ADDR
// end ;
35699: LD_VAR 0 1
35703: RET
// export function PrepareMastodont ( ) ; begin
35704: LD_INT 0
35706: PPUSH
// uc_side := 0 ;
35707: LD_ADDR_OWVAR 20
35711: PUSH
35712: LD_INT 0
35714: ST_TO_ADDR
// uc_nation := 0 ;
35715: LD_ADDR_OWVAR 21
35719: PUSH
35720: LD_INT 0
35722: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35723: LD_ADDR_OWVAR 37
35727: PUSH
35728: LD_INT 31
35730: ST_TO_ADDR
// vc_control := control_rider ;
35731: LD_ADDR_OWVAR 38
35735: PUSH
35736: LD_INT 4
35738: ST_TO_ADDR
// end ;
35739: LD_VAR 0 1
35743: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35744: LD_INT 0
35746: PPUSH
35747: PPUSH
35748: PPUSH
// uc_side = 0 ;
35749: LD_ADDR_OWVAR 20
35753: PUSH
35754: LD_INT 0
35756: ST_TO_ADDR
// uc_nation = 0 ;
35757: LD_ADDR_OWVAR 21
35761: PUSH
35762: LD_INT 0
35764: ST_TO_ADDR
// InitHc_All ( ) ;
35765: CALL_OW 584
// InitVc ;
35769: CALL_OW 20
// if mastodonts then
35773: LD_VAR 0 6
35777: IFFALSE 35844
// for i = 1 to mastodonts do
35779: LD_ADDR_VAR 0 11
35783: PUSH
35784: DOUBLE
35785: LD_INT 1
35787: DEC
35788: ST_TO_ADDR
35789: LD_VAR 0 6
35793: PUSH
35794: FOR_TO
35795: IFFALSE 35842
// begin vc_chassis := 31 ;
35797: LD_ADDR_OWVAR 37
35801: PUSH
35802: LD_INT 31
35804: ST_TO_ADDR
// vc_control := control_rider ;
35805: LD_ADDR_OWVAR 38
35809: PUSH
35810: LD_INT 4
35812: ST_TO_ADDR
// animal := CreateVehicle ;
35813: LD_ADDR_VAR 0 12
35817: PUSH
35818: CALL_OW 45
35822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35823: LD_VAR 0 12
35827: PPUSH
35828: LD_VAR 0 8
35832: PPUSH
35833: LD_INT 0
35835: PPUSH
35836: CALL 37972 0 3
// end ;
35840: GO 35794
35842: POP
35843: POP
// if horses then
35844: LD_VAR 0 5
35848: IFFALSE 35915
// for i = 1 to horses do
35850: LD_ADDR_VAR 0 11
35854: PUSH
35855: DOUBLE
35856: LD_INT 1
35858: DEC
35859: ST_TO_ADDR
35860: LD_VAR 0 5
35864: PUSH
35865: FOR_TO
35866: IFFALSE 35913
// begin hc_class := 21 ;
35868: LD_ADDR_OWVAR 28
35872: PUSH
35873: LD_INT 21
35875: ST_TO_ADDR
// hc_gallery :=  ;
35876: LD_ADDR_OWVAR 33
35880: PUSH
35881: LD_STRING 
35883: ST_TO_ADDR
// animal := CreateHuman ;
35884: LD_ADDR_VAR 0 12
35888: PUSH
35889: CALL_OW 44
35893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35894: LD_VAR 0 12
35898: PPUSH
35899: LD_VAR 0 8
35903: PPUSH
35904: LD_INT 0
35906: PPUSH
35907: CALL 37972 0 3
// end ;
35911: GO 35865
35913: POP
35914: POP
// if birds then
35915: LD_VAR 0 1
35919: IFFALSE 35986
// for i = 1 to birds do
35921: LD_ADDR_VAR 0 11
35925: PUSH
35926: DOUBLE
35927: LD_INT 1
35929: DEC
35930: ST_TO_ADDR
35931: LD_VAR 0 1
35935: PUSH
35936: FOR_TO
35937: IFFALSE 35984
// begin hc_class = 18 ;
35939: LD_ADDR_OWVAR 28
35943: PUSH
35944: LD_INT 18
35946: ST_TO_ADDR
// hc_gallery =  ;
35947: LD_ADDR_OWVAR 33
35951: PUSH
35952: LD_STRING 
35954: ST_TO_ADDR
// animal := CreateHuman ;
35955: LD_ADDR_VAR 0 12
35959: PUSH
35960: CALL_OW 44
35964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35965: LD_VAR 0 12
35969: PPUSH
35970: LD_VAR 0 8
35974: PPUSH
35975: LD_INT 0
35977: PPUSH
35978: CALL 37972 0 3
// end ;
35982: GO 35936
35984: POP
35985: POP
// if tigers then
35986: LD_VAR 0 2
35990: IFFALSE 36074
// for i = 1 to tigers do
35992: LD_ADDR_VAR 0 11
35996: PUSH
35997: DOUBLE
35998: LD_INT 1
36000: DEC
36001: ST_TO_ADDR
36002: LD_VAR 0 2
36006: PUSH
36007: FOR_TO
36008: IFFALSE 36072
// begin hc_class = class_tiger ;
36010: LD_ADDR_OWVAR 28
36014: PUSH
36015: LD_INT 14
36017: ST_TO_ADDR
// hc_gallery =  ;
36018: LD_ADDR_OWVAR 33
36022: PUSH
36023: LD_STRING 
36025: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36026: LD_ADDR_OWVAR 35
36030: PUSH
36031: LD_INT 7
36033: NEG
36034: PPUSH
36035: LD_INT 7
36037: PPUSH
36038: CALL_OW 12
36042: ST_TO_ADDR
// animal := CreateHuman ;
36043: LD_ADDR_VAR 0 12
36047: PUSH
36048: CALL_OW 44
36052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36053: LD_VAR 0 12
36057: PPUSH
36058: LD_VAR 0 8
36062: PPUSH
36063: LD_INT 0
36065: PPUSH
36066: CALL 37972 0 3
// end ;
36070: GO 36007
36072: POP
36073: POP
// if apemans then
36074: LD_VAR 0 3
36078: IFFALSE 36201
// for i = 1 to apemans do
36080: LD_ADDR_VAR 0 11
36084: PUSH
36085: DOUBLE
36086: LD_INT 1
36088: DEC
36089: ST_TO_ADDR
36090: LD_VAR 0 3
36094: PUSH
36095: FOR_TO
36096: IFFALSE 36199
// begin hc_class = class_apeman ;
36098: LD_ADDR_OWVAR 28
36102: PUSH
36103: LD_INT 12
36105: ST_TO_ADDR
// hc_gallery =  ;
36106: LD_ADDR_OWVAR 33
36110: PUSH
36111: LD_STRING 
36113: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36114: LD_ADDR_OWVAR 35
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PPUSH
36123: LD_INT 2
36125: PPUSH
36126: CALL_OW 12
36130: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36131: LD_ADDR_OWVAR 31
36135: PUSH
36136: LD_INT 1
36138: PPUSH
36139: LD_INT 3
36141: PPUSH
36142: CALL_OW 12
36146: PUSH
36147: LD_INT 1
36149: PPUSH
36150: LD_INT 3
36152: PPUSH
36153: CALL_OW 12
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: ST_TO_ADDR
// animal := CreateHuman ;
36170: LD_ADDR_VAR 0 12
36174: PUSH
36175: CALL_OW 44
36179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36180: LD_VAR 0 12
36184: PPUSH
36185: LD_VAR 0 8
36189: PPUSH
36190: LD_INT 0
36192: PPUSH
36193: CALL 37972 0 3
// end ;
36197: GO 36095
36199: POP
36200: POP
// if enchidnas then
36201: LD_VAR 0 4
36205: IFFALSE 36272
// for i = 1 to enchidnas do
36207: LD_ADDR_VAR 0 11
36211: PUSH
36212: DOUBLE
36213: LD_INT 1
36215: DEC
36216: ST_TO_ADDR
36217: LD_VAR 0 4
36221: PUSH
36222: FOR_TO
36223: IFFALSE 36270
// begin hc_class = 13 ;
36225: LD_ADDR_OWVAR 28
36229: PUSH
36230: LD_INT 13
36232: ST_TO_ADDR
// hc_gallery =  ;
36233: LD_ADDR_OWVAR 33
36237: PUSH
36238: LD_STRING 
36240: ST_TO_ADDR
// animal := CreateHuman ;
36241: LD_ADDR_VAR 0 12
36245: PUSH
36246: CALL_OW 44
36250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36251: LD_VAR 0 12
36255: PPUSH
36256: LD_VAR 0 8
36260: PPUSH
36261: LD_INT 0
36263: PPUSH
36264: CALL 37972 0 3
// end ;
36268: GO 36222
36270: POP
36271: POP
// if fishes then
36272: LD_VAR 0 7
36276: IFFALSE 36343
// for i = 1 to fishes do
36278: LD_ADDR_VAR 0 11
36282: PUSH
36283: DOUBLE
36284: LD_INT 1
36286: DEC
36287: ST_TO_ADDR
36288: LD_VAR 0 7
36292: PUSH
36293: FOR_TO
36294: IFFALSE 36341
// begin hc_class = 20 ;
36296: LD_ADDR_OWVAR 28
36300: PUSH
36301: LD_INT 20
36303: ST_TO_ADDR
// hc_gallery =  ;
36304: LD_ADDR_OWVAR 33
36308: PUSH
36309: LD_STRING 
36311: ST_TO_ADDR
// animal := CreateHuman ;
36312: LD_ADDR_VAR 0 12
36316: PUSH
36317: CALL_OW 44
36321: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36322: LD_VAR 0 12
36326: PPUSH
36327: LD_VAR 0 9
36331: PPUSH
36332: LD_INT 0
36334: PPUSH
36335: CALL 37972 0 3
// end ;
36339: GO 36293
36341: POP
36342: POP
// end ;
36343: LD_VAR 0 10
36347: RET
// export function WantHeal ( sci , unit ) ; begin
36348: LD_INT 0
36350: PPUSH
// if GetTaskList ( sci ) > 0 then
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 437
36360: PUSH
36361: LD_INT 0
36363: GREATER
36364: IFFALSE 36434
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 437
36375: PUSH
36376: LD_INT 1
36378: ARRAY
36379: PUSH
36380: LD_INT 1
36382: ARRAY
36383: PUSH
36384: LD_STRING l
36386: EQUAL
36387: PUSH
36388: LD_VAR 0 1
36392: PPUSH
36393: CALL_OW 437
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PUSH
36402: LD_INT 4
36404: ARRAY
36405: PUSH
36406: LD_VAR 0 2
36410: EQUAL
36411: AND
36412: IFFALSE 36424
// result := true else
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 1
36421: ST_TO_ADDR
36422: GO 36432
// result := false ;
36424: LD_ADDR_VAR 0 3
36428: PUSH
36429: LD_INT 0
36431: ST_TO_ADDR
// end else
36432: GO 36442
// result := false ;
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_INT 0
36441: ST_TO_ADDR
// end ;
36442: LD_VAR 0 3
36446: RET
// export function HealTarget ( sci ) ; begin
36447: LD_INT 0
36449: PPUSH
// if not sci then
36450: LD_VAR 0 1
36454: NOT
36455: IFFALSE 36459
// exit ;
36457: GO 36524
// result := 0 ;
36459: LD_ADDR_VAR 0 2
36463: PUSH
36464: LD_INT 0
36466: ST_TO_ADDR
// if GetTaskList ( sci ) then
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 437
36476: IFFALSE 36524
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36478: LD_VAR 0 1
36482: PPUSH
36483: CALL_OW 437
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PUSH
36492: LD_INT 1
36494: ARRAY
36495: PUSH
36496: LD_STRING l
36498: EQUAL
36499: IFFALSE 36524
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36501: LD_ADDR_VAR 0 2
36505: PUSH
36506: LD_VAR 0 1
36510: PPUSH
36511: CALL_OW 437
36515: PUSH
36516: LD_INT 1
36518: ARRAY
36519: PUSH
36520: LD_INT 4
36522: ARRAY
36523: ST_TO_ADDR
// end ;
36524: LD_VAR 0 2
36528: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36529: LD_INT 0
36531: PPUSH
36532: PPUSH
36533: PPUSH
36534: PPUSH
// if not base_units then
36535: LD_VAR 0 1
36539: NOT
36540: IFFALSE 36544
// exit ;
36542: GO 36631
// result := false ;
36544: LD_ADDR_VAR 0 2
36548: PUSH
36549: LD_INT 0
36551: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36552: LD_ADDR_VAR 0 5
36556: PUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: LD_INT 21
36564: PUSH
36565: LD_INT 3
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PPUSH
36572: CALL_OW 72
36576: ST_TO_ADDR
// if not tmp then
36577: LD_VAR 0 5
36581: NOT
36582: IFFALSE 36586
// exit ;
36584: GO 36631
// for i in tmp do
36586: LD_ADDR_VAR 0 3
36590: PUSH
36591: LD_VAR 0 5
36595: PUSH
36596: FOR_IN
36597: IFFALSE 36629
// begin result := EnemyInRange ( i , 22 ) ;
36599: LD_ADDR_VAR 0 2
36603: PUSH
36604: LD_VAR 0 3
36608: PPUSH
36609: LD_INT 22
36611: PPUSH
36612: CALL 34218 0 2
36616: ST_TO_ADDR
// if result then
36617: LD_VAR 0 2
36621: IFFALSE 36627
// exit ;
36623: POP
36624: POP
36625: GO 36631
// end ;
36627: GO 36596
36629: POP
36630: POP
// end ;
36631: LD_VAR 0 2
36635: RET
// export function FilterByTag ( units , tag ) ; begin
36636: LD_INT 0
36638: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: LD_INT 120
36651: PUSH
36652: LD_VAR 0 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PPUSH
36661: CALL_OW 72
36665: ST_TO_ADDR
// end ;
36666: LD_VAR 0 3
36670: RET
// export function IsDriver ( un ) ; begin
36671: LD_INT 0
36673: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36674: LD_ADDR_VAR 0 2
36678: PUSH
36679: LD_VAR 0 1
36683: PUSH
36684: LD_INT 55
36686: PUSH
36687: EMPTY
36688: LIST
36689: PPUSH
36690: CALL_OW 69
36694: IN
36695: ST_TO_ADDR
// end ;
36696: LD_VAR 0 2
36700: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
// list := [ ] ;
36705: LD_ADDR_VAR 0 5
36709: PUSH
36710: EMPTY
36711: ST_TO_ADDR
// case d of 0 :
36712: LD_VAR 0 3
36716: PUSH
36717: LD_INT 0
36719: DOUBLE
36720: EQUAL
36721: IFTRUE 36725
36723: GO 36858
36725: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36726: LD_ADDR_VAR 0 5
36730: PUSH
36731: LD_VAR 0 1
36735: PUSH
36736: LD_INT 4
36738: MINUS
36739: PUSH
36740: LD_VAR 0 2
36744: PUSH
36745: LD_INT 4
36747: MINUS
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: PUSH
36757: LD_VAR 0 1
36761: PUSH
36762: LD_INT 3
36764: MINUS
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: PUSH
36779: LD_VAR 0 1
36783: PUSH
36784: LD_INT 4
36786: PLUS
36787: PUSH
36788: LD_VAR 0 2
36792: PUSH
36793: LD_INT 4
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: PUSH
36801: LD_VAR 0 1
36805: PUSH
36806: LD_INT 3
36808: PLUS
36809: PUSH
36810: LD_VAR 0 2
36814: PUSH
36815: LD_INT 3
36817: PLUS
36818: PUSH
36819: LD_INT 5
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: PUSH
36827: LD_VAR 0 1
36831: PUSH
36832: LD_VAR 0 2
36836: PUSH
36837: LD_INT 4
36839: PLUS
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: ST_TO_ADDR
// end ; 1 :
36856: GO 37556
36858: LD_INT 1
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36866
36864: GO 36999
36866: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36867: LD_ADDR_VAR 0 5
36871: PUSH
36872: LD_VAR 0 1
36876: PUSH
36877: LD_VAR 0 2
36881: PUSH
36882: LD_INT 4
36884: MINUS
36885: PUSH
36886: LD_INT 3
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: PUSH
36894: LD_VAR 0 1
36898: PUSH
36899: LD_INT 3
36901: MINUS
36902: PUSH
36903: LD_VAR 0 2
36907: PUSH
36908: LD_INT 3
36910: MINUS
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: PUSH
36920: LD_VAR 0 1
36924: PUSH
36925: LD_INT 4
36927: MINUS
36928: PUSH
36929: LD_VAR 0 2
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: PUSH
36942: LD_VAR 0 1
36946: PUSH
36947: LD_VAR 0 2
36951: PUSH
36952: LD_INT 3
36954: PLUS
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: PUSH
36964: LD_VAR 0 1
36968: PUSH
36969: LD_INT 4
36971: PLUS
36972: PUSH
36973: LD_VAR 0 2
36977: PUSH
36978: LD_INT 4
36980: PLUS
36981: PUSH
36982: LD_INT 5
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// end ; 2 :
36997: GO 37556
36999: LD_INT 2
37001: DOUBLE
37002: EQUAL
37003: IFTRUE 37007
37005: GO 37136
37007: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37008: LD_ADDR_VAR 0 5
37012: PUSH
37013: LD_VAR 0 1
37017: PUSH
37018: LD_VAR 0 2
37022: PUSH
37023: LD_INT 3
37025: MINUS
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: PUSH
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 4
37042: PLUS
37043: PUSH
37044: LD_VAR 0 2
37048: PUSH
37049: LD_INT 4
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: PUSH
37057: LD_VAR 0 1
37061: PUSH
37062: LD_VAR 0 2
37066: PUSH
37067: LD_INT 4
37069: PLUS
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: PUSH
37079: LD_VAR 0 1
37083: PUSH
37084: LD_INT 3
37086: MINUS
37087: PUSH
37088: LD_VAR 0 2
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: PUSH
37101: LD_VAR 0 1
37105: PUSH
37106: LD_INT 4
37108: MINUS
37109: PUSH
37110: LD_VAR 0 2
37114: PUSH
37115: LD_INT 4
37117: MINUS
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// end ; 3 :
37134: GO 37556
37136: LD_INT 3
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37144
37142: GO 37277
37144: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37145: LD_ADDR_VAR 0 5
37149: PUSH
37150: LD_VAR 0 1
37154: PUSH
37155: LD_INT 3
37157: PLUS
37158: PUSH
37159: LD_VAR 0 2
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: PUSH
37172: LD_VAR 0 1
37176: PUSH
37177: LD_INT 4
37179: PLUS
37180: PUSH
37181: LD_VAR 0 2
37185: PUSH
37186: LD_INT 4
37188: PLUS
37189: PUSH
37190: LD_INT 5
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: PUSH
37198: LD_VAR 0 1
37202: PUSH
37203: LD_INT 4
37205: MINUS
37206: PUSH
37207: LD_VAR 0 2
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: PUSH
37220: LD_VAR 0 1
37224: PUSH
37225: LD_VAR 0 2
37229: PUSH
37230: LD_INT 4
37232: MINUS
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: PUSH
37242: LD_VAR 0 1
37246: PUSH
37247: LD_INT 3
37249: MINUS
37250: PUSH
37251: LD_VAR 0 2
37255: PUSH
37256: LD_INT 3
37258: MINUS
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// end ; 4 :
37275: GO 37556
37277: LD_INT 4
37279: DOUBLE
37280: EQUAL
37281: IFTRUE 37285
37283: GO 37418
37285: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37286: LD_ADDR_VAR 0 5
37290: PUSH
37291: LD_VAR 0 1
37295: PUSH
37296: LD_VAR 0 2
37300: PUSH
37301: LD_INT 4
37303: PLUS
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: PUSH
37313: LD_VAR 0 1
37317: PUSH
37318: LD_INT 3
37320: PLUS
37321: PUSH
37322: LD_VAR 0 2
37326: PUSH
37327: LD_INT 3
37329: PLUS
37330: PUSH
37331: LD_INT 5
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: PUSH
37339: LD_VAR 0 1
37343: PUSH
37344: LD_INT 4
37346: PLUS
37347: PUSH
37348: LD_VAR 0 2
37352: PUSH
37353: LD_INT 4
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: PUSH
37361: LD_VAR 0 1
37365: PUSH
37366: LD_VAR 0 2
37370: PUSH
37371: LD_INT 3
37373: MINUS
37374: PUSH
37375: LD_INT 3
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PUSH
37383: LD_VAR 0 1
37387: PUSH
37388: LD_INT 4
37390: MINUS
37391: PUSH
37392: LD_VAR 0 2
37396: PUSH
37397: LD_INT 4
37399: MINUS
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: ST_TO_ADDR
// end ; 5 :
37416: GO 37556
37418: LD_INT 5
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37426
37424: GO 37555
37426: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_VAR 0 1
37436: PUSH
37437: LD_INT 4
37439: MINUS
37440: PUSH
37441: LD_VAR 0 2
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: LD_VAR 0 1
37458: PUSH
37459: LD_VAR 0 2
37463: PUSH
37464: LD_INT 4
37466: MINUS
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: PUSH
37476: LD_VAR 0 1
37480: PUSH
37481: LD_INT 4
37483: PLUS
37484: PUSH
37485: LD_VAR 0 2
37489: PUSH
37490: LD_INT 4
37492: PLUS
37493: PUSH
37494: LD_INT 5
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: PUSH
37502: LD_VAR 0 1
37506: PUSH
37507: LD_INT 3
37509: PLUS
37510: PUSH
37511: LD_VAR 0 2
37515: PUSH
37516: LD_INT 4
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: LD_VAR 0 2
37533: PUSH
37534: LD_INT 3
37536: PLUS
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// end ; end ;
37553: GO 37556
37555: POP
// result := list ;
37556: LD_ADDR_VAR 0 4
37560: PUSH
37561: LD_VAR 0 5
37565: ST_TO_ADDR
// end ;
37566: LD_VAR 0 4
37570: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
37575: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37576: LD_VAR 0 1
37580: NOT
37581: PUSH
37582: LD_VAR 0 2
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 4
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: IN
37605: NOT
37606: OR
37607: IFFALSE 37611
// exit ;
37609: GO 37694
// tmp := [ ] ;
37611: LD_ADDR_VAR 0 5
37615: PUSH
37616: EMPTY
37617: ST_TO_ADDR
// for i in units do
37618: LD_ADDR_VAR 0 4
37622: PUSH
37623: LD_VAR 0 1
37627: PUSH
37628: FOR_IN
37629: IFFALSE 37663
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37631: LD_ADDR_VAR 0 5
37635: PUSH
37636: LD_VAR 0 5
37640: PPUSH
37641: LD_VAR 0 4
37645: PPUSH
37646: LD_VAR 0 2
37650: PPUSH
37651: CALL_OW 259
37655: PPUSH
37656: CALL 39054 0 2
37660: ST_TO_ADDR
37661: GO 37628
37663: POP
37664: POP
// if not tmp then
37665: LD_VAR 0 5
37669: NOT
37670: IFFALSE 37674
// exit ;
37672: GO 37694
// result := SortListByListDesc ( units , tmp ) ;
37674: LD_ADDR_VAR 0 3
37678: PUSH
37679: LD_VAR 0 1
37683: PPUSH
37684: LD_VAR 0 5
37688: PPUSH
37689: CALL_OW 77
37693: ST_TO_ADDR
// end ;
37694: LD_VAR 0 3
37698: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37699: LD_INT 0
37701: PPUSH
37702: PPUSH
37703: PPUSH
// result := false ;
37704: LD_ADDR_VAR 0 3
37708: PUSH
37709: LD_INT 0
37711: ST_TO_ADDR
// if not building then
37712: LD_VAR 0 2
37716: NOT
37717: IFFALSE 37721
// exit ;
37719: GO 37859
// x := GetX ( building ) ;
37721: LD_ADDR_VAR 0 4
37725: PUSH
37726: LD_VAR 0 2
37730: PPUSH
37731: CALL_OW 250
37735: ST_TO_ADDR
// y := GetY ( building ) ;
37736: LD_ADDR_VAR 0 5
37740: PUSH
37741: LD_VAR 0 2
37745: PPUSH
37746: CALL_OW 251
37750: ST_TO_ADDR
// if not x or not y then
37751: LD_VAR 0 4
37755: NOT
37756: PUSH
37757: LD_VAR 0 5
37761: NOT
37762: OR
37763: IFFALSE 37767
// exit ;
37765: GO 37859
// if GetTaskList ( unit ) then
37767: LD_VAR 0 1
37771: PPUSH
37772: CALL_OW 437
37776: IFFALSE 37859
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37778: LD_STRING e
37780: PUSH
37781: LD_VAR 0 1
37785: PPUSH
37786: CALL_OW 437
37790: PUSH
37791: LD_INT 1
37793: ARRAY
37794: PUSH
37795: LD_INT 1
37797: ARRAY
37798: EQUAL
37799: PUSH
37800: LD_VAR 0 4
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 437
37814: PUSH
37815: LD_INT 1
37817: ARRAY
37818: PUSH
37819: LD_INT 2
37821: ARRAY
37822: EQUAL
37823: AND
37824: PUSH
37825: LD_VAR 0 5
37829: PUSH
37830: LD_VAR 0 1
37834: PPUSH
37835: CALL_OW 437
37839: PUSH
37840: LD_INT 1
37842: ARRAY
37843: PUSH
37844: LD_INT 3
37846: ARRAY
37847: EQUAL
37848: AND
37849: IFFALSE 37859
// result := true end ;
37851: LD_ADDR_VAR 0 3
37855: PUSH
37856: LD_INT 1
37858: ST_TO_ADDR
// end ;
37859: LD_VAR 0 3
37863: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37864: LD_INT 0
37866: PPUSH
// result := false ;
37867: LD_ADDR_VAR 0 4
37871: PUSH
37872: LD_INT 0
37874: ST_TO_ADDR
// if GetTaskList ( unit ) then
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 437
37884: IFFALSE 37967
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37886: LD_STRING M
37888: PUSH
37889: LD_VAR 0 1
37893: PPUSH
37894: CALL_OW 437
37898: PUSH
37899: LD_INT 1
37901: ARRAY
37902: PUSH
37903: LD_INT 1
37905: ARRAY
37906: EQUAL
37907: PUSH
37908: LD_VAR 0 2
37912: PUSH
37913: LD_VAR 0 1
37917: PPUSH
37918: CALL_OW 437
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PUSH
37927: LD_INT 2
37929: ARRAY
37930: EQUAL
37931: AND
37932: PUSH
37933: LD_VAR 0 3
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 437
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PUSH
37952: LD_INT 3
37954: ARRAY
37955: EQUAL
37956: AND
37957: IFFALSE 37967
// result := true ;
37959: LD_ADDR_VAR 0 4
37963: PUSH
37964: LD_INT 1
37966: ST_TO_ADDR
// end ; end ;
37967: LD_VAR 0 4
37971: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37972: LD_INT 0
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
// if not unit or not area then
37978: LD_VAR 0 1
37982: NOT
37983: PUSH
37984: LD_VAR 0 2
37988: NOT
37989: OR
37990: IFFALSE 37994
// exit ;
37992: GO 38157
// tmp := AreaToList ( area , i ) ;
37994: LD_ADDR_VAR 0 6
37998: PUSH
37999: LD_VAR 0 2
38003: PPUSH
38004: LD_VAR 0 5
38008: PPUSH
38009: CALL_OW 517
38013: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38014: LD_ADDR_VAR 0 5
38018: PUSH
38019: DOUBLE
38020: LD_INT 1
38022: DEC
38023: ST_TO_ADDR
38024: LD_VAR 0 6
38028: PUSH
38029: LD_INT 1
38031: ARRAY
38032: PUSH
38033: FOR_TO
38034: IFFALSE 38155
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38036: LD_ADDR_VAR 0 7
38040: PUSH
38041: LD_VAR 0 6
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PUSH
38050: LD_VAR 0 5
38054: ARRAY
38055: PUSH
38056: LD_VAR 0 6
38060: PUSH
38061: LD_INT 2
38063: ARRAY
38064: PUSH
38065: LD_VAR 0 5
38069: ARRAY
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
38075: LD_INT 92
38077: PUSH
38078: LD_VAR 0 7
38082: PUSH
38083: LD_INT 1
38085: ARRAY
38086: PUSH
38087: LD_VAR 0 7
38091: PUSH
38092: LD_INT 2
38094: ARRAY
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: PPUSH
38105: CALL_OW 69
38109: PUSH
38110: LD_INT 0
38112: EQUAL
38113: IFFALSE 38153
// begin PlaceUnitArea ( unit , area , mode ) ;
38115: LD_VAR 0 1
38119: PPUSH
38120: LD_VAR 0 2
38124: PPUSH
38125: LD_VAR 0 3
38129: PPUSH
38130: CALL_OW 49
// result := IsPlaced ( unit ) ;
38134: LD_ADDR_VAR 0 4
38138: PUSH
38139: LD_VAR 0 1
38143: PPUSH
38144: CALL_OW 305
38148: ST_TO_ADDR
// exit ;
38149: POP
38150: POP
38151: GO 38157
// end ; end ;
38153: GO 38033
38155: POP
38156: POP
// end ;
38157: LD_VAR 0 4
38161: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38162: LD_INT 0
38164: PPUSH
38165: PPUSH
38166: PPUSH
// if not side or side > 8 then
38167: LD_VAR 0 1
38171: NOT
38172: PUSH
38173: LD_VAR 0 1
38177: PUSH
38178: LD_INT 8
38180: GREATER
38181: OR
38182: IFFALSE 38186
// exit ;
38184: GO 38373
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38186: LD_ADDR_VAR 0 4
38190: PUSH
38191: LD_INT 22
38193: PUSH
38194: LD_VAR 0 1
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 21
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PPUSH
38217: CALL_OW 69
38221: ST_TO_ADDR
// if not tmp then
38222: LD_VAR 0 4
38226: NOT
38227: IFFALSE 38231
// exit ;
38229: GO 38373
// enable_addtolog := true ;
38231: LD_ADDR_OWVAR 81
38235: PUSH
38236: LD_INT 1
38238: ST_TO_ADDR
// AddToLog ( [ ) ;
38239: LD_STRING [
38241: PPUSH
38242: CALL_OW 561
// for i in tmp do
38246: LD_ADDR_VAR 0 3
38250: PUSH
38251: LD_VAR 0 4
38255: PUSH
38256: FOR_IN
38257: IFFALSE 38364
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38259: LD_STRING [
38261: PUSH
38262: LD_VAR 0 3
38266: PPUSH
38267: CALL_OW 266
38271: STR
38272: PUSH
38273: LD_STRING , 
38275: STR
38276: PUSH
38277: LD_VAR 0 3
38281: PPUSH
38282: CALL_OW 250
38286: STR
38287: PUSH
38288: LD_STRING , 
38290: STR
38291: PUSH
38292: LD_VAR 0 3
38296: PPUSH
38297: CALL_OW 251
38301: STR
38302: PUSH
38303: LD_STRING , 
38305: STR
38306: PUSH
38307: LD_VAR 0 3
38311: PPUSH
38312: CALL_OW 254
38316: STR
38317: PUSH
38318: LD_STRING , 
38320: STR
38321: PUSH
38322: LD_VAR 0 3
38326: PPUSH
38327: LD_INT 1
38329: PPUSH
38330: CALL_OW 268
38334: STR
38335: PUSH
38336: LD_STRING , 
38338: STR
38339: PUSH
38340: LD_VAR 0 3
38344: PPUSH
38345: LD_INT 2
38347: PPUSH
38348: CALL_OW 268
38352: STR
38353: PUSH
38354: LD_STRING ],
38356: STR
38357: PPUSH
38358: CALL_OW 561
// end ;
38362: GO 38256
38364: POP
38365: POP
// AddToLog ( ]; ) ;
38366: LD_STRING ];
38368: PPUSH
38369: CALL_OW 561
// end ;
38373: LD_VAR 0 2
38377: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
// if not area or not rate or not max then
38385: LD_VAR 0 1
38389: NOT
38390: PUSH
38391: LD_VAR 0 2
38395: NOT
38396: OR
38397: PUSH
38398: LD_VAR 0 4
38402: NOT
38403: OR
38404: IFFALSE 38408
// exit ;
38406: GO 38597
// while 1 do
38408: LD_INT 1
38410: IFFALSE 38597
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38412: LD_ADDR_VAR 0 9
38416: PUSH
38417: LD_VAR 0 1
38421: PPUSH
38422: LD_INT 1
38424: PPUSH
38425: CALL_OW 287
38429: PUSH
38430: LD_INT 10
38432: MUL
38433: ST_TO_ADDR
// r := rate / 10 ;
38434: LD_ADDR_VAR 0 7
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_INT 10
38446: DIVREAL
38447: ST_TO_ADDR
// time := 1 1$00 ;
38448: LD_ADDR_VAR 0 8
38452: PUSH
38453: LD_INT 2100
38455: ST_TO_ADDR
// if amount < min then
38456: LD_VAR 0 9
38460: PUSH
38461: LD_VAR 0 3
38465: LESS
38466: IFFALSE 38484
// r := r * 2 else
38468: LD_ADDR_VAR 0 7
38472: PUSH
38473: LD_VAR 0 7
38477: PUSH
38478: LD_INT 2
38480: MUL
38481: ST_TO_ADDR
38482: GO 38510
// if amount > max then
38484: LD_VAR 0 9
38488: PUSH
38489: LD_VAR 0 4
38493: GREATER
38494: IFFALSE 38510
// r := r / 2 ;
38496: LD_ADDR_VAR 0 7
38500: PUSH
38501: LD_VAR 0 7
38505: PUSH
38506: LD_INT 2
38508: DIVREAL
38509: ST_TO_ADDR
// time := time / r ;
38510: LD_ADDR_VAR 0 8
38514: PUSH
38515: LD_VAR 0 8
38519: PUSH
38520: LD_VAR 0 7
38524: DIVREAL
38525: ST_TO_ADDR
// if time < 0 then
38526: LD_VAR 0 8
38530: PUSH
38531: LD_INT 0
38533: LESS
38534: IFFALSE 38551
// time := time * - 1 ;
38536: LD_ADDR_VAR 0 8
38540: PUSH
38541: LD_VAR 0 8
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: MUL
38550: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38551: LD_VAR 0 8
38555: PUSH
38556: LD_INT 35
38558: PPUSH
38559: LD_INT 875
38561: PPUSH
38562: CALL_OW 12
38566: PLUS
38567: PPUSH
38568: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38572: LD_INT 1
38574: PPUSH
38575: LD_INT 5
38577: PPUSH
38578: CALL_OW 12
38582: PPUSH
38583: LD_VAR 0 1
38587: PPUSH
38588: LD_INT 1
38590: PPUSH
38591: CALL_OW 55
// end ;
38595: GO 38408
// end ;
38597: LD_VAR 0 5
38601: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38602: LD_INT 0
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
// if not turrets or not factories then
38612: LD_VAR 0 1
38616: NOT
38617: PUSH
38618: LD_VAR 0 2
38622: NOT
38623: OR
38624: IFFALSE 38628
// exit ;
38626: GO 38935
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38628: LD_ADDR_VAR 0 10
38632: PUSH
38633: LD_INT 5
38635: PUSH
38636: LD_INT 6
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: LD_INT 4
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 3
38655: PUSH
38656: LD_INT 5
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 24
38670: PUSH
38671: LD_INT 25
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 23
38680: PUSH
38681: LD_INT 27
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 42
38694: PUSH
38695: LD_INT 43
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 44
38704: PUSH
38705: LD_INT 46
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 45
38714: PUSH
38715: LD_INT 47
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: ST_TO_ADDR
// result := [ ] ;
38732: LD_ADDR_VAR 0 3
38736: PUSH
38737: EMPTY
38738: ST_TO_ADDR
// for i in turrets do
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_VAR 0 1
38748: PUSH
38749: FOR_IN
38750: IFFALSE 38933
// begin nat := GetNation ( i ) ;
38752: LD_ADDR_VAR 0 7
38756: PUSH
38757: LD_VAR 0 4
38761: PPUSH
38762: CALL_OW 248
38766: ST_TO_ADDR
// weapon := 0 ;
38767: LD_ADDR_VAR 0 8
38771: PUSH
38772: LD_INT 0
38774: ST_TO_ADDR
// if not nat then
38775: LD_VAR 0 7
38779: NOT
38780: IFFALSE 38784
// continue ;
38782: GO 38749
// for j in list [ nat ] do
38784: LD_ADDR_VAR 0 5
38788: PUSH
38789: LD_VAR 0 10
38793: PUSH
38794: LD_VAR 0 7
38798: ARRAY
38799: PUSH
38800: FOR_IN
38801: IFFALSE 38842
// if GetBWeapon ( i ) = j [ 1 ] then
38803: LD_VAR 0 4
38807: PPUSH
38808: CALL_OW 269
38812: PUSH
38813: LD_VAR 0 5
38817: PUSH
38818: LD_INT 1
38820: ARRAY
38821: EQUAL
38822: IFFALSE 38840
// begin weapon := j [ 2 ] ;
38824: LD_ADDR_VAR 0 8
38828: PUSH
38829: LD_VAR 0 5
38833: PUSH
38834: LD_INT 2
38836: ARRAY
38837: ST_TO_ADDR
// break ;
38838: GO 38842
// end ;
38840: GO 38800
38842: POP
38843: POP
// if not weapon then
38844: LD_VAR 0 8
38848: NOT
38849: IFFALSE 38853
// continue ;
38851: GO 38749
// for k in factories do
38853: LD_ADDR_VAR 0 6
38857: PUSH
38858: LD_VAR 0 2
38862: PUSH
38863: FOR_IN
38864: IFFALSE 38929
// begin weapons := AvailableWeaponList ( k ) ;
38866: LD_ADDR_VAR 0 9
38870: PUSH
38871: LD_VAR 0 6
38875: PPUSH
38876: CALL_OW 478
38880: ST_TO_ADDR
// if not weapons then
38881: LD_VAR 0 9
38885: NOT
38886: IFFALSE 38890
// continue ;
38888: GO 38863
// if weapon in weapons then
38890: LD_VAR 0 8
38894: PUSH
38895: LD_VAR 0 9
38899: IN
38900: IFFALSE 38927
// begin result := [ i , weapon ] ;
38902: LD_ADDR_VAR 0 3
38906: PUSH
38907: LD_VAR 0 4
38911: PUSH
38912: LD_VAR 0 8
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: ST_TO_ADDR
// exit ;
38921: POP
38922: POP
38923: POP
38924: POP
38925: GO 38935
// end ; end ;
38927: GO 38863
38929: POP
38930: POP
// end ;
38931: GO 38749
38933: POP
38934: POP
// end ;
38935: LD_VAR 0 3
38939: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38940: LD_INT 0
38942: PPUSH
// if not side or side > 8 then
38943: LD_VAR 0 3
38947: NOT
38948: PUSH
38949: LD_VAR 0 3
38953: PUSH
38954: LD_INT 8
38956: GREATER
38957: OR
38958: IFFALSE 38962
// exit ;
38960: GO 39021
// if not range then
38962: LD_VAR 0 4
38966: NOT
38967: IFFALSE 38978
// range := - 12 ;
38969: LD_ADDR_VAR 0 4
38973: PUSH
38974: LD_INT 12
38976: NEG
38977: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38978: LD_VAR 0 1
38982: PPUSH
38983: LD_VAR 0 2
38987: PPUSH
38988: LD_VAR 0 3
38992: PPUSH
38993: LD_VAR 0 4
38997: PPUSH
38998: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39002: LD_VAR 0 1
39006: PPUSH
39007: LD_VAR 0 2
39011: PPUSH
39012: LD_VAR 0 3
39016: PPUSH
39017: CALL_OW 331
// end ;
39021: LD_VAR 0 5
39025: RET
// export function Video ( mode ) ; begin
39026: LD_INT 0
39028: PPUSH
// ingame_video = mode ;
39029: LD_ADDR_OWVAR 52
39033: PUSH
39034: LD_VAR 0 1
39038: ST_TO_ADDR
// interface_hidden = mode ;
39039: LD_ADDR_OWVAR 54
39043: PUSH
39044: LD_VAR 0 1
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 2
39053: RET
// export function Join ( array , element ) ; begin
39054: LD_INT 0
39056: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_VAR 0 1
39066: PPUSH
39067: LD_VAR 0 1
39071: PUSH
39072: LD_INT 1
39074: PLUS
39075: PPUSH
39076: LD_VAR 0 2
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// end ;
39086: LD_VAR 0 3
39090: RET
// export function JoinUnion ( array , element ) ; begin
39091: LD_INT 0
39093: PPUSH
// result := array union element ;
39094: LD_ADDR_VAR 0 3
39098: PUSH
39099: LD_VAR 0 1
39103: PUSH
39104: LD_VAR 0 2
39108: UNION
39109: ST_TO_ADDR
// end ;
39110: LD_VAR 0 3
39114: RET
// export function GetBehemoths ( side ) ; begin
39115: LD_INT 0
39117: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39118: LD_ADDR_VAR 0 2
39122: PUSH
39123: LD_INT 22
39125: PUSH
39126: LD_VAR 0 1
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 31
39137: PUSH
39138: LD_INT 25
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PPUSH
39149: CALL_OW 69
39153: ST_TO_ADDR
// end ;
39154: LD_VAR 0 2
39158: RET
// export function Shuffle ( array ) ; var i , index ; begin
39159: LD_INT 0
39161: PPUSH
39162: PPUSH
39163: PPUSH
// result := [ ] ;
39164: LD_ADDR_VAR 0 2
39168: PUSH
39169: EMPTY
39170: ST_TO_ADDR
// if not array then
39171: LD_VAR 0 1
39175: NOT
39176: IFFALSE 39180
// exit ;
39178: GO 39279
// Randomize ;
39180: CALL_OW 10
// for i = array downto 1 do
39184: LD_ADDR_VAR 0 3
39188: PUSH
39189: DOUBLE
39190: LD_VAR 0 1
39194: INC
39195: ST_TO_ADDR
39196: LD_INT 1
39198: PUSH
39199: FOR_DOWNTO
39200: IFFALSE 39277
// begin index := rand ( 1 , array ) ;
39202: LD_ADDR_VAR 0 4
39206: PUSH
39207: LD_INT 1
39209: PPUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 12
39219: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39220: LD_ADDR_VAR 0 2
39224: PUSH
39225: LD_VAR 0 2
39229: PPUSH
39230: LD_VAR 0 2
39234: PUSH
39235: LD_INT 1
39237: PLUS
39238: PPUSH
39239: LD_VAR 0 1
39243: PUSH
39244: LD_VAR 0 4
39248: ARRAY
39249: PPUSH
39250: CALL_OW 2
39254: ST_TO_ADDR
// array := Delete ( array , index ) ;
39255: LD_ADDR_VAR 0 1
39259: PUSH
39260: LD_VAR 0 1
39264: PPUSH
39265: LD_VAR 0 4
39269: PPUSH
39270: CALL_OW 3
39274: ST_TO_ADDR
// end ;
39275: GO 39199
39277: POP
39278: POP
// end ;
39279: LD_VAR 0 2
39283: RET
// export function GetBaseMaterials ( base ) ; begin
39284: LD_INT 0
39286: PPUSH
// result := [ 0 , 0 , 0 ] ;
39287: LD_ADDR_VAR 0 2
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// if not base then
39306: LD_VAR 0 1
39310: NOT
39311: IFFALSE 39315
// exit ;
39313: GO 39364
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39315: LD_ADDR_VAR 0 2
39319: PUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: LD_INT 1
39327: PPUSH
39328: CALL_OW 275
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_INT 2
39340: PPUSH
39341: CALL_OW 275
39345: PUSH
39346: LD_VAR 0 1
39350: PPUSH
39351: LD_INT 3
39353: PPUSH
39354: CALL_OW 275
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 2
39368: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39369: LD_INT 0
39371: PPUSH
39372: PPUSH
// result := array ;
39373: LD_ADDR_VAR 0 3
39377: PUSH
39378: LD_VAR 0 1
39382: ST_TO_ADDR
// if size >= result then
39383: LD_VAR 0 2
39387: PUSH
39388: LD_VAR 0 3
39392: GREATEREQUAL
39393: IFFALSE 39397
// exit ;
39395: GO 39447
// if size then
39397: LD_VAR 0 2
39401: IFFALSE 39447
// for i := array downto size do
39403: LD_ADDR_VAR 0 4
39407: PUSH
39408: DOUBLE
39409: LD_VAR 0 1
39413: INC
39414: ST_TO_ADDR
39415: LD_VAR 0 2
39419: PUSH
39420: FOR_DOWNTO
39421: IFFALSE 39445
// result := Delete ( result , result ) ;
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: LD_VAR 0 3
39432: PPUSH
39433: LD_VAR 0 3
39437: PPUSH
39438: CALL_OW 3
39442: ST_TO_ADDR
39443: GO 39420
39445: POP
39446: POP
// end ;
39447: LD_VAR 0 3
39451: RET
// export function ComExit ( unit ) ; var tmp ; begin
39452: LD_INT 0
39454: PPUSH
39455: PPUSH
// if not IsInUnit ( unit ) then
39456: LD_VAR 0 1
39460: PPUSH
39461: CALL_OW 310
39465: NOT
39466: IFFALSE 39470
// exit ;
39468: GO 39530
// tmp := IsInUnit ( unit ) ;
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 310
39484: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39485: LD_VAR 0 3
39489: PPUSH
39490: CALL_OW 247
39494: PUSH
39495: LD_INT 2
39497: EQUAL
39498: IFFALSE 39511
// ComExitVehicle ( unit ) else
39500: LD_VAR 0 1
39504: PPUSH
39505: CALL_OW 121
39509: GO 39520
// ComExitBuilding ( unit ) ;
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 122
// result := tmp ;
39520: LD_ADDR_VAR 0 2
39524: PUSH
39525: LD_VAR 0 3
39529: ST_TO_ADDR
// end ;
39530: LD_VAR 0 2
39534: RET
// export function ComExitAll ( units ) ; var i ; begin
39535: LD_INT 0
39537: PPUSH
39538: PPUSH
// if not units then
39539: LD_VAR 0 1
39543: NOT
39544: IFFALSE 39548
// exit ;
39546: GO 39574
// for i in units do
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_VAR 0 1
39557: PUSH
39558: FOR_IN
39559: IFFALSE 39572
// ComExit ( i ) ;
39561: LD_VAR 0 3
39565: PPUSH
39566: CALL 39452 0 1
39570: GO 39558
39572: POP
39573: POP
// end ;
39574: LD_VAR 0 2
39578: RET
// export function ResetHc ; begin
39579: LD_INT 0
39581: PPUSH
// InitHc ;
39582: CALL_OW 19
// hc_importance := 0 ;
39586: LD_ADDR_OWVAR 32
39590: PUSH
39591: LD_INT 0
39593: ST_TO_ADDR
// end ;
39594: LD_VAR 0 1
39598: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39599: LD_INT 0
39601: PPUSH
39602: PPUSH
39603: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39604: LD_ADDR_VAR 0 6
39608: PUSH
39609: LD_VAR 0 1
39613: PUSH
39614: LD_VAR 0 3
39618: PLUS
39619: PUSH
39620: LD_INT 2
39622: DIV
39623: ST_TO_ADDR
// if _x < 0 then
39624: LD_VAR 0 6
39628: PUSH
39629: LD_INT 0
39631: LESS
39632: IFFALSE 39649
// _x := _x * - 1 ;
39634: LD_ADDR_VAR 0 6
39638: PUSH
39639: LD_VAR 0 6
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: MUL
39648: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39649: LD_ADDR_VAR 0 7
39653: PUSH
39654: LD_VAR 0 2
39658: PUSH
39659: LD_VAR 0 4
39663: PLUS
39664: PUSH
39665: LD_INT 2
39667: DIV
39668: ST_TO_ADDR
// if _y < 0 then
39669: LD_VAR 0 7
39673: PUSH
39674: LD_INT 0
39676: LESS
39677: IFFALSE 39694
// _y := _y * - 1 ;
39679: LD_ADDR_VAR 0 7
39683: PUSH
39684: LD_VAR 0 7
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: MUL
39693: ST_TO_ADDR
// result := [ _x , _y ] ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_VAR 0 6
39703: PUSH
39704: LD_VAR 0 7
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: ST_TO_ADDR
// end ;
39713: LD_VAR 0 5
39717: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39718: LD_INT 0
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
// task := GetTaskList ( unit ) ;
39724: LD_ADDR_VAR 0 7
39728: PUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 437
39738: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39739: LD_VAR 0 7
39743: NOT
39744: PUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: LD_VAR 0 2
39754: PPUSH
39755: CALL_OW 308
39759: NOT
39760: AND
39761: IFFALSE 39765
// exit ;
39763: GO 39883
// if IsInArea ( unit , area ) then
39765: LD_VAR 0 1
39769: PPUSH
39770: LD_VAR 0 2
39774: PPUSH
39775: CALL_OW 308
39779: IFFALSE 39797
// begin ComMoveToArea ( unit , goAway ) ;
39781: LD_VAR 0 1
39785: PPUSH
39786: LD_VAR 0 3
39790: PPUSH
39791: CALL_OW 113
// exit ;
39795: GO 39883
// end ; if task [ 1 ] [ 1 ] <> M then
39797: LD_VAR 0 7
39801: PUSH
39802: LD_INT 1
39804: ARRAY
39805: PUSH
39806: LD_INT 1
39808: ARRAY
39809: PUSH
39810: LD_STRING M
39812: NONEQUAL
39813: IFFALSE 39817
// exit ;
39815: GO 39883
// x := task [ 1 ] [ 2 ] ;
39817: LD_ADDR_VAR 0 5
39821: PUSH
39822: LD_VAR 0 7
39826: PUSH
39827: LD_INT 1
39829: ARRAY
39830: PUSH
39831: LD_INT 2
39833: ARRAY
39834: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39835: LD_ADDR_VAR 0 6
39839: PUSH
39840: LD_VAR 0 7
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: PUSH
39849: LD_INT 3
39851: ARRAY
39852: ST_TO_ADDR
// if InArea ( x , y , area ) then
39853: LD_VAR 0 5
39857: PPUSH
39858: LD_VAR 0 6
39862: PPUSH
39863: LD_VAR 0 2
39867: PPUSH
39868: CALL_OW 309
39872: IFFALSE 39883
// ComStop ( unit ) ;
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 141
// end ;
39883: LD_VAR 0 4
39887: RET
// export function Abs ( value ) ; begin
39888: LD_INT 0
39890: PPUSH
// result := value ;
39891: LD_ADDR_VAR 0 2
39895: PUSH
39896: LD_VAR 0 1
39900: ST_TO_ADDR
// if value < 0 then
39901: LD_VAR 0 1
39905: PUSH
39906: LD_INT 0
39908: LESS
39909: IFFALSE 39926
// result := value * - 1 ;
39911: LD_ADDR_VAR 0 2
39915: PUSH
39916: LD_VAR 0 1
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: MUL
39925: ST_TO_ADDR
// end ;
39926: LD_VAR 0 2
39930: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39931: LD_INT 0
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
// if not unit or not building then
39941: LD_VAR 0 1
39945: NOT
39946: PUSH
39947: LD_VAR 0 2
39951: NOT
39952: OR
39953: IFFALSE 39957
// exit ;
39955: GO 40183
// x := GetX ( building ) ;
39957: LD_ADDR_VAR 0 4
39961: PUSH
39962: LD_VAR 0 2
39966: PPUSH
39967: CALL_OW 250
39971: ST_TO_ADDR
// y := GetY ( building ) ;
39972: LD_ADDR_VAR 0 6
39976: PUSH
39977: LD_VAR 0 2
39981: PPUSH
39982: CALL_OW 251
39986: ST_TO_ADDR
// d := GetDir ( building ) ;
39987: LD_ADDR_VAR 0 8
39991: PUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: CALL_OW 254
40001: ST_TO_ADDR
// r := 4 ;
40002: LD_ADDR_VAR 0 9
40006: PUSH
40007: LD_INT 4
40009: ST_TO_ADDR
// for i := 1 to 5 do
40010: LD_ADDR_VAR 0 10
40014: PUSH
40015: DOUBLE
40016: LD_INT 1
40018: DEC
40019: ST_TO_ADDR
40020: LD_INT 5
40022: PUSH
40023: FOR_TO
40024: IFFALSE 40181
// begin _x := ShiftX ( x , d , r + i ) ;
40026: LD_ADDR_VAR 0 5
40030: PUSH
40031: LD_VAR 0 4
40035: PPUSH
40036: LD_VAR 0 8
40040: PPUSH
40041: LD_VAR 0 9
40045: PUSH
40046: LD_VAR 0 10
40050: PLUS
40051: PPUSH
40052: CALL_OW 272
40056: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40057: LD_ADDR_VAR 0 7
40061: PUSH
40062: LD_VAR 0 6
40066: PPUSH
40067: LD_VAR 0 8
40071: PPUSH
40072: LD_VAR 0 9
40076: PUSH
40077: LD_VAR 0 10
40081: PLUS
40082: PPUSH
40083: CALL_OW 273
40087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40088: LD_VAR 0 5
40092: PPUSH
40093: LD_VAR 0 7
40097: PPUSH
40098: CALL_OW 488
40102: PUSH
40103: LD_VAR 0 5
40107: PPUSH
40108: LD_VAR 0 7
40112: PPUSH
40113: CALL_OW 428
40117: PPUSH
40118: CALL_OW 247
40122: PUSH
40123: LD_INT 3
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: IN
40133: NOT
40134: AND
40135: IFFALSE 40179
// begin ComMoveXY ( unit , _x , _y ) ;
40137: LD_VAR 0 1
40141: PPUSH
40142: LD_VAR 0 5
40146: PPUSH
40147: LD_VAR 0 7
40151: PPUSH
40152: CALL_OW 111
// result := [ _x , _y ] ;
40156: LD_ADDR_VAR 0 3
40160: PUSH
40161: LD_VAR 0 5
40165: PUSH
40166: LD_VAR 0 7
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// exit ;
40175: POP
40176: POP
40177: GO 40183
// end ; end ;
40179: GO 40023
40181: POP
40182: POP
// end ;
40183: LD_VAR 0 3
40187: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40188: LD_INT 0
40190: PPUSH
40191: PPUSH
40192: PPUSH
// result := 0 ;
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_INT 0
40200: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40201: LD_VAR 0 1
40205: PUSH
40206: LD_INT 0
40208: LESS
40209: PUSH
40210: LD_VAR 0 1
40214: PUSH
40215: LD_INT 8
40217: GREATER
40218: OR
40219: PUSH
40220: LD_VAR 0 2
40224: PUSH
40225: LD_INT 0
40227: LESS
40228: OR
40229: PUSH
40230: LD_VAR 0 2
40234: PUSH
40235: LD_INT 8
40237: GREATER
40238: OR
40239: IFFALSE 40243
// exit ;
40241: GO 40318
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40243: LD_ADDR_VAR 0 4
40247: PUSH
40248: LD_INT 22
40250: PUSH
40251: LD_VAR 0 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PPUSH
40260: CALL_OW 69
40264: PUSH
40265: FOR_IN
40266: IFFALSE 40316
// begin un := UnitShoot ( i ) ;
40268: LD_ADDR_VAR 0 5
40272: PUSH
40273: LD_VAR 0 4
40277: PPUSH
40278: CALL_OW 504
40282: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40283: LD_VAR 0 5
40287: PPUSH
40288: CALL_OW 255
40292: PUSH
40293: LD_VAR 0 1
40297: EQUAL
40298: IFFALSE 40314
// begin result := un ;
40300: LD_ADDR_VAR 0 3
40304: PUSH
40305: LD_VAR 0 5
40309: ST_TO_ADDR
// exit ;
40310: POP
40311: POP
40312: GO 40318
// end ; end ;
40314: GO 40265
40316: POP
40317: POP
// end ;
40318: LD_VAR 0 3
40322: RET
// export function GetCargoBay ( units ) ; begin
40323: LD_INT 0
40325: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40326: LD_ADDR_VAR 0 2
40330: PUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 34
40341: PUSH
40342: LD_INT 12
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 34
40351: PUSH
40352: LD_INT 51
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 34
40361: PUSH
40362: LD_INT 32
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 34
40371: PUSH
40372: LD_INT 89
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: PPUSH
40386: CALL_OW 72
40390: ST_TO_ADDR
// end ;
40391: LD_VAR 0 2
40395: RET
// export function Negate ( value ) ; begin
40396: LD_INT 0
40398: PPUSH
// result := not value ;
40399: LD_ADDR_VAR 0 2
40403: PUSH
40404: LD_VAR 0 1
40408: NOT
40409: ST_TO_ADDR
// end ;
40410: LD_VAR 0 2
40414: RET
// export function Inc ( value ) ; begin
40415: LD_INT 0
40417: PPUSH
// result := value + 1 ;
40418: LD_ADDR_VAR 0 2
40422: PUSH
40423: LD_VAR 0 1
40427: PUSH
40428: LD_INT 1
40430: PLUS
40431: ST_TO_ADDR
// end ;
40432: LD_VAR 0 2
40436: RET
// export function Dec ( value ) ; begin
40437: LD_INT 0
40439: PPUSH
// result := value - 1 ;
40440: LD_ADDR_VAR 0 2
40444: PUSH
40445: LD_VAR 0 1
40449: PUSH
40450: LD_INT 1
40452: MINUS
40453: ST_TO_ADDR
// end ;
40454: LD_VAR 0 2
40458: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40459: LD_INT 0
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40469: LD_VAR 0 1
40473: PPUSH
40474: LD_VAR 0 2
40478: PPUSH
40479: CALL_OW 488
40483: NOT
40484: PUSH
40485: LD_VAR 0 3
40489: PPUSH
40490: LD_VAR 0 4
40494: PPUSH
40495: CALL_OW 488
40499: NOT
40500: OR
40501: IFFALSE 40514
// begin result := - 1 ;
40503: LD_ADDR_VAR 0 5
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: ST_TO_ADDR
// exit ;
40512: GO 40749
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40514: LD_ADDR_VAR 0 12
40518: PUSH
40519: LD_VAR 0 1
40523: PPUSH
40524: LD_VAR 0 2
40528: PPUSH
40529: LD_VAR 0 3
40533: PPUSH
40534: LD_VAR 0 4
40538: PPUSH
40539: CALL 39599 0 4
40543: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40544: LD_ADDR_VAR 0 11
40548: PUSH
40549: LD_VAR 0 1
40553: PPUSH
40554: LD_VAR 0 2
40558: PPUSH
40559: LD_VAR 0 12
40563: PUSH
40564: LD_INT 1
40566: ARRAY
40567: PPUSH
40568: LD_VAR 0 12
40572: PUSH
40573: LD_INT 2
40575: ARRAY
40576: PPUSH
40577: CALL_OW 298
40581: ST_TO_ADDR
// distance := 9999 ;
40582: LD_ADDR_VAR 0 10
40586: PUSH
40587: LD_INT 9999
40589: ST_TO_ADDR
// for i := 0 to 5 do
40590: LD_ADDR_VAR 0 6
40594: PUSH
40595: DOUBLE
40596: LD_INT 0
40598: DEC
40599: ST_TO_ADDR
40600: LD_INT 5
40602: PUSH
40603: FOR_TO
40604: IFFALSE 40747
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40606: LD_ADDR_VAR 0 7
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: LD_VAR 0 6
40620: PPUSH
40621: LD_VAR 0 11
40625: PPUSH
40626: CALL_OW 272
40630: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40631: LD_ADDR_VAR 0 8
40635: PUSH
40636: LD_VAR 0 2
40640: PPUSH
40641: LD_VAR 0 6
40645: PPUSH
40646: LD_VAR 0 11
40650: PPUSH
40651: CALL_OW 273
40655: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40656: LD_VAR 0 7
40660: PPUSH
40661: LD_VAR 0 8
40665: PPUSH
40666: CALL_OW 488
40670: NOT
40671: IFFALSE 40675
// continue ;
40673: GO 40603
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40675: LD_ADDR_VAR 0 9
40679: PUSH
40680: LD_VAR 0 12
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PPUSH
40689: LD_VAR 0 12
40693: PUSH
40694: LD_INT 2
40696: ARRAY
40697: PPUSH
40698: LD_VAR 0 7
40702: PPUSH
40703: LD_VAR 0 8
40707: PPUSH
40708: CALL_OW 298
40712: ST_TO_ADDR
// if tmp < distance then
40713: LD_VAR 0 9
40717: PUSH
40718: LD_VAR 0 10
40722: LESS
40723: IFFALSE 40745
// begin result := i ;
40725: LD_ADDR_VAR 0 5
40729: PUSH
40730: LD_VAR 0 6
40734: ST_TO_ADDR
// distance := tmp ;
40735: LD_ADDR_VAR 0 10
40739: PUSH
40740: LD_VAR 0 9
40744: ST_TO_ADDR
// end ; end ;
40745: GO 40603
40747: POP
40748: POP
// end ;
40749: LD_VAR 0 5
40753: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40754: LD_INT 0
40756: PPUSH
40757: PPUSH
// if not driver or not IsInUnit ( driver ) then
40758: LD_VAR 0 1
40762: NOT
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 310
40773: NOT
40774: OR
40775: IFFALSE 40779
// exit ;
40777: GO 40869
// vehicle := IsInUnit ( driver ) ;
40779: LD_ADDR_VAR 0 3
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 310
40793: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40794: LD_VAR 0 1
40798: PPUSH
40799: LD_STRING \
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: PUSH
40829: LD_STRING E
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_VAR 0 3
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PPUSH
40865: CALL_OW 446
// end ;
40869: LD_VAR 0 2
40873: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40874: LD_INT 0
40876: PPUSH
40877: PPUSH
// if not driver or not IsInUnit ( driver ) then
40878: LD_VAR 0 1
40882: NOT
40883: PUSH
40884: LD_VAR 0 1
40888: PPUSH
40889: CALL_OW 310
40893: NOT
40894: OR
40895: IFFALSE 40899
// exit ;
40897: GO 40989
// vehicle := IsInUnit ( driver ) ;
40899: LD_ADDR_VAR 0 3
40903: PUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: CALL_OW 310
40913: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40914: LD_VAR 0 1
40918: PPUSH
40919: LD_STRING \
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: PUSH
40949: LD_STRING E
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_VAR 0 3
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PPUSH
40985: CALL_OW 447
// end ;
40989: LD_VAR 0 2
40993: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40994: LD_INT 0
40996: PPUSH
40997: PPUSH
40998: PPUSH
// tmp := [ ] ;
40999: LD_ADDR_VAR 0 5
41003: PUSH
41004: EMPTY
41005: ST_TO_ADDR
// for i in units do
41006: LD_ADDR_VAR 0 4
41010: PUSH
41011: LD_VAR 0 1
41015: PUSH
41016: FOR_IN
41017: IFFALSE 41055
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41019: LD_ADDR_VAR 0 5
41023: PUSH
41024: LD_VAR 0 5
41028: PPUSH
41029: LD_VAR 0 5
41033: PUSH
41034: LD_INT 1
41036: PLUS
41037: PPUSH
41038: LD_VAR 0 4
41042: PPUSH
41043: CALL_OW 256
41047: PPUSH
41048: CALL_OW 2
41052: ST_TO_ADDR
41053: GO 41016
41055: POP
41056: POP
// if not tmp then
41057: LD_VAR 0 5
41061: NOT
41062: IFFALSE 41066
// exit ;
41064: GO 41114
// if asc then
41066: LD_VAR 0 2
41070: IFFALSE 41094
// result := SortListByListAsc ( units , tmp ) else
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: LD_VAR 0 5
41086: PPUSH
41087: CALL_OW 76
41091: ST_TO_ADDR
41092: GO 41114
// result := SortListByListDesc ( units , tmp ) ;
41094: LD_ADDR_VAR 0 3
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: LD_VAR 0 5
41108: PPUSH
41109: CALL_OW 77
41113: ST_TO_ADDR
// end ;
41114: LD_VAR 0 3
41118: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41119: LD_INT 0
41121: PPUSH
41122: PPUSH
// task := GetTaskList ( mech ) ;
41123: LD_ADDR_VAR 0 4
41127: PUSH
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 437
41137: ST_TO_ADDR
// if not task then
41138: LD_VAR 0 4
41142: NOT
41143: IFFALSE 41147
// exit ;
41145: GO 41189
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_VAR 0 4
41156: PUSH
41157: LD_INT 1
41159: ARRAY
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PUSH
41165: LD_STRING r
41167: EQUAL
41168: PUSH
41169: LD_VAR 0 4
41173: PUSH
41174: LD_INT 1
41176: ARRAY
41177: PUSH
41178: LD_INT 4
41180: ARRAY
41181: PUSH
41182: LD_VAR 0 2
41186: EQUAL
41187: AND
41188: ST_TO_ADDR
// end ;
41189: LD_VAR 0 3
41193: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41194: LD_INT 0
41196: PPUSH
// SetDir ( unit , d ) ;
41197: LD_VAR 0 1
41201: PPUSH
41202: LD_VAR 0 4
41206: PPUSH
41207: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41211: LD_VAR 0 1
41215: PPUSH
41216: LD_VAR 0 2
41220: PPUSH
41221: LD_VAR 0 3
41225: PPUSH
41226: LD_VAR 0 5
41230: PPUSH
41231: CALL_OW 48
// end ;
41235: LD_VAR 0 6
41239: RET
// export function ToNaturalNumber ( number ) ; begin
41240: LD_INT 0
41242: PPUSH
// result := number div 1 ;
41243: LD_ADDR_VAR 0 2
41247: PUSH
41248: LD_VAR 0 1
41252: PUSH
41253: LD_INT 1
41255: DIV
41256: ST_TO_ADDR
// if number < 0 then
41257: LD_VAR 0 1
41261: PUSH
41262: LD_INT 0
41264: LESS
41265: IFFALSE 41275
// result := 0 ;
41267: LD_ADDR_VAR 0 2
41271: PUSH
41272: LD_INT 0
41274: ST_TO_ADDR
// end ;
41275: LD_VAR 0 2
41279: RET
// export function SortByClass ( units , class ) ; var un ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
// if not units or not class then
41284: LD_VAR 0 1
41288: NOT
41289: PUSH
41290: LD_VAR 0 2
41294: NOT
41295: OR
41296: IFFALSE 41300
// exit ;
41298: GO 41395
// result := [ ] ;
41300: LD_ADDR_VAR 0 3
41304: PUSH
41305: EMPTY
41306: ST_TO_ADDR
// for un in units do
41307: LD_ADDR_VAR 0 4
41311: PUSH
41312: LD_VAR 0 1
41316: PUSH
41317: FOR_IN
41318: IFFALSE 41393
// if GetClass ( un ) = class then
41320: LD_VAR 0 4
41324: PPUSH
41325: CALL_OW 257
41329: PUSH
41330: LD_VAR 0 2
41334: EQUAL
41335: IFFALSE 41362
// result := Insert ( result , 1 , un ) else
41337: LD_ADDR_VAR 0 3
41341: PUSH
41342: LD_VAR 0 3
41346: PPUSH
41347: LD_INT 1
41349: PPUSH
41350: LD_VAR 0 4
41354: PPUSH
41355: CALL_OW 2
41359: ST_TO_ADDR
41360: GO 41391
// result := Replace ( result , result + 1 , un ) ;
41362: LD_ADDR_VAR 0 3
41366: PUSH
41367: LD_VAR 0 3
41371: PPUSH
41372: LD_VAR 0 3
41376: PUSH
41377: LD_INT 1
41379: PLUS
41380: PPUSH
41381: LD_VAR 0 4
41385: PPUSH
41386: CALL_OW 1
41390: ST_TO_ADDR
41391: GO 41317
41393: POP
41394: POP
// end ;
41395: LD_VAR 0 3
41399: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41400: LD_INT 0
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
// result := [ ] ;
41409: LD_ADDR_VAR 0 4
41413: PUSH
41414: EMPTY
41415: ST_TO_ADDR
// if x - r < 0 then
41416: LD_VAR 0 1
41420: PUSH
41421: LD_VAR 0 3
41425: MINUS
41426: PUSH
41427: LD_INT 0
41429: LESS
41430: IFFALSE 41442
// min_x := 0 else
41432: LD_ADDR_VAR 0 8
41436: PUSH
41437: LD_INT 0
41439: ST_TO_ADDR
41440: GO 41458
// min_x := x - r ;
41442: LD_ADDR_VAR 0 8
41446: PUSH
41447: LD_VAR 0 1
41451: PUSH
41452: LD_VAR 0 3
41456: MINUS
41457: ST_TO_ADDR
// if y - r < 0 then
41458: LD_VAR 0 2
41462: PUSH
41463: LD_VAR 0 3
41467: MINUS
41468: PUSH
41469: LD_INT 0
41471: LESS
41472: IFFALSE 41484
// min_y := 0 else
41474: LD_ADDR_VAR 0 7
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
41482: GO 41500
// min_y := y - r ;
41484: LD_ADDR_VAR 0 7
41488: PUSH
41489: LD_VAR 0 2
41493: PUSH
41494: LD_VAR 0 3
41498: MINUS
41499: ST_TO_ADDR
// max_x := x + r ;
41500: LD_ADDR_VAR 0 9
41504: PUSH
41505: LD_VAR 0 1
41509: PUSH
41510: LD_VAR 0 3
41514: PLUS
41515: ST_TO_ADDR
// max_y := y + r ;
41516: LD_ADDR_VAR 0 10
41520: PUSH
41521: LD_VAR 0 2
41525: PUSH
41526: LD_VAR 0 3
41530: PLUS
41531: ST_TO_ADDR
// for _x = min_x to max_x do
41532: LD_ADDR_VAR 0 5
41536: PUSH
41537: DOUBLE
41538: LD_VAR 0 8
41542: DEC
41543: ST_TO_ADDR
41544: LD_VAR 0 9
41548: PUSH
41549: FOR_TO
41550: IFFALSE 41651
// for _y = min_y to max_y do
41552: LD_ADDR_VAR 0 6
41556: PUSH
41557: DOUBLE
41558: LD_VAR 0 7
41562: DEC
41563: ST_TO_ADDR
41564: LD_VAR 0 10
41568: PUSH
41569: FOR_TO
41570: IFFALSE 41647
// begin if not ValidHex ( _x , _y ) then
41572: LD_VAR 0 5
41576: PPUSH
41577: LD_VAR 0 6
41581: PPUSH
41582: CALL_OW 488
41586: NOT
41587: IFFALSE 41591
// continue ;
41589: GO 41569
// if GetResourceTypeXY ( _x , _y ) then
41591: LD_VAR 0 5
41595: PPUSH
41596: LD_VAR 0 6
41600: PPUSH
41601: CALL_OW 283
41605: IFFALSE 41645
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41607: LD_ADDR_VAR 0 4
41611: PUSH
41612: LD_VAR 0 4
41616: PPUSH
41617: LD_VAR 0 4
41621: PUSH
41622: LD_INT 1
41624: PLUS
41625: PPUSH
41626: LD_VAR 0 5
41630: PUSH
41631: LD_VAR 0 6
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PPUSH
41640: CALL_OW 1
41644: ST_TO_ADDR
// end ;
41645: GO 41569
41647: POP
41648: POP
41649: GO 41549
41651: POP
41652: POP
// end ;
41653: LD_VAR 0 4
41657: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41658: LD_INT 0
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
// if not units then
41668: LD_VAR 0 1
41672: NOT
41673: IFFALSE 41677
// exit ;
41675: GO 42201
// result := UnitFilter ( units , [ f_ok ] ) ;
41677: LD_ADDR_VAR 0 3
41681: PUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: LD_INT 50
41689: PUSH
41690: EMPTY
41691: LIST
41692: PPUSH
41693: CALL_OW 72
41697: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41698: LD_ADDR_VAR 0 8
41702: PUSH
41703: LD_VAR 0 1
41707: PUSH
41708: LD_INT 1
41710: ARRAY
41711: PPUSH
41712: CALL_OW 255
41716: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41717: LD_ADDR_VAR 0 10
41721: PUSH
41722: LD_INT 29
41724: PUSH
41725: LD_INT 91
41727: PUSH
41728: LD_INT 49
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// if not result then
41736: LD_VAR 0 3
41740: NOT
41741: IFFALSE 41745
// exit ;
41743: GO 42201
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41745: LD_ADDR_VAR 0 5
41749: PUSH
41750: LD_INT 81
41752: PUSH
41753: LD_VAR 0 8
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PPUSH
41762: CALL_OW 69
41766: ST_TO_ADDR
// for i in result do
41767: LD_ADDR_VAR 0 4
41771: PUSH
41772: LD_VAR 0 3
41776: PUSH
41777: FOR_IN
41778: IFFALSE 42199
// begin tag := GetTag ( i ) + 1 ;
41780: LD_ADDR_VAR 0 9
41784: PUSH
41785: LD_VAR 0 4
41789: PPUSH
41790: CALL_OW 110
41794: PUSH
41795: LD_INT 1
41797: PLUS
41798: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41799: LD_ADDR_VAR 0 7
41803: PUSH
41804: LD_VAR 0 4
41808: PPUSH
41809: CALL_OW 250
41813: PPUSH
41814: LD_VAR 0 4
41818: PPUSH
41819: CALL_OW 251
41823: PPUSH
41824: LD_INT 6
41826: PPUSH
41827: CALL 41400 0 3
41831: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41832: LD_VAR 0 4
41836: PPUSH
41837: CALL_OW 247
41841: PUSH
41842: LD_INT 2
41844: EQUAL
41845: PUSH
41846: LD_VAR 0 7
41850: AND
41851: PUSH
41852: LD_VAR 0 4
41856: PPUSH
41857: CALL_OW 264
41861: PUSH
41862: LD_VAR 0 10
41866: IN
41867: NOT
41868: AND
41869: IFFALSE 41908
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41871: LD_VAR 0 4
41875: PPUSH
41876: LD_VAR 0 7
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PPUSH
41889: LD_VAR 0 7
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PUSH
41898: LD_INT 2
41900: ARRAY
41901: PPUSH
41902: CALL_OW 116
41906: GO 42197
// if path > tag then
41908: LD_VAR 0 2
41912: PUSH
41913: LD_VAR 0 9
41917: GREATER
41918: IFFALSE 42126
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41920: LD_ADDR_VAR 0 6
41924: PUSH
41925: LD_VAR 0 5
41929: PPUSH
41930: LD_INT 91
41932: PUSH
41933: LD_VAR 0 4
41937: PUSH
41938: LD_INT 8
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 72
41950: ST_TO_ADDR
// if nearEnemy then
41951: LD_VAR 0 6
41955: IFFALSE 42024
// begin if GetWeapon ( i ) = ru_time_lapser then
41957: LD_VAR 0 4
41961: PPUSH
41962: CALL_OW 264
41966: PUSH
41967: LD_INT 49
41969: EQUAL
41970: IFFALSE 41998
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41972: LD_VAR 0 4
41976: PPUSH
41977: LD_VAR 0 6
41981: PPUSH
41982: LD_VAR 0 4
41986: PPUSH
41987: CALL_OW 74
41991: PPUSH
41992: CALL_OW 112
41996: GO 42022
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41998: LD_VAR 0 4
42002: PPUSH
42003: LD_VAR 0 6
42007: PPUSH
42008: LD_VAR 0 4
42012: PPUSH
42013: CALL_OW 74
42017: PPUSH
42018: CALL_OW 115
// end else
42022: GO 42124
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42024: LD_VAR 0 4
42028: PPUSH
42029: LD_VAR 0 2
42033: PUSH
42034: LD_VAR 0 9
42038: ARRAY
42039: PUSH
42040: LD_INT 1
42042: ARRAY
42043: PPUSH
42044: LD_VAR 0 2
42048: PUSH
42049: LD_VAR 0 9
42053: ARRAY
42054: PUSH
42055: LD_INT 2
42057: ARRAY
42058: PPUSH
42059: CALL_OW 297
42063: PUSH
42064: LD_INT 6
42066: GREATER
42067: IFFALSE 42110
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42069: LD_VAR 0 4
42073: PPUSH
42074: LD_VAR 0 2
42078: PUSH
42079: LD_VAR 0 9
42083: ARRAY
42084: PUSH
42085: LD_INT 1
42087: ARRAY
42088: PPUSH
42089: LD_VAR 0 2
42093: PUSH
42094: LD_VAR 0 9
42098: ARRAY
42099: PUSH
42100: LD_INT 2
42102: ARRAY
42103: PPUSH
42104: CALL_OW 114
42108: GO 42124
// SetTag ( i , tag ) ;
42110: LD_VAR 0 4
42114: PPUSH
42115: LD_VAR 0 9
42119: PPUSH
42120: CALL_OW 109
// end else
42124: GO 42197
// if enemy then
42126: LD_VAR 0 5
42130: IFFALSE 42197
// begin if GetWeapon ( i ) = ru_time_lapser then
42132: LD_VAR 0 4
42136: PPUSH
42137: CALL_OW 264
42141: PUSH
42142: LD_INT 49
42144: EQUAL
42145: IFFALSE 42173
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42147: LD_VAR 0 4
42151: PPUSH
42152: LD_VAR 0 5
42156: PPUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: CALL_OW 74
42166: PPUSH
42167: CALL_OW 112
42171: GO 42197
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42173: LD_VAR 0 4
42177: PPUSH
42178: LD_VAR 0 5
42182: PPUSH
42183: LD_VAR 0 4
42187: PPUSH
42188: CALL_OW 74
42192: PPUSH
42193: CALL_OW 115
// end ; end ;
42197: GO 41777
42199: POP
42200: POP
// end ;
42201: LD_VAR 0 3
42205: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42206: LD_INT 0
42208: PPUSH
42209: PPUSH
42210: PPUSH
// if not unit or IsInUnit ( unit ) then
42211: LD_VAR 0 1
42215: NOT
42216: PUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 310
42226: OR
42227: IFFALSE 42231
// exit ;
42229: GO 42322
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42231: LD_ADDR_VAR 0 4
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 250
42245: PPUSH
42246: LD_VAR 0 2
42250: PPUSH
42251: LD_INT 1
42253: PPUSH
42254: CALL_OW 272
42258: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42259: LD_ADDR_VAR 0 5
42263: PUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: CALL_OW 251
42273: PPUSH
42274: LD_VAR 0 2
42278: PPUSH
42279: LD_INT 1
42281: PPUSH
42282: CALL_OW 273
42286: ST_TO_ADDR
// if ValidHex ( x , y ) then
42287: LD_VAR 0 4
42291: PPUSH
42292: LD_VAR 0 5
42296: PPUSH
42297: CALL_OW 488
42301: IFFALSE 42322
// ComTurnXY ( unit , x , y ) ;
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: CALL_OW 118
// end ;
42322: LD_VAR 0 3
42326: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42327: LD_INT 0
42329: PPUSH
42330: PPUSH
// result := false ;
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_INT 0
42338: ST_TO_ADDR
// if not units then
42339: LD_VAR 0 2
42343: NOT
42344: IFFALSE 42348
// exit ;
42346: GO 42393
// for i in units do
42348: LD_ADDR_VAR 0 4
42352: PUSH
42353: LD_VAR 0 2
42357: PUSH
42358: FOR_IN
42359: IFFALSE 42391
// if See ( side , i ) then
42361: LD_VAR 0 1
42365: PPUSH
42366: LD_VAR 0 4
42370: PPUSH
42371: CALL_OW 292
42375: IFFALSE 42389
// begin result := true ;
42377: LD_ADDR_VAR 0 3
42381: PUSH
42382: LD_INT 1
42384: ST_TO_ADDR
// exit ;
42385: POP
42386: POP
42387: GO 42393
// end ;
42389: GO 42358
42391: POP
42392: POP
// end ;
42393: LD_VAR 0 3
42397: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42398: LD_INT 0
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
// if not unit or not points then
42404: LD_VAR 0 1
42408: NOT
42409: PUSH
42410: LD_VAR 0 2
42414: NOT
42415: OR
42416: IFFALSE 42420
// exit ;
42418: GO 42510
// dist := 99999 ;
42420: LD_ADDR_VAR 0 5
42424: PUSH
42425: LD_INT 99999
42427: ST_TO_ADDR
// for i in points do
42428: LD_ADDR_VAR 0 4
42432: PUSH
42433: LD_VAR 0 2
42437: PUSH
42438: FOR_IN
42439: IFFALSE 42508
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42441: LD_ADDR_VAR 0 6
42445: PUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: LD_VAR 0 4
42455: PUSH
42456: LD_INT 1
42458: ARRAY
42459: PPUSH
42460: LD_VAR 0 4
42464: PUSH
42465: LD_INT 2
42467: ARRAY
42468: PPUSH
42469: CALL_OW 297
42473: ST_TO_ADDR
// if tmpDist < dist then
42474: LD_VAR 0 6
42478: PUSH
42479: LD_VAR 0 5
42483: LESS
42484: IFFALSE 42506
// begin result := i ;
42486: LD_ADDR_VAR 0 3
42490: PUSH
42491: LD_VAR 0 4
42495: ST_TO_ADDR
// dist := tmpDist ;
42496: LD_ADDR_VAR 0 5
42500: PUSH
42501: LD_VAR 0 6
42505: ST_TO_ADDR
// end ; end ;
42506: GO 42438
42508: POP
42509: POP
// end ;
42510: LD_VAR 0 3
42514: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42515: LD_INT 0
42517: PPUSH
// uc_side := side ;
42518: LD_ADDR_OWVAR 20
42522: PUSH
42523: LD_VAR 0 1
42527: ST_TO_ADDR
// uc_nation := 3 ;
42528: LD_ADDR_OWVAR 21
42532: PUSH
42533: LD_INT 3
42535: ST_TO_ADDR
// vc_chassis := 25 ;
42536: LD_ADDR_OWVAR 37
42540: PUSH
42541: LD_INT 25
42543: ST_TO_ADDR
// vc_engine := engine_siberite ;
42544: LD_ADDR_OWVAR 39
42548: PUSH
42549: LD_INT 3
42551: ST_TO_ADDR
// vc_control := control_computer ;
42552: LD_ADDR_OWVAR 38
42556: PUSH
42557: LD_INT 3
42559: ST_TO_ADDR
// vc_weapon := 59 ;
42560: LD_ADDR_OWVAR 40
42564: PUSH
42565: LD_INT 59
42567: ST_TO_ADDR
// result := CreateVehicle ;
42568: LD_ADDR_VAR 0 5
42572: PUSH
42573: CALL_OW 45
42577: ST_TO_ADDR
// SetDir ( result , d ) ;
42578: LD_VAR 0 5
42582: PPUSH
42583: LD_VAR 0 4
42587: PPUSH
42588: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42592: LD_VAR 0 5
42596: PPUSH
42597: LD_VAR 0 2
42601: PPUSH
42602: LD_VAR 0 3
42606: PPUSH
42607: LD_INT 0
42609: PPUSH
42610: CALL_OW 48
// end ;
42614: LD_VAR 0 5
42618: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42619: LD_INT 0
42621: PPUSH
42622: PPUSH
42623: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42624: LD_ADDR_VAR 0 2
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42647: LD_VAR 0 1
42651: NOT
42652: PUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: CALL_OW 264
42662: PUSH
42663: LD_INT 12
42665: PUSH
42666: LD_INT 51
42668: PUSH
42669: LD_INT 32
42671: PUSH
42672: LD_INT 89
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: IN
42681: NOT
42682: OR
42683: IFFALSE 42687
// exit ;
42685: GO 42785
// for i := 1 to 3 do
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: DOUBLE
42693: LD_INT 1
42695: DEC
42696: ST_TO_ADDR
42697: LD_INT 3
42699: PUSH
42700: FOR_TO
42701: IFFALSE 42783
// begin tmp := GetCargo ( cargo , i ) ;
42703: LD_ADDR_VAR 0 4
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: LD_VAR 0 3
42717: PPUSH
42718: CALL_OW 289
42722: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42723: LD_ADDR_VAR 0 2
42727: PUSH
42728: LD_VAR 0 2
42732: PPUSH
42733: LD_VAR 0 3
42737: PPUSH
42738: LD_VAR 0 4
42742: PPUSH
42743: CALL_OW 1
42747: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42748: LD_ADDR_VAR 0 2
42752: PUSH
42753: LD_VAR 0 2
42757: PPUSH
42758: LD_INT 4
42760: PPUSH
42761: LD_VAR 0 2
42765: PUSH
42766: LD_INT 4
42768: ARRAY
42769: PUSH
42770: LD_VAR 0 4
42774: PLUS
42775: PPUSH
42776: CALL_OW 1
42780: ST_TO_ADDR
// end ;
42781: GO 42700
42783: POP
42784: POP
// end ;
42785: LD_VAR 0 2
42789: RET
// export function Length ( array ) ; begin
42790: LD_INT 0
42792: PPUSH
// result := array + 0 ;
42793: LD_ADDR_VAR 0 2
42797: PUSH
42798: LD_VAR 0 1
42802: PUSH
42803: LD_INT 0
42805: PLUS
42806: ST_TO_ADDR
// end ;
42807: LD_VAR 0 2
42811: RET
// export function PrepareArray ( array ) ; begin
42812: LD_INT 0
42814: PPUSH
// result := array diff 0 ;
42815: LD_ADDR_VAR 0 2
42819: PUSH
42820: LD_VAR 0 1
42824: PUSH
42825: LD_INT 0
42827: DIFF
42828: ST_TO_ADDR
// if not result [ 1 ] then
42829: LD_VAR 0 2
42833: PUSH
42834: LD_INT 1
42836: ARRAY
42837: NOT
42838: IFFALSE 42858
// result := Delete ( result , 1 ) ;
42840: LD_ADDR_VAR 0 2
42844: PUSH
42845: LD_VAR 0 2
42849: PPUSH
42850: LD_INT 1
42852: PPUSH
42853: CALL_OW 3
42857: ST_TO_ADDR
// end ;
42858: LD_VAR 0 2
42862: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42863: LD_INT 0
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
// sibRocketRange := 25 ;
42869: LD_ADDR_VAR 0 6
42873: PUSH
42874: LD_INT 25
42876: ST_TO_ADDR
// result := false ;
42877: LD_ADDR_VAR 0 4
42881: PUSH
42882: LD_INT 0
42884: ST_TO_ADDR
// for i := 0 to 5 do
42885: LD_ADDR_VAR 0 5
42889: PUSH
42890: DOUBLE
42891: LD_INT 0
42893: DEC
42894: ST_TO_ADDR
42895: LD_INT 5
42897: PUSH
42898: FOR_TO
42899: IFFALSE 42966
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42901: LD_VAR 0 1
42905: PPUSH
42906: LD_VAR 0 5
42910: PPUSH
42911: LD_VAR 0 6
42915: PPUSH
42916: CALL_OW 272
42920: PPUSH
42921: LD_VAR 0 2
42925: PPUSH
42926: LD_VAR 0 5
42930: PPUSH
42931: LD_VAR 0 6
42935: PPUSH
42936: CALL_OW 273
42940: PPUSH
42941: LD_VAR 0 3
42945: PPUSH
42946: CALL_OW 309
42950: IFFALSE 42964
// begin result := true ;
42952: LD_ADDR_VAR 0 4
42956: PUSH
42957: LD_INT 1
42959: ST_TO_ADDR
// exit ;
42960: POP
42961: POP
42962: GO 42968
// end ;
42964: GO 42898
42966: POP
42967: POP
// end ;
42968: LD_VAR 0 4
42972: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42973: LD_INT 0
42975: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42976: LD_VAR 0 1
42980: PPUSH
42981: LD_VAR 0 2
42985: PPUSH
42986: LD_INT 0
42988: PPUSH
42989: LD_INT 0
42991: PPUSH
42992: LD_INT 1
42994: PPUSH
42995: LD_INT 0
42997: PPUSH
42998: CALL_OW 587
// end ;
43002: LD_VAR 0 3
43006: RET
// export function CenterOnNow ( unit ) ; begin
43007: LD_INT 0
43009: PPUSH
// result := IsInUnit ( unit ) ;
43010: LD_ADDR_VAR 0 2
43014: PUSH
43015: LD_VAR 0 1
43019: PPUSH
43020: CALL_OW 310
43024: ST_TO_ADDR
// if not result then
43025: LD_VAR 0 2
43029: NOT
43030: IFFALSE 43042
// result := unit ;
43032: LD_ADDR_VAR 0 2
43036: PUSH
43037: LD_VAR 0 1
43041: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43042: LD_VAR 0 1
43046: PPUSH
43047: CALL_OW 87
// end ;
43051: LD_VAR 0 2
43055: RET
